; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_shift.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__372CD743_pmc_shift@c DB 01H
msvcjmc	ENDS
PUBLIC	_RightShift_Imp_DIV
PUBLIC	_RightShift_Imp
PUBLIC	_LeftShift_Imp_DIV
PUBLIC	_LeftShift_Imp
PUBLIC	_Initialize_Shift
PUBLIC	_PMC_RightShift_X_I@12
PUBLIC	_PMC_RightShift_X_L@16
PUBLIC	_PMC_LeftShift_X_I@12
PUBLIC	_PMC_LeftShift_X_L@16
PUBLIC	__JustMyCode_Default
EXTRN	_CheckBlockLight:PROC
EXTRN	_AllocateNumber:PROC
EXTRN	_CommitNumber:PROC
EXTRN	_CheckNumber:PROC
EXTRN	_DuplicateNumber:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_number_zero:BYTE
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_count$ = 12						; size = 4
__ZERO_MEMORY_UNIT_DIV PROC

; 127  :     {

	push	ebp
	mov	ebp, esp
	push	edi
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 128  : #ifdef _M_IX86
; 129  :         __stosd((unsigned long*)d, 0, (unsigned long)count);

	mov	edi, DWORD PTR _d$[ebp]
	xor	eax, eax
	mov	ecx, DWORD PTR _count$[ebp]
	rep stosd

; 130  : #elif defined(_M_X64)
; 131  : #ifdef _MSC_VER
; 132  :         __stosd((unsigned long*)d, 0, (unsigned long)count);
; 133  : #elif defined(__GNUC__)
; 134  :         __stosq(d, 0, count);
; 135  : #else
; 136  : #error unknown compiler
; 137  : #endif
; 138  : #else
; 139  : #error unknown platform
; 140  : #endif
; 141  :     }

	pop	edi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ZERO_MEMORY_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_count$ = 12						; size = 4
__ZERO_MEMORY_UNIT PROC

; 116  :     {

	push	ebp
	mov	ebp, esp
	push	edi
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 117  : #ifdef _M_IX86
; 118  :         __stosd((unsigned long*)d, 0, (unsigned long)count);

	mov	edi, DWORD PTR _d$[ebp]
	xor	eax, eax
	mov	ecx, DWORD PTR _count$[ebp]
	rep stosd

; 119  : #elif defined(_M_X64)
; 120  :         __stosq(d, 0, count);
; 121  : #else
; 122  : #error unknown platform
; 123  : #endif
; 124  :     }

	pop	edi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ZERO_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT_DIV PROC

; 77   :     {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 78   : #ifdef _M_IX86
; 79   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, DWORD PTR _d$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep movsd

; 80   : #elif defined(_M_X64)
; 81   : #ifdef _MSC_VER
; 82   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);
; 83   : #elif defined(__GNUC__)
; 84   :         __movsq(d, s, count);
; 85   : #else
; 86   : #error unknown compiler
; 87   : #endif
; 88   : #else
; 89   : #error unknown platform
; 90   : #endif
; 91   :     }

	pop	edi
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__COPY_MEMORY_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT PROC

; 66   :     {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 67   : #ifdef _M_IX86
; 68   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, DWORD PTR _d$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep movsd

; 69   : #elif defined(_M_X64)
; 70   :         __movsq(d, s, count);
; 71   : #else
; 72   : #error unknown platform
; 73   : #endif
; 74   :     }

	pop	edi
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c
_TEXT	SEGMENT
_no_light_check_code$1 = -36				; size = 4
_o_bit_count$2 = -28					; size = 4
_p_bit_count$3 = -24					; size = 4
_result$ = -20						; size = 4
_no$ = -12						; size = 4
_np$ = -4						; size = 4
_p$ = 8							; size = 4
_n$ = 12						; size = 8
_o$ = 20						; size = 4
_PMC_LeftShift_X_L@16 PROC

; 721  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __372CD743_pmc_shift@c
	call	@__CheckForDebuggerJustMyCode@4

; 722  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(n) * 8)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@PMC_LeftSh

; 723  :     {
; 724  :         // _UINT64_T が 1 ワードで表現しきれない処理系には対応しない
; 725  :         return (PMC_STATUS_NOT_SUPPORTED);

	mov	eax, -6					; fffffffaH
	jmp	$LN1@PMC_LeftSh
$LN2@PMC_LeftSh:

; 726  :     }
; 727  :     if (p == NULL)

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN3@PMC_LeftSh

; 728  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_LeftSh
$LN3@PMC_LeftSh:

; 729  :     if (o == NULL)

	cmp	DWORD PTR _o$[ebp], 0
	jne	SHORT $LN4@PMC_LeftSh

; 730  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_LeftSh
$LN4@PMC_LeftSh:

; 731  :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR _np$[ebp], ecx

; 732  :     NUMBER_HEADER* no;
; 733  :     PMC_STATUS_CODE result;
; 734  :     if ((result = CheckNumber(np)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _np$[ebp]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_LeftSh

; 735  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_LeftSh
$LN5@PMC_LeftSh:

; 736  :     if (np->IS_ZERO)

	mov	eax, DWORD PTR _np$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN6@PMC_LeftSh

; 737  :         *o = &number_zero;

	mov	edx, DWORD PTR _o$[ebp]
	mov	DWORD PTR [edx], OFFSET _number_zero
	jmp	$LN7@PMC_LeftSh
$LN6@PMC_LeftSh:

; 738  :     else if (n == 0)

	mov	eax, DWORD PTR _n$[ebp]
	or	eax, DWORD PTR _n$[ebp+4]
	jne	SHORT $LN8@PMC_LeftSh

; 739  :     {
; 740  :         if ((result = DuplicateNumber(np, &no)) != PMC_STATUS_OK)

	lea	ecx, DWORD PTR _no$[ebp]
	push	ecx
	mov	edx, DWORD PTR _np$[ebp]
	push	edx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN10@PMC_LeftSh

; 741  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_LeftSh
$LN10@PMC_LeftSh:

; 742  :         *o = no;

	mov	eax, DWORD PTR _o$[ebp]
	mov	ecx, DWORD PTR _no$[ebp]
	mov	DWORD PTR [eax], ecx

; 743  :     }

	jmp	$LN7@PMC_LeftSh
$LN8@PMC_LeftSh:

; 744  :     else
; 745  :     {
; 746  :         __UNIT_TYPE p_bit_count = np->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR _np$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _p_bit_count$3[ebp], eax

; 747  :         __UNIT_TYPE o_bit_count = p_bit_count + (__UNIT_TYPE)n;

	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, DWORD PTR _p_bit_count$3[ebp]
	mov	DWORD PTR _o_bit_count$2[ebp], ecx

; 748  :         __UNIT_TYPE no_light_check_code;
; 749  :         if ((result = AllocateNumber(&no, o_bit_count, &no_light_check_code)) != PMC_STATUS_OK)

	lea	edx, DWORD PTR _no_light_check_code$1[ebp]
	push	edx
	mov	eax, DWORD PTR _o_bit_count$2[ebp]
	push	eax
	lea	ecx, DWORD PTR _no$[ebp]
	push	ecx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN11@PMC_LeftSh

; 750  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_LeftSh
$LN11@PMC_LeftSh:

; 751  :         LeftShift_Imp(np->BLOCK, np->UNIT_WORD_COUNT, (__UNIT_TYPE)n, no->BLOCK, FALSE);

	push	0
	mov	edx, DWORD PTR _no$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	mov	edx, DWORD PTR _np$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _np$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_LeftShift_Imp
	add	esp, 20					; 00000014H

; 752  :         if ((result = CheckBlockLight(no->BLOCK, no_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _no_light_check_code$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _no$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN12@PMC_LeftSh

; 753  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_LeftSh
$LN12@PMC_LeftSh:

; 754  :         CommitNumber(no);

	mov	eax, DWORD PTR _no$[ebp]
	push	eax
	call	_CommitNumber
	add	esp, 4

; 755  :         *o = no;

	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR _no$[ebp]
	mov	DWORD PTR [ecx], edx
$LN7@PMC_LeftSh:

; 756  :     }
; 757  : #ifdef _DEBUG
; 758  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _o$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_LeftSh

; 759  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_LeftSh
$LN13@PMC_LeftSh:

; 760  : #endif
; 761  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_LeftSh:

; 762  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@PMC_LeftSh
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	1
$LN18@PMC_LeftSh:
	DD	2
	DD	$LN17@PMC_LeftSh
$LN17@PMC_LeftSh:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN15@PMC_LeftSh
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN16@PMC_LeftSh
$LN16@PMC_LeftSh:
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN15@PMC_LeftSh:
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	0
_PMC_LeftShift_X_L@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c
_TEXT	SEGMENT
_no_light_check_code$1 = -36				; size = 4
_o_bit_count$2 = -28					; size = 4
_p_bit_count$3 = -24					; size = 4
_result$ = -20						; size = 4
_no$ = -12						; size = 4
_np$ = -4						; size = 4
_p$ = 8							; size = 4
_n$ = 12						; size = 4
_o$ = 16						; size = 4
_PMC_LeftShift_X_I@12 PROC

; 677  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __372CD743_pmc_shift@c
	call	@__CheckForDebuggerJustMyCode@4

; 678  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(n) * 8)

	xor	eax, eax
	je	SHORT $LN2@PMC_LeftSh

; 679  :     {
; 680  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 681  :         return (PMC_STATUS_NOT_SUPPORTED);

	mov	eax, -6					; fffffffaH
	jmp	$LN1@PMC_LeftSh
$LN2@PMC_LeftSh:

; 682  :     }
; 683  :     if (p == NULL)

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN3@PMC_LeftSh

; 684  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_LeftSh
$LN3@PMC_LeftSh:

; 685  :     if (o == NULL)

	cmp	DWORD PTR _o$[ebp], 0
	jne	SHORT $LN4@PMC_LeftSh

; 686  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_LeftSh
$LN4@PMC_LeftSh:

; 687  :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR _np$[ebp], ecx

; 688  :     NUMBER_HEADER* no;
; 689  :     PMC_STATUS_CODE result;
; 690  :     if ((result = CheckNumber(np)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _np$[ebp]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_LeftSh

; 691  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_LeftSh
$LN5@PMC_LeftSh:

; 692  :     if (np->IS_ZERO)

	mov	eax, DWORD PTR _np$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN6@PMC_LeftSh

; 693  :         *o = &number_zero;

	mov	edx, DWORD PTR _o$[ebp]
	mov	DWORD PTR [edx], OFFSET _number_zero
	jmp	$LN7@PMC_LeftSh
$LN6@PMC_LeftSh:

; 694  :     else if (n == 0)

	cmp	DWORD PTR _n$[ebp], 0
	jne	SHORT $LN8@PMC_LeftSh

; 695  :     {
; 696  :         if ((result = DuplicateNumber(np, &no)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _no$[ebp]
	push	eax
	mov	ecx, DWORD PTR _np$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN10@PMC_LeftSh

; 697  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_LeftSh
$LN10@PMC_LeftSh:

; 698  :         *o = no;

	mov	edx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR _no$[ebp]
	mov	DWORD PTR [edx], eax

; 699  :     }

	jmp	$LN7@PMC_LeftSh
$LN8@PMC_LeftSh:

; 700  :     else
; 701  :     {
; 702  :         __UNIT_TYPE p_bit_count = np->UNIT_BIT_COUNT;

	mov	ecx, DWORD PTR _np$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _p_bit_count$3[ebp], edx

; 703  :         __UNIT_TYPE o_bit_count = p_bit_count + n;

	mov	eax, DWORD PTR _p_bit_count$3[ebp]
	add	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR _o_bit_count$2[ebp], eax

; 704  :         __UNIT_TYPE no_light_check_code;
; 705  :         if ((result = AllocateNumber(&no, o_bit_count, &no_light_check_code)) != PMC_STATUS_OK)

	lea	ecx, DWORD PTR _no_light_check_code$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _o_bit_count$2[ebp]
	push	edx
	lea	eax, DWORD PTR _no$[ebp]
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN11@PMC_LeftSh

; 706  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_LeftSh
$LN11@PMC_LeftSh:

; 707  :         LeftShift_Imp(np->BLOCK, np->UNIT_WORD_COUNT, n, no->BLOCK, FALSE);

	push	0
	mov	ecx, DWORD PTR _no$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _np$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _np$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_LeftShift_Imp
	add	esp, 20					; 00000014H

; 708  :         if ((result = CheckBlockLight(no->BLOCK, no_light_check_code)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _no_light_check_code$1[ebp]
	push	edx
	mov	eax, DWORD PTR _no$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN12@PMC_LeftSh

; 709  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_LeftSh
$LN12@PMC_LeftSh:

; 710  :         CommitNumber(no);

	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	call	_CommitNumber
	add	esp, 4

; 711  :         *o = no;

	mov	eax, DWORD PTR _o$[ebp]
	mov	ecx, DWORD PTR _no$[ebp]
	mov	DWORD PTR [eax], ecx
$LN7@PMC_LeftSh:

; 712  :     }
; 713  : #ifdef _DEBUG
; 714  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_LeftSh

; 715  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_LeftSh
$LN13@PMC_LeftSh:

; 716  : #endif
; 717  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_LeftSh:

; 718  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@PMC_LeftSh
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN18@PMC_LeftSh:
	DD	2
	DD	$LN17@PMC_LeftSh
$LN17@PMC_LeftSh:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN15@PMC_LeftSh
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN16@PMC_LeftSh
$LN16@PMC_LeftSh:
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN15@PMC_LeftSh:
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	0
_PMC_LeftShift_X_I@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c
_TEXT	SEGMENT
tv164 = -48						; size = 8
_no_light_check_code$1 = -36				; size = 4
_o_bit_count$2 = -28					; size = 4
_p_bit_count$3 = -24					; size = 4
_result$ = -20						; size = 4
_no$ = -12						; size = 4
_np$ = -4						; size = 4
_p$ = 8							; size = 4
_n$ = 12						; size = 8
_o$ = 20						; size = 4
_PMC_RightShift_X_L@16 PROC

; 628  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __372CD743_pmc_shift@c
	call	@__CheckForDebuggerJustMyCode@4

; 629  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(n) * 8)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@PMC_RightS

; 630  :     {
; 631  :         // _UINT64_T が 1 ワードで表現しきれない処理系には対応しない
; 632  :         return (PMC_STATUS_NOT_SUPPORTED);

	mov	eax, -6					; fffffffaH
	jmp	$LN1@PMC_RightS
$LN2@PMC_RightS:

; 633  :     }
; 634  :     if (p == NULL)

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN3@PMC_RightS

; 635  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_RightS
$LN3@PMC_RightS:

; 636  :     if (o == NULL)

	cmp	DWORD PTR _o$[ebp], 0
	jne	SHORT $LN4@PMC_RightS

; 637  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_RightS
$LN4@PMC_RightS:

; 638  :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR _np$[ebp], ecx

; 639  :     NUMBER_HEADER* no;
; 640  :     PMC_STATUS_CODE result;
; 641  :     if ((result = CheckNumber(np)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _np$[ebp]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_RightS

; 642  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_RightS
$LN5@PMC_RightS:

; 643  :     if (np->IS_ZERO)

	mov	eax, DWORD PTR _np$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN6@PMC_RightS

; 644  :         *o = &number_zero;

	mov	edx, DWORD PTR _o$[ebp]
	mov	DWORD PTR [edx], OFFSET _number_zero
	jmp	$LN7@PMC_RightS
$LN6@PMC_RightS:

; 645  :     else if (n == 0)

	mov	eax, DWORD PTR _n$[ebp]
	or	eax, DWORD PTR _n$[ebp+4]
	jne	SHORT $LN8@PMC_RightS

; 646  :     {
; 647  :         if ((result = DuplicateNumber(np, &no)) != PMC_STATUS_OK)

	lea	ecx, DWORD PTR _no$[ebp]
	push	ecx
	mov	edx, DWORD PTR _np$[ebp]
	push	edx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN10@PMC_RightS

; 648  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_RightS
$LN10@PMC_RightS:

; 649  :         *o = no;

	mov	eax, DWORD PTR _o$[ebp]
	mov	ecx, DWORD PTR _no$[ebp]
	mov	DWORD PTR [eax], ecx

; 650  :     }

	jmp	$LN7@PMC_RightS
$LN8@PMC_RightS:

; 651  :     else
; 652  :     {
; 653  :         __UNIT_TYPE p_bit_count = np->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR _np$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _p_bit_count$3[ebp], eax

; 654  :         if (p_bit_count <= n)

	mov	ecx, DWORD PTR _p_bit_count$3[ebp]
	xor	edx, edx
	mov	DWORD PTR tv164[ebp], ecx
	mov	DWORD PTR tv164[ebp+4], edx
	mov	eax, DWORD PTR tv164[ebp+4]
	cmp	eax, DWORD PTR _n$[ebp+4]
	ja	SHORT $LN11@PMC_RightS
	jb	SHORT $LN17@PMC_RightS
	mov	ecx, DWORD PTR tv164[ebp]
	cmp	ecx, DWORD PTR _n$[ebp]
	ja	SHORT $LN11@PMC_RightS
$LN17@PMC_RightS:

; 655  :             *o = &number_zero;

	mov	edx, DWORD PTR _o$[ebp]
	mov	DWORD PTR [edx], OFFSET _number_zero
	jmp	$LN7@PMC_RightS
$LN11@PMC_RightS:

; 656  :         else
; 657  :         {
; 658  :             __UNIT_TYPE o_bit_count = p_bit_count - (__UNIT_TYPE)n;

	mov	eax, DWORD PTR _p_bit_count$3[ebp]
	sub	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR _o_bit_count$2[ebp], eax

; 659  :             __UNIT_TYPE no_light_check_code;
; 660  :             if ((result = AllocateNumber(&no, o_bit_count, &no_light_check_code)) != PMC_STATUS_OK)

	lea	ecx, DWORD PTR _no_light_check_code$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _o_bit_count$2[ebp]
	push	edx
	lea	eax, DWORD PTR _no$[ebp]
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_RightS

; 661  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_RightS
$LN13@PMC_RightS:

; 662  :             RightShift_Imp(np->BLOCK, np->UNIT_WORD_COUNT, (__UNIT_TYPE)n, no->BLOCK, FALSE);

	push	0
	mov	ecx, DWORD PTR _no$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _np$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _np$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_RightShift_Imp
	add	esp, 20					; 00000014H

; 663  :             if ((result = CheckBlockLight(no->BLOCK, no_light_check_code)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _no_light_check_code$1[ebp]
	push	edx
	mov	eax, DWORD PTR _no$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN14@PMC_RightS

; 664  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_RightS
$LN14@PMC_RightS:

; 665  :             CommitNumber(no);

	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	call	_CommitNumber
	add	esp, 4

; 666  :             *o = no;

	mov	eax, DWORD PTR _o$[ebp]
	mov	ecx, DWORD PTR _no$[ebp]
	mov	DWORD PTR [eax], ecx
$LN7@PMC_RightS:

; 667  :         }
; 668  :     }
; 669  : #ifdef _DEBUG
; 670  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN15@PMC_RightS

; 671  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_RightS
$LN15@PMC_RightS:

; 672  : #endif
; 673  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_RightS:

; 674  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@PMC_RightS
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	2
$LN21@PMC_RightS:
	DD	2
	DD	$LN20@PMC_RightS
$LN20@PMC_RightS:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN18@PMC_RightS
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN19@PMC_RightS
$LN19@PMC_RightS:
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN18@PMC_RightS:
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	0
_PMC_RightShift_X_L@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c
_TEXT	SEGMENT
_no_light_check_code$1 = -36				; size = 4
_o_bit_count$2 = -28					; size = 4
_p_bit_count$3 = -24					; size = 4
_result$ = -20						; size = 4
_no$ = -12						; size = 4
_np$ = -4						; size = 4
_p$ = 8							; size = 4
_n$ = 12						; size = 4
_o$ = 16						; size = 4
_PMC_RightShift_X_I@12 PROC

; 579  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __372CD743_pmc_shift@c
	call	@__CheckForDebuggerJustMyCode@4

; 580  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(n) * 8)

	xor	eax, eax
	je	SHORT $LN2@PMC_RightS

; 581  :     {
; 582  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 583  :         return (PMC_STATUS_NOT_SUPPORTED);

	mov	eax, -6					; fffffffaH
	jmp	$LN1@PMC_RightS
$LN2@PMC_RightS:

; 584  :     }
; 585  :     if (p == NULL)

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN3@PMC_RightS

; 586  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_RightS
$LN3@PMC_RightS:

; 587  :     if (o == NULL)

	cmp	DWORD PTR _o$[ebp], 0
	jne	SHORT $LN4@PMC_RightS

; 588  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_RightS
$LN4@PMC_RightS:

; 589  :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR _np$[ebp], ecx

; 590  :     NUMBER_HEADER* no;
; 591  :     PMC_STATUS_CODE result;
; 592  :     if ((result = CheckNumber(np)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _np$[ebp]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_RightS

; 593  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_RightS
$LN5@PMC_RightS:

; 594  :     if (np->IS_ZERO)

	mov	eax, DWORD PTR _np$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN6@PMC_RightS

; 595  :         *o = &number_zero;

	mov	edx, DWORD PTR _o$[ebp]
	mov	DWORD PTR [edx], OFFSET _number_zero
	jmp	$LN7@PMC_RightS
$LN6@PMC_RightS:

; 596  :     else if (n == 0)

	cmp	DWORD PTR _n$[ebp], 0
	jne	SHORT $LN8@PMC_RightS

; 597  :     {
; 598  :         if ((result = DuplicateNumber(np, &no)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _no$[ebp]
	push	eax
	mov	ecx, DWORD PTR _np$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN10@PMC_RightS

; 599  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_RightS
$LN10@PMC_RightS:

; 600  :         *o = no;

	mov	edx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR _no$[ebp]
	mov	DWORD PTR [edx], eax

; 601  :     }

	jmp	$LN7@PMC_RightS
$LN8@PMC_RightS:

; 602  :     else
; 603  :     {
; 604  :         __UNIT_TYPE p_bit_count = np->UNIT_BIT_COUNT;

	mov	ecx, DWORD PTR _np$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _p_bit_count$3[ebp], edx

; 605  :         if (p_bit_count <= n)

	mov	eax, DWORD PTR _p_bit_count$3[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	ja	SHORT $LN11@PMC_RightS

; 606  :             *o = &number_zero;

	mov	ecx, DWORD PTR _o$[ebp]
	mov	DWORD PTR [ecx], OFFSET _number_zero
	jmp	$LN7@PMC_RightS
$LN11@PMC_RightS:

; 607  :         else
; 608  :         {
; 609  :             __UNIT_TYPE o_bit_count = p_bit_count - n;

	mov	edx, DWORD PTR _p_bit_count$3[ebp]
	sub	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR _o_bit_count$2[ebp], edx

; 610  :             __UNIT_TYPE no_light_check_code;
; 611  :             if ((result = AllocateNumber(&no, o_bit_count, &no_light_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _no_light_check_code$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _o_bit_count$2[ebp]
	push	ecx
	lea	edx, DWORD PTR _no$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_RightS

; 612  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_RightS
$LN13@PMC_RightS:

; 613  :             RightShift_Imp(np->BLOCK, np->UNIT_WORD_COUNT, n, no->BLOCK, FALSE);

	push	0
	mov	eax, DWORD PTR _no$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _np$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _np$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_RightShift_Imp
	add	esp, 20					; 00000014H

; 614  :             if ((result = CheckBlockLight(no->BLOCK, no_light_check_code)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _no_light_check_code$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _no$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN14@PMC_RightS

; 615  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_RightS
$LN14@PMC_RightS:

; 616  :             CommitNumber(no);

	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	call	_CommitNumber
	add	esp, 4

; 617  :             *o = no;

	mov	edx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR _no$[ebp]
	mov	DWORD PTR [edx], eax
$LN7@PMC_RightS:

; 618  :         }
; 619  :     }
; 620  : #ifdef _DEBUG
; 621  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN15@PMC_RightS

; 622  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_RightS
$LN15@PMC_RightS:

; 623  : #endif
; 624  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_RightS:

; 625  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@PMC_RightS
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN20@PMC_RightS:
	DD	2
	DD	$LN19@PMC_RightS
$LN19@PMC_RightS:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN17@PMC_RightS
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN18@PMC_RightS
$LN18@PMC_RightS:
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN17@PMC_RightS:
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	0
_PMC_RightShift_X_I@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_Shift PROC

; 765  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __372CD743_pmc_shift@c
	call	@__CheckForDebuggerJustMyCode@4

; 766  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 767  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_Initialize_Shift ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c
_TEXT	SEGMENT
_count$1 = -36						; size = 4
_work$2 = -32						; size = 4
_temp$3 = -28						; size = 4
_n_rshift_bit_count$4 = -24				; size = 4
_n_lshift_bit_count$ = -20				; size = 4
_n_word_count$ = -16					; size = 4
_op$ = -12						; size = 4
_p_count$ = -8						; size = 4
_pp$ = -4						; size = 4
_p$ = 8							; size = 4
_p_word_count$ = 12					; size = 4
_n$ = 16						; size = 4
_o$ = 20						; size = 4
_padding_zero$ = 24					; size = 4
_LeftShift_Imp PROC

; 309  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __372CD743_pmc_shift@c
	call	@__CheckForDebuggerJustMyCode@4

; 310  :     __UNIT_TYPE* pp = p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _pp$[ebp], eax

; 311  :     __UNIT_TYPE p_count = p_word_count;

	mov	ecx, DWORD PTR _p_word_count$[ebp]
	mov	DWORD PTR _p_count$[ebp], ecx

; 312  :     __UNIT_TYPE* op = o;

	mov	edx, DWORD PTR _o$[ebp]
	mov	DWORD PTR _op$[ebp], edx

; 313  :     __UNIT_TYPE n_word_count = n / __UNIT_TYPE_BIT_COUNT;

	mov	eax, DWORD PTR _n$[ebp]
	shr	eax, 5
	mov	DWORD PTR _n_word_count$[ebp], eax

; 314  :     __UNIT_TYPE n_lshift_bit_count = n % __UNIT_TYPE_BIT_COUNT;

	mov	eax, DWORD PTR _n$[ebp]
	xor	edx, edx
	mov	ecx, 32					; 00000020H
	div	ecx
	mov	DWORD PTR _n_lshift_bit_count$[ebp], edx

; 315  :     if (n_lshift_bit_count == 0)

	cmp	DWORD PTR _n_lshift_bit_count$[ebp], 0
	jne	SHORT $LN4@LeftShift_

; 316  :     {
; 317  :         // シフト数がちょうどワード境界分であれば単にワード単位のデータ移動のみ行う。
; 318  :         _COPY_MEMORY_UNIT(op + n_word_count, pp, p_count);

	mov	edx, DWORD PTR _p_count$[ebp]
	push	edx
	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _n_word_count$[ebp]
	mov	edx, DWORD PTR _op$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	__COPY_MEMORY_UNIT
	add	esp, 12					; 0000000cH

; 319  :         if (padding_zero)

	cmp	DWORD PTR _padding_zero$[ebp], 0
	je	SHORT $LN6@LeftShift_

; 320  :             _ZERO_MEMORY_UNIT(op, n_word_count);

	mov	ecx, DWORD PTR _n_word_count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _op$[ebp]
	push	edx
	call	__ZERO_MEMORY_UNIT
	add	esp, 8
$LN6@LeftShift_:

; 321  :     }

	jmp	$LN1@LeftShift_
$LN4@LeftShift_:

; 322  :     else
; 323  :     {
; 324  :         __UNIT_TYPE n_rshift_bit_count = __UNIT_TYPE_BIT_COUNT - n_lshift_bit_count;

	mov	eax, 32					; 00000020H
	sub	eax, DWORD PTR _n_lshift_bit_count$[ebp]
	mov	DWORD PTR _n_rshift_bit_count$4[ebp], eax

; 325  :         pp += p_count - 1;

	mov	ecx, DWORD PTR _p_count$[ebp]
	mov	edx, DWORD PTR _pp$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4-4]
	mov	DWORD PTR _pp$[ebp], eax

; 326  :         op += p_count + n_word_count;

	mov	ecx, DWORD PTR _p_count$[ebp]
	add	ecx, DWORD PTR _n_word_count$[ebp]
	mov	edx, DWORD PTR _op$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _op$[ebp], eax

; 327  :         p_count -= 1;

	mov	ecx, DWORD PTR _p_count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _p_count$[ebp], ecx

; 328  :         __UNIT_TYPE temp = *pp;

	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _temp$3[ebp], eax

; 329  :         __UNIT_TYPE work = temp >> n_rshift_bit_count;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$2[ebp], edx

; 330  :         if (work != 0)

	cmp	DWORD PTR _work$2[ebp], 0
	je	SHORT $LN7@LeftShift_

; 331  :             *op = work;

	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [eax], ecx
$LN7@LeftShift_:

; 332  :         --pp;

	mov	edx, DWORD PTR _pp$[ebp]
	sub	edx, 4
	mov	DWORD PTR _pp$[ebp], edx

; 333  :         --op;

	mov	eax, DWORD PTR _op$[ebp]
	sub	eax, 4
	mov	DWORD PTR _op$[ebp], eax

; 334  : 
; 335  :         __UNIT_TYPE count = p_count >> 5;

	mov	ecx, DWORD PTR _p_count$[ebp]
	shr	ecx, 5
	mov	DWORD PTR _count$1[ebp], ecx
$LN2@LeftShift_:

; 336  :         while (count != 0)

	cmp	DWORD PTR _count$1[ebp], 0
	je	$LN3@LeftShift_

; 337  :         {
; 338  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 339  :             work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -1
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -1
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 340  :             work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -2
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -2
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 341  :             work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -3
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -3
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 342  :             work = temp << n_lshift_bit_count; temp = pp[-4]; work |= temp >> n_rshift_bit_count; op[-4] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -4
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -4
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 343  :             work = temp << n_lshift_bit_count; temp = pp[-5]; work |= temp >> n_rshift_bit_count; op[-5] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -5
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -5
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 344  :             work = temp << n_lshift_bit_count; temp = pp[-6]; work |= temp >> n_rshift_bit_count; op[-6] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -6
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -6
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 345  :             work = temp << n_lshift_bit_count; temp = pp[-7]; work |= temp >> n_rshift_bit_count; op[-7] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -7
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -7
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 346  :             work = temp << n_lshift_bit_count; temp = pp[-8]; work |= temp >> n_rshift_bit_count; op[-8] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -8
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -8
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 347  :             work = temp << n_lshift_bit_count; temp = pp[-9]; work |= temp >> n_rshift_bit_count; op[-9] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -9
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -9
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 348  :             work = temp << n_lshift_bit_count; temp = pp[-10]; work |= temp >> n_rshift_bit_count; op[-10] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -10
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -10
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 349  :             work = temp << n_lshift_bit_count; temp = pp[-11]; work |= temp >> n_rshift_bit_count; op[-11] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -11
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -11
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 350  :             work = temp << n_lshift_bit_count; temp = pp[-12]; work |= temp >> n_rshift_bit_count; op[-12] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -12
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -12
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 351  :             work = temp << n_lshift_bit_count; temp = pp[-13]; work |= temp >> n_rshift_bit_count; op[-13] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -13
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -13
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 352  :             work = temp << n_lshift_bit_count; temp = pp[-14]; work |= temp >> n_rshift_bit_count; op[-14] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -14
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -14
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 353  :             work = temp << n_lshift_bit_count; temp = pp[-15]; work |= temp >> n_rshift_bit_count; op[-15] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -15
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -15
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 354  :             work = temp << n_lshift_bit_count; temp = pp[-16]; work |= temp >> n_rshift_bit_count; op[-16] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -16
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -16
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 355  :             work = temp << n_lshift_bit_count; temp = pp[-17]; work |= temp >> n_rshift_bit_count; op[-17] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -17
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -17
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 356  :             work = temp << n_lshift_bit_count; temp = pp[-18]; work |= temp >> n_rshift_bit_count; op[-18] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -18
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -18
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 357  :             work = temp << n_lshift_bit_count; temp = pp[-19]; work |= temp >> n_rshift_bit_count; op[-19] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -19
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -19
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 358  :             work = temp << n_lshift_bit_count; temp = pp[-20]; work |= temp >> n_rshift_bit_count; op[-20] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -20
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -20
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 359  :             work = temp << n_lshift_bit_count; temp = pp[-21]; work |= temp >> n_rshift_bit_count; op[-21] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -21
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -21
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 360  :             work = temp << n_lshift_bit_count; temp = pp[-22]; work |= temp >> n_rshift_bit_count; op[-22] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -22
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -22
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 361  :             work = temp << n_lshift_bit_count; temp = pp[-23]; work |= temp >> n_rshift_bit_count; op[-23] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -23
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -23
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 362  :             work = temp << n_lshift_bit_count; temp = pp[-24]; work |= temp >> n_rshift_bit_count; op[-24] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -24
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -24
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 363  :             work = temp << n_lshift_bit_count; temp = pp[-25]; work |= temp >> n_rshift_bit_count; op[-25] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -25
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -25
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 364  :             work = temp << n_lshift_bit_count; temp = pp[-26]; work |= temp >> n_rshift_bit_count; op[-26] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -26
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -26
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 365  :             work = temp << n_lshift_bit_count; temp = pp[-27]; work |= temp >> n_rshift_bit_count; op[-27] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -27
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -27
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 366  :             work = temp << n_lshift_bit_count; temp = pp[-28]; work |= temp >> n_rshift_bit_count; op[-28] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -28
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -28
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 367  :             work = temp << n_lshift_bit_count; temp = pp[-29]; work |= temp >> n_rshift_bit_count; op[-29] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -29
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -29
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 368  :             work = temp << n_lshift_bit_count; temp = pp[-30]; work |= temp >> n_rshift_bit_count; op[-30] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -30
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -30
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 369  :             work = temp << n_lshift_bit_count; temp = pp[-31]; work |= temp >> n_rshift_bit_count; op[-31] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -31
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -31
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 370  :             pp -= 32;

	mov	ecx, DWORD PTR _pp$[ebp]
	sub	ecx, 128				; 00000080H
	mov	DWORD PTR _pp$[ebp], ecx

; 371  :             op -= 32;

	mov	edx, DWORD PTR _op$[ebp]
	sub	edx, 128				; 00000080H
	mov	DWORD PTR _op$[ebp], edx

; 372  :             --count;

	mov	eax, DWORD PTR _count$1[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$1[ebp], eax

; 373  :         }

	jmp	$LN2@LeftShift_
$LN3@LeftShift_:

; 374  : 
; 375  :         if (p_count & 0x10)

	mov	ecx, DWORD PTR _p_count$[ebp]
	and	ecx, 16					; 00000010H
	je	$LN8@LeftShift_

; 376  :         {
; 377  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 378  :             work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -1
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -1
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 379  :             work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -2
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -2
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 380  :             work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -3
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -3
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 381  :             work = temp << n_lshift_bit_count; temp = pp[-4]; work |= temp >> n_rshift_bit_count; op[-4] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -4
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -4
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 382  :             work = temp << n_lshift_bit_count; temp = pp[-5]; work |= temp >> n_rshift_bit_count; op[-5] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -5
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -5
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 383  :             work = temp << n_lshift_bit_count; temp = pp[-6]; work |= temp >> n_rshift_bit_count; op[-6] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -6
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -6
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 384  :             work = temp << n_lshift_bit_count; temp = pp[-7]; work |= temp >> n_rshift_bit_count; op[-7] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -7
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -7
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 385  :             work = temp << n_lshift_bit_count; temp = pp[-8]; work |= temp >> n_rshift_bit_count; op[-8] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -8
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -8
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 386  :             work = temp << n_lshift_bit_count; temp = pp[-9]; work |= temp >> n_rshift_bit_count; op[-9] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -9
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -9
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 387  :             work = temp << n_lshift_bit_count; temp = pp[-10]; work |= temp >> n_rshift_bit_count; op[-10] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -10
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -10
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 388  :             work = temp << n_lshift_bit_count; temp = pp[-11]; work |= temp >> n_rshift_bit_count; op[-11] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -11
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -11
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 389  :             work = temp << n_lshift_bit_count; temp = pp[-12]; work |= temp >> n_rshift_bit_count; op[-12] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -12
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -12
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 390  :             work = temp << n_lshift_bit_count; temp = pp[-13]; work |= temp >> n_rshift_bit_count; op[-13] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -13
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -13
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 391  :             work = temp << n_lshift_bit_count; temp = pp[-14]; work |= temp >> n_rshift_bit_count; op[-14] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -14
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -14
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 392  :             work = temp << n_lshift_bit_count; temp = pp[-15]; work |= temp >> n_rshift_bit_count; op[-15] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -15
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -15
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 393  :             pp -= 16;

	mov	ecx, DWORD PTR _pp$[ebp]
	sub	ecx, 64					; 00000040H
	mov	DWORD PTR _pp$[ebp], ecx

; 394  :             op -= 16;

	mov	edx, DWORD PTR _op$[ebp]
	sub	edx, 64					; 00000040H
	mov	DWORD PTR _op$[ebp], edx
$LN8@LeftShift_:

; 395  :         }
; 396  : 
; 397  :         if (p_count & 0x8)

	mov	eax, DWORD PTR _p_count$[ebp]
	and	eax, 8
	je	$LN9@LeftShift_

; 398  :         {
; 399  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 400  :             work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -1
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -1
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 401  :             work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -2
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -2
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 402  :             work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -3
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -3
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 403  :             work = temp << n_lshift_bit_count; temp = pp[-4]; work |= temp >> n_rshift_bit_count; op[-4] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -4
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -4
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 404  :             work = temp << n_lshift_bit_count; temp = pp[-5]; work |= temp >> n_rshift_bit_count; op[-5] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -5
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -5
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 405  :             work = temp << n_lshift_bit_count; temp = pp[-6]; work |= temp >> n_rshift_bit_count; op[-6] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -6
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -6
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 406  :             work = temp << n_lshift_bit_count; temp = pp[-7]; work |= temp >> n_rshift_bit_count; op[-7] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -7
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -7
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 407  :             pp -= 8;

	mov	ecx, DWORD PTR _pp$[ebp]
	sub	ecx, 32					; 00000020H
	mov	DWORD PTR _pp$[ebp], ecx

; 408  :             op -= 8;

	mov	edx, DWORD PTR _op$[ebp]
	sub	edx, 32					; 00000020H
	mov	DWORD PTR _op$[ebp], edx
$LN9@LeftShift_:

; 409  :         }
; 410  : 
; 411  :         if (p_count & 0x4)

	mov	eax, DWORD PTR _p_count$[ebp]
	and	eax, 4
	je	$LN10@LeftShift_

; 412  :         {
; 413  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 414  :             work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -1
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -1
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 415  :             work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -2
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -2
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 416  :             work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -3
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -3
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 417  :             pp -= 4;

	mov	ecx, DWORD PTR _pp$[ebp]
	sub	ecx, 16					; 00000010H
	mov	DWORD PTR _pp$[ebp], ecx

; 418  :             op -= 4;

	mov	edx, DWORD PTR _op$[ebp]
	sub	edx, 16					; 00000010H
	mov	DWORD PTR _op$[ebp], edx
$LN10@LeftShift_:

; 419  :         }
; 420  : 
; 421  :         if (p_count & 0x2)

	mov	eax, DWORD PTR _p_count$[ebp]
	and	eax, 2
	je	$LN11@LeftShift_

; 422  :         {
; 423  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 424  :             work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -1
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -1
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 425  :             pp -= 2;

	mov	ecx, DWORD PTR _pp$[ebp]
	sub	ecx, 8
	mov	DWORD PTR _pp$[ebp], ecx

; 426  :             op -= 2;

	mov	edx, DWORD PTR _op$[ebp]
	sub	edx, 8
	mov	DWORD PTR _op$[ebp], edx
$LN11@LeftShift_:

; 427  :         }
; 428  : 
; 429  :         if (p_count & 0x1)

	mov	eax, DWORD PTR _p_count$[ebp]
	and	eax, 1
	je	SHORT $LN12@LeftShift_

; 430  :         {
; 431  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 432  :             pp -= 1;

	mov	ecx, DWORD PTR _pp$[ebp]
	sub	ecx, 4
	mov	DWORD PTR _pp$[ebp], ecx

; 433  :             op -= 1;

	mov	edx, DWORD PTR _op$[ebp]
	sub	edx, 4
	mov	DWORD PTR _op$[ebp], edx
$LN12@LeftShift_:

; 434  :         }
; 435  :         work = temp << n_lshift_bit_count;

	mov	eax, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	eax, cl
	mov	DWORD PTR _work$2[ebp], eax

; 436  :         *op = work;

	mov	ecx, DWORD PTR _op$[ebp]
	mov	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [ecx], edx

; 437  : 
; 438  :         if (padding_zero)

	cmp	DWORD PTR _padding_zero$[ebp], 0
	je	SHORT $LN1@LeftShift_

; 439  :             _ZERO_MEMORY_UNIT(o, n_word_count);

	mov	eax, DWORD PTR _n_word_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _o$[ebp]
	push	ecx
	call	__ZERO_MEMORY_UNIT
	add	esp, 8
$LN1@LeftShift_:

; 440  :     }
; 441  : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LeftShift_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c
_TEXT	SEGMENT
_count$1 = -36						; size = 4
_work$2 = -32						; size = 4
_temp$3 = -28						; size = 4
_n_rshift_bit_count$4 = -24				; size = 4
_n_lshift_bit_count$ = -20				; size = 4
_n_word_count$ = -16					; size = 4
_op$ = -12						; size = 4
_p_count$ = -8						; size = 4
_pp$ = -4						; size = 4
_p$ = 8							; size = 4
_p_word_count$ = 12					; size = 4
_n$ = 16						; size = 4
_o$ = 20						; size = 4
_padding_zero$ = 24					; size = 4
_LeftShift_Imp_DIV PROC

; 444  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __372CD743_pmc_shift@c
	call	@__CheckForDebuggerJustMyCode@4

; 445  :     __UNIT_TYPE_DIV* pp = p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _pp$[ebp], eax

; 446  :     __UNIT_TYPE p_count = p_word_count;

	mov	ecx, DWORD PTR _p_word_count$[ebp]
	mov	DWORD PTR _p_count$[ebp], ecx

; 447  :     __UNIT_TYPE_DIV* op = o;

	mov	edx, DWORD PTR _o$[ebp]
	mov	DWORD PTR _op$[ebp], edx

; 448  :     __UNIT_TYPE n_word_count = n / __UNIT_TYPE_BIT_COUNT;

	mov	eax, DWORD PTR _n$[ebp]
	shr	eax, 5
	mov	DWORD PTR _n_word_count$[ebp], eax

; 449  :     __UNIT_TYPE n_lshift_bit_count = n % __UNIT_TYPE_BIT_COUNT;

	mov	eax, DWORD PTR _n$[ebp]
	xor	edx, edx
	mov	ecx, 32					; 00000020H
	div	ecx
	mov	DWORD PTR _n_lshift_bit_count$[ebp], edx

; 450  :     if (n_lshift_bit_count == 0)

	cmp	DWORD PTR _n_lshift_bit_count$[ebp], 0
	jne	SHORT $LN4@LeftShift_

; 451  :     {
; 452  :         // シフト数がちょうどワード境界分であれば単にワード単位のデータ移動のみ行う。
; 453  :         _COPY_MEMORY_UNIT_DIV(op + n_word_count, pp, p_count);

	mov	edx, DWORD PTR _p_count$[ebp]
	push	edx
	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _n_word_count$[ebp]
	mov	edx, DWORD PTR _op$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	__COPY_MEMORY_UNIT_DIV
	add	esp, 12					; 0000000cH

; 454  :         if (padding_zero)

	cmp	DWORD PTR _padding_zero$[ebp], 0
	je	SHORT $LN6@LeftShift_

; 455  :             _ZERO_MEMORY_UNIT_DIV(op, n_word_count);

	mov	ecx, DWORD PTR _n_word_count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _op$[ebp]
	push	edx
	call	__ZERO_MEMORY_UNIT_DIV
	add	esp, 8
$LN6@LeftShift_:

; 456  :     }

	jmp	$LN1@LeftShift_
$LN4@LeftShift_:

; 457  :     else
; 458  :     {
; 459  :         __UNIT_TYPE n_rshift_bit_count = __UNIT_TYPE_BIT_COUNT - n_lshift_bit_count;

	mov	eax, 32					; 00000020H
	sub	eax, DWORD PTR _n_lshift_bit_count$[ebp]
	mov	DWORD PTR _n_rshift_bit_count$4[ebp], eax

; 460  :         pp += p_count - 1;

	mov	ecx, DWORD PTR _p_count$[ebp]
	mov	edx, DWORD PTR _pp$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4-4]
	mov	DWORD PTR _pp$[ebp], eax

; 461  :         op += p_count + n_word_count;

	mov	ecx, DWORD PTR _p_count$[ebp]
	add	ecx, DWORD PTR _n_word_count$[ebp]
	mov	edx, DWORD PTR _op$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _op$[ebp], eax

; 462  :         p_count -= 1;

	mov	ecx, DWORD PTR _p_count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _p_count$[ebp], ecx

; 463  :         __UNIT_TYPE_DIV temp = *pp;

	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _temp$3[ebp], eax

; 464  :         __UNIT_TYPE_DIV work = temp >> n_rshift_bit_count;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$2[ebp], edx

; 465  :         if (work != 0)

	cmp	DWORD PTR _work$2[ebp], 0
	je	SHORT $LN7@LeftShift_

; 466  :             *op = work;

	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [eax], ecx
$LN7@LeftShift_:

; 467  :         --pp;

	mov	edx, DWORD PTR _pp$[ebp]
	sub	edx, 4
	mov	DWORD PTR _pp$[ebp], edx

; 468  :         --op;

	mov	eax, DWORD PTR _op$[ebp]
	sub	eax, 4
	mov	DWORD PTR _op$[ebp], eax

; 469  : 
; 470  :         __UNIT_TYPE count = p_count >> 5;

	mov	ecx, DWORD PTR _p_count$[ebp]
	shr	ecx, 5
	mov	DWORD PTR _count$1[ebp], ecx
$LN2@LeftShift_:

; 471  :         while (count != 0)

	cmp	DWORD PTR _count$1[ebp], 0
	je	$LN3@LeftShift_

; 472  :         {
; 473  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 474  :             work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -1
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -1
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 475  :             work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -2
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -2
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 476  :             work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -3
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -3
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 477  :             work = temp << n_lshift_bit_count; temp = pp[-4]; work |= temp >> n_rshift_bit_count; op[-4] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -4
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -4
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 478  :             work = temp << n_lshift_bit_count; temp = pp[-5]; work |= temp >> n_rshift_bit_count; op[-5] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -5
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -5
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 479  :             work = temp << n_lshift_bit_count; temp = pp[-6]; work |= temp >> n_rshift_bit_count; op[-6] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -6
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -6
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 480  :             work = temp << n_lshift_bit_count; temp = pp[-7]; work |= temp >> n_rshift_bit_count; op[-7] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -7
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -7
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 481  :             work = temp << n_lshift_bit_count; temp = pp[-8]; work |= temp >> n_rshift_bit_count; op[-8] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -8
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -8
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 482  :             work = temp << n_lshift_bit_count; temp = pp[-9]; work |= temp >> n_rshift_bit_count; op[-9] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -9
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -9
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 483  :             work = temp << n_lshift_bit_count; temp = pp[-10]; work |= temp >> n_rshift_bit_count; op[-10] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -10
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -10
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 484  :             work = temp << n_lshift_bit_count; temp = pp[-11]; work |= temp >> n_rshift_bit_count; op[-11] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -11
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -11
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 485  :             work = temp << n_lshift_bit_count; temp = pp[-12]; work |= temp >> n_rshift_bit_count; op[-12] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -12
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -12
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 486  :             work = temp << n_lshift_bit_count; temp = pp[-13]; work |= temp >> n_rshift_bit_count; op[-13] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -13
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -13
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 487  :             work = temp << n_lshift_bit_count; temp = pp[-14]; work |= temp >> n_rshift_bit_count; op[-14] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -14
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -14
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 488  :             work = temp << n_lshift_bit_count; temp = pp[-15]; work |= temp >> n_rshift_bit_count; op[-15] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -15
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -15
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 489  :             work = temp << n_lshift_bit_count; temp = pp[-16]; work |= temp >> n_rshift_bit_count; op[-16] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -16
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -16
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 490  :             work = temp << n_lshift_bit_count; temp = pp[-17]; work |= temp >> n_rshift_bit_count; op[-17] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -17
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -17
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 491  :             work = temp << n_lshift_bit_count; temp = pp[-18]; work |= temp >> n_rshift_bit_count; op[-18] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -18
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -18
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 492  :             work = temp << n_lshift_bit_count; temp = pp[-19]; work |= temp >> n_rshift_bit_count; op[-19] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -19
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -19
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 493  :             work = temp << n_lshift_bit_count; temp = pp[-20]; work |= temp >> n_rshift_bit_count; op[-20] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -20
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -20
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 494  :             work = temp << n_lshift_bit_count; temp = pp[-21]; work |= temp >> n_rshift_bit_count; op[-21] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -21
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -21
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 495  :             work = temp << n_lshift_bit_count; temp = pp[-22]; work |= temp >> n_rshift_bit_count; op[-22] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -22
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -22
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 496  :             work = temp << n_lshift_bit_count; temp = pp[-23]; work |= temp >> n_rshift_bit_count; op[-23] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -23
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -23
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 497  :             work = temp << n_lshift_bit_count; temp = pp[-24]; work |= temp >> n_rshift_bit_count; op[-24] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -24
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -24
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 498  :             work = temp << n_lshift_bit_count; temp = pp[-25]; work |= temp >> n_rshift_bit_count; op[-25] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -25
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -25
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 499  :             work = temp << n_lshift_bit_count; temp = pp[-26]; work |= temp >> n_rshift_bit_count; op[-26] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -26
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -26
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 500  :             work = temp << n_lshift_bit_count; temp = pp[-27]; work |= temp >> n_rshift_bit_count; op[-27] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -27
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -27
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 501  :             work = temp << n_lshift_bit_count; temp = pp[-28]; work |= temp >> n_rshift_bit_count; op[-28] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -28
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -28
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 502  :             work = temp << n_lshift_bit_count; temp = pp[-29]; work |= temp >> n_rshift_bit_count; op[-29] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -29
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -29
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 503  :             work = temp << n_lshift_bit_count; temp = pp[-30]; work |= temp >> n_rshift_bit_count; op[-30] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -30
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -30
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 504  :             work = temp << n_lshift_bit_count; temp = pp[-31]; work |= temp >> n_rshift_bit_count; op[-31] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -31
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -31
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 505  :             pp -= 32;

	mov	ecx, DWORD PTR _pp$[ebp]
	sub	ecx, 128				; 00000080H
	mov	DWORD PTR _pp$[ebp], ecx

; 506  :             op -= 32;

	mov	edx, DWORD PTR _op$[ebp]
	sub	edx, 128				; 00000080H
	mov	DWORD PTR _op$[ebp], edx

; 507  :             --count;

	mov	eax, DWORD PTR _count$1[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$1[ebp], eax

; 508  :         }

	jmp	$LN2@LeftShift_
$LN3@LeftShift_:

; 509  : 
; 510  :         if (p_count & 0x10)

	mov	ecx, DWORD PTR _p_count$[ebp]
	and	ecx, 16					; 00000010H
	je	$LN8@LeftShift_

; 511  :         {
; 512  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 513  :             work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -1
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -1
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 514  :             work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -2
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -2
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 515  :             work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -3
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -3
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 516  :             work = temp << n_lshift_bit_count; temp = pp[-4]; work |= temp >> n_rshift_bit_count; op[-4] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -4
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -4
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 517  :             work = temp << n_lshift_bit_count; temp = pp[-5]; work |= temp >> n_rshift_bit_count; op[-5] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -5
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -5
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 518  :             work = temp << n_lshift_bit_count; temp = pp[-6]; work |= temp >> n_rshift_bit_count; op[-6] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -6
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -6
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 519  :             work = temp << n_lshift_bit_count; temp = pp[-7]; work |= temp >> n_rshift_bit_count; op[-7] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -7
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -7
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 520  :             work = temp << n_lshift_bit_count; temp = pp[-8]; work |= temp >> n_rshift_bit_count; op[-8] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -8
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -8
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 521  :             work = temp << n_lshift_bit_count; temp = pp[-9]; work |= temp >> n_rshift_bit_count; op[-9] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -9
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -9
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 522  :             work = temp << n_lshift_bit_count; temp = pp[-10]; work |= temp >> n_rshift_bit_count; op[-10] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -10
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -10
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 523  :             work = temp << n_lshift_bit_count; temp = pp[-11]; work |= temp >> n_rshift_bit_count; op[-11] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -11
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -11
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 524  :             work = temp << n_lshift_bit_count; temp = pp[-12]; work |= temp >> n_rshift_bit_count; op[-12] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -12
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -12
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 525  :             work = temp << n_lshift_bit_count; temp = pp[-13]; work |= temp >> n_rshift_bit_count; op[-13] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -13
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -13
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 526  :             work = temp << n_lshift_bit_count; temp = pp[-14]; work |= temp >> n_rshift_bit_count; op[-14] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -14
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -14
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 527  :             work = temp << n_lshift_bit_count; temp = pp[-15]; work |= temp >> n_rshift_bit_count; op[-15] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -15
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -15
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 528  :             pp -= 16;

	mov	ecx, DWORD PTR _pp$[ebp]
	sub	ecx, 64					; 00000040H
	mov	DWORD PTR _pp$[ebp], ecx

; 529  :             op -= 16;

	mov	edx, DWORD PTR _op$[ebp]
	sub	edx, 64					; 00000040H
	mov	DWORD PTR _op$[ebp], edx
$LN8@LeftShift_:

; 530  :         }
; 531  : 
; 532  :         if (p_count & 0x8)

	mov	eax, DWORD PTR _p_count$[ebp]
	and	eax, 8
	je	$LN9@LeftShift_

; 533  :         {
; 534  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 535  :             work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -1
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -1
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 536  :             work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -2
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -2
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 537  :             work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -3
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -3
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 538  :             work = temp << n_lshift_bit_count; temp = pp[-4]; work |= temp >> n_rshift_bit_count; op[-4] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -4
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -4
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 539  :             work = temp << n_lshift_bit_count; temp = pp[-5]; work |= temp >> n_rshift_bit_count; op[-5] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -5
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -5
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 540  :             work = temp << n_lshift_bit_count; temp = pp[-6]; work |= temp >> n_rshift_bit_count; op[-6] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -6
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -6
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 541  :             work = temp << n_lshift_bit_count; temp = pp[-7]; work |= temp >> n_rshift_bit_count; op[-7] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -7
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -7
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 542  :             pp -= 8;

	mov	ecx, DWORD PTR _pp$[ebp]
	sub	ecx, 32					; 00000020H
	mov	DWORD PTR _pp$[ebp], ecx

; 543  :             op -= 8;

	mov	edx, DWORD PTR _op$[ebp]
	sub	edx, 32					; 00000020H
	mov	DWORD PTR _op$[ebp], edx
$LN9@LeftShift_:

; 544  :         }
; 545  : 
; 546  :         if (p_count & 0x4)

	mov	eax, DWORD PTR _p_count$[ebp]
	and	eax, 4
	je	$LN10@LeftShift_

; 547  :         {
; 548  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 549  :             work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -1
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -1
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 550  :             work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -2
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -2
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 551  :             work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -3
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -3
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 552  :             pp -= 4;

	mov	ecx, DWORD PTR _pp$[ebp]
	sub	ecx, 16					; 00000010H
	mov	DWORD PTR _pp$[ebp], ecx

; 553  :             op -= 4;

	mov	edx, DWORD PTR _op$[ebp]
	sub	edx, 16					; 00000010H
	mov	DWORD PTR _op$[ebp], edx
$LN10@LeftShift_:

; 554  :         }
; 555  : 
; 556  :         if (p_count & 0x2)

	mov	eax, DWORD PTR _p_count$[ebp]
	and	eax, 2
	je	$LN11@LeftShift_

; 557  :         {
; 558  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 559  :             work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -1
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, -1
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 560  :             pp -= 2;

	mov	ecx, DWORD PTR _pp$[ebp]
	sub	ecx, 8
	mov	DWORD PTR _pp$[ebp], ecx

; 561  :             op -= 2;

	mov	edx, DWORD PTR _op$[ebp]
	sub	edx, 8
	mov	DWORD PTR _op$[ebp], edx
$LN11@LeftShift_:

; 562  :         }
; 563  : 
; 564  :         if (p_count & 0x1)

	mov	eax, DWORD PTR _p_count$[ebp]
	and	eax, 1
	je	SHORT $LN12@LeftShift_

; 565  :         {
; 566  :             work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	edx, cl
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$3[ebp], eax
	mov	edx, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
	shr	edx, cl
	or	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR _work$2[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 567  :             pp -= 1;

	mov	ecx, DWORD PTR _pp$[ebp]
	sub	ecx, 4
	mov	DWORD PTR _pp$[ebp], ecx

; 568  :             op -= 1;

	mov	edx, DWORD PTR _op$[ebp]
	sub	edx, 4
	mov	DWORD PTR _op$[ebp], edx
$LN12@LeftShift_:

; 569  :         }
; 570  :         work = temp << n_lshift_bit_count;

	mov	eax, DWORD PTR _temp$3[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$[ebp]
	shl	eax, cl
	mov	DWORD PTR _work$2[ebp], eax

; 571  :         *op = work;

	mov	ecx, DWORD PTR _op$[ebp]
	mov	edx, DWORD PTR _work$2[ebp]
	mov	DWORD PTR [ecx], edx

; 572  : 
; 573  :         if (padding_zero)

	cmp	DWORD PTR _padding_zero$[ebp], 0
	je	SHORT $LN1@LeftShift_

; 574  :             _ZERO_MEMORY_UNIT_DIV(o, n_word_count);

	mov	eax, DWORD PTR _n_word_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _o$[ebp]
	push	ecx
	call	__ZERO_MEMORY_UNIT_DIV
	add	esp, 8
$LN1@LeftShift_:

; 575  :     }
; 576  : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_LeftShift_Imp_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c
_TEXT	SEGMENT
_count$1 = -40						; size = 4
_t_count$2 = -36					; size = 4
_work$3 = -32						; size = 4
_temp$4 = -28						; size = 4
_n_lshift_bit_count$5 = -24				; size = 4
_n_rshift_bit_count$ = -20				; size = 4
_n_word_count$ = -16					; size = 4
_op$ = -12						; size = 4
_p_count$ = -8						; size = 4
_pp$ = -4						; size = 4
_p$ = 8							; size = 4
_p_word_count$ = 12					; size = 4
_n$ = 16						; size = 4
_o$ = 20						; size = 4
_padding_zero$ = 24					; size = 4
_RightShift_Imp PROC

; 39   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __372CD743_pmc_shift@c
	call	@__CheckForDebuggerJustMyCode@4

; 40   :     __UNIT_TYPE* pp = p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _pp$[ebp], eax

; 41   :     __UNIT_TYPE p_count = p_word_count;

	mov	ecx, DWORD PTR _p_word_count$[ebp]
	mov	DWORD PTR _p_count$[ebp], ecx

; 42   :     __UNIT_TYPE* op = o;

	mov	edx, DWORD PTR _o$[ebp]
	mov	DWORD PTR _op$[ebp], edx

; 43   :     // n_word_count ワード右に移動し、更に n_bit_count ビット右に移動する。
; 44   :     __UNIT_TYPE n_word_count = n / __UNIT_TYPE_BIT_COUNT;

	mov	eax, DWORD PTR _n$[ebp]
	shr	eax, 5
	mov	DWORD PTR _n_word_count$[ebp], eax

; 45   :     __UNIT_TYPE n_rshift_bit_count = n % __UNIT_TYPE_BIT_COUNT;

	mov	eax, DWORD PTR _n$[ebp]
	xor	edx, edx
	mov	ecx, 32					; 00000020H
	div	ecx
	mov	DWORD PTR _n_rshift_bit_count$[ebp], edx

; 46   :     if (n_rshift_bit_count == 0)

	cmp	DWORD PTR _n_rshift_bit_count$[ebp], 0
	jne	SHORT $LN4@RightShift

; 47   :     {
; 48   :         // シフト数がちょうどワード境界分であれば単にワード単位のデータ移動のみ行う。
; 49   :         _COPY_MEMORY_UNIT(op, pp + n_word_count, p_count - n_word_count);

	mov	edx, DWORD PTR _p_count$[ebp]
	sub	edx, DWORD PTR _n_word_count$[ebp]
	push	edx
	mov	eax, DWORD PTR _n_word_count$[ebp]
	mov	ecx, DWORD PTR _pp$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _op$[ebp]
	push	eax
	call	__COPY_MEMORY_UNIT
	add	esp, 12					; 0000000cH

; 50   :         if (padding_zero)

	cmp	DWORD PTR _padding_zero$[ebp], 0
	je	SHORT $LN6@RightShift

; 51   :             _ZERO_MEMORY_UNIT(op + p_count - n_word_count, n_word_count);

	mov	ecx, DWORD PTR _n_word_count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p_count$[ebp]
	mov	eax, DWORD PTR _op$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _n_word_count$[ebp]
	shl	edx, 2
	sub	ecx, edx
	push	ecx
	call	__ZERO_MEMORY_UNIT
	add	esp, 8
$LN6@RightShift:

; 52   :     }

	jmp	$LN1@RightShift
$LN4@RightShift:

; 53   :     else
; 54   :     {
; 55   :         pp += n_word_count;

	mov	eax, DWORD PTR _n_word_count$[ebp]
	mov	ecx, DWORD PTR _pp$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pp$[ebp], edx

; 56   :         __UNIT_TYPE n_lshift_bit_count = __UNIT_TYPE_BIT_COUNT - n_rshift_bit_count;

	mov	eax, 32					; 00000020H
	sub	eax, DWORD PTR _n_rshift_bit_count$[ebp]
	mov	DWORD PTR _n_lshift_bit_count$5[ebp], eax

; 57   :         // p_count - n_word_count 回繰り返し
; 58   : 
; 59   :         __UNIT_TYPE temp = *pp++;

	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _temp$4[ebp], edx
	mov	eax, DWORD PTR _pp$[ebp]
	add	eax, 4
	mov	DWORD PTR _pp$[ebp], eax

; 60   :         __UNIT_TYPE work;
; 61   :         __UNIT_TYPE t_count = p_count - n_word_count - 1;

	mov	ecx, DWORD PTR _p_count$[ebp]
	sub	ecx, DWORD PTR _n_word_count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _t_count$2[ebp], ecx

; 62   : 
; 63   :         __UNIT_TYPE count = t_count >> 5;

	mov	edx, DWORD PTR _t_count$2[ebp]
	shr	edx, 5
	mov	DWORD PTR _count$1[ebp], edx
$LN2@RightShift:

; 64   :         while ( count > 0)

	cmp	DWORD PTR _count$1[ebp], 0
	jbe	$LN3@RightShift

; 65   :         {
; 66   :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	eax, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	eax, cl
	mov	DWORD PTR _work$3[ebp], eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _pp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _temp$4[ebp], ecx
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 67   :             work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _temp$4[ebp], edx
	mov	eax, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	eax, cl
	or	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 68   :             work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _temp$4[ebp], edx
	mov	eax, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	eax, cl
	or	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], eax
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 69   :             work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 70   :             work = temp >> n_rshift_bit_count; temp = pp[4]; work |= temp << n_lshift_bit_count; op[4] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _temp$4[ebp], edx
	mov	eax, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	eax, cl
	or	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], eax
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 71   :             work = temp >> n_rshift_bit_count; temp = pp[5]; work |= temp << n_lshift_bit_count; op[5] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 72   :             work = temp >> n_rshift_bit_count; temp = pp[6]; work |= temp << n_lshift_bit_count; op[6] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 73   :             work = temp >> n_rshift_bit_count; temp = pp[7]; work |= temp << n_lshift_bit_count; op[7] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 74   :             work = temp >> n_rshift_bit_count; temp = pp[8]; work |= temp << n_lshift_bit_count; op[8] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	shl	eax, 3
	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _temp$4[ebp], edx
	mov	eax, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	eax, cl
	or	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], eax
	mov	ecx, 4
	shl	ecx, 3
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 75   :             work = temp >> n_rshift_bit_count; temp = pp[9]; work |= temp << n_lshift_bit_count; op[9] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 76   :             work = temp >> n_rshift_bit_count; temp = pp[10]; work |= temp << n_lshift_bit_count; op[10] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 77   :             work = temp >> n_rshift_bit_count; temp = pp[11]; work |= temp << n_lshift_bit_count; op[11] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 78   :             work = temp >> n_rshift_bit_count; temp = pp[12]; work |= temp << n_lshift_bit_count; op[12] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 79   :             work = temp >> n_rshift_bit_count; temp = pp[13]; work |= temp << n_lshift_bit_count; op[13] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 13
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 13
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 80   :             work = temp >> n_rshift_bit_count; temp = pp[14]; work |= temp << n_lshift_bit_count; op[14] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 81   :             work = temp >> n_rshift_bit_count; temp = pp[15]; work |= temp << n_lshift_bit_count; op[15] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 15
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 15
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 82   :             work = temp >> n_rshift_bit_count; temp = pp[16]; work |= temp << n_lshift_bit_count; op[16] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	shl	eax, 4
	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _temp$4[ebp], edx
	mov	eax, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	eax, cl
	or	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], eax
	mov	ecx, 4
	shl	ecx, 4
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 83   :             work = temp >> n_rshift_bit_count; temp = pp[17]; work |= temp << n_lshift_bit_count; op[17] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 17
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 17
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 84   :             work = temp >> n_rshift_bit_count; temp = pp[18]; work |= temp << n_lshift_bit_count; op[18] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 18
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 18
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 85   :             work = temp >> n_rshift_bit_count; temp = pp[19]; work |= temp << n_lshift_bit_count; op[19] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 19
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 19
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 86   :             work = temp >> n_rshift_bit_count; temp = pp[20]; work |= temp << n_lshift_bit_count; op[20] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 87   :             work = temp >> n_rshift_bit_count; temp = pp[21]; work |= temp << n_lshift_bit_count; op[21] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 21
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 21
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 88   :             work = temp >> n_rshift_bit_count; temp = pp[22]; work |= temp << n_lshift_bit_count; op[22] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 22
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 22
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 89   :             work = temp >> n_rshift_bit_count; temp = pp[23]; work |= temp << n_lshift_bit_count; op[23] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 23
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 23
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 90   :             work = temp >> n_rshift_bit_count; temp = pp[24]; work |= temp << n_lshift_bit_count; op[24] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 24
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 24
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 91   :             work = temp >> n_rshift_bit_count; temp = pp[25]; work |= temp << n_lshift_bit_count; op[25] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 25
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 25
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 92   :             work = temp >> n_rshift_bit_count; temp = pp[26]; work |= temp << n_lshift_bit_count; op[26] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 26
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 26
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 93   :             work = temp >> n_rshift_bit_count; temp = pp[27]; work |= temp << n_lshift_bit_count; op[27] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 27
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 27
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 94   :             work = temp >> n_rshift_bit_count; temp = pp[28]; work |= temp << n_lshift_bit_count; op[28] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 28
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 28
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 95   :             work = temp >> n_rshift_bit_count; temp = pp[29]; work |= temp << n_lshift_bit_count; op[29] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 29
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 29
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 96   :             work = temp >> n_rshift_bit_count; temp = pp[30]; work |= temp << n_lshift_bit_count; op[30] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 30
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 30
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 97   :             work = temp >> n_rshift_bit_count; temp = pp[31]; work |= temp << n_lshift_bit_count; op[31] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 31
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 31
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 98   :             --count;

	mov	ecx, DWORD PTR _count$1[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$1[ebp], ecx

; 99   :             pp += 32;

	mov	edx, DWORD PTR _pp$[ebp]
	add	edx, 128				; 00000080H
	mov	DWORD PTR _pp$[ebp], edx

; 100  :             op += 32;

	mov	eax, DWORD PTR _op$[ebp]
	add	eax, 128				; 00000080H
	mov	DWORD PTR _op$[ebp], eax

; 101  :         }

	jmp	$LN2@RightShift
$LN3@RightShift:

; 102  : 
; 103  :         if (t_count & 0x10)

	mov	ecx, DWORD PTR _t_count$2[ebp]
	and	ecx, 16					; 00000010H
	je	$LN7@RightShift

; 104  :         {
; 105  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 106  :             work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _temp$4[ebp], edx
	mov	eax, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	eax, cl
	or	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 107  :             work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _temp$4[ebp], edx
	mov	eax, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	eax, cl
	or	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], eax
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 108  :             work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 109  :             work = temp >> n_rshift_bit_count; temp = pp[4]; work |= temp << n_lshift_bit_count; op[4] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _temp$4[ebp], edx
	mov	eax, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	eax, cl
	or	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], eax
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 110  :             work = temp >> n_rshift_bit_count; temp = pp[5]; work |= temp << n_lshift_bit_count; op[5] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 111  :             work = temp >> n_rshift_bit_count; temp = pp[6]; work |= temp << n_lshift_bit_count; op[6] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 112  :             work = temp >> n_rshift_bit_count; temp = pp[7]; work |= temp << n_lshift_bit_count; op[7] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 113  :             work = temp >> n_rshift_bit_count; temp = pp[8]; work |= temp << n_lshift_bit_count; op[8] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	shl	eax, 3
	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _temp$4[ebp], edx
	mov	eax, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	eax, cl
	or	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], eax
	mov	ecx, 4
	shl	ecx, 3
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 114  :             work = temp >> n_rshift_bit_count; temp = pp[9]; work |= temp << n_lshift_bit_count; op[9] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 115  :             work = temp >> n_rshift_bit_count; temp = pp[10]; work |= temp << n_lshift_bit_count; op[10] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 116  :             work = temp >> n_rshift_bit_count; temp = pp[11]; work |= temp << n_lshift_bit_count; op[11] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 117  :             work = temp >> n_rshift_bit_count; temp = pp[12]; work |= temp << n_lshift_bit_count; op[12] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 118  :             work = temp >> n_rshift_bit_count; temp = pp[13]; work |= temp << n_lshift_bit_count; op[13] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 13
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 13
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 119  :             work = temp >> n_rshift_bit_count; temp = pp[14]; work |= temp << n_lshift_bit_count; op[14] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 120  :             work = temp >> n_rshift_bit_count; temp = pp[15]; work |= temp << n_lshift_bit_count; op[15] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 15
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 15
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 121  :             pp += 16;

	mov	ecx, DWORD PTR _pp$[ebp]
	add	ecx, 64					; 00000040H
	mov	DWORD PTR _pp$[ebp], ecx

; 122  :             op += 16;

	mov	edx, DWORD PTR _op$[ebp]
	add	edx, 64					; 00000040H
	mov	DWORD PTR _op$[ebp], edx
$LN7@RightShift:

; 123  :         }
; 124  : 
; 125  :         if (t_count & 0x8)

	mov	eax, DWORD PTR _t_count$2[ebp]
	and	eax, 8
	je	$LN8@RightShift

; 126  :         {
; 127  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 128  :             work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _temp$4[ebp], edx
	mov	eax, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	eax, cl
	or	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 129  :             work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _temp$4[ebp], edx
	mov	eax, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	eax, cl
	or	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], eax
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 130  :             work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 131  :             work = temp >> n_rshift_bit_count; temp = pp[4]; work |= temp << n_lshift_bit_count; op[4] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _temp$4[ebp], edx
	mov	eax, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	eax, cl
	or	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], eax
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 132  :             work = temp >> n_rshift_bit_count; temp = pp[5]; work |= temp << n_lshift_bit_count; op[5] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 133  :             work = temp >> n_rshift_bit_count; temp = pp[6]; work |= temp << n_lshift_bit_count; op[6] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 134  :             work = temp >> n_rshift_bit_count; temp = pp[7]; work |= temp << n_lshift_bit_count; op[7] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 135  :             pp += 8;

	mov	ecx, DWORD PTR _pp$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _pp$[ebp], ecx

; 136  :             op += 8;

	mov	edx, DWORD PTR _op$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _op$[ebp], edx
$LN8@RightShift:

; 137  :         }
; 138  : 
; 139  :         if (t_count & 0x4)

	mov	eax, DWORD PTR _t_count$2[ebp]
	and	eax, 4
	je	$LN9@RightShift

; 140  :         {
; 141  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 142  :             work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _temp$4[ebp], edx
	mov	eax, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	eax, cl
	or	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 143  :             work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _temp$4[ebp], edx
	mov	eax, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	eax, cl
	or	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], eax
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 144  :             work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 145  :             pp += 4;

	mov	ecx, DWORD PTR _pp$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _pp$[ebp], ecx

; 146  :             op += 4;

	mov	edx, DWORD PTR _op$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _op$[ebp], edx
$LN9@RightShift:

; 147  :         }
; 148  : 
; 149  :         if (t_count & 0x2)

	mov	eax, DWORD PTR _t_count$2[ebp]
	and	eax, 2
	je	$LN10@RightShift

; 150  :         {
; 151  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 152  :             work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _temp$4[ebp], edx
	mov	eax, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	eax, cl
	or	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 153  :             pp += 2;

	mov	ecx, DWORD PTR _pp$[ebp]
	add	ecx, 8
	mov	DWORD PTR _pp$[ebp], ecx

; 154  :             op += 2;

	mov	edx, DWORD PTR _op$[ebp]
	add	edx, 8
	mov	DWORD PTR _op$[ebp], edx
$LN10@RightShift:

; 155  :         }
; 156  : 
; 157  :         if (t_count & 0x1)

	mov	eax, DWORD PTR _t_count$2[ebp]
	and	eax, 1
	je	SHORT $LN11@RightShift

; 158  :         {
; 159  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 160  :             pp += 1;

	mov	ecx, DWORD PTR _pp$[ebp]
	add	ecx, 4
	mov	DWORD PTR _pp$[ebp], ecx

; 161  :             op += 1;

	mov	edx, DWORD PTR _op$[ebp]
	add	edx, 4
	mov	DWORD PTR _op$[ebp], edx
$LN11@RightShift:

; 162  :         }
; 163  : 
; 164  :         work = temp >> n_rshift_bit_count;

	mov	eax, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	eax, cl
	mov	DWORD PTR _work$3[ebp], eax

; 165  :         if (work != 0 || padding_zero)

	cmp	DWORD PTR _work$3[ebp], 0
	jne	SHORT $LN13@RightShift
	cmp	DWORD PTR _padding_zero$[ebp], 0
	je	SHORT $LN12@RightShift
$LN13@RightShift:

; 166  :             *op = work;

	mov	ecx, DWORD PTR _op$[ebp]
	mov	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [ecx], edx
$LN12@RightShift:

; 167  : 
; 168  :         if (padding_zero)

	cmp	DWORD PTR _padding_zero$[ebp], 0
	je	SHORT $LN1@RightShift

; 169  :             _ZERO_MEMORY_UNIT(o + p_word_count - n_word_count, n_word_count);

	mov	eax, DWORD PTR _n_word_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p_word_count$[ebp]
	mov	edx, DWORD PTR _o$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _n_word_count$[ebp]
	shl	ecx, 2
	sub	eax, ecx
	push	eax
	call	__ZERO_MEMORY_UNIT
	add	esp, 8
$LN1@RightShift:

; 170  :     }
; 171  : }

	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_RightShift_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.c
_TEXT	SEGMENT
_count$1 = -40						; size = 4
_t_count$2 = -36					; size = 4
_work$3 = -32						; size = 4
_temp$4 = -28						; size = 4
_n_lshift_bit_count$5 = -24				; size = 4
_n_rshift_bit_count$ = -20				; size = 4
_n_word_count$ = -16					; size = 4
_op$ = -12						; size = 4
_p_count$ = -8						; size = 4
_pp$ = -4						; size = 4
_p$ = 8							; size = 4
_p_word_count$ = 12					; size = 4
_n$ = 16						; size = 4
_o$ = 20						; size = 4
_padding_zero$ = 24					; size = 4
_RightShift_Imp_DIV PROC

; 174  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __372CD743_pmc_shift@c
	call	@__CheckForDebuggerJustMyCode@4

; 175  :     __UNIT_TYPE_DIV* pp = p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _pp$[ebp], eax

; 176  :     __UNIT_TYPE p_count = p_word_count;

	mov	ecx, DWORD PTR _p_word_count$[ebp]
	mov	DWORD PTR _p_count$[ebp], ecx

; 177  :     __UNIT_TYPE_DIV* op = o;

	mov	edx, DWORD PTR _o$[ebp]
	mov	DWORD PTR _op$[ebp], edx

; 178  :     // n_word_count ワード右に移動し、更に n_bit_count ビット右に移動する。
; 179  :     __UNIT_TYPE n_word_count = n / __UNIT_TYPE_BIT_COUNT;

	mov	eax, DWORD PTR _n$[ebp]
	shr	eax, 5
	mov	DWORD PTR _n_word_count$[ebp], eax

; 180  :     __UNIT_TYPE n_rshift_bit_count = n % __UNIT_TYPE_BIT_COUNT;

	mov	eax, DWORD PTR _n$[ebp]
	xor	edx, edx
	mov	ecx, 32					; 00000020H
	div	ecx
	mov	DWORD PTR _n_rshift_bit_count$[ebp], edx

; 181  :     if (n_rshift_bit_count == 0)

	cmp	DWORD PTR _n_rshift_bit_count$[ebp], 0
	jne	SHORT $LN4@RightShift

; 182  :     {
; 183  :         // シフト数がちょうどワード境界分であれば単にワード単位のデータ移動のみ行う。
; 184  :         _COPY_MEMORY_UNIT_DIV(op, pp + n_word_count, p_count - n_word_count);

	mov	edx, DWORD PTR _p_count$[ebp]
	sub	edx, DWORD PTR _n_word_count$[ebp]
	push	edx
	mov	eax, DWORD PTR _n_word_count$[ebp]
	mov	ecx, DWORD PTR _pp$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _op$[ebp]
	push	eax
	call	__COPY_MEMORY_UNIT_DIV
	add	esp, 12					; 0000000cH

; 185  :         if (padding_zero)

	cmp	DWORD PTR _padding_zero$[ebp], 0
	je	SHORT $LN6@RightShift

; 186  :             _ZERO_MEMORY_UNIT_DIV(op + p_count - n_word_count, n_word_count);

	mov	ecx, DWORD PTR _n_word_count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p_count$[ebp]
	mov	eax, DWORD PTR _op$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _n_word_count$[ebp]
	shl	edx, 2
	sub	ecx, edx
	push	ecx
	call	__ZERO_MEMORY_UNIT_DIV
	add	esp, 8
$LN6@RightShift:

; 187  :     }

	jmp	$LN1@RightShift
$LN4@RightShift:

; 188  :     else
; 189  :     {
; 190  :         pp += n_word_count;

	mov	eax, DWORD PTR _n_word_count$[ebp]
	mov	ecx, DWORD PTR _pp$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pp$[ebp], edx

; 191  :         __UNIT_TYPE n_lshift_bit_count = __UNIT_TYPE_BIT_COUNT - n_rshift_bit_count;

	mov	eax, 32					; 00000020H
	sub	eax, DWORD PTR _n_rshift_bit_count$[ebp]
	mov	DWORD PTR _n_lshift_bit_count$5[ebp], eax

; 192  :         // p_count - n_word_count 回繰り返し
; 193  : 
; 194  :         __UNIT_TYPE_DIV temp = *pp++;

	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _temp$4[ebp], edx
	mov	eax, DWORD PTR _pp$[ebp]
	add	eax, 4
	mov	DWORD PTR _pp$[ebp], eax

; 195  :         __UNIT_TYPE_DIV work;
; 196  :         __UNIT_TYPE t_count = p_count - n_word_count - 1;

	mov	ecx, DWORD PTR _p_count$[ebp]
	sub	ecx, DWORD PTR _n_word_count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _t_count$2[ebp], ecx

; 197  : 
; 198  :         __UNIT_TYPE count = t_count >> 5;

	mov	edx, DWORD PTR _t_count$2[ebp]
	shr	edx, 5
	mov	DWORD PTR _count$1[ebp], edx
$LN2@RightShift:

; 199  :         while (count > 0)

	cmp	DWORD PTR _count$1[ebp], 0
	jbe	$LN3@RightShift

; 200  :         {
; 201  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	eax, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	eax, cl
	mov	DWORD PTR _work$3[ebp], eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _pp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _temp$4[ebp], ecx
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 202  :             work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _temp$4[ebp], edx
	mov	eax, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	eax, cl
	or	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 203  :             work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _temp$4[ebp], edx
	mov	eax, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	eax, cl
	or	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], eax
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 204  :             work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 205  :             work = temp >> n_rshift_bit_count; temp = pp[4]; work |= temp << n_lshift_bit_count; op[4] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _temp$4[ebp], edx
	mov	eax, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	eax, cl
	or	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], eax
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 206  :             work = temp >> n_rshift_bit_count; temp = pp[5]; work |= temp << n_lshift_bit_count; op[5] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 207  :             work = temp >> n_rshift_bit_count; temp = pp[6]; work |= temp << n_lshift_bit_count; op[6] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 208  :             work = temp >> n_rshift_bit_count; temp = pp[7]; work |= temp << n_lshift_bit_count; op[7] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 209  :             work = temp >> n_rshift_bit_count; temp = pp[8]; work |= temp << n_lshift_bit_count; op[8] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	shl	eax, 3
	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _temp$4[ebp], edx
	mov	eax, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	eax, cl
	or	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], eax
	mov	ecx, 4
	shl	ecx, 3
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 210  :             work = temp >> n_rshift_bit_count; temp = pp[9]; work |= temp << n_lshift_bit_count; op[9] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 211  :             work = temp >> n_rshift_bit_count; temp = pp[10]; work |= temp << n_lshift_bit_count; op[10] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 212  :             work = temp >> n_rshift_bit_count; temp = pp[11]; work |= temp << n_lshift_bit_count; op[11] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 213  :             work = temp >> n_rshift_bit_count; temp = pp[12]; work |= temp << n_lshift_bit_count; op[12] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 214  :             work = temp >> n_rshift_bit_count; temp = pp[13]; work |= temp << n_lshift_bit_count; op[13] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 13
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 13
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 215  :             work = temp >> n_rshift_bit_count; temp = pp[14]; work |= temp << n_lshift_bit_count; op[14] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 216  :             work = temp >> n_rshift_bit_count; temp = pp[15]; work |= temp << n_lshift_bit_count; op[15] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 15
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 15
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 217  :             work = temp >> n_rshift_bit_count; temp = pp[16]; work |= temp << n_lshift_bit_count; op[16] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	shl	eax, 4
	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _temp$4[ebp], edx
	mov	eax, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	eax, cl
	or	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], eax
	mov	ecx, 4
	shl	ecx, 4
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 218  :             work = temp >> n_rshift_bit_count; temp = pp[17]; work |= temp << n_lshift_bit_count; op[17] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 17
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 17
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 219  :             work = temp >> n_rshift_bit_count; temp = pp[18]; work |= temp << n_lshift_bit_count; op[18] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 18
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 18
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 220  :             work = temp >> n_rshift_bit_count; temp = pp[19]; work |= temp << n_lshift_bit_count; op[19] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 19
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 19
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 221  :             work = temp >> n_rshift_bit_count; temp = pp[20]; work |= temp << n_lshift_bit_count; op[20] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 222  :             work = temp >> n_rshift_bit_count; temp = pp[21]; work |= temp << n_lshift_bit_count; op[21] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 21
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 21
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 223  :             work = temp >> n_rshift_bit_count; temp = pp[22]; work |= temp << n_lshift_bit_count; op[22] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 22
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 22
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 224  :             work = temp >> n_rshift_bit_count; temp = pp[23]; work |= temp << n_lshift_bit_count; op[23] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 23
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 23
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 225  :             work = temp >> n_rshift_bit_count; temp = pp[24]; work |= temp << n_lshift_bit_count; op[24] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 24
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 24
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 226  :             work = temp >> n_rshift_bit_count; temp = pp[25]; work |= temp << n_lshift_bit_count; op[25] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 25
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 25
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 227  :             work = temp >> n_rshift_bit_count; temp = pp[26]; work |= temp << n_lshift_bit_count; op[26] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 26
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 26
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 228  :             work = temp >> n_rshift_bit_count; temp = pp[27]; work |= temp << n_lshift_bit_count; op[27] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 27
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 27
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 229  :             work = temp >> n_rshift_bit_count; temp = pp[28]; work |= temp << n_lshift_bit_count; op[28] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 28
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 28
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 230  :             work = temp >> n_rshift_bit_count; temp = pp[29]; work |= temp << n_lshift_bit_count; op[29] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 29
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 29
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 231  :             work = temp >> n_rshift_bit_count; temp = pp[30]; work |= temp << n_lshift_bit_count; op[30] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 30
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 30
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 232  :             work = temp >> n_rshift_bit_count; temp = pp[31]; work |= temp << n_lshift_bit_count; op[31] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 31
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 31
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 233  :             --count;

	mov	ecx, DWORD PTR _count$1[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$1[ebp], ecx

; 234  :             pp += 32;

	mov	edx, DWORD PTR _pp$[ebp]
	add	edx, 128				; 00000080H
	mov	DWORD PTR _pp$[ebp], edx

; 235  :             op += 32;

	mov	eax, DWORD PTR _op$[ebp]
	add	eax, 128				; 00000080H
	mov	DWORD PTR _op$[ebp], eax

; 236  :         }

	jmp	$LN2@RightShift
$LN3@RightShift:

; 237  : 
; 238  :         if (t_count & 0x10)

	mov	ecx, DWORD PTR _t_count$2[ebp]
	and	ecx, 16					; 00000010H
	je	$LN7@RightShift

; 239  :         {
; 240  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 241  :             work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _temp$4[ebp], edx
	mov	eax, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	eax, cl
	or	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 242  :             work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _temp$4[ebp], edx
	mov	eax, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	eax, cl
	or	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], eax
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 243  :             work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 244  :             work = temp >> n_rshift_bit_count; temp = pp[4]; work |= temp << n_lshift_bit_count; op[4] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _temp$4[ebp], edx
	mov	eax, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	eax, cl
	or	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], eax
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 245  :             work = temp >> n_rshift_bit_count; temp = pp[5]; work |= temp << n_lshift_bit_count; op[5] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 246  :             work = temp >> n_rshift_bit_count; temp = pp[6]; work |= temp << n_lshift_bit_count; op[6] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 247  :             work = temp >> n_rshift_bit_count; temp = pp[7]; work |= temp << n_lshift_bit_count; op[7] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 248  :             work = temp >> n_rshift_bit_count; temp = pp[8]; work |= temp << n_lshift_bit_count; op[8] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	shl	eax, 3
	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _temp$4[ebp], edx
	mov	eax, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	eax, cl
	or	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], eax
	mov	ecx, 4
	shl	ecx, 3
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 249  :             work = temp >> n_rshift_bit_count; temp = pp[9]; work |= temp << n_lshift_bit_count; op[9] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 250  :             work = temp >> n_rshift_bit_count; temp = pp[10]; work |= temp << n_lshift_bit_count; op[10] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 251  :             work = temp >> n_rshift_bit_count; temp = pp[11]; work |= temp << n_lshift_bit_count; op[11] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 252  :             work = temp >> n_rshift_bit_count; temp = pp[12]; work |= temp << n_lshift_bit_count; op[12] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 253  :             work = temp >> n_rshift_bit_count; temp = pp[13]; work |= temp << n_lshift_bit_count; op[13] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 13
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 13
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 254  :             work = temp >> n_rshift_bit_count; temp = pp[14]; work |= temp << n_lshift_bit_count; op[14] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 255  :             work = temp >> n_rshift_bit_count; temp = pp[15]; work |= temp << n_lshift_bit_count; op[15] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 15
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 15
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 256  :             pp += 16;

	mov	ecx, DWORD PTR _pp$[ebp]
	add	ecx, 64					; 00000040H
	mov	DWORD PTR _pp$[ebp], ecx

; 257  :             op += 16;

	mov	edx, DWORD PTR _op$[ebp]
	add	edx, 64					; 00000040H
	mov	DWORD PTR _op$[ebp], edx
$LN7@RightShift:

; 258  :         }
; 259  : 
; 260  :         if (t_count & 0x8)

	mov	eax, DWORD PTR _t_count$2[ebp]
	and	eax, 8
	je	$LN8@RightShift

; 261  :         {
; 262  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 263  :             work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _temp$4[ebp], edx
	mov	eax, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	eax, cl
	or	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 264  :             work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _temp$4[ebp], edx
	mov	eax, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	eax, cl
	or	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], eax
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 265  :             work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 266  :             work = temp >> n_rshift_bit_count; temp = pp[4]; work |= temp << n_lshift_bit_count; op[4] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _temp$4[ebp], edx
	mov	eax, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	eax, cl
	or	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], eax
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 267  :             work = temp >> n_rshift_bit_count; temp = pp[5]; work |= temp << n_lshift_bit_count; op[5] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 268  :             work = temp >> n_rshift_bit_count; temp = pp[6]; work |= temp << n_lshift_bit_count; op[6] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 269  :             work = temp >> n_rshift_bit_count; temp = pp[7]; work |= temp << n_lshift_bit_count; op[7] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 270  :             pp += 8;

	mov	ecx, DWORD PTR _pp$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _pp$[ebp], ecx

; 271  :             op += 8;

	mov	edx, DWORD PTR _op$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _op$[ebp], edx
$LN8@RightShift:

; 272  :         }
; 273  : 
; 274  :         if (t_count & 0x4)

	mov	eax, DWORD PTR _t_count$2[ebp]
	and	eax, 4
	je	$LN9@RightShift

; 275  :         {
; 276  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 277  :             work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _temp$4[ebp], edx
	mov	eax, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	eax, cl
	or	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 278  :             work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _temp$4[ebp], edx
	mov	eax, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	eax, cl
	or	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], eax
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 279  :             work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 280  :             pp += 4;

	mov	ecx, DWORD PTR _pp$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _pp$[ebp], ecx

; 281  :             op += 4;

	mov	edx, DWORD PTR _op$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _op$[ebp], edx
$LN9@RightShift:

; 282  :         }
; 283  : 
; 284  :         if (t_count & 0x2)

	mov	eax, DWORD PTR _t_count$2[ebp]
	and	eax, 2
	je	$LN10@RightShift

; 285  :         {
; 286  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 287  :             work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _temp$4[ebp], edx
	mov	eax, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	eax, cl
	or	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], eax
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 288  :             pp += 2;

	mov	ecx, DWORD PTR _pp$[ebp]
	add	ecx, 8
	mov	DWORD PTR _pp$[ebp], ecx

; 289  :             op += 2;

	mov	edx, DWORD PTR _op$[ebp]
	add	edx, 8
	mov	DWORD PTR _op$[ebp], edx
$LN10@RightShift:

; 290  :         }
; 291  : 
; 292  :         if (t_count & 0x1)

	mov	eax, DWORD PTR _t_count$2[ebp]
	and	eax, 1
	je	SHORT $LN11@RightShift

; 293  :         {
; 294  :             work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	edx, cl
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _temp$4[ebp], eax
	mov	edx, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR _work$3[ebp], edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 295  :             pp += 1;

	mov	ecx, DWORD PTR _pp$[ebp]
	add	ecx, 4
	mov	DWORD PTR _pp$[ebp], ecx

; 296  :             op += 1;

	mov	edx, DWORD PTR _op$[ebp]
	add	edx, 4
	mov	DWORD PTR _op$[ebp], edx
$LN11@RightShift:

; 297  :         }
; 298  : 
; 299  :         work = temp >> n_rshift_bit_count;

	mov	eax, DWORD PTR _temp$4[ebp]
	mov	ecx, DWORD PTR _n_rshift_bit_count$[ebp]
	shr	eax, cl
	mov	DWORD PTR _work$3[ebp], eax

; 300  :         if (work != 0 || padding_zero)

	cmp	DWORD PTR _work$3[ebp], 0
	jne	SHORT $LN13@RightShift
	cmp	DWORD PTR _padding_zero$[ebp], 0
	je	SHORT $LN12@RightShift
$LN13@RightShift:

; 301  :             *op = work;

	mov	ecx, DWORD PTR _op$[ebp]
	mov	edx, DWORD PTR _work$3[ebp]
	mov	DWORD PTR [ecx], edx
$LN12@RightShift:

; 302  : 
; 303  :         if (padding_zero)

	cmp	DWORD PTR _padding_zero$[ebp], 0
	je	SHORT $LN1@RightShift

; 304  :             _ZERO_MEMORY_UNIT_DIV(o + p_word_count - n_word_count, n_word_count);

	mov	eax, DWORD PTR _n_word_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p_word_count$[ebp]
	mov	edx, DWORD PTR _o$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _n_word_count$[ebp]
	shl	ecx, 2
	sub	eax, ecx
	push	eax
	call	__ZERO_MEMORY_UNIT_DIV
	add	esp, 8
$LN1@RightShift:

; 305  :     }
; 306  : }

	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_RightShift_Imp_DIV ENDP
_TEXT	ENDS
END
