; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_multiply.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__2088847F_corecrt_memory@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__E9FFF232_guiddef@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__12AD47BB_winuser@h DB 01H
__B4B40122_winioctl@h DB 01H
__A73354DD_stdlib@h DB 01H
__25F3FB34_propidl@h DB 01H
__A40E48B8_oleauto@h DB 01H
__86261D59_stralign@h DB 01H
__2CC6E67D_corecrt_stdio_config@h DB 01H
__41381B41_corecrt_wconio@h DB 01H
__F0CC4AC4_corecrt_wio@h DB 01H
__05476D76_corecrt_wstdio@h DB 01H
__C0802A2B_corecrt_wtime@h DB 01H
__A40A425D_stat@h DB 01H
__5A74375D_wchar@h DB 01H
__6BC0FD35_vcruntime_new@h DB 01H
__77F53984_cstddef DB 01H
__188180DA_corecrt_math@h DB 01H
__D23EE329_cstdlib DB 01H
__5ECFF36E_type_traits DB 01H
__331E732B_malloc@h DB 01H
__9BB4E194_vcruntime_exception@h DB 01H
__7949CB39_exception DB 01H
__802FEEC0_pmc_exception@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__1AB12E38_pmc_resourceholder@h DB 01H
__746E1CEC_xmmintrin@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__05528951_pmc_multiply@cpp DB 01H
msvcjmc	ENDS
CONST	SEGMENT
$SG118082 DB	'p', 00H, 'm', 00H, 'c', 00H, '_', 00H, 'm', 00H, 'u', 00H
	DB	'l', 00H, 't', 00H, 'i', 00H, 'p', 00H, 'l', 00H, 'y', 00H, '.'
	DB	00H, 'c', 00H, 'p', 00H, 'p', 00H, ';', 00H, 'P', 00H, 'M', 00H
	DB	'C', 00H, '_', 00H, 'M', 00H, 'u', 00H, 'l', 00H, 't', 00H, 'i'
	DB	00H, 'p', 00H, 'l', 00H, 'y', 00H, '_', 00H, 'I', 00H, '_', 00H
	DB	'X', 00H, ';', 00H, '1', 00H, 00H, 00H
$SG118083 DB	088H, 'N', 01fH, 'gW0f0D0j0D0', 0b3H, '0', 0fcH, '0', 0c9H
	DB	'0k00RT', 090H, 'W0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118090 DB	'v', 00H, 00H, 00H
$SG118091 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
	ORG $+2
$SG118105 DB	'p', 00H, 'm', 00H, 'c', 00H, '_', 00H, 'm', 00H, 'u', 00H
	DB	'l', 00H, 't', 00H, 'i', 00H, 'p', 00H, 'l', 00H, 'y', 00H, '.'
	DB	00H, 'c', 00H, 'p', 00H, 'p', 00H, ';', 00H, 'P', 00H, 'M', 00H
	DB	'C', 00H, '_', 00H, 'M', 00H, 'u', 00H, 'l', 00H, 't', 00H, 'i'
	DB	00H, 'p', 00H, 'l', 00H, 'y', 00H, '_', 00H, 'I', 00H, '_', 00H
	DB	'X', 00H, ';', 00H, '1', 00H, 00H, 00H
$SG118106 DB	088H, 'N', 01fH, 'gW0f0D0j0D0', 0b3H, '0', 0fcH, '0', 0c9H
	DB	'0k00RT', 090H, 'W0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118109 DB	'u', 00H, 00H, 00H
$SG118110 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
	ORG $+2
$SG118164 DB	'p', 00H, 'm', 00H, 'c', 00H, '_', 00H, 'm', 00H, 'u', 00H
	DB	'l', 00H, 't', 00H, 'i', 00H, 'p', 00H, 'l', 00H, 'y', 00H, '.'
	DB	00H, 'c', 00H, 'p', 00H, 'p', 00H, ';', 00H, 'P', 00H, 'M', 00H
	DB	'C', 00H, '_', 00H, 'M', 00H, 'u', 00H, 'l', 00H, 't', 00H, 'i'
	DB	00H, 'p', 00H, 'l', 00H, 'y', 00H, '_', 00H, 'L', 00H, '_', 00H
	DB	'X', 00H, ';', 00H, '1', 00H, 00H, 00H
$SG118165 DB	088H, 'N', 01fH, 'gW0f0D0j0D0', 0b3H, '0', 0fcH, '0', 0c9H
	DB	'0k00RT', 090H, 'W0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118168 DB	'v', 00H, 00H, 00H
$SG118169 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
	ORG $+2
$SG118183 DB	'p', 00H, 'm', 00H, 'c', 00H, '_', 00H, 'm', 00H, 'u', 00H
	DB	'l', 00H, 't', 00H, 'i', 00H, 'p', 00H, 'l', 00H, 'y', 00H, '.'
	DB	00H, 'c', 00H, 'p', 00H, 'p', 00H, ';', 00H, 'P', 00H, 'M', 00H
	DB	'C', 00H, '_', 00H, 'M', 00H, 'u', 00H, 'l', 00H, 't', 00H, 'i'
	DB	00H, 'p', 00H, 'l', 00H, 'y', 00H, '_', 00H, 'X', 00H, '_', 00H
	DB	'L', 00H, ';', 00H, '1', 00H, 00H, 00H
$SG118184 DB	088H, 'N', 01fH, 'gW0f0D0j0D0', 0b3H, '0', 0fcH, '0', 0c9H
	DB	'0k00RT', 090H, 'W0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118187 DB	'u', 00H, 00H, 00H
$SG118188 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
	ORG $+2
$SG118223 DB	'u', 00H, 00H, 00H
$SG118224 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
	ORG $+2
$SG118227 DB	'v', 00H, 00H, 00H
$SG118228 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
CONST	ENDS
PUBLIC	??0exception@std@@QAE@XZ			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ; Palmtree::Math::Core::Internal::Exception::Exception
PUBLIC	??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
PUBLIC	??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
PUBLIC	??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor'
PUBLIC	??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
PUBLIC	??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
PUBLIC	??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
PUBLIC	??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor'
PUBLIC	??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
PUBLIC	??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
PUBLIC	??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
PUBLIC	??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor'
PUBLIC	?Multiply_X_X_Imp@Internal@Core@Math@Palmtree@@YAXPAII0I0@Z ; Palmtree::Math::Core::Internal::Multiply_X_X_Imp
PUBLIC	?PMC_Multiply_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_Multiply_X_I_Imp
PUBLIC	?Initialize_Multiply@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ; Palmtree::Math::Core::Internal::Initialize_Multiply
PUBLIC	?PMC_Multiply_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_Multiply_I_X
PUBLIC	?PMC_Multiply_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_Multiply_L_X
PUBLIC	?PMC_Multiply_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_Multiply_X_I
PUBLIC	?PMC_Multiply_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z ; Palmtree::Math::Core::Internal::PMC_Multiply_X_L
PUBLIC	?PMC_Multiply_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z ; Palmtree::Math::Core::Internal::PMC_Multiply_X_X
PUBLIC	__JustMyCode_Default
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7Exception@Internal@Core@Math@Palmtree@@6B@	; Palmtree::Math::Core::Internal::Exception::`vftable'
PUBLIC	??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`vftable'
PUBLIC	??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`vftable'
PUBLIC	__TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
PUBLIC	__CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InternalErrorException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	??_R0?AVException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::Exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	__TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
PUBLIC	__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Exception@Internal@Core@Math@Palmtree@@6B@	; Palmtree::Math::Core::Internal::Exception::`RTTI Complete Object Locator'
PUBLIC	??_R3Exception@Internal@Core@Math@Palmtree@@8	; Palmtree::Math::Core::Internal::Exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Exception@Internal@Core@Math@Palmtree@@8	; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EN@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,77)'
PUBLIC	??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Complete Object Locator'
PUBLIC	??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Complete Object Locator'
PUBLIC	??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_EException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::Exception::`vector deleting destructor'
EXTRN	??_EArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::`vector deleting destructor'
EXTRN	??_EInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::InternalErrorException::`vector deleting destructor'
EXTRN	?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z:PROC ; Palmtree::Math::Core::Internal::CommitNumber
EXTRN	?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z:PROC ; Palmtree::Math::Core::Internal::CheckNumber
EXTRN	?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z:PROC ; Palmtree::Math::Core::Internal::DuplicateNumber
EXTRN	?From_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@I@Z:PROC ; Palmtree::Math::Core::Internal::From_I_Imp
EXTRN	?From_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@_K@Z:PROC ; Palmtree::Math::Core::Internal::From_L_Imp
EXTRN	??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
EXTRN	??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
EXTRN	?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
EXTRN	?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber
EXTRN	?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber
EXTRN	?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__aullshr:PROC
EXTRN	?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A:BYTE ; Palmtree::Math::Core::Internal::number_zero
EXTRN	?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A:BYTE ; Palmtree::Math::Core::Internal::statistics_info
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
?fp_Multiply_X_1W@Internal@Core@Math@Palmtree@@3P6AXPAIII0@ZA DD 01H DUP (?) ; Palmtree::Math::Core::Internal::fp_Multiply_X_1W
?fp_Multiply_X_2W@Internal@Core@Math@Palmtree@@3P6AXPAIIII0@ZA DD 01H DUP (?) ; Palmtree::Math::Core::Internal::fp_Multiply_X_2W
?fp_Multiply_X_X@Internal@Core@Math@Palmtree@@3P6AXPAII0I0@ZA DD 01H DUP (?) ; Palmtree::Math::Core::Internal::fp_Multiply_X_X
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EN@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EN@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,77)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	04dH
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2Exception@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3Exception@Internal@Core@Math@Palmtree@@8 DD 00H	; Palmtree::Math::Core::Internal::Exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4Exception@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4Exception@Internal@Core@Math@Palmtree@@6B@ DD 00H	; Palmtree::Math::Core::Internal::Exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVArgumentNullException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	FLAT:__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
	DD	FLAT:__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	ENDS
;	COMDAT __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	FLAT:??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::Exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVInternalErrorException@Internal@Core@Math@Palmtree@@'
	DB	00H
data$r	ENDS
;	COMDAT __CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	FLAT:__CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
	DD	FLAT:__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	ENDS
;	COMDAT __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	FLAT:??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`vftable'
	DD	FLAT:??_EInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`vftable'
	DD	FLAT:??_EArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7Exception@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7Exception@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4Exception@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::Exception::`vftable'
	DD	FLAT:??_EException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$?PMC_Multiply_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_Multiply_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z$0
__unwindtable$?PMC_Multiply_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_Multiply_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z$0
__unwindtable$?PMC_Multiply_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_Multiply_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z$0
__unwindtable$?PMC_Multiply_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_Multiply_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z$0
__unwindtable$?PMC_Multiply_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_Multiply_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z$0
__unwindtable$?PMC_Multiply_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_Multiply_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z$0
__unwindtable$?PMC_Multiply_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_Multiply_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z$0
__unwindtable$?PMC_Multiply_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_Multiply_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_Multiply_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_Multiply_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z$2
__ehfuncinfo$?PMC_Multiply_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_Multiply_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PMC_Multiply_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?PMC_Multiply_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PMC_Multiply_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_Multiply_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PMC_Multiply_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_Multiply_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PMC_Multiply_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_Multiply_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PMC_Multiply_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_Multiply_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PMC_Multiply_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_Multiply_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PMC_Multiply_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_Multiply_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0
__ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0
__ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z$0
__ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1exception@std@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0exception@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
_TEXT	SEGMENT
tv137 = -60						; size = 4
$T2 = -56						; size = 4
_w$3 = -52						; size = 4
_w_bit_count$4 = -48					; size = 4
_v_bit_count$5 = -44					; size = 4
_u_bit_count$6 = -40					; size = 4
_root$7 = -32						; size = 16
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 4
?PMC_Multiply_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z PROC ; Palmtree::Math::Core::Internal::PMC_Multiply_X_X_Imp

; 679  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_Multiply_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 30	 sub	 esp, 48			; 00000030H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8d 7d c4	 lea	 edi, DWORD PTR [ebp-60]
  00019	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c5		 xor	 eax, ebp
  0002c	50		 push	 eax
  0002d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00030	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00036	b9 00 00 00 00	 mov	 ecx, OFFSET __05528951_pmc_multiply@cpp
  0003b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 680  :         if (u->IS_ZERO)

  00040	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00043	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00046	83 e1 01	 and	 ecx, 1
  00049	74 0f		 je	 SHORT $LN2@PMC_Multip

; 681  :         {
; 682  :             // u が 0 である場合
; 683  : 
; 684  :             // v の値にかかわらず 0 を返す。
; 685  :             return (&number_zero);

  0004b	b8 00 00 00 00	 mov	 eax, OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  00050	e9 2b 01 00 00	 jmp	 $LN1@PMC_Multip
  00055	e9 26 01 00 00	 jmp	 $LN1@PMC_Multip
$LN2@PMC_Multip:

; 686  :         }
; 687  :         else if (u->IS_ONE)

  0005a	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  0005d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00060	d1 e8		 shr	 eax, 1
  00062	83 e0 01	 and	 eax, 1
  00065	74 2d		 je	 SHORT $LN4@PMC_Multip

; 688  :         {
; 689  :             // u が 1 である場合
; 690  :             if (v->IS_ZERO)

  00067	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  0006a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0006d	83 e2 01	 and	 edx, 1
  00070	74 0c		 je	 SHORT $LN6@PMC_Multip

; 691  :             {
; 692  :                 // v が 0 である場合
; 693  : 
; 694  :                 //  0  を返す。
; 695  :                 return (&number_zero);

  00072	b8 00 00 00 00	 mov	 eax, OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  00077	e9 04 01 00 00	 jmp	 $LN1@PMC_Multip

; 696  :             }
; 697  :             else

  0007c	eb 11		 jmp	 SHORT $LN7@PMC_Multip
$LN6@PMC_Multip:

; 698  :             {
; 699  :                 // v が 0 ではない場合
; 700  : 
; 701  :                 // 乗算結果は v に等しいため、v の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 702  :                 return (DuplicateNumber(v));

  0007e	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  00087	83 c4 04	 add	 esp, 4
  0008a	e9 f1 00 00 00	 jmp	 $LN1@PMC_Multip
$LN7@PMC_Multip:

; 703  :             }
; 704  :         }
; 705  :         else

  0008f	e9 ec 00 00 00	 jmp	 $LN1@PMC_Multip
$LN4@PMC_Multip:

; 706  :         {
; 707  :             // u が 0 と 1 のどちらでもない場合
; 708  : 
; 709  :             if (v->IS_ZERO)

  00094	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  00097	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0009a	83 e2 01	 and	 edx, 1
  0009d	74 0f		 je	 SHORT $LN8@PMC_Multip

; 710  :             {
; 711  :                 // v が 0 である場合
; 712  : 
; 713  :                 //  0  を返す。
; 714  :                 return (&number_zero);

  0009f	b8 00 00 00 00	 mov	 eax, OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  000a4	e9 d7 00 00 00	 jmp	 $LN1@PMC_Multip
  000a9	e9 d2 00 00 00	 jmp	 $LN1@PMC_Multip
$LN8@PMC_Multip:

; 715  :             }
; 716  :             else if (v->IS_ONE)

  000ae	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  000b1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000b4	d1 e9		 shr	 ecx, 1
  000b6	83 e1 01	 and	 ecx, 1
  000b9	74 16		 je	 SHORT $LN10@PMC_Multip

; 717  :             {
; 718  :                 // v が 1 である場合
; 719  : 
; 720  :                 // 乗算結果は u に等しいため、u の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 721  :                 return (DuplicateNumber(u));

  000bb	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  000be	52		 push	 edx
  000bf	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  000c4	83 c4 04	 add	 esp, 4
  000c7	e9 b4 00 00 00	 jmp	 $LN1@PMC_Multip

; 722  :             }
; 723  :             else

  000cc	e9 af 00 00 00	 jmp	 $LN1@PMC_Multip
$LN10@PMC_Multip:

; 724  :             {
; 725  :                 // u と v がともに 0 、1 のどちらでもない場合
; 726  : 
; 727  :                 // u と v の積を計算する
; 728  :                 ResourceHolderUINT root;

  000d1	8d 4d e0	 lea	 ecx, DWORD PTR _root$7[ebp]
  000d4	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000d9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 729  :                 __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

  000e0	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  000e3	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000e6	89 4d d8	 mov	 DWORD PTR _u_bit_count$6[ebp], ecx

; 730  :                 __UNIT_TYPE v_bit_count = v->UNIT_BIT_COUNT;

  000e9	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  000ec	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000ef	89 45 d4	 mov	 DWORD PTR _v_bit_count$5[ebp], eax

; 731  :                 __UNIT_TYPE w_bit_count = u_bit_count + v_bit_count;

  000f2	8b 4d d8	 mov	 ecx, DWORD PTR _u_bit_count$6[ebp]
  000f5	03 4d d4	 add	 ecx, DWORD PTR _v_bit_count$5[ebp]
  000f8	89 4d d0	 mov	 DWORD PTR _w_bit_count$4[ebp], ecx

; 732  :                 NUMBER_HEADER* w = root.AllocateNumber(w_bit_count);

  000fb	8b 55 d0	 mov	 edx, DWORD PTR _w_bit_count$4[ebp]
  000fe	52		 push	 edx
  000ff	8d 4d e0	 lea	 ecx, DWORD PTR _root$7[ebp]
  00102	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  00107	89 45 cc	 mov	 DWORD PTR _w$3[ebp], eax

; 733  :                 (*fp_Multiply_X_X)(u->BLOCK, u->UNIT_WORD_COUNT, v->BLOCK, v->UNIT_WORD_COUNT, w->BLOCK);

  0010a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?fp_Multiply_X_X@Internal@Core@Math@Palmtree@@3P6AXPAII0I0@ZA
  0010f	89 45 c4	 mov	 DWORD PTR tv137[ebp], eax
  00112	8b f4		 mov	 esi, esp
  00114	8b 4d cc	 mov	 ecx, DWORD PTR _w$3[ebp]
  00117	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0011a	52		 push	 edx
  0011b	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  0011e	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00121	51		 push	 ecx
  00122	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  00125	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00128	50		 push	 eax
  00129	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  0012c	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0012f	52		 push	 edx
  00130	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00133	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00136	51		 push	 ecx
  00137	ff 55 c4	 call	 DWORD PTR tv137[ebp]
  0013a	83 c4 14	 add	 esp, 20			; 00000014H
  0013d	3b f4		 cmp	 esi, esp
  0013f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 734  :                 root.CheckNumber(w);

  00144	8b 55 cc	 mov	 edx, DWORD PTR _w$3[ebp]
  00147	52		 push	 edx
  00148	8d 4d e0	 lea	 ecx, DWORD PTR _root$7[ebp]
  0014b	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 735  :                 CommitNumber(w);

  00150	8b 45 cc	 mov	 eax, DWORD PTR _w$3[ebp]
  00153	50		 push	 eax
  00154	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  00159	83 c4 04	 add	 esp, 4

; 736  :                 root.UnlinkNumber(w);

  0015c	8b 4d cc	 mov	 ecx, DWORD PTR _w$3[ebp]
  0015f	51		 push	 ecx
  00160	8d 4d e0	 lea	 ecx, DWORD PTR _root$7[ebp]
  00163	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 737  :                 return (w);

  00168	8b 55 cc	 mov	 edx, DWORD PTR _w$3[ebp]
  0016b	89 55 c8	 mov	 DWORD PTR $T2[ebp], edx
  0016e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00175	8d 4d e0	 lea	 ecx, DWORD PTR _root$7[ebp]
  00178	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0017d	8b 45 c8	 mov	 eax, DWORD PTR $T2[ebp]
$LN1@PMC_Multip:

; 738  : 
; 739  :             }
; 740  :         }
; 741  :     }

  00180	52		 push	 edx
  00181	8b cd		 mov	 ecx, ebp
  00183	50		 push	 eax
  00184	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN17@PMC_Multip
  0018a	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0018f	58		 pop	 eax
  00190	5a		 pop	 edx
  00191	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00194	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0019b	59		 pop	 ecx
  0019c	5f		 pop	 edi
  0019d	5e		 pop	 esi
  0019e	83 c4 3c	 add	 esp, 60			; 0000003cH
  001a1	3b ec		 cmp	 ebp, esp
  001a3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a8	8b e5		 mov	 esp, ebp
  001aa	5d		 pop	 ebp
  001ab	c3		 ret	 0
$LN17@PMC_Multip:
  001ac	01 00 00 00	 DD	 1
  001b0	00 00 00 00	 DD	 $LN16@PMC_Multip
$LN16@PMC_Multip:
  001b4	e0 ff ff ff	 DD	 -32			; ffffffe0H
  001b8	10 00 00 00	 DD	 16			; 00000010H
  001bc	00 00 00 00	 DD	 $LN14@PMC_Multip
$LN14@PMC_Multip:
  001c0	72		 DB	 114			; 00000072H
  001c1	6f		 DB	 111			; 0000006fH
  001c2	6f		 DB	 111			; 0000006fH
  001c3	74		 DB	 116			; 00000074H
  001c4	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_Multiply_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _root$7[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_Multiply_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_Multiply_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_Multiply_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z ENDP ; Palmtree::Math::Core::Internal::PMC_Multiply_X_X_Imp
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
_TEXT	SEGMENT
tv186 = -168						; size = 4
tv159 = -164						; size = 4
tv134 = -160						; size = 4
$T2 = -156						; size = 4
$T3 = -152						; size = 4
$T4 = -148						; size = 4
_w$5 = -144						; size = 4
_w_bit_count$6 = -140					; size = 4
_v_bit_count$7 = -136					; size = 4
_u_bit_count$8 = -132					; size = 4
_root$9 = -124						; size = 16
_w$10 = -104						; size = 4
_w_bit_count$11 = -100					; size = 4
_v_bit_count$12 = -96					; size = 4
_root$13 = -88						; size = 16
_w$14 = -68						; size = 4
_w_bit_count$15 = -64					; size = 4
_v_bit_count$16 = -60					; size = 4
_root$17 = -52						; size = 16
_v_lo$18 = -32						; size = 4
_v_hi$19 = -24						; size = 4
_u_bit_count$20 = -16					; size = 4
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 8
?PMC_Multiply_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z PROC ; Palmtree::Math::Core::Internal::PMC_Multiply_X_L_Imp

; 537  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_Multiply_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 9c 00 00
	00		 sub	 esp, 156		; 0000009cH
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8d bd 58 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-168]
  0001f	b9 27 00 00 00	 mov	 ecx, 39			; 00000027H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	b9 00 00 00 00	 mov	 ecx, OFFSET __05528951_pmc_multiply@cpp
  00041	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 538  :         if (u->IS_ZERO)

  00046	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00049	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004c	83 e1 01	 and	 ecx, 1
  0004f	74 0f		 je	 SHORT $LN2@PMC_Multip

; 539  :         {
; 540  :             // u が 0 である場合
; 541  : 
; 542  :             // v の値にかかわらず 0 を返す。
; 543  :             return (&number_zero);

  00051	b8 00 00 00 00	 mov	 eax, OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  00056	e9 17 03 00 00	 jmp	 $LN1@PMC_Multip
  0005b	e9 12 03 00 00	 jmp	 $LN1@PMC_Multip
$LN2@PMC_Multip:

; 544  :         }
; 545  :         else if (u->IS_ONE)

  00060	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00063	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00066	d1 e8		 shr	 eax, 1
  00068	83 e0 01	 and	 eax, 1
  0006b	74 2e		 je	 SHORT $LN4@PMC_Multip

; 546  :         {
; 547  :             // u が 1 である場合
; 548  :             if (v == 0)

  0006d	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  00070	0b 4d 10	 or	 ecx, DWORD PTR _v$[ebp+4]
  00073	75 0c		 jne	 SHORT $LN6@PMC_Multip

; 549  :             {
; 550  :                 // v が 0 である場合
; 551  : 
; 552  :                 //  0  を返す。
; 553  :                 return (&number_zero);

  00075	b8 00 00 00 00	 mov	 eax, OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  0007a	e9 f3 02 00 00	 jmp	 $LN1@PMC_Multip

; 554  :             }
; 555  :             else

  0007f	eb 15		 jmp	 SHORT $LN7@PMC_Multip
$LN6@PMC_Multip:

; 556  :             {
; 557  :                 // v が 0 ではない場合
; 558  : 
; 559  :                 // 乗算結果は v に等しいため、v の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 560  :                 return (From_L_Imp(v));

  00081	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp+4]
  00084	52		 push	 edx
  00085	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ?From_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@_K@Z ; Palmtree::Math::Core::Internal::From_L_Imp
  0008e	83 c4 08	 add	 esp, 8
  00091	e9 dc 02 00 00	 jmp	 $LN1@PMC_Multip
$LN7@PMC_Multip:

; 561  :             }
; 562  :         }
; 563  :         else

  00096	e9 d7 02 00 00	 jmp	 $LN1@PMC_Multip
$LN4@PMC_Multip:

; 564  :         {
; 565  :             // u が 0 と 1 のどちらでもない場合
; 566  : 
; 567  :             if (v == 0)

  0009b	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  0009e	0b 4d 10	 or	 ecx, DWORD PTR _v$[ebp+4]
  000a1	75 0f		 jne	 SHORT $LN8@PMC_Multip

; 568  :             {
; 569  :                 // v が 0 である場合
; 570  : 
; 571  :                 //  0  を返す。
; 572  :                 return (&number_zero);

  000a3	b8 00 00 00 00	 mov	 eax, OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  000a8	e9 c5 02 00 00	 jmp	 $LN1@PMC_Multip
  000ad	e9 c0 02 00 00	 jmp	 $LN1@PMC_Multip
$LN8@PMC_Multip:

; 573  :             }
; 574  :             else if (v == 1)

  000b2	83 7d 0c 01	 cmp	 DWORD PTR _v$[ebp], 1
  000b6	75 1c		 jne	 SHORT $LN10@PMC_Multip
  000b8	83 7d 10 00	 cmp	 DWORD PTR _v$[ebp+4], 0
  000bc	75 16		 jne	 SHORT $LN10@PMC_Multip

; 575  :             {
; 576  :                 // v が 1 である場合
; 577  : 
; 578  :                 // 乗算結果は u に等しいため、u の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 579  :                 return (DuplicateNumber(u));

  000be	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  000c1	52		 push	 edx
  000c2	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  000c7	83 c4 04	 add	 esp, 4
  000ca	e9 a3 02 00 00	 jmp	 $LN1@PMC_Multip

; 580  :             }
; 581  :             else

  000cf	e9 9e 02 00 00	 jmp	 $LN1@PMC_Multip
$LN10@PMC_Multip:

; 582  :             {
; 583  :                 // u と v がともに 0 、1 のどちらでもない場合
; 584  : 
; 585  :                 // u と v の積を計算する
; 586  :                 if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)

  000d4	b8 01 00 00 00	 mov	 eax, 1
  000d9	85 c0		 test	 eax, eax
  000db	0f 84 ae 01 00
	00		 je	 $LN12@PMC_Multip

; 587  :                 {
; 588  :                     // _UINT64_T が 1 ワードで表現しきれない場合
; 589  : 
; 590  :                     __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

  000e1	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  000e4	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000e7	89 55 f0	 mov	 DWORD PTR _u_bit_count$20[ebp], edx

; 591  :                     _UINT32_T v_hi;
; 592  :                     _UINT32_T v_lo = _FROMDWORDTOWORD(v, &v_hi);

  000ea	8d 45 e8	 lea	 eax, DWORD PTR _v_hi$19[ebp]
  000ed	50		 push	 eax
  000ee	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp+4]
  000f1	51		 push	 ecx
  000f2	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  000f5	52		 push	 edx
  000f6	e8 00 00 00 00	 call	 __FROMDWORDTOWORD
  000fb	83 c4 0c	 add	 esp, 12			; 0000000cH
  000fe	89 45 e0	 mov	 DWORD PTR _v_lo$18[ebp], eax

; 593  :                     if (v_hi == 0)

  00101	83 7d e8 00	 cmp	 DWORD PTR _v_hi$19[ebp], 0
  00105	0f 85 c0 00 00
	00		 jne	 $LN14@PMC_Multip

; 594  :                     {
; 595  :                         // v の値が 32bit で表現可能な場合
; 596  :                         ResourceHolderUINT root;

  0010b	8d 4d cc	 lea	 ecx, DWORD PTR _root$17[ebp]
  0010e	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00113	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 597  :                         __UNIT_TYPE v_bit_count = sizeof(v_lo) * 8 - _LZCNT_ALT_32(v_lo);

  0011a	8b 45 e0	 mov	 eax, DWORD PTR _v_lo$18[ebp]
  0011d	50		 push	 eax
  0011e	e8 00 00 00 00	 call	 __LZCNT_ALT_32
  00123	83 c4 04	 add	 esp, 4
  00126	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0012b	2b c8		 sub	 ecx, eax
  0012d	89 4d c4	 mov	 DWORD PTR _v_bit_count$16[ebp], ecx

; 598  :                         __UNIT_TYPE w_bit_count = u_bit_count + v_bit_count;

  00130	8b 55 f0	 mov	 edx, DWORD PTR _u_bit_count$20[ebp]
  00133	03 55 c4	 add	 edx, DWORD PTR _v_bit_count$16[ebp]
  00136	89 55 c0	 mov	 DWORD PTR _w_bit_count$15[ebp], edx

; 599  :                         NUMBER_HEADER* w = root.AllocateNumber(w_bit_count);

  00139	8b 45 c0	 mov	 eax, DWORD PTR _w_bit_count$15[ebp]
  0013c	50		 push	 eax
  0013d	8d 4d cc	 lea	 ecx, DWORD PTR _root$17[ebp]
  00140	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  00145	89 45 bc	 mov	 DWORD PTR _w$14[ebp], eax

; 600  :                         (*fp_Multiply_X_1W)(u->BLOCK, u->UNIT_WORD_COUNT, v_lo, w->BLOCK);

  00148	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?fp_Multiply_X_1W@Internal@Core@Math@Palmtree@@3P6AXPAIII0@ZA
  0014e	89 8d 60 ff ff
	ff		 mov	 DWORD PTR tv134[ebp], ecx
  00154	8b f4		 mov	 esi, esp
  00156	8b 55 bc	 mov	 edx, DWORD PTR _w$14[ebp]
  00159	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0015c	50		 push	 eax
  0015d	8b 4d e0	 mov	 ecx, DWORD PTR _v_lo$18[ebp]
  00160	51		 push	 ecx
  00161	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00164	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00167	50		 push	 eax
  00168	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  0016b	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0016e	52		 push	 edx
  0016f	ff 95 60 ff ff
	ff		 call	 DWORD PTR tv134[ebp]
  00175	83 c4 10	 add	 esp, 16			; 00000010H
  00178	3b f4		 cmp	 esi, esp
  0017a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 601  :                         root.CheckNumber(w);

  0017f	8b 45 bc	 mov	 eax, DWORD PTR _w$14[ebp]
  00182	50		 push	 eax
  00183	8d 4d cc	 lea	 ecx, DWORD PTR _root$17[ebp]
  00186	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 602  :                         CommitNumber(w);

  0018b	8b 4d bc	 mov	 ecx, DWORD PTR _w$14[ebp]
  0018e	51		 push	 ecx
  0018f	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  00194	83 c4 04	 add	 esp, 4

; 603  :                         root.UnlinkNumber(w);

  00197	8b 55 bc	 mov	 edx, DWORD PTR _w$14[ebp]
  0019a	52		 push	 edx
  0019b	8d 4d cc	 lea	 ecx, DWORD PTR _root$17[ebp]
  0019e	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 604  :                         return (w);

  001a3	8b 45 bc	 mov	 eax, DWORD PTR _w$14[ebp]
  001a6	89 85 6c ff ff
	ff		 mov	 DWORD PTR $T4[ebp], eax
  001ac	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001b3	8d 4d cc	 lea	 ecx, DWORD PTR _root$17[ebp]
  001b6	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  001bb	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR $T4[ebp]
  001c1	e9 ac 01 00 00	 jmp	 $LN1@PMC_Multip

; 605  :                     }
; 606  :                     else

  001c6	e9 bf 00 00 00	 jmp	 $LN15@PMC_Multip
$LN14@PMC_Multip:

; 607  :                     {
; 608  :                         // v の値が 32bit では表現できない場合
; 609  :                         ResourceHolderUINT root;

  001cb	8d 4d a8	 lea	 ecx, DWORD PTR _root$13[ebp]
  001ce	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  001d3	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 610  :                         __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v_hi);

  001da	8b 4d e8	 mov	 ecx, DWORD PTR _v_hi$19[ebp]
  001dd	51		 push	 ecx
  001de	e8 00 00 00 00	 call	 __LZCNT_ALT_32
  001e3	83 c4 04	 add	 esp, 4
  001e6	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  001eb	2b d0		 sub	 edx, eax
  001ed	89 55 a0	 mov	 DWORD PTR _v_bit_count$12[ebp], edx

; 611  :                         __UNIT_TYPE w_bit_count = u_bit_count + v_bit_count;

  001f0	8b 45 f0	 mov	 eax, DWORD PTR _u_bit_count$20[ebp]
  001f3	03 45 a0	 add	 eax, DWORD PTR _v_bit_count$12[ebp]
  001f6	89 45 9c	 mov	 DWORD PTR _w_bit_count$11[ebp], eax

; 612  :                         NUMBER_HEADER* w = root.AllocateNumber(w_bit_count);

  001f9	8b 4d 9c	 mov	 ecx, DWORD PTR _w_bit_count$11[ebp]
  001fc	51		 push	 ecx
  001fd	8d 4d a8	 lea	 ecx, DWORD PTR _root$13[ebp]
  00200	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  00205	89 45 98	 mov	 DWORD PTR _w$10[ebp], eax

; 613  :                         (*fp_Multiply_X_2W)(u->BLOCK, u->UNIT_WORD_COUNT, v_hi, v_lo, w->BLOCK);

  00208	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?fp_Multiply_X_2W@Internal@Core@Math@Palmtree@@3P6AXPAIIII0@ZA
  0020e	89 95 5c ff ff
	ff		 mov	 DWORD PTR tv159[ebp], edx
  00214	8b f4		 mov	 esi, esp
  00216	8b 45 98	 mov	 eax, DWORD PTR _w$10[ebp]
  00219	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0021c	51		 push	 ecx
  0021d	8b 55 e0	 mov	 edx, DWORD PTR _v_lo$18[ebp]
  00220	52		 push	 edx
  00221	8b 45 e8	 mov	 eax, DWORD PTR _v_hi$19[ebp]
  00224	50		 push	 eax
  00225	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  00228	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0022b	52		 push	 edx
  0022c	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  0022f	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00232	51		 push	 ecx
  00233	ff 95 5c ff ff
	ff		 call	 DWORD PTR tv159[ebp]
  00239	83 c4 14	 add	 esp, 20			; 00000014H
  0023c	3b f4		 cmp	 esi, esp
  0023e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 614  :                         root.CheckNumber(w);

  00243	8b 55 98	 mov	 edx, DWORD PTR _w$10[ebp]
  00246	52		 push	 edx
  00247	8d 4d a8	 lea	 ecx, DWORD PTR _root$13[ebp]
  0024a	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 615  :                         CommitNumber(w);

  0024f	8b 45 98	 mov	 eax, DWORD PTR _w$10[ebp]
  00252	50		 push	 eax
  00253	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  00258	83 c4 04	 add	 esp, 4

; 616  :                         root.UnlinkNumber(w);

  0025b	8b 4d 98	 mov	 ecx, DWORD PTR _w$10[ebp]
  0025e	51		 push	 ecx
  0025f	8d 4d a8	 lea	 ecx, DWORD PTR _root$13[ebp]
  00262	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 617  :                         return (w);

  00267	8b 55 98	 mov	 edx, DWORD PTR _w$10[ebp]
  0026a	89 95 68 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], edx
  00270	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00277	8d 4d a8	 lea	 ecx, DWORD PTR _root$13[ebp]
  0027a	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0027f	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR $T3[ebp]
  00285	e9 e8 00 00 00	 jmp	 $LN1@PMC_Multip
$LN15@PMC_Multip:

; 618  :                     }
; 619  :                 }
; 620  :                 else

  0028a	e9 e3 00 00 00	 jmp	 $LN1@PMC_Multip
$LN12@PMC_Multip:

; 621  :                 {
; 622  :                     // _UINT64_T が 1 ワードで表現できる場合
; 623  :                     ResourceHolderUINT root;

  0028f	8d 4d 84	 lea	 ecx, DWORD PTR _root$9[ebp]
  00292	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00297	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2

; 624  :                     __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

  0029e	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  002a1	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  002a4	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _u_bit_count$8[ebp], ecx

; 625  :                     __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);

  002aa	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  002ad	52		 push	 edx
  002ae	e8 00 00 00 00	 call	 __LZCNT_ALT_UNIT
  002b3	83 c4 04	 add	 esp, 4
  002b6	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  002bb	2b c8		 sub	 ecx, eax
  002bd	89 8d 78 ff ff
	ff		 mov	 DWORD PTR _v_bit_count$7[ebp], ecx

; 626  :                     __UNIT_TYPE w_bit_count = u_bit_count + v_bit_count;

  002c3	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _u_bit_count$8[ebp]
  002c9	03 95 78 ff ff
	ff		 add	 edx, DWORD PTR _v_bit_count$7[ebp]
  002cf	89 95 74 ff ff
	ff		 mov	 DWORD PTR _w_bit_count$6[ebp], edx

; 627  :                     NUMBER_HEADER* w = root.AllocateNumber(w_bit_count);

  002d5	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _w_bit_count$6[ebp]
  002db	50		 push	 eax
  002dc	8d 4d 84	 lea	 ecx, DWORD PTR _root$9[ebp]
  002df	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  002e4	89 85 70 ff ff
	ff		 mov	 DWORD PTR _w$5[ebp], eax

; 628  :                     (*fp_Multiply_X_1W)(u->BLOCK, u->UNIT_WORD_COUNT, (__UNIT_TYPE)v, w->BLOCK);

  002ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?fp_Multiply_X_1W@Internal@Core@Math@Palmtree@@3P6AXPAIII0@ZA
  002f0	89 8d 58 ff ff
	ff		 mov	 DWORD PTR tv186[ebp], ecx
  002f6	8b f4		 mov	 esi, esp
  002f8	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _w$5[ebp]
  002fe	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00301	50		 push	 eax
  00302	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  00305	51		 push	 ecx
  00306	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00309	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0030c	50		 push	 eax
  0030d	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  00310	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00313	52		 push	 edx
  00314	ff 95 58 ff ff
	ff		 call	 DWORD PTR tv186[ebp]
  0031a	83 c4 10	 add	 esp, 16			; 00000010H
  0031d	3b f4		 cmp	 esi, esp
  0031f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 629  :                     root.CheckNumber(w);

  00324	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _w$5[ebp]
  0032a	50		 push	 eax
  0032b	8d 4d 84	 lea	 ecx, DWORD PTR _root$9[ebp]
  0032e	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 630  :                     CommitNumber(w);

  00333	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _w$5[ebp]
  00339	51		 push	 ecx
  0033a	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  0033f	83 c4 04	 add	 esp, 4

; 631  :                     root.UnlinkNumber(w);

  00342	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _w$5[ebp]
  00348	52		 push	 edx
  00349	8d 4d 84	 lea	 ecx, DWORD PTR _root$9[ebp]
  0034c	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 632  :                     return (w);

  00351	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _w$5[ebp]
  00357	89 85 64 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  0035d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00364	8d 4d 84	 lea	 ecx, DWORD PTR _root$9[ebp]
  00367	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0036c	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
$LN1@PMC_Multip:

; 633  :                 }
; 634  :             }
; 635  :         }
; 636  :     }

  00372	52		 push	 edx
  00373	8b cd		 mov	 ecx, ebp
  00375	50		 push	 eax
  00376	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN26@PMC_Multip
  0037c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00381	58		 pop	 eax
  00382	5a		 pop	 edx
  00383	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00386	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0038d	59		 pop	 ecx
  0038e	5f		 pop	 edi
  0038f	5e		 pop	 esi
  00390	81 c4 a8 00 00
	00		 add	 esp, 168		; 000000a8H
  00396	3b ec		 cmp	 ebp, esp
  00398	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0039d	8b e5		 mov	 esp, ebp
  0039f	5d		 pop	 ebp
  003a0	c3		 ret	 0
  003a1	0f 1f 00	 npad	 3
$LN26@PMC_Multip:
  003a4	04 00 00 00	 DD	 4
  003a8	00 00 00 00	 DD	 $LN25@PMC_Multip
$LN25@PMC_Multip:
  003ac	e8 ff ff ff	 DD	 -24			; ffffffe8H
  003b0	04 00 00 00	 DD	 4
  003b4	00 00 00 00	 DD	 $LN20@PMC_Multip
  003b8	cc ff ff ff	 DD	 -52			; ffffffccH
  003bc	10 00 00 00	 DD	 16			; 00000010H
  003c0	00 00 00 00	 DD	 $LN21@PMC_Multip
  003c4	a8 ff ff ff	 DD	 -88			; ffffffa8H
  003c8	10 00 00 00	 DD	 16			; 00000010H
  003cc	00 00 00 00	 DD	 $LN22@PMC_Multip
  003d0	84 ff ff ff	 DD	 -124			; ffffff84H
  003d4	10 00 00 00	 DD	 16			; 00000010H
  003d8	00 00 00 00	 DD	 $LN23@PMC_Multip
$LN23@PMC_Multip:
  003dc	72		 DB	 114			; 00000072H
  003dd	6f		 DB	 111			; 0000006fH
  003de	6f		 DB	 111			; 0000006fH
  003df	74		 DB	 116			; 00000074H
  003e0	00		 DB	 0
$LN22@PMC_Multip:
  003e1	72		 DB	 114			; 00000072H
  003e2	6f		 DB	 111			; 0000006fH
  003e3	6f		 DB	 111			; 0000006fH
  003e4	74		 DB	 116			; 00000074H
  003e5	00		 DB	 0
$LN21@PMC_Multip:
  003e6	72		 DB	 114			; 00000072H
  003e7	6f		 DB	 111			; 0000006fH
  003e8	6f		 DB	 111			; 0000006fH
  003e9	74		 DB	 116			; 00000074H
  003ea	00		 DB	 0
$LN20@PMC_Multip:
  003eb	76		 DB	 118			; 00000076H
  003ec	5f		 DB	 95			; 0000005fH
  003ed	68		 DB	 104			; 00000068H
  003ee	69		 DB	 105			; 00000069H
  003ef	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_Multiply_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z$0:
  00000	8d 4d cc	 lea	 ecx, DWORD PTR _root$17[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__unwindfunclet$?PMC_Multiply_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z$1:
  00008	8d 4d a8	 lea	 ecx, DWORD PTR _root$13[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__unwindfunclet$?PMC_Multiply_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z$2:
  00010	8d 4d 84	 lea	 ecx, DWORD PTR _root$9[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_Multiply_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 8a 58 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-168]
  00025	33 c8		 xor	 ecx, eax
  00027	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_Multiply_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z
  00031	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_Multiply_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z ENDP ; Palmtree::Math::Core::Internal::PMC_Multiply_X_L_Imp
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
_TEXT	SEGMENT
_wp$ = -20						; size = 4
_vp$ = -16						; size = 4
_up$ = -12						; size = 4
_t_count$1 = -8						; size = 4
_t_buf$2 = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v_buf$ = 16						; size = 4
_v_count$ = 20						; size = 4
_w_buf$ = 24						; size = 4
?Multiply_X_X_using_MULX_ADCX@Internal@Core@Math@Palmtree@@YAXPAII0I0@Z PROC ; Palmtree::Math::Core::Internal::Multiply_X_X_using_MULX_ADCX

; 408  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00011	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00014	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00017	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001a	b9 00 00 00 00	 mov	 ecx, OFFSET __05528951_pmc_multiply@cpp
  0001f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 409  :         // x のワード長が y のワード長以上であるようにする
; 410  :         if (u_count < v_count)

  00024	8b 45 0c	 mov	 eax, DWORD PTR _u_count$[ebp]
  00027	3b 45 14	 cmp	 eax, DWORD PTR _v_count$[ebp]
  0002a	73 24		 jae	 SHORT $LN5@Multiply_X

; 411  :         {
; 412  :             __UNIT_TYPE* t_buf = u_buf;

  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  0002f	89 4d fc	 mov	 DWORD PTR _t_buf$2[ebp], ecx

; 413  :             u_buf = v_buf;

  00032	8b 55 10	 mov	 edx, DWORD PTR _v_buf$[ebp]
  00035	89 55 08	 mov	 DWORD PTR _u_buf$[ebp], edx

; 414  :             v_buf = t_buf;

  00038	8b 45 fc	 mov	 eax, DWORD PTR _t_buf$2[ebp]
  0003b	89 45 10	 mov	 DWORD PTR _v_buf$[ebp], eax

; 415  :             __UNIT_TYPE t_count = u_count;

  0003e	8b 4d 0c	 mov	 ecx, DWORD PTR _u_count$[ebp]
  00041	89 4d f8	 mov	 DWORD PTR _t_count$1[ebp], ecx

; 416  :             u_count = v_count;

  00044	8b 55 14	 mov	 edx, DWORD PTR _v_count$[ebp]
  00047	89 55 0c	 mov	 DWORD PTR _u_count$[ebp], edx

; 417  :             v_count = t_count;

  0004a	8b 45 f8	 mov	 eax, DWORD PTR _t_count$1[ebp]
  0004d	89 45 14	 mov	 DWORD PTR _v_count$[ebp], eax
$LN5@Multiply_X:

; 418  :         }
; 419  :         __UNIT_TYPE* up = u_buf;

  00050	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  00053	89 4d f4	 mov	 DWORD PTR _up$[ebp], ecx

; 420  :         __UNIT_TYPE* vp = v_buf;

  00056	8b 55 10	 mov	 edx, DWORD PTR _v_buf$[ebp]
  00059	89 55 f0	 mov	 DWORD PTR _vp$[ebp], edx

; 421  :         __UNIT_TYPE* wp = w_buf;

  0005c	8b 45 18	 mov	 eax, DWORD PTR _w_buf$[ebp]
  0005f	89 45 ec	 mov	 DWORD PTR _wp$[ebp], eax
$LN4@Multiply_X:

; 422  : 
; 423  :         do
; 424  :         {
; 425  :             Multiply_WORD_using_MULX_ADCX(up, u_count, *vp, wp);

  00062	8b 4d ec	 mov	 ecx, DWORD PTR _wp$[ebp]
  00065	51		 push	 ecx
  00066	8b 55 f0	 mov	 edx, DWORD PTR _vp$[ebp]
  00069	8b 02		 mov	 eax, DWORD PTR [edx]
  0006b	50		 push	 eax
  0006c	8b 4d 0c	 mov	 ecx, DWORD PTR _u_count$[ebp]
  0006f	51		 push	 ecx
  00070	8b 55 f4	 mov	 edx, DWORD PTR _up$[ebp]
  00073	52		 push	 edx
  00074	e8 00 00 00 00	 call	 ?Multiply_WORD_using_MULX_ADCX@Internal@Core@Math@Palmtree@@YAXPAIII0@Z ; Palmtree::Math::Core::Internal::Multiply_WORD_using_MULX_ADCX
  00079	83 c4 10	 add	 esp, 16			; 00000010H

; 426  :             ++vp;

  0007c	8b 45 f0	 mov	 eax, DWORD PTR _vp$[ebp]
  0007f	83 c0 04	 add	 eax, 4
  00082	89 45 f0	 mov	 DWORD PTR _vp$[ebp], eax

; 427  :             ++wp;

  00085	8b 4d ec	 mov	 ecx, DWORD PTR _wp$[ebp]
  00088	83 c1 04	 add	 ecx, 4
  0008b	89 4d ec	 mov	 DWORD PTR _wp$[ebp], ecx

; 428  :             --v_count;

  0008e	8b 55 14	 mov	 edx, DWORD PTR _v_count$[ebp]
  00091	83 ea 01	 sub	 edx, 1
  00094	89 55 14	 mov	 DWORD PTR _v_count$[ebp], edx

; 429  :         } while (v_count != 0);

  00097	75 c9		 jne	 SHORT $LN4@Multiply_X

; 430  :     }

  00099	83 c4 14	 add	 esp, 20			; 00000014H
  0009c	3b ec		 cmp	 ebp, esp
  0009e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a3	8b e5		 mov	 esp, ebp
  000a5	5d		 pop	 ebp
  000a6	c3		 ret	 0
?Multiply_X_X_using_MULX_ADCX@Internal@Core@Math@Palmtree@@YAXPAII0I0@Z ENDP ; Palmtree::Math::Core::Internal::Multiply_X_X_using_MULX_ADCX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
_TEXT	SEGMENT
_wp$ = -20						; size = 4
_vp$ = -16						; size = 4
_up$ = -12						; size = 4
_t_count$1 = -8						; size = 4
_t_buf$2 = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v_buf$ = 16						; size = 4
_v_count$ = 20						; size = 4
_w_buf$ = 24						; size = 4
?Multiply_X_X_using_MUL_ADC@Internal@Core@Math@Palmtree@@YAXPAII0I0@Z PROC ; Palmtree::Math::Core::Internal::Multiply_X_X_using_MUL_ADC

; 383  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00011	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00014	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00017	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001a	b9 00 00 00 00	 mov	 ecx, OFFSET __05528951_pmc_multiply@cpp
  0001f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 384  :         // x のワード長が y のワード長以上であるようにする
; 385  :         if (u_count < v_count)

  00024	8b 45 0c	 mov	 eax, DWORD PTR _u_count$[ebp]
  00027	3b 45 14	 cmp	 eax, DWORD PTR _v_count$[ebp]
  0002a	73 24		 jae	 SHORT $LN5@Multiply_X

; 386  :         {
; 387  :             __UNIT_TYPE* t_buf = u_buf;

  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  0002f	89 4d fc	 mov	 DWORD PTR _t_buf$2[ebp], ecx

; 388  :             u_buf = v_buf;

  00032	8b 55 10	 mov	 edx, DWORD PTR _v_buf$[ebp]
  00035	89 55 08	 mov	 DWORD PTR _u_buf$[ebp], edx

; 389  :             v_buf = t_buf;

  00038	8b 45 fc	 mov	 eax, DWORD PTR _t_buf$2[ebp]
  0003b	89 45 10	 mov	 DWORD PTR _v_buf$[ebp], eax

; 390  :             __UNIT_TYPE t_count = u_count;

  0003e	8b 4d 0c	 mov	 ecx, DWORD PTR _u_count$[ebp]
  00041	89 4d f8	 mov	 DWORD PTR _t_count$1[ebp], ecx

; 391  :             u_count = v_count;

  00044	8b 55 14	 mov	 edx, DWORD PTR _v_count$[ebp]
  00047	89 55 0c	 mov	 DWORD PTR _u_count$[ebp], edx

; 392  :             v_count = t_count;

  0004a	8b 45 f8	 mov	 eax, DWORD PTR _t_count$1[ebp]
  0004d	89 45 14	 mov	 DWORD PTR _v_count$[ebp], eax
$LN5@Multiply_X:

; 393  :         }
; 394  :         __UNIT_TYPE* up = u_buf;

  00050	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  00053	89 4d f4	 mov	 DWORD PTR _up$[ebp], ecx

; 395  :         __UNIT_TYPE* vp = v_buf;

  00056	8b 55 10	 mov	 edx, DWORD PTR _v_buf$[ebp]
  00059	89 55 f0	 mov	 DWORD PTR _vp$[ebp], edx

; 396  :         __UNIT_TYPE* wp = w_buf;

  0005c	8b 45 18	 mov	 eax, DWORD PTR _w_buf$[ebp]
  0005f	89 45 ec	 mov	 DWORD PTR _wp$[ebp], eax
$LN4@Multiply_X:

; 397  : 
; 398  :         do
; 399  :         {
; 400  :             Multiply_WORD_using_MUL_ADC(up, u_count, *vp, wp);

  00062	8b 4d ec	 mov	 ecx, DWORD PTR _wp$[ebp]
  00065	51		 push	 ecx
  00066	8b 55 f0	 mov	 edx, DWORD PTR _vp$[ebp]
  00069	8b 02		 mov	 eax, DWORD PTR [edx]
  0006b	50		 push	 eax
  0006c	8b 4d 0c	 mov	 ecx, DWORD PTR _u_count$[ebp]
  0006f	51		 push	 ecx
  00070	8b 55 f4	 mov	 edx, DWORD PTR _up$[ebp]
  00073	52		 push	 edx
  00074	e8 00 00 00 00	 call	 ?Multiply_WORD_using_MUL_ADC@Internal@Core@Math@Palmtree@@YAXPAIII0@Z ; Palmtree::Math::Core::Internal::Multiply_WORD_using_MUL_ADC
  00079	83 c4 10	 add	 esp, 16			; 00000010H

; 401  :             ++vp;

  0007c	8b 45 f0	 mov	 eax, DWORD PTR _vp$[ebp]
  0007f	83 c0 04	 add	 eax, 4
  00082	89 45 f0	 mov	 DWORD PTR _vp$[ebp], eax

; 402  :             ++wp;

  00085	8b 4d ec	 mov	 ecx, DWORD PTR _wp$[ebp]
  00088	83 c1 04	 add	 ecx, 4
  0008b	89 4d ec	 mov	 DWORD PTR _wp$[ebp], ecx

; 403  :             --v_count;

  0008e	8b 55 14	 mov	 edx, DWORD PTR _v_count$[ebp]
  00091	83 ea 01	 sub	 edx, 1
  00094	89 55 14	 mov	 DWORD PTR _v_count$[ebp], edx

; 404  :         } while (v_count != 0);

  00097	75 c9		 jne	 SHORT $LN4@Multiply_X

; 405  :     }

  00099	83 c4 14	 add	 esp, 20			; 00000014H
  0009c	3b ec		 cmp	 ebp, esp
  0009e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a3	8b e5		 mov	 esp, ebp
  000a5	5d		 pop	 ebp
  000a6	c3		 ret	 0
?Multiply_X_X_using_MUL_ADC@Internal@Core@Math@Palmtree@@YAXPAII0I0@Z ENDP ; Palmtree::Math::Core::Internal::Multiply_X_X_using_MUL_ADC
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
_TEXT	SEGMENT
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v_hi$ = 16						; size = 4
_v_lo$ = 20						; size = 4
_w_buf$ = 24						; size = 4
?Multiply_X_2W_using_MULX_ADCX@Internal@Core@Math@Palmtree@@YAXPAIIII0@Z PROC ; Palmtree::Math::Core::Internal::Multiply_X_2W_using_MULX_ADCX

; 377  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __05528951_pmc_multiply@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 378  :         Multiply_WORD_using_MULX_ADCX(u_buf, u_count, v_lo, &w_buf[0]);

  0000d	b8 04 00 00 00	 mov	 eax, 4
  00012	6b c8 00	 imul	 ecx, eax, 0
  00015	03 4d 18	 add	 ecx, DWORD PTR _w_buf$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 14	 mov	 edx, DWORD PTR _v_lo$[ebp]
  0001c	52		 push	 edx
  0001d	8b 45 0c	 mov	 eax, DWORD PTR _u_count$[ebp]
  00020	50		 push	 eax
  00021	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  00024	51		 push	 ecx
  00025	e8 00 00 00 00	 call	 ?Multiply_WORD_using_MULX_ADCX@Internal@Core@Math@Palmtree@@YAXPAIII0@Z ; Palmtree::Math::Core::Internal::Multiply_WORD_using_MULX_ADCX
  0002a	83 c4 10	 add	 esp, 16			; 00000010H

; 379  :         Multiply_WORD_using_MULX_ADCX(u_buf, u_count, v_hi, &w_buf[1]);

  0002d	ba 04 00 00 00	 mov	 edx, 4
  00032	c1 e2 00	 shl	 edx, 0
  00035	03 55 18	 add	 edx, DWORD PTR _w_buf$[ebp]
  00038	52		 push	 edx
  00039	8b 45 10	 mov	 eax, DWORD PTR _v_hi$[ebp]
  0003c	50		 push	 eax
  0003d	8b 4d 0c	 mov	 ecx, DWORD PTR _u_count$[ebp]
  00040	51		 push	 ecx
  00041	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  00044	52		 push	 edx
  00045	e8 00 00 00 00	 call	 ?Multiply_WORD_using_MULX_ADCX@Internal@Core@Math@Palmtree@@YAXPAIII0@Z ; Palmtree::Math::Core::Internal::Multiply_WORD_using_MULX_ADCX
  0004a	83 c4 10	 add	 esp, 16			; 00000010H

; 380  :     }

  0004d	3b ec		 cmp	 ebp, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?Multiply_X_2W_using_MULX_ADCX@Internal@Core@Math@Palmtree@@YAXPAIIII0@Z ENDP ; Palmtree::Math::Core::Internal::Multiply_X_2W_using_MULX_ADCX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
_TEXT	SEGMENT
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v_hi$ = 16						; size = 4
_v_lo$ = 20						; size = 4
_w_buf$ = 24						; size = 4
?Multiply_X_2W_using_MUL_ADC@Internal@Core@Math@Palmtree@@YAXPAIIII0@Z PROC ; Palmtree::Math::Core::Internal::Multiply_X_2W_using_MUL_ADC

; 371  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __05528951_pmc_multiply@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 372  :         Multiply_WORD_using_MUL_ADC(u_buf, u_count, v_lo, &w_buf[0]);

  0000d	b8 04 00 00 00	 mov	 eax, 4
  00012	6b c8 00	 imul	 ecx, eax, 0
  00015	03 4d 18	 add	 ecx, DWORD PTR _w_buf$[ebp]
  00018	51		 push	 ecx
  00019	8b 55 14	 mov	 edx, DWORD PTR _v_lo$[ebp]
  0001c	52		 push	 edx
  0001d	8b 45 0c	 mov	 eax, DWORD PTR _u_count$[ebp]
  00020	50		 push	 eax
  00021	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  00024	51		 push	 ecx
  00025	e8 00 00 00 00	 call	 ?Multiply_WORD_using_MUL_ADC@Internal@Core@Math@Palmtree@@YAXPAIII0@Z ; Palmtree::Math::Core::Internal::Multiply_WORD_using_MUL_ADC
  0002a	83 c4 10	 add	 esp, 16			; 00000010H

; 373  :         Multiply_WORD_using_MUL_ADC(u_buf, u_count, v_hi, &w_buf[1]);

  0002d	ba 04 00 00 00	 mov	 edx, 4
  00032	c1 e2 00	 shl	 edx, 0
  00035	03 55 18	 add	 edx, DWORD PTR _w_buf$[ebp]
  00038	52		 push	 edx
  00039	8b 45 10	 mov	 eax, DWORD PTR _v_hi$[ebp]
  0003c	50		 push	 eax
  0003d	8b 4d 0c	 mov	 ecx, DWORD PTR _u_count$[ebp]
  00040	51		 push	 ecx
  00041	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  00044	52		 push	 edx
  00045	e8 00 00 00 00	 call	 ?Multiply_WORD_using_MUL_ADC@Internal@Core@Math@Palmtree@@YAXPAIII0@Z ; Palmtree::Math::Core::Internal::Multiply_WORD_using_MUL_ADC
  0004a	83 c4 10	 add	 esp, 16			; 00000010H

; 374  :     }

  0004d	3b ec		 cmp	 ebp, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
?Multiply_X_2W_using_MUL_ADC@Internal@Core@Math@Palmtree@@YAXPAIIII0@Z ENDP ; Palmtree::Math::Core::Internal::Multiply_X_2W_using_MUL_ADC
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
_TEXT	SEGMENT
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v$ = 16						; size = 4
_w_buf$ = 20						; size = 4
?Multiply_X_1W_using_MULX_ADCX@Internal@Core@Math@Palmtree@@YAXPAIII0@Z PROC ; Palmtree::Math::Core::Internal::Multiply_X_1W_using_MULX_ADCX

; 366  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __05528951_pmc_multiply@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 367  :         Multiply_WORD_using_MULX_ADCX(u_buf, u_count, v, w_buf);

  0000d	8b 45 14	 mov	 eax, DWORD PTR _w_buf$[ebp]
  00010	50		 push	 eax
  00011	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00014	51		 push	 ecx
  00015	8b 55 0c	 mov	 edx, DWORD PTR _u_count$[ebp]
  00018	52		 push	 edx
  00019	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ?Multiply_WORD_using_MULX_ADCX@Internal@Core@Math@Palmtree@@YAXPAIII0@Z ; Palmtree::Math::Core::Internal::Multiply_WORD_using_MULX_ADCX
  00022	83 c4 10	 add	 esp, 16			; 00000010H

; 368  :     }

  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?Multiply_X_1W_using_MULX_ADCX@Internal@Core@Math@Palmtree@@YAXPAIII0@Z ENDP ; Palmtree::Math::Core::Internal::Multiply_X_1W_using_MULX_ADCX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
_TEXT	SEGMENT
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v$ = 16						; size = 4
_w_buf$ = 20						; size = 4
?Multiply_X_1W_using_MUL_ADC@Internal@Core@Math@Palmtree@@YAXPAIII0@Z PROC ; Palmtree::Math::Core::Internal::Multiply_X_1W_using_MUL_ADC

; 361  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __05528951_pmc_multiply@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 362  :         Multiply_WORD_using_MUL_ADC(u_buf, u_count, v, w_buf);

  0000d	8b 45 14	 mov	 eax, DWORD PTR _w_buf$[ebp]
  00010	50		 push	 eax
  00011	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00014	51		 push	 ecx
  00015	8b 55 0c	 mov	 edx, DWORD PTR _u_count$[ebp]
  00018	52		 push	 edx
  00019	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  0001c	50		 push	 eax
  0001d	e8 00 00 00 00	 call	 ?Multiply_WORD_using_MUL_ADC@Internal@Core@Math@Palmtree@@YAXPAIII0@Z ; Palmtree::Math::Core::Internal::Multiply_WORD_using_MUL_ADC
  00022	83 c4 10	 add	 esp, 16			; 00000010H

; 363  :     }

  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?Multiply_X_1W_using_MUL_ADC@Internal@Core@Math@Palmtree@@YAXPAIII0@Z ENDP ; Palmtree::Math::Core::Internal::Multiply_X_1W_using_MUL_ADC
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
_TEXT	SEGMENT
_count$ = -8						; size = 4
_k$ = -4						; size = 4
_up$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v$ = 16						; size = 4
_wp$ = 20						; size = 4
?Multiply_WORD_using_MULX_ADCX@Internal@Core@Math@Palmtree@@YAXPAIII0@Z PROC ; Palmtree::Math::Core::Internal::Multiply_WORD_using_MULX_ADCX

; 215  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	b9 00 00 00 00	 mov	 ecx, OFFSET __05528951_pmc_multiply@cpp
  00019	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 216  :         __UNIT_TYPE k = 0;

  0001e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _k$[ebp], 0

; 217  :         __UNIT_TYPE count = u_count >> 5;

  00025	8b 45 0c	 mov	 eax, DWORD PTR _u_count$[ebp]
  00028	c1 e8 05	 shr	 eax, 5
  0002b	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN2@Multiply_W:

; 218  : 
; 219  :         while (count != 0)

  0002e	83 7d f8 00	 cmp	 DWORD PTR _count$[ebp], 0
  00032	0f 84 a2 05 00
	00		 je	 $LN3@Multiply_W

; 220  :         {
; 221  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[0], v, &wp[0]);

  00038	b9 04 00 00 00	 mov	 ecx, 4
  0003d	6b d1 00	 imul	 edx, ecx, 0
  00040	03 55 14	 add	 edx, DWORD PTR _wp$[ebp]
  00043	52		 push	 edx
  00044	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00047	50		 push	 eax
  00048	b9 04 00 00 00	 mov	 ecx, 4
  0004d	6b d1 00	 imul	 edx, ecx, 0
  00050	03 55 08	 add	 edx, DWORD PTR _up$[ebp]
  00053	52		 push	 edx
  00054	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  0005d	83 c4 10	 add	 esp, 16			; 00000010H
  00060	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 222  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[1], v, &wp[1]);

  00063	b9 04 00 00 00	 mov	 ecx, 4
  00068	c1 e1 00	 shl	 ecx, 0
  0006b	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  0006e	51		 push	 ecx
  0006f	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00072	52		 push	 edx
  00073	b8 04 00 00 00	 mov	 eax, 4
  00078	c1 e0 00	 shl	 eax, 0
  0007b	03 45 08	 add	 eax, DWORD PTR _up$[ebp]
  0007e	50		 push	 eax
  0007f	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  00082	51		 push	 ecx
  00083	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  00088	83 c4 10	 add	 esp, 16			; 00000010H
  0008b	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 223  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[2], v, &wp[2]);

  0008e	ba 04 00 00 00	 mov	 edx, 4
  00093	d1 e2		 shl	 edx, 1
  00095	03 55 14	 add	 edx, DWORD PTR _wp$[ebp]
  00098	52		 push	 edx
  00099	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0009c	50		 push	 eax
  0009d	b9 04 00 00 00	 mov	 ecx, 4
  000a2	d1 e1		 shl	 ecx, 1
  000a4	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  000a7	51		 push	 ecx
  000a8	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  000ab	52		 push	 edx
  000ac	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  000b1	83 c4 10	 add	 esp, 16			; 00000010H
  000b4	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 224  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[3], v, &wp[3]);

  000b7	b8 04 00 00 00	 mov	 eax, 4
  000bc	6b c8 03	 imul	 ecx, eax, 3
  000bf	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  000c2	51		 push	 ecx
  000c3	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  000c6	52		 push	 edx
  000c7	b8 04 00 00 00	 mov	 eax, 4
  000cc	6b c8 03	 imul	 ecx, eax, 3
  000cf	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  000d2	51		 push	 ecx
  000d3	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  000d6	52		 push	 edx
  000d7	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  000dc	83 c4 10	 add	 esp, 16			; 00000010H
  000df	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 225  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[4], v, &wp[4]);

  000e2	b8 04 00 00 00	 mov	 eax, 4
  000e7	c1 e0 02	 shl	 eax, 2
  000ea	03 45 14	 add	 eax, DWORD PTR _wp$[ebp]
  000ed	50		 push	 eax
  000ee	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  000f1	51		 push	 ecx
  000f2	ba 04 00 00 00	 mov	 edx, 4
  000f7	c1 e2 02	 shl	 edx, 2
  000fa	03 55 08	 add	 edx, DWORD PTR _up$[ebp]
  000fd	52		 push	 edx
  000fe	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  00101	50		 push	 eax
  00102	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  00107	83 c4 10	 add	 esp, 16			; 00000010H
  0010a	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 226  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[5], v, &wp[5]);

  0010d	b9 04 00 00 00	 mov	 ecx, 4
  00112	6b d1 05	 imul	 edx, ecx, 5
  00115	03 55 14	 add	 edx, DWORD PTR _wp$[ebp]
  00118	52		 push	 edx
  00119	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0011c	50		 push	 eax
  0011d	b9 04 00 00 00	 mov	 ecx, 4
  00122	6b d1 05	 imul	 edx, ecx, 5
  00125	03 55 08	 add	 edx, DWORD PTR _up$[ebp]
  00128	52		 push	 edx
  00129	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  0012c	50		 push	 eax
  0012d	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  00132	83 c4 10	 add	 esp, 16			; 00000010H
  00135	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 227  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[6], v, &wp[6]);

  00138	b9 04 00 00 00	 mov	 ecx, 4
  0013d	6b d1 06	 imul	 edx, ecx, 6
  00140	03 55 14	 add	 edx, DWORD PTR _wp$[ebp]
  00143	52		 push	 edx
  00144	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00147	50		 push	 eax
  00148	b9 04 00 00 00	 mov	 ecx, 4
  0014d	6b d1 06	 imul	 edx, ecx, 6
  00150	03 55 08	 add	 edx, DWORD PTR _up$[ebp]
  00153	52		 push	 edx
  00154	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  00157	50		 push	 eax
  00158	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  0015d	83 c4 10	 add	 esp, 16			; 00000010H
  00160	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 228  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[7], v, &wp[7]);

  00163	b9 04 00 00 00	 mov	 ecx, 4
  00168	6b d1 07	 imul	 edx, ecx, 7
  0016b	03 55 14	 add	 edx, DWORD PTR _wp$[ebp]
  0016e	52		 push	 edx
  0016f	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00172	50		 push	 eax
  00173	b9 04 00 00 00	 mov	 ecx, 4
  00178	6b d1 07	 imul	 edx, ecx, 7
  0017b	03 55 08	 add	 edx, DWORD PTR _up$[ebp]
  0017e	52		 push	 edx
  0017f	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  00182	50		 push	 eax
  00183	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  00188	83 c4 10	 add	 esp, 16			; 00000010H
  0018b	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 229  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[8], v, &wp[8]);

  0018e	b9 04 00 00 00	 mov	 ecx, 4
  00193	c1 e1 03	 shl	 ecx, 3
  00196	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  00199	51		 push	 ecx
  0019a	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  0019d	52		 push	 edx
  0019e	b8 04 00 00 00	 mov	 eax, 4
  001a3	c1 e0 03	 shl	 eax, 3
  001a6	03 45 08	 add	 eax, DWORD PTR _up$[ebp]
  001a9	50		 push	 eax
  001aa	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  001ad	51		 push	 ecx
  001ae	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  001b3	83 c4 10	 add	 esp, 16			; 00000010H
  001b6	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 230  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[9], v, &wp[9]);

  001b9	ba 04 00 00 00	 mov	 edx, 4
  001be	6b c2 09	 imul	 eax, edx, 9
  001c1	03 45 14	 add	 eax, DWORD PTR _wp$[ebp]
  001c4	50		 push	 eax
  001c5	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  001c8	51		 push	 ecx
  001c9	ba 04 00 00 00	 mov	 edx, 4
  001ce	6b c2 09	 imul	 eax, edx, 9
  001d1	03 45 08	 add	 eax, DWORD PTR _up$[ebp]
  001d4	50		 push	 eax
  001d5	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  001d8	51		 push	 ecx
  001d9	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  001de	83 c4 10	 add	 esp, 16			; 00000010H
  001e1	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 231  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[10], v, &wp[10]);

  001e4	ba 04 00 00 00	 mov	 edx, 4
  001e9	6b c2 0a	 imul	 eax, edx, 10
  001ec	03 45 14	 add	 eax, DWORD PTR _wp$[ebp]
  001ef	50		 push	 eax
  001f0	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  001f3	51		 push	 ecx
  001f4	ba 04 00 00 00	 mov	 edx, 4
  001f9	6b c2 0a	 imul	 eax, edx, 10
  001fc	03 45 08	 add	 eax, DWORD PTR _up$[ebp]
  001ff	50		 push	 eax
  00200	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  00203	51		 push	 ecx
  00204	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  00209	83 c4 10	 add	 esp, 16			; 00000010H
  0020c	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 232  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[11], v, &wp[11]);

  0020f	ba 04 00 00 00	 mov	 edx, 4
  00214	6b c2 0b	 imul	 eax, edx, 11
  00217	03 45 14	 add	 eax, DWORD PTR _wp$[ebp]
  0021a	50		 push	 eax
  0021b	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  0021e	51		 push	 ecx
  0021f	ba 04 00 00 00	 mov	 edx, 4
  00224	6b c2 0b	 imul	 eax, edx, 11
  00227	03 45 08	 add	 eax, DWORD PTR _up$[ebp]
  0022a	50		 push	 eax
  0022b	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  0022e	51		 push	 ecx
  0022f	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  00234	83 c4 10	 add	 esp, 16			; 00000010H
  00237	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 233  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[12], v, &wp[12]);

  0023a	ba 04 00 00 00	 mov	 edx, 4
  0023f	6b c2 0c	 imul	 eax, edx, 12
  00242	03 45 14	 add	 eax, DWORD PTR _wp$[ebp]
  00245	50		 push	 eax
  00246	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00249	51		 push	 ecx
  0024a	ba 04 00 00 00	 mov	 edx, 4
  0024f	6b c2 0c	 imul	 eax, edx, 12
  00252	03 45 08	 add	 eax, DWORD PTR _up$[ebp]
  00255	50		 push	 eax
  00256	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  00259	51		 push	 ecx
  0025a	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  0025f	83 c4 10	 add	 esp, 16			; 00000010H
  00262	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 234  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[13], v, &wp[13]);

  00265	ba 04 00 00 00	 mov	 edx, 4
  0026a	6b c2 0d	 imul	 eax, edx, 13
  0026d	03 45 14	 add	 eax, DWORD PTR _wp$[ebp]
  00270	50		 push	 eax
  00271	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00274	51		 push	 ecx
  00275	ba 04 00 00 00	 mov	 edx, 4
  0027a	6b c2 0d	 imul	 eax, edx, 13
  0027d	03 45 08	 add	 eax, DWORD PTR _up$[ebp]
  00280	50		 push	 eax
  00281	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  00284	51		 push	 ecx
  00285	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  0028a	83 c4 10	 add	 esp, 16			; 00000010H
  0028d	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 235  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[14], v, &wp[14]);

  00290	ba 04 00 00 00	 mov	 edx, 4
  00295	6b c2 0e	 imul	 eax, edx, 14
  00298	03 45 14	 add	 eax, DWORD PTR _wp$[ebp]
  0029b	50		 push	 eax
  0029c	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  0029f	51		 push	 ecx
  002a0	ba 04 00 00 00	 mov	 edx, 4
  002a5	6b c2 0e	 imul	 eax, edx, 14
  002a8	03 45 08	 add	 eax, DWORD PTR _up$[ebp]
  002ab	50		 push	 eax
  002ac	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  002af	51		 push	 ecx
  002b0	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  002b5	83 c4 10	 add	 esp, 16			; 00000010H
  002b8	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 236  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[15], v, &wp[15]);

  002bb	ba 04 00 00 00	 mov	 edx, 4
  002c0	6b c2 0f	 imul	 eax, edx, 15
  002c3	03 45 14	 add	 eax, DWORD PTR _wp$[ebp]
  002c6	50		 push	 eax
  002c7	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  002ca	51		 push	 ecx
  002cb	ba 04 00 00 00	 mov	 edx, 4
  002d0	6b c2 0f	 imul	 eax, edx, 15
  002d3	03 45 08	 add	 eax, DWORD PTR _up$[ebp]
  002d6	50		 push	 eax
  002d7	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  002da	51		 push	 ecx
  002db	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  002e0	83 c4 10	 add	 esp, 16			; 00000010H
  002e3	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 237  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[16], v, &wp[16]);

  002e6	ba 04 00 00 00	 mov	 edx, 4
  002eb	c1 e2 04	 shl	 edx, 4
  002ee	03 55 14	 add	 edx, DWORD PTR _wp$[ebp]
  002f1	52		 push	 edx
  002f2	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  002f5	50		 push	 eax
  002f6	b9 04 00 00 00	 mov	 ecx, 4
  002fb	c1 e1 04	 shl	 ecx, 4
  002fe	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  00301	51		 push	 ecx
  00302	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00305	52		 push	 edx
  00306	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  0030b	83 c4 10	 add	 esp, 16			; 00000010H
  0030e	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 238  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[17], v, &wp[17]);

  00311	b8 04 00 00 00	 mov	 eax, 4
  00316	6b c8 11	 imul	 ecx, eax, 17
  00319	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  0031c	51		 push	 ecx
  0031d	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00320	52		 push	 edx
  00321	b8 04 00 00 00	 mov	 eax, 4
  00326	6b c8 11	 imul	 ecx, eax, 17
  00329	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  0032c	51		 push	 ecx
  0032d	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00330	52		 push	 edx
  00331	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  00336	83 c4 10	 add	 esp, 16			; 00000010H
  00339	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 239  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[18], v, &wp[18]);

  0033c	b8 04 00 00 00	 mov	 eax, 4
  00341	6b c8 12	 imul	 ecx, eax, 18
  00344	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  00347	51		 push	 ecx
  00348	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  0034b	52		 push	 edx
  0034c	b8 04 00 00 00	 mov	 eax, 4
  00351	6b c8 12	 imul	 ecx, eax, 18
  00354	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  00357	51		 push	 ecx
  00358	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  0035b	52		 push	 edx
  0035c	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  00361	83 c4 10	 add	 esp, 16			; 00000010H
  00364	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 240  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[19], v, &wp[19]);

  00367	b8 04 00 00 00	 mov	 eax, 4
  0036c	6b c8 13	 imul	 ecx, eax, 19
  0036f	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  00372	51		 push	 ecx
  00373	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00376	52		 push	 edx
  00377	b8 04 00 00 00	 mov	 eax, 4
  0037c	6b c8 13	 imul	 ecx, eax, 19
  0037f	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  00382	51		 push	 ecx
  00383	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00386	52		 push	 edx
  00387	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  0038c	83 c4 10	 add	 esp, 16			; 00000010H
  0038f	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 241  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[20], v, &wp[20]);

  00392	b8 04 00 00 00	 mov	 eax, 4
  00397	6b c8 14	 imul	 ecx, eax, 20
  0039a	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  0039d	51		 push	 ecx
  0039e	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  003a1	52		 push	 edx
  003a2	b8 04 00 00 00	 mov	 eax, 4
  003a7	6b c8 14	 imul	 ecx, eax, 20
  003aa	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  003ad	51		 push	 ecx
  003ae	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  003b1	52		 push	 edx
  003b2	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  003b7	83 c4 10	 add	 esp, 16			; 00000010H
  003ba	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 242  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[21], v, &wp[21]);

  003bd	b8 04 00 00 00	 mov	 eax, 4
  003c2	6b c8 15	 imul	 ecx, eax, 21
  003c5	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  003c8	51		 push	 ecx
  003c9	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  003cc	52		 push	 edx
  003cd	b8 04 00 00 00	 mov	 eax, 4
  003d2	6b c8 15	 imul	 ecx, eax, 21
  003d5	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  003d8	51		 push	 ecx
  003d9	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  003dc	52		 push	 edx
  003dd	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  003e2	83 c4 10	 add	 esp, 16			; 00000010H
  003e5	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 243  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[22], v, &wp[22]);

  003e8	b8 04 00 00 00	 mov	 eax, 4
  003ed	6b c8 16	 imul	 ecx, eax, 22
  003f0	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  003f3	51		 push	 ecx
  003f4	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  003f7	52		 push	 edx
  003f8	b8 04 00 00 00	 mov	 eax, 4
  003fd	6b c8 16	 imul	 ecx, eax, 22
  00400	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  00403	51		 push	 ecx
  00404	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00407	52		 push	 edx
  00408	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  0040d	83 c4 10	 add	 esp, 16			; 00000010H
  00410	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 244  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[23], v, &wp[23]);

  00413	b8 04 00 00 00	 mov	 eax, 4
  00418	6b c8 17	 imul	 ecx, eax, 23
  0041b	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  0041e	51		 push	 ecx
  0041f	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00422	52		 push	 edx
  00423	b8 04 00 00 00	 mov	 eax, 4
  00428	6b c8 17	 imul	 ecx, eax, 23
  0042b	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  0042e	51		 push	 ecx
  0042f	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00432	52		 push	 edx
  00433	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  00438	83 c4 10	 add	 esp, 16			; 00000010H
  0043b	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 245  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[24], v, &wp[24]);

  0043e	b8 04 00 00 00	 mov	 eax, 4
  00443	6b c8 18	 imul	 ecx, eax, 24
  00446	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  00449	51		 push	 ecx
  0044a	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  0044d	52		 push	 edx
  0044e	b8 04 00 00 00	 mov	 eax, 4
  00453	6b c8 18	 imul	 ecx, eax, 24
  00456	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  00459	51		 push	 ecx
  0045a	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  0045d	52		 push	 edx
  0045e	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  00463	83 c4 10	 add	 esp, 16			; 00000010H
  00466	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 246  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[25], v, &wp[25]);

  00469	b8 04 00 00 00	 mov	 eax, 4
  0046e	6b c8 19	 imul	 ecx, eax, 25
  00471	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  00474	51		 push	 ecx
  00475	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00478	52		 push	 edx
  00479	b8 04 00 00 00	 mov	 eax, 4
  0047e	6b c8 19	 imul	 ecx, eax, 25
  00481	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  00484	51		 push	 ecx
  00485	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00488	52		 push	 edx
  00489	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  0048e	83 c4 10	 add	 esp, 16			; 00000010H
  00491	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 247  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[26], v, &wp[26]);

  00494	b8 04 00 00 00	 mov	 eax, 4
  00499	6b c8 1a	 imul	 ecx, eax, 26
  0049c	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  0049f	51		 push	 ecx
  004a0	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  004a3	52		 push	 edx
  004a4	b8 04 00 00 00	 mov	 eax, 4
  004a9	6b c8 1a	 imul	 ecx, eax, 26
  004ac	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  004af	51		 push	 ecx
  004b0	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  004b3	52		 push	 edx
  004b4	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  004b9	83 c4 10	 add	 esp, 16			; 00000010H
  004bc	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 248  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[27], v, &wp[27]);

  004bf	b8 04 00 00 00	 mov	 eax, 4
  004c4	6b c8 1b	 imul	 ecx, eax, 27
  004c7	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  004ca	51		 push	 ecx
  004cb	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  004ce	52		 push	 edx
  004cf	b8 04 00 00 00	 mov	 eax, 4
  004d4	6b c8 1b	 imul	 ecx, eax, 27
  004d7	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  004da	51		 push	 ecx
  004db	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  004de	52		 push	 edx
  004df	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  004e4	83 c4 10	 add	 esp, 16			; 00000010H
  004e7	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 249  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[28], v, &wp[28]);

  004ea	b8 04 00 00 00	 mov	 eax, 4
  004ef	6b c8 1c	 imul	 ecx, eax, 28
  004f2	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  004f5	51		 push	 ecx
  004f6	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  004f9	52		 push	 edx
  004fa	b8 04 00 00 00	 mov	 eax, 4
  004ff	6b c8 1c	 imul	 ecx, eax, 28
  00502	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  00505	51		 push	 ecx
  00506	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00509	52		 push	 edx
  0050a	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  0050f	83 c4 10	 add	 esp, 16			; 00000010H
  00512	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 250  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[29], v, &wp[29]);

  00515	b8 04 00 00 00	 mov	 eax, 4
  0051a	6b c8 1d	 imul	 ecx, eax, 29
  0051d	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  00520	51		 push	 ecx
  00521	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00524	52		 push	 edx
  00525	b8 04 00 00 00	 mov	 eax, 4
  0052a	6b c8 1d	 imul	 ecx, eax, 29
  0052d	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  00530	51		 push	 ecx
  00531	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00534	52		 push	 edx
  00535	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  0053a	83 c4 10	 add	 esp, 16			; 00000010H
  0053d	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 251  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[30], v, &wp[30]);

  00540	b8 04 00 00 00	 mov	 eax, 4
  00545	6b c8 1e	 imul	 ecx, eax, 30
  00548	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  0054b	51		 push	 ecx
  0054c	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  0054f	52		 push	 edx
  00550	b8 04 00 00 00	 mov	 eax, 4
  00555	6b c8 1e	 imul	 ecx, eax, 30
  00558	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  0055b	51		 push	 ecx
  0055c	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  0055f	52		 push	 edx
  00560	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  00565	83 c4 10	 add	 esp, 16			; 00000010H
  00568	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 252  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[31], v, &wp[31]);

  0056b	b8 04 00 00 00	 mov	 eax, 4
  00570	6b c8 1f	 imul	 ecx, eax, 31
  00573	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  00576	51		 push	 ecx
  00577	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  0057a	52		 push	 edx
  0057b	b8 04 00 00 00	 mov	 eax, 4
  00580	6b c8 1f	 imul	 ecx, eax, 31
  00583	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  00586	51		 push	 ecx
  00587	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  0058a	52		 push	 edx
  0058b	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  00590	83 c4 10	 add	 esp, 16			; 00000010H
  00593	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 253  :             up += 32;

  00596	8b 45 08	 mov	 eax, DWORD PTR _up$[ebp]
  00599	05 80 00 00 00	 add	 eax, 128		; 00000080H
  0059e	89 45 08	 mov	 DWORD PTR _up$[ebp], eax

; 254  :             wp += 32;

  005a1	8b 4d 14	 mov	 ecx, DWORD PTR _wp$[ebp]
  005a4	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  005aa	89 4d 14	 mov	 DWORD PTR _wp$[ebp], ecx

; 255  :             --count;

  005ad	8b 55 f8	 mov	 edx, DWORD PTR _count$[ebp]
  005b0	83 ea 01	 sub	 edx, 1
  005b3	89 55 f8	 mov	 DWORD PTR _count$[ebp], edx

; 256  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 257  :             if (sizeof(k) == sizeof(_UINT32_T))

  005b6	b8 01 00 00 00	 mov	 eax, 1
  005bb	85 c0		 test	 eax, eax
  005bd	74 0c		 je	 SHORT $LN4@Multiply_W

; 258  :                 AddToMULTI32Counter(32);

  005bf	6a 20		 push	 32			; 00000020H
  005c1	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
  005c6	83 c4 04	 add	 esp, 4

; 259  :             else

  005c9	eb 0a		 jmp	 SHORT $LN5@Multiply_W
$LN4@Multiply_W:

; 260  :                 AddToMULTI64Counter(32);

  005cb	6a 20		 push	 32			; 00000020H
  005cd	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
  005d2	83 c4 04	 add	 esp, 4
$LN5@Multiply_W:

; 261  : #endif
; 262  :         }

  005d5	e9 54 fa ff ff	 jmp	 $LN2@Multiply_W
$LN3@Multiply_W:

; 263  : 
; 264  :         if (u_count & 0x10)

  005da	8b 4d 0c	 mov	 ecx, DWORD PTR _u_count$[ebp]
  005dd	83 e1 10	 and	 ecx, 16			; 00000010H
  005e0	0f 84 df 02 00
	00		 je	 $LN6@Multiply_W

; 265  :         {
; 266  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[0], v, &wp[0]);

  005e6	ba 04 00 00 00	 mov	 edx, 4
  005eb	6b c2 00	 imul	 eax, edx, 0
  005ee	03 45 14	 add	 eax, DWORD PTR _wp$[ebp]
  005f1	50		 push	 eax
  005f2	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  005f5	51		 push	 ecx
  005f6	ba 04 00 00 00	 mov	 edx, 4
  005fb	6b c2 00	 imul	 eax, edx, 0
  005fe	03 45 08	 add	 eax, DWORD PTR _up$[ebp]
  00601	50		 push	 eax
  00602	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  00605	51		 push	 ecx
  00606	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  0060b	83 c4 10	 add	 esp, 16			; 00000010H
  0060e	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 267  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[1], v, &wp[1]);

  00611	ba 04 00 00 00	 mov	 edx, 4
  00616	c1 e2 00	 shl	 edx, 0
  00619	03 55 14	 add	 edx, DWORD PTR _wp$[ebp]
  0061c	52		 push	 edx
  0061d	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00620	50		 push	 eax
  00621	b9 04 00 00 00	 mov	 ecx, 4
  00626	c1 e1 00	 shl	 ecx, 0
  00629	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  0062c	51		 push	 ecx
  0062d	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00630	52		 push	 edx
  00631	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  00636	83 c4 10	 add	 esp, 16			; 00000010H
  00639	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 268  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[2], v, &wp[2]);

  0063c	b8 04 00 00 00	 mov	 eax, 4
  00641	d1 e0		 shl	 eax, 1
  00643	03 45 14	 add	 eax, DWORD PTR _wp$[ebp]
  00646	50		 push	 eax
  00647	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  0064a	51		 push	 ecx
  0064b	ba 04 00 00 00	 mov	 edx, 4
  00650	d1 e2		 shl	 edx, 1
  00652	03 55 08	 add	 edx, DWORD PTR _up$[ebp]
  00655	52		 push	 edx
  00656	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  00659	50		 push	 eax
  0065a	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  0065f	83 c4 10	 add	 esp, 16			; 00000010H
  00662	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 269  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[3], v, &wp[3]);

  00665	b9 04 00 00 00	 mov	 ecx, 4
  0066a	6b d1 03	 imul	 edx, ecx, 3
  0066d	03 55 14	 add	 edx, DWORD PTR _wp$[ebp]
  00670	52		 push	 edx
  00671	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00674	50		 push	 eax
  00675	b9 04 00 00 00	 mov	 ecx, 4
  0067a	6b d1 03	 imul	 edx, ecx, 3
  0067d	03 55 08	 add	 edx, DWORD PTR _up$[ebp]
  00680	52		 push	 edx
  00681	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  00684	50		 push	 eax
  00685	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  0068a	83 c4 10	 add	 esp, 16			; 00000010H
  0068d	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 270  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[4], v, &wp[4]);

  00690	b9 04 00 00 00	 mov	 ecx, 4
  00695	c1 e1 02	 shl	 ecx, 2
  00698	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  0069b	51		 push	 ecx
  0069c	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  0069f	52		 push	 edx
  006a0	b8 04 00 00 00	 mov	 eax, 4
  006a5	c1 e0 02	 shl	 eax, 2
  006a8	03 45 08	 add	 eax, DWORD PTR _up$[ebp]
  006ab	50		 push	 eax
  006ac	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  006af	51		 push	 ecx
  006b0	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  006b5	83 c4 10	 add	 esp, 16			; 00000010H
  006b8	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 271  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[5], v, &wp[5]);

  006bb	ba 04 00 00 00	 mov	 edx, 4
  006c0	6b c2 05	 imul	 eax, edx, 5
  006c3	03 45 14	 add	 eax, DWORD PTR _wp$[ebp]
  006c6	50		 push	 eax
  006c7	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  006ca	51		 push	 ecx
  006cb	ba 04 00 00 00	 mov	 edx, 4
  006d0	6b c2 05	 imul	 eax, edx, 5
  006d3	03 45 08	 add	 eax, DWORD PTR _up$[ebp]
  006d6	50		 push	 eax
  006d7	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  006da	51		 push	 ecx
  006db	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  006e0	83 c4 10	 add	 esp, 16			; 00000010H
  006e3	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 272  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[6], v, &wp[6]);

  006e6	ba 04 00 00 00	 mov	 edx, 4
  006eb	6b c2 06	 imul	 eax, edx, 6
  006ee	03 45 14	 add	 eax, DWORD PTR _wp$[ebp]
  006f1	50		 push	 eax
  006f2	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  006f5	51		 push	 ecx
  006f6	ba 04 00 00 00	 mov	 edx, 4
  006fb	6b c2 06	 imul	 eax, edx, 6
  006fe	03 45 08	 add	 eax, DWORD PTR _up$[ebp]
  00701	50		 push	 eax
  00702	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  00705	51		 push	 ecx
  00706	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  0070b	83 c4 10	 add	 esp, 16			; 00000010H
  0070e	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 273  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[7], v, &wp[7]);

  00711	ba 04 00 00 00	 mov	 edx, 4
  00716	6b c2 07	 imul	 eax, edx, 7
  00719	03 45 14	 add	 eax, DWORD PTR _wp$[ebp]
  0071c	50		 push	 eax
  0071d	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00720	51		 push	 ecx
  00721	ba 04 00 00 00	 mov	 edx, 4
  00726	6b c2 07	 imul	 eax, edx, 7
  00729	03 45 08	 add	 eax, DWORD PTR _up$[ebp]
  0072c	50		 push	 eax
  0072d	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  00730	51		 push	 ecx
  00731	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  00736	83 c4 10	 add	 esp, 16			; 00000010H
  00739	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 274  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[8], v, &wp[8]);

  0073c	ba 04 00 00 00	 mov	 edx, 4
  00741	c1 e2 03	 shl	 edx, 3
  00744	03 55 14	 add	 edx, DWORD PTR _wp$[ebp]
  00747	52		 push	 edx
  00748	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0074b	50		 push	 eax
  0074c	b9 04 00 00 00	 mov	 ecx, 4
  00751	c1 e1 03	 shl	 ecx, 3
  00754	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  00757	51		 push	 ecx
  00758	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  0075b	52		 push	 edx
  0075c	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  00761	83 c4 10	 add	 esp, 16			; 00000010H
  00764	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 275  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[9], v, &wp[9]);

  00767	b8 04 00 00 00	 mov	 eax, 4
  0076c	6b c8 09	 imul	 ecx, eax, 9
  0076f	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  00772	51		 push	 ecx
  00773	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00776	52		 push	 edx
  00777	b8 04 00 00 00	 mov	 eax, 4
  0077c	6b c8 09	 imul	 ecx, eax, 9
  0077f	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  00782	51		 push	 ecx
  00783	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00786	52		 push	 edx
  00787	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  0078c	83 c4 10	 add	 esp, 16			; 00000010H
  0078f	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 276  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[10], v, &wp[10]);

  00792	b8 04 00 00 00	 mov	 eax, 4
  00797	6b c8 0a	 imul	 ecx, eax, 10
  0079a	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  0079d	51		 push	 ecx
  0079e	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  007a1	52		 push	 edx
  007a2	b8 04 00 00 00	 mov	 eax, 4
  007a7	6b c8 0a	 imul	 ecx, eax, 10
  007aa	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  007ad	51		 push	 ecx
  007ae	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  007b1	52		 push	 edx
  007b2	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  007b7	83 c4 10	 add	 esp, 16			; 00000010H
  007ba	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 277  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[11], v, &wp[11]);

  007bd	b8 04 00 00 00	 mov	 eax, 4
  007c2	6b c8 0b	 imul	 ecx, eax, 11
  007c5	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  007c8	51		 push	 ecx
  007c9	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  007cc	52		 push	 edx
  007cd	b8 04 00 00 00	 mov	 eax, 4
  007d2	6b c8 0b	 imul	 ecx, eax, 11
  007d5	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  007d8	51		 push	 ecx
  007d9	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  007dc	52		 push	 edx
  007dd	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  007e2	83 c4 10	 add	 esp, 16			; 00000010H
  007e5	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 278  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[12], v, &wp[12]);

  007e8	b8 04 00 00 00	 mov	 eax, 4
  007ed	6b c8 0c	 imul	 ecx, eax, 12
  007f0	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  007f3	51		 push	 ecx
  007f4	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  007f7	52		 push	 edx
  007f8	b8 04 00 00 00	 mov	 eax, 4
  007fd	6b c8 0c	 imul	 ecx, eax, 12
  00800	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  00803	51		 push	 ecx
  00804	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00807	52		 push	 edx
  00808	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  0080d	83 c4 10	 add	 esp, 16			; 00000010H
  00810	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 279  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[13], v, &wp[13]);

  00813	b8 04 00 00 00	 mov	 eax, 4
  00818	6b c8 0d	 imul	 ecx, eax, 13
  0081b	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  0081e	51		 push	 ecx
  0081f	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00822	52		 push	 edx
  00823	b8 04 00 00 00	 mov	 eax, 4
  00828	6b c8 0d	 imul	 ecx, eax, 13
  0082b	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  0082e	51		 push	 ecx
  0082f	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00832	52		 push	 edx
  00833	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  00838	83 c4 10	 add	 esp, 16			; 00000010H
  0083b	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 280  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[14], v, &wp[14]);

  0083e	b8 04 00 00 00	 mov	 eax, 4
  00843	6b c8 0e	 imul	 ecx, eax, 14
  00846	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  00849	51		 push	 ecx
  0084a	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  0084d	52		 push	 edx
  0084e	b8 04 00 00 00	 mov	 eax, 4
  00853	6b c8 0e	 imul	 ecx, eax, 14
  00856	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  00859	51		 push	 ecx
  0085a	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  0085d	52		 push	 edx
  0085e	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  00863	83 c4 10	 add	 esp, 16			; 00000010H
  00866	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 281  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[15], v, &wp[15]);

  00869	b8 04 00 00 00	 mov	 eax, 4
  0086e	6b c8 0f	 imul	 ecx, eax, 15
  00871	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  00874	51		 push	 ecx
  00875	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00878	52		 push	 edx
  00879	b8 04 00 00 00	 mov	 eax, 4
  0087e	6b c8 0f	 imul	 ecx, eax, 15
  00881	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  00884	51		 push	 ecx
  00885	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00888	52		 push	 edx
  00889	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  0088e	83 c4 10	 add	 esp, 16			; 00000010H
  00891	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 282  :             up += 16;

  00894	8b 45 08	 mov	 eax, DWORD PTR _up$[ebp]
  00897	83 c0 40	 add	 eax, 64			; 00000040H
  0089a	89 45 08	 mov	 DWORD PTR _up$[ebp], eax

; 283  :             wp += 16;

  0089d	8b 4d 14	 mov	 ecx, DWORD PTR _wp$[ebp]
  008a0	83 c1 40	 add	 ecx, 64			; 00000040H
  008a3	89 4d 14	 mov	 DWORD PTR _wp$[ebp], ecx

; 284  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 285  :             if (sizeof(k) == sizeof(_UINT32_T))

  008a6	ba 01 00 00 00	 mov	 edx, 1
  008ab	85 d2		 test	 edx, edx
  008ad	74 0c		 je	 SHORT $LN7@Multiply_W

; 286  :                 AddToMULTI32Counter(16);

  008af	6a 10		 push	 16			; 00000010H
  008b1	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
  008b6	83 c4 04	 add	 esp, 4

; 287  :             else

  008b9	eb 0a		 jmp	 SHORT $LN6@Multiply_W
$LN7@Multiply_W:

; 288  :                 AddToMULTI64Counter(16);

  008bb	6a 10		 push	 16			; 00000010H
  008bd	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
  008c2	83 c4 04	 add	 esp, 4
$LN6@Multiply_W:

; 289  : #endif
; 290  :         }
; 291  : 
; 292  :         if (u_count & 0x8)

  008c5	8b 45 0c	 mov	 eax, DWORD PTR _u_count$[ebp]
  008c8	83 e0 08	 and	 eax, 8
  008cb	0f 84 87 01 00
	00		 je	 $LN9@Multiply_W

; 293  :         {
; 294  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[0], v, &wp[0]);

  008d1	b9 04 00 00 00	 mov	 ecx, 4
  008d6	6b d1 00	 imul	 edx, ecx, 0
  008d9	03 55 14	 add	 edx, DWORD PTR _wp$[ebp]
  008dc	52		 push	 edx
  008dd	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  008e0	50		 push	 eax
  008e1	b9 04 00 00 00	 mov	 ecx, 4
  008e6	6b d1 00	 imul	 edx, ecx, 0
  008e9	03 55 08	 add	 edx, DWORD PTR _up$[ebp]
  008ec	52		 push	 edx
  008ed	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  008f0	50		 push	 eax
  008f1	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  008f6	83 c4 10	 add	 esp, 16			; 00000010H
  008f9	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 295  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[1], v, &wp[1]);

  008fc	b9 04 00 00 00	 mov	 ecx, 4
  00901	c1 e1 00	 shl	 ecx, 0
  00904	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  00907	51		 push	 ecx
  00908	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  0090b	52		 push	 edx
  0090c	b8 04 00 00 00	 mov	 eax, 4
  00911	c1 e0 00	 shl	 eax, 0
  00914	03 45 08	 add	 eax, DWORD PTR _up$[ebp]
  00917	50		 push	 eax
  00918	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  0091b	51		 push	 ecx
  0091c	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  00921	83 c4 10	 add	 esp, 16			; 00000010H
  00924	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 296  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[2], v, &wp[2]);

  00927	ba 04 00 00 00	 mov	 edx, 4
  0092c	d1 e2		 shl	 edx, 1
  0092e	03 55 14	 add	 edx, DWORD PTR _wp$[ebp]
  00931	52		 push	 edx
  00932	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00935	50		 push	 eax
  00936	b9 04 00 00 00	 mov	 ecx, 4
  0093b	d1 e1		 shl	 ecx, 1
  0093d	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  00940	51		 push	 ecx
  00941	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00944	52		 push	 edx
  00945	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  0094a	83 c4 10	 add	 esp, 16			; 00000010H
  0094d	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 297  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[3], v, &wp[3]);

  00950	b8 04 00 00 00	 mov	 eax, 4
  00955	6b c8 03	 imul	 ecx, eax, 3
  00958	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  0095b	51		 push	 ecx
  0095c	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  0095f	52		 push	 edx
  00960	b8 04 00 00 00	 mov	 eax, 4
  00965	6b c8 03	 imul	 ecx, eax, 3
  00968	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  0096b	51		 push	 ecx
  0096c	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  0096f	52		 push	 edx
  00970	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  00975	83 c4 10	 add	 esp, 16			; 00000010H
  00978	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 298  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[4], v, &wp[4]);

  0097b	b8 04 00 00 00	 mov	 eax, 4
  00980	c1 e0 02	 shl	 eax, 2
  00983	03 45 14	 add	 eax, DWORD PTR _wp$[ebp]
  00986	50		 push	 eax
  00987	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  0098a	51		 push	 ecx
  0098b	ba 04 00 00 00	 mov	 edx, 4
  00990	c1 e2 02	 shl	 edx, 2
  00993	03 55 08	 add	 edx, DWORD PTR _up$[ebp]
  00996	52		 push	 edx
  00997	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  0099a	50		 push	 eax
  0099b	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  009a0	83 c4 10	 add	 esp, 16			; 00000010H
  009a3	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 299  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[5], v, &wp[5]);

  009a6	b9 04 00 00 00	 mov	 ecx, 4
  009ab	6b d1 05	 imul	 edx, ecx, 5
  009ae	03 55 14	 add	 edx, DWORD PTR _wp$[ebp]
  009b1	52		 push	 edx
  009b2	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  009b5	50		 push	 eax
  009b6	b9 04 00 00 00	 mov	 ecx, 4
  009bb	6b d1 05	 imul	 edx, ecx, 5
  009be	03 55 08	 add	 edx, DWORD PTR _up$[ebp]
  009c1	52		 push	 edx
  009c2	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  009c5	50		 push	 eax
  009c6	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  009cb	83 c4 10	 add	 esp, 16			; 00000010H
  009ce	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 300  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[6], v, &wp[6]);

  009d1	b9 04 00 00 00	 mov	 ecx, 4
  009d6	6b d1 06	 imul	 edx, ecx, 6
  009d9	03 55 14	 add	 edx, DWORD PTR _wp$[ebp]
  009dc	52		 push	 edx
  009dd	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  009e0	50		 push	 eax
  009e1	b9 04 00 00 00	 mov	 ecx, 4
  009e6	6b d1 06	 imul	 edx, ecx, 6
  009e9	03 55 08	 add	 edx, DWORD PTR _up$[ebp]
  009ec	52		 push	 edx
  009ed	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  009f0	50		 push	 eax
  009f1	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  009f6	83 c4 10	 add	 esp, 16			; 00000010H
  009f9	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 301  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[7], v, &wp[7]);

  009fc	b9 04 00 00 00	 mov	 ecx, 4
  00a01	6b d1 07	 imul	 edx, ecx, 7
  00a04	03 55 14	 add	 edx, DWORD PTR _wp$[ebp]
  00a07	52		 push	 edx
  00a08	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00a0b	50		 push	 eax
  00a0c	b9 04 00 00 00	 mov	 ecx, 4
  00a11	6b d1 07	 imul	 edx, ecx, 7
  00a14	03 55 08	 add	 edx, DWORD PTR _up$[ebp]
  00a17	52		 push	 edx
  00a18	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  00a1b	50		 push	 eax
  00a1c	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  00a21	83 c4 10	 add	 esp, 16			; 00000010H
  00a24	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 302  :             up += 8;

  00a27	8b 4d 08	 mov	 ecx, DWORD PTR _up$[ebp]
  00a2a	83 c1 20	 add	 ecx, 32			; 00000020H
  00a2d	89 4d 08	 mov	 DWORD PTR _up$[ebp], ecx

; 303  :             wp += 8;

  00a30	8b 55 14	 mov	 edx, DWORD PTR _wp$[ebp]
  00a33	83 c2 20	 add	 edx, 32			; 00000020H
  00a36	89 55 14	 mov	 DWORD PTR _wp$[ebp], edx

; 304  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 305  :             if (sizeof(k) == sizeof(_UINT32_T))

  00a39	b8 01 00 00 00	 mov	 eax, 1
  00a3e	85 c0		 test	 eax, eax
  00a40	74 0c		 je	 SHORT $LN10@Multiply_W

; 306  :                 AddToMULTI32Counter(8);

  00a42	6a 08		 push	 8
  00a44	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
  00a49	83 c4 04	 add	 esp, 4

; 307  :             else

  00a4c	eb 0a		 jmp	 SHORT $LN9@Multiply_W
$LN10@Multiply_W:

; 308  :                 AddToMULTI64Counter(8);

  00a4e	6a 08		 push	 8
  00a50	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
  00a55	83 c4 04	 add	 esp, 4
$LN9@Multiply_W:

; 309  : #endif
; 310  :         }
; 311  : 
; 312  :         if (u_count & 0x4)

  00a58	8b 4d 0c	 mov	 ecx, DWORD PTR _u_count$[ebp]
  00a5b	83 e1 04	 and	 ecx, 4
  00a5e	0f 84 db 00 00
	00		 je	 $LN12@Multiply_W

; 313  :         {
; 314  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[0], v, &wp[0]);

  00a64	ba 04 00 00 00	 mov	 edx, 4
  00a69	6b c2 00	 imul	 eax, edx, 0
  00a6c	03 45 14	 add	 eax, DWORD PTR _wp$[ebp]
  00a6f	50		 push	 eax
  00a70	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00a73	51		 push	 ecx
  00a74	ba 04 00 00 00	 mov	 edx, 4
  00a79	6b c2 00	 imul	 eax, edx, 0
  00a7c	03 45 08	 add	 eax, DWORD PTR _up$[ebp]
  00a7f	50		 push	 eax
  00a80	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  00a83	51		 push	 ecx
  00a84	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  00a89	83 c4 10	 add	 esp, 16			; 00000010H
  00a8c	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 315  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[1], v, &wp[1]);

  00a8f	ba 04 00 00 00	 mov	 edx, 4
  00a94	c1 e2 00	 shl	 edx, 0
  00a97	03 55 14	 add	 edx, DWORD PTR _wp$[ebp]
  00a9a	52		 push	 edx
  00a9b	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00a9e	50		 push	 eax
  00a9f	b9 04 00 00 00	 mov	 ecx, 4
  00aa4	c1 e1 00	 shl	 ecx, 0
  00aa7	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  00aaa	51		 push	 ecx
  00aab	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00aae	52		 push	 edx
  00aaf	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  00ab4	83 c4 10	 add	 esp, 16			; 00000010H
  00ab7	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 316  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[2], v, &wp[2]);

  00aba	b8 04 00 00 00	 mov	 eax, 4
  00abf	d1 e0		 shl	 eax, 1
  00ac1	03 45 14	 add	 eax, DWORD PTR _wp$[ebp]
  00ac4	50		 push	 eax
  00ac5	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00ac8	51		 push	 ecx
  00ac9	ba 04 00 00 00	 mov	 edx, 4
  00ace	d1 e2		 shl	 edx, 1
  00ad0	03 55 08	 add	 edx, DWORD PTR _up$[ebp]
  00ad3	52		 push	 edx
  00ad4	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  00ad7	50		 push	 eax
  00ad8	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  00add	83 c4 10	 add	 esp, 16			; 00000010H
  00ae0	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 317  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[3], v, &wp[3]);

  00ae3	b9 04 00 00 00	 mov	 ecx, 4
  00ae8	6b d1 03	 imul	 edx, ecx, 3
  00aeb	03 55 14	 add	 edx, DWORD PTR _wp$[ebp]
  00aee	52		 push	 edx
  00aef	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00af2	50		 push	 eax
  00af3	b9 04 00 00 00	 mov	 ecx, 4
  00af8	6b d1 03	 imul	 edx, ecx, 3
  00afb	03 55 08	 add	 edx, DWORD PTR _up$[ebp]
  00afe	52		 push	 edx
  00aff	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  00b02	50		 push	 eax
  00b03	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  00b08	83 c4 10	 add	 esp, 16			; 00000010H
  00b0b	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 318  :             up += 4;

  00b0e	8b 4d 08	 mov	 ecx, DWORD PTR _up$[ebp]
  00b11	83 c1 10	 add	 ecx, 16			; 00000010H
  00b14	89 4d 08	 mov	 DWORD PTR _up$[ebp], ecx

; 319  :             wp += 4;

  00b17	8b 55 14	 mov	 edx, DWORD PTR _wp$[ebp]
  00b1a	83 c2 10	 add	 edx, 16			; 00000010H
  00b1d	89 55 14	 mov	 DWORD PTR _wp$[ebp], edx

; 320  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 321  :             if (sizeof(k) == sizeof(_UINT32_T))

  00b20	b8 01 00 00 00	 mov	 eax, 1
  00b25	85 c0		 test	 eax, eax
  00b27	74 0c		 je	 SHORT $LN13@Multiply_W

; 322  :                 AddToMULTI32Counter(4);

  00b29	6a 04		 push	 4
  00b2b	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
  00b30	83 c4 04	 add	 esp, 4

; 323  :             else

  00b33	eb 0a		 jmp	 SHORT $LN12@Multiply_W
$LN13@Multiply_W:

; 324  :                 AddToMULTI64Counter(4);

  00b35	6a 04		 push	 4
  00b37	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
  00b3c	83 c4 04	 add	 esp, 4
$LN12@Multiply_W:

; 325  : #endif
; 326  :         }
; 327  : 
; 328  :         if (u_count & 0x2)

  00b3f	8b 4d 0c	 mov	 ecx, DWORD PTR _u_count$[ebp]
  00b42	83 e1 02	 and	 ecx, 2
  00b45	0f 84 87 00 00
	00		 je	 $LN15@Multiply_W

; 329  :         {
; 330  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[0], v, &wp[0]);

  00b4b	ba 04 00 00 00	 mov	 edx, 4
  00b50	6b c2 00	 imul	 eax, edx, 0
  00b53	03 45 14	 add	 eax, DWORD PTR _wp$[ebp]
  00b56	50		 push	 eax
  00b57	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00b5a	51		 push	 ecx
  00b5b	ba 04 00 00 00	 mov	 edx, 4
  00b60	6b c2 00	 imul	 eax, edx, 0
  00b63	03 45 08	 add	 eax, DWORD PTR _up$[ebp]
  00b66	50		 push	 eax
  00b67	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  00b6a	51		 push	 ecx
  00b6b	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  00b70	83 c4 10	 add	 esp, 16			; 00000010H
  00b73	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 331  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[1], v, &wp[1]);

  00b76	ba 04 00 00 00	 mov	 edx, 4
  00b7b	c1 e2 00	 shl	 edx, 0
  00b7e	03 55 14	 add	 edx, DWORD PTR _wp$[ebp]
  00b81	52		 push	 edx
  00b82	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00b85	50		 push	 eax
  00b86	b9 04 00 00 00	 mov	 ecx, 4
  00b8b	c1 e1 00	 shl	 ecx, 0
  00b8e	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  00b91	51		 push	 ecx
  00b92	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00b95	52		 push	 edx
  00b96	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  00b9b	83 c4 10	 add	 esp, 16			; 00000010H
  00b9e	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 332  :             up += 2;

  00ba1	8b 45 08	 mov	 eax, DWORD PTR _up$[ebp]
  00ba4	83 c0 08	 add	 eax, 8
  00ba7	89 45 08	 mov	 DWORD PTR _up$[ebp], eax

; 333  :             wp += 2;

  00baa	8b 4d 14	 mov	 ecx, DWORD PTR _wp$[ebp]
  00bad	83 c1 08	 add	 ecx, 8
  00bb0	89 4d 14	 mov	 DWORD PTR _wp$[ebp], ecx

; 334  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 335  :             if (sizeof(k) == sizeof(_UINT32_T))

  00bb3	ba 01 00 00 00	 mov	 edx, 1
  00bb8	85 d2		 test	 edx, edx
  00bba	74 0c		 je	 SHORT $LN16@Multiply_W

; 336  :                 AddToMULTI32Counter(2);

  00bbc	6a 02		 push	 2
  00bbe	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
  00bc3	83 c4 04	 add	 esp, 4

; 337  :             else

  00bc6	eb 0a		 jmp	 SHORT $LN15@Multiply_W
$LN16@Multiply_W:

; 338  :                 AddToMULTI64Counter(2);

  00bc8	6a 02		 push	 2
  00bca	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
  00bcf	83 c4 04	 add	 esp, 4
$LN15@Multiply_W:

; 339  : #endif
; 340  :         }
; 341  : 
; 342  :         if (u_count & 0x1)

  00bd2	8b 45 0c	 mov	 eax, DWORD PTR _u_count$[ebp]
  00bd5	83 e0 01	 and	 eax, 1
  00bd8	74 52		 je	 SHORT $LN18@Multiply_W

; 343  :         {
; 344  :             k = _MULTIPLYX_DIGIT_UNIT(k, &up[0], v, &wp[0]);

  00bda	b9 04 00 00 00	 mov	 ecx, 4
  00bdf	6b d1 00	 imul	 edx, ecx, 0
  00be2	03 55 14	 add	 edx, DWORD PTR _wp$[ebp]
  00be5	52		 push	 edx
  00be6	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00be9	50		 push	 eax
  00bea	b9 04 00 00 00	 mov	 ecx, 4
  00bef	6b d1 00	 imul	 edx, ecx, 0
  00bf2	03 55 08	 add	 edx, DWORD PTR _up$[ebp]
  00bf5	52		 push	 edx
  00bf6	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  00bf9	50		 push	 eax
  00bfa	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
  00bff	83 c4 10	 add	 esp, 16			; 00000010H
  00c02	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 345  :             up += 1;

  00c05	8b 4d 08	 mov	 ecx, DWORD PTR _up$[ebp]
  00c08	83 c1 04	 add	 ecx, 4
  00c0b	89 4d 08	 mov	 DWORD PTR _up$[ebp], ecx

; 346  :             wp += 1;

  00c0e	8b 55 14	 mov	 edx, DWORD PTR _wp$[ebp]
  00c11	83 c2 04	 add	 edx, 4
  00c14	89 55 14	 mov	 DWORD PTR _wp$[ebp], edx

; 347  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 348  :             if (sizeof(k) == sizeof(_UINT32_T))

  00c17	b8 01 00 00 00	 mov	 eax, 1
  00c1c	85 c0		 test	 eax, eax
  00c1e	74 07		 je	 SHORT $LN19@Multiply_W

; 349  :                 IncrementMULTI32Counter();

  00c20	e8 00 00 00 00	 call	 ?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementMULTI32Counter

; 350  :             else

  00c25	eb 05		 jmp	 SHORT $LN18@Multiply_W
$LN19@Multiply_W:

; 351  :                 IncrementMULTI64Counter();

  00c27	e8 00 00 00 00	 call	 ?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementMULTI64Counter
$LN18@Multiply_W:

; 352  : #endif
; 353  :         }
; 354  : 
; 355  :         if (k != 0)

  00c2c	83 7d fc 00	 cmp	 DWORD PTR _k$[ebp], 0
  00c30	74 08		 je	 SHORT $LN1@Multiply_W

; 356  :             *wp = k;

  00c32	8b 4d 14	 mov	 ecx, DWORD PTR _wp$[ebp]
  00c35	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00c38	89 11		 mov	 DWORD PTR [ecx], edx
$LN1@Multiply_W:

; 357  :     }

  00c3a	83 c4 08	 add	 esp, 8
  00c3d	3b ec		 cmp	 ebp, esp
  00c3f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00c44	8b e5		 mov	 esp, ebp
  00c46	5d		 pop	 ebp
  00c47	c3		 ret	 0
?Multiply_WORD_using_MULX_ADCX@Internal@Core@Math@Palmtree@@YAXPAIII0@Z ENDP ; Palmtree::Math::Core::Internal::Multiply_WORD_using_MULX_ADCX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
_TEXT	SEGMENT
_count$ = -8						; size = 4
_k$ = -4						; size = 4
_up$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v$ = 16						; size = 4
_wp$ = 20						; size = 4
?Multiply_WORD_using_MUL_ADC@Internal@Core@Math@Palmtree@@YAXPAIII0@Z PROC ; Palmtree::Math::Core::Internal::Multiply_WORD_using_MUL_ADC

; 70   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	b9 00 00 00 00	 mov	 ecx, OFFSET __05528951_pmc_multiply@cpp
  00019	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 71   :         __UNIT_TYPE k = 0;

  0001e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _k$[ebp], 0

; 72   :         __UNIT_TYPE count = u_count >> 5;

  00025	8b 45 0c	 mov	 eax, DWORD PTR _u_count$[ebp]
  00028	c1 e8 05	 shr	 eax, 5
  0002b	89 45 f8	 mov	 DWORD PTR _count$[ebp], eax
$LN2@Multiply_W:

; 73   : 
; 74   :         while (count != 0)

  0002e	83 7d f8 00	 cmp	 DWORD PTR _count$[ebp], 0
  00032	0f 84 a2 05 00
	00		 je	 $LN3@Multiply_W

; 75   :         {
; 76   :             k = _MULTIPLY_DIGIT_UNIT(k, &up[0], v, &wp[0]);

  00038	b9 04 00 00 00	 mov	 ecx, 4
  0003d	6b d1 00	 imul	 edx, ecx, 0
  00040	03 55 14	 add	 edx, DWORD PTR _wp$[ebp]
  00043	52		 push	 edx
  00044	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00047	50		 push	 eax
  00048	b9 04 00 00 00	 mov	 ecx, 4
  0004d	6b d1 00	 imul	 edx, ecx, 0
  00050	03 55 08	 add	 edx, DWORD PTR _up$[ebp]
  00053	52		 push	 edx
  00054	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  0005d	83 c4 10	 add	 esp, 16			; 00000010H
  00060	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 77   :             k = _MULTIPLY_DIGIT_UNIT(k, &up[1], v, &wp[1]);

  00063	b9 04 00 00 00	 mov	 ecx, 4
  00068	c1 e1 00	 shl	 ecx, 0
  0006b	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  0006e	51		 push	 ecx
  0006f	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00072	52		 push	 edx
  00073	b8 04 00 00 00	 mov	 eax, 4
  00078	c1 e0 00	 shl	 eax, 0
  0007b	03 45 08	 add	 eax, DWORD PTR _up$[ebp]
  0007e	50		 push	 eax
  0007f	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  00082	51		 push	 ecx
  00083	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00088	83 c4 10	 add	 esp, 16			; 00000010H
  0008b	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 78   :             k = _MULTIPLY_DIGIT_UNIT(k, &up[2], v, &wp[2]);

  0008e	ba 04 00 00 00	 mov	 edx, 4
  00093	d1 e2		 shl	 edx, 1
  00095	03 55 14	 add	 edx, DWORD PTR _wp$[ebp]
  00098	52		 push	 edx
  00099	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0009c	50		 push	 eax
  0009d	b9 04 00 00 00	 mov	 ecx, 4
  000a2	d1 e1		 shl	 ecx, 1
  000a4	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  000a7	51		 push	 ecx
  000a8	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  000ab	52		 push	 edx
  000ac	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  000b1	83 c4 10	 add	 esp, 16			; 00000010H
  000b4	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 79   :             k = _MULTIPLY_DIGIT_UNIT(k, &up[3], v, &wp[3]);

  000b7	b8 04 00 00 00	 mov	 eax, 4
  000bc	6b c8 03	 imul	 ecx, eax, 3
  000bf	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  000c2	51		 push	 ecx
  000c3	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  000c6	52		 push	 edx
  000c7	b8 04 00 00 00	 mov	 eax, 4
  000cc	6b c8 03	 imul	 ecx, eax, 3
  000cf	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  000d2	51		 push	 ecx
  000d3	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  000d6	52		 push	 edx
  000d7	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  000dc	83 c4 10	 add	 esp, 16			; 00000010H
  000df	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 80   :             k = _MULTIPLY_DIGIT_UNIT(k, &up[4], v, &wp[4]);

  000e2	b8 04 00 00 00	 mov	 eax, 4
  000e7	c1 e0 02	 shl	 eax, 2
  000ea	03 45 14	 add	 eax, DWORD PTR _wp$[ebp]
  000ed	50		 push	 eax
  000ee	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  000f1	51		 push	 ecx
  000f2	ba 04 00 00 00	 mov	 edx, 4
  000f7	c1 e2 02	 shl	 edx, 2
  000fa	03 55 08	 add	 edx, DWORD PTR _up$[ebp]
  000fd	52		 push	 edx
  000fe	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  00101	50		 push	 eax
  00102	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00107	83 c4 10	 add	 esp, 16			; 00000010H
  0010a	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 81   :             k = _MULTIPLY_DIGIT_UNIT(k, &up[5], v, &wp[5]);

  0010d	b9 04 00 00 00	 mov	 ecx, 4
  00112	6b d1 05	 imul	 edx, ecx, 5
  00115	03 55 14	 add	 edx, DWORD PTR _wp$[ebp]
  00118	52		 push	 edx
  00119	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0011c	50		 push	 eax
  0011d	b9 04 00 00 00	 mov	 ecx, 4
  00122	6b d1 05	 imul	 edx, ecx, 5
  00125	03 55 08	 add	 edx, DWORD PTR _up$[ebp]
  00128	52		 push	 edx
  00129	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  0012c	50		 push	 eax
  0012d	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00132	83 c4 10	 add	 esp, 16			; 00000010H
  00135	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 82   :             k = _MULTIPLY_DIGIT_UNIT(k, &up[6], v, &wp[6]);

  00138	b9 04 00 00 00	 mov	 ecx, 4
  0013d	6b d1 06	 imul	 edx, ecx, 6
  00140	03 55 14	 add	 edx, DWORD PTR _wp$[ebp]
  00143	52		 push	 edx
  00144	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00147	50		 push	 eax
  00148	b9 04 00 00 00	 mov	 ecx, 4
  0014d	6b d1 06	 imul	 edx, ecx, 6
  00150	03 55 08	 add	 edx, DWORD PTR _up$[ebp]
  00153	52		 push	 edx
  00154	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  00157	50		 push	 eax
  00158	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  0015d	83 c4 10	 add	 esp, 16			; 00000010H
  00160	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 83   :             k = _MULTIPLY_DIGIT_UNIT(k, &up[7], v, &wp[7]);

  00163	b9 04 00 00 00	 mov	 ecx, 4
  00168	6b d1 07	 imul	 edx, ecx, 7
  0016b	03 55 14	 add	 edx, DWORD PTR _wp$[ebp]
  0016e	52		 push	 edx
  0016f	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00172	50		 push	 eax
  00173	b9 04 00 00 00	 mov	 ecx, 4
  00178	6b d1 07	 imul	 edx, ecx, 7
  0017b	03 55 08	 add	 edx, DWORD PTR _up$[ebp]
  0017e	52		 push	 edx
  0017f	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  00182	50		 push	 eax
  00183	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00188	83 c4 10	 add	 esp, 16			; 00000010H
  0018b	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 84   :             k = _MULTIPLY_DIGIT_UNIT(k, &up[8], v, &wp[8]);

  0018e	b9 04 00 00 00	 mov	 ecx, 4
  00193	c1 e1 03	 shl	 ecx, 3
  00196	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  00199	51		 push	 ecx
  0019a	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  0019d	52		 push	 edx
  0019e	b8 04 00 00 00	 mov	 eax, 4
  001a3	c1 e0 03	 shl	 eax, 3
  001a6	03 45 08	 add	 eax, DWORD PTR _up$[ebp]
  001a9	50		 push	 eax
  001aa	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  001ad	51		 push	 ecx
  001ae	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  001b3	83 c4 10	 add	 esp, 16			; 00000010H
  001b6	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 85   :             k = _MULTIPLY_DIGIT_UNIT(k, &up[9], v, &wp[9]);

  001b9	ba 04 00 00 00	 mov	 edx, 4
  001be	6b c2 09	 imul	 eax, edx, 9
  001c1	03 45 14	 add	 eax, DWORD PTR _wp$[ebp]
  001c4	50		 push	 eax
  001c5	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  001c8	51		 push	 ecx
  001c9	ba 04 00 00 00	 mov	 edx, 4
  001ce	6b c2 09	 imul	 eax, edx, 9
  001d1	03 45 08	 add	 eax, DWORD PTR _up$[ebp]
  001d4	50		 push	 eax
  001d5	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  001d8	51		 push	 ecx
  001d9	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  001de	83 c4 10	 add	 esp, 16			; 00000010H
  001e1	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 86   :             k = _MULTIPLY_DIGIT_UNIT(k, &up[10], v, &wp[10]);

  001e4	ba 04 00 00 00	 mov	 edx, 4
  001e9	6b c2 0a	 imul	 eax, edx, 10
  001ec	03 45 14	 add	 eax, DWORD PTR _wp$[ebp]
  001ef	50		 push	 eax
  001f0	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  001f3	51		 push	 ecx
  001f4	ba 04 00 00 00	 mov	 edx, 4
  001f9	6b c2 0a	 imul	 eax, edx, 10
  001fc	03 45 08	 add	 eax, DWORD PTR _up$[ebp]
  001ff	50		 push	 eax
  00200	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  00203	51		 push	 ecx
  00204	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00209	83 c4 10	 add	 esp, 16			; 00000010H
  0020c	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 87   :             k = _MULTIPLY_DIGIT_UNIT(k, &up[11], v, &wp[11]);

  0020f	ba 04 00 00 00	 mov	 edx, 4
  00214	6b c2 0b	 imul	 eax, edx, 11
  00217	03 45 14	 add	 eax, DWORD PTR _wp$[ebp]
  0021a	50		 push	 eax
  0021b	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  0021e	51		 push	 ecx
  0021f	ba 04 00 00 00	 mov	 edx, 4
  00224	6b c2 0b	 imul	 eax, edx, 11
  00227	03 45 08	 add	 eax, DWORD PTR _up$[ebp]
  0022a	50		 push	 eax
  0022b	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  0022e	51		 push	 ecx
  0022f	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00234	83 c4 10	 add	 esp, 16			; 00000010H
  00237	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 88   :             k = _MULTIPLY_DIGIT_UNIT(k, &up[12], v, &wp[12]);

  0023a	ba 04 00 00 00	 mov	 edx, 4
  0023f	6b c2 0c	 imul	 eax, edx, 12
  00242	03 45 14	 add	 eax, DWORD PTR _wp$[ebp]
  00245	50		 push	 eax
  00246	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00249	51		 push	 ecx
  0024a	ba 04 00 00 00	 mov	 edx, 4
  0024f	6b c2 0c	 imul	 eax, edx, 12
  00252	03 45 08	 add	 eax, DWORD PTR _up$[ebp]
  00255	50		 push	 eax
  00256	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  00259	51		 push	 ecx
  0025a	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  0025f	83 c4 10	 add	 esp, 16			; 00000010H
  00262	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 89   :             k = _MULTIPLY_DIGIT_UNIT(k, &up[13], v, &wp[13]);

  00265	ba 04 00 00 00	 mov	 edx, 4
  0026a	6b c2 0d	 imul	 eax, edx, 13
  0026d	03 45 14	 add	 eax, DWORD PTR _wp$[ebp]
  00270	50		 push	 eax
  00271	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00274	51		 push	 ecx
  00275	ba 04 00 00 00	 mov	 edx, 4
  0027a	6b c2 0d	 imul	 eax, edx, 13
  0027d	03 45 08	 add	 eax, DWORD PTR _up$[ebp]
  00280	50		 push	 eax
  00281	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  00284	51		 push	 ecx
  00285	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  0028a	83 c4 10	 add	 esp, 16			; 00000010H
  0028d	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 90   :             k = _MULTIPLY_DIGIT_UNIT(k, &up[14], v, &wp[14]);

  00290	ba 04 00 00 00	 mov	 edx, 4
  00295	6b c2 0e	 imul	 eax, edx, 14
  00298	03 45 14	 add	 eax, DWORD PTR _wp$[ebp]
  0029b	50		 push	 eax
  0029c	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  0029f	51		 push	 ecx
  002a0	ba 04 00 00 00	 mov	 edx, 4
  002a5	6b c2 0e	 imul	 eax, edx, 14
  002a8	03 45 08	 add	 eax, DWORD PTR _up$[ebp]
  002ab	50		 push	 eax
  002ac	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  002af	51		 push	 ecx
  002b0	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  002b5	83 c4 10	 add	 esp, 16			; 00000010H
  002b8	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 91   :             k = _MULTIPLY_DIGIT_UNIT(k, &up[15], v, &wp[15]);

  002bb	ba 04 00 00 00	 mov	 edx, 4
  002c0	6b c2 0f	 imul	 eax, edx, 15
  002c3	03 45 14	 add	 eax, DWORD PTR _wp$[ebp]
  002c6	50		 push	 eax
  002c7	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  002ca	51		 push	 ecx
  002cb	ba 04 00 00 00	 mov	 edx, 4
  002d0	6b c2 0f	 imul	 eax, edx, 15
  002d3	03 45 08	 add	 eax, DWORD PTR _up$[ebp]
  002d6	50		 push	 eax
  002d7	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  002da	51		 push	 ecx
  002db	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  002e0	83 c4 10	 add	 esp, 16			; 00000010H
  002e3	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 92   :             k = _MULTIPLY_DIGIT_UNIT(k, &up[16], v, &wp[16]);

  002e6	ba 04 00 00 00	 mov	 edx, 4
  002eb	c1 e2 04	 shl	 edx, 4
  002ee	03 55 14	 add	 edx, DWORD PTR _wp$[ebp]
  002f1	52		 push	 edx
  002f2	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  002f5	50		 push	 eax
  002f6	b9 04 00 00 00	 mov	 ecx, 4
  002fb	c1 e1 04	 shl	 ecx, 4
  002fe	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  00301	51		 push	 ecx
  00302	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00305	52		 push	 edx
  00306	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  0030b	83 c4 10	 add	 esp, 16			; 00000010H
  0030e	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 93   :             k = _MULTIPLY_DIGIT_UNIT(k, &up[17], v, &wp[17]);

  00311	b8 04 00 00 00	 mov	 eax, 4
  00316	6b c8 11	 imul	 ecx, eax, 17
  00319	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  0031c	51		 push	 ecx
  0031d	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00320	52		 push	 edx
  00321	b8 04 00 00 00	 mov	 eax, 4
  00326	6b c8 11	 imul	 ecx, eax, 17
  00329	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  0032c	51		 push	 ecx
  0032d	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00330	52		 push	 edx
  00331	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00336	83 c4 10	 add	 esp, 16			; 00000010H
  00339	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 94   :             k = _MULTIPLY_DIGIT_UNIT(k, &up[18], v, &wp[18]);

  0033c	b8 04 00 00 00	 mov	 eax, 4
  00341	6b c8 12	 imul	 ecx, eax, 18
  00344	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  00347	51		 push	 ecx
  00348	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  0034b	52		 push	 edx
  0034c	b8 04 00 00 00	 mov	 eax, 4
  00351	6b c8 12	 imul	 ecx, eax, 18
  00354	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  00357	51		 push	 ecx
  00358	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  0035b	52		 push	 edx
  0035c	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00361	83 c4 10	 add	 esp, 16			; 00000010H
  00364	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 95   :             k = _MULTIPLY_DIGIT_UNIT(k, &up[19], v, &wp[19]);

  00367	b8 04 00 00 00	 mov	 eax, 4
  0036c	6b c8 13	 imul	 ecx, eax, 19
  0036f	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  00372	51		 push	 ecx
  00373	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00376	52		 push	 edx
  00377	b8 04 00 00 00	 mov	 eax, 4
  0037c	6b c8 13	 imul	 ecx, eax, 19
  0037f	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  00382	51		 push	 ecx
  00383	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00386	52		 push	 edx
  00387	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  0038c	83 c4 10	 add	 esp, 16			; 00000010H
  0038f	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 96   :             k = _MULTIPLY_DIGIT_UNIT(k, &up[20], v, &wp[20]);

  00392	b8 04 00 00 00	 mov	 eax, 4
  00397	6b c8 14	 imul	 ecx, eax, 20
  0039a	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  0039d	51		 push	 ecx
  0039e	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  003a1	52		 push	 edx
  003a2	b8 04 00 00 00	 mov	 eax, 4
  003a7	6b c8 14	 imul	 ecx, eax, 20
  003aa	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  003ad	51		 push	 ecx
  003ae	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  003b1	52		 push	 edx
  003b2	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  003b7	83 c4 10	 add	 esp, 16			; 00000010H
  003ba	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 97   :             k = _MULTIPLY_DIGIT_UNIT(k, &up[21], v, &wp[21]);

  003bd	b8 04 00 00 00	 mov	 eax, 4
  003c2	6b c8 15	 imul	 ecx, eax, 21
  003c5	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  003c8	51		 push	 ecx
  003c9	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  003cc	52		 push	 edx
  003cd	b8 04 00 00 00	 mov	 eax, 4
  003d2	6b c8 15	 imul	 ecx, eax, 21
  003d5	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  003d8	51		 push	 ecx
  003d9	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  003dc	52		 push	 edx
  003dd	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  003e2	83 c4 10	 add	 esp, 16			; 00000010H
  003e5	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 98   :             k = _MULTIPLY_DIGIT_UNIT(k, &up[22], v, &wp[22]);

  003e8	b8 04 00 00 00	 mov	 eax, 4
  003ed	6b c8 16	 imul	 ecx, eax, 22
  003f0	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  003f3	51		 push	 ecx
  003f4	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  003f7	52		 push	 edx
  003f8	b8 04 00 00 00	 mov	 eax, 4
  003fd	6b c8 16	 imul	 ecx, eax, 22
  00400	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  00403	51		 push	 ecx
  00404	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00407	52		 push	 edx
  00408	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  0040d	83 c4 10	 add	 esp, 16			; 00000010H
  00410	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 99   :             k = _MULTIPLY_DIGIT_UNIT(k, &up[23], v, &wp[23]);

  00413	b8 04 00 00 00	 mov	 eax, 4
  00418	6b c8 17	 imul	 ecx, eax, 23
  0041b	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  0041e	51		 push	 ecx
  0041f	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00422	52		 push	 edx
  00423	b8 04 00 00 00	 mov	 eax, 4
  00428	6b c8 17	 imul	 ecx, eax, 23
  0042b	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  0042e	51		 push	 ecx
  0042f	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00432	52		 push	 edx
  00433	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00438	83 c4 10	 add	 esp, 16			; 00000010H
  0043b	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 100  :             k = _MULTIPLY_DIGIT_UNIT(k, &up[24], v, &wp[24]);

  0043e	b8 04 00 00 00	 mov	 eax, 4
  00443	6b c8 18	 imul	 ecx, eax, 24
  00446	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  00449	51		 push	 ecx
  0044a	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  0044d	52		 push	 edx
  0044e	b8 04 00 00 00	 mov	 eax, 4
  00453	6b c8 18	 imul	 ecx, eax, 24
  00456	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  00459	51		 push	 ecx
  0045a	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  0045d	52		 push	 edx
  0045e	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00463	83 c4 10	 add	 esp, 16			; 00000010H
  00466	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 101  :             k = _MULTIPLY_DIGIT_UNIT(k, &up[25], v, &wp[25]);

  00469	b8 04 00 00 00	 mov	 eax, 4
  0046e	6b c8 19	 imul	 ecx, eax, 25
  00471	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  00474	51		 push	 ecx
  00475	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00478	52		 push	 edx
  00479	b8 04 00 00 00	 mov	 eax, 4
  0047e	6b c8 19	 imul	 ecx, eax, 25
  00481	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  00484	51		 push	 ecx
  00485	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00488	52		 push	 edx
  00489	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  0048e	83 c4 10	 add	 esp, 16			; 00000010H
  00491	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 102  :             k = _MULTIPLY_DIGIT_UNIT(k, &up[26], v, &wp[26]);

  00494	b8 04 00 00 00	 mov	 eax, 4
  00499	6b c8 1a	 imul	 ecx, eax, 26
  0049c	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  0049f	51		 push	 ecx
  004a0	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  004a3	52		 push	 edx
  004a4	b8 04 00 00 00	 mov	 eax, 4
  004a9	6b c8 1a	 imul	 ecx, eax, 26
  004ac	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  004af	51		 push	 ecx
  004b0	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  004b3	52		 push	 edx
  004b4	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  004b9	83 c4 10	 add	 esp, 16			; 00000010H
  004bc	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 103  :             k = _MULTIPLY_DIGIT_UNIT(k, &up[27], v, &wp[27]);

  004bf	b8 04 00 00 00	 mov	 eax, 4
  004c4	6b c8 1b	 imul	 ecx, eax, 27
  004c7	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  004ca	51		 push	 ecx
  004cb	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  004ce	52		 push	 edx
  004cf	b8 04 00 00 00	 mov	 eax, 4
  004d4	6b c8 1b	 imul	 ecx, eax, 27
  004d7	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  004da	51		 push	 ecx
  004db	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  004de	52		 push	 edx
  004df	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  004e4	83 c4 10	 add	 esp, 16			; 00000010H
  004e7	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 104  :             k = _MULTIPLY_DIGIT_UNIT(k, &up[28], v, &wp[28]);

  004ea	b8 04 00 00 00	 mov	 eax, 4
  004ef	6b c8 1c	 imul	 ecx, eax, 28
  004f2	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  004f5	51		 push	 ecx
  004f6	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  004f9	52		 push	 edx
  004fa	b8 04 00 00 00	 mov	 eax, 4
  004ff	6b c8 1c	 imul	 ecx, eax, 28
  00502	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  00505	51		 push	 ecx
  00506	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00509	52		 push	 edx
  0050a	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  0050f	83 c4 10	 add	 esp, 16			; 00000010H
  00512	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 105  :             k = _MULTIPLY_DIGIT_UNIT(k, &up[29], v, &wp[29]);

  00515	b8 04 00 00 00	 mov	 eax, 4
  0051a	6b c8 1d	 imul	 ecx, eax, 29
  0051d	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  00520	51		 push	 ecx
  00521	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00524	52		 push	 edx
  00525	b8 04 00 00 00	 mov	 eax, 4
  0052a	6b c8 1d	 imul	 ecx, eax, 29
  0052d	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  00530	51		 push	 ecx
  00531	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00534	52		 push	 edx
  00535	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  0053a	83 c4 10	 add	 esp, 16			; 00000010H
  0053d	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 106  :             k = _MULTIPLY_DIGIT_UNIT(k, &up[30], v, &wp[30]);

  00540	b8 04 00 00 00	 mov	 eax, 4
  00545	6b c8 1e	 imul	 ecx, eax, 30
  00548	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  0054b	51		 push	 ecx
  0054c	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  0054f	52		 push	 edx
  00550	b8 04 00 00 00	 mov	 eax, 4
  00555	6b c8 1e	 imul	 ecx, eax, 30
  00558	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  0055b	51		 push	 ecx
  0055c	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  0055f	52		 push	 edx
  00560	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00565	83 c4 10	 add	 esp, 16			; 00000010H
  00568	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 107  :             k = _MULTIPLY_DIGIT_UNIT(k, &up[31], v, &wp[31]);

  0056b	b8 04 00 00 00	 mov	 eax, 4
  00570	6b c8 1f	 imul	 ecx, eax, 31
  00573	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  00576	51		 push	 ecx
  00577	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  0057a	52		 push	 edx
  0057b	b8 04 00 00 00	 mov	 eax, 4
  00580	6b c8 1f	 imul	 ecx, eax, 31
  00583	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  00586	51		 push	 ecx
  00587	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  0058a	52		 push	 edx
  0058b	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00590	83 c4 10	 add	 esp, 16			; 00000010H
  00593	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 108  :             up += 32;

  00596	8b 45 08	 mov	 eax, DWORD PTR _up$[ebp]
  00599	05 80 00 00 00	 add	 eax, 128		; 00000080H
  0059e	89 45 08	 mov	 DWORD PTR _up$[ebp], eax

; 109  :             wp += 32;

  005a1	8b 4d 14	 mov	 ecx, DWORD PTR _wp$[ebp]
  005a4	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  005aa	89 4d 14	 mov	 DWORD PTR _wp$[ebp], ecx

; 110  :             --count;

  005ad	8b 55 f8	 mov	 edx, DWORD PTR _count$[ebp]
  005b0	83 ea 01	 sub	 edx, 1
  005b3	89 55 f8	 mov	 DWORD PTR _count$[ebp], edx

; 111  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 112  :             if (sizeof(k) == sizeof(_UINT32_T))

  005b6	b8 01 00 00 00	 mov	 eax, 1
  005bb	85 c0		 test	 eax, eax
  005bd	74 0c		 je	 SHORT $LN4@Multiply_W

; 113  :                 AddToMULTI32Counter(32);

  005bf	6a 20		 push	 32			; 00000020H
  005c1	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
  005c6	83 c4 04	 add	 esp, 4

; 114  :             else

  005c9	eb 0a		 jmp	 SHORT $LN5@Multiply_W
$LN4@Multiply_W:

; 115  :                 AddToMULTI64Counter(32);

  005cb	6a 20		 push	 32			; 00000020H
  005cd	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
  005d2	83 c4 04	 add	 esp, 4
$LN5@Multiply_W:

; 116  : #endif
; 117  :         }

  005d5	e9 54 fa ff ff	 jmp	 $LN2@Multiply_W
$LN3@Multiply_W:

; 118  : 
; 119  :         if (u_count & 0x10)

  005da	8b 4d 0c	 mov	 ecx, DWORD PTR _u_count$[ebp]
  005dd	83 e1 10	 and	 ecx, 16			; 00000010H
  005e0	0f 84 df 02 00
	00		 je	 $LN6@Multiply_W

; 120  :         {
; 121  :             k = _MULTIPLY_DIGIT_UNIT(k, &up[0], v, &wp[0]);

  005e6	ba 04 00 00 00	 mov	 edx, 4
  005eb	6b c2 00	 imul	 eax, edx, 0
  005ee	03 45 14	 add	 eax, DWORD PTR _wp$[ebp]
  005f1	50		 push	 eax
  005f2	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  005f5	51		 push	 ecx
  005f6	ba 04 00 00 00	 mov	 edx, 4
  005fb	6b c2 00	 imul	 eax, edx, 0
  005fe	03 45 08	 add	 eax, DWORD PTR _up$[ebp]
  00601	50		 push	 eax
  00602	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  00605	51		 push	 ecx
  00606	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  0060b	83 c4 10	 add	 esp, 16			; 00000010H
  0060e	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 122  :             k = _MULTIPLY_DIGIT_UNIT(k, &up[1], v, &wp[1]);

  00611	ba 04 00 00 00	 mov	 edx, 4
  00616	c1 e2 00	 shl	 edx, 0
  00619	03 55 14	 add	 edx, DWORD PTR _wp$[ebp]
  0061c	52		 push	 edx
  0061d	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00620	50		 push	 eax
  00621	b9 04 00 00 00	 mov	 ecx, 4
  00626	c1 e1 00	 shl	 ecx, 0
  00629	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  0062c	51		 push	 ecx
  0062d	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00630	52		 push	 edx
  00631	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00636	83 c4 10	 add	 esp, 16			; 00000010H
  00639	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 123  :             k = _MULTIPLY_DIGIT_UNIT(k, &up[2], v, &wp[2]);

  0063c	b8 04 00 00 00	 mov	 eax, 4
  00641	d1 e0		 shl	 eax, 1
  00643	03 45 14	 add	 eax, DWORD PTR _wp$[ebp]
  00646	50		 push	 eax
  00647	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  0064a	51		 push	 ecx
  0064b	ba 04 00 00 00	 mov	 edx, 4
  00650	d1 e2		 shl	 edx, 1
  00652	03 55 08	 add	 edx, DWORD PTR _up$[ebp]
  00655	52		 push	 edx
  00656	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  00659	50		 push	 eax
  0065a	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  0065f	83 c4 10	 add	 esp, 16			; 00000010H
  00662	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 124  :             k = _MULTIPLY_DIGIT_UNIT(k, &up[3], v, &wp[3]);

  00665	b9 04 00 00 00	 mov	 ecx, 4
  0066a	6b d1 03	 imul	 edx, ecx, 3
  0066d	03 55 14	 add	 edx, DWORD PTR _wp$[ebp]
  00670	52		 push	 edx
  00671	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00674	50		 push	 eax
  00675	b9 04 00 00 00	 mov	 ecx, 4
  0067a	6b d1 03	 imul	 edx, ecx, 3
  0067d	03 55 08	 add	 edx, DWORD PTR _up$[ebp]
  00680	52		 push	 edx
  00681	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  00684	50		 push	 eax
  00685	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  0068a	83 c4 10	 add	 esp, 16			; 00000010H
  0068d	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 125  :             k = _MULTIPLY_DIGIT_UNIT(k, &up[4], v, &wp[4]);

  00690	b9 04 00 00 00	 mov	 ecx, 4
  00695	c1 e1 02	 shl	 ecx, 2
  00698	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  0069b	51		 push	 ecx
  0069c	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  0069f	52		 push	 edx
  006a0	b8 04 00 00 00	 mov	 eax, 4
  006a5	c1 e0 02	 shl	 eax, 2
  006a8	03 45 08	 add	 eax, DWORD PTR _up$[ebp]
  006ab	50		 push	 eax
  006ac	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  006af	51		 push	 ecx
  006b0	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  006b5	83 c4 10	 add	 esp, 16			; 00000010H
  006b8	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 126  :             k = _MULTIPLY_DIGIT_UNIT(k, &up[5], v, &wp[5]);

  006bb	ba 04 00 00 00	 mov	 edx, 4
  006c0	6b c2 05	 imul	 eax, edx, 5
  006c3	03 45 14	 add	 eax, DWORD PTR _wp$[ebp]
  006c6	50		 push	 eax
  006c7	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  006ca	51		 push	 ecx
  006cb	ba 04 00 00 00	 mov	 edx, 4
  006d0	6b c2 05	 imul	 eax, edx, 5
  006d3	03 45 08	 add	 eax, DWORD PTR _up$[ebp]
  006d6	50		 push	 eax
  006d7	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  006da	51		 push	 ecx
  006db	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  006e0	83 c4 10	 add	 esp, 16			; 00000010H
  006e3	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 127  :             k = _MULTIPLY_DIGIT_UNIT(k, &up[6], v, &wp[6]);

  006e6	ba 04 00 00 00	 mov	 edx, 4
  006eb	6b c2 06	 imul	 eax, edx, 6
  006ee	03 45 14	 add	 eax, DWORD PTR _wp$[ebp]
  006f1	50		 push	 eax
  006f2	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  006f5	51		 push	 ecx
  006f6	ba 04 00 00 00	 mov	 edx, 4
  006fb	6b c2 06	 imul	 eax, edx, 6
  006fe	03 45 08	 add	 eax, DWORD PTR _up$[ebp]
  00701	50		 push	 eax
  00702	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  00705	51		 push	 ecx
  00706	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  0070b	83 c4 10	 add	 esp, 16			; 00000010H
  0070e	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 128  :             k = _MULTIPLY_DIGIT_UNIT(k, &up[7], v, &wp[7]);

  00711	ba 04 00 00 00	 mov	 edx, 4
  00716	6b c2 07	 imul	 eax, edx, 7
  00719	03 45 14	 add	 eax, DWORD PTR _wp$[ebp]
  0071c	50		 push	 eax
  0071d	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00720	51		 push	 ecx
  00721	ba 04 00 00 00	 mov	 edx, 4
  00726	6b c2 07	 imul	 eax, edx, 7
  00729	03 45 08	 add	 eax, DWORD PTR _up$[ebp]
  0072c	50		 push	 eax
  0072d	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  00730	51		 push	 ecx
  00731	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00736	83 c4 10	 add	 esp, 16			; 00000010H
  00739	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 129  :             k = _MULTIPLY_DIGIT_UNIT(k, &up[8], v, &wp[8]);

  0073c	ba 04 00 00 00	 mov	 edx, 4
  00741	c1 e2 03	 shl	 edx, 3
  00744	03 55 14	 add	 edx, DWORD PTR _wp$[ebp]
  00747	52		 push	 edx
  00748	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0074b	50		 push	 eax
  0074c	b9 04 00 00 00	 mov	 ecx, 4
  00751	c1 e1 03	 shl	 ecx, 3
  00754	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  00757	51		 push	 ecx
  00758	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  0075b	52		 push	 edx
  0075c	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00761	83 c4 10	 add	 esp, 16			; 00000010H
  00764	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 130  :             k = _MULTIPLY_DIGIT_UNIT(k, &up[9], v, &wp[9]);

  00767	b8 04 00 00 00	 mov	 eax, 4
  0076c	6b c8 09	 imul	 ecx, eax, 9
  0076f	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  00772	51		 push	 ecx
  00773	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00776	52		 push	 edx
  00777	b8 04 00 00 00	 mov	 eax, 4
  0077c	6b c8 09	 imul	 ecx, eax, 9
  0077f	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  00782	51		 push	 ecx
  00783	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00786	52		 push	 edx
  00787	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  0078c	83 c4 10	 add	 esp, 16			; 00000010H
  0078f	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 131  :             k = _MULTIPLY_DIGIT_UNIT(k, &up[10], v, &wp[10]);

  00792	b8 04 00 00 00	 mov	 eax, 4
  00797	6b c8 0a	 imul	 ecx, eax, 10
  0079a	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  0079d	51		 push	 ecx
  0079e	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  007a1	52		 push	 edx
  007a2	b8 04 00 00 00	 mov	 eax, 4
  007a7	6b c8 0a	 imul	 ecx, eax, 10
  007aa	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  007ad	51		 push	 ecx
  007ae	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  007b1	52		 push	 edx
  007b2	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  007b7	83 c4 10	 add	 esp, 16			; 00000010H
  007ba	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 132  :             k = _MULTIPLY_DIGIT_UNIT(k, &up[11], v, &wp[11]);

  007bd	b8 04 00 00 00	 mov	 eax, 4
  007c2	6b c8 0b	 imul	 ecx, eax, 11
  007c5	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  007c8	51		 push	 ecx
  007c9	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  007cc	52		 push	 edx
  007cd	b8 04 00 00 00	 mov	 eax, 4
  007d2	6b c8 0b	 imul	 ecx, eax, 11
  007d5	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  007d8	51		 push	 ecx
  007d9	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  007dc	52		 push	 edx
  007dd	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  007e2	83 c4 10	 add	 esp, 16			; 00000010H
  007e5	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 133  :             k = _MULTIPLY_DIGIT_UNIT(k, &up[12], v, &wp[12]);

  007e8	b8 04 00 00 00	 mov	 eax, 4
  007ed	6b c8 0c	 imul	 ecx, eax, 12
  007f0	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  007f3	51		 push	 ecx
  007f4	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  007f7	52		 push	 edx
  007f8	b8 04 00 00 00	 mov	 eax, 4
  007fd	6b c8 0c	 imul	 ecx, eax, 12
  00800	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  00803	51		 push	 ecx
  00804	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00807	52		 push	 edx
  00808	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  0080d	83 c4 10	 add	 esp, 16			; 00000010H
  00810	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 134  :             k = _MULTIPLY_DIGIT_UNIT(k, &up[13], v, &wp[13]);

  00813	b8 04 00 00 00	 mov	 eax, 4
  00818	6b c8 0d	 imul	 ecx, eax, 13
  0081b	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  0081e	51		 push	 ecx
  0081f	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00822	52		 push	 edx
  00823	b8 04 00 00 00	 mov	 eax, 4
  00828	6b c8 0d	 imul	 ecx, eax, 13
  0082b	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  0082e	51		 push	 ecx
  0082f	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00832	52		 push	 edx
  00833	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00838	83 c4 10	 add	 esp, 16			; 00000010H
  0083b	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 135  :             k = _MULTIPLY_DIGIT_UNIT(k, &up[14], v, &wp[14]);

  0083e	b8 04 00 00 00	 mov	 eax, 4
  00843	6b c8 0e	 imul	 ecx, eax, 14
  00846	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  00849	51		 push	 ecx
  0084a	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  0084d	52		 push	 edx
  0084e	b8 04 00 00 00	 mov	 eax, 4
  00853	6b c8 0e	 imul	 ecx, eax, 14
  00856	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  00859	51		 push	 ecx
  0085a	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  0085d	52		 push	 edx
  0085e	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00863	83 c4 10	 add	 esp, 16			; 00000010H
  00866	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 136  :             k = _MULTIPLY_DIGIT_UNIT(k, &up[15], v, &wp[15]);

  00869	b8 04 00 00 00	 mov	 eax, 4
  0086e	6b c8 0f	 imul	 ecx, eax, 15
  00871	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  00874	51		 push	 ecx
  00875	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00878	52		 push	 edx
  00879	b8 04 00 00 00	 mov	 eax, 4
  0087e	6b c8 0f	 imul	 ecx, eax, 15
  00881	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  00884	51		 push	 ecx
  00885	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00888	52		 push	 edx
  00889	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  0088e	83 c4 10	 add	 esp, 16			; 00000010H
  00891	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 137  :             up += 16;

  00894	8b 45 08	 mov	 eax, DWORD PTR _up$[ebp]
  00897	83 c0 40	 add	 eax, 64			; 00000040H
  0089a	89 45 08	 mov	 DWORD PTR _up$[ebp], eax

; 138  :             wp += 16;

  0089d	8b 4d 14	 mov	 ecx, DWORD PTR _wp$[ebp]
  008a0	83 c1 40	 add	 ecx, 64			; 00000040H
  008a3	89 4d 14	 mov	 DWORD PTR _wp$[ebp], ecx

; 139  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 140  :             if (sizeof(k) == sizeof(_UINT32_T))

  008a6	ba 01 00 00 00	 mov	 edx, 1
  008ab	85 d2		 test	 edx, edx
  008ad	74 0c		 je	 SHORT $LN7@Multiply_W

; 141  :                 AddToMULTI32Counter(16);

  008af	6a 10		 push	 16			; 00000010H
  008b1	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
  008b6	83 c4 04	 add	 esp, 4

; 142  :             else

  008b9	eb 0a		 jmp	 SHORT $LN6@Multiply_W
$LN7@Multiply_W:

; 143  :                 AddToMULTI64Counter(16);

  008bb	6a 10		 push	 16			; 00000010H
  008bd	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
  008c2	83 c4 04	 add	 esp, 4
$LN6@Multiply_W:

; 144  : #endif
; 145  :         }
; 146  : 
; 147  :         if (u_count & 0x8)

  008c5	8b 45 0c	 mov	 eax, DWORD PTR _u_count$[ebp]
  008c8	83 e0 08	 and	 eax, 8
  008cb	0f 84 87 01 00
	00		 je	 $LN9@Multiply_W

; 148  :         {
; 149  :             k = _MULTIPLY_DIGIT_UNIT(k, &up[0], v, &wp[0]);

  008d1	b9 04 00 00 00	 mov	 ecx, 4
  008d6	6b d1 00	 imul	 edx, ecx, 0
  008d9	03 55 14	 add	 edx, DWORD PTR _wp$[ebp]
  008dc	52		 push	 edx
  008dd	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  008e0	50		 push	 eax
  008e1	b9 04 00 00 00	 mov	 ecx, 4
  008e6	6b d1 00	 imul	 edx, ecx, 0
  008e9	03 55 08	 add	 edx, DWORD PTR _up$[ebp]
  008ec	52		 push	 edx
  008ed	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  008f0	50		 push	 eax
  008f1	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  008f6	83 c4 10	 add	 esp, 16			; 00000010H
  008f9	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 150  :             k = _MULTIPLY_DIGIT_UNIT(k, &up[1], v, &wp[1]);

  008fc	b9 04 00 00 00	 mov	 ecx, 4
  00901	c1 e1 00	 shl	 ecx, 0
  00904	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  00907	51		 push	 ecx
  00908	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  0090b	52		 push	 edx
  0090c	b8 04 00 00 00	 mov	 eax, 4
  00911	c1 e0 00	 shl	 eax, 0
  00914	03 45 08	 add	 eax, DWORD PTR _up$[ebp]
  00917	50		 push	 eax
  00918	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  0091b	51		 push	 ecx
  0091c	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00921	83 c4 10	 add	 esp, 16			; 00000010H
  00924	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 151  :             k = _MULTIPLY_DIGIT_UNIT(k, &up[2], v, &wp[2]);

  00927	ba 04 00 00 00	 mov	 edx, 4
  0092c	d1 e2		 shl	 edx, 1
  0092e	03 55 14	 add	 edx, DWORD PTR _wp$[ebp]
  00931	52		 push	 edx
  00932	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00935	50		 push	 eax
  00936	b9 04 00 00 00	 mov	 ecx, 4
  0093b	d1 e1		 shl	 ecx, 1
  0093d	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  00940	51		 push	 ecx
  00941	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00944	52		 push	 edx
  00945	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  0094a	83 c4 10	 add	 esp, 16			; 00000010H
  0094d	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 152  :             k = _MULTIPLY_DIGIT_UNIT(k, &up[3], v, &wp[3]);

  00950	b8 04 00 00 00	 mov	 eax, 4
  00955	6b c8 03	 imul	 ecx, eax, 3
  00958	03 4d 14	 add	 ecx, DWORD PTR _wp$[ebp]
  0095b	51		 push	 ecx
  0095c	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  0095f	52		 push	 edx
  00960	b8 04 00 00 00	 mov	 eax, 4
  00965	6b c8 03	 imul	 ecx, eax, 3
  00968	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  0096b	51		 push	 ecx
  0096c	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  0096f	52		 push	 edx
  00970	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00975	83 c4 10	 add	 esp, 16			; 00000010H
  00978	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 153  :             k = _MULTIPLY_DIGIT_UNIT(k, &up[4], v, &wp[4]);

  0097b	b8 04 00 00 00	 mov	 eax, 4
  00980	c1 e0 02	 shl	 eax, 2
  00983	03 45 14	 add	 eax, DWORD PTR _wp$[ebp]
  00986	50		 push	 eax
  00987	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  0098a	51		 push	 ecx
  0098b	ba 04 00 00 00	 mov	 edx, 4
  00990	c1 e2 02	 shl	 edx, 2
  00993	03 55 08	 add	 edx, DWORD PTR _up$[ebp]
  00996	52		 push	 edx
  00997	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  0099a	50		 push	 eax
  0099b	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  009a0	83 c4 10	 add	 esp, 16			; 00000010H
  009a3	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 154  :             k = _MULTIPLY_DIGIT_UNIT(k, &up[5], v, &wp[5]);

  009a6	b9 04 00 00 00	 mov	 ecx, 4
  009ab	6b d1 05	 imul	 edx, ecx, 5
  009ae	03 55 14	 add	 edx, DWORD PTR _wp$[ebp]
  009b1	52		 push	 edx
  009b2	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  009b5	50		 push	 eax
  009b6	b9 04 00 00 00	 mov	 ecx, 4
  009bb	6b d1 05	 imul	 edx, ecx, 5
  009be	03 55 08	 add	 edx, DWORD PTR _up$[ebp]
  009c1	52		 push	 edx
  009c2	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  009c5	50		 push	 eax
  009c6	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  009cb	83 c4 10	 add	 esp, 16			; 00000010H
  009ce	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 155  :             k = _MULTIPLY_DIGIT_UNIT(k, &up[6], v, &wp[6]);

  009d1	b9 04 00 00 00	 mov	 ecx, 4
  009d6	6b d1 06	 imul	 edx, ecx, 6
  009d9	03 55 14	 add	 edx, DWORD PTR _wp$[ebp]
  009dc	52		 push	 edx
  009dd	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  009e0	50		 push	 eax
  009e1	b9 04 00 00 00	 mov	 ecx, 4
  009e6	6b d1 06	 imul	 edx, ecx, 6
  009e9	03 55 08	 add	 edx, DWORD PTR _up$[ebp]
  009ec	52		 push	 edx
  009ed	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  009f0	50		 push	 eax
  009f1	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  009f6	83 c4 10	 add	 esp, 16			; 00000010H
  009f9	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 156  :             k = _MULTIPLY_DIGIT_UNIT(k, &up[7], v, &wp[7]);

  009fc	b9 04 00 00 00	 mov	 ecx, 4
  00a01	6b d1 07	 imul	 edx, ecx, 7
  00a04	03 55 14	 add	 edx, DWORD PTR _wp$[ebp]
  00a07	52		 push	 edx
  00a08	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00a0b	50		 push	 eax
  00a0c	b9 04 00 00 00	 mov	 ecx, 4
  00a11	6b d1 07	 imul	 edx, ecx, 7
  00a14	03 55 08	 add	 edx, DWORD PTR _up$[ebp]
  00a17	52		 push	 edx
  00a18	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  00a1b	50		 push	 eax
  00a1c	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00a21	83 c4 10	 add	 esp, 16			; 00000010H
  00a24	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 157  :             up += 8;

  00a27	8b 4d 08	 mov	 ecx, DWORD PTR _up$[ebp]
  00a2a	83 c1 20	 add	 ecx, 32			; 00000020H
  00a2d	89 4d 08	 mov	 DWORD PTR _up$[ebp], ecx

; 158  :             wp += 8;

  00a30	8b 55 14	 mov	 edx, DWORD PTR _wp$[ebp]
  00a33	83 c2 20	 add	 edx, 32			; 00000020H
  00a36	89 55 14	 mov	 DWORD PTR _wp$[ebp], edx

; 159  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 160  :             if (sizeof(k) == sizeof(_UINT32_T))

  00a39	b8 01 00 00 00	 mov	 eax, 1
  00a3e	85 c0		 test	 eax, eax
  00a40	74 0c		 je	 SHORT $LN10@Multiply_W

; 161  :                 AddToMULTI32Counter(8);

  00a42	6a 08		 push	 8
  00a44	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
  00a49	83 c4 04	 add	 esp, 4

; 162  :             else

  00a4c	eb 0a		 jmp	 SHORT $LN9@Multiply_W
$LN10@Multiply_W:

; 163  :                 AddToMULTI64Counter(8);

  00a4e	6a 08		 push	 8
  00a50	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
  00a55	83 c4 04	 add	 esp, 4
$LN9@Multiply_W:

; 164  : #endif
; 165  :         }
; 166  : 
; 167  :         if (u_count & 0x4)

  00a58	8b 4d 0c	 mov	 ecx, DWORD PTR _u_count$[ebp]
  00a5b	83 e1 04	 and	 ecx, 4
  00a5e	0f 84 db 00 00
	00		 je	 $LN12@Multiply_W

; 168  :         {
; 169  :             k = _MULTIPLY_DIGIT_UNIT(k, &up[0], v, &wp[0]);

  00a64	ba 04 00 00 00	 mov	 edx, 4
  00a69	6b c2 00	 imul	 eax, edx, 0
  00a6c	03 45 14	 add	 eax, DWORD PTR _wp$[ebp]
  00a6f	50		 push	 eax
  00a70	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00a73	51		 push	 ecx
  00a74	ba 04 00 00 00	 mov	 edx, 4
  00a79	6b c2 00	 imul	 eax, edx, 0
  00a7c	03 45 08	 add	 eax, DWORD PTR _up$[ebp]
  00a7f	50		 push	 eax
  00a80	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  00a83	51		 push	 ecx
  00a84	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00a89	83 c4 10	 add	 esp, 16			; 00000010H
  00a8c	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 170  :             k = _MULTIPLY_DIGIT_UNIT(k, &up[1], v, &wp[1]);

  00a8f	ba 04 00 00 00	 mov	 edx, 4
  00a94	c1 e2 00	 shl	 edx, 0
  00a97	03 55 14	 add	 edx, DWORD PTR _wp$[ebp]
  00a9a	52		 push	 edx
  00a9b	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00a9e	50		 push	 eax
  00a9f	b9 04 00 00 00	 mov	 ecx, 4
  00aa4	c1 e1 00	 shl	 ecx, 0
  00aa7	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  00aaa	51		 push	 ecx
  00aab	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00aae	52		 push	 edx
  00aaf	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00ab4	83 c4 10	 add	 esp, 16			; 00000010H
  00ab7	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 171  :             k = _MULTIPLY_DIGIT_UNIT(k, &up[2], v, &wp[2]);

  00aba	b8 04 00 00 00	 mov	 eax, 4
  00abf	d1 e0		 shl	 eax, 1
  00ac1	03 45 14	 add	 eax, DWORD PTR _wp$[ebp]
  00ac4	50		 push	 eax
  00ac5	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00ac8	51		 push	 ecx
  00ac9	ba 04 00 00 00	 mov	 edx, 4
  00ace	d1 e2		 shl	 edx, 1
  00ad0	03 55 08	 add	 edx, DWORD PTR _up$[ebp]
  00ad3	52		 push	 edx
  00ad4	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  00ad7	50		 push	 eax
  00ad8	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00add	83 c4 10	 add	 esp, 16			; 00000010H
  00ae0	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 172  :             k = _MULTIPLY_DIGIT_UNIT(k, &up[3], v, &wp[3]);

  00ae3	b9 04 00 00 00	 mov	 ecx, 4
  00ae8	6b d1 03	 imul	 edx, ecx, 3
  00aeb	03 55 14	 add	 edx, DWORD PTR _wp$[ebp]
  00aee	52		 push	 edx
  00aef	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00af2	50		 push	 eax
  00af3	b9 04 00 00 00	 mov	 ecx, 4
  00af8	6b d1 03	 imul	 edx, ecx, 3
  00afb	03 55 08	 add	 edx, DWORD PTR _up$[ebp]
  00afe	52		 push	 edx
  00aff	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  00b02	50		 push	 eax
  00b03	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00b08	83 c4 10	 add	 esp, 16			; 00000010H
  00b0b	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 173  :             up += 4;

  00b0e	8b 4d 08	 mov	 ecx, DWORD PTR _up$[ebp]
  00b11	83 c1 10	 add	 ecx, 16			; 00000010H
  00b14	89 4d 08	 mov	 DWORD PTR _up$[ebp], ecx

; 174  :             wp += 4;

  00b17	8b 55 14	 mov	 edx, DWORD PTR _wp$[ebp]
  00b1a	83 c2 10	 add	 edx, 16			; 00000010H
  00b1d	89 55 14	 mov	 DWORD PTR _wp$[ebp], edx

; 175  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 176  :             if (sizeof(k) == sizeof(_UINT32_T))

  00b20	b8 01 00 00 00	 mov	 eax, 1
  00b25	85 c0		 test	 eax, eax
  00b27	74 0c		 je	 SHORT $LN13@Multiply_W

; 177  :                 AddToMULTI32Counter(4);

  00b29	6a 04		 push	 4
  00b2b	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
  00b30	83 c4 04	 add	 esp, 4

; 178  :             else

  00b33	eb 0a		 jmp	 SHORT $LN12@Multiply_W
$LN13@Multiply_W:

; 179  :                 AddToMULTI64Counter(4);

  00b35	6a 04		 push	 4
  00b37	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
  00b3c	83 c4 04	 add	 esp, 4
$LN12@Multiply_W:

; 180  : #endif
; 181  :         }
; 182  : 
; 183  :         if (u_count & 0x2)

  00b3f	8b 4d 0c	 mov	 ecx, DWORD PTR _u_count$[ebp]
  00b42	83 e1 02	 and	 ecx, 2
  00b45	0f 84 87 00 00
	00		 je	 $LN15@Multiply_W

; 184  :         {
; 185  :             k = _MULTIPLY_DIGIT_UNIT(k, &up[0], v, &wp[0]);

  00b4b	ba 04 00 00 00	 mov	 edx, 4
  00b50	6b c2 00	 imul	 eax, edx, 0
  00b53	03 45 14	 add	 eax, DWORD PTR _wp$[ebp]
  00b56	50		 push	 eax
  00b57	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00b5a	51		 push	 ecx
  00b5b	ba 04 00 00 00	 mov	 edx, 4
  00b60	6b c2 00	 imul	 eax, edx, 0
  00b63	03 45 08	 add	 eax, DWORD PTR _up$[ebp]
  00b66	50		 push	 eax
  00b67	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  00b6a	51		 push	 ecx
  00b6b	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00b70	83 c4 10	 add	 esp, 16			; 00000010H
  00b73	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 186  :             k = _MULTIPLY_DIGIT_UNIT(k, &up[1], v, &wp[1]);

  00b76	ba 04 00 00 00	 mov	 edx, 4
  00b7b	c1 e2 00	 shl	 edx, 0
  00b7e	03 55 14	 add	 edx, DWORD PTR _wp$[ebp]
  00b81	52		 push	 edx
  00b82	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00b85	50		 push	 eax
  00b86	b9 04 00 00 00	 mov	 ecx, 4
  00b8b	c1 e1 00	 shl	 ecx, 0
  00b8e	03 4d 08	 add	 ecx, DWORD PTR _up$[ebp]
  00b91	51		 push	 ecx
  00b92	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00b95	52		 push	 edx
  00b96	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00b9b	83 c4 10	 add	 esp, 16			; 00000010H
  00b9e	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 187  :             up += 2;

  00ba1	8b 45 08	 mov	 eax, DWORD PTR _up$[ebp]
  00ba4	83 c0 08	 add	 eax, 8
  00ba7	89 45 08	 mov	 DWORD PTR _up$[ebp], eax

; 188  :             wp += 2;

  00baa	8b 4d 14	 mov	 ecx, DWORD PTR _wp$[ebp]
  00bad	83 c1 08	 add	 ecx, 8
  00bb0	89 4d 14	 mov	 DWORD PTR _wp$[ebp], ecx

; 189  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 190  :             if (sizeof(k) == sizeof(_UINT32_T))

  00bb3	ba 01 00 00 00	 mov	 edx, 1
  00bb8	85 d2		 test	 edx, edx
  00bba	74 0c		 je	 SHORT $LN16@Multiply_W

; 191  :                 AddToMULTI32Counter(2);

  00bbc	6a 02		 push	 2
  00bbe	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
  00bc3	83 c4 04	 add	 esp, 4

; 192  :             else

  00bc6	eb 0a		 jmp	 SHORT $LN15@Multiply_W
$LN16@Multiply_W:

; 193  :                 AddToMULTI64Counter(2);

  00bc8	6a 02		 push	 2
  00bca	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
  00bcf	83 c4 04	 add	 esp, 4
$LN15@Multiply_W:

; 194  : #endif
; 195  :         }
; 196  : 
; 197  :         if (u_count & 0x1)

  00bd2	8b 45 0c	 mov	 eax, DWORD PTR _u_count$[ebp]
  00bd5	83 e0 01	 and	 eax, 1
  00bd8	74 52		 je	 SHORT $LN18@Multiply_W

; 198  :         {
; 199  :             k = _MULTIPLY_DIGIT_UNIT(k, &up[0], v, &wp[0]);

  00bda	b9 04 00 00 00	 mov	 ecx, 4
  00bdf	6b d1 00	 imul	 edx, ecx, 0
  00be2	03 55 14	 add	 edx, DWORD PTR _wp$[ebp]
  00be5	52		 push	 edx
  00be6	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00be9	50		 push	 eax
  00bea	b9 04 00 00 00	 mov	 ecx, 4
  00bef	6b d1 00	 imul	 edx, ecx, 0
  00bf2	03 55 08	 add	 edx, DWORD PTR _up$[ebp]
  00bf5	52		 push	 edx
  00bf6	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  00bf9	50		 push	 eax
  00bfa	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00bff	83 c4 10	 add	 esp, 16			; 00000010H
  00c02	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 200  :             up += 1;

  00c05	8b 4d 08	 mov	 ecx, DWORD PTR _up$[ebp]
  00c08	83 c1 04	 add	 ecx, 4
  00c0b	89 4d 08	 mov	 DWORD PTR _up$[ebp], ecx

; 201  :             wp += 1;

  00c0e	8b 55 14	 mov	 edx, DWORD PTR _wp$[ebp]
  00c11	83 c2 04	 add	 edx, 4
  00c14	89 55 14	 mov	 DWORD PTR _wp$[ebp], edx

; 202  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 203  :             if (sizeof(k) == sizeof(_UINT32_T))

  00c17	b8 01 00 00 00	 mov	 eax, 1
  00c1c	85 c0		 test	 eax, eax
  00c1e	74 07		 je	 SHORT $LN19@Multiply_W

; 204  :                 IncrementMULTI32Counter();

  00c20	e8 00 00 00 00	 call	 ?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementMULTI32Counter

; 205  :             else

  00c25	eb 05		 jmp	 SHORT $LN18@Multiply_W
$LN19@Multiply_W:

; 206  :                 IncrementMULTI64Counter();

  00c27	e8 00 00 00 00	 call	 ?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementMULTI64Counter
$LN18@Multiply_W:

; 207  : #endif
; 208  :         }
; 209  : 
; 210  :         if (k != 0)

  00c2c	83 7d fc 00	 cmp	 DWORD PTR _k$[ebp], 0
  00c30	74 08		 je	 SHORT $LN1@Multiply_W

; 211  :             *wp = k;

  00c32	8b 4d 14	 mov	 ecx, DWORD PTR _wp$[ebp]
  00c35	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00c38	89 11		 mov	 DWORD PTR [ecx], edx
$LN1@Multiply_W:

; 212  :     }

  00c3a	83 c4 08	 add	 esp, 8
  00c3d	3b ec		 cmp	 ebp, esp
  00c3f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00c44	8b e5		 mov	 esp, ebp
  00c46	5d		 pop	 ebp
  00c47	c3		 ret	 0
?Multiply_WORD_using_MUL_ADC@Internal@Core@Math@Palmtree@@YAXPAIII0@Z ENDP ; Palmtree::Math::Core::Internal::Multiply_WORD_using_MUL_ADC
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
_TEXT	SEGMENT
tv92 = -37						; size = 1
tv94 = -36						; size = 4
tv79 = -29						; size = 1
tv81 = -28						; size = 4
_t_lo$ = -20						; size = 4
_t_hi$ = -8						; size = 4
_k$ = 8							; size = 4
_up$ = 12						; size = 4
_v$ = 16						; size = 4
_wp$ = 20						; size = 4
?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z PROC ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT

; 58   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	57		 push	 edi
  00007	8d 7d d8	 lea	 edi, DWORD PTR [ebp-40]
  0000a	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET __05528951_pmc_multiply@cpp
  0001b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 59   :         __UNIT_TYPE t_hi;
; 60   :         __UNIT_TYPE t_lo;
; 61   :         t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

  00020	8d 45 f8	 lea	 eax, DWORD PTR _t_hi$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00027	51		 push	 ecx
  00028	8b 55 0c	 mov	 edx, DWORD PTR _up$[ebp]
  0002b	8b 02		 mov	 eax, DWORD PTR [edx]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 __MULTIPLYX_UNIT
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH
  00036	89 45 ec	 mov	 DWORD PTR _t_lo$[ebp], eax

; 62   :         _ADDX_UNIT(_ADDX_UNIT(0, t_lo, *wp, &t_lo), t_hi, 0, &t_hi);

  00039	8b 4d f8	 mov	 ecx, DWORD PTR _t_hi$[ebp]
  0003c	89 4d e4	 mov	 DWORD PTR tv81[ebp], ecx
  0003f	8d 55 ec	 lea	 edx, DWORD PTR _t_lo$[ebp]
  00042	52		 push	 edx
  00043	8b 45 14	 mov	 eax, DWORD PTR _wp$[ebp]
  00046	8b 08		 mov	 ecx, DWORD PTR [eax]
  00048	51		 push	 ecx
  00049	8b 55 ec	 mov	 edx, DWORD PTR _t_lo$[ebp]
  0004c	52		 push	 edx
  0004d	6a 00		 push	 0
  0004f	e8 00 00 00 00	 call	 __ADDX_UNIT
  00054	83 c4 10	 add	 esp, 16			; 00000010H
  00057	88 45 e3	 mov	 BYTE PTR tv79[ebp], al
  0005a	8d 45 f8	 lea	 eax, DWORD PTR _t_hi$[ebp]
  0005d	50		 push	 eax
  0005e	6a 00		 push	 0
  00060	8b 4d e4	 mov	 ecx, DWORD PTR tv81[ebp]
  00063	51		 push	 ecx
  00064	0f b6 55 e3	 movzx	 edx, BYTE PTR tv79[ebp]
  00068	52		 push	 edx
  00069	e8 00 00 00 00	 call	 __ADDX_UNIT
  0006e	83 c4 10	 add	 esp, 16			; 00000010H

; 63   :         _ADDX_UNIT(_ADDX_UNIT(0, t_lo, k, &t_lo), t_hi, 0, &t_hi);

  00071	8b 45 f8	 mov	 eax, DWORD PTR _t_hi$[ebp]
  00074	89 45 dc	 mov	 DWORD PTR tv94[ebp], eax
  00077	8d 4d ec	 lea	 ecx, DWORD PTR _t_lo$[ebp]
  0007a	51		 push	 ecx
  0007b	8b 55 08	 mov	 edx, DWORD PTR _k$[ebp]
  0007e	52		 push	 edx
  0007f	8b 45 ec	 mov	 eax, DWORD PTR _t_lo$[ebp]
  00082	50		 push	 eax
  00083	6a 00		 push	 0
  00085	e8 00 00 00 00	 call	 __ADDX_UNIT
  0008a	83 c4 10	 add	 esp, 16			; 00000010H
  0008d	88 45 db	 mov	 BYTE PTR tv92[ebp], al
  00090	8d 4d f8	 lea	 ecx, DWORD PTR _t_hi$[ebp]
  00093	51		 push	 ecx
  00094	6a 00		 push	 0
  00096	8b 55 dc	 mov	 edx, DWORD PTR tv94[ebp]
  00099	52		 push	 edx
  0009a	0f b6 45 db	 movzx	 eax, BYTE PTR tv92[ebp]
  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 __ADDX_UNIT
  000a4	83 c4 10	 add	 esp, 16			; 00000010H

; 64   :         *wp = t_lo;

  000a7	8b 4d 14	 mov	 ecx, DWORD PTR _wp$[ebp]
  000aa	8b 55 ec	 mov	 edx, DWORD PTR _t_lo$[ebp]
  000ad	89 11		 mov	 DWORD PTR [ecx], edx

; 65   :         k = t_hi;

  000af	8b 45 f8	 mov	 eax, DWORD PTR _t_hi$[ebp]
  000b2	89 45 08	 mov	 DWORD PTR _k$[ebp], eax

; 66   :         return (k);

  000b5	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 67   :     }

  000b8	52		 push	 edx
  000b9	8b cd		 mov	 ecx, ebp
  000bb	50		 push	 eax
  000bc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@MULTIPLYX_
  000c2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000c7	58		 pop	 eax
  000c8	5a		 pop	 edx
  000c9	5f		 pop	 edi
  000ca	83 c4 28	 add	 esp, 40			; 00000028H
  000cd	3b ec		 cmp	 ebp, esp
  000cf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c3		 ret	 0
$LN6@MULTIPLYX_:
  000d8	02 00 00 00	 DD	 2
  000dc	00 00 00 00	 DD	 $LN5@MULTIPLYX_
$LN5@MULTIPLYX_:
  000e0	f8 ff ff ff	 DD	 -8			; fffffff8H
  000e4	04 00 00 00	 DD	 4
  000e8	00 00 00 00	 DD	 $LN3@MULTIPLYX_
  000ec	ec ff ff ff	 DD	 -20			; ffffffecH
  000f0	04 00 00 00	 DD	 4
  000f4	00 00 00 00	 DD	 $LN4@MULTIPLYX_
$LN4@MULTIPLYX_:
  000f8	74		 DB	 116			; 00000074H
  000f9	5f		 DB	 95			; 0000005fH
  000fa	6c		 DB	 108			; 0000006cH
  000fb	6f		 DB	 111			; 0000006fH
  000fc	00		 DB	 0
$LN3@MULTIPLYX_:
  000fd	74		 DB	 116			; 00000074H
  000fe	5f		 DB	 95			; 0000005fH
  000ff	68		 DB	 104			; 00000068H
  00100	69		 DB	 105			; 00000069H
  00101	00		 DB	 0
?_MULTIPLYX_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ENDP ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
_TEXT	SEGMENT
tv92 = -37						; size = 1
tv94 = -36						; size = 4
tv79 = -29						; size = 1
tv81 = -28						; size = 4
_t_lo$ = -20						; size = 4
_t_hi$ = -8						; size = 4
_k$ = 8							; size = 4
_up$ = 12						; size = 4
_v$ = 16						; size = 4
_wp$ = 20						; size = 4
?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z PROC ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT

; 46   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	57		 push	 edi
  00007	8d 7d d8	 lea	 edi, DWORD PTR [ebp-40]
  0000a	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET __05528951_pmc_multiply@cpp
  0001b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 47   :         __UNIT_TYPE t_hi;
; 48   :         __UNIT_TYPE t_lo;
; 49   :         t_lo = _MULTIPLY_UNIT(*up, v, &t_hi);

  00020	8d 45 f8	 lea	 eax, DWORD PTR _t_hi$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00027	51		 push	 ecx
  00028	8b 55 0c	 mov	 edx, DWORD PTR _up$[ebp]
  0002b	8b 02		 mov	 eax, DWORD PTR [edx]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 __MULTIPLY_UNIT
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH
  00036	89 45 ec	 mov	 DWORD PTR _t_lo$[ebp], eax

; 50   :         _ADD_UNIT(_ADD_UNIT(0, t_lo, *wp, &t_lo), t_hi, 0, &t_hi);

  00039	8b 4d f8	 mov	 ecx, DWORD PTR _t_hi$[ebp]
  0003c	89 4d e4	 mov	 DWORD PTR tv81[ebp], ecx
  0003f	8d 55 ec	 lea	 edx, DWORD PTR _t_lo$[ebp]
  00042	52		 push	 edx
  00043	8b 45 14	 mov	 eax, DWORD PTR _wp$[ebp]
  00046	8b 08		 mov	 ecx, DWORD PTR [eax]
  00048	51		 push	 ecx
  00049	8b 55 ec	 mov	 edx, DWORD PTR _t_lo$[ebp]
  0004c	52		 push	 edx
  0004d	6a 00		 push	 0
  0004f	e8 00 00 00 00	 call	 __ADD_UNIT
  00054	83 c4 10	 add	 esp, 16			; 00000010H
  00057	88 45 e3	 mov	 BYTE PTR tv79[ebp], al
  0005a	8d 45 f8	 lea	 eax, DWORD PTR _t_hi$[ebp]
  0005d	50		 push	 eax
  0005e	6a 00		 push	 0
  00060	8b 4d e4	 mov	 ecx, DWORD PTR tv81[ebp]
  00063	51		 push	 ecx
  00064	0f b6 55 e3	 movzx	 edx, BYTE PTR tv79[ebp]
  00068	52		 push	 edx
  00069	e8 00 00 00 00	 call	 __ADD_UNIT
  0006e	83 c4 10	 add	 esp, 16			; 00000010H

; 51   :         _ADD_UNIT(_ADD_UNIT(0, t_lo, k, &t_lo), t_hi, 0, &t_hi);

  00071	8b 45 f8	 mov	 eax, DWORD PTR _t_hi$[ebp]
  00074	89 45 dc	 mov	 DWORD PTR tv94[ebp], eax
  00077	8d 4d ec	 lea	 ecx, DWORD PTR _t_lo$[ebp]
  0007a	51		 push	 ecx
  0007b	8b 55 08	 mov	 edx, DWORD PTR _k$[ebp]
  0007e	52		 push	 edx
  0007f	8b 45 ec	 mov	 eax, DWORD PTR _t_lo$[ebp]
  00082	50		 push	 eax
  00083	6a 00		 push	 0
  00085	e8 00 00 00 00	 call	 __ADD_UNIT
  0008a	83 c4 10	 add	 esp, 16			; 00000010H
  0008d	88 45 db	 mov	 BYTE PTR tv92[ebp], al
  00090	8d 4d f8	 lea	 ecx, DWORD PTR _t_hi$[ebp]
  00093	51		 push	 ecx
  00094	6a 00		 push	 0
  00096	8b 55 dc	 mov	 edx, DWORD PTR tv94[ebp]
  00099	52		 push	 edx
  0009a	0f b6 45 db	 movzx	 eax, BYTE PTR tv92[ebp]
  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 __ADD_UNIT
  000a4	83 c4 10	 add	 esp, 16			; 00000010H

; 52   :         *wp = t_lo;

  000a7	8b 4d 14	 mov	 ecx, DWORD PTR _wp$[ebp]
  000aa	8b 55 ec	 mov	 edx, DWORD PTR _t_lo$[ebp]
  000ad	89 11		 mov	 DWORD PTR [ecx], edx

; 53   :         k = t_hi;

  000af	8b 45 f8	 mov	 eax, DWORD PTR _t_hi$[ebp]
  000b2	89 45 08	 mov	 DWORD PTR _k$[ebp], eax

; 54   :         return (k);

  000b5	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 55   :     }

  000b8	52		 push	 edx
  000b9	8b cd		 mov	 ecx, ebp
  000bb	50		 push	 eax
  000bc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@MULTIPLY_D
  000c2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000c7	58		 pop	 eax
  000c8	5a		 pop	 edx
  000c9	5f		 pop	 edi
  000ca	83 c4 28	 add	 esp, 40			; 00000028H
  000cd	3b ec		 cmp	 ebp, esp
  000cf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c3		 ret	 0
$LN6@MULTIPLY_D:
  000d8	02 00 00 00	 DD	 2
  000dc	00 00 00 00	 DD	 $LN5@MULTIPLY_D
$LN5@MULTIPLY_D:
  000e0	f8 ff ff ff	 DD	 -8			; fffffff8H
  000e4	04 00 00 00	 DD	 4
  000e8	00 00 00 00	 DD	 $LN3@MULTIPLY_D
  000ec	ec ff ff ff	 DD	 -20			; ffffffecH
  000f0	04 00 00 00	 DD	 4
  000f4	00 00 00 00	 DD	 $LN4@MULTIPLY_D
$LN4@MULTIPLY_D:
  000f8	74		 DB	 116			; 00000074H
  000f9	5f		 DB	 95			; 0000005fH
  000fa	6c		 DB	 108			; 0000006cH
  000fb	6f		 DB	 111			; 0000006fH
  000fc	00		 DB	 0
$LN3@MULTIPLY_D:
  000fd	74		 DB	 116			; 00000074H
  000fe	5f		 DB	 95			; 0000005fH
  000ff	68		 DB	 104			; 00000068H
  00100	69		 DB	 105			; 00000069H
  00101	00		 DB	 0
?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YAIIPAII0@Z ENDP ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT PROC

; 454  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 455  :             if (x == 0)

  00025	83 7d 08 00	 cmp	 DWORD PTR _x$[ebp], 0
  00029	75 07		 jne	 SHORT $LN2@LZCNT_ALT_

; 456  :                 return (sizeof(x) * 8);

  0002b	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00030	eb 0f		 jmp	 SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 457  : #ifdef _M_IX86
; 458  :             DWORD pos;
; 459  : #ifdef _MSC_VER
; 460  :             _BitScanReverse(&pos, x);

  00032	0f bd 45 08	 bsr	 eax, DWORD PTR _x$[ebp]
  00036	89 45 f8	 mov	 DWORD PTR _pos$[ebp], eax

; 461  : #elif defined(__GNUC__)
; 462  :             __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 463  : #else
; 464  : #error unknown compiler
; 465  : #endif
; 466  : #elif defined(_M_X64)
; 467  : #ifdef _MSC_VER
; 468  :             DWORD pos;
; 469  :             _BitScanReverse64(&pos, x);
; 470  : #elif defined(__GNUC__)
; 471  :             _UINT64_T pos;
; 472  :             __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 473  : #else
; 474  : #error unknown compiler
; 475  : #endif
; 476  : #else
; 477  : #error unknown platform
; 478  : #endif
; 479  :             return (sizeof(x) * 8 - 1 - pos);

  00039	b8 1f 00 00 00	 mov	 eax, 31			; 0000001fH
  0003e	2b 45 f8	 sub	 eax, DWORD PTR _pos$[ebp]
$LN1@LZCNT_ALT_:

; 480  :         }

  00041	52		 push	 edx
  00042	8b cd		 mov	 ecx, ebp
  00044	50		 push	 eax
  00045	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@LZCNT_ALT_
  0004b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00050	58		 pop	 eax
  00051	5a		 pop	 edx
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH
  00055	3b ec		 cmp	 ebp, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
$LN6@LZCNT_ALT_:
  00060	01 00 00 00	 DD	 1
  00064	00 00 00 00	 DD	 $LN5@LZCNT_ALT_
$LN5@LZCNT_ALT_:
  00068	f8 ff ff ff	 DD	 -8			; fffffff8H
  0006c	04 00 00 00	 DD	 4
  00070	00 00 00 00	 DD	 $LN4@LZCNT_ALT_
$LN4@LZCNT_ALT_:
  00074	70		 DB	 112			; 00000070H
  00075	6f		 DB	 111			; 0000006fH
  00076	73		 DB	 115			; 00000073H
  00077	00		 DB	 0
__LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 4
__LZCNT_ALT_32 PROC

; 421  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 422  :             if (x == 0)

  00025	83 7d 08 00	 cmp	 DWORD PTR _x$[ebp], 0
  00029	75 07		 jne	 SHORT $LN2@LZCNT_ALT_

; 423  :                 return (sizeof(x) * 8);

  0002b	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00030	eb 0f		 jmp	 SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 424  :             DWORD pos;
; 425  : #ifdef _MSC_VER
; 426  :             _BitScanReverse(&pos, x);

  00032	0f bd 45 08	 bsr	 eax, DWORD PTR _x$[ebp]
  00036	89 45 f8	 mov	 DWORD PTR _pos$[ebp], eax

; 427  : #elif defined(__GNUC__)
; 428  :             __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 429  : #else
; 430  : #error unknown compiler
; 431  : #endif
; 432  :             return (sizeof(x) * 8 - 1 - pos);

  00039	b8 1f 00 00 00	 mov	 eax, 31			; 0000001fH
  0003e	2b 45 f8	 sub	 eax, DWORD PTR _pos$[ebp]
$LN1@LZCNT_ALT_:

; 433  :         }

  00041	52		 push	 edx
  00042	8b cd		 mov	 ecx, ebp
  00044	50		 push	 eax
  00045	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@LZCNT_ALT_
  0004b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00050	58		 pop	 eax
  00051	5a		 pop	 edx
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH
  00055	3b ec		 cmp	 ebp, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
$LN6@LZCNT_ALT_:
  00060	01 00 00 00	 DD	 1
  00064	00 00 00 00	 DD	 $LN5@LZCNT_ALT_
$LN5@LZCNT_ALT_:
  00068	f8 ff ff ff	 DD	 -8			; fffffff8H
  0006c	04 00 00 00	 DD	 4
  00070	00 00 00 00	 DD	 $LN4@LZCNT_ALT_
$LN4@LZCNT_ALT_:
  00074	70		 DB	 112			; 00000070H
  00075	6f		 DB	 111			; 0000006fH
  00076	73		 DB	 115			; 00000073H
  00077	00		 DB	 0
__LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w_hi$ = 16						; size = 4
__MULTIPLYX_UNIT PROC

; 228  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 229  : #ifdef _MSC_VER
; 230  : #ifdef _M_IX86
; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0000d	8b 45 10	 mov	 eax, DWORD PTR _w_hi$[ebp]
  00010	50		 push	 eax
  00011	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00014	f7 65 0c	 mul	 DWORD PTR _v$[ebp]
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 __FROMDWORDTOWORD
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 232  : #elif defined(_M_X64)
; 233  :             return (_mulx_u64(u, v, w_hi));
; 234  : #else
; 235  : #error unknown platform
; 236  : #endif
; 237  : #elif defined(__GNUC__)
; 238  : #ifdef _M_IX86
; 239  :             _UINT32_T w_lo;
; 240  :             __asm__("mulxl %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 241  :             return (w_lo);
; 242  : #elif defined(_M_X64)
; 243  :             _UINT64_T w_lo;
; 244  :             __asm__("mulxq %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 245  :             return (w_lo);
; 246  : #else
; 247  : #error unknown platform
; 248  : #endif
; 249  : #else
; 250  : #error unknown compiler
; 251  : #endif
; 252  :         }

  00021	3b ec		 cmp	 ebp, esp
  00023	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__MULTIPLYX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w_hi$ = 16						; size = 4
__MULTIPLY_UNIT PROC

; 209  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 210  : #ifdef _M_IX86
; 211  : #ifdef _MSC_VER
; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0000d	8b 45 10	 mov	 eax, DWORD PTR _w_hi$[ebp]
  00010	50		 push	 eax
  00011	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00014	f7 65 0c	 mul	 DWORD PTR _v$[ebp]
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 __FROMDWORDTOWORD
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 213  : #elif defined(__GNUC__)
; 214  :             _UINT32_T w_lo;
; 215  :             __asm__("mull %3": "=a"(w_lo), "=d"(*w_hi) : "0"(u), "rm"(v));
; 216  :             return (w_lo);
; 217  : #else
; 218  : #error unknown compiler
; 219  : #endif
; 220  : #elif defined(_M_X64)
; 221  :             return (_umul128(u, v, w_hi));
; 222  : #else
; 223  : #error unknown platform
; 224  : #endif
; 225  :         }

  00021	3b ec		 cmp	 ebp, esp
  00023	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__MULTIPLY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADDX_UNIT PROC

; 187  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00009	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 188  : #ifdef _M_IX86
; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0000e	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  00011	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00014	8b 55 0c	 mov	 edx, DWORD PTR _u$[ebp]
  00017	8a 5d 08	 mov	 bl, BYTE PTR _carry$[ebp]
  0001a	80 c3 ff	 add	 bl, 255			; 000000ffH
  0001d	66 0f 38 f6 d1	 adcx	 edx, ecx
  00022	0f 92 c1	 setb	 cl
  00025	89 10		 mov	 DWORD PTR [eax], edx
  00027	8a c1		 mov	 al, cl

; 190  : #elif defined(_M_X64)
; 191  :             return (_addcarryx_u64(carry, u, v, w));
; 192  : #else
; 193  : #error unknown platform
; 194  : #endif
; 195  :         }

  00029	5b		 pop	 ebx
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
__ADDX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADD_UNIT PROC

; 176  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00009	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 177  : #ifdef _M_IX86
; 178  :             return (_addcarry_u32(carry, u, v, w));

  0000e	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  00011	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00014	8b 55 0c	 mov	 edx, DWORD PTR _u$[ebp]
  00017	8a 5d 08	 mov	 bl, BYTE PTR _carry$[ebp]
  0001a	80 c3 ff	 add	 bl, 255			; 000000ffH
  0001d	13 d1		 adc	 edx, ecx
  0001f	0f 92 c1	 setb	 cl
  00022	89 10		 mov	 DWORD PTR [eax], edx
  00024	8a c1		 mov	 al, cl

; 179  : #elif defined(_M_X64)
; 180  :             return (_addcarry_u64(carry, u, v, w));
; 181  : #else
; 182  : #error unknown platform
; 183  : #endif
; 184  :         }

  00026	5b		 pop	 ebx
  00027	3b ec		 cmp	 ebp, esp
  00029	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
__ADD_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC

; 145  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 146  :             *result_high = (_UINT32_T)(value >> 32);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  00010	8b 55 0c	 mov	 edx, DWORD PTR _value$[ebp+4]
  00013	b1 20		 mov	 cl, 32			; 00000020H
  00015	e8 00 00 00 00	 call	 __aullshr
  0001a	8b 4d 10	 mov	 ecx, DWORD PTR _result_high$[ebp]
  0001d	89 01		 mov	 DWORD PTR [ecx], eax

; 147  :             return ((_UINT32_T)value);

  0001f	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]

; 148  :         }

  00022	3b ec		 cmp	 ebp, esp
  00024	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
_TEXT	SEGMENT
_value$ = 8						; size = 4
?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z PROC ; Palmtree::Math::Core::Internal::AddToMULTI64Counter

; 359  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __BB6D3116_pmc_uint_internal@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 360  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  00010	b9 00 00 00 00	 mov	 ecx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A ; Palmtree::Math::Core::Internal::statistics_info
  00015	f0 0f c1 01	 lock	  xadd	 DWORD PTR [ecx], eax

; 361  :     }

  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ENDP ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
_TEXT	SEGMENT
_value$ = 8						; size = 4
?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z PROC ; Palmtree::Math::Core::Internal::AddToMULTI32Counter

; 353  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __BB6D3116_pmc_uint_internal@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  00010	b9 04 00 00 00	 mov	 ecx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
  00015	f0 0f c1 01	 lock	  xadd	 DWORD PTR [ecx], eax

; 355  :     }

  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ENDP ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
_TEXT	SEGMENT
?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ PROC ; Palmtree::Math::Core::Internal::IncrementMULTI64Counter

; 336  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __BB6D3116_pmc_uint_internal@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 337  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI64);

  0000d	f0 ff 05 00 00
	00 00		 lock	  inc	 (null) PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A

; 338  :     }

  00014	3b ec		 cmp	 ebp, esp
  00016	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ ENDP ; Palmtree::Math::Core::Internal::IncrementMULTI64Counter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
_TEXT	SEGMENT
?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ PROC ; Palmtree::Math::Core::Internal::IncrementMULTI32Counter

; 330  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __BB6D3116_pmc_uint_internal@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 331  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

  0000d	f0 ff 05 04 00
	00 00		 lock	  inc	 (null) PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4

; 332  :     }

  00014	3b ec		 cmp	 ebp, esp
  00016	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ ENDP ; Palmtree::Math::Core::Internal::IncrementMULTI32Counter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
_TEXT	SEGMENT
$T2 = -100						; size = 4
$T3 = -96						; size = 24
$T4 = -72						; size = 24
_w$ = -48						; size = 4
_root$ = -40						; size = 16
_nv$ = -20						; size = 4
_nu$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 4
?PMC_Multiply_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z PROC ; Palmtree::Math::Core::Internal::PMC_Multiply_X_X

; 744  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_Multiply_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 58	 sub	 esp, 88			; 00000058H
  00014	57		 push	 edi
  00015	8d 7d 9c	 lea	 edi, DWORD PTR [ebp-100]
  00018	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	50		 push	 eax
  0002c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET __05528951_pmc_multiply@cpp
  0003a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 745  :         if (u == nullptr)

  0003f	83 7d 08 00	 cmp	 DWORD PTR _u$[ebp], 0
  00043	75 20		 jne	 SHORT $LN2@PMC_Multip

; 746  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"u");

  00045	68 00 00 00 00	 push	 OFFSET $SG118223
  0004a	68 00 00 00 00	 push	 OFFSET $SG118224
  0004f	8d 4d b8	 lea	 ecx, DWORD PTR $T4[ebp]
  00052	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  00057	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  0005c	8d 45 b8	 lea	 eax, DWORD PTR $T4[ebp]
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@PMC_Multip:

; 747  :         if (v == nullptr)

  00065	83 7d 0c 00	 cmp	 DWORD PTR _v$[ebp], 0
  00069	75 20		 jne	 SHORT $LN3@PMC_Multip

; 748  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"v");

  0006b	68 00 00 00 00	 push	 OFFSET $SG118227
  00070	68 00 00 00 00	 push	 OFFSET $SG118228
  00075	8d 4d a0	 lea	 ecx, DWORD PTR $T3[ebp]
  00078	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0007d	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  00082	8d 4d a0	 lea	 ecx, DWORD PTR $T3[ebp]
  00085	51		 push	 ecx
  00086	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@PMC_Multip:

; 749  :         NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

  0008b	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  0008e	89 55 f0	 mov	 DWORD PTR _nu$[ebp], edx

; 750  :         NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

  00091	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  00094	89 45 ec	 mov	 DWORD PTR _nv$[ebp], eax

; 751  :         CheckNumber(nu);

  00097	8b 4d f0	 mov	 ecx, DWORD PTR _nu$[ebp]
  0009a	51		 push	 ecx
  0009b	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  000a0	83 c4 04	 add	 esp, 4

; 752  :         CheckNumber(nv);

  000a3	8b 55 ec	 mov	 edx, DWORD PTR _nv$[ebp]
  000a6	52		 push	 edx
  000a7	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  000ac	83 c4 04	 add	 esp, 4

; 753  :         ResourceHolderUINT root;

  000af	8d 4d d8	 lea	 ecx, DWORD PTR _root$[ebp]
  000b2	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000b7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 754  :         NUMBER_HEADER* w = PMC_Multiply_X_X_Imp(nu, nv);

  000be	8b 45 ec	 mov	 eax, DWORD PTR _nv$[ebp]
  000c1	50		 push	 eax
  000c2	8b 4d f0	 mov	 ecx, DWORD PTR _nu$[ebp]
  000c5	51		 push	 ecx
  000c6	e8 00 00 00 00	 call	 ?PMC_Multiply_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z ; Palmtree::Math::Core::Internal::PMC_Multiply_X_X_Imp
  000cb	83 c4 08	 add	 esp, 8
  000ce	89 45 d0	 mov	 DWORD PTR _w$[ebp], eax

; 755  :         root.HookNumber(w);

  000d1	8b 55 d0	 mov	 edx, DWORD PTR _w$[ebp]
  000d4	52		 push	 edx
  000d5	8d 4d d8	 lea	 ecx, DWORD PTR _root$[ebp]
  000d8	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 756  : #ifdef _DEBUG
; 757  :         CheckNumber(w);

  000dd	8b 45 d0	 mov	 eax, DWORD PTR _w$[ebp]
  000e0	50		 push	 eax
  000e1	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  000e6	83 c4 04	 add	 esp, 4

; 758  : #endif
; 759  :         root.UnlinkNumber(w);

  000e9	8b 4d d0	 mov	 ecx, DWORD PTR _w$[ebp]
  000ec	51		 push	 ecx
  000ed	8d 4d d8	 lea	 ecx, DWORD PTR _root$[ebp]
  000f0	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 760  :         return ((PMC_HANDLE_UINT)w);

  000f5	8b 55 d0	 mov	 edx, DWORD PTR _w$[ebp]
  000f8	89 55 9c	 mov	 DWORD PTR $T2[ebp], edx
  000fb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00102	8d 4d d8	 lea	 ecx, DWORD PTR _root$[ebp]
  00105	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0010a	8b 45 9c	 mov	 eax, DWORD PTR $T2[ebp]
$LN4@PMC_Multip:

; 761  :     }

  0010d	52		 push	 edx
  0010e	8b cd		 mov	 ecx, ebp
  00110	50		 push	 eax
  00111	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@PMC_Multip
  00117	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0011c	58		 pop	 eax
  0011d	5a		 pop	 edx
  0011e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00121	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00128	59		 pop	 ecx
  00129	5f		 pop	 edi
  0012a	83 c4 64	 add	 esp, 100		; 00000064H
  0012d	3b ec		 cmp	 ebp, esp
  0012f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00134	8b e5		 mov	 esp, ebp
  00136	5d		 pop	 ebp
  00137	c2 08 00	 ret	 8
  0013a	66 90		 npad	 2
$LN9@PMC_Multip:
  0013c	01 00 00 00	 DD	 1
  00140	00 00 00 00	 DD	 $LN8@PMC_Multip
$LN8@PMC_Multip:
  00144	d8 ff ff ff	 DD	 -40			; ffffffd8H
  00148	10 00 00 00	 DD	 16			; 00000010H
  0014c	00 00 00 00	 DD	 $LN6@PMC_Multip
$LN6@PMC_Multip:
  00150	72		 DB	 114			; 00000072H
  00151	6f		 DB	 111			; 0000006fH
  00152	6f		 DB	 111			; 0000006fH
  00153	74		 DB	 116			; 00000074H
  00154	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_Multiply_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_Multiply_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_Multiply_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_Multiply_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z ENDP ; Palmtree::Math::Core::Internal::PMC_Multiply_X_X
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
_TEXT	SEGMENT
$T2 = -92						; size = 4
$T3 = -88						; size = 24
$T4 = -64						; size = 24
_w$ = -40						; size = 4
_root$ = -32						; size = 16
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 8
?PMC_Multiply_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z PROC ; Palmtree::Math::Core::Internal::PMC_Multiply_X_L

; 659  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_Multiply_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	57		 push	 edi
  00015	8d 7d a4	 lea	 edi, DWORD PTR [ebp-92]
  00018	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	50		 push	 eax
  0002c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET __05528951_pmc_multiply@cpp
  0003a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 660  :         if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(v) * 8)

  0003f	33 c0		 xor	 eax, eax
  00041	74 20		 je	 SHORT $LN2@PMC_Multip

; 661  :         {
; 662  :             // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 663  :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_multiply.cpp;PMC_Multiply_X_L;1");

  00043	68 00 00 00 00	 push	 OFFSET $SG118183
  00048	68 00 00 00 00	 push	 OFFSET $SG118184
  0004d	8d 4d c0	 lea	 ecx, DWORD PTR $T4[ebp]
  00050	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00055	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0005a	8d 4d c0	 lea	 ecx, DWORD PTR $T4[ebp]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@PMC_Multip:

; 664  :         }
; 665  :         if (u == nullptr)

  00063	83 7d 08 00	 cmp	 DWORD PTR _u$[ebp], 0
  00067	75 20		 jne	 SHORT $LN3@PMC_Multip

; 666  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"u");

  00069	68 00 00 00 00	 push	 OFFSET $SG118187
  0006e	68 00 00 00 00	 push	 OFFSET $SG118188
  00073	8d 4d a8	 lea	 ecx, DWORD PTR $T3[ebp]
  00076	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0007b	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  00080	8d 55 a8	 lea	 edx, DWORD PTR $T3[ebp]
  00083	52		 push	 edx
  00084	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@PMC_Multip:

; 667  :         CheckNumber((NUMBER_HEADER*)u);

  00089	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  00092	83 c4 04	 add	 esp, 4

; 668  :         ResourceHolderUINT root;

  00095	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00098	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  0009d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 669  :         NUMBER_HEADER* w = PMC_Multiply_X_L_Imp((NUMBER_HEADER*)u, v);

  000a4	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp+4]
  000a7	51		 push	 ecx
  000a8	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  000ab	52		 push	 edx
  000ac	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 ?PMC_Multiply_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z ; Palmtree::Math::Core::Internal::PMC_Multiply_X_L_Imp
  000b5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b8	89 45 d8	 mov	 DWORD PTR _w$[ebp], eax

; 670  :         root.HookNumber(w);

  000bb	8b 4d d8	 mov	 ecx, DWORD PTR _w$[ebp]
  000be	51		 push	 ecx
  000bf	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  000c2	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 671  : #ifdef _DEBUG
; 672  :         CheckNumber(w);

  000c7	8b 55 d8	 mov	 edx, DWORD PTR _w$[ebp]
  000ca	52		 push	 edx
  000cb	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  000d0	83 c4 04	 add	 esp, 4

; 673  : #endif
; 674  :         root.UnlinkNumber(w);

  000d3	8b 45 d8	 mov	 eax, DWORD PTR _w$[ebp]
  000d6	50		 push	 eax
  000d7	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  000da	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 675  :         return ((PMC_HANDLE_UINT)w);

  000df	8b 4d d8	 mov	 ecx, DWORD PTR _w$[ebp]
  000e2	89 4d a4	 mov	 DWORD PTR $T2[ebp], ecx
  000e5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000ec	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  000ef	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  000f4	8b 45 a4	 mov	 eax, DWORD PTR $T2[ebp]
$LN4@PMC_Multip:

; 676  :     }

  000f7	52		 push	 edx
  000f8	8b cd		 mov	 ecx, ebp
  000fa	50		 push	 eax
  000fb	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@PMC_Multip
  00101	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00106	58		 pop	 eax
  00107	5a		 pop	 edx
  00108	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0010b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00112	59		 pop	 ecx
  00113	5f		 pop	 edi
  00114	83 c4 5c	 add	 esp, 92			; 0000005cH
  00117	3b ec		 cmp	 ebp, esp
  00119	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c2 0c 00	 ret	 12			; 0000000cH
$LN9@PMC_Multip:
  00124	01 00 00 00	 DD	 1
  00128	00 00 00 00	 DD	 $LN8@PMC_Multip
$LN8@PMC_Multip:
  0012c	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00130	10 00 00 00	 DD	 16			; 00000010H
  00134	00 00 00 00	 DD	 $LN6@PMC_Multip
$LN6@PMC_Multip:
  00138	72		 DB	 114			; 00000072H
  00139	6f		 DB	 111			; 0000006fH
  0013a	6f		 DB	 111			; 0000006fH
  0013b	74		 DB	 116			; 00000074H
  0013c	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_Multiply_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_Multiply_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_Multiply_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_Multiply_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z ENDP ; Palmtree::Math::Core::Internal::PMC_Multiply_X_L
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
_TEXT	SEGMENT
$T2 = -92						; size = 4
$T3 = -88						; size = 24
$T4 = -64						; size = 24
_w$ = -40						; size = 4
_root$ = -32						; size = 16
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 4
?PMC_Multiply_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z PROC ; Palmtree::Math::Core::Internal::PMC_Multiply_X_I

; 517  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_Multiply_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	57		 push	 edi
  00015	8d 7d a4	 lea	 edi, DWORD PTR [ebp-92]
  00018	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	50		 push	 eax
  0002c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET __05528951_pmc_multiply@cpp
  0003a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 518  :         if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)

  0003f	33 c0		 xor	 eax, eax
  00041	74 20		 je	 SHORT $LN2@PMC_Multip

; 519  :         {
; 520  :             // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 521  :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_multiply.cpp;PMC_Multiply_I_X;1");

  00043	68 00 00 00 00	 push	 OFFSET $SG118105
  00048	68 00 00 00 00	 push	 OFFSET $SG118106
  0004d	8d 4d c0	 lea	 ecx, DWORD PTR $T4[ebp]
  00050	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00055	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0005a	8d 4d c0	 lea	 ecx, DWORD PTR $T4[ebp]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@PMC_Multip:

; 522  :         }
; 523  :         if (u == nullptr)

  00063	83 7d 08 00	 cmp	 DWORD PTR _u$[ebp], 0
  00067	75 20		 jne	 SHORT $LN3@PMC_Multip

; 524  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"u");

  00069	68 00 00 00 00	 push	 OFFSET $SG118109
  0006e	68 00 00 00 00	 push	 OFFSET $SG118110
  00073	8d 4d a8	 lea	 ecx, DWORD PTR $T3[ebp]
  00076	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0007b	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  00080	8d 55 a8	 lea	 edx, DWORD PTR $T3[ebp]
  00083	52		 push	 edx
  00084	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@PMC_Multip:

; 525  :         CheckNumber((NUMBER_HEADER*)u);

  00089	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  00092	83 c4 04	 add	 esp, 4

; 526  :         ResourceHolderUINT root;

  00095	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00098	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  0009d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 527  :         NUMBER_HEADER* w = PMC_Multiply_X_I_Imp((NUMBER_HEADER*)u, v);

  000a4	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  000a7	51		 push	 ecx
  000a8	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  000ab	52		 push	 edx
  000ac	e8 00 00 00 00	 call	 ?PMC_Multiply_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_Multiply_X_I_Imp
  000b1	83 c4 08	 add	 esp, 8
  000b4	89 45 d8	 mov	 DWORD PTR _w$[ebp], eax

; 528  :         root.HookNumber(w);

  000b7	8b 45 d8	 mov	 eax, DWORD PTR _w$[ebp]
  000ba	50		 push	 eax
  000bb	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  000be	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 529  : #ifdef _DEBUG
; 530  :         CheckNumber(w);

  000c3	8b 4d d8	 mov	 ecx, DWORD PTR _w$[ebp]
  000c6	51		 push	 ecx
  000c7	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  000cc	83 c4 04	 add	 esp, 4

; 531  : #endif
; 532  :         root.UnlinkNumber(w);

  000cf	8b 55 d8	 mov	 edx, DWORD PTR _w$[ebp]
  000d2	52		 push	 edx
  000d3	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  000d6	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 533  :         return ((PMC_HANDLE_UINT)w);

  000db	8b 45 d8	 mov	 eax, DWORD PTR _w$[ebp]
  000de	89 45 a4	 mov	 DWORD PTR $T2[ebp], eax
  000e1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000e8	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  000eb	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  000f0	8b 45 a4	 mov	 eax, DWORD PTR $T2[ebp]
$LN4@PMC_Multip:

; 534  :     }

  000f3	52		 push	 edx
  000f4	8b cd		 mov	 ecx, ebp
  000f6	50		 push	 eax
  000f7	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@PMC_Multip
  000fd	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00102	58		 pop	 eax
  00103	5a		 pop	 edx
  00104	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00107	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010e	59		 pop	 ecx
  0010f	5f		 pop	 edi
  00110	83 c4 5c	 add	 esp, 92			; 0000005cH
  00113	3b ec		 cmp	 ebp, esp
  00115	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011a	8b e5		 mov	 esp, ebp
  0011c	5d		 pop	 ebp
  0011d	c2 08 00	 ret	 8
$LN9@PMC_Multip:
  00120	01 00 00 00	 DD	 1
  00124	00 00 00 00	 DD	 $LN8@PMC_Multip
$LN8@PMC_Multip:
  00128	e0 ff ff ff	 DD	 -32			; ffffffe0H
  0012c	10 00 00 00	 DD	 16			; 00000010H
  00130	00 00 00 00	 DD	 $LN6@PMC_Multip
$LN6@PMC_Multip:
  00134	72		 DB	 114			; 00000072H
  00135	6f		 DB	 111			; 0000006fH
  00136	6f		 DB	 111			; 0000006fH
  00137	74		 DB	 116			; 00000074H
  00138	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_Multiply_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_Multiply_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_Multiply_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_Multiply_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z ENDP ; Palmtree::Math::Core::Internal::PMC_Multiply_X_I
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
_TEXT	SEGMENT
$T2 = -92						; size = 4
$T3 = -88						; size = 24
$T4 = -64						; size = 24
_w$ = -40						; size = 4
_root$ = -32						; size = 16
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 8
_v$ = 16						; size = 4
?PMC_Multiply_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z PROC ; Palmtree::Math::Core::Internal::PMC_Multiply_L_X

; 639  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_Multiply_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	57		 push	 edi
  00015	8d 7d a4	 lea	 edi, DWORD PTR [ebp-92]
  00018	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	50		 push	 eax
  0002c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET __05528951_pmc_multiply@cpp
  0003a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 640  :         if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(u) * 8)

  0003f	33 c0		 xor	 eax, eax
  00041	74 20		 je	 SHORT $LN2@PMC_Multip

; 641  :         {
; 642  :             // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 643  :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_multiply.cpp;PMC_Multiply_L_X;1");

  00043	68 00 00 00 00	 push	 OFFSET $SG118164
  00048	68 00 00 00 00	 push	 OFFSET $SG118165
  0004d	8d 4d c0	 lea	 ecx, DWORD PTR $T4[ebp]
  00050	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00055	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0005a	8d 4d c0	 lea	 ecx, DWORD PTR $T4[ebp]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@PMC_Multip:

; 644  :         }
; 645  :         if (v == nullptr)

  00063	83 7d 10 00	 cmp	 DWORD PTR _v$[ebp], 0
  00067	75 20		 jne	 SHORT $LN3@PMC_Multip

; 646  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"v");

  00069	68 00 00 00 00	 push	 OFFSET $SG118168
  0006e	68 00 00 00 00	 push	 OFFSET $SG118169
  00073	8d 4d a8	 lea	 ecx, DWORD PTR $T3[ebp]
  00076	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0007b	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  00080	8d 55 a8	 lea	 edx, DWORD PTR $T3[ebp]
  00083	52		 push	 edx
  00084	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@PMC_Multip:

; 647  :         CheckNumber((NUMBER_HEADER*)v);

  00089	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  00092	83 c4 04	 add	 esp, 4

; 648  :         ResourceHolderUINT root;

  00095	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00098	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  0009d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 649  :         NUMBER_HEADER* w = PMC_Multiply_X_L_Imp((NUMBER_HEADER*)v, u);

  000a4	8b 4d 0c	 mov	 ecx, DWORD PTR _u$[ebp+4]
  000a7	51		 push	 ecx
  000a8	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  000ab	52		 push	 edx
  000ac	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 ?PMC_Multiply_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z ; Palmtree::Math::Core::Internal::PMC_Multiply_X_L_Imp
  000b5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b8	89 45 d8	 mov	 DWORD PTR _w$[ebp], eax

; 650  :         root.HookNumber(w);

  000bb	8b 4d d8	 mov	 ecx, DWORD PTR _w$[ebp]
  000be	51		 push	 ecx
  000bf	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  000c2	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 651  : #ifdef _DEBUG
; 652  :         CheckNumber(w);

  000c7	8b 55 d8	 mov	 edx, DWORD PTR _w$[ebp]
  000ca	52		 push	 edx
  000cb	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  000d0	83 c4 04	 add	 esp, 4

; 653  : #endif
; 654  :         root.UnlinkNumber(w);

  000d3	8b 45 d8	 mov	 eax, DWORD PTR _w$[ebp]
  000d6	50		 push	 eax
  000d7	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  000da	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 655  :         return ((PMC_HANDLE_UINT)w);

  000df	8b 4d d8	 mov	 ecx, DWORD PTR _w$[ebp]
  000e2	89 4d a4	 mov	 DWORD PTR $T2[ebp], ecx
  000e5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000ec	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  000ef	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  000f4	8b 45 a4	 mov	 eax, DWORD PTR $T2[ebp]
$LN4@PMC_Multip:

; 656  :     }

  000f7	52		 push	 edx
  000f8	8b cd		 mov	 ecx, ebp
  000fa	50		 push	 eax
  000fb	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@PMC_Multip
  00101	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00106	58		 pop	 eax
  00107	5a		 pop	 edx
  00108	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0010b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00112	59		 pop	 ecx
  00113	5f		 pop	 edi
  00114	83 c4 5c	 add	 esp, 92			; 0000005cH
  00117	3b ec		 cmp	 ebp, esp
  00119	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c2 0c 00	 ret	 12			; 0000000cH
$LN9@PMC_Multip:
  00124	01 00 00 00	 DD	 1
  00128	00 00 00 00	 DD	 $LN8@PMC_Multip
$LN8@PMC_Multip:
  0012c	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00130	10 00 00 00	 DD	 16			; 00000010H
  00134	00 00 00 00	 DD	 $LN6@PMC_Multip
$LN6@PMC_Multip:
  00138	72		 DB	 114			; 00000072H
  00139	6f		 DB	 111			; 0000006fH
  0013a	6f		 DB	 111			; 0000006fH
  0013b	74		 DB	 116			; 00000074H
  0013c	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_Multiply_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_Multiply_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_Multiply_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_Multiply_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z ENDP ; Palmtree::Math::Core::Internal::PMC_Multiply_L_X
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
_TEXT	SEGMENT
$T2 = -92						; size = 4
$T3 = -88						; size = 24
$T4 = -64						; size = 24
_w$ = -40						; size = 4
_root$ = -32						; size = 16
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 4
?PMC_Multiply_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z PROC ; Palmtree::Math::Core::Internal::PMC_Multiply_I_X

; 497  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_Multiply_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	57		 push	 edi
  00015	8d 7d a4	 lea	 edi, DWORD PTR [ebp-92]
  00018	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	50		 push	 eax
  0002c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET __05528951_pmc_multiply@cpp
  0003a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 498  :         if (__UNIT_TYPE_BIT_COUNT < sizeof(u) * 8)

  0003f	33 c0		 xor	 eax, eax
  00041	74 20		 je	 SHORT $LN2@PMC_Multip

; 499  :         {
; 500  :             // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 501  :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_multiply.cpp;PMC_Multiply_I_X;1");

  00043	68 00 00 00 00	 push	 OFFSET $SG118082
  00048	68 00 00 00 00	 push	 OFFSET $SG118083
  0004d	8d 4d c0	 lea	 ecx, DWORD PTR $T4[ebp]
  00050	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00055	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0005a	8d 4d c0	 lea	 ecx, DWORD PTR $T4[ebp]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@PMC_Multip:

; 502  :         }
; 503  :         if (v == nullptr)

  00063	83 7d 0c 00	 cmp	 DWORD PTR _v$[ebp], 0
  00067	75 20		 jne	 SHORT $LN3@PMC_Multip

; 504  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"v");

  00069	68 00 00 00 00	 push	 OFFSET $SG118090
  0006e	68 00 00 00 00	 push	 OFFSET $SG118091
  00073	8d 4d a8	 lea	 ecx, DWORD PTR $T3[ebp]
  00076	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0007b	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  00080	8d 55 a8	 lea	 edx, DWORD PTR $T3[ebp]
  00083	52		 push	 edx
  00084	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@PMC_Multip:

; 505  :         CheckNumber((NUMBER_HEADER*)v);

  00089	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  00092	83 c4 04	 add	 esp, 4

; 506  :         ResourceHolderUINT root;

  00095	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00098	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  0009d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 507  :         NUMBER_HEADER* w = PMC_Multiply_X_I_Imp((NUMBER_HEADER*)v, u);

  000a4	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  000a7	51		 push	 ecx
  000a8	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  000ab	52		 push	 edx
  000ac	e8 00 00 00 00	 call	 ?PMC_Multiply_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_Multiply_X_I_Imp
  000b1	83 c4 08	 add	 esp, 8
  000b4	89 45 d8	 mov	 DWORD PTR _w$[ebp], eax

; 508  :         root.HookNumber(w);

  000b7	8b 45 d8	 mov	 eax, DWORD PTR _w$[ebp]
  000ba	50		 push	 eax
  000bb	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  000be	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 509  : #ifdef _DEBUG
; 510  :         CheckNumber(w);

  000c3	8b 4d d8	 mov	 ecx, DWORD PTR _w$[ebp]
  000c6	51		 push	 ecx
  000c7	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  000cc	83 c4 04	 add	 esp, 4

; 511  : #endif
; 512  :         root.UnlinkNumber(w);

  000cf	8b 55 d8	 mov	 edx, DWORD PTR _w$[ebp]
  000d2	52		 push	 edx
  000d3	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  000d6	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 513  :         return ((PMC_HANDLE_UINT)w);

  000db	8b 45 d8	 mov	 eax, DWORD PTR _w$[ebp]
  000de	89 45 a4	 mov	 DWORD PTR $T2[ebp], eax
  000e1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000e8	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  000eb	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  000f0	8b 45 a4	 mov	 eax, DWORD PTR $T2[ebp]
$LN4@PMC_Multip:

; 514  :     }

  000f3	52		 push	 edx
  000f4	8b cd		 mov	 ecx, ebp
  000f6	50		 push	 eax
  000f7	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@PMC_Multip
  000fd	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00102	58		 pop	 eax
  00103	5a		 pop	 edx
  00104	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00107	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010e	59		 pop	 ecx
  0010f	5f		 pop	 edi
  00110	83 c4 5c	 add	 esp, 92			; 0000005cH
  00113	3b ec		 cmp	 ebp, esp
  00115	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011a	8b e5		 mov	 esp, ebp
  0011c	5d		 pop	 ebp
  0011d	c2 08 00	 ret	 8
$LN9@PMC_Multip:
  00120	01 00 00 00	 DD	 1
  00124	00 00 00 00	 DD	 $LN8@PMC_Multip
$LN8@PMC_Multip:
  00128	e0 ff ff ff	 DD	 -32			; ffffffe0H
  0012c	10 00 00 00	 DD	 16			; 00000010H
  00130	00 00 00 00	 DD	 $LN6@PMC_Multip
$LN6@PMC_Multip:
  00134	72		 DB	 114			; 00000072H
  00135	6f		 DB	 111			; 0000006fH
  00136	6f		 DB	 111			; 0000006fH
  00137	74		 DB	 116			; 00000074H
  00138	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_Multiply_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_Multiply_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_Multiply_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_Multiply_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z ENDP ; Palmtree::Math::Core::Internal::PMC_Multiply_I_X
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
_TEXT	SEGMENT
_feature$ = 8						; size = 4
?Initialize_Multiply@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z PROC ; Palmtree::Math::Core::Internal::Initialize_Multiply

; 764  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __05528951_pmc_multiply@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 765  :         if (feature->PROCESSOR_FEATURE_ADX && feature->PROCESSOR_FEATURE_BMI2)

  0000d	8b 45 08	 mov	 eax, DWORD PTR _feature$[ebp]
  00010	8b 08		 mov	 ecx, DWORD PTR [eax]
  00012	d1 e9		 shr	 ecx, 1
  00014	83 e1 01	 and	 ecx, 1
  00017	74 2d		 je	 SHORT $LN2@Initialize
  00019	8b 55 08	 mov	 edx, DWORD PTR _feature$[ebp]
  0001c	8b 02		 mov	 eax, DWORD PTR [edx]
  0001e	c1 e8 03	 shr	 eax, 3
  00021	83 e0 01	 and	 eax, 1
  00024	74 20		 je	 SHORT $LN2@Initialize

; 766  :         {
; 767  :             fp_Multiply_X_1W = Multiply_X_1W_using_MULX_ADCX;

  00026	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?fp_Multiply_X_1W@Internal@Core@Math@Palmtree@@3P6AXPAIII0@ZA, OFFSET ?Multiply_X_1W_using_MULX_ADCX@Internal@Core@Math@Palmtree@@YAXPAIII0@Z ; Palmtree::Math::Core::Internal::Multiply_X_1W_using_MULX_ADCX

; 768  :             fp_Multiply_X_2W = Multiply_X_2W_using_MULX_ADCX;

  00030	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?fp_Multiply_X_2W@Internal@Core@Math@Palmtree@@3P6AXPAIIII0@ZA, OFFSET ?Multiply_X_2W_using_MULX_ADCX@Internal@Core@Math@Palmtree@@YAXPAIIII0@Z ; Palmtree::Math::Core::Internal::Multiply_X_2W_using_MULX_ADCX

; 769  :             fp_Multiply_X_X = Multiply_X_X_using_MULX_ADCX;

  0003a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?fp_Multiply_X_X@Internal@Core@Math@Palmtree@@3P6AXPAII0I0@ZA, OFFSET ?Multiply_X_X_using_MULX_ADCX@Internal@Core@Math@Palmtree@@YAXPAII0I0@Z ; Palmtree::Math::Core::Internal::Multiply_X_X_using_MULX_ADCX

; 770  :         }
; 771  :         else

  00044	eb 1e		 jmp	 SHORT $LN3@Initialize
$LN2@Initialize:

; 772  :         {
; 773  :             fp_Multiply_X_1W = Multiply_X_1W_using_MUL_ADC;

  00046	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?fp_Multiply_X_1W@Internal@Core@Math@Palmtree@@3P6AXPAIII0@ZA, OFFSET ?Multiply_X_1W_using_MUL_ADC@Internal@Core@Math@Palmtree@@YAXPAIII0@Z ; Palmtree::Math::Core::Internal::Multiply_X_1W_using_MUL_ADC

; 774  :             fp_Multiply_X_2W = Multiply_X_2W_using_MUL_ADC;

  00050	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?fp_Multiply_X_2W@Internal@Core@Math@Palmtree@@3P6AXPAIIII0@ZA, OFFSET ?Multiply_X_2W_using_MUL_ADC@Internal@Core@Math@Palmtree@@YAXPAIIII0@Z ; Palmtree::Math::Core::Internal::Multiply_X_2W_using_MUL_ADC

; 775  :             fp_Multiply_X_X = Multiply_X_X_using_MUL_ADC;

  0005a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?fp_Multiply_X_X@Internal@Core@Math@Palmtree@@3P6AXPAII0I0@ZA, OFFSET ?Multiply_X_X_using_MUL_ADC@Internal@Core@Math@Palmtree@@YAXPAII0I0@Z ; Palmtree::Math::Core::Internal::Multiply_X_X_using_MUL_ADC
$LN3@Initialize:

; 776  :         }
; 777  :         return (PMC_STATUS_OK);

  00064	33 c0		 xor	 eax, eax

; 778  :     }

  00066	3b ec		 cmp	 ebp, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
?Initialize_Multiply@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ENDP ; Palmtree::Math::Core::Internal::Initialize_Multiply
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
_TEXT	SEGMENT
tv129 = -60						; size = 4
$T2 = -56						; size = 4
_w$3 = -52						; size = 4
_w_bit_count$4 = -48					; size = 4
_v_bit_count$5 = -44					; size = 4
_u_bit_count$6 = -40					; size = 4
_root$7 = -32						; size = 16
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 4
?PMC_Multiply_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z PROC ; Palmtree::Math::Core::Internal::PMC_Multiply_X_I_Imp

; 433  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_Multiply_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 30	 sub	 esp, 48			; 00000030H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8d 7d c4	 lea	 edi, DWORD PTR [ebp-60]
  00019	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c5		 xor	 eax, ebp
  0002c	50		 push	 eax
  0002d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00030	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00036	b9 00 00 00 00	 mov	 ecx, OFFSET __05528951_pmc_multiply@cpp
  0003b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 434  :         if (u->IS_ZERO)

  00040	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00043	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00046	83 e1 01	 and	 ecx, 1
  00049	74 0f		 je	 SHORT $LN2@PMC_Multip

; 435  :         {
; 436  :             // u が 0 である場合
; 437  : 
; 438  :             // v の値にかかわらず 0 を返す。
; 439  :             return (&number_zero);

  0004b	b8 00 00 00 00	 mov	 eax, OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  00050	e9 1e 01 00 00	 jmp	 $LN1@PMC_Multip
  00055	e9 19 01 00 00	 jmp	 $LN1@PMC_Multip
$LN2@PMC_Multip:

; 440  :         }
; 441  :         else if (u->IS_ONE)

  0005a	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  0005d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00060	d1 e8		 shr	 eax, 1
  00062	83 e0 01	 and	 eax, 1
  00065	74 28		 je	 SHORT $LN4@PMC_Multip

; 442  :         {
; 443  :             // u が 1 である場合
; 444  :             if (v == 0)

  00067	83 7d 0c 00	 cmp	 DWORD PTR _v$[ebp], 0
  0006b	75 0c		 jne	 SHORT $LN6@PMC_Multip

; 445  :             {
; 446  :                 // v が 0 である場合
; 447  : 
; 448  :                 //  0  を返す。
; 449  :                 return (&number_zero);

  0006d	b8 00 00 00 00	 mov	 eax, OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  00072	e9 fc 00 00 00	 jmp	 $LN1@PMC_Multip

; 450  :             }
; 451  :             else

  00077	eb 11		 jmp	 SHORT $LN7@PMC_Multip
$LN6@PMC_Multip:

; 452  :             {
; 453  :                 // y が 0 ではない場合
; 454  : 
; 455  :                 // 乗算結果は v に等しいため、v の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 456  :                 return (From_I_Imp(v));

  00079	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  0007c	51		 push	 ecx
  0007d	e8 00 00 00 00	 call	 ?From_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@I@Z ; Palmtree::Math::Core::Internal::From_I_Imp
  00082	83 c4 04	 add	 esp, 4
  00085	e9 e9 00 00 00	 jmp	 $LN1@PMC_Multip
$LN7@PMC_Multip:

; 457  :             }
; 458  :         }
; 459  :         else

  0008a	e9 e4 00 00 00	 jmp	 $LN1@PMC_Multip
$LN4@PMC_Multip:

; 460  :         {
; 461  :             // u が 0 と 1 のどちらでもない場合
; 462  : 
; 463  :             if (v == 0)

  0008f	83 7d 0c 00	 cmp	 DWORD PTR _v$[ebp], 0
  00093	75 0f		 jne	 SHORT $LN8@PMC_Multip

; 464  :             {
; 465  :                 // v が 0 である場合
; 466  : 
; 467  :                 //  0  を返す。
; 468  :                 return (&number_zero);

  00095	b8 00 00 00 00	 mov	 eax, OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  0009a	e9 d4 00 00 00	 jmp	 $LN1@PMC_Multip
  0009f	e9 cf 00 00 00	 jmp	 $LN1@PMC_Multip
$LN8@PMC_Multip:

; 469  :             }
; 470  :             else if (v == 1)

  000a4	83 7d 0c 01	 cmp	 DWORD PTR _v$[ebp], 1
  000a8	75 16		 jne	 SHORT $LN10@PMC_Multip

; 471  :             {
; 472  :                 // v が 1 である場合
; 473  : 
; 474  :                 // 乗算結果は u に等しいため、u の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 475  :                 return (DuplicateNumber(u));

  000aa	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  000ad	52		 push	 edx
  000ae	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  000b3	83 c4 04	 add	 esp, 4
  000b6	e9 b8 00 00 00	 jmp	 $LN1@PMC_Multip

; 476  :             }
; 477  :             else

  000bb	e9 b3 00 00 00	 jmp	 $LN1@PMC_Multip
$LN10@PMC_Multip:

; 478  :             {
; 479  :                 // u と v がともに 0 、1 のどちらでもない場合
; 480  : 
; 481  :                 // u と v の積を計算する
; 482  :                 ResourceHolderUINT root;

  000c0	8d 4d e0	 lea	 ecx, DWORD PTR _root$7[ebp]
  000c3	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000c8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 483  :                 __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

  000cf	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  000d2	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000d5	89 4d d8	 mov	 DWORD PTR _u_bit_count$6[ebp], ecx

; 484  :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

  000d8	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  000db	52		 push	 edx
  000dc	e8 00 00 00 00	 call	 __LZCNT_ALT_32
  000e1	83 c4 04	 add	 esp, 4
  000e4	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  000e9	2b c8		 sub	 ecx, eax
  000eb	89 4d d4	 mov	 DWORD PTR _v_bit_count$5[ebp], ecx

; 485  :                 __UNIT_TYPE w_bit_count = u_bit_count + v_bit_count;

  000ee	8b 55 d8	 mov	 edx, DWORD PTR _u_bit_count$6[ebp]
  000f1	03 55 d4	 add	 edx, DWORD PTR _v_bit_count$5[ebp]
  000f4	89 55 d0	 mov	 DWORD PTR _w_bit_count$4[ebp], edx

; 486  :                 NUMBER_HEADER* w = root.AllocateNumber(w_bit_count);

  000f7	8b 45 d0	 mov	 eax, DWORD PTR _w_bit_count$4[ebp]
  000fa	50		 push	 eax
  000fb	8d 4d e0	 lea	 ecx, DWORD PTR _root$7[ebp]
  000fe	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  00103	89 45 cc	 mov	 DWORD PTR _w$3[ebp], eax

; 487  :                 (*fp_Multiply_X_1W)(u->BLOCK, u->UNIT_WORD_COUNT, v, w->BLOCK);

  00106	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?fp_Multiply_X_1W@Internal@Core@Math@Palmtree@@3P6AXPAIII0@ZA
  0010c	89 4d c4	 mov	 DWORD PTR tv129[ebp], ecx
  0010f	8b f4		 mov	 esi, esp
  00111	8b 55 cc	 mov	 edx, DWORD PTR _w$3[ebp]
  00114	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00117	50		 push	 eax
  00118	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  0011b	51		 push	 ecx
  0011c	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  0011f	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00122	50		 push	 eax
  00123	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  00126	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00129	52		 push	 edx
  0012a	ff 55 c4	 call	 DWORD PTR tv129[ebp]
  0012d	83 c4 10	 add	 esp, 16			; 00000010H
  00130	3b f4		 cmp	 esi, esp
  00132	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 488  :                 root.CheckNumber(w);

  00137	8b 45 cc	 mov	 eax, DWORD PTR _w$3[ebp]
  0013a	50		 push	 eax
  0013b	8d 4d e0	 lea	 ecx, DWORD PTR _root$7[ebp]
  0013e	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 489  :                 CommitNumber(w);

  00143	8b 4d cc	 mov	 ecx, DWORD PTR _w$3[ebp]
  00146	51		 push	 ecx
  00147	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  0014c	83 c4 04	 add	 esp, 4

; 490  :                 root.UnlinkNumber(w);

  0014f	8b 55 cc	 mov	 edx, DWORD PTR _w$3[ebp]
  00152	52		 push	 edx
  00153	8d 4d e0	 lea	 ecx, DWORD PTR _root$7[ebp]
  00156	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 491  :                 return (w);

  0015b	8b 45 cc	 mov	 eax, DWORD PTR _w$3[ebp]
  0015e	89 45 c8	 mov	 DWORD PTR $T2[ebp], eax
  00161	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00168	8d 4d e0	 lea	 ecx, DWORD PTR _root$7[ebp]
  0016b	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00170	8b 45 c8	 mov	 eax, DWORD PTR $T2[ebp]
$LN1@PMC_Multip:

; 492  :             }
; 493  :         }
; 494  :     }

  00173	52		 push	 edx
  00174	8b cd		 mov	 ecx, ebp
  00176	50		 push	 eax
  00177	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN17@PMC_Multip
  0017d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00182	58		 pop	 eax
  00183	5a		 pop	 edx
  00184	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00187	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0018e	59		 pop	 ecx
  0018f	5f		 pop	 edi
  00190	5e		 pop	 esi
  00191	83 c4 3c	 add	 esp, 60			; 0000003cH
  00194	3b ec		 cmp	 ebp, esp
  00196	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0019b	8b e5		 mov	 esp, ebp
  0019d	5d		 pop	 ebp
  0019e	c3		 ret	 0
  0019f	90		 npad	 1
$LN17@PMC_Multip:
  001a0	01 00 00 00	 DD	 1
  001a4	00 00 00 00	 DD	 $LN16@PMC_Multip
$LN16@PMC_Multip:
  001a8	e0 ff ff ff	 DD	 -32			; ffffffe0H
  001ac	10 00 00 00	 DD	 16			; 00000010H
  001b0	00 00 00 00	 DD	 $LN14@PMC_Multip
$LN14@PMC_Multip:
  001b4	72		 DB	 114			; 00000072H
  001b5	6f		 DB	 111			; 0000006fH
  001b6	6f		 DB	 111			; 0000006fH
  001b7	74		 DB	 116			; 00000074H
  001b8	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_Multiply_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _root$7[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_Multiply_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_Multiply_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_Multiply_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z ENDP ; Palmtree::Math::Core::Internal::PMC_Multiply_X_I_Imp
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.cpp
_TEXT	SEGMENT
tv70 = -4						; size = 4
_u$ = 8							; size = 4
_u_count$ = 12						; size = 4
_v$ = 16						; size = 4
_v_count$ = 20						; size = 4
_w$ = 24						; size = 4
?Multiply_X_X_Imp@Internal@Core@Math@Palmtree@@YAXPAII0I0@Z PROC ; Palmtree::Math::Core::Internal::Multiply_X_X_Imp

; 41   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	b9 00 00 00 00	 mov	 ecx, OFFSET __05528951_pmc_multiply@cpp
  00011	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 42   :         (*fp_Multiply_X_X)(u, u_count, v, v_count, w);

  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ?fp_Multiply_X_X@Internal@Core@Math@Palmtree@@3P6AXPAII0I0@ZA
  0001b	89 45 fc	 mov	 DWORD PTR tv70[ebp], eax
  0001e	8b f4		 mov	 esi, esp
  00020	8b 4d 18	 mov	 ecx, DWORD PTR _w$[ebp]
  00023	51		 push	 ecx
  00024	8b 55 14	 mov	 edx, DWORD PTR _v_count$[ebp]
  00027	52		 push	 edx
  00028	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _u_count$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00033	52		 push	 edx
  00034	ff 55 fc	 call	 DWORD PTR tv70[ebp]
  00037	83 c4 14	 add	 esp, 20			; 00000014H
  0003a	3b f4		 cmp	 esi, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 43   :     }

  00041	5e		 pop	 esi
  00042	83 c4 04	 add	 esp, 4
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
?Multiply_X_X_Imp@Internal@Core@Math@Palmtree@@YAXPAII0I0@Z ENDP ; Palmtree::Math::Core::Internal::Multiply_X_X_Imp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 18		 push	 24			; 00000018H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException, COMDAT
; _this$ = ecx

; 295  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 296  :         }

  00047	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException, COMDAT
; _this$ = ecx

; 291  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 290  :             : Exception(p)

  00037	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 291  :         {

  0004a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@

; 292  :         }

  00053	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00060	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00067	59		 pop	 ecx
  00068	83 c4 10	 add	 esp, 16			; 00000010H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
_data$ = 12						; size = 4
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException, COMDAT
; _this$ = ecx

; 286  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 285  :             : Exception(PMC_STATUS_INTERNAL_ERROR, message, data)

  00037	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _message$[ebp]
  0003e	51		 push	 ecx
  0003f	68 00 ff ff ff	 push	 -256			; ffffff00H
  00044	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 286  :         {

  00053	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00056	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@

; 287  :         }

  0005c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00063	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00066	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00069	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00070	59		 pop	 ecx
  00071	83 c4 10	 add	 esp, 16			; 00000010H
  00074	3b ec		 cmp	 ebp, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 18		 push	 24			; 00000018H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException, COMDAT
; _this$ = ecx

; 124  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 125  :         }

  00047	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException, COMDAT
; _this$ = ecx

; 120  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 119  :             : Exception(p)

  00037	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 120  :         {

  0004a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@

; 121  :         }

  00053	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00060	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00067	59		 pop	 ecx
  00068	83 c4 10	 add	 esp, 16			; 00000010H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
_param_name$ = 12					; size = 4
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException, COMDAT
; _this$ = ecx

; 115  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 114  :             : Exception(PMC_STATUS_ARGUMENT_NULL_ERROR, message, param_name)

  00037	8b 45 0c	 mov	 eax, DWORD PTR _param_name$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _message$[ebp]
  0003e	51		 push	 ecx
  0003f	6a fe		 push	 -2			; fffffffeH
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00049	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 115  :         {

  00050	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00053	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@

; 116  :         }

  00059	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00060	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00063	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00066	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006d	59		 pop	 ecx
  0006e	83 c4 10	 add	 esp, 16			; 00000010H
  00071	3b ec		 cmp	 ebp, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 18		 push	 24			; 00000018H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ PROC	; Palmtree::Math::Core::Internal::Exception::~Exception, COMDAT
; _this$ = ecx

; 70   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 71   :         }

  00047	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ENDP	; Palmtree::Math::Core::Internal::Exception::~Exception
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT
; _this$ = ecx

; 62   :         Exception(const Exception& p) noexcept(true)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00049	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 63   :         {
; 64   :             _code = p._code;

  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00055	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00058	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 65   :             _message = p._message;

  0005b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00061	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00064	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 66   :             _data = p._data;

  00067	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  0006d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00070	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 67   :         }

  00073	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0007a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0007d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00080	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00087	59		 pop	 ecx
  00088	83 c4 10	 add	 esp, 16			; 00000010H
  0008b	3b ec		 cmp	 ebp, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_code$ = 8						; size = 4
_message$ = 12						; size = 4
_data$ = 16						; size = 4
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT
; _this$ = ecx

; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00049	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 55   :         {
; 56   :             _code = code;

  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	8b 55 08	 mov	 edx, DWORD PTR _code$[ebp]
  00055	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 57   :             _message = message;

  00058	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	8b 4d 0c	 mov	 ecx, DWORD PTR _message$[ebp]
  0005e	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 58   :             _data = data;

  00061	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00064	8b 45 10	 mov	 eax, DWORD PTR _data$[ebp]
  00067	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 59   :         }

  0006a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00071	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00077	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007e	59		 pop	 ecx
  0007f	83 c4 10	 add	 esp, 16			; 00000010H
  00082	3b ec		 cmp	 ebp, esp
  00084	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 90   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __9BB4E194_vcruntime_exception@h
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 91   :         return _Data._What ? _Data._What : "Unknown exception";

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00028	74 0b		 je	 SHORT $LN3@what
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00030	89 55 f8	 mov	 DWORD PTR tv69[ebp], edx
  00033	eb 07		 jmp	 SHORT $LN4@what
$LN3@what:
  00035	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
$LN4@what:
  0003c	8b 45 f8	 mov	 eax, DWORD PTR tv69[ebp]

; 92   :     }

  0003f	83 c4 08	 add	 esp, 8
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 85   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1exception@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __9BB4E194_vcruntime_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 86   :         __std_exception_destroy(&_Data);

  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	83 c1 04	 add	 ecx, 4
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 ___std_exception_destroy
  0004c	83 c4 04	 add	 esp, 4

; 87   :     }

  0004f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00052	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00059	59		 pop	 ecx
  0005a	83 c4 10	 add	 esp, 16			; 00000010H
  0005d	3b ec		 cmp	 ebp, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1exception@std@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1exception@std@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0exception@std@@QAE@XZ PROC				; std::exception::exception, COMDAT
; _this$ = ecx

; 50   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0exception@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __9BB4E194_vcruntime_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 49   :         : _Data()

  00040	33 c9		 xor	 ecx, ecx
  00042	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00045	83 c2 04	 add	 edx, 4
  00048	89 0a		 mov	 DWORD PTR [edx], ecx
  0004a	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 51   :     }

  0004d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	83 c4 10	 add	 esp, 16			; 00000010H
  0005e	3b ec		 cmp	 ebp, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0exception@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0exception@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0exception@std@@QAE@XZ ENDP				; std::exception::exception
END
