; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_shift.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__2088847F_corecrt_memory@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__E9FFF232_guiddef@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__12AD47BB_winuser@h DB 01H
__B4B40122_winioctl@h DB 01H
__A73354DD_stdlib@h DB 01H
__25F3FB34_propidl@h DB 01H
__A40E48B8_oleauto@h DB 01H
__86261D59_stralign@h DB 01H
__2CC6E67D_corecrt_stdio_config@h DB 01H
__41381B41_corecrt_wconio@h DB 01H
__F0CC4AC4_corecrt_wio@h DB 01H
__05476D76_corecrt_wstdio@h DB 01H
__C0802A2B_corecrt_wtime@h DB 01H
__A40A425D_stat@h DB 01H
__5A74375D_wchar@h DB 01H
__6BC0FD35_vcruntime_new@h DB 01H
__77F53984_cstddef DB 01H
__188180DA_corecrt_math@h DB 01H
__D23EE329_cstdlib DB 01H
__5ECFF36E_type_traits DB 01H
__331E732B_malloc@h DB 01H
__9BB4E194_vcruntime_exception@h DB 01H
__7949CB39_exception DB 01H
__802FEEC0_pmc_exception@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__1AB12E38_pmc_resourceholder@h DB 01H
__746E1CEC_xmmintrin@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__BCD96457_pmc_shift@cpp DB 01H
msvcjmc	ENDS
CONST	SEGMENT
$SG117970 DB	'p', 00H, 'm', 00H, 'c', 00H, '_', 00H, 's', 00H, 'h', 00H
	DB	'i', 00H, 'f', 00H, 't', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p'
	DB	00H, ';', 00H, 'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'R', 00H
	DB	'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, 'S', 00H, 'h', 00H, 'i'
	DB	00H, 'f', 00H, 't', 00H, '_', 00H, 'X', 00H, '_', 00H, 'I', 00H
	DB	';', 00H, '1', 00H, 00H, 00H
	ORG $+2
$SG117971 DB	088H, 'N', 01fH, 'gW0f0D0j0D0', 0b3H, '0', 0fcH, '0', 0c9H
	DB	'0k00RT', 090H, 'W0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG117978 DB	'u', 00H, 00H, 00H
$SG117979 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
	ORG $+2
$SG117995 DB	'p', 00H, 'm', 00H, 'c', 00H, '_', 00H, 'a', 00H, 'd', 00H
	DB	'd', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, ';', 00H, 'P'
	DB	00H, 'M', 00H, 'C', 00H, '_', 00H, 'L', 00H, 'e', 00H, 'f', 00H
	DB	't', 00H, 'S', 00H, 'h', 00H, 'i', 00H, 'f', 00H, 't', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'I', 00H, ';', 00H, '1', 00H, 00H, 00H
$SG117996 DB	088H, 'N', 01fH, 'gW0f0D0j0D0', 0b3H, '0', 0fcH, '0', 0c9H
	DB	'0k00RT', 090H, 'W0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG117999 DB	'u', 00H, 00H, 00H
$SG118000 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
CONST	ENDS
PUBLIC	??0exception@std@@QAE@XZ			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ; Palmtree::Math::Core::Internal::Exception::Exception
PUBLIC	??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
PUBLIC	??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
PUBLIC	??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor'
PUBLIC	??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
PUBLIC	??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
PUBLIC	??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
PUBLIC	??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor'
PUBLIC	??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
PUBLIC	??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
PUBLIC	??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
PUBLIC	??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor'
PUBLIC	?RightShift_Imp@Internal@Core@Math@Palmtree@@YAXPAIII0H@Z ; Palmtree::Math::Core::Internal::RightShift_Imp
PUBLIC	?LeftShift_Imp@Internal@Core@Math@Palmtree@@YAXPAIII0H@Z ; Palmtree::Math::Core::Internal::LeftShift_Imp
PUBLIC	?Initialize_Shift@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ; Palmtree::Math::Core::Internal::Initialize_Shift
PUBLIC	?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z ; Palmtree::Math::Core::Internal::PMC_RightShift_X_I
PUBLIC	?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z ; Palmtree::Math::Core::Internal::PMC_LeftShift_X_I
PUBLIC	__JustMyCode_Default
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7Exception@Internal@Core@Math@Palmtree@@6B@	; Palmtree::Math::Core::Internal::Exception::`vftable'
PUBLIC	??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`vftable'
PUBLIC	??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`vftable'
PUBLIC	__TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
PUBLIC	__CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InternalErrorException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	??_R0?AVException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::Exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	__TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
PUBLIC	__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Exception@Internal@Core@Math@Palmtree@@6B@	; Palmtree::Math::Core::Internal::Exception::`RTTI Complete Object Locator'
PUBLIC	??_R3Exception@Internal@Core@Math@Palmtree@@8	; Palmtree::Math::Core::Internal::Exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Exception@Internal@Core@Math@Palmtree@@8	; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EN@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,77)'
PUBLIC	??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Complete Object Locator'
PUBLIC	??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Complete Object Locator'
PUBLIC	??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_EException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::Exception::`vector deleting destructor'
EXTRN	??_EArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::`vector deleting destructor'
EXTRN	??_EInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::InternalErrorException::`vector deleting destructor'
EXTRN	?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z:PROC ; Palmtree::Math::Core::Internal::CommitNumber
EXTRN	?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z:PROC ; Palmtree::Math::Core::Internal::CheckNumber
EXTRN	?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z:PROC ; Palmtree::Math::Core::Internal::DuplicateNumber
EXTRN	??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
EXTRN	??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
EXTRN	?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
EXTRN	?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber
EXTRN	?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber
EXTRN	?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A:BYTE ; Palmtree::Math::Core::Internal::number_zero
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EN@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EN@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,77)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	04dH
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2Exception@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3Exception@Internal@Core@Math@Palmtree@@8 DD 00H	; Palmtree::Math::Core::Internal::Exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4Exception@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4Exception@Internal@Core@Math@Palmtree@@6B@ DD 00H	; Palmtree::Math::Core::Internal::Exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVArgumentNullException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	FLAT:__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
	DD	FLAT:__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	ENDS
;	COMDAT __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	FLAT:??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::Exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVInternalErrorException@Internal@Core@Math@Palmtree@@'
	DB	00H
data$r	ENDS
;	COMDAT __CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	FLAT:__CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
	DD	FLAT:__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	ENDS
;	COMDAT __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	FLAT:??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`vftable'
	DD	FLAT:??_EInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`vftable'
	DD	FLAT:??_EArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7Exception@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7Exception@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4Exception@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::Exception::`vftable'
	DD	FLAT:??_EException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z$0
__unwindtable$?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z$0
__unwindtable$?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z$0
__unwindtable$?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z$0
__ehfuncinfo$?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0
__ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0
__ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z$0
__ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1exception@std@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0exception@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.cpp
_TEXT	SEGMENT
$T2 = -52						; size = 4
_w$3 = -48						; size = 4
_w_bit_count$4 = -44					; size = 4
_u_bit_count$5 = -40					; size = 4
_root$6 = -32						; size = 16
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_n$ = 12						; size = 4
?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z PROC ; Palmtree::Math::Core::Internal::PMC_LeftShift_X_I_Imp

; 332  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	57		 push	 edi
  00015	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00018	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	50		 push	 eax
  0002c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET __BCD96457_pmc_shift@cpp
  0003a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 333  :         if (u->IS_ZERO)

  0003f	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00042	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00045	83 e1 01	 and	 ecx, 1
  00048	74 0f		 je	 SHORT $LN2@PMC_LeftSh

; 334  :             return (&number_zero);

  0004a	b8 00 00 00 00	 mov	 eax, OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  0004f	e9 b0 00 00 00	 jmp	 $LN1@PMC_LeftSh
  00054	e9 ab 00 00 00	 jmp	 $LN1@PMC_LeftSh
$LN2@PMC_LeftSh:

; 335  :         else if (n == 0)

  00059	83 7d 0c 00	 cmp	 DWORD PTR _n$[ebp], 0
  0005d	75 16		 jne	 SHORT $LN4@PMC_LeftSh

; 336  :             return (DuplicateNumber(u));

  0005f	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00062	52		 push	 edx
  00063	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  00068	83 c4 04	 add	 esp, 4
  0006b	e9 94 00 00 00	 jmp	 $LN1@PMC_LeftSh

; 337  :         else

  00070	e9 8f 00 00 00	 jmp	 $LN1@PMC_LeftSh
$LN4@PMC_LeftSh:

; 338  :         {
; 339  :             ResourceHolderUINT root;

  00075	8d 4d e0	 lea	 ecx, DWORD PTR _root$6[ebp]
  00078	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  0007d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 340  :             __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

  00084	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00087	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0008a	89 4d d8	 mov	 DWORD PTR _u_bit_count$5[ebp], ecx

; 341  :             __UNIT_TYPE w_bit_count = u_bit_count + n;

  0008d	8b 55 d8	 mov	 edx, DWORD PTR _u_bit_count$5[ebp]
  00090	03 55 0c	 add	 edx, DWORD PTR _n$[ebp]
  00093	89 55 d4	 mov	 DWORD PTR _w_bit_count$4[ebp], edx

; 342  :             NUMBER_HEADER* w = root.AllocateNumber(w_bit_count);

  00096	8b 45 d4	 mov	 eax, DWORD PTR _w_bit_count$4[ebp]
  00099	50		 push	 eax
  0009a	8d 4d e0	 lea	 ecx, DWORD PTR _root$6[ebp]
  0009d	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  000a2	89 45 d0	 mov	 DWORD PTR _w$3[ebp], eax

; 343  :             LeftShift_Imp(u->BLOCK, u->UNIT_WORD_COUNT, n, w->BLOCK, FALSE);

  000a5	6a 00		 push	 0
  000a7	8b 4d d0	 mov	 ecx, DWORD PTR _w$3[ebp]
  000aa	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  000ad	52		 push	 edx
  000ae	8b 45 0c	 mov	 eax, DWORD PTR _n$[ebp]
  000b1	50		 push	 eax
  000b2	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  000b5	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000b8	52		 push	 edx
  000b9	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  000bc	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  000bf	51		 push	 ecx
  000c0	e8 00 00 00 00	 call	 ?LeftShift_Imp@Internal@Core@Math@Palmtree@@YAXPAIII0H@Z ; Palmtree::Math::Core::Internal::LeftShift_Imp
  000c5	83 c4 14	 add	 esp, 20			; 00000014H

; 344  :             root.CheckNumber(w);

  000c8	8b 55 d0	 mov	 edx, DWORD PTR _w$3[ebp]
  000cb	52		 push	 edx
  000cc	8d 4d e0	 lea	 ecx, DWORD PTR _root$6[ebp]
  000cf	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 345  :             CommitNumber(w);

  000d4	8b 45 d0	 mov	 eax, DWORD PTR _w$3[ebp]
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  000dd	83 c4 04	 add	 esp, 4

; 346  :             root.UnlinkNumber(w);

  000e0	8b 4d d0	 mov	 ecx, DWORD PTR _w$3[ebp]
  000e3	51		 push	 ecx
  000e4	8d 4d e0	 lea	 ecx, DWORD PTR _root$6[ebp]
  000e7	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 347  :             return (w);

  000ec	8b 55 d0	 mov	 edx, DWORD PTR _w$3[ebp]
  000ef	89 55 cc	 mov	 DWORD PTR $T2[ebp], edx
  000f2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f9	8d 4d e0	 lea	 ecx, DWORD PTR _root$6[ebp]
  000fc	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00101	8b 45 cc	 mov	 eax, DWORD PTR $T2[ebp]
$LN1@PMC_LeftSh:

; 348  :         }
; 349  :     }

  00104	52		 push	 edx
  00105	8b cd		 mov	 ecx, ebp
  00107	50		 push	 eax
  00108	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@PMC_LeftSh
  0010e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00113	58		 pop	 eax
  00114	5a		 pop	 edx
  00115	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00118	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0011f	59		 pop	 ecx
  00120	5f		 pop	 edi
  00121	83 c4 34	 add	 esp, 52			; 00000034H
  00124	3b ec		 cmp	 ebp, esp
  00126	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012b	8b e5		 mov	 esp, ebp
  0012d	5d		 pop	 ebp
  0012e	c3		 ret	 0
  0012f	90		 npad	 1
$LN11@PMC_LeftSh:
  00130	01 00 00 00	 DD	 1
  00134	00 00 00 00	 DD	 $LN10@PMC_LeftSh
$LN10@PMC_LeftSh:
  00138	e0 ff ff ff	 DD	 -32			; ffffffe0H
  0013c	10 00 00 00	 DD	 16			; 00000010H
  00140	00 00 00 00	 DD	 $LN8@PMC_LeftSh
$LN8@PMC_LeftSh:
  00144	72		 DB	 114			; 00000072H
  00145	6f		 DB	 111			; 0000006fH
  00146	6f		 DB	 111			; 0000006fH
  00147	74		 DB	 116			; 00000074H
  00148	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _root$6[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z ENDP ; Palmtree::Math::Core::Internal::PMC_LeftShift_X_I_Imp
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.cpp
_TEXT	SEGMENT
$T2 = -52						; size = 4
_w$3 = -48						; size = 4
_w_bit_count$4 = -44					; size = 4
_root$5 = -36						; size = 16
_u_bit_count$6 = -16					; size = 4
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_n$ = 12						; size = 4
?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z PROC ; Palmtree::Math::Core::Internal::PMC_RightShift_X_I_Imp

; 307  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	57		 push	 edi
  00015	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00018	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	50		 push	 eax
  0002c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET __BCD96457_pmc_shift@cpp
  0003a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 308  :         if (u->IS_ZERO)

  0003f	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00042	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00045	83 e1 01	 and	 ecx, 1
  00048	74 0f		 je	 SHORT $LN2@PMC_RightS

; 309  :             return (&number_zero);

  0004a	b8 00 00 00 00	 mov	 eax, OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  0004f	e9 c7 00 00 00	 jmp	 $LN1@PMC_RightS
  00054	e9 c2 00 00 00	 jmp	 $LN1@PMC_RightS
$LN2@PMC_RightS:

; 310  :         else if (n == 0)

  00059	83 7d 0c 00	 cmp	 DWORD PTR _n$[ebp], 0
  0005d	75 16		 jne	 SHORT $LN4@PMC_RightS

; 311  :             return (DuplicateNumber(u));

  0005f	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00062	52		 push	 edx
  00063	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  00068	83 c4 04	 add	 esp, 4
  0006b	e9 ab 00 00 00	 jmp	 $LN1@PMC_RightS

; 312  :         else

  00070	e9 a6 00 00 00	 jmp	 $LN1@PMC_RightS
$LN4@PMC_RightS:

; 313  :         {
; 314  :             __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

  00075	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00078	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0007b	89 4d f0	 mov	 DWORD PTR _u_bit_count$6[ebp], ecx

; 315  :             if (u_bit_count <= n)

  0007e	8b 55 f0	 mov	 edx, DWORD PTR _u_bit_count$6[ebp]
  00081	3b 55 0c	 cmp	 edx, DWORD PTR _n$[ebp]
  00084	77 0f		 ja	 SHORT $LN6@PMC_RightS

; 316  :                 return (&number_zero);

  00086	b8 00 00 00 00	 mov	 eax, OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  0008b	e9 8b 00 00 00	 jmp	 $LN1@PMC_RightS

; 317  :             else

  00090	e9 86 00 00 00	 jmp	 $LN1@PMC_RightS
$LN6@PMC_RightS:

; 318  :             {
; 319  :                 ResourceHolderUINT root;

  00095	8d 4d dc	 lea	 ecx, DWORD PTR _root$5[ebp]
  00098	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  0009d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 320  :                 __UNIT_TYPE w_bit_count = u_bit_count - n;

  000a4	8b 45 f0	 mov	 eax, DWORD PTR _u_bit_count$6[ebp]
  000a7	2b 45 0c	 sub	 eax, DWORD PTR _n$[ebp]
  000aa	89 45 d4	 mov	 DWORD PTR _w_bit_count$4[ebp], eax

; 321  :                 NUMBER_HEADER* w = root.AllocateNumber(w_bit_count);

  000ad	8b 4d d4	 mov	 ecx, DWORD PTR _w_bit_count$4[ebp]
  000b0	51		 push	 ecx
  000b1	8d 4d dc	 lea	 ecx, DWORD PTR _root$5[ebp]
  000b4	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  000b9	89 45 d0	 mov	 DWORD PTR _w$3[ebp], eax

; 322  :                 RightShift_Imp(u->BLOCK, u->UNIT_WORD_COUNT, n, w->BLOCK, FALSE);

  000bc	6a 00		 push	 0
  000be	8b 55 d0	 mov	 edx, DWORD PTR _w$3[ebp]
  000c1	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  000c4	50		 push	 eax
  000c5	8b 4d 0c	 mov	 ecx, DWORD PTR _n$[ebp]
  000c8	51		 push	 ecx
  000c9	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  000cc	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000cf	50		 push	 eax
  000d0	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  000d3	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  000d6	52		 push	 edx
  000d7	e8 00 00 00 00	 call	 ?RightShift_Imp@Internal@Core@Math@Palmtree@@YAXPAIII0H@Z ; Palmtree::Math::Core::Internal::RightShift_Imp
  000dc	83 c4 14	 add	 esp, 20			; 00000014H

; 323  :                 root.CheckNumber(w);

  000df	8b 45 d0	 mov	 eax, DWORD PTR _w$3[ebp]
  000e2	50		 push	 eax
  000e3	8d 4d dc	 lea	 ecx, DWORD PTR _root$5[ebp]
  000e6	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 324  :                 CommitNumber(w);

  000eb	8b 4d d0	 mov	 ecx, DWORD PTR _w$3[ebp]
  000ee	51		 push	 ecx
  000ef	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  000f4	83 c4 04	 add	 esp, 4

; 325  :                 root.UnlinkNumber(w);

  000f7	8b 55 d0	 mov	 edx, DWORD PTR _w$3[ebp]
  000fa	52		 push	 edx
  000fb	8d 4d dc	 lea	 ecx, DWORD PTR _root$5[ebp]
  000fe	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 326  :                 return (w);

  00103	8b 45 d0	 mov	 eax, DWORD PTR _w$3[ebp]
  00106	89 45 cc	 mov	 DWORD PTR $T2[ebp], eax
  00109	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00110	8d 4d dc	 lea	 ecx, DWORD PTR _root$5[ebp]
  00113	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00118	8b 45 cc	 mov	 eax, DWORD PTR $T2[ebp]
$LN1@PMC_RightS:

; 327  :             }
; 328  :         }
; 329  :     }

  0011b	52		 push	 edx
  0011c	8b cd		 mov	 ecx, ebp
  0011e	50		 push	 eax
  0011f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN13@PMC_RightS
  00125	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0012a	58		 pop	 eax
  0012b	5a		 pop	 edx
  0012c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0012f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00136	59		 pop	 ecx
  00137	5f		 pop	 edi
  00138	83 c4 34	 add	 esp, 52			; 00000034H
  0013b	3b ec		 cmp	 ebp, esp
  0013d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00142	8b e5		 mov	 esp, ebp
  00144	5d		 pop	 ebp
  00145	c3		 ret	 0
  00146	66 90		 npad	 2
$LN13@PMC_RightS:
  00148	01 00 00 00	 DD	 1
  0014c	00 00 00 00	 DD	 $LN12@PMC_RightS
$LN12@PMC_RightS:
  00150	dc ff ff ff	 DD	 -36			; ffffffdcH
  00154	10 00 00 00	 DD	 16			; 00000010H
  00158	00 00 00 00	 DD	 $LN10@PMC_RightS
$LN10@PMC_RightS:
  0015c	72		 DB	 114			; 00000072H
  0015d	6f		 DB	 111			; 0000006fH
  0015e	6f		 DB	 111			; 0000006fH
  0015f	74		 DB	 116			; 00000074H
  00160	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _root$5[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z ENDP ; Palmtree::Math::Core::Internal::PMC_RightShift_X_I_Imp
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
tv68 = -4						; size = 4
_u$ = 8							; size = 4
_sign$ = 12						; size = 4
_GET_ABS_32 PROC

; 582  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00010	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 583  :             if (u > 0)

  00015	83 7d 08 00	 cmp	 DWORD PTR _u$[ebp], 0
  00019	7e 0d		 jle	 SHORT $LN2@GET_ABS_32

; 584  :             {
; 585  :                 *sign = 1;

  0001b	8b 45 0c	 mov	 eax, DWORD PTR _sign$[ebp]
  0001e	c6 00 01	 mov	 BYTE PTR [eax], 1

; 586  :                 return ((_UINT32_T)u);

  00021	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00024	eb 37		 jmp	 SHORT $LN1@GET_ABS_32
  00026	eb 35		 jmp	 SHORT $LN1@GET_ABS_32
$LN2@GET_ABS_32:

; 587  :             }
; 588  :             else if (u == 0)

  00028	83 7d 08 00	 cmp	 DWORD PTR _u$[ebp], 0
  0002c	75 0c		 jne	 SHORT $LN4@GET_ABS_32

; 589  :             {
; 590  :                 *sign = 0;

  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR _sign$[ebp]
  00031	c6 01 00	 mov	 BYTE PTR [ecx], 0

; 591  :                 return (0);

  00034	33 c0		 xor	 eax, eax
  00036	eb 25		 jmp	 SHORT $LN1@GET_ABS_32

; 592  :             }
; 593  :             else

  00038	eb 23		 jmp	 SHORT $LN1@GET_ABS_32
$LN4@GET_ABS_32:

; 594  :             {
; 595  :                 *sign = -1;

  0003a	8b 55 0c	 mov	 edx, DWORD PTR _sign$[ebp]
  0003d	c6 02 ff	 mov	 BYTE PTR [edx], -1

; 596  :                 return ((_UINT32_T)u == 0x80000000U ? 0x80000000U : (_UINT32_T)-u);

  00040	81 7d 08 00 00
	00 80		 cmp	 DWORD PTR _u$[ebp], -2147483648 ; 80000000H
  00047	75 09		 jne	 SHORT $LN7@GET_ABS_32
  00049	c7 45 fc 00 00
	00 80		 mov	 DWORD PTR tv68[ebp], -2147483648 ; 80000000H
  00050	eb 08		 jmp	 SHORT $LN8@GET_ABS_32
$LN7@GET_ABS_32:
  00052	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00055	f7 d8		 neg	 eax
  00057	89 45 fc	 mov	 DWORD PTR tv68[ebp], eax
$LN8@GET_ABS_32:
  0005a	8b 45 fc	 mov	 eax, DWORD PTR tv68[ebp]
$LN1@GET_ABS_32:

; 597  :             }
; 598  :         }

  0005d	83 c4 04	 add	 esp, 4
  00060	3b ec		 cmp	 ebp, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
_GET_ABS_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_count$ = 12						; size = 4
__ZERO_MEMORY_UNIT PROC

; 96   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00009	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 97   : #ifdef _M_IX86
; 98   :             __stosd((unsigned long*)d, 0, (unsigned long)count);

  0000e	8b 7d 08	 mov	 edi, DWORD PTR _d$[ebp]
  00011	33 c0		 xor	 eax, eax
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR _count$[ebp]
  00016	f3 ab		 rep stosd

; 99   : #elif defined(_M_X64)
; 100  :             __stosq(d, 0, count);
; 101  : #else
; 102  : #error unknown platform
; 103  : #endif
; 104  :         }

  00018	5f		 pop	 edi
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
__ZERO_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT PROC

; 63   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  0000a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 64   : #ifdef _M_IX86
; 65   :             __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

  0000f	8b 7d 08	 mov	 edi, DWORD PTR _d$[ebp]
  00012	8b 75 0c	 mov	 esi, DWORD PTR _s$[ebp]
  00015	8b 4d 10	 mov	 ecx, DWORD PTR _count$[ebp]
  00018	f3 a5		 rep movsd

; 66   : #elif defined(_M_X64)
; 67   :             __movsq(d, s, count);
; 68   : #else
; 69   : #error unknown platform
; 70   : #endif
; 71   :         }

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
__COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.cpp
_TEXT	SEGMENT
tv91 = -116						; size = 4
$T2 = -112						; size = 4
$T3 = -108						; size = 24
$T4 = -84						; size = 24
_w$ = -60						; size = 4
_n_abs$ = -56						; size = 4
_n_sign$ = -45						; size = 1
_root$ = -36						; size = 16
_nu$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_n$ = 12						; size = 4
?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z PROC ; Palmtree::Math::Core::Internal::PMC_LeftShift_X_I

; 375  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	57		 push	 edi
  00015	8d 7d 8c	 lea	 edi, DWORD PTR [ebp-116]
  00018	b9 1a 00 00 00	 mov	 ecx, 26			; 0000001aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	50		 push	 eax
  0002c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET __BCD96457_pmc_shift@cpp
  0003a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 376  :         if (__UNIT_TYPE_BIT_COUNT < sizeof(n) * 8)

  0003f	33 c0		 xor	 eax, eax
  00041	74 20		 je	 SHORT $LN2@PMC_LeftSh

; 377  :         {
; 378  :             // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 379  :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_add.cpp;PMC_LeftShift_X_I;1");

  00043	68 00 00 00 00	 push	 OFFSET $SG117995
  00048	68 00 00 00 00	 push	 OFFSET $SG117996
  0004d	8d 4d ac	 lea	 ecx, DWORD PTR $T4[ebp]
  00050	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00055	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0005a	8d 4d ac	 lea	 ecx, DWORD PTR $T4[ebp]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@PMC_LeftSh:

; 380  :         }
; 381  :         if (u == nullptr)

  00063	83 7d 08 00	 cmp	 DWORD PTR _u$[ebp], 0
  00067	75 20		 jne	 SHORT $LN3@PMC_LeftSh

; 382  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"u");

  00069	68 00 00 00 00	 push	 OFFSET $SG117999
  0006e	68 00 00 00 00	 push	 OFFSET $SG118000
  00073	8d 4d 94	 lea	 ecx, DWORD PTR $T3[ebp]
  00076	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0007b	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  00080	8d 55 94	 lea	 edx, DWORD PTR $T3[ebp]
  00083	52		 push	 edx
  00084	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@PMC_LeftSh:

; 383  :         NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

  00089	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  0008c	89 45 f0	 mov	 DWORD PTR _nu$[ebp], eax

; 384  :         CheckNumber(nu);

  0008f	8b 4d f0	 mov	 ecx, DWORD PTR _nu$[ebp]
  00092	51		 push	 ecx
  00093	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  00098	83 c4 04	 add	 esp, 4

; 385  :         ResourceHolderUINT root;

  0009b	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  0009e	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000a3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 386  :         char n_sign;
; 387  :         _UINT32_T n_abs = GET_ABS_32(n, &n_sign);

  000aa	8d 55 d3	 lea	 edx, DWORD PTR _n_sign$[ebp]
  000ad	52		 push	 edx
  000ae	8b 45 0c	 mov	 eax, DWORD PTR _n$[ebp]
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 _GET_ABS_32
  000b7	83 c4 08	 add	 esp, 8
  000ba	89 45 c8	 mov	 DWORD PTR _n_abs$[ebp], eax

; 388  :         NUMBER_HEADER* w = n_sign >= 0 ? PMC_LeftShift_X_I_Imp(nu, n_abs) : PMC_RightShift_X_I_Imp(nu, n_abs);

  000bd	0f be 4d d3	 movsx	 ecx, BYTE PTR _n_sign$[ebp]
  000c1	85 c9		 test	 ecx, ecx
  000c3	7c 15		 jl	 SHORT $LN5@PMC_LeftSh
  000c5	8b 55 c8	 mov	 edx, DWORD PTR _n_abs$[ebp]
  000c8	52		 push	 edx
  000c9	8b 45 f0	 mov	 eax, DWORD PTR _nu$[ebp]
  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 ?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_LeftShift_X_I_Imp
  000d2	83 c4 08	 add	 esp, 8
  000d5	89 45 8c	 mov	 DWORD PTR tv91[ebp], eax
  000d8	eb 13		 jmp	 SHORT $LN6@PMC_LeftSh
$LN5@PMC_LeftSh:
  000da	8b 4d c8	 mov	 ecx, DWORD PTR _n_abs$[ebp]
  000dd	51		 push	 ecx
  000de	8b 55 f0	 mov	 edx, DWORD PTR _nu$[ebp]
  000e1	52		 push	 edx
  000e2	e8 00 00 00 00	 call	 ?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_RightShift_X_I_Imp
  000e7	83 c4 08	 add	 esp, 8
  000ea	89 45 8c	 mov	 DWORD PTR tv91[ebp], eax
$LN6@PMC_LeftSh:
  000ed	8b 45 8c	 mov	 eax, DWORD PTR tv91[ebp]
  000f0	89 45 c4	 mov	 DWORD PTR _w$[ebp], eax

; 389  :         root.HookNumber(w);

  000f3	8b 4d c4	 mov	 ecx, DWORD PTR _w$[ebp]
  000f6	51		 push	 ecx
  000f7	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  000fa	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 390  : #ifdef _DEBUG
; 391  :         CheckNumber(w);

  000ff	8b 55 c4	 mov	 edx, DWORD PTR _w$[ebp]
  00102	52		 push	 edx
  00103	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  00108	83 c4 04	 add	 esp, 4

; 392  : #endif
; 393  :         root.UnlinkNumber(w);

  0010b	8b 45 c4	 mov	 eax, DWORD PTR _w$[ebp]
  0010e	50		 push	 eax
  0010f	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00112	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 394  :         return ((PMC_HANDLE_UINT)w);

  00117	8b 4d c4	 mov	 ecx, DWORD PTR _w$[ebp]
  0011a	89 4d 90	 mov	 DWORD PTR $T2[ebp], ecx
  0011d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00124	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00127	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0012c	8b 45 90	 mov	 eax, DWORD PTR $T2[ebp]
$LN4@PMC_LeftSh:

; 395  :     }

  0012f	52		 push	 edx
  00130	8b cd		 mov	 ecx, ebp
  00132	50		 push	 eax
  00133	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@PMC_LeftSh
  00139	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0013e	58		 pop	 eax
  0013f	5a		 pop	 edx
  00140	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00143	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0014a	59		 pop	 ecx
  0014b	5f		 pop	 edi
  0014c	83 c4 74	 add	 esp, 116		; 00000074H
  0014f	3b ec		 cmp	 ebp, esp
  00151	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00156	8b e5		 mov	 esp, ebp
  00158	5d		 pop	 ebp
  00159	c2 08 00	 ret	 8
$LN12@PMC_LeftSh:
  0015c	02 00 00 00	 DD	 2
  00160	00 00 00 00	 DD	 $LN11@PMC_LeftSh
$LN11@PMC_LeftSh:
  00164	dc ff ff ff	 DD	 -36			; ffffffdcH
  00168	10 00 00 00	 DD	 16			; 00000010H
  0016c	00 00 00 00	 DD	 $LN8@PMC_LeftSh
  00170	d3 ff ff ff	 DD	 -45			; ffffffd3H
  00174	01 00 00 00	 DD	 1
  00178	00 00 00 00	 DD	 $LN9@PMC_LeftSh
$LN9@PMC_LeftSh:
  0017c	6e		 DB	 110			; 0000006eH
  0017d	5f		 DB	 95			; 0000005fH
  0017e	73		 DB	 115			; 00000073H
  0017f	69		 DB	 105			; 00000069H
  00180	67		 DB	 103			; 00000067H
  00181	6e		 DB	 110			; 0000006eH
  00182	00		 DB	 0
$LN8@PMC_LeftSh:
  00183	72		 DB	 114			; 00000072H
  00184	6f		 DB	 111			; 0000006fH
  00185	6f		 DB	 111			; 0000006fH
  00186	74		 DB	 116			; 00000074H
  00187	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a 90	 mov	 ecx, DWORD PTR [edx-112]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z ENDP ; Palmtree::Math::Core::Internal::PMC_LeftShift_X_I
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.cpp
_TEXT	SEGMENT
tv91 = -116						; size = 4
$T2 = -112						; size = 4
$T3 = -108						; size = 24
$T4 = -84						; size = 24
_w$ = -60						; size = 4
_n_abs$ = -56						; size = 4
_n_sign$ = -45						; size = 1
_root$ = -36						; size = 16
_nu$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_n$ = 12						; size = 4
?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z PROC ; Palmtree::Math::Core::Internal::PMC_RightShift_X_I

; 352  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	57		 push	 edi
  00015	8d 7d 8c	 lea	 edi, DWORD PTR [ebp-116]
  00018	b9 1a 00 00 00	 mov	 ecx, 26			; 0000001aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	50		 push	 eax
  0002c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET __BCD96457_pmc_shift@cpp
  0003a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 353  :         if (__UNIT_TYPE_BIT_COUNT < sizeof(n) * 8)

  0003f	33 c0		 xor	 eax, eax
  00041	74 20		 je	 SHORT $LN2@PMC_RightS

; 354  :         {
; 355  :             // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 356  :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_shift.cpp;PMC_RightShift_X_I;1");

  00043	68 00 00 00 00	 push	 OFFSET $SG117970
  00048	68 00 00 00 00	 push	 OFFSET $SG117971
  0004d	8d 4d ac	 lea	 ecx, DWORD PTR $T4[ebp]
  00050	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00055	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0005a	8d 4d ac	 lea	 ecx, DWORD PTR $T4[ebp]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@PMC_RightS:

; 357  :         }
; 358  :         if (u == nullptr)

  00063	83 7d 08 00	 cmp	 DWORD PTR _u$[ebp], 0
  00067	75 20		 jne	 SHORT $LN3@PMC_RightS

; 359  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"u");

  00069	68 00 00 00 00	 push	 OFFSET $SG117978
  0006e	68 00 00 00 00	 push	 OFFSET $SG117979
  00073	8d 4d 94	 lea	 ecx, DWORD PTR $T3[ebp]
  00076	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0007b	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  00080	8d 55 94	 lea	 edx, DWORD PTR $T3[ebp]
  00083	52		 push	 edx
  00084	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@PMC_RightS:

; 360  :         NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

  00089	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  0008c	89 45 f0	 mov	 DWORD PTR _nu$[ebp], eax

; 361  :         CheckNumber(nu);

  0008f	8b 4d f0	 mov	 ecx, DWORD PTR _nu$[ebp]
  00092	51		 push	 ecx
  00093	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  00098	83 c4 04	 add	 esp, 4

; 362  :         ResourceHolderUINT root;

  0009b	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  0009e	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000a3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 363  :         char n_sign;
; 364  :         _UINT32_T n_abs = GET_ABS_32(n, &n_sign);

  000aa	8d 55 d3	 lea	 edx, DWORD PTR _n_sign$[ebp]
  000ad	52		 push	 edx
  000ae	8b 45 0c	 mov	 eax, DWORD PTR _n$[ebp]
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 _GET_ABS_32
  000b7	83 c4 08	 add	 esp, 8
  000ba	89 45 c8	 mov	 DWORD PTR _n_abs$[ebp], eax

; 365  :         NUMBER_HEADER* w = n_sign >= 0 ? PMC_RightShift_X_I_Imp(nu, n_abs) : PMC_LeftShift_X_I_Imp(nu, n_abs);

  000bd	0f be 4d d3	 movsx	 ecx, BYTE PTR _n_sign$[ebp]
  000c1	85 c9		 test	 ecx, ecx
  000c3	7c 15		 jl	 SHORT $LN5@PMC_RightS
  000c5	8b 55 c8	 mov	 edx, DWORD PTR _n_abs$[ebp]
  000c8	52		 push	 edx
  000c9	8b 45 f0	 mov	 eax, DWORD PTR _nu$[ebp]
  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 ?PMC_RightShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_RightShift_X_I_Imp
  000d2	83 c4 08	 add	 esp, 8
  000d5	89 45 8c	 mov	 DWORD PTR tv91[ebp], eax
  000d8	eb 13		 jmp	 SHORT $LN6@PMC_RightS
$LN5@PMC_RightS:
  000da	8b 4d c8	 mov	 ecx, DWORD PTR _n_abs$[ebp]
  000dd	51		 push	 ecx
  000de	8b 55 f0	 mov	 edx, DWORD PTR _nu$[ebp]
  000e1	52		 push	 edx
  000e2	e8 00 00 00 00	 call	 ?PMC_LeftShift_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_LeftShift_X_I_Imp
  000e7	83 c4 08	 add	 esp, 8
  000ea	89 45 8c	 mov	 DWORD PTR tv91[ebp], eax
$LN6@PMC_RightS:
  000ed	8b 45 8c	 mov	 eax, DWORD PTR tv91[ebp]
  000f0	89 45 c4	 mov	 DWORD PTR _w$[ebp], eax

; 366  :         root.HookNumber(w);

  000f3	8b 4d c4	 mov	 ecx, DWORD PTR _w$[ebp]
  000f6	51		 push	 ecx
  000f7	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  000fa	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 367  : #ifdef _DEBUG
; 368  :         CheckNumber(w);

  000ff	8b 55 c4	 mov	 edx, DWORD PTR _w$[ebp]
  00102	52		 push	 edx
  00103	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  00108	83 c4 04	 add	 esp, 4

; 369  : #endif
; 370  :         root.UnlinkNumber(w);

  0010b	8b 45 c4	 mov	 eax, DWORD PTR _w$[ebp]
  0010e	50		 push	 eax
  0010f	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00112	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 371  :         return ((PMC_HANDLE_UINT)w);

  00117	8b 4d c4	 mov	 ecx, DWORD PTR _w$[ebp]
  0011a	89 4d 90	 mov	 DWORD PTR $T2[ebp], ecx
  0011d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00124	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00127	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0012c	8b 45 90	 mov	 eax, DWORD PTR $T2[ebp]
$LN4@PMC_RightS:

; 372  :     }

  0012f	52		 push	 edx
  00130	8b cd		 mov	 ecx, ebp
  00132	50		 push	 eax
  00133	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@PMC_RightS
  00139	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0013e	58		 pop	 eax
  0013f	5a		 pop	 edx
  00140	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00143	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0014a	59		 pop	 ecx
  0014b	5f		 pop	 edi
  0014c	83 c4 74	 add	 esp, 116		; 00000074H
  0014f	3b ec		 cmp	 ebp, esp
  00151	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00156	8b e5		 mov	 esp, ebp
  00158	5d		 pop	 ebp
  00159	c2 08 00	 ret	 8
$LN12@PMC_RightS:
  0015c	02 00 00 00	 DD	 2
  00160	00 00 00 00	 DD	 $LN11@PMC_RightS
$LN11@PMC_RightS:
  00164	dc ff ff ff	 DD	 -36			; ffffffdcH
  00168	10 00 00 00	 DD	 16			; 00000010H
  0016c	00 00 00 00	 DD	 $LN8@PMC_RightS
  00170	d3 ff ff ff	 DD	 -45			; ffffffd3H
  00174	01 00 00 00	 DD	 1
  00178	00 00 00 00	 DD	 $LN9@PMC_RightS
$LN9@PMC_RightS:
  0017c	6e		 DB	 110			; 0000006eH
  0017d	5f		 DB	 95			; 0000005fH
  0017e	73		 DB	 115			; 00000073H
  0017f	69		 DB	 105			; 00000069H
  00180	67		 DB	 103			; 00000067H
  00181	6e		 DB	 110			; 0000006eH
  00182	00		 DB	 0
$LN8@PMC_RightS:
  00183	72		 DB	 114			; 00000072H
  00184	6f		 DB	 111			; 0000006fH
  00185	6f		 DB	 111			; 0000006fH
  00186	74		 DB	 116			; 00000074H
  00187	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a 90	 mov	 ecx, DWORD PTR [edx-112]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z ENDP ; Palmtree::Math::Core::Internal::PMC_RightShift_X_I
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.cpp
_TEXT	SEGMENT
_feature$ = 8						; size = 4
?Initialize_Shift@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z PROC ; Palmtree::Math::Core::Internal::Initialize_Shift

; 398  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __BCD96457_pmc_shift@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 399  :         return (PMC_STATUS_OK);

  0000d	33 c0		 xor	 eax, eax

; 400  :     }

  0000f	3b ec		 cmp	 ebp, esp
  00011	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?Initialize_Shift@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ENDP ; Palmtree::Math::Core::Internal::Initialize_Shift
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.cpp
_TEXT	SEGMENT
_count$1 = -36						; size = 4
_work$2 = -32						; size = 4
_temp$3 = -28						; size = 4
_n_rshift_bit_count$4 = -24				; size = 4
_n_lshift_bit_count$ = -20				; size = 4
_n_word_count$ = -16					; size = 4
_op$ = -12						; size = 4
_p_count$ = -8						; size = 4
_pp$ = -4						; size = 4
_p$ = 8							; size = 4
_p_word_count$ = 12					; size = 4
_n$ = 16						; size = 4
_o$ = 20						; size = 4
_padding_zero$ = 24					; size = 4
?LeftShift_Imp@Internal@Core@Math@Palmtree@@YAXPAIII0H@Z PROC ; Palmtree::Math::Core::Internal::LeftShift_Imp

; 172  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0000e	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00011	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00014	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00017	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0001a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001d	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00020	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00023	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00026	b9 00 00 00 00	 mov	 ecx, OFFSET __BCD96457_pmc_shift@cpp
  0002b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 173  :         __UNIT_TYPE* pp = p;

  00030	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00033	89 45 fc	 mov	 DWORD PTR _pp$[ebp], eax

; 174  :         __UNIT_TYPE p_count = p_word_count;

  00036	8b 4d 0c	 mov	 ecx, DWORD PTR _p_word_count$[ebp]
  00039	89 4d f8	 mov	 DWORD PTR _p_count$[ebp], ecx

; 175  :         __UNIT_TYPE* op = o;

  0003c	8b 55 14	 mov	 edx, DWORD PTR _o$[ebp]
  0003f	89 55 f4	 mov	 DWORD PTR _op$[ebp], edx

; 176  :         __UNIT_TYPE n_word_count = n / __UNIT_TYPE_BIT_COUNT;

  00042	8b 45 10	 mov	 eax, DWORD PTR _n$[ebp]
  00045	c1 e8 05	 shr	 eax, 5
  00048	89 45 f0	 mov	 DWORD PTR _n_word_count$[ebp], eax

; 177  :         __UNIT_TYPE n_lshift_bit_count = n % __UNIT_TYPE_BIT_COUNT;

  0004b	8b 45 10	 mov	 eax, DWORD PTR _n$[ebp]
  0004e	33 d2		 xor	 edx, edx
  00050	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00055	f7 f1		 div	 ecx
  00057	89 55 ec	 mov	 DWORD PTR _n_lshift_bit_count$[ebp], edx

; 178  :         if (n_lshift_bit_count == 0)

  0005a	83 7d ec 00	 cmp	 DWORD PTR _n_lshift_bit_count$[ebp], 0
  0005e	75 35		 jne	 SHORT $LN4@LeftShift_

; 179  :         {
; 180  :             // シフト数がちょうどワード境界分であれば単にワード単位のデータ移動のみ行う。
; 181  :             _COPY_MEMORY_UNIT(op + n_word_count, pp, p_count);

  00060	8b 55 f8	 mov	 edx, DWORD PTR _p_count$[ebp]
  00063	52		 push	 edx
  00064	8b 45 fc	 mov	 eax, DWORD PTR _pp$[ebp]
  00067	50		 push	 eax
  00068	8b 4d f0	 mov	 ecx, DWORD PTR _n_word_count$[ebp]
  0006b	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  0006e	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 __COPY_MEMORY_UNIT
  00077	83 c4 0c	 add	 esp, 12			; 0000000cH

; 182  :             if (padding_zero)

  0007a	83 7d 18 00	 cmp	 DWORD PTR _padding_zero$[ebp], 0
  0007e	74 10		 je	 SHORT $LN6@LeftShift_

; 183  :                 _ZERO_MEMORY_UNIT(op, n_word_count);

  00080	8b 4d f0	 mov	 ecx, DWORD PTR _n_word_count$[ebp]
  00083	51		 push	 ecx
  00084	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00087	52		 push	 edx
  00088	e8 00 00 00 00	 call	 __ZERO_MEMORY_UNIT
  0008d	83 c4 08	 add	 esp, 8
$LN6@LeftShift_:

; 184  :         }
; 185  :         else

  00090	e9 dc 0f 00 00	 jmp	 $LN1@LeftShift_
$LN4@LeftShift_:

; 186  :         {
; 187  :             __UNIT_TYPE n_rshift_bit_count = __UNIT_TYPE_BIT_COUNT - n_lshift_bit_count;

  00095	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  0009a	2b 45 ec	 sub	 eax, DWORD PTR _n_lshift_bit_count$[ebp]
  0009d	89 45 e8	 mov	 DWORD PTR _n_rshift_bit_count$4[ebp], eax

; 188  :             pp += p_count - 1;

  000a0	8b 4d f8	 mov	 ecx, DWORD PTR _p_count$[ebp]
  000a3	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  000a6	8d 44 8a fc	 lea	 eax, DWORD PTR [edx+ecx*4-4]
  000aa	89 45 fc	 mov	 DWORD PTR _pp$[ebp], eax

; 189  :             op += p_count + n_word_count;

  000ad	8b 4d f8	 mov	 ecx, DWORD PTR _p_count$[ebp]
  000b0	03 4d f0	 add	 ecx, DWORD PTR _n_word_count$[ebp]
  000b3	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  000b6	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  000b9	89 45 f4	 mov	 DWORD PTR _op$[ebp], eax

; 190  :             p_count -= 1;

  000bc	8b 4d f8	 mov	 ecx, DWORD PTR _p_count$[ebp]
  000bf	83 e9 01	 sub	 ecx, 1
  000c2	89 4d f8	 mov	 DWORD PTR _p_count$[ebp], ecx

; 191  :             __UNIT_TYPE temp = *pp;

  000c5	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  000c8	8b 02		 mov	 eax, DWORD PTR [edx]
  000ca	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax

; 192  :             __UNIT_TYPE work = temp >> n_rshift_bit_count;

  000cd	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  000d0	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  000d3	d3 ea		 shr	 edx, cl
  000d5	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx

; 193  :             if (work != 0)

  000d8	83 7d e0 00	 cmp	 DWORD PTR _work$2[ebp], 0
  000dc	74 08		 je	 SHORT $LN7@LeftShift_

; 194  :                 *op = work;

  000de	8b 45 f4	 mov	 eax, DWORD PTR _op$[ebp]
  000e1	8b 4d e0	 mov	 ecx, DWORD PTR _work$2[ebp]
  000e4	89 08		 mov	 DWORD PTR [eax], ecx
$LN7@LeftShift_:

; 195  :             --pp;

  000e6	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  000e9	83 ea 04	 sub	 edx, 4
  000ec	89 55 fc	 mov	 DWORD PTR _pp$[ebp], edx

; 196  :             --op;

  000ef	8b 45 f4	 mov	 eax, DWORD PTR _op$[ebp]
  000f2	83 e8 04	 sub	 eax, 4
  000f5	89 45 f4	 mov	 DWORD PTR _op$[ebp], eax

; 197  : 
; 198  :             __UNIT_TYPE count = p_count >> 5;

  000f8	8b 4d f8	 mov	 ecx, DWORD PTR _p_count$[ebp]
  000fb	c1 e9 05	 shr	 ecx, 5
  000fe	89 4d dc	 mov	 DWORD PTR _count$1[ebp], ecx
$LN2@LeftShift_:

; 199  :             while (count != 0)

  00101	83 7d dc 00	 cmp	 DWORD PTR _count$1[ebp], 0
  00105	0f 84 86 07 00
	00		 je	 $LN3@LeftShift_

; 200  :             {
; 201  :                 work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

  0010b	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  0010e	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  00111	d3 e2		 shl	 edx, cl
  00113	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00116	b8 04 00 00 00	 mov	 eax, 4
  0011b	6b c8 00	 imul	 ecx, eax, 0
  0011e	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00121	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00124	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  00127	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  0012a	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  0012d	d3 ea		 shr	 edx, cl
  0012f	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  00132	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00135	b8 04 00 00 00	 mov	 eax, 4
  0013a	6b c8 00	 imul	 ecx, eax, 0
  0013d	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00140	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  00143	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 202  :                 work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

  00146	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00149	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  0014c	d3 e2		 shl	 edx, cl
  0014e	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00151	b8 04 00 00 00	 mov	 eax, 4
  00156	6b c8 ff	 imul	 ecx, eax, -1
  00159	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  0015c	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0015f	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  00162	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00165	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  00168	d3 ea		 shr	 edx, cl
  0016a	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  0016d	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00170	b8 04 00 00 00	 mov	 eax, 4
  00175	6b c8 ff	 imul	 ecx, eax, -1
  00178	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  0017b	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  0017e	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 203  :                 work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

  00181	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00184	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  00187	d3 e2		 shl	 edx, cl
  00189	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  0018c	b8 04 00 00 00	 mov	 eax, 4
  00191	6b c8 fe	 imul	 ecx, eax, -2
  00194	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00197	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0019a	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  0019d	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  001a0	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  001a3	d3 ea		 shr	 edx, cl
  001a5	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  001a8	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  001ab	b8 04 00 00 00	 mov	 eax, 4
  001b0	6b c8 fe	 imul	 ecx, eax, -2
  001b3	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  001b6	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  001b9	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 204  :                 work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

  001bc	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  001bf	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  001c2	d3 e2		 shl	 edx, cl
  001c4	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  001c7	b8 04 00 00 00	 mov	 eax, 4
  001cc	6b c8 fd	 imul	 ecx, eax, -3
  001cf	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  001d2	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  001d5	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  001d8	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  001db	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  001de	d3 ea		 shr	 edx, cl
  001e0	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  001e3	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  001e6	b8 04 00 00 00	 mov	 eax, 4
  001eb	6b c8 fd	 imul	 ecx, eax, -3
  001ee	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  001f1	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  001f4	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 205  :                 work = temp << n_lshift_bit_count; temp = pp[-4]; work |= temp >> n_rshift_bit_count; op[-4] = work;

  001f7	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  001fa	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  001fd	d3 e2		 shl	 edx, cl
  001ff	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00202	b8 04 00 00 00	 mov	 eax, 4
  00207	6b c8 fc	 imul	 ecx, eax, -4
  0020a	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  0020d	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00210	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  00213	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00216	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  00219	d3 ea		 shr	 edx, cl
  0021b	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  0021e	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00221	b8 04 00 00 00	 mov	 eax, 4
  00226	6b c8 fc	 imul	 ecx, eax, -4
  00229	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  0022c	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  0022f	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 206  :                 work = temp << n_lshift_bit_count; temp = pp[-5]; work |= temp >> n_rshift_bit_count; op[-5] = work;

  00232	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00235	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  00238	d3 e2		 shl	 edx, cl
  0023a	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  0023d	b8 04 00 00 00	 mov	 eax, 4
  00242	6b c8 fb	 imul	 ecx, eax, -5
  00245	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00248	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0024b	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  0024e	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00251	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  00254	d3 ea		 shr	 edx, cl
  00256	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  00259	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  0025c	b8 04 00 00 00	 mov	 eax, 4
  00261	6b c8 fb	 imul	 ecx, eax, -5
  00264	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00267	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  0026a	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 207  :                 work = temp << n_lshift_bit_count; temp = pp[-6]; work |= temp >> n_rshift_bit_count; op[-6] = work;

  0026d	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00270	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  00273	d3 e2		 shl	 edx, cl
  00275	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00278	b8 04 00 00 00	 mov	 eax, 4
  0027d	6b c8 fa	 imul	 ecx, eax, -6
  00280	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00283	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00286	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  00289	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  0028c	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  0028f	d3 ea		 shr	 edx, cl
  00291	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  00294	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00297	b8 04 00 00 00	 mov	 eax, 4
  0029c	6b c8 fa	 imul	 ecx, eax, -6
  0029f	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  002a2	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  002a5	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 208  :                 work = temp << n_lshift_bit_count; temp = pp[-7]; work |= temp >> n_rshift_bit_count; op[-7] = work;

  002a8	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  002ab	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  002ae	d3 e2		 shl	 edx, cl
  002b0	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  002b3	b8 04 00 00 00	 mov	 eax, 4
  002b8	6b c8 f9	 imul	 ecx, eax, -7
  002bb	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  002be	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  002c1	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  002c4	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  002c7	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  002ca	d3 ea		 shr	 edx, cl
  002cc	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  002cf	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  002d2	b8 04 00 00 00	 mov	 eax, 4
  002d7	6b c8 f9	 imul	 ecx, eax, -7
  002da	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  002dd	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  002e0	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 209  :                 work = temp << n_lshift_bit_count; temp = pp[-8]; work |= temp >> n_rshift_bit_count; op[-8] = work;

  002e3	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  002e6	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  002e9	d3 e2		 shl	 edx, cl
  002eb	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  002ee	b8 04 00 00 00	 mov	 eax, 4
  002f3	6b c8 f8	 imul	 ecx, eax, -8
  002f6	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  002f9	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  002fc	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  002ff	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00302	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  00305	d3 ea		 shr	 edx, cl
  00307	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  0030a	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  0030d	b8 04 00 00 00	 mov	 eax, 4
  00312	6b c8 f8	 imul	 ecx, eax, -8
  00315	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00318	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  0031b	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 210  :                 work = temp << n_lshift_bit_count; temp = pp[-9]; work |= temp >> n_rshift_bit_count; op[-9] = work;

  0031e	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00321	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  00324	d3 e2		 shl	 edx, cl
  00326	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00329	b8 04 00 00 00	 mov	 eax, 4
  0032e	6b c8 f7	 imul	 ecx, eax, -9
  00331	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00334	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00337	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  0033a	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  0033d	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  00340	d3 ea		 shr	 edx, cl
  00342	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  00345	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00348	b8 04 00 00 00	 mov	 eax, 4
  0034d	6b c8 f7	 imul	 ecx, eax, -9
  00350	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00353	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  00356	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 211  :                 work = temp << n_lshift_bit_count; temp = pp[-10]; work |= temp >> n_rshift_bit_count; op[-10] = work;

  00359	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  0035c	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  0035f	d3 e2		 shl	 edx, cl
  00361	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00364	b8 04 00 00 00	 mov	 eax, 4
  00369	6b c8 f6	 imul	 ecx, eax, -10
  0036c	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  0036f	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00372	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  00375	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00378	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  0037b	d3 ea		 shr	 edx, cl
  0037d	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  00380	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00383	b8 04 00 00 00	 mov	 eax, 4
  00388	6b c8 f6	 imul	 ecx, eax, -10
  0038b	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  0038e	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  00391	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 212  :                 work = temp << n_lshift_bit_count; temp = pp[-11]; work |= temp >> n_rshift_bit_count; op[-11] = work;

  00394	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00397	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  0039a	d3 e2		 shl	 edx, cl
  0039c	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  0039f	b8 04 00 00 00	 mov	 eax, 4
  003a4	6b c8 f5	 imul	 ecx, eax, -11
  003a7	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  003aa	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  003ad	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  003b0	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  003b3	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  003b6	d3 ea		 shr	 edx, cl
  003b8	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  003bb	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  003be	b8 04 00 00 00	 mov	 eax, 4
  003c3	6b c8 f5	 imul	 ecx, eax, -11
  003c6	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  003c9	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  003cc	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 213  :                 work = temp << n_lshift_bit_count; temp = pp[-12]; work |= temp >> n_rshift_bit_count; op[-12] = work;

  003cf	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  003d2	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  003d5	d3 e2		 shl	 edx, cl
  003d7	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  003da	b8 04 00 00 00	 mov	 eax, 4
  003df	6b c8 f4	 imul	 ecx, eax, -12
  003e2	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  003e5	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  003e8	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  003eb	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  003ee	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  003f1	d3 ea		 shr	 edx, cl
  003f3	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  003f6	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  003f9	b8 04 00 00 00	 mov	 eax, 4
  003fe	6b c8 f4	 imul	 ecx, eax, -12
  00401	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00404	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  00407	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 214  :                 work = temp << n_lshift_bit_count; temp = pp[-13]; work |= temp >> n_rshift_bit_count; op[-13] = work;

  0040a	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  0040d	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  00410	d3 e2		 shl	 edx, cl
  00412	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00415	b8 04 00 00 00	 mov	 eax, 4
  0041a	6b c8 f3	 imul	 ecx, eax, -13
  0041d	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00420	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00423	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  00426	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00429	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  0042c	d3 ea		 shr	 edx, cl
  0042e	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  00431	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00434	b8 04 00 00 00	 mov	 eax, 4
  00439	6b c8 f3	 imul	 ecx, eax, -13
  0043c	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  0043f	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  00442	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 215  :                 work = temp << n_lshift_bit_count; temp = pp[-14]; work |= temp >> n_rshift_bit_count; op[-14] = work;

  00445	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00448	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  0044b	d3 e2		 shl	 edx, cl
  0044d	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00450	b8 04 00 00 00	 mov	 eax, 4
  00455	6b c8 f2	 imul	 ecx, eax, -14
  00458	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  0045b	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0045e	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  00461	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00464	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  00467	d3 ea		 shr	 edx, cl
  00469	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  0046c	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  0046f	b8 04 00 00 00	 mov	 eax, 4
  00474	6b c8 f2	 imul	 ecx, eax, -14
  00477	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  0047a	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  0047d	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 216  :                 work = temp << n_lshift_bit_count; temp = pp[-15]; work |= temp >> n_rshift_bit_count; op[-15] = work;

  00480	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00483	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  00486	d3 e2		 shl	 edx, cl
  00488	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  0048b	b8 04 00 00 00	 mov	 eax, 4
  00490	6b c8 f1	 imul	 ecx, eax, -15
  00493	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00496	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00499	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  0049c	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  0049f	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  004a2	d3 ea		 shr	 edx, cl
  004a4	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  004a7	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  004aa	b8 04 00 00 00	 mov	 eax, 4
  004af	6b c8 f1	 imul	 ecx, eax, -15
  004b2	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  004b5	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  004b8	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 217  :                 work = temp << n_lshift_bit_count; temp = pp[-16]; work |= temp >> n_rshift_bit_count; op[-16] = work;

  004bb	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  004be	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  004c1	d3 e2		 shl	 edx, cl
  004c3	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  004c6	b8 04 00 00 00	 mov	 eax, 4
  004cb	6b c8 f0	 imul	 ecx, eax, -16
  004ce	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  004d1	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  004d4	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  004d7	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  004da	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  004dd	d3 ea		 shr	 edx, cl
  004df	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  004e2	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  004e5	b8 04 00 00 00	 mov	 eax, 4
  004ea	6b c8 f0	 imul	 ecx, eax, -16
  004ed	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  004f0	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  004f3	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 218  :                 work = temp << n_lshift_bit_count; temp = pp[-17]; work |= temp >> n_rshift_bit_count; op[-17] = work;

  004f6	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  004f9	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  004fc	d3 e2		 shl	 edx, cl
  004fe	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00501	b8 04 00 00 00	 mov	 eax, 4
  00506	6b c8 ef	 imul	 ecx, eax, -17
  00509	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  0050c	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0050f	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  00512	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00515	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  00518	d3 ea		 shr	 edx, cl
  0051a	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  0051d	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00520	b8 04 00 00 00	 mov	 eax, 4
  00525	6b c8 ef	 imul	 ecx, eax, -17
  00528	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  0052b	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  0052e	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 219  :                 work = temp << n_lshift_bit_count; temp = pp[-18]; work |= temp >> n_rshift_bit_count; op[-18] = work;

  00531	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00534	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  00537	d3 e2		 shl	 edx, cl
  00539	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  0053c	b8 04 00 00 00	 mov	 eax, 4
  00541	6b c8 ee	 imul	 ecx, eax, -18
  00544	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00547	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0054a	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  0054d	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00550	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  00553	d3 ea		 shr	 edx, cl
  00555	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  00558	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  0055b	b8 04 00 00 00	 mov	 eax, 4
  00560	6b c8 ee	 imul	 ecx, eax, -18
  00563	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00566	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  00569	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 220  :                 work = temp << n_lshift_bit_count; temp = pp[-19]; work |= temp >> n_rshift_bit_count; op[-19] = work;

  0056c	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  0056f	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  00572	d3 e2		 shl	 edx, cl
  00574	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00577	b8 04 00 00 00	 mov	 eax, 4
  0057c	6b c8 ed	 imul	 ecx, eax, -19
  0057f	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00582	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00585	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  00588	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  0058b	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  0058e	d3 ea		 shr	 edx, cl
  00590	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  00593	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00596	b8 04 00 00 00	 mov	 eax, 4
  0059b	6b c8 ed	 imul	 ecx, eax, -19
  0059e	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  005a1	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  005a4	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 221  :                 work = temp << n_lshift_bit_count; temp = pp[-20]; work |= temp >> n_rshift_bit_count; op[-20] = work;

  005a7	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  005aa	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  005ad	d3 e2		 shl	 edx, cl
  005af	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  005b2	b8 04 00 00 00	 mov	 eax, 4
  005b7	6b c8 ec	 imul	 ecx, eax, -20
  005ba	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  005bd	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  005c0	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  005c3	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  005c6	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  005c9	d3 ea		 shr	 edx, cl
  005cb	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  005ce	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  005d1	b8 04 00 00 00	 mov	 eax, 4
  005d6	6b c8 ec	 imul	 ecx, eax, -20
  005d9	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  005dc	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  005df	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 222  :                 work = temp << n_lshift_bit_count; temp = pp[-21]; work |= temp >> n_rshift_bit_count; op[-21] = work;

  005e2	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  005e5	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  005e8	d3 e2		 shl	 edx, cl
  005ea	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  005ed	b8 04 00 00 00	 mov	 eax, 4
  005f2	6b c8 eb	 imul	 ecx, eax, -21
  005f5	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  005f8	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  005fb	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  005fe	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00601	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  00604	d3 ea		 shr	 edx, cl
  00606	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  00609	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  0060c	b8 04 00 00 00	 mov	 eax, 4
  00611	6b c8 eb	 imul	 ecx, eax, -21
  00614	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00617	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  0061a	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 223  :                 work = temp << n_lshift_bit_count; temp = pp[-22]; work |= temp >> n_rshift_bit_count; op[-22] = work;

  0061d	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00620	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  00623	d3 e2		 shl	 edx, cl
  00625	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00628	b8 04 00 00 00	 mov	 eax, 4
  0062d	6b c8 ea	 imul	 ecx, eax, -22
  00630	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00633	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00636	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  00639	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  0063c	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  0063f	d3 ea		 shr	 edx, cl
  00641	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  00644	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00647	b8 04 00 00 00	 mov	 eax, 4
  0064c	6b c8 ea	 imul	 ecx, eax, -22
  0064f	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00652	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  00655	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 224  :                 work = temp << n_lshift_bit_count; temp = pp[-23]; work |= temp >> n_rshift_bit_count; op[-23] = work;

  00658	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  0065b	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  0065e	d3 e2		 shl	 edx, cl
  00660	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00663	b8 04 00 00 00	 mov	 eax, 4
  00668	6b c8 e9	 imul	 ecx, eax, -23
  0066b	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  0066e	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00671	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  00674	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00677	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  0067a	d3 ea		 shr	 edx, cl
  0067c	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  0067f	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00682	b8 04 00 00 00	 mov	 eax, 4
  00687	6b c8 e9	 imul	 ecx, eax, -23
  0068a	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  0068d	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  00690	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 225  :                 work = temp << n_lshift_bit_count; temp = pp[-24]; work |= temp >> n_rshift_bit_count; op[-24] = work;

  00693	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00696	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  00699	d3 e2		 shl	 edx, cl
  0069b	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  0069e	b8 04 00 00 00	 mov	 eax, 4
  006a3	6b c8 e8	 imul	 ecx, eax, -24
  006a6	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  006a9	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  006ac	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  006af	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  006b2	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  006b5	d3 ea		 shr	 edx, cl
  006b7	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  006ba	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  006bd	b8 04 00 00 00	 mov	 eax, 4
  006c2	6b c8 e8	 imul	 ecx, eax, -24
  006c5	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  006c8	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  006cb	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 226  :                 work = temp << n_lshift_bit_count; temp = pp[-25]; work |= temp >> n_rshift_bit_count; op[-25] = work;

  006ce	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  006d1	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  006d4	d3 e2		 shl	 edx, cl
  006d6	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  006d9	b8 04 00 00 00	 mov	 eax, 4
  006de	6b c8 e7	 imul	 ecx, eax, -25
  006e1	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  006e4	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  006e7	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  006ea	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  006ed	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  006f0	d3 ea		 shr	 edx, cl
  006f2	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  006f5	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  006f8	b8 04 00 00 00	 mov	 eax, 4
  006fd	6b c8 e7	 imul	 ecx, eax, -25
  00700	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00703	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  00706	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 227  :                 work = temp << n_lshift_bit_count; temp = pp[-26]; work |= temp >> n_rshift_bit_count; op[-26] = work;

  00709	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  0070c	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  0070f	d3 e2		 shl	 edx, cl
  00711	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00714	b8 04 00 00 00	 mov	 eax, 4
  00719	6b c8 e6	 imul	 ecx, eax, -26
  0071c	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  0071f	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00722	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  00725	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00728	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  0072b	d3 ea		 shr	 edx, cl
  0072d	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  00730	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00733	b8 04 00 00 00	 mov	 eax, 4
  00738	6b c8 e6	 imul	 ecx, eax, -26
  0073b	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  0073e	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  00741	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 228  :                 work = temp << n_lshift_bit_count; temp = pp[-27]; work |= temp >> n_rshift_bit_count; op[-27] = work;

  00744	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00747	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  0074a	d3 e2		 shl	 edx, cl
  0074c	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  0074f	b8 04 00 00 00	 mov	 eax, 4
  00754	6b c8 e5	 imul	 ecx, eax, -27
  00757	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  0075a	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0075d	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  00760	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00763	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  00766	d3 ea		 shr	 edx, cl
  00768	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  0076b	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  0076e	b8 04 00 00 00	 mov	 eax, 4
  00773	6b c8 e5	 imul	 ecx, eax, -27
  00776	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00779	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  0077c	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 229  :                 work = temp << n_lshift_bit_count; temp = pp[-28]; work |= temp >> n_rshift_bit_count; op[-28] = work;

  0077f	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00782	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  00785	d3 e2		 shl	 edx, cl
  00787	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  0078a	b8 04 00 00 00	 mov	 eax, 4
  0078f	6b c8 e4	 imul	 ecx, eax, -28
  00792	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00795	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00798	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  0079b	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  0079e	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  007a1	d3 ea		 shr	 edx, cl
  007a3	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  007a6	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  007a9	b8 04 00 00 00	 mov	 eax, 4
  007ae	6b c8 e4	 imul	 ecx, eax, -28
  007b1	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  007b4	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  007b7	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 230  :                 work = temp << n_lshift_bit_count; temp = pp[-29]; work |= temp >> n_rshift_bit_count; op[-29] = work;

  007ba	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  007bd	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  007c0	d3 e2		 shl	 edx, cl
  007c2	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  007c5	b8 04 00 00 00	 mov	 eax, 4
  007ca	6b c8 e3	 imul	 ecx, eax, -29
  007cd	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  007d0	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  007d3	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  007d6	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  007d9	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  007dc	d3 ea		 shr	 edx, cl
  007de	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  007e1	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  007e4	b8 04 00 00 00	 mov	 eax, 4
  007e9	6b c8 e3	 imul	 ecx, eax, -29
  007ec	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  007ef	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  007f2	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 231  :                 work = temp << n_lshift_bit_count; temp = pp[-30]; work |= temp >> n_rshift_bit_count; op[-30] = work;

  007f5	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  007f8	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  007fb	d3 e2		 shl	 edx, cl
  007fd	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00800	b8 04 00 00 00	 mov	 eax, 4
  00805	6b c8 e2	 imul	 ecx, eax, -30
  00808	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  0080b	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0080e	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  00811	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00814	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  00817	d3 ea		 shr	 edx, cl
  00819	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  0081c	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  0081f	b8 04 00 00 00	 mov	 eax, 4
  00824	6b c8 e2	 imul	 ecx, eax, -30
  00827	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  0082a	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  0082d	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 232  :                 work = temp << n_lshift_bit_count; temp = pp[-31]; work |= temp >> n_rshift_bit_count; op[-31] = work;

  00830	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00833	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  00836	d3 e2		 shl	 edx, cl
  00838	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  0083b	b8 04 00 00 00	 mov	 eax, 4
  00840	6b c8 e1	 imul	 ecx, eax, -31
  00843	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00846	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00849	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  0084c	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  0084f	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  00852	d3 ea		 shr	 edx, cl
  00854	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  00857	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  0085a	b8 04 00 00 00	 mov	 eax, 4
  0085f	6b c8 e1	 imul	 ecx, eax, -31
  00862	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00865	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  00868	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 233  :                 pp -= 32;

  0086b	8b 4d fc	 mov	 ecx, DWORD PTR _pp$[ebp]
  0086e	81 e9 80 00 00
	00		 sub	 ecx, 128		; 00000080H
  00874	89 4d fc	 mov	 DWORD PTR _pp$[ebp], ecx

; 234  :                 op -= 32;

  00877	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  0087a	81 ea 80 00 00
	00		 sub	 edx, 128		; 00000080H
  00880	89 55 f4	 mov	 DWORD PTR _op$[ebp], edx

; 235  :                 --count;

  00883	8b 45 dc	 mov	 eax, DWORD PTR _count$1[ebp]
  00886	83 e8 01	 sub	 eax, 1
  00889	89 45 dc	 mov	 DWORD PTR _count$1[ebp], eax

; 236  :             }

  0088c	e9 70 f8 ff ff	 jmp	 $LN2@LeftShift_
$LN3@LeftShift_:

; 237  : 
; 238  :             if (p_count & 0x10)

  00891	8b 4d f8	 mov	 ecx, DWORD PTR _p_count$[ebp]
  00894	83 e1 10	 and	 ecx, 16			; 00000010H
  00897	0f 84 c2 03 00
	00		 je	 $LN8@LeftShift_

; 239  :             {
; 240  :                 work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

  0089d	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  008a0	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  008a3	d3 e2		 shl	 edx, cl
  008a5	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  008a8	b8 04 00 00 00	 mov	 eax, 4
  008ad	6b c8 00	 imul	 ecx, eax, 0
  008b0	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  008b3	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  008b6	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  008b9	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  008bc	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  008bf	d3 ea		 shr	 edx, cl
  008c1	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  008c4	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  008c7	b8 04 00 00 00	 mov	 eax, 4
  008cc	6b c8 00	 imul	 ecx, eax, 0
  008cf	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  008d2	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  008d5	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 241  :                 work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

  008d8	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  008db	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  008de	d3 e2		 shl	 edx, cl
  008e0	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  008e3	b8 04 00 00 00	 mov	 eax, 4
  008e8	6b c8 ff	 imul	 ecx, eax, -1
  008eb	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  008ee	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  008f1	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  008f4	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  008f7	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  008fa	d3 ea		 shr	 edx, cl
  008fc	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  008ff	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00902	b8 04 00 00 00	 mov	 eax, 4
  00907	6b c8 ff	 imul	 ecx, eax, -1
  0090a	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  0090d	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  00910	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 242  :                 work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

  00913	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00916	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  00919	d3 e2		 shl	 edx, cl
  0091b	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  0091e	b8 04 00 00 00	 mov	 eax, 4
  00923	6b c8 fe	 imul	 ecx, eax, -2
  00926	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00929	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0092c	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  0092f	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00932	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  00935	d3 ea		 shr	 edx, cl
  00937	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  0093a	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  0093d	b8 04 00 00 00	 mov	 eax, 4
  00942	6b c8 fe	 imul	 ecx, eax, -2
  00945	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00948	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  0094b	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 243  :                 work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

  0094e	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00951	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  00954	d3 e2		 shl	 edx, cl
  00956	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00959	b8 04 00 00 00	 mov	 eax, 4
  0095e	6b c8 fd	 imul	 ecx, eax, -3
  00961	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00964	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00967	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  0096a	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  0096d	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  00970	d3 ea		 shr	 edx, cl
  00972	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  00975	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00978	b8 04 00 00 00	 mov	 eax, 4
  0097d	6b c8 fd	 imul	 ecx, eax, -3
  00980	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00983	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  00986	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 244  :                 work = temp << n_lshift_bit_count; temp = pp[-4]; work |= temp >> n_rshift_bit_count; op[-4] = work;

  00989	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  0098c	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  0098f	d3 e2		 shl	 edx, cl
  00991	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00994	b8 04 00 00 00	 mov	 eax, 4
  00999	6b c8 fc	 imul	 ecx, eax, -4
  0099c	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  0099f	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  009a2	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  009a5	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  009a8	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  009ab	d3 ea		 shr	 edx, cl
  009ad	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  009b0	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  009b3	b8 04 00 00 00	 mov	 eax, 4
  009b8	6b c8 fc	 imul	 ecx, eax, -4
  009bb	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  009be	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  009c1	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 245  :                 work = temp << n_lshift_bit_count; temp = pp[-5]; work |= temp >> n_rshift_bit_count; op[-5] = work;

  009c4	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  009c7	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  009ca	d3 e2		 shl	 edx, cl
  009cc	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  009cf	b8 04 00 00 00	 mov	 eax, 4
  009d4	6b c8 fb	 imul	 ecx, eax, -5
  009d7	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  009da	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  009dd	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  009e0	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  009e3	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  009e6	d3 ea		 shr	 edx, cl
  009e8	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  009eb	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  009ee	b8 04 00 00 00	 mov	 eax, 4
  009f3	6b c8 fb	 imul	 ecx, eax, -5
  009f6	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  009f9	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  009fc	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 246  :                 work = temp << n_lshift_bit_count; temp = pp[-6]; work |= temp >> n_rshift_bit_count; op[-6] = work;

  009ff	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00a02	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  00a05	d3 e2		 shl	 edx, cl
  00a07	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00a0a	b8 04 00 00 00	 mov	 eax, 4
  00a0f	6b c8 fa	 imul	 ecx, eax, -6
  00a12	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00a15	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00a18	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  00a1b	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00a1e	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  00a21	d3 ea		 shr	 edx, cl
  00a23	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  00a26	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00a29	b8 04 00 00 00	 mov	 eax, 4
  00a2e	6b c8 fa	 imul	 ecx, eax, -6
  00a31	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00a34	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  00a37	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 247  :                 work = temp << n_lshift_bit_count; temp = pp[-7]; work |= temp >> n_rshift_bit_count; op[-7] = work;

  00a3a	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00a3d	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  00a40	d3 e2		 shl	 edx, cl
  00a42	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00a45	b8 04 00 00 00	 mov	 eax, 4
  00a4a	6b c8 f9	 imul	 ecx, eax, -7
  00a4d	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00a50	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00a53	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  00a56	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00a59	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  00a5c	d3 ea		 shr	 edx, cl
  00a5e	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  00a61	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00a64	b8 04 00 00 00	 mov	 eax, 4
  00a69	6b c8 f9	 imul	 ecx, eax, -7
  00a6c	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00a6f	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  00a72	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 248  :                 work = temp << n_lshift_bit_count; temp = pp[-8]; work |= temp >> n_rshift_bit_count; op[-8] = work;

  00a75	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00a78	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  00a7b	d3 e2		 shl	 edx, cl
  00a7d	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00a80	b8 04 00 00 00	 mov	 eax, 4
  00a85	6b c8 f8	 imul	 ecx, eax, -8
  00a88	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00a8b	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00a8e	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  00a91	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00a94	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  00a97	d3 ea		 shr	 edx, cl
  00a99	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  00a9c	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00a9f	b8 04 00 00 00	 mov	 eax, 4
  00aa4	6b c8 f8	 imul	 ecx, eax, -8
  00aa7	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00aaa	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  00aad	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 249  :                 work = temp << n_lshift_bit_count; temp = pp[-9]; work |= temp >> n_rshift_bit_count; op[-9] = work;

  00ab0	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00ab3	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  00ab6	d3 e2		 shl	 edx, cl
  00ab8	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00abb	b8 04 00 00 00	 mov	 eax, 4
  00ac0	6b c8 f7	 imul	 ecx, eax, -9
  00ac3	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00ac6	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00ac9	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  00acc	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00acf	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  00ad2	d3 ea		 shr	 edx, cl
  00ad4	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  00ad7	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00ada	b8 04 00 00 00	 mov	 eax, 4
  00adf	6b c8 f7	 imul	 ecx, eax, -9
  00ae2	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00ae5	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  00ae8	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 250  :                 work = temp << n_lshift_bit_count; temp = pp[-10]; work |= temp >> n_rshift_bit_count; op[-10] = work;

  00aeb	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00aee	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  00af1	d3 e2		 shl	 edx, cl
  00af3	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00af6	b8 04 00 00 00	 mov	 eax, 4
  00afb	6b c8 f6	 imul	 ecx, eax, -10
  00afe	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00b01	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00b04	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  00b07	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00b0a	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  00b0d	d3 ea		 shr	 edx, cl
  00b0f	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  00b12	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00b15	b8 04 00 00 00	 mov	 eax, 4
  00b1a	6b c8 f6	 imul	 ecx, eax, -10
  00b1d	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00b20	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  00b23	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 251  :                 work = temp << n_lshift_bit_count; temp = pp[-11]; work |= temp >> n_rshift_bit_count; op[-11] = work;

  00b26	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00b29	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  00b2c	d3 e2		 shl	 edx, cl
  00b2e	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00b31	b8 04 00 00 00	 mov	 eax, 4
  00b36	6b c8 f5	 imul	 ecx, eax, -11
  00b39	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00b3c	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00b3f	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  00b42	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00b45	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  00b48	d3 ea		 shr	 edx, cl
  00b4a	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  00b4d	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00b50	b8 04 00 00 00	 mov	 eax, 4
  00b55	6b c8 f5	 imul	 ecx, eax, -11
  00b58	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00b5b	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  00b5e	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 252  :                 work = temp << n_lshift_bit_count; temp = pp[-12]; work |= temp >> n_rshift_bit_count; op[-12] = work;

  00b61	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00b64	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  00b67	d3 e2		 shl	 edx, cl
  00b69	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00b6c	b8 04 00 00 00	 mov	 eax, 4
  00b71	6b c8 f4	 imul	 ecx, eax, -12
  00b74	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00b77	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00b7a	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  00b7d	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00b80	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  00b83	d3 ea		 shr	 edx, cl
  00b85	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  00b88	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00b8b	b8 04 00 00 00	 mov	 eax, 4
  00b90	6b c8 f4	 imul	 ecx, eax, -12
  00b93	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00b96	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  00b99	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 253  :                 work = temp << n_lshift_bit_count; temp = pp[-13]; work |= temp >> n_rshift_bit_count; op[-13] = work;

  00b9c	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00b9f	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  00ba2	d3 e2		 shl	 edx, cl
  00ba4	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00ba7	b8 04 00 00 00	 mov	 eax, 4
  00bac	6b c8 f3	 imul	 ecx, eax, -13
  00baf	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00bb2	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00bb5	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  00bb8	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00bbb	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  00bbe	d3 ea		 shr	 edx, cl
  00bc0	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  00bc3	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00bc6	b8 04 00 00 00	 mov	 eax, 4
  00bcb	6b c8 f3	 imul	 ecx, eax, -13
  00bce	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00bd1	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  00bd4	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 254  :                 work = temp << n_lshift_bit_count; temp = pp[-14]; work |= temp >> n_rshift_bit_count; op[-14] = work;

  00bd7	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00bda	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  00bdd	d3 e2		 shl	 edx, cl
  00bdf	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00be2	b8 04 00 00 00	 mov	 eax, 4
  00be7	6b c8 f2	 imul	 ecx, eax, -14
  00bea	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00bed	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00bf0	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  00bf3	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00bf6	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  00bf9	d3 ea		 shr	 edx, cl
  00bfb	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  00bfe	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00c01	b8 04 00 00 00	 mov	 eax, 4
  00c06	6b c8 f2	 imul	 ecx, eax, -14
  00c09	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00c0c	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  00c0f	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 255  :                 work = temp << n_lshift_bit_count; temp = pp[-15]; work |= temp >> n_rshift_bit_count; op[-15] = work;

  00c12	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00c15	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  00c18	d3 e2		 shl	 edx, cl
  00c1a	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00c1d	b8 04 00 00 00	 mov	 eax, 4
  00c22	6b c8 f1	 imul	 ecx, eax, -15
  00c25	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00c28	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00c2b	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  00c2e	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00c31	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  00c34	d3 ea		 shr	 edx, cl
  00c36	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  00c39	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00c3c	b8 04 00 00 00	 mov	 eax, 4
  00c41	6b c8 f1	 imul	 ecx, eax, -15
  00c44	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00c47	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  00c4a	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 256  :                 pp -= 16;

  00c4d	8b 4d fc	 mov	 ecx, DWORD PTR _pp$[ebp]
  00c50	83 e9 40	 sub	 ecx, 64			; 00000040H
  00c53	89 4d fc	 mov	 DWORD PTR _pp$[ebp], ecx

; 257  :                 op -= 16;

  00c56	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00c59	83 ea 40	 sub	 edx, 64			; 00000040H
  00c5c	89 55 f4	 mov	 DWORD PTR _op$[ebp], edx
$LN8@LeftShift_:

; 258  :             }
; 259  : 
; 260  :             if (p_count & 0x8)

  00c5f	8b 45 f8	 mov	 eax, DWORD PTR _p_count$[ebp]
  00c62	83 e0 08	 and	 eax, 8
  00c65	0f 84 ea 01 00
	00		 je	 $LN9@LeftShift_

; 261  :             {
; 262  :                 work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

  00c6b	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00c6e	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  00c71	d3 e2		 shl	 edx, cl
  00c73	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00c76	b8 04 00 00 00	 mov	 eax, 4
  00c7b	6b c8 00	 imul	 ecx, eax, 0
  00c7e	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00c81	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00c84	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  00c87	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00c8a	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  00c8d	d3 ea		 shr	 edx, cl
  00c8f	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  00c92	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00c95	b8 04 00 00 00	 mov	 eax, 4
  00c9a	6b c8 00	 imul	 ecx, eax, 0
  00c9d	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00ca0	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  00ca3	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 263  :                 work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

  00ca6	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00ca9	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  00cac	d3 e2		 shl	 edx, cl
  00cae	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00cb1	b8 04 00 00 00	 mov	 eax, 4
  00cb6	6b c8 ff	 imul	 ecx, eax, -1
  00cb9	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00cbc	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00cbf	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  00cc2	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00cc5	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  00cc8	d3 ea		 shr	 edx, cl
  00cca	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  00ccd	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00cd0	b8 04 00 00 00	 mov	 eax, 4
  00cd5	6b c8 ff	 imul	 ecx, eax, -1
  00cd8	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00cdb	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  00cde	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 264  :                 work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

  00ce1	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00ce4	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  00ce7	d3 e2		 shl	 edx, cl
  00ce9	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00cec	b8 04 00 00 00	 mov	 eax, 4
  00cf1	6b c8 fe	 imul	 ecx, eax, -2
  00cf4	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00cf7	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00cfa	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  00cfd	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00d00	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  00d03	d3 ea		 shr	 edx, cl
  00d05	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  00d08	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00d0b	b8 04 00 00 00	 mov	 eax, 4
  00d10	6b c8 fe	 imul	 ecx, eax, -2
  00d13	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00d16	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  00d19	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 265  :                 work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

  00d1c	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00d1f	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  00d22	d3 e2		 shl	 edx, cl
  00d24	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00d27	b8 04 00 00 00	 mov	 eax, 4
  00d2c	6b c8 fd	 imul	 ecx, eax, -3
  00d2f	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00d32	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00d35	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  00d38	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00d3b	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  00d3e	d3 ea		 shr	 edx, cl
  00d40	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  00d43	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00d46	b8 04 00 00 00	 mov	 eax, 4
  00d4b	6b c8 fd	 imul	 ecx, eax, -3
  00d4e	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00d51	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  00d54	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 266  :                 work = temp << n_lshift_bit_count; temp = pp[-4]; work |= temp >> n_rshift_bit_count; op[-4] = work;

  00d57	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00d5a	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  00d5d	d3 e2		 shl	 edx, cl
  00d5f	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00d62	b8 04 00 00 00	 mov	 eax, 4
  00d67	6b c8 fc	 imul	 ecx, eax, -4
  00d6a	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00d6d	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00d70	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  00d73	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00d76	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  00d79	d3 ea		 shr	 edx, cl
  00d7b	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  00d7e	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00d81	b8 04 00 00 00	 mov	 eax, 4
  00d86	6b c8 fc	 imul	 ecx, eax, -4
  00d89	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00d8c	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  00d8f	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 267  :                 work = temp << n_lshift_bit_count; temp = pp[-5]; work |= temp >> n_rshift_bit_count; op[-5] = work;

  00d92	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00d95	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  00d98	d3 e2		 shl	 edx, cl
  00d9a	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00d9d	b8 04 00 00 00	 mov	 eax, 4
  00da2	6b c8 fb	 imul	 ecx, eax, -5
  00da5	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00da8	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00dab	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  00dae	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00db1	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  00db4	d3 ea		 shr	 edx, cl
  00db6	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  00db9	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00dbc	b8 04 00 00 00	 mov	 eax, 4
  00dc1	6b c8 fb	 imul	 ecx, eax, -5
  00dc4	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00dc7	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  00dca	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 268  :                 work = temp << n_lshift_bit_count; temp = pp[-6]; work |= temp >> n_rshift_bit_count; op[-6] = work;

  00dcd	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00dd0	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  00dd3	d3 e2		 shl	 edx, cl
  00dd5	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00dd8	b8 04 00 00 00	 mov	 eax, 4
  00ddd	6b c8 fa	 imul	 ecx, eax, -6
  00de0	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00de3	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00de6	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  00de9	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00dec	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  00def	d3 ea		 shr	 edx, cl
  00df1	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  00df4	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00df7	b8 04 00 00 00	 mov	 eax, 4
  00dfc	6b c8 fa	 imul	 ecx, eax, -6
  00dff	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00e02	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  00e05	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 269  :                 work = temp << n_lshift_bit_count; temp = pp[-7]; work |= temp >> n_rshift_bit_count; op[-7] = work;

  00e08	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00e0b	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  00e0e	d3 e2		 shl	 edx, cl
  00e10	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00e13	b8 04 00 00 00	 mov	 eax, 4
  00e18	6b c8 f9	 imul	 ecx, eax, -7
  00e1b	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00e1e	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00e21	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  00e24	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00e27	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  00e2a	d3 ea		 shr	 edx, cl
  00e2c	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  00e2f	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00e32	b8 04 00 00 00	 mov	 eax, 4
  00e37	6b c8 f9	 imul	 ecx, eax, -7
  00e3a	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00e3d	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  00e40	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 270  :                 pp -= 8;

  00e43	8b 4d fc	 mov	 ecx, DWORD PTR _pp$[ebp]
  00e46	83 e9 20	 sub	 ecx, 32			; 00000020H
  00e49	89 4d fc	 mov	 DWORD PTR _pp$[ebp], ecx

; 271  :                 op -= 8;

  00e4c	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00e4f	83 ea 20	 sub	 edx, 32			; 00000020H
  00e52	89 55 f4	 mov	 DWORD PTR _op$[ebp], edx
$LN9@LeftShift_:

; 272  :             }
; 273  : 
; 274  :             if (p_count & 0x4)

  00e55	8b 45 f8	 mov	 eax, DWORD PTR _p_count$[ebp]
  00e58	83 e0 04	 and	 eax, 4
  00e5b	0f 84 fe 00 00
	00		 je	 $LN10@LeftShift_

; 275  :             {
; 276  :                 work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

  00e61	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00e64	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  00e67	d3 e2		 shl	 edx, cl
  00e69	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00e6c	b8 04 00 00 00	 mov	 eax, 4
  00e71	6b c8 00	 imul	 ecx, eax, 0
  00e74	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00e77	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00e7a	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  00e7d	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00e80	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  00e83	d3 ea		 shr	 edx, cl
  00e85	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  00e88	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00e8b	b8 04 00 00 00	 mov	 eax, 4
  00e90	6b c8 00	 imul	 ecx, eax, 0
  00e93	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00e96	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  00e99	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 277  :                 work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

  00e9c	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00e9f	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  00ea2	d3 e2		 shl	 edx, cl
  00ea4	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00ea7	b8 04 00 00 00	 mov	 eax, 4
  00eac	6b c8 ff	 imul	 ecx, eax, -1
  00eaf	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00eb2	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00eb5	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  00eb8	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00ebb	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  00ebe	d3 ea		 shr	 edx, cl
  00ec0	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  00ec3	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00ec6	b8 04 00 00 00	 mov	 eax, 4
  00ecb	6b c8 ff	 imul	 ecx, eax, -1
  00ece	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00ed1	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  00ed4	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 278  :                 work = temp << n_lshift_bit_count; temp = pp[-2]; work |= temp >> n_rshift_bit_count; op[-2] = work;

  00ed7	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00eda	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  00edd	d3 e2		 shl	 edx, cl
  00edf	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00ee2	b8 04 00 00 00	 mov	 eax, 4
  00ee7	6b c8 fe	 imul	 ecx, eax, -2
  00eea	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00eed	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00ef0	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  00ef3	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00ef6	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  00ef9	d3 ea		 shr	 edx, cl
  00efb	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  00efe	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00f01	b8 04 00 00 00	 mov	 eax, 4
  00f06	6b c8 fe	 imul	 ecx, eax, -2
  00f09	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00f0c	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  00f0f	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 279  :                 work = temp << n_lshift_bit_count; temp = pp[-3]; work |= temp >> n_rshift_bit_count; op[-3] = work;

  00f12	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00f15	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  00f18	d3 e2		 shl	 edx, cl
  00f1a	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00f1d	b8 04 00 00 00	 mov	 eax, 4
  00f22	6b c8 fd	 imul	 ecx, eax, -3
  00f25	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00f28	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00f2b	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  00f2e	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00f31	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  00f34	d3 ea		 shr	 edx, cl
  00f36	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  00f39	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00f3c	b8 04 00 00 00	 mov	 eax, 4
  00f41	6b c8 fd	 imul	 ecx, eax, -3
  00f44	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00f47	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  00f4a	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 280  :                 pp -= 4;

  00f4d	8b 4d fc	 mov	 ecx, DWORD PTR _pp$[ebp]
  00f50	83 e9 10	 sub	 ecx, 16			; 00000010H
  00f53	89 4d fc	 mov	 DWORD PTR _pp$[ebp], ecx

; 281  :                 op -= 4;

  00f56	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00f59	83 ea 10	 sub	 edx, 16			; 00000010H
  00f5c	89 55 f4	 mov	 DWORD PTR _op$[ebp], edx
$LN10@LeftShift_:

; 282  :             }
; 283  : 
; 284  :             if (p_count & 0x2)

  00f5f	8b 45 f8	 mov	 eax, DWORD PTR _p_count$[ebp]
  00f62	83 e0 02	 and	 eax, 2
  00f65	0f 84 88 00 00
	00		 je	 $LN11@LeftShift_

; 285  :             {
; 286  :                 work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

  00f6b	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00f6e	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  00f71	d3 e2		 shl	 edx, cl
  00f73	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00f76	b8 04 00 00 00	 mov	 eax, 4
  00f7b	6b c8 00	 imul	 ecx, eax, 0
  00f7e	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00f81	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00f84	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  00f87	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00f8a	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  00f8d	d3 ea		 shr	 edx, cl
  00f8f	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  00f92	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00f95	b8 04 00 00 00	 mov	 eax, 4
  00f9a	6b c8 00	 imul	 ecx, eax, 0
  00f9d	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00fa0	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  00fa3	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 287  :                 work = temp << n_lshift_bit_count; temp = pp[-1]; work |= temp >> n_rshift_bit_count; op[-1] = work;

  00fa6	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00fa9	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  00fac	d3 e2		 shl	 edx, cl
  00fae	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00fb1	b8 04 00 00 00	 mov	 eax, 4
  00fb6	6b c8 ff	 imul	 ecx, eax, -1
  00fb9	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00fbc	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00fbf	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  00fc2	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00fc5	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  00fc8	d3 ea		 shr	 edx, cl
  00fca	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  00fcd	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  00fd0	b8 04 00 00 00	 mov	 eax, 4
  00fd5	6b c8 ff	 imul	 ecx, eax, -1
  00fd8	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00fdb	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  00fde	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 288  :                 pp -= 2;

  00fe1	8b 4d fc	 mov	 ecx, DWORD PTR _pp$[ebp]
  00fe4	83 e9 08	 sub	 ecx, 8
  00fe7	89 4d fc	 mov	 DWORD PTR _pp$[ebp], ecx

; 289  :                 op -= 2;

  00fea	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00fed	83 ea 08	 sub	 edx, 8
  00ff0	89 55 f4	 mov	 DWORD PTR _op$[ebp], edx
$LN11@LeftShift_:

; 290  :             }
; 291  : 
; 292  :             if (p_count & 0x1)

  00ff3	8b 45 f8	 mov	 eax, DWORD PTR _p_count$[ebp]
  00ff6	83 e0 01	 and	 eax, 1
  00ff9	74 4d		 je	 SHORT $LN12@LeftShift_

; 293  :             {
; 294  :                 work = temp << n_lshift_bit_count; temp = pp[-0]; work |= temp >> n_rshift_bit_count; op[-0] = work;

  00ffb	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  00ffe	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  01001	d3 e2		 shl	 edx, cl
  01003	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  01006	b8 04 00 00 00	 mov	 eax, 4
  0100b	6b c8 00	 imul	 ecx, eax, 0
  0100e	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  01011	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  01014	89 45 e4	 mov	 DWORD PTR _temp$3[ebp], eax
  01017	8b 55 e4	 mov	 edx, DWORD PTR _temp$3[ebp]
  0101a	8b 4d e8	 mov	 ecx, DWORD PTR _n_rshift_bit_count$4[ebp]
  0101d	d3 ea		 shr	 edx, cl
  0101f	0b 55 e0	 or	 edx, DWORD PTR _work$2[ebp]
  01022	89 55 e0	 mov	 DWORD PTR _work$2[ebp], edx
  01025	b8 04 00 00 00	 mov	 eax, 4
  0102a	6b c8 00	 imul	 ecx, eax, 0
  0102d	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  01030	8b 45 e0	 mov	 eax, DWORD PTR _work$2[ebp]
  01033	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 295  :                 pp -= 1;

  01036	8b 4d fc	 mov	 ecx, DWORD PTR _pp$[ebp]
  01039	83 e9 04	 sub	 ecx, 4
  0103c	89 4d fc	 mov	 DWORD PTR _pp$[ebp], ecx

; 296  :                 op -= 1;

  0103f	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  01042	83 ea 04	 sub	 edx, 4
  01045	89 55 f4	 mov	 DWORD PTR _op$[ebp], edx
$LN12@LeftShift_:

; 297  :             }
; 298  :             work = temp << n_lshift_bit_count;

  01048	8b 45 e4	 mov	 eax, DWORD PTR _temp$3[ebp]
  0104b	8b 4d ec	 mov	 ecx, DWORD PTR _n_lshift_bit_count$[ebp]
  0104e	d3 e0		 shl	 eax, cl
  01050	89 45 e0	 mov	 DWORD PTR _work$2[ebp], eax

; 299  :             *op = work;

  01053	8b 4d f4	 mov	 ecx, DWORD PTR _op$[ebp]
  01056	8b 55 e0	 mov	 edx, DWORD PTR _work$2[ebp]
  01059	89 11		 mov	 DWORD PTR [ecx], edx

; 300  : 
; 301  :             if (padding_zero)

  0105b	83 7d 18 00	 cmp	 DWORD PTR _padding_zero$[ebp], 0
  0105f	74 10		 je	 SHORT $LN1@LeftShift_

; 302  :                 _ZERO_MEMORY_UNIT(o, n_word_count);

  01061	8b 45 f0	 mov	 eax, DWORD PTR _n_word_count$[ebp]
  01064	50		 push	 eax
  01065	8b 4d 14	 mov	 ecx, DWORD PTR _o$[ebp]
  01068	51		 push	 ecx
  01069	e8 00 00 00 00	 call	 __ZERO_MEMORY_UNIT
  0106e	83 c4 08	 add	 esp, 8
$LN1@LeftShift_:

; 303  :         }
; 304  :     }

  01071	83 c4 24	 add	 esp, 36			; 00000024H
  01074	3b ec		 cmp	 ebp, esp
  01076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0107b	8b e5		 mov	 esp, ebp
  0107d	5d		 pop	 ebp
  0107e	c3		 ret	 0
?LeftShift_Imp@Internal@Core@Math@Palmtree@@YAXPAIII0H@Z ENDP ; Palmtree::Math::Core::Internal::LeftShift_Imp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_shift.cpp
_TEXT	SEGMENT
tv85 = -44						; size = 4
_count$1 = -40						; size = 4
_t_count$2 = -36					; size = 4
_work$3 = -32						; size = 4
_temp$4 = -28						; size = 4
_n_lshift_bit_count$5 = -24				; size = 4
_n_rshift_bit_count$ = -20				; size = 4
_n_word_count$ = -16					; size = 4
_op$ = -12						; size = 4
_p_count$ = -8						; size = 4
_pp$ = -4						; size = 4
_p$ = 8							; size = 4
_p_word_count$ = 12					; size = 4
_n$ = 16						; size = 4
_o$ = 20						; size = 4
_padding_zero$ = 24					; size = 4
?RightShift_Imp@Internal@Core@Math@Palmtree@@YAXPAIII0H@Z PROC ; Palmtree::Math::Core::Internal::RightShift_Imp

; 37   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	57		 push	 edi
  00007	8d 7d d4	 lea	 edi, DWORD PTR [ebp-44]
  0000a	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET __BCD96457_pmc_shift@cpp
  0001b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 38   :         __UNIT_TYPE* pp = p;

  00020	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00023	89 45 fc	 mov	 DWORD PTR _pp$[ebp], eax

; 39   :         __UNIT_TYPE p_count = p_word_count;

  00026	8b 4d 0c	 mov	 ecx, DWORD PTR _p_word_count$[ebp]
  00029	89 4d f8	 mov	 DWORD PTR _p_count$[ebp], ecx

; 40   :         __UNIT_TYPE* op = o;

  0002c	8b 55 14	 mov	 edx, DWORD PTR _o$[ebp]
  0002f	89 55 f4	 mov	 DWORD PTR _op$[ebp], edx

; 41   :         // n_word_count ワード右に移動し、更に n_bit_count ビット右に移動する。
; 42   :         __UNIT_TYPE n_word_count = n / __UNIT_TYPE_BIT_COUNT;

  00032	8b 45 10	 mov	 eax, DWORD PTR _n$[ebp]
  00035	c1 e8 05	 shr	 eax, 5
  00038	89 45 f0	 mov	 DWORD PTR _n_word_count$[ebp], eax

; 43   :         __UNIT_TYPE n_rshift_bit_count = n % __UNIT_TYPE_BIT_COUNT;

  0003b	8b 45 10	 mov	 eax, DWORD PTR _n$[ebp]
  0003e	33 d2		 xor	 edx, edx
  00040	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00045	f7 f1		 div	 ecx
  00047	89 55 ec	 mov	 DWORD PTR _n_rshift_bit_count$[ebp], edx

; 44   :         if (n_rshift_bit_count == 0)

  0004a	83 7d ec 00	 cmp	 DWORD PTR _n_rshift_bit_count$[ebp], 0
  0004e	75 46		 jne	 SHORT $LN4@RightShift

; 45   :         {
; 46   :             // シフト数がちょうどワード境界分であれば単にワード単位のデータ移動のみ行う。
; 47   :             _COPY_MEMORY_UNIT(op, pp + n_word_count, p_count - n_word_count);

  00050	8b 55 f8	 mov	 edx, DWORD PTR _p_count$[ebp]
  00053	2b 55 f0	 sub	 edx, DWORD PTR _n_word_count$[ebp]
  00056	52		 push	 edx
  00057	8b 45 f0	 mov	 eax, DWORD PTR _n_word_count$[ebp]
  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _pp$[ebp]
  0005d	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00060	52		 push	 edx
  00061	8b 45 f4	 mov	 eax, DWORD PTR _op$[ebp]
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 __COPY_MEMORY_UNIT
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 48   :             if (padding_zero)

  0006d	83 7d 18 00	 cmp	 DWORD PTR _padding_zero$[ebp], 0
  00071	74 1e		 je	 SHORT $LN6@RightShift

; 49   :                 _ZERO_MEMORY_UNIT(op + p_count - n_word_count, n_word_count);

  00073	8b 4d f0	 mov	 ecx, DWORD PTR _n_word_count$[ebp]
  00076	51		 push	 ecx
  00077	8b 55 f8	 mov	 edx, DWORD PTR _p_count$[ebp]
  0007a	8b 45 f4	 mov	 eax, DWORD PTR _op$[ebp]
  0007d	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  00080	8b 55 f0	 mov	 edx, DWORD PTR _n_word_count$[ebp]
  00083	c1 e2 02	 shl	 edx, 2
  00086	2b ca		 sub	 ecx, edx
  00088	51		 push	 ecx
  00089	e8 00 00 00 00	 call	 __ZERO_MEMORY_UNIT
  0008e	83 c4 08	 add	 esp, 8
$LN6@RightShift:

; 50   :         }
; 51   :         else

  00091	e9 c4 0f 00 00	 jmp	 $LN1@RightShift
$LN4@RightShift:

; 52   :         {
; 53   :             pp += n_word_count;

  00096	8b 45 f0	 mov	 eax, DWORD PTR _n_word_count$[ebp]
  00099	8b 4d fc	 mov	 ecx, DWORD PTR _pp$[ebp]
  0009c	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  0009f	89 55 fc	 mov	 DWORD PTR _pp$[ebp], edx

; 54   :             __UNIT_TYPE n_lshift_bit_count = __UNIT_TYPE_BIT_COUNT - n_rshift_bit_count;

  000a2	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  000a7	2b 45 ec	 sub	 eax, DWORD PTR _n_rshift_bit_count$[ebp]
  000aa	89 45 e8	 mov	 DWORD PTR _n_lshift_bit_count$5[ebp], eax

; 55   :             // p_count - n_word_count 回繰り返し
; 56   : 
; 57   :             __UNIT_TYPE temp = *pp++;

  000ad	8b 4d fc	 mov	 ecx, DWORD PTR _pp$[ebp]
  000b0	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b2	89 55 d4	 mov	 DWORD PTR tv85[ebp], edx
  000b5	8b 45 fc	 mov	 eax, DWORD PTR _pp$[ebp]
  000b8	83 c0 04	 add	 eax, 4
  000bb	89 45 fc	 mov	 DWORD PTR _pp$[ebp], eax
  000be	8b 4d d4	 mov	 ecx, DWORD PTR tv85[ebp]
  000c1	89 4d e4	 mov	 DWORD PTR _temp$4[ebp], ecx

; 58   :             __UNIT_TYPE work;
; 59   :             __UNIT_TYPE t_count = p_count - n_word_count - 1;

  000c4	8b 55 f8	 mov	 edx, DWORD PTR _p_count$[ebp]
  000c7	2b 55 f0	 sub	 edx, DWORD PTR _n_word_count$[ebp]
  000ca	83 ea 01	 sub	 edx, 1
  000cd	89 55 dc	 mov	 DWORD PTR _t_count$2[ebp], edx

; 60   : 
; 61   :             __UNIT_TYPE count = t_count >> 5;

  000d0	8b 45 dc	 mov	 eax, DWORD PTR _t_count$2[ebp]
  000d3	c1 e8 05	 shr	 eax, 5
  000d6	89 45 d8	 mov	 DWORD PTR _count$1[ebp], eax
$LN2@RightShift:

; 62   :             while (count > 0)

  000d9	83 7d d8 00	 cmp	 DWORD PTR _count$1[ebp], 0
  000dd	0f 86 83 07 00
	00		 jbe	 $LN3@RightShift

; 63   :             {
; 64   :                 work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

  000e3	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  000e6	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  000e9	d3 ea		 shr	 edx, cl
  000eb	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  000ee	b8 04 00 00 00	 mov	 eax, 4
  000f3	6b c8 00	 imul	 ecx, eax, 0
  000f6	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  000f9	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  000fc	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  000ff	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00102	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  00105	d3 e2		 shl	 edx, cl
  00107	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  0010a	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  0010d	b8 04 00 00 00	 mov	 eax, 4
  00112	6b c8 00	 imul	 ecx, eax, 0
  00115	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00118	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  0011b	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 65   :                 work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;

  0011e	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00121	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  00124	d3 ea		 shr	 edx, cl
  00126	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00129	b8 04 00 00 00	 mov	 eax, 4
  0012e	c1 e0 00	 shl	 eax, 0
  00131	8b 4d fc	 mov	 ecx, DWORD PTR _pp$[ebp]
  00134	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00137	89 55 e4	 mov	 DWORD PTR _temp$4[ebp], edx
  0013a	8b 45 e4	 mov	 eax, DWORD PTR _temp$4[ebp]
  0013d	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  00140	d3 e0		 shl	 eax, cl
  00142	0b 45 e0	 or	 eax, DWORD PTR _work$3[ebp]
  00145	89 45 e0	 mov	 DWORD PTR _work$3[ebp], eax
  00148	b9 04 00 00 00	 mov	 ecx, 4
  0014d	c1 e1 00	 shl	 ecx, 0
  00150	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00153	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  00156	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 66   :                 work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;

  00159	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  0015c	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  0015f	d3 ea		 shr	 edx, cl
  00161	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00164	b8 04 00 00 00	 mov	 eax, 4
  00169	d1 e0		 shl	 eax, 1
  0016b	8b 4d fc	 mov	 ecx, DWORD PTR _pp$[ebp]
  0016e	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00171	89 55 e4	 mov	 DWORD PTR _temp$4[ebp], edx
  00174	8b 45 e4	 mov	 eax, DWORD PTR _temp$4[ebp]
  00177	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  0017a	d3 e0		 shl	 eax, cl
  0017c	0b 45 e0	 or	 eax, DWORD PTR _work$3[ebp]
  0017f	89 45 e0	 mov	 DWORD PTR _work$3[ebp], eax
  00182	b9 04 00 00 00	 mov	 ecx, 4
  00187	d1 e1		 shl	 ecx, 1
  00189	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  0018c	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  0018f	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 67   :                 work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;

  00192	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00195	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  00198	d3 ea		 shr	 edx, cl
  0019a	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  0019d	b8 04 00 00 00	 mov	 eax, 4
  001a2	6b c8 03	 imul	 ecx, eax, 3
  001a5	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  001a8	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  001ab	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  001ae	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  001b1	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  001b4	d3 e2		 shl	 edx, cl
  001b6	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  001b9	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  001bc	b8 04 00 00 00	 mov	 eax, 4
  001c1	6b c8 03	 imul	 ecx, eax, 3
  001c4	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  001c7	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  001ca	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 68   :                 work = temp >> n_rshift_bit_count; temp = pp[4]; work |= temp << n_lshift_bit_count; op[4] = work;

  001cd	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  001d0	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  001d3	d3 ea		 shr	 edx, cl
  001d5	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  001d8	b8 04 00 00 00	 mov	 eax, 4
  001dd	c1 e0 02	 shl	 eax, 2
  001e0	8b 4d fc	 mov	 ecx, DWORD PTR _pp$[ebp]
  001e3	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  001e6	89 55 e4	 mov	 DWORD PTR _temp$4[ebp], edx
  001e9	8b 45 e4	 mov	 eax, DWORD PTR _temp$4[ebp]
  001ec	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  001ef	d3 e0		 shl	 eax, cl
  001f1	0b 45 e0	 or	 eax, DWORD PTR _work$3[ebp]
  001f4	89 45 e0	 mov	 DWORD PTR _work$3[ebp], eax
  001f7	b9 04 00 00 00	 mov	 ecx, 4
  001fc	c1 e1 02	 shl	 ecx, 2
  001ff	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00202	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  00205	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 69   :                 work = temp >> n_rshift_bit_count; temp = pp[5]; work |= temp << n_lshift_bit_count; op[5] = work;

  00208	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  0020b	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  0020e	d3 ea		 shr	 edx, cl
  00210	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00213	b8 04 00 00 00	 mov	 eax, 4
  00218	6b c8 05	 imul	 ecx, eax, 5
  0021b	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  0021e	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00221	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  00224	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00227	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  0022a	d3 e2		 shl	 edx, cl
  0022c	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  0022f	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00232	b8 04 00 00 00	 mov	 eax, 4
  00237	6b c8 05	 imul	 ecx, eax, 5
  0023a	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  0023d	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  00240	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 70   :                 work = temp >> n_rshift_bit_count; temp = pp[6]; work |= temp << n_lshift_bit_count; op[6] = work;

  00243	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00246	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  00249	d3 ea		 shr	 edx, cl
  0024b	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  0024e	b8 04 00 00 00	 mov	 eax, 4
  00253	6b c8 06	 imul	 ecx, eax, 6
  00256	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00259	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0025c	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  0025f	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00262	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  00265	d3 e2		 shl	 edx, cl
  00267	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  0026a	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  0026d	b8 04 00 00 00	 mov	 eax, 4
  00272	6b c8 06	 imul	 ecx, eax, 6
  00275	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00278	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  0027b	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 71   :                 work = temp >> n_rshift_bit_count; temp = pp[7]; work |= temp << n_lshift_bit_count; op[7] = work;

  0027e	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00281	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  00284	d3 ea		 shr	 edx, cl
  00286	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00289	b8 04 00 00 00	 mov	 eax, 4
  0028e	6b c8 07	 imul	 ecx, eax, 7
  00291	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00294	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00297	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  0029a	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  0029d	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  002a0	d3 e2		 shl	 edx, cl
  002a2	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  002a5	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  002a8	b8 04 00 00 00	 mov	 eax, 4
  002ad	6b c8 07	 imul	 ecx, eax, 7
  002b0	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  002b3	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  002b6	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 72   :                 work = temp >> n_rshift_bit_count; temp = pp[8]; work |= temp << n_lshift_bit_count; op[8] = work;

  002b9	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  002bc	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  002bf	d3 ea		 shr	 edx, cl
  002c1	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  002c4	b8 04 00 00 00	 mov	 eax, 4
  002c9	c1 e0 03	 shl	 eax, 3
  002cc	8b 4d fc	 mov	 ecx, DWORD PTR _pp$[ebp]
  002cf	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  002d2	89 55 e4	 mov	 DWORD PTR _temp$4[ebp], edx
  002d5	8b 45 e4	 mov	 eax, DWORD PTR _temp$4[ebp]
  002d8	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  002db	d3 e0		 shl	 eax, cl
  002dd	0b 45 e0	 or	 eax, DWORD PTR _work$3[ebp]
  002e0	89 45 e0	 mov	 DWORD PTR _work$3[ebp], eax
  002e3	b9 04 00 00 00	 mov	 ecx, 4
  002e8	c1 e1 03	 shl	 ecx, 3
  002eb	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  002ee	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  002f1	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 73   :                 work = temp >> n_rshift_bit_count; temp = pp[9]; work |= temp << n_lshift_bit_count; op[9] = work;

  002f4	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  002f7	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  002fa	d3 ea		 shr	 edx, cl
  002fc	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  002ff	b8 04 00 00 00	 mov	 eax, 4
  00304	6b c8 09	 imul	 ecx, eax, 9
  00307	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  0030a	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0030d	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  00310	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00313	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  00316	d3 e2		 shl	 edx, cl
  00318	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  0031b	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  0031e	b8 04 00 00 00	 mov	 eax, 4
  00323	6b c8 09	 imul	 ecx, eax, 9
  00326	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00329	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  0032c	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 74   :                 work = temp >> n_rshift_bit_count; temp = pp[10]; work |= temp << n_lshift_bit_count; op[10] = work;

  0032f	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00332	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  00335	d3 ea		 shr	 edx, cl
  00337	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  0033a	b8 04 00 00 00	 mov	 eax, 4
  0033f	6b c8 0a	 imul	 ecx, eax, 10
  00342	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00345	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00348	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  0034b	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  0034e	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  00351	d3 e2		 shl	 edx, cl
  00353	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  00356	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00359	b8 04 00 00 00	 mov	 eax, 4
  0035e	6b c8 0a	 imul	 ecx, eax, 10
  00361	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00364	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  00367	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 75   :                 work = temp >> n_rshift_bit_count; temp = pp[11]; work |= temp << n_lshift_bit_count; op[11] = work;

  0036a	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  0036d	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  00370	d3 ea		 shr	 edx, cl
  00372	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00375	b8 04 00 00 00	 mov	 eax, 4
  0037a	6b c8 0b	 imul	 ecx, eax, 11
  0037d	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00380	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00383	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  00386	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00389	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  0038c	d3 e2		 shl	 edx, cl
  0038e	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  00391	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00394	b8 04 00 00 00	 mov	 eax, 4
  00399	6b c8 0b	 imul	 ecx, eax, 11
  0039c	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  0039f	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  003a2	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 76   :                 work = temp >> n_rshift_bit_count; temp = pp[12]; work |= temp << n_lshift_bit_count; op[12] = work;

  003a5	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  003a8	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  003ab	d3 ea		 shr	 edx, cl
  003ad	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  003b0	b8 04 00 00 00	 mov	 eax, 4
  003b5	6b c8 0c	 imul	 ecx, eax, 12
  003b8	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  003bb	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  003be	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  003c1	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  003c4	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  003c7	d3 e2		 shl	 edx, cl
  003c9	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  003cc	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  003cf	b8 04 00 00 00	 mov	 eax, 4
  003d4	6b c8 0c	 imul	 ecx, eax, 12
  003d7	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  003da	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  003dd	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 77   :                 work = temp >> n_rshift_bit_count; temp = pp[13]; work |= temp << n_lshift_bit_count; op[13] = work;

  003e0	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  003e3	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  003e6	d3 ea		 shr	 edx, cl
  003e8	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  003eb	b8 04 00 00 00	 mov	 eax, 4
  003f0	6b c8 0d	 imul	 ecx, eax, 13
  003f3	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  003f6	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  003f9	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  003fc	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  003ff	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  00402	d3 e2		 shl	 edx, cl
  00404	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  00407	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  0040a	b8 04 00 00 00	 mov	 eax, 4
  0040f	6b c8 0d	 imul	 ecx, eax, 13
  00412	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00415	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  00418	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 78   :                 work = temp >> n_rshift_bit_count; temp = pp[14]; work |= temp << n_lshift_bit_count; op[14] = work;

  0041b	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  0041e	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  00421	d3 ea		 shr	 edx, cl
  00423	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00426	b8 04 00 00 00	 mov	 eax, 4
  0042b	6b c8 0e	 imul	 ecx, eax, 14
  0042e	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00431	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00434	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  00437	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  0043a	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  0043d	d3 e2		 shl	 edx, cl
  0043f	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  00442	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00445	b8 04 00 00 00	 mov	 eax, 4
  0044a	6b c8 0e	 imul	 ecx, eax, 14
  0044d	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00450	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  00453	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 79   :                 work = temp >> n_rshift_bit_count; temp = pp[15]; work |= temp << n_lshift_bit_count; op[15] = work;

  00456	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00459	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  0045c	d3 ea		 shr	 edx, cl
  0045e	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00461	b8 04 00 00 00	 mov	 eax, 4
  00466	6b c8 0f	 imul	 ecx, eax, 15
  00469	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  0046c	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0046f	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  00472	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00475	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  00478	d3 e2		 shl	 edx, cl
  0047a	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  0047d	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00480	b8 04 00 00 00	 mov	 eax, 4
  00485	6b c8 0f	 imul	 ecx, eax, 15
  00488	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  0048b	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  0048e	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 80   :                 work = temp >> n_rshift_bit_count; temp = pp[16]; work |= temp << n_lshift_bit_count; op[16] = work;

  00491	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00494	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  00497	d3 ea		 shr	 edx, cl
  00499	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  0049c	b8 04 00 00 00	 mov	 eax, 4
  004a1	c1 e0 04	 shl	 eax, 4
  004a4	8b 4d fc	 mov	 ecx, DWORD PTR _pp$[ebp]
  004a7	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  004aa	89 55 e4	 mov	 DWORD PTR _temp$4[ebp], edx
  004ad	8b 45 e4	 mov	 eax, DWORD PTR _temp$4[ebp]
  004b0	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  004b3	d3 e0		 shl	 eax, cl
  004b5	0b 45 e0	 or	 eax, DWORD PTR _work$3[ebp]
  004b8	89 45 e0	 mov	 DWORD PTR _work$3[ebp], eax
  004bb	b9 04 00 00 00	 mov	 ecx, 4
  004c0	c1 e1 04	 shl	 ecx, 4
  004c3	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  004c6	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  004c9	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 81   :                 work = temp >> n_rshift_bit_count; temp = pp[17]; work |= temp << n_lshift_bit_count; op[17] = work;

  004cc	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  004cf	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  004d2	d3 ea		 shr	 edx, cl
  004d4	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  004d7	b8 04 00 00 00	 mov	 eax, 4
  004dc	6b c8 11	 imul	 ecx, eax, 17
  004df	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  004e2	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  004e5	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  004e8	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  004eb	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  004ee	d3 e2		 shl	 edx, cl
  004f0	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  004f3	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  004f6	b8 04 00 00 00	 mov	 eax, 4
  004fb	6b c8 11	 imul	 ecx, eax, 17
  004fe	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00501	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  00504	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 82   :                 work = temp >> n_rshift_bit_count; temp = pp[18]; work |= temp << n_lshift_bit_count; op[18] = work;

  00507	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  0050a	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  0050d	d3 ea		 shr	 edx, cl
  0050f	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00512	b8 04 00 00 00	 mov	 eax, 4
  00517	6b c8 12	 imul	 ecx, eax, 18
  0051a	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  0051d	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00520	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  00523	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00526	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  00529	d3 e2		 shl	 edx, cl
  0052b	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  0052e	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00531	b8 04 00 00 00	 mov	 eax, 4
  00536	6b c8 12	 imul	 ecx, eax, 18
  00539	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  0053c	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  0053f	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 83   :                 work = temp >> n_rshift_bit_count; temp = pp[19]; work |= temp << n_lshift_bit_count; op[19] = work;

  00542	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00545	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  00548	d3 ea		 shr	 edx, cl
  0054a	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  0054d	b8 04 00 00 00	 mov	 eax, 4
  00552	6b c8 13	 imul	 ecx, eax, 19
  00555	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00558	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0055b	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  0055e	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00561	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  00564	d3 e2		 shl	 edx, cl
  00566	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  00569	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  0056c	b8 04 00 00 00	 mov	 eax, 4
  00571	6b c8 13	 imul	 ecx, eax, 19
  00574	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00577	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  0057a	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 84   :                 work = temp >> n_rshift_bit_count; temp = pp[20]; work |= temp << n_lshift_bit_count; op[20] = work;

  0057d	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00580	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  00583	d3 ea		 shr	 edx, cl
  00585	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00588	b8 04 00 00 00	 mov	 eax, 4
  0058d	6b c8 14	 imul	 ecx, eax, 20
  00590	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00593	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00596	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  00599	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  0059c	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  0059f	d3 e2		 shl	 edx, cl
  005a1	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  005a4	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  005a7	b8 04 00 00 00	 mov	 eax, 4
  005ac	6b c8 14	 imul	 ecx, eax, 20
  005af	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  005b2	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  005b5	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 85   :                 work = temp >> n_rshift_bit_count; temp = pp[21]; work |= temp << n_lshift_bit_count; op[21] = work;

  005b8	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  005bb	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  005be	d3 ea		 shr	 edx, cl
  005c0	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  005c3	b8 04 00 00 00	 mov	 eax, 4
  005c8	6b c8 15	 imul	 ecx, eax, 21
  005cb	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  005ce	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  005d1	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  005d4	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  005d7	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  005da	d3 e2		 shl	 edx, cl
  005dc	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  005df	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  005e2	b8 04 00 00 00	 mov	 eax, 4
  005e7	6b c8 15	 imul	 ecx, eax, 21
  005ea	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  005ed	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  005f0	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 86   :                 work = temp >> n_rshift_bit_count; temp = pp[22]; work |= temp << n_lshift_bit_count; op[22] = work;

  005f3	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  005f6	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  005f9	d3 ea		 shr	 edx, cl
  005fb	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  005fe	b8 04 00 00 00	 mov	 eax, 4
  00603	6b c8 16	 imul	 ecx, eax, 22
  00606	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00609	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0060c	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  0060f	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00612	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  00615	d3 e2		 shl	 edx, cl
  00617	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  0061a	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  0061d	b8 04 00 00 00	 mov	 eax, 4
  00622	6b c8 16	 imul	 ecx, eax, 22
  00625	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00628	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  0062b	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 87   :                 work = temp >> n_rshift_bit_count; temp = pp[23]; work |= temp << n_lshift_bit_count; op[23] = work;

  0062e	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00631	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  00634	d3 ea		 shr	 edx, cl
  00636	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00639	b8 04 00 00 00	 mov	 eax, 4
  0063e	6b c8 17	 imul	 ecx, eax, 23
  00641	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00644	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00647	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  0064a	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  0064d	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  00650	d3 e2		 shl	 edx, cl
  00652	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  00655	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00658	b8 04 00 00 00	 mov	 eax, 4
  0065d	6b c8 17	 imul	 ecx, eax, 23
  00660	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00663	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  00666	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 88   :                 work = temp >> n_rshift_bit_count; temp = pp[24]; work |= temp << n_lshift_bit_count; op[24] = work;

  00669	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  0066c	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  0066f	d3 ea		 shr	 edx, cl
  00671	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00674	b8 04 00 00 00	 mov	 eax, 4
  00679	6b c8 18	 imul	 ecx, eax, 24
  0067c	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  0067f	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00682	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  00685	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00688	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  0068b	d3 e2		 shl	 edx, cl
  0068d	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  00690	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00693	b8 04 00 00 00	 mov	 eax, 4
  00698	6b c8 18	 imul	 ecx, eax, 24
  0069b	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  0069e	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  006a1	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 89   :                 work = temp >> n_rshift_bit_count; temp = pp[25]; work |= temp << n_lshift_bit_count; op[25] = work;

  006a4	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  006a7	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  006aa	d3 ea		 shr	 edx, cl
  006ac	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  006af	b8 04 00 00 00	 mov	 eax, 4
  006b4	6b c8 19	 imul	 ecx, eax, 25
  006b7	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  006ba	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  006bd	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  006c0	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  006c3	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  006c6	d3 e2		 shl	 edx, cl
  006c8	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  006cb	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  006ce	b8 04 00 00 00	 mov	 eax, 4
  006d3	6b c8 19	 imul	 ecx, eax, 25
  006d6	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  006d9	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  006dc	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 90   :                 work = temp >> n_rshift_bit_count; temp = pp[26]; work |= temp << n_lshift_bit_count; op[26] = work;

  006df	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  006e2	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  006e5	d3 ea		 shr	 edx, cl
  006e7	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  006ea	b8 04 00 00 00	 mov	 eax, 4
  006ef	6b c8 1a	 imul	 ecx, eax, 26
  006f2	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  006f5	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  006f8	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  006fb	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  006fe	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  00701	d3 e2		 shl	 edx, cl
  00703	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  00706	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00709	b8 04 00 00 00	 mov	 eax, 4
  0070e	6b c8 1a	 imul	 ecx, eax, 26
  00711	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00714	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  00717	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 91   :                 work = temp >> n_rshift_bit_count; temp = pp[27]; work |= temp << n_lshift_bit_count; op[27] = work;

  0071a	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  0071d	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  00720	d3 ea		 shr	 edx, cl
  00722	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00725	b8 04 00 00 00	 mov	 eax, 4
  0072a	6b c8 1b	 imul	 ecx, eax, 27
  0072d	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00730	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00733	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  00736	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00739	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  0073c	d3 e2		 shl	 edx, cl
  0073e	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  00741	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00744	b8 04 00 00 00	 mov	 eax, 4
  00749	6b c8 1b	 imul	 ecx, eax, 27
  0074c	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  0074f	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  00752	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 92   :                 work = temp >> n_rshift_bit_count; temp = pp[28]; work |= temp << n_lshift_bit_count; op[28] = work;

  00755	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00758	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  0075b	d3 ea		 shr	 edx, cl
  0075d	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00760	b8 04 00 00 00	 mov	 eax, 4
  00765	6b c8 1c	 imul	 ecx, eax, 28
  00768	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  0076b	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0076e	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  00771	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00774	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  00777	d3 e2		 shl	 edx, cl
  00779	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  0077c	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  0077f	b8 04 00 00 00	 mov	 eax, 4
  00784	6b c8 1c	 imul	 ecx, eax, 28
  00787	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  0078a	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  0078d	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 93   :                 work = temp >> n_rshift_bit_count; temp = pp[29]; work |= temp << n_lshift_bit_count; op[29] = work;

  00790	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00793	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  00796	d3 ea		 shr	 edx, cl
  00798	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  0079b	b8 04 00 00 00	 mov	 eax, 4
  007a0	6b c8 1d	 imul	 ecx, eax, 29
  007a3	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  007a6	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  007a9	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  007ac	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  007af	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  007b2	d3 e2		 shl	 edx, cl
  007b4	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  007b7	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  007ba	b8 04 00 00 00	 mov	 eax, 4
  007bf	6b c8 1d	 imul	 ecx, eax, 29
  007c2	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  007c5	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  007c8	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 94   :                 work = temp >> n_rshift_bit_count; temp = pp[30]; work |= temp << n_lshift_bit_count; op[30] = work;

  007cb	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  007ce	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  007d1	d3 ea		 shr	 edx, cl
  007d3	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  007d6	b8 04 00 00 00	 mov	 eax, 4
  007db	6b c8 1e	 imul	 ecx, eax, 30
  007de	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  007e1	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  007e4	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  007e7	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  007ea	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  007ed	d3 e2		 shl	 edx, cl
  007ef	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  007f2	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  007f5	b8 04 00 00 00	 mov	 eax, 4
  007fa	6b c8 1e	 imul	 ecx, eax, 30
  007fd	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00800	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  00803	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 95   :                 work = temp >> n_rshift_bit_count; temp = pp[31]; work |= temp << n_lshift_bit_count; op[31] = work;

  00806	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00809	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  0080c	d3 ea		 shr	 edx, cl
  0080e	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00811	b8 04 00 00 00	 mov	 eax, 4
  00816	6b c8 1f	 imul	 ecx, eax, 31
  00819	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  0081c	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0081f	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  00822	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00825	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  00828	d3 e2		 shl	 edx, cl
  0082a	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  0082d	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00830	b8 04 00 00 00	 mov	 eax, 4
  00835	6b c8 1f	 imul	 ecx, eax, 31
  00838	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  0083b	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  0083e	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 96   :                 --count;

  00841	8b 4d d8	 mov	 ecx, DWORD PTR _count$1[ebp]
  00844	83 e9 01	 sub	 ecx, 1
  00847	89 4d d8	 mov	 DWORD PTR _count$1[ebp], ecx

; 97   :                 pp += 32;

  0084a	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  0084d	81 c2 80 00 00
	00		 add	 edx, 128		; 00000080H
  00853	89 55 fc	 mov	 DWORD PTR _pp$[ebp], edx

; 98   :                 op += 32;

  00856	8b 45 f4	 mov	 eax, DWORD PTR _op$[ebp]
  00859	05 80 00 00 00	 add	 eax, 128		; 00000080H
  0085e	89 45 f4	 mov	 DWORD PTR _op$[ebp], eax

; 99   :             }

  00861	e9 73 f8 ff ff	 jmp	 $LN2@RightShift
$LN3@RightShift:

; 100  : 
; 101  :             if (t_count & 0x10)

  00866	8b 4d dc	 mov	 ecx, DWORD PTR _t_count$2[ebp]
  00869	83 e1 10	 and	 ecx, 16			; 00000010H
  0086c	0f 84 c0 03 00
	00		 je	 $LN7@RightShift

; 102  :             {
; 103  :                 work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

  00872	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00875	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  00878	d3 ea		 shr	 edx, cl
  0087a	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  0087d	b8 04 00 00 00	 mov	 eax, 4
  00882	6b c8 00	 imul	 ecx, eax, 0
  00885	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00888	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0088b	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  0088e	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00891	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  00894	d3 e2		 shl	 edx, cl
  00896	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  00899	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  0089c	b8 04 00 00 00	 mov	 eax, 4
  008a1	6b c8 00	 imul	 ecx, eax, 0
  008a4	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  008a7	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  008aa	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 104  :                 work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;

  008ad	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  008b0	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  008b3	d3 ea		 shr	 edx, cl
  008b5	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  008b8	b8 04 00 00 00	 mov	 eax, 4
  008bd	c1 e0 00	 shl	 eax, 0
  008c0	8b 4d fc	 mov	 ecx, DWORD PTR _pp$[ebp]
  008c3	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  008c6	89 55 e4	 mov	 DWORD PTR _temp$4[ebp], edx
  008c9	8b 45 e4	 mov	 eax, DWORD PTR _temp$4[ebp]
  008cc	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  008cf	d3 e0		 shl	 eax, cl
  008d1	0b 45 e0	 or	 eax, DWORD PTR _work$3[ebp]
  008d4	89 45 e0	 mov	 DWORD PTR _work$3[ebp], eax
  008d7	b9 04 00 00 00	 mov	 ecx, 4
  008dc	c1 e1 00	 shl	 ecx, 0
  008df	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  008e2	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  008e5	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 105  :                 work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;

  008e8	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  008eb	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  008ee	d3 ea		 shr	 edx, cl
  008f0	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  008f3	b8 04 00 00 00	 mov	 eax, 4
  008f8	d1 e0		 shl	 eax, 1
  008fa	8b 4d fc	 mov	 ecx, DWORD PTR _pp$[ebp]
  008fd	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00900	89 55 e4	 mov	 DWORD PTR _temp$4[ebp], edx
  00903	8b 45 e4	 mov	 eax, DWORD PTR _temp$4[ebp]
  00906	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  00909	d3 e0		 shl	 eax, cl
  0090b	0b 45 e0	 or	 eax, DWORD PTR _work$3[ebp]
  0090e	89 45 e0	 mov	 DWORD PTR _work$3[ebp], eax
  00911	b9 04 00 00 00	 mov	 ecx, 4
  00916	d1 e1		 shl	 ecx, 1
  00918	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  0091b	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  0091e	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 106  :                 work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;

  00921	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00924	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  00927	d3 ea		 shr	 edx, cl
  00929	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  0092c	b8 04 00 00 00	 mov	 eax, 4
  00931	6b c8 03	 imul	 ecx, eax, 3
  00934	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00937	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0093a	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  0093d	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00940	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  00943	d3 e2		 shl	 edx, cl
  00945	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  00948	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  0094b	b8 04 00 00 00	 mov	 eax, 4
  00950	6b c8 03	 imul	 ecx, eax, 3
  00953	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00956	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  00959	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 107  :                 work = temp >> n_rshift_bit_count; temp = pp[4]; work |= temp << n_lshift_bit_count; op[4] = work;

  0095c	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  0095f	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  00962	d3 ea		 shr	 edx, cl
  00964	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00967	b8 04 00 00 00	 mov	 eax, 4
  0096c	c1 e0 02	 shl	 eax, 2
  0096f	8b 4d fc	 mov	 ecx, DWORD PTR _pp$[ebp]
  00972	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00975	89 55 e4	 mov	 DWORD PTR _temp$4[ebp], edx
  00978	8b 45 e4	 mov	 eax, DWORD PTR _temp$4[ebp]
  0097b	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  0097e	d3 e0		 shl	 eax, cl
  00980	0b 45 e0	 or	 eax, DWORD PTR _work$3[ebp]
  00983	89 45 e0	 mov	 DWORD PTR _work$3[ebp], eax
  00986	b9 04 00 00 00	 mov	 ecx, 4
  0098b	c1 e1 02	 shl	 ecx, 2
  0098e	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00991	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  00994	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 108  :                 work = temp >> n_rshift_bit_count; temp = pp[5]; work |= temp << n_lshift_bit_count; op[5] = work;

  00997	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  0099a	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  0099d	d3 ea		 shr	 edx, cl
  0099f	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  009a2	b8 04 00 00 00	 mov	 eax, 4
  009a7	6b c8 05	 imul	 ecx, eax, 5
  009aa	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  009ad	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  009b0	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  009b3	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  009b6	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  009b9	d3 e2		 shl	 edx, cl
  009bb	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  009be	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  009c1	b8 04 00 00 00	 mov	 eax, 4
  009c6	6b c8 05	 imul	 ecx, eax, 5
  009c9	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  009cc	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  009cf	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 109  :                 work = temp >> n_rshift_bit_count; temp = pp[6]; work |= temp << n_lshift_bit_count; op[6] = work;

  009d2	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  009d5	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  009d8	d3 ea		 shr	 edx, cl
  009da	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  009dd	b8 04 00 00 00	 mov	 eax, 4
  009e2	6b c8 06	 imul	 ecx, eax, 6
  009e5	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  009e8	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  009eb	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  009ee	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  009f1	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  009f4	d3 e2		 shl	 edx, cl
  009f6	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  009f9	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  009fc	b8 04 00 00 00	 mov	 eax, 4
  00a01	6b c8 06	 imul	 ecx, eax, 6
  00a04	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00a07	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  00a0a	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 110  :                 work = temp >> n_rshift_bit_count; temp = pp[7]; work |= temp << n_lshift_bit_count; op[7] = work;

  00a0d	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00a10	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  00a13	d3 ea		 shr	 edx, cl
  00a15	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00a18	b8 04 00 00 00	 mov	 eax, 4
  00a1d	6b c8 07	 imul	 ecx, eax, 7
  00a20	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00a23	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00a26	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  00a29	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00a2c	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  00a2f	d3 e2		 shl	 edx, cl
  00a31	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  00a34	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00a37	b8 04 00 00 00	 mov	 eax, 4
  00a3c	6b c8 07	 imul	 ecx, eax, 7
  00a3f	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00a42	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  00a45	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 111  :                 work = temp >> n_rshift_bit_count; temp = pp[8]; work |= temp << n_lshift_bit_count; op[8] = work;

  00a48	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00a4b	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  00a4e	d3 ea		 shr	 edx, cl
  00a50	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00a53	b8 04 00 00 00	 mov	 eax, 4
  00a58	c1 e0 03	 shl	 eax, 3
  00a5b	8b 4d fc	 mov	 ecx, DWORD PTR _pp$[ebp]
  00a5e	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00a61	89 55 e4	 mov	 DWORD PTR _temp$4[ebp], edx
  00a64	8b 45 e4	 mov	 eax, DWORD PTR _temp$4[ebp]
  00a67	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  00a6a	d3 e0		 shl	 eax, cl
  00a6c	0b 45 e0	 or	 eax, DWORD PTR _work$3[ebp]
  00a6f	89 45 e0	 mov	 DWORD PTR _work$3[ebp], eax
  00a72	b9 04 00 00 00	 mov	 ecx, 4
  00a77	c1 e1 03	 shl	 ecx, 3
  00a7a	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00a7d	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  00a80	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 112  :                 work = temp >> n_rshift_bit_count; temp = pp[9]; work |= temp << n_lshift_bit_count; op[9] = work;

  00a83	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00a86	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  00a89	d3 ea		 shr	 edx, cl
  00a8b	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00a8e	b8 04 00 00 00	 mov	 eax, 4
  00a93	6b c8 09	 imul	 ecx, eax, 9
  00a96	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00a99	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00a9c	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  00a9f	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00aa2	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  00aa5	d3 e2		 shl	 edx, cl
  00aa7	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  00aaa	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00aad	b8 04 00 00 00	 mov	 eax, 4
  00ab2	6b c8 09	 imul	 ecx, eax, 9
  00ab5	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00ab8	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  00abb	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 113  :                 work = temp >> n_rshift_bit_count; temp = pp[10]; work |= temp << n_lshift_bit_count; op[10] = work;

  00abe	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00ac1	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  00ac4	d3 ea		 shr	 edx, cl
  00ac6	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00ac9	b8 04 00 00 00	 mov	 eax, 4
  00ace	6b c8 0a	 imul	 ecx, eax, 10
  00ad1	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00ad4	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00ad7	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  00ada	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00add	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  00ae0	d3 e2		 shl	 edx, cl
  00ae2	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  00ae5	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00ae8	b8 04 00 00 00	 mov	 eax, 4
  00aed	6b c8 0a	 imul	 ecx, eax, 10
  00af0	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00af3	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  00af6	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 114  :                 work = temp >> n_rshift_bit_count; temp = pp[11]; work |= temp << n_lshift_bit_count; op[11] = work;

  00af9	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00afc	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  00aff	d3 ea		 shr	 edx, cl
  00b01	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00b04	b8 04 00 00 00	 mov	 eax, 4
  00b09	6b c8 0b	 imul	 ecx, eax, 11
  00b0c	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00b0f	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00b12	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  00b15	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00b18	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  00b1b	d3 e2		 shl	 edx, cl
  00b1d	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  00b20	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00b23	b8 04 00 00 00	 mov	 eax, 4
  00b28	6b c8 0b	 imul	 ecx, eax, 11
  00b2b	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00b2e	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  00b31	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 115  :                 work = temp >> n_rshift_bit_count; temp = pp[12]; work |= temp << n_lshift_bit_count; op[12] = work;

  00b34	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00b37	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  00b3a	d3 ea		 shr	 edx, cl
  00b3c	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00b3f	b8 04 00 00 00	 mov	 eax, 4
  00b44	6b c8 0c	 imul	 ecx, eax, 12
  00b47	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00b4a	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00b4d	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  00b50	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00b53	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  00b56	d3 e2		 shl	 edx, cl
  00b58	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  00b5b	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00b5e	b8 04 00 00 00	 mov	 eax, 4
  00b63	6b c8 0c	 imul	 ecx, eax, 12
  00b66	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00b69	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  00b6c	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 116  :                 work = temp >> n_rshift_bit_count; temp = pp[13]; work |= temp << n_lshift_bit_count; op[13] = work;

  00b6f	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00b72	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  00b75	d3 ea		 shr	 edx, cl
  00b77	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00b7a	b8 04 00 00 00	 mov	 eax, 4
  00b7f	6b c8 0d	 imul	 ecx, eax, 13
  00b82	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00b85	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00b88	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  00b8b	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00b8e	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  00b91	d3 e2		 shl	 edx, cl
  00b93	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  00b96	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00b99	b8 04 00 00 00	 mov	 eax, 4
  00b9e	6b c8 0d	 imul	 ecx, eax, 13
  00ba1	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00ba4	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  00ba7	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 117  :                 work = temp >> n_rshift_bit_count; temp = pp[14]; work |= temp << n_lshift_bit_count; op[14] = work;

  00baa	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00bad	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  00bb0	d3 ea		 shr	 edx, cl
  00bb2	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00bb5	b8 04 00 00 00	 mov	 eax, 4
  00bba	6b c8 0e	 imul	 ecx, eax, 14
  00bbd	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00bc0	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00bc3	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  00bc6	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00bc9	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  00bcc	d3 e2		 shl	 edx, cl
  00bce	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  00bd1	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00bd4	b8 04 00 00 00	 mov	 eax, 4
  00bd9	6b c8 0e	 imul	 ecx, eax, 14
  00bdc	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00bdf	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  00be2	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 118  :                 work = temp >> n_rshift_bit_count; temp = pp[15]; work |= temp << n_lshift_bit_count; op[15] = work;

  00be5	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00be8	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  00beb	d3 ea		 shr	 edx, cl
  00bed	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00bf0	b8 04 00 00 00	 mov	 eax, 4
  00bf5	6b c8 0f	 imul	 ecx, eax, 15
  00bf8	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00bfb	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00bfe	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  00c01	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00c04	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  00c07	d3 e2		 shl	 edx, cl
  00c09	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  00c0c	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00c0f	b8 04 00 00 00	 mov	 eax, 4
  00c14	6b c8 0f	 imul	 ecx, eax, 15
  00c17	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00c1a	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  00c1d	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 119  :                 pp += 16;

  00c20	8b 4d fc	 mov	 ecx, DWORD PTR _pp$[ebp]
  00c23	83 c1 40	 add	 ecx, 64			; 00000040H
  00c26	89 4d fc	 mov	 DWORD PTR _pp$[ebp], ecx

; 120  :                 op += 16;

  00c29	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00c2c	83 c2 40	 add	 edx, 64			; 00000040H
  00c2f	89 55 f4	 mov	 DWORD PTR _op$[ebp], edx
$LN7@RightShift:

; 121  :             }
; 122  : 
; 123  :             if (t_count & 0x8)

  00c32	8b 45 dc	 mov	 eax, DWORD PTR _t_count$2[ebp]
  00c35	83 e0 08	 and	 eax, 8
  00c38	0f 84 e8 01 00
	00		 je	 $LN8@RightShift

; 124  :             {
; 125  :                 work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

  00c3e	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00c41	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  00c44	d3 ea		 shr	 edx, cl
  00c46	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00c49	b8 04 00 00 00	 mov	 eax, 4
  00c4e	6b c8 00	 imul	 ecx, eax, 0
  00c51	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00c54	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00c57	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  00c5a	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00c5d	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  00c60	d3 e2		 shl	 edx, cl
  00c62	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  00c65	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00c68	b8 04 00 00 00	 mov	 eax, 4
  00c6d	6b c8 00	 imul	 ecx, eax, 0
  00c70	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00c73	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  00c76	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 126  :                 work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;

  00c79	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00c7c	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  00c7f	d3 ea		 shr	 edx, cl
  00c81	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00c84	b8 04 00 00 00	 mov	 eax, 4
  00c89	c1 e0 00	 shl	 eax, 0
  00c8c	8b 4d fc	 mov	 ecx, DWORD PTR _pp$[ebp]
  00c8f	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00c92	89 55 e4	 mov	 DWORD PTR _temp$4[ebp], edx
  00c95	8b 45 e4	 mov	 eax, DWORD PTR _temp$4[ebp]
  00c98	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  00c9b	d3 e0		 shl	 eax, cl
  00c9d	0b 45 e0	 or	 eax, DWORD PTR _work$3[ebp]
  00ca0	89 45 e0	 mov	 DWORD PTR _work$3[ebp], eax
  00ca3	b9 04 00 00 00	 mov	 ecx, 4
  00ca8	c1 e1 00	 shl	 ecx, 0
  00cab	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00cae	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  00cb1	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 127  :                 work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;

  00cb4	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00cb7	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  00cba	d3 ea		 shr	 edx, cl
  00cbc	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00cbf	b8 04 00 00 00	 mov	 eax, 4
  00cc4	d1 e0		 shl	 eax, 1
  00cc6	8b 4d fc	 mov	 ecx, DWORD PTR _pp$[ebp]
  00cc9	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00ccc	89 55 e4	 mov	 DWORD PTR _temp$4[ebp], edx
  00ccf	8b 45 e4	 mov	 eax, DWORD PTR _temp$4[ebp]
  00cd2	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  00cd5	d3 e0		 shl	 eax, cl
  00cd7	0b 45 e0	 or	 eax, DWORD PTR _work$3[ebp]
  00cda	89 45 e0	 mov	 DWORD PTR _work$3[ebp], eax
  00cdd	b9 04 00 00 00	 mov	 ecx, 4
  00ce2	d1 e1		 shl	 ecx, 1
  00ce4	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00ce7	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  00cea	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 128  :                 work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;

  00ced	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00cf0	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  00cf3	d3 ea		 shr	 edx, cl
  00cf5	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00cf8	b8 04 00 00 00	 mov	 eax, 4
  00cfd	6b c8 03	 imul	 ecx, eax, 3
  00d00	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00d03	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00d06	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  00d09	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00d0c	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  00d0f	d3 e2		 shl	 edx, cl
  00d11	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  00d14	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00d17	b8 04 00 00 00	 mov	 eax, 4
  00d1c	6b c8 03	 imul	 ecx, eax, 3
  00d1f	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00d22	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  00d25	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 129  :                 work = temp >> n_rshift_bit_count; temp = pp[4]; work |= temp << n_lshift_bit_count; op[4] = work;

  00d28	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00d2b	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  00d2e	d3 ea		 shr	 edx, cl
  00d30	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00d33	b8 04 00 00 00	 mov	 eax, 4
  00d38	c1 e0 02	 shl	 eax, 2
  00d3b	8b 4d fc	 mov	 ecx, DWORD PTR _pp$[ebp]
  00d3e	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00d41	89 55 e4	 mov	 DWORD PTR _temp$4[ebp], edx
  00d44	8b 45 e4	 mov	 eax, DWORD PTR _temp$4[ebp]
  00d47	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  00d4a	d3 e0		 shl	 eax, cl
  00d4c	0b 45 e0	 or	 eax, DWORD PTR _work$3[ebp]
  00d4f	89 45 e0	 mov	 DWORD PTR _work$3[ebp], eax
  00d52	b9 04 00 00 00	 mov	 ecx, 4
  00d57	c1 e1 02	 shl	 ecx, 2
  00d5a	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00d5d	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  00d60	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 130  :                 work = temp >> n_rshift_bit_count; temp = pp[5]; work |= temp << n_lshift_bit_count; op[5] = work;

  00d63	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00d66	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  00d69	d3 ea		 shr	 edx, cl
  00d6b	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00d6e	b8 04 00 00 00	 mov	 eax, 4
  00d73	6b c8 05	 imul	 ecx, eax, 5
  00d76	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00d79	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00d7c	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  00d7f	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00d82	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  00d85	d3 e2		 shl	 edx, cl
  00d87	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  00d8a	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00d8d	b8 04 00 00 00	 mov	 eax, 4
  00d92	6b c8 05	 imul	 ecx, eax, 5
  00d95	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00d98	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  00d9b	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 131  :                 work = temp >> n_rshift_bit_count; temp = pp[6]; work |= temp << n_lshift_bit_count; op[6] = work;

  00d9e	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00da1	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  00da4	d3 ea		 shr	 edx, cl
  00da6	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00da9	b8 04 00 00 00	 mov	 eax, 4
  00dae	6b c8 06	 imul	 ecx, eax, 6
  00db1	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00db4	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00db7	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  00dba	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00dbd	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  00dc0	d3 e2		 shl	 edx, cl
  00dc2	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  00dc5	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00dc8	b8 04 00 00 00	 mov	 eax, 4
  00dcd	6b c8 06	 imul	 ecx, eax, 6
  00dd0	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00dd3	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  00dd6	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 132  :                 work = temp >> n_rshift_bit_count; temp = pp[7]; work |= temp << n_lshift_bit_count; op[7] = work;

  00dd9	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00ddc	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  00ddf	d3 ea		 shr	 edx, cl
  00de1	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00de4	b8 04 00 00 00	 mov	 eax, 4
  00de9	6b c8 07	 imul	 ecx, eax, 7
  00dec	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00def	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00df2	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  00df5	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00df8	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  00dfb	d3 e2		 shl	 edx, cl
  00dfd	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  00e00	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00e03	b8 04 00 00 00	 mov	 eax, 4
  00e08	6b c8 07	 imul	 ecx, eax, 7
  00e0b	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00e0e	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  00e11	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 133  :                 pp += 8;

  00e14	8b 4d fc	 mov	 ecx, DWORD PTR _pp$[ebp]
  00e17	83 c1 20	 add	 ecx, 32			; 00000020H
  00e1a	89 4d fc	 mov	 DWORD PTR _pp$[ebp], ecx

; 134  :                 op += 8;

  00e1d	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00e20	83 c2 20	 add	 edx, 32			; 00000020H
  00e23	89 55 f4	 mov	 DWORD PTR _op$[ebp], edx
$LN8@RightShift:

; 135  :             }
; 136  : 
; 137  :             if (t_count & 0x4)

  00e26	8b 45 dc	 mov	 eax, DWORD PTR _t_count$2[ebp]
  00e29	83 e0 04	 and	 eax, 4
  00e2c	0f 84 fc 00 00
	00		 je	 $LN9@RightShift

; 138  :             {
; 139  :                 work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

  00e32	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00e35	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  00e38	d3 ea		 shr	 edx, cl
  00e3a	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00e3d	b8 04 00 00 00	 mov	 eax, 4
  00e42	6b c8 00	 imul	 ecx, eax, 0
  00e45	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00e48	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00e4b	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  00e4e	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00e51	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  00e54	d3 e2		 shl	 edx, cl
  00e56	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  00e59	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00e5c	b8 04 00 00 00	 mov	 eax, 4
  00e61	6b c8 00	 imul	 ecx, eax, 0
  00e64	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00e67	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  00e6a	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 140  :                 work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;

  00e6d	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00e70	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  00e73	d3 ea		 shr	 edx, cl
  00e75	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00e78	b8 04 00 00 00	 mov	 eax, 4
  00e7d	c1 e0 00	 shl	 eax, 0
  00e80	8b 4d fc	 mov	 ecx, DWORD PTR _pp$[ebp]
  00e83	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00e86	89 55 e4	 mov	 DWORD PTR _temp$4[ebp], edx
  00e89	8b 45 e4	 mov	 eax, DWORD PTR _temp$4[ebp]
  00e8c	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  00e8f	d3 e0		 shl	 eax, cl
  00e91	0b 45 e0	 or	 eax, DWORD PTR _work$3[ebp]
  00e94	89 45 e0	 mov	 DWORD PTR _work$3[ebp], eax
  00e97	b9 04 00 00 00	 mov	 ecx, 4
  00e9c	c1 e1 00	 shl	 ecx, 0
  00e9f	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00ea2	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  00ea5	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 141  :                 work = temp >> n_rshift_bit_count; temp = pp[2]; work |= temp << n_lshift_bit_count; op[2] = work;

  00ea8	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00eab	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  00eae	d3 ea		 shr	 edx, cl
  00eb0	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00eb3	b8 04 00 00 00	 mov	 eax, 4
  00eb8	d1 e0		 shl	 eax, 1
  00eba	8b 4d fc	 mov	 ecx, DWORD PTR _pp$[ebp]
  00ebd	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00ec0	89 55 e4	 mov	 DWORD PTR _temp$4[ebp], edx
  00ec3	8b 45 e4	 mov	 eax, DWORD PTR _temp$4[ebp]
  00ec6	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  00ec9	d3 e0		 shl	 eax, cl
  00ecb	0b 45 e0	 or	 eax, DWORD PTR _work$3[ebp]
  00ece	89 45 e0	 mov	 DWORD PTR _work$3[ebp], eax
  00ed1	b9 04 00 00 00	 mov	 ecx, 4
  00ed6	d1 e1		 shl	 ecx, 1
  00ed8	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00edb	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  00ede	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 142  :                 work = temp >> n_rshift_bit_count; temp = pp[3]; work |= temp << n_lshift_bit_count; op[3] = work;

  00ee1	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00ee4	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  00ee7	d3 ea		 shr	 edx, cl
  00ee9	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00eec	b8 04 00 00 00	 mov	 eax, 4
  00ef1	6b c8 03	 imul	 ecx, eax, 3
  00ef4	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00ef7	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00efa	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  00efd	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00f00	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  00f03	d3 e2		 shl	 edx, cl
  00f05	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  00f08	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00f0b	b8 04 00 00 00	 mov	 eax, 4
  00f10	6b c8 03	 imul	 ecx, eax, 3
  00f13	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00f16	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  00f19	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 143  :                 pp += 4;

  00f1c	8b 4d fc	 mov	 ecx, DWORD PTR _pp$[ebp]
  00f1f	83 c1 10	 add	 ecx, 16			; 00000010H
  00f22	89 4d fc	 mov	 DWORD PTR _pp$[ebp], ecx

; 144  :                 op += 4;

  00f25	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00f28	83 c2 10	 add	 edx, 16			; 00000010H
  00f2b	89 55 f4	 mov	 DWORD PTR _op$[ebp], edx
$LN9@RightShift:

; 145  :             }
; 146  : 
; 147  :             if (t_count & 0x2)

  00f2e	8b 45 dc	 mov	 eax, DWORD PTR _t_count$2[ebp]
  00f31	83 e0 02	 and	 eax, 2
  00f34	0f 84 88 00 00
	00		 je	 $LN10@RightShift

; 148  :             {
; 149  :                 work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

  00f3a	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00f3d	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  00f40	d3 ea		 shr	 edx, cl
  00f42	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00f45	b8 04 00 00 00	 mov	 eax, 4
  00f4a	6b c8 00	 imul	 ecx, eax, 0
  00f4d	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00f50	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00f53	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  00f56	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00f59	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  00f5c	d3 e2		 shl	 edx, cl
  00f5e	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  00f61	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00f64	b8 04 00 00 00	 mov	 eax, 4
  00f69	6b c8 00	 imul	 ecx, eax, 0
  00f6c	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00f6f	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  00f72	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 150  :                 work = temp >> n_rshift_bit_count; temp = pp[1]; work |= temp << n_lshift_bit_count; op[1] = work;

  00f75	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00f78	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  00f7b	d3 ea		 shr	 edx, cl
  00f7d	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00f80	b8 04 00 00 00	 mov	 eax, 4
  00f85	c1 e0 00	 shl	 eax, 0
  00f88	8b 4d fc	 mov	 ecx, DWORD PTR _pp$[ebp]
  00f8b	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00f8e	89 55 e4	 mov	 DWORD PTR _temp$4[ebp], edx
  00f91	8b 45 e4	 mov	 eax, DWORD PTR _temp$4[ebp]
  00f94	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  00f97	d3 e0		 shl	 eax, cl
  00f99	0b 45 e0	 or	 eax, DWORD PTR _work$3[ebp]
  00f9c	89 45 e0	 mov	 DWORD PTR _work$3[ebp], eax
  00f9f	b9 04 00 00 00	 mov	 ecx, 4
  00fa4	c1 e1 00	 shl	 ecx, 0
  00fa7	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00faa	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  00fad	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 151  :                 pp += 2;

  00fb0	8b 4d fc	 mov	 ecx, DWORD PTR _pp$[ebp]
  00fb3	83 c1 08	 add	 ecx, 8
  00fb6	89 4d fc	 mov	 DWORD PTR _pp$[ebp], ecx

; 152  :                 op += 2;

  00fb9	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00fbc	83 c2 08	 add	 edx, 8
  00fbf	89 55 f4	 mov	 DWORD PTR _op$[ebp], edx
$LN10@RightShift:

; 153  :             }
; 154  : 
; 155  :             if (t_count & 0x1)

  00fc2	8b 45 dc	 mov	 eax, DWORD PTR _t_count$2[ebp]
  00fc5	83 e0 01	 and	 eax, 1
  00fc8	74 4d		 je	 SHORT $LN11@RightShift

; 156  :             {
; 157  :                 work = temp >> n_rshift_bit_count; temp = pp[0]; work |= temp << n_lshift_bit_count; op[0] = work;

  00fca	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00fcd	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  00fd0	d3 ea		 shr	 edx, cl
  00fd2	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00fd5	b8 04 00 00 00	 mov	 eax, 4
  00fda	6b c8 00	 imul	 ecx, eax, 0
  00fdd	8b 55 fc	 mov	 edx, DWORD PTR _pp$[ebp]
  00fe0	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00fe3	89 45 e4	 mov	 DWORD PTR _temp$4[ebp], eax
  00fe6	8b 55 e4	 mov	 edx, DWORD PTR _temp$4[ebp]
  00fe9	8b 4d e8	 mov	 ecx, DWORD PTR _n_lshift_bit_count$5[ebp]
  00fec	d3 e2		 shl	 edx, cl
  00fee	0b 55 e0	 or	 edx, DWORD PTR _work$3[ebp]
  00ff1	89 55 e0	 mov	 DWORD PTR _work$3[ebp], edx
  00ff4	b8 04 00 00 00	 mov	 eax, 4
  00ff9	6b c8 00	 imul	 ecx, eax, 0
  00ffc	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  00fff	8b 45 e0	 mov	 eax, DWORD PTR _work$3[ebp]
  01002	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 158  :                 pp += 1;

  01005	8b 4d fc	 mov	 ecx, DWORD PTR _pp$[ebp]
  01008	83 c1 04	 add	 ecx, 4
  0100b	89 4d fc	 mov	 DWORD PTR _pp$[ebp], ecx

; 159  :                 op += 1;

  0100e	8b 55 f4	 mov	 edx, DWORD PTR _op$[ebp]
  01011	83 c2 04	 add	 edx, 4
  01014	89 55 f4	 mov	 DWORD PTR _op$[ebp], edx
$LN11@RightShift:

; 160  :             }
; 161  : 
; 162  :             work = temp >> n_rshift_bit_count;

  01017	8b 45 e4	 mov	 eax, DWORD PTR _temp$4[ebp]
  0101a	8b 4d ec	 mov	 ecx, DWORD PTR _n_rshift_bit_count$[ebp]
  0101d	d3 e8		 shr	 eax, cl
  0101f	89 45 e0	 mov	 DWORD PTR _work$3[ebp], eax

; 163  :             if (work != 0 || padding_zero)

  01022	83 7d e0 00	 cmp	 DWORD PTR _work$3[ebp], 0
  01026	75 06		 jne	 SHORT $LN13@RightShift
  01028	83 7d 18 00	 cmp	 DWORD PTR _padding_zero$[ebp], 0
  0102c	74 08		 je	 SHORT $LN12@RightShift
$LN13@RightShift:

; 164  :                 *op = work;

  0102e	8b 4d f4	 mov	 ecx, DWORD PTR _op$[ebp]
  01031	8b 55 e0	 mov	 edx, DWORD PTR _work$3[ebp]
  01034	89 11		 mov	 DWORD PTR [ecx], edx
$LN12@RightShift:

; 165  : 
; 166  :             if (padding_zero)

  01036	83 7d 18 00	 cmp	 DWORD PTR _padding_zero$[ebp], 0
  0103a	74 1e		 je	 SHORT $LN1@RightShift

; 167  :                 _ZERO_MEMORY_UNIT(o + p_word_count - n_word_count, n_word_count);

  0103c	8b 45 f0	 mov	 eax, DWORD PTR _n_word_count$[ebp]
  0103f	50		 push	 eax
  01040	8b 4d 0c	 mov	 ecx, DWORD PTR _p_word_count$[ebp]
  01043	8b 55 14	 mov	 edx, DWORD PTR _o$[ebp]
  01046	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  01049	8b 4d f0	 mov	 ecx, DWORD PTR _n_word_count$[ebp]
  0104c	c1 e1 02	 shl	 ecx, 2
  0104f	2b c1		 sub	 eax, ecx
  01051	50		 push	 eax
  01052	e8 00 00 00 00	 call	 __ZERO_MEMORY_UNIT
  01057	83 c4 08	 add	 esp, 8
$LN1@RightShift:

; 168  :         }
; 169  :     }

  0105a	5f		 pop	 edi
  0105b	83 c4 2c	 add	 esp, 44			; 0000002cH
  0105e	3b ec		 cmp	 ebp, esp
  01060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01065	8b e5		 mov	 esp, ebp
  01067	5d		 pop	 ebp
  01068	c3		 ret	 0
?RightShift_Imp@Internal@Core@Math@Palmtree@@YAXPAIII0H@Z ENDP ; Palmtree::Math::Core::Internal::RightShift_Imp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 18		 push	 24			; 00000018H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException, COMDAT
; _this$ = ecx

; 295  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 296  :         }

  00047	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException, COMDAT
; _this$ = ecx

; 291  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 290  :             : Exception(p)

  00037	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 291  :         {

  0004a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@

; 292  :         }

  00053	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00060	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00067	59		 pop	 ecx
  00068	83 c4 10	 add	 esp, 16			; 00000010H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
_data$ = 12						; size = 4
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException, COMDAT
; _this$ = ecx

; 286  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 285  :             : Exception(PMC_STATUS_INTERNAL_ERROR, message, data)

  00037	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _message$[ebp]
  0003e	51		 push	 ecx
  0003f	68 00 ff ff ff	 push	 -256			; ffffff00H
  00044	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 286  :         {

  00053	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00056	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@

; 287  :         }

  0005c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00063	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00066	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00069	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00070	59		 pop	 ecx
  00071	83 c4 10	 add	 esp, 16			; 00000010H
  00074	3b ec		 cmp	 ebp, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 18		 push	 24			; 00000018H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException, COMDAT
; _this$ = ecx

; 124  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 125  :         }

  00047	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException, COMDAT
; _this$ = ecx

; 120  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 119  :             : Exception(p)

  00037	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 120  :         {

  0004a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@

; 121  :         }

  00053	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00060	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00067	59		 pop	 ecx
  00068	83 c4 10	 add	 esp, 16			; 00000010H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
_param_name$ = 12					; size = 4
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException, COMDAT
; _this$ = ecx

; 115  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 114  :             : Exception(PMC_STATUS_ARGUMENT_NULL_ERROR, message, param_name)

  00037	8b 45 0c	 mov	 eax, DWORD PTR _param_name$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _message$[ebp]
  0003e	51		 push	 ecx
  0003f	6a fe		 push	 -2			; fffffffeH
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00049	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 115  :         {

  00050	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00053	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@

; 116  :         }

  00059	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00060	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00063	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00066	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006d	59		 pop	 ecx
  0006e	83 c4 10	 add	 esp, 16			; 00000010H
  00071	3b ec		 cmp	 ebp, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 18		 push	 24			; 00000018H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ PROC	; Palmtree::Math::Core::Internal::Exception::~Exception, COMDAT
; _this$ = ecx

; 70   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 71   :         }

  00047	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ENDP	; Palmtree::Math::Core::Internal::Exception::~Exception
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT
; _this$ = ecx

; 62   :         Exception(const Exception& p) noexcept(true)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00049	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 63   :         {
; 64   :             _code = p._code;

  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00055	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00058	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 65   :             _message = p._message;

  0005b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00061	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00064	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 66   :             _data = p._data;

  00067	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  0006d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00070	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 67   :         }

  00073	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0007a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0007d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00080	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00087	59		 pop	 ecx
  00088	83 c4 10	 add	 esp, 16			; 00000010H
  0008b	3b ec		 cmp	 ebp, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_code$ = 8						; size = 4
_message$ = 12						; size = 4
_data$ = 16						; size = 4
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT
; _this$ = ecx

; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00049	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 55   :         {
; 56   :             _code = code;

  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	8b 55 08	 mov	 edx, DWORD PTR _code$[ebp]
  00055	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 57   :             _message = message;

  00058	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	8b 4d 0c	 mov	 ecx, DWORD PTR _message$[ebp]
  0005e	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 58   :             _data = data;

  00061	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00064	8b 45 10	 mov	 eax, DWORD PTR _data$[ebp]
  00067	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 59   :         }

  0006a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00071	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00077	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007e	59		 pop	 ecx
  0007f	83 c4 10	 add	 esp, 16			; 00000010H
  00082	3b ec		 cmp	 ebp, esp
  00084	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 90   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __9BB4E194_vcruntime_exception@h
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 91   :         return _Data._What ? _Data._What : "Unknown exception";

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00028	74 0b		 je	 SHORT $LN3@what
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00030	89 55 f8	 mov	 DWORD PTR tv69[ebp], edx
  00033	eb 07		 jmp	 SHORT $LN4@what
$LN3@what:
  00035	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
$LN4@what:
  0003c	8b 45 f8	 mov	 eax, DWORD PTR tv69[ebp]

; 92   :     }

  0003f	83 c4 08	 add	 esp, 8
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 85   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1exception@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __9BB4E194_vcruntime_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 86   :         __std_exception_destroy(&_Data);

  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	83 c1 04	 add	 ecx, 4
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 ___std_exception_destroy
  0004c	83 c4 04	 add	 esp, 4

; 87   :     }

  0004f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00052	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00059	59		 pop	 ecx
  0005a	83 c4 10	 add	 esp, 16			; 00000010H
  0005d	3b ec		 cmp	 ebp, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1exception@std@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1exception@std@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0exception@std@@QAE@XZ PROC				; std::exception::exception, COMDAT
; _this$ = ecx

; 50   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0exception@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __9BB4E194_vcruntime_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 49   :         : _Data()

  00040	33 c9		 xor	 ecx, ecx
  00042	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00045	83 c2 04	 add	 edx, 4
  00048	89 0a		 mov	 DWORD PTR [edx], ecx
  0004a	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 51   :     }

  0004d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	83 c4 10	 add	 esp, 16			; 00000010H
  0005e	3b ec		 cmp	 ebp, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0exception@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0exception@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0exception@std@@QAE@XZ ENDP				; std::exception::exception
END
