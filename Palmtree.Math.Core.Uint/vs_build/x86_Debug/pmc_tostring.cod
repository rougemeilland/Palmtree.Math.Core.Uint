; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_tostring.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__2088847F_corecrt_memory@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__E9FFF232_guiddef@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__12AD47BB_winuser@h DB 01H
__B4B40122_winioctl@h DB 01H
__A73354DD_stdlib@h DB 01H
__25F3FB34_propidl@h DB 01H
__A40E48B8_oleauto@h DB 01H
__86261D59_stralign@h DB 01H
__188180DA_corecrt_math@h DB 01H
__2CC6E67D_corecrt_stdio_config@h DB 01H
__41381B41_corecrt_wconio@h DB 01H
__F0CC4AC4_corecrt_wio@h DB 01H
__05476D76_corecrt_wstdio@h DB 01H
__C0802A2B_corecrt_wtime@h DB 01H
__A40A425D_stat@h DB 01H
__5A74375D_wchar@h DB 01H
__6BC0FD35_vcruntime_new@h DB 01H
__77F53984_cstddef DB 01H
__D23EE329_cstdlib DB 01H
__5ECFF36E_type_traits DB 01H
__331E732B_malloc@h DB 01H
__9BB4E194_vcruntime_exception@h DB 01H
__7949CB39_exception DB 01H
__802FEEC0_pmc_exception@h DB 01H
__80E6779E_pmc_stringio@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__1AB12E38_pmc_resourceholder@h DB 01H
__746E1CEC_xmmintrin@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__4F90649E_pmc_tostring@cpp DB 01H
msvcjmc	ENDS
CONST	SEGMENT
$SG118803 DB	'p', 00H, 'm', 00H, 'c', 00H, '_', 00H, 't', 00H, 'o', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '.'
	DB	00H, 'c', 00H, 'p', 00H, 'p', 00H, ';', 00H, 'O', 00H, 'u', 00H
	DB	't', 00H, 'p', 00H, 'u', 00H, 't', 00H, 'H', 00H, 'e', 00H, 'x'
	DB	00H, 'N', 00H, 'u', 00H, 'm', 00H, 'b', 00H, 'e', 00H, 'r', 00H
	DB	'S', 00H, 'e', 00H, 'q', 00H, 'u', 00H, 'e', 00H, 'n', 00H, 'c'
	DB	00H, 'e', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'W', 00H, 'o', 00H
	DB	'r', 00H, 'd', 00H, ';', 00H, '1', 00H, 00H, 00H
$SG118804 DB	088H, 'N', 01fH, 'gW0f0D0j0D0', 0b3H, '0', 0fcH, '0', 0c9H
	DB	'0k00RT', 090H, 'W0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118891 DB	0abH, '0', 0b9H, '0', 0bfH, '0', 0e0H, '0', 0f8H, 'f', 0fH
	DB	'_k0', 088H, '0', 08bH, '0T', 00H, 'o', 00H, 'S', 00H, 't', 00H
	DB	'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 'o0', 0b5H, '0', 0ddH, '0'
	DB	0fcH, '0', 0c8H, '0U0', 08cH, '0f0D0~0[0', 093H, '0', 02H, '0', 00H
	DB	00H
	ORG $+2
$SG118945 DB	'*g', 0e5H, 'wn0', 0f8H, 'f', 0fH, '_', 07H, 'c', 09aH, '['
	DB	'P[g0Y0', 02H, '0', 00H, 00H
$SG118961 DB	'x', 00H, 00H, 00H
$SG118962 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
	ORG $+2
$SG118967 DB	'.', 00H, 00H, 00H
$SG118968 DB	',', 00H, 00H, 00H
$SG118969 DB	'3', 00H, 00H, 00H
$SG118970 DB	'.', 00H, 00H, 00H
$SG118971 DB	',', 00H, 00H, 00H
$SG118972 DB	'3', 00H, 00H, 00H
$SG118973 DB	'.', 00H, 00H, 00H
$SG118974 DB	',', 00H, 00H, 00H
$SG118975 DB	'3', 00H, 00H, 00H
$SG118976 DB	0a4H, 00H, 00H, 00H
$SG118977 DB	'-', 00H, 00H, 00H
$SG118978 DB	'%', 00H, 00H, 00H
$SG118979 DB	'0 ', 00H, 00H
$SG118980 DB	'+', 00H, 00H, 00H
CONST	ENDS
PUBLIC	??0exception@std@@QAE@XZ			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z ; Palmtree::Math::Core::Internal::Exception::Exception
PUBLIC	??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ; Palmtree::Math::Core::Internal::Exception::Exception
PUBLIC	??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
PUBLIC	??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
PUBLIC	??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor'
PUBLIC	??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
PUBLIC	??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
PUBLIC	??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
PUBLIC	??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor'
PUBLIC	??0FormatException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::FormatException::FormatException
PUBLIC	??0FormatException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::FormatException::FormatException
PUBLIC	??1FormatException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::FormatException::~FormatException
PUBLIC	??_GFormatException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::FormatException::`scalar deleting destructor'
PUBLIC	??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException
PUBLIC	??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException
PUBLIC	??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::InsufficientBufferException::~InsufficientBufferException
PUBLIC	??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::InsufficientBufferException::`scalar deleting destructor'
PUBLIC	??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::NotSupportedException::NotSupportedException
PUBLIC	??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::NotSupportedException::NotSupportedException
PUBLIC	??1NotSupportedException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::NotSupportedException::~NotSupportedException
PUBLIC	??_GNotSupportedException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::NotSupportedException::`scalar deleting destructor'
PUBLIC	??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
PUBLIC	??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
PUBLIC	??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
PUBLIC	??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor'
PUBLIC	??0StringReader@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::StringReader::StringReader
PUBLIC	?ReadChar@StringReader@Internal@Core@Math@Palmtree@@QAE_WXZ ; Palmtree::Math::Core::Internal::StringReader::ReadChar
PUBLIC	?ReadChar@StringReader@Internal@Core@Math@Palmtree@@QAE_W_W@Z ; Palmtree::Math::Core::Internal::StringReader::ReadChar
PUBLIC	?PeekChar@StringReader@Internal@Core@Math@Palmtree@@UAE_WXZ ; Palmtree::Math::Core::Internal::StringReader::PeekChar
PUBLIC	?Progress@StringReader@Internal@Core@Math@Palmtree@@UAEXXZ ; Palmtree::Math::Core::Internal::StringReader::Progress
PUBLIC	?StartsWith@StringReader@Internal@Core@Math@Palmtree@@UAEHPB_W@Z ; Palmtree::Math::Core::Internal::StringReader::StartsWith
PUBLIC	?SkipString@StringReader@Internal@Core@Math@Palmtree@@UAEXPB_W@Z ; Palmtree::Math::Core::Internal::StringReader::SkipString
PUBLIC	?StartsWith@StringReader@Internal@Core@Math@Palmtree@@CAHPB_W0@Z ; Palmtree::Math::Core::Internal::StringReader::StartsWith
PUBLIC	??0ReverseStringReader@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::ReverseStringReader::ReverseStringReader
PUBLIC	?PeekChar@ReverseStringReader@Internal@Core@Math@Palmtree@@UAE_WXZ ; Palmtree::Math::Core::Internal::ReverseStringReader::PeekChar
PUBLIC	?Progress@ReverseStringReader@Internal@Core@Math@Palmtree@@UAEXXZ ; Palmtree::Math::Core::Internal::ReverseStringReader::Progress
PUBLIC	?StartsWith@ReverseStringReader@Internal@Core@Math@Palmtree@@UAEHPB_W@Z ; Palmtree::Math::Core::Internal::ReverseStringReader::StartsWith
PUBLIC	?SkipString@ReverseStringReader@Internal@Core@Math@Palmtree@@UAEXPB_W@Z ; Palmtree::Math::Core::Internal::ReverseStringReader::SkipString
PUBLIC	?StartsWith@ReverseStringReader@Internal@Core@Math@Palmtree@@CAHPB_W00@Z ; Palmtree::Math::Core::Internal::ReverseStringReader::StartsWith
PUBLIC	??0StringWriter@Internal@Core@Math@Palmtree@@IAE@PA_W00@Z ; Palmtree::Math::Core::Internal::StringWriter::StringWriter
PUBLIC	??0StringWriter@Internal@Core@Math@Palmtree@@QAE@PA_WI@Z ; Palmtree::Math::Core::Internal::StringWriter::StringWriter
PUBLIC	?Write@StringWriter@Internal@Core@Math@Palmtree@@UAEX_W@Z ; Palmtree::Math::Core::Internal::StringWriter::Write
PUBLIC	?Write@StringWriter@Internal@Core@Math@Palmtree@@QAEX_WI@Z ; Palmtree::Math::Core::Internal::StringWriter::Write
PUBLIC	?Write@StringWriter@Internal@Core@Math@Palmtree@@UAEXPB_W@Z ; Palmtree::Math::Core::Internal::StringWriter::Write
PUBLIC	?GetString@StringWriter@Internal@Core@Math@Palmtree@@UAEPA_WXZ ; Palmtree::Math::Core::Internal::StringWriter::GetString
PUBLIC	?GetLength@StringWriter@Internal@Core@Math@Palmtree@@QAEIXZ ; Palmtree::Math::Core::Internal::StringWriter::GetLength
PUBLIC	??0ReverseStringWriter@Internal@Core@Math@Palmtree@@QAE@PA_WI@Z ; Palmtree::Math::Core::Internal::ReverseStringWriter::ReverseStringWriter
PUBLIC	?Write@ReverseStringWriter@Internal@Core@Math@Palmtree@@UAEX_W@Z ; Palmtree::Math::Core::Internal::ReverseStringWriter::Write
PUBLIC	?Write@ReverseStringWriter@Internal@Core@Math@Palmtree@@UAEXPB_W@Z ; Palmtree::Math::Core::Internal::ReverseStringWriter::Write
PUBLIC	?GetString@ReverseStringWriter@Internal@Core@Math@Palmtree@@UAEPA_WXZ ; Palmtree::Math::Core::Internal::ReverseStringWriter::GetString
PUBLIC	?InitializeNumberFormatoInfo@Internal@Core@Math@Palmtree@@YAXPAU__tag_PMC_NUMBER_FORMAT_INFO@1234@@Z ; Palmtree::Math::Core::Internal::InitializeNumberFormatoInfo
PUBLIC	?Initialize_ToString@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ; Palmtree::Math::Core::Internal::Initialize_ToString
PUBLIC	?PMC_InitializeNumberFormatInfo@Internal@Core@Math@Palmtree@@YGXPAU__tag_PMC_NUMBER_FORMAT_INFO@1234@@Z ; Palmtree::Math::Core::Internal::PMC_InitializeNumberFormatInfo
PUBLIC	?PMC_ToString@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@PB_WPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PA_WI@Z ; Palmtree::Math::Core::Internal::PMC_ToString
PUBLIC	??0ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@PAVStringWriter@2345@_WPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::ThousandSeparatedStringWriter
PUBLIC	?Write@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@UAEX_W@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::Write
PUBLIC	?Write@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@UAEXPB_W@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::Write
PUBLIC	?GetString@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@UAEPA_WXZ ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::GetString
PUBLIC	??0Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@IAE@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::Formatter
PUBLIC	?Format@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@QAEXDPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::Format
PUBLIC	?FormatInternally@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::FormatInternally
PUBLIC	?ConvertAs10nBasedNumber@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEIPAU__tag_NUMBER_HEADER@3456@PAI@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::ConvertAs10nBasedNumber
PUBLIC	?ConstructSimpleNumberSequence@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEPA_WPAIIPA_WI@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::ConstructSimpleNumberSequence
PUBLIC	?WriteLeadingOneWord@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::WriteLeadingOneWord
PUBLIC	?WriteTrailingWord@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::WriteTrailingWord
PUBLIC	?WriteDigit@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::WriteDigit
PUBLIC	??0FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@HPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::FormatterTypeC
PUBLIC	?GetDefaultPrecisionValue@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::GetDefaultPrecisionValue
PUBLIC	?WriteZeroValue@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::WriteZeroValue
PUBLIC	?WritePrefix@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::WritePrefix
PUBLIC	?FormatNumberSequence@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::FormatNumberSequence
PUBLIC	?WriteSuffix@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::WriteSuffix
PUBLIC	??0FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@HPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::FormatterTypeD
PUBLIC	?GetDefaultPrecisionValue@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::GetDefaultPrecisionValue
PUBLIC	?WriteZeroValue@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::WriteZeroValue
PUBLIC	?WritePrefix@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::WritePrefix
PUBLIC	?FormatNumberSequence@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::FormatNumberSequence
PUBLIC	?WriteSuffix@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::WriteSuffix
PUBLIC	??0FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::FormatterTypeE
PUBLIC	?GetDefaultPrecisionValue@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::GetDefaultPrecisionValue
PUBLIC	?WriteZeroValue@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::WriteZeroValue
PUBLIC	?FormatInternally@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::FormatInternally
PUBLIC	?WritePrefix@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::WritePrefix
PUBLIC	?FormatNumberSequence@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::FormatNumberSequence
PUBLIC	?WriteSuffix@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::WriteSuffix
PUBLIC	??0FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@HPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::FormatterTypeF
PUBLIC	?GetDefaultPrecisionValue@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::GetDefaultPrecisionValue
PUBLIC	?WriteZeroValue@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::WriteZeroValue
PUBLIC	?WritePrefix@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::WritePrefix
PUBLIC	?FormatNumberSequence@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::FormatNumberSequence
PUBLIC	?WriteSuffix@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::WriteSuffix
PUBLIC	??0FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@HPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::FormatterTypeN
PUBLIC	?GetDefaultPrecisionValue@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::GetDefaultPrecisionValue
PUBLIC	?WriteZeroValue@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::WriteZeroValue
PUBLIC	?WritePrefix@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::WritePrefix
PUBLIC	?FormatNumberSequence@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::FormatNumberSequence
PUBLIC	?WriteSuffix@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::WriteSuffix
PUBLIC	??0FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@HPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::FormatterTypeP
PUBLIC	?GetDefaultPrecisionValue@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::GetDefaultPrecisionValue
PUBLIC	?WriteZeroValue@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::WriteZeroValue
PUBLIC	?FormatInternally@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::FormatInternally
PUBLIC	?WritePrefix@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::WritePrefix
PUBLIC	?FormatNumberSequence@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::FormatNumberSequence
PUBLIC	?WriteSuffix@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::WriteSuffix
PUBLIC	__JustMyCode_Default
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7Exception@Internal@Core@Math@Palmtree@@6B@	; Palmtree::Math::Core::Internal::Exception::`vftable'
PUBLIC	??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`vftable'
PUBLIC	??_7FormatException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::FormatException::`vftable'
PUBLIC	??_7InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InsufficientBufferException::`vftable'
PUBLIC	??_7NotSupportedException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::NotSupportedException::`vftable'
PUBLIC	??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`vftable'
PUBLIC	??_7StringReader@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::StringReader::`vftable'
PUBLIC	__TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
PUBLIC	__CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InternalErrorException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	??_R0?AVException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::Exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	??_C@_1FA@CNGEABBJ@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@ ; `string'
PUBLIC	??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@ ; `string'
PUBLIC	??_C@_1FE@KONPIGEM@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@ ; `string'
PUBLIC	??_7ReverseStringReader@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ReverseStringReader::`vftable'
PUBLIC	??_C@_1FO@BNHGDLLE@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@ ; `string'
PUBLIC	??_C@_1GC@GGAPGHKN@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@ ; `string'
PUBLIC	??_7StringWriter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::StringWriter::`vftable'
PUBLIC	__TI2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@
PUBLIC	__CTA2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InsufficientBufferException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	??_C@_1CO@JABAMCFP@?$PP?x?$AAM?$PP?$LM?$AA?$HP?$AAH?$PP?P?$PP?C?$PP?U?$PP?$KB?$AAn?$PP?$LF?$PP?$KE?$PP?$LK?$AAL?$AA?$AN@ ; `string'
PUBLIC	??_7ReverseStringWriter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ReverseStringWriter::`vftable'
PUBLIC	??_7ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::`vftable'
PUBLIC	??_7Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::`vftable'
PUBLIC	??_C@_1EK@CCPHDNPL@?$AAp?$AAm?$AAc?$AA_?$AAt?$AAo?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?4?$AAc?$AAp@ ; `string'
PUBLIC	??_7FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::`vftable'
PUBLIC	??_7FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::`vftable'
PUBLIC	??_7FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::`vftable'
PUBLIC	??_C@_19NKFEMDNP@?$AA?$CL?$AA0?$AA0?$AA0@	; `string'
PUBLIC	??_C@_19GGGBJDH@?$AA?$CF?$AA0?$AA3?$AAd@	; `string'
PUBLIC	??_7FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::`vftable'
PUBLIC	??_7FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::`vftable'
PUBLIC	??_7FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::`vftable'
PUBLIC	__TI2?AVNotSupportedException@Internal@Core@Math@Palmtree@@
PUBLIC	__CTA2?AVNotSupportedException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVNotSupportedException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::NotSupportedException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVNotSupportedException@Internal@Core@Math@Palmtree@@@8??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	__TI2?AVFormatException@Internal@Core@Math@Palmtree@@
PUBLIC	__CTA2?AVFormatException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVFormatException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::FormatException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVFormatException@Internal@Core@Math@Palmtree@@@8??0FormatException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	__TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
PUBLIC	__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Exception@Internal@Core@Math@Palmtree@@6B@	; Palmtree::Math::Core::Internal::Exception::`RTTI Complete Object Locator'
PUBLIC	??_R3Exception@Internal@Core@Math@Palmtree@@8	; Palmtree::Math::Core::Internal::Exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Exception@Internal@Core@Math@Palmtree@@8	; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EN@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,77)'
PUBLIC	??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Complete Object Locator'
PUBLIC	??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4FormatException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::FormatException::`RTTI Complete Object Locator'
PUBLIC	??_R3FormatException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::FormatException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FormatException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::FormatException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FormatException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::FormatException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Complete Object Locator'
PUBLIC	??_R3InsufficientBufferException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InsufficientBufferException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InsufficientBufferException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4NotSupportedException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::NotSupportedException::`RTTI Complete Object Locator'
PUBLIC	??_R3NotSupportedException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::NotSupportedException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2NotSupportedException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::NotSupportedException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@NotSupportedException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::NotSupportedException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Complete Object Locator'
PUBLIC	??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4StringReader@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::StringReader::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVStringReader@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::StringReader `RTTI Type Descriptor'
PUBLIC	??_R3StringReader@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringReader::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2StringReader@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringReader::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@StringReader@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringReader::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ReverseStringReader@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ReverseStringReader::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVReverseStringReader@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ReverseStringReader `RTTI Type Descriptor'
PUBLIC	??_R3ReverseStringReader@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ReverseStringReader::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ReverseStringReader@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ReverseStringReader::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ReverseStringReader@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ReverseStringReader::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4StringWriter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVStringWriter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::StringWriter `RTTI Type Descriptor'
PUBLIC	??_R3StringWriter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2StringWriter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@StringWriter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ReverseStringWriter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ReverseStringWriter::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVReverseStringWriter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ReverseStringWriter `RTTI Type Descriptor'
PUBLIC	??_R3ReverseStringWriter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ReverseStringWriter::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ReverseStringWriter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ReverseStringWriter::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ReverseStringWriter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ReverseStringWriter::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter `RTTI Type Descriptor'
PUBLIC	??_R3ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFormatter@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter `RTTI Type Descriptor'
PUBLIC	??_R3Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC `RTTI Type Descriptor'
PUBLIC	??_R3FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD `RTTI Type Descriptor'
PUBLIC	??_R3FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE `RTTI Type Descriptor'
PUBLIC	??_R3FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF `RTTI Type Descriptor'
PUBLIC	??_R3FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN `RTTI Type Descriptor'
PUBLIC	??_R3FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP `RTTI Type Descriptor'
PUBLIC	??_R3FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	__purecall:PROC
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__imp__lstrcpyW@8:PROC
EXTRN	__imp__lstrlenW@4:PROC
EXTRN	__imp__wsprintfW:PROC
EXTRN	__imp__floor:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_EException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::Exception::`vector deleting destructor'
EXTRN	??_EArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::`vector deleting destructor'
EXTRN	??_EFormatException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::FormatException::`vector deleting destructor'
EXTRN	??_EInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::InsufficientBufferException::`vector deleting destructor'
EXTRN	??_ENotSupportedException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::NotSupportedException::`vector deleting destructor'
EXTRN	??_EInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::InternalErrorException::`vector deleting destructor'
EXTRN	?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z:PROC ; Palmtree::Math::Core::Internal::CheckNumber
EXTRN	?DivRem_X_1W@Internal@Core@Math@Palmtree@@YAXPAIII00@Z:PROC ; Palmtree::Math::Core::Internal::DivRem_X_1W
EXTRN	?PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z:PROC ; Palmtree::Math::Core::Internal::PMC_Add_X_X_Imp
EXTRN	?PMC_Multiply_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z:PROC ; Palmtree::Math::Core::Internal::PMC_Multiply_X_I_Imp
EXTRN	?PMC_TimesOfExponentOf10_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@II@Z:PROC ; Palmtree::Math::Core::Internal::PMC_TimesOfExponentOf10_Imp
EXTRN	?PMC_Floor_Log10_Imp@Internal@Core@Math@Palmtree@@YAIPAU__tag_NUMBER_HEADER@1234@@Z:PROC ; Palmtree::Math::Core::Internal::PMC_Floor_Log10_Imp
EXTRN	??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
EXTRN	??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
EXTRN	?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAII@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
EXTRN	?ClearBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ClearBlock
EXTRN	?DeallocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateBlock
EXTRN	?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock
EXTRN	?AllocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPA_WI@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateString
EXTRN	?DeallocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPA_W@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateString
EXTRN	?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__allshl:PROC
EXTRN	__aulldiv:PROC
EXTRN	__aullrem:PROC
EXTRN	__dtoui3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A:BYTE ; Palmtree::Math::Core::Internal::statistics_info
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?default_number_format_option@Internal@Core@Math@Palmtree@@3U__tag_PMC_NUMBER_FORMAT_INFO@1234@A DB 01e4H DUP (?) ; Palmtree::Math::Core::Internal::default_number_format_option
_BSS	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVFormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R3FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVFormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFormatterTypeP@DecimalFromatter@Internal@Core@Math@P'
	DB	'almtree@@', 00H
data$r	ENDS
;	COMDAT ??_R4FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVFormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R3FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVFormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFormatterTypeN@DecimalFromatter@Internal@Core@Math@P'
	DB	'almtree@@', 00H
data$r	ENDS
;	COMDAT ??_R4FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVFormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R3FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVFormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFormatterTypeF@DecimalFromatter@Internal@Core@Math@P'
	DB	'almtree@@', 00H
data$r	ENDS
;	COMDAT ??_R4FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVFormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R3FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVFormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFormatterTypeE@DecimalFromatter@Internal@Core@Math@P'
	DB	'almtree@@', 00H
data$r	ENDS
;	COMDAT ??_R4FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVFormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R3FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVFormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFormatterTypeD@DecimalFromatter@Internal@Core@Math@P'
	DB	'almtree@@', 00H
data$r	ENDS
;	COMDAT ??_R4FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVFormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R3FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVFormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFormatterTypeC@DecimalFromatter@Internal@Core@Math@P'
	DB	'almtree@@', 00H
data$r	ENDS
;	COMDAT ??_R4FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVFormatter@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFormatter@DecimalFromatter@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVFormatter@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFormatter@DecimalFromatter@Internal@Core@Math@Palmtr'
	DB	'ee@@', 00H
data$r	ENDS
;	COMDAT ??_R4Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFormatter@DecimalFromatter@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@StringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R3ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVThousandSeparatedStringWriter@DecimalFromatter@Inter'
	DB	'nal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT ??_R4ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ReverseStringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ReverseStringWriter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVReverseStringWriter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ReverseStringWriter::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ReverseStringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2ReverseStringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2ReverseStringWriter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@ReverseStringWriter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ReverseStringWriter::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@StringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R3ReverseStringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3ReverseStringWriter@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::ReverseStringWriter::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ReverseStringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVReverseStringWriter@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVReverseStringWriter@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::ReverseStringWriter `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVReverseStringWriter@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT ??_R4ReverseStringWriter@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4ReverseStringWriter@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::ReverseStringWriter::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVReverseStringWriter@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3ReverseStringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@StringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@StringWriter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVStringWriter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3StringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2StringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2StringWriter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@StringWriter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3StringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3StringWriter@Internal@Core@Math@Palmtree@@8 DD 00H	; Palmtree::Math::Core::Internal::StringWriter::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2StringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVStringWriter@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVStringWriter@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::StringWriter `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVStringWriter@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT ??_R4StringWriter@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4StringWriter@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVStringWriter@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3StringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ReverseStringReader@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ReverseStringReader@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVReverseStringReader@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ReverseStringReader::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ReverseStringReader@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2ReverseStringReader@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2ReverseStringReader@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@ReverseStringReader@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ReverseStringReader::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@StringReader@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R3ReverseStringReader@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3ReverseStringReader@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::ReverseStringReader::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ReverseStringReader@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVReverseStringReader@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVReverseStringReader@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::ReverseStringReader `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVReverseStringReader@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT ??_R4ReverseStringReader@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4ReverseStringReader@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::ReverseStringReader::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVReverseStringReader@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3ReverseStringReader@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@StringReader@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@StringReader@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVStringReader@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::StringReader::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3StringReader@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2StringReader@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2StringReader@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@StringReader@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringReader::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3StringReader@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3StringReader@Internal@Core@Math@Palmtree@@8 DD 00H	; Palmtree::Math::Core::Internal::StringReader::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2StringReader@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVStringReader@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVStringReader@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::StringReader `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVStringReader@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT ??_R4StringReader@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4StringReader@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::StringReader::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVStringReader@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3StringReader@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@NotSupportedException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@NotSupportedException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVNotSupportedException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::NotSupportedException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3NotSupportedException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2NotSupportedException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2NotSupportedException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@NotSupportedException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::NotSupportedException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3NotSupportedException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3NotSupportedException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::NotSupportedException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2NotSupportedException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4NotSupportedException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4NotSupportedException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::NotSupportedException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVNotSupportedException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3NotSupportedException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@InsufficientBufferException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InsufficientBufferException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InsufficientBufferException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2InsufficientBufferException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2InsufficientBufferException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@InsufficientBufferException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3InsufficientBufferException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3InsufficientBufferException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2InsufficientBufferException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3InsufficientBufferException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@FormatException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FormatException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVFormatException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::FormatException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3FormatException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2FormatException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2FormatException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@FormatException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::FormatException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3FormatException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3FormatException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::FormatException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2FormatException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4FormatException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4FormatException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::FormatException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVFormatException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3FormatException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EN@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EN@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,77)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	04dH
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2Exception@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3Exception@Internal@Core@Math@Palmtree@@8 DD 00H	; Palmtree::Math::Core::Internal::Exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4Exception@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4Exception@Internal@Core@Math@Palmtree@@6B@ DD 00H	; Palmtree::Math::Core::Internal::Exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVArgumentNullException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	FLAT:__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
	DD	FLAT:__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	ENDS
;	COMDAT __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	FLAT:??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVFormatException@Internal@Core@Math@Palmtree@@@8??0FormatException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVFormatException@Internal@Core@Math@Palmtree@@@8??0FormatException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVFormatException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0FormatException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVFormatException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVFormatException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::FormatException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFormatException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVFormatException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__CTA2?AVFormatException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	FLAT:__CT??_R0?AVFormatException@Internal@Core@Math@Palmtree@@@8??0FormatException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
	DD	FLAT:__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	ENDS
;	COMDAT __TI2?AVFormatException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__TI2?AVFormatException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	FLAT:??1FormatException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVFormatException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVNotSupportedException@Internal@Core@Math@Palmtree@@@8??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVNotSupportedException@Internal@Core@Math@Palmtree@@@8??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVNotSupportedException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVNotSupportedException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVNotSupportedException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::NotSupportedException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVNotSupportedException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVNotSupportedException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__CTA2?AVNotSupportedException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	FLAT:__CT??_R0?AVNotSupportedException@Internal@Core@Math@Palmtree@@@8??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
	DD	FLAT:__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	ENDS
;	COMDAT __TI2?AVNotSupportedException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__TI2?AVNotSupportedException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	FLAT:??1NotSupportedException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVNotSupportedException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
_DATA	SEGMENT
?hexadecimal_lower_digits@HexaDecimalFormatter@Internal@Core@Math@Palmtree@@3PA_WA DB '0'
	DB	00H, '1', 00H, '2', 00H, '3', 00H, '4', 00H, '5', 00H, '6', 00H
	DB	'7', 00H, '8', 00H, '9', 00H, 'a', 00H, 'b', 00H, 'c', 00H, 'd'
	DB	00H, 'e', 00H, 'f', 00H, 00H, 00H		; Palmtree::Math::Core::Internal::HexaDecimalFormatter::hexadecimal_lower_digits
	ORG $+2
?hexadecimal_upper_digits@HexaDecimalFormatter@Internal@Core@Math@Palmtree@@3PA_WA DB '0'
	DB	00H, '1', 00H, '2', 00H, '3', 00H, '4', 00H, '5', 00H, '6', 00H
	DB	'7', 00H, '8', 00H, '9', 00H, 'A', 00H, 'B', 00H, 'C', 00H, 'D'
	DB	00H, 'E', 00H, 'F', 00H, 00H, 00H		; Palmtree::Math::Core::Internal::HexaDecimalFormatter::hexadecimal_upper_digits
_DATA	ENDS
;	COMDAT ??_7FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::`vftable'
	DD	FLAT:?GetDefaultPrecisionValue@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ
	DD	FLAT:?FormatInternally@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z
	DD	FLAT:?WriteZeroValue@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z
	DD	FLAT:?WritePrefix@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
	DD	FLAT:?FormatNumberSequence@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
	DD	FLAT:?WriteSuffix@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
CONST	ENDS
;	COMDAT ??_7FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::`vftable'
	DD	FLAT:?GetDefaultPrecisionValue@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ
	DD	FLAT:?FormatInternally@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z
	DD	FLAT:?WriteZeroValue@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z
	DD	FLAT:?WritePrefix@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
	DD	FLAT:?FormatNumberSequence@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
	DD	FLAT:?WriteSuffix@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
CONST	ENDS
;	COMDAT ??_7FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::`vftable'
	DD	FLAT:?GetDefaultPrecisionValue@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ
	DD	FLAT:?FormatInternally@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z
	DD	FLAT:?WriteZeroValue@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z
	DD	FLAT:?WritePrefix@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
	DD	FLAT:?FormatNumberSequence@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
	DD	FLAT:?WriteSuffix@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
CONST	ENDS
;	COMDAT ??_C@_19GGGBJDH@?$AA?$CF?$AA0?$AA3?$AAd@
CONST	SEGMENT
??_C@_19GGGBJDH@?$AA?$CF?$AA0?$AA3?$AAd@ DB '%', 00H, '0', 00H, '3', 00H, 'd'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_19NKFEMDNP@?$AA?$CL?$AA0?$AA0?$AA0@
CONST	SEGMENT
??_C@_19NKFEMDNP@?$AA?$CL?$AA0?$AA0?$AA0@ DB '+', 00H, '0', 00H, '0', 00H
	DB	'0', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_7FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::`vftable'
	DD	FLAT:?GetDefaultPrecisionValue@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ
	DD	FLAT:?FormatInternally@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z
	DD	FLAT:?WriteZeroValue@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z
	DD	FLAT:?WritePrefix@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
	DD	FLAT:?FormatNumberSequence@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
	DD	FLAT:?WriteSuffix@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
CONST	ENDS
;	COMDAT ??_7FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::`vftable'
	DD	FLAT:?GetDefaultPrecisionValue@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ
	DD	FLAT:?FormatInternally@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z
	DD	FLAT:?WriteZeroValue@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z
	DD	FLAT:?WritePrefix@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
	DD	FLAT:?FormatNumberSequence@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
	DD	FLAT:?WriteSuffix@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
CONST	ENDS
;	COMDAT ??_7FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::`vftable'
	DD	FLAT:?GetDefaultPrecisionValue@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ
	DD	FLAT:?FormatInternally@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z
	DD	FLAT:?WriteZeroValue@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z
	DD	FLAT:?WritePrefix@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
	DD	FLAT:?FormatNumberSequence@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
	DD	FLAT:?WriteSuffix@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
CONST	ENDS
;	COMDAT ??_C@_1EK@CCPHDNPL@?$AAp?$AAm?$AAc?$AA_?$AAt?$AAo?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?4?$AAc?$AAp@
CONST	SEGMENT
??_C@_1EK@CCPHDNPL@?$AAp?$AAm?$AAc?$AA_?$AAt?$AAo?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?4?$AAc?$AAp@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 't', 00H, 'o', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, ';', 00H, 'F', 00H, 'o', 00H, 'r', 00H
	DB	'm', 00H, 'a', 00H, 't', 00H, 't', 00H, 'e', 00H, 'r', 00H, ':'
	DB	00H, ':', 00H, 'F', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H
	DB	't', 00H, ';', 00H, '1', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_7Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:?FormatInternally@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::`vftable'
	DD	FLAT:?Write@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@UAEXPB_W@Z
	DD	FLAT:?Write@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@UAEX_W@Z
	DD	FLAT:?GetString@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@UAEPA_WXZ
CONST	ENDS
;	COMDAT ??_7ReverseStringWriter@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7ReverseStringWriter@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4ReverseStringWriter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ReverseStringWriter::`vftable'
	DD	FLAT:?Write@ReverseStringWriter@Internal@Core@Math@Palmtree@@UAEXPB_W@Z
	DD	FLAT:?Write@ReverseStringWriter@Internal@Core@Math@Palmtree@@UAEX_W@Z
	DD	FLAT:?GetString@ReverseStringWriter@Internal@Core@Math@Palmtree@@UAEPA_WXZ
CONST	ENDS
;	COMDAT ??_C@_1CO@JABAMCFP@?$PP?x?$AAM?$PP?$LM?$AA?$HP?$AAH?$PP?P?$PP?C?$PP?U?$PP?$KB?$AAn?$PP?$LF?$PP?$KE?$PP?$LK?$AAL?$AA?$AN@
CONST	SEGMENT
??_C@_1CO@JABAMCFP@?$PP?x?$AAM?$PP?$LM?$AA?$HP?$AAH?$PP?P?$PP?C?$PP?U?$PP?$KB?$AAn?$PP?$LF?$PP?$KE?$PP?$LK?$AAL?$AA?$AN@ DB 0f8H
	DB	'fM0', 0bcH, 08fH, 07fH, '0HQ', 0d0H, '0', 0c3H, '0', 0d5H, '0'
	DB	0a1H, '0n0', 0b5H, '0', 0a4H, '0', 0baH, '0L0', 0dH, 'N', 0b3H
	DB	08dH, 'W0f0D0~0Y0', 02H, '0', 00H, 00H	; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::InsufficientBufferException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVInsufficientBufferException@Internal@Core@Math@Palmt'
	DB	'ree@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__CTA2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	FLAT:__CT??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
	DD	FLAT:__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	ENDS
;	COMDAT __TI2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__TI2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	FLAT:??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT ??_7StringWriter@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7StringWriter@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4StringWriter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::StringWriter::`vftable'
	DD	FLAT:?Write@StringWriter@Internal@Core@Math@Palmtree@@UAEXPB_W@Z
	DD	FLAT:?Write@StringWriter@Internal@Core@Math@Palmtree@@UAEX_W@Z
	DD	FLAT:?GetString@StringWriter@Internal@Core@Math@Palmtree@@UAEPA_WXZ
CONST	ENDS
;	COMDAT ??_C@_1GC@GGAPGHKN@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@
CONST	SEGMENT
??_C@_1GC@GGAPGHKN@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, 'i', 00H, 'o', 00H, '.', 00H, 'h'
	DB	00H, ';', 00H, 'R', 00H, 'e', 00H, 'v', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, 'e', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 'R', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'e', 00H
	DB	'r', 00H, ':', 00H, ':', 00H, 'S', 00H, 'k', 00H, 'i', 00H, 'p'
	DB	00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	';', 00H, '1', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1FO@BNHGDLLE@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@
CONST	SEGMENT
??_C@_1FO@BNHGDLLE@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, 'i', 00H, 'o', 00H, '.', 00H, 'h'
	DB	00H, ';', 00H, 'R', 00H, 'e', 00H, 'v', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, 'e', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 'R', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'e', 00H
	DB	'r', 00H, ':', 00H, ':', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g'
	DB	00H, 'r', 00H, 'e', 00H, 's', 00H, 's', 00H, ';', 00H, '1', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_7ReverseStringReader@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7ReverseStringReader@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4ReverseStringReader@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ReverseStringReader::`vftable'
	DD	FLAT:?PeekChar@ReverseStringReader@Internal@Core@Math@Palmtree@@UAE_WXZ
	DD	FLAT:?Progress@ReverseStringReader@Internal@Core@Math@Palmtree@@UAEXXZ
	DD	FLAT:?StartsWith@ReverseStringReader@Internal@Core@Math@Palmtree@@UAEHPB_W@Z
	DD	FLAT:?SkipString@ReverseStringReader@Internal@Core@Math@Palmtree@@UAEXPB_W@Z
CONST	ENDS
;	COMDAT ??_C@_1FE@KONPIGEM@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@
CONST	SEGMENT
??_C@_1FE@KONPIGEM@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, 'i', 00H, 'o', 00H, '.', 00H, 'h'
	DB	00H, ';', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, 'R', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r'
	DB	00H, ':', 00H, ':', 00H, 'S', 00H, 'k', 00H, 'i', 00H, 'p', 00H
	DB	'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ';'
	DB	00H, '1', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
CONST	SEGMENT
??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@ DB 085H
	DB	'Q', 0e8H, 090H, 0a8H, '0', 0e9H, '0', 0fcH, '0L0zv', 01fH, 'u'
	DB	'W0~0W0_0', 02H, '0', 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1FA@CNGEABBJ@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@
CONST	SEGMENT
??_C@_1FA@CNGEABBJ@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, 'i', 00H, 'o', 00H, '.', 00H, 'h'
	DB	00H, ';', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, 'R', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r'
	DB	00H, ':', 00H, ':', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'e', 00H, 's', 00H, 's', 00H, ';', 00H, '1', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::Exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVInternalErrorException@Internal@Core@Math@Palmtree@@'
	DB	00H
data$r	ENDS
;	COMDAT __CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	FLAT:__CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
	DD	FLAT:__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	ENDS
;	COMDAT __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	FLAT:??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT ??_7StringReader@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7StringReader@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4StringReader@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::StringReader::`vftable'
	DD	FLAT:?PeekChar@StringReader@Internal@Core@Math@Palmtree@@UAE_WXZ
	DD	FLAT:?Progress@StringReader@Internal@Core@Math@Palmtree@@UAEXXZ
	DD	FLAT:?StartsWith@StringReader@Internal@Core@Math@Palmtree@@UAEHPB_W@Z
	DD	FLAT:?SkipString@StringReader@Internal@Core@Math@Palmtree@@UAEXPB_W@Z
CONST	ENDS
;	COMDAT ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`vftable'
	DD	FLAT:??_EInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7NotSupportedException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7NotSupportedException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4NotSupportedException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::NotSupportedException::`vftable'
	DD	FLAT:??_ENotSupportedException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InsufficientBufferException::`vftable'
	DD	FLAT:??_EInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7FormatException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7FormatException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4FormatException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::FormatException::`vftable'
	DD	FLAT:??_EFormatException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`vftable'
	DD	FLAT:??_EArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7Exception@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7Exception@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4Exception@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::Exception::`vftable'
	DD	FLAT:??_EException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$?ToStringX@HexaDecimalFormatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ToStringX@HexaDecimalFormatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z$0
__ehfuncinfo$?ToStringX@HexaDecimalFormatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ToStringX@HexaDecimalFormatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?FormatNumberSequence@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FormatNumberSequence@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z$0
__ehfuncinfo$?FormatNumberSequence@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FormatNumberSequence@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?FormatInternally@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FormatInternally@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z$0
__ehfuncinfo$?FormatInternally@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FormatInternally@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?FormatNumberSequence@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FormatNumberSequence@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z$0
__ehfuncinfo$?FormatNumberSequence@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FormatNumberSequence@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?FormatInternally@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FormatInternally@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z$0
__ehfuncinfo$?FormatInternally@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FormatInternally@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?FormatNumberSequence@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FormatNumberSequence@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z$0
__ehfuncinfo$?FormatNumberSequence@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FormatNumberSequence@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ConvertAs10nBasedNumber@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEIPAU__tag_NUMBER_HEADER@3456@PAI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ConvertAs10nBasedNumber@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEIPAU__tag_NUMBER_HEADER@3456@PAI@Z$0
__ehfuncinfo$?ConvertAs10nBasedNumber@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEIPAU__tag_NUMBER_HEADER@3456@PAI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ConvertAs10nBasedNumber@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEIPAU__tag_NUMBER_HEADER@3456@PAI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?FormatInternally@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FormatInternally@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z$0
__ehfuncinfo$?FormatInternally@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FormatInternally@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0
__ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1NotSupportedException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1NotSupportedException@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1NotSupportedException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1NotSupportedException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$0
__ehfuncinfo$??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$0
__ehfuncinfo$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1FormatException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1FormatException@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1FormatException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1FormatException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0FormatException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FormatException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0FormatException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0FormatException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0FormatException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0FormatException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$0
__ehfuncinfo$??0FormatException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0FormatException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0
__ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z$0
__ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z$0
__ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1exception@std@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0exception@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
_TEXT	SEGMENT
tv77 = -52						; size = 4
$T1 = -48						; size = 24
_precision$ = -20					; size = 4
_format_type$ = -8					; size = 2
_x_sign$ = 8						; size = 1
_x_abs$ = 12						; size = 4
_format$ = 16						; size = 4
_format_option$ = 20					; size = 4
_buffer$ = 24						; size = 4
_buffer_size$ = 28					; size = 4
?ToString_Imp@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@1234@PB_WPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PA_WI@Z PROC ; Palmtree::Math::Core::Internal::ToString_Imp

; 1343 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	57		 push	 edi
  00007	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  0000a	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  0001b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1344 :         wchar_t format_type;
; 1345 :         int precision;
; 1346 :         if (!ParseStandardFormat(format, &format_type, &precision))

  00020	8d 45 ec	 lea	 eax, DWORD PTR _precision$[ebp]
  00023	50		 push	 eax
  00024	8d 4d f8	 lea	 ecx, DWORD PTR _format_type$[ebp]
  00027	51		 push	 ecx
  00028	8b 55 10	 mov	 edx, DWORD PTR _format$[ebp]
  0002b	52		 push	 edx
  0002c	e8 00 00 00 00	 call	 ?ParseStandardFormat@Internal@Core@Math@Palmtree@@YAHPB_WPA_WPAH@Z ; Palmtree::Math::Core::Internal::ParseStandardFormat
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH
  00034	85 c0		 test	 eax, eax
  00036	75 2b		 jne	 SHORT $LN4@ToString_I

; 1347 :             return (CustomFormatter::ToStringCustom(x_sign, x_abs, format, format_option, buffer, buffer_size));

  00038	8b 45 1c	 mov	 eax, DWORD PTR _buffer_size$[ebp]
  0003b	50		 push	 eax
  0003c	8b 4d 18	 mov	 ecx, DWORD PTR _buffer$[ebp]
  0003f	51		 push	 ecx
  00040	8b 55 14	 mov	 edx, DWORD PTR _format_option$[ebp]
  00043	52		 push	 edx
  00044	8b 45 10	 mov	 eax, DWORD PTR _format$[ebp]
  00047	50		 push	 eax
  00048	8b 4d 0c	 mov	 ecx, DWORD PTR _x_abs$[ebp]
  0004b	51		 push	 ecx
  0004c	0f b6 55 08	 movzx	 edx, BYTE PTR _x_sign$[ebp]
  00050	52		 push	 edx
  00051	e8 00 00 00 00	 call	 ?ToStringCustom@CustomFormatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@PB_WPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z ; Palmtree::Math::Core::Internal::CustomFormatter::ToStringCustom
  00056	83 c4 18	 add	 esp, 24			; 00000018H
  00059	e9 ae 01 00 00	 jmp	 $LN16@ToString_I

; 1348 :         else

  0005e	e9 a9 01 00 00	 jmp	 $LN16@ToString_I
$LN4@ToString_I:

; 1349 :         {
; 1350 :             switch (format_type)

  00063	0f b7 45 f8	 movzx	 eax, WORD PTR _format_type$[ebp]
  00067	89 45 cc	 mov	 DWORD PTR tv77[ebp], eax
  0006a	8b 4d cc	 mov	 ecx, DWORD PTR tv77[ebp]
  0006d	83 e9 43	 sub	 ecx, 67			; 00000043H
  00070	89 4d cc	 mov	 DWORD PTR tv77[ebp], ecx
  00073	83 7d cc 35	 cmp	 DWORD PTR tv77[ebp], 53	; 00000035H
  00077	0f 87 74 01 00
	00		 ja	 $LN15@ToString_I
  0007d	8b 55 cc	 mov	 edx, DWORD PTR tv77[ebp]
  00080	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN17@ToString_I[edx]
  00087	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN22@ToString_I[eax*4]
$LN6@ToString_I:

; 1351 :             {
; 1352 :             case L'c':
; 1353 :             case L'C':
; 1354 :                 return (DecimalFromatter::ToStringC(x_sign, x_abs, L'C', precision, format_option, buffer, buffer_size));

  0008e	8b 4d 1c	 mov	 ecx, DWORD PTR _buffer_size$[ebp]
  00091	51		 push	 ecx
  00092	8b 55 18	 mov	 edx, DWORD PTR _buffer$[ebp]
  00095	52		 push	 edx
  00096	8b 45 14	 mov	 eax, DWORD PTR _format_option$[ebp]
  00099	50		 push	 eax
  0009a	8b 4d ec	 mov	 ecx, DWORD PTR _precision$[ebp]
  0009d	51		 push	 ecx
  0009e	6a 43		 push	 67			; 00000043H
  000a0	8b 55 0c	 mov	 edx, DWORD PTR _x_abs$[ebp]
  000a3	52		 push	 edx
  000a4	0f b6 45 08	 movzx	 eax, BYTE PTR _x_sign$[ebp]
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ?ToStringC@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::ToStringC
  000ae	83 c4 1c	 add	 esp, 28			; 0000001cH
  000b1	e9 56 01 00 00	 jmp	 $LN16@ToString_I
$LN7@ToString_I:

; 1355 :             case L'd':
; 1356 :             case L'D':
; 1357 :                 return (DecimalFromatter::ToStringD(x_sign, x_abs, L'D', precision, format_option, buffer, buffer_size));

  000b6	8b 4d 1c	 mov	 ecx, DWORD PTR _buffer_size$[ebp]
  000b9	51		 push	 ecx
  000ba	8b 55 18	 mov	 edx, DWORD PTR _buffer$[ebp]
  000bd	52		 push	 edx
  000be	8b 45 14	 mov	 eax, DWORD PTR _format_option$[ebp]
  000c1	50		 push	 eax
  000c2	8b 4d ec	 mov	 ecx, DWORD PTR _precision$[ebp]
  000c5	51		 push	 ecx
  000c6	6a 44		 push	 68			; 00000044H
  000c8	8b 55 0c	 mov	 edx, DWORD PTR _x_abs$[ebp]
  000cb	52		 push	 edx
  000cc	0f b6 45 08	 movzx	 eax, BYTE PTR _x_sign$[ebp]
  000d0	50		 push	 eax
  000d1	e8 00 00 00 00	 call	 ?ToStringD@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::ToStringD
  000d6	83 c4 1c	 add	 esp, 28			; 0000001cH
  000d9	e9 2e 01 00 00	 jmp	 $LN16@ToString_I
$LN8@ToString_I:

; 1358 :             case L'e':
; 1359 :             case L'E':
; 1360 :                 return (DecimalFromatter::ToStringE(x_sign, x_abs, format_type, precision, format_option, buffer, buffer_size));

  000de	8b 4d 1c	 mov	 ecx, DWORD PTR _buffer_size$[ebp]
  000e1	51		 push	 ecx
  000e2	8b 55 18	 mov	 edx, DWORD PTR _buffer$[ebp]
  000e5	52		 push	 edx
  000e6	8b 45 14	 mov	 eax, DWORD PTR _format_option$[ebp]
  000e9	50		 push	 eax
  000ea	8b 4d ec	 mov	 ecx, DWORD PTR _precision$[ebp]
  000ed	51		 push	 ecx
  000ee	0f b7 55 f8	 movzx	 edx, WORD PTR _format_type$[ebp]
  000f2	52		 push	 edx
  000f3	8b 45 0c	 mov	 eax, DWORD PTR _x_abs$[ebp]
  000f6	50		 push	 eax
  000f7	0f b6 4d 08	 movzx	 ecx, BYTE PTR _x_sign$[ebp]
  000fb	51		 push	 ecx
  000fc	e8 00 00 00 00	 call	 ?ToStringE@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::ToStringE
  00101	83 c4 1c	 add	 esp, 28			; 0000001cH
  00104	e9 03 01 00 00	 jmp	 $LN16@ToString_I
$LN9@ToString_I:

; 1361 :             case L'f':
; 1362 :             case L'F':
; 1363 :                 return (DecimalFromatter::ToStringF(x_sign, x_abs, L'F', precision, format_option, buffer, buffer_size));

  00109	8b 55 1c	 mov	 edx, DWORD PTR _buffer_size$[ebp]
  0010c	52		 push	 edx
  0010d	8b 45 18	 mov	 eax, DWORD PTR _buffer$[ebp]
  00110	50		 push	 eax
  00111	8b 4d 14	 mov	 ecx, DWORD PTR _format_option$[ebp]
  00114	51		 push	 ecx
  00115	8b 55 ec	 mov	 edx, DWORD PTR _precision$[ebp]
  00118	52		 push	 edx
  00119	6a 46		 push	 70			; 00000046H
  0011b	8b 45 0c	 mov	 eax, DWORD PTR _x_abs$[ebp]
  0011e	50		 push	 eax
  0011f	0f b6 4d 08	 movzx	 ecx, BYTE PTR _x_sign$[ebp]
  00123	51		 push	 ecx
  00124	e8 00 00 00 00	 call	 ?ToStringF@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::ToStringF
  00129	83 c4 1c	 add	 esp, 28			; 0000001cH
  0012c	e9 db 00 00 00	 jmp	 $LN16@ToString_I
$LN10@ToString_I:

; 1364 :             case L'g':
; 1365 :             case L'G':
; 1366 :                 return (DecimalFromatter::ToStringD(x_sign, x_abs, L'D', precision, format_option, buffer, buffer_size));

  00131	8b 55 1c	 mov	 edx, DWORD PTR _buffer_size$[ebp]
  00134	52		 push	 edx
  00135	8b 45 18	 mov	 eax, DWORD PTR _buffer$[ebp]
  00138	50		 push	 eax
  00139	8b 4d 14	 mov	 ecx, DWORD PTR _format_option$[ebp]
  0013c	51		 push	 ecx
  0013d	8b 55 ec	 mov	 edx, DWORD PTR _precision$[ebp]
  00140	52		 push	 edx
  00141	6a 44		 push	 68			; 00000044H
  00143	8b 45 0c	 mov	 eax, DWORD PTR _x_abs$[ebp]
  00146	50		 push	 eax
  00147	0f b6 4d 08	 movzx	 ecx, BYTE PTR _x_sign$[ebp]
  0014b	51		 push	 ecx
  0014c	e8 00 00 00 00	 call	 ?ToStringD@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::ToStringD
  00151	83 c4 1c	 add	 esp, 28			; 0000001cH
  00154	e9 b3 00 00 00	 jmp	 $LN16@ToString_I
$LN11@ToString_I:

; 1367 :             case L'n':
; 1368 :             case L'N':
; 1369 :                 return (DecimalFromatter::ToStringN(x_sign, x_abs, L'N', precision, format_option, buffer, buffer_size));

  00159	8b 55 1c	 mov	 edx, DWORD PTR _buffer_size$[ebp]
  0015c	52		 push	 edx
  0015d	8b 45 18	 mov	 eax, DWORD PTR _buffer$[ebp]
  00160	50		 push	 eax
  00161	8b 4d 14	 mov	 ecx, DWORD PTR _format_option$[ebp]
  00164	51		 push	 ecx
  00165	8b 55 ec	 mov	 edx, DWORD PTR _precision$[ebp]
  00168	52		 push	 edx
  00169	6a 4e		 push	 78			; 0000004eH
  0016b	8b 45 0c	 mov	 eax, DWORD PTR _x_abs$[ebp]
  0016e	50		 push	 eax
  0016f	0f b6 4d 08	 movzx	 ecx, BYTE PTR _x_sign$[ebp]
  00173	51		 push	 ecx
  00174	e8 00 00 00 00	 call	 ?ToStringN@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::ToStringN
  00179	83 c4 1c	 add	 esp, 28			; 0000001cH
  0017c	e9 8b 00 00 00	 jmp	 $LN16@ToString_I
$LN12@ToString_I:

; 1370 :             case L'p':
; 1371 :             case L'P':
; 1372 :                 return (DecimalFromatter::ToStringP(x_sign, x_abs, L'P', precision, format_option, buffer, buffer_size));

  00181	8b 55 1c	 mov	 edx, DWORD PTR _buffer_size$[ebp]
  00184	52		 push	 edx
  00185	8b 45 18	 mov	 eax, DWORD PTR _buffer$[ebp]
  00188	50		 push	 eax
  00189	8b 4d 14	 mov	 ecx, DWORD PTR _format_option$[ebp]
  0018c	51		 push	 ecx
  0018d	8b 55 ec	 mov	 edx, DWORD PTR _precision$[ebp]
  00190	52		 push	 edx
  00191	6a 50		 push	 80			; 00000050H
  00193	8b 45 0c	 mov	 eax, DWORD PTR _x_abs$[ebp]
  00196	50		 push	 eax
  00197	0f b6 4d 08	 movzx	 ecx, BYTE PTR _x_sign$[ebp]
  0019b	51		 push	 ecx
  0019c	e8 00 00 00 00	 call	 ?ToStringP@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::ToStringP
  001a1	83 c4 1c	 add	 esp, 28			; 0000001cH
  001a4	eb 66		 jmp	 SHORT $LN16@ToString_I
$LN13@ToString_I:

; 1373 :             case L'r':
; 1374 :             case L'R':
; 1375 :                 return (DecimalFromatter::ToStringD(x_sign, x_abs, L'D', 0, format_option, buffer, buffer_size));

  001a6	8b 55 1c	 mov	 edx, DWORD PTR _buffer_size$[ebp]
  001a9	52		 push	 edx
  001aa	8b 45 18	 mov	 eax, DWORD PTR _buffer$[ebp]
  001ad	50		 push	 eax
  001ae	8b 4d 14	 mov	 ecx, DWORD PTR _format_option$[ebp]
  001b1	51		 push	 ecx
  001b2	6a 00		 push	 0
  001b4	6a 44		 push	 68			; 00000044H
  001b6	8b 55 0c	 mov	 edx, DWORD PTR _x_abs$[ebp]
  001b9	52		 push	 edx
  001ba	0f b6 45 08	 movzx	 eax, BYTE PTR _x_sign$[ebp]
  001be	50		 push	 eax
  001bf	e8 00 00 00 00	 call	 ?ToStringD@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::ToStringD
  001c4	83 c4 1c	 add	 esp, 28			; 0000001cH
  001c7	eb 43		 jmp	 SHORT $LN16@ToString_I
$LN14@ToString_I:

; 1376 :             case L'x':
; 1377 :             case L'X':
; 1378 :                 return (HexaDecimalFormatter::ToStringX(x_sign, x_abs, format_type, precision, format_option, buffer, buffer_size));

  001c9	8b 4d 1c	 mov	 ecx, DWORD PTR _buffer_size$[ebp]
  001cc	51		 push	 ecx
  001cd	8b 55 18	 mov	 edx, DWORD PTR _buffer$[ebp]
  001d0	52		 push	 edx
  001d1	8b 45 14	 mov	 eax, DWORD PTR _format_option$[ebp]
  001d4	50		 push	 eax
  001d5	8b 4d ec	 mov	 ecx, DWORD PTR _precision$[ebp]
  001d8	51		 push	 ecx
  001d9	0f b7 55 f8	 movzx	 edx, WORD PTR _format_type$[ebp]
  001dd	52		 push	 edx
  001de	8b 45 0c	 mov	 eax, DWORD PTR _x_abs$[ebp]
  001e1	50		 push	 eax
  001e2	0f b6 4d 08	 movzx	 ecx, BYTE PTR _x_sign$[ebp]
  001e6	51		 push	 ecx
  001e7	e8 00 00 00 00	 call	 ?ToStringX@HexaDecimalFormatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z ; Palmtree::Math::Core::Internal::HexaDecimalFormatter::ToStringX
  001ec	83 c4 1c	 add	 esp, 28			; 0000001cH
  001ef	eb 1b		 jmp	 SHORT $LN16@ToString_I
$LN15@ToString_I:

; 1379 :             default:
; 1380 :                 throw FormatException(L"未知の書式指定子です。");

  001f1	68 00 00 00 00	 push	 OFFSET $SG118945
  001f6	8d 4d d0	 lea	 ecx, DWORD PTR $T1[ebp]
  001f9	e8 00 00 00 00	 call	 ??0FormatException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::FormatException::FormatException
  001fe	68 00 00 00 00	 push	 OFFSET __TI2?AVFormatException@Internal@Core@Math@Palmtree@@
  00203	8d 55 d0	 lea	 edx, DWORD PTR $T1[ebp]
  00206	52		 push	 edx
  00207	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN16@ToString_I:

; 1381 :             }
; 1382 :         }
; 1383 :     }

  0020c	52		 push	 edx
  0020d	8b cd		 mov	 ecx, ebp
  0020f	50		 push	 eax
  00210	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN21@ToString_I
  00216	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0021b	58		 pop	 eax
  0021c	5a		 pop	 edx
  0021d	5f		 pop	 edi
  0021e	83 c4 34	 add	 esp, 52			; 00000034H
  00221	3b ec		 cmp	 ebp, esp
  00223	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00228	8b e5		 mov	 esp, ebp
  0022a	5d		 pop	 ebp
  0022b	c3		 ret	 0
$LN21@ToString_I:
  0022c	02 00 00 00	 DD	 2
  00230	00 00 00 00	 DD	 $LN20@ToString_I
$LN20@ToString_I:
  00234	f8 ff ff ff	 DD	 -8			; fffffff8H
  00238	02 00 00 00	 DD	 2
  0023c	00 00 00 00	 DD	 $LN18@ToString_I
  00240	ec ff ff ff	 DD	 -20			; ffffffecH
  00244	04 00 00 00	 DD	 4
  00248	00 00 00 00	 DD	 $LN19@ToString_I
$LN19@ToString_I:
  0024c	70		 DB	 112			; 00000070H
  0024d	72		 DB	 114			; 00000072H
  0024e	65		 DB	 101			; 00000065H
  0024f	63		 DB	 99			; 00000063H
  00250	69		 DB	 105			; 00000069H
  00251	73		 DB	 115			; 00000073H
  00252	69		 DB	 105			; 00000069H
  00253	6f		 DB	 111			; 0000006fH
  00254	6e		 DB	 110			; 0000006eH
  00255	00		 DB	 0
$LN18@ToString_I:
  00256	66		 DB	 102			; 00000066H
  00257	6f		 DB	 111			; 0000006fH
  00258	72		 DB	 114			; 00000072H
  00259	6d		 DB	 109			; 0000006dH
  0025a	61		 DB	 97			; 00000061H
  0025b	74		 DB	 116			; 00000074H
  0025c	5f		 DB	 95			; 0000005fH
  0025d	74		 DB	 116			; 00000074H
  0025e	79		 DB	 121			; 00000079H
  0025f	70		 DB	 112			; 00000070H
  00260	65		 DB	 101			; 00000065H
  00261	00		 DB	 0
  00262	66 90		 npad	 2
$LN22@ToString_I:
  00264	00 00 00 00	 DD	 $LN6@ToString_I
  00268	00 00 00 00	 DD	 $LN7@ToString_I
  0026c	00 00 00 00	 DD	 $LN8@ToString_I
  00270	00 00 00 00	 DD	 $LN9@ToString_I
  00274	00 00 00 00	 DD	 $LN10@ToString_I
  00278	00 00 00 00	 DD	 $LN11@ToString_I
  0027c	00 00 00 00	 DD	 $LN12@ToString_I
  00280	00 00 00 00	 DD	 $LN13@ToString_I
  00284	00 00 00 00	 DD	 $LN14@ToString_I
  00288	00 00 00 00	 DD	 $LN15@ToString_I
$LN17@ToString_I:
  0028c	00		 DB	 0
  0028d	01		 DB	 1
  0028e	02		 DB	 2
  0028f	03		 DB	 3
  00290	04		 DB	 4
  00291	09		 DB	 9
  00292	09		 DB	 9
  00293	09		 DB	 9
  00294	09		 DB	 9
  00295	09		 DB	 9
  00296	09		 DB	 9
  00297	05		 DB	 5
  00298	09		 DB	 9
  00299	06		 DB	 6
  0029a	09		 DB	 9
  0029b	07		 DB	 7
  0029c	09		 DB	 9
  0029d	09		 DB	 9
  0029e	09		 DB	 9
  0029f	09		 DB	 9
  002a0	09		 DB	 9
  002a1	08		 DB	 8
  002a2	09		 DB	 9
  002a3	09		 DB	 9
  002a4	09		 DB	 9
  002a5	09		 DB	 9
  002a6	09		 DB	 9
  002a7	09		 DB	 9
  002a8	09		 DB	 9
  002a9	09		 DB	 9
  002aa	09		 DB	 9
  002ab	09		 DB	 9
  002ac	00		 DB	 0
  002ad	01		 DB	 1
  002ae	02		 DB	 2
  002af	03		 DB	 3
  002b0	04		 DB	 4
  002b1	09		 DB	 9
  002b2	09		 DB	 9
  002b3	09		 DB	 9
  002b4	09		 DB	 9
  002b5	09		 DB	 9
  002b6	09		 DB	 9
  002b7	05		 DB	 5
  002b8	09		 DB	 9
  002b9	06		 DB	 6
  002ba	09		 DB	 9
  002bb	07		 DB	 7
  002bc	09		 DB	 9
  002bd	09		 DB	 9
  002be	09		 DB	 9
  002bf	09		 DB	 9
  002c0	09		 DB	 9
  002c1	08		 DB	 8
?ToString_Imp@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@1234@PB_WPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PA_WI@Z ENDP ; Palmtree::Math::Core::Internal::ToString_Imp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
_TEXT	SEGMENT
_format$ = 8						; size = 4
_format_type$ = 12					; size = 4
_precision$ = 16					; size = 4
?ParseStandardFormat@Internal@Core@Math@Palmtree@@YAHPB_WPA_WPAH@Z PROC ; Palmtree::Math::Core::Internal::ParseStandardFormat

; 1307 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1308 :         if (format == nullptr)

  0000d	83 7d 08 00	 cmp	 DWORD PTR _format$[ebp], 0
  00011	75 23		 jne	 SHORT $LN2@ParseStand

; 1309 :         {
; 1310 :             *format_type = L'D';

  00013	b8 44 00 00 00	 mov	 eax, 68			; 00000044H
  00018	8b 4d 0c	 mov	 ecx, DWORD PTR _format_type$[ebp]
  0001b	66 89 01	 mov	 WORD PTR [ecx], ax

; 1311 :             *precision = -1;

  0001e	8b 55 10	 mov	 edx, DWORD PTR _precision$[ebp]
  00021	c7 02 ff ff ff
	ff		 mov	 DWORD PTR [edx], -1

; 1312 :             return (TRUE);

  00027	b8 01 00 00 00	 mov	 eax, 1
  0002c	e9 d2 01 00 00	 jmp	 $LN1@ParseStand
  00031	e9 cd 01 00 00	 jmp	 $LN1@ParseStand
$LN2@ParseStand:

; 1313 :         }
; 1314 :         else if (format[0] == L'\0')

  00036	b8 02 00 00 00	 mov	 eax, 2
  0003b	6b c8 00	 imul	 ecx, eax, 0
  0003e	8b 55 08	 mov	 edx, DWORD PTR _format$[ebp]
  00041	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  00045	85 c0		 test	 eax, eax
  00047	75 23		 jne	 SHORT $LN4@ParseStand

; 1315 :         {
; 1316 :             *format_type = L'D';

  00049	b9 44 00 00 00	 mov	 ecx, 68			; 00000044H
  0004e	8b 55 0c	 mov	 edx, DWORD PTR _format_type$[ebp]
  00051	66 89 0a	 mov	 WORD PTR [edx], cx

; 1317 :             *precision = -1;

  00054	8b 45 10	 mov	 eax, DWORD PTR _precision$[ebp]
  00057	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 1318 :             return (TRUE);

  0005d	b8 01 00 00 00	 mov	 eax, 1
  00062	e9 9c 01 00 00	 jmp	 $LN1@ParseStand
  00067	e9 97 01 00 00	 jmp	 $LN1@ParseStand
$LN4@ParseStand:

; 1319 :         }
; 1320 :         else if (__IS_ALPHA(format[0]) && format[1] == L'\0')

  0006c	b9 02 00 00 00	 mov	 ecx, 2
  00071	6b d1 00	 imul	 edx, ecx, 0
  00074	8b 45 08	 mov	 eax, DWORD PTR _format$[ebp]
  00077	0f b7 0c 10	 movzx	 ecx, WORD PTR [eax+edx]
  0007b	51		 push	 ecx
  0007c	e8 00 00 00 00	 call	 ?__IS_ALPHA@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::__IS_ALPHA
  00081	83 c4 04	 add	 esp, 4
  00084	85 c0		 test	 eax, eax
  00086	74 40		 je	 SHORT $LN6@ParseStand
  00088	ba 02 00 00 00	 mov	 edx, 2
  0008d	c1 e2 00	 shl	 edx, 0
  00090	8b 45 08	 mov	 eax, DWORD PTR _format$[ebp]
  00093	0f b7 0c 10	 movzx	 ecx, WORD PTR [eax+edx]
  00097	85 c9		 test	 ecx, ecx
  00099	75 2d		 jne	 SHORT $LN6@ParseStand

; 1321 :         {
; 1322 :             *format_type = format[0];

  0009b	ba 02 00 00 00	 mov	 edx, 2
  000a0	6b c2 00	 imul	 eax, edx, 0
  000a3	8b 4d 0c	 mov	 ecx, DWORD PTR _format_type$[ebp]
  000a6	8b 55 08	 mov	 edx, DWORD PTR _format$[ebp]
  000a9	66 8b 04 02	 mov	 ax, WORD PTR [edx+eax]
  000ad	66 89 01	 mov	 WORD PTR [ecx], ax

; 1323 :             *precision = -1;

  000b0	8b 4d 10	 mov	 ecx, DWORD PTR _precision$[ebp]
  000b3	c7 01 ff ff ff
	ff		 mov	 DWORD PTR [ecx], -1

; 1324 :             return (TRUE);

  000b9	b8 01 00 00 00	 mov	 eax, 1
  000be	e9 40 01 00 00	 jmp	 $LN1@ParseStand
  000c3	e9 3b 01 00 00	 jmp	 $LN1@ParseStand
$LN6@ParseStand:

; 1325 :         }
; 1326 :         else if (__IS_ALPHA(format[0]) && __IS_DIGIT(format[1]) && format[2] == L'\0')

  000c8	ba 02 00 00 00	 mov	 edx, 2
  000cd	6b c2 00	 imul	 eax, edx, 0
  000d0	8b 4d 08	 mov	 ecx, DWORD PTR _format$[ebp]
  000d3	0f b7 14 01	 movzx	 edx, WORD PTR [ecx+eax]
  000d7	52		 push	 edx
  000d8	e8 00 00 00 00	 call	 ?__IS_ALPHA@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::__IS_ALPHA
  000dd	83 c4 04	 add	 esp, 4
  000e0	85 c0		 test	 eax, eax
  000e2	74 69		 je	 SHORT $LN8@ParseStand
  000e4	b8 02 00 00 00	 mov	 eax, 2
  000e9	c1 e0 00	 shl	 eax, 0
  000ec	8b 4d 08	 mov	 ecx, DWORD PTR _format$[ebp]
  000ef	0f b7 14 01	 movzx	 edx, WORD PTR [ecx+eax]
  000f3	52		 push	 edx
  000f4	e8 00 00 00 00	 call	 ?__IS_DIGIT@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::__IS_DIGIT
  000f9	83 c4 04	 add	 esp, 4
  000fc	85 c0		 test	 eax, eax
  000fe	74 4d		 je	 SHORT $LN8@ParseStand
  00100	b8 02 00 00 00	 mov	 eax, 2
  00105	d1 e0		 shl	 eax, 1
  00107	8b 4d 08	 mov	 ecx, DWORD PTR _format$[ebp]
  0010a	0f b7 14 01	 movzx	 edx, WORD PTR [ecx+eax]
  0010e	85 d2		 test	 edx, edx
  00110	75 3b		 jne	 SHORT $LN8@ParseStand

; 1327 :         {
; 1328 :             *format_type = format[0];

  00112	b8 02 00 00 00	 mov	 eax, 2
  00117	6b c8 00	 imul	 ecx, eax, 0
  0011a	8b 55 0c	 mov	 edx, DWORD PTR _format_type$[ebp]
  0011d	8b 45 08	 mov	 eax, DWORD PTR _format$[ebp]
  00120	66 8b 0c 08	 mov	 cx, WORD PTR [eax+ecx]
  00124	66 89 0a	 mov	 WORD PTR [edx], cx

; 1329 :             *precision = format[1] - L'0';

  00127	ba 02 00 00 00	 mov	 edx, 2
  0012c	c1 e2 00	 shl	 edx, 0
  0012f	8b 45 08	 mov	 eax, DWORD PTR _format$[ebp]
  00132	0f b7 0c 10	 movzx	 ecx, WORD PTR [eax+edx]
  00136	83 e9 30	 sub	 ecx, 48			; 00000030H
  00139	8b 55 10	 mov	 edx, DWORD PTR _precision$[ebp]
  0013c	89 0a		 mov	 DWORD PTR [edx], ecx

; 1330 :             return (TRUE);

  0013e	b8 01 00 00 00	 mov	 eax, 1
  00143	e9 bb 00 00 00	 jmp	 $LN1@ParseStand
  00148	e9 b6 00 00 00	 jmp	 $LN1@ParseStand
$LN8@ParseStand:

; 1331 :         }
; 1332 :         else if (__IS_ALPHA(format[0]) && __IS_DIGIT(format[1]) && __IS_DIGIT(format[2]) && format[3] == L'\0')

  0014d	b8 02 00 00 00	 mov	 eax, 2
  00152	6b c8 00	 imul	 ecx, eax, 0
  00155	8b 55 08	 mov	 edx, DWORD PTR _format$[ebp]
  00158	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  0015c	50		 push	 eax
  0015d	e8 00 00 00 00	 call	 ?__IS_ALPHA@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::__IS_ALPHA
  00162	83 c4 04	 add	 esp, 4
  00165	85 c0		 test	 eax, eax
  00167	0f 84 94 00 00
	00		 je	 $LN10@ParseStand
  0016d	b9 02 00 00 00	 mov	 ecx, 2
  00172	c1 e1 00	 shl	 ecx, 0
  00175	8b 55 08	 mov	 edx, DWORD PTR _format$[ebp]
  00178	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  0017c	50		 push	 eax
  0017d	e8 00 00 00 00	 call	 ?__IS_DIGIT@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::__IS_DIGIT
  00182	83 c4 04	 add	 esp, 4
  00185	85 c0		 test	 eax, eax
  00187	74 78		 je	 SHORT $LN10@ParseStand
  00189	b9 02 00 00 00	 mov	 ecx, 2
  0018e	d1 e1		 shl	 ecx, 1
  00190	8b 55 08	 mov	 edx, DWORD PTR _format$[ebp]
  00193	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  00197	50		 push	 eax
  00198	e8 00 00 00 00	 call	 ?__IS_DIGIT@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::__IS_DIGIT
  0019d	83 c4 04	 add	 esp, 4
  001a0	85 c0		 test	 eax, eax
  001a2	74 5d		 je	 SHORT $LN10@ParseStand
  001a4	b9 02 00 00 00	 mov	 ecx, 2
  001a9	6b d1 03	 imul	 edx, ecx, 3
  001ac	8b 45 08	 mov	 eax, DWORD PTR _format$[ebp]
  001af	0f b7 0c 10	 movzx	 ecx, WORD PTR [eax+edx]
  001b3	85 c9		 test	 ecx, ecx
  001b5	75 4a		 jne	 SHORT $LN10@ParseStand

; 1333 :         {
; 1334 :             *format_type = format[0];

  001b7	ba 02 00 00 00	 mov	 edx, 2
  001bc	6b c2 00	 imul	 eax, edx, 0
  001bf	8b 4d 0c	 mov	 ecx, DWORD PTR _format_type$[ebp]
  001c2	8b 55 08	 mov	 edx, DWORD PTR _format$[ebp]
  001c5	66 8b 04 02	 mov	 ax, WORD PTR [edx+eax]
  001c9	66 89 01	 mov	 WORD PTR [ecx], ax

; 1335 :             *precision = (format[1] - L'0') * 10 + (format[2] - L'0');

  001cc	b9 02 00 00 00	 mov	 ecx, 2
  001d1	c1 e1 00	 shl	 ecx, 0
  001d4	8b 55 08	 mov	 edx, DWORD PTR _format$[ebp]
  001d7	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  001db	83 e8 30	 sub	 eax, 48			; 00000030H
  001de	6b c8 0a	 imul	 ecx, eax, 10
  001e1	ba 02 00 00 00	 mov	 edx, 2
  001e6	d1 e2		 shl	 edx, 1
  001e8	8b 45 08	 mov	 eax, DWORD PTR _format$[ebp]
  001eb	0f b7 14 10	 movzx	 edx, WORD PTR [eax+edx]
  001ef	8d 44 11 d0	 lea	 eax, DWORD PTR [ecx+edx-48]
  001f3	8b 4d 10	 mov	 ecx, DWORD PTR _precision$[ebp]
  001f6	89 01		 mov	 DWORD PTR [ecx], eax

; 1336 :             return (TRUE);

  001f8	b8 01 00 00 00	 mov	 eax, 1
  001fd	eb 04		 jmp	 SHORT $LN1@ParseStand

; 1337 :         }
; 1338 :         else

  001ff	eb 02		 jmp	 SHORT $LN1@ParseStand
$LN10@ParseStand:

; 1339 :             return (FALSE);

  00201	33 c0		 xor	 eax, eax
$LN1@ParseStand:

; 1340 :     }

  00203	3b ec		 cmp	 ebp, esp
  00205	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0020a	5d		 pop	 ebp
  0020b	c3		 ret	 0
?ParseStandardFormat@Internal@Core@Math@Palmtree@@YAHPB_WPA_WPAH@Z ENDP ; Palmtree::Math::Core::Internal::ParseStandardFormat
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
_TEXT	SEGMENT
_c$ = 8							; size = 2
?__IS_DIGIT@Internal@Core@Math@Palmtree@@YAH_W@Z PROC	; Palmtree::Math::Core::Internal::__IS_DIGIT

; 1300 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1301 :         if (c >= L'0' && c <= L'9')

  0000d	0f b7 45 08	 movzx	 eax, WORD PTR _c$[ebp]
  00011	83 f8 30	 cmp	 eax, 48			; 00000030H
  00014	7c 10		 jl	 SHORT $LN2@IS_DIGIT
  00016	0f b7 4d 08	 movzx	 ecx, WORD PTR _c$[ebp]
  0001a	83 f9 39	 cmp	 ecx, 57			; 00000039H
  0001d	7f 07		 jg	 SHORT $LN2@IS_DIGIT

; 1302 :             return (TRUE);

  0001f	b8 01 00 00 00	 mov	 eax, 1
  00024	eb 02		 jmp	 SHORT $LN1@IS_DIGIT
$LN2@IS_DIGIT:

; 1303 :         return (FALSE);

  00026	33 c0		 xor	 eax, eax
$LN1@IS_DIGIT:

; 1304 :     }

  00028	3b ec		 cmp	 ebp, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
?__IS_DIGIT@Internal@Core@Math@Palmtree@@YAH_W@Z ENDP	; Palmtree::Math::Core::Internal::__IS_DIGIT
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
_TEXT	SEGMENT
_c$ = 8							; size = 2
?__IS_ALPHA@Internal@Core@Math@Palmtree@@YAH_W@Z PROC	; Palmtree::Math::Core::Internal::__IS_ALPHA

; 1291 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1292 :         if (c >= L'A' && c <= L'Z')

  0000d	0f b7 45 08	 movzx	 eax, WORD PTR _c$[ebp]
  00011	83 f8 41	 cmp	 eax, 65			; 00000041H
  00014	7c 10		 jl	 SHORT $LN2@IS_ALPHA
  00016	0f b7 4d 08	 movzx	 ecx, WORD PTR _c$[ebp]
  0001a	83 f9 5a	 cmp	 ecx, 90			; 0000005aH
  0001d	7f 07		 jg	 SHORT $LN2@IS_ALPHA

; 1293 :             return (TRUE);

  0001f	b8 01 00 00 00	 mov	 eax, 1
  00024	eb 1b		 jmp	 SHORT $LN1@IS_ALPHA
$LN2@IS_ALPHA:

; 1294 :         if (c >= L'a' && c <= L'z')

  00026	0f b7 55 08	 movzx	 edx, WORD PTR _c$[ebp]
  0002a	83 fa 61	 cmp	 edx, 97			; 00000061H
  0002d	7c 10		 jl	 SHORT $LN3@IS_ALPHA
  0002f	0f b7 45 08	 movzx	 eax, WORD PTR _c$[ebp]
  00033	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  00036	7f 07		 jg	 SHORT $LN3@IS_ALPHA

; 1295 :             return (TRUE);

  00038	b8 01 00 00 00	 mov	 eax, 1
  0003d	eb 02		 jmp	 SHORT $LN1@IS_ALPHA
$LN3@IS_ALPHA:

; 1296 :         return (FALSE);

  0003f	33 c0		 xor	 eax, eax
$LN1@IS_ALPHA:

; 1297 :     }

  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
?__IS_ALPHA@Internal@Core@Math@Palmtree@@YAH_W@Z ENDP	; Palmtree::Math::Core::Internal::__IS_ALPHA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
_TEXT	SEGMENT
$T1 = -24						; size = 24
_x_sign$ = 8						; size = 1
_x_abs$ = 12						; size = 4
_format$ = 16						; size = 4
_format_option$ = 20					; size = 4
_buffer$ = 24						; size = 4
_buffer_size$ = 28					; size = 4
?ToStringCustom@CustomFormatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@PB_WPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z PROC ; Palmtree::Math::Core::Internal::CustomFormatter::ToStringCustom

; 1267 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000e	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00011	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00014	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00017	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001a	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001d	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00022	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1268 :             // 【実験結果】
; 1269 :             // %と‰の効果は重複してかかる。%が2個なら100*100倍、%と‰なら100*1000倍。%と‰はどこに書かれていてもそのとおりの場所で表示される。【例：(-1.23456789).ToString("0■%■0") => -12■%■3 】
; 1270 :             // '#', '0', '.', ','をまず抜き出して数値を文字列化し、そのあとで'#', '0'のある場所に数値をはめ込む、みたいな実装になっているらしい。
; 1271 :             // ⇒小数部は小数点を基準に上位から順に1文字ずつはめ込まれ、はめ込めなかった分は四捨五入されて必要ならば繰り上がる。
; 1272 :             // ⇒整数部は小数点を基準に下位から順に1文字ずつはめ込まれる。
; 1273 :             // '.'の後に書かれている','は無視される。また、最初の '0', '#' の前に書かれている ',' は無視される。
; 1274 :             // 整数部にて、'0'の後に書かれている'#'は'0'と解釈される。
; 1275 :             // 小数部にて、'0'の前に書かれている'#'は'0'と解釈される。
; 1276 :             // '.'の前に '0'または '#'が一つもない場合は、'#' が一つだけあると解釈される。
; 1277 :             // 整数部の符号は最初の '#', '0'の前にどんなテキストがあろうとあらゆるテキストの最初に表示される。正値のときに自動的には'+'は表示されない。
; 1278 :             // Eの構文解析に失敗した場合はEは(そしてその次の+あるいは-も)一般テキストとしてそのまま表示される。
; 1279 :             // ⇒【例：(1.23456789).ToString("0.0E+#0  000") => 1.2E+34  568】
; 1280 :             // 逆に、構文として正しければEはどこに記述されていてもその場所のまま表示される。
; 1281 :             // ⇒【例：(-0.0123456789).ToString("0.0E+0  000") => -1.2E-2  346】
; 1282 :             // '.' が複数ある場合は最初のものを除いて無視される。【例：(-0.0123456789).ToString("0.0 00.00") => -0.0 1235】
; 1283 :             // 三つ目の';'の後の文字列は数値の符号が何であっても表示されない。つまり無視される。
; 1284 : 
; 1285 :             throw NotSupportedException(L"カスタム書式によるToStringはサポートされていません。");

  00027	68 00 00 00 00	 push	 OFFSET $SG118891
  0002c	8d 4d e8	 lea	 ecx, DWORD PTR $T1[ebp]
  0002f	e8 00 00 00 00	 call	 ??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::NotSupportedException::NotSupportedException
  00034	68 00 00 00 00	 push	 OFFSET __TI2?AVNotSupportedException@Internal@Core@Math@Palmtree@@
  00039	8d 45 e8	 lea	 eax, DWORD PTR $T1[ebp]
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@ToStringCu:

; 1286 :         }

  00042	83 c4 18	 add	 esp, 24			; 00000018H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
?ToStringCustom@CustomFormatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@PB_WPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z ENDP ; Palmtree::Math::Core::Internal::CustomFormatter::ToStringCustom
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
_TEXT	SEGMENT
tv226 = -140						; size = 4
tv205 = -134						; size = 2
$T2 = -132						; size = 4
_digit_table$3 = -128					; size = 4
_s_ptr$4 = -124						; size = 4
_total_length$5 = -120					; size = 4
_filling_digit_len$6 = -116				; size = 4
_leading_zero_digit_count$7 = -112			; size = 4
_ptr$8 = -108						; size = 4
_carry$9 = -101						; size = 1
_count$10 = -100					; size = 4
_out_ptr$11 = -96					; size = 4
_in_ptr$12 = -92					; size = 4
_ptr$13 = -88						; size = 4
_temp_buf_word_count$14 = -84				; size = 4
_filling_char$15 = -80					; size = 2
_output_len$16 = -76					; size = 4
_temp_buf$17 = -72					; size = 4
_temp_buf_bit_count$18 = -68				; size = 4
_root$19 = -60						; size = 16
_writer$ = -36						; size = 20
__$EHRec$ = -12						; size = 12
_x_sign$ = 8						; size = 1
_x_abs$ = 12						; size = 4
_format_type$ = 16					; size = 2
_precision$ = 20					; size = 4
_format_option$ = 24					; size = 4
_buffer$ = 28						; size = 4
_buffer_size$ = 32					; size = 4
?ToStringX@HexaDecimalFormatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z PROC ; Palmtree::Math::Core::Internal::HexaDecimalFormatter::ToStringX

; 1136 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ToStringX@HexaDecimalFormatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00017	57		 push	 edi
  00018	8d bd 74 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-140]
  0001e	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002f	33 c5		 xor	 eax, ebp
  00031	50		 push	 eax
  00032	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00035	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003b	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00040	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1137 :             if (precision < 1)

  00045	83 7d 14 01	 cmp	 DWORD PTR _precision$[ebp], 1
  00049	7d 07		 jge	 SHORT $LN10@ToStringX

; 1138 :                 precision = 1;

  0004b	c7 45 14 01 00
	00 00		 mov	 DWORD PTR _precision$[ebp], 1
$LN10@ToStringX:

; 1139 : 
; 1140 :             StringWriter writer(buffer, buffer_size);

  00052	8b 45 20	 mov	 eax, DWORD PTR _buffer_size$[ebp]
  00055	50		 push	 eax
  00056	8b 4d 1c	 mov	 ecx, DWORD PTR _buffer$[ebp]
  00059	51		 push	 ecx
  0005a	8d 4d dc	 lea	 ecx, DWORD PTR _writer$[ebp]
  0005d	e8 00 00 00 00	 call	 ??0StringWriter@Internal@Core@Math@Palmtree@@QAE@PA_WI@Z ; Palmtree::Math::Core::Internal::StringWriter::StringWriter

; 1141 :             if (x_abs->IS_ZERO)

  00062	8b 55 0c	 mov	 edx, DWORD PTR _x_abs$[ebp]
  00065	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00068	83 e0 01	 and	 eax, 1
  0006b	74 20		 je	 SHORT $LN11@ToStringX

; 1142 :             {
; 1143 :                 // x == 0 の場合
; 1144 :                 // precision 桁だけ '0' を出力する。(precision == 0 であっても 1 桁だけは出力する)
; 1145 : 
; 1146 :                 writer.Write(L'0', precision);

  0006d	8b 4d 14	 mov	 ecx, DWORD PTR _precision$[ebp]
  00070	51		 push	 ecx
  00071	6a 30		 push	 48			; 00000030H
  00073	8d 4d dc	 lea	 ecx, DWORD PTR _writer$[ebp]
  00076	e8 00 00 00 00	 call	 ?Write@StringWriter@Internal@Core@Math@Palmtree@@QAEX_WI@Z ; Palmtree::Math::Core::Internal::StringWriter::Write

; 1147 :                 return (writer.GetLength());

  0007b	8d 4d dc	 lea	 ecx, DWORD PTR _writer$[ebp]
  0007e	e8 00 00 00 00	 call	 ?GetLength@StringWriter@Internal@Core@Math@Palmtree@@QAEIXZ ; Palmtree::Math::Core::Internal::StringWriter::GetLength
  00083	e9 84 03 00 00	 jmp	 $LN1@ToStringX

; 1148 :             }
; 1149 :             else

  00088	e9 7f 03 00 00	 jmp	 $LN1@ToStringX
$LN11@ToStringX:

; 1150 :             {
; 1151 :                 // x != 0 の場合
; 1152 :                 ResourceHolderUINT root;

  0008d	8d 4d c4	 lea	 ecx, DWORD PTR _root$19[ebp]
  00090	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00095	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1153 :                 __UNIT_TYPE temp_buf_bit_count = x_abs->UNIT_BIT_COUNT + 4;

  0009c	8b 55 0c	 mov	 edx, DWORD PTR _x_abs$[ebp]
  0009f	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000a2	83 c0 04	 add	 eax, 4
  000a5	89 45 bc	 mov	 DWORD PTR _temp_buf_bit_count$18[ebp], eax

; 1154 :                 __UNIT_TYPE* temp_buf = root.AllocateBlock(temp_buf_bit_count);

  000a8	8b 4d bc	 mov	 ecx, DWORD PTR _temp_buf_bit_count$18[ebp]
  000ab	51		 push	 ecx
  000ac	8d 4d c4	 lea	 ecx, DWORD PTR _root$19[ebp]
  000af	e8 00 00 00 00	 call	 ?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAII@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
  000b4	89 45 b8	 mov	 DWORD PTR _temp_buf$17[ebp], eax

; 1155 :                 __UNIT_TYPE output_len;
; 1156 :                 wchar_t filling_char;
; 1157 :                 if (x_sign >= 0)

  000b7	0f be 55 08	 movsx	 edx, BYTE PTR _x_sign$[ebp]
  000bb	85 d2		 test	 edx, edx
  000bd	0f 8c e8 00 00
	00		 jl	 $LN13@ToStringX

; 1158 :                 {
; 1159 :                     // x >= 0 の場合
; 1160 : 
; 1161 :                     _COPY_MEMORY_UNIT(temp_buf, x_abs->BLOCK, x_abs->UNIT_WORD_COUNT);

  000c3	8b 45 0c	 mov	 eax, DWORD PTR _x_abs$[ebp]
  000c6	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000c9	51		 push	 ecx
  000ca	8b 55 0c	 mov	 edx, DWORD PTR _x_abs$[ebp]
  000cd	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  000d0	50		 push	 eax
  000d1	8b 4d b8	 mov	 ecx, DWORD PTR _temp_buf$17[ebp]
  000d4	51		 push	 ecx
  000d5	e8 00 00 00 00	 call	 __COPY_MEMORY_UNIT
  000da	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1162 :                     __UNIT_TYPE temp_buf_word_count = _DIVIDE_CEILING_UNIT(temp_buf_bit_count, __UNIT_TYPE_BIT_COUNT);

  000dd	6a 20		 push	 32			; 00000020H
  000df	8b 55 bc	 mov	 edx, DWORD PTR _temp_buf_bit_count$18[ebp]
  000e2	52		 push	 edx
  000e3	e8 00 00 00 00	 call	 __DIVIDE_CEILING_UNIT
  000e8	83 c4 08	 add	 esp, 8
  000eb	89 45 ac	 mov	 DWORD PTR _temp_buf_word_count$14[ebp], eax

; 1163 :                     output_len = temp_buf_word_count * (__UNIT_TYPE_BIT_COUNT / 4);

  000ee	8b 45 ac	 mov	 eax, DWORD PTR _temp_buf_word_count$14[ebp]
  000f1	c1 e0 03	 shl	 eax, 3
  000f4	89 45 b4	 mov	 DWORD PTR _output_len$16[ebp], eax

; 1164 :                     unsigned char* ptr = (unsigned char*)&temp_buf[temp_buf_word_count] - 1;

  000f7	8b 4d ac	 mov	 ecx, DWORD PTR _temp_buf_word_count$14[ebp]
  000fa	8b 55 b8	 mov	 edx, DWORD PTR _temp_buf$17[ebp]
  000fd	8d 44 8a ff	 lea	 eax, DWORD PTR [edx+ecx*4-1]
  00101	89 45 a8	 mov	 DWORD PTR _ptr$13[ebp], eax
$LN2@ToStringX:

; 1165 :                     while (ptr >= (unsigned char*)temp_buf)

  00104	8b 4d a8	 mov	 ecx, DWORD PTR _ptr$13[ebp]
  00107	3b 4d b8	 cmp	 ecx, DWORD PTR _temp_buf$17[ebp]
  0010a	0f 82 8d 00 00
	00		 jb	 $LN3@ToStringX

; 1166 :                     {
; 1167 :                         if ((ptr[0] >> 4) != 0 || (ptr[0] & 0xf) >= 0x8)

  00110	ba 01 00 00 00	 mov	 edx, 1
  00115	6b c2 00	 imul	 eax, edx, 0
  00118	8b 4d a8	 mov	 ecx, DWORD PTR _ptr$13[ebp]
  0011b	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  0011f	c1 fa 04	 sar	 edx, 4
  00122	85 d2		 test	 edx, edx
  00124	75 17		 jne	 SHORT $LN16@ToStringX
  00126	b8 01 00 00 00	 mov	 eax, 1
  0012b	6b c8 00	 imul	 ecx, eax, 0
  0012e	8b 55 a8	 mov	 edx, DWORD PTR _ptr$13[ebp]
  00131	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00135	83 e0 0f	 and	 eax, 15			; 0000000fH
  00138	83 f8 08	 cmp	 eax, 8
  0013b	7c 02		 jl	 SHORT $LN15@ToStringX
$LN16@ToStringX:

; 1168 :                             break;

  0013d	eb 5e		 jmp	 SHORT $LN3@ToStringX
$LN15@ToStringX:

; 1169 :                         // 最上位桁が '0' で、かつ次の桁が '0'～'7'である場合
; 1170 :                         // ⇒最上位桁の '0' を削除する
; 1171 :                         --output_len;

  0013f	8b 4d b4	 mov	 ecx, DWORD PTR _output_len$16[ebp]
  00142	83 e9 01	 sub	 ecx, 1
  00145	89 4d b4	 mov	 DWORD PTR _output_len$16[ebp], ecx

; 1172 : 
; 1173 :                         if (&ptr[-1] < (unsigned char*)temp_buf)

  00148	ba 01 00 00 00	 mov	 edx, 1
  0014d	6b c2 ff	 imul	 eax, edx, -1
  00150	03 45 a8	 add	 eax, DWORD PTR _ptr$13[ebp]
  00153	3b 45 b8	 cmp	 eax, DWORD PTR _temp_buf$17[ebp]
  00156	73 02		 jae	 SHORT $LN17@ToStringX

; 1174 :                             break;

  00158	eb 43		 jmp	 SHORT $LN3@ToStringX
$LN17@ToStringX:

; 1175 : 
; 1176 :                         if (ptr[0] != 0 || (ptr[-1] >> 4) >= 0x8)

  0015a	b9 01 00 00 00	 mov	 ecx, 1
  0015f	6b d1 00	 imul	 edx, ecx, 0
  00162	8b 45 a8	 mov	 eax, DWORD PTR _ptr$13[ebp]
  00165	0f b6 0c 10	 movzx	 ecx, BYTE PTR [eax+edx]
  00169	85 c9		 test	 ecx, ecx
  0016b	75 17		 jne	 SHORT $LN19@ToStringX
  0016d	ba 01 00 00 00	 mov	 edx, 1
  00172	6b c2 ff	 imul	 eax, edx, -1
  00175	8b 4d a8	 mov	 ecx, DWORD PTR _ptr$13[ebp]
  00178	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  0017c	c1 fa 04	 sar	 edx, 4
  0017f	83 fa 08	 cmp	 edx, 8
  00182	7c 02		 jl	 SHORT $LN18@ToStringX
$LN19@ToStringX:

; 1177 :                             break;

  00184	eb 17		 jmp	 SHORT $LN3@ToStringX
$LN18@ToStringX:

; 1178 :                         // 最上位桁が '0' で、かつ次の桁が '0'～'7'である場合
; 1179 :                         // ⇒最上位桁の '0' を削除する
; 1180 :                         --output_len;

  00186	8b 45 b4	 mov	 eax, DWORD PTR _output_len$16[ebp]
  00189	83 e8 01	 sub	 eax, 1
  0018c	89 45 b4	 mov	 DWORD PTR _output_len$16[ebp], eax

; 1181 : 
; 1182 :                         --ptr;

  0018f	8b 4d a8	 mov	 ecx, DWORD PTR _ptr$13[ebp]
  00192	83 e9 01	 sub	 ecx, 1
  00195	89 4d a8	 mov	 DWORD PTR _ptr$13[ebp], ecx

; 1183 :                     }

  00198	e9 67 ff ff ff	 jmp	 $LN2@ToStringX
$LN3@ToStringX:

; 1184 :                     filling_char = L'0';

  0019d	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  001a2	66 89 55 b0	 mov	 WORD PTR _filling_char$15[ebp], dx

; 1185 :                 }
; 1186 :                 else

  001a6	e9 56 01 00 00	 jmp	 $LN14@ToStringX
$LN13@ToStringX:

; 1187 :                 {
; 1188 :                     // x < 0 の場合
; 1189 : 
; 1190 :                     __UNIT_TYPE *in_ptr = x_abs->BLOCK;

  001ab	8b 45 0c	 mov	 eax, DWORD PTR _x_abs$[ebp]
  001ae	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  001b1	89 4d a4	 mov	 DWORD PTR _in_ptr$12[ebp], ecx

; 1191 :                     __UNIT_TYPE *out_ptr = temp_buf;

  001b4	8b 55 b8	 mov	 edx, DWORD PTR _temp_buf$17[ebp]
  001b7	89 55 a0	 mov	 DWORD PTR _out_ptr$11[ebp], edx

; 1192 :                     __UNIT_TYPE count = x_abs->UNIT_WORD_COUNT;

  001ba	8b 45 0c	 mov	 eax, DWORD PTR _x_abs$[ebp]
  001bd	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  001c0	89 4d 9c	 mov	 DWORD PTR _count$10[ebp], ecx

; 1193 :                     char carry = 1;

  001c3	c6 45 9b 01	 mov	 BYTE PTR _carry$9[ebp], 1
$LN4@ToStringX:

; 1194 :                     while (count > 0)

  001c7	83 7d 9c 00	 cmp	 DWORD PTR _count$10[ebp], 0
  001cb	76 3b		 jbe	 SHORT $LN5@ToStringX

; 1195 :                     {
; 1196 :                         carry = _ADD_UNIT(carry, ~*in_ptr, 0, out_ptr);

  001cd	8b 55 a0	 mov	 edx, DWORD PTR _out_ptr$11[ebp]
  001d0	52		 push	 edx
  001d1	6a 00		 push	 0
  001d3	8b 45 a4	 mov	 eax, DWORD PTR _in_ptr$12[ebp]
  001d6	8b 08		 mov	 ecx, DWORD PTR [eax]
  001d8	f7 d1		 not	 ecx
  001da	51		 push	 ecx
  001db	0f b6 55 9b	 movzx	 edx, BYTE PTR _carry$9[ebp]
  001df	52		 push	 edx
  001e0	e8 00 00 00 00	 call	 __ADD_UNIT
  001e5	83 c4 10	 add	 esp, 16			; 00000010H
  001e8	88 45 9b	 mov	 BYTE PTR _carry$9[ebp], al

; 1197 :                         ++in_ptr;

  001eb	8b 45 a4	 mov	 eax, DWORD PTR _in_ptr$12[ebp]
  001ee	83 c0 04	 add	 eax, 4
  001f1	89 45 a4	 mov	 DWORD PTR _in_ptr$12[ebp], eax

; 1198 :                         ++out_ptr;

  001f4	8b 4d a0	 mov	 ecx, DWORD PTR _out_ptr$11[ebp]
  001f7	83 c1 04	 add	 ecx, 4
  001fa	89 4d a0	 mov	 DWORD PTR _out_ptr$11[ebp], ecx

; 1199 :                         --count;

  001fd	8b 55 9c	 mov	 edx, DWORD PTR _count$10[ebp]
  00200	83 ea 01	 sub	 edx, 1
  00203	89 55 9c	 mov	 DWORD PTR _count$10[ebp], edx

; 1200 :                     }

  00206	eb bf		 jmp	 SHORT $LN4@ToStringX
$LN5@ToStringX:

; 1201 :                     output_len = x_abs->UNIT_WORD_COUNT * (__UNIT_TYPE_BIT_COUNT / 4);

  00208	8b 45 0c	 mov	 eax, DWORD PTR _x_abs$[ebp]
  0020b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0020e	c1 e1 03	 shl	 ecx, 3
  00211	89 4d b4	 mov	 DWORD PTR _output_len$16[ebp], ecx

; 1202 :                     unsigned char* ptr = (unsigned char*)&temp_buf[x_abs->UNIT_WORD_COUNT] - 1;

  00214	8b 55 0c	 mov	 edx, DWORD PTR _x_abs$[ebp]
  00217	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0021a	8b 4d b8	 mov	 ecx, DWORD PTR _temp_buf$17[ebp]
  0021d	8d 54 81 ff	 lea	 edx, DWORD PTR [ecx+eax*4-1]
  00221	89 55 94	 mov	 DWORD PTR _ptr$8[ebp], edx
$LN6@ToStringX:

; 1203 :                     while (ptr >= (unsigned char*)temp_buf)

  00224	8b 45 94	 mov	 eax, DWORD PTR _ptr$8[ebp]
  00227	3b 45 b8	 cmp	 eax, DWORD PTR _temp_buf$17[ebp]
  0022a	0f 82 a3 00 00
	00		 jb	 $LN7@ToStringX

; 1204 :                     {
; 1205 :                         if ((ptr[0] >> 4) != 0xf || (ptr[0] & 0xf) < 0x8)

  00230	b9 01 00 00 00	 mov	 ecx, 1
  00235	6b d1 00	 imul	 edx, ecx, 0
  00238	8b 45 94	 mov	 eax, DWORD PTR _ptr$8[ebp]
  0023b	0f b6 0c 10	 movzx	 ecx, BYTE PTR [eax+edx]
  0023f	c1 f9 04	 sar	 ecx, 4
  00242	83 f9 0f	 cmp	 ecx, 15			; 0000000fH
  00245	75 17		 jne	 SHORT $LN21@ToStringX
  00247	ba 01 00 00 00	 mov	 edx, 1
  0024c	6b c2 00	 imul	 eax, edx, 0
  0024f	8b 4d 94	 mov	 ecx, DWORD PTR _ptr$8[ebp]
  00252	0f b6 14 01	 movzx	 edx, BYTE PTR [ecx+eax]
  00256	83 e2 0f	 and	 edx, 15			; 0000000fH
  00259	83 fa 08	 cmp	 edx, 8
  0025c	7d 02		 jge	 SHORT $LN20@ToStringX
$LN21@ToStringX:

; 1206 :                             break;

  0025e	eb 73		 jmp	 SHORT $LN7@ToStringX
$LN20@ToStringX:

; 1207 :                         // 最上位桁が 'F' で、かつ次の桁が '8'～'F'である場合
; 1208 :                         // ⇒最上位桁の 'F' を削除する
; 1209 :                         *ptr &= 0x0f;

  00260	8b 45 94	 mov	 eax, DWORD PTR _ptr$8[ebp]
  00263	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00266	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00269	8b 55 94	 mov	 edx, DWORD PTR _ptr$8[ebp]
  0026c	88 0a		 mov	 BYTE PTR [edx], cl

; 1210 :                         --output_len;

  0026e	8b 45 b4	 mov	 eax, DWORD PTR _output_len$16[ebp]
  00271	83 e8 01	 sub	 eax, 1
  00274	89 45 b4	 mov	 DWORD PTR _output_len$16[ebp], eax

; 1211 : 
; 1212 :                         if (&ptr[-1] < (unsigned char*)temp_buf)

  00277	b9 01 00 00 00	 mov	 ecx, 1
  0027c	6b d1 ff	 imul	 edx, ecx, -1
  0027f	03 55 94	 add	 edx, DWORD PTR _ptr$8[ebp]
  00282	3b 55 b8	 cmp	 edx, DWORD PTR _temp_buf$17[ebp]
  00285	73 02		 jae	 SHORT $LN22@ToStringX

; 1213 :                             break;

  00287	eb 4a		 jmp	 SHORT $LN7@ToStringX
$LN22@ToStringX:

; 1214 : 
; 1215 :                         if (ptr[0] == 0xf || (ptr[-1] >> 4) < 0x8)

  00289	b8 01 00 00 00	 mov	 eax, 1
  0028e	6b c8 00	 imul	 ecx, eax, 0
  00291	8b 55 94	 mov	 edx, DWORD PTR _ptr$8[ebp]
  00294	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  00298	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  0029b	74 17		 je	 SHORT $LN24@ToStringX
  0029d	b9 01 00 00 00	 mov	 ecx, 1
  002a2	6b d1 ff	 imul	 edx, ecx, -1
  002a5	8b 45 94	 mov	 eax, DWORD PTR _ptr$8[ebp]
  002a8	0f b6 0c 10	 movzx	 ecx, BYTE PTR [eax+edx]
  002ac	c1 f9 04	 sar	 ecx, 4
  002af	83 f9 08	 cmp	 ecx, 8
  002b2	7d 02		 jge	 SHORT $LN23@ToStringX
$LN24@ToStringX:

; 1216 :                             break;

  002b4	eb 1d		 jmp	 SHORT $LN7@ToStringX
$LN23@ToStringX:

; 1217 :                         // 最上位桁が 'F' で、かつ次の桁が '8'～'F'である場合
; 1218 :                         // ⇒最上位桁の 'F' を削除する
; 1219 :                         *ptr = 0;

  002b6	8b 55 94	 mov	 edx, DWORD PTR _ptr$8[ebp]
  002b9	c6 02 00	 mov	 BYTE PTR [edx], 0

; 1220 :                         --output_len;

  002bc	8b 45 b4	 mov	 eax, DWORD PTR _output_len$16[ebp]
  002bf	83 e8 01	 sub	 eax, 1
  002c2	89 45 b4	 mov	 DWORD PTR _output_len$16[ebp], eax

; 1221 : 
; 1222 :                         --ptr;

  002c5	8b 4d 94	 mov	 ecx, DWORD PTR _ptr$8[ebp]
  002c8	83 e9 01	 sub	 ecx, 1
  002cb	89 4d 94	 mov	 DWORD PTR _ptr$8[ebp], ecx

; 1223 :                     }

  002ce	e9 51 ff ff ff	 jmp	 $LN6@ToStringX
$LN7@ToStringX:

; 1224 :                     filling_char = format_type == L'X' ? L'F' : L'f';

  002d3	0f b7 55 10	 movzx	 edx, WORD PTR _format_type$[ebp]
  002d7	83 fa 58	 cmp	 edx, 88			; 00000058H
  002da	75 0e		 jne	 SHORT $LN28@ToStringX
  002dc	b8 46 00 00 00	 mov	 eax, 70			; 00000046H
  002e1	66 89 85 7a ff
	ff ff		 mov	 WORD PTR tv205[ebp], ax
  002e8	eb 0c		 jmp	 SHORT $LN29@ToStringX
$LN28@ToStringX:
  002ea	b9 66 00 00 00	 mov	 ecx, 102		; 00000066H
  002ef	66 89 8d 7a ff
	ff ff		 mov	 WORD PTR tv205[ebp], cx
$LN29@ToStringX:
  002f6	66 8b 95 7a ff
	ff ff		 mov	 dx, WORD PTR tv205[ebp]
  002fd	66 89 55 b0	 mov	 WORD PTR _filling_char$15[ebp], dx
$LN14@ToStringX:

; 1225 :                 }
; 1226 :                 root.CheckBlock(temp_buf);

  00301	8b 45 b8	 mov	 eax, DWORD PTR _temp_buf$17[ebp]
  00304	50		 push	 eax
  00305	8d 4d c4	 lea	 ecx, DWORD PTR _root$19[ebp]
  00308	e8 00 00 00 00	 call	 ?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock

; 1227 : 
; 1228 :                 // この時点で 合計桁数は output_len だけあることが判明
; 1229 : 
; 1230 :                 // output_len 桁を格納するためのワード数を調べ、その隙間の桁数を leading_zero_digit_count とする
; 1231 : 
; 1232 :                 unsigned int leading_zero_digit_count = (unsigned int)(_DIVIDE_CEILING_UNIT(output_len, __UNIT_TYPE_BIT_COUNT / 4) * (__UNIT_TYPE_BIT_COUNT / 4) - output_len);

  0030d	6a 08		 push	 8
  0030f	8b 4d b4	 mov	 ecx, DWORD PTR _output_len$16[ebp]
  00312	51		 push	 ecx
  00313	e8 00 00 00 00	 call	 __DIVIDE_CEILING_UNIT
  00318	83 c4 08	 add	 esp, 8
  0031b	c1 e0 03	 shl	 eax, 3
  0031e	2b 45 b4	 sub	 eax, DWORD PTR _output_len$16[ebp]
  00321	89 45 90	 mov	 DWORD PTR _leading_zero_digit_count$7[ebp], eax

; 1233 : 
; 1234 : 
; 1235 :                 __UNIT_TYPE filling_digit_len; // 塗りつぶす上位桁の桁数
; 1236 :                 __UNIT_TYPE total_length; // 出力する合計の桁数
; 1237 :                 if (output_len < (__UNIT_TYPE)precision)

  00324	8b 55 b4	 mov	 edx, DWORD PTR _output_len$16[ebp]
  00327	3b 55 14	 cmp	 edx, DWORD PTR _precision$[ebp]
  0032a	73 11		 jae	 SHORT $LN25@ToStringX

; 1238 :                 {
; 1239 :                     filling_digit_len = precision - output_len;

  0032c	8b 45 14	 mov	 eax, DWORD PTR _precision$[ebp]
  0032f	2b 45 b4	 sub	 eax, DWORD PTR _output_len$16[ebp]
  00332	89 45 8c	 mov	 DWORD PTR _filling_digit_len$6[ebp], eax

; 1240 :                     total_length = precision;

  00335	8b 4d 14	 mov	 ecx, DWORD PTR _precision$[ebp]
  00338	89 4d 88	 mov	 DWORD PTR _total_length$5[ebp], ecx

; 1241 :                 }
; 1242 :                 else

  0033b	eb 0d		 jmp	 SHORT $LN26@ToStringX
$LN25@ToStringX:

; 1243 :                 {
; 1244 :                     filling_digit_len = 0;

  0033d	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR _filling_digit_len$6[ebp], 0

; 1245 :                     total_length = output_len;

  00344	8b 55 b4	 mov	 edx, DWORD PTR _output_len$16[ebp]
  00347	89 55 88	 mov	 DWORD PTR _total_length$5[ebp], edx
$LN26@ToStringX:

; 1246 :                 }
; 1247 :                 writer.Write(filling_char, filling_digit_len);

  0034a	8b 45 8c	 mov	 eax, DWORD PTR _filling_digit_len$6[ebp]
  0034d	50		 push	 eax
  0034e	0f b7 4d b0	 movzx	 ecx, WORD PTR _filling_char$15[ebp]
  00352	51		 push	 ecx
  00353	8d 4d dc	 lea	 ecx, DWORD PTR _writer$[ebp]
  00356	e8 00 00 00 00	 call	 ?Write@StringWriter@Internal@Core@Math@Palmtree@@QAEX_WI@Z ; Palmtree::Math::Core::Internal::StringWriter::Write

; 1248 : 
; 1249 :                 __UNIT_TYPE* s_ptr = &temp_buf[_DIVIDE_CEILING_UNIT(output_len, __UNIT_TYPE_BIT_COUNT / 4) - 1];

  0035b	6a 08		 push	 8
  0035d	8b 55 b4	 mov	 edx, DWORD PTR _output_len$16[ebp]
  00360	52		 push	 edx
  00361	e8 00 00 00 00	 call	 __DIVIDE_CEILING_UNIT
  00366	83 c4 08	 add	 esp, 8
  00369	8b 4d b8	 mov	 ecx, DWORD PTR _temp_buf$17[ebp]
  0036c	8d 54 81 fc	 lea	 edx, DWORD PTR [ecx+eax*4-4]
  00370	89 55 84	 mov	 DWORD PTR _s_ptr$4[ebp], edx

; 1250 :                 wchar_t* digit_table = format_type == L'X' ? hexadecimal_upper_digits : hexadecimal_lower_digits;

  00373	0f b7 45 10	 movzx	 eax, WORD PTR _format_type$[ebp]
  00377	83 f8 58	 cmp	 eax, 88			; 00000058H
  0037a	75 0c		 jne	 SHORT $LN30@ToStringX
  0037c	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv226[ebp], OFFSET ?hexadecimal_upper_digits@HexaDecimalFormatter@Internal@Core@Math@Palmtree@@3PA_WA
  00386	eb 0a		 jmp	 SHORT $LN31@ToStringX
$LN30@ToStringX:
  00388	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv226[ebp], OFFSET ?hexadecimal_lower_digits@HexaDecimalFormatter@Internal@Core@Math@Palmtree@@3PA_WA
$LN31@ToStringX:
  00392	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR tv226[ebp]
  00398	89 4d 80	 mov	 DWORD PTR _digit_table$3[ebp], ecx

; 1251 :                 OutputHexNumberSequenceOneWord(*s_ptr, leading_zero_digit_count, digit_table, &writer);

  0039b	8d 55 dc	 lea	 edx, DWORD PTR _writer$[ebp]
  0039e	52		 push	 edx
  0039f	8b 45 80	 mov	 eax, DWORD PTR _digit_table$3[ebp]
  003a2	50		 push	 eax
  003a3	8b 4d 90	 mov	 ecx, DWORD PTR _leading_zero_digit_count$7[ebp]
  003a6	51		 push	 ecx
  003a7	8b 55 84	 mov	 edx, DWORD PTR _s_ptr$4[ebp]
  003aa	8b 02		 mov	 eax, DWORD PTR [edx]
  003ac	50		 push	 eax
  003ad	e8 00 00 00 00	 call	 ?OutputHexNumberSequenceOneWord@HexaDecimalFormatter@Internal@Core@Math@Palmtree@@YAXIIPA_WPAVStringWriter@2345@@Z ; Palmtree::Math::Core::Internal::HexaDecimalFormatter::OutputHexNumberSequenceOneWord
  003b2	83 c4 10	 add	 esp, 16			; 00000010H

; 1252 :                 --s_ptr;

  003b5	8b 4d 84	 mov	 ecx, DWORD PTR _s_ptr$4[ebp]
  003b8	83 e9 04	 sub	 ecx, 4
  003bb	89 4d 84	 mov	 DWORD PTR _s_ptr$4[ebp], ecx
$LN8@ToStringX:

; 1253 :                 while (s_ptr >= temp_buf)

  003be	8b 55 84	 mov	 edx, DWORD PTR _s_ptr$4[ebp]
  003c1	3b 55 b8	 cmp	 edx, DWORD PTR _temp_buf$17[ebp]
  003c4	72 23		 jb	 SHORT $LN9@ToStringX

; 1254 :                 {
; 1255 :                     OutputHexNumberSequenceOneWord(*s_ptr, 0, digit_table, &writer);

  003c6	8d 45 dc	 lea	 eax, DWORD PTR _writer$[ebp]
  003c9	50		 push	 eax
  003ca	8b 4d 80	 mov	 ecx, DWORD PTR _digit_table$3[ebp]
  003cd	51		 push	 ecx
  003ce	6a 00		 push	 0
  003d0	8b 55 84	 mov	 edx, DWORD PTR _s_ptr$4[ebp]
  003d3	8b 02		 mov	 eax, DWORD PTR [edx]
  003d5	50		 push	 eax
  003d6	e8 00 00 00 00	 call	 ?OutputHexNumberSequenceOneWord@HexaDecimalFormatter@Internal@Core@Math@Palmtree@@YAXIIPA_WPAVStringWriter@2345@@Z ; Palmtree::Math::Core::Internal::HexaDecimalFormatter::OutputHexNumberSequenceOneWord
  003db	83 c4 10	 add	 esp, 16			; 00000010H

; 1256 :                     --s_ptr;

  003de	8b 4d 84	 mov	 ecx, DWORD PTR _s_ptr$4[ebp]
  003e1	83 e9 04	 sub	 ecx, 4
  003e4	89 4d 84	 mov	 DWORD PTR _s_ptr$4[ebp], ecx

; 1257 :                 }

  003e7	eb d5		 jmp	 SHORT $LN8@ToStringX
$LN9@ToStringX:

; 1258 :                 return (writer.GetLength());

  003e9	8d 4d dc	 lea	 ecx, DWORD PTR _writer$[ebp]
  003ec	e8 00 00 00 00	 call	 ?GetLength@StringWriter@Internal@Core@Math@Palmtree@@QAEIXZ ; Palmtree::Math::Core::Internal::StringWriter::GetLength
  003f1	89 85 7c ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  003f7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  003fe	8d 4d c4	 lea	 ecx, DWORD PTR _root$19[ebp]
  00401	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00406	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
$LN1@ToStringX:

; 1259 :             }
; 1260 :         }

  0040c	52		 push	 edx
  0040d	8b cd		 mov	 ecx, ebp
  0040f	50		 push	 eax
  00410	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN37@ToStringX
  00416	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0041b	58		 pop	 eax
  0041c	5a		 pop	 edx
  0041d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00420	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00427	59		 pop	 ecx
  00428	5f		 pop	 edi
  00429	81 c4 8c 00 00
	00		 add	 esp, 140		; 0000008cH
  0042f	3b ec		 cmp	 ebp, esp
  00431	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00436	8b e5		 mov	 esp, ebp
  00438	5d		 pop	 ebp
  00439	c3		 ret	 0
  0043a	66 90		 npad	 2
$LN37@ToStringX:
  0043c	02 00 00 00	 DD	 2
  00440	00 00 00 00	 DD	 $LN36@ToStringX
$LN36@ToStringX:
  00444	dc ff ff ff	 DD	 -36			; ffffffdcH
  00448	14 00 00 00	 DD	 20			; 00000014H
  0044c	00 00 00 00	 DD	 $LN33@ToStringX
  00450	c4 ff ff ff	 DD	 -60			; ffffffc4H
  00454	10 00 00 00	 DD	 16			; 00000010H
  00458	00 00 00 00	 DD	 $LN34@ToStringX
$LN34@ToStringX:
  0045c	72		 DB	 114			; 00000072H
  0045d	6f		 DB	 111			; 0000006fH
  0045e	6f		 DB	 111			; 0000006fH
  0045f	74		 DB	 116			; 00000074H
  00460	00		 DB	 0
$LN33@ToStringX:
  00461	77		 DB	 119			; 00000077H
  00462	72		 DB	 114			; 00000072H
  00463	69		 DB	 105			; 00000069H
  00464	74		 DB	 116			; 00000074H
  00465	65		 DB	 101			; 00000065H
  00466	72		 DB	 114			; 00000072H
  00467	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ToStringX@HexaDecimalFormatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z$0:
  00000	8d 4d c4	 lea	 ecx, DWORD PTR _root$19[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?ToStringX@HexaDecimalFormatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 78 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-136]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ToStringX@HexaDecimalFormatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ToStringX@HexaDecimalFormatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z ENDP ; Palmtree::Math::Core::Internal::HexaDecimalFormatter::ToStringX
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
_TEXT	SEGMENT
tv477 = -148						; size = 4
tv463 = -144						; size = 4
tv451 = -140						; size = 4
tv437 = -136						; size = 4
tv425 = -132						; size = 4
tv413 = -128						; size = 4
tv401 = -124						; size = 4
tv387 = -120						; size = 4
tv375 = -116						; size = 4
tv363 = -112						; size = 4
tv351 = -108						; size = 4
tv339 = -104						; size = 4
tv327 = -100						; size = 4
tv315 = -96						; size = 4
tv303 = -92						; size = 4
tv289 = -88						; size = 4
tv277 = -84						; size = 4
tv265 = -80						; size = 4
tv253 = -76						; size = 4
tv241 = -72						; size = 4
tv229 = -68						; size = 4
tv217 = -64						; size = 4
tv205 = -60						; size = 4
tv193 = -56						; size = 4
tv181 = -52						; size = 4
tv169 = -48						; size = 4
tv157 = -44						; size = 4
tv145 = -40						; size = 4
tv133 = -36						; size = 4
tv89 = -32						; size = 4
$T1 = -28						; size = 24
_count$ = -4						; size = 4
_x$ = 8							; size = 4
_skip_digit_len$ = 12					; size = 4
_digit_table$ = 16					; size = 4
_writer$ = 20						; size = 4
?OutputHexNumberSequenceOneWord@HexaDecimalFormatter@Internal@Core@Math@Palmtree@@YAXIIPA_WPAVStringWriter@2345@@Z PROC ; Palmtree::Math::Core::Internal::HexaDecimalFormatter::OutputHexNumberSequenceOneWord

; 1075 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd 6c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-148]
  00011	b9 25 00 00 00	 mov	 ecx, 37			; 00000025H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00022	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1076 :             if (sizeof(__UNIT_TYPE) > sizeof(_UINT64_T))

  00027	33 c0		 xor	 eax, eax
  00029	74 20		 je	 SHORT $LN2@OutputHexN

; 1077 :             {
; 1078 :                 // 64bit を超える __UNIT_TYPE には未対応
; 1079 :                 // 対応するには以降のコーディングを見直す必要がある
; 1080 :                 throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_tostring.cpp;OutputHexNumberSequenceOneWord;1");

  0002b	68 00 00 00 00	 push	 OFFSET $SG118803
  00030	68 00 00 00 00	 push	 OFFSET $SG118804
  00035	8d 4d e4	 lea	 ecx, DWORD PTR $T1[ebp]
  00038	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  0003d	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00042	8d 4d e4	 lea	 ecx, DWORD PTR $T1[ebp]
  00045	51		 push	 ecx
  00046	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@OutputHexN:

; 1081 :             }
; 1082 :             unsigned int count = __UNIT_TYPE_BIT_COUNT / 4;

  0004b	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR _count$[ebp], 8

; 1083 :             if (skip_digit_len > 0)

  00052	83 7d 0c 00	 cmp	 DWORD PTR _skip_digit_len$[ebp], 0
  00056	76 1f		 jbe	 SHORT $LN3@OutputHexN

; 1084 :             {
; 1085 :                 x = _ROTATE_L_UNIT(x, 4 * skip_digit_len);

  00058	8b 55 0c	 mov	 edx, DWORD PTR _skip_digit_len$[ebp]
  0005b	c1 e2 02	 shl	 edx, 2
  0005e	52		 push	 edx
  0005f	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 __ROTATE_L_UNIT
  00068	83 c4 08	 add	 esp, 8
  0006b	89 45 08	 mov	 DWORD PTR _x$[ebp], eax

; 1086 :                 count -= skip_digit_len;

  0006e	8b 4d fc	 mov	 ecx, DWORD PTR _count$[ebp]
  00071	2b 4d 0c	 sub	 ecx, DWORD PTR _skip_digit_len$[ebp]
  00074	89 4d fc	 mov	 DWORD PTR _count$[ebp], ecx
$LN3@OutputHexN:

; 1087 :             }
; 1088 :             if (count & 0x10)

  00077	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  0007a	83 e2 10	 and	 edx, 16			; 00000010H
  0007d	0f 84 57 03 00
	00		 je	 $LN4@OutputHexN

; 1089 :             {
; 1090 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  00083	6a 04		 push	 4
  00085	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 __ROTATE_L_UNIT
  0008e	83 c4 08	 add	 esp, 8
  00091	89 45 08	 mov	 DWORD PTR _x$[ebp], eax
  00094	8b 4d 14	 mov	 ecx, DWORD PTR _writer$[ebp]
  00097	8b 11		 mov	 edx, DWORD PTR [ecx]
  00099	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0009c	89 45 e0	 mov	 DWORD PTR tv89[ebp], eax
  0009f	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  000a2	83 e1 0f	 and	 ecx, 15			; 0000000fH
  000a5	8b f4		 mov	 esi, esp
  000a7	8b 55 10	 mov	 edx, DWORD PTR _digit_table$[ebp]
  000aa	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  000ae	50		 push	 eax
  000af	8b 4d 14	 mov	 ecx, DWORD PTR _writer$[ebp]
  000b2	ff 55 e0	 call	 DWORD PTR tv89[ebp]
  000b5	3b f4		 cmp	 esi, esp
  000b7	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1091 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  000bc	6a 04		 push	 4
  000be	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  000c1	51		 push	 ecx
  000c2	e8 00 00 00 00	 call	 __ROTATE_L_UNIT
  000c7	83 c4 08	 add	 esp, 8
  000ca	89 45 08	 mov	 DWORD PTR _x$[ebp], eax
  000cd	8b 55 14	 mov	 edx, DWORD PTR _writer$[ebp]
  000d0	8b 02		 mov	 eax, DWORD PTR [edx]
  000d2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d5	89 4d dc	 mov	 DWORD PTR tv133[ebp], ecx
  000d8	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  000db	83 e2 0f	 and	 edx, 15			; 0000000fH
  000de	8b f4		 mov	 esi, esp
  000e0	8b 45 10	 mov	 eax, DWORD PTR _digit_table$[ebp]
  000e3	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  000e7	51		 push	 ecx
  000e8	8b 4d 14	 mov	 ecx, DWORD PTR _writer$[ebp]
  000eb	ff 55 dc	 call	 DWORD PTR tv133[ebp]
  000ee	3b f4		 cmp	 esi, esp
  000f0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1092 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  000f5	6a 04		 push	 4
  000f7	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  000fa	52		 push	 edx
  000fb	e8 00 00 00 00	 call	 __ROTATE_L_UNIT
  00100	83 c4 08	 add	 esp, 8
  00103	89 45 08	 mov	 DWORD PTR _x$[ebp], eax
  00106	8b 45 14	 mov	 eax, DWORD PTR _writer$[ebp]
  00109	8b 08		 mov	 ecx, DWORD PTR [eax]
  0010b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0010e	89 55 d8	 mov	 DWORD PTR tv145[ebp], edx
  00111	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00114	83 e0 0f	 and	 eax, 15			; 0000000fH
  00117	8b f4		 mov	 esi, esp
  00119	8b 4d 10	 mov	 ecx, DWORD PTR _digit_table$[ebp]
  0011c	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00120	52		 push	 edx
  00121	8b 4d 14	 mov	 ecx, DWORD PTR _writer$[ebp]
  00124	ff 55 d8	 call	 DWORD PTR tv145[ebp]
  00127	3b f4		 cmp	 esi, esp
  00129	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1093 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  0012e	6a 04		 push	 4
  00130	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00133	50		 push	 eax
  00134	e8 00 00 00 00	 call	 __ROTATE_L_UNIT
  00139	83 c4 08	 add	 esp, 8
  0013c	89 45 08	 mov	 DWORD PTR _x$[ebp], eax
  0013f	8b 4d 14	 mov	 ecx, DWORD PTR _writer$[ebp]
  00142	8b 11		 mov	 edx, DWORD PTR [ecx]
  00144	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00147	89 45 d4	 mov	 DWORD PTR tv157[ebp], eax
  0014a	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0014d	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00150	8b f4		 mov	 esi, esp
  00152	8b 55 10	 mov	 edx, DWORD PTR _digit_table$[ebp]
  00155	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  00159	50		 push	 eax
  0015a	8b 4d 14	 mov	 ecx, DWORD PTR _writer$[ebp]
  0015d	ff 55 d4	 call	 DWORD PTR tv157[ebp]
  00160	3b f4		 cmp	 esi, esp
  00162	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1094 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  00167	6a 04		 push	 4
  00169	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0016c	51		 push	 ecx
  0016d	e8 00 00 00 00	 call	 __ROTATE_L_UNIT
  00172	83 c4 08	 add	 esp, 8
  00175	89 45 08	 mov	 DWORD PTR _x$[ebp], eax
  00178	8b 55 14	 mov	 edx, DWORD PTR _writer$[ebp]
  0017b	8b 02		 mov	 eax, DWORD PTR [edx]
  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	89 4d d0	 mov	 DWORD PTR tv169[ebp], ecx
  00183	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00186	83 e2 0f	 and	 edx, 15			; 0000000fH
  00189	8b f4		 mov	 esi, esp
  0018b	8b 45 10	 mov	 eax, DWORD PTR _digit_table$[ebp]
  0018e	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  00192	51		 push	 ecx
  00193	8b 4d 14	 mov	 ecx, DWORD PTR _writer$[ebp]
  00196	ff 55 d0	 call	 DWORD PTR tv169[ebp]
  00199	3b f4		 cmp	 esi, esp
  0019b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1095 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  001a0	6a 04		 push	 4
  001a2	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  001a5	52		 push	 edx
  001a6	e8 00 00 00 00	 call	 __ROTATE_L_UNIT
  001ab	83 c4 08	 add	 esp, 8
  001ae	89 45 08	 mov	 DWORD PTR _x$[ebp], eax
  001b1	8b 45 14	 mov	 eax, DWORD PTR _writer$[ebp]
  001b4	8b 08		 mov	 ecx, DWORD PTR [eax]
  001b6	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  001b9	89 55 cc	 mov	 DWORD PTR tv181[ebp], edx
  001bc	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  001bf	83 e0 0f	 and	 eax, 15			; 0000000fH
  001c2	8b f4		 mov	 esi, esp
  001c4	8b 4d 10	 mov	 ecx, DWORD PTR _digit_table$[ebp]
  001c7	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  001cb	52		 push	 edx
  001cc	8b 4d 14	 mov	 ecx, DWORD PTR _writer$[ebp]
  001cf	ff 55 cc	 call	 DWORD PTR tv181[ebp]
  001d2	3b f4		 cmp	 esi, esp
  001d4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1096 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  001d9	6a 04		 push	 4
  001db	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  001de	50		 push	 eax
  001df	e8 00 00 00 00	 call	 __ROTATE_L_UNIT
  001e4	83 c4 08	 add	 esp, 8
  001e7	89 45 08	 mov	 DWORD PTR _x$[ebp], eax
  001ea	8b 4d 14	 mov	 ecx, DWORD PTR _writer$[ebp]
  001ed	8b 11		 mov	 edx, DWORD PTR [ecx]
  001ef	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001f2	89 45 c8	 mov	 DWORD PTR tv193[ebp], eax
  001f5	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  001f8	83 e1 0f	 and	 ecx, 15			; 0000000fH
  001fb	8b f4		 mov	 esi, esp
  001fd	8b 55 10	 mov	 edx, DWORD PTR _digit_table$[ebp]
  00200	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  00204	50		 push	 eax
  00205	8b 4d 14	 mov	 ecx, DWORD PTR _writer$[ebp]
  00208	ff 55 c8	 call	 DWORD PTR tv193[ebp]
  0020b	3b f4		 cmp	 esi, esp
  0020d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1097 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  00212	6a 04		 push	 4
  00214	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00217	51		 push	 ecx
  00218	e8 00 00 00 00	 call	 __ROTATE_L_UNIT
  0021d	83 c4 08	 add	 esp, 8
  00220	89 45 08	 mov	 DWORD PTR _x$[ebp], eax
  00223	8b 55 14	 mov	 edx, DWORD PTR _writer$[ebp]
  00226	8b 02		 mov	 eax, DWORD PTR [edx]
  00228	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0022b	89 4d c4	 mov	 DWORD PTR tv205[ebp], ecx
  0022e	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00231	83 e2 0f	 and	 edx, 15			; 0000000fH
  00234	8b f4		 mov	 esi, esp
  00236	8b 45 10	 mov	 eax, DWORD PTR _digit_table$[ebp]
  00239	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  0023d	51		 push	 ecx
  0023e	8b 4d 14	 mov	 ecx, DWORD PTR _writer$[ebp]
  00241	ff 55 c4	 call	 DWORD PTR tv205[ebp]
  00244	3b f4		 cmp	 esi, esp
  00246	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1098 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  0024b	6a 04		 push	 4
  0024d	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00250	52		 push	 edx
  00251	e8 00 00 00 00	 call	 __ROTATE_L_UNIT
  00256	83 c4 08	 add	 esp, 8
  00259	89 45 08	 mov	 DWORD PTR _x$[ebp], eax
  0025c	8b 45 14	 mov	 eax, DWORD PTR _writer$[ebp]
  0025f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00261	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00264	89 55 c0	 mov	 DWORD PTR tv217[ebp], edx
  00267	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0026a	83 e0 0f	 and	 eax, 15			; 0000000fH
  0026d	8b f4		 mov	 esi, esp
  0026f	8b 4d 10	 mov	 ecx, DWORD PTR _digit_table$[ebp]
  00272	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00276	52		 push	 edx
  00277	8b 4d 14	 mov	 ecx, DWORD PTR _writer$[ebp]
  0027a	ff 55 c0	 call	 DWORD PTR tv217[ebp]
  0027d	3b f4		 cmp	 esi, esp
  0027f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1099 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  00284	6a 04		 push	 4
  00286	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00289	50		 push	 eax
  0028a	e8 00 00 00 00	 call	 __ROTATE_L_UNIT
  0028f	83 c4 08	 add	 esp, 8
  00292	89 45 08	 mov	 DWORD PTR _x$[ebp], eax
  00295	8b 4d 14	 mov	 ecx, DWORD PTR _writer$[ebp]
  00298	8b 11		 mov	 edx, DWORD PTR [ecx]
  0029a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0029d	89 45 bc	 mov	 DWORD PTR tv229[ebp], eax
  002a0	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  002a3	83 e1 0f	 and	 ecx, 15			; 0000000fH
  002a6	8b f4		 mov	 esi, esp
  002a8	8b 55 10	 mov	 edx, DWORD PTR _digit_table$[ebp]
  002ab	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  002af	50		 push	 eax
  002b0	8b 4d 14	 mov	 ecx, DWORD PTR _writer$[ebp]
  002b3	ff 55 bc	 call	 DWORD PTR tv229[ebp]
  002b6	3b f4		 cmp	 esi, esp
  002b8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1100 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  002bd	6a 04		 push	 4
  002bf	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  002c2	51		 push	 ecx
  002c3	e8 00 00 00 00	 call	 __ROTATE_L_UNIT
  002c8	83 c4 08	 add	 esp, 8
  002cb	89 45 08	 mov	 DWORD PTR _x$[ebp], eax
  002ce	8b 55 14	 mov	 edx, DWORD PTR _writer$[ebp]
  002d1	8b 02		 mov	 eax, DWORD PTR [edx]
  002d3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  002d6	89 4d b8	 mov	 DWORD PTR tv241[ebp], ecx
  002d9	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  002dc	83 e2 0f	 and	 edx, 15			; 0000000fH
  002df	8b f4		 mov	 esi, esp
  002e1	8b 45 10	 mov	 eax, DWORD PTR _digit_table$[ebp]
  002e4	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  002e8	51		 push	 ecx
  002e9	8b 4d 14	 mov	 ecx, DWORD PTR _writer$[ebp]
  002ec	ff 55 b8	 call	 DWORD PTR tv241[ebp]
  002ef	3b f4		 cmp	 esi, esp
  002f1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1101 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  002f6	6a 04		 push	 4
  002f8	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  002fb	52		 push	 edx
  002fc	e8 00 00 00 00	 call	 __ROTATE_L_UNIT
  00301	83 c4 08	 add	 esp, 8
  00304	89 45 08	 mov	 DWORD PTR _x$[ebp], eax
  00307	8b 45 14	 mov	 eax, DWORD PTR _writer$[ebp]
  0030a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0030c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0030f	89 55 b4	 mov	 DWORD PTR tv253[ebp], edx
  00312	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00315	83 e0 0f	 and	 eax, 15			; 0000000fH
  00318	8b f4		 mov	 esi, esp
  0031a	8b 4d 10	 mov	 ecx, DWORD PTR _digit_table$[ebp]
  0031d	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00321	52		 push	 edx
  00322	8b 4d 14	 mov	 ecx, DWORD PTR _writer$[ebp]
  00325	ff 55 b4	 call	 DWORD PTR tv253[ebp]
  00328	3b f4		 cmp	 esi, esp
  0032a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1102 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  0032f	6a 04		 push	 4
  00331	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00334	50		 push	 eax
  00335	e8 00 00 00 00	 call	 __ROTATE_L_UNIT
  0033a	83 c4 08	 add	 esp, 8
  0033d	89 45 08	 mov	 DWORD PTR _x$[ebp], eax
  00340	8b 4d 14	 mov	 ecx, DWORD PTR _writer$[ebp]
  00343	8b 11		 mov	 edx, DWORD PTR [ecx]
  00345	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00348	89 45 b0	 mov	 DWORD PTR tv265[ebp], eax
  0034b	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0034e	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00351	8b f4		 mov	 esi, esp
  00353	8b 55 10	 mov	 edx, DWORD PTR _digit_table$[ebp]
  00356	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  0035a	50		 push	 eax
  0035b	8b 4d 14	 mov	 ecx, DWORD PTR _writer$[ebp]
  0035e	ff 55 b0	 call	 DWORD PTR tv265[ebp]
  00361	3b f4		 cmp	 esi, esp
  00363	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1103 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  00368	6a 04		 push	 4
  0036a	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0036d	51		 push	 ecx
  0036e	e8 00 00 00 00	 call	 __ROTATE_L_UNIT
  00373	83 c4 08	 add	 esp, 8
  00376	89 45 08	 mov	 DWORD PTR _x$[ebp], eax
  00379	8b 55 14	 mov	 edx, DWORD PTR _writer$[ebp]
  0037c	8b 02		 mov	 eax, DWORD PTR [edx]
  0037e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00381	89 4d ac	 mov	 DWORD PTR tv277[ebp], ecx
  00384	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00387	83 e2 0f	 and	 edx, 15			; 0000000fH
  0038a	8b f4		 mov	 esi, esp
  0038c	8b 45 10	 mov	 eax, DWORD PTR _digit_table$[ebp]
  0038f	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  00393	51		 push	 ecx
  00394	8b 4d 14	 mov	 ecx, DWORD PTR _writer$[ebp]
  00397	ff 55 ac	 call	 DWORD PTR tv277[ebp]
  0039a	3b f4		 cmp	 esi, esp
  0039c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1104 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  003a1	6a 04		 push	 4
  003a3	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  003a6	52		 push	 edx
  003a7	e8 00 00 00 00	 call	 __ROTATE_L_UNIT
  003ac	83 c4 08	 add	 esp, 8
  003af	89 45 08	 mov	 DWORD PTR _x$[ebp], eax
  003b2	8b 45 14	 mov	 eax, DWORD PTR _writer$[ebp]
  003b5	8b 08		 mov	 ecx, DWORD PTR [eax]
  003b7	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  003ba	89 55 a8	 mov	 DWORD PTR tv289[ebp], edx
  003bd	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  003c0	83 e0 0f	 and	 eax, 15			; 0000000fH
  003c3	8b f4		 mov	 esi, esp
  003c5	8b 4d 10	 mov	 ecx, DWORD PTR _digit_table$[ebp]
  003c8	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  003cc	52		 push	 edx
  003cd	8b 4d 14	 mov	 ecx, DWORD PTR _writer$[ebp]
  003d0	ff 55 a8	 call	 DWORD PTR tv289[ebp]
  003d3	3b f4		 cmp	 esi, esp
  003d5	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN4@OutputHexN:

; 1105 :             }
; 1106 :             if (count & 0x8)

  003da	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  003dd	83 e0 08	 and	 eax, 8
  003e0	0f 84 c8 01 00
	00		 je	 $LN5@OutputHexN

; 1107 :             {
; 1108 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  003e6	6a 04		 push	 4
  003e8	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  003eb	51		 push	 ecx
  003ec	e8 00 00 00 00	 call	 __ROTATE_L_UNIT
  003f1	83 c4 08	 add	 esp, 8
  003f4	89 45 08	 mov	 DWORD PTR _x$[ebp], eax
  003f7	8b 55 14	 mov	 edx, DWORD PTR _writer$[ebp]
  003fa	8b 02		 mov	 eax, DWORD PTR [edx]
  003fc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  003ff	89 4d a4	 mov	 DWORD PTR tv303[ebp], ecx
  00402	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00405	83 e2 0f	 and	 edx, 15			; 0000000fH
  00408	8b f4		 mov	 esi, esp
  0040a	8b 45 10	 mov	 eax, DWORD PTR _digit_table$[ebp]
  0040d	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  00411	51		 push	 ecx
  00412	8b 4d 14	 mov	 ecx, DWORD PTR _writer$[ebp]
  00415	ff 55 a4	 call	 DWORD PTR tv303[ebp]
  00418	3b f4		 cmp	 esi, esp
  0041a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1109 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  0041f	6a 04		 push	 4
  00421	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00424	52		 push	 edx
  00425	e8 00 00 00 00	 call	 __ROTATE_L_UNIT
  0042a	83 c4 08	 add	 esp, 8
  0042d	89 45 08	 mov	 DWORD PTR _x$[ebp], eax
  00430	8b 45 14	 mov	 eax, DWORD PTR _writer$[ebp]
  00433	8b 08		 mov	 ecx, DWORD PTR [eax]
  00435	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00438	89 55 a0	 mov	 DWORD PTR tv315[ebp], edx
  0043b	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0043e	83 e0 0f	 and	 eax, 15			; 0000000fH
  00441	8b f4		 mov	 esi, esp
  00443	8b 4d 10	 mov	 ecx, DWORD PTR _digit_table$[ebp]
  00446	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  0044a	52		 push	 edx
  0044b	8b 4d 14	 mov	 ecx, DWORD PTR _writer$[ebp]
  0044e	ff 55 a0	 call	 DWORD PTR tv315[ebp]
  00451	3b f4		 cmp	 esi, esp
  00453	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1110 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  00458	6a 04		 push	 4
  0045a	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0045d	50		 push	 eax
  0045e	e8 00 00 00 00	 call	 __ROTATE_L_UNIT
  00463	83 c4 08	 add	 esp, 8
  00466	89 45 08	 mov	 DWORD PTR _x$[ebp], eax
  00469	8b 4d 14	 mov	 ecx, DWORD PTR _writer$[ebp]
  0046c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0046e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00471	89 45 9c	 mov	 DWORD PTR tv327[ebp], eax
  00474	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00477	83 e1 0f	 and	 ecx, 15			; 0000000fH
  0047a	8b f4		 mov	 esi, esp
  0047c	8b 55 10	 mov	 edx, DWORD PTR _digit_table$[ebp]
  0047f	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  00483	50		 push	 eax
  00484	8b 4d 14	 mov	 ecx, DWORD PTR _writer$[ebp]
  00487	ff 55 9c	 call	 DWORD PTR tv327[ebp]
  0048a	3b f4		 cmp	 esi, esp
  0048c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1111 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  00491	6a 04		 push	 4
  00493	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00496	51		 push	 ecx
  00497	e8 00 00 00 00	 call	 __ROTATE_L_UNIT
  0049c	83 c4 08	 add	 esp, 8
  0049f	89 45 08	 mov	 DWORD PTR _x$[ebp], eax
  004a2	8b 55 14	 mov	 edx, DWORD PTR _writer$[ebp]
  004a5	8b 02		 mov	 eax, DWORD PTR [edx]
  004a7	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  004aa	89 4d 98	 mov	 DWORD PTR tv339[ebp], ecx
  004ad	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  004b0	83 e2 0f	 and	 edx, 15			; 0000000fH
  004b3	8b f4		 mov	 esi, esp
  004b5	8b 45 10	 mov	 eax, DWORD PTR _digit_table$[ebp]
  004b8	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  004bc	51		 push	 ecx
  004bd	8b 4d 14	 mov	 ecx, DWORD PTR _writer$[ebp]
  004c0	ff 55 98	 call	 DWORD PTR tv339[ebp]
  004c3	3b f4		 cmp	 esi, esp
  004c5	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1112 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  004ca	6a 04		 push	 4
  004cc	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  004cf	52		 push	 edx
  004d0	e8 00 00 00 00	 call	 __ROTATE_L_UNIT
  004d5	83 c4 08	 add	 esp, 8
  004d8	89 45 08	 mov	 DWORD PTR _x$[ebp], eax
  004db	8b 45 14	 mov	 eax, DWORD PTR _writer$[ebp]
  004de	8b 08		 mov	 ecx, DWORD PTR [eax]
  004e0	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  004e3	89 55 94	 mov	 DWORD PTR tv351[ebp], edx
  004e6	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  004e9	83 e0 0f	 and	 eax, 15			; 0000000fH
  004ec	8b f4		 mov	 esi, esp
  004ee	8b 4d 10	 mov	 ecx, DWORD PTR _digit_table$[ebp]
  004f1	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  004f5	52		 push	 edx
  004f6	8b 4d 14	 mov	 ecx, DWORD PTR _writer$[ebp]
  004f9	ff 55 94	 call	 DWORD PTR tv351[ebp]
  004fc	3b f4		 cmp	 esi, esp
  004fe	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1113 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  00503	6a 04		 push	 4
  00505	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00508	50		 push	 eax
  00509	e8 00 00 00 00	 call	 __ROTATE_L_UNIT
  0050e	83 c4 08	 add	 esp, 8
  00511	89 45 08	 mov	 DWORD PTR _x$[ebp], eax
  00514	8b 4d 14	 mov	 ecx, DWORD PTR _writer$[ebp]
  00517	8b 11		 mov	 edx, DWORD PTR [ecx]
  00519	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0051c	89 45 90	 mov	 DWORD PTR tv363[ebp], eax
  0051f	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00522	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00525	8b f4		 mov	 esi, esp
  00527	8b 55 10	 mov	 edx, DWORD PTR _digit_table$[ebp]
  0052a	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  0052e	50		 push	 eax
  0052f	8b 4d 14	 mov	 ecx, DWORD PTR _writer$[ebp]
  00532	ff 55 90	 call	 DWORD PTR tv363[ebp]
  00535	3b f4		 cmp	 esi, esp
  00537	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1114 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  0053c	6a 04		 push	 4
  0053e	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00541	51		 push	 ecx
  00542	e8 00 00 00 00	 call	 __ROTATE_L_UNIT
  00547	83 c4 08	 add	 esp, 8
  0054a	89 45 08	 mov	 DWORD PTR _x$[ebp], eax
  0054d	8b 55 14	 mov	 edx, DWORD PTR _writer$[ebp]
  00550	8b 02		 mov	 eax, DWORD PTR [edx]
  00552	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00555	89 4d 8c	 mov	 DWORD PTR tv375[ebp], ecx
  00558	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  0055b	83 e2 0f	 and	 edx, 15			; 0000000fH
  0055e	8b f4		 mov	 esi, esp
  00560	8b 45 10	 mov	 eax, DWORD PTR _digit_table$[ebp]
  00563	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  00567	51		 push	 ecx
  00568	8b 4d 14	 mov	 ecx, DWORD PTR _writer$[ebp]
  0056b	ff 55 8c	 call	 DWORD PTR tv375[ebp]
  0056e	3b f4		 cmp	 esi, esp
  00570	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1115 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  00575	6a 04		 push	 4
  00577	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  0057a	52		 push	 edx
  0057b	e8 00 00 00 00	 call	 __ROTATE_L_UNIT
  00580	83 c4 08	 add	 esp, 8
  00583	89 45 08	 mov	 DWORD PTR _x$[ebp], eax
  00586	8b 45 14	 mov	 eax, DWORD PTR _writer$[ebp]
  00589	8b 08		 mov	 ecx, DWORD PTR [eax]
  0058b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0058e	89 55 88	 mov	 DWORD PTR tv387[ebp], edx
  00591	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00594	83 e0 0f	 and	 eax, 15			; 0000000fH
  00597	8b f4		 mov	 esi, esp
  00599	8b 4d 10	 mov	 ecx, DWORD PTR _digit_table$[ebp]
  0059c	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  005a0	52		 push	 edx
  005a1	8b 4d 14	 mov	 ecx, DWORD PTR _writer$[ebp]
  005a4	ff 55 88	 call	 DWORD PTR tv387[ebp]
  005a7	3b f4		 cmp	 esi, esp
  005a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN5@OutputHexN:

; 1116 :             }
; 1117 :             if (count & 0x4)

  005ae	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  005b1	83 e0 04	 and	 eax, 4
  005b4	0f 84 f0 00 00
	00		 je	 $LN6@OutputHexN

; 1118 :             {
; 1119 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  005ba	6a 04		 push	 4
  005bc	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  005bf	51		 push	 ecx
  005c0	e8 00 00 00 00	 call	 __ROTATE_L_UNIT
  005c5	83 c4 08	 add	 esp, 8
  005c8	89 45 08	 mov	 DWORD PTR _x$[ebp], eax
  005cb	8b 55 14	 mov	 edx, DWORD PTR _writer$[ebp]
  005ce	8b 02		 mov	 eax, DWORD PTR [edx]
  005d0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  005d3	89 4d 84	 mov	 DWORD PTR tv401[ebp], ecx
  005d6	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  005d9	83 e2 0f	 and	 edx, 15			; 0000000fH
  005dc	8b f4		 mov	 esi, esp
  005de	8b 45 10	 mov	 eax, DWORD PTR _digit_table$[ebp]
  005e1	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  005e5	51		 push	 ecx
  005e6	8b 4d 14	 mov	 ecx, DWORD PTR _writer$[ebp]
  005e9	ff 55 84	 call	 DWORD PTR tv401[ebp]
  005ec	3b f4		 cmp	 esi, esp
  005ee	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1120 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  005f3	6a 04		 push	 4
  005f5	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  005f8	52		 push	 edx
  005f9	e8 00 00 00 00	 call	 __ROTATE_L_UNIT
  005fe	83 c4 08	 add	 esp, 8
  00601	89 45 08	 mov	 DWORD PTR _x$[ebp], eax
  00604	8b 45 14	 mov	 eax, DWORD PTR _writer$[ebp]
  00607	8b 08		 mov	 ecx, DWORD PTR [eax]
  00609	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0060c	89 55 80	 mov	 DWORD PTR tv413[ebp], edx
  0060f	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00612	83 e0 0f	 and	 eax, 15			; 0000000fH
  00615	8b f4		 mov	 esi, esp
  00617	8b 4d 10	 mov	 ecx, DWORD PTR _digit_table$[ebp]
  0061a	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  0061e	52		 push	 edx
  0061f	8b 4d 14	 mov	 ecx, DWORD PTR _writer$[ebp]
  00622	ff 55 80	 call	 DWORD PTR tv413[ebp]
  00625	3b f4		 cmp	 esi, esp
  00627	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1121 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  0062c	6a 04		 push	 4
  0062e	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00631	50		 push	 eax
  00632	e8 00 00 00 00	 call	 __ROTATE_L_UNIT
  00637	83 c4 08	 add	 esp, 8
  0063a	89 45 08	 mov	 DWORD PTR _x$[ebp], eax
  0063d	8b 4d 14	 mov	 ecx, DWORD PTR _writer$[ebp]
  00640	8b 11		 mov	 edx, DWORD PTR [ecx]
  00642	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00645	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv425[ebp], eax
  0064b	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0064e	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00651	8b f4		 mov	 esi, esp
  00653	8b 55 10	 mov	 edx, DWORD PTR _digit_table$[ebp]
  00656	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  0065a	50		 push	 eax
  0065b	8b 4d 14	 mov	 ecx, DWORD PTR _writer$[ebp]
  0065e	ff 95 7c ff ff
	ff		 call	 DWORD PTR tv425[ebp]
  00664	3b f4		 cmp	 esi, esp
  00666	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1122 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  0066b	6a 04		 push	 4
  0066d	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00670	51		 push	 ecx
  00671	e8 00 00 00 00	 call	 __ROTATE_L_UNIT
  00676	83 c4 08	 add	 esp, 8
  00679	89 45 08	 mov	 DWORD PTR _x$[ebp], eax
  0067c	8b 55 14	 mov	 edx, DWORD PTR _writer$[ebp]
  0067f	8b 02		 mov	 eax, DWORD PTR [edx]
  00681	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00684	89 8d 78 ff ff
	ff		 mov	 DWORD PTR tv437[ebp], ecx
  0068a	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  0068d	83 e2 0f	 and	 edx, 15			; 0000000fH
  00690	8b f4		 mov	 esi, esp
  00692	8b 45 10	 mov	 eax, DWORD PTR _digit_table$[ebp]
  00695	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  00699	51		 push	 ecx
  0069a	8b 4d 14	 mov	 ecx, DWORD PTR _writer$[ebp]
  0069d	ff 95 78 ff ff
	ff		 call	 DWORD PTR tv437[ebp]
  006a3	3b f4		 cmp	 esi, esp
  006a5	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN6@OutputHexN:

; 1123 :             }
; 1124 :             if (count & 0x2)

  006aa	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  006ad	83 e2 02	 and	 edx, 2
  006b0	74 7e		 je	 SHORT $LN7@OutputHexN

; 1125 :             {
; 1126 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  006b2	6a 04		 push	 4
  006b4	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  006b7	50		 push	 eax
  006b8	e8 00 00 00 00	 call	 __ROTATE_L_UNIT
  006bd	83 c4 08	 add	 esp, 8
  006c0	89 45 08	 mov	 DWORD PTR _x$[ebp], eax
  006c3	8b 4d 14	 mov	 ecx, DWORD PTR _writer$[ebp]
  006c6	8b 11		 mov	 edx, DWORD PTR [ecx]
  006c8	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  006cb	89 85 74 ff ff
	ff		 mov	 DWORD PTR tv451[ebp], eax
  006d1	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  006d4	83 e1 0f	 and	 ecx, 15			; 0000000fH
  006d7	8b f4		 mov	 esi, esp
  006d9	8b 55 10	 mov	 edx, DWORD PTR _digit_table$[ebp]
  006dc	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  006e0	50		 push	 eax
  006e1	8b 4d 14	 mov	 ecx, DWORD PTR _writer$[ebp]
  006e4	ff 95 74 ff ff
	ff		 call	 DWORD PTR tv451[ebp]
  006ea	3b f4		 cmp	 esi, esp
  006ec	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1127 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  006f1	6a 04		 push	 4
  006f3	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  006f6	51		 push	 ecx
  006f7	e8 00 00 00 00	 call	 __ROTATE_L_UNIT
  006fc	83 c4 08	 add	 esp, 8
  006ff	89 45 08	 mov	 DWORD PTR _x$[ebp], eax
  00702	8b 55 14	 mov	 edx, DWORD PTR _writer$[ebp]
  00705	8b 02		 mov	 eax, DWORD PTR [edx]
  00707	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0070a	89 8d 70 ff ff
	ff		 mov	 DWORD PTR tv463[ebp], ecx
  00710	8b 55 08	 mov	 edx, DWORD PTR _x$[ebp]
  00713	83 e2 0f	 and	 edx, 15			; 0000000fH
  00716	8b f4		 mov	 esi, esp
  00718	8b 45 10	 mov	 eax, DWORD PTR _digit_table$[ebp]
  0071b	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  0071f	51		 push	 ecx
  00720	8b 4d 14	 mov	 ecx, DWORD PTR _writer$[ebp]
  00723	ff 95 70 ff ff
	ff		 call	 DWORD PTR tv463[ebp]
  00729	3b f4		 cmp	 esi, esp
  0072b	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN7@OutputHexN:

; 1128 :             }
; 1129 :             if (count & 0x1)

  00730	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  00733	83 e2 01	 and	 edx, 1
  00736	74 3f		 je	 SHORT $LN9@OutputHexN

; 1130 :             {
; 1131 :                 x = _ROTATE_L_UNIT(x, 4); writer->Write(digit_table[x & 0x0f]);

  00738	6a 04		 push	 4
  0073a	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0073d	50		 push	 eax
  0073e	e8 00 00 00 00	 call	 __ROTATE_L_UNIT
  00743	83 c4 08	 add	 esp, 8
  00746	89 45 08	 mov	 DWORD PTR _x$[ebp], eax
  00749	8b 4d 14	 mov	 ecx, DWORD PTR _writer$[ebp]
  0074c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0074e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00751	89 85 6c ff ff
	ff		 mov	 DWORD PTR tv477[ebp], eax
  00757	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0075a	83 e1 0f	 and	 ecx, 15			; 0000000fH
  0075d	8b f4		 mov	 esi, esp
  0075f	8b 55 10	 mov	 edx, DWORD PTR _digit_table$[ebp]
  00762	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  00766	50		 push	 eax
  00767	8b 4d 14	 mov	 ecx, DWORD PTR _writer$[ebp]
  0076a	ff 95 6c ff ff
	ff		 call	 DWORD PTR tv477[ebp]
  00770	3b f4		 cmp	 esi, esp
  00772	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN9@OutputHexN:

; 1132 :             }
; 1133 :         }

  00777	5f		 pop	 edi
  00778	5e		 pop	 esi
  00779	81 c4 94 00 00
	00		 add	 esp, 148		; 00000094H
  0077f	3b ec		 cmp	 ebp, esp
  00781	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00786	8b e5		 mov	 esp, ebp
  00788	5d		 pop	 ebp
  00789	c3		 ret	 0
?OutputHexNumberSequenceOneWord@HexaDecimalFormatter@Internal@Core@Math@Palmtree@@YAXIIPA_WPAVStringWriter@2345@@Z ENDP ; Palmtree::Math::Core::Internal::HexaDecimalFormatter::OutputHexNumberSequenceOneWord
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
_TEXT	SEGMENT
_formatter$ = -56					; size = 24
_writer$ = -24						; size = 20
_x_sign$ = 8						; size = 1
_x_abs$ = 12						; size = 4
_format_type$ = 16					; size = 2
_precision$ = 20					; size = 4
_format_option$ = 24					; size = 4
_buffer$ = 28						; size = 4
_buffer_size$ = 32					; size = 4
?ToStringP@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::ToStringP

; 1059 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	57		 push	 edi
  00007	8d 7d c4	 lea	 edi, DWORD PTR [ebp-60]
  0000a	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  0001b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1060 :             StringWriter writer(buffer, buffer_size);

  00020	8b 45 20	 mov	 eax, DWORD PTR _buffer_size$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 1c	 mov	 ecx, DWORD PTR _buffer$[ebp]
  00027	51		 push	 ecx
  00028	8d 4d e8	 lea	 ecx, DWORD PTR _writer$[ebp]
  0002b	e8 00 00 00 00	 call	 ??0StringWriter@Internal@Core@Math@Palmtree@@QAE@PA_WI@Z ; Palmtree::Math::Core::Internal::StringWriter::StringWriter

; 1061 :             FormatterTypeP formatter(precision, format_option);

  00030	8b 55 18	 mov	 edx, DWORD PTR _format_option$[ebp]
  00033	52		 push	 edx
  00034	8b 45 14	 mov	 eax, DWORD PTR _precision$[ebp]
  00037	50		 push	 eax
  00038	8d 4d c8	 lea	 ecx, DWORD PTR _formatter$[ebp]
  0003b	e8 00 00 00 00	 call	 ??0FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@HPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::FormatterTypeP

; 1062 :             formatter.Format(x_sign, x_abs, &writer);

  00040	8d 4d e8	 lea	 ecx, DWORD PTR _writer$[ebp]
  00043	51		 push	 ecx
  00044	8b 55 0c	 mov	 edx, DWORD PTR _x_abs$[ebp]
  00047	52		 push	 edx
  00048	0f b6 45 08	 movzx	 eax, BYTE PTR _x_sign$[ebp]
  0004c	50		 push	 eax
  0004d	8d 4d c8	 lea	 ecx, DWORD PTR _formatter$[ebp]
  00050	e8 00 00 00 00	 call	 ?Format@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@QAEXDPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::Format

; 1063 :             return (writer.GetLength());

  00055	8d 4d e8	 lea	 ecx, DWORD PTR _writer$[ebp]
  00058	e8 00 00 00 00	 call	 ?GetLength@StringWriter@Internal@Core@Math@Palmtree@@QAEIXZ ; Palmtree::Math::Core::Internal::StringWriter::GetLength

; 1064 :         }

  0005d	52		 push	 edx
  0005e	8b cd		 mov	 ecx, ebp
  00060	50		 push	 eax
  00061	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@ToStringP
  00067	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0006c	58		 pop	 eax
  0006d	5a		 pop	 edx
  0006e	5f		 pop	 edi
  0006f	83 c4 3c	 add	 esp, 60			; 0000003cH
  00072	3b ec		 cmp	 ebp, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
  0007d	0f 1f 00	 npad	 3
$LN6@ToStringP:
  00080	02 00 00 00	 DD	 2
  00084	00 00 00 00	 DD	 $LN5@ToStringP
$LN5@ToStringP:
  00088	e8 ff ff ff	 DD	 -24			; ffffffe8H
  0008c	14 00 00 00	 DD	 20			; 00000014H
  00090	00 00 00 00	 DD	 $LN3@ToStringP
  00094	c8 ff ff ff	 DD	 -56			; ffffffc8H
  00098	18 00 00 00	 DD	 24			; 00000018H
  0009c	00 00 00 00	 DD	 $LN4@ToStringP
$LN4@ToStringP:
  000a0	66		 DB	 102			; 00000066H
  000a1	6f		 DB	 111			; 0000006fH
  000a2	72		 DB	 114			; 00000072H
  000a3	6d		 DB	 109			; 0000006dH
  000a4	61		 DB	 97			; 00000061H
  000a5	74		 DB	 116			; 00000074H
  000a6	74		 DB	 116			; 00000074H
  000a7	65		 DB	 101			; 00000065H
  000a8	72		 DB	 114			; 00000072H
  000a9	00		 DB	 0
$LN3@ToStringP:
  000aa	77		 DB	 119			; 00000077H
  000ab	72		 DB	 114			; 00000072H
  000ac	69		 DB	 105			; 00000069H
  000ad	74		 DB	 116			; 00000074H
  000ae	65		 DB	 101			; 00000065H
  000af	72		 DB	 114			; 00000072H
  000b0	00		 DB	 0
?ToStringP@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::ToStringP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
_TEXT	SEGMENT
_formatter$ = -56					; size = 24
_writer$ = -24						; size = 20
_x_sign$ = 8						; size = 1
_x_abs$ = 12						; size = 4
_format_type$ = 16					; size = 2
_precision$ = 20					; size = 4
_format_option$ = 24					; size = 4
_buffer$ = 28						; size = 4
_buffer_size$ = 32					; size = 4
?ToStringN@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::ToStringN

; 1050 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	57		 push	 edi
  00007	8d 7d c4	 lea	 edi, DWORD PTR [ebp-60]
  0000a	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  0001b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1051 :             StringWriter writer(buffer, buffer_size);

  00020	8b 45 20	 mov	 eax, DWORD PTR _buffer_size$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 1c	 mov	 ecx, DWORD PTR _buffer$[ebp]
  00027	51		 push	 ecx
  00028	8d 4d e8	 lea	 ecx, DWORD PTR _writer$[ebp]
  0002b	e8 00 00 00 00	 call	 ??0StringWriter@Internal@Core@Math@Palmtree@@QAE@PA_WI@Z ; Palmtree::Math::Core::Internal::StringWriter::StringWriter

; 1052 :             FormatterTypeN formatter(precision, format_option);

  00030	8b 55 18	 mov	 edx, DWORD PTR _format_option$[ebp]
  00033	52		 push	 edx
  00034	8b 45 14	 mov	 eax, DWORD PTR _precision$[ebp]
  00037	50		 push	 eax
  00038	8d 4d c8	 lea	 ecx, DWORD PTR _formatter$[ebp]
  0003b	e8 00 00 00 00	 call	 ??0FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@HPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::FormatterTypeN

; 1053 :             formatter.Format(x_sign, x_abs, &writer);

  00040	8d 4d e8	 lea	 ecx, DWORD PTR _writer$[ebp]
  00043	51		 push	 ecx
  00044	8b 55 0c	 mov	 edx, DWORD PTR _x_abs$[ebp]
  00047	52		 push	 edx
  00048	0f b6 45 08	 movzx	 eax, BYTE PTR _x_sign$[ebp]
  0004c	50		 push	 eax
  0004d	8d 4d c8	 lea	 ecx, DWORD PTR _formatter$[ebp]
  00050	e8 00 00 00 00	 call	 ?Format@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@QAEXDPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::Format

; 1054 :             return (writer.GetLength());

  00055	8d 4d e8	 lea	 ecx, DWORD PTR _writer$[ebp]
  00058	e8 00 00 00 00	 call	 ?GetLength@StringWriter@Internal@Core@Math@Palmtree@@QAEIXZ ; Palmtree::Math::Core::Internal::StringWriter::GetLength

; 1055 :         }

  0005d	52		 push	 edx
  0005e	8b cd		 mov	 ecx, ebp
  00060	50		 push	 eax
  00061	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@ToStringN
  00067	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0006c	58		 pop	 eax
  0006d	5a		 pop	 edx
  0006e	5f		 pop	 edi
  0006f	83 c4 3c	 add	 esp, 60			; 0000003cH
  00072	3b ec		 cmp	 ebp, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
  0007d	0f 1f 00	 npad	 3
$LN6@ToStringN:
  00080	02 00 00 00	 DD	 2
  00084	00 00 00 00	 DD	 $LN5@ToStringN
$LN5@ToStringN:
  00088	e8 ff ff ff	 DD	 -24			; ffffffe8H
  0008c	14 00 00 00	 DD	 20			; 00000014H
  00090	00 00 00 00	 DD	 $LN3@ToStringN
  00094	c8 ff ff ff	 DD	 -56			; ffffffc8H
  00098	18 00 00 00	 DD	 24			; 00000018H
  0009c	00 00 00 00	 DD	 $LN4@ToStringN
$LN4@ToStringN:
  000a0	66		 DB	 102			; 00000066H
  000a1	6f		 DB	 111			; 0000006fH
  000a2	72		 DB	 114			; 00000072H
  000a3	6d		 DB	 109			; 0000006dH
  000a4	61		 DB	 97			; 00000061H
  000a5	74		 DB	 116			; 00000074H
  000a6	74		 DB	 116			; 00000074H
  000a7	65		 DB	 101			; 00000065H
  000a8	72		 DB	 114			; 00000072H
  000a9	00		 DB	 0
$LN3@ToStringN:
  000aa	77		 DB	 119			; 00000077H
  000ab	72		 DB	 114			; 00000072H
  000ac	69		 DB	 105			; 00000069H
  000ad	74		 DB	 116			; 00000074H
  000ae	65		 DB	 101			; 00000065H
  000af	72		 DB	 114			; 00000072H
  000b0	00		 DB	 0
?ToStringN@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::ToStringN
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
_TEXT	SEGMENT
_formatter$ = -56					; size = 24
_writer$ = -24						; size = 20
_x_sign$ = 8						; size = 1
_x_abs$ = 12						; size = 4
_format_type$ = 16					; size = 2
_precision$ = 20					; size = 4
_format_option$ = 24					; size = 4
_buffer$ = 28						; size = 4
_buffer_size$ = 32					; size = 4
?ToStringF@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::ToStringF

; 1042 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	57		 push	 edi
  00007	8d 7d c4	 lea	 edi, DWORD PTR [ebp-60]
  0000a	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  0001b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1043 :             StringWriter writer(buffer, buffer_size);

  00020	8b 45 20	 mov	 eax, DWORD PTR _buffer_size$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 1c	 mov	 ecx, DWORD PTR _buffer$[ebp]
  00027	51		 push	 ecx
  00028	8d 4d e8	 lea	 ecx, DWORD PTR _writer$[ebp]
  0002b	e8 00 00 00 00	 call	 ??0StringWriter@Internal@Core@Math@Palmtree@@QAE@PA_WI@Z ; Palmtree::Math::Core::Internal::StringWriter::StringWriter

; 1044 :             FormatterTypeF formatter(precision, format_option);

  00030	8b 55 18	 mov	 edx, DWORD PTR _format_option$[ebp]
  00033	52		 push	 edx
  00034	8b 45 14	 mov	 eax, DWORD PTR _precision$[ebp]
  00037	50		 push	 eax
  00038	8d 4d c8	 lea	 ecx, DWORD PTR _formatter$[ebp]
  0003b	e8 00 00 00 00	 call	 ??0FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@HPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::FormatterTypeF

; 1045 :             formatter.Format(x_sign, x_abs, &writer);

  00040	8d 4d e8	 lea	 ecx, DWORD PTR _writer$[ebp]
  00043	51		 push	 ecx
  00044	8b 55 0c	 mov	 edx, DWORD PTR _x_abs$[ebp]
  00047	52		 push	 edx
  00048	0f b6 45 08	 movzx	 eax, BYTE PTR _x_sign$[ebp]
  0004c	50		 push	 eax
  0004d	8d 4d c8	 lea	 ecx, DWORD PTR _formatter$[ebp]
  00050	e8 00 00 00 00	 call	 ?Format@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@QAEXDPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::Format

; 1046 :             return (writer.GetLength());

  00055	8d 4d e8	 lea	 ecx, DWORD PTR _writer$[ebp]
  00058	e8 00 00 00 00	 call	 ?GetLength@StringWriter@Internal@Core@Math@Palmtree@@QAEIXZ ; Palmtree::Math::Core::Internal::StringWriter::GetLength

; 1047 :         }

  0005d	52		 push	 edx
  0005e	8b cd		 mov	 ecx, ebp
  00060	50		 push	 eax
  00061	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@ToStringF
  00067	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0006c	58		 pop	 eax
  0006d	5a		 pop	 edx
  0006e	5f		 pop	 edi
  0006f	83 c4 3c	 add	 esp, 60			; 0000003cH
  00072	3b ec		 cmp	 ebp, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
  0007d	0f 1f 00	 npad	 3
$LN6@ToStringF:
  00080	02 00 00 00	 DD	 2
  00084	00 00 00 00	 DD	 $LN5@ToStringF
$LN5@ToStringF:
  00088	e8 ff ff ff	 DD	 -24			; ffffffe8H
  0008c	14 00 00 00	 DD	 20			; 00000014H
  00090	00 00 00 00	 DD	 $LN3@ToStringF
  00094	c8 ff ff ff	 DD	 -56			; ffffffc8H
  00098	18 00 00 00	 DD	 24			; 00000018H
  0009c	00 00 00 00	 DD	 $LN4@ToStringF
$LN4@ToStringF:
  000a0	66		 DB	 102			; 00000066H
  000a1	6f		 DB	 111			; 0000006fH
  000a2	72		 DB	 114			; 00000072H
  000a3	6d		 DB	 109			; 0000006dH
  000a4	61		 DB	 97			; 00000061H
  000a5	74		 DB	 116			; 00000074H
  000a6	74		 DB	 116			; 00000074H
  000a7	65		 DB	 101			; 00000065H
  000a8	72		 DB	 114			; 00000072H
  000a9	00		 DB	 0
$LN3@ToStringF:
  000aa	77		 DB	 119			; 00000077H
  000ab	72		 DB	 114			; 00000072H
  000ac	69		 DB	 105			; 00000069H
  000ad	74		 DB	 116			; 00000074H
  000ae	65		 DB	 101			; 00000065H
  000af	72		 DB	 114			; 00000072H
  000b0	00		 DB	 0
?ToStringF@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::ToStringF
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
_TEXT	SEGMENT
_formatter$ = -56					; size = 24
_writer$ = -24						; size = 20
_x_sign$ = 8						; size = 1
_x_abs$ = 12						; size = 4
_format_type$ = 16					; size = 2
_precision$ = 20					; size = 4
_format_option$ = 24					; size = 4
_buffer$ = 28						; size = 4
_buffer_size$ = 32					; size = 4
?ToStringE@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::ToStringE

; 1034 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	57		 push	 edi
  00007	8d 7d c4	 lea	 edi, DWORD PTR [ebp-60]
  0000a	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  0001b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1035 :             StringWriter writer(buffer, buffer_size);

  00020	8b 45 20	 mov	 eax, DWORD PTR _buffer_size$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 1c	 mov	 ecx, DWORD PTR _buffer$[ebp]
  00027	51		 push	 ecx
  00028	8d 4d e8	 lea	 ecx, DWORD PTR _writer$[ebp]
  0002b	e8 00 00 00 00	 call	 ??0StringWriter@Internal@Core@Math@Palmtree@@QAE@PA_WI@Z ; Palmtree::Math::Core::Internal::StringWriter::StringWriter

; 1036 :             FormatterTypeE formatter(format_type, precision, format_option);

  00030	8b 55 18	 mov	 edx, DWORD PTR _format_option$[ebp]
  00033	52		 push	 edx
  00034	8b 45 14	 mov	 eax, DWORD PTR _precision$[ebp]
  00037	50		 push	 eax
  00038	0f b7 4d 10	 movzx	 ecx, WORD PTR _format_type$[ebp]
  0003c	51		 push	 ecx
  0003d	8d 4d c8	 lea	 ecx, DWORD PTR _formatter$[ebp]
  00040	e8 00 00 00 00	 call	 ??0FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::FormatterTypeE

; 1037 :             formatter.Format(x_sign, x_abs, &writer);

  00045	8d 55 e8	 lea	 edx, DWORD PTR _writer$[ebp]
  00048	52		 push	 edx
  00049	8b 45 0c	 mov	 eax, DWORD PTR _x_abs$[ebp]
  0004c	50		 push	 eax
  0004d	0f b6 4d 08	 movzx	 ecx, BYTE PTR _x_sign$[ebp]
  00051	51		 push	 ecx
  00052	8d 4d c8	 lea	 ecx, DWORD PTR _formatter$[ebp]
  00055	e8 00 00 00 00	 call	 ?Format@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@QAEXDPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::Format

; 1038 :             return (writer.GetLength());

  0005a	8d 4d e8	 lea	 ecx, DWORD PTR _writer$[ebp]
  0005d	e8 00 00 00 00	 call	 ?GetLength@StringWriter@Internal@Core@Math@Palmtree@@QAEIXZ ; Palmtree::Math::Core::Internal::StringWriter::GetLength

; 1039 :         }

  00062	52		 push	 edx
  00063	8b cd		 mov	 ecx, ebp
  00065	50		 push	 eax
  00066	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@ToStringE
  0006c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00071	58		 pop	 eax
  00072	5a		 pop	 edx
  00073	5f		 pop	 edi
  00074	83 c4 3c	 add	 esp, 60			; 0000003cH
  00077	3b ec		 cmp	 ebp, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
  00082	66 90		 npad	 2
$LN6@ToStringE:
  00084	02 00 00 00	 DD	 2
  00088	00 00 00 00	 DD	 $LN5@ToStringE
$LN5@ToStringE:
  0008c	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00090	14 00 00 00	 DD	 20			; 00000014H
  00094	00 00 00 00	 DD	 $LN3@ToStringE
  00098	c8 ff ff ff	 DD	 -56			; ffffffc8H
  0009c	18 00 00 00	 DD	 24			; 00000018H
  000a0	00 00 00 00	 DD	 $LN4@ToStringE
$LN4@ToStringE:
  000a4	66		 DB	 102			; 00000066H
  000a5	6f		 DB	 111			; 0000006fH
  000a6	72		 DB	 114			; 00000072H
  000a7	6d		 DB	 109			; 0000006dH
  000a8	61		 DB	 97			; 00000061H
  000a9	74		 DB	 116			; 00000074H
  000aa	74		 DB	 116			; 00000074H
  000ab	65		 DB	 101			; 00000065H
  000ac	72		 DB	 114			; 00000072H
  000ad	00		 DB	 0
$LN3@ToStringE:
  000ae	77		 DB	 119			; 00000077H
  000af	72		 DB	 114			; 00000072H
  000b0	69		 DB	 105			; 00000069H
  000b1	74		 DB	 116			; 00000074H
  000b2	65		 DB	 101			; 00000065H
  000b3	72		 DB	 114			; 00000072H
  000b4	00		 DB	 0
?ToStringE@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::ToStringE
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
_TEXT	SEGMENT
_formatter$ = -56					; size = 24
_writer$ = -24						; size = 20
_x_sign$ = 8						; size = 1
_x_abs$ = 12						; size = 4
_format_type$ = 16					; size = 2
_precision$ = 20					; size = 4
_format_option$ = 24					; size = 4
_buffer$ = 28						; size = 4
_buffer_size$ = 32					; size = 4
?ToStringD@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::ToStringD

; 1026 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	57		 push	 edi
  00007	8d 7d c4	 lea	 edi, DWORD PTR [ebp-60]
  0000a	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  0001b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1027 :             StringWriter writer(buffer, buffer_size);

  00020	8b 45 20	 mov	 eax, DWORD PTR _buffer_size$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 1c	 mov	 ecx, DWORD PTR _buffer$[ebp]
  00027	51		 push	 ecx
  00028	8d 4d e8	 lea	 ecx, DWORD PTR _writer$[ebp]
  0002b	e8 00 00 00 00	 call	 ??0StringWriter@Internal@Core@Math@Palmtree@@QAE@PA_WI@Z ; Palmtree::Math::Core::Internal::StringWriter::StringWriter

; 1028 :             FormatterTypeD formatter(precision, format_option);

  00030	8b 55 18	 mov	 edx, DWORD PTR _format_option$[ebp]
  00033	52		 push	 edx
  00034	8b 45 14	 mov	 eax, DWORD PTR _precision$[ebp]
  00037	50		 push	 eax
  00038	8d 4d c8	 lea	 ecx, DWORD PTR _formatter$[ebp]
  0003b	e8 00 00 00 00	 call	 ??0FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@HPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::FormatterTypeD

; 1029 :             formatter.Format(x_sign, x_abs, &writer);

  00040	8d 4d e8	 lea	 ecx, DWORD PTR _writer$[ebp]
  00043	51		 push	 ecx
  00044	8b 55 0c	 mov	 edx, DWORD PTR _x_abs$[ebp]
  00047	52		 push	 edx
  00048	0f b6 45 08	 movzx	 eax, BYTE PTR _x_sign$[ebp]
  0004c	50		 push	 eax
  0004d	8d 4d c8	 lea	 ecx, DWORD PTR _formatter$[ebp]
  00050	e8 00 00 00 00	 call	 ?Format@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@QAEXDPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::Format

; 1030 :             return (writer.GetLength());

  00055	8d 4d e8	 lea	 ecx, DWORD PTR _writer$[ebp]
  00058	e8 00 00 00 00	 call	 ?GetLength@StringWriter@Internal@Core@Math@Palmtree@@QAEIXZ ; Palmtree::Math::Core::Internal::StringWriter::GetLength

; 1031 :         }

  0005d	52		 push	 edx
  0005e	8b cd		 mov	 ecx, ebp
  00060	50		 push	 eax
  00061	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@ToStringD
  00067	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0006c	58		 pop	 eax
  0006d	5a		 pop	 edx
  0006e	5f		 pop	 edi
  0006f	83 c4 3c	 add	 esp, 60			; 0000003cH
  00072	3b ec		 cmp	 ebp, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
  0007d	0f 1f 00	 npad	 3
$LN6@ToStringD:
  00080	02 00 00 00	 DD	 2
  00084	00 00 00 00	 DD	 $LN5@ToStringD
$LN5@ToStringD:
  00088	e8 ff ff ff	 DD	 -24			; ffffffe8H
  0008c	14 00 00 00	 DD	 20			; 00000014H
  00090	00 00 00 00	 DD	 $LN3@ToStringD
  00094	c8 ff ff ff	 DD	 -56			; ffffffc8H
  00098	18 00 00 00	 DD	 24			; 00000018H
  0009c	00 00 00 00	 DD	 $LN4@ToStringD
$LN4@ToStringD:
  000a0	66		 DB	 102			; 00000066H
  000a1	6f		 DB	 111			; 0000006fH
  000a2	72		 DB	 114			; 00000072H
  000a3	6d		 DB	 109			; 0000006dH
  000a4	61		 DB	 97			; 00000061H
  000a5	74		 DB	 116			; 00000074H
  000a6	74		 DB	 116			; 00000074H
  000a7	65		 DB	 101			; 00000065H
  000a8	72		 DB	 114			; 00000072H
  000a9	00		 DB	 0
$LN3@ToStringD:
  000aa	77		 DB	 119			; 00000077H
  000ab	72		 DB	 114			; 00000072H
  000ac	69		 DB	 105			; 00000069H
  000ad	74		 DB	 116			; 00000074H
  000ae	65		 DB	 101			; 00000065H
  000af	72		 DB	 114			; 00000072H
  000b0	00		 DB	 0
?ToStringD@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::ToStringD
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
_TEXT	SEGMENT
_formatter$ = -56					; size = 24
_writer$ = -24						; size = 20
_x_sign$ = 8						; size = 1
_x_abs$ = 12						; size = 4
_format_type$ = 16					; size = 2
_precision$ = 20					; size = 4
_format_option$ = 24					; size = 4
_buffer$ = 28						; size = 4
_buffer_size$ = 32					; size = 4
?ToStringC@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::ToStringC

; 1018 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	57		 push	 edi
  00007	8d 7d c4	 lea	 edi, DWORD PTR [ebp-60]
  0000a	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  0001b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1019 :             StringWriter writer(buffer, buffer_size);

  00020	8b 45 20	 mov	 eax, DWORD PTR _buffer_size$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 1c	 mov	 ecx, DWORD PTR _buffer$[ebp]
  00027	51		 push	 ecx
  00028	8d 4d e8	 lea	 ecx, DWORD PTR _writer$[ebp]
  0002b	e8 00 00 00 00	 call	 ??0StringWriter@Internal@Core@Math@Palmtree@@QAE@PA_WI@Z ; Palmtree::Math::Core::Internal::StringWriter::StringWriter

; 1020 :             FormatterTypeC formatter(precision, format_option);

  00030	8b 55 18	 mov	 edx, DWORD PTR _format_option$[ebp]
  00033	52		 push	 edx
  00034	8b 45 14	 mov	 eax, DWORD PTR _precision$[ebp]
  00037	50		 push	 eax
  00038	8d 4d c8	 lea	 ecx, DWORD PTR _formatter$[ebp]
  0003b	e8 00 00 00 00	 call	 ??0FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@HPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::FormatterTypeC

; 1021 :             formatter.Format(x_sign, x_abs, &writer);

  00040	8d 4d e8	 lea	 ecx, DWORD PTR _writer$[ebp]
  00043	51		 push	 ecx
  00044	8b 55 0c	 mov	 edx, DWORD PTR _x_abs$[ebp]
  00047	52		 push	 edx
  00048	0f b6 45 08	 movzx	 eax, BYTE PTR _x_sign$[ebp]
  0004c	50		 push	 eax
  0004d	8d 4d c8	 lea	 ecx, DWORD PTR _formatter$[ebp]
  00050	e8 00 00 00 00	 call	 ?Format@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@QAEXDPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::Format

; 1022 :             return (writer.GetLength());

  00055	8d 4d e8	 lea	 ecx, DWORD PTR _writer$[ebp]
  00058	e8 00 00 00 00	 call	 ?GetLength@StringWriter@Internal@Core@Math@Palmtree@@QAEIXZ ; Palmtree::Math::Core::Internal::StringWriter::GetLength

; 1023 :         }

  0005d	52		 push	 edx
  0005e	8b cd		 mov	 ecx, ebp
  00060	50		 push	 eax
  00061	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@ToStringC
  00067	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0006c	58		 pop	 eax
  0006d	5a		 pop	 edx
  0006e	5f		 pop	 edi
  0006f	83 c4 3c	 add	 esp, 60			; 0000003cH
  00072	3b ec		 cmp	 ebp, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
  0007d	0f 1f 00	 npad	 3
$LN6@ToStringC:
  00080	02 00 00 00	 DD	 2
  00084	00 00 00 00	 DD	 $LN5@ToStringC
$LN5@ToStringC:
  00088	e8 ff ff ff	 DD	 -24			; ffffffe8H
  0008c	14 00 00 00	 DD	 20			; 00000014H
  00090	00 00 00 00	 DD	 $LN3@ToStringC
  00094	c8 ff ff ff	 DD	 -56			; ffffffc8H
  00098	18 00 00 00	 DD	 24			; 00000018H
  0009c	00 00 00 00	 DD	 $LN4@ToStringC
$LN4@ToStringC:
  000a0	66		 DB	 102			; 00000066H
  000a1	6f		 DB	 111			; 0000006fH
  000a2	72		 DB	 114			; 00000072H
  000a3	6d		 DB	 109			; 0000006dH
  000a4	61		 DB	 97			; 00000061H
  000a5	74		 DB	 116			; 00000074H
  000a6	74		 DB	 116			; 00000074H
  000a7	65		 DB	 101			; 00000065H
  000a8	72		 DB	 114			; 00000072H
  000a9	00		 DB	 0
$LN3@ToStringC:
  000aa	77		 DB	 119			; 00000077H
  000ab	72		 DB	 114			; 00000072H
  000ac	69		 DB	 105			; 00000069H
  000ad	74		 DB	 116			; 00000074H
  000ae	65		 DB	 101			; 00000065H
  000af	72		 DB	 114			; 00000072H
  000b0	00		 DB	 0
?ToStringC@DecimalFromatter@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@2345@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@PA_WI@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::ToStringC
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WriteSuffix@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
_TEXT	SEGMENT
tv308 = -84						; size = 4
tv296 = -80						; size = 4
tv290 = -76						; size = 4
tv278 = -72						; size = 4
tv266 = -68						; size = 4
tv254 = -64						; size = 4
tv242 = -60						; size = 4
tv236 = -56						; size = 4
tv224 = -52						; size = 4
tv212 = -48						; size = 4
tv200 = -44						; size = 4
tv188 = -40						; size = 4
tv176 = -36						; size = 4
tv164 = -32						; size = 4
tv152 = -28						; size = 4
tv146 = -24						; size = 4
tv135 = -20						; size = 4
tv91 = -16						; size = 4
tv79 = -12						; size = 4
tv73 = -8						; size = 4
_this$ = -4						; size = 4
_x_sign$ = 8						; size = 1
_writer$ = 12						; size = 4
?WriteSuffix@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::WriteSuffix, COMDAT
; _this$ = ecx

; 949  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	51		 push	 ecx
  00009	8d 7d ac	 lea	 edi, DWORD PTR [ebp-84]
  0000c	b9 15 00 00 00	 mov	 ecx, 21			; 00000015H
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	59		 pop	 ecx
  00019	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001c	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00021	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 950  :                 if (x_sign >= 0)

  00026	0f be 45 08	 movsx	 eax, BYTE PTR _x_sign$[ebp]
  0002a	85 c0		 test	 eax, eax
  0002c	0f 8c 90 00 00
	00		 jl	 $LN6@WriteSuffi

; 951  :                 {
; 952  :                     switch (_number_format_info->Percent.PositivePattern)

  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00038	8b 82 34 01 00
	00		 mov	 eax, DWORD PTR [edx+308]
  0003e	89 45 f8	 mov	 DWORD PTR tv73[ebp], eax
  00041	83 7d f8 01	 cmp	 DWORD PTR tv73[ebp], 1
  00045	74 50		 je	 SHORT $LN9@WriteSuffi
  00047	83 7d f8 02	 cmp	 DWORD PTR tv73[ebp], 2
  0004b	74 70		 je	 SHORT $LN2@WriteSuffi
  0004d	83 7d f8 03	 cmp	 DWORD PTR tv73[ebp], 3
  00051	74 6a		 je	 SHORT $LN2@WriteSuffi

; 953  :                     {
; 954  :                     case 0:
; 955  :                     default:
; 956  :                         writer->Write(L' ');

  00053	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00056	8b 11		 mov	 edx, DWORD PTR [ecx]
  00058	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0005b	89 45 f4	 mov	 DWORD PTR tv79[ebp], eax
  0005e	8b f4		 mov	 esi, esp
  00060	6a 20		 push	 32			; 00000020H
  00062	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00065	ff 55 f4	 call	 DWORD PTR tv79[ebp]
  00068	3b f4		 cmp	 esi, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 957  :                         writer->Write(_number_format_info->PercentSymbol);

  0006f	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00072	8b 11		 mov	 edx, DWORD PTR [ecx]
  00074	8b 02		 mov	 eax, DWORD PTR [edx]
  00076	89 45 f0	 mov	 DWORD PTR tv91[ebp], eax
  00079	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0007f	81 c2 9e 01 00
	00		 add	 edx, 414		; 0000019eH
  00085	8b f4		 mov	 esi, esp
  00087	52		 push	 edx
  00088	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0008b	ff 55 f0	 call	 DWORD PTR tv91[ebp]
  0008e	3b f4		 cmp	 esi, esp
  00090	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 958  :                         break;

  00095	eb 26		 jmp	 SHORT $LN2@WriteSuffi
$LN9@WriteSuffi:

; 959  :                     case 1:
; 960  :                         writer->Write(_number_format_info->PercentSymbol);

  00097	8b 45 0c	 mov	 eax, DWORD PTR _writer$[ebp]
  0009a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009e	89 55 ec	 mov	 DWORD PTR tv135[ebp], edx
  000a1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a4	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000a7	81 c1 9e 01 00
	00		 add	 ecx, 414		; 0000019eH
  000ad	8b f4		 mov	 esi, esp
  000af	51		 push	 ecx
  000b0	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  000b3	ff 55 ec	 call	 DWORD PTR tv135[ebp]
  000b6	3b f4		 cmp	 esi, esp
  000b8	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@WriteSuffi:

; 961  :                         break;
; 962  :                     case 2:
; 963  :                         break;
; 964  :                     case 3:
; 965  :                         break;
; 966  :                     }
; 967  :                 }
; 968  :                 else

  000bd	e9 71 02 00 00	 jmp	 $LN1@WriteSuffi
$LN6@WriteSuffi:

; 969  :                 {
; 970  :                     switch (_number_format_info->Percent.NegativePattern)

  000c2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000c5	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000c8	8b 88 30 01 00
	00		 mov	 ecx, DWORD PTR [eax+304]
  000ce	89 4d e8	 mov	 DWORD PTR tv146[ebp], ecx
  000d1	8b 55 e8	 mov	 edx, DWORD PTR tv146[ebp]
  000d4	83 ea 01	 sub	 edx, 1
  000d7	89 55 e8	 mov	 DWORD PTR tv146[ebp], edx
  000da	83 7d e8 0a	 cmp	 DWORD PTR tv146[ebp], 10 ; 0000000aH
  000de	77 0a		 ja	 SHORT $LN12@WriteSuffi
  000e0	8b 45 e8	 mov	 eax, DWORD PTR tv146[ebp]
  000e3	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN25@WriteSuffi[eax*4]
$LN12@WriteSuffi:

; 971  :                     {
; 972  :                     case 0:
; 973  :                     default:
; 974  :                         writer->Write(L' ');

  000ea	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  000ed	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ef	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000f2	89 45 e4	 mov	 DWORD PTR tv152[ebp], eax
  000f5	8b f4		 mov	 esi, esp
  000f7	6a 20		 push	 32			; 00000020H
  000f9	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  000fc	ff 55 e4	 call	 DWORD PTR tv152[ebp]
  000ff	3b f4		 cmp	 esi, esp
  00101	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 975  :                         writer->Write(_number_format_info->PercentSymbol);

  00106	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00109	8b 11		 mov	 edx, DWORD PTR [ecx]
  0010b	8b 02		 mov	 eax, DWORD PTR [edx]
  0010d	89 45 e0	 mov	 DWORD PTR tv164[ebp], eax
  00110	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00113	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00116	81 c2 9e 01 00
	00		 add	 edx, 414		; 0000019eH
  0011c	8b f4		 mov	 esi, esp
  0011e	52		 push	 edx
  0011f	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00122	ff 55 e0	 call	 DWORD PTR tv164[ebp]
  00125	3b f4		 cmp	 esi, esp
  00127	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 976  :                         break;

  0012c	e9 02 02 00 00	 jmp	 $LN1@WriteSuffi
$LN13@WriteSuffi:

; 977  :                     case 1:
; 978  :                         writer->Write(_number_format_info->PercentSymbol);

  00131	8b 45 0c	 mov	 eax, DWORD PTR _writer$[ebp]
  00134	8b 08		 mov	 ecx, DWORD PTR [eax]
  00136	8b 11		 mov	 edx, DWORD PTR [ecx]
  00138	89 55 dc	 mov	 DWORD PTR tv176[ebp], edx
  0013b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0013e	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00141	81 c1 9e 01 00
	00		 add	 ecx, 414		; 0000019eH
  00147	8b f4		 mov	 esi, esp
  00149	51		 push	 ecx
  0014a	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0014d	ff 55 dc	 call	 DWORD PTR tv176[ebp]
  00150	3b f4		 cmp	 esi, esp
  00152	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 979  :                         break;

  00157	e9 d7 01 00 00	 jmp	 $LN1@WriteSuffi
$LN14@WriteSuffi:

; 980  :                     case 2:
; 981  :                         break;

  0015c	e9 d2 01 00 00	 jmp	 $LN1@WriteSuffi
$LN15@WriteSuffi:

; 982  :                     case 3:
; 983  :                         break;

  00161	e9 cd 01 00 00	 jmp	 $LN1@WriteSuffi
$LN16@WriteSuffi:

; 984  :                     case 4:
; 985  :                         writer->Write(_number_format_info->NegativeSign);

  00166	8b 55 0c	 mov	 edx, DWORD PTR _writer$[ebp]
  00169	8b 02		 mov	 eax, DWORD PTR [edx]
  0016b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0016d	89 4d d8	 mov	 DWORD PTR tv188[ebp], ecx
  00170	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00173	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00176	05 5a 01 00 00	 add	 eax, 346		; 0000015aH
  0017b	8b f4		 mov	 esi, esp
  0017d	50		 push	 eax
  0017e	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00181	ff 55 d8	 call	 DWORD PTR tv188[ebp]
  00184	3b f4		 cmp	 esi, esp
  00186	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 986  :                         break;

  0018b	e9 a3 01 00 00	 jmp	 $LN1@WriteSuffi
$LN17@WriteSuffi:

; 987  :                     case 5:
; 988  :                         writer->Write(_number_format_info->NegativeSign);

  00190	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00193	8b 11		 mov	 edx, DWORD PTR [ecx]
  00195	8b 02		 mov	 eax, DWORD PTR [edx]
  00197	89 45 d4	 mov	 DWORD PTR tv200[ebp], eax
  0019a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0019d	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  001a0	81 c2 5a 01 00
	00		 add	 edx, 346		; 0000015aH
  001a6	8b f4		 mov	 esi, esp
  001a8	52		 push	 edx
  001a9	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  001ac	ff 55 d4	 call	 DWORD PTR tv200[ebp]
  001af	3b f4		 cmp	 esi, esp
  001b1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 989  :                         writer->Write(_number_format_info->PercentSymbol);

  001b6	8b 45 0c	 mov	 eax, DWORD PTR _writer$[ebp]
  001b9	8b 08		 mov	 ecx, DWORD PTR [eax]
  001bb	8b 11		 mov	 edx, DWORD PTR [ecx]
  001bd	89 55 d0	 mov	 DWORD PTR tv212[ebp], edx
  001c0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001c3	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001c6	81 c1 9e 01 00
	00		 add	 ecx, 414		; 0000019eH
  001cc	8b f4		 mov	 esi, esp
  001ce	51		 push	 ecx
  001cf	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  001d2	ff 55 d0	 call	 DWORD PTR tv212[ebp]
  001d5	3b f4		 cmp	 esi, esp
  001d7	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 990  :                         break;

  001dc	e9 52 01 00 00	 jmp	 $LN1@WriteSuffi
$LN18@WriteSuffi:

; 991  :                     case 6:
; 992  :                         writer->Write(_number_format_info->PercentSymbol);

  001e1	8b 55 0c	 mov	 edx, DWORD PTR _writer$[ebp]
  001e4	8b 02		 mov	 eax, DWORD PTR [edx]
  001e6	8b 08		 mov	 ecx, DWORD PTR [eax]
  001e8	89 4d cc	 mov	 DWORD PTR tv224[ebp], ecx
  001eb	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001ee	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  001f1	05 9e 01 00 00	 add	 eax, 414		; 0000019eH
  001f6	8b f4		 mov	 esi, esp
  001f8	50		 push	 eax
  001f9	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  001fc	ff 55 cc	 call	 DWORD PTR tv224[ebp]
  001ff	3b f4		 cmp	 esi, esp
  00201	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 993  :                         writer->Write(_number_format_info->NegativeSign);

  00206	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00209	8b 11		 mov	 edx, DWORD PTR [ecx]
  0020b	8b 02		 mov	 eax, DWORD PTR [edx]
  0020d	89 45 c8	 mov	 DWORD PTR tv236[ebp], eax
  00210	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00213	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00216	81 c2 5a 01 00
	00		 add	 edx, 346		; 0000015aH
  0021c	8b f4		 mov	 esi, esp
  0021e	52		 push	 edx
  0021f	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00222	ff 55 c8	 call	 DWORD PTR tv236[ebp]
  00225	3b f4		 cmp	 esi, esp
  00227	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 994  :                         break;

  0022c	e9 02 01 00 00	 jmp	 $LN1@WriteSuffi
$LN19@WriteSuffi:

; 995  :                     case 7:
; 996  :                         break;

  00231	e9 fd 00 00 00	 jmp	 $LN1@WriteSuffi
$LN20@WriteSuffi:

; 997  :                     case 8:
; 998  :                         writer->Write(L' ');

  00236	8b 45 0c	 mov	 eax, DWORD PTR _writer$[ebp]
  00239	8b 08		 mov	 ecx, DWORD PTR [eax]
  0023b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0023e	89 55 c4	 mov	 DWORD PTR tv242[ebp], edx
  00241	8b f4		 mov	 esi, esp
  00243	6a 20		 push	 32			; 00000020H
  00245	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00248	ff 55 c4	 call	 DWORD PTR tv242[ebp]
  0024b	3b f4		 cmp	 esi, esp
  0024d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 999  :                         writer->Write(_number_format_info->PercentSymbol);

  00252	8b 45 0c	 mov	 eax, DWORD PTR _writer$[ebp]
  00255	8b 08		 mov	 ecx, DWORD PTR [eax]
  00257	8b 11		 mov	 edx, DWORD PTR [ecx]
  00259	89 55 c0	 mov	 DWORD PTR tv254[ebp], edx
  0025c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0025f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00262	81 c1 9e 01 00
	00		 add	 ecx, 414		; 0000019eH
  00268	8b f4		 mov	 esi, esp
  0026a	51		 push	 ecx
  0026b	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0026e	ff 55 c0	 call	 DWORD PTR tv254[ebp]
  00271	3b f4		 cmp	 esi, esp
  00273	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1000 :                         writer->Write(_number_format_info->NegativeSign);

  00278	8b 55 0c	 mov	 edx, DWORD PTR _writer$[ebp]
  0027b	8b 02		 mov	 eax, DWORD PTR [edx]
  0027d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0027f	89 4d bc	 mov	 DWORD PTR tv266[ebp], ecx
  00282	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00285	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00288	05 5a 01 00 00	 add	 eax, 346		; 0000015aH
  0028d	8b f4		 mov	 esi, esp
  0028f	50		 push	 eax
  00290	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00293	ff 55 bc	 call	 DWORD PTR tv266[ebp]
  00296	3b f4		 cmp	 esi, esp
  00298	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1001 :                         break;

  0029d	e9 91 00 00 00	 jmp	 $LN1@WriteSuffi
$LN21@WriteSuffi:

; 1002 :                     case 9:
; 1003 :                         writer->Write(_number_format_info->NegativeSign);

  002a2	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  002a5	8b 11		 mov	 edx, DWORD PTR [ecx]
  002a7	8b 02		 mov	 eax, DWORD PTR [edx]
  002a9	89 45 b8	 mov	 DWORD PTR tv278[ebp], eax
  002ac	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002af	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  002b2	81 c2 5a 01 00
	00		 add	 edx, 346		; 0000015aH
  002b8	8b f4		 mov	 esi, esp
  002ba	52		 push	 edx
  002bb	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  002be	ff 55 b8	 call	 DWORD PTR tv278[ebp]
  002c1	3b f4		 cmp	 esi, esp
  002c3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1004 :                         break;

  002c8	eb 69		 jmp	 SHORT $LN1@WriteSuffi
$LN22@WriteSuffi:

; 1005 :                     case 10:
; 1006 :                         break;

  002ca	eb 67		 jmp	 SHORT $LN1@WriteSuffi
$LN23@WriteSuffi:

; 1007 :                     case 11:
; 1008 :                         writer->Write(_number_format_info->NegativeSign);

  002cc	8b 45 0c	 mov	 eax, DWORD PTR _writer$[ebp]
  002cf	8b 08		 mov	 ecx, DWORD PTR [eax]
  002d1	8b 11		 mov	 edx, DWORD PTR [ecx]
  002d3	89 55 b4	 mov	 DWORD PTR tv290[ebp], edx
  002d6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002d9	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  002dc	81 c1 5a 01 00
	00		 add	 ecx, 346		; 0000015aH
  002e2	8b f4		 mov	 esi, esp
  002e4	51		 push	 ecx
  002e5	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  002e8	ff 55 b4	 call	 DWORD PTR tv290[ebp]
  002eb	3b f4		 cmp	 esi, esp
  002ed	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1009 :                         writer->Write(L' ');

  002f2	8b 55 0c	 mov	 edx, DWORD PTR _writer$[ebp]
  002f5	8b 02		 mov	 eax, DWORD PTR [edx]
  002f7	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  002fa	89 4d b0	 mov	 DWORD PTR tv296[ebp], ecx
  002fd	8b f4		 mov	 esi, esp
  002ff	6a 20		 push	 32			; 00000020H
  00301	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00304	ff 55 b0	 call	 DWORD PTR tv296[ebp]
  00307	3b f4		 cmp	 esi, esp
  00309	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1010 :                         writer->Write(_number_format_info->PercentSymbol);

  0030e	8b 55 0c	 mov	 edx, DWORD PTR _writer$[ebp]
  00311	8b 02		 mov	 eax, DWORD PTR [edx]
  00313	8b 08		 mov	 ecx, DWORD PTR [eax]
  00315	89 4d ac	 mov	 DWORD PTR tv308[ebp], ecx
  00318	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0031b	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0031e	05 9e 01 00 00	 add	 eax, 414		; 0000019eH
  00323	8b f4		 mov	 esi, esp
  00325	50		 push	 eax
  00326	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00329	ff 55 ac	 call	 DWORD PTR tv308[ebp]
  0032c	3b f4		 cmp	 esi, esp
  0032e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@WriteSuffi:

; 1011 :                         break;
; 1012 :                     }
; 1013 :                 }
; 1014 :             }

  00333	5f		 pop	 edi
  00334	5e		 pop	 esi
  00335	83 c4 54	 add	 esp, 84			; 00000054H
  00338	3b ec		 cmp	 ebp, esp
  0033a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0033f	8b e5		 mov	 esp, ebp
  00341	5d		 pop	 ebp
  00342	c2 08 00	 ret	 8
  00345	0f 1f 00	 npad	 3
$LN25@WriteSuffi:
  00348	00 00 00 00	 DD	 $LN13@WriteSuffi
  0034c	00 00 00 00	 DD	 $LN14@WriteSuffi
  00350	00 00 00 00	 DD	 $LN15@WriteSuffi
  00354	00 00 00 00	 DD	 $LN16@WriteSuffi
  00358	00 00 00 00	 DD	 $LN17@WriteSuffi
  0035c	00 00 00 00	 DD	 $LN18@WriteSuffi
  00360	00 00 00 00	 DD	 $LN19@WriteSuffi
  00364	00 00 00 00	 DD	 $LN20@WriteSuffi
  00368	00 00 00 00	 DD	 $LN21@WriteSuffi
  0036c	00 00 00 00	 DD	 $LN22@WriteSuffi
  00370	00 00 00 00	 DD	 $LN23@WriteSuffi
?WriteSuffix@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::WriteSuffix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?FormatNumberSequence@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
_TEXT	SEGMENT
tv176 = -160						; size = 4
tv155 = -156						; size = 4
tv157 = -152						; size = 4
_t_writer$ = -144					; size = 44
_r_writer$ = -92					; size = 20
_work_buf$ = -68					; size = 4
_work_buf_len$ = -64					; size = 4
_r_reader$ = -56					; size = 12
_root$ = -36						; size = 16
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_number_sequence_str$ = 8				; size = 4
_writer$ = 12						; size = 4
?FormatNumberSequence@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::FormatNumberSequence, COMDAT
; _this$ = ecx

; 931  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?FormatNumberSequence@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	51		 push	 ecx
  0001a	8d bd 60 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-160]
  00020	b9 25 00 00 00	 mov	 ecx, 37			; 00000025H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	59		 pop	 ecx
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	50		 push	 eax
  00035	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00038	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003e	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00041	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00046	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 932  :                 ResourceHolderUINT root;

  0004b	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  0004e	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00053	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 933  :                 ReverseStringReader r_reader(number_sequence_str);

  0005a	8b 45 08	 mov	 eax, DWORD PTR _number_sequence_str$[ebp]
  0005d	50		 push	 eax
  0005e	8d 4d c8	 lea	 ecx, DWORD PTR _r_reader$[ebp]
  00061	e8 00 00 00 00	 call	 ??0ReverseStringReader@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::ReverseStringReader::ReverseStringReader

; 934  :                 size_t work_buf_len = lstrlenW(number_sequence_str) * 2 + 1 + _precision + 1;

  00066	8b f4		 mov	 esi, esp
  00068	8b 4d 08	 mov	 ecx, DWORD PTR _number_sequence_str$[ebp]
  0006b	51		 push	 ecx
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  00072	3b f4		 cmp	 esi, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00079	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0007c	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  0007f	8d 54 41 02	 lea	 edx, DWORD PTR [ecx+eax*2+2]
  00083	89 55 c0	 mov	 DWORD PTR _work_buf_len$[ebp], edx

; 935  :                 wchar_t* work_buf = root.AllocateString(work_buf_len);

  00086	8b 45 c0	 mov	 eax, DWORD PTR _work_buf_len$[ebp]
  00089	50		 push	 eax
  0008a	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  0008d	e8 00 00 00 00	 call	 ?AllocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPA_WI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateString
  00092	89 45 bc	 mov	 DWORD PTR _work_buf$[ebp], eax

; 936  :                 ReverseStringWriter r_writer(work_buf, work_buf_len);

  00095	8b 4d c0	 mov	 ecx, DWORD PTR _work_buf_len$[ebp]
  00098	51		 push	 ecx
  00099	8b 55 bc	 mov	 edx, DWORD PTR _work_buf$[ebp]
  0009c	52		 push	 edx
  0009d	8d 4d a4	 lea	 ecx, DWORD PTR _r_writer$[ebp]
  000a0	e8 00 00 00 00	 call	 ??0ReverseStringWriter@Internal@Core@Math@Palmtree@@QAE@PA_WI@Z ; Palmtree::Math::Core::Internal::ReverseStringWriter::ReverseStringWriter

; 937  :                 ThousandSeparatedStringWriter t_writer(&r_writer, _format_type, _number_format_info);

  000a5	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000a8	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000ab	51		 push	 ecx
  000ac	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000af	0f b7 42 0c	 movzx	 eax, WORD PTR [edx+12]
  000b3	50		 push	 eax
  000b4	8d 4d a4	 lea	 ecx, DWORD PTR _r_writer$[ebp]
  000b7	51		 push	 ecx
  000b8	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _t_writer$[ebp]
  000be	e8 00 00 00 00	 call	 ??0ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@PAVStringWriter@2345@_WPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::ThousandSeparatedStringWriter
$LN2@FormatNumb:

; 938  :                 while (r_reader.PeekChar() != L'\0')

  000c3	8d 4d c8	 lea	 ecx, DWORD PTR _r_reader$[ebp]
  000c6	e8 00 00 00 00	 call	 ?PeekChar@ReverseStringReader@Internal@Core@Math@Palmtree@@UAE_WXZ ; Palmtree::Math::Core::Internal::ReverseStringReader::PeekChar
  000cb	0f b7 d0	 movzx	 edx, ax
  000ce	85 d2		 test	 edx, edx
  000d0	74 19		 je	 SHORT $LN3@FormatNumb

; 939  :                     t_writer.Write(r_reader.ReadChar());

  000d2	8d 4d c8	 lea	 ecx, DWORD PTR _r_reader$[ebp]
  000d5	e8 00 00 00 00	 call	 ?ReadChar@StringReader@Internal@Core@Math@Palmtree@@QAE_WXZ ; Palmtree::Math::Core::Internal::StringReader::ReadChar
  000da	0f b7 c0	 movzx	 eax, ax
  000dd	50		 push	 eax
  000de	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _t_writer$[ebp]
  000e4	e8 00 00 00 00	 call	 ?Write@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@UAEX_W@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::Write
  000e9	eb d8		 jmp	 SHORT $LN2@FormatNumb
$LN3@FormatNumb:

; 940  :                 writer->Write(t_writer.GetString());

  000eb	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  000ee	8b 11		 mov	 edx, DWORD PTR [ecx]
  000f0	8b 02		 mov	 eax, DWORD PTR [edx]
  000f2	89 85 68 ff ff
	ff		 mov	 DWORD PTR tv157[ebp], eax
  000f8	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _t_writer$[ebp]
  000fe	e8 00 00 00 00	 call	 ?GetString@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@UAEPA_WXZ ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::GetString
  00103	89 85 64 ff ff
	ff		 mov	 DWORD PTR tv155[ebp], eax
  00109	8b f4		 mov	 esi, esp
  0010b	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR tv155[ebp]
  00111	51		 push	 ecx
  00112	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00115	ff 95 68 ff ff
	ff		 call	 DWORD PTR tv157[ebp]
  0011b	3b f4		 cmp	 esi, esp
  0011d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 941  :                 if (_precision > 0)

  00122	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00125	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  00129	7e 3a		 jle	 SHORT $LN4@FormatNumb

; 942  :                 {
; 943  :                     writer->Write(_number_format_info->Currency.DecimalSeparator);

  0012b	8b 45 0c	 mov	 eax, DWORD PTR _writer$[ebp]
  0012e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00130	8b 11		 mov	 edx, DWORD PTR [ecx]
  00132	89 95 60 ff ff
	ff		 mov	 DWORD PTR tv176[ebp], edx
  00138	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0013b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0013e	83 c1 04	 add	 ecx, 4
  00141	8b f4		 mov	 esi, esp
  00143	51		 push	 ecx
  00144	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00147	ff 95 60 ff ff
	ff		 call	 DWORD PTR tv176[ebp]
  0014d	3b f4		 cmp	 esi, esp
  0014f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 944  :                     writer->Write(L'0', _precision);

  00154	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00157	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0015a	50		 push	 eax
  0015b	6a 30		 push	 48			; 00000030H
  0015d	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00160	e8 00 00 00 00	 call	 ?Write@StringWriter@Internal@Core@Math@Palmtree@@QAEX_WI@Z ; Palmtree::Math::Core::Internal::StringWriter::Write
$LN4@FormatNumb:

; 945  :                 }
; 946  :             }

  00165	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0016c	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  0016f	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00174	52		 push	 edx
  00175	8b cd		 mov	 ecx, ebp
  00177	50		 push	 eax
  00178	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN13@FormatNumb
  0017e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00183	58		 pop	 eax
  00184	5a		 pop	 edx
  00185	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00188	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0018f	59		 pop	 ecx
  00190	5f		 pop	 edi
  00191	5e		 pop	 esi
  00192	81 c4 a0 00 00
	00		 add	 esp, 160		; 000000a0H
  00198	3b ec		 cmp	 ebp, esp
  0019a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0019f	8b e5		 mov	 esp, ebp
  001a1	5d		 pop	 ebp
  001a2	c2 08 00	 ret	 8
  001a5	0f 1f 00	 npad	 3
$LN13@FormatNumb:
  001a8	04 00 00 00	 DD	 4
  001ac	00 00 00 00	 DD	 $LN12@FormatNumb
$LN12@FormatNumb:
  001b0	dc ff ff ff	 DD	 -36			; ffffffdcH
  001b4	10 00 00 00	 DD	 16			; 00000010H
  001b8	00 00 00 00	 DD	 $LN7@FormatNumb
  001bc	c8 ff ff ff	 DD	 -56			; ffffffc8H
  001c0	0c 00 00 00	 DD	 12			; 0000000cH
  001c4	00 00 00 00	 DD	 $LN8@FormatNumb
  001c8	a4 ff ff ff	 DD	 -92			; ffffffa4H
  001cc	14 00 00 00	 DD	 20			; 00000014H
  001d0	00 00 00 00	 DD	 $LN9@FormatNumb
  001d4	70 ff ff ff	 DD	 -144			; ffffff70H
  001d8	2c 00 00 00	 DD	 44			; 0000002cH
  001dc	00 00 00 00	 DD	 $LN10@FormatNumb
$LN10@FormatNumb:
  001e0	74		 DB	 116			; 00000074H
  001e1	5f		 DB	 95			; 0000005fH
  001e2	77		 DB	 119			; 00000077H
  001e3	72		 DB	 114			; 00000072H
  001e4	69		 DB	 105			; 00000069H
  001e5	74		 DB	 116			; 00000074H
  001e6	65		 DB	 101			; 00000065H
  001e7	72		 DB	 114			; 00000072H
  001e8	00		 DB	 0
$LN9@FormatNumb:
  001e9	72		 DB	 114			; 00000072H
  001ea	5f		 DB	 95			; 0000005fH
  001eb	77		 DB	 119			; 00000077H
  001ec	72		 DB	 114			; 00000072H
  001ed	69		 DB	 105			; 00000069H
  001ee	74		 DB	 116			; 00000074H
  001ef	65		 DB	 101			; 00000065H
  001f0	72		 DB	 114			; 00000072H
  001f1	00		 DB	 0
$LN8@FormatNumb:
  001f2	72		 DB	 114			; 00000072H
  001f3	5f		 DB	 95			; 0000005fH
  001f4	72		 DB	 114			; 00000072H
  001f5	65		 DB	 101			; 00000065H
  001f6	61		 DB	 97			; 00000061H
  001f7	64		 DB	 100			; 00000064H
  001f8	65		 DB	 101			; 00000065H
  001f9	72		 DB	 114			; 00000072H
  001fa	00		 DB	 0
$LN7@FormatNumb:
  001fb	72		 DB	 114			; 00000072H
  001fc	6f		 DB	 111			; 0000006fH
  001fd	6f		 DB	 111			; 0000006fH
  001fe	74		 DB	 116			; 00000074H
  001ff	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?FormatNumberSequence@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?FormatNumberSequence@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 60 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-160]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?FormatNumberSequence@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?FormatNumberSequence@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::FormatNumberSequence
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WritePrefix@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
_TEXT	SEGMENT
tv307 = -84						; size = 4
tv295 = -80						; size = 4
tv289 = -76						; size = 4
tv277 = -72						; size = 4
tv271 = -68						; size = 4
tv259 = -64						; size = 4
tv253 = -60						; size = 4
tv241 = -56						; size = 4
tv229 = -52						; size = 4
tv217 = -48						; size = 4
tv205 = -44						; size = 4
tv193 = -40						; size = 4
tv181 = -36						; size = 4
tv169 = -32						; size = 4
tv157 = -28						; size = 4
tv145 = -24						; size = 4
tv135 = -20						; size = 4
tv129 = -16						; size = 4
tv85 = -12						; size = 4
tv73 = -8						; size = 4
_this$ = -4						; size = 4
_x_sign$ = 8						; size = 1
_writer$ = 12						; size = 4
?WritePrefix@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::WritePrefix, COMDAT
; _this$ = ecx

; 863  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	51		 push	 ecx
  00009	8d 7d ac	 lea	 edi, DWORD PTR [ebp-84]
  0000c	b9 15 00 00 00	 mov	 ecx, 21			; 00000015H
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	59		 pop	 ecx
  00019	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001c	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00021	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 864  :                 if (x_sign >= 0)

  00026	0f be 45 08	 movsx	 eax, BYTE PTR _x_sign$[ebp]
  0002a	85 c0		 test	 eax, eax
  0002c	0f 8c 8e 00 00
	00		 jl	 $LN6@WritePrefi

; 865  :                 {
; 866  :                     switch (_number_format_info->Percent.PositivePattern)

  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00038	8b 82 34 01 00
	00		 mov	 eax, DWORD PTR [edx+308]
  0003e	89 45 f8	 mov	 DWORD PTR tv73[ebp], eax
  00041	83 7d f8 02	 cmp	 DWORD PTR tv73[ebp], 2
  00045	74 0a		 je	 SHORT $LN10@WritePrefi
  00047	83 7d f8 03	 cmp	 DWORD PTR tv73[ebp], 3
  0004b	74 2c		 je	 SHORT $LN11@WritePrefi

; 867  :                     {
; 868  :                     case 0:
; 869  :                     default:
; 870  :                         break;

  0004d	eb 6c		 jmp	 SHORT $LN2@WritePrefi

; 871  :                     case 1:
; 872  :                         break;

  0004f	eb 6a		 jmp	 SHORT $LN2@WritePrefi
$LN10@WritePrefi:

; 873  :                     case 2:
; 874  :                         writer->Write(_number_format_info->PercentSymbol);

  00051	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00054	8b 11		 mov	 edx, DWORD PTR [ecx]
  00056	8b 02		 mov	 eax, DWORD PTR [edx]
  00058	89 45 f4	 mov	 DWORD PTR tv85[ebp], eax
  0005b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00061	81 c2 9e 01 00
	00		 add	 edx, 414		; 0000019eH
  00067	8b f4		 mov	 esi, esp
  00069	52		 push	 edx
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0006d	ff 55 f4	 call	 DWORD PTR tv85[ebp]
  00070	3b f4		 cmp	 esi, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 875  :                         break;

  00077	eb 42		 jmp	 SHORT $LN2@WritePrefi
$LN11@WritePrefi:

; 876  :                     case 3:
; 877  :                         writer->Write(_number_format_info->PercentSymbol);

  00079	8b 45 0c	 mov	 eax, DWORD PTR _writer$[ebp]
  0007c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00080	89 55 f0	 mov	 DWORD PTR tv129[ebp], edx
  00083	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00086	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00089	81 c1 9e 01 00
	00		 add	 ecx, 414		; 0000019eH
  0008f	8b f4		 mov	 esi, esp
  00091	51		 push	 ecx
  00092	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00095	ff 55 f0	 call	 DWORD PTR tv129[ebp]
  00098	3b f4		 cmp	 esi, esp
  0009a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 878  :                         writer->Write(L' ');

  0009f	8b 55 0c	 mov	 edx, DWORD PTR _writer$[ebp]
  000a2	8b 02		 mov	 eax, DWORD PTR [edx]
  000a4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000a7	89 4d ec	 mov	 DWORD PTR tv135[ebp], ecx
  000aa	8b f4		 mov	 esi, esp
  000ac	6a 20		 push	 32			; 00000020H
  000ae	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  000b1	ff 55 ec	 call	 DWORD PTR tv135[ebp]
  000b4	3b f4		 cmp	 esi, esp
  000b6	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@WritePrefi:

; 879  :                         break;
; 880  :                     }
; 881  :                 }
; 882  :                 else

  000bb	e9 6f 02 00 00	 jmp	 $LN1@WritePrefi
$LN6@WritePrefi:

; 883  :                 {
; 884  :                     switch (_number_format_info->Percent.NegativePattern)

  000c0	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000c3	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000c6	8b 88 30 01 00
	00		 mov	 ecx, DWORD PTR [eax+304]
  000cc	89 4d e8	 mov	 DWORD PTR tv145[ebp], ecx
  000cf	8b 55 e8	 mov	 edx, DWORD PTR tv145[ebp]
  000d2	83 ea 01	 sub	 edx, 1
  000d5	89 55 e8	 mov	 DWORD PTR tv145[ebp], edx
  000d8	83 7d e8 0a	 cmp	 DWORD PTR tv145[ebp], 10 ; 0000000aH
  000dc	77 0a		 ja	 SHORT $LN12@WritePrefi
  000de	8b 45 e8	 mov	 eax, DWORD PTR tv145[ebp]
  000e1	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN25@WritePrefi[eax*4]
$LN12@WritePrefi:

; 885  :                     {
; 886  :                     case 0:
; 887  :                     default:
; 888  :                         writer->Write(_number_format_info->NegativeSign);

  000e8	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  000eb	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ed	8b 02		 mov	 eax, DWORD PTR [edx]
  000ef	89 45 e4	 mov	 DWORD PTR tv157[ebp], eax
  000f2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f5	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000f8	81 c2 5a 01 00
	00		 add	 edx, 346		; 0000015aH
  000fe	8b f4		 mov	 esi, esp
  00100	52		 push	 edx
  00101	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00104	ff 55 e4	 call	 DWORD PTR tv157[ebp]
  00107	3b f4		 cmp	 esi, esp
  00109	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 889  :                         break;

  0010e	e9 1c 02 00 00	 jmp	 $LN1@WritePrefi
$LN13@WritePrefi:

; 890  :                     case 1:
; 891  :                         writer->Write(_number_format_info->NegativeSign);

  00113	8b 45 0c	 mov	 eax, DWORD PTR _writer$[ebp]
  00116	8b 08		 mov	 ecx, DWORD PTR [eax]
  00118	8b 11		 mov	 edx, DWORD PTR [ecx]
  0011a	89 55 e0	 mov	 DWORD PTR tv169[ebp], edx
  0011d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00120	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00123	81 c1 5a 01 00
	00		 add	 ecx, 346		; 0000015aH
  00129	8b f4		 mov	 esi, esp
  0012b	51		 push	 ecx
  0012c	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0012f	ff 55 e0	 call	 DWORD PTR tv169[ebp]
  00132	3b f4		 cmp	 esi, esp
  00134	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 892  :                         break;

  00139	e9 f1 01 00 00	 jmp	 $LN1@WritePrefi
$LN14@WritePrefi:

; 893  :                     case 2:
; 894  :                         writer->Write(_number_format_info->NegativeSign);

  0013e	8b 55 0c	 mov	 edx, DWORD PTR _writer$[ebp]
  00141	8b 02		 mov	 eax, DWORD PTR [edx]
  00143	8b 08		 mov	 ecx, DWORD PTR [eax]
  00145	89 4d dc	 mov	 DWORD PTR tv181[ebp], ecx
  00148	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0014b	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0014e	05 5a 01 00 00	 add	 eax, 346		; 0000015aH
  00153	8b f4		 mov	 esi, esp
  00155	50		 push	 eax
  00156	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00159	ff 55 dc	 call	 DWORD PTR tv181[ebp]
  0015c	3b f4		 cmp	 esi, esp
  0015e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 895  :                         writer->Write(_number_format_info->PercentSymbol);

  00163	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00166	8b 11		 mov	 edx, DWORD PTR [ecx]
  00168	8b 02		 mov	 eax, DWORD PTR [edx]
  0016a	89 45 d8	 mov	 DWORD PTR tv193[ebp], eax
  0016d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00170	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00173	81 c2 9e 01 00
	00		 add	 edx, 414		; 0000019eH
  00179	8b f4		 mov	 esi, esp
  0017b	52		 push	 edx
  0017c	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0017f	ff 55 d8	 call	 DWORD PTR tv193[ebp]
  00182	3b f4		 cmp	 esi, esp
  00184	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 896  :                         break;

  00189	e9 a1 01 00 00	 jmp	 $LN1@WritePrefi
$LN15@WritePrefi:

; 897  :                     case 3:
; 898  :                         writer->Write(_number_format_info->PercentSymbol);

  0018e	8b 45 0c	 mov	 eax, DWORD PTR _writer$[ebp]
  00191	8b 08		 mov	 ecx, DWORD PTR [eax]
  00193	8b 11		 mov	 edx, DWORD PTR [ecx]
  00195	89 55 d4	 mov	 DWORD PTR tv205[ebp], edx
  00198	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0019b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0019e	81 c1 9e 01 00
	00		 add	 ecx, 414		; 0000019eH
  001a4	8b f4		 mov	 esi, esp
  001a6	51		 push	 ecx
  001a7	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  001aa	ff 55 d4	 call	 DWORD PTR tv205[ebp]
  001ad	3b f4		 cmp	 esi, esp
  001af	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 899  :                         writer->Write(_number_format_info->NegativeSign);

  001b4	8b 55 0c	 mov	 edx, DWORD PTR _writer$[ebp]
  001b7	8b 02		 mov	 eax, DWORD PTR [edx]
  001b9	8b 08		 mov	 ecx, DWORD PTR [eax]
  001bb	89 4d d0	 mov	 DWORD PTR tv217[ebp], ecx
  001be	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001c1	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  001c4	05 5a 01 00 00	 add	 eax, 346		; 0000015aH
  001c9	8b f4		 mov	 esi, esp
  001cb	50		 push	 eax
  001cc	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  001cf	ff 55 d0	 call	 DWORD PTR tv217[ebp]
  001d2	3b f4		 cmp	 esi, esp
  001d4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 900  :                         break;

  001d9	e9 51 01 00 00	 jmp	 $LN1@WritePrefi
$LN16@WritePrefi:

; 901  :                     case 4:
; 902  :                         writer->Write(_number_format_info->PercentSymbol);

  001de	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  001e1	8b 11		 mov	 edx, DWORD PTR [ecx]
  001e3	8b 02		 mov	 eax, DWORD PTR [edx]
  001e5	89 45 cc	 mov	 DWORD PTR tv229[ebp], eax
  001e8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001eb	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  001ee	81 c2 9e 01 00
	00		 add	 edx, 414		; 0000019eH
  001f4	8b f4		 mov	 esi, esp
  001f6	52		 push	 edx
  001f7	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  001fa	ff 55 cc	 call	 DWORD PTR tv229[ebp]
  001fd	3b f4		 cmp	 esi, esp
  001ff	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 903  :                         break;

  00204	e9 26 01 00 00	 jmp	 $LN1@WritePrefi
$LN17@WritePrefi:

; 904  :                     case 5:
; 905  :                         break;

  00209	e9 21 01 00 00	 jmp	 $LN1@WritePrefi
$LN18@WritePrefi:

; 906  :                     case 6:
; 907  :                         break;

  0020e	e9 1c 01 00 00	 jmp	 $LN1@WritePrefi
$LN19@WritePrefi:

; 908  :                     case 7:
; 909  :                         writer->Write(_number_format_info->NegativeSign);

  00213	8b 45 0c	 mov	 eax, DWORD PTR _writer$[ebp]
  00216	8b 08		 mov	 ecx, DWORD PTR [eax]
  00218	8b 11		 mov	 edx, DWORD PTR [ecx]
  0021a	89 55 c8	 mov	 DWORD PTR tv241[ebp], edx
  0021d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00220	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00223	81 c1 5a 01 00
	00		 add	 ecx, 346		; 0000015aH
  00229	8b f4		 mov	 esi, esp
  0022b	51		 push	 ecx
  0022c	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0022f	ff 55 c8	 call	 DWORD PTR tv241[ebp]
  00232	3b f4		 cmp	 esi, esp
  00234	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 910  :                         writer->Write(_number_format_info->PercentSymbol);

  00239	8b 55 0c	 mov	 edx, DWORD PTR _writer$[ebp]
  0023c	8b 02		 mov	 eax, DWORD PTR [edx]
  0023e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00240	89 4d c4	 mov	 DWORD PTR tv253[ebp], ecx
  00243	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00246	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00249	05 9e 01 00 00	 add	 eax, 414		; 0000019eH
  0024e	8b f4		 mov	 esi, esp
  00250	50		 push	 eax
  00251	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00254	ff 55 c4	 call	 DWORD PTR tv253[ebp]
  00257	3b f4		 cmp	 esi, esp
  00259	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 911  :                         writer->Write(L' ');

  0025e	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00261	8b 11		 mov	 edx, DWORD PTR [ecx]
  00263	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00266	89 45 c0	 mov	 DWORD PTR tv259[ebp], eax
  00269	8b f4		 mov	 esi, esp
  0026b	6a 20		 push	 32			; 00000020H
  0026d	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00270	ff 55 c0	 call	 DWORD PTR tv259[ebp]
  00273	3b f4		 cmp	 esi, esp
  00275	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 912  :                         break;

  0027a	e9 b0 00 00 00	 jmp	 $LN1@WritePrefi
$LN20@WritePrefi:

; 913  :                     case 8:
; 914  :                         break;

  0027f	e9 ab 00 00 00	 jmp	 $LN1@WritePrefi
$LN21@WritePrefi:

; 915  :                     case 9:
; 916  :                         writer->Write(_number_format_info->PercentSymbol);

  00284	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00287	8b 11		 mov	 edx, DWORD PTR [ecx]
  00289	8b 02		 mov	 eax, DWORD PTR [edx]
  0028b	89 45 bc	 mov	 DWORD PTR tv271[ebp], eax
  0028e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00291	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00294	81 c2 9e 01 00
	00		 add	 edx, 414		; 0000019eH
  0029a	8b f4		 mov	 esi, esp
  0029c	52		 push	 edx
  0029d	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  002a0	ff 55 bc	 call	 DWORD PTR tv271[ebp]
  002a3	3b f4		 cmp	 esi, esp
  002a5	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 917  :                         writer->Write(L' ');

  002aa	8b 45 0c	 mov	 eax, DWORD PTR _writer$[ebp]
  002ad	8b 08		 mov	 ecx, DWORD PTR [eax]
  002af	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  002b2	89 55 b8	 mov	 DWORD PTR tv277[ebp], edx
  002b5	8b f4		 mov	 esi, esp
  002b7	6a 20		 push	 32			; 00000020H
  002b9	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  002bc	ff 55 b8	 call	 DWORD PTR tv277[ebp]
  002bf	3b f4		 cmp	 esi, esp
  002c1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 918  :                         break;

  002c6	eb 67		 jmp	 SHORT $LN1@WritePrefi
$LN22@WritePrefi:

; 919  :                     case 10:
; 920  :                         writer->Write(_number_format_info->PercentSymbol);

  002c8	8b 45 0c	 mov	 eax, DWORD PTR _writer$[ebp]
  002cb	8b 08		 mov	 ecx, DWORD PTR [eax]
  002cd	8b 11		 mov	 edx, DWORD PTR [ecx]
  002cf	89 55 b4	 mov	 DWORD PTR tv289[ebp], edx
  002d2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002d5	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  002d8	81 c1 9e 01 00
	00		 add	 ecx, 414		; 0000019eH
  002de	8b f4		 mov	 esi, esp
  002e0	51		 push	 ecx
  002e1	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  002e4	ff 55 b4	 call	 DWORD PTR tv289[ebp]
  002e7	3b f4		 cmp	 esi, esp
  002e9	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 921  :                         writer->Write(L' ');

  002ee	8b 55 0c	 mov	 edx, DWORD PTR _writer$[ebp]
  002f1	8b 02		 mov	 eax, DWORD PTR [edx]
  002f3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  002f6	89 4d b0	 mov	 DWORD PTR tv295[ebp], ecx
  002f9	8b f4		 mov	 esi, esp
  002fb	6a 20		 push	 32			; 00000020H
  002fd	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00300	ff 55 b0	 call	 DWORD PTR tv295[ebp]
  00303	3b f4		 cmp	 esi, esp
  00305	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 922  :                         writer->Write(_number_format_info->NegativeSign);

  0030a	8b 55 0c	 mov	 edx, DWORD PTR _writer$[ebp]
  0030d	8b 02		 mov	 eax, DWORD PTR [edx]
  0030f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00311	89 4d ac	 mov	 DWORD PTR tv307[ebp], ecx
  00314	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00317	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0031a	05 5a 01 00 00	 add	 eax, 346		; 0000015aH
  0031f	8b f4		 mov	 esi, esp
  00321	50		 push	 eax
  00322	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00325	ff 55 ac	 call	 DWORD PTR tv307[ebp]
  00328	3b f4		 cmp	 esi, esp
  0032a	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@WritePrefi:

; 923  :                         break;
; 924  :                     case 11:
; 925  :                         break;
; 926  :                     }
; 927  :                 }
; 928  :             }

  0032f	5f		 pop	 edi
  00330	5e		 pop	 esi
  00331	83 c4 54	 add	 esp, 84			; 00000054H
  00334	3b ec		 cmp	 ebp, esp
  00336	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0033b	8b e5		 mov	 esp, ebp
  0033d	5d		 pop	 ebp
  0033e	c2 08 00	 ret	 8
  00341	0f 1f 00	 npad	 3
$LN25@WritePrefi:
  00344	00 00 00 00	 DD	 $LN13@WritePrefi
  00348	00 00 00 00	 DD	 $LN14@WritePrefi
  0034c	00 00 00 00	 DD	 $LN15@WritePrefi
  00350	00 00 00 00	 DD	 $LN16@WritePrefi
  00354	00 00 00 00	 DD	 $LN17@WritePrefi
  00358	00 00 00 00	 DD	 $LN18@WritePrefi
  0035c	00 00 00 00	 DD	 $LN19@WritePrefi
  00360	00 00 00 00	 DD	 $LN20@WritePrefi
  00364	00 00 00 00	 DD	 $LN21@WritePrefi
  00368	00 00 00 00	 DD	 $LN22@WritePrefi
  0036c	00 00 00 00	 DD	 $LN1@WritePrefi
?WritePrefix@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::WritePrefix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?FormatInternally@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z
_TEXT	SEGMENT
_x2_abs$ = -44						; size = 4
_root$ = -36						; size = 16
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_x_abs$ = 8						; size = 4
_writer$ = 12						; size = 4
?FormatInternally@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::FormatInternally, COMDAT
; _this$ = ecx

; 855  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?FormatInternally@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 d4	 mov	 DWORD PTR [ebp-44], eax
  0001c	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  0001f	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  00022	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00025	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00028	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0002b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00036	33 c5		 xor	 eax, ebp
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00045	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  0004a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 856  :                 ResourceHolderUINT root;

  0004f	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00052	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00057	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 857  :                 NUMBER_HEADER* x2_abs = PMC_Multiply_X_I_Imp(x_abs, 100);

  0005e	6a 64		 push	 100			; 00000064H
  00060	8b 45 08	 mov	 eax, DWORD PTR _x_abs$[ebp]
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ?PMC_Multiply_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_Multiply_X_I_Imp
  00069	83 c4 08	 add	 esp, 8
  0006c	89 45 d4	 mov	 DWORD PTR _x2_abs$[ebp], eax

; 858  :                 root.HookNumber(x2_abs);

  0006f	8b 4d d4	 mov	 ecx, DWORD PTR _x2_abs$[ebp]
  00072	51		 push	 ecx
  00073	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00076	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 859  :                 Formatter::FormatInternally(x2_abs, writer);

  0007b	8b 55 0c	 mov	 edx, DWORD PTR _writer$[ebp]
  0007e	52		 push	 edx
  0007f	8b 45 d4	 mov	 eax, DWORD PTR _x2_abs$[ebp]
  00082	50		 push	 eax
  00083	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	e8 00 00 00 00	 call	 ?FormatInternally@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::FormatInternally

; 860  :             }

  0008b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00092	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00095	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0009a	52		 push	 edx
  0009b	8b cd		 mov	 ecx, ebp
  0009d	50		 push	 eax
  0009e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@FormatInte
  000a4	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000a9	58		 pop	 eax
  000aa	5a		 pop	 edx
  000ab	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ae	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b5	59		 pop	 ecx
  000b6	83 c4 2c	 add	 esp, 44			; 0000002cH
  000b9	3b ec		 cmp	 ebp, esp
  000bb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c0	8b e5		 mov	 esp, ebp
  000c2	5d		 pop	 ebp
  000c3	c2 08 00	 ret	 8
  000c6	66 90		 npad	 2
$LN7@FormatInte:
  000c8	01 00 00 00	 DD	 1
  000cc	00 00 00 00	 DD	 $LN6@FormatInte
$LN6@FormatInte:
  000d0	dc ff ff ff	 DD	 -36			; ffffffdcH
  000d4	10 00 00 00	 DD	 16			; 00000010H
  000d8	00 00 00 00	 DD	 $LN4@FormatInte
$LN4@FormatInte:
  000dc	72		 DB	 114			; 00000072H
  000dd	6f		 DB	 111			; 0000006fH
  000de	6f		 DB	 111			; 0000006fH
  000df	74		 DB	 116			; 00000074H
  000e0	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?FormatInternally@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?FormatInternally@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?FormatInternally@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?FormatInternally@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::FormatInternally
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WriteZeroValue@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z
_TEXT	SEGMENT
tv88 = -12						; size = 4
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_writer$ = 8						; size = 4
?WriteZeroValue@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::WriteZeroValue, COMDAT
; _this$ = ecx

; 845  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001f	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00024	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 846  :                 writer->Write(L'0');

  00029	8b 45 08	 mov	 eax, DWORD PTR _writer$[ebp]
  0002c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00031	89 55 f8	 mov	 DWORD PTR tv69[ebp], edx
  00034	8b f4		 mov	 esi, esp
  00036	6a 30		 push	 48			; 00000030H
  00038	8b 4d 08	 mov	 ecx, DWORD PTR _writer$[ebp]
  0003b	ff 55 f8	 call	 DWORD PTR tv69[ebp]
  0003e	3b f4		 cmp	 esi, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 847  :                 if (_precision > 0)

  00045	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00048	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0004c	7e 34		 jle	 SHORT $LN1@WriteZeroV

; 848  :                 {
; 849  :                     writer->Write(_number_format_info->Currency.DecimalSeparator);

  0004e	8b 4d 08	 mov	 ecx, DWORD PTR _writer$[ebp]
  00051	8b 11		 mov	 edx, DWORD PTR [ecx]
  00053	8b 02		 mov	 eax, DWORD PTR [edx]
  00055	89 45 f4	 mov	 DWORD PTR tv88[ebp], eax
  00058	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0005e	83 c2 04	 add	 edx, 4
  00061	8b f4		 mov	 esi, esp
  00063	52		 push	 edx
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _writer$[ebp]
  00067	ff 55 f4	 call	 DWORD PTR tv88[ebp]
  0006a	3b f4		 cmp	 esi, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 850  :                     writer->Write(L'0', _precision);

  00071	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00077	51		 push	 ecx
  00078	6a 30		 push	 48			; 00000030H
  0007a	8b 4d 08	 mov	 ecx, DWORD PTR _writer$[ebp]
  0007d	e8 00 00 00 00	 call	 ?Write@StringWriter@Internal@Core@Math@Palmtree@@QAEX_WI@Z ; Palmtree::Math::Core::Internal::StringWriter::Write
$LN1@WriteZeroV:

; 851  :                 }
; 852  :             }

  00082	5e		 pop	 esi
  00083	83 c4 0c	 add	 esp, 12			; 0000000cH
  00086	3b ec		 cmp	 ebp, esp
  00088	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c2 04 00	 ret	 4
?WriteZeroValue@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::WriteZeroValue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?GetDefaultPrecisionValue@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDefaultPrecisionValue@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::GetDefaultPrecisionValue, COMDAT
; _this$ = ecx

; 840  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 841  :                 return (_number_format_info->Currency.DecimalDigits);

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0001e	8b 01		 mov	 eax, DWORD PTR [ecx]

; 842  :             }

  00020	83 c4 04	 add	 esp, 4
  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?GetDefaultPrecisionValue@FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::GetDefaultPrecisionValue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ??0FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@HPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_precision$ = 8						; size = 4
_number_format_info$ = 12				; size = 4
??0FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@HPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::FormatterTypeP, COMDAT
; _this$ = ecx

; 835  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 834  :                 : Formatter(L'P', precision, number_format_info)

  00018	8b 45 0c	 mov	 eax, DWORD PTR _number_format_info$[ebp]
  0001b	50		 push	 eax
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _precision$[ebp]
  0001f	51		 push	 ecx
  00020	6a 50		 push	 80			; 00000050H
  00022	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	e8 00 00 00 00	 call	 ??0Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@IAE@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::Formatter

; 835  :             {

  0002a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002d	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@

; 836  :             }

  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	83 c4 04	 add	 esp, 4
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
??0FormatterTypeP@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@HPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeP::FormatterTypeP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WriteSuffix@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
_TEXT	SEGMENT
tv141 = -24						; size = 4
tv129 = -20						; size = 4
tv91 = -16						; size = 4
tv79 = -12						; size = 4
tv73 = -8						; size = 4
_this$ = -4						; size = 4
_x_sign$ = 8						; size = 1
_writer$ = 12						; size = 4
?WriteSuffix@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::WriteSuffix, COMDAT
; _this$ = ecx

; 801  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00012	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00015	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00018	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001b	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001e	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00021	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00026	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 802  :                 if (x_sign >= 0)

  0002b	0f be 45 08	 movsx	 eax, BYTE PTR _x_sign$[ebp]
  0002f	85 c0		 test	 eax, eax
  00031	7c 05		 jl	 SHORT $LN4@WriteSuffi

; 803  :                 {
; 804  :                 }
; 805  :                 else

  00033	e9 ac 00 00 00	 jmp	 $LN1@WriteSuffi
$LN4@WriteSuffi:

; 806  :                 {
; 807  :                     switch (_number_format_info->Currency.NegativePattern)

  00038	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0003e	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
  00041	89 45 f8	 mov	 DWORD PTR tv73[ebp], eax
  00044	83 7d f8 00	 cmp	 DWORD PTR tv73[ebp], 0
  00048	74 0e		 je	 SHORT $LN6@WriteSuffi
  0004a	83 7d f8 03	 cmp	 DWORD PTR tv73[ebp], 3
  0004e	74 2a		 je	 SHORT $LN9@WriteSuffi
  00050	83 7d f8 04	 cmp	 DWORD PTR tv73[ebp], 4
  00054	74 4c		 je	 SHORT $LN10@WriteSuffi
  00056	eb 1e		 jmp	 SHORT $LN7@WriteSuffi
$LN6@WriteSuffi:

; 808  :                     {
; 809  :                     case 0:
; 810  :                         writer->Write(L')');

  00058	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0005b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00060	89 45 f4	 mov	 DWORD PTR tv79[ebp], eax
  00063	8b f4		 mov	 esi, esp
  00065	6a 29		 push	 41			; 00000029H
  00067	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0006a	ff 55 f4	 call	 DWORD PTR tv79[ebp]
  0006d	3b f4		 cmp	 esi, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 811  :                         break;

  00074	eb 6e		 jmp	 SHORT $LN1@WriteSuffi
$LN7@WriteSuffi:

; 812  :                     case 1:
; 813  :                     default:
; 814  :                         break;

  00076	eb 6c		 jmp	 SHORT $LN1@WriteSuffi

; 815  :                     case 2:
; 816  :                         break;

  00078	eb 6a		 jmp	 SHORT $LN1@WriteSuffi
$LN9@WriteSuffi:

; 817  :                     case 3:
; 818  :                         writer->Write(_number_format_info->NegativeSign);

  0007a	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0007d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0007f	8b 02		 mov	 eax, DWORD PTR [edx]
  00081	89 45 f0	 mov	 DWORD PTR tv91[ebp], eax
  00084	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0008a	81 c2 5a 01 00
	00		 add	 edx, 346		; 0000015aH
  00090	8b f4		 mov	 esi, esp
  00092	52		 push	 edx
  00093	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00096	ff 55 f0	 call	 DWORD PTR tv91[ebp]
  00099	3b f4		 cmp	 esi, esp
  0009b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 819  :                         break;

  000a0	eb 42		 jmp	 SHORT $LN1@WriteSuffi
$LN10@WriteSuffi:

; 820  :                     case 4:
; 821  :                         writer->Write(L' ');

  000a2	8b 45 0c	 mov	 eax, DWORD PTR _writer$[ebp]
  000a5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a7	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000aa	89 55 ec	 mov	 DWORD PTR tv129[ebp], edx
  000ad	8b f4		 mov	 esi, esp
  000af	6a 20		 push	 32			; 00000020H
  000b1	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  000b4	ff 55 ec	 call	 DWORD PTR tv129[ebp]
  000b7	3b f4		 cmp	 esi, esp
  000b9	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 822  :                         writer->Write(_number_format_info->NegativeSign);

  000be	8b 45 0c	 mov	 eax, DWORD PTR _writer$[ebp]
  000c1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c3	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c5	89 55 e8	 mov	 DWORD PTR tv141[ebp], edx
  000c8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000cb	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000ce	81 c1 5a 01 00
	00		 add	 ecx, 346		; 0000015aH
  000d4	8b f4		 mov	 esi, esp
  000d6	51		 push	 ecx
  000d7	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  000da	ff 55 e8	 call	 DWORD PTR tv141[ebp]
  000dd	3b f4		 cmp	 esi, esp
  000df	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@WriteSuffi:

; 823  :                         break;
; 824  :                     }
; 825  :                 }
; 826  :             }

  000e4	5e		 pop	 esi
  000e5	83 c4 18	 add	 esp, 24			; 00000018H
  000e8	3b ec		 cmp	 ebp, esp
  000ea	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ef	8b e5		 mov	 esp, ebp
  000f1	5d		 pop	 ebp
  000f2	c2 08 00	 ret	 8
?WriteSuffix@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::WriteSuffix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?FormatNumberSequence@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
_TEXT	SEGMENT
tv176 = -160						; size = 4
tv155 = -156						; size = 4
tv157 = -152						; size = 4
_t_writer$ = -144					; size = 44
_r_writer$ = -92					; size = 20
_work_buf$ = -68					; size = 4
_work_buf_len$ = -64					; size = 4
_r_reader$ = -56					; size = 12
_root$ = -36						; size = 16
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_number_sequence_str$ = 8				; size = 4
_writer$ = 12						; size = 4
?FormatNumberSequence@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::FormatNumberSequence, COMDAT
; _this$ = ecx

; 783  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?FormatNumberSequence@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	51		 push	 ecx
  0001a	8d bd 60 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-160]
  00020	b9 25 00 00 00	 mov	 ecx, 37			; 00000025H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	59		 pop	 ecx
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	50		 push	 eax
  00035	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00038	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003e	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00041	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00046	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 784  :                 ResourceHolderUINT root;

  0004b	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  0004e	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00053	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 785  :                 ReverseStringReader r_reader(number_sequence_str);

  0005a	8b 45 08	 mov	 eax, DWORD PTR _number_sequence_str$[ebp]
  0005d	50		 push	 eax
  0005e	8d 4d c8	 lea	 ecx, DWORD PTR _r_reader$[ebp]
  00061	e8 00 00 00 00	 call	 ??0ReverseStringReader@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::ReverseStringReader::ReverseStringReader

; 786  :                 size_t work_buf_len = lstrlenW(number_sequence_str) * 2 + 1 + _precision + 1;

  00066	8b f4		 mov	 esi, esp
  00068	8b 4d 08	 mov	 ecx, DWORD PTR _number_sequence_str$[ebp]
  0006b	51		 push	 ecx
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  00072	3b f4		 cmp	 esi, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00079	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0007c	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  0007f	8d 54 41 02	 lea	 edx, DWORD PTR [ecx+eax*2+2]
  00083	89 55 c0	 mov	 DWORD PTR _work_buf_len$[ebp], edx

; 787  :                 wchar_t* work_buf = root.AllocateString(work_buf_len);

  00086	8b 45 c0	 mov	 eax, DWORD PTR _work_buf_len$[ebp]
  00089	50		 push	 eax
  0008a	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  0008d	e8 00 00 00 00	 call	 ?AllocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPA_WI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateString
  00092	89 45 bc	 mov	 DWORD PTR _work_buf$[ebp], eax

; 788  :                 ReverseStringWriter r_writer(work_buf, work_buf_len);

  00095	8b 4d c0	 mov	 ecx, DWORD PTR _work_buf_len$[ebp]
  00098	51		 push	 ecx
  00099	8b 55 bc	 mov	 edx, DWORD PTR _work_buf$[ebp]
  0009c	52		 push	 edx
  0009d	8d 4d a4	 lea	 ecx, DWORD PTR _r_writer$[ebp]
  000a0	e8 00 00 00 00	 call	 ??0ReverseStringWriter@Internal@Core@Math@Palmtree@@QAE@PA_WI@Z ; Palmtree::Math::Core::Internal::ReverseStringWriter::ReverseStringWriter

; 789  :                 ThousandSeparatedStringWriter t_writer(&r_writer, _format_type, _number_format_info);

  000a5	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000a8	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000ab	51		 push	 ecx
  000ac	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000af	0f b7 42 0c	 movzx	 eax, WORD PTR [edx+12]
  000b3	50		 push	 eax
  000b4	8d 4d a4	 lea	 ecx, DWORD PTR _r_writer$[ebp]
  000b7	51		 push	 ecx
  000b8	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _t_writer$[ebp]
  000be	e8 00 00 00 00	 call	 ??0ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@PAVStringWriter@2345@_WPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::ThousandSeparatedStringWriter
$LN2@FormatNumb:

; 790  :                 while (r_reader.PeekChar() != L'\0')

  000c3	8d 4d c8	 lea	 ecx, DWORD PTR _r_reader$[ebp]
  000c6	e8 00 00 00 00	 call	 ?PeekChar@ReverseStringReader@Internal@Core@Math@Palmtree@@UAE_WXZ ; Palmtree::Math::Core::Internal::ReverseStringReader::PeekChar
  000cb	0f b7 d0	 movzx	 edx, ax
  000ce	85 d2		 test	 edx, edx
  000d0	74 19		 je	 SHORT $LN3@FormatNumb

; 791  :                     t_writer.Write(r_reader.ReadChar());

  000d2	8d 4d c8	 lea	 ecx, DWORD PTR _r_reader$[ebp]
  000d5	e8 00 00 00 00	 call	 ?ReadChar@StringReader@Internal@Core@Math@Palmtree@@QAE_WXZ ; Palmtree::Math::Core::Internal::StringReader::ReadChar
  000da	0f b7 c0	 movzx	 eax, ax
  000dd	50		 push	 eax
  000de	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _t_writer$[ebp]
  000e4	e8 00 00 00 00	 call	 ?Write@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@UAEX_W@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::Write
  000e9	eb d8		 jmp	 SHORT $LN2@FormatNumb
$LN3@FormatNumb:

; 792  :                 writer->Write(t_writer.GetString());

  000eb	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  000ee	8b 11		 mov	 edx, DWORD PTR [ecx]
  000f0	8b 02		 mov	 eax, DWORD PTR [edx]
  000f2	89 85 68 ff ff
	ff		 mov	 DWORD PTR tv157[ebp], eax
  000f8	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _t_writer$[ebp]
  000fe	e8 00 00 00 00	 call	 ?GetString@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@UAEPA_WXZ ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::GetString
  00103	89 85 64 ff ff
	ff		 mov	 DWORD PTR tv155[ebp], eax
  00109	8b f4		 mov	 esi, esp
  0010b	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR tv155[ebp]
  00111	51		 push	 ecx
  00112	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00115	ff 95 68 ff ff
	ff		 call	 DWORD PTR tv157[ebp]
  0011b	3b f4		 cmp	 esi, esp
  0011d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 793  :                 if (_precision > 0)

  00122	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00125	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  00129	7e 3a		 jle	 SHORT $LN4@FormatNumb

; 794  :                 {
; 795  :                     writer->Write(_number_format_info->Number.DecimalSeparator);

  0012b	8b 45 0c	 mov	 eax, DWORD PTR _writer$[ebp]
  0012e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00130	8b 11		 mov	 edx, DWORD PTR [ecx]
  00132	89 95 60 ff ff
	ff		 mov	 DWORD PTR tv176[ebp], edx
  00138	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0013b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0013e	83 c1 6c	 add	 ecx, 108		; 0000006cH
  00141	8b f4		 mov	 esi, esp
  00143	51		 push	 ecx
  00144	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00147	ff 95 60 ff ff
	ff		 call	 DWORD PTR tv176[ebp]
  0014d	3b f4		 cmp	 esi, esp
  0014f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 796  :                     writer->Write(L'0', _precision);

  00154	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00157	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0015a	50		 push	 eax
  0015b	6a 30		 push	 48			; 00000030H
  0015d	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00160	e8 00 00 00 00	 call	 ?Write@StringWriter@Internal@Core@Math@Palmtree@@QAEX_WI@Z ; Palmtree::Math::Core::Internal::StringWriter::Write
$LN4@FormatNumb:

; 797  :                 }
; 798  :             }

  00165	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0016c	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  0016f	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00174	52		 push	 edx
  00175	8b cd		 mov	 ecx, ebp
  00177	50		 push	 eax
  00178	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN13@FormatNumb
  0017e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00183	58		 pop	 eax
  00184	5a		 pop	 edx
  00185	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00188	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0018f	59		 pop	 ecx
  00190	5f		 pop	 edi
  00191	5e		 pop	 esi
  00192	81 c4 a0 00 00
	00		 add	 esp, 160		; 000000a0H
  00198	3b ec		 cmp	 ebp, esp
  0019a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0019f	8b e5		 mov	 esp, ebp
  001a1	5d		 pop	 ebp
  001a2	c2 08 00	 ret	 8
  001a5	0f 1f 00	 npad	 3
$LN13@FormatNumb:
  001a8	04 00 00 00	 DD	 4
  001ac	00 00 00 00	 DD	 $LN12@FormatNumb
$LN12@FormatNumb:
  001b0	dc ff ff ff	 DD	 -36			; ffffffdcH
  001b4	10 00 00 00	 DD	 16			; 00000010H
  001b8	00 00 00 00	 DD	 $LN7@FormatNumb
  001bc	c8 ff ff ff	 DD	 -56			; ffffffc8H
  001c0	0c 00 00 00	 DD	 12			; 0000000cH
  001c4	00 00 00 00	 DD	 $LN8@FormatNumb
  001c8	a4 ff ff ff	 DD	 -92			; ffffffa4H
  001cc	14 00 00 00	 DD	 20			; 00000014H
  001d0	00 00 00 00	 DD	 $LN9@FormatNumb
  001d4	70 ff ff ff	 DD	 -144			; ffffff70H
  001d8	2c 00 00 00	 DD	 44			; 0000002cH
  001dc	00 00 00 00	 DD	 $LN10@FormatNumb
$LN10@FormatNumb:
  001e0	74		 DB	 116			; 00000074H
  001e1	5f		 DB	 95			; 0000005fH
  001e2	77		 DB	 119			; 00000077H
  001e3	72		 DB	 114			; 00000072H
  001e4	69		 DB	 105			; 00000069H
  001e5	74		 DB	 116			; 00000074H
  001e6	65		 DB	 101			; 00000065H
  001e7	72		 DB	 114			; 00000072H
  001e8	00		 DB	 0
$LN9@FormatNumb:
  001e9	72		 DB	 114			; 00000072H
  001ea	5f		 DB	 95			; 0000005fH
  001eb	77		 DB	 119			; 00000077H
  001ec	72		 DB	 114			; 00000072H
  001ed	69		 DB	 105			; 00000069H
  001ee	74		 DB	 116			; 00000074H
  001ef	65		 DB	 101			; 00000065H
  001f0	72		 DB	 114			; 00000072H
  001f1	00		 DB	 0
$LN8@FormatNumb:
  001f2	72		 DB	 114			; 00000072H
  001f3	5f		 DB	 95			; 0000005fH
  001f4	72		 DB	 114			; 00000072H
  001f5	65		 DB	 101			; 00000065H
  001f6	61		 DB	 97			; 00000061H
  001f7	64		 DB	 100			; 00000064H
  001f8	65		 DB	 101			; 00000065H
  001f9	72		 DB	 114			; 00000072H
  001fa	00		 DB	 0
$LN7@FormatNumb:
  001fb	72		 DB	 114			; 00000072H
  001fc	6f		 DB	 111			; 0000006fH
  001fd	6f		 DB	 111			; 0000006fH
  001fe	74		 DB	 116			; 00000074H
  001ff	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?FormatNumberSequence@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?FormatNumberSequence@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 60 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-160]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?FormatNumberSequence@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?FormatNumberSequence@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::FormatNumberSequence
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WritePrefix@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
_TEXT	SEGMENT
tv141 = -24						; size = 4
tv135 = -20						; size = 4
tv91 = -16						; size = 4
tv79 = -12						; size = 4
tv73 = -8						; size = 4
_this$ = -4						; size = 4
_x_sign$ = 8						; size = 1
_writer$ = 12						; size = 4
?WritePrefix@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::WritePrefix, COMDAT
; _this$ = ecx

; 755  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00012	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00015	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00018	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001b	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001e	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00021	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00026	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 756  :                 if (x_sign >= 0)

  0002b	0f be 45 08	 movsx	 eax, BYTE PTR _x_sign$[ebp]
  0002f	85 c0		 test	 eax, eax
  00031	7c 05		 jl	 SHORT $LN4@WritePrefi

; 757  :                 {
; 758  :                 }
; 759  :                 else

  00033	e9 a6 00 00 00	 jmp	 $LN1@WritePrefi
$LN4@WritePrefi:

; 760  :                 {
; 761  :                     switch (_number_format_info->Number.NegativePattern)

  00038	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0003e	8b 82 c8 00 00
	00		 mov	 eax, DWORD PTR [edx+200]
  00044	89 45 f8	 mov	 DWORD PTR tv73[ebp], eax
  00047	83 7d f8 04	 cmp	 DWORD PTR tv73[ebp], 4
  0004b	77 28		 ja	 SHORT $LN7@WritePrefi
  0004d	8b 4d f8	 mov	 ecx, DWORD PTR tv73[ebp]
  00050	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN12@WritePrefi[ecx*4]
$LN6@WritePrefi:

; 762  :                     {
; 763  :                     case 0:
; 764  :                         writer->Write(L'(');

  00057	8b 55 0c	 mov	 edx, DWORD PTR _writer$[ebp]
  0005a	8b 02		 mov	 eax, DWORD PTR [edx]
  0005c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005f	89 4d f4	 mov	 DWORD PTR tv79[ebp], ecx
  00062	8b f4		 mov	 esi, esp
  00064	6a 28		 push	 40			; 00000028H
  00066	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00069	ff 55 f4	 call	 DWORD PTR tv79[ebp]
  0006c	3b f4		 cmp	 esi, esp
  0006e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 765  :                         break;

  00073	eb 69		 jmp	 SHORT $LN1@WritePrefi
$LN7@WritePrefi:

; 766  :                     case 1:
; 767  :                     default:
; 768  :                         writer->Write(_number_format_info->NegativeSign);

  00075	8b 55 0c	 mov	 edx, DWORD PTR _writer$[ebp]
  00078	8b 02		 mov	 eax, DWORD PTR [edx]
  0007a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007c	89 4d f0	 mov	 DWORD PTR tv91[ebp], ecx
  0007f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00082	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00085	05 5a 01 00 00	 add	 eax, 346		; 0000015aH
  0008a	8b f4		 mov	 esi, esp
  0008c	50		 push	 eax
  0008d	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00090	ff 55 f0	 call	 DWORD PTR tv91[ebp]
  00093	3b f4		 cmp	 esi, esp
  00095	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 769  :                         break;

  0009a	eb 42		 jmp	 SHORT $LN1@WritePrefi
$LN8@WritePrefi:

; 770  :                     case 2:
; 771  :                         writer->Write(_number_format_info->NegativeSign);

  0009c	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0009f	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a1	8b 02		 mov	 eax, DWORD PTR [edx]
  000a3	89 45 ec	 mov	 DWORD PTR tv135[ebp], eax
  000a6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a9	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000ac	81 c2 5a 01 00
	00		 add	 edx, 346		; 0000015aH
  000b2	8b f4		 mov	 esi, esp
  000b4	52		 push	 edx
  000b5	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  000b8	ff 55 ec	 call	 DWORD PTR tv135[ebp]
  000bb	3b f4		 cmp	 esi, esp
  000bd	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 772  :                         writer->Write(L' ');

  000c2	8b 45 0c	 mov	 eax, DWORD PTR _writer$[ebp]
  000c5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c7	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000ca	89 55 e8	 mov	 DWORD PTR tv141[ebp], edx
  000cd	8b f4		 mov	 esi, esp
  000cf	6a 20		 push	 32			; 00000020H
  000d1	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  000d4	ff 55 e8	 call	 DWORD PTR tv141[ebp]
  000d7	3b f4		 cmp	 esi, esp
  000d9	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@WritePrefi:

; 773  :                         break;
; 774  :                     case 3:
; 775  :                         break;
; 776  :                     case 4:
; 777  :                         break;
; 778  :                     }
; 779  :                 }
; 780  :             }

  000de	5e		 pop	 esi
  000df	83 c4 18	 add	 esp, 24			; 00000018H
  000e2	3b ec		 cmp	 ebp, esp
  000e4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c2 08 00	 ret	 8
  000ef	90		 npad	 1
$LN12@WritePrefi:
  000f0	00 00 00 00	 DD	 $LN6@WritePrefi
  000f4	00 00 00 00	 DD	 $LN7@WritePrefi
  000f8	00 00 00 00	 DD	 $LN8@WritePrefi
  000fc	00 00 00 00	 DD	 $LN1@WritePrefi
  00100	00 00 00 00	 DD	 $LN1@WritePrefi
?WritePrefix@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::WritePrefix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WriteZeroValue@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z
_TEXT	SEGMENT
tv88 = -12						; size = 4
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_writer$ = 8						; size = 4
?WriteZeroValue@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::WriteZeroValue, COMDAT
; _this$ = ecx

; 745  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001f	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00024	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 746  :                 writer->Write(L'0');

  00029	8b 45 08	 mov	 eax, DWORD PTR _writer$[ebp]
  0002c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00031	89 55 f8	 mov	 DWORD PTR tv69[ebp], edx
  00034	8b f4		 mov	 esi, esp
  00036	6a 30		 push	 48			; 00000030H
  00038	8b 4d 08	 mov	 ecx, DWORD PTR _writer$[ebp]
  0003b	ff 55 f8	 call	 DWORD PTR tv69[ebp]
  0003e	3b f4		 cmp	 esi, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 747  :                 if (_precision > 0)

  00045	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00048	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0004c	7e 34		 jle	 SHORT $LN1@WriteZeroV

; 748  :                 {
; 749  :                     writer->Write(_number_format_info->Number.DecimalSeparator);

  0004e	8b 4d 08	 mov	 ecx, DWORD PTR _writer$[ebp]
  00051	8b 11		 mov	 edx, DWORD PTR [ecx]
  00053	8b 02		 mov	 eax, DWORD PTR [edx]
  00055	89 45 f4	 mov	 DWORD PTR tv88[ebp], eax
  00058	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0005e	83 c2 6c	 add	 edx, 108		; 0000006cH
  00061	8b f4		 mov	 esi, esp
  00063	52		 push	 edx
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _writer$[ebp]
  00067	ff 55 f4	 call	 DWORD PTR tv88[ebp]
  0006a	3b f4		 cmp	 esi, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 750  :                     writer->Write(L'0', _precision);

  00071	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00077	51		 push	 ecx
  00078	6a 30		 push	 48			; 00000030H
  0007a	8b 4d 08	 mov	 ecx, DWORD PTR _writer$[ebp]
  0007d	e8 00 00 00 00	 call	 ?Write@StringWriter@Internal@Core@Math@Palmtree@@QAEX_WI@Z ; Palmtree::Math::Core::Internal::StringWriter::Write
$LN1@WriteZeroV:

; 751  :                 }
; 752  :             }

  00082	5e		 pop	 esi
  00083	83 c4 0c	 add	 esp, 12			; 0000000cH
  00086	3b ec		 cmp	 ebp, esp
  00088	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c2 04 00	 ret	 4
?WriteZeroValue@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::WriteZeroValue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?GetDefaultPrecisionValue@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDefaultPrecisionValue@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::GetDefaultPrecisionValue, COMDAT
; _this$ = ecx

; 740  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 741  :                 return (_number_format_info->Number.DecimalDigits);

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0001e	8b 41 68	 mov	 eax, DWORD PTR [ecx+104]

; 742  :             }

  00021	83 c4 04	 add	 esp, 4
  00024	3b ec		 cmp	 ebp, esp
  00026	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
?GetDefaultPrecisionValue@FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::GetDefaultPrecisionValue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ??0FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@HPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_precision$ = 8						; size = 4
_number_format_info$ = 12				; size = 4
??0FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@HPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::FormatterTypeN, COMDAT
; _this$ = ecx

; 735  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 734  :                 : Formatter(L'N', precision, number_format_info)

  00018	8b 45 0c	 mov	 eax, DWORD PTR _number_format_info$[ebp]
  0001b	50		 push	 eax
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _precision$[ebp]
  0001f	51		 push	 ecx
  00020	6a 4e		 push	 78			; 0000004eH
  00022	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	e8 00 00 00 00	 call	 ??0Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@IAE@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::Formatter

; 735  :             {

  0002a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002d	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@

; 736  :             }

  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	83 c4 04	 add	 esp, 4
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
??0FormatterTypeN@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@HPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeN::FormatterTypeN
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WriteSuffix@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x_sign$ = 8						; size = 1
_writer$ = 12						; size = 4
?WriteSuffix@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::WriteSuffix, COMDAT
; _this$ = ecx

; 725  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 726  :             }

  00018	83 c4 04	 add	 esp, 4
  0001b	3b ec		 cmp	 ebp, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
?WriteSuffix@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::WriteSuffix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?FormatNumberSequence@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
_TEXT	SEGMENT
tv88 = -12						; size = 4
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_number_sequence_str$ = 8				; size = 4
_writer$ = 12						; size = 4
?FormatNumberSequence@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::FormatNumberSequence, COMDAT
; _this$ = ecx

; 715  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001f	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00024	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 716  :                 writer->Write(number_sequence_str);

  00029	8b 45 0c	 mov	 eax, DWORD PTR _writer$[ebp]
  0002c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00030	89 55 f8	 mov	 DWORD PTR tv69[ebp], edx
  00033	8b f4		 mov	 esi, esp
  00035	8b 45 08	 mov	 eax, DWORD PTR _number_sequence_str$[ebp]
  00038	50		 push	 eax
  00039	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0003c	ff 55 f8	 call	 DWORD PTR tv69[ebp]
  0003f	3b f4		 cmp	 esi, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 717  :                 if (_precision > 0)

  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  0004d	7e 34		 jle	 SHORT $LN1@FormatNumb

; 718  :                 {
; 719  :                     writer->Write(_number_format_info->Number.DecimalSeparator);

  0004f	8b 55 0c	 mov	 edx, DWORD PTR _writer$[ebp]
  00052	8b 02		 mov	 eax, DWORD PTR [edx]
  00054	8b 08		 mov	 ecx, DWORD PTR [eax]
  00056	89 4d f4	 mov	 DWORD PTR tv88[ebp], ecx
  00059	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005c	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0005f	83 c0 6c	 add	 eax, 108		; 0000006cH
  00062	8b f4		 mov	 esi, esp
  00064	50		 push	 eax
  00065	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00068	ff 55 f4	 call	 DWORD PTR tv88[ebp]
  0006b	3b f4		 cmp	 esi, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 720  :                     writer->Write(L'0', _precision);

  00072	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00078	52		 push	 edx
  00079	6a 30		 push	 48			; 00000030H
  0007b	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0007e	e8 00 00 00 00	 call	 ?Write@StringWriter@Internal@Core@Math@Palmtree@@QAEX_WI@Z ; Palmtree::Math::Core::Internal::StringWriter::Write
$LN1@FormatNumb:

; 721  :                 }
; 722  :             }

  00083	5e		 pop	 esi
  00084	83 c4 0c	 add	 esp, 12			; 0000000cH
  00087	3b ec		 cmp	 ebp, esp
  00089	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 08 00	 ret	 8
?FormatNumberSequence@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::FormatNumberSequence
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WritePrefix@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
_TEXT	SEGMENT
tv77 = -8						; size = 4
_this$ = -4						; size = 4
_x_sign$ = 8						; size = 1
_writer$ = 12						; size = 4
?WritePrefix@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::WritePrefix, COMDAT
; _this$ = ecx

; 709  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00018	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  0001d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 710  :                 if (x_sign < 0)

  00022	0f be 45 08	 movsx	 eax, BYTE PTR _x_sign$[ebp]
  00026	85 c0		 test	 eax, eax
  00028	7d 26		 jge	 SHORT $LN1@WritePrefi

; 711  :                     writer->Write(_number_format_info->NegativeSign);

  0002a	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0002d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002f	8b 02		 mov	 eax, DWORD PTR [edx]
  00031	89 45 f8	 mov	 DWORD PTR tv77[ebp], eax
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0003a	81 c2 5a 01 00
	00		 add	 edx, 346		; 0000015aH
  00040	8b f4		 mov	 esi, esp
  00042	52		 push	 edx
  00043	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00046	ff 55 f8	 call	 DWORD PTR tv77[ebp]
  00049	3b f4		 cmp	 esi, esp
  0004b	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@WritePrefi:

; 712  :             }

  00050	5e		 pop	 esi
  00051	83 c4 08	 add	 esp, 8
  00054	3b ec		 cmp	 ebp, esp
  00056	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c2 08 00	 ret	 8
?WritePrefix@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::WritePrefix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WriteZeroValue@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z
_TEXT	SEGMENT
tv88 = -12						; size = 4
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_writer$ = 8						; size = 4
?WriteZeroValue@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::WriteZeroValue, COMDAT
; _this$ = ecx

; 699  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001f	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00024	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 700  :                 writer->Write(L'0');

  00029	8b 45 08	 mov	 eax, DWORD PTR _writer$[ebp]
  0002c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00031	89 55 f8	 mov	 DWORD PTR tv69[ebp], edx
  00034	8b f4		 mov	 esi, esp
  00036	6a 30		 push	 48			; 00000030H
  00038	8b 4d 08	 mov	 ecx, DWORD PTR _writer$[ebp]
  0003b	ff 55 f8	 call	 DWORD PTR tv69[ebp]
  0003e	3b f4		 cmp	 esi, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 701  :                 if (_precision > 0)

  00045	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00048	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0004c	7e 34		 jle	 SHORT $LN1@WriteZeroV

; 702  :                 {
; 703  :                     writer->Write(_number_format_info->Number.DecimalSeparator);

  0004e	8b 4d 08	 mov	 ecx, DWORD PTR _writer$[ebp]
  00051	8b 11		 mov	 edx, DWORD PTR [ecx]
  00053	8b 02		 mov	 eax, DWORD PTR [edx]
  00055	89 45 f4	 mov	 DWORD PTR tv88[ebp], eax
  00058	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0005e	83 c2 6c	 add	 edx, 108		; 0000006cH
  00061	8b f4		 mov	 esi, esp
  00063	52		 push	 edx
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _writer$[ebp]
  00067	ff 55 f4	 call	 DWORD PTR tv88[ebp]
  0006a	3b f4		 cmp	 esi, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 704  :                     writer->Write(L'0', _precision);

  00071	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00077	51		 push	 ecx
  00078	6a 30		 push	 48			; 00000030H
  0007a	8b 4d 08	 mov	 ecx, DWORD PTR _writer$[ebp]
  0007d	e8 00 00 00 00	 call	 ?Write@StringWriter@Internal@Core@Math@Palmtree@@QAEX_WI@Z ; Palmtree::Math::Core::Internal::StringWriter::Write
$LN1@WriteZeroV:

; 705  :                 }
; 706  :             }

  00082	5e		 pop	 esi
  00083	83 c4 0c	 add	 esp, 12			; 0000000cH
  00086	3b ec		 cmp	 ebp, esp
  00088	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c2 04 00	 ret	 4
?WriteZeroValue@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::WriteZeroValue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?GetDefaultPrecisionValue@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDefaultPrecisionValue@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::GetDefaultPrecisionValue, COMDAT
; _this$ = ecx

; 694  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 695  :                 return (_number_format_info->Number.DecimalDigits);

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0001e	8b 41 68	 mov	 eax, DWORD PTR [ecx+104]

; 696  :             }

  00021	83 c4 04	 add	 esp, 4
  00024	3b ec		 cmp	 ebp, esp
  00026	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
?GetDefaultPrecisionValue@FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::GetDefaultPrecisionValue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ??0FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@HPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_precision$ = 8						; size = 4
_number_format_info$ = 12				; size = 4
??0FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@HPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::FormatterTypeF, COMDAT
; _this$ = ecx

; 689  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 688  :                 : Formatter(L'F', precision, number_format_info)

  00018	8b 45 0c	 mov	 eax, DWORD PTR _number_format_info$[ebp]
  0001b	50		 push	 eax
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _precision$[ebp]
  0001f	51		 push	 ecx
  00020	6a 46		 push	 70			; 00000046H
  00022	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	e8 00 00 00 00	 call	 ??0Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@IAE@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::Formatter

; 689  :             {

  0002a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002d	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@

; 690  :             }

  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	83 c4 04	 add	 esp, 4
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
??0FormatterTypeF@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@HPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeF::FormatterTypeF
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WriteSuffix@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x_sign$ = 8						; size = 1
_writer$ = 12						; size = 4
?WriteSuffix@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::WriteSuffix, COMDAT
; _this$ = ecx

; 679  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 680  :             }

  00018	83 c4 04	 add	 esp, 4
  0001b	3b ec		 cmp	 ebp, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
?WriteSuffix@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::WriteSuffix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?FormatNumberSequence@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
_TEXT	SEGMENT
tv180 = -96						; size = 4
tv168 = -92						; size = 4
tv156 = -88						; size = 4
tv143 = -82						; size = 2
tv145 = -80						; size = 4
tv95 = -76						; size = 4
tv74 = -70						; size = 2
tv76 = -68						; size = 4
_exp_buf$ = -60						; size = 22
_exponential_part$ = -32				; size = 4
_count$1 = -28						; size = 4
_reader$ = -20						; size = 8
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_number_sequence_str$ = 8				; size = 4
_writer$ = 12						; size = 4
?FormatNumberSequence@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::FormatNumberSequence, COMDAT
; _this$ = ecx

; 649  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	51		 push	 ecx
  00009	8d 7d a0	 lea	 edi, DWORD PTR [ebp-96]
  0000c	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	59		 pop	 ecx
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00023	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00026	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  0002b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 650  :                 StringReader reader(number_sequence_str);

  00030	8b 45 08	 mov	 eax, DWORD PTR _number_sequence_str$[ebp]
  00033	50		 push	 eax
  00034	8d 4d ec	 lea	 ecx, DWORD PTR _reader$[ebp]
  00037	e8 00 00 00 00	 call	 ??0StringReader@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::StringReader::StringReader

; 651  :                 writer->Write(reader.ReadChar(L'0'));

  0003c	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0003f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00041	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00044	89 45 bc	 mov	 DWORD PTR tv76[ebp], eax
  00047	6a 30		 push	 48			; 00000030H
  00049	8d 4d ec	 lea	 ecx, DWORD PTR _reader$[ebp]
  0004c	e8 00 00 00 00	 call	 ?ReadChar@StringReader@Internal@Core@Math@Palmtree@@QAE_W_W@Z ; Palmtree::Math::Core::Internal::StringReader::ReadChar
  00051	66 89 45 ba	 mov	 WORD PTR tv74[ebp], ax
  00055	8b f4		 mov	 esi, esp
  00057	0f b7 4d ba	 movzx	 ecx, WORD PTR tv74[ebp]
  0005b	51		 push	 ecx
  0005c	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0005f	ff 55 bc	 call	 DWORD PTR tv76[ebp]
  00062	3b f4		 cmp	 esi, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 652  :                 if (_precision > 0)

  00069	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0006c	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  00070	7e 6c		 jle	 SHORT $LN5@FormatNumb

; 653  :                 {
; 654  :                     writer->Write(_number_format_info->Number.DecimalSeparator);

  00072	8b 45 0c	 mov	 eax, DWORD PTR _writer$[ebp]
  00075	8b 08		 mov	 ecx, DWORD PTR [eax]
  00077	8b 11		 mov	 edx, DWORD PTR [ecx]
  00079	89 55 b4	 mov	 DWORD PTR tv95[ebp], edx
  0007c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00082	83 c1 6c	 add	 ecx, 108		; 0000006cH
  00085	8b f4		 mov	 esi, esp
  00087	51		 push	 ecx
  00088	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0008b	ff 55 b4	 call	 DWORD PTR tv95[ebp]
  0008e	3b f4		 cmp	 esi, esp
  00090	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 655  :                     for (int count = _precision; count > 0; --count)

  00095	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00098	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0009b	89 45 e4	 mov	 DWORD PTR _count$1[ebp], eax
  0009e	eb 09		 jmp	 SHORT $LN4@FormatNumb
$LN2@FormatNumb:
  000a0	8b 4d e4	 mov	 ecx, DWORD PTR _count$1[ebp]
  000a3	83 e9 01	 sub	 ecx, 1
  000a6	89 4d e4	 mov	 DWORD PTR _count$1[ebp], ecx
$LN4@FormatNumb:
  000a9	83 7d e4 00	 cmp	 DWORD PTR _count$1[ebp], 0
  000ad	7e 2f		 jle	 SHORT $LN5@FormatNumb

; 656  :                         writer->Write(reader.ReadChar(L'0'));

  000af	8b 55 0c	 mov	 edx, DWORD PTR _writer$[ebp]
  000b2	8b 02		 mov	 eax, DWORD PTR [edx]
  000b4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000b7	89 4d b0	 mov	 DWORD PTR tv145[ebp], ecx
  000ba	6a 30		 push	 48			; 00000030H
  000bc	8d 4d ec	 lea	 ecx, DWORD PTR _reader$[ebp]
  000bf	e8 00 00 00 00	 call	 ?ReadChar@StringReader@Internal@Core@Math@Palmtree@@QAE_W_W@Z ; Palmtree::Math::Core::Internal::StringReader::ReadChar
  000c4	66 89 45 ae	 mov	 WORD PTR tv143[ebp], ax
  000c8	8b f4		 mov	 esi, esp
  000ca	0f b7 55 ae	 movzx	 edx, WORD PTR tv143[ebp]
  000ce	52		 push	 edx
  000cf	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  000d2	ff 55 b0	 call	 DWORD PTR tv145[ebp]
  000d5	3b f4		 cmp	 esi, esp
  000d7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000dc	eb c2		 jmp	 SHORT $LN2@FormatNumb
$LN5@FormatNumb:

; 657  :                 }
; 658  :                 writer->Write(_format_type);

  000de	8b 45 0c	 mov	 eax, DWORD PTR _writer$[ebp]
  000e1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e3	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000e6	89 55 a8	 mov	 DWORD PTR tv156[ebp], edx
  000e9	8b f4		 mov	 esi, esp
  000eb	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000ee	0f b7 48 0c	 movzx	 ecx, WORD PTR [eax+12]
  000f2	51		 push	 ecx
  000f3	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  000f6	ff 55 a8	 call	 DWORD PTR tv156[ebp]
  000f9	3b f4		 cmp	 esi, esp
  000fb	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 659  :                 writer->Write(_number_format_info->PositiveSign);

  00100	8b 55 0c	 mov	 edx, DWORD PTR _writer$[ebp]
  00103	8b 02		 mov	 eax, DWORD PTR [edx]
  00105	8b 08		 mov	 ecx, DWORD PTR [eax]
  00107	89 4d a4	 mov	 DWORD PTR tv168[ebp], ecx
  0010a	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0010d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00110	05 7c 01 00 00	 add	 eax, 380		; 0000017cH
  00115	8b f4		 mov	 esi, esp
  00117	50		 push	 eax
  00118	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0011b	ff 55 a4	 call	 DWORD PTR tv168[ebp]
  0011e	3b f4		 cmp	 esi, esp
  00120	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 660  :                 size_t exponential_part = lstrlenW(number_sequence_str) - 1;

  00125	8b f4		 mov	 esi, esp
  00127	8b 4d 08	 mov	 ecx, DWORD PTR _number_sequence_str$[ebp]
  0012a	51		 push	 ecx
  0012b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  00131	3b f4		 cmp	 esi, esp
  00133	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00138	83 e8 01	 sub	 eax, 1
  0013b	89 45 e0	 mov	 DWORD PTR _exponential_part$[ebp], eax

; 661  : 
; 662  :                 // 指数部を文字列化するために必要な領域の大きさについて
; 663  :                 // sizeof(w_char_t) == 2 であるため、アドレス空間が 64bit の環境における指数部の論理的な上限値は 2^63 (^はべき乗演算子)
; 664  :                 // なので、指数部を10進数表記した場合の論理的な桁数の上限値は ceil(63 * log(2) / log(10)) ==> 19 となる。
; 665  :                 // 同様に、32bit アドレス空間においては、指数部桁数の論理的上限値は ceil(31 * log(2) / log(10)) ==> 10 となる。
; 666  : 
; 667  : #ifdef _M_IX86 
; 668  :                 wchar_t exp_buf[10 + 1];
; 669  : #elif defined(_M_X64)
; 670  :                 wchar_t exp_buf[19 + 1];
; 671  : #else
; 672  : #error unknown platform
; 673  : #endif
; 674  :                 wsprintfW(exp_buf, L"%03d", exponential_part);

  0013e	8b f4		 mov	 esi, esp
  00140	8b 55 e0	 mov	 edx, DWORD PTR _exponential_part$[ebp]
  00143	52		 push	 edx
  00144	68 00 00 00 00	 push	 OFFSET ??_C@_19GGGBJDH@?$AA?$CF?$AA0?$AA3?$AAd@
  00149	8d 45 c4	 lea	 eax, DWORD PTR _exp_buf$[ebp]
  0014c	50		 push	 eax
  0014d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wsprintfW
  00153	83 c4 0c	 add	 esp, 12			; 0000000cH
  00156	3b f4		 cmp	 esi, esp
  00158	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 675  :                 writer->Write(exp_buf);

  0015d	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00160	8b 11		 mov	 edx, DWORD PTR [ecx]
  00162	8b 02		 mov	 eax, DWORD PTR [edx]
  00164	89 45 a0	 mov	 DWORD PTR tv180[ebp], eax
  00167	8b f4		 mov	 esi, esp
  00169	8d 4d c4	 lea	 ecx, DWORD PTR _exp_buf$[ebp]
  0016c	51		 push	 ecx
  0016d	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00170	ff 55 a0	 call	 DWORD PTR tv180[ebp]
  00173	3b f4		 cmp	 esi, esp
  00175	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 676  :             }

  0017a	52		 push	 edx
  0017b	8b cd		 mov	 ecx, ebp
  0017d	50		 push	 eax
  0017e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@FormatNumb
  00184	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00189	58		 pop	 eax
  0018a	5a		 pop	 edx
  0018b	5f		 pop	 edi
  0018c	5e		 pop	 esi
  0018d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00190	33 cd		 xor	 ecx, ebp
  00192	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00197	83 c4 60	 add	 esp, 96			; 00000060H
  0019a	3b ec		 cmp	 ebp, esp
  0019c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a1	8b e5		 mov	 esp, ebp
  001a3	5d		 pop	 ebp
  001a4	c2 08 00	 ret	 8
  001a7	90		 npad	 1
$LN10@FormatNumb:
  001a8	02 00 00 00	 DD	 2
  001ac	00 00 00 00	 DD	 $LN9@FormatNumb
$LN9@FormatNumb:
  001b0	ec ff ff ff	 DD	 -20			; ffffffecH
  001b4	08 00 00 00	 DD	 8
  001b8	00 00 00 00	 DD	 $LN7@FormatNumb
  001bc	c4 ff ff ff	 DD	 -60			; ffffffc4H
  001c0	16 00 00 00	 DD	 22			; 00000016H
  001c4	00 00 00 00	 DD	 $LN8@FormatNumb
$LN8@FormatNumb:
  001c8	65		 DB	 101			; 00000065H
  001c9	78		 DB	 120			; 00000078H
  001ca	70		 DB	 112			; 00000070H
  001cb	5f		 DB	 95			; 0000005fH
  001cc	62		 DB	 98			; 00000062H
  001cd	75		 DB	 117			; 00000075H
  001ce	66		 DB	 102			; 00000066H
  001cf	00		 DB	 0
$LN7@FormatNumb:
  001d0	72		 DB	 114			; 00000072H
  001d1	65		 DB	 101			; 00000065H
  001d2	61		 DB	 97			; 00000061H
  001d3	64		 DB	 100			; 00000064H
  001d4	65		 DB	 101			; 00000065H
  001d5	72		 DB	 114			; 00000072H
  001d6	00		 DB	 0
?FormatNumberSequence@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::FormatNumberSequence
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WritePrefix@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
_TEXT	SEGMENT
tv77 = -8						; size = 4
_this$ = -4						; size = 4
_x_sign$ = 8						; size = 1
_writer$ = 12						; size = 4
?WritePrefix@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::WritePrefix, COMDAT
; _this$ = ecx

; 643  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00018	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  0001d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 644  :                 if (x_sign < 0)

  00022	0f be 45 08	 movsx	 eax, BYTE PTR _x_sign$[ebp]
  00026	85 c0		 test	 eax, eax
  00028	7d 26		 jge	 SHORT $LN1@WritePrefi

; 645  :                     writer->Write(_number_format_info->NegativeSign);

  0002a	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0002d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002f	8b 02		 mov	 eax, DWORD PTR [edx]
  00031	89 45 f8	 mov	 DWORD PTR tv77[ebp], eax
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0003a	81 c2 5a 01 00
	00		 add	 edx, 346		; 0000015aH
  00040	8b f4		 mov	 esi, esp
  00042	52		 push	 edx
  00043	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00046	ff 55 f8	 call	 DWORD PTR tv77[ebp]
  00049	3b f4		 cmp	 esi, esp
  0004b	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@WritePrefi:

; 646  :             }

  00050	5e		 pop	 esi
  00051	83 c4 08	 add	 esp, 8
  00054	3b ec		 cmp	 ebp, esp
  00056	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c2 08 00	 ret	 8
?WritePrefix@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::WritePrefix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?FormatInternally@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z
_TEXT	SEGMENT
tv158 = -64						; size = 8
tv149 = -56						; size = 4
_x2$2 = -52						; size = 4
_fraction_number$3 = -48				; size = 4
_digit_count$ = -44					; size = 4
_root$ = -36						; size = 16
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_x_abs$ = 8						; size = 4
_writer$ = 12						; size = 4
?FormatInternally@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::FormatInternally, COMDAT
; _this$ = ecx

; 627  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?FormatInternally@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 34	 sub	 esp, 52			; 00000034H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	51		 push	 ecx
  00017	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  0001a	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	59		 pop	 ecx
  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002c	33 c5		 xor	 eax, ebp
  0002e	50		 push	 eax
  0002f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00032	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00038	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0003b	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00040	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 628  :                 ResourceHolderUINT root;

  00045	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00048	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  0004d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 629  :                 size_t digit_count = (size_t)floor(PMC_Floor_Log10_Imp(x_abs)) + 1;

  00054	8b 45 08	 mov	 eax, DWORD PTR _x_abs$[ebp]
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ?PMC_Floor_Log10_Imp@Internal@Core@Math@Palmtree@@YAIPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::PMC_Floor_Log10_Imp
  0005d	83 c4 04	 add	 esp, 4
  00060	89 45 c8	 mov	 DWORD PTR tv149[ebp], eax
  00063	f2 0f 2a 45 c8	 cvtsi2sd xmm0, DWORD PTR tv149[ebp]
  00068	8b 4d c8	 mov	 ecx, DWORD PTR tv149[ebp]
  0006b	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0006e	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  00077	8b f4		 mov	 esi, esp
  00079	83 ec 08	 sub	 esp, 8
  0007c	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00081	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__floor
  00087	83 c4 08	 add	 esp, 8
  0008a	3b f4		 cmp	 esi, esp
  0008c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00091	dd 5d c0	 fstp	 QWORD PTR tv158[ebp]
  00094	f2 0f 10 45 c0	 movsd	 xmm0, QWORD PTR tv158[ebp]
  00099	e8 00 00 00 00	 call	 __dtoui3
  0009e	83 c0 01	 add	 eax, 1
  000a1	89 45 d4	 mov	 DWORD PTR _digit_count$[ebp], eax

; 630  :                 if (digit_count >= (size_t)(_precision + 2))

  000a4	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000a7	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000aa	83 c0 02	 add	 eax, 2
  000ad	39 45 d4	 cmp	 DWORD PTR _digit_count$[ebp], eax
  000b0	72 57		 jb	 SHORT $LN2@FormatInte

; 631  :                 {
; 632  :                     NUMBER_HEADER* fraction_number = PMC_TimesOfExponentOf10_Imp(5, digit_count - _precision - 2);

  000b2	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000b5	8b 55 d4	 mov	 edx, DWORD PTR _digit_count$[ebp]
  000b8	2b 51 10	 sub	 edx, DWORD PTR [ecx+16]
  000bb	83 ea 02	 sub	 edx, 2
  000be	52		 push	 edx
  000bf	6a 05		 push	 5
  000c1	e8 00 00 00 00	 call	 ?PMC_TimesOfExponentOf10_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@II@Z ; Palmtree::Math::Core::Internal::PMC_TimesOfExponentOf10_Imp
  000c6	83 c4 08	 add	 esp, 8
  000c9	89 45 d0	 mov	 DWORD PTR _fraction_number$3[ebp], eax

; 633  :                     root.HookNumber(fraction_number);

  000cc	8b 45 d0	 mov	 eax, DWORD PTR _fraction_number$3[ebp]
  000cf	50		 push	 eax
  000d0	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  000d3	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 634  :                     NUMBER_HEADER* x2 = PMC_Add_X_X_Imp(x_abs, fraction_number);

  000d8	8b 4d d0	 mov	 ecx, DWORD PTR _fraction_number$3[ebp]
  000db	51		 push	 ecx
  000dc	8b 55 08	 mov	 edx, DWORD PTR _x_abs$[ebp]
  000df	52		 push	 edx
  000e0	e8 00 00 00 00	 call	 ?PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z ; Palmtree::Math::Core::Internal::PMC_Add_X_X_Imp
  000e5	83 c4 08	 add	 esp, 8
  000e8	89 45 cc	 mov	 DWORD PTR _x2$2[ebp], eax

; 635  :                     root.HookNumber(x2);

  000eb	8b 45 cc	 mov	 eax, DWORD PTR _x2$2[ebp]
  000ee	50		 push	 eax
  000ef	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  000f2	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 636  :                     Formatter::FormatInternally(x2, writer);

  000f7	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  000fa	51		 push	 ecx
  000fb	8b 55 cc	 mov	 edx, DWORD PTR _x2$2[ebp]
  000fe	52		 push	 edx
  000ff	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00102	e8 00 00 00 00	 call	 ?FormatInternally@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::FormatInternally

; 637  :                 }
; 638  :                 else

  00107	eb 10		 jmp	 SHORT $LN3@FormatInte
$LN2@FormatInte:

; 639  :                     Formatter::FormatInternally(x_abs, writer);

  00109	8b 45 0c	 mov	 eax, DWORD PTR _writer$[ebp]
  0010c	50		 push	 eax
  0010d	8b 4d 08	 mov	 ecx, DWORD PTR _x_abs$[ebp]
  00110	51		 push	 ecx
  00111	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00114	e8 00 00 00 00	 call	 ?FormatInternally@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::FormatInternally
$LN3@FormatInte:

; 640  :             }

  00119	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00120	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00123	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00128	52		 push	 edx
  00129	8b cd		 mov	 ecx, ebp
  0012b	50		 push	 eax
  0012c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@FormatInte
  00132	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00137	58		 pop	 eax
  00138	5a		 pop	 edx
  00139	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0013c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00143	59		 pop	 ecx
  00144	5f		 pop	 edi
  00145	5e		 pop	 esi
  00146	83 c4 40	 add	 esp, 64			; 00000040H
  00149	3b ec		 cmp	 ebp, esp
  0014b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00150	8b e5		 mov	 esp, ebp
  00152	5d		 pop	 ebp
  00153	c2 08 00	 ret	 8
  00156	66 90		 npad	 2
$LN9@FormatInte:
  00158	01 00 00 00	 DD	 1
  0015c	00 00 00 00	 DD	 $LN8@FormatInte
$LN8@FormatInte:
  00160	dc ff ff ff	 DD	 -36			; ffffffdcH
  00164	10 00 00 00	 DD	 16			; 00000010H
  00168	00 00 00 00	 DD	 $LN6@FormatInte
$LN6@FormatInte:
  0016c	72		 DB	 114			; 00000072H
  0016d	6f		 DB	 111			; 0000006fH
  0016e	6f		 DB	 111			; 0000006fH
  0016f	74		 DB	 116			; 00000074H
  00170	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?FormatInternally@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?FormatInternally@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a c0	 mov	 ecx, DWORD PTR [edx-64]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?FormatInternally@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?FormatInternally@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::FormatInternally
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WriteZeroValue@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z
_TEXT	SEGMENT
tv145 = -20						; size = 4
tv139 = -16						; size = 4
tv88 = -12						; size = 4
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_writer$ = 8						; size = 4
?WriteZeroValue@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::WriteZeroValue, COMDAT
; _this$ = ecx

; 615  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00012	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00015	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00018	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 616  :                 writer->Write(L'0');

  00028	8b 45 08	 mov	 eax, DWORD PTR _writer$[ebp]
  0002b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00030	89 55 f8	 mov	 DWORD PTR tv69[ebp], edx
  00033	8b f4		 mov	 esi, esp
  00035	6a 30		 push	 48			; 00000030H
  00037	8b 4d 08	 mov	 ecx, DWORD PTR _writer$[ebp]
  0003a	ff 55 f8	 call	 DWORD PTR tv69[ebp]
  0003d	3b f4		 cmp	 esi, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 617  :                 if (_precision > 0)

  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0004b	7e 34		 jle	 SHORT $LN2@WriteZeroV

; 618  :                 {
; 619  :                     writer->Write(_number_format_info->Number.DecimalSeparator);

  0004d	8b 4d 08	 mov	 ecx, DWORD PTR _writer$[ebp]
  00050	8b 11		 mov	 edx, DWORD PTR [ecx]
  00052	8b 02		 mov	 eax, DWORD PTR [edx]
  00054	89 45 f4	 mov	 DWORD PTR tv88[ebp], eax
  00057	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0005d	83 c2 6c	 add	 edx, 108		; 0000006cH
  00060	8b f4		 mov	 esi, esp
  00062	52		 push	 edx
  00063	8b 4d 08	 mov	 ecx, DWORD PTR _writer$[ebp]
  00066	ff 55 f4	 call	 DWORD PTR tv88[ebp]
  00069	3b f4		 cmp	 esi, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 620  :                     writer->Write(L'0', _precision);

  00070	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00073	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00076	51		 push	 ecx
  00077	6a 30		 push	 48			; 00000030H
  00079	8b 4d 08	 mov	 ecx, DWORD PTR _writer$[ebp]
  0007c	e8 00 00 00 00	 call	 ?Write@StringWriter@Internal@Core@Math@Palmtree@@QAEX_WI@Z ; Palmtree::Math::Core::Internal::StringWriter::Write
$LN2@WriteZeroV:

; 621  :                 }
; 622  :                 writer->Write(_format_type);

  00081	8b 55 08	 mov	 edx, DWORD PTR _writer$[ebp]
  00084	8b 02		 mov	 eax, DWORD PTR [edx]
  00086	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00089	89 4d f0	 mov	 DWORD PTR tv139[ebp], ecx
  0008c	8b f4		 mov	 esi, esp
  0008e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00091	0f b7 42 0c	 movzx	 eax, WORD PTR [edx+12]
  00095	50		 push	 eax
  00096	8b 4d 08	 mov	 ecx, DWORD PTR _writer$[ebp]
  00099	ff 55 f0	 call	 DWORD PTR tv139[ebp]
  0009c	3b f4		 cmp	 esi, esp
  0009e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 623  :                 writer->Write(L"+000");

  000a3	8b 4d 08	 mov	 ecx, DWORD PTR _writer$[ebp]
  000a6	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a8	8b 02		 mov	 eax, DWORD PTR [edx]
  000aa	89 45 ec	 mov	 DWORD PTR tv145[ebp], eax
  000ad	8b f4		 mov	 esi, esp
  000af	68 00 00 00 00	 push	 OFFSET ??_C@_19NKFEMDNP@?$AA?$CL?$AA0?$AA0?$AA0@
  000b4	8b 4d 08	 mov	 ecx, DWORD PTR _writer$[ebp]
  000b7	ff 55 ec	 call	 DWORD PTR tv145[ebp]
  000ba	3b f4		 cmp	 esi, esp
  000bc	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 624  :             }

  000c1	5e		 pop	 esi
  000c2	83 c4 14	 add	 esp, 20			; 00000014H
  000c5	3b ec		 cmp	 ebp, esp
  000c7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c2 04 00	 ret	 4
?WriteZeroValue@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::WriteZeroValue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?GetDefaultPrecisionValue@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDefaultPrecisionValue@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::GetDefaultPrecisionValue, COMDAT
; _this$ = ecx

; 610  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 611  :                 return (6);

  00018	b8 06 00 00 00	 mov	 eax, 6

; 612  :             }

  0001d	83 c4 04	 add	 esp, 4
  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
?GetDefaultPrecisionValue@FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::GetDefaultPrecisionValue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ??0FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_format_type$ = 8					; size = 2
_precision$ = 12					; size = 4
_number_format_info$ = 16				; size = 4
??0FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::FormatterTypeE, COMDAT
; _this$ = ecx

; 605  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 604  :                 : Formatter(format_type, precision, number_format_info)

  00018	8b 45 10	 mov	 eax, DWORD PTR _number_format_info$[ebp]
  0001b	50		 push	 eax
  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR _precision$[ebp]
  0001f	51		 push	 ecx
  00020	0f b7 55 08	 movzx	 edx, WORD PTR _format_type$[ebp]
  00024	52		 push	 edx
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ??0Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@IAE@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::Formatter

; 605  :             {

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@

; 606  :             }

  00036	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00039	83 c4 04	 add	 esp, 4
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 0c 00	 ret	 12			; 0000000cH
??0FormatterTypeE@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeE::FormatterTypeE
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WriteSuffix@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x_sign$ = 8						; size = 1
_writer$ = 12						; size = 4
?WriteSuffix@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::WriteSuffix, COMDAT
; _this$ = ecx

; 595  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 596  :             }

  00018	83 c4 04	 add	 esp, 4
  0001b	3b ec		 cmp	 ebp, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
?WriteSuffix@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::WriteSuffix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?FormatNumberSequence@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
_TEXT	SEGMENT
tv89 = -12						; size = 4
tv81 = -8						; size = 4
_this$ = -4						; size = 4
_number_sequence_str$ = 8				; size = 4
_writer$ = 12						; size = 4
?FormatNumberSequence@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::FormatNumberSequence, COMDAT
; _this$ = ecx

; 589  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001f	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00024	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 590  :                 writer->Write(L'0', _precision > lstrlenW(number_sequence_str) ? _precision - lstrlenW(number_sequence_str) : 0);

  00029	8b f4		 mov	 esi, esp
  0002b	8b 45 08	 mov	 eax, DWORD PTR _number_sequence_str$[ebp]
  0002e	50		 push	 eax
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  00035	3b f4		 cmp	 esi, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  00042	7e 20		 jle	 SHORT $LN3@FormatNumb
  00044	8b f4		 mov	 esi, esp
  00046	8b 55 08	 mov	 edx, DWORD PTR _number_sequence_str$[ebp]
  00049	52		 push	 edx
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  00050	3b f4		 cmp	 esi, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0005d	2b d0		 sub	 edx, eax
  0005f	89 55 f8	 mov	 DWORD PTR tv81[ebp], edx
  00062	eb 07		 jmp	 SHORT $LN4@FormatNumb
$LN3@FormatNumb:
  00064	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$LN4@FormatNumb:
  0006b	8b 45 f8	 mov	 eax, DWORD PTR tv81[ebp]
  0006e	50		 push	 eax
  0006f	6a 30		 push	 48			; 00000030H
  00071	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00074	e8 00 00 00 00	 call	 ?Write@StringWriter@Internal@Core@Math@Palmtree@@QAEX_WI@Z ; Palmtree::Math::Core::Internal::StringWriter::Write

; 591  :                 writer->Write(number_sequence_str);

  00079	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0007c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0007e	8b 02		 mov	 eax, DWORD PTR [edx]
  00080	89 45 f4	 mov	 DWORD PTR tv89[ebp], eax
  00083	8b f4		 mov	 esi, esp
  00085	8b 4d 08	 mov	 ecx, DWORD PTR _number_sequence_str$[ebp]
  00088	51		 push	 ecx
  00089	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0008c	ff 55 f4	 call	 DWORD PTR tv89[ebp]
  0008f	3b f4		 cmp	 esi, esp
  00091	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 592  :             }

  00096	5e		 pop	 esi
  00097	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009a	3b ec		 cmp	 ebp, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c2 08 00	 ret	 8
?FormatNumberSequence@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::FormatNumberSequence
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WritePrefix@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
_TEXT	SEGMENT
tv77 = -8						; size = 4
_this$ = -4						; size = 4
_x_sign$ = 8						; size = 1
_writer$ = 12						; size = 4
?WritePrefix@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::WritePrefix, COMDAT
; _this$ = ecx

; 583  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00018	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  0001d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 584  :                 if (x_sign < 0)

  00022	0f be 45 08	 movsx	 eax, BYTE PTR _x_sign$[ebp]
  00026	85 c0		 test	 eax, eax
  00028	7d 26		 jge	 SHORT $LN1@WritePrefi

; 585  :                     writer->Write(_number_format_info->NegativeSign);

  0002a	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0002d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002f	8b 02		 mov	 eax, DWORD PTR [edx]
  00031	89 45 f8	 mov	 DWORD PTR tv77[ebp], eax
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0003a	81 c2 5a 01 00
	00		 add	 edx, 346		; 0000015aH
  00040	8b f4		 mov	 esi, esp
  00042	52		 push	 edx
  00043	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00046	ff 55 f8	 call	 DWORD PTR tv77[ebp]
  00049	3b f4		 cmp	 esi, esp
  0004b	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@WritePrefi:

; 586  :             }

  00050	5e		 pop	 esi
  00051	83 c4 08	 add	 esp, 8
  00054	3b ec		 cmp	 ebp, esp
  00056	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c2 08 00	 ret	 8
?WritePrefix@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::WritePrefix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WriteZeroValue@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z
_TEXT	SEGMENT
tv76 = -8						; size = 4
_this$ = -4						; size = 4
_writer$ = 8						; size = 4
?WriteZeroValue@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::WriteZeroValue, COMDAT
; _this$ = ecx

; 578  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 579  :                 writer->Write(L'0', _precision < 1 ? 1 : _precision);

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	83 78 10 01	 cmp	 DWORD PTR [eax+16], 1
  00028	7d 09		 jge	 SHORT $LN3@WriteZeroV
  0002a	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv76[ebp], 1
  00031	eb 09		 jmp	 SHORT $LN4@WriteZeroV
$LN3@WriteZeroV:
  00033	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00039	89 55 f8	 mov	 DWORD PTR tv76[ebp], edx
$LN4@WriteZeroV:
  0003c	8b 45 f8	 mov	 eax, DWORD PTR tv76[ebp]
  0003f	50		 push	 eax
  00040	6a 30		 push	 48			; 00000030H
  00042	8b 4d 08	 mov	 ecx, DWORD PTR _writer$[ebp]
  00045	e8 00 00 00 00	 call	 ?Write@StringWriter@Internal@Core@Math@Palmtree@@QAEX_WI@Z ; Palmtree::Math::Core::Internal::StringWriter::Write

; 580  :             }

  0004a	83 c4 08	 add	 esp, 8
  0004d	3b ec		 cmp	 ebp, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c2 04 00	 ret	 4
?WriteZeroValue@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::WriteZeroValue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?GetDefaultPrecisionValue@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDefaultPrecisionValue@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::GetDefaultPrecisionValue, COMDAT
; _this$ = ecx

; 573  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 574  :                 return (0);

  00018	33 c0		 xor	 eax, eax

; 575  :             }

  0001a	83 c4 04	 add	 esp, 4
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?GetDefaultPrecisionValue@FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::GetDefaultPrecisionValue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ??0FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@HPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_precision$ = 8						; size = 4
_number_format_info$ = 12				; size = 4
??0FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@HPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::FormatterTypeD, COMDAT
; _this$ = ecx

; 568  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 567  :                 : Formatter(L'D', precision, number_format_info)

  00018	8b 45 0c	 mov	 eax, DWORD PTR _number_format_info$[ebp]
  0001b	50		 push	 eax
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _precision$[ebp]
  0001f	51		 push	 ecx
  00020	6a 44		 push	 68			; 00000044H
  00022	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	e8 00 00 00 00	 call	 ??0Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@IAE@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::Formatter

; 568  :             {

  0002a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002d	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@

; 569  :             }

  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	83 c4 04	 add	 esp, 4
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
??0FormatterTypeD@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@HPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeD::FormatterTypeD
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WriteSuffix@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
_TEXT	SEGMENT
tv361 = -112						; size = 4
tv355 = -108						; size = 4
tv343 = -104						; size = 4
tv337 = -100						; size = 4
tv331 = -96						; size = 4
tv319 = -92						; size = 4
tv313 = -88						; size = 4
tv301 = -84						; size = 4
tv289 = -80						; size = 4
tv277 = -76						; size = 4
tv265 = -72						; size = 4
tv259 = -68						; size = 4
tv247 = -64						; size = 4
tv241 = -60						; size = 4
tv229 = -56						; size = 4
tv217 = -52						; size = 4
tv205 = -48						; size = 4
tv193 = -44						; size = 4
tv181 = -40						; size = 4
tv175 = -36						; size = 4
tv163 = -32						; size = 4
tv151 = -28						; size = 4
tv145 = -24						; size = 4
tv135 = -20						; size = 4
tv91 = -16						; size = 4
tv85 = -12						; size = 4
tv73 = -8						; size = 4
_this$ = -4						; size = 4
_x_sign$ = 8						; size = 1
_writer$ = 12						; size = 4
?WriteSuffix@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::WriteSuffix, COMDAT
; _this$ = ecx

; 479  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	51		 push	 ecx
  00009	8d 7d 90	 lea	 edi, DWORD PTR [ebp-112]
  0000c	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	59		 pop	 ecx
  00019	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001c	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00021	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 480  :                 if (x_sign >= 0)

  00026	0f be 45 08	 movsx	 eax, BYTE PTR _x_sign$[ebp]
  0002a	85 c0		 test	 eax, eax
  0002c	0f 8c 8b 00 00
	00		 jl	 $LN6@WriteSuffi

; 481  :                 {
; 482  :                     switch (_number_format_info->Currency.PositivePattern)

  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00038	8b 42 64	 mov	 eax, DWORD PTR [edx+100]
  0003b	89 45 f8	 mov	 DWORD PTR tv73[ebp], eax
  0003e	83 7d f8 01	 cmp	 DWORD PTR tv73[ebp], 1
  00042	74 08		 je	 SHORT $LN9@WriteSuffi
  00044	83 7d f8 03	 cmp	 DWORD PTR tv73[ebp], 3
  00048	74 2c		 je	 SHORT $LN11@WriteSuffi

; 483  :                     {
; 484  :                     case 0:
; 485  :                     default:
; 486  :                         break;

  0004a	eb 6c		 jmp	 SHORT $LN2@WriteSuffi
$LN9@WriteSuffi:

; 487  :                     case 1:
; 488  :                         writer->Write(_number_format_info->CurrencySymbol);

  0004c	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0004f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00051	8b 02		 mov	 eax, DWORD PTR [edx]
  00053	89 45 f4	 mov	 DWORD PTR tv85[ebp], eax
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0005c	81 c2 38 01 00
	00		 add	 edx, 312		; 00000138H
  00062	8b f4		 mov	 esi, esp
  00064	52		 push	 edx
  00065	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00068	ff 55 f4	 call	 DWORD PTR tv85[ebp]
  0006b	3b f4		 cmp	 esi, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 489  :                         break;

  00072	eb 44		 jmp	 SHORT $LN2@WriteSuffi

; 490  :                     case 2:
; 491  :                         break;

  00074	eb 42		 jmp	 SHORT $LN2@WriteSuffi
$LN11@WriteSuffi:

; 492  :                     case 3:
; 493  :                         writer->Write(L' ');

  00076	8b 45 0c	 mov	 eax, DWORD PTR _writer$[ebp]
  00079	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0007e	89 55 f0	 mov	 DWORD PTR tv91[ebp], edx
  00081	8b f4		 mov	 esi, esp
  00083	6a 20		 push	 32			; 00000020H
  00085	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00088	ff 55 f0	 call	 DWORD PTR tv91[ebp]
  0008b	3b f4		 cmp	 esi, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 494  :                         writer->Write(_number_format_info->CurrencySymbol);

  00092	8b 45 0c	 mov	 eax, DWORD PTR _writer$[ebp]
  00095	8b 08		 mov	 ecx, DWORD PTR [eax]
  00097	8b 11		 mov	 edx, DWORD PTR [ecx]
  00099	89 55 ec	 mov	 DWORD PTR tv135[ebp], edx
  0009c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000a2	81 c1 38 01 00
	00		 add	 ecx, 312		; 00000138H
  000a8	8b f4		 mov	 esi, esp
  000aa	51		 push	 ecx
  000ab	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  000ae	ff 55 ec	 call	 DWORD PTR tv135[ebp]
  000b1	3b f4		 cmp	 esi, esp
  000b3	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@WriteSuffi:

; 495  :                         break;
; 496  :                     }
; 497  :                 }
; 498  :                 else

  000b8	e9 5a 03 00 00	 jmp	 $LN1@WriteSuffi
$LN6@WriteSuffi:

; 499  :                 {
; 500  :                     switch (_number_format_info->Currency.NegativePattern)

  000bd	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000c0	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000c3	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  000c6	89 4d e8	 mov	 DWORD PTR tv145[ebp], ecx
  000c9	8b 55 e8	 mov	 edx, DWORD PTR tv145[ebp]
  000cc	83 ea 01	 sub	 edx, 1
  000cf	89 55 e8	 mov	 DWORD PTR tv145[ebp], edx
  000d2	83 7d e8 0e	 cmp	 DWORD PTR tv145[ebp], 14 ; 0000000eH
  000d6	77 0a		 ja	 SHORT $LN12@WriteSuffi
  000d8	8b 45 e8	 mov	 eax, DWORD PTR tv145[ebp]
  000db	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN29@WriteSuffi[eax*4]
$LN12@WriteSuffi:

; 501  :                     {
; 502  :                     case 0:
; 503  :                     default:
; 504  :                         writer->Write(L')');

  000e2	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  000e5	8b 11		 mov	 edx, DWORD PTR [ecx]
  000e7	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000ea	89 45 e4	 mov	 DWORD PTR tv151[ebp], eax
  000ed	8b f4		 mov	 esi, esp
  000ef	6a 29		 push	 41			; 00000029H
  000f1	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  000f4	ff 55 e4	 call	 DWORD PTR tv151[ebp]
  000f7	3b f4		 cmp	 esi, esp
  000f9	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 505  :                         break;

  000fe	e9 14 03 00 00	 jmp	 $LN1@WriteSuffi
$LN13@WriteSuffi:

; 506  :                     case 1:
; 507  :                         break;

  00103	e9 0f 03 00 00	 jmp	 $LN1@WriteSuffi
$LN14@WriteSuffi:

; 508  :                     case 2:
; 509  :                         break;

  00108	e9 0a 03 00 00	 jmp	 $LN1@WriteSuffi
$LN15@WriteSuffi:

; 510  :                     case 3:
; 511  :                         writer->Write(_number_format_info->NegativeSign);

  0010d	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00110	8b 11		 mov	 edx, DWORD PTR [ecx]
  00112	8b 02		 mov	 eax, DWORD PTR [edx]
  00114	89 45 e0	 mov	 DWORD PTR tv163[ebp], eax
  00117	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0011a	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0011d	81 c2 5a 01 00
	00		 add	 edx, 346		; 0000015aH
  00123	8b f4		 mov	 esi, esp
  00125	52		 push	 edx
  00126	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00129	ff 55 e0	 call	 DWORD PTR tv163[ebp]
  0012c	3b f4		 cmp	 esi, esp
  0012e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 512  :                         break;

  00133	e9 df 02 00 00	 jmp	 $LN1@WriteSuffi
$LN16@WriteSuffi:

; 513  :                     case 4:
; 514  :                         writer->Write(_number_format_info->CurrencySymbol);

  00138	8b 45 0c	 mov	 eax, DWORD PTR _writer$[ebp]
  0013b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0013d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0013f	89 55 dc	 mov	 DWORD PTR tv175[ebp], edx
  00142	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00145	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00148	81 c1 38 01 00
	00		 add	 ecx, 312		; 00000138H
  0014e	8b f4		 mov	 esi, esp
  00150	51		 push	 ecx
  00151	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00154	ff 55 dc	 call	 DWORD PTR tv175[ebp]
  00157	3b f4		 cmp	 esi, esp
  00159	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 515  :                         writer->Write(L')');

  0015e	8b 55 0c	 mov	 edx, DWORD PTR _writer$[ebp]
  00161	8b 02		 mov	 eax, DWORD PTR [edx]
  00163	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00166	89 4d d8	 mov	 DWORD PTR tv181[ebp], ecx
  00169	8b f4		 mov	 esi, esp
  0016b	6a 29		 push	 41			; 00000029H
  0016d	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00170	ff 55 d8	 call	 DWORD PTR tv181[ebp]
  00173	3b f4		 cmp	 esi, esp
  00175	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 516  :                         break;

  0017a	e9 98 02 00 00	 jmp	 $LN1@WriteSuffi
$LN17@WriteSuffi:

; 517  :                     case 5:
; 518  :                         writer->Write(_number_format_info->CurrencySymbol);

  0017f	8b 55 0c	 mov	 edx, DWORD PTR _writer$[ebp]
  00182	8b 02		 mov	 eax, DWORD PTR [edx]
  00184	8b 08		 mov	 ecx, DWORD PTR [eax]
  00186	89 4d d4	 mov	 DWORD PTR tv193[ebp], ecx
  00189	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0018c	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0018f	05 38 01 00 00	 add	 eax, 312		; 00000138H
  00194	8b f4		 mov	 esi, esp
  00196	50		 push	 eax
  00197	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0019a	ff 55 d4	 call	 DWORD PTR tv193[ebp]
  0019d	3b f4		 cmp	 esi, esp
  0019f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 519  :                         break;

  001a4	e9 6e 02 00 00	 jmp	 $LN1@WriteSuffi
$LN18@WriteSuffi:

; 520  :                     case 6:
; 521  :                         writer->Write(_number_format_info->NegativeSign);

  001a9	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  001ac	8b 11		 mov	 edx, DWORD PTR [ecx]
  001ae	8b 02		 mov	 eax, DWORD PTR [edx]
  001b0	89 45 d0	 mov	 DWORD PTR tv205[ebp], eax
  001b3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001b6	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  001b9	81 c2 5a 01 00
	00		 add	 edx, 346		; 0000015aH
  001bf	8b f4		 mov	 esi, esp
  001c1	52		 push	 edx
  001c2	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  001c5	ff 55 d0	 call	 DWORD PTR tv205[ebp]
  001c8	3b f4		 cmp	 esi, esp
  001ca	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 522  :                         writer->Write(_number_format_info->CurrencySymbol);

  001cf	8b 45 0c	 mov	 eax, DWORD PTR _writer$[ebp]
  001d2	8b 08		 mov	 ecx, DWORD PTR [eax]
  001d4	8b 11		 mov	 edx, DWORD PTR [ecx]
  001d6	89 55 cc	 mov	 DWORD PTR tv217[ebp], edx
  001d9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001dc	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001df	81 c1 38 01 00
	00		 add	 ecx, 312		; 00000138H
  001e5	8b f4		 mov	 esi, esp
  001e7	51		 push	 ecx
  001e8	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  001eb	ff 55 cc	 call	 DWORD PTR tv217[ebp]
  001ee	3b f4		 cmp	 esi, esp
  001f0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 523  :                         break;

  001f5	e9 1d 02 00 00	 jmp	 $LN1@WriteSuffi
$LN19@WriteSuffi:

; 524  :                     case 7:
; 525  :                         writer->Write(_number_format_info->CurrencySymbol);

  001fa	8b 55 0c	 mov	 edx, DWORD PTR _writer$[ebp]
  001fd	8b 02		 mov	 eax, DWORD PTR [edx]
  001ff	8b 08		 mov	 ecx, DWORD PTR [eax]
  00201	89 4d c8	 mov	 DWORD PTR tv229[ebp], ecx
  00204	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00207	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0020a	05 38 01 00 00	 add	 eax, 312		; 00000138H
  0020f	8b f4		 mov	 esi, esp
  00211	50		 push	 eax
  00212	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00215	ff 55 c8	 call	 DWORD PTR tv229[ebp]
  00218	3b f4		 cmp	 esi, esp
  0021a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 526  :                         writer->Write(_number_format_info->NegativeSign);

  0021f	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00222	8b 11		 mov	 edx, DWORD PTR [ecx]
  00224	8b 02		 mov	 eax, DWORD PTR [edx]
  00226	89 45 c4	 mov	 DWORD PTR tv241[ebp], eax
  00229	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0022c	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0022f	81 c2 5a 01 00
	00		 add	 edx, 346		; 0000015aH
  00235	8b f4		 mov	 esi, esp
  00237	52		 push	 edx
  00238	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0023b	ff 55 c4	 call	 DWORD PTR tv241[ebp]
  0023e	3b f4		 cmp	 esi, esp
  00240	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 527  :                         break;

  00245	e9 cd 01 00 00	 jmp	 $LN1@WriteSuffi
$LN20@WriteSuffi:

; 528  :                     case 8:
; 529  :                         writer->Write(L' ');

  0024a	8b 45 0c	 mov	 eax, DWORD PTR _writer$[ebp]
  0024d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0024f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00252	89 55 c0	 mov	 DWORD PTR tv247[ebp], edx
  00255	8b f4		 mov	 esi, esp
  00257	6a 20		 push	 32			; 00000020H
  00259	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0025c	ff 55 c0	 call	 DWORD PTR tv247[ebp]
  0025f	3b f4		 cmp	 esi, esp
  00261	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 530  :                         writer->Write(_number_format_info->CurrencySymbol);

  00266	8b 45 0c	 mov	 eax, DWORD PTR _writer$[ebp]
  00269	8b 08		 mov	 ecx, DWORD PTR [eax]
  0026b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0026d	89 55 bc	 mov	 DWORD PTR tv259[ebp], edx
  00270	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00273	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00276	81 c1 38 01 00
	00		 add	 ecx, 312		; 00000138H
  0027c	8b f4		 mov	 esi, esp
  0027e	51		 push	 ecx
  0027f	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00282	ff 55 bc	 call	 DWORD PTR tv259[ebp]
  00285	3b f4		 cmp	 esi, esp
  00287	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 531  :                         break;

  0028c	e9 86 01 00 00	 jmp	 $LN1@WriteSuffi
$LN21@WriteSuffi:

; 532  :                     case 9:
; 533  :                         break;

  00291	e9 81 01 00 00	 jmp	 $LN1@WriteSuffi
$LN22@WriteSuffi:

; 534  :                     case 10:
; 535  :                         writer->Write(L' ');

  00296	8b 55 0c	 mov	 edx, DWORD PTR _writer$[ebp]
  00299	8b 02		 mov	 eax, DWORD PTR [edx]
  0029b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0029e	89 4d b8	 mov	 DWORD PTR tv265[ebp], ecx
  002a1	8b f4		 mov	 esi, esp
  002a3	6a 20		 push	 32			; 00000020H
  002a5	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  002a8	ff 55 b8	 call	 DWORD PTR tv265[ebp]
  002ab	3b f4		 cmp	 esi, esp
  002ad	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 536  :                         writer->Write(_number_format_info->CurrencySymbol);

  002b2	8b 55 0c	 mov	 edx, DWORD PTR _writer$[ebp]
  002b5	8b 02		 mov	 eax, DWORD PTR [edx]
  002b7	8b 08		 mov	 ecx, DWORD PTR [eax]
  002b9	89 4d b4	 mov	 DWORD PTR tv277[ebp], ecx
  002bc	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002bf	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  002c2	05 38 01 00 00	 add	 eax, 312		; 00000138H
  002c7	8b f4		 mov	 esi, esp
  002c9	50		 push	 eax
  002ca	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  002cd	ff 55 b4	 call	 DWORD PTR tv277[ebp]
  002d0	3b f4		 cmp	 esi, esp
  002d2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 537  :                         writer->Write(_number_format_info->NegativeSign);

  002d7	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  002da	8b 11		 mov	 edx, DWORD PTR [ecx]
  002dc	8b 02		 mov	 eax, DWORD PTR [edx]
  002de	89 45 b0	 mov	 DWORD PTR tv289[ebp], eax
  002e1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002e4	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  002e7	81 c2 5a 01 00
	00		 add	 edx, 346		; 0000015aH
  002ed	8b f4		 mov	 esi, esp
  002ef	52		 push	 edx
  002f0	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  002f3	ff 55 b0	 call	 DWORD PTR tv289[ebp]
  002f6	3b f4		 cmp	 esi, esp
  002f8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 538  :                         break;

  002fd	e9 15 01 00 00	 jmp	 $LN1@WriteSuffi
$LN23@WriteSuffi:

; 539  :                     case 11:
; 540  :                         writer->Write(_number_format_info->NegativeSign);

  00302	8b 45 0c	 mov	 eax, DWORD PTR _writer$[ebp]
  00305	8b 08		 mov	 ecx, DWORD PTR [eax]
  00307	8b 11		 mov	 edx, DWORD PTR [ecx]
  00309	89 55 ac	 mov	 DWORD PTR tv301[ebp], edx
  0030c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0030f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00312	81 c1 5a 01 00
	00		 add	 ecx, 346		; 0000015aH
  00318	8b f4		 mov	 esi, esp
  0031a	51		 push	 ecx
  0031b	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0031e	ff 55 ac	 call	 DWORD PTR tv301[ebp]
  00321	3b f4		 cmp	 esi, esp
  00323	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 541  :                         break;

  00328	e9 ea 00 00 00	 jmp	 $LN1@WriteSuffi
$LN24@WriteSuffi:

; 542  :                     case 12:
; 543  :                         break;

  0032d	e9 e5 00 00 00	 jmp	 $LN1@WriteSuffi
$LN25@WriteSuffi:

; 544  :                     case 13:
; 545  :                         writer->Write(_number_format_info->NegativeSign);

  00332	8b 55 0c	 mov	 edx, DWORD PTR _writer$[ebp]
  00335	8b 02		 mov	 eax, DWORD PTR [edx]
  00337	8b 08		 mov	 ecx, DWORD PTR [eax]
  00339	89 4d a8	 mov	 DWORD PTR tv313[ebp], ecx
  0033c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0033f	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00342	05 5a 01 00 00	 add	 eax, 346		; 0000015aH
  00347	8b f4		 mov	 esi, esp
  00349	50		 push	 eax
  0034a	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0034d	ff 55 a8	 call	 DWORD PTR tv313[ebp]
  00350	3b f4		 cmp	 esi, esp
  00352	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 546  :                         writer->Write(L' ');

  00357	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0035a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0035c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0035f	89 45 a4	 mov	 DWORD PTR tv319[ebp], eax
  00362	8b f4		 mov	 esi, esp
  00364	6a 20		 push	 32			; 00000020H
  00366	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00369	ff 55 a4	 call	 DWORD PTR tv319[ebp]
  0036c	3b f4		 cmp	 esi, esp
  0036e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 547  :                         writer->Write(_number_format_info->CurrencySymbol);

  00373	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00376	8b 11		 mov	 edx, DWORD PTR [ecx]
  00378	8b 02		 mov	 eax, DWORD PTR [edx]
  0037a	89 45 a0	 mov	 DWORD PTR tv331[ebp], eax
  0037d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00380	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00383	81 c2 38 01 00
	00		 add	 edx, 312		; 00000138H
  00389	8b f4		 mov	 esi, esp
  0038b	52		 push	 edx
  0038c	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0038f	ff 55 a0	 call	 DWORD PTR tv331[ebp]
  00392	3b f4		 cmp	 esi, esp
  00394	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 548  :                         break;

  00399	eb 7c		 jmp	 SHORT $LN1@WriteSuffi
$LN26@WriteSuffi:

; 549  :                     case 14:
; 550  :                         writer->Write(L')');

  0039b	8b 45 0c	 mov	 eax, DWORD PTR _writer$[ebp]
  0039e	8b 08		 mov	 ecx, DWORD PTR [eax]
  003a0	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  003a3	89 55 9c	 mov	 DWORD PTR tv337[ebp], edx
  003a6	8b f4		 mov	 esi, esp
  003a8	6a 29		 push	 41			; 00000029H
  003aa	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  003ad	ff 55 9c	 call	 DWORD PTR tv337[ebp]
  003b0	3b f4		 cmp	 esi, esp
  003b2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 551  :                         break;

  003b7	eb 5e		 jmp	 SHORT $LN1@WriteSuffi
$LN27@WriteSuffi:

; 552  :                     case 15:
; 553  :                         writer->Write(L' ');

  003b9	8b 45 0c	 mov	 eax, DWORD PTR _writer$[ebp]
  003bc	8b 08		 mov	 ecx, DWORD PTR [eax]
  003be	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  003c1	89 55 98	 mov	 DWORD PTR tv343[ebp], edx
  003c4	8b f4		 mov	 esi, esp
  003c6	6a 20		 push	 32			; 00000020H
  003c8	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  003cb	ff 55 98	 call	 DWORD PTR tv343[ebp]
  003ce	3b f4		 cmp	 esi, esp
  003d0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 554  :                         writer->Write(_number_format_info->CurrencySymbol);

  003d5	8b 45 0c	 mov	 eax, DWORD PTR _writer$[ebp]
  003d8	8b 08		 mov	 ecx, DWORD PTR [eax]
  003da	8b 11		 mov	 edx, DWORD PTR [ecx]
  003dc	89 55 94	 mov	 DWORD PTR tv355[ebp], edx
  003df	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003e2	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  003e5	81 c1 38 01 00
	00		 add	 ecx, 312		; 00000138H
  003eb	8b f4		 mov	 esi, esp
  003ed	51		 push	 ecx
  003ee	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  003f1	ff 55 94	 call	 DWORD PTR tv355[ebp]
  003f4	3b f4		 cmp	 esi, esp
  003f6	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 555  :                         writer->Write(L')');

  003fb	8b 55 0c	 mov	 edx, DWORD PTR _writer$[ebp]
  003fe	8b 02		 mov	 eax, DWORD PTR [edx]
  00400	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00403	89 4d 90	 mov	 DWORD PTR tv361[ebp], ecx
  00406	8b f4		 mov	 esi, esp
  00408	6a 29		 push	 41			; 00000029H
  0040a	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0040d	ff 55 90	 call	 DWORD PTR tv361[ebp]
  00410	3b f4		 cmp	 esi, esp
  00412	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@WriteSuffi:

; 556  :                         break;
; 557  :                     }
; 558  :                 }
; 559  :             }

  00417	5f		 pop	 edi
  00418	5e		 pop	 esi
  00419	83 c4 70	 add	 esp, 112		; 00000070H
  0041c	3b ec		 cmp	 ebp, esp
  0041e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00423	8b e5		 mov	 esp, ebp
  00425	5d		 pop	 ebp
  00426	c2 08 00	 ret	 8
  00429	0f 1f 00	 npad	 3
$LN29@WriteSuffi:
  0042c	00 00 00 00	 DD	 $LN13@WriteSuffi
  00430	00 00 00 00	 DD	 $LN14@WriteSuffi
  00434	00 00 00 00	 DD	 $LN15@WriteSuffi
  00438	00 00 00 00	 DD	 $LN16@WriteSuffi
  0043c	00 00 00 00	 DD	 $LN17@WriteSuffi
  00440	00 00 00 00	 DD	 $LN18@WriteSuffi
  00444	00 00 00 00	 DD	 $LN19@WriteSuffi
  00448	00 00 00 00	 DD	 $LN20@WriteSuffi
  0044c	00 00 00 00	 DD	 $LN21@WriteSuffi
  00450	00 00 00 00	 DD	 $LN22@WriteSuffi
  00454	00 00 00 00	 DD	 $LN23@WriteSuffi
  00458	00 00 00 00	 DD	 $LN24@WriteSuffi
  0045c	00 00 00 00	 DD	 $LN25@WriteSuffi
  00460	00 00 00 00	 DD	 $LN26@WriteSuffi
  00464	00 00 00 00	 DD	 $LN27@WriteSuffi
?WriteSuffix@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::WriteSuffix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?FormatNumberSequence@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
_TEXT	SEGMENT
tv176 = -160						; size = 4
tv155 = -156						; size = 4
tv157 = -152						; size = 4
_t_writer$ = -144					; size = 44
_r_writer$ = -92					; size = 20
_work_buf$ = -68					; size = 4
_work_buf_len$ = -64					; size = 4
_r_reader$ = -56					; size = 12
_root$ = -36						; size = 16
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_number_sequence_str$ = 8				; size = 4
_writer$ = 12						; size = 4
?FormatNumberSequence@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::FormatNumberSequence, COMDAT
; _this$ = ecx

; 461  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?FormatNumberSequence@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	51		 push	 ecx
  0001a	8d bd 60 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-160]
  00020	b9 25 00 00 00	 mov	 ecx, 37			; 00000025H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	59		 pop	 ecx
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	50		 push	 eax
  00035	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00038	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003e	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00041	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00046	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 462  :                 ResourceHolderUINT root;

  0004b	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  0004e	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00053	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 463  :                 ReverseStringReader r_reader(number_sequence_str);

  0005a	8b 45 08	 mov	 eax, DWORD PTR _number_sequence_str$[ebp]
  0005d	50		 push	 eax
  0005e	8d 4d c8	 lea	 ecx, DWORD PTR _r_reader$[ebp]
  00061	e8 00 00 00 00	 call	 ??0ReverseStringReader@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::ReverseStringReader::ReverseStringReader

; 464  :                 size_t work_buf_len = lstrlenW(number_sequence_str) * 2 + 1 + _precision + 1;

  00066	8b f4		 mov	 esi, esp
  00068	8b 4d 08	 mov	 ecx, DWORD PTR _number_sequence_str$[ebp]
  0006b	51		 push	 ecx
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  00072	3b f4		 cmp	 esi, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00079	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0007c	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  0007f	8d 54 41 02	 lea	 edx, DWORD PTR [ecx+eax*2+2]
  00083	89 55 c0	 mov	 DWORD PTR _work_buf_len$[ebp], edx

; 465  :                 wchar_t* work_buf = root.AllocateString(work_buf_len);

  00086	8b 45 c0	 mov	 eax, DWORD PTR _work_buf_len$[ebp]
  00089	50		 push	 eax
  0008a	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  0008d	e8 00 00 00 00	 call	 ?AllocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPA_WI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateString
  00092	89 45 bc	 mov	 DWORD PTR _work_buf$[ebp], eax

; 466  :                 ReverseStringWriter r_writer(work_buf, work_buf_len);

  00095	8b 4d c0	 mov	 ecx, DWORD PTR _work_buf_len$[ebp]
  00098	51		 push	 ecx
  00099	8b 55 bc	 mov	 edx, DWORD PTR _work_buf$[ebp]
  0009c	52		 push	 edx
  0009d	8d 4d a4	 lea	 ecx, DWORD PTR _r_writer$[ebp]
  000a0	e8 00 00 00 00	 call	 ??0ReverseStringWriter@Internal@Core@Math@Palmtree@@QAE@PA_WI@Z ; Palmtree::Math::Core::Internal::ReverseStringWriter::ReverseStringWriter

; 467  :                 ThousandSeparatedStringWriter t_writer(&r_writer, _format_type, _number_format_info);

  000a5	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000a8	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000ab	51		 push	 ecx
  000ac	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000af	0f b7 42 0c	 movzx	 eax, WORD PTR [edx+12]
  000b3	50		 push	 eax
  000b4	8d 4d a4	 lea	 ecx, DWORD PTR _r_writer$[ebp]
  000b7	51		 push	 ecx
  000b8	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _t_writer$[ebp]
  000be	e8 00 00 00 00	 call	 ??0ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@PAVStringWriter@2345@_WPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::ThousandSeparatedStringWriter
$LN2@FormatNumb:

; 468  :                 while (r_reader.PeekChar() != L'\0')

  000c3	8d 4d c8	 lea	 ecx, DWORD PTR _r_reader$[ebp]
  000c6	e8 00 00 00 00	 call	 ?PeekChar@ReverseStringReader@Internal@Core@Math@Palmtree@@UAE_WXZ ; Palmtree::Math::Core::Internal::ReverseStringReader::PeekChar
  000cb	0f b7 d0	 movzx	 edx, ax
  000ce	85 d2		 test	 edx, edx
  000d0	74 19		 je	 SHORT $LN3@FormatNumb

; 469  :                     t_writer.Write(r_reader.ReadChar());

  000d2	8d 4d c8	 lea	 ecx, DWORD PTR _r_reader$[ebp]
  000d5	e8 00 00 00 00	 call	 ?ReadChar@StringReader@Internal@Core@Math@Palmtree@@QAE_WXZ ; Palmtree::Math::Core::Internal::StringReader::ReadChar
  000da	0f b7 c0	 movzx	 eax, ax
  000dd	50		 push	 eax
  000de	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _t_writer$[ebp]
  000e4	e8 00 00 00 00	 call	 ?Write@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@UAEX_W@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::Write
  000e9	eb d8		 jmp	 SHORT $LN2@FormatNumb
$LN3@FormatNumb:

; 470  :                 writer->Write(t_writer.GetString());

  000eb	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  000ee	8b 11		 mov	 edx, DWORD PTR [ecx]
  000f0	8b 02		 mov	 eax, DWORD PTR [edx]
  000f2	89 85 68 ff ff
	ff		 mov	 DWORD PTR tv157[ebp], eax
  000f8	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _t_writer$[ebp]
  000fe	e8 00 00 00 00	 call	 ?GetString@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@UAEPA_WXZ ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::GetString
  00103	89 85 64 ff ff
	ff		 mov	 DWORD PTR tv155[ebp], eax
  00109	8b f4		 mov	 esi, esp
  0010b	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR tv155[ebp]
  00111	51		 push	 ecx
  00112	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00115	ff 95 68 ff ff
	ff		 call	 DWORD PTR tv157[ebp]
  0011b	3b f4		 cmp	 esi, esp
  0011d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 471  :                 if (_precision > 0)

  00122	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00125	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  00129	7e 3a		 jle	 SHORT $LN4@FormatNumb

; 472  :                 {
; 473  :                     writer->Write(_number_format_info->Currency.DecimalSeparator);

  0012b	8b 45 0c	 mov	 eax, DWORD PTR _writer$[ebp]
  0012e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00130	8b 11		 mov	 edx, DWORD PTR [ecx]
  00132	89 95 60 ff ff
	ff		 mov	 DWORD PTR tv176[ebp], edx
  00138	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0013b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0013e	83 c1 04	 add	 ecx, 4
  00141	8b f4		 mov	 esi, esp
  00143	51		 push	 ecx
  00144	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00147	ff 95 60 ff ff
	ff		 call	 DWORD PTR tv176[ebp]
  0014d	3b f4		 cmp	 esi, esp
  0014f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 474  :                     writer->Write(L'0', _precision);

  00154	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00157	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0015a	50		 push	 eax
  0015b	6a 30		 push	 48			; 00000030H
  0015d	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00160	e8 00 00 00 00	 call	 ?Write@StringWriter@Internal@Core@Math@Palmtree@@QAEX_WI@Z ; Palmtree::Math::Core::Internal::StringWriter::Write
$LN4@FormatNumb:

; 475  :                 }
; 476  :             }

  00165	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0016c	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  0016f	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00174	52		 push	 edx
  00175	8b cd		 mov	 ecx, ebp
  00177	50		 push	 eax
  00178	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN13@FormatNumb
  0017e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00183	58		 pop	 eax
  00184	5a		 pop	 edx
  00185	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00188	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0018f	59		 pop	 ecx
  00190	5f		 pop	 edi
  00191	5e		 pop	 esi
  00192	81 c4 a0 00 00
	00		 add	 esp, 160		; 000000a0H
  00198	3b ec		 cmp	 ebp, esp
  0019a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0019f	8b e5		 mov	 esp, ebp
  001a1	5d		 pop	 ebp
  001a2	c2 08 00	 ret	 8
  001a5	0f 1f 00	 npad	 3
$LN13@FormatNumb:
  001a8	04 00 00 00	 DD	 4
  001ac	00 00 00 00	 DD	 $LN12@FormatNumb
$LN12@FormatNumb:
  001b0	dc ff ff ff	 DD	 -36			; ffffffdcH
  001b4	10 00 00 00	 DD	 16			; 00000010H
  001b8	00 00 00 00	 DD	 $LN7@FormatNumb
  001bc	c8 ff ff ff	 DD	 -56			; ffffffc8H
  001c0	0c 00 00 00	 DD	 12			; 0000000cH
  001c4	00 00 00 00	 DD	 $LN8@FormatNumb
  001c8	a4 ff ff ff	 DD	 -92			; ffffffa4H
  001cc	14 00 00 00	 DD	 20			; 00000014H
  001d0	00 00 00 00	 DD	 $LN9@FormatNumb
  001d4	70 ff ff ff	 DD	 -144			; ffffff70H
  001d8	2c 00 00 00	 DD	 44			; 0000002cH
  001dc	00 00 00 00	 DD	 $LN10@FormatNumb
$LN10@FormatNumb:
  001e0	74		 DB	 116			; 00000074H
  001e1	5f		 DB	 95			; 0000005fH
  001e2	77		 DB	 119			; 00000077H
  001e3	72		 DB	 114			; 00000072H
  001e4	69		 DB	 105			; 00000069H
  001e5	74		 DB	 116			; 00000074H
  001e6	65		 DB	 101			; 00000065H
  001e7	72		 DB	 114			; 00000072H
  001e8	00		 DB	 0
$LN9@FormatNumb:
  001e9	72		 DB	 114			; 00000072H
  001ea	5f		 DB	 95			; 0000005fH
  001eb	77		 DB	 119			; 00000077H
  001ec	72		 DB	 114			; 00000072H
  001ed	69		 DB	 105			; 00000069H
  001ee	74		 DB	 116			; 00000074H
  001ef	65		 DB	 101			; 00000065H
  001f0	72		 DB	 114			; 00000072H
  001f1	00		 DB	 0
$LN8@FormatNumb:
  001f2	72		 DB	 114			; 00000072H
  001f3	5f		 DB	 95			; 0000005fH
  001f4	72		 DB	 114			; 00000072H
  001f5	65		 DB	 101			; 00000065H
  001f6	61		 DB	 97			; 00000061H
  001f7	64		 DB	 100			; 00000064H
  001f8	65		 DB	 101			; 00000065H
  001f9	72		 DB	 114			; 00000072H
  001fa	00		 DB	 0
$LN7@FormatNumb:
  001fb	72		 DB	 114			; 00000072H
  001fc	6f		 DB	 111			; 0000006fH
  001fd	6f		 DB	 111			; 0000006fH
  001fe	74		 DB	 116			; 00000074H
  001ff	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?FormatNumberSequence@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?FormatNumberSequence@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 60 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-160]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?FormatNumberSequence@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?FormatNumberSequence@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPB_WPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::FormatNumberSequence
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WritePrefix@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z
_TEXT	SEGMENT
tv362 = -112						; size = 4
tv356 = -108						; size = 4
tv350 = -104						; size = 4
tv338 = -100						; size = 4
tv332 = -96						; size = 4
tv320 = -92						; size = 4
tv314 = -88						; size = 4
tv302 = -84						; size = 4
tv296 = -80						; size = 4
tv284 = -76						; size = 4
tv278 = -72						; size = 4
tv266 = -68						; size = 4
tv254 = -64						; size = 4
tv242 = -60						; size = 4
tv230 = -56						; size = 4
tv224 = -52						; size = 4
tv212 = -48						; size = 4
tv200 = -44						; size = 4
tv188 = -40						; size = 4
tv176 = -36						; size = 4
tv164 = -32						; size = 4
tv152 = -28						; size = 4
tv146 = -24						; size = 4
tv135 = -20						; size = 4
tv129 = -16						; size = 4
tv85 = -12						; size = 4
tv73 = -8						; size = 4
_this$ = -4						; size = 4
_x_sign$ = 8						; size = 1
_writer$ = 12						; size = 4
?WritePrefix@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::WritePrefix, COMDAT
; _this$ = ecx

; 378  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	51		 push	 ecx
  00009	8d 7d 90	 lea	 edi, DWORD PTR [ebp-112]
  0000c	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	59		 pop	 ecx
  00019	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001c	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00021	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 379  :                 if (x_sign >= 0)

  00026	0f be 45 08	 movsx	 eax, BYTE PTR _x_sign$[ebp]
  0002a	85 c0		 test	 eax, eax
  0002c	0f 8c 8f 00 00
	00		 jl	 $LN6@WritePrefi

; 380  :                 {
; 381  :                     switch (_number_format_info->Currency.PositivePattern)

  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00038	8b 42 64	 mov	 eax, DWORD PTR [edx+100]
  0003b	89 45 f8	 mov	 DWORD PTR tv73[ebp], eax
  0003e	83 7d f8 01	 cmp	 DWORD PTR tv73[ebp], 1
  00042	74 34		 je	 SHORT $LN9@WritePrefi
  00044	83 7d f8 02	 cmp	 DWORD PTR tv73[ebp], 2
  00048	74 30		 je	 SHORT $LN10@WritePrefi
  0004a	83 7d f8 03	 cmp	 DWORD PTR tv73[ebp], 3
  0004e	74 6c		 je	 SHORT $LN2@WritePrefi

; 382  :                     {
; 383  :                     case 0:
; 384  :                     default:
; 385  :                         writer->Write(_number_format_info->CurrencySymbol);

  00050	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00053	8b 11		 mov	 edx, DWORD PTR [ecx]
  00055	8b 02		 mov	 eax, DWORD PTR [edx]
  00057	89 45 f4	 mov	 DWORD PTR tv85[ebp], eax
  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00060	81 c2 38 01 00
	00		 add	 edx, 312		; 00000138H
  00066	8b f4		 mov	 esi, esp
  00068	52		 push	 edx
  00069	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0006c	ff 55 f4	 call	 DWORD PTR tv85[ebp]
  0006f	3b f4		 cmp	 esi, esp
  00071	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 386  :                         break;

  00076	eb 44		 jmp	 SHORT $LN2@WritePrefi
$LN9@WritePrefi:

; 387  :                     case 1:
; 388  :                         break;

  00078	eb 42		 jmp	 SHORT $LN2@WritePrefi
$LN10@WritePrefi:

; 389  :                     case 2:
; 390  :                         writer->Write(_number_format_info->CurrencySymbol);

  0007a	8b 45 0c	 mov	 eax, DWORD PTR _writer$[ebp]
  0007d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00081	89 55 f0	 mov	 DWORD PTR tv129[ebp], edx
  00084	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00087	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0008a	81 c1 38 01 00
	00		 add	 ecx, 312		; 00000138H
  00090	8b f4		 mov	 esi, esp
  00092	51		 push	 ecx
  00093	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00096	ff 55 f0	 call	 DWORD PTR tv129[ebp]
  00099	3b f4		 cmp	 esi, esp
  0009b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 391  :                         writer->Write(L' ');

  000a0	8b 55 0c	 mov	 edx, DWORD PTR _writer$[ebp]
  000a3	8b 02		 mov	 eax, DWORD PTR [edx]
  000a5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000a8	89 4d ec	 mov	 DWORD PTR tv135[ebp], ecx
  000ab	8b f4		 mov	 esi, esp
  000ad	6a 20		 push	 32			; 00000020H
  000af	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  000b2	ff 55 ec	 call	 DWORD PTR tv135[ebp]
  000b5	3b f4		 cmp	 esi, esp
  000b7	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@WritePrefi:

; 392  :                         break;
; 393  :                     case 3:
; 394  :                         break;
; 395  :                     }
; 396  :                 }
; 397  :                 else

  000bc	e9 57 03 00 00	 jmp	 $LN1@WritePrefi
$LN6@WritePrefi:

; 398  :                 {
; 399  :                     switch (_number_format_info->Currency.NegativePattern)

  000c1	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000c4	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000c7	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]
  000ca	89 4d e8	 mov	 DWORD PTR tv146[ebp], ecx
  000cd	8b 55 e8	 mov	 edx, DWORD PTR tv146[ebp]
  000d0	83 ea 01	 sub	 edx, 1
  000d3	89 55 e8	 mov	 DWORD PTR tv146[ebp], edx
  000d6	83 7d e8 0e	 cmp	 DWORD PTR tv146[ebp], 14 ; 0000000eH
  000da	77 0a		 ja	 SHORT $LN12@WritePrefi
  000dc	8b 45 e8	 mov	 eax, DWORD PTR tv146[ebp]
  000df	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN29@WritePrefi[eax*4]
$LN12@WritePrefi:

; 400  :                     {
; 401  :                     case 0:
; 402  :                     default:
; 403  :                         writer->Write(L'(');

  000e6	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  000e9	8b 11		 mov	 edx, DWORD PTR [ecx]
  000eb	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000ee	89 45 e4	 mov	 DWORD PTR tv152[ebp], eax
  000f1	8b f4		 mov	 esi, esp
  000f3	6a 28		 push	 40			; 00000028H
  000f5	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  000f8	ff 55 e4	 call	 DWORD PTR tv152[ebp]
  000fb	3b f4		 cmp	 esi, esp
  000fd	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 404  :                         writer->Write(_number_format_info->CurrencySymbol);

  00102	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00105	8b 11		 mov	 edx, DWORD PTR [ecx]
  00107	8b 02		 mov	 eax, DWORD PTR [edx]
  00109	89 45 e0	 mov	 DWORD PTR tv164[ebp], eax
  0010c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0010f	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00112	81 c2 38 01 00
	00		 add	 edx, 312		; 00000138H
  00118	8b f4		 mov	 esi, esp
  0011a	52		 push	 edx
  0011b	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0011e	ff 55 e0	 call	 DWORD PTR tv164[ebp]
  00121	3b f4		 cmp	 esi, esp
  00123	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 405  :                         break;

  00128	e9 eb 02 00 00	 jmp	 $LN1@WritePrefi
$LN13@WritePrefi:

; 406  :                     case 1:
; 407  :                         writer->Write(_number_format_info->NegativeSign);

  0012d	8b 45 0c	 mov	 eax, DWORD PTR _writer$[ebp]
  00130	8b 08		 mov	 ecx, DWORD PTR [eax]
  00132	8b 11		 mov	 edx, DWORD PTR [ecx]
  00134	89 55 dc	 mov	 DWORD PTR tv176[ebp], edx
  00137	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0013a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0013d	81 c1 5a 01 00
	00		 add	 ecx, 346		; 0000015aH
  00143	8b f4		 mov	 esi, esp
  00145	51		 push	 ecx
  00146	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00149	ff 55 dc	 call	 DWORD PTR tv176[ebp]
  0014c	3b f4		 cmp	 esi, esp
  0014e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 408  :                         writer->Write(_number_format_info->CurrencySymbol);

  00153	8b 55 0c	 mov	 edx, DWORD PTR _writer$[ebp]
  00156	8b 02		 mov	 eax, DWORD PTR [edx]
  00158	8b 08		 mov	 ecx, DWORD PTR [eax]
  0015a	89 4d d8	 mov	 DWORD PTR tv188[ebp], ecx
  0015d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00160	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00163	05 38 01 00 00	 add	 eax, 312		; 00000138H
  00168	8b f4		 mov	 esi, esp
  0016a	50		 push	 eax
  0016b	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0016e	ff 55 d8	 call	 DWORD PTR tv188[ebp]
  00171	3b f4		 cmp	 esi, esp
  00173	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 409  :                         break;

  00178	e9 9b 02 00 00	 jmp	 $LN1@WritePrefi
$LN14@WritePrefi:

; 410  :                     case 2:
; 411  :                         writer->Write(_number_format_info->CurrencySymbol);

  0017d	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00180	8b 11		 mov	 edx, DWORD PTR [ecx]
  00182	8b 02		 mov	 eax, DWORD PTR [edx]
  00184	89 45 d4	 mov	 DWORD PTR tv200[ebp], eax
  00187	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0018a	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0018d	81 c2 38 01 00
	00		 add	 edx, 312		; 00000138H
  00193	8b f4		 mov	 esi, esp
  00195	52		 push	 edx
  00196	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00199	ff 55 d4	 call	 DWORD PTR tv200[ebp]
  0019c	3b f4		 cmp	 esi, esp
  0019e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 412  :                         writer->Write(_number_format_info->NegativeSign);

  001a3	8b 45 0c	 mov	 eax, DWORD PTR _writer$[ebp]
  001a6	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a8	8b 11		 mov	 edx, DWORD PTR [ecx]
  001aa	89 55 d0	 mov	 DWORD PTR tv212[ebp], edx
  001ad	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001b0	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  001b3	81 c1 5a 01 00
	00		 add	 ecx, 346		; 0000015aH
  001b9	8b f4		 mov	 esi, esp
  001bb	51		 push	 ecx
  001bc	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  001bf	ff 55 d0	 call	 DWORD PTR tv212[ebp]
  001c2	3b f4		 cmp	 esi, esp
  001c4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 413  :                         break;

  001c9	e9 4a 02 00 00	 jmp	 $LN1@WritePrefi
$LN15@WritePrefi:

; 414  :                     case 3:
; 415  :                         writer->Write(_number_format_info->NegativeSign);

  001ce	8b 55 0c	 mov	 edx, DWORD PTR _writer$[ebp]
  001d1	8b 02		 mov	 eax, DWORD PTR [edx]
  001d3	8b 08		 mov	 ecx, DWORD PTR [eax]
  001d5	89 4d cc	 mov	 DWORD PTR tv224[ebp], ecx
  001d8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001db	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  001de	05 5a 01 00 00	 add	 eax, 346		; 0000015aH
  001e3	8b f4		 mov	 esi, esp
  001e5	50		 push	 eax
  001e6	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  001e9	ff 55 cc	 call	 DWORD PTR tv224[ebp]
  001ec	3b f4		 cmp	 esi, esp
  001ee	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 416  :                         break;

  001f3	e9 20 02 00 00	 jmp	 $LN1@WritePrefi
$LN16@WritePrefi:

; 417  :                     case 4:
; 418  :                         writer->Write(L'(');

  001f8	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  001fb	8b 11		 mov	 edx, DWORD PTR [ecx]
  001fd	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00200	89 45 c8	 mov	 DWORD PTR tv230[ebp], eax
  00203	8b f4		 mov	 esi, esp
  00205	6a 28		 push	 40			; 00000028H
  00207	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0020a	ff 55 c8	 call	 DWORD PTR tv230[ebp]
  0020d	3b f4		 cmp	 esi, esp
  0020f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 419  :                         break;

  00214	e9 ff 01 00 00	 jmp	 $LN1@WritePrefi
$LN17@WritePrefi:

; 420  :                     case 5:
; 421  :                         writer->Write(_number_format_info->NegativeSign);

  00219	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0021c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0021e	8b 02		 mov	 eax, DWORD PTR [edx]
  00220	89 45 c4	 mov	 DWORD PTR tv242[ebp], eax
  00223	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00226	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00229	81 c2 5a 01 00
	00		 add	 edx, 346		; 0000015aH
  0022f	8b f4		 mov	 esi, esp
  00231	52		 push	 edx
  00232	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00235	ff 55 c4	 call	 DWORD PTR tv242[ebp]
  00238	3b f4		 cmp	 esi, esp
  0023a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 422  :                         break;

  0023f	e9 d4 01 00 00	 jmp	 $LN1@WritePrefi
$LN18@WritePrefi:

; 423  :                     case 6:
; 424  :                         break;

  00244	e9 cf 01 00 00	 jmp	 $LN1@WritePrefi
$LN19@WritePrefi:

; 425  :                     case 7:
; 426  :                         break;

  00249	e9 ca 01 00 00	 jmp	 $LN1@WritePrefi
$LN20@WritePrefi:

; 427  :                     case 8:
; 428  :                         writer->Write(_number_format_info->NegativeSign);

  0024e	8b 45 0c	 mov	 eax, DWORD PTR _writer$[ebp]
  00251	8b 08		 mov	 ecx, DWORD PTR [eax]
  00253	8b 11		 mov	 edx, DWORD PTR [ecx]
  00255	89 55 c0	 mov	 DWORD PTR tv254[ebp], edx
  00258	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0025b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0025e	81 c1 5a 01 00
	00		 add	 ecx, 346		; 0000015aH
  00264	8b f4		 mov	 esi, esp
  00266	51		 push	 ecx
  00267	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0026a	ff 55 c0	 call	 DWORD PTR tv254[ebp]
  0026d	3b f4		 cmp	 esi, esp
  0026f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 429  :                         break;

  00274	e9 9f 01 00 00	 jmp	 $LN1@WritePrefi
$LN21@WritePrefi:

; 430  :                     case 9:
; 431  :                         writer->Write(_number_format_info->NegativeSign);

  00279	8b 55 0c	 mov	 edx, DWORD PTR _writer$[ebp]
  0027c	8b 02		 mov	 eax, DWORD PTR [edx]
  0027e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00280	89 4d bc	 mov	 DWORD PTR tv266[ebp], ecx
  00283	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00286	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00289	05 5a 01 00 00	 add	 eax, 346		; 0000015aH
  0028e	8b f4		 mov	 esi, esp
  00290	50		 push	 eax
  00291	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00294	ff 55 bc	 call	 DWORD PTR tv266[ebp]
  00297	3b f4		 cmp	 esi, esp
  00299	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 432  :                         writer->Write(_number_format_info->CurrencySymbol);

  0029e	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  002a1	8b 11		 mov	 edx, DWORD PTR [ecx]
  002a3	8b 02		 mov	 eax, DWORD PTR [edx]
  002a5	89 45 b8	 mov	 DWORD PTR tv278[ebp], eax
  002a8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002ab	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  002ae	81 c2 38 01 00
	00		 add	 edx, 312		; 00000138H
  002b4	8b f4		 mov	 esi, esp
  002b6	52		 push	 edx
  002b7	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  002ba	ff 55 b8	 call	 DWORD PTR tv278[ebp]
  002bd	3b f4		 cmp	 esi, esp
  002bf	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 433  :                         writer->Write(L' ');

  002c4	8b 45 0c	 mov	 eax, DWORD PTR _writer$[ebp]
  002c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  002c9	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  002cc	89 55 b4	 mov	 DWORD PTR tv284[ebp], edx
  002cf	8b f4		 mov	 esi, esp
  002d1	6a 20		 push	 32			; 00000020H
  002d3	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  002d6	ff 55 b4	 call	 DWORD PTR tv284[ebp]
  002d9	3b f4		 cmp	 esi, esp
  002db	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 434  :                         break;

  002e0	e9 33 01 00 00	 jmp	 $LN1@WritePrefi
$LN22@WritePrefi:

; 435  :                     case 10:
; 436  :                         break;

  002e5	e9 2e 01 00 00	 jmp	 $LN1@WritePrefi
$LN23@WritePrefi:

; 437  :                     case 11:
; 438  :                         writer->Write(_number_format_info->CurrencySymbol);

  002ea	8b 45 0c	 mov	 eax, DWORD PTR _writer$[ebp]
  002ed	8b 08		 mov	 ecx, DWORD PTR [eax]
  002ef	8b 11		 mov	 edx, DWORD PTR [ecx]
  002f1	89 55 b0	 mov	 DWORD PTR tv296[ebp], edx
  002f4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002f7	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  002fa	81 c1 38 01 00
	00		 add	 ecx, 312		; 00000138H
  00300	8b f4		 mov	 esi, esp
  00302	51		 push	 ecx
  00303	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00306	ff 55 b0	 call	 DWORD PTR tv296[ebp]
  00309	3b f4		 cmp	 esi, esp
  0030b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 439  :                         writer->Write(L' ');

  00310	8b 55 0c	 mov	 edx, DWORD PTR _writer$[ebp]
  00313	8b 02		 mov	 eax, DWORD PTR [edx]
  00315	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00318	89 4d ac	 mov	 DWORD PTR tv302[ebp], ecx
  0031b	8b f4		 mov	 esi, esp
  0031d	6a 20		 push	 32			; 00000020H
  0031f	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00322	ff 55 ac	 call	 DWORD PTR tv302[ebp]
  00325	3b f4		 cmp	 esi, esp
  00327	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 440  :                         break;

  0032c	e9 e7 00 00 00	 jmp	 $LN1@WritePrefi
$LN24@WritePrefi:

; 441  :                     case 12:
; 442  :                         writer->Write(_number_format_info->CurrencySymbol);

  00331	8b 55 0c	 mov	 edx, DWORD PTR _writer$[ebp]
  00334	8b 02		 mov	 eax, DWORD PTR [edx]
  00336	8b 08		 mov	 ecx, DWORD PTR [eax]
  00338	89 4d a8	 mov	 DWORD PTR tv314[ebp], ecx
  0033b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0033e	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00341	05 38 01 00 00	 add	 eax, 312		; 00000138H
  00346	8b f4		 mov	 esi, esp
  00348	50		 push	 eax
  00349	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0034c	ff 55 a8	 call	 DWORD PTR tv314[ebp]
  0034f	3b f4		 cmp	 esi, esp
  00351	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 443  :                         writer->Write(L' ');

  00356	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00359	8b 11		 mov	 edx, DWORD PTR [ecx]
  0035b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0035e	89 45 a4	 mov	 DWORD PTR tv320[ebp], eax
  00361	8b f4		 mov	 esi, esp
  00363	6a 20		 push	 32			; 00000020H
  00365	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00368	ff 55 a4	 call	 DWORD PTR tv320[ebp]
  0036b	3b f4		 cmp	 esi, esp
  0036d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 444  :                         writer->Write(_number_format_info->NegativeSign);

  00372	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  00375	8b 11		 mov	 edx, DWORD PTR [ecx]
  00377	8b 02		 mov	 eax, DWORD PTR [edx]
  00379	89 45 a0	 mov	 DWORD PTR tv332[ebp], eax
  0037c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0037f	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00382	81 c2 5a 01 00
	00		 add	 edx, 346		; 0000015aH
  00388	8b f4		 mov	 esi, esp
  0038a	52		 push	 edx
  0038b	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0038e	ff 55 a0	 call	 DWORD PTR tv332[ebp]
  00391	3b f4		 cmp	 esi, esp
  00393	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 445  :                         break;

  00398	eb 7e		 jmp	 SHORT $LN1@WritePrefi
$LN25@WritePrefi:

; 446  :                     case 13:
; 447  :                         break;

  0039a	eb 7c		 jmp	 SHORT $LN1@WritePrefi
$LN26@WritePrefi:

; 448  :                     case 14:
; 449  :                         writer->Write(L'(');

  0039c	8b 45 0c	 mov	 eax, DWORD PTR _writer$[ebp]
  0039f	8b 08		 mov	 ecx, DWORD PTR [eax]
  003a1	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  003a4	89 55 9c	 mov	 DWORD PTR tv338[ebp], edx
  003a7	8b f4		 mov	 esi, esp
  003a9	6a 28		 push	 40			; 00000028H
  003ab	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  003ae	ff 55 9c	 call	 DWORD PTR tv338[ebp]
  003b1	3b f4		 cmp	 esi, esp
  003b3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 450  :                         writer->Write(_number_format_info->CurrencySymbol);

  003b8	8b 45 0c	 mov	 eax, DWORD PTR _writer$[ebp]
  003bb	8b 08		 mov	 ecx, DWORD PTR [eax]
  003bd	8b 11		 mov	 edx, DWORD PTR [ecx]
  003bf	89 55 98	 mov	 DWORD PTR tv350[ebp], edx
  003c2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003c5	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  003c8	81 c1 38 01 00
	00		 add	 ecx, 312		; 00000138H
  003ce	8b f4		 mov	 esi, esp
  003d0	51		 push	 ecx
  003d1	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  003d4	ff 55 98	 call	 DWORD PTR tv350[ebp]
  003d7	3b f4		 cmp	 esi, esp
  003d9	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 451  :                         writer->Write(L' ');

  003de	8b 55 0c	 mov	 edx, DWORD PTR _writer$[ebp]
  003e1	8b 02		 mov	 eax, DWORD PTR [edx]
  003e3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  003e6	89 4d 94	 mov	 DWORD PTR tv356[ebp], ecx
  003e9	8b f4		 mov	 esi, esp
  003eb	6a 20		 push	 32			; 00000020H
  003ed	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  003f0	ff 55 94	 call	 DWORD PTR tv356[ebp]
  003f3	3b f4		 cmp	 esi, esp
  003f5	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 452  :                         break;

  003fa	eb 1c		 jmp	 SHORT $LN1@WritePrefi
$LN27@WritePrefi:

; 453  :                     case 15:
; 454  :                         writer->Write(L'(');

  003fc	8b 55 0c	 mov	 edx, DWORD PTR _writer$[ebp]
  003ff	8b 02		 mov	 eax, DWORD PTR [edx]
  00401	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00404	89 4d 90	 mov	 DWORD PTR tv362[ebp], ecx
  00407	8b f4		 mov	 esi, esp
  00409	6a 28		 push	 40			; 00000028H
  0040b	8b 4d 0c	 mov	 ecx, DWORD PTR _writer$[ebp]
  0040e	ff 55 90	 call	 DWORD PTR tv362[ebp]
  00411	3b f4		 cmp	 esi, esp
  00413	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@WritePrefi:

; 455  :                         break;
; 456  :                     }
; 457  :                 }
; 458  :             }

  00418	5f		 pop	 edi
  00419	5e		 pop	 esi
  0041a	83 c4 70	 add	 esp, 112		; 00000070H
  0041d	3b ec		 cmp	 ebp, esp
  0041f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00424	8b e5		 mov	 esp, ebp
  00426	5d		 pop	 ebp
  00427	c2 08 00	 ret	 8
  0042a	66 90		 npad	 2
$LN29@WritePrefi:
  0042c	00 00 00 00	 DD	 $LN13@WritePrefi
  00430	00 00 00 00	 DD	 $LN14@WritePrefi
  00434	00 00 00 00	 DD	 $LN15@WritePrefi
  00438	00 00 00 00	 DD	 $LN16@WritePrefi
  0043c	00 00 00 00	 DD	 $LN17@WritePrefi
  00440	00 00 00 00	 DD	 $LN18@WritePrefi
  00444	00 00 00 00	 DD	 $LN19@WritePrefi
  00448	00 00 00 00	 DD	 $LN20@WritePrefi
  0044c	00 00 00 00	 DD	 $LN21@WritePrefi
  00450	00 00 00 00	 DD	 $LN22@WritePrefi
  00454	00 00 00 00	 DD	 $LN23@WritePrefi
  00458	00 00 00 00	 DD	 $LN24@WritePrefi
  0045c	00 00 00 00	 DD	 $LN25@WritePrefi
  00460	00 00 00 00	 DD	 $LN26@WritePrefi
  00464	00 00 00 00	 DD	 $LN27@WritePrefi
?WritePrefix@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXDPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::WritePrefix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WriteZeroValue@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z
_TEXT	SEGMENT
tv88 = -12						; size = 4
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_writer$ = 8						; size = 4
?WriteZeroValue@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::WriteZeroValue, COMDAT
; _this$ = ecx

; 368  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001f	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00024	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 369  :                 writer->Write(L'0');

  00029	8b 45 08	 mov	 eax, DWORD PTR _writer$[ebp]
  0002c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00031	89 55 f8	 mov	 DWORD PTR tv69[ebp], edx
  00034	8b f4		 mov	 esi, esp
  00036	6a 30		 push	 48			; 00000030H
  00038	8b 4d 08	 mov	 ecx, DWORD PTR _writer$[ebp]
  0003b	ff 55 f8	 call	 DWORD PTR tv69[ebp]
  0003e	3b f4		 cmp	 esi, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 370  :                 if (_precision > 0)

  00045	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00048	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0004c	7e 34		 jle	 SHORT $LN1@WriteZeroV

; 371  :                 {
; 372  :                     writer->Write(_number_format_info->Currency.DecimalSeparator);

  0004e	8b 4d 08	 mov	 ecx, DWORD PTR _writer$[ebp]
  00051	8b 11		 mov	 edx, DWORD PTR [ecx]
  00053	8b 02		 mov	 eax, DWORD PTR [edx]
  00055	89 45 f4	 mov	 DWORD PTR tv88[ebp], eax
  00058	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0005e	83 c2 04	 add	 edx, 4
  00061	8b f4		 mov	 esi, esp
  00063	52		 push	 edx
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _writer$[ebp]
  00067	ff 55 f4	 call	 DWORD PTR tv88[ebp]
  0006a	3b f4		 cmp	 esi, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 373  :                     writer->Write(L'0', _precision);

  00071	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00077	51		 push	 ecx
  00078	6a 30		 push	 48			; 00000030H
  0007a	8b 4d 08	 mov	 ecx, DWORD PTR _writer$[ebp]
  0007d	e8 00 00 00 00	 call	 ?Write@StringWriter@Internal@Core@Math@Palmtree@@QAEX_WI@Z ; Palmtree::Math::Core::Internal::StringWriter::Write
$LN1@WriteZeroV:

; 374  :                 }
; 375  :             }

  00082	5e		 pop	 esi
  00083	83 c4 0c	 add	 esp, 12			; 0000000cH
  00086	3b ec		 cmp	 ebp, esp
  00088	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c2 04 00	 ret	 4
?WriteZeroValue@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::WriteZeroValue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?GetDefaultPrecisionValue@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDefaultPrecisionValue@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::GetDefaultPrecisionValue, COMDAT
; _this$ = ecx

; 363  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 364  :                 return (_number_format_info->Currency.DecimalDigits);

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0001e	8b 01		 mov	 eax, DWORD PTR [ecx]

; 365  :             }

  00020	83 c4 04	 add	 esp, 4
  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?GetDefaultPrecisionValue@FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEHXZ ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::GetDefaultPrecisionValue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ??0FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@HPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_precision$ = 8						; size = 4
_number_format_info$ = 12				; size = 4
??0FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@HPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::FormatterTypeC, COMDAT
; _this$ = ecx

; 358  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 357  :                 : Formatter(L'C', precision, number_format_info)

  00018	8b 45 0c	 mov	 eax, DWORD PTR _number_format_info$[ebp]
  0001b	50		 push	 eax
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _precision$[ebp]
  0001f	51		 push	 ecx
  00020	6a 43		 push	 67			; 00000043H
  00022	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	e8 00 00 00 00	 call	 ??0Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@IAE@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::Formatter

; 358  :             {

  0002a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002d	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@

; 359  :             }

  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	83 c4 04	 add	 esp, 4
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
??0FormatterTypeC@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@HPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::FormatterTypeC::FormatterTypeC
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WriteDigit@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
_writer$ = 8						; size = 4
_d$ = 12						; size = 4
?WriteDigit@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::WriteDigit, COMDAT
; _this$ = ecx

; 346  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00018	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  0001d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 347  :                 writer->Write(L'0' + d);

  00022	8b 45 08	 mov	 eax, DWORD PTR _writer$[ebp]
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0002a	89 55 f8	 mov	 DWORD PTR tv71[ebp], edx
  0002d	8b 45 0c	 mov	 eax, DWORD PTR _d$[ebp]
  00030	83 c0 30	 add	 eax, 48			; 00000030H
  00033	8b f4		 mov	 esi, esp
  00035	50		 push	 eax
  00036	8b 4d 08	 mov	 ecx, DWORD PTR _writer$[ebp]
  00039	ff 55 f8	 call	 DWORD PTR tv71[ebp]
  0003c	3b f4		 cmp	 esi, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 348  :             }

  00043	5e		 pop	 esi
  00044	83 c4 08	 add	 esp, 8
  00047	3b ec		 cmp	 ebp, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 08 00	 ret	 8
?WriteDigit@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::WriteDigit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WriteTrailingWord@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z
_TEXT	SEGMENT
_r$ = -12						; size = 4
_this$ = -4						; size = 4
_writer$ = 8						; size = 4
_x$ = 12						; size = 4
?WriteTrailingWord@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::WriteTrailingWord, COMDAT
; _this$ = ecx

; 286  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001a	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  0001f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 287  :                 __UNIT_TYPE r;
; 288  :                 if (sizeof(__UNIT_TYPE) >= sizeof(_UINT64_T))

  00024	33 c0		 xor	 eax, eax
  00026	0f 84 a0 01 00
	00		 je	 $LN2@WriteTrail

; 289  :                 {
; 290  :                     x = _DIVREM_UNIT(0, x, 10, &r); WriteDigit(writer, (_UINT32_T)r);

  0002c	8d 4d f4	 lea	 ecx, DWORD PTR _r$[ebp]
  0002f	51		 push	 ecx
  00030	6a 0a		 push	 10			; 0000000aH
  00032	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp]
  00035	52		 push	 edx
  00036	6a 00		 push	 0
  00038	e8 00 00 00 00	 call	 __DIVREM_UNIT
  0003d	83 c4 10	 add	 esp, 16			; 00000010H
  00040	89 45 0c	 mov	 DWORD PTR _x$[ebp], eax
  00043	8b 45 f4	 mov	 eax, DWORD PTR _r$[ebp]
  00046	50		 push	 eax
  00047	8b 4d 08	 mov	 ecx, DWORD PTR _writer$[ebp]
  0004a	51		 push	 ecx
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	e8 00 00 00 00	 call	 ?WriteDigit@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::WriteDigit

; 291  :                     x = _DIVREM_UNIT(0, x, 10, &r); WriteDigit(writer, (_UINT32_T)r);

  00053	8d 55 f4	 lea	 edx, DWORD PTR _r$[ebp]
  00056	52		 push	 edx
  00057	6a 0a		 push	 10			; 0000000aH
  00059	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  0005c	50		 push	 eax
  0005d	6a 00		 push	 0
  0005f	e8 00 00 00 00	 call	 __DIVREM_UNIT
  00064	83 c4 10	 add	 esp, 16			; 00000010H
  00067	89 45 0c	 mov	 DWORD PTR _x$[ebp], eax
  0006a	8b 4d f4	 mov	 ecx, DWORD PTR _r$[ebp]
  0006d	51		 push	 ecx
  0006e	8b 55 08	 mov	 edx, DWORD PTR _writer$[ebp]
  00071	52		 push	 edx
  00072	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	e8 00 00 00 00	 call	 ?WriteDigit@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::WriteDigit

; 292  :                     x = _DIVREM_UNIT(0, x, 10, &r); WriteDigit(writer, (_UINT32_T)r);

  0007a	8d 45 f4	 lea	 eax, DWORD PTR _r$[ebp]
  0007d	50		 push	 eax
  0007e	6a 0a		 push	 10			; 0000000aH
  00080	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  00083	51		 push	 ecx
  00084	6a 00		 push	 0
  00086	e8 00 00 00 00	 call	 __DIVREM_UNIT
  0008b	83 c4 10	 add	 esp, 16			; 00000010H
  0008e	89 45 0c	 mov	 DWORD PTR _x$[ebp], eax
  00091	8b 55 f4	 mov	 edx, DWORD PTR _r$[ebp]
  00094	52		 push	 edx
  00095	8b 45 08	 mov	 eax, DWORD PTR _writer$[ebp]
  00098	50		 push	 eax
  00099	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009c	e8 00 00 00 00	 call	 ?WriteDigit@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::WriteDigit

; 293  :                     x = _DIVREM_UNIT(0, x, 10, &r); WriteDigit(writer, (_UINT32_T)r);

  000a1	8d 4d f4	 lea	 ecx, DWORD PTR _r$[ebp]
  000a4	51		 push	 ecx
  000a5	6a 0a		 push	 10			; 0000000aH
  000a7	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp]
  000aa	52		 push	 edx
  000ab	6a 00		 push	 0
  000ad	e8 00 00 00 00	 call	 __DIVREM_UNIT
  000b2	83 c4 10	 add	 esp, 16			; 00000010H
  000b5	89 45 0c	 mov	 DWORD PTR _x$[ebp], eax
  000b8	8b 45 f4	 mov	 eax, DWORD PTR _r$[ebp]
  000bb	50		 push	 eax
  000bc	8b 4d 08	 mov	 ecx, DWORD PTR _writer$[ebp]
  000bf	51		 push	 ecx
  000c0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c3	e8 00 00 00 00	 call	 ?WriteDigit@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::WriteDigit

; 294  :                     x = _DIVREM_UNIT(0, x, 10, &r); WriteDigit(writer, (_UINT32_T)r);

  000c8	8d 55 f4	 lea	 edx, DWORD PTR _r$[ebp]
  000cb	52		 push	 edx
  000cc	6a 0a		 push	 10			; 0000000aH
  000ce	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  000d1	50		 push	 eax
  000d2	6a 00		 push	 0
  000d4	e8 00 00 00 00	 call	 __DIVREM_UNIT
  000d9	83 c4 10	 add	 esp, 16			; 00000010H
  000dc	89 45 0c	 mov	 DWORD PTR _x$[ebp], eax
  000df	8b 4d f4	 mov	 ecx, DWORD PTR _r$[ebp]
  000e2	51		 push	 ecx
  000e3	8b 55 08	 mov	 edx, DWORD PTR _writer$[ebp]
  000e6	52		 push	 edx
  000e7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ea	e8 00 00 00 00	 call	 ?WriteDigit@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::WriteDigit

; 295  :                     x = _DIVREM_UNIT(0, x, 10, &r); WriteDigit(writer, (_UINT32_T)r);

  000ef	8d 45 f4	 lea	 eax, DWORD PTR _r$[ebp]
  000f2	50		 push	 eax
  000f3	6a 0a		 push	 10			; 0000000aH
  000f5	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  000f8	51		 push	 ecx
  000f9	6a 00		 push	 0
  000fb	e8 00 00 00 00	 call	 __DIVREM_UNIT
  00100	83 c4 10	 add	 esp, 16			; 00000010H
  00103	89 45 0c	 mov	 DWORD PTR _x$[ebp], eax
  00106	8b 55 f4	 mov	 edx, DWORD PTR _r$[ebp]
  00109	52		 push	 edx
  0010a	8b 45 08	 mov	 eax, DWORD PTR _writer$[ebp]
  0010d	50		 push	 eax
  0010e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00111	e8 00 00 00 00	 call	 ?WriteDigit@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::WriteDigit

; 296  :                     x = _DIVREM_UNIT(0, x, 10, &r); WriteDigit(writer, (_UINT32_T)r);

  00116	8d 4d f4	 lea	 ecx, DWORD PTR _r$[ebp]
  00119	51		 push	 ecx
  0011a	6a 0a		 push	 10			; 0000000aH
  0011c	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp]
  0011f	52		 push	 edx
  00120	6a 00		 push	 0
  00122	e8 00 00 00 00	 call	 __DIVREM_UNIT
  00127	83 c4 10	 add	 esp, 16			; 00000010H
  0012a	89 45 0c	 mov	 DWORD PTR _x$[ebp], eax
  0012d	8b 45 f4	 mov	 eax, DWORD PTR _r$[ebp]
  00130	50		 push	 eax
  00131	8b 4d 08	 mov	 ecx, DWORD PTR _writer$[ebp]
  00134	51		 push	 ecx
  00135	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00138	e8 00 00 00 00	 call	 ?WriteDigit@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::WriteDigit

; 297  :                     x = _DIVREM_UNIT(0, x, 10, &r); WriteDigit(writer, (_UINT32_T)r);

  0013d	8d 55 f4	 lea	 edx, DWORD PTR _r$[ebp]
  00140	52		 push	 edx
  00141	6a 0a		 push	 10			; 0000000aH
  00143	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00146	50		 push	 eax
  00147	6a 00		 push	 0
  00149	e8 00 00 00 00	 call	 __DIVREM_UNIT
  0014e	83 c4 10	 add	 esp, 16			; 00000010H
  00151	89 45 0c	 mov	 DWORD PTR _x$[ebp], eax
  00154	8b 4d f4	 mov	 ecx, DWORD PTR _r$[ebp]
  00157	51		 push	 ecx
  00158	8b 55 08	 mov	 edx, DWORD PTR _writer$[ebp]
  0015b	52		 push	 edx
  0015c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0015f	e8 00 00 00 00	 call	 ?WriteDigit@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::WriteDigit

; 298  :                     x = _DIVREM_UNIT(0, x, 10, &r); WriteDigit(writer, (_UINT32_T)r);

  00164	8d 45 f4	 lea	 eax, DWORD PTR _r$[ebp]
  00167	50		 push	 eax
  00168	6a 0a		 push	 10			; 0000000aH
  0016a	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  0016d	51		 push	 ecx
  0016e	6a 00		 push	 0
  00170	e8 00 00 00 00	 call	 __DIVREM_UNIT
  00175	83 c4 10	 add	 esp, 16			; 00000010H
  00178	89 45 0c	 mov	 DWORD PTR _x$[ebp], eax
  0017b	8b 55 f4	 mov	 edx, DWORD PTR _r$[ebp]
  0017e	52		 push	 edx
  0017f	8b 45 08	 mov	 eax, DWORD PTR _writer$[ebp]
  00182	50		 push	 eax
  00183	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00186	e8 00 00 00 00	 call	 ?WriteDigit@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::WriteDigit

; 299  :                     x = _DIVREM_UNIT(0, x, 10, &r); WriteDigit(writer, (_UINT32_T)r);

  0018b	8d 4d f4	 lea	 ecx, DWORD PTR _r$[ebp]
  0018e	51		 push	 ecx
  0018f	6a 0a		 push	 10			; 0000000aH
  00191	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp]
  00194	52		 push	 edx
  00195	6a 00		 push	 0
  00197	e8 00 00 00 00	 call	 __DIVREM_UNIT
  0019c	83 c4 10	 add	 esp, 16			; 00000010H
  0019f	89 45 0c	 mov	 DWORD PTR _x$[ebp], eax
  001a2	8b 45 f4	 mov	 eax, DWORD PTR _r$[ebp]
  001a5	50		 push	 eax
  001a6	8b 4d 08	 mov	 ecx, DWORD PTR _writer$[ebp]
  001a9	51		 push	 ecx
  001aa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001ad	e8 00 00 00 00	 call	 ?WriteDigit@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::WriteDigit

; 300  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 301  :                     if (sizeof(r) == sizeof(_UINT64_T))

  001b2	33 d2		 xor	 edx, edx
  001b4	74 0c		 je	 SHORT $LN3@WriteTrail

; 302  :                         AddToDIV64Counter(10);

  001b6	6a 0a		 push	 10			; 0000000aH
  001b8	e8 00 00 00 00	 call	 ?AddToDIV64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV64Counter
  001bd	83 c4 04	 add	 esp, 4

; 303  :                     else

  001c0	eb 0a		 jmp	 SHORT $LN2@WriteTrail
$LN3@WriteTrail:

; 304  :                         AddToDIV32Counter(10);

  001c2	6a 0a		 push	 10			; 0000000aH
  001c4	e8 00 00 00 00	 call	 ?AddToDIV32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV32Counter
  001c9	83 c4 04	 add	 esp, 4
$LN2@WriteTrail:

; 305  : #endif
; 306  :                 }
; 307  :                 if (sizeof(__UNIT_TYPE) >= sizeof(_UINT32_T))

  001cc	b8 01 00 00 00	 mov	 eax, 1
  001d1	85 c0		 test	 eax, eax
  001d3	0f 84 dd 00 00
	00		 je	 $LN5@WriteTrail

; 308  :                 {
; 309  :                     x = _DIVREM_UNIT(0, x, 10, &r); WriteDigit(writer, (_UINT32_T)r);

  001d9	8d 4d f4	 lea	 ecx, DWORD PTR _r$[ebp]
  001dc	51		 push	 ecx
  001dd	6a 0a		 push	 10			; 0000000aH
  001df	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp]
  001e2	52		 push	 edx
  001e3	6a 00		 push	 0
  001e5	e8 00 00 00 00	 call	 __DIVREM_UNIT
  001ea	83 c4 10	 add	 esp, 16			; 00000010H
  001ed	89 45 0c	 mov	 DWORD PTR _x$[ebp], eax
  001f0	8b 45 f4	 mov	 eax, DWORD PTR _r$[ebp]
  001f3	50		 push	 eax
  001f4	8b 4d 08	 mov	 ecx, DWORD PTR _writer$[ebp]
  001f7	51		 push	 ecx
  001f8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001fb	e8 00 00 00 00	 call	 ?WriteDigit@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::WriteDigit

; 310  :                     x = _DIVREM_UNIT(0, x, 10, &r); WriteDigit(writer, (_UINT32_T)r);

  00200	8d 55 f4	 lea	 edx, DWORD PTR _r$[ebp]
  00203	52		 push	 edx
  00204	6a 0a		 push	 10			; 0000000aH
  00206	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  00209	50		 push	 eax
  0020a	6a 00		 push	 0
  0020c	e8 00 00 00 00	 call	 __DIVREM_UNIT
  00211	83 c4 10	 add	 esp, 16			; 00000010H
  00214	89 45 0c	 mov	 DWORD PTR _x$[ebp], eax
  00217	8b 4d f4	 mov	 ecx, DWORD PTR _r$[ebp]
  0021a	51		 push	 ecx
  0021b	8b 55 08	 mov	 edx, DWORD PTR _writer$[ebp]
  0021e	52		 push	 edx
  0021f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00222	e8 00 00 00 00	 call	 ?WriteDigit@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::WriteDigit

; 311  :                     x = _DIVREM_UNIT(0, x, 10, &r); WriteDigit(writer, (_UINT32_T)r);

  00227	8d 45 f4	 lea	 eax, DWORD PTR _r$[ebp]
  0022a	50		 push	 eax
  0022b	6a 0a		 push	 10			; 0000000aH
  0022d	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  00230	51		 push	 ecx
  00231	6a 00		 push	 0
  00233	e8 00 00 00 00	 call	 __DIVREM_UNIT
  00238	83 c4 10	 add	 esp, 16			; 00000010H
  0023b	89 45 0c	 mov	 DWORD PTR _x$[ebp], eax
  0023e	8b 55 f4	 mov	 edx, DWORD PTR _r$[ebp]
  00241	52		 push	 edx
  00242	8b 45 08	 mov	 eax, DWORD PTR _writer$[ebp]
  00245	50		 push	 eax
  00246	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00249	e8 00 00 00 00	 call	 ?WriteDigit@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::WriteDigit

; 312  :                     x = _DIVREM_UNIT(0, x, 10, &r); WriteDigit(writer, (_UINT32_T)r);

  0024e	8d 4d f4	 lea	 ecx, DWORD PTR _r$[ebp]
  00251	51		 push	 ecx
  00252	6a 0a		 push	 10			; 0000000aH
  00254	8b 55 0c	 mov	 edx, DWORD PTR _x$[ebp]
  00257	52		 push	 edx
  00258	6a 00		 push	 0
  0025a	e8 00 00 00 00	 call	 __DIVREM_UNIT
  0025f	83 c4 10	 add	 esp, 16			; 00000010H
  00262	89 45 0c	 mov	 DWORD PTR _x$[ebp], eax
  00265	8b 45 f4	 mov	 eax, DWORD PTR _r$[ebp]
  00268	50		 push	 eax
  00269	8b 4d 08	 mov	 ecx, DWORD PTR _writer$[ebp]
  0026c	51		 push	 ecx
  0026d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00270	e8 00 00 00 00	 call	 ?WriteDigit@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::WriteDigit

; 313  :                     x = _DIVREM_UNIT(0, x, 10, &r); WriteDigit(writer, (_UINT32_T)r);

  00275	8d 55 f4	 lea	 edx, DWORD PTR _r$[ebp]
  00278	52		 push	 edx
  00279	6a 0a		 push	 10			; 0000000aH
  0027b	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  0027e	50		 push	 eax
  0027f	6a 00		 push	 0
  00281	e8 00 00 00 00	 call	 __DIVREM_UNIT
  00286	83 c4 10	 add	 esp, 16			; 00000010H
  00289	89 45 0c	 mov	 DWORD PTR _x$[ebp], eax
  0028c	8b 4d f4	 mov	 ecx, DWORD PTR _r$[ebp]
  0028f	51		 push	 ecx
  00290	8b 55 08	 mov	 edx, DWORD PTR _writer$[ebp]
  00293	52		 push	 edx
  00294	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00297	e8 00 00 00 00	 call	 ?WriteDigit@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::WriteDigit

; 314  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 315  :                     if (sizeof(r) == sizeof(_UINT64_T))

  0029c	33 c0		 xor	 eax, eax
  0029e	74 0c		 je	 SHORT $LN6@WriteTrail

; 316  :                         AddToDIV64Counter(5);

  002a0	6a 05		 push	 5
  002a2	e8 00 00 00 00	 call	 ?AddToDIV64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV64Counter
  002a7	83 c4 04	 add	 esp, 4

; 317  :                     else

  002aa	eb 0a		 jmp	 SHORT $LN5@WriteTrail
$LN6@WriteTrail:

; 318  :                         AddToDIV32Counter(5);

  002ac	6a 05		 push	 5
  002ae	e8 00 00 00 00	 call	 ?AddToDIV32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV32Counter
  002b3	83 c4 04	 add	 esp, 4
$LN5@WriteTrail:

; 319  : #endif
; 320  :                 }
; 321  :                 if (sizeof(__UNIT_TYPE) >= sizeof(_UINT16_T))

  002b6	b9 01 00 00 00	 mov	 ecx, 1
  002bb	85 c9		 test	 ecx, ecx
  002bd	74 68		 je	 SHORT $LN8@WriteTrail

; 322  :                 {
; 323  :                     x = _DIVREM_UNIT(0, x, 10, &r); WriteDigit(writer, (_UINT32_T)r);

  002bf	8d 55 f4	 lea	 edx, DWORD PTR _r$[ebp]
  002c2	52		 push	 edx
  002c3	6a 0a		 push	 10			; 0000000aH
  002c5	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  002c8	50		 push	 eax
  002c9	6a 00		 push	 0
  002cb	e8 00 00 00 00	 call	 __DIVREM_UNIT
  002d0	83 c4 10	 add	 esp, 16			; 00000010H
  002d3	89 45 0c	 mov	 DWORD PTR _x$[ebp], eax
  002d6	8b 4d f4	 mov	 ecx, DWORD PTR _r$[ebp]
  002d9	51		 push	 ecx
  002da	8b 55 08	 mov	 edx, DWORD PTR _writer$[ebp]
  002dd	52		 push	 edx
  002de	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002e1	e8 00 00 00 00	 call	 ?WriteDigit@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::WriteDigit

; 324  :                     x = _DIVREM_UNIT(0, x, 10, &r); WriteDigit(writer, (_UINT32_T)r);

  002e6	8d 45 f4	 lea	 eax, DWORD PTR _r$[ebp]
  002e9	50		 push	 eax
  002ea	6a 0a		 push	 10			; 0000000aH
  002ec	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  002ef	51		 push	 ecx
  002f0	6a 00		 push	 0
  002f2	e8 00 00 00 00	 call	 __DIVREM_UNIT
  002f7	83 c4 10	 add	 esp, 16			; 00000010H
  002fa	89 45 0c	 mov	 DWORD PTR _x$[ebp], eax
  002fd	8b 55 f4	 mov	 edx, DWORD PTR _r$[ebp]
  00300	52		 push	 edx
  00301	8b 45 08	 mov	 eax, DWORD PTR _writer$[ebp]
  00304	50		 push	 eax
  00305	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00308	e8 00 00 00 00	 call	 ?WriteDigit@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::WriteDigit

; 325  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 326  :                     if (sizeof(r) == sizeof(_UINT64_T))

  0030d	33 c9		 xor	 ecx, ecx
  0030f	74 0c		 je	 SHORT $LN9@WriteTrail

; 327  :                         AddToDIV64Counter(2);

  00311	6a 02		 push	 2
  00313	e8 00 00 00 00	 call	 ?AddToDIV64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV64Counter
  00318	83 c4 04	 add	 esp, 4

; 328  :                     else

  0031b	eb 0a		 jmp	 SHORT $LN8@WriteTrail
$LN9@WriteTrail:

; 329  :                         AddToDIV32Counter(2);

  0031d	6a 02		 push	 2
  0031f	e8 00 00 00 00	 call	 ?AddToDIV32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV32Counter
  00324	83 c4 04	 add	 esp, 4
$LN8@WriteTrail:

; 330  : #endif
; 331  :                 }
; 332  :                 if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))

  00327	ba 01 00 00 00	 mov	 edx, 1
  0032c	85 d2		 test	 edx, edx
  0032e	74 47		 je	 SHORT $LN1@WriteTrail

; 333  :                 {
; 334  :                     x = _DIVREM_UNIT(0, x, 10, &r); WriteDigit(writer, (_UINT32_T)r);

  00330	8d 45 f4	 lea	 eax, DWORD PTR _r$[ebp]
  00333	50		 push	 eax
  00334	6a 0a		 push	 10			; 0000000aH
  00336	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  00339	51		 push	 ecx
  0033a	6a 00		 push	 0
  0033c	e8 00 00 00 00	 call	 __DIVREM_UNIT
  00341	83 c4 10	 add	 esp, 16			; 00000010H
  00344	89 45 0c	 mov	 DWORD PTR _x$[ebp], eax
  00347	8b 55 f4	 mov	 edx, DWORD PTR _r$[ebp]
  0034a	52		 push	 edx
  0034b	8b 45 08	 mov	 eax, DWORD PTR _writer$[ebp]
  0034e	50		 push	 eax
  0034f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00352	e8 00 00 00 00	 call	 ?WriteDigit@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::WriteDigit

; 335  :                     WriteDigit(writer, (_UINT32_T)x);

  00357	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  0035a	51		 push	 ecx
  0035b	8b 55 08	 mov	 edx, DWORD PTR _writer$[ebp]
  0035e	52		 push	 edx
  0035f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00362	e8 00 00 00 00	 call	 ?WriteDigit@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::WriteDigit

; 336  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 337  :                     if (sizeof(r) == sizeof(_UINT64_T))

  00367	33 c0		 xor	 eax, eax
  00369	74 07		 je	 SHORT $LN12@WriteTrail

; 338  :                         IncrementDIV64Counter();

  0036b	e8 00 00 00 00	 call	 ?IncrementDIV64Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementDIV64Counter

; 339  :                     else

  00370	eb 05		 jmp	 SHORT $LN1@WriteTrail
$LN12@WriteTrail:

; 340  :                         IncrementDIV32Counter();

  00372	e8 00 00 00 00	 call	 ?IncrementDIV32Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementDIV32Counter
$LN1@WriteTrail:

; 341  : #endif
; 342  :                 }
; 343  :             }

  00377	52		 push	 edx
  00378	8b cd		 mov	 ecx, ebp
  0037a	50		 push	 eax
  0037b	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN17@WriteTrail
  00381	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00386	58		 pop	 eax
  00387	5a		 pop	 edx
  00388	83 c4 10	 add	 esp, 16			; 00000010H
  0038b	3b ec		 cmp	 ebp, esp
  0038d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00392	8b e5		 mov	 esp, ebp
  00394	5d		 pop	 ebp
  00395	c2 08 00	 ret	 8
$LN17@WriteTrail:
  00398	01 00 00 00	 DD	 1
  0039c	00 00 00 00	 DD	 $LN16@WriteTrail
$LN16@WriteTrail:
  003a0	f4 ff ff ff	 DD	 -12			; fffffff4H
  003a4	04 00 00 00	 DD	 4
  003a8	00 00 00 00	 DD	 $LN15@WriteTrail
$LN15@WriteTrail:
  003ac	72		 DB	 114			; 00000072H
  003ad	00		 DB	 0
?WriteTrailingWord@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::WriteTrailingWord
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?WriteLeadingOneWord@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z
_TEXT	SEGMENT
_r$ = -12						; size = 4
_this$ = -4						; size = 4
_writer$ = 8						; size = 4
_x$ = 12						; size = 4
?WriteLeadingOneWord@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::WriteLeadingOneWord, COMDAT
; _this$ = ecx

; 269  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001a	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  0001f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
$LN4@WriteLeadi:

; 270  :                 __UNIT_TYPE r;
; 271  :                 do
; 272  :                 {
; 273  :                     x = _DIVREM_UNIT(0, x, 10, &r);

  00024	8d 45 f4	 lea	 eax, DWORD PTR _r$[ebp]
  00027	50		 push	 eax
  00028	6a 0a		 push	 10			; 0000000aH
  0002a	8b 4d 0c	 mov	 ecx, DWORD PTR _x$[ebp]
  0002d	51		 push	 ecx
  0002e	6a 00		 push	 0
  00030	e8 00 00 00 00	 call	 __DIVREM_UNIT
  00035	83 c4 10	 add	 esp, 16			; 00000010H
  00038	89 45 0c	 mov	 DWORD PTR _x$[ebp], eax

; 274  :                     WriteDigit(writer, (_UINT32_T)r);

  0003b	8b 55 f4	 mov	 edx, DWORD PTR _r$[ebp]
  0003e	52		 push	 edx
  0003f	8b 45 08	 mov	 eax, DWORD PTR _writer$[ebp]
  00042	50		 push	 eax
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ?WriteDigit@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::WriteDigit

; 275  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 276  :                     if (sizeof(r) == sizeof(_UINT64_T))

  0004b	33 c9		 xor	 ecx, ecx
  0004d	74 07		 je	 SHORT $LN5@WriteLeadi

; 277  :                         IncrementDIV64Counter();

  0004f	e8 00 00 00 00	 call	 ?IncrementDIV64Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementDIV64Counter

; 278  :                     else

  00054	eb 05		 jmp	 SHORT $LN2@WriteLeadi
$LN5@WriteLeadi:

; 279  :                         IncrementDIV32Counter();

  00056	e8 00 00 00 00	 call	 ?IncrementDIV32Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementDIV32Counter
$LN2@WriteLeadi:

; 280  : #endif
; 281  :                 } while (x != 0);

  0005b	83 7d 0c 00	 cmp	 DWORD PTR _x$[ebp], 0
  0005f	75 c3		 jne	 SHORT $LN4@WriteLeadi

; 282  :             }

  00061	52		 push	 edx
  00062	8b cd		 mov	 ecx, ebp
  00064	50		 push	 eax
  00065	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@WriteLeadi
  0006b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00070	58		 pop	 eax
  00071	5a		 pop	 edx
  00072	83 c4 10	 add	 esp, 16			; 00000010H
  00075	3b ec		 cmp	 ebp, esp
  00077	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c2 08 00	 ret	 8
  00082	66 90		 npad	 2
$LN10@WriteLeadi:
  00084	01 00 00 00	 DD	 1
  00088	00 00 00 00	 DD	 $LN9@WriteLeadi
$LN9@WriteLeadi:
  0008c	f4 ff ff ff	 DD	 -12			; fffffff4H
  00090	04 00 00 00	 DD	 4
  00094	00 00 00 00	 DD	 $LN8@WriteLeadi
$LN8@WriteLeadi:
  00098	72		 DB	 114			; 00000072H
  00099	00		 DB	 0
?WriteLeadingOneWord@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::WriteLeadingOneWord
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?ConstructSimpleNumberSequence@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEPA_WPAIIPA_WI@Z
_TEXT	SEGMENT
_in_count$ = -40					; size = 4
_in_ptr$ = -36						; size = 4
_simple_number_sequence_writer$ = -28			; size = 20
_this$ = -4						; size = 4
_in_buf$ = 8						; size = 4
_in_buf_count$ = 12					; size = 4
_out_buf$ = 16						; size = 4
_out_buf_count$ = 20					; size = 4
?ConstructSimpleNumberSequence@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEPA_WPAIIPA_WI@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::ConstructSimpleNumberSequence, COMDAT
; _this$ = ecx

; 252  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	57		 push	 edi
  00007	51		 push	 ecx
  00008	8d 7d d8	 lea	 edi, DWORD PTR [ebp-40]
  0000b	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	59		 pop	 ecx
  00018	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 253  :                 ReverseStringWriter simple_number_sequence_writer(out_buf, out_buf_count);

  00025	8b 45 14	 mov	 eax, DWORD PTR _out_buf_count$[ebp]
  00028	50		 push	 eax
  00029	8b 4d 10	 mov	 ecx, DWORD PTR _out_buf$[ebp]
  0002c	51		 push	 ecx
  0002d	8d 4d e4	 lea	 ecx, DWORD PTR _simple_number_sequence_writer$[ebp]
  00030	e8 00 00 00 00	 call	 ??0ReverseStringWriter@Internal@Core@Math@Palmtree@@QAE@PA_WI@Z ; Palmtree::Math::Core::Internal::ReverseStringWriter::ReverseStringWriter

; 254  : 
; 255  :                 __UNIT_TYPE* in_ptr = in_buf;

  00035	8b 55 08	 mov	 edx, DWORD PTR _in_buf$[ebp]
  00038	89 55 dc	 mov	 DWORD PTR _in_ptr$[ebp], edx

; 256  :                 __UNIT_TYPE in_count = in_buf_count - 1;

  0003b	8b 45 0c	 mov	 eax, DWORD PTR _in_buf_count$[ebp]
  0003e	83 e8 01	 sub	 eax, 1
  00041	89 45 d8	 mov	 DWORD PTR _in_count$[ebp], eax
$LN2@ConstructS:

; 257  :                 while (in_count != 0)

  00044	83 7d d8 00	 cmp	 DWORD PTR _in_count$[ebp], 0
  00048	74 26		 je	 SHORT $LN3@ConstructS

; 258  :                 {
; 259  :                     WriteTrailingWord(&simple_number_sequence_writer, *in_ptr);

  0004a	8b 4d dc	 mov	 ecx, DWORD PTR _in_ptr$[ebp]
  0004d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004f	52		 push	 edx
  00050	8d 45 e4	 lea	 eax, DWORD PTR _simple_number_sequence_writer$[ebp]
  00053	50		 push	 eax
  00054	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	e8 00 00 00 00	 call	 ?WriteTrailingWord@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::WriteTrailingWord

; 260  :                     ++in_ptr;

  0005c	8b 4d dc	 mov	 ecx, DWORD PTR _in_ptr$[ebp]
  0005f	83 c1 04	 add	 ecx, 4
  00062	89 4d dc	 mov	 DWORD PTR _in_ptr$[ebp], ecx

; 261  :                     --in_count;

  00065	8b 55 d8	 mov	 edx, DWORD PTR _in_count$[ebp]
  00068	83 ea 01	 sub	 edx, 1
  0006b	89 55 d8	 mov	 DWORD PTR _in_count$[ebp], edx

; 262  :                 }

  0006e	eb d4		 jmp	 SHORT $LN2@ConstructS
$LN3@ConstructS:

; 263  :                 WriteLeadingOneWord(&simple_number_sequence_writer, *in_ptr);

  00070	8b 45 dc	 mov	 eax, DWORD PTR _in_ptr$[ebp]
  00073	8b 08		 mov	 ecx, DWORD PTR [eax]
  00075	51		 push	 ecx
  00076	8d 55 e4	 lea	 edx, DWORD PTR _simple_number_sequence_writer$[ebp]
  00079	52		 push	 edx
  0007a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	e8 00 00 00 00	 call	 ?WriteLeadingOneWord@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEXPAVStringWriter@3456@I@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::WriteLeadingOneWord

; 264  :                 return (simple_number_sequence_writer.GetString());

  00082	8d 4d e4	 lea	 ecx, DWORD PTR _simple_number_sequence_writer$[ebp]
  00085	e8 00 00 00 00	 call	 ?GetString@ReverseStringWriter@Internal@Core@Math@Palmtree@@UAEPA_WXZ ; Palmtree::Math::Core::Internal::ReverseStringWriter::GetString

; 265  :             }

  0008a	52		 push	 edx
  0008b	8b cd		 mov	 ecx, ebp
  0008d	50		 push	 eax
  0008e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@ConstructS
  00094	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00099	58		 pop	 eax
  0009a	5a		 pop	 edx
  0009b	5f		 pop	 edi
  0009c	83 c4 28	 add	 esp, 40			; 00000028H
  0009f	3b ec		 cmp	 ebp, esp
  000a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 10 00	 ret	 16			; 00000010H
$LN7@ConstructS:
  000ac	01 00 00 00	 DD	 1
  000b0	00 00 00 00	 DD	 $LN6@ConstructS
$LN6@ConstructS:
  000b4	e4 ff ff ff	 DD	 -28			; ffffffe4H
  000b8	14 00 00 00	 DD	 20			; 00000014H
  000bc	00 00 00 00	 DD	 $LN5@ConstructS
$LN5@ConstructS:
  000c0	73		 DB	 115			; 00000073H
  000c1	69		 DB	 105			; 00000069H
  000c2	6d		 DB	 109			; 0000006dH
  000c3	70		 DB	 112			; 00000070H
  000c4	6c		 DB	 108			; 0000006cH
  000c5	65		 DB	 101			; 00000065H
  000c6	5f		 DB	 95			; 0000005fH
  000c7	6e		 DB	 110			; 0000006eH
  000c8	75		 DB	 117			; 00000075H
  000c9	6d		 DB	 109			; 0000006dH
  000ca	62		 DB	 98			; 00000062H
  000cb	65		 DB	 101			; 00000065H
  000cc	72		 DB	 114			; 00000072H
  000cd	5f		 DB	 95			; 0000005fH
  000ce	73		 DB	 115			; 00000073H
  000cf	65		 DB	 101			; 00000065H
  000d0	71		 DB	 113			; 00000071H
  000d1	75		 DB	 117			; 00000075H
  000d2	65		 DB	 101			; 00000065H
  000d3	6e		 DB	 110			; 0000006eH
  000d4	63		 DB	 99			; 00000063H
  000d5	65		 DB	 101			; 00000065H
  000d6	5f		 DB	 95			; 0000005fH
  000d7	77		 DB	 119			; 00000077H
  000d8	72		 DB	 114			; 00000072H
  000d9	69		 DB	 105			; 00000069H
  000da	74		 DB	 116			; 00000074H
  000db	65		 DB	 101			; 00000065H
  000dc	72		 DB	 114			; 00000072H
  000dd	00		 DB	 0
?ConstructSimpleNumberSequence@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEPA_WPAIIPA_WI@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::ConstructSimpleNumberSequence
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?ConvertAs10nBasedNumber@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEIPAU__tag_NUMBER_HEADER@3456@PAI@Z
_TEXT	SEGMENT
$T2 = -80						; size = 4
_temp$3 = -76						; size = 4
_r_value$4 = -68					; size = 4
_work_u_count$ = -60					; size = 4
_r_ptr$ = -56						; size = 4
_q_ptr$ = -52						; size = 4
_u_ptr$ = -48						; size = 4
_work_bit_count$ = -44					; size = 4
_root$ = -36						; size = 16
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_x$ = 8							; size = 4
_r_buf$ = 12						; size = 4
?ConvertAs10nBasedNumber@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEIPAU__tag_NUMBER_HEADER@3456@PAI@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::ConvertAs10nBasedNumber, COMDAT
; _this$ = ecx

; 227  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ConvertAs10nBasedNumber@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEIPAU__tag_NUMBER_HEADER@3456@PAI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	57		 push	 edi
  00015	51		 push	 ecx
  00016	8d 7d b0	 lea	 edi, DWORD PTR [ebp-80]
  00019	b9 11 00 00 00	 mov	 ecx, 17			; 00000011H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	59		 pop	 ecx
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	33 c5		 xor	 eax, ebp
  0002d	50		 push	 eax
  0002e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00031	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00037	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  0003f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 228  :                 ResourceHolderUINT root;

  00044	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00047	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 229  :                 __UNIT_TYPE work_bit_count = x->UNIT_BIT_COUNT + __UNIT_TYPE_BIT_COUNT;

  00053	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00056	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00059	83 c1 20	 add	 ecx, 32			; 00000020H
  0005c	89 4d d4	 mov	 DWORD PTR _work_bit_count$[ebp], ecx

; 230  :                 __UNIT_TYPE* u_ptr = root.AllocateBlock(work_bit_count);

  0005f	8b 55 d4	 mov	 edx, DWORD PTR _work_bit_count$[ebp]
  00062	52		 push	 edx
  00063	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00066	e8 00 00 00 00	 call	 ?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAII@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
  0006b	89 45 d0	 mov	 DWORD PTR _u_ptr$[ebp], eax

; 231  :                 __UNIT_TYPE* q_ptr = root.AllocateBlock(work_bit_count);

  0006e	8b 45 d4	 mov	 eax, DWORD PTR _work_bit_count$[ebp]
  00071	50		 push	 eax
  00072	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00075	e8 00 00 00 00	 call	 ?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAII@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
  0007a	89 45 cc	 mov	 DWORD PTR _q_ptr$[ebp], eax

; 232  :                 _COPY_MEMORY_UNIT(u_ptr, x->BLOCK, x->BLOCK_COUNT);

  0007d	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00080	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00083	52		 push	 edx
  00084	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00087	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0008a	51		 push	 ecx
  0008b	8b 55 d0	 mov	 edx, DWORD PTR _u_ptr$[ebp]
  0008e	52		 push	 edx
  0008f	e8 00 00 00 00	 call	 __COPY_MEMORY_UNIT
  00094	83 c4 0c	 add	 esp, 12			; 0000000cH

; 233  :                 __UNIT_TYPE* r_ptr = r_buf;

  00097	8b 45 0c	 mov	 eax, DWORD PTR _r_buf$[ebp]
  0009a	89 45 c8	 mov	 DWORD PTR _r_ptr$[ebp], eax

; 234  :                 __UNIT_TYPE work_u_count = _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT);

  0009d	6a 20		 push	 32			; 00000020H
  0009f	8b 4d d4	 mov	 ecx, DWORD PTR _work_bit_count$[ebp]
  000a2	51		 push	 ecx
  000a3	e8 00 00 00 00	 call	 __DIVIDE_CEILING_UNIT
  000a8	83 c4 08	 add	 esp, 8
  000ab	89 45 c4	 mov	 DWORD PTR _work_u_count$[ebp], eax
$LN2@ConvertAs1:

; 235  :                 while (work_u_count > 0)

  000ae	83 7d c4 00	 cmp	 DWORD PTR _work_u_count$[ebp], 0
  000b2	76 7a		 jbe	 SHORT $LN3@ConvertAs1

; 236  :                 {
; 237  :                     root.ClearBlock(q_ptr);

  000b4	8b 55 cc	 mov	 edx, DWORD PTR _q_ptr$[ebp]
  000b7	52		 push	 edx
  000b8	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  000bb	e8 00 00 00 00	 call	 ?ClearBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ClearBlock

; 238  :                     __UNIT_TYPE r_value;
; 239  :                     DivRem_X_1W(u_ptr, work_u_count, _10n_base_number, q_ptr, &r_value);

  000c0	8d 45 bc	 lea	 eax, DWORD PTR _r_value$4[ebp]
  000c3	50		 push	 eax
  000c4	8b 4d cc	 mov	 ecx, DWORD PTR _q_ptr$[ebp]
  000c7	51		 push	 ecx
  000c8	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000cb	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000ce	50		 push	 eax
  000cf	8b 4d c4	 mov	 ecx, DWORD PTR _work_u_count$[ebp]
  000d2	51		 push	 ecx
  000d3	8b 55 d0	 mov	 edx, DWORD PTR _u_ptr$[ebp]
  000d6	52		 push	 edx
  000d7	e8 00 00 00 00	 call	 ?DivRem_X_1W@Internal@Core@Math@Palmtree@@YAXPAIII00@Z ; Palmtree::Math::Core::Internal::DivRem_X_1W
  000dc	83 c4 14	 add	 esp, 20			; 00000014H

; 240  :                     root.CheckBlock(q_ptr);

  000df	8b 45 cc	 mov	 eax, DWORD PTR _q_ptr$[ebp]
  000e2	50		 push	 eax
  000e3	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  000e6	e8 00 00 00 00	 call	 ?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock

; 241  :                     *r_ptr++ = r_value;

  000eb	8b 4d c8	 mov	 ecx, DWORD PTR _r_ptr$[ebp]
  000ee	8b 55 bc	 mov	 edx, DWORD PTR _r_value$4[ebp]
  000f1	89 11		 mov	 DWORD PTR [ecx], edx
  000f3	8b 45 c8	 mov	 eax, DWORD PTR _r_ptr$[ebp]
  000f6	83 c0 04	 add	 eax, 4
  000f9	89 45 c8	 mov	 DWORD PTR _r_ptr$[ebp], eax

; 242  :                     __UNIT_TYPE* temp = u_ptr;

  000fc	8b 4d d0	 mov	 ecx, DWORD PTR _u_ptr$[ebp]
  000ff	89 4d b4	 mov	 DWORD PTR _temp$3[ebp], ecx

; 243  :                     u_ptr = q_ptr;

  00102	8b 55 cc	 mov	 edx, DWORD PTR _q_ptr$[ebp]
  00105	89 55 d0	 mov	 DWORD PTR _u_ptr$[ebp], edx

; 244  :                     q_ptr = temp;

  00108	8b 45 b4	 mov	 eax, DWORD PTR _temp$3[ebp]
  0010b	89 45 cc	 mov	 DWORD PTR _q_ptr$[ebp], eax
$LN4@ConvertAs1:

; 245  :                     while (work_u_count > 0 && u_ptr[work_u_count - 1] == 0)

  0010e	83 7d c4 00	 cmp	 DWORD PTR _work_u_count$[ebp], 0
  00112	76 18		 jbe	 SHORT $LN5@ConvertAs1
  00114	8b 4d c4	 mov	 ecx, DWORD PTR _work_u_count$[ebp]
  00117	8b 55 d0	 mov	 edx, DWORD PTR _u_ptr$[ebp]
  0011a	83 7c 8a fc 00	 cmp	 DWORD PTR [edx+ecx*4-4], 0
  0011f	75 0b		 jne	 SHORT $LN5@ConvertAs1

; 246  :                         --work_u_count;

  00121	8b 45 c4	 mov	 eax, DWORD PTR _work_u_count$[ebp]
  00124	83 e8 01	 sub	 eax, 1
  00127	89 45 c4	 mov	 DWORD PTR _work_u_count$[ebp], eax
  0012a	eb e2		 jmp	 SHORT $LN4@ConvertAs1
$LN5@ConvertAs1:

; 247  :                 }

  0012c	eb 80		 jmp	 SHORT $LN2@ConvertAs1
$LN3@ConvertAs1:

; 248  :                 return (r_ptr - r_buf);

  0012e	8b 4d c8	 mov	 ecx, DWORD PTR _r_ptr$[ebp]
  00131	2b 4d 0c	 sub	 ecx, DWORD PTR _r_buf$[ebp]
  00134	c1 f9 02	 sar	 ecx, 2
  00137	89 4d b0	 mov	 DWORD PTR $T2[ebp], ecx
  0013a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00141	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00144	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00149	8b 45 b0	 mov	 eax, DWORD PTR $T2[ebp]

; 249  :             }

  0014c	52		 push	 edx
  0014d	8b cd		 mov	 ecx, ebp
  0014f	50		 push	 eax
  00150	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@ConvertAs1
  00156	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0015b	58		 pop	 eax
  0015c	5a		 pop	 edx
  0015d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00160	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00167	59		 pop	 ecx
  00168	5f		 pop	 edi
  00169	83 c4 50	 add	 esp, 80			; 00000050H
  0016c	3b ec		 cmp	 ebp, esp
  0016e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00173	8b e5		 mov	 esp, ebp
  00175	5d		 pop	 ebp
  00176	c2 08 00	 ret	 8
  00179	0f 1f 00	 npad	 3
$LN12@ConvertAs1:
  0017c	02 00 00 00	 DD	 2
  00180	00 00 00 00	 DD	 $LN11@ConvertAs1
$LN11@ConvertAs1:
  00184	dc ff ff ff	 DD	 -36			; ffffffdcH
  00188	10 00 00 00	 DD	 16			; 00000010H
  0018c	00 00 00 00	 DD	 $LN8@ConvertAs1
  00190	bc ff ff ff	 DD	 -68			; ffffffbcH
  00194	04 00 00 00	 DD	 4
  00198	00 00 00 00	 DD	 $LN9@ConvertAs1
$LN9@ConvertAs1:
  0019c	72		 DB	 114			; 00000072H
  0019d	5f		 DB	 95			; 0000005fH
  0019e	76		 DB	 118			; 00000076H
  0019f	61		 DB	 97			; 00000061H
  001a0	6c		 DB	 108			; 0000006cH
  001a1	75		 DB	 117			; 00000075H
  001a2	65		 DB	 101			; 00000065H
  001a3	00		 DB	 0
$LN8@ConvertAs1:
  001a4	72		 DB	 114			; 00000072H
  001a5	6f		 DB	 111			; 0000006fH
  001a6	6f		 DB	 111			; 0000006fH
  001a7	74		 DB	 116			; 00000074H
  001a8	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ConvertAs10nBasedNumber@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEIPAU__tag_NUMBER_HEADER@3456@PAI@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?ConvertAs10nBasedNumber@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEIPAU__tag_NUMBER_HEADER@3456@PAI@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ConvertAs10nBasedNumber@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEIPAU__tag_NUMBER_HEADER@3456@PAI@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ConvertAs10nBasedNumber@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEIPAU__tag_NUMBER_HEADER@3456@PAI@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::ConvertAs10nBasedNumber
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?FormatInternally@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z
_TEXT	SEGMENT
tv132 = -68						; size = 4
_top_of_simple_number_sequence$ = -64			; size = 4
_simple_number_sequence$ = -60				; size = 4
_simple_number_sequence_buf_size$ = -56			; size = 4
__10n_based_number_buf_count$ = -52			; size = 4
__10n_based_number_buf$ = -48				; size = 4
__10n_based_number_bit_count$ = -44			; size = 4
_root$ = -36						; size = 16
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_x_abs$ = 8						; size = 4
_writer$ = 12						; size = 4
?FormatInternally@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::FormatInternally, COMDAT
; _this$ = ecx

; 200  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?FormatInternally@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 38	 sub	 esp, 56			; 00000038H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	51		 push	 ecx
  00017	8d 7d bc	 lea	 edi, DWORD PTR [ebp-68]
  0001a	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	59		 pop	 ecx
  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002c	33 c5		 xor	 eax, ebp
  0002e	50		 push	 eax
  0002f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00032	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00038	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0003b	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00040	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 201  :                 ResourceHolderUINT root;

  00045	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00048	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  0004d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 202  :                 __UNIT_TYPE _10n_based_number_bit_count = x_abs->UNIT_BIT_COUNT + _DIVIDE_CEILING_UNIT(x_abs->UNIT_BIT_COUNT, 8);

  00054	6a 08		 push	 8
  00056	8b 45 08	 mov	 eax, DWORD PTR _x_abs$[ebp]
  00059	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0005c	51		 push	 ecx
  0005d	e8 00 00 00 00	 call	 __DIVIDE_CEILING_UNIT
  00062	83 c4 08	 add	 esp, 8
  00065	8b 55 08	 mov	 edx, DWORD PTR _x_abs$[ebp]
  00068	03 42 14	 add	 eax, DWORD PTR [edx+20]
  0006b	89 45 d4	 mov	 DWORD PTR __10n_based_number_bit_count$[ebp], eax

; 203  :                 __UNIT_TYPE* _10n_based_number_buf = root.AllocateBlock(_10n_based_number_bit_count);

  0006e	8b 45 d4	 mov	 eax, DWORD PTR __10n_based_number_bit_count$[ebp]
  00071	50		 push	 eax
  00072	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00075	e8 00 00 00 00	 call	 ?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAII@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
  0007a	89 45 d0	 mov	 DWORD PTR __10n_based_number_buf$[ebp], eax

; 204  :                 __UNIT_TYPE _10n_based_number_buf_count = ConvertAs10nBasedNumber(x_abs, _10n_based_number_buf);

  0007d	8b 4d d0	 mov	 ecx, DWORD PTR __10n_based_number_buf$[ebp]
  00080	51		 push	 ecx
  00081	8b 55 08	 mov	 edx, DWORD PTR _x_abs$[ebp]
  00084	52		 push	 edx
  00085	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	e8 00 00 00 00	 call	 ?ConvertAs10nBasedNumber@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEIPAU__tag_NUMBER_HEADER@3456@PAI@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::ConvertAs10nBasedNumber
  0008d	89 45 cc	 mov	 DWORD PTR __10n_based_number_buf_count$[ebp], eax

; 205  :                 __UNIT_TYPE simple_number_sequence_buf_size = digit_count_on_word * _10n_based_number_buf_count + 1;

  00090	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00093	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00096	0f af 4d cc	 imul	 ecx, DWORD PTR __10n_based_number_buf_count$[ebp]
  0009a	83 c1 01	 add	 ecx, 1
  0009d	89 4d c8	 mov	 DWORD PTR _simple_number_sequence_buf_size$[ebp], ecx

; 206  :                 wchar_t* simple_number_sequence = root.AllocateString(simple_number_sequence_buf_size);

  000a0	8b 55 c8	 mov	 edx, DWORD PTR _simple_number_sequence_buf_size$[ebp]
  000a3	52		 push	 edx
  000a4	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  000a7	e8 00 00 00 00	 call	 ?AllocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPA_WI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateString
  000ac	89 45 c4	 mov	 DWORD PTR _simple_number_sequence$[ebp], eax

; 207  :                 wchar_t* top_of_simple_number_sequence = ConstructSimpleNumberSequence(_10n_based_number_buf, _10n_based_number_buf_count, simple_number_sequence, simple_number_sequence_buf_size);

  000af	8b 45 c8	 mov	 eax, DWORD PTR _simple_number_sequence_buf_size$[ebp]
  000b2	50		 push	 eax
  000b3	8b 4d c4	 mov	 ecx, DWORD PTR _simple_number_sequence$[ebp]
  000b6	51		 push	 ecx
  000b7	8b 55 cc	 mov	 edx, DWORD PTR __10n_based_number_buf_count$[ebp]
  000ba	52		 push	 edx
  000bb	8b 45 d0	 mov	 eax, DWORD PTR __10n_based_number_buf$[ebp]
  000be	50		 push	 eax
  000bf	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c2	e8 00 00 00 00	 call	 ?ConstructSimpleNumberSequence@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@AAEPA_WPAIIPA_WI@Z ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::ConstructSimpleNumberSequence
  000c7	89 45 c0	 mov	 DWORD PTR _top_of_simple_number_sequence$[ebp], eax

; 208  :                 root.DeallocateBlock(_10n_based_number_buf);

  000ca	8b 4d d0	 mov	 ecx, DWORD PTR __10n_based_number_buf$[ebp]
  000cd	51		 push	 ecx
  000ce	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  000d1	e8 00 00 00 00	 call	 ?DeallocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateBlock

; 209  :                 FormatNumberSequence(top_of_simple_number_sequence, writer);

  000d6	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000d9	8b 02		 mov	 eax, DWORD PTR [edx]
  000db	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000de	89 4d bc	 mov	 DWORD PTR tv132[ebp], ecx
  000e1	8b f4		 mov	 esi, esp
  000e3	8b 55 0c	 mov	 edx, DWORD PTR _writer$[ebp]
  000e6	52		 push	 edx
  000e7	8b 45 c0	 mov	 eax, DWORD PTR _top_of_simple_number_sequence$[ebp]
  000ea	50		 push	 eax
  000eb	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000ee	ff 55 bc	 call	 DWORD PTR tv132[ebp]
  000f1	3b f4		 cmp	 esi, esp
  000f3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 210  :                 root.DeallocateString(simple_number_sequence);

  000f8	8b 4d c4	 mov	 ecx, DWORD PTR _simple_number_sequence$[ebp]
  000fb	51		 push	 ecx
  000fc	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  000ff	e8 00 00 00 00	 call	 ?DeallocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPA_W@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateString

; 211  :             }

  00104	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0010b	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  0010e	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00113	52		 push	 edx
  00114	8b cd		 mov	 ecx, ebp
  00116	50		 push	 eax
  00117	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@FormatInte
  0011d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00122	58		 pop	 eax
  00123	5a		 pop	 edx
  00124	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00127	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0012e	59		 pop	 ecx
  0012f	5f		 pop	 edi
  00130	5e		 pop	 esi
  00131	83 c4 44	 add	 esp, 68			; 00000044H
  00134	3b ec		 cmp	 ebp, esp
  00136	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013b	8b e5		 mov	 esp, ebp
  0013d	5d		 pop	 ebp
  0013e	c2 08 00	 ret	 8
  00141	0f 1f 00	 npad	 3
$LN7@FormatInte:
  00144	01 00 00 00	 DD	 1
  00148	00 00 00 00	 DD	 $LN6@FormatInte
$LN6@FormatInte:
  0014c	dc ff ff ff	 DD	 -36			; ffffffdcH
  00150	10 00 00 00	 DD	 16			; 00000010H
  00154	00 00 00 00	 DD	 $LN4@FormatInte
$LN4@FormatInte:
  00158	72		 DB	 114			; 00000072H
  00159	6f		 DB	 111			; 0000006fH
  0015a	6f		 DB	 111			; 0000006fH
  0015b	74		 DB	 116			; 00000074H
  0015c	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?FormatInternally@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?FormatInternally@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a bc	 mov	 ecx, DWORD PTR [edx-68]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?FormatInternally@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?FormatInternally@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@MAEXPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::FormatInternally
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?Format@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@QAEXDPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z
_TEXT	SEGMENT
tv160 = -76						; size = 4
tv153 = -72						; size = 4
tv146 = -68						; size = 4
tv132 = -64						; size = 4
tv93 = -60						; size = 4
tv87 = -56						; size = 4
$T1 = -52						; size = 24
$T2 = -28						; size = 24
_this$ = -4						; size = 4
_x_sign$ = 8						; size = 1
_x_abs$ = 12						; size = 4
_writer$ = 16						; size = 4
?Format@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@QAEXDPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::Format, COMDAT
; _this$ = ecx

; 165  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	51		 push	 ecx
  00009	8d 7d b4	 lea	 edi, DWORD PTR [ebp-76]
  0000c	b9 13 00 00 00	 mov	 ecx, 19			; 00000013H
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	59		 pop	 ecx
  00019	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001c	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00021	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 166  :                 if (_precision < 0)

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0002d	7d 1b		 jge	 SHORT $LN2@Format

; 167  :                     _precision = GetDefaultPrecisionValue();

  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	8b 11		 mov	 edx, DWORD PTR [ecx]
  00034	8b f4		 mov	 esi, esp
  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	8b 02		 mov	 eax, DWORD PTR [edx]
  0003b	ff d0		 call	 eax
  0003d	3b f4		 cmp	 esi, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN2@Format:

; 168  :                 if (x_abs->IS_ZERO)

  0004a	8b 55 0c	 mov	 edx, DWORD PTR _x_abs$[ebp]
  0004d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00050	83 e0 01	 and	 eax, 1
  00053	0f 84 91 00 00
	00		 je	 $LN3@Format

; 169  :                 {
; 170  :                     // x == 0 の場合
; 171  :                     if (x_sign != 0)

  00059	0f be 4d 08	 movsx	 ecx, BYTE PTR _x_sign$[ebp]
  0005d	85 c9		 test	 ecx, ecx
  0005f	74 20		 je	 SHORT $LN5@Format

; 172  :                         throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_tostring.cpp;Formatter::Format;1");

  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@CCPHDNPL@?$AAp?$AAm?$AAc?$AA_?$AAt?$AAo?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?4?$AAc?$AAp@
  00066	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  0006b	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]
  0006e	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00073	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00078	8d 55 e4	 lea	 edx, DWORD PTR $T2[ebp]
  0007b	52		 push	 edx
  0007c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN5@Format:

; 173  :                     WritePrefix(x_sign, writer);

  00081	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00084	8b 08		 mov	 ecx, DWORD PTR [eax]
  00086	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00089	89 55 c8	 mov	 DWORD PTR tv87[ebp], edx
  0008c	8b f4		 mov	 esi, esp
  0008e	8b 45 10	 mov	 eax, DWORD PTR _writer$[ebp]
  00091	50		 push	 eax
  00092	0f b6 4d 08	 movzx	 ecx, BYTE PTR _x_sign$[ebp]
  00096	51		 push	 ecx
  00097	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009a	ff 55 c8	 call	 DWORD PTR tv87[ebp]
  0009d	3b f4		 cmp	 esi, esp
  0009f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 174  :                     WriteZeroValue(writer);

  000a4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a7	8b 02		 mov	 eax, DWORD PTR [edx]
  000a9	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000ac	89 4d c4	 mov	 DWORD PTR tv93[ebp], ecx
  000af	8b f4		 mov	 esi, esp
  000b1	8b 55 10	 mov	 edx, DWORD PTR _writer$[ebp]
  000b4	52		 push	 edx
  000b5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b8	ff 55 c4	 call	 DWORD PTR tv93[ebp]
  000bb	3b f4		 cmp	 esi, esp
  000bd	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 175  :                     WriteSuffix(x_sign, writer);

  000c2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c7	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000ca	89 55 c0	 mov	 DWORD PTR tv132[ebp], edx
  000cd	8b f4		 mov	 esi, esp
  000cf	8b 45 10	 mov	 eax, DWORD PTR _writer$[ebp]
  000d2	50		 push	 eax
  000d3	0f b6 4d 08	 movzx	 ecx, BYTE PTR _x_sign$[ebp]
  000d7	51		 push	 ecx
  000d8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000db	ff 55 c0	 call	 DWORD PTR tv132[ebp]
  000de	3b f4		 cmp	 esi, esp
  000e0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 176  :                 }
; 177  :                 else

  000e5	e9 90 00 00 00	 jmp	 $LN7@Format
$LN3@Format:

; 178  :                 {
; 179  :                     // x != 0 の場合
; 180  :                     if (x_sign == 0)

  000ea	0f be 55 08	 movsx	 edx, BYTE PTR _x_sign$[ebp]
  000ee	85 d2		 test	 edx, edx
  000f0	75 20		 jne	 SHORT $LN6@Format

; 181  :                         throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_tostring.cpp;Formatter::Format;1");

  000f2	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@CCPHDNPL@?$AAp?$AAm?$AAc?$AA_?$AAt?$AAo?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?4?$AAc?$AAp@
  000f7	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  000fc	8d 4d cc	 lea	 ecx, DWORD PTR $T1[ebp]
  000ff	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00104	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00109	8d 45 cc	 lea	 eax, DWORD PTR $T1[ebp]
  0010c	50		 push	 eax
  0010d	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN6@Format:

; 182  : 
; 183  :                     WritePrefix(x_sign, writer);

  00112	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00115	8b 11		 mov	 edx, DWORD PTR [ecx]
  00117	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0011a	89 45 bc	 mov	 DWORD PTR tv146[ebp], eax
  0011d	8b f4		 mov	 esi, esp
  0011f	8b 4d 10	 mov	 ecx, DWORD PTR _writer$[ebp]
  00122	51		 push	 ecx
  00123	0f b6 55 08	 movzx	 edx, BYTE PTR _x_sign$[ebp]
  00127	52		 push	 edx
  00128	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0012b	ff 55 bc	 call	 DWORD PTR tv146[ebp]
  0012e	3b f4		 cmp	 esi, esp
  00130	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 184  :                     FormatInternally(x_abs, writer);

  00135	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00138	8b 08		 mov	 ecx, DWORD PTR [eax]
  0013a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0013d	89 55 b8	 mov	 DWORD PTR tv153[ebp], edx
  00140	8b f4		 mov	 esi, esp
  00142	8b 45 10	 mov	 eax, DWORD PTR _writer$[ebp]
  00145	50		 push	 eax
  00146	8b 4d 0c	 mov	 ecx, DWORD PTR _x_abs$[ebp]
  00149	51		 push	 ecx
  0014a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0014d	ff 55 b8	 call	 DWORD PTR tv153[ebp]
  00150	3b f4		 cmp	 esi, esp
  00152	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 185  :                     WriteSuffix(x_sign, writer);

  00157	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0015a	8b 02		 mov	 eax, DWORD PTR [edx]
  0015c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0015f	89 4d b4	 mov	 DWORD PTR tv160[ebp], ecx
  00162	8b f4		 mov	 esi, esp
  00164	8b 55 10	 mov	 edx, DWORD PTR _writer$[ebp]
  00167	52		 push	 edx
  00168	0f b6 45 08	 movzx	 eax, BYTE PTR _x_sign$[ebp]
  0016c	50		 push	 eax
  0016d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00170	ff 55 b4	 call	 DWORD PTR tv160[ebp]
  00173	3b f4		 cmp	 esi, esp
  00175	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN7@Format:

; 186  :                 }
; 187  :             }

  0017a	5f		 pop	 edi
  0017b	5e		 pop	 esi
  0017c	83 c4 4c	 add	 esp, 76			; 0000004cH
  0017f	3b ec		 cmp	 ebp, esp
  00181	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00186	8b e5		 mov	 esp, ebp
  00188	5d		 pop	 ebp
  00189	c2 0c 00	 ret	 12			; 0000000cH
?Format@Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@QAEXDPAU__tag_NUMBER_HEADER@3456@PAVStringWriter@3456@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::Format
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ??0Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@IAE@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_format_type$ = 8					; size = 2
_precision$ = 12					; size = 4
_number_format_info$ = 16				; size = 4
??0Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@IAE@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::Formatter, COMDAT
; _this$ = ecx

; 156  :             Formatter(wchar_t format_type, int precision, const PMC_NUMBER_FORMAT_INFO* number_format_info)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@

; 141  :             const __UNIT_TYPE _10n_base_number = 1000000000U; // 10^9

  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	c7 41 04 00 ca
	9a 3b		 mov	 DWORD PTR [ecx+4], 1000000000 ; 3b9aca00H

; 142  :             const int digit_count_on_word = 9;

  0002b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002e	c7 42 08 09 00
	00 00		 mov	 DWORD PTR [edx+8], 9

; 157  :             {
; 158  :                 _format_type = format_type;

  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	66 8b 4d 08	 mov	 cx, WORD PTR _format_type$[ebp]
  0003c	66 89 48 0c	 mov	 WORD PTR [eax+12], cx

; 159  :                 _precision = precision;

  00040	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00043	8b 45 0c	 mov	 eax, DWORD PTR _precision$[ebp]
  00046	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 160  :                 _number_format_info = number_format_info;

  00049	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	8b 55 10	 mov	 edx, DWORD PTR _number_format_info$[ebp]
  0004f	89 51 14	 mov	 DWORD PTR [ecx+20], edx

; 161  :             }

  00052	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00055	83 c4 04	 add	 esp, 4
  00058	3b ec		 cmp	 ebp, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c2 0c 00	 ret	 12			; 0000000cH
??0Formatter@DecimalFromatter@Internal@Core@Math@Palmtree@@IAE@_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::Formatter::Formatter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?GetString@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@UAEPA_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetString@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@UAEPA_WXZ PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::GetString, COMDAT
; _this$ = ecx

; 132  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00014	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 133  :                 return (_native_writer->GetString());

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0001f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00022	8b 01		 mov	 eax, DWORD PTR [ecx]
  00024	8b f4		 mov	 esi, esp
  00026	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  00029	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0002c	ff d2		 call	 edx
  0002e	3b f4		 cmp	 esi, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 134  :             }

  00035	5e		 pop	 esi
  00036	83 c4 04	 add	 esp, 4
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?GetString@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@UAEPA_WXZ ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::GetString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?Write@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@UAEXPB_W@Z
_TEXT	SEGMENT
tv74 = -10						; size = 2
tv77 = -8						; size = 4
_this$ = -4						; size = 4
_str$ = 8						; size = 4
?Write@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@UAEXPB_W@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::Write, COMDAT
; _this$ = ecx

; 126  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001f	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00024	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
$LN2@Write:

; 127  :                 while (*str != L'\0')

  00029	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  0002c	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0002f	85 c9		 test	 ecx, ecx
  00031	74 34		 je	 SHORT $LN1@Write

; 128  :                     Write(*str++);

  00033	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00036	8b 02		 mov	 eax, DWORD PTR [edx]
  00038	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003b	89 4d f8	 mov	 DWORD PTR tv77[ebp], ecx
  0003e	8b 55 08	 mov	 edx, DWORD PTR _str$[ebp]
  00041	66 8b 02	 mov	 ax, WORD PTR [edx]
  00044	66 89 45 f6	 mov	 WORD PTR tv74[ebp], ax
  00048	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  0004b	83 c1 02	 add	 ecx, 2
  0004e	89 4d 08	 mov	 DWORD PTR _str$[ebp], ecx
  00051	8b f4		 mov	 esi, esp
  00053	0f b7 55 f6	 movzx	 edx, WORD PTR tv74[ebp]
  00057	52		 push	 edx
  00058	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	ff 55 f8	 call	 DWORD PTR tv77[ebp]
  0005e	3b f4		 cmp	 esi, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	eb c2		 jmp	 SHORT $LN2@Write
$LN1@Write:

; 129  :             }

  00067	5e		 pop	 esi
  00068	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
?Write@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@UAEXPB_W@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::Write
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ?Write@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@UAEX_W@Z
_TEXT	SEGMENT
tv174 = -36						; size = 4
tv172 = -32						; size = 4
tv159 = -28						; size = 4
tv157 = -24						; size = 4
tv132 = -20						; size = 4
tv130 = -16						; size = 4
tv88 = -12						; size = 4
tv86 = -8						; size = 4
_this$ = -4						; size = 4
_c$ = 8							; size = 2
?Write@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@UAEX_W@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::Write, COMDAT
; _this$ = ecx

; 90   :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0000f	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00012	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00015	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00018	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0001b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00021	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00024	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00027	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0002a	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  0002f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 91   :                 if (_is_supported_thousand && c >= L'0' && c <= L'9')

  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0003a	83 e1 01	 and	 ecx, 1
  0003d	0f 84 18 01 00
	00		 je	 $LN2@Write
  00043	0f b7 55 08	 movzx	 edx, WORD PTR _c$[ebp]
  00047	83 fa 30	 cmp	 edx, 48			; 00000030H
  0004a	0f 8c 0b 01 00
	00		 jl	 $LN2@Write
  00050	0f b7 45 08	 movzx	 eax, WORD PTR _c$[ebp]
  00054	83 f8 39	 cmp	 eax, 57			; 00000039H
  00057	0f 8f fe 00 00
	00		 jg	 $LN2@Write

; 92   :                 {
; 93   :                     // 桁区切りをサポートする場合
; 94   :                     if (_current_group_size > 0 && _current_group_index >= _current_group_size)

  0005d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	83 79 24 00	 cmp	 DWORD PTR [ecx+36], 0
  00064	0f 8e b5 00 00
	00		 jle	 $LN4@Write
  0006a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00070	8b 4a 28	 mov	 ecx, DWORD PTR [edx+40]
  00073	3b 48 24	 cmp	 ecx, DWORD PTR [eax+36]
  00076	0f 8c a3 00 00
	00		 jl	 $LN4@Write

; 95   :                     {
; 96   :                         // 現在のグループ幅が 0 ではなく、かつ既に出力した文字数がグループ幅に達した場合
; 97   : 
; 98   :                         // グループ区切り文字を出力してから与えられた文字を出力する
; 99   :                         _native_writer->Write(_group_separator);

  0007c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0007f	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00082	89 45 f8	 mov	 DWORD PTR tv86[ebp], eax
  00085	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0008b	8b 02		 mov	 eax, DWORD PTR [edx]
  0008d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008f	89 4d f4	 mov	 DWORD PTR tv88[ebp], ecx
  00092	8b f4		 mov	 esi, esp
  00094	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00097	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0009a	50		 push	 eax
  0009b	8b 4d f8	 mov	 ecx, DWORD PTR tv86[ebp]
  0009e	ff 55 f4	 call	 DWORD PTR tv88[ebp]
  000a1	3b f4		 cmp	 esi, esp
  000a3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 100  :                         _native_writer->Write(c);

  000a8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ab	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000ae	89 55 f0	 mov	 DWORD PTR tv130[ebp], edx
  000b1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b4	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000b7	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b9	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000bc	89 45 ec	 mov	 DWORD PTR tv132[ebp], eax
  000bf	8b f4		 mov	 esi, esp
  000c1	0f b7 4d 08	 movzx	 ecx, WORD PTR _c$[ebp]
  000c5	51		 push	 ecx
  000c6	8b 4d f0	 mov	 ecx, DWORD PTR tv130[ebp]
  000c9	ff 55 ec	 call	 DWORD PTR tv132[ebp]
  000cc	3b f4		 cmp	 esi, esp
  000ce	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 101  :                         _current_group_index = 1;

  000d3	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000d6	c7 42 28 01 00
	00 00		 mov	 DWORD PTR [edx+40], 1

; 102  : 
; 103  :                         // 次のグループが存在すればそのグループに移行する
; 104  :                         if (_current_group[1] != L'\0')

  000dd	b8 02 00 00 00	 mov	 eax, 2
  000e2	c1 e0 00	 shl	 eax, 0
  000e5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e8	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000eb	0f b7 04 02	 movzx	 eax, WORD PTR [edx+eax]
  000ef	85 c0		 test	 eax, eax
  000f1	74 2a		 je	 SHORT $LN6@Write

; 105  :                         {
; 106  :                             _current_group += 1;

  000f3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f6	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000f9	83 c2 02	 add	 edx, 2
  000fc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ff	89 50 20	 mov	 DWORD PTR [eax+32], edx

; 107  :                             _current_group_size = _current_group[0] - L'0';

  00102	b9 02 00 00 00	 mov	 ecx, 2
  00107	6b d1 00	 imul	 edx, ecx, 0
  0010a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0010d	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00110	0f b7 14 11	 movzx	 edx, WORD PTR [ecx+edx]
  00114	83 ea 30	 sub	 edx, 48			; 00000030H
  00117	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0011a	89 50 24	 mov	 DWORD PTR [eax+36], edx
$LN6@Write:

; 108  :                         }
; 109  :                     }
; 110  :                     else

  0011d	eb 3a		 jmp	 SHORT $LN5@Write
$LN4@Write:

; 111  :                     {
; 112  :                         // 現在のグループの幅が 0 であるかあるいは出力した文字数がグループ幅に達していない場合
; 113  :                         _native_writer->Write(c);

  0011f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00122	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00125	89 55 e8	 mov	 DWORD PTR tv157[ebp], edx
  00128	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0012b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0012e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00130	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00133	89 45 e4	 mov	 DWORD PTR tv159[ebp], eax
  00136	8b f4		 mov	 esi, esp
  00138	0f b7 4d 08	 movzx	 ecx, WORD PTR _c$[ebp]
  0013c	51		 push	 ecx
  0013d	8b 4d e8	 mov	 ecx, DWORD PTR tv157[ebp]
  00140	ff 55 e4	 call	 DWORD PTR tv159[ebp]
  00143	3b f4		 cmp	 esi, esp
  00145	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 114  :                         _current_group_index += 1;

  0014a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0014d	8b 42 28	 mov	 eax, DWORD PTR [edx+40]
  00150	83 c0 01	 add	 eax, 1
  00153	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00156	89 41 28	 mov	 DWORD PTR [ecx+40], eax
$LN5@Write:

; 115  :                     }
; 116  :                 }
; 117  :                 else

  00159	eb 2b		 jmp	 SHORT $LN1@Write
$LN2@Write:

; 118  :                 {
; 119  :                     // 桁区切りをサポートしない場合
; 120  : 
; 121  :                     _native_writer->Write(c);

  0015b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0015e	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00161	89 45 e0	 mov	 DWORD PTR tv172[ebp], eax
  00164	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00167	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0016a	8b 02		 mov	 eax, DWORD PTR [edx]
  0016c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0016f	89 4d dc	 mov	 DWORD PTR tv174[ebp], ecx
  00172	8b f4		 mov	 esi, esp
  00174	0f b7 55 08	 movzx	 edx, WORD PTR _c$[ebp]
  00178	52		 push	 edx
  00179	8b 4d e0	 mov	 ecx, DWORD PTR tv172[ebp]
  0017c	ff 55 dc	 call	 DWORD PTR tv174[ebp]
  0017f	3b f4		 cmp	 esi, esp
  00181	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Write:

; 122  :                 }
; 123  :             }

  00186	5e		 pop	 esi
  00187	83 c4 24	 add	 esp, 36			; 00000024H
  0018a	3b ec		 cmp	 ebp, esp
  0018c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00191	8b e5		 mov	 esp, ebp
  00193	5d		 pop	 ebp
  00194	c2 04 00	 ret	 4
?Write@ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@UAEX_W@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::Write
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
;	COMDAT ??0ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@PAVStringWriter@2345@_WPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z
_TEXT	SEGMENT
_in_ptr$ = -12						; size = 4
_decimal_info$ = -8					; size = 4
_this$ = -4						; size = 4
_native_writer$ = 8					; size = 4
_format_type$ = 12					; size = 2
_format_option$ = 16					; size = 4
??0ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@PAVStringWriter@2345@_WPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z PROC ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::ThousandSeparatedStringWriter, COMDAT
; _this$ = ecx

; 57   :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 56   :                 : StringWriter(nullptr, nullptr, nullptr)

  00028	6a 00		 push	 0
  0002a	6a 00		 push	 0
  0002c	6a 00		 push	 0
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ??0StringWriter@Internal@Core@Math@Palmtree@@IAE@PA_W00@Z ; Palmtree::Math::Core::Internal::StringWriter::StringWriter

; 57   :             {

  00036	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00039	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@6B@

; 58   :                 _native_writer = native_writer;

  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	8b 55 08	 mov	 edx, DWORD PTR _native_writer$[ebp]
  00045	89 51 14	 mov	 DWORD PTR [ecx+20], edx

; 59   :                 const PMC_DECIMAL_NUMBER_FORMAT_INFO* decimal_info;
; 60   :                 if (format_type == L'C')

  00048	0f b7 45 0c	 movzx	 eax, WORD PTR _format_type$[ebp]
  0004c	83 f8 43	 cmp	 eax, 67			; 00000043H
  0004f	75 17		 jne	 SHORT $LN2@ThousandSe

; 61   :                 {
; 62   :                     decimal_info = &format_option->Currency;

  00051	8b 4d 10	 mov	 ecx, DWORD PTR _format_option$[ebp]
  00054	89 4d f8	 mov	 DWORD PTR _decimal_info$[ebp], ecx

; 63   :                     _is_supported_thousand = TRUE;

  00057	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005a	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0005d	83 c8 01	 or	 eax, 1
  00060	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	89 41 18	 mov	 DWORD PTR [ecx+24], eax
  00066	eb 60		 jmp	 SHORT $LN3@ThousandSe
$LN2@ThousandSe:

; 64   :                 }
; 65   :                 else if (format_type == L'P')

  00068	0f b7 55 0c	 movzx	 edx, WORD PTR _format_type$[ebp]
  0006c	83 fa 50	 cmp	 edx, 80			; 00000050H
  0006f	75 1c		 jne	 SHORT $LN4@ThousandSe

; 66   :                 {
; 67   :                     decimal_info = &format_option->Percent;

  00071	8b 45 10	 mov	 eax, DWORD PTR _format_option$[ebp]
  00074	05 d0 00 00 00	 add	 eax, 208		; 000000d0H
  00079	89 45 f8	 mov	 DWORD PTR _decimal_info$[ebp], eax

; 68   :                     _is_supported_thousand = TRUE;

  0007c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00082	83 ca 01	 or	 edx, 1
  00085	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00088	89 50 18	 mov	 DWORD PTR [eax+24], edx
  0008b	eb 3b		 jmp	 SHORT $LN3@ThousandSe
$LN4@ThousandSe:

; 69   :                 }
; 70   :                 else if (format_type == L'N')

  0008d	0f b7 4d 0c	 movzx	 ecx, WORD PTR _format_type$[ebp]
  00091	83 f9 4e	 cmp	 ecx, 78			; 0000004eH
  00094	75 1a		 jne	 SHORT $LN6@ThousandSe

; 71   :                 {
; 72   :                     decimal_info = &format_option->Number;

  00096	8b 55 10	 mov	 edx, DWORD PTR _format_option$[ebp]
  00099	83 c2 68	 add	 edx, 104		; 00000068H
  0009c	89 55 f8	 mov	 DWORD PTR _decimal_info$[ebp], edx

; 73   :                     _is_supported_thousand = TRUE;

  0009f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a2	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  000a5	83 c9 01	 or	 ecx, 1
  000a8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000ab	89 4a 18	 mov	 DWORD PTR [edx+24], ecx

; 74   :                 }
; 75   :                 else

  000ae	eb 18		 jmp	 SHORT $LN3@ThousandSe
$LN6@ThousandSe:

; 76   :                 {
; 77   :                     decimal_info = &format_option->Number;

  000b0	8b 45 10	 mov	 eax, DWORD PTR _format_option$[ebp]
  000b3	83 c0 68	 add	 eax, 104		; 00000068H
  000b6	89 45 f8	 mov	 DWORD PTR _decimal_info$[ebp], eax

; 78   :                     _is_supported_thousand = FALSE;

  000b9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bc	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  000bf	83 e2 fe	 and	 edx, -2			; fffffffeH
  000c2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c5	89 50 18	 mov	 DWORD PTR [eax+24], edx
$LN3@ThousandSe:

; 79   :                 }
; 80   : 
; 81   :                 const wchar_t* in_ptr = decimal_info->GroupSeparator;

  000c8	8b 4d f8	 mov	 ecx, DWORD PTR _decimal_info$[ebp]
  000cb	83 c1 26	 add	 ecx, 38			; 00000026H
  000ce	89 4d f4	 mov	 DWORD PTR _in_ptr$[ebp], ecx

; 82   : 
; 83   :                 _current_group = &decimal_info->GroupSizes[0];

  000d1	ba 02 00 00 00	 mov	 edx, 2
  000d6	6b c2 00	 imul	 eax, edx, 0
  000d9	8b 4d f8	 mov	 ecx, DWORD PTR _decimal_info$[ebp]
  000dc	8d 54 01 48	 lea	 edx, DWORD PTR [ecx+eax+72]
  000e0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e3	89 50 20	 mov	 DWORD PTR [eax+32], edx

; 84   :                 _group_separator = decimal_info->GroupSeparator;

  000e6	8b 4d f8	 mov	 ecx, DWORD PTR _decimal_info$[ebp]
  000e9	83 c1 26	 add	 ecx, 38			; 00000026H
  000ec	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000ef	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx

; 85   :                 _current_group_size = *_current_group - L'0';

  000f2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f5	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  000f8	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  000fb	83 ea 30	 sub	 edx, 48			; 00000030H
  000fe	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00101	89 50 24	 mov	 DWORD PTR [eax+36], edx

; 86   :                 _current_group_index = 0;

  00104	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00107	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0

; 87   :             }

  0010e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00111	83 c4 0c	 add	 esp, 12			; 0000000cH
  00114	3b ec		 cmp	 ebp, esp
  00116	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011b	8b e5		 mov	 esp, ebp
  0011d	5d		 pop	 ebp
  0011e	c2 0c 00	 ret	 12			; 0000000cH
??0ThousandSeparatedStringWriter@DecimalFromatter@Internal@Core@Math@Palmtree@@QAE@PAVStringWriter@2345@_WPBU__tag_PMC_NUMBER_FORMAT_INFO@2345@@Z ENDP ; Palmtree::Math::Core::Internal::DecimalFromatter::ThousandSeparatedStringWriter::ThousandSeparatedStringWriter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
_count$ = 12						; size = 4
__ROTATE_L_UNIT PROC

; 329  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 330  : #ifdef _M_IX86
; 331  :             return (_rotl(x, count));

  0000d	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR _count$[ebp]
  00013	d3 c0		 rol	 eax, cl

; 332  : #elif defined(_M_X64)
; 333  :             return (_rotl64(x, count));
; 334  : #else
; 335  : #error unknown platform
; 336  : #endif
; 337  :         }

  00015	3b ec		 cmp	 ebp, esp
  00017	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
__ROTATE_L_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_t$ = -8						; size = 8
_u_high$ = 8						; size = 4
_u_low$ = 12						; size = 4
_v$ = 16						; size = 4
_r$ = 20						; size = 4
__DIVREM_UNIT PROC

; 258  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00019	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 259  :             // 64bit/32bitの除算を行う組み込み関数は実装されていない。
; 260  :             _UINT64_T t = _FROMWORDTODWORD(u_high, u_low);

  0001e	8b 45 0c	 mov	 eax, DWORD PTR _u_low$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 08	 mov	 ecx, DWORD PTR _u_high$[ebp]
  00025	51		 push	 ecx
  00026	e8 00 00 00 00	 call	 __FROMWORDTODWORD
  0002b	83 c4 08	 add	 esp, 8
  0002e	89 45 f8	 mov	 DWORD PTR _t$[ebp], eax
  00031	89 55 fc	 mov	 DWORD PTR _t$[ebp+4], edx

; 261  :             *r = (_UINT32_T)(t % v);

  00034	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00037	33 c0		 xor	 eax, eax
  00039	50		 push	 eax
  0003a	52		 push	 edx
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _t$[ebp+4]
  0003e	51		 push	 ecx
  0003f	8b 55 f8	 mov	 edx, DWORD PTR _t$[ebp]
  00042	52		 push	 edx
  00043	e8 00 00 00 00	 call	 __aullrem
  00048	8b 4d 14	 mov	 ecx, DWORD PTR _r$[ebp]
  0004b	89 01		 mov	 DWORD PTR [ecx], eax

; 262  :             return ((_UINT32_T)(t / v));

  0004d	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00050	33 c0		 xor	 eax, eax
  00052	50		 push	 eax
  00053	52		 push	 edx
  00054	8b 4d fc	 mov	 ecx, DWORD PTR _t$[ebp+4]
  00057	51		 push	 ecx
  00058	8b 55 f8	 mov	 edx, DWORD PTR _t$[ebp]
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 __aulldiv

; 263  :         }

  00061	83 c4 08	 add	 esp, 8
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
__DIVREM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADD_UNIT PROC

; 176  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00009	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 177  : #ifdef _M_IX86
; 178  :             return (_addcarry_u32(carry, u, v, w));

  0000e	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  00011	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00014	8b 55 0c	 mov	 edx, DWORD PTR _u$[ebp]
  00017	8a 5d 08	 mov	 bl, BYTE PTR _carry$[ebp]
  0001a	80 c3 ff	 add	 bl, 255			; 000000ffH
  0001d	13 d1		 adc	 edx, ecx
  0001f	0f 92 c1	 setb	 cl
  00022	89 10		 mov	 DWORD PTR [eax], edx
  00024	8a c1		 mov	 al, cl

; 179  : #elif defined(_M_X64)
; 180  :             return (_addcarry_u64(carry, u, v, w));
; 181  : #else
; 182  : #error unknown platform
; 183  : #endif
; 184  :         }

  00026	5b		 pop	 ebx
  00027	3b ec		 cmp	 ebp, esp
  00029	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
__ADD_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
__DIVIDE_CEILING_UNIT PROC

; 156  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 157  :             return ((u + v - 1) / v);

  0000d	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  00013	8d 44 01 ff	 lea	 eax, DWORD PTR [ecx+eax-1]
  00017	33 d2		 xor	 edx, edx
  00019	f7 75 0c	 div	 DWORD PTR _v$[ebp]

; 158  :         }

  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
__DIVIDE_CEILING_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_value_high$ = 8					; size = 4
_value_low$ = 12					; size = 4
__FROMWORDTODWORD PROC

; 140  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  0000d	33 d2		 xor	 edx, edx
  0000f	8b 45 08	 mov	 eax, DWORD PTR _value_high$[ebp]
  00012	b1 20		 mov	 cl, 32			; 00000020H
  00014	e8 00 00 00 00	 call	 __allshl
  00019	33 c9		 xor	 ecx, ecx
  0001b	0b 45 0c	 or	 eax, DWORD PTR _value_low$[ebp]
  0001e	0b d1		 or	 edx, ecx

; 142  :         }

  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
__FROMWORDTODWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT PROC

; 63   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  0000a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 64   : #ifdef _M_IX86
; 65   :             __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

  0000f	8b 7d 08	 mov	 edi, DWORD PTR _d$[ebp]
  00012	8b 75 0c	 mov	 esi, DWORD PTR _s$[ebp]
  00015	8b 4d 10	 mov	 ecx, DWORD PTR _count$[ebp]
  00018	f3 a5		 rep movsd

; 66   : #elif defined(_M_X64)
; 67   :             __movsq(d, s, count);
; 68   : #else
; 69   : #error unknown platform
; 70   : #endif
; 71   :         }

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
__COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
_TEXT	SEGMENT
_value$ = 8						; size = 4
?AddToDIV64Counter@Internal@Core@Math@Palmtree@@YAXH@Z PROC ; Palmtree::Math::Core::Internal::AddToDIV64Counter

; 347  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __BB6D3116_pmc_uint_internal@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV64, value);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  00010	b9 08 00 00 00	 mov	 ecx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+8
  00015	f0 0f c1 01	 lock	  xadd	 DWORD PTR [ecx], eax

; 349  :     }

  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?AddToDIV64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ENDP ; Palmtree::Math::Core::Internal::AddToDIV64Counter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
_TEXT	SEGMENT
_value$ = 8						; size = 4
?AddToDIV32Counter@Internal@Core@Math@Palmtree@@YAXH@Z PROC ; Palmtree::Math::Core::Internal::AddToDIV32Counter

; 341  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __BB6D3116_pmc_uint_internal@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 342  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  00010	b9 0c 00 00 00	 mov	 ecx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+12
  00015	f0 0f c1 01	 lock	  xadd	 DWORD PTR [ecx], eax

; 343  :     }

  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?AddToDIV32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ENDP ; Palmtree::Math::Core::Internal::AddToDIV32Counter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
_TEXT	SEGMENT
?IncrementDIV64Counter@Internal@Core@Math@Palmtree@@YAXXZ PROC ; Palmtree::Math::Core::Internal::IncrementDIV64Counter

; 324  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __BB6D3116_pmc_uint_internal@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 325  :         _InterlockedIncrement(&statistics_info.COUNT_DIV64);

  0000d	f0 ff 05 08 00
	00 00		 lock	  inc	 (null) PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+8

; 326  :     }

  00014	3b ec		 cmp	 ebp, esp
  00016	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?IncrementDIV64Counter@Internal@Core@Math@Palmtree@@YAXXZ ENDP ; Palmtree::Math::Core::Internal::IncrementDIV64Counter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
_TEXT	SEGMENT
?IncrementDIV32Counter@Internal@Core@Math@Palmtree@@YAXXZ PROC ; Palmtree::Math::Core::Internal::IncrementDIV32Counter

; 318  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __BB6D3116_pmc_uint_internal@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 319  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

  0000d	f0 ff 05 0c 00
	00 00		 lock	  inc	 (null) PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+12

; 320  :     }

  00014	3b ec		 cmp	 ebp, esp
  00016	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?IncrementDIV32Counter@Internal@Core@Math@Palmtree@@YAXXZ ENDP ; Palmtree::Math::Core::Internal::IncrementDIV32Counter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
_TEXT	SEGMENT
tv81 = -36						; size = 4
tv85 = -32						; size = 4
$T1 = -28						; size = 24
_nx$ = -4						; size = 4
_x$ = 8							; size = 4
_format$ = 12						; size = 4
_format_option$ = 16					; size = 4
_buffer$ = 20						; size = 4
_buffer_size$ = 24					; size = 4
?PMC_ToString@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@PB_WPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PA_WI@Z PROC ; Palmtree::Math::Core::Internal::PMC_ToString

; 1386 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0000e	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00011	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00014	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00017	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0001a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001d	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00020	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00023	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00026	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  0002b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1387 :         if (x == nullptr)

  00030	83 7d 08 00	 cmp	 DWORD PTR _x$[ebp], 0
  00034	75 20		 jne	 SHORT $LN2@PMC_ToStri

; 1388 :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"x");

  00036	68 00 00 00 00	 push	 OFFSET $SG118961
  0003b	68 00 00 00 00	 push	 OFFSET $SG118962
  00040	8d 4d e4	 lea	 ecx, DWORD PTR $T1[ebp]
  00043	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  00048	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  0004d	8d 45 e4	 lea	 eax, DWORD PTR $T1[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@PMC_ToStri:

; 1389 :         if (format_option == nullptr)

  00056	83 7d 10 00	 cmp	 DWORD PTR _format_option$[ebp], 0
  0005a	75 07		 jne	 SHORT $LN3@PMC_ToStri

; 1390 :             format_option = &default_number_format_option;

  0005c	c7 45 10 00 00
	00 00		 mov	 DWORD PTR _format_option$[ebp], OFFSET ?default_number_format_option@Internal@Core@Math@Palmtree@@3U__tag_PMC_NUMBER_FORMAT_INFO@1234@A
$LN3@PMC_ToStri:

; 1391 :         NUMBER_HEADER* nx = (NUMBER_HEADER*)x;

  00063	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00066	89 4d fc	 mov	 DWORD PTR _nx$[ebp], ecx

; 1392 :         CheckNumber(nx);

  00069	8b 55 fc	 mov	 edx, DWORD PTR _nx$[ebp]
  0006c	52		 push	 edx
  0006d	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  00072	83 c4 04	 add	 esp, 4

; 1393 :         return (ToString_Imp(nx->IS_ZERO ? 0 : 1, nx, format, format_option, buffer, buffer_size));

  00075	8b 45 fc	 mov	 eax, DWORD PTR _nx$[ebp]
  00078	89 45 e0	 mov	 DWORD PTR tv85[ebp], eax
  0007b	8b 4d fc	 mov	 ecx, DWORD PTR _nx$[ebp]
  0007e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00081	83 e2 01	 and	 edx, 1
  00084	74 09		 je	 SHORT $LN5@PMC_ToStri
  00086	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
  0008d	eb 07		 jmp	 SHORT $LN6@PMC_ToStri
$LN5@PMC_ToStri:
  0008f	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR tv81[ebp], 1
$LN6@PMC_ToStri:
  00096	8b 45 18	 mov	 eax, DWORD PTR _buffer_size$[ebp]
  00099	50		 push	 eax
  0009a	8b 4d 14	 mov	 ecx, DWORD PTR _buffer$[ebp]
  0009d	51		 push	 ecx
  0009e	8b 55 10	 mov	 edx, DWORD PTR _format_option$[ebp]
  000a1	52		 push	 edx
  000a2	8b 45 0c	 mov	 eax, DWORD PTR _format$[ebp]
  000a5	50		 push	 eax
  000a6	8b 4d e0	 mov	 ecx, DWORD PTR tv85[ebp]
  000a9	51		 push	 ecx
  000aa	0f b6 55 dc	 movzx	 edx, BYTE PTR tv81[ebp]
  000ae	52		 push	 edx
  000af	e8 00 00 00 00	 call	 ?ToString_Imp@Internal@Core@Math@Palmtree@@YAIDPAU__tag_NUMBER_HEADER@1234@PB_WPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PA_WI@Z ; Palmtree::Math::Core::Internal::ToString_Imp
  000b4	83 c4 18	 add	 esp, 24			; 00000018H
$LN4@PMC_ToStri:

; 1394 :     }

  000b7	83 c4 24	 add	 esp, 36			; 00000024H
  000ba	3b ec		 cmp	 ebp, esp
  000bc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c2 14 00	 ret	 20			; 00000014H
?PMC_ToString@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@PB_WPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PA_WI@Z ENDP ; Palmtree::Math::Core::Internal::PMC_ToString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
_TEXT	SEGMENT
_info$ = 8						; size = 4
?PMC_InitializeNumberFormatInfo@Internal@Core@Math@Palmtree@@YGXPAU__tag_PMC_NUMBER_FORMAT_INFO@1234@@Z PROC ; Palmtree::Math::Core::Internal::PMC_InitializeNumberFormatInfo

; 1427 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1428 :         InitializeNumberFormatoInfo(info);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _info$[ebp]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ?InitializeNumberFormatoInfo@Internal@Core@Math@Palmtree@@YAXPAU__tag_PMC_NUMBER_FORMAT_INFO@1234@@Z ; Palmtree::Math::Core::Internal::InitializeNumberFormatoInfo
  00016	83 c4 04	 add	 esp, 4

; 1429 :     }

  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
?PMC_InitializeNumberFormatInfo@Internal@Core@Math@Palmtree@@YGXPAU__tag_PMC_NUMBER_FORMAT_INFO@1234@@Z ENDP ; Palmtree::Math::Core::Internal::PMC_InitializeNumberFormatInfo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
_TEXT	SEGMENT
_feature$ = 8						; size = 4
?Initialize_ToString@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z PROC ; Palmtree::Math::Core::Internal::Initialize_ToString

; 1432 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1433 :         InitializeNumberFormatoInfo(&default_number_format_option);

  0000d	68 00 00 00 00	 push	 OFFSET ?default_number_format_option@Internal@Core@Math@Palmtree@@3U__tag_PMC_NUMBER_FORMAT_INFO@1234@A
  00012	e8 00 00 00 00	 call	 ?InitializeNumberFormatoInfo@Internal@Core@Math@Palmtree@@YAXPAU__tag_PMC_NUMBER_FORMAT_INFO@1234@@Z ; Palmtree::Math::Core::Internal::InitializeNumberFormatoInfo
  00017	83 c4 04	 add	 esp, 4

; 1434 : 
; 1435 :         return (PMC_STATUS_OK);

  0001a	33 c0		 xor	 eax, eax

; 1436 :     }

  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?Initialize_ToString@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ENDP ; Palmtree::Math::Core::Internal::Initialize_ToString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.cpp
_TEXT	SEGMENT
_info$ = 8						; size = 4
?InitializeNumberFormatoInfo@Internal@Core@Math@Palmtree@@YAXPAU__tag_PMC_NUMBER_FORMAT_INFO@1234@@Z PROC ; Palmtree::Math::Core::Internal::InitializeNumberFormatoInfo

; 1397 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	b9 00 00 00 00	 mov	 ecx, OFFSET __4F90649E_pmc_tostring@cpp
  00009	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1398 :         info->Currency.DecimalDigits = 2;

  0000e	8b 45 08	 mov	 eax, DWORD PTR _info$[ebp]
  00011	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2

; 1399 :         lstrcpyW(info->Currency.DecimalSeparator, L".");

  00017	8b f4		 mov	 esi, esp
  00019	68 00 00 00 00	 push	 OFFSET $SG118967
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR _info$[ebp]
  00021	83 c1 04	 add	 ecx, 4
  00024	51		 push	 ecx
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpyW@8
  0002b	3b f4		 cmp	 esi, esp
  0002d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1400 :         lstrcpyW(info->Currency.GroupSeparator, L",");

  00032	8b f4		 mov	 esi, esp
  00034	68 00 00 00 00	 push	 OFFSET $SG118968
  00039	8b 55 08	 mov	 edx, DWORD PTR _info$[ebp]
  0003c	83 c2 26	 add	 edx, 38			; 00000026H
  0003f	52		 push	 edx
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpyW@8
  00046	3b f4		 cmp	 esi, esp
  00048	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1401 :         lstrcpyW(info->Currency.GroupSizes, L"3");

  0004d	8b f4		 mov	 esi, esp
  0004f	68 00 00 00 00	 push	 OFFSET $SG118969
  00054	8b 45 08	 mov	 eax, DWORD PTR _info$[ebp]
  00057	83 c0 48	 add	 eax, 72			; 00000048H
  0005a	50		 push	 eax
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpyW@8
  00061	3b f4		 cmp	 esi, esp
  00063	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1402 :         info->Currency.NegativePattern = 0;

  00068	8b 4d 08	 mov	 ecx, DWORD PTR _info$[ebp]
  0006b	c7 41 60 00 00
	00 00		 mov	 DWORD PTR [ecx+96], 0

; 1403 :         info->Currency.PositivePattern = 0;

  00072	8b 55 08	 mov	 edx, DWORD PTR _info$[ebp]
  00075	c7 42 64 00 00
	00 00		 mov	 DWORD PTR [edx+100], 0

; 1404 : 
; 1405 :         info->Number.DecimalDigits = 2;

  0007c	8b 45 08	 mov	 eax, DWORD PTR _info$[ebp]
  0007f	c7 40 68 02 00
	00 00		 mov	 DWORD PTR [eax+104], 2

; 1406 :         lstrcpyW(info->Number.DecimalSeparator, L".");

  00086	8b f4		 mov	 esi, esp
  00088	68 00 00 00 00	 push	 OFFSET $SG118970
  0008d	8b 4d 08	 mov	 ecx, DWORD PTR _info$[ebp]
  00090	83 c1 6c	 add	 ecx, 108		; 0000006cH
  00093	51		 push	 ecx
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpyW@8
  0009a	3b f4		 cmp	 esi, esp
  0009c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1407 :         lstrcpyW(info->Number.GroupSeparator, L",");

  000a1	8b f4		 mov	 esi, esp
  000a3	68 00 00 00 00	 push	 OFFSET $SG118971
  000a8	8b 55 08	 mov	 edx, DWORD PTR _info$[ebp]
  000ab	81 c2 8e 00 00
	00		 add	 edx, 142		; 0000008eH
  000b1	52		 push	 edx
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpyW@8
  000b8	3b f4		 cmp	 esi, esp
  000ba	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1408 :         lstrcpyW(info->Number.GroupSizes, L"3");

  000bf	8b f4		 mov	 esi, esp
  000c1	68 00 00 00 00	 push	 OFFSET $SG118972
  000c6	8b 45 08	 mov	 eax, DWORD PTR _info$[ebp]
  000c9	05 b0 00 00 00	 add	 eax, 176		; 000000b0H
  000ce	50		 push	 eax
  000cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpyW@8
  000d5	3b f4		 cmp	 esi, esp
  000d7	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1409 :         info->Number.NegativePattern = 1;

  000dc	8b 4d 08	 mov	 ecx, DWORD PTR _info$[ebp]
  000df	c7 81 c8 00 00
	00 01 00 00 00	 mov	 DWORD PTR [ecx+200], 1

; 1410 :         info->Number.PositivePattern = -1; // 未使用

  000e9	8b 55 08	 mov	 edx, DWORD PTR _info$[ebp]
  000ec	c7 82 cc 00 00
	00 ff ff ff ff	 mov	 DWORD PTR [edx+204], -1

; 1411 : 
; 1412 :         info->Percent.DecimalDigits = 2;

  000f6	8b 45 08	 mov	 eax, DWORD PTR _info$[ebp]
  000f9	c7 80 d0 00 00
	00 02 00 00 00	 mov	 DWORD PTR [eax+208], 2

; 1413 :         lstrcpyW(info->Percent.DecimalSeparator, L".");

  00103	8b f4		 mov	 esi, esp
  00105	68 00 00 00 00	 push	 OFFSET $SG118973
  0010a	8b 4d 08	 mov	 ecx, DWORD PTR _info$[ebp]
  0010d	81 c1 d4 00 00
	00		 add	 ecx, 212		; 000000d4H
  00113	51		 push	 ecx
  00114	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpyW@8
  0011a	3b f4		 cmp	 esi, esp
  0011c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1414 :         lstrcpyW(info->Percent.GroupSeparator, L",");

  00121	8b f4		 mov	 esi, esp
  00123	68 00 00 00 00	 push	 OFFSET $SG118974
  00128	8b 55 08	 mov	 edx, DWORD PTR _info$[ebp]
  0012b	81 c2 f6 00 00
	00		 add	 edx, 246		; 000000f6H
  00131	52		 push	 edx
  00132	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpyW@8
  00138	3b f4		 cmp	 esi, esp
  0013a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1415 :         lstrcpyW(info->Percent.GroupSizes, L"3");

  0013f	8b f4		 mov	 esi, esp
  00141	68 00 00 00 00	 push	 OFFSET $SG118975
  00146	8b 45 08	 mov	 eax, DWORD PTR _info$[ebp]
  00149	05 18 01 00 00	 add	 eax, 280		; 00000118H
  0014e	50		 push	 eax
  0014f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpyW@8
  00155	3b f4		 cmp	 esi, esp
  00157	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1416 :         info->Percent.NegativePattern = 0;

  0015c	8b 4d 08	 mov	 ecx, DWORD PTR _info$[ebp]
  0015f	c7 81 30 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+304], 0

; 1417 :         info->Percent.PositivePattern = 0;

  00169	8b 55 08	 mov	 edx, DWORD PTR _info$[ebp]
  0016c	c7 82 34 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+308], 0

; 1418 : 
; 1419 :         lstrcpyW(info->CurrencySymbol, L"\u00a4");

  00176	8b f4		 mov	 esi, esp
  00178	68 00 00 00 00	 push	 OFFSET $SG118976
  0017d	8b 45 08	 mov	 eax, DWORD PTR _info$[ebp]
  00180	05 38 01 00 00	 add	 eax, 312		; 00000138H
  00185	50		 push	 eax
  00186	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpyW@8
  0018c	3b f4		 cmp	 esi, esp
  0018e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1420 :         lstrcpyW(info->NegativeSign, L"-");

  00193	8b f4		 mov	 esi, esp
  00195	68 00 00 00 00	 push	 OFFSET $SG118977
  0019a	8b 4d 08	 mov	 ecx, DWORD PTR _info$[ebp]
  0019d	81 c1 5a 01 00
	00		 add	 ecx, 346		; 0000015aH
  001a3	51		 push	 ecx
  001a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpyW@8
  001aa	3b f4		 cmp	 esi, esp
  001ac	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1421 :         lstrcpyW(info->PercentSymbol, L"%");

  001b1	8b f4		 mov	 esi, esp
  001b3	68 00 00 00 00	 push	 OFFSET $SG118978
  001b8	8b 55 08	 mov	 edx, DWORD PTR _info$[ebp]
  001bb	81 c2 9e 01 00
	00		 add	 edx, 414		; 0000019eH
  001c1	52		 push	 edx
  001c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpyW@8
  001c8	3b f4		 cmp	 esi, esp
  001ca	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1422 :         lstrcpyW(info->PerMilleSymbol, L"\u2030");

  001cf	8b f4		 mov	 esi, esp
  001d1	68 00 00 00 00	 push	 OFFSET $SG118979
  001d6	8b 45 08	 mov	 eax, DWORD PTR _info$[ebp]
  001d9	05 c0 01 00 00	 add	 eax, 448		; 000001c0H
  001de	50		 push	 eax
  001df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpyW@8
  001e5	3b f4		 cmp	 esi, esp
  001e7	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1423 :         lstrcpyW(info->PositiveSign, L"+");

  001ec	8b f4		 mov	 esi, esp
  001ee	68 00 00 00 00	 push	 OFFSET $SG118980
  001f3	8b 4d 08	 mov	 ecx, DWORD PTR _info$[ebp]
  001f6	81 c1 7c 01 00
	00		 add	 ecx, 380		; 0000017cH
  001fc	51		 push	 ecx
  001fd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpyW@8
  00203	3b f4		 cmp	 esi, esp
  00205	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1424 :     }

  0020a	5e		 pop	 esi
  0020b	3b ec		 cmp	 ebp, esp
  0020d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00212	5d		 pop	 ebp
  00213	c3		 ret	 0
?InitializeNumberFormatoInfo@Internal@Core@Math@Palmtree@@YAXPAU__tag_PMC_NUMBER_FORMAT_INFO@1234@@Z ENDP ; Palmtree::Math::Core::Internal::InitializeNumberFormatoInfo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?GetString@ReverseStringWriter@Internal@Core@Math@Palmtree@@UAEPA_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetString@ReverseStringWriter@Internal@Core@Math@Palmtree@@UAEPA_WXZ PROC ; Palmtree::Math::Core::Internal::ReverseStringWriter::GetString, COMDAT
; _this$ = ecx

; 289  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __80E6779E_pmc_stringio@h
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 290  :             return (_p);

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 291  :         }

  0001e	83 c4 04	 add	 esp, 4
  00021	3b ec		 cmp	 ebp, esp
  00023	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
?GetString@ReverseStringWriter@Internal@Core@Math@Palmtree@@UAEPA_WXZ ENDP ; Palmtree::Math::Core::Internal::ReverseStringWriter::GetString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?Write@ReverseStringWriter@Internal@Core@Math@Palmtree@@UAEXPB_W@Z
_TEXT	SEGMENT
tv79 = -12						; size = 4
_p$ = -8						; size = 4
_this$ = -4						; size = 4
_str$ = 8						; size = 4
?Write@ReverseStringWriter@Internal@Core@Math@Palmtree@@UAEXPB_W@Z PROC ; Palmtree::Math::Core::Internal::ReverseStringWriter::Write, COMDAT
; _this$ = ecx

; 279  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001f	b9 00 00 00 00	 mov	 ecx, OFFSET __80E6779E_pmc_stringio@h
  00024	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 280  :             const wchar_t* p = str + lstrlenW(str);

  00029	8b f4		 mov	 esi, esp
  0002b	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  0002e	50		 push	 eax
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  00035	3b f4		 cmp	 esi, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  0003f	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00042	89 55 f8	 mov	 DWORD PTR _p$[ebp], edx
$LN2@Write:

; 281  :             while (p > str)

  00045	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  00048	3b 45 08	 cmp	 eax, DWORD PTR _str$[ebp]
  0004b	76 2c		 jbe	 SHORT $LN1@Write

; 282  :             {
; 283  :                 --p;

  0004d	8b 4d f8	 mov	 ecx, DWORD PTR _p$[ebp]
  00050	83 e9 02	 sub	 ecx, 2
  00053	89 4d f8	 mov	 DWORD PTR _p$[ebp], ecx

; 284  :                 Write(*p);

  00056	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00059	8b 02		 mov	 eax, DWORD PTR [edx]
  0005b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005e	89 4d f4	 mov	 DWORD PTR tv79[ebp], ecx
  00061	8b f4		 mov	 esi, esp
  00063	8b 55 f8	 mov	 edx, DWORD PTR _p$[ebp]
  00066	0f b7 02	 movzx	 eax, WORD PTR [edx]
  00069	50		 push	 eax
  0006a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	ff 55 f4	 call	 DWORD PTR tv79[ebp]
  00070	3b f4		 cmp	 esi, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 285  :             }

  00077	eb cc		 jmp	 SHORT $LN2@Write
$LN1@Write:

; 286  :         }

  00079	5e		 pop	 esi
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007d	3b ec		 cmp	 ebp, esp
  0007f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
?Write@ReverseStringWriter@Internal@Core@Math@Palmtree@@UAEXPB_W@Z ENDP ; Palmtree::Math::Core::Internal::ReverseStringWriter::Write
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?Write@ReverseStringWriter@Internal@Core@Math@Palmtree@@UAEX_W@Z
_TEXT	SEGMENT
$T1 = -28						; size = 24
_this$ = -4						; size = 4
_c$ = 8							; size = 2
?Write@ReverseStringWriter@Internal@Core@Math@Palmtree@@UAEX_W@Z PROC ; Palmtree::Math::Core::Internal::ReverseStringWriter::Write, COMDAT
; _this$ = ecx

; 270  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000e	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00011	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00014	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00017	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001a	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001d	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00020	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __80E6779E_pmc_stringio@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 271  :             if (_p <= _sob)

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00036	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00039	77 1b		 ja	 SHORT $LN2@Write

; 272  :                 throw InsufficientBufferException(L"書き込み先バッファのサイズが不足しています。");

  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_1CO@JABAMCFP@?$PP?x?$AAM?$PP?$LM?$AA?$HP?$AAH?$PP?P?$PP?C?$PP?U?$PP?$KB?$AAn?$PP?$LF?$PP?$KE?$PP?$LK?$AAL?$AA?$AN@
  00040	8d 4d e4	 lea	 ecx, DWORD PTR $T1[ebp]
  00043	e8 00 00 00 00	 call	 ??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException
  00048	68 00 00 00 00	 push	 OFFSET __TI2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@
  0004d	8d 45 e4	 lea	 eax, DWORD PTR $T1[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@Write:

; 273  :             --_p;

  00056	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0005c	83 ea 02	 sub	 edx, 2
  0005f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00062	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 274  :             *_p = c;

  00065	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0006b	66 8b 45 08	 mov	 ax, WORD PTR _c$[ebp]
  0006f	66 89 02	 mov	 WORD PTR [edx], ax

; 275  :             ++_written;

  00072	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00078	83 c2 01	 add	 edx, 1
  0007b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	89 50 10	 mov	 DWORD PTR [eax+16], edx
$LN3@Write:

; 276  :         }

  00081	83 c4 1c	 add	 esp, 28			; 0000001cH
  00084	3b ec		 cmp	 ebp, esp
  00086	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c2 04 00	 ret	 4
?Write@ReverseStringWriter@Internal@Core@Math@Palmtree@@UAEX_W@Z ENDP ; Palmtree::Math::Core::Internal::ReverseStringWriter::Write
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ??0ReverseStringWriter@Internal@Core@Math@Palmtree@@QAE@PA_WI@Z
_TEXT	SEGMENT
tv79 = -16						; size = 4
tv82 = -12						; size = 4
tv73 = -8						; size = 4
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
??0ReverseStringWriter@Internal@Core@Math@Palmtree@@QAE@PA_WI@Z PROC ; Palmtree::Math::Core::Internal::ReverseStringWriter::ReverseStringWriter, COMDAT
; _this$ = ecx

; 265  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001a	b9 00 00 00 00	 mov	 ecx, OFFSET __80E6779E_pmc_stringio@h
  0001f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 264  :             : StringWriter(buffer != nullptr ? buffer + size : nullptr, buffer, buffer != nullptr ? buffer + size : nullptr)

  00024	83 7d 08 00	 cmp	 DWORD PTR _buffer$[ebp], 0
  00028	74 0e		 je	 SHORT $LN3@ReverseStr
  0002a	8b 45 0c	 mov	 eax, DWORD PTR _size$[ebp]
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _buffer$[ebp]
  00030	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00033	89 55 f8	 mov	 DWORD PTR tv73[ebp], edx
  00036	eb 07		 jmp	 SHORT $LN4@ReverseStr
$LN3@ReverseStr:
  00038	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$LN4@ReverseStr:
  0003f	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  00042	89 45 f4	 mov	 DWORD PTR tv82[ebp], eax
  00045	83 7d 08 00	 cmp	 DWORD PTR _buffer$[ebp], 0
  00049	74 0e		 je	 SHORT $LN5@ReverseStr
  0004b	8b 4d 0c	 mov	 ecx, DWORD PTR _size$[ebp]
  0004e	8b 55 08	 mov	 edx, DWORD PTR _buffer$[ebp]
  00051	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00054	89 45 f0	 mov	 DWORD PTR tv79[ebp], eax
  00057	eb 07		 jmp	 SHORT $LN6@ReverseStr
$LN5@ReverseStr:
  00059	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv79[ebp], 0
$LN6@ReverseStr:
  00060	8b 4d f8	 mov	 ecx, DWORD PTR tv73[ebp]
  00063	51		 push	 ecx
  00064	8b 55 f4	 mov	 edx, DWORD PTR tv82[ebp]
  00067	52		 push	 edx
  00068	8b 45 f0	 mov	 eax, DWORD PTR tv79[ebp]
  0006b	50		 push	 eax
  0006c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	e8 00 00 00 00	 call	 ??0StringWriter@Internal@Core@Math@Palmtree@@IAE@PA_W00@Z ; Palmtree::Math::Core::Internal::StringWriter::StringWriter

; 265  :         {

  00074	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ReverseStringWriter@Internal@Core@Math@Palmtree@@6B@

; 266  :             Write(L'\0');

  0007d	6a 00		 push	 0
  0007f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00082	e8 00 00 00 00	 call	 ?Write@ReverseStringWriter@Internal@Core@Math@Palmtree@@UAEX_W@Z ; Palmtree::Math::Core::Internal::ReverseStringWriter::Write

; 267  :         }

  00087	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008a	83 c4 10	 add	 esp, 16			; 00000010H
  0008d	3b ec		 cmp	 ebp, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c2 08 00	 ret	 8
??0ReverseStringWriter@Internal@Core@Math@Palmtree@@QAE@PA_WI@Z ENDP ; Palmtree::Math::Core::Internal::ReverseStringWriter::ReverseStringWriter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?GetLength@StringWriter@Internal@Core@Math@Palmtree@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetLength@StringWriter@Internal@Core@Math@Palmtree@@QAEIXZ PROC ; Palmtree::Math::Core::Internal::StringWriter::GetLength, COMDAT
; _this$ = ecx

; 249  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __80E6779E_pmc_stringio@h
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 250  :             return (_written);

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 40 10	 mov	 eax, DWORD PTR [eax+16]

; 251  :         }

  0001e	83 c4 04	 add	 esp, 4
  00021	3b ec		 cmp	 ebp, esp
  00023	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
?GetLength@StringWriter@Internal@Core@Math@Palmtree@@QAEIXZ ENDP ; Palmtree::Math::Core::Internal::StringWriter::GetLength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?GetString@StringWriter@Internal@Core@Math@Palmtree@@UAEPA_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetString@StringWriter@Internal@Core@Math@Palmtree@@UAEPA_WXZ PROC ; Palmtree::Math::Core::Internal::StringWriter::GetString, COMDAT
; _this$ = ecx

; 244  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __80E6779E_pmc_stringio@h
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 245  :             return (_sob);

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 246  :         }

  0001e	83 c4 04	 add	 esp, 4
  00021	3b ec		 cmp	 ebp, esp
  00023	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
?GetString@StringWriter@Internal@Core@Math@Palmtree@@UAEPA_WXZ ENDP ; Palmtree::Math::Core::Internal::StringWriter::GetString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?Write@StringWriter@Internal@Core@Math@Palmtree@@UAEXPB_W@Z
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
_str$ = 8						; size = 4
?Write@StringWriter@Internal@Core@Math@Palmtree@@UAEXPB_W@Z PROC ; Palmtree::Math::Core::Internal::StringWriter::Write, COMDAT
; _this$ = ecx

; 235  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00018	b9 00 00 00 00	 mov	 ecx, OFFSET __80E6779E_pmc_stringio@h
  0001d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
$LN2@Write:

; 236  :             while (*str != L'\0')

  00022	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  00025	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00028	85 c9		 test	 ecx, ecx
  0002a	74 2c		 je	 SHORT $LN1@Write

; 237  :             {
; 238  :                 Write(*str);

  0002c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002f	8b 02		 mov	 eax, DWORD PTR [edx]
  00031	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00034	89 4d f8	 mov	 DWORD PTR tv71[ebp], ecx
  00037	8b f4		 mov	 esi, esp
  00039	8b 55 08	 mov	 edx, DWORD PTR _str$[ebp]
  0003c	0f b7 02	 movzx	 eax, WORD PTR [edx]
  0003f	50		 push	 eax
  00040	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	ff 55 f8	 call	 DWORD PTR tv71[ebp]
  00046	3b f4		 cmp	 esi, esp
  00048	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 239  :                 ++str;

  0004d	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  00050	83 c1 02	 add	 ecx, 2
  00053	89 4d 08	 mov	 DWORD PTR _str$[ebp], ecx

; 240  :             }

  00056	eb ca		 jmp	 SHORT $LN2@Write
$LN1@Write:

; 241  :         }

  00058	5e		 pop	 esi
  00059	83 c4 08	 add	 esp, 8
  0005c	3b ec		 cmp	 ebp, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c2 04 00	 ret	 4
?Write@StringWriter@Internal@Core@Math@Palmtree@@UAEXPB_W@Z ENDP ; Palmtree::Math::Core::Internal::StringWriter::Write
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?Write@StringWriter@Internal@Core@Math@Palmtree@@QAEX_WI@Z
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
_c$ = 8							; size = 2
_count$ = 12						; size = 4
?Write@StringWriter@Internal@Core@Math@Palmtree@@QAEX_WI@Z PROC ; Palmtree::Math::Core::Internal::StringWriter::Write, COMDAT
; _this$ = ecx

; 226  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00018	b9 00 00 00 00	 mov	 ecx, OFFSET __80E6779E_pmc_stringio@h
  0001d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
$LN2@Write:

; 227  :             while (count > 0)

  00022	83 7d 0c 00	 cmp	 DWORD PTR _count$[ebp], 0
  00026	76 2a		 jbe	 SHORT $LN1@Write

; 228  :             {
; 229  :                 Write(c);

  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00030	89 55 f8	 mov	 DWORD PTR tv70[ebp], edx
  00033	8b f4		 mov	 esi, esp
  00035	0f b7 45 08	 movzx	 eax, WORD PTR _c$[ebp]
  00039	50		 push	 eax
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	ff 55 f8	 call	 DWORD PTR tv70[ebp]
  00040	3b f4		 cmp	 esi, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 230  :                 --count;

  00047	8b 4d 0c	 mov	 ecx, DWORD PTR _count$[ebp]
  0004a	83 e9 01	 sub	 ecx, 1
  0004d	89 4d 0c	 mov	 DWORD PTR _count$[ebp], ecx

; 231  :             }

  00050	eb d0		 jmp	 SHORT $LN2@Write
$LN1@Write:

; 232  :         }

  00052	5e		 pop	 esi
  00053	83 c4 08	 add	 esp, 8
  00056	3b ec		 cmp	 ebp, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 08 00	 ret	 8
?Write@StringWriter@Internal@Core@Math@Palmtree@@QAEX_WI@Z ENDP ; Palmtree::Math::Core::Internal::StringWriter::Write
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?Write@StringWriter@Internal@Core@Math@Palmtree@@UAEX_W@Z
_TEXT	SEGMENT
$T1 = -28						; size = 24
_this$ = -4						; size = 4
_c$ = 8							; size = 2
?Write@StringWriter@Internal@Core@Math@Palmtree@@UAEX_W@Z PROC ; Palmtree::Math::Core::Internal::StringWriter::Write, COMDAT
; _this$ = ecx

; 214  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000e	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00011	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00014	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00017	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001a	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001d	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00020	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __80E6779E_pmc_stringio@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 215  :             if (_p != nullptr)

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00034	74 53		 je	 SHORT $LN2@Write

; 216  :             {
; 217  :                 if (_p + 1 >= _eob)

  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0003c	83 c2 02	 add	 edx, 2
  0003f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00042	3b 50 0c	 cmp	 edx, DWORD PTR [eax+12]
  00045	72 1b		 jb	 SHORT $LN3@Write

; 218  :                     throw InsufficientBufferException(L"書き込み先バッファのサイズが不足しています。");

  00047	68 00 00 00 00	 push	 OFFSET ??_C@_1CO@JABAMCFP@?$PP?x?$AAM?$PP?$LM?$AA?$HP?$AAH?$PP?P?$PP?C?$PP?U?$PP?$KB?$AAn?$PP?$LF?$PP?$KE?$PP?$LK?$AAL?$AA?$AN@
  0004c	8d 4d e4	 lea	 ecx, DWORD PTR $T1[ebp]
  0004f	e8 00 00 00 00	 call	 ??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException
  00054	68 00 00 00 00	 push	 OFFSET __TI2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@
  00059	8d 4d e4	 lea	 ecx, DWORD PTR $T1[ebp]
  0005c	51		 push	 ecx
  0005d	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Write:

; 219  :                 *_p++ = c;

  00062	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00065	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00068	66 8b 4d 08	 mov	 cx, WORD PTR _c$[ebp]
  0006c	66 89 08	 mov	 WORD PTR [eax], cx
  0006f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00072	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00075	83 c0 02	 add	 eax, 2
  00078	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 220  :                 *_p = L'\0';

  0007e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00081	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00084	33 c9		 xor	 ecx, ecx
  00086	66 89 08	 mov	 WORD PTR [eax], cx
$LN2@Write:

; 221  :             }
; 222  :             ++_written;

  00089	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0008c	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0008f	83 c0 01	 add	 eax, 1
  00092	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00095	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN4@Write:

; 223  :         }

  00098	83 c4 1c	 add	 esp, 28			; 0000001cH
  0009b	3b ec		 cmp	 ebp, esp
  0009d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c2 04 00	 ret	 4
?Write@StringWriter@Internal@Core@Math@Palmtree@@UAEX_W@Z ENDP ; Palmtree::Math::Core::Internal::StringWriter::Write
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ??0StringWriter@Internal@Core@Math@Palmtree@@QAE@PA_WI@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
??0StringWriter@Internal@Core@Math@Palmtree@@QAE@PA_WI@Z PROC ; Palmtree::Math::Core::Internal::StringWriter::StringWriter, COMDAT
; _this$ = ecx

; 210  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __80E6779E_pmc_stringio@h
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 209  :             : StringWriter(buffer, buffer, buffer != nullptr ? buffer + size : nullptr)

  00021	83 7d 08 00	 cmp	 DWORD PTR _buffer$[ebp], 0
  00025	74 0e		 je	 SHORT $LN3@StringWrit
  00027	8b 45 0c	 mov	 eax, DWORD PTR _size$[ebp]
  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _buffer$[ebp]
  0002d	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00030	89 55 f8	 mov	 DWORD PTR tv69[ebp], edx
  00033	eb 07		 jmp	 SHORT $LN4@StringWrit
$LN3@StringWrit:
  00035	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN4@StringWrit:
  0003c	8b 45 f8	 mov	 eax, DWORD PTR tv69[ebp]
  0003f	50		 push	 eax
  00040	8b 4d 08	 mov	 ecx, DWORD PTR _buffer$[ebp]
  00043	51		 push	 ecx
  00044	8b 55 08	 mov	 edx, DWORD PTR _buffer$[ebp]
  00047	52		 push	 edx
  00048	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	e8 00 00 00 00	 call	 ??0StringWriter@Internal@Core@Math@Palmtree@@IAE@PA_W00@Z ; Palmtree::Math::Core::Internal::StringWriter::StringWriter

; 210  :         {

  00050	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00053	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7StringWriter@Internal@Core@Math@Palmtree@@6B@

; 211  :         }

  00059	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	83 c4 08	 add	 esp, 8
  0005f	3b ec		 cmp	 ebp, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c2 08 00	 ret	 8
??0StringWriter@Internal@Core@Math@Palmtree@@QAE@PA_WI@Z ENDP ; Palmtree::Math::Core::Internal::StringWriter::StringWriter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ??0StringWriter@Internal@Core@Math@Palmtree@@IAE@PA_W00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
_sob$ = 12						; size = 4
_eob$ = 16						; size = 4
??0StringWriter@Internal@Core@Math@Palmtree@@IAE@PA_W00@Z PROC ; Palmtree::Math::Core::Internal::StringWriter::StringWriter, COMDAT
; _this$ = ecx

; 199  :         StringWriter(wchar_t* p, wchar_t* sob, wchar_t* eob)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __80E6779E_pmc_stringio@h
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7StringWriter@Internal@Core@Math@Palmtree@@6B@

; 200  :         {
; 201  :             _p = p;

  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00027	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 202  :             _sob = sob;

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 4d 0c	 mov	 ecx, DWORD PTR _sob$[ebp]
  00030	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 203  :             _eob = eob;

  00033	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00036	8b 45 10	 mov	 eax, DWORD PTR _eob$[ebp]
  00039	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 204  :             _written = 0;

  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 205  :         }

  00046	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00049	83 c4 04	 add	 esp, 4
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 0c 00	 ret	 12			; 0000000cH
??0StringWriter@Internal@Core@Math@Palmtree@@IAE@PA_W00@Z ENDP ; Palmtree::Math::Core::Internal::StringWriter::StringWriter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?StartsWith@ReverseStringReader@Internal@Core@Math@Palmtree@@CAHPB_W00@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_eoa$ = 12						; size = 4
_b$ = 16						; size = 4
?StartsWith@ReverseStringReader@Internal@Core@Math@Palmtree@@CAHPB_W00@Z PROC ; Palmtree::Math::Core::Internal::ReverseStringReader::StartsWith, COMDAT

; 178  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __80E6779E_pmc_stringio@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
$LN2@StartsWith:

; 179  :             while (*b != L'\0')

  0000d	8b 45 10	 mov	 eax, DWORD PTR _b$[ebp]
  00010	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00013	85 c9		 test	 ecx, ecx
  00015	74 30		 je	 SHORT $LN3@StartsWith

; 180  :             {
; 181  :                 if (a < eoa || *a != *b)

  00017	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0001a	3b 55 0c	 cmp	 edx, DWORD PTR _eoa$[ebp]
  0001d	72 10		 jb	 SHORT $LN5@StartsWith
  0001f	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  00022	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00025	8b 55 10	 mov	 edx, DWORD PTR _b$[ebp]
  00028	0f b7 02	 movzx	 eax, WORD PTR [edx]
  0002b	3b c8		 cmp	 ecx, eax
  0002d	74 04		 je	 SHORT $LN4@StartsWith
$LN5@StartsWith:

; 182  :                     return (0);

  0002f	33 c0		 xor	 eax, eax
  00031	eb 19		 jmp	 SHORT $LN1@StartsWith
$LN4@StartsWith:

; 183  :                 --a;

  00033	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  00036	83 e9 02	 sub	 ecx, 2
  00039	89 4d 08	 mov	 DWORD PTR _a$[ebp], ecx

; 184  :                 ++b;

  0003c	8b 55 10	 mov	 edx, DWORD PTR _b$[ebp]
  0003f	83 c2 02	 add	 edx, 2
  00042	89 55 10	 mov	 DWORD PTR _b$[ebp], edx

; 185  :             }

  00045	eb c6		 jmp	 SHORT $LN2@StartsWith
$LN3@StartsWith:

; 186  :             return (1);

  00047	b8 01 00 00 00	 mov	 eax, 1
$LN1@StartsWith:

; 187  :         }

  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
?StartsWith@ReverseStringReader@Internal@Core@Math@Palmtree@@CAHPB_W00@Z ENDP ; Palmtree::Math::Core::Internal::ReverseStringReader::StartsWith
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?SkipString@ReverseStringReader@Internal@Core@Math@Palmtree@@UAEXPB_W@Z
_TEXT	SEGMENT
tv90 = -36						; size = 4
tv92 = -32						; size = 4
$T1 = -28						; size = 24
_this$ = -4						; size = 4
_str$ = 8						; size = 4
?SkipString@ReverseStringReader@Internal@Core@Math@Palmtree@@UAEXPB_W@Z PROC ; Palmtree::Math::Core::Internal::ReverseStringReader::SkipString, COMDAT
; _this$ = ecx

; 167  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0000f	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00012	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00015	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00018	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0001b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00021	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00024	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00027	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0002a	b9 00 00 00 00	 mov	 ecx, OFFSET __80E6779E_pmc_stringio@h
  0002f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 168  :             if (!StartsWith(_p, _start, str))

  00034	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  00037	50		 push	 eax
  00038	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0003e	52		 push	 edx
  0003f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00042	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00045	51		 push	 ecx
  00046	e8 00 00 00 00	 call	 ?StartsWith@ReverseStringReader@Internal@Core@Math@Palmtree@@CAHPB_W00@Z ; Palmtree::Math::Core::Internal::ReverseStringReader::StartsWith
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004e	85 c0		 test	 eax, eax
  00050	75 20		 jne	 SHORT $LN2@SkipString

; 169  :             {
; 170  :                 // str で始まっていないにもかかわらず、strをスキップしようとした。
; 171  :                 throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_stringio.h;ReverseStringReader::SkipString;1");

  00052	68 00 00 00 00	 push	 OFFSET ??_C@_1GC@GGAPGHKN@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  0005c	8d 4d e4	 lea	 ecx, DWORD PTR $T1[ebp]
  0005f	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00064	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00069	8d 55 e4	 lea	 edx, DWORD PTR $T1[ebp]
  0006c	52		 push	 edx
  0006d	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@SkipString:

; 172  :             }
; 173  :             _p -= lstrlenW(str);

  00072	8b f4		 mov	 esi, esp
  00074	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  00077	50		 push	 eax
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  0007e	3b f4		 cmp	 esi, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	d1 e0		 shl	 eax, 1
  00087	89 45 e0	 mov	 DWORD PTR tv92[ebp], eax
  0008a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00090	89 55 dc	 mov	 DWORD PTR tv90[ebp], edx
  00093	8b 45 dc	 mov	 eax, DWORD PTR tv90[ebp]
  00096	2b 45 e0	 sub	 eax, DWORD PTR tv92[ebp]
  00099	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009c	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN3@SkipString:

; 174  :         }

  0009f	5e		 pop	 esi
  000a0	83 c4 24	 add	 esp, 36			; 00000024H
  000a3	3b ec		 cmp	 ebp, esp
  000a5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c2 04 00	 ret	 4
?SkipString@ReverseStringReader@Internal@Core@Math@Palmtree@@UAEXPB_W@Z ENDP ; Palmtree::Math::Core::Internal::ReverseStringReader::SkipString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?StartsWith@ReverseStringReader@Internal@Core@Math@Palmtree@@UAEHPB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_str$ = 8						; size = 4
?StartsWith@ReverseStringReader@Internal@Core@Math@Palmtree@@UAEHPB_W@Z PROC ; Palmtree::Math::Core::Internal::ReverseStringReader::StartsWith, COMDAT
; _this$ = ecx

; 162  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __80E6779E_pmc_stringio@h
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 163  :             return (StartsWith(_p, _start, str));

  00018	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  0001b	50		 push	 eax
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00022	52		 push	 edx
  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 ?StartsWith@ReverseStringReader@Internal@Core@Math@Palmtree@@CAHPB_W00@Z ; Palmtree::Math::Core::Internal::ReverseStringReader::StartsWith
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 164  :         }

  00032	83 c4 04	 add	 esp, 4
  00035	3b ec		 cmp	 ebp, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
?StartsWith@ReverseStringReader@Internal@Core@Math@Palmtree@@UAEHPB_W@Z ENDP ; Palmtree::Math::Core::Internal::ReverseStringReader::StartsWith
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?Progress@ReverseStringReader@Internal@Core@Math@Palmtree@@UAEXXZ
_TEXT	SEGMENT
$T1 = -28						; size = 24
_this$ = -4						; size = 4
?Progress@ReverseStringReader@Internal@Core@Math@Palmtree@@UAEXXZ PROC ; Palmtree::Math::Core::Internal::ReverseStringReader::Progress, COMDAT
; _this$ = ecx

; 155  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000e	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00011	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00014	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00017	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001a	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001d	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00020	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __80E6779E_pmc_stringio@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 156  :             if (_p < _start)

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00036	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00039	73 20		 jae	 SHORT $LN2@Progress

; 157  :                 throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_stringio.h;ReverseStringReader::Progress;1");

  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_1FO@BNHGDLLE@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  00045	8d 4d e4	 lea	 ecx, DWORD PTR $T1[ebp]
  00048	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  0004d	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00052	8d 45 e4	 lea	 eax, DWORD PTR $T1[ebp]
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@Progress:

; 158  :             --_p;

  0005b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00061	83 ea 02	 sub	 edx, 2
  00064	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN3@Progress:

; 159  :         }

  0006a	83 c4 1c	 add	 esp, 28			; 0000001cH
  0006d	3b ec		 cmp	 ebp, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
?Progress@ReverseStringReader@Internal@Core@Math@Palmtree@@UAEXXZ ENDP ; Palmtree::Math::Core::Internal::ReverseStringReader::Progress
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?PeekChar@ReverseStringReader@Internal@Core@Math@Palmtree@@UAE_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?PeekChar@ReverseStringReader@Internal@Core@Math@Palmtree@@UAE_WXZ PROC ; Palmtree::Math::Core::Internal::ReverseStringReader::PeekChar, COMDAT
; _this$ = ecx

; 148  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __80E6779E_pmc_stringio@h
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 149  :             if (_p < _start)

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00021	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00024	73 04		 jae	 SHORT $LN2@PeekChar

; 150  :                 return (L'\0');

  00026	33 c0		 xor	 eax, eax
  00028	eb 09		 jmp	 SHORT $LN1@PeekChar
$LN2@PeekChar:

; 151  :             return (*_p);

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00030	66 8b 01	 mov	 ax, WORD PTR [ecx]
$LN1@PeekChar:

; 152  :         }

  00033	83 c4 04	 add	 esp, 4
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?PeekChar@ReverseStringReader@Internal@Core@Math@Palmtree@@UAE_WXZ ENDP ; Palmtree::Math::Core::Internal::ReverseStringReader::PeekChar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ??0ReverseStringReader@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0ReverseStringReader@Internal@Core@Math@Palmtree@@QAE@PB_W@Z PROC ; Palmtree::Math::Core::Internal::ReverseStringReader::ReverseStringReader, COMDAT
; _this$ = ecx

; 142  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	b9 00 00 00 00	 mov	 ecx, OFFSET __80E6779E_pmc_stringio@h
  00014	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 141  :             : StringReader(nullptr)

  00019	6a 00		 push	 0
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ??0StringReader@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::StringReader::StringReader

; 142  :         {

  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ReverseStringReader@Internal@Core@Math@Palmtree@@6B@

; 143  :             _start = p;

  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00032	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 144  :             _p = p + lstrlenW(p) - 1;

  00035	8b f4		 mov	 esi, esp
  00037	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0003a	50		 push	 eax
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  00041	3b f4		 cmp	 esi, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  0004b	8d 54 41 fe	 lea	 edx, DWORD PTR [ecx+eax*2-2]
  0004f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00052	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 145  :         }

  00055	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00058	5e		 pop	 esi
  00059	83 c4 04	 add	 esp, 4
  0005c	3b ec		 cmp	 ebp, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c2 04 00	 ret	 4
??0ReverseStringReader@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ENDP ; Palmtree::Math::Core::Internal::ReverseStringReader::ReverseStringReader
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?StartsWith@StringReader@Internal@Core@Math@Palmtree@@CAHPB_W0@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?StartsWith@StringReader@Internal@Core@Math@Palmtree@@CAHPB_W0@Z PROC ; Palmtree::Math::Core::Internal::StringReader::StartsWith, COMDAT

; 120  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __80E6779E_pmc_stringio@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
$LN2@StartsWith:

; 121  :             while (*b != L'\0')

  0000d	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  00010	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00013	85 c9		 test	 ecx, ecx
  00015	74 28		 je	 SHORT $LN3@StartsWith

; 122  :             {
; 123  :                 if (*a != *b)

  00017	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0001a	0f b7 02	 movzx	 eax, WORD PTR [edx]
  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  00020	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  00023	3b c2		 cmp	 eax, edx
  00025	74 04		 je	 SHORT $LN4@StartsWith

; 124  :                     return (0);

  00027	33 c0		 xor	 eax, eax
  00029	eb 19		 jmp	 SHORT $LN1@StartsWith
$LN4@StartsWith:

; 125  :                 ++a;

  0002b	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0002e	83 c0 02	 add	 eax, 2
  00031	89 45 08	 mov	 DWORD PTR _a$[ebp], eax

; 126  :                 ++b;

  00034	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  00037	83 c1 02	 add	 ecx, 2
  0003a	89 4d 0c	 mov	 DWORD PTR _b$[ebp], ecx

; 127  :             }

  0003d	eb ce		 jmp	 SHORT $LN2@StartsWith
$LN3@StartsWith:

; 128  :             return (1);

  0003f	b8 01 00 00 00	 mov	 eax, 1
$LN1@StartsWith:

; 129  :         }

  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
?StartsWith@StringReader@Internal@Core@Math@Palmtree@@CAHPB_W0@Z ENDP ; Palmtree::Math::Core::Internal::StringReader::StartsWith
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?SkipString@StringReader@Internal@Core@Math@Palmtree@@UAEXPB_W@Z
_TEXT	SEGMENT
tv80 = -36						; size = 4
tv82 = -32						; size = 4
$T1 = -28						; size = 24
_this$ = -4						; size = 4
_str$ = 8						; size = 4
?SkipString@StringReader@Internal@Core@Math@Palmtree@@UAEXPB_W@Z PROC ; Palmtree::Math::Core::Internal::StringReader::SkipString, COMDAT
; _this$ = ecx

; 109  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0000f	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00012	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00015	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00018	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0001b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00021	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00024	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00027	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0002a	b9 00 00 00 00	 mov	 ecx, OFFSET __80E6779E_pmc_stringio@h
  0002f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 110  :             if (!StartsWith(_p, str))

  00034	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  00037	50		 push	 eax
  00038	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0003e	52		 push	 edx
  0003f	e8 00 00 00 00	 call	 ?StartsWith@StringReader@Internal@Core@Math@Palmtree@@CAHPB_W0@Z ; Palmtree::Math::Core::Internal::StringReader::StartsWith
  00044	83 c4 08	 add	 esp, 8
  00047	85 c0		 test	 eax, eax
  00049	75 20		 jne	 SHORT $LN2@SkipString

; 111  :             {
; 112  :                 // str で始まっていないにもかかわらず、strをスキップしようとした。
; 113  :                 throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_stringio.h;StringReader::SkipString;1");

  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_1FE@KONPIGEM@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  00055	8d 4d e4	 lea	 ecx, DWORD PTR $T1[ebp]
  00058	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  0005d	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00062	8d 45 e4	 lea	 eax, DWORD PTR $T1[ebp]
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@SkipString:

; 114  :             }
; 115  :             _p += lstrlenW(str);

  0006b	8b f4		 mov	 esi, esp
  0006d	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  00070	51		 push	 ecx
  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  00077	3b f4		 cmp	 esi, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007e	d1 e0		 shl	 eax, 1
  00080	89 45 e0	 mov	 DWORD PTR tv82[ebp], eax
  00083	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00086	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00089	89 45 dc	 mov	 DWORD PTR tv80[ebp], eax
  0008c	8b 4d dc	 mov	 ecx, DWORD PTR tv80[ebp]
  0008f	03 4d e0	 add	 ecx, DWORD PTR tv82[ebp]
  00092	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00095	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$LN3@SkipString:

; 116  :         }

  00098	5e		 pop	 esi
  00099	83 c4 24	 add	 esp, 36			; 00000024H
  0009c	3b ec		 cmp	 ebp, esp
  0009e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a3	8b e5		 mov	 esp, ebp
  000a5	5d		 pop	 ebp
  000a6	c2 04 00	 ret	 4
?SkipString@StringReader@Internal@Core@Math@Palmtree@@UAEXPB_W@Z ENDP ; Palmtree::Math::Core::Internal::StringReader::SkipString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?StartsWith@StringReader@Internal@Core@Math@Palmtree@@UAEHPB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_str$ = 8						; size = 4
?StartsWith@StringReader@Internal@Core@Math@Palmtree@@UAEHPB_W@Z PROC ; Palmtree::Math::Core::Internal::StringReader::StartsWith, COMDAT
; _this$ = ecx

; 84   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __80E6779E_pmc_stringio@h
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 85   :             return (StartsWith(_p, str));

  00018	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  0001b	50		 push	 eax
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00022	52		 push	 edx
  00023	e8 00 00 00 00	 call	 ?StartsWith@StringReader@Internal@Core@Math@Palmtree@@CAHPB_W0@Z ; Palmtree::Math::Core::Internal::StringReader::StartsWith
  00028	83 c4 08	 add	 esp, 8

; 86   :         }

  0002b	83 c4 04	 add	 esp, 4
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?StartsWith@StringReader@Internal@Core@Math@Palmtree@@UAEHPB_W@Z ENDP ; Palmtree::Math::Core::Internal::StringReader::StartsWith
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?Progress@StringReader@Internal@Core@Math@Palmtree@@UAEXXZ
_TEXT	SEGMENT
$T1 = -28						; size = 24
_this$ = -4						; size = 4
?Progress@StringReader@Internal@Core@Math@Palmtree@@UAEXXZ PROC ; Palmtree::Math::Core::Internal::StringReader::Progress, COMDAT
; _this$ = ecx

; 77   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000e	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00011	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00014	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00017	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001a	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001d	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00020	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __80E6779E_pmc_stringio@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 78   :             if (*_p == L'\0')

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00033	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  00036	85 d2		 test	 edx, edx
  00038	75 20		 jne	 SHORT $LN2@Progress

; 79   :                 throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_stringio.h;StringReader::Progress;1");

  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_1FA@CNGEABBJ@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  00044	8d 4d e4	 lea	 ecx, DWORD PTR $T1[ebp]
  00047	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  0004c	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00051	8d 45 e4	 lea	 eax, DWORD PTR $T1[ebp]
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@Progress:

; 80   :             ++_p;

  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00060	83 c2 02	 add	 edx, 2
  00063	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00066	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN3@Progress:

; 81   :         }

  00069	83 c4 1c	 add	 esp, 28			; 0000001cH
  0006c	3b ec		 cmp	 ebp, esp
  0006e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c3		 ret	 0
?Progress@StringReader@Internal@Core@Math@Palmtree@@UAEXXZ ENDP ; Palmtree::Math::Core::Internal::StringReader::Progress
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?PeekChar@StringReader@Internal@Core@Math@Palmtree@@UAE_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?PeekChar@StringReader@Internal@Core@Math@Palmtree@@UAE_WXZ PROC ; Palmtree::Math::Core::Internal::StringReader::PeekChar, COMDAT
; _this$ = ecx

; 72   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __80E6779E_pmc_stringio@h
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 73   :             return (*_p);

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001e	66 8b 01	 mov	 ax, WORD PTR [ecx]

; 74   :         }

  00021	83 c4 04	 add	 esp, 4
  00024	3b ec		 cmp	 ebp, esp
  00026	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
?PeekChar@StringReader@Internal@Core@Math@Palmtree@@UAE_WXZ ENDP ; Palmtree::Math::Core::Internal::StringReader::PeekChar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?ReadChar@StringReader@Internal@Core@Math@Palmtree@@QAE_W_W@Z
_TEXT	SEGMENT
_c$ = -8						; size = 2
_this$ = -4						; size = 4
_default_char$ = 8					; size = 2
?ReadChar@StringReader@Internal@Core@Math@Palmtree@@QAE_W_W@Z PROC ; Palmtree::Math::Core::Internal::StringReader::ReadChar, COMDAT
; _this$ = ecx

; 63   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00018	b9 00 00 00 00	 mov	 ecx, OFFSET __80E6779E_pmc_stringio@h
  0001d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 64   :             wchar_t c = PeekChar();

  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b 10		 mov	 edx, DWORD PTR [eax]
  00027	8b f4		 mov	 esi, esp
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	8b 02		 mov	 eax, DWORD PTR [edx]
  0002e	ff d0		 call	 eax
  00030	3b f4		 cmp	 esi, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	66 89 45 f8	 mov	 WORD PTR _c$[ebp], ax

; 65   :             if (c == L'\0')

  0003b	0f b7 4d f8	 movzx	 ecx, WORD PTR _c$[ebp]
  0003f	85 c9		 test	 ecx, ecx
  00041	75 06		 jne	 SHORT $LN2@ReadChar

; 66   :                 return (default_char);

  00043	66 8b 45 08	 mov	 ax, WORD PTR _default_char$[ebp]
  00047	eb 1a		 jmp	 SHORT $LN1@ReadChar
$LN2@ReadChar:

; 67   :             Progress();

  00049	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004c	8b 02		 mov	 eax, DWORD PTR [edx]
  0004e	8b f4		 mov	 esi, esp
  00050	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00056	ff d2		 call	 edx
  00058	3b f4		 cmp	 esi, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 68   :             return (c);

  0005f	66 8b 45 f8	 mov	 ax, WORD PTR _c$[ebp]
$LN1@ReadChar:

; 69   :         }

  00063	5e		 pop	 esi
  00064	83 c4 08	 add	 esp, 8
  00067	3b ec		 cmp	 ebp, esp
  00069	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c2 04 00	 ret	 4
?ReadChar@StringReader@Internal@Core@Math@Palmtree@@QAE_W_W@Z ENDP ; Palmtree::Math::Core::Internal::StringReader::ReadChar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?ReadChar@StringReader@Internal@Core@Math@Palmtree@@QAE_WXZ
_TEXT	SEGMENT
_c$ = -8						; size = 2
_this$ = -4						; size = 4
?ReadChar@StringReader@Internal@Core@Math@Palmtree@@QAE_WXZ PROC ; Palmtree::Math::Core::Internal::StringReader::ReadChar, COMDAT
; _this$ = ecx

; 56   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00018	b9 00 00 00 00	 mov	 ecx, OFFSET __80E6779E_pmc_stringio@h
  0001d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 57   :             wchar_t c = PeekChar();

  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b 10		 mov	 edx, DWORD PTR [eax]
  00027	8b f4		 mov	 esi, esp
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	8b 02		 mov	 eax, DWORD PTR [edx]
  0002e	ff d0		 call	 eax
  00030	3b f4		 cmp	 esi, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	66 89 45 f8	 mov	 WORD PTR _c$[ebp], ax

; 58   :             Progress();

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00040	8b f4		 mov	 esi, esp
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00048	ff d0		 call	 eax
  0004a	3b f4		 cmp	 esi, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 59   :             return (c);

  00051	66 8b 45 f8	 mov	 ax, WORD PTR _c$[ebp]

; 60   :         }

  00055	5e		 pop	 esi
  00056	83 c4 08	 add	 esp, 8
  00059	3b ec		 cmp	 ebp, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
?ReadChar@StringReader@Internal@Core@Math@Palmtree@@QAE_WXZ ENDP ; Palmtree::Math::Core::Internal::StringReader::ReadChar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ??0StringReader@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0StringReader@Internal@Core@Math@Palmtree@@QAE@PB_W@Z PROC ; Palmtree::Math::Core::Internal::StringReader::StringReader, COMDAT
; _this$ = ecx

; 50   :         StringReader(const wchar_t* p)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __80E6779E_pmc_stringio@h
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7StringReader@Internal@Core@Math@Palmtree@@6B@

; 51   :         {
; 52   :             _p = p;

  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00027	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 53   :         }

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 c4 04	 add	 esp, 4
  00030	3b ec		 cmp	 ebp, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
??0StringReader@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ENDP ; Palmtree::Math::Core::Internal::StringReader::StringReader
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 18		 push	 24			; 00000018H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException, COMDAT
; _this$ = ecx

; 295  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 296  :         }

  00047	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException, COMDAT
; _this$ = ecx

; 291  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 290  :             : Exception(p)

  00037	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 291  :         {

  0004a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@

; 292  :         }

  00053	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00060	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00067	59		 pop	 ecx
  00068	83 c4 10	 add	 esp, 16			; 00000010H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
_data$ = 12						; size = 4
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException, COMDAT
; _this$ = ecx

; 286  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 285  :             : Exception(PMC_STATUS_INTERNAL_ERROR, message, data)

  00037	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _message$[ebp]
  0003e	51		 push	 ecx
  0003f	68 00 ff ff ff	 push	 -256			; ffffff00H
  00044	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 286  :         {

  00053	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00056	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@

; 287  :         }

  0005c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00063	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00066	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00069	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00070	59		 pop	 ecx
  00071	83 c4 10	 add	 esp, 16			; 00000010H
  00074	3b ec		 cmp	 ebp, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GNotSupportedException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GNotSupportedException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::NotSupportedException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1NotSupportedException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::NotSupportedException::~NotSupportedException
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 18		 push	 24			; 00000018H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GNotSupportedException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::NotSupportedException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1NotSupportedException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1NotSupportedException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::NotSupportedException::~NotSupportedException, COMDAT
; _this$ = ecx

; 276  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1NotSupportedException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7NotSupportedException@Internal@Core@Math@Palmtree@@6B@
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 277  :         }

  00047	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1NotSupportedException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??1NotSupportedException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1NotSupportedException@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1NotSupportedException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::NotSupportedException::~NotSupportedException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::NotSupportedException::NotSupportedException, COMDAT
; _this$ = ecx

; 272  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 271  :             : Exception(p)

  00037	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 272  :         {

  0004a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7NotSupportedException@Internal@Core@Math@Palmtree@@6B@

; 273  :         }

  00053	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00060	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00067	59		 pop	 ecx
  00068	83 c4 10	 add	 esp, 16			; 00000010H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::NotSupportedException::NotSupportedException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z PROC ; Palmtree::Math::Core::Internal::NotSupportedException::NotSupportedException, COMDAT
; _this$ = ecx

; 267  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 266  :             : Exception(PMC_STATUS_NOT_SUPPORTED, message)

  00037	8b 45 08	 mov	 eax, DWORD PTR _message$[ebp]
  0003a	50		 push	 eax
  0003b	6a f6		 push	 -10			; fffffff6H
  0003d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 267  :         {

  0004c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7NotSupportedException@Internal@Core@Math@Palmtree@@6B@

; 268  :         }

  00055	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	83 c4 10	 add	 esp, 16			; 00000010H
  0006d	3b ec		 cmp	 ebp, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0NotSupportedException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ENDP ; Palmtree::Math::Core::Internal::NotSupportedException::NotSupportedException
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::InsufficientBufferException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::InsufficientBufferException::~InsufficientBufferException
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 18		 push	 24			; 00000018H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::InsufficientBufferException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::InsufficientBufferException::~InsufficientBufferException, COMDAT
; _this$ = ecx

; 238  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 239  :         }

  00047	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::InsufficientBufferException::~InsufficientBufferException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException, COMDAT
; _this$ = ecx

; 234  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 233  :             : Exception(p)

  00037	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 234  :         {

  0004a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@

; 235  :         }

  00053	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00060	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00067	59		 pop	 ecx
  00068	83 c4 10	 add	 esp, 16			; 00000010H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z PROC ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException, COMDAT
; _this$ = ecx

; 229  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 228  :             : Exception(PMC_STATUS_INSUFFICIENT_BUFFER, message)

  00037	8b 45 08	 mov	 eax, DWORD PTR _message$[ebp]
  0003a	50		 push	 eax
  0003b	6a f8		 push	 -8			; fffffff8H
  0003d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 229  :         {

  0004c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@

; 230  :         }

  00055	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	83 c4 10	 add	 esp, 16			; 00000010H
  0006d	3b ec		 cmp	 ebp, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ENDP ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GFormatException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GFormatException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::FormatException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1FormatException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::FormatException::~FormatException
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 18		 push	 24			; 00000018H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GFormatException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::FormatException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1FormatException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1FormatException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::FormatException::~FormatException, COMDAT
; _this$ = ecx

; 219  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1FormatException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7FormatException@Internal@Core@Math@Palmtree@@6B@
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 220  :         }

  00047	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1FormatException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??1FormatException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1FormatException@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1FormatException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::FormatException::~FormatException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0FormatException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0FormatException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::FormatException::FormatException, COMDAT
; _this$ = ecx

; 215  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0FormatException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 214  :             : Exception(p)

  00037	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 215  :         {

  0004a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7FormatException@Internal@Core@Math@Palmtree@@6B@

; 216  :         }

  00053	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00060	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00067	59		 pop	 ecx
  00068	83 c4 10	 add	 esp, 16			; 00000010H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FormatException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0FormatException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0FormatException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0FormatException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::FormatException::FormatException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0FormatException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
??0FormatException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z PROC ; Palmtree::Math::Core::Internal::FormatException::FormatException, COMDAT
; _this$ = ecx

; 210  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0FormatException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 209  :             : Exception(PMC_STATUS_FORMAT_ERROR, message)

  00037	8b 45 08	 mov	 eax, DWORD PTR _message$[ebp]
  0003a	50		 push	 eax
  0003b	6a f9		 push	 -7			; fffffff9H
  0003d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 210  :         {

  0004c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7FormatException@Internal@Core@Math@Palmtree@@6B@

; 211  :         }

  00055	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	83 c4 10	 add	 esp, 16			; 00000010H
  0006d	3b ec		 cmp	 ebp, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0FormatException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0FormatException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0FormatException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0FormatException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ENDP ; Palmtree::Math::Core::Internal::FormatException::FormatException
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 18		 push	 24			; 00000018H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException, COMDAT
; _this$ = ecx

; 124  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 125  :         }

  00047	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException, COMDAT
; _this$ = ecx

; 120  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 119  :             : Exception(p)

  00037	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 120  :         {

  0004a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@

; 121  :         }

  00053	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00060	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00067	59		 pop	 ecx
  00068	83 c4 10	 add	 esp, 16			; 00000010H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
_param_name$ = 12					; size = 4
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException, COMDAT
; _this$ = ecx

; 115  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 114  :             : Exception(PMC_STATUS_ARGUMENT_NULL_ERROR, message, param_name)

  00037	8b 45 0c	 mov	 eax, DWORD PTR _param_name$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _message$[ebp]
  0003e	51		 push	 ecx
  0003f	6a fe		 push	 -2			; fffffffeH
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00049	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 115  :         {

  00050	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00053	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@

; 116  :         }

  00059	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00060	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00063	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00066	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006d	59		 pop	 ecx
  0006e	83 c4 10	 add	 esp, 16			; 00000010H
  00071	3b ec		 cmp	 ebp, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 18		 push	 24			; 00000018H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ PROC	; Palmtree::Math::Core::Internal::Exception::~Exception, COMDAT
; _this$ = ecx

; 70   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 71   :         }

  00047	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ENDP	; Palmtree::Math::Core::Internal::Exception::~Exception
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT
; _this$ = ecx

; 62   :         Exception(const Exception& p) noexcept(true)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00049	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 63   :         {
; 64   :             _code = p._code;

  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00055	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00058	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 65   :             _message = p._message;

  0005b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00061	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00064	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 66   :             _data = p._data;

  00067	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  0006d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00070	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 67   :         }

  00073	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0007a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0007d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00080	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00087	59		 pop	 ecx
  00088	83 c4 10	 add	 esp, 16			; 00000010H
  0008b	3b ec		 cmp	 ebp, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_code$ = 8						; size = 4
_message$ = 12						; size = 4
_data$ = 16						; size = 4
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT
; _this$ = ecx

; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00049	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 55   :         {
; 56   :             _code = code;

  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	8b 55 08	 mov	 edx, DWORD PTR _code$[ebp]
  00055	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 57   :             _message = message;

  00058	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	8b 4d 0c	 mov	 ecx, DWORD PTR _message$[ebp]
  0005e	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 58   :             _data = data;

  00061	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00064	8b 45 10	 mov	 eax, DWORD PTR _data$[ebp]
  00067	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 59   :         }

  0006a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00071	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00077	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007e	59		 pop	 ecx
  0007f	83 c4 10	 add	 esp, 16			; 00000010H
  00082	3b ec		 cmp	 ebp, esp
  00084	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_code$ = 8						; size = 4
_message$ = 12						; size = 4
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT
; _this$ = ecx

; 47   :         Exception(PMC_STATUS_CODE code, const wchar_t* message) noexcept(true)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00049	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 48   :         {
; 49   :             _code = code;

  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	8b 55 08	 mov	 edx, DWORD PTR _code$[ebp]
  00055	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 50   :             _message = message;

  00058	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	8b 4d 0c	 mov	 ecx, DWORD PTR _message$[ebp]
  0005e	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 51   :             _data = nullptr;

  00061	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00064	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0

; 52   :         }

  0006b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00072	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00075	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00078	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007f	59		 pop	 ecx
  00080	83 c4 10	 add	 esp, 16			; 00000010H
  00083	3b ec		 cmp	 ebp, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 90   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __9BB4E194_vcruntime_exception@h
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 91   :         return _Data._What ? _Data._What : "Unknown exception";

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00028	74 0b		 je	 SHORT $LN3@what
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00030	89 55 f8	 mov	 DWORD PTR tv69[ebp], edx
  00033	eb 07		 jmp	 SHORT $LN4@what
$LN3@what:
  00035	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
$LN4@what:
  0003c	8b 45 f8	 mov	 eax, DWORD PTR tv69[ebp]

; 92   :     }

  0003f	83 c4 08	 add	 esp, 8
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 85   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1exception@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __9BB4E194_vcruntime_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 86   :         __std_exception_destroy(&_Data);

  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	83 c1 04	 add	 ecx, 4
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 ___std_exception_destroy
  0004c	83 c4 04	 add	 esp, 4

; 87   :     }

  0004f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00052	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00059	59		 pop	 ecx
  0005a	83 c4 10	 add	 esp, 16			; 00000010H
  0005d	3b ec		 cmp	 ebp, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1exception@std@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1exception@std@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0exception@std@@QAE@XZ PROC				; std::exception::exception, COMDAT
; _this$ = ecx

; 50   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0exception@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __9BB4E194_vcruntime_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 49   :         : _Data()

  00040	33 c9		 xor	 ecx, ecx
  00042	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00045	83 c2 04	 add	 edx, 4
  00048	89 0a		 mov	 DWORD PTR [edx], ecx
  0004a	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 51   :     }

  0004d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	83 c4 10	 add	 esp, 16			; 00000010H
  0005e	3b ec		 cmp	 ebp, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0exception@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0exception@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0exception@std@@QAE@XZ ENDP				; std::exception::exception
END
