; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\TEST_op_ModPow.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__630249ED_pmc_uint_debug@h DB 01H
__C90C8F96_test_op_modpow@c DB 01H
msvcjmc	ENDS
PUBLIC	_TEST_PMC_ModPow_X_X_X
PUBLIC	__JustMyCode_Default
EXTRN	_TEST_Assert:PROC
EXTRN	_FormatTestLabel:PROC
EXTRN	_FormatTestMesssage:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
_DATA	SEGMENT
$SG94687 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A'
	DB	00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H
	DB	'0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG94688 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'M', 00H, 'o', 00H
	DB	'd', 00H, 'P', 00H, 'o', 00H, 'w', 00H, '_', 00H, 'X', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG94689 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A'
	DB	00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H
	DB	'0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG94690 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'M', 00H, 'o', 00H
	DB	'd', 00H, 'P', 00H, 'o', 00H, 'w', 00H, '_', 00H, 'X', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG94691 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A'
	DB	00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H
	DB	'0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG94692 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'M', 00H, 'o', 00H
	DB	'd', 00H, 'P', 00H, 'o', 00H, 'w', 00H, '_', 00H, 'X', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG94693 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'M', 00H, 'o', 00H
	DB	'd', 00H, 'P', 00H, 'o', 00H, 'w', 00H, '_', 00H, 'X', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'X', 00H, 'n0', 0a9H, '_0^', 0b3H, '0'
	DB	0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
$SG94694 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'M', 00H, 'o', 00H
	DB	'd', 00H, 'P', 00H, 'o', 00H, 'w', 00H, '_', 00H, 'X', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG94696 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'T', 00H, 'o', 00H
	DB	'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A', 00H, 'r', 00H, 'r'
	DB	00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H, '0', 0fcH, '0'
	DB	0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH, '0g0o0j0D'
	DB	'0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG94697 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'M', 00H, 'o', 00H
	DB	'd', 00H, 'P', 00H, 'o', 00H, 'w', 00H, '_', 00H, 'X', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG94698 DB	0c7H, '0', 0fcH, '0', 0bfH, '0n0', 085H, 'Q', 0b9H, '[L0', 00H
	DB	'N', 0f4H, 081H, 'W0j0D0', 00H, 00H
	ORG $+2
$SG94699 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'M', 00H, 'o', 00H
	DB	'd', 00H, 'P', 00H, 'o', 00H, 'w', 00H, '_', 00H, 'X', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
_DATA	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_debug.h
_TEXT	SEGMENT
_buffer1$ = 8						; size = 4
_count1$ = 12						; size = 4
_buffer2$ = 16						; size = 4
_count2$ = 20						; size = 4
__EQUALS_MEMORY PROC

; 147  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __630249ED_pmc_uint_debug@h
	call	@__CheckForDebuggerJustMyCode@4

; 148  :     if (count1 != count2)

	mov	eax, DWORD PTR _count1$[ebp]
	cmp	eax, DWORD PTR _count2$[ebp]
	je	SHORT $LN2@EQUALS_MEM

; 149  :         return (-1);

	or	eax, -1
	jmp	SHORT $LN1@EQUALS_MEM
$LN2@EQUALS_MEM:

; 150  :     while (count1 > 0)

	cmp	DWORD PTR _count1$[ebp], 0
	jbe	SHORT $LN3@EQUALS_MEM

; 151  :     {
; 152  :         if (*buffer1 != *buffer2)

	mov	ecx, DWORD PTR _buffer1$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _buffer2$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	edx, ecx
	je	SHORT $LN5@EQUALS_MEM

; 153  :             return (-1);

	or	eax, -1
	jmp	SHORT $LN1@EQUALS_MEM
$LN5@EQUALS_MEM:

; 154  :         ++buffer1;

	mov	edx, DWORD PTR _buffer1$[ebp]
	add	edx, 1
	mov	DWORD PTR _buffer1$[ebp], edx

; 155  :         ++buffer2;

	mov	eax, DWORD PTR _buffer2$[ebp]
	add	eax, 1
	mov	DWORD PTR _buffer2$[ebp], eax

; 156  :         --count1;

	mov	ecx, DWORD PTR _count1$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count1$[ebp], ecx

; 157  :     }

	jmp	SHORT $LN2@EQUALS_MEM
$LN3@EQUALS_MEM:

; 158  :     return (0);

	xor	eax, eax
$LN1@EQUALS_MEM:

; 159  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__EQUALS_MEMORY ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\test_op_modpow.c
_TEXT	SEGMENT
tv196 = -372						; size = 4
tv181 = -368						; size = 4
tv161 = -364						; size = 4
tv142 = -360						; size = 4
tv92 = -356						; size = 4
tv74 = -352						; size = 4
_r_result$ = -348					; size = 4
_m_result$ = -344					; size = 4
_e_result$ = -340					; size = 4
_v_result$ = -336					; size = 4
_result$ = -332						; size = 4
_actual_r_buf_size$ = -324				; size = 4
_actual_r_buf$ = -312					; size = 256
_r$ = -48						; size = 4
_m$ = -36						; size = 4
_e$ = -24						; size = 4
_v$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_v_buf$ = 20						; size = 4
_v_buf_size$ = 24					; size = 4
_e_buf$ = 28						; size = 4
_e_buf_size$ = 32					; size = 4
_m_buf$ = 36						; size = 4
_m_buf_size$ = 40					; size = 4
_desired_result_code$ = 44				; size = 4
_desired_r_buf$ = 48					; size = 4
_desired_r_buf_size$ = 52				; size = 4
_TEST_PMC_ModPow_X_X_X PROC

; 33   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 372				; 00000174H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-372]
	mov	ecx, 93					; 0000005dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __C90C8F96_test_op_modpow@c
	call	@__CheckForDebuggerJustMyCode@4

; 34   :     PMC_HANDLE_UINT v;
; 35   :     PMC_HANDLE_UINT e;
; 36   :     PMC_HANDLE_UINT m;
; 37   :     PMC_HANDLE_UINT r;
; 38   :     unsigned char actual_r_buf[256];
; 39   :     size_t actual_r_buf_size;
; 40   :     PMC_STATUS_CODE result;
; 41   :     PMC_STATUS_CODE v_result;
; 42   :     PMC_STATUS_CODE e_result;
; 43   :     PMC_STATUS_CODE m_result;
; 44   :     PMC_STATUS_CODE r_result;
; 45   :     TEST_Assert(env, FormatTestLabel(L"PMC_ModPow_X_X_X (%d.%d)", no, 1), (v_result = ep->FromByteArray(v_buf, v_buf_size, &v)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_FromByteArrayの復帰コードが期待通りではない(%d)", v_result));

	mov	esi, esp
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _v_result$[ebp], eax
	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN8@TEST_PMC_M
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN9@TEST_PMC_M
$LN8@TEST_PMC_M:
	mov	DWORD PTR tv74[ebp], 0
$LN9@TEST_PMC_M:
	mov	edx, DWORD PTR _v_result$[ebp]
	push	edx
	push	OFFSET $SG94687
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG94688
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 46   :     TEST_Assert(env, FormatTestLabel(L"PMC_ModPow_X_X_X (%d.%d)", no, 2), (e_result = ep->FromByteArray(e_buf, e_buf_size, &e)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_FromByteArrayの復帰コードが期待通りではない(%d)", e_result));

	mov	esi, esp
	lea	eax, DWORD PTR _e$[ebp]
	push	eax
	mov	ecx, DWORD PTR _e_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _e_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _e_result$[ebp], eax
	cmp	DWORD PTR _e_result$[ebp], 0
	jne	SHORT $LN10@TEST_PMC_M
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN11@TEST_PMC_M
$LN10@TEST_PMC_M:
	mov	DWORD PTR tv92[ebp], 0
$LN11@TEST_PMC_M:
	mov	edx, DWORD PTR _e_result$[ebp]
	push	edx
	push	OFFSET $SG94689
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv92[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG94690
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 47   :     TEST_Assert(env, FormatTestLabel(L"PMC_ModPow_X_X_X (%d.%d)", no, 3), (m_result = ep->FromByteArray(m_buf, m_buf_size, &m)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_FromByteArrayの復帰コードが期待通りではない(%d)", m_result));

	mov	esi, esp
	lea	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR _m_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _m_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _m_result$[ebp], eax
	cmp	DWORD PTR _m_result$[ebp], 0
	jne	SHORT $LN12@TEST_PMC_M
	mov	DWORD PTR tv142[ebp], 1
	jmp	SHORT $LN13@TEST_PMC_M
$LN12@TEST_PMC_M:
	mov	DWORD PTR tv142[ebp], 0
$LN13@TEST_PMC_M:
	mov	edx, DWORD PTR _m_result$[ebp]
	push	edx
	push	OFFSET $SG94691
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv142[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG94692
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 48   :     TEST_Assert(env, FormatTestLabel(L"PMC_ModPow_X_X_X (%d.%d)", no, 4), (r_result = ep->ModPow_X_X_X(v, e, m, &r)) == desired_result_code, FormatTestMesssage(L"PMC_ModPow_X_X_Xの復帰コードが期待通りではない(%d)", r_result));

	mov	esi, esp
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	mov	edx, DWORD PTR _e$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _r_result$[ebp], eax
	mov	eax, DWORD PTR _r_result$[ebp]
	cmp	eax, DWORD PTR _desired_result_code$[ebp]
	jne	SHORT $LN14@TEST_PMC_M
	mov	DWORD PTR tv161[ebp], 1
	jmp	SHORT $LN15@TEST_PMC_M
$LN14@TEST_PMC_M:
	mov	DWORD PTR tv161[ebp], 0
$LN15@TEST_PMC_M:
	mov	ecx, DWORD PTR _r_result$[ebp]
	push	ecx
	push	OFFSET $SG94693
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR tv161[ebp]
	push	edx
	push	4
	mov	eax, DWORD PTR _no$[ebp]
	push	eax
	push	OFFSET $SG94694
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 49   :     if (desired_result_code == PMC_STATUS_OK)

	cmp	DWORD PTR _desired_result_code$[ebp], 0
	jne	$LN2@TEST_PMC_M

; 50   :     {
; 51   :         TEST_Assert(env, FormatTestLabel(L"PMC_ModPow_X_X_X (%d.%d)", no, 5), (result = ep->ToByteArray(r, actual_r_buf, sizeof(actual_r_buf), &actual_r_buf_size)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_ToByteArrayの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	edx, DWORD PTR _actual_r_buf_size$[ebp]
	push	edx
	push	256					; 00000100H
	lea	eax, DWORD PTR _actual_r_buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN16@TEST_PMC_M
	mov	DWORD PTR tv181[ebp], 1
	jmp	SHORT $LN17@TEST_PMC_M
$LN16@TEST_PMC_M:
	mov	DWORD PTR tv181[ebp], 0
$LN17@TEST_PMC_M:
	mov	ecx, DWORD PTR _result$[ebp]
	push	ecx
	push	OFFSET $SG94696
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR tv181[ebp]
	push	edx
	push	5
	mov	eax, DWORD PTR _no$[ebp]
	push	eax
	push	OFFSET $SG94697
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 52   :         TEST_Assert(env, FormatTestLabel(L"PMC_ModPow_X_X_X (%d.%d)", no, 6), _EQUALS_MEMORY(actual_r_buf, actual_r_buf_size, desired_r_buf, desired_r_buf_size) == 0, L"データの内容が一致しない");

	mov	edx, DWORD PTR _desired_r_buf_size$[ebp]
	push	edx
	mov	eax, DWORD PTR _desired_r_buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _actual_r_buf_size$[ebp]
	push	ecx
	lea	edx, DWORD PTR _actual_r_buf$[ebp]
	push	edx
	call	__EQUALS_MEMORY
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN18@TEST_PMC_M
	mov	DWORD PTR tv196[ebp], 1
	jmp	SHORT $LN19@TEST_PMC_M
$LN18@TEST_PMC_M:
	mov	DWORD PTR tv196[ebp], 0
$LN19@TEST_PMC_M:
	push	OFFSET $SG94698
	mov	eax, DWORD PTR tv196[ebp]
	push	eax
	push	6
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG94699
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H
$LN2@TEST_PMC_M:

; 53   :     }
; 54   :     if (r_result == PMC_STATUS_OK)

	cmp	DWORD PTR _r_result$[ebp], 0
	jne	SHORT $LN3@TEST_PMC_M

; 55   :         ep->Dispose(r);

	mov	esi, esp
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@TEST_PMC_M:

; 56   :     if (m_result == PMC_STATUS_OK)

	cmp	DWORD PTR _m_result$[ebp], 0
	jne	SHORT $LN4@TEST_PMC_M

; 57   :         ep->Dispose(m);

	mov	esi, esp
	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@TEST_PMC_M:

; 58   :     if (e_result == PMC_STATUS_OK)

	cmp	DWORD PTR _e_result$[ebp], 0
	jne	SHORT $LN5@TEST_PMC_M

; 59   :         ep->Dispose(e);

	mov	esi, esp
	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@TEST_PMC_M:

; 60   :     if (v_result == PMC_STATUS_OK)

	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN1@TEST_PMC_M

; 61   :         ep->Dispose(v);

	mov	esi, esp
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_PMC_M:

; 62   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN27@TEST_PMC_M
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 372				; 00000174H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN27@TEST_PMC_M:
	DD	6
	DD	$LN26@TEST_PMC_M
$LN26@TEST_PMC_M:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN20@TEST_PMC_M
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN21@TEST_PMC_M
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN22@TEST_PMC_M
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN23@TEST_PMC_M
	DD	-312					; fffffec8H
	DD	256					; 00000100H
	DD	$LN24@TEST_PMC_M
	DD	-324					; fffffebcH
	DD	4
	DD	$LN25@TEST_PMC_M
$LN25@TEST_PMC_M:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN24@TEST_PMC_M:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN23@TEST_PMC_M:
	DB	114					; 00000072H
	DB	0
$LN22@TEST_PMC_M:
	DB	109					; 0000006dH
	DB	0
$LN21@TEST_PMC_M:
	DB	101					; 00000065H
	DB	0
$LN20@TEST_PMC_M:
	DB	118					; 00000076H
	DB	0
_TEST_PMC_ModPow_X_X_X ENDP
_TEXT	ENDS
END
