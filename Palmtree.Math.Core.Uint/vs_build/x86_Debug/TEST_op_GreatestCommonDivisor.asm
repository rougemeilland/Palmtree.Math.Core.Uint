; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\TEST_op_GreatestCommonDivisor.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__630249ED_pmc_uint_debug@h DB 01H
__962F10A9_test_op_greatestcommondivisor@c DB 01H
msvcjmc	ENDS
PUBLIC	_TEST_PMC_GreatestCommonDivisor_I_X
PUBLIC	_TEST_PMC_GreatestCommonDivisor_L_X
PUBLIC	_TEST_PMC_GreatestCommonDivisor_X_I
PUBLIC	_TEST_PMC_GreatestCommonDivisor_X_L
PUBLIC	_TEST_PMC_GreatestCommonDivisor_X_X
PUBLIC	__JustMyCode_Default
EXTRN	_TEST_Assert:PROC
EXTRN	_FormatTestLabel:PROC
EXTRN	_FormatTestMesssage:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
_DATA	SEGMENT
$SG94990 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A'
	DB	00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H
	DB	'0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG94991 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'G', 00H, 'r', 00H
	DB	'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H, 'D', 00H
	DB	'i', 00H, 'v', 00H, 'i', 00H, 's', 00H, 'o', 00H, 'r', 00H, '_'
	DB	00H, 'I', 00H, '_', 00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG94992 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'G', 00H, 'r', 00H
	DB	'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H, 'D', 00H
	DB	'i', 00H, 'v', 00H, 'i', 00H, 's', 00H, 'o', 00H, 'r', 00H, '_'
	DB	00H, 'I', 00H, '_', 00H, 'X', 00H, 'n0', 0a9H, '_0^', 0b3H, '0'
	DB	0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG94993 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'G', 00H, 'r', 00H
	DB	'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H, 'D', 00H
	DB	'i', 00H, 'v', 00H, 'i', 00H, 's', 00H, 'o', 00H, 'r', 00H, '_'
	DB	00H, 'I', 00H, '_', 00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG94995 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'T', 00H, 'o', 00H
	DB	'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A', 00H, 'r', 00H, 'r'
	DB	00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H, '0', 0fcH, '0'
	DB	0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH, '0g0o0j0D'
	DB	'0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG94996 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'G', 00H, 'r', 00H
	DB	'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H, 'D', 00H
	DB	'i', 00H, 'v', 00H, 'i', 00H, 's', 00H, 'o', 00H, 'r', 00H, '_'
	DB	00H, 'I', 00H, '_', 00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
$SG94997 DB	0c7H, '0', 0fcH, '0', 0bfH, '0n0', 085H, 'Q', 0b9H, '[L0', 00H
	DB	'N', 0f4H, 081H, 'W0j0D0', 00H, 00H
	ORG $+2
$SG94998 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'G', 00H, 'r', 00H
	DB	'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H, 'D', 00H
	DB	'i', 00H, 'v', 00H, 'i', 00H, 's', 00H, 'o', 00H, 'r', 00H, '_'
	DB	00H, 'I', 00H, '_', 00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG95027 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A'
	DB	00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H
	DB	'0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG95028 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'G', 00H, 'r', 00H
	DB	'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H, 'D', 00H
	DB	'i', 00H, 'v', 00H, 'i', 00H, 's', 00H, 'o', 00H, 'r', 00H, '_'
	DB	00H, 'L', 00H, '_', 00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG95029 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'G', 00H, 'r', 00H
	DB	'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H, 'D', 00H
	DB	'i', 00H, 'v', 00H, 'i', 00H, 's', 00H, 'o', 00H, 'r', 00H, '_'
	DB	00H, 'L', 00H, '_', 00H, 'X', 00H, 'n0', 0a9H, '_0^', 0b3H, '0'
	DB	0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG95030 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'G', 00H, 'r', 00H
	DB	'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H, 'D', 00H
	DB	'i', 00H, 'v', 00H, 'i', 00H, 's', 00H, 'o', 00H, 'r', 00H, '_'
	DB	00H, 'L', 00H, '_', 00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG95032 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'T', 00H, 'o', 00H
	DB	'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A', 00H, 'r', 00H, 'r'
	DB	00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H, '0', 0fcH, '0'
	DB	0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH, '0g0o0j0D'
	DB	'0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG95033 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'G', 00H, 'r', 00H
	DB	'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H, 'D', 00H
	DB	'i', 00H, 'v', 00H, 'i', 00H, 's', 00H, 'o', 00H, 'r', 00H, '_'
	DB	00H, 'L', 00H, '_', 00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
$SG95034 DB	0c7H, '0', 0fcH, '0', 0bfH, '0n0', 085H, 'Q', 0b9H, '[L0', 00H
	DB	'N', 0f4H, 081H, 'W0j0D0', 00H, 00H
	ORG $+2
$SG95035 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'G', 00H, 'r', 00H
	DB	'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H, 'D', 00H
	DB	'i', 00H, 'v', 00H, 'i', 00H, 's', 00H, 'o', 00H, 'r', 00H, '_'
	DB	00H, 'L', 00H, '_', 00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG95064 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A'
	DB	00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H
	DB	'0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG95065 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'G', 00H, 'r', 00H
	DB	'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H, 'D', 00H
	DB	'i', 00H, 'v', 00H, 'i', 00H, 's', 00H, 'o', 00H, 'r', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'I', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG95066 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'G', 00H, 'r', 00H
	DB	'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H, 'D', 00H
	DB	'i', 00H, 'v', 00H, 'i', 00H, 's', 00H, 'o', 00H, 'r', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'I', 00H, 'n0', 0a9H, '_0^', 0b3H, '0'
	DB	0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG95067 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'G', 00H, 'r', 00H
	DB	'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H, 'D', 00H
	DB	'i', 00H, 'v', 00H, 'i', 00H, 's', 00H, 'o', 00H, 'r', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'I', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG95069 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'T', 00H, 'o', 00H
	DB	'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A', 00H, 'r', 00H, 'r'
	DB	00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H, '0', 0fcH, '0'
	DB	0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH, '0g0o0j0D'
	DB	'0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG95070 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'G', 00H, 'r', 00H
	DB	'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H, 'D', 00H
	DB	'i', 00H, 'v', 00H, 'i', 00H, 's', 00H, 'o', 00H, 'r', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'I', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
$SG95071 DB	0c7H, '0', 0fcH, '0', 0bfH, '0n0', 085H, 'Q', 0b9H, '[L0', 00H
	DB	'N', 0f4H, 081H, 'W0j0D0', 00H, 00H
	ORG $+2
$SG95072 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'G', 00H, 'r', 00H
	DB	'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H, 'D', 00H
	DB	'i', 00H, 'v', 00H, 'i', 00H, 's', 00H, 'o', 00H, 'r', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'I', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG95101 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A'
	DB	00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H
	DB	'0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG95102 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'G', 00H, 'r', 00H
	DB	'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H, 'D', 00H
	DB	'i', 00H, 'v', 00H, 'i', 00H, 's', 00H, 'o', 00H, 'r', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'L', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG95103 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'G', 00H, 'r', 00H
	DB	'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H, 'D', 00H
	DB	'i', 00H, 'v', 00H, 'i', 00H, 's', 00H, 'o', 00H, 'r', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'L', 00H, 'n0', 0a9H, '_0^', 0b3H, '0'
	DB	0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG95104 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'G', 00H, 'r', 00H
	DB	'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H, 'D', 00H
	DB	'i', 00H, 'v', 00H, 'i', 00H, 's', 00H, 'o', 00H, 'r', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'L', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG95106 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'T', 00H, 'o', 00H
	DB	'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A', 00H, 'r', 00H, 'r'
	DB	00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H, '0', 0fcH, '0'
	DB	0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH, '0g0o0j0D'
	DB	'0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG95107 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'G', 00H, 'r', 00H
	DB	'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H, 'D', 00H
	DB	'i', 00H, 'v', 00H, 'i', 00H, 's', 00H, 'o', 00H, 'r', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'L', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
$SG95108 DB	0c7H, '0', 0fcH, '0', 0bfH, '0n0', 085H, 'Q', 0b9H, '[L0', 00H
	DB	'N', 0f4H, 081H, 'W0j0D0', 00H, 00H
	ORG $+2
$SG95109 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'G', 00H, 'r', 00H
	DB	'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H, 'D', 00H
	DB	'i', 00H, 'v', 00H, 'i', 00H, 's', 00H, 'o', 00H, 'r', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'L', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG95142 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A'
	DB	00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H
	DB	'0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG95143 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'G', 00H, 'r', 00H
	DB	'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H, 'D', 00H
	DB	'i', 00H, 'v', 00H, 'i', 00H, 's', 00H, 'o', 00H, 'r', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG95144 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A'
	DB	00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H
	DB	'0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG95145 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'G', 00H, 'r', 00H
	DB	'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H, 'D', 00H
	DB	'i', 00H, 'v', 00H, 'i', 00H, 's', 00H, 'o', 00H, 'r', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG95146 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'G', 00H, 'r', 00H
	DB	'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H, 'D', 00H
	DB	'i', 00H, 'v', 00H, 'i', 00H, 's', 00H, 'o', 00H, 'r', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'X', 00H, 'n0', 0a9H, '_0^', 0b3H, '0'
	DB	0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG95147 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'G', 00H, 'r', 00H
	DB	'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H, 'D', 00H
	DB	'i', 00H, 'v', 00H, 'i', 00H, 's', 00H, 'o', 00H, 'r', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG95149 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'T', 00H, 'o', 00H
	DB	'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A', 00H, 'r', 00H, 'r'
	DB	00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H, '0', 0fcH, '0'
	DB	0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH, '0g0o0j0D'
	DB	'0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG95150 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'G', 00H, 'r', 00H
	DB	'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H, 'D', 00H
	DB	'i', 00H, 'v', 00H, 'i', 00H, 's', 00H, 'o', 00H, 'r', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
$SG95151 DB	0c7H, '0', 0fcH, '0', 0bfH, '0n0', 085H, 'Q', 0b9H, '[L0', 00H
	DB	'N', 0f4H, 081H, 'W0j0D0', 00H, 00H
	ORG $+2
$SG95152 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'G', 00H, 'r', 00H
	DB	'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H, 'D', 00H
	DB	'i', 00H, 'v', 00H, 'i', 00H, 's', 00H, 'o', 00H, 'r', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
_DATA	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_debug.h
_TEXT	SEGMENT
_buffer1$ = 8						; size = 4
_count1$ = 12						; size = 4
_buffer2$ = 16						; size = 4
_count2$ = 20						; size = 4
__EQUALS_MEMORY PROC

; 147  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __630249ED_pmc_uint_debug@h
	call	@__CheckForDebuggerJustMyCode@4

; 148  :     if (count1 != count2)

	mov	eax, DWORD PTR _count1$[ebp]
	cmp	eax, DWORD PTR _count2$[ebp]
	je	SHORT $LN2@EQUALS_MEM

; 149  :         return (-1);

	or	eax, -1
	jmp	SHORT $LN1@EQUALS_MEM
$LN2@EQUALS_MEM:

; 150  :     while (count1 > 0)

	cmp	DWORD PTR _count1$[ebp], 0
	jbe	SHORT $LN3@EQUALS_MEM

; 151  :     {
; 152  :         if (*buffer1 != *buffer2)

	mov	ecx, DWORD PTR _buffer1$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _buffer2$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	edx, ecx
	je	SHORT $LN5@EQUALS_MEM

; 153  :             return (-1);

	or	eax, -1
	jmp	SHORT $LN1@EQUALS_MEM
$LN5@EQUALS_MEM:

; 154  :         ++buffer1;

	mov	edx, DWORD PTR _buffer1$[ebp]
	add	edx, 1
	mov	DWORD PTR _buffer1$[ebp], edx

; 155  :         ++buffer2;

	mov	eax, DWORD PTR _buffer2$[ebp]
	add	eax, 1
	mov	DWORD PTR _buffer2$[ebp], eax

; 156  :         --count1;

	mov	ecx, DWORD PTR _count1$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count1$[ebp], ecx

; 157  :     }

	jmp	SHORT $LN2@EQUALS_MEM
$LN3@EQUALS_MEM:

; 158  :     return (0);

	xor	eax, eax
$LN1@EQUALS_MEM:

; 159  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__EQUALS_MEMORY ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\test_op_greatestcommondivisor.c
_TEXT	SEGMENT
tv177 = -352						; size = 4
tv162 = -348						; size = 4
tv142 = -344						; size = 4
tv92 = -340						; size = 4
tv74 = -336						; size = 4
_z_result$ = -332					; size = 4
_y_result$ = -328					; size = 4
_x_result$ = -324					; size = 4
_result$ = -320						; size = 4
_actual_z_buf_size$ = -312				; size = 4
_actual_z_buf$ = -300					; size = 256
_z$ = -36						; size = 4
_y$ = -24						; size = 4
_x$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_x_buf$ = 20						; size = 4
_x_buf_size$ = 24					; size = 4
_y_buf$ = 28						; size = 4
_y_buf_size$ = 32					; size = 4
_desired_result_code$ = 36				; size = 4
_desired_z_buf$ = 40					; size = 4
_desired_z_buf_size$ = 44				; size = 4
_TEST_PMC_GreatestCommonDivisor_X_X PROC

; 121  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 352				; 00000160H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-352]
	mov	ecx, 88					; 00000058H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __962F10A9_test_op_greatestcommondivisor@c
	call	@__CheckForDebuggerJustMyCode@4

; 122  :     PMC_HANDLE_UINT x;
; 123  :     PMC_HANDLE_UINT y;
; 124  :     PMC_HANDLE_UINT z;
; 125  :     unsigned char actual_z_buf[256];
; 126  :     size_t actual_z_buf_size;
; 127  :     PMC_STATUS_CODE result;
; 128  :     PMC_STATUS_CODE x_result;
; 129  :     PMC_STATUS_CODE y_result;
; 130  :     PMC_STATUS_CODE z_result;
; 131  :     TEST_Assert(env, FormatTestLabel(L"PMC_GreatestCommonDivisor_X_X (%d.%d)", no, 1), (x_result = ep->FromByteArray(x_buf, x_buf_size, &x)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_FromByteArrayの復帰コードが期待通りではない(%d)", x_result));

	mov	esi, esp
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _x_result$[ebp], eax
	cmp	DWORD PTR _x_result$[ebp], 0
	jne	SHORT $LN7@TEST_PMC_G
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN8@TEST_PMC_G
$LN7@TEST_PMC_G:
	mov	DWORD PTR tv74[ebp], 0
$LN8@TEST_PMC_G:
	mov	edx, DWORD PTR _x_result$[ebp]
	push	edx
	push	OFFSET $SG95142
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG95143
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 132  :     TEST_Assert(env, FormatTestLabel(L"PMC_GreatestCommonDivisor_X_X (%d.%d)", no, 2), (y_result = ep->FromByteArray(y_buf, y_buf_size, &y)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_FromByteArrayの復帰コードが期待通りではない(%d)", y_result));

	mov	esi, esp
	lea	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _y_result$[ebp], eax
	cmp	DWORD PTR _y_result$[ebp], 0
	jne	SHORT $LN9@TEST_PMC_G
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN10@TEST_PMC_G
$LN9@TEST_PMC_G:
	mov	DWORD PTR tv92[ebp], 0
$LN10@TEST_PMC_G:
	mov	edx, DWORD PTR _y_result$[ebp]
	push	edx
	push	OFFSET $SG95144
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv92[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG95145
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 133  :     TEST_Assert(env, FormatTestLabel(L"PMC_GreatestCommonDivisor_X_X (%d.%d)", no, 3), (z_result = ep->GreatestCommonDivisor_X_X(x, y, &z)) == desired_result_code, FormatTestMesssage(L"PMC_GreatestCommonDivisor_X_Xの復帰コードが期待通りではない(%d)", z_result));

	mov	esi, esp
	lea	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _z_result$[ebp], eax
	mov	edx, DWORD PTR _z_result$[ebp]
	cmp	edx, DWORD PTR _desired_result_code$[ebp]
	jne	SHORT $LN11@TEST_PMC_G
	mov	DWORD PTR tv142[ebp], 1
	jmp	SHORT $LN12@TEST_PMC_G
$LN11@TEST_PMC_G:
	mov	DWORD PTR tv142[ebp], 0
$LN12@TEST_PMC_G:
	mov	eax, DWORD PTR _z_result$[ebp]
	push	eax
	push	OFFSET $SG95146
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR tv142[ebp]
	push	ecx
	push	3
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET $SG95147
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 134  :     if (desired_result_code == PMC_STATUS_OK)

	cmp	DWORD PTR _desired_result_code$[ebp], 0
	jne	$LN2@TEST_PMC_G

; 135  :     {
; 136  :         TEST_Assert(env, FormatTestLabel(L"PMC_GreatestCommonDivisor_X_X (%d.%d)", no, 4), (result = ep->ToByteArray(z, actual_z_buf, sizeof(actual_z_buf), &actual_z_buf_size)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_ToByteArrayの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	ecx, DWORD PTR _actual_z_buf_size$[ebp]
	push	ecx
	push	256					; 00000100H
	lea	edx, DWORD PTR _actual_z_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN13@TEST_PMC_G
	mov	DWORD PTR tv162[ebp], 1
	jmp	SHORT $LN14@TEST_PMC_G
$LN13@TEST_PMC_G:
	mov	DWORD PTR tv162[ebp], 0
$LN14@TEST_PMC_G:
	mov	eax, DWORD PTR _result$[ebp]
	push	eax
	push	OFFSET $SG95149
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR tv162[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET $SG95150
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 137  :         TEST_Assert(env, FormatTestLabel(L"PMC_GreatestCommonDivisor_X_X (%d.%d)", no, 5), _EQUALS_MEMORY(actual_z_buf, actual_z_buf_size, desired_z_buf, desired_z_buf_size) == 0, L"データの内容が一致しない");

	mov	ecx, DWORD PTR _desired_z_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _desired_z_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _actual_z_buf_size$[ebp]
	push	eax
	lea	ecx, DWORD PTR _actual_z_buf$[ebp]
	push	ecx
	call	__EQUALS_MEMORY
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN15@TEST_PMC_G
	mov	DWORD PTR tv177[ebp], 1
	jmp	SHORT $LN16@TEST_PMC_G
$LN15@TEST_PMC_G:
	mov	DWORD PTR tv177[ebp], 0
$LN16@TEST_PMC_G:
	push	OFFSET $SG95151
	mov	edx, DWORD PTR tv177[ebp]
	push	edx
	push	5
	mov	eax, DWORD PTR _no$[ebp]
	push	eax
	push	OFFSET $SG95152
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	call	_TEST_Assert
	add	esp, 16					; 00000010H
$LN2@TEST_PMC_G:

; 138  :     }
; 139  :     if (z_result == PMC_STATUS_OK)

	cmp	DWORD PTR _z_result$[ebp], 0
	jne	SHORT $LN3@TEST_PMC_G

; 140  :         ep->Dispose(z);

	mov	esi, esp
	mov	edx, DWORD PTR _z$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@TEST_PMC_G:

; 141  :     if (y_result == PMC_STATUS_OK)

	cmp	DWORD PTR _y_result$[ebp], 0
	jne	SHORT $LN4@TEST_PMC_G

; 142  :         ep->Dispose(y);

	mov	esi, esp
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@TEST_PMC_G:

; 143  :     if (x_result == PMC_STATUS_OK)

	cmp	DWORD PTR _x_result$[ebp], 0
	jne	SHORT $LN1@TEST_PMC_G

; 144  :         ep->Dispose(x);

	mov	esi, esp
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_PMC_G:

; 145  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@TEST_PMC_G
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 352				; 00000160H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN23@TEST_PMC_G:
	DD	5
	DD	$LN22@TEST_PMC_G
$LN22@TEST_PMC_G:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN17@TEST_PMC_G
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN18@TEST_PMC_G
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN19@TEST_PMC_G
	DD	-300					; fffffed4H
	DD	256					; 00000100H
	DD	$LN20@TEST_PMC_G
	DD	-312					; fffffec8H
	DD	4
	DD	$LN21@TEST_PMC_G
$LN21@TEST_PMC_G:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN20@TEST_PMC_G:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN19@TEST_PMC_G:
	DB	122					; 0000007aH
	DB	0
$LN18@TEST_PMC_G:
	DB	121					; 00000079H
	DB	0
$LN17@TEST_PMC_G:
	DB	120					; 00000078H
	DB	0
_TEST_PMC_GreatestCommonDivisor_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\test_op_greatestcommondivisor.c
_TEXT	SEGMENT
tv159 = -332						; size = 4
tv144 = -328						; size = 4
tv92 = -324						; size = 4
tv74 = -320						; size = 4
_z_result$ = -316					; size = 4
_x_result$ = -312					; size = 4
_result$ = -308						; size = 4
_actual_z_buf_size$ = -300				; size = 4
_actual_z_buf$ = -288					; size = 256
_z$ = -24						; size = 4
_x$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_x_buf$ = 20						; size = 4
_x_buf_size$ = 24					; size = 4
_y$ = 28						; size = 8
_desired_result_code$ = 36				; size = 4
_desired_z_buf$ = 40					; size = 4
_desired_z_buf_size$ = 44				; size = 4
_TEST_PMC_GreatestCommonDivisor_X_L PROC

; 99   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 332				; 0000014cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 83					; 00000053H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __962F10A9_test_op_greatestcommondivisor@c
	call	@__CheckForDebuggerJustMyCode@4

; 100  :     PMC_HANDLE_UINT x;
; 101  :     PMC_HANDLE_UINT z;
; 102  :     unsigned char actual_z_buf[256];
; 103  :     size_t actual_z_buf_size;
; 104  :     PMC_STATUS_CODE result;
; 105  :     PMC_STATUS_CODE x_result;
; 106  :     PMC_STATUS_CODE z_result;
; 107  :     TEST_Assert(env, FormatTestLabel(L"PMC_GreatestCommonDivisor_X_L (%d.%d)", no, 1), (x_result = ep->FromByteArray(x_buf, x_buf_size, &x)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_FromByteArrayの復帰コードが期待通りではない(%d)", x_result));

	mov	esi, esp
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _x_result$[ebp], eax
	cmp	DWORD PTR _x_result$[ebp], 0
	jne	SHORT $LN6@TEST_PMC_G
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN7@TEST_PMC_G
$LN6@TEST_PMC_G:
	mov	DWORD PTR tv74[ebp], 0
$LN7@TEST_PMC_G:
	mov	edx, DWORD PTR _x_result$[ebp]
	push	edx
	push	OFFSET $SG95101
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG95102
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 108  :     TEST_Assert(env, FormatTestLabel(L"PMC_GreatestCommonDivisor_X_L (%d.%d)", no, 2), (z_result = ep->GreatestCommonDivisor_X_L(x, y, &z)) == desired_result_code, FormatTestMesssage(L"PMC_GreatestCommonDivisor_X_Lの復帰コードが期待通りではない(%d)", z_result));

	mov	esi, esp
	lea	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+256]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _z_result$[ebp], eax
	mov	eax, DWORD PTR _z_result$[ebp]
	cmp	eax, DWORD PTR _desired_result_code$[ebp]
	jne	SHORT $LN8@TEST_PMC_G
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN9@TEST_PMC_G
$LN8@TEST_PMC_G:
	mov	DWORD PTR tv92[ebp], 0
$LN9@TEST_PMC_G:
	mov	ecx, DWORD PTR _z_result$[ebp]
	push	ecx
	push	OFFSET $SG95103
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR tv92[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _no$[ebp]
	push	eax
	push	OFFSET $SG95104
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 109  :     if (desired_result_code == PMC_STATUS_OK)

	cmp	DWORD PTR _desired_result_code$[ebp], 0
	jne	$LN2@TEST_PMC_G

; 110  :     {
; 111  :         TEST_Assert(env, FormatTestLabel(L"PMC_GreatestCommonDivisor_X_L (%d.%d)", no, 3), (result = ep->ToByteArray(z, actual_z_buf, sizeof(actual_z_buf), &actual_z_buf_size)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_ToByteArrayの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	edx, DWORD PTR _actual_z_buf_size$[ebp]
	push	edx
	push	256					; 00000100H
	lea	eax, DWORD PTR _actual_z_buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _z$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN10@TEST_PMC_G
	mov	DWORD PTR tv144[ebp], 1
	jmp	SHORT $LN11@TEST_PMC_G
$LN10@TEST_PMC_G:
	mov	DWORD PTR tv144[ebp], 0
$LN11@TEST_PMC_G:
	mov	ecx, DWORD PTR _result$[ebp]
	push	ecx
	push	OFFSET $SG95106
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR tv144[ebp]
	push	edx
	push	3
	mov	eax, DWORD PTR _no$[ebp]
	push	eax
	push	OFFSET $SG95107
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 112  :         TEST_Assert(env, FormatTestLabel(L"PMC_GreatestCommonDivisor_X_L (%d.%d)", no, 4), _EQUALS_MEMORY(actual_z_buf, actual_z_buf_size, desired_z_buf, desired_z_buf_size) == 0, L"データの内容が一致しない");

	mov	edx, DWORD PTR _desired_z_buf_size$[ebp]
	push	edx
	mov	eax, DWORD PTR _desired_z_buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _actual_z_buf_size$[ebp]
	push	ecx
	lea	edx, DWORD PTR _actual_z_buf$[ebp]
	push	edx
	call	__EQUALS_MEMORY
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN12@TEST_PMC_G
	mov	DWORD PTR tv159[ebp], 1
	jmp	SHORT $LN13@TEST_PMC_G
$LN12@TEST_PMC_G:
	mov	DWORD PTR tv159[ebp], 0
$LN13@TEST_PMC_G:
	push	OFFSET $SG95108
	mov	eax, DWORD PTR tv159[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG95109
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H
$LN2@TEST_PMC_G:

; 113  :     }
; 114  :     if (z_result == PMC_STATUS_OK)

	cmp	DWORD PTR _z_result$[ebp], 0
	jne	SHORT $LN3@TEST_PMC_G

; 115  :         ep->Dispose(z);

	mov	esi, esp
	mov	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@TEST_PMC_G:

; 116  :     if (x_result == PMC_STATUS_OK)

	cmp	DWORD PTR _x_result$[ebp], 0
	jne	SHORT $LN1@TEST_PMC_G

; 117  :         ep->Dispose(x);

	mov	esi, esp
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_PMC_G:

; 118  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@TEST_PMC_G
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN19@TEST_PMC_G:
	DD	4
	DD	$LN18@TEST_PMC_G
$LN18@TEST_PMC_G:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN14@TEST_PMC_G
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN15@TEST_PMC_G
	DD	-288					; fffffee0H
	DD	256					; 00000100H
	DD	$LN16@TEST_PMC_G
	DD	-300					; fffffed4H
	DD	4
	DD	$LN17@TEST_PMC_G
$LN17@TEST_PMC_G:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN16@TEST_PMC_G:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN15@TEST_PMC_G:
	DB	122					; 0000007aH
	DB	0
$LN14@TEST_PMC_G:
	DB	120					; 00000078H
	DB	0
_TEST_PMC_GreatestCommonDivisor_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\test_op_greatestcommondivisor.c
_TEXT	SEGMENT
tv159 = -332						; size = 4
tv144 = -328						; size = 4
tv92 = -324						; size = 4
tv74 = -320						; size = 4
_z_result$ = -316					; size = 4
_x_result$ = -312					; size = 4
_result$ = -308						; size = 4
_actual_z_buf_size$ = -300				; size = 4
_actual_z_buf$ = -288					; size = 256
_z$ = -24						; size = 4
_x$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_x_buf$ = 20						; size = 4
_x_buf_size$ = 24					; size = 4
_y$ = 28						; size = 4
_desired_result_code$ = 32				; size = 4
_desired_z_buf$ = 36					; size = 4
_desired_z_buf_size$ = 40				; size = 4
_TEST_PMC_GreatestCommonDivisor_X_I PROC

; 77   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 332				; 0000014cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 83					; 00000053H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __962F10A9_test_op_greatestcommondivisor@c
	call	@__CheckForDebuggerJustMyCode@4

; 78   :     PMC_HANDLE_UINT x;
; 79   :     PMC_HANDLE_UINT z;
; 80   :     unsigned char actual_z_buf[256];
; 81   :     size_t actual_z_buf_size;
; 82   :     PMC_STATUS_CODE result;
; 83   :     PMC_STATUS_CODE x_result;
; 84   :     PMC_STATUS_CODE z_result;
; 85   :     TEST_Assert(env, FormatTestLabel(L"PMC_GreatestCommonDivisor_X_I (%d.%d)", no, 1), (x_result = ep->FromByteArray(x_buf, x_buf_size, &x)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_FromByteArrayの復帰コードが期待通りではない(%d)", x_result));

	mov	esi, esp
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _x_result$[ebp], eax
	cmp	DWORD PTR _x_result$[ebp], 0
	jne	SHORT $LN6@TEST_PMC_G
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN7@TEST_PMC_G
$LN6@TEST_PMC_G:
	mov	DWORD PTR tv74[ebp], 0
$LN7@TEST_PMC_G:
	mov	edx, DWORD PTR _x_result$[ebp]
	push	edx
	push	OFFSET $SG95064
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG95065
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 86   :     TEST_Assert(env, FormatTestLabel(L"PMC_GreatestCommonDivisor_X_I (%d.%d)", no, 2), (z_result = ep->GreatestCommonDivisor_X_I(x, y, &z)) == desired_result_code, FormatTestMesssage(L"PMC_GreatestCommonDivisor_X_Iの復帰コードが期待通りではない(%d)", z_result));

	mov	esi, esp
	lea	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+252]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _z_result$[ebp], eax
	mov	edx, DWORD PTR _z_result$[ebp]
	cmp	edx, DWORD PTR _desired_result_code$[ebp]
	jne	SHORT $LN8@TEST_PMC_G
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN9@TEST_PMC_G
$LN8@TEST_PMC_G:
	mov	DWORD PTR tv92[ebp], 0
$LN9@TEST_PMC_G:
	mov	eax, DWORD PTR _z_result$[ebp]
	push	eax
	push	OFFSET $SG95066
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR tv92[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET $SG95067
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 87   :     if (desired_result_code == PMC_STATUS_OK)

	cmp	DWORD PTR _desired_result_code$[ebp], 0
	jne	$LN2@TEST_PMC_G

; 88   :     {
; 89   :         TEST_Assert(env, FormatTestLabel(L"PMC_GreatestCommonDivisor_X_I (%d.%d)", no, 3), (result = ep->ToByteArray(z, actual_z_buf, sizeof(actual_z_buf), &actual_z_buf_size)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_ToByteArrayの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	ecx, DWORD PTR _actual_z_buf_size$[ebp]
	push	ecx
	push	256					; 00000100H
	lea	edx, DWORD PTR _actual_z_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN10@TEST_PMC_G
	mov	DWORD PTR tv144[ebp], 1
	jmp	SHORT $LN11@TEST_PMC_G
$LN10@TEST_PMC_G:
	mov	DWORD PTR tv144[ebp], 0
$LN11@TEST_PMC_G:
	mov	eax, DWORD PTR _result$[ebp]
	push	eax
	push	OFFSET $SG95069
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR tv144[ebp]
	push	ecx
	push	3
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET $SG95070
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 90   :         TEST_Assert(env, FormatTestLabel(L"PMC_GreatestCommonDivisor_X_I (%d.%d)", no, 4), _EQUALS_MEMORY(actual_z_buf, actual_z_buf_size, desired_z_buf, desired_z_buf_size) == 0, L"データの内容が一致しない");

	mov	ecx, DWORD PTR _desired_z_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _desired_z_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _actual_z_buf_size$[ebp]
	push	eax
	lea	ecx, DWORD PTR _actual_z_buf$[ebp]
	push	ecx
	call	__EQUALS_MEMORY
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN12@TEST_PMC_G
	mov	DWORD PTR tv159[ebp], 1
	jmp	SHORT $LN13@TEST_PMC_G
$LN12@TEST_PMC_G:
	mov	DWORD PTR tv159[ebp], 0
$LN13@TEST_PMC_G:
	push	OFFSET $SG95071
	mov	edx, DWORD PTR tv159[ebp]
	push	edx
	push	4
	mov	eax, DWORD PTR _no$[ebp]
	push	eax
	push	OFFSET $SG95072
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	call	_TEST_Assert
	add	esp, 16					; 00000010H
$LN2@TEST_PMC_G:

; 91   :     }
; 92   :     if (z_result == PMC_STATUS_OK)

	cmp	DWORD PTR _z_result$[ebp], 0
	jne	SHORT $LN3@TEST_PMC_G

; 93   :         ep->Dispose(z);

	mov	esi, esp
	mov	edx, DWORD PTR _z$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@TEST_PMC_G:

; 94   :     if (x_result == PMC_STATUS_OK)

	cmp	DWORD PTR _x_result$[ebp], 0
	jne	SHORT $LN1@TEST_PMC_G

; 95   :         ep->Dispose(x);

	mov	esi, esp
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_PMC_G:

; 96   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@TEST_PMC_G
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN19@TEST_PMC_G:
	DD	4
	DD	$LN18@TEST_PMC_G
$LN18@TEST_PMC_G:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN14@TEST_PMC_G
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN15@TEST_PMC_G
	DD	-288					; fffffee0H
	DD	256					; 00000100H
	DD	$LN16@TEST_PMC_G
	DD	-300					; fffffed4H
	DD	4
	DD	$LN17@TEST_PMC_G
$LN17@TEST_PMC_G:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN16@TEST_PMC_G:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN15@TEST_PMC_G:
	DB	122					; 0000007aH
	DB	0
$LN14@TEST_PMC_G:
	DB	120					; 00000078H
	DB	0
_TEST_PMC_GreatestCommonDivisor_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\test_op_greatestcommondivisor.c
_TEXT	SEGMENT
tv159 = -332						; size = 4
tv144 = -328						; size = 4
tv92 = -324						; size = 4
tv74 = -320						; size = 4
_w_result$ = -316					; size = 4
_v_result$ = -312					; size = 4
_result$ = -308						; size = 4
_actual_w_buf_size$ = -300				; size = 4
_actual_w_buf$ = -288					; size = 256
_w$ = -24						; size = 4
_v$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_u$ = 20						; size = 8
_v_buf$ = 28						; size = 4
_v_buf_size$ = 32					; size = 4
_desired_result_code$ = 36				; size = 4
_desired_w_buf$ = 40					; size = 4
_desired_w_buf_size$ = 44				; size = 4
_TEST_PMC_GreatestCommonDivisor_L_X PROC

; 55   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 332				; 0000014cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 83					; 00000053H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __962F10A9_test_op_greatestcommondivisor@c
	call	@__CheckForDebuggerJustMyCode@4

; 56   :     PMC_HANDLE_UINT v;
; 57   :     PMC_HANDLE_UINT w;
; 58   :     unsigned char actual_w_buf[256];
; 59   :     size_t actual_w_buf_size;
; 60   :     PMC_STATUS_CODE result;
; 61   :     PMC_STATUS_CODE v_result;
; 62   :     PMC_STATUS_CODE w_result;
; 63   :     TEST_Assert(env, FormatTestLabel(L"PMC_GreatestCommonDivisor_L_X (%d.%d)", no, 1), (v_result = ep->FromByteArray(v_buf, v_buf_size, &v)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_FromByteArrayの復帰コードが期待通りではない(%d)", v_result));

	mov	esi, esp
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _v_result$[ebp], eax
	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN6@TEST_PMC_G
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN7@TEST_PMC_G
$LN6@TEST_PMC_G:
	mov	DWORD PTR tv74[ebp], 0
$LN7@TEST_PMC_G:
	mov	edx, DWORD PTR _v_result$[ebp]
	push	edx
	push	OFFSET $SG95027
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG95028
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 64   :     TEST_Assert(env, FormatTestLabel(L"PMC_GreatestCommonDivisor_L_X (%d.%d)", no, 2), (w_result = ep->GreatestCommonDivisor_L_X(u, v, &w)) == desired_result_code, FormatTestMesssage(L"PMC_GreatestCommonDivisor_L_Xの復帰コードが期待通りではない(%d)", w_result));

	mov	esi, esp
	lea	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+248]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _w_result$[ebp], eax
	mov	eax, DWORD PTR _w_result$[ebp]
	cmp	eax, DWORD PTR _desired_result_code$[ebp]
	jne	SHORT $LN8@TEST_PMC_G
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN9@TEST_PMC_G
$LN8@TEST_PMC_G:
	mov	DWORD PTR tv92[ebp], 0
$LN9@TEST_PMC_G:
	mov	ecx, DWORD PTR _w_result$[ebp]
	push	ecx
	push	OFFSET $SG95029
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR tv92[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _no$[ebp]
	push	eax
	push	OFFSET $SG95030
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 65   :     if (desired_result_code == PMC_STATUS_OK)

	cmp	DWORD PTR _desired_result_code$[ebp], 0
	jne	$LN2@TEST_PMC_G

; 66   :     {
; 67   :         TEST_Assert(env, FormatTestLabel(L"PMC_GreatestCommonDivisor_L_X (%d.%d)", no, 3), (result = ep->ToByteArray(w, actual_w_buf, sizeof(actual_w_buf), &actual_w_buf_size)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_ToByteArrayの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	edx, DWORD PTR _actual_w_buf_size$[ebp]
	push	edx
	push	256					; 00000100H
	lea	eax, DWORD PTR _actual_w_buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN10@TEST_PMC_G
	mov	DWORD PTR tv144[ebp], 1
	jmp	SHORT $LN11@TEST_PMC_G
$LN10@TEST_PMC_G:
	mov	DWORD PTR tv144[ebp], 0
$LN11@TEST_PMC_G:
	mov	ecx, DWORD PTR _result$[ebp]
	push	ecx
	push	OFFSET $SG95032
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR tv144[ebp]
	push	edx
	push	3
	mov	eax, DWORD PTR _no$[ebp]
	push	eax
	push	OFFSET $SG95033
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 68   :         TEST_Assert(env, FormatTestLabel(L"PMC_GreatestCommonDivisor_L_X (%d.%d)", no, 4), _EQUALS_MEMORY(actual_w_buf, actual_w_buf_size, desired_w_buf, desired_w_buf_size) == 0, L"データの内容が一致しない");

	mov	edx, DWORD PTR _desired_w_buf_size$[ebp]
	push	edx
	mov	eax, DWORD PTR _desired_w_buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _actual_w_buf_size$[ebp]
	push	ecx
	lea	edx, DWORD PTR _actual_w_buf$[ebp]
	push	edx
	call	__EQUALS_MEMORY
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN12@TEST_PMC_G
	mov	DWORD PTR tv159[ebp], 1
	jmp	SHORT $LN13@TEST_PMC_G
$LN12@TEST_PMC_G:
	mov	DWORD PTR tv159[ebp], 0
$LN13@TEST_PMC_G:
	push	OFFSET $SG95034
	mov	eax, DWORD PTR tv159[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG95035
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H
$LN2@TEST_PMC_G:

; 69   :     }
; 70   :     if (w_result == PMC_STATUS_OK)

	cmp	DWORD PTR _w_result$[ebp], 0
	jne	SHORT $LN3@TEST_PMC_G

; 71   :         ep->Dispose(w);

	mov	esi, esp
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@TEST_PMC_G:

; 72   :     if (v_result == PMC_STATUS_OK)

	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN1@TEST_PMC_G

; 73   :         ep->Dispose(v);

	mov	esi, esp
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_PMC_G:

; 74   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@TEST_PMC_G
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN19@TEST_PMC_G:
	DD	4
	DD	$LN18@TEST_PMC_G
$LN18@TEST_PMC_G:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN14@TEST_PMC_G
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN15@TEST_PMC_G
	DD	-288					; fffffee0H
	DD	256					; 00000100H
	DD	$LN16@TEST_PMC_G
	DD	-300					; fffffed4H
	DD	4
	DD	$LN17@TEST_PMC_G
$LN17@TEST_PMC_G:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN16@TEST_PMC_G:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN15@TEST_PMC_G:
	DB	119					; 00000077H
	DB	0
$LN14@TEST_PMC_G:
	DB	118					; 00000076H
	DB	0
_TEST_PMC_GreatestCommonDivisor_L_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\test_op_greatestcommondivisor.c
_TEXT	SEGMENT
tv159 = -332						; size = 4
tv144 = -328						; size = 4
tv92 = -324						; size = 4
tv74 = -320						; size = 4
_w_result$ = -316					; size = 4
_v_result$ = -312					; size = 4
_result$ = -308						; size = 4
_actual_w_buf_size$ = -300				; size = 4
_actual_w_buf$ = -288					; size = 256
_w$ = -24						; size = 4
_v$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_u$ = 20						; size = 4
_v_buf$ = 24						; size = 4
_v_buf_size$ = 28					; size = 4
_desired_result_code$ = 32				; size = 4
_desired_w_buf$ = 36					; size = 4
_desired_w_buf_size$ = 40				; size = 4
_TEST_PMC_GreatestCommonDivisor_I_X PROC

; 33   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 332				; 0000014cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 83					; 00000053H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __962F10A9_test_op_greatestcommondivisor@c
	call	@__CheckForDebuggerJustMyCode@4

; 34   :     PMC_HANDLE_UINT v;
; 35   :     PMC_HANDLE_UINT w;
; 36   :     unsigned char actual_w_buf[256];
; 37   :     size_t actual_w_buf_size;
; 38   :     PMC_STATUS_CODE result;
; 39   :     PMC_STATUS_CODE v_result;
; 40   :     PMC_STATUS_CODE w_result;
; 41   :     TEST_Assert(env, FormatTestLabel(L"PMC_GreatestCommonDivisor_I_X (%d.%d)", no, 1), (v_result = ep->FromByteArray(v_buf, v_buf_size, &v)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_FromByteArrayの復帰コードが期待通りではない(%d)", v_result));

	mov	esi, esp
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _v_result$[ebp], eax
	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN6@TEST_PMC_G
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN7@TEST_PMC_G
$LN6@TEST_PMC_G:
	mov	DWORD PTR tv74[ebp], 0
$LN7@TEST_PMC_G:
	mov	edx, DWORD PTR _v_result$[ebp]
	push	edx
	push	OFFSET $SG94990
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG94991
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 42   :     TEST_Assert(env, FormatTestLabel(L"PMC_GreatestCommonDivisor_I_X (%d.%d)", no, 2), (w_result = ep->GreatestCommonDivisor_I_X(u, v, &w)) == desired_result_code, FormatTestMesssage(L"PMC_GreatestCommonDivisor_I_Xの復帰コードが期待通りではない(%d)", w_result));

	mov	esi, esp
	lea	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+244]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _w_result$[ebp], eax
	mov	edx, DWORD PTR _w_result$[ebp]
	cmp	edx, DWORD PTR _desired_result_code$[ebp]
	jne	SHORT $LN8@TEST_PMC_G
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN9@TEST_PMC_G
$LN8@TEST_PMC_G:
	mov	DWORD PTR tv92[ebp], 0
$LN9@TEST_PMC_G:
	mov	eax, DWORD PTR _w_result$[ebp]
	push	eax
	push	OFFSET $SG94992
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR tv92[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET $SG94993
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 43   :     if (desired_result_code == PMC_STATUS_OK)

	cmp	DWORD PTR _desired_result_code$[ebp], 0
	jne	$LN2@TEST_PMC_G

; 44   :     {
; 45   :         TEST_Assert(env, FormatTestLabel(L"PMC_GreatestCommonDivisor_I_X (%d.%d)", no, 3), (result = ep->ToByteArray(w, actual_w_buf, sizeof(actual_w_buf), &actual_w_buf_size)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_ToByteArrayの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	ecx, DWORD PTR _actual_w_buf_size$[ebp]
	push	ecx
	push	256					; 00000100H
	lea	edx, DWORD PTR _actual_w_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN10@TEST_PMC_G
	mov	DWORD PTR tv144[ebp], 1
	jmp	SHORT $LN11@TEST_PMC_G
$LN10@TEST_PMC_G:
	mov	DWORD PTR tv144[ebp], 0
$LN11@TEST_PMC_G:
	mov	eax, DWORD PTR _result$[ebp]
	push	eax
	push	OFFSET $SG94995
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR tv144[ebp]
	push	ecx
	push	3
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET $SG94996
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 46   :         TEST_Assert(env, FormatTestLabel(L"PMC_GreatestCommonDivisor_I_X (%d.%d)", no, 4), _EQUALS_MEMORY(actual_w_buf, actual_w_buf_size, desired_w_buf, desired_w_buf_size) == 0, L"データの内容が一致しない");

	mov	ecx, DWORD PTR _desired_w_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _desired_w_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _actual_w_buf_size$[ebp]
	push	eax
	lea	ecx, DWORD PTR _actual_w_buf$[ebp]
	push	ecx
	call	__EQUALS_MEMORY
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN12@TEST_PMC_G
	mov	DWORD PTR tv159[ebp], 1
	jmp	SHORT $LN13@TEST_PMC_G
$LN12@TEST_PMC_G:
	mov	DWORD PTR tv159[ebp], 0
$LN13@TEST_PMC_G:
	push	OFFSET $SG94997
	mov	edx, DWORD PTR tv159[ebp]
	push	edx
	push	4
	mov	eax, DWORD PTR _no$[ebp]
	push	eax
	push	OFFSET $SG94998
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	call	_TEST_Assert
	add	esp, 16					; 00000010H
$LN2@TEST_PMC_G:

; 47   :     }
; 48   :     if (w_result == PMC_STATUS_OK)

	cmp	DWORD PTR _w_result$[ebp], 0
	jne	SHORT $LN3@TEST_PMC_G

; 49   :         ep->Dispose(w);

	mov	esi, esp
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@TEST_PMC_G:

; 50   :     if (v_result == PMC_STATUS_OK)

	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN1@TEST_PMC_G

; 51   :         ep->Dispose(v);

	mov	esi, esp
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_PMC_G:

; 52   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@TEST_PMC_G
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN19@TEST_PMC_G:
	DD	4
	DD	$LN18@TEST_PMC_G
$LN18@TEST_PMC_G:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN14@TEST_PMC_G
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN15@TEST_PMC_G
	DD	-288					; fffffee0H
	DD	256					; 00000100H
	DD	$LN16@TEST_PMC_G
	DD	-300					; fffffed4H
	DD	4
	DD	$LN17@TEST_PMC_G
$LN17@TEST_PMC_G:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN16@TEST_PMC_G:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN15@TEST_PMC_G:
	DB	119					; 00000077H
	DB	0
$LN14@TEST_PMC_G:
	DB	118					; 00000076H
	DB	0
_TEST_PMC_GreatestCommonDivisor_I_X ENDP
_TEXT	ENDS
END
