; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_add.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__2088847F_corecrt_memory@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__E9FFF232_guiddef@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__12AD47BB_winuser@h DB 01H
__B4B40122_winioctl@h DB 01H
__A73354DD_stdlib@h DB 01H
__25F3FB34_propidl@h DB 01H
__A40E48B8_oleauto@h DB 01H
__86261D59_stralign@h DB 01H
__2CC6E67D_corecrt_stdio_config@h DB 01H
__41381B41_corecrt_wconio@h DB 01H
__F0CC4AC4_corecrt_wio@h DB 01H
__05476D76_corecrt_wstdio@h DB 01H
__C0802A2B_corecrt_wtime@h DB 01H
__A40A425D_stat@h DB 01H
__5A74375D_wchar@h DB 01H
__6BC0FD35_vcruntime_new@h DB 01H
__77F53984_cstddef DB 01H
__188180DA_corecrt_math@h DB 01H
__D23EE329_cstdlib DB 01H
__5ECFF36E_type_traits DB 01H
__331E732B_malloc@h DB 01H
__9BB4E194_vcruntime_exception@h DB 01H
__7949CB39_exception DB 01H
__802FEEC0_pmc_exception@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__1AB12E38_pmc_resourceholder@h DB 01H
__746E1CEC_xmmintrin@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__E05E7037_autogenerated_inline_func@h DB 01H
__AF70AA4D_pmc_add@cpp DB 01H
msvcjmc	ENDS
CONST	SEGMENT
$SG118029 DB	'p', 00H, 'c', 00H, 'm', 00H, '_', 00H, 'a', 00H, 'd', 00H
	DB	'd', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, ';', 00H, 'D'
	DB	00H, 'o', 00H, 'C', 00H, 'a', 00H, 'r', 00H, 'r', 00H, 'y', 00H
	DB	';', 00H, '1', 00H, 00H, 00H
$SG118030 DB	085H, 'Q', 0e8H, 090H, 0a8H, '0', 0e9H, '0', 0fcH, '0L0zv'
	DB	01fH, 'uW0~0W0_0', 02H, '0', 00H, 00H
$SG118129 DB	'p', 00H, 'm', 00H, 'c', 00H, '_', 00H, 'a', 00H, 'd', 00H
	DB	'd', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, ';', 00H, 'P'
	DB	00H, 'M', 00H, 'C', 00H, '_', 00H, 'A', 00H, 'd', 00H, 'd', 00H
	DB	'_', 00H, 'I', 00H, '_', 00H, 'X', 00H, ';', 00H, '1', 00H, 00H
	DB	00H
$SG118130 DB	088H, 'N', 01fH, 'gW0f0D0j0D0', 0b3H, '0', 0fcH, '0', 0c9H
	DB	'0k00RT', 090H, 'W0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118137 DB	'v', 00H, 00H, 00H
$SG118138 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
	ORG $+2
$SG118152 DB	'p', 00H, 'm', 00H, 'c', 00H, '_', 00H, 'a', 00H, 'd', 00H
	DB	'd', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, ';', 00H, 'P'
	DB	00H, 'M', 00H, 'C', 00H, '_', 00H, 'A', 00H, 'd', 00H, 'd', 00H
	DB	'_', 00H, 'X', 00H, '_', 00H, 'I', 00H, ';', 00H, '1', 00H, 00H
	DB	00H
$SG118153 DB	088H, 'N', 01fH, 'gW0f0D0j0D0', 0b3H, '0', 0fcH, '0', 0c9H
	DB	'0k00RT', 090H, 'W0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118156 DB	'u', 00H, 00H, 00H
$SG118157 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
	ORG $+2
$SG118208 DB	'p', 00H, 'm', 00H, 'c', 00H, '_', 00H, 'a', 00H, 'd', 00H
	DB	'd', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, ';', 00H, 'P'
	DB	00H, 'M', 00H, 'C', 00H, '_', 00H, 'A', 00H, 'd', 00H, 'd', 00H
	DB	'_', 00H, 'L', 00H, '_', 00H, 'X', 00H, ';', 00H, '1', 00H, 00H
	DB	00H
$SG118209 DB	088H, 'N', 01fH, 'gW0f0D0j0D0', 0b3H, '0', 0fcH, '0', 0c9H
	DB	'0k00RT', 090H, 'W0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118212 DB	'v', 00H, 00H, 00H
$SG118213 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
	ORG $+2
$SG118228 DB	'p', 00H, 'm', 00H, 'c', 00H, '_', 00H, 'a', 00H, 'd', 00H
	DB	'd', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, ';', 00H, 'P'
	DB	00H, 'M', 00H, 'C', 00H, '_', 00H, 'A', 00H, 'd', 00H, 'd', 00H
	DB	'_', 00H, 'X', 00H, '_', 00H, 'L', 00H, ';', 00H, '1', 00H, 00H
	DB	00H
$SG118229 DB	088H, 'N', 01fH, 'gW0f0D0j0D0', 0b3H, '0', 0fcH, '0', 0c9H
	DB	'0k00RT', 090H, 'W0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118232 DB	'u', 00H, 00H, 00H
$SG118233 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
	ORG $+2
$SG118264 DB	'u', 00H, 00H, 00H
$SG118265 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
	ORG $+2
$SG118268 DB	'v', 00H, 00H, 00H
$SG118269 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
CONST	ENDS
PUBLIC	??0exception@std@@QAE@XZ			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ; Palmtree::Math::Core::Internal::Exception::Exception
PUBLIC	??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
PUBLIC	??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
PUBLIC	??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor'
PUBLIC	??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
PUBLIC	??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
PUBLIC	??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
PUBLIC	??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor'
PUBLIC	??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
PUBLIC	??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
PUBLIC	??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
PUBLIC	??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor'
PUBLIC	?PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z ; Palmtree::Math::Core::Internal::PMC_Add_X_X_Imp
PUBLIC	?Initialize_Add@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ; Palmtree::Math::Core::Internal::Initialize_Add
PUBLIC	?PMC_Add_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_Add_I_X
PUBLIC	?PMC_Add_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_Add_L_X
PUBLIC	?PMC_Add_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_Add_X_I
PUBLIC	?PMC_Add_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z ; Palmtree::Math::Core::Internal::PMC_Add_X_L
PUBLIC	?PMC_Add_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z ; Palmtree::Math::Core::Internal::PMC_Add_X_X
PUBLIC	__JustMyCode_Default
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7Exception@Internal@Core@Math@Palmtree@@6B@	; Palmtree::Math::Core::Internal::Exception::`vftable'
PUBLIC	??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`vftable'
PUBLIC	??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`vftable'
PUBLIC	__TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
PUBLIC	__CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InternalErrorException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	??_R0?AVException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::Exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	__TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
PUBLIC	__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Exception@Internal@Core@Math@Palmtree@@6B@	; Palmtree::Math::Core::Internal::Exception::`RTTI Complete Object Locator'
PUBLIC	??_R3Exception@Internal@Core@Math@Palmtree@@8	; Palmtree::Math::Core::Internal::Exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Exception@Internal@Core@Math@Palmtree@@8	; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EN@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,77)'
PUBLIC	??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Complete Object Locator'
PUBLIC	??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Complete Object Locator'
PUBLIC	??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_EException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::Exception::`vector deleting destructor'
EXTRN	??_EArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::`vector deleting destructor'
EXTRN	??_EInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::InternalErrorException::`vector deleting destructor'
EXTRN	?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z:PROC ; Palmtree::Math::Core::Internal::CommitNumber
EXTRN	?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z:PROC ; Palmtree::Math::Core::Internal::CheckNumber
EXTRN	?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z:PROC ; Palmtree::Math::Core::Internal::DuplicateNumber
EXTRN	?From_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@I@Z:PROC ; Palmtree::Math::Core::Internal::From_I_Imp
EXTRN	?From_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@_K@Z:PROC ; Palmtree::Math::Core::Internal::From_L_Imp
EXTRN	??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
EXTRN	??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
EXTRN	?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
EXTRN	?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber
EXTRN	?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber
EXTRN	?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__aullshr:PROC
EXTRN	?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A:BYTE ; Palmtree::Math::Core::Internal::number_zero
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
?fp_Add_Imp@Internal@Core@Math@Palmtree@@3P6AXPAII0I0I@ZA DD 01H DUP (?) ; Palmtree::Math::Core::Internal::fp_Add_Imp
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EN@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EN@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,77)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	04dH
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2Exception@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3Exception@Internal@Core@Math@Palmtree@@8 DD 00H	; Palmtree::Math::Core::Internal::Exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4Exception@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4Exception@Internal@Core@Math@Palmtree@@6B@ DD 00H	; Palmtree::Math::Core::Internal::Exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVArgumentNullException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	FLAT:__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
	DD	FLAT:__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	ENDS
;	COMDAT __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	FLAT:??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::Exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVInternalErrorException@Internal@Core@Math@Palmtree@@'
	DB	00H
data$r	ENDS
;	COMDAT __CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	FLAT:__CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
	DD	FLAT:__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	ENDS
;	COMDAT __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	FLAT:??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`vftable'
	DD	FLAT:??_EInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`vftable'
	DD	FLAT:??_EArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7Exception@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7Exception@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4Exception@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::Exception::`vftable'
	DD	FLAT:??_EException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$?PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z$0
__unwindtable$?PMC_Add_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_Add_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z$0
__unwindtable$?PMC_Add_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_Add_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z$0
__unwindtable$?PMC_Add_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_Add_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z$0
__unwindtable$?PMC_Add_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_Add_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z$0
__unwindtable$?PMC_Add_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_Add_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z$0
__unwindtable$?PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z$0
__unwindtable$?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z$2
__ehfuncinfo$?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PMC_Add_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_Add_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PMC_Add_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_Add_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PMC_Add_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_Add_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PMC_Add_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_Add_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PMC_Add_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_Add_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0
__ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0
__ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z$0
__ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1exception@std@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0exception@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_add.cpp
_TEXT	SEGMENT
$T2 = -156						; size = 4
$T3 = -152						; size = 4
$T4 = -148						; size = 4
_w$5 = -144						; size = 4
_w_bit_count$6 = -140					; size = 4
_v_bit_count$7 = -136					; size = 4
_u_bit_count$8 = -132					; size = 4
_root$9 = -124						; size = 16
_w$10 = -104						; size = 4
_w_bit_count$11 = -100					; size = 4
_v_bit_count$12 = -96					; size = 4
_root$13 = -88						; size = 16
_w$14 = -68						; size = 4
_w_bit_count$15 = -64					; size = 4
_v_bit_count$16 = -60					; size = 4
_root$17 = -52						; size = 16
_v_lo$18 = -32						; size = 4
_v_hi$19 = -24						; size = 4
_u_bit_count$20 = -16					; size = 4
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 8
?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z PROC ; Palmtree::Math::Core::Internal::PMC_Add_X_L_Imp

; 390  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  00017	57		 push	 edi
  00018	8d bd 64 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-156]
  0001e	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002f	33 c5		 xor	 eax, ebp
  00031	50		 push	 eax
  00032	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00035	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003b	b9 00 00 00 00	 mov	 ecx, OFFSET __AF70AA4D_pmc_add@cpp
  00040	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 391  :         if (u->IS_ZERO)

  00045	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00048	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004b	83 e1 01	 and	 ecx, 1
  0004e	74 2e		 je	 SHORT $LN2@PMC_Add_X_

; 392  :         {
; 393  :             // u が 0 である場合
; 394  : 
; 395  :             if (v == 0)

  00050	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  00053	0b 55 10	 or	 edx, DWORD PTR _v$[ebp+4]
  00056	75 0c		 jne	 SHORT $LN4@PMC_Add_X_

; 396  :             {
; 397  :                 // v が 0 である場合
; 398  : 
; 399  :                 // u と v がともに 0 であるので、加算結果の 0 を呼び出し元に返す。
; 400  :                 return (&number_zero);

  00058	b8 00 00 00 00	 mov	 eax, OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  0005d	e9 d5 02 00 00	 jmp	 $LN1@PMC_Add_X_

; 401  :             }
; 402  :             else

  00062	eb 15		 jmp	 SHORT $LN5@PMC_Add_X_
$LN4@PMC_Add_X_:

; 403  :             {
; 404  :                 // v が 0 ではない場合
; 405  : 
; 406  :                 // 加算結果となる v の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 407  :                 return (From_L_Imp(v));

  00064	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp+4]
  00067	50		 push	 eax
  00068	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  0006b	51		 push	 ecx
  0006c	e8 00 00 00 00	 call	 ?From_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@_K@Z ; Palmtree::Math::Core::Internal::From_L_Imp
  00071	83 c4 08	 add	 esp, 8
  00074	e9 be 02 00 00	 jmp	 $LN1@PMC_Add_X_
$LN5@PMC_Add_X_:

; 408  :             }
; 409  :         }
; 410  :         else

  00079	e9 b9 02 00 00	 jmp	 $LN1@PMC_Add_X_
$LN2@PMC_Add_X_:

; 411  :         {
; 412  :             // u が 0 ではない場合
; 413  : 
; 414  :             if (v == 0)

  0007e	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  00081	0b 55 10	 or	 edx, DWORD PTR _v$[ebp+4]
  00084	75 16		 jne	 SHORT $LN6@PMC_Add_X_

; 415  :             {
; 416  :                 // v が 0 である場合
; 417  : 
; 418  :                 // 加算結果となる u の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 419  :                 return (DuplicateNumber(u));

  00086	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  0008f	83 c4 04	 add	 esp, 4
  00092	e9 a0 02 00 00	 jmp	 $LN1@PMC_Add_X_

; 420  :             }
; 421  :             else

  00097	e9 9b 02 00 00	 jmp	 $LN1@PMC_Add_X_
$LN6@PMC_Add_X_:

; 422  :             {
; 423  :                 // u と v がともに 0 ではない場合
; 424  : 
; 425  :                 // u と v の和を計算する
; 426  :                 if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)

  0009c	b9 01 00 00 00	 mov	 ecx, 1
  000a1	85 c9		 test	 ecx, ecx
  000a3	0f 84 aa 01 00
	00		 je	 $LN8@PMC_Add_X_

; 427  :                 {
; 428  :                     // _UINT64_T が 1 ワードで表現しきれない場合
; 429  : 
; 430  :                     __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

  000a9	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  000ac	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000af	89 45 f0	 mov	 DWORD PTR _u_bit_count$20[ebp], eax

; 431  :                     _UINT32_T v_hi;
; 432  :                     _UINT32_T v_lo = _FROMDWORDTOWORD(v, &v_hi);

  000b2	8d 4d e8	 lea	 ecx, DWORD PTR _v_hi$19[ebp]
  000b5	51		 push	 ecx
  000b6	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp+4]
  000b9	52		 push	 edx
  000ba	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 __FROMDWORDTOWORD
  000c3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c6	89 45 e0	 mov	 DWORD PTR _v_lo$18[ebp], eax

; 433  :                     if (v_hi == 0)

  000c9	83 7d e8 00	 cmp	 DWORD PTR _v_hi$19[ebp], 0
  000cd	0f 85 be 00 00
	00		 jne	 $LN10@PMC_Add_X_

; 434  :                     {
; 435  :                         // y の値が 32bit で表現可能な場合
; 436  : 
; 437  :                         ResourceHolderUINT root;

  000d3	8d 4d cc	 lea	 ecx, DWORD PTR _root$17[ebp]
  000d6	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000db	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 438  :                         __UNIT_TYPE v_bit_count = sizeof(v_lo) * 8 - _LZCNT_ALT_32(v_lo);

  000e2	8b 4d e0	 mov	 ecx, DWORD PTR _v_lo$18[ebp]
  000e5	51		 push	 ecx
  000e6	e8 00 00 00 00	 call	 __LZCNT_ALT_32
  000eb	83 c4 04	 add	 esp, 4
  000ee	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  000f3	2b d0		 sub	 edx, eax
  000f5	89 55 c4	 mov	 DWORD PTR _v_bit_count$16[ebp], edx

; 439  :                         __UNIT_TYPE w_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count) + 1;

  000f8	8b 45 c4	 mov	 eax, DWORD PTR _v_bit_count$16[ebp]
  000fb	50		 push	 eax
  000fc	8b 4d f0	 mov	 ecx, DWORD PTR _u_bit_count$20[ebp]
  000ff	51		 push	 ecx
  00100	e8 00 00 00 00	 call	 __MAXIMUM_UNIT
  00105	83 c4 08	 add	 esp, 8
  00108	83 c0 01	 add	 eax, 1
  0010b	89 45 c0	 mov	 DWORD PTR _w_bit_count$15[ebp], eax

; 440  :                         NUMBER_HEADER* w = root.AllocateNumber(w_bit_count);

  0010e	8b 55 c0	 mov	 edx, DWORD PTR _w_bit_count$15[ebp]
  00111	52		 push	 edx
  00112	8d 4d cc	 lea	 ecx, DWORD PTR _root$17[ebp]
  00115	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  0011a	89 45 bc	 mov	 DWORD PTR _w$14[ebp], eax

; 441  :                         Add_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, v_lo, w->BLOCK, w->BLOCK_COUNT);

  0011d	8b 45 bc	 mov	 eax, DWORD PTR _w$14[ebp]
  00120	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00123	51		 push	 ecx
  00124	8b 55 bc	 mov	 edx, DWORD PTR _w$14[ebp]
  00127	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0012a	50		 push	 eax
  0012b	8b 4d e0	 mov	 ecx, DWORD PTR _v_lo$18[ebp]
  0012e	51		 push	 ecx
  0012f	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00132	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00135	50		 push	 eax
  00136	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  00139	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0013c	52		 push	 edx
  0013d	e8 00 00 00 00	 call	 ?Add_X_1W@Internal@Core@Math@Palmtree@@YAXPAIII0I@Z ; Palmtree::Math::Core::Internal::Add_X_1W
  00142	83 c4 14	 add	 esp, 20			; 00000014H

; 442  :                         root.CheckNumber(w);

  00145	8b 45 bc	 mov	 eax, DWORD PTR _w$14[ebp]
  00148	50		 push	 eax
  00149	8d 4d cc	 lea	 ecx, DWORD PTR _root$17[ebp]
  0014c	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 443  :                         CommitNumber(w);

  00151	8b 4d bc	 mov	 ecx, DWORD PTR _w$14[ebp]
  00154	51		 push	 ecx
  00155	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  0015a	83 c4 04	 add	 esp, 4

; 444  :                         root.UnlinkNumber(w);

  0015d	8b 55 bc	 mov	 edx, DWORD PTR _w$14[ebp]
  00160	52		 push	 edx
  00161	8d 4d cc	 lea	 ecx, DWORD PTR _root$17[ebp]
  00164	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 445  :                         return (w);

  00169	8b 45 bc	 mov	 eax, DWORD PTR _w$14[ebp]
  0016c	89 85 6c ff ff
	ff		 mov	 DWORD PTR $T4[ebp], eax
  00172	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00179	8d 4d cc	 lea	 ecx, DWORD PTR _root$17[ebp]
  0017c	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00181	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR $T4[ebp]
  00187	e9 ab 01 00 00	 jmp	 $LN1@PMC_Add_X_

; 446  :                     }
; 447  :                     else

  0018c	e9 bd 00 00 00	 jmp	 $LN11@PMC_Add_X_
$LN10@PMC_Add_X_:

; 448  :                     {
; 449  :                         // y の値が 32bit では表現できない場合
; 450  : 
; 451  :                         ResourceHolderUINT root;

  00191	8d 4d a8	 lea	 ecx, DWORD PTR _root$13[ebp]
  00194	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00199	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 452  :                         __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v_hi);

  001a0	8b 4d e8	 mov	 ecx, DWORD PTR _v_hi$19[ebp]
  001a3	51		 push	 ecx
  001a4	e8 00 00 00 00	 call	 __LZCNT_ALT_32
  001a9	83 c4 04	 add	 esp, 4
  001ac	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  001b1	2b d0		 sub	 edx, eax
  001b3	89 55 a0	 mov	 DWORD PTR _v_bit_count$12[ebp], edx

; 453  :                         __UNIT_TYPE w_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count) + 1;

  001b6	8b 45 a0	 mov	 eax, DWORD PTR _v_bit_count$12[ebp]
  001b9	50		 push	 eax
  001ba	8b 4d f0	 mov	 ecx, DWORD PTR _u_bit_count$20[ebp]
  001bd	51		 push	 ecx
  001be	e8 00 00 00 00	 call	 __MAXIMUM_UNIT
  001c3	83 c4 08	 add	 esp, 8
  001c6	83 c0 01	 add	 eax, 1
  001c9	89 45 9c	 mov	 DWORD PTR _w_bit_count$11[ebp], eax

; 454  :                         NUMBER_HEADER* w = root.AllocateNumber(w_bit_count);

  001cc	8b 55 9c	 mov	 edx, DWORD PTR _w_bit_count$11[ebp]
  001cf	52		 push	 edx
  001d0	8d 4d a8	 lea	 ecx, DWORD PTR _root$13[ebp]
  001d3	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  001d8	89 45 98	 mov	 DWORD PTR _w$10[ebp], eax

; 455  :                         Add_X_2W(u->BLOCK, u->UNIT_WORD_COUNT, v_hi, v_lo, w->BLOCK, w->BLOCK_COUNT);

  001db	8b 45 98	 mov	 eax, DWORD PTR _w$10[ebp]
  001de	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  001e1	51		 push	 ecx
  001e2	8b 55 98	 mov	 edx, DWORD PTR _w$10[ebp]
  001e5	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  001e8	50		 push	 eax
  001e9	8b 4d e0	 mov	 ecx, DWORD PTR _v_lo$18[ebp]
  001ec	51		 push	 ecx
  001ed	8b 55 e8	 mov	 edx, DWORD PTR _v_hi$19[ebp]
  001f0	52		 push	 edx
  001f1	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  001f4	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  001f7	51		 push	 ecx
  001f8	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  001fb	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  001fe	50		 push	 eax
  001ff	e8 00 00 00 00	 call	 ?Add_X_2W@Internal@Core@Math@Palmtree@@YAXPAIIII0I@Z ; Palmtree::Math::Core::Internal::Add_X_2W
  00204	83 c4 18	 add	 esp, 24			; 00000018H

; 456  :                         root.CheckNumber(w);

  00207	8b 4d 98	 mov	 ecx, DWORD PTR _w$10[ebp]
  0020a	51		 push	 ecx
  0020b	8d 4d a8	 lea	 ecx, DWORD PTR _root$13[ebp]
  0020e	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 457  :                         CommitNumber(w);

  00213	8b 55 98	 mov	 edx, DWORD PTR _w$10[ebp]
  00216	52		 push	 edx
  00217	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  0021c	83 c4 04	 add	 esp, 4

; 458  :                         root.UnlinkNumber(w);

  0021f	8b 45 98	 mov	 eax, DWORD PTR _w$10[ebp]
  00222	50		 push	 eax
  00223	8d 4d a8	 lea	 ecx, DWORD PTR _root$13[ebp]
  00226	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 459  :                         return (w);

  0022b	8b 4d 98	 mov	 ecx, DWORD PTR _w$10[ebp]
  0022e	89 8d 68 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], ecx
  00234	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0023b	8d 4d a8	 lea	 ecx, DWORD PTR _root$13[ebp]
  0023e	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00243	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR $T3[ebp]
  00249	e9 e9 00 00 00	 jmp	 $LN1@PMC_Add_X_
$LN11@PMC_Add_X_:

; 460  :                     }
; 461  :                 }
; 462  :                 else

  0024e	e9 e4 00 00 00	 jmp	 $LN1@PMC_Add_X_
$LN8@PMC_Add_X_:

; 463  :                 {
; 464  :                     // _UINT64_T が 1 ワードで表現できる場合
; 465  : 
; 466  :                     ResourceHolderUINT root;

  00253	8d 4d 84	 lea	 ecx, DWORD PTR _root$9[ebp]
  00256	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  0025b	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2

; 467  :                     __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

  00262	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00265	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00268	89 85 7c ff ff
	ff		 mov	 DWORD PTR _u_bit_count$8[ebp], eax

; 468  :                     __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);

  0026e	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  00271	51		 push	 ecx
  00272	e8 00 00 00 00	 call	 __LZCNT_ALT_UNIT
  00277	83 c4 04	 add	 esp, 4
  0027a	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0027f	2b d0		 sub	 edx, eax
  00281	89 95 78 ff ff
	ff		 mov	 DWORD PTR _v_bit_count$7[ebp], edx

; 469  :                     __UNIT_TYPE w_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count) + 1;

  00287	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _v_bit_count$7[ebp]
  0028d	50		 push	 eax
  0028e	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _u_bit_count$8[ebp]
  00294	51		 push	 ecx
  00295	e8 00 00 00 00	 call	 __MAXIMUM_UNIT
  0029a	83 c4 08	 add	 esp, 8
  0029d	83 c0 01	 add	 eax, 1
  002a0	89 85 74 ff ff
	ff		 mov	 DWORD PTR _w_bit_count$6[ebp], eax

; 470  :                     NUMBER_HEADER* w = root.AllocateNumber(w_bit_count);

  002a6	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR _w_bit_count$6[ebp]
  002ac	52		 push	 edx
  002ad	8d 4d 84	 lea	 ecx, DWORD PTR _root$9[ebp]
  002b0	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  002b5	89 85 70 ff ff
	ff		 mov	 DWORD PTR _w$5[ebp], eax

; 471  :                     Add_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, (__UNIT_TYPE)v, w->BLOCK, w->BLOCK_COUNT);

  002bb	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _w$5[ebp]
  002c1	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  002c4	51		 push	 ecx
  002c5	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _w$5[ebp]
  002cb	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  002ce	50		 push	 eax
  002cf	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  002d2	51		 push	 ecx
  002d3	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  002d6	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  002d9	50		 push	 eax
  002da	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  002dd	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  002e0	52		 push	 edx
  002e1	e8 00 00 00 00	 call	 ?Add_X_1W@Internal@Core@Math@Palmtree@@YAXPAIII0I@Z ; Palmtree::Math::Core::Internal::Add_X_1W
  002e6	83 c4 14	 add	 esp, 20			; 00000014H

; 472  :                     root.CheckNumber(w);

  002e9	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _w$5[ebp]
  002ef	50		 push	 eax
  002f0	8d 4d 84	 lea	 ecx, DWORD PTR _root$9[ebp]
  002f3	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 473  :                     CommitNumber(w);

  002f8	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _w$5[ebp]
  002fe	51		 push	 ecx
  002ff	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  00304	83 c4 04	 add	 esp, 4

; 474  :                     root.UnlinkNumber(w);

  00307	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _w$5[ebp]
  0030d	52		 push	 edx
  0030e	8d 4d 84	 lea	 ecx, DWORD PTR _root$9[ebp]
  00311	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 475  :                     return (w);

  00316	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _w$5[ebp]
  0031c	89 85 64 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00322	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00329	8d 4d 84	 lea	 ecx, DWORD PTR _root$9[ebp]
  0032c	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00331	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
$LN1@PMC_Add_X_:

; 476  :                 }
; 477  :             }
; 478  :         }
; 479  :     }

  00337	52		 push	 edx
  00338	8b cd		 mov	 ecx, ebp
  0033a	50		 push	 eax
  0033b	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN22@PMC_Add_X_
  00341	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00346	58		 pop	 eax
  00347	5a		 pop	 edx
  00348	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0034b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00352	59		 pop	 ecx
  00353	5f		 pop	 edi
  00354	81 c4 9c 00 00
	00		 add	 esp, 156		; 0000009cH
  0035a	3b ec		 cmp	 ebp, esp
  0035c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00361	8b e5		 mov	 esp, ebp
  00363	5d		 pop	 ebp
  00364	c3		 ret	 0
  00365	0f 1f 00	 npad	 3
$LN22@PMC_Add_X_:
  00368	04 00 00 00	 DD	 4
  0036c	00 00 00 00	 DD	 $LN21@PMC_Add_X_
$LN21@PMC_Add_X_:
  00370	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00374	04 00 00 00	 DD	 4
  00378	00 00 00 00	 DD	 $LN16@PMC_Add_X_
  0037c	cc ff ff ff	 DD	 -52			; ffffffccH
  00380	10 00 00 00	 DD	 16			; 00000010H
  00384	00 00 00 00	 DD	 $LN17@PMC_Add_X_
  00388	a8 ff ff ff	 DD	 -88			; ffffffa8H
  0038c	10 00 00 00	 DD	 16			; 00000010H
  00390	00 00 00 00	 DD	 $LN18@PMC_Add_X_
  00394	84 ff ff ff	 DD	 -124			; ffffff84H
  00398	10 00 00 00	 DD	 16			; 00000010H
  0039c	00 00 00 00	 DD	 $LN19@PMC_Add_X_
$LN19@PMC_Add_X_:
  003a0	72		 DB	 114			; 00000072H
  003a1	6f		 DB	 111			; 0000006fH
  003a2	6f		 DB	 111			; 0000006fH
  003a3	74		 DB	 116			; 00000074H
  003a4	00		 DB	 0
$LN18@PMC_Add_X_:
  003a5	72		 DB	 114			; 00000072H
  003a6	6f		 DB	 111			; 0000006fH
  003a7	6f		 DB	 111			; 0000006fH
  003a8	74		 DB	 116			; 00000074H
  003a9	00		 DB	 0
$LN17@PMC_Add_X_:
  003aa	72		 DB	 114			; 00000072H
  003ab	6f		 DB	 111			; 0000006fH
  003ac	6f		 DB	 111			; 0000006fH
  003ad	74		 DB	 116			; 00000074H
  003ae	00		 DB	 0
$LN16@PMC_Add_X_:
  003af	76		 DB	 118			; 00000076H
  003b0	5f		 DB	 95			; 0000005fH
  003b1	68		 DB	 104			; 00000068H
  003b2	69		 DB	 105			; 00000069H
  003b3	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z$0:
  00000	8d 4d cc	 lea	 ecx, DWORD PTR _root$17[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__unwindfunclet$?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z$1:
  00008	8d 4d a8	 lea	 ecx, DWORD PTR _root$13[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__unwindfunclet$?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z$2:
  00010	8d 4d 84	 lea	 ecx, DWORD PTR _root$9[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 8a 68 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-152]
  00025	33 c8		 xor	 ecx, eax
  00027	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z
  00031	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z ENDP ; Palmtree::Math::Core::Internal::PMC_Add_X_L_Imp
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_add.cpp
_TEXT	SEGMENT
$T2 = -56						; size = 4
_nw$3 = -52						; size = 4
_w_bit_count$4 = -48					; size = 4
_v_bit_count$5 = -44					; size = 4
_u_bit_count$6 = -40					; size = 4
_root$7 = -32						; size = 16
__$EHRec$ = -12						; size = 12
_nu$ = 8						; size = 4
_v$ = 12						; size = 4
?PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z PROC ; Palmtree::Math::Core::Internal::PMC_Add_X_I_Imp

; 299  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00014	57		 push	 edi
  00015	8d 7d c8	 lea	 edi, DWORD PTR [ebp-56]
  00018	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	50		 push	 eax
  0002c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET __AF70AA4D_pmc_add@cpp
  0003a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 300  :         if (nu->IS_ZERO)

  0003f	8b 45 08	 mov	 eax, DWORD PTR _nu$[ebp]
  00042	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00045	83 e1 01	 and	 ecx, 1
  00048	74 28		 je	 SHORT $LN2@PMC_Add_X_

; 301  :         {
; 302  :             // x が 0 である場合
; 303  : 
; 304  :             if (v == 0)

  0004a	83 7d 0c 00	 cmp	 DWORD PTR _v$[ebp], 0
  0004e	75 0c		 jne	 SHORT $LN4@PMC_Add_X_

; 305  :             {
; 306  :                 // y が 0 である場合
; 307  : 
; 308  :                 // x と y がともに 0 であるので、加算結果の 0 を呼び出し元に返す。
; 309  :                 return (&number_zero);

  00050	b8 00 00 00 00	 mov	 eax, OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  00055	e9 eb 00 00 00	 jmp	 $LN1@PMC_Add_X_

; 310  :             }
; 311  :             else

  0005a	eb 11		 jmp	 SHORT $LN5@PMC_Add_X_
$LN4@PMC_Add_X_:

; 312  :             {
; 313  :                 // y が 0 ではない場合
; 314  : 
; 315  :                 // 加算結果となる y の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 316  :                 return (From_I_Imp(v));

  0005c	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  0005f	52		 push	 edx
  00060	e8 00 00 00 00	 call	 ?From_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@I@Z ; Palmtree::Math::Core::Internal::From_I_Imp
  00065	83 c4 04	 add	 esp, 4
  00068	e9 d8 00 00 00	 jmp	 $LN1@PMC_Add_X_
$LN5@PMC_Add_X_:

; 317  :             }
; 318  :         }
; 319  :         else

  0006d	e9 d3 00 00 00	 jmp	 $LN1@PMC_Add_X_
$LN2@PMC_Add_X_:

; 320  :         {
; 321  :             // x が 0 ではない場合
; 322  : 
; 323  :             if (v == 0)

  00072	83 7d 0c 00	 cmp	 DWORD PTR _v$[ebp], 0
  00076	75 16		 jne	 SHORT $LN6@PMC_Add_X_

; 324  :             {
; 325  :                 // y が 0 である場合
; 326  : 
; 327  :                 // 加算結果となる x の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 328  :                 return (DuplicateNumber(nu));

  00078	8b 45 08	 mov	 eax, DWORD PTR _nu$[ebp]
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  00081	83 c4 04	 add	 esp, 4
  00084	e9 bc 00 00 00	 jmp	 $LN1@PMC_Add_X_

; 329  :             }
; 330  :             else

  00089	e9 b7 00 00 00	 jmp	 $LN1@PMC_Add_X_
$LN6@PMC_Add_X_:

; 331  :             {
; 332  :                 // x と y がともに 0 ではない場合
; 333  : 
; 334  :                 // x と y の和を計算する
; 335  :                 ResourceHolderUINT root;

  0008e	8d 4d e0	 lea	 ecx, DWORD PTR _root$7[ebp]
  00091	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00096	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 336  :                 __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

  0009d	8b 4d 08	 mov	 ecx, DWORD PTR _nu$[ebp]
  000a0	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000a3	89 55 d8	 mov	 DWORD PTR _u_bit_count$6[ebp], edx

; 337  :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

  000a6	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  000a9	50		 push	 eax
  000aa	e8 00 00 00 00	 call	 __LZCNT_ALT_32
  000af	83 c4 04	 add	 esp, 4
  000b2	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  000b7	2b c8		 sub	 ecx, eax
  000b9	89 4d d4	 mov	 DWORD PTR _v_bit_count$5[ebp], ecx

; 338  :                 __UNIT_TYPE w_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count) + 1;

  000bc	8b 55 d4	 mov	 edx, DWORD PTR _v_bit_count$5[ebp]
  000bf	52		 push	 edx
  000c0	8b 45 d8	 mov	 eax, DWORD PTR _u_bit_count$6[ebp]
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 __MAXIMUM_UNIT
  000c9	83 c4 08	 add	 esp, 8
  000cc	83 c0 01	 add	 eax, 1
  000cf	89 45 d0	 mov	 DWORD PTR _w_bit_count$4[ebp], eax

; 339  :                 NUMBER_HEADER* nw = root.AllocateNumber(w_bit_count);

  000d2	8b 4d d0	 mov	 ecx, DWORD PTR _w_bit_count$4[ebp]
  000d5	51		 push	 ecx
  000d6	8d 4d e0	 lea	 ecx, DWORD PTR _root$7[ebp]
  000d9	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  000de	89 45 cc	 mov	 DWORD PTR _nw$3[ebp], eax

; 340  :                 Add_X_1W(nu->BLOCK, nu->UNIT_WORD_COUNT, v, nw->BLOCK, nw->BLOCK_COUNT);

  000e1	8b 55 cc	 mov	 edx, DWORD PTR _nw$3[ebp]
  000e4	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  000e7	50		 push	 eax
  000e8	8b 4d cc	 mov	 ecx, DWORD PTR _nw$3[ebp]
  000eb	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  000ee	52		 push	 edx
  000ef	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  000f2	50		 push	 eax
  000f3	8b 4d 08	 mov	 ecx, DWORD PTR _nu$[ebp]
  000f6	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000f9	52		 push	 edx
  000fa	8b 45 08	 mov	 eax, DWORD PTR _nu$[ebp]
  000fd	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00100	51		 push	 ecx
  00101	e8 00 00 00 00	 call	 ?Add_X_1W@Internal@Core@Math@Palmtree@@YAXPAIII0I@Z ; Palmtree::Math::Core::Internal::Add_X_1W
  00106	83 c4 14	 add	 esp, 20			; 00000014H

; 341  :                 root.CheckNumber(nw);

  00109	8b 55 cc	 mov	 edx, DWORD PTR _nw$3[ebp]
  0010c	52		 push	 edx
  0010d	8d 4d e0	 lea	 ecx, DWORD PTR _root$7[ebp]
  00110	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 342  :                 CommitNumber(nw);

  00115	8b 45 cc	 mov	 eax, DWORD PTR _nw$3[ebp]
  00118	50		 push	 eax
  00119	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  0011e	83 c4 04	 add	 esp, 4

; 343  :                 root.UnlinkNumber(nw);

  00121	8b 4d cc	 mov	 ecx, DWORD PTR _nw$3[ebp]
  00124	51		 push	 ecx
  00125	8d 4d e0	 lea	 ecx, DWORD PTR _root$7[ebp]
  00128	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 344  :                 return (nw);

  0012d	8b 55 cc	 mov	 edx, DWORD PTR _nw$3[ebp]
  00130	89 55 c8	 mov	 DWORD PTR $T2[ebp], edx
  00133	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0013a	8d 4d e0	 lea	 ecx, DWORD PTR _root$7[ebp]
  0013d	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00142	8b 45 c8	 mov	 eax, DWORD PTR $T2[ebp]
$LN1@PMC_Add_X_:

; 345  :             }
; 346  :         }
; 347  :     }

  00145	52		 push	 edx
  00146	8b cd		 mov	 ecx, ebp
  00148	50		 push	 eax
  00149	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN13@PMC_Add_X_
  0014f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00154	58		 pop	 eax
  00155	5a		 pop	 edx
  00156	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00159	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00160	59		 pop	 ecx
  00161	5f		 pop	 edi
  00162	83 c4 38	 add	 esp, 56			; 00000038H
  00165	3b ec		 cmp	 ebp, esp
  00167	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0016c	8b e5		 mov	 esp, ebp
  0016e	5d		 pop	 ebp
  0016f	c3		 ret	 0
$LN13@PMC_Add_X_:
  00170	01 00 00 00	 DD	 1
  00174	00 00 00 00	 DD	 $LN12@PMC_Add_X_
$LN12@PMC_Add_X_:
  00178	e0 ff ff ff	 DD	 -32			; ffffffe0H
  0017c	10 00 00 00	 DD	 16			; 00000010H
  00180	00 00 00 00	 DD	 $LN10@PMC_Add_X_
$LN10@PMC_Add_X_:
  00184	72		 DB	 114			; 00000072H
  00185	6f		 DB	 111			; 0000006fH
  00186	6f		 DB	 111			; 0000006fH
  00187	74		 DB	 116			; 00000074H
  00188	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _root$7[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z ENDP ; Palmtree::Math::Core::Internal::PMC_Add_X_I_Imp
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_add.cpp
_TEXT	SEGMENT
tv158 = -40						; size = 4
tv155 = -36						; size = 4
tv152 = -32						; size = 4
_count$ = -28						; size = 4
_c$ = -21						; size = 1
_wp$ = -20						; size = 4
_vp$ = -16						; size = 4
_up$ = -12						; size = 4
_t_count$1 = -8						; size = 4
_t_buf$2 = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v_buf$ = 16						; size = 4
_v_count$ = 20						; size = 4
_w_buf$ = 24						; size = 4
_w_count$ = 28						; size = 4
?Add_Imp_using_ADCX@Internal@Core@Math@Palmtree@@YAXPAII0I0I@Z PROC ; Palmtree::Math::Core::Internal::Add_Imp_using_ADCX

; 222  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	57		 push	 edi
  00007	8d 7d d8	 lea	 edi, DWORD PTR [ebp-40]
  0000a	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET __AF70AA4D_pmc_add@cpp
  0001b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 223  :         // x のワード長が y のワード長以上であるようにする
; 224  :         if (u_count < v_count)

  00020	8b 45 0c	 mov	 eax, DWORD PTR _u_count$[ebp]
  00023	3b 45 14	 cmp	 eax, DWORD PTR _v_count$[ebp]
  00026	73 24		 jae	 SHORT $LN4@Add_Imp_us

; 225  :         {
; 226  :             __UNIT_TYPE* t_buf = u_buf;

  00028	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  0002b	89 4d fc	 mov	 DWORD PTR _t_buf$2[ebp], ecx

; 227  :             u_buf = v_buf;

  0002e	8b 55 10	 mov	 edx, DWORD PTR _v_buf$[ebp]
  00031	89 55 08	 mov	 DWORD PTR _u_buf$[ebp], edx

; 228  :             v_buf = t_buf;

  00034	8b 45 fc	 mov	 eax, DWORD PTR _t_buf$2[ebp]
  00037	89 45 10	 mov	 DWORD PTR _v_buf$[ebp], eax

; 229  :             __UNIT_TYPE t_count = u_count;

  0003a	8b 4d 0c	 mov	 ecx, DWORD PTR _u_count$[ebp]
  0003d	89 4d f8	 mov	 DWORD PTR _t_count$1[ebp], ecx

; 230  :             u_count = v_count;

  00040	8b 55 14	 mov	 edx, DWORD PTR _v_count$[ebp]
  00043	89 55 0c	 mov	 DWORD PTR _u_count$[ebp], edx

; 231  :             v_count = t_count;

  00046	8b 45 f8	 mov	 eax, DWORD PTR _t_count$1[ebp]
  00049	89 45 14	 mov	 DWORD PTR _v_count$[ebp], eax
$LN4@Add_Imp_us:

; 232  :         }
; 233  :         __UNIT_TYPE* up = u_buf;

  0004c	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  0004f	89 4d f4	 mov	 DWORD PTR _up$[ebp], ecx

; 234  :         __UNIT_TYPE* vp = v_buf;

  00052	8b 55 10	 mov	 edx, DWORD PTR _v_buf$[ebp]
  00055	89 55 f0	 mov	 DWORD PTR _vp$[ebp], edx

; 235  :         __UNIT_TYPE* wp = w_buf;

  00058	8b 45 18	 mov	 eax, DWORD PTR _w_buf$[ebp]
  0005b	89 45 ec	 mov	 DWORD PTR _wp$[ebp], eax

; 236  :         char c = 0;

  0005e	c6 45 eb 00	 mov	 BYTE PTR _c$[ebp], 0

; 237  : 
; 238  :         // まず 32 ワードずつ加算をする。
; 239  :         __UNIT_TYPE count = v_count >> 5;

  00062	8b 4d 14	 mov	 ecx, DWORD PTR _v_count$[ebp]
  00065	c1 e9 05	 shr	 ecx, 5
  00068	89 4d e4	 mov	 DWORD PTR _count$[ebp], ecx
$LN2@Add_Imp_us:

; 240  :         while (count != 0)

  0006b	83 7d e4 00	 cmp	 DWORD PTR _count$[ebp], 0
  0006f	74 4a		 je	 SHORT $LN3@Add_Imp_us

; 241  :         {
; 242  :             c = _ADD_32WORDS_ADCX(c, up, vp, wp);

  00071	8b 55 ec	 mov	 edx, DWORD PTR _wp$[ebp]
  00074	52		 push	 edx
  00075	8b 45 f0	 mov	 eax, DWORD PTR _vp$[ebp]
  00078	50		 push	 eax
  00079	8b 4d f4	 mov	 ecx, DWORD PTR _up$[ebp]
  0007c	51		 push	 ecx
  0007d	0f b6 55 eb	 movzx	 edx, BYTE PTR _c$[ebp]
  00081	52		 push	 edx
  00082	e8 00 00 00 00	 call	 __ADD_32WORDS_ADCX
  00087	83 c4 10	 add	 esp, 16			; 00000010H
  0008a	88 45 eb	 mov	 BYTE PTR _c$[ebp], al

; 243  :             up += 32;

  0008d	8b 45 f4	 mov	 eax, DWORD PTR _up$[ebp]
  00090	05 80 00 00 00	 add	 eax, 128		; 00000080H
  00095	89 45 f4	 mov	 DWORD PTR _up$[ebp], eax

; 244  :             vp += 32;

  00098	8b 4d f0	 mov	 ecx, DWORD PTR _vp$[ebp]
  0009b	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  000a1	89 4d f0	 mov	 DWORD PTR _vp$[ebp], ecx

; 245  :             wp += 32;

  000a4	8b 55 ec	 mov	 edx, DWORD PTR _wp$[ebp]
  000a7	81 c2 80 00 00
	00		 add	 edx, 128		; 00000080H
  000ad	89 55 ec	 mov	 DWORD PTR _wp$[ebp], edx

; 246  :             --count;

  000b0	8b 45 e4	 mov	 eax, DWORD PTR _count$[ebp]
  000b3	83 e8 01	 sub	 eax, 1
  000b6	89 45 e4	 mov	 DWORD PTR _count$[ebp], eax

; 247  :         }

  000b9	eb b0		 jmp	 SHORT $LN2@Add_Imp_us
$LN3@Add_Imp_us:

; 248  :         // この時点で未処理の桁は 32 ワード未満のはず
; 249  : 
; 250  :         // 未処理の桁が 16 ワード以上あるなら 16 ワード加算を行う。
; 251  :         if (v_count & 0x10)

  000bb	8b 4d 14	 mov	 ecx, DWORD PTR _v_count$[ebp]
  000be	83 e1 10	 and	 ecx, 16			; 00000010H
  000c1	74 37		 je	 SHORT $LN5@Add_Imp_us

; 252  :         {
; 253  :             c = _ADD_16WORDS_ADCX(c, up, vp, wp);

  000c3	8b 55 ec	 mov	 edx, DWORD PTR _wp$[ebp]
  000c6	52		 push	 edx
  000c7	8b 45 f0	 mov	 eax, DWORD PTR _vp$[ebp]
  000ca	50		 push	 eax
  000cb	8b 4d f4	 mov	 ecx, DWORD PTR _up$[ebp]
  000ce	51		 push	 ecx
  000cf	0f b6 55 eb	 movzx	 edx, BYTE PTR _c$[ebp]
  000d3	52		 push	 edx
  000d4	e8 00 00 00 00	 call	 __ADD_16WORDS_ADCX
  000d9	83 c4 10	 add	 esp, 16			; 00000010H
  000dc	88 45 eb	 mov	 BYTE PTR _c$[ebp], al

; 254  :             up += 16;

  000df	8b 45 f4	 mov	 eax, DWORD PTR _up$[ebp]
  000e2	83 c0 40	 add	 eax, 64			; 00000040H
  000e5	89 45 f4	 mov	 DWORD PTR _up$[ebp], eax

; 255  :             vp += 16;

  000e8	8b 4d f0	 mov	 ecx, DWORD PTR _vp$[ebp]
  000eb	83 c1 40	 add	 ecx, 64			; 00000040H
  000ee	89 4d f0	 mov	 DWORD PTR _vp$[ebp], ecx

; 256  :             wp += 16;

  000f1	8b 55 ec	 mov	 edx, DWORD PTR _wp$[ebp]
  000f4	83 c2 40	 add	 edx, 64			; 00000040H
  000f7	89 55 ec	 mov	 DWORD PTR _wp$[ebp], edx
$LN5@Add_Imp_us:

; 257  :         }
; 258  :         // この時点で未処理の桁は 16 ワード未満のはず
; 259  : 
; 260  :         // 未処理の桁が 8 ワード以上あるなら 8 ワード加算を行う。
; 261  :         if (v_count & 0x8)

  000fa	8b 45 14	 mov	 eax, DWORD PTR _v_count$[ebp]
  000fd	83 e0 08	 and	 eax, 8
  00100	74 37		 je	 SHORT $LN6@Add_Imp_us

; 262  :         {
; 263  :             c = _ADD_8WORDS_ADCX(c, up, vp, wp);

  00102	8b 4d ec	 mov	 ecx, DWORD PTR _wp$[ebp]
  00105	51		 push	 ecx
  00106	8b 55 f0	 mov	 edx, DWORD PTR _vp$[ebp]
  00109	52		 push	 edx
  0010a	8b 45 f4	 mov	 eax, DWORD PTR _up$[ebp]
  0010d	50		 push	 eax
  0010e	0f b6 4d eb	 movzx	 ecx, BYTE PTR _c$[ebp]
  00112	51		 push	 ecx
  00113	e8 00 00 00 00	 call	 __ADD_8WORDS_ADCX
  00118	83 c4 10	 add	 esp, 16			; 00000010H
  0011b	88 45 eb	 mov	 BYTE PTR _c$[ebp], al

; 264  :             up += 8;

  0011e	8b 55 f4	 mov	 edx, DWORD PTR _up$[ebp]
  00121	83 c2 20	 add	 edx, 32			; 00000020H
  00124	89 55 f4	 mov	 DWORD PTR _up$[ebp], edx

; 265  :             vp += 8;

  00127	8b 45 f0	 mov	 eax, DWORD PTR _vp$[ebp]
  0012a	83 c0 20	 add	 eax, 32			; 00000020H
  0012d	89 45 f0	 mov	 DWORD PTR _vp$[ebp], eax

; 266  :             wp += 8;

  00130	8b 4d ec	 mov	 ecx, DWORD PTR _wp$[ebp]
  00133	83 c1 20	 add	 ecx, 32			; 00000020H
  00136	89 4d ec	 mov	 DWORD PTR _wp$[ebp], ecx
$LN6@Add_Imp_us:

; 267  :         }
; 268  :         // この時点で未処理の桁は 8 ワード未満のはず
; 269  : 
; 270  :         // 未処理の桁が 4 ワード以上あるなら 4 ワード加算を行う。
; 271  :         if (v_count & 0x4)

  00139	8b 55 14	 mov	 edx, DWORD PTR _v_count$[ebp]
  0013c	83 e2 04	 and	 edx, 4
  0013f	74 37		 je	 SHORT $LN7@Add_Imp_us

; 272  :         {
; 273  :             c = _ADD_4WORDS_ADCX(c, up, vp, wp);

  00141	8b 45 ec	 mov	 eax, DWORD PTR _wp$[ebp]
  00144	50		 push	 eax
  00145	8b 4d f0	 mov	 ecx, DWORD PTR _vp$[ebp]
  00148	51		 push	 ecx
  00149	8b 55 f4	 mov	 edx, DWORD PTR _up$[ebp]
  0014c	52		 push	 edx
  0014d	0f b6 45 eb	 movzx	 eax, BYTE PTR _c$[ebp]
  00151	50		 push	 eax
  00152	e8 00 00 00 00	 call	 __ADD_4WORDS_ADCX
  00157	83 c4 10	 add	 esp, 16			; 00000010H
  0015a	88 45 eb	 mov	 BYTE PTR _c$[ebp], al

; 274  :             up += 4;

  0015d	8b 4d f4	 mov	 ecx, DWORD PTR _up$[ebp]
  00160	83 c1 10	 add	 ecx, 16			; 00000010H
  00163	89 4d f4	 mov	 DWORD PTR _up$[ebp], ecx

; 275  :             vp += 4;

  00166	8b 55 f0	 mov	 edx, DWORD PTR _vp$[ebp]
  00169	83 c2 10	 add	 edx, 16			; 00000010H
  0016c	89 55 f0	 mov	 DWORD PTR _vp$[ebp], edx

; 276  :             wp += 4;

  0016f	8b 45 ec	 mov	 eax, DWORD PTR _wp$[ebp]
  00172	83 c0 10	 add	 eax, 16			; 00000010H
  00175	89 45 ec	 mov	 DWORD PTR _wp$[ebp], eax
$LN7@Add_Imp_us:

; 277  :         }
; 278  :         // この時点で未処理の桁は 4 ワード未満のはず
; 279  : 
; 280  :         // 未処理の桁が 2 ワード以上あるなら 2 ワード加算を行う。
; 281  :         if (v_count & 0x2)

  00178	8b 4d 14	 mov	 ecx, DWORD PTR _v_count$[ebp]
  0017b	83 e1 02	 and	 ecx, 2
  0017e	74 37		 je	 SHORT $LN8@Add_Imp_us

; 282  :         {
; 283  :             c = _ADD_2WORDS_ADCX(c, up, vp, wp);

  00180	8b 55 ec	 mov	 edx, DWORD PTR _wp$[ebp]
  00183	52		 push	 edx
  00184	8b 45 f0	 mov	 eax, DWORD PTR _vp$[ebp]
  00187	50		 push	 eax
  00188	8b 4d f4	 mov	 ecx, DWORD PTR _up$[ebp]
  0018b	51		 push	 ecx
  0018c	0f b6 55 eb	 movzx	 edx, BYTE PTR _c$[ebp]
  00190	52		 push	 edx
  00191	e8 00 00 00 00	 call	 __ADD_2WORDS_ADCX
  00196	83 c4 10	 add	 esp, 16			; 00000010H
  00199	88 45 eb	 mov	 BYTE PTR _c$[ebp], al

; 284  :             up += 2;

  0019c	8b 45 f4	 mov	 eax, DWORD PTR _up$[ebp]
  0019f	83 c0 08	 add	 eax, 8
  001a2	89 45 f4	 mov	 DWORD PTR _up$[ebp], eax

; 285  :             vp += 2;

  001a5	8b 4d f0	 mov	 ecx, DWORD PTR _vp$[ebp]
  001a8	83 c1 08	 add	 ecx, 8
  001ab	89 4d f0	 mov	 DWORD PTR _vp$[ebp], ecx

; 286  :             wp += 2;

  001ae	8b 55 ec	 mov	 edx, DWORD PTR _wp$[ebp]
  001b1	83 c2 08	 add	 edx, 8
  001b4	89 55 ec	 mov	 DWORD PTR _wp$[ebp], edx
$LN8@Add_Imp_us:

; 287  :         }
; 288  :         // この時点で未処理の桁は 2 ワード未満のはず
; 289  : 
; 290  :         // 未処理の桁が 1 ワード以上あるなら 1 ワード加算を行う。
; 291  :         if (v_count & 0x1)

  001b7	8b 45 14	 mov	 eax, DWORD PTR _v_count$[ebp]
  001ba	83 e0 01	 and	 eax, 1
  001bd	74 4d		 je	 SHORT $LN9@Add_Imp_us

; 292  :             c = _ADDX_UNIT(c, *up++, *vp++, wp++);

  001bf	8b 4d ec	 mov	 ecx, DWORD PTR _wp$[ebp]
  001c2	89 4d e0	 mov	 DWORD PTR tv152[ebp], ecx
  001c5	8b 55 ec	 mov	 edx, DWORD PTR _wp$[ebp]
  001c8	83 c2 04	 add	 edx, 4
  001cb	89 55 ec	 mov	 DWORD PTR _wp$[ebp], edx
  001ce	8b 45 f0	 mov	 eax, DWORD PTR _vp$[ebp]
  001d1	8b 08		 mov	 ecx, DWORD PTR [eax]
  001d3	89 4d dc	 mov	 DWORD PTR tv155[ebp], ecx
  001d6	8b 55 f0	 mov	 edx, DWORD PTR _vp$[ebp]
  001d9	83 c2 04	 add	 edx, 4
  001dc	89 55 f0	 mov	 DWORD PTR _vp$[ebp], edx
  001df	8b 45 f4	 mov	 eax, DWORD PTR _up$[ebp]
  001e2	8b 08		 mov	 ecx, DWORD PTR [eax]
  001e4	89 4d d8	 mov	 DWORD PTR tv158[ebp], ecx
  001e7	8b 55 f4	 mov	 edx, DWORD PTR _up$[ebp]
  001ea	83 c2 04	 add	 edx, 4
  001ed	89 55 f4	 mov	 DWORD PTR _up$[ebp], edx
  001f0	8b 45 e0	 mov	 eax, DWORD PTR tv152[ebp]
  001f3	50		 push	 eax
  001f4	8b 4d dc	 mov	 ecx, DWORD PTR tv155[ebp]
  001f7	51		 push	 ecx
  001f8	8b 55 d8	 mov	 edx, DWORD PTR tv158[ebp]
  001fb	52		 push	 edx
  001fc	0f b6 45 eb	 movzx	 eax, BYTE PTR _c$[ebp]
  00200	50		 push	 eax
  00201	e8 00 00 00 00	 call	 __ADDX_UNIT
  00206	83 c4 10	 add	 esp, 16			; 00000010H
  00209	88 45 eb	 mov	 BYTE PTR _c$[ebp], al
$LN9@Add_Imp_us:

; 293  : 
; 294  :         // 残りの桁の繰り上がりを計算し、復帰する。
; 295  :         DoCarry(c, up, u_count - v_count, wp, w_count - v_count);

  0020c	8b 4d 1c	 mov	 ecx, DWORD PTR _w_count$[ebp]
  0020f	2b 4d 14	 sub	 ecx, DWORD PTR _v_count$[ebp]
  00212	51		 push	 ecx
  00213	8b 55 ec	 mov	 edx, DWORD PTR _wp$[ebp]
  00216	52		 push	 edx
  00217	8b 45 0c	 mov	 eax, DWORD PTR _u_count$[ebp]
  0021a	2b 45 14	 sub	 eax, DWORD PTR _v_count$[ebp]
  0021d	50		 push	 eax
  0021e	8b 4d f4	 mov	 ecx, DWORD PTR _up$[ebp]
  00221	51		 push	 ecx
  00222	0f b6 55 eb	 movzx	 edx, BYTE PTR _c$[ebp]
  00226	52		 push	 edx
  00227	e8 00 00 00 00	 call	 ?DoCarry@Internal@Core@Math@Palmtree@@YAXDPAII0I@Z ; Palmtree::Math::Core::Internal::DoCarry
  0022c	83 c4 14	 add	 esp, 20			; 00000014H

; 296  :     }

  0022f	5f		 pop	 edi
  00230	83 c4 28	 add	 esp, 40			; 00000028H
  00233	3b ec		 cmp	 ebp, esp
  00235	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0023a	8b e5		 mov	 esp, ebp
  0023c	5d		 pop	 ebp
  0023d	c3		 ret	 0
?Add_Imp_using_ADCX@Internal@Core@Math@Palmtree@@YAXPAII0I0I@Z ENDP ; Palmtree::Math::Core::Internal::Add_Imp_using_ADCX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_add.cpp
_TEXT	SEGMENT
tv158 = -40						; size = 4
tv155 = -36						; size = 4
tv152 = -32						; size = 4
_count$ = -28						; size = 4
_c$ = -21						; size = 1
_wp$ = -20						; size = 4
_vp$ = -16						; size = 4
_up$ = -12						; size = 4
_t_count$1 = -8						; size = 4
_t_buf$2 = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v_buf$ = 16						; size = 4
_v_count$ = 20						; size = 4
_w_buf$ = 24						; size = 4
_w_count$ = 28						; size = 4
?Add_Imp_using_ADC@Internal@Core@Math@Palmtree@@YAXPAII0I0I@Z PROC ; Palmtree::Math::Core::Internal::Add_Imp_using_ADC

; 145  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	57		 push	 edi
  00007	8d 7d d8	 lea	 edi, DWORD PTR [ebp-40]
  0000a	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET __AF70AA4D_pmc_add@cpp
  0001b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 146  :         // x のワード長が y のワード長以上であるようにする
; 147  :         if (u_count < v_count)

  00020	8b 45 0c	 mov	 eax, DWORD PTR _u_count$[ebp]
  00023	3b 45 14	 cmp	 eax, DWORD PTR _v_count$[ebp]
  00026	73 24		 jae	 SHORT $LN4@Add_Imp_us

; 148  :         {
; 149  :             __UNIT_TYPE* t_buf = u_buf;

  00028	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  0002b	89 4d fc	 mov	 DWORD PTR _t_buf$2[ebp], ecx

; 150  :             u_buf = v_buf;

  0002e	8b 55 10	 mov	 edx, DWORD PTR _v_buf$[ebp]
  00031	89 55 08	 mov	 DWORD PTR _u_buf$[ebp], edx

; 151  :             v_buf = t_buf;

  00034	8b 45 fc	 mov	 eax, DWORD PTR _t_buf$2[ebp]
  00037	89 45 10	 mov	 DWORD PTR _v_buf$[ebp], eax

; 152  :             __UNIT_TYPE t_count = u_count;

  0003a	8b 4d 0c	 mov	 ecx, DWORD PTR _u_count$[ebp]
  0003d	89 4d f8	 mov	 DWORD PTR _t_count$1[ebp], ecx

; 153  :             u_count = v_count;

  00040	8b 55 14	 mov	 edx, DWORD PTR _v_count$[ebp]
  00043	89 55 0c	 mov	 DWORD PTR _u_count$[ebp], edx

; 154  :             v_count = t_count;

  00046	8b 45 f8	 mov	 eax, DWORD PTR _t_count$1[ebp]
  00049	89 45 14	 mov	 DWORD PTR _v_count$[ebp], eax
$LN4@Add_Imp_us:

; 155  :         }
; 156  :         __UNIT_TYPE* up = u_buf;

  0004c	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  0004f	89 4d f4	 mov	 DWORD PTR _up$[ebp], ecx

; 157  :         __UNIT_TYPE* vp = v_buf;

  00052	8b 55 10	 mov	 edx, DWORD PTR _v_buf$[ebp]
  00055	89 55 f0	 mov	 DWORD PTR _vp$[ebp], edx

; 158  :         __UNIT_TYPE* wp = w_buf;

  00058	8b 45 18	 mov	 eax, DWORD PTR _w_buf$[ebp]
  0005b	89 45 ec	 mov	 DWORD PTR _wp$[ebp], eax

; 159  :         char c = 0;

  0005e	c6 45 eb 00	 mov	 BYTE PTR _c$[ebp], 0

; 160  : 
; 161  :         // まず 32 ワードずつ加算をする。
; 162  :         __UNIT_TYPE count = v_count >> 5;

  00062	8b 4d 14	 mov	 ecx, DWORD PTR _v_count$[ebp]
  00065	c1 e9 05	 shr	 ecx, 5
  00068	89 4d e4	 mov	 DWORD PTR _count$[ebp], ecx
$LN2@Add_Imp_us:

; 163  :         while (count != 0)

  0006b	83 7d e4 00	 cmp	 DWORD PTR _count$[ebp], 0
  0006f	74 4a		 je	 SHORT $LN3@Add_Imp_us

; 164  :         {
; 165  :             c = _ADD_32WORDS_ADC(c, up, vp, wp);

  00071	8b 55 ec	 mov	 edx, DWORD PTR _wp$[ebp]
  00074	52		 push	 edx
  00075	8b 45 f0	 mov	 eax, DWORD PTR _vp$[ebp]
  00078	50		 push	 eax
  00079	8b 4d f4	 mov	 ecx, DWORD PTR _up$[ebp]
  0007c	51		 push	 ecx
  0007d	0f b6 55 eb	 movzx	 edx, BYTE PTR _c$[ebp]
  00081	52		 push	 edx
  00082	e8 00 00 00 00	 call	 __ADD_32WORDS_ADC
  00087	83 c4 10	 add	 esp, 16			; 00000010H
  0008a	88 45 eb	 mov	 BYTE PTR _c$[ebp], al

; 166  :             up += 32;

  0008d	8b 45 f4	 mov	 eax, DWORD PTR _up$[ebp]
  00090	05 80 00 00 00	 add	 eax, 128		; 00000080H
  00095	89 45 f4	 mov	 DWORD PTR _up$[ebp], eax

; 167  :             vp += 32;

  00098	8b 4d f0	 mov	 ecx, DWORD PTR _vp$[ebp]
  0009b	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  000a1	89 4d f0	 mov	 DWORD PTR _vp$[ebp], ecx

; 168  :             wp += 32;

  000a4	8b 55 ec	 mov	 edx, DWORD PTR _wp$[ebp]
  000a7	81 c2 80 00 00
	00		 add	 edx, 128		; 00000080H
  000ad	89 55 ec	 mov	 DWORD PTR _wp$[ebp], edx

; 169  :             --count;

  000b0	8b 45 e4	 mov	 eax, DWORD PTR _count$[ebp]
  000b3	83 e8 01	 sub	 eax, 1
  000b6	89 45 e4	 mov	 DWORD PTR _count$[ebp], eax

; 170  :         }

  000b9	eb b0		 jmp	 SHORT $LN2@Add_Imp_us
$LN3@Add_Imp_us:

; 171  :         // この時点で未処理の桁は 32 ワード未満のはず
; 172  : 
; 173  :         // 未処理の桁が 16 ワード以上あるなら 16 ワード加算を行う。
; 174  :         if (v_count & 0x10)

  000bb	8b 4d 14	 mov	 ecx, DWORD PTR _v_count$[ebp]
  000be	83 e1 10	 and	 ecx, 16			; 00000010H
  000c1	74 37		 je	 SHORT $LN5@Add_Imp_us

; 175  :         {
; 176  :             c = _ADD_16WORDS_ADC(c, up, vp, wp);

  000c3	8b 55 ec	 mov	 edx, DWORD PTR _wp$[ebp]
  000c6	52		 push	 edx
  000c7	8b 45 f0	 mov	 eax, DWORD PTR _vp$[ebp]
  000ca	50		 push	 eax
  000cb	8b 4d f4	 mov	 ecx, DWORD PTR _up$[ebp]
  000ce	51		 push	 ecx
  000cf	0f b6 55 eb	 movzx	 edx, BYTE PTR _c$[ebp]
  000d3	52		 push	 edx
  000d4	e8 00 00 00 00	 call	 __ADD_16WORDS_ADC
  000d9	83 c4 10	 add	 esp, 16			; 00000010H
  000dc	88 45 eb	 mov	 BYTE PTR _c$[ebp], al

; 177  :             up += 16;

  000df	8b 45 f4	 mov	 eax, DWORD PTR _up$[ebp]
  000e2	83 c0 40	 add	 eax, 64			; 00000040H
  000e5	89 45 f4	 mov	 DWORD PTR _up$[ebp], eax

; 178  :             vp += 16;

  000e8	8b 4d f0	 mov	 ecx, DWORD PTR _vp$[ebp]
  000eb	83 c1 40	 add	 ecx, 64			; 00000040H
  000ee	89 4d f0	 mov	 DWORD PTR _vp$[ebp], ecx

; 179  :             wp += 16;

  000f1	8b 55 ec	 mov	 edx, DWORD PTR _wp$[ebp]
  000f4	83 c2 40	 add	 edx, 64			; 00000040H
  000f7	89 55 ec	 mov	 DWORD PTR _wp$[ebp], edx
$LN5@Add_Imp_us:

; 180  :         }
; 181  :         // この時点で未処理の桁は 16 ワード未満のはず
; 182  : 
; 183  :         // 未処理の桁が 8 ワード以上あるなら 8 ワード加算を行う。
; 184  :         if (v_count & 0x8)

  000fa	8b 45 14	 mov	 eax, DWORD PTR _v_count$[ebp]
  000fd	83 e0 08	 and	 eax, 8
  00100	74 37		 je	 SHORT $LN6@Add_Imp_us

; 185  :         {
; 186  :             c = _ADD_8WORDS_ADC(c, up, vp, wp);

  00102	8b 4d ec	 mov	 ecx, DWORD PTR _wp$[ebp]
  00105	51		 push	 ecx
  00106	8b 55 f0	 mov	 edx, DWORD PTR _vp$[ebp]
  00109	52		 push	 edx
  0010a	8b 45 f4	 mov	 eax, DWORD PTR _up$[ebp]
  0010d	50		 push	 eax
  0010e	0f b6 4d eb	 movzx	 ecx, BYTE PTR _c$[ebp]
  00112	51		 push	 ecx
  00113	e8 00 00 00 00	 call	 __ADD_8WORDS_ADC
  00118	83 c4 10	 add	 esp, 16			; 00000010H
  0011b	88 45 eb	 mov	 BYTE PTR _c$[ebp], al

; 187  :             up += 8;

  0011e	8b 55 f4	 mov	 edx, DWORD PTR _up$[ebp]
  00121	83 c2 20	 add	 edx, 32			; 00000020H
  00124	89 55 f4	 mov	 DWORD PTR _up$[ebp], edx

; 188  :             vp += 8;

  00127	8b 45 f0	 mov	 eax, DWORD PTR _vp$[ebp]
  0012a	83 c0 20	 add	 eax, 32			; 00000020H
  0012d	89 45 f0	 mov	 DWORD PTR _vp$[ebp], eax

; 189  :             wp += 8;

  00130	8b 4d ec	 mov	 ecx, DWORD PTR _wp$[ebp]
  00133	83 c1 20	 add	 ecx, 32			; 00000020H
  00136	89 4d ec	 mov	 DWORD PTR _wp$[ebp], ecx
$LN6@Add_Imp_us:

; 190  :         }
; 191  :         // この時点で未処理の桁は 8 ワード未満のはず
; 192  : 
; 193  :         // 未処理の桁が 4 ワード以上あるなら 4 ワード加算を行う。
; 194  :         if (v_count & 0x4)

  00139	8b 55 14	 mov	 edx, DWORD PTR _v_count$[ebp]
  0013c	83 e2 04	 and	 edx, 4
  0013f	74 37		 je	 SHORT $LN7@Add_Imp_us

; 195  :         {
; 196  :             c = _ADD_4WORDS_ADC(c, up, vp, wp);

  00141	8b 45 ec	 mov	 eax, DWORD PTR _wp$[ebp]
  00144	50		 push	 eax
  00145	8b 4d f0	 mov	 ecx, DWORD PTR _vp$[ebp]
  00148	51		 push	 ecx
  00149	8b 55 f4	 mov	 edx, DWORD PTR _up$[ebp]
  0014c	52		 push	 edx
  0014d	0f b6 45 eb	 movzx	 eax, BYTE PTR _c$[ebp]
  00151	50		 push	 eax
  00152	e8 00 00 00 00	 call	 __ADD_4WORDS_ADC
  00157	83 c4 10	 add	 esp, 16			; 00000010H
  0015a	88 45 eb	 mov	 BYTE PTR _c$[ebp], al

; 197  :             up += 4;

  0015d	8b 4d f4	 mov	 ecx, DWORD PTR _up$[ebp]
  00160	83 c1 10	 add	 ecx, 16			; 00000010H
  00163	89 4d f4	 mov	 DWORD PTR _up$[ebp], ecx

; 198  :             vp += 4;

  00166	8b 55 f0	 mov	 edx, DWORD PTR _vp$[ebp]
  00169	83 c2 10	 add	 edx, 16			; 00000010H
  0016c	89 55 f0	 mov	 DWORD PTR _vp$[ebp], edx

; 199  :             wp += 4;

  0016f	8b 45 ec	 mov	 eax, DWORD PTR _wp$[ebp]
  00172	83 c0 10	 add	 eax, 16			; 00000010H
  00175	89 45 ec	 mov	 DWORD PTR _wp$[ebp], eax
$LN7@Add_Imp_us:

; 200  :         }
; 201  :         // この時点で未処理の桁は 4 ワード未満のはず
; 202  : 
; 203  :         // 未処理の桁が 2 ワード以上あるなら 2 ワード加算を行う。
; 204  :         if (v_count & 0x2)

  00178	8b 4d 14	 mov	 ecx, DWORD PTR _v_count$[ebp]
  0017b	83 e1 02	 and	 ecx, 2
  0017e	74 37		 je	 SHORT $LN8@Add_Imp_us

; 205  :         {
; 206  :             c = _ADD_2WORDS_ADC(c, up, vp, wp);

  00180	8b 55 ec	 mov	 edx, DWORD PTR _wp$[ebp]
  00183	52		 push	 edx
  00184	8b 45 f0	 mov	 eax, DWORD PTR _vp$[ebp]
  00187	50		 push	 eax
  00188	8b 4d f4	 mov	 ecx, DWORD PTR _up$[ebp]
  0018b	51		 push	 ecx
  0018c	0f b6 55 eb	 movzx	 edx, BYTE PTR _c$[ebp]
  00190	52		 push	 edx
  00191	e8 00 00 00 00	 call	 __ADD_2WORDS_ADC
  00196	83 c4 10	 add	 esp, 16			; 00000010H
  00199	88 45 eb	 mov	 BYTE PTR _c$[ebp], al

; 207  :             up += 2;

  0019c	8b 45 f4	 mov	 eax, DWORD PTR _up$[ebp]
  0019f	83 c0 08	 add	 eax, 8
  001a2	89 45 f4	 mov	 DWORD PTR _up$[ebp], eax

; 208  :             vp += 2;

  001a5	8b 4d f0	 mov	 ecx, DWORD PTR _vp$[ebp]
  001a8	83 c1 08	 add	 ecx, 8
  001ab	89 4d f0	 mov	 DWORD PTR _vp$[ebp], ecx

; 209  :             wp += 2;

  001ae	8b 55 ec	 mov	 edx, DWORD PTR _wp$[ebp]
  001b1	83 c2 08	 add	 edx, 8
  001b4	89 55 ec	 mov	 DWORD PTR _wp$[ebp], edx
$LN8@Add_Imp_us:

; 210  :         }
; 211  :         // この時点で未処理の桁は 2 ワード未満のはず
; 212  : 
; 213  :         // 未処理の桁が 1 ワード以上あるなら 1 ワード加算を行う。
; 214  :         if (v_count & 0x1)

  001b7	8b 45 14	 mov	 eax, DWORD PTR _v_count$[ebp]
  001ba	83 e0 01	 and	 eax, 1
  001bd	74 4d		 je	 SHORT $LN9@Add_Imp_us

; 215  :             c = _ADD_UNIT(c, *up++, *vp++, wp++);

  001bf	8b 4d ec	 mov	 ecx, DWORD PTR _wp$[ebp]
  001c2	89 4d e0	 mov	 DWORD PTR tv152[ebp], ecx
  001c5	8b 55 ec	 mov	 edx, DWORD PTR _wp$[ebp]
  001c8	83 c2 04	 add	 edx, 4
  001cb	89 55 ec	 mov	 DWORD PTR _wp$[ebp], edx
  001ce	8b 45 f0	 mov	 eax, DWORD PTR _vp$[ebp]
  001d1	8b 08		 mov	 ecx, DWORD PTR [eax]
  001d3	89 4d dc	 mov	 DWORD PTR tv155[ebp], ecx
  001d6	8b 55 f0	 mov	 edx, DWORD PTR _vp$[ebp]
  001d9	83 c2 04	 add	 edx, 4
  001dc	89 55 f0	 mov	 DWORD PTR _vp$[ebp], edx
  001df	8b 45 f4	 mov	 eax, DWORD PTR _up$[ebp]
  001e2	8b 08		 mov	 ecx, DWORD PTR [eax]
  001e4	89 4d d8	 mov	 DWORD PTR tv158[ebp], ecx
  001e7	8b 55 f4	 mov	 edx, DWORD PTR _up$[ebp]
  001ea	83 c2 04	 add	 edx, 4
  001ed	89 55 f4	 mov	 DWORD PTR _up$[ebp], edx
  001f0	8b 45 e0	 mov	 eax, DWORD PTR tv152[ebp]
  001f3	50		 push	 eax
  001f4	8b 4d dc	 mov	 ecx, DWORD PTR tv155[ebp]
  001f7	51		 push	 ecx
  001f8	8b 55 d8	 mov	 edx, DWORD PTR tv158[ebp]
  001fb	52		 push	 edx
  001fc	0f b6 45 eb	 movzx	 eax, BYTE PTR _c$[ebp]
  00200	50		 push	 eax
  00201	e8 00 00 00 00	 call	 __ADD_UNIT
  00206	83 c4 10	 add	 esp, 16			; 00000010H
  00209	88 45 eb	 mov	 BYTE PTR _c$[ebp], al
$LN9@Add_Imp_us:

; 216  : 
; 217  :         // 残りの桁の繰り上がりを計算し、復帰する。
; 218  :         DoCarry(c, up, u_count - v_count, wp, w_count - v_count);

  0020c	8b 4d 1c	 mov	 ecx, DWORD PTR _w_count$[ebp]
  0020f	2b 4d 14	 sub	 ecx, DWORD PTR _v_count$[ebp]
  00212	51		 push	 ecx
  00213	8b 55 ec	 mov	 edx, DWORD PTR _wp$[ebp]
  00216	52		 push	 edx
  00217	8b 45 0c	 mov	 eax, DWORD PTR _u_count$[ebp]
  0021a	2b 45 14	 sub	 eax, DWORD PTR _v_count$[ebp]
  0021d	50		 push	 eax
  0021e	8b 4d f4	 mov	 ecx, DWORD PTR _up$[ebp]
  00221	51		 push	 ecx
  00222	0f b6 55 eb	 movzx	 edx, BYTE PTR _c$[ebp]
  00226	52		 push	 edx
  00227	e8 00 00 00 00	 call	 ?DoCarry@Internal@Core@Math@Palmtree@@YAXDPAII0I@Z ; Palmtree::Math::Core::Internal::DoCarry
  0022c	83 c4 14	 add	 esp, 20			; 00000014H

; 219  :     }

  0022f	5f		 pop	 edi
  00230	83 c4 28	 add	 esp, 40			; 00000028H
  00233	3b ec		 cmp	 ebp, esp
  00235	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0023a	8b e5		 mov	 esp, ebp
  0023c	5d		 pop	 ebp
  0023d	c3		 ret	 0
?Add_Imp_using_ADC@Internal@Core@Math@Palmtree@@YAXPAII0I0I@Z ENDP ; Palmtree::Math::Core::Internal::Add_Imp_using_ADC
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_add.cpp
_TEXT	SEGMENT
tv132 = -28						; size = 4
tv128 = -24						; size = 4
tv91 = -20						; size = 4
tv87 = -16						; size = 4
_c$ = -9						; size = 1
_wp$ = -8						; size = 4
_up$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v_hi$ = 16						; size = 4
_v_lo$ = 20						; size = 4
_w_buf$ = 24						; size = 4
_w_count$ = 28						; size = 4
?Add_X_2W@Internal@Core@Math@Palmtree@@YAXPAIIII0I@Z PROC ; Palmtree::Math::Core::Internal::Add_X_2W

; 104  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000e	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00011	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00014	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00017	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001a	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001d	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __AF70AA4D_pmc_add@cpp
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 105  :         __UNIT_TYPE* up = u_buf;

  0002a	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  0002d	89 45 fc	 mov	 DWORD PTR _up$[ebp], eax

; 106  :         __UNIT_TYPE* wp = w_buf;

  00030	8b 4d 18	 mov	 ecx, DWORD PTR _w_buf$[ebp]
  00033	89 4d f8	 mov	 DWORD PTR _wp$[ebp], ecx

; 107  :         char c;
; 108  : 
; 109  :         if (u_count < 2)

  00036	83 7d 0c 02	 cmp	 DWORD PTR _u_count$[ebp], 2
  0003a	73 71		 jae	 SHORT $LN2@Add_X_2W

; 110  :         {
; 111  :             // x が 1 ワードしかなかった場合
; 112  : 
; 113  :             // 最下位ワードの加算を行う
; 114  :             c = _ADD_UNIT(0, up[0], v_lo, &wp[0]);

  0003c	ba 04 00 00 00	 mov	 edx, 4
  00041	6b c2 00	 imul	 eax, edx, 0
  00044	03 45 f8	 add	 eax, DWORD PTR _wp$[ebp]
  00047	50		 push	 eax
  00048	8b 4d 14	 mov	 ecx, DWORD PTR _v_lo$[ebp]
  0004b	51		 push	 ecx
  0004c	ba 04 00 00 00	 mov	 edx, 4
  00051	6b c2 00	 imul	 eax, edx, 0
  00054	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  00057	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0005a	52		 push	 edx
  0005b	6a 00		 push	 0
  0005d	e8 00 00 00 00	 call	 __ADD_UNIT
  00062	83 c4 10	 add	 esp, 16			; 00000010H
  00065	88 45 f7	 mov	 BYTE PTR _c$[ebp], al

; 115  : 
; 116  :             // 最下位から 2 番目のワードの加算を行う
; 117  :             c = _ADD_UNIT(c, 0, v_hi, &wp[1]);

  00068	b8 04 00 00 00	 mov	 eax, 4
  0006d	c1 e0 00	 shl	 eax, 0
  00070	03 45 f8	 add	 eax, DWORD PTR _wp$[ebp]
  00073	50		 push	 eax
  00074	8b 4d 10	 mov	 ecx, DWORD PTR _v_hi$[ebp]
  00077	51		 push	 ecx
  00078	6a 00		 push	 0
  0007a	0f b6 55 f7	 movzx	 edx, BYTE PTR _c$[ebp]
  0007e	52		 push	 edx
  0007f	e8 00 00 00 00	 call	 __ADD_UNIT
  00084	83 c4 10	 add	 esp, 16			; 00000010H
  00087	88 45 f7	 mov	 BYTE PTR _c$[ebp], al

; 118  : 
; 119  :             // 桁上りが発生したら 3 番目のワードに 1 を設定する。
; 120  :             if (c)

  0008a	0f be 45 f7	 movsx	 eax, BYTE PTR _c$[ebp]
  0008e	85 c0		 test	 eax, eax
  00090	74 11		 je	 SHORT $LN4@Add_X_2W

; 121  :                 wp[2] = 1;

  00092	b9 04 00 00 00	 mov	 ecx, 4
  00097	d1 e1		 shl	 ecx, 1
  00099	8b 55 f8	 mov	 edx, DWORD PTR _wp$[ebp]
  0009c	c7 04 0a 01 00
	00 00		 mov	 DWORD PTR [edx+ecx], 1
$LN4@Add_X_2W:

; 122  : 
; 123  :             // 正常復帰する。
; 124  :             return;

  000a3	e9 a9 00 00 00	 jmp	 $LN1@Add_X_2W

; 125  :         }
; 126  :         else

  000a8	e9 a4 00 00 00	 jmp	 $LN1@Add_X_2W
$LN2@Add_X_2W:

; 127  :         {
; 128  :             // x が 2 ワード以上あった場合
; 129  : 
; 130  :             // 最下位のワードの加算をする
; 131  :             c = _ADD_UNIT(0, *up++, v_lo, wp++);

  000ad	8b 45 f8	 mov	 eax, DWORD PTR _wp$[ebp]
  000b0	89 45 f0	 mov	 DWORD PTR tv87[ebp], eax
  000b3	8b 4d f8	 mov	 ecx, DWORD PTR _wp$[ebp]
  000b6	83 c1 04	 add	 ecx, 4
  000b9	89 4d f8	 mov	 DWORD PTR _wp$[ebp], ecx
  000bc	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  000bf	8b 02		 mov	 eax, DWORD PTR [edx]
  000c1	89 45 ec	 mov	 DWORD PTR tv91[ebp], eax
  000c4	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  000c7	83 c1 04	 add	 ecx, 4
  000ca	89 4d fc	 mov	 DWORD PTR _up$[ebp], ecx
  000cd	8b 55 f0	 mov	 edx, DWORD PTR tv87[ebp]
  000d0	52		 push	 edx
  000d1	8b 45 14	 mov	 eax, DWORD PTR _v_lo$[ebp]
  000d4	50		 push	 eax
  000d5	8b 4d ec	 mov	 ecx, DWORD PTR tv91[ebp]
  000d8	51		 push	 ecx
  000d9	6a 00		 push	 0
  000db	e8 00 00 00 00	 call	 __ADD_UNIT
  000e0	83 c4 10	 add	 esp, 16			; 00000010H
  000e3	88 45 f7	 mov	 BYTE PTR _c$[ebp], al

; 132  : 
; 133  :             // 最下位から 2 番目のワードの加算をする。
; 134  :             c = _ADD_UNIT(c, *up++, v_hi, wp++);

  000e6	8b 55 f8	 mov	 edx, DWORD PTR _wp$[ebp]
  000e9	89 55 e8	 mov	 DWORD PTR tv128[ebp], edx
  000ec	8b 45 f8	 mov	 eax, DWORD PTR _wp$[ebp]
  000ef	83 c0 04	 add	 eax, 4
  000f2	89 45 f8	 mov	 DWORD PTR _wp$[ebp], eax
  000f5	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  000f8	8b 11		 mov	 edx, DWORD PTR [ecx]
  000fa	89 55 e4	 mov	 DWORD PTR tv132[ebp], edx
  000fd	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  00100	83 c0 04	 add	 eax, 4
  00103	89 45 fc	 mov	 DWORD PTR _up$[ebp], eax
  00106	8b 4d e8	 mov	 ecx, DWORD PTR tv128[ebp]
  00109	51		 push	 ecx
  0010a	8b 55 10	 mov	 edx, DWORD PTR _v_hi$[ebp]
  0010d	52		 push	 edx
  0010e	8b 45 e4	 mov	 eax, DWORD PTR tv132[ebp]
  00111	50		 push	 eax
  00112	0f b6 4d f7	 movzx	 ecx, BYTE PTR _c$[ebp]
  00116	51		 push	 ecx
  00117	e8 00 00 00 00	 call	 __ADD_UNIT
  0011c	83 c4 10	 add	 esp, 16			; 00000010H
  0011f	88 45 f7	 mov	 BYTE PTR _c$[ebp], al

; 135  :             u_count -= 2;

  00122	8b 55 0c	 mov	 edx, DWORD PTR _u_count$[ebp]
  00125	83 ea 02	 sub	 edx, 2
  00128	89 55 0c	 mov	 DWORD PTR _u_count$[ebp], edx

; 136  :             w_count -= 2;

  0012b	8b 45 1c	 mov	 eax, DWORD PTR _w_count$[ebp]
  0012e	83 e8 02	 sub	 eax, 2
  00131	89 45 1c	 mov	 DWORD PTR _w_count$[ebp], eax

; 137  : 
; 138  :             // 残りの桁の繰り上がりを計算し、復帰する。
; 139  :             DoCarry(c, up, u_count, wp, w_count);

  00134	8b 4d 1c	 mov	 ecx, DWORD PTR _w_count$[ebp]
  00137	51		 push	 ecx
  00138	8b 55 f8	 mov	 edx, DWORD PTR _wp$[ebp]
  0013b	52		 push	 edx
  0013c	8b 45 0c	 mov	 eax, DWORD PTR _u_count$[ebp]
  0013f	50		 push	 eax
  00140	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  00143	51		 push	 ecx
  00144	0f b6 55 f7	 movzx	 edx, BYTE PTR _c$[ebp]
  00148	52		 push	 edx
  00149	e8 00 00 00 00	 call	 ?DoCarry@Internal@Core@Math@Palmtree@@YAXDPAII0I@Z ; Palmtree::Math::Core::Internal::DoCarry
  0014e	83 c4 14	 add	 esp, 20			; 00000014H
$LN1@Add_X_2W:

; 140  :         }
; 141  :     }

  00151	83 c4 1c	 add	 esp, 28			; 0000001cH
  00154	3b ec		 cmp	 ebp, esp
  00156	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0015b	8b e5		 mov	 esp, ebp
  0015d	5d		 pop	 ebp
  0015e	c3		 ret	 0
?Add_X_2W@Internal@Core@Math@Palmtree@@YAXPAIIII0I@Z ENDP ; Palmtree::Math::Core::Internal::Add_X_2W
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_add.cpp
_TEXT	SEGMENT
tv70 = -12						; size = 4
tv66 = -8						; size = 4
_c$ = -1						; size = 1
_u_ptr$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v$ = 16						; size = 4
_w_ptr$ = 20						; size = 4
_w_count$ = 24						; size = 4
?Add_X_1W@Internal@Core@Math@Palmtree@@YAXPAIII0I@Z PROC ; Palmtree::Math::Core::Internal::Add_X_1W

; 91   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __AF70AA4D_pmc_add@cpp
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 92   :         char c;
; 93   : 
; 94   :         // 最下桁の加算を行う
; 95   :         c = _ADD_UNIT(0, *u_ptr++, v, w_ptr++);

  00025	8b 45 14	 mov	 eax, DWORD PTR _w_ptr$[ebp]
  00028	89 45 f8	 mov	 DWORD PTR tv66[ebp], eax
  0002b	8b 4d 14	 mov	 ecx, DWORD PTR _w_ptr$[ebp]
  0002e	83 c1 04	 add	 ecx, 4
  00031	89 4d 14	 mov	 DWORD PTR _w_ptr$[ebp], ecx
  00034	8b 55 08	 mov	 edx, DWORD PTR _u_ptr$[ebp]
  00037	8b 02		 mov	 eax, DWORD PTR [edx]
  00039	89 45 f4	 mov	 DWORD PTR tv70[ebp], eax
  0003c	8b 4d 08	 mov	 ecx, DWORD PTR _u_ptr$[ebp]
  0003f	83 c1 04	 add	 ecx, 4
  00042	89 4d 08	 mov	 DWORD PTR _u_ptr$[ebp], ecx
  00045	8b 55 f8	 mov	 edx, DWORD PTR tv66[ebp]
  00048	52		 push	 edx
  00049	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d f4	 mov	 ecx, DWORD PTR tv70[ebp]
  00050	51		 push	 ecx
  00051	6a 00		 push	 0
  00053	e8 00 00 00 00	 call	 __ADD_UNIT
  00058	83 c4 10	 add	 esp, 16			; 00000010H
  0005b	88 45 ff	 mov	 BYTE PTR _c$[ebp], al

; 96   :         --u_count;

  0005e	8b 55 0c	 mov	 edx, DWORD PTR _u_count$[ebp]
  00061	83 ea 01	 sub	 edx, 1
  00064	89 55 0c	 mov	 DWORD PTR _u_count$[ebp], edx

; 97   :         --w_count;

  00067	8b 45 18	 mov	 eax, DWORD PTR _w_count$[ebp]
  0006a	83 e8 01	 sub	 eax, 1
  0006d	89 45 18	 mov	 DWORD PTR _w_count$[ebp], eax

; 98   : 
; 99   :         // 残りの桁の繰上りを行い復帰する。
; 100  :         DoCarry(c, u_ptr, u_count, w_ptr, w_count);

  00070	8b 4d 18	 mov	 ecx, DWORD PTR _w_count$[ebp]
  00073	51		 push	 ecx
  00074	8b 55 14	 mov	 edx, DWORD PTR _w_ptr$[ebp]
  00077	52		 push	 edx
  00078	8b 45 0c	 mov	 eax, DWORD PTR _u_count$[ebp]
  0007b	50		 push	 eax
  0007c	8b 4d 08	 mov	 ecx, DWORD PTR _u_ptr$[ebp]
  0007f	51		 push	 ecx
  00080	0f b6 55 ff	 movzx	 edx, BYTE PTR _c$[ebp]
  00084	52		 push	 edx
  00085	e8 00 00 00 00	 call	 ?DoCarry@Internal@Core@Math@Palmtree@@YAXDPAII0I@Z ; Palmtree::Math::Core::Internal::DoCarry
  0008a	83 c4 14	 add	 esp, 20			; 00000014H

; 101  :     }

  0008d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00090	3b ec		 cmp	 ebp, esp
  00092	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c3		 ret	 0
?Add_X_1W@Internal@Core@Math@Palmtree@@YAXPAIII0I@Z ENDP ; Palmtree::Math::Core::Internal::Add_X_1W
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_add.cpp
_TEXT	SEGMENT
tv90 = -36						; size = 4
tv81 = -32						; size = 4
tv77 = -28						; size = 4
$T1 = -24						; size = 24
_c$ = 8							; size = 1
_u_ptr$ = 12						; size = 4
_u_count$ = 16						; size = 4
_w_ptr$ = 20						; size = 4
_w_count$ = 24						; size = 4
?DoCarry@Internal@Core@Math@Palmtree@@YAXDPAII0I@Z PROC	; Palmtree::Math::Core::Internal::DoCarry

; 39   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0000e	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00011	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00014	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00017	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0001a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001d	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00020	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00023	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00026	b9 00 00 00 00	 mov	 ecx, OFFSET __AF70AA4D_pmc_add@cpp
  0002b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
$LN4@DoCarry:

; 40   :         // 繰り上がりを続く限り行う
; 41   :         for (;;)
; 42   :         {
; 43   :             if (u_count <= 0)

  00030	83 7d 10 00	 cmp	 DWORD PTR _u_count$[ebp], 0
  00034	77 41		 ja	 SHORT $LN7@DoCarry

; 44   :             {
; 45   :                 // u の最上位まで達してしまった場合
; 46   : 
; 47   :                 if (c)

  00036	0f be 45 08	 movsx	 eax, BYTE PTR _c$[ebp]
  0003a	85 c0		 test	 eax, eax
  0003c	74 2f		 je	 SHORT $LN9@DoCarry

; 48   :                 {
; 49   :                     // かつそれでも繰り上がりを行う必要がある場合
; 50   :                     if (w_count <= 0)

  0003e	83 7d 18 00	 cmp	 DWORD PTR _w_count$[ebp], 0
  00042	77 20		 ja	 SHORT $LN10@DoCarry

; 51   :                     {
; 52   :                         // しかし w がもう終端に達してしまった場合
; 53   : 
; 54   :                         // w のバッファはこの余裕を見込んでいるのでこのルートには到達しないはず。
; 55   :                         throw InternalErrorException(L"内部エラーが発生しました。", L"pcm_add.cpp;DoCarry;1");

  00044	68 00 00 00 00	 push	 OFFSET $SG118029
  00049	68 00 00 00 00	 push	 OFFSET $SG118030
  0004e	8d 4d e8	 lea	 ecx, DWORD PTR $T1[ebp]
  00051	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00056	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0005b	8d 4d e8	 lea	 ecx, DWORD PTR $T1[ebp]
  0005e	51		 push	 ecx
  0005f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@DoCarry:

; 56   :                     }
; 57   :                     *w_ptr = 1;

  00064	8b 55 14	 mov	 edx, DWORD PTR _w_ptr$[ebp]
  00067	c7 02 01 00 00
	00		 mov	 DWORD PTR [edx], 1
$LN9@DoCarry:

; 58   :                 }
; 59   : 
; 60   :                 // u の最上位に達してしまった場合はいずれにしろループを中断して正常復帰する。
; 61   : 
; 62   :                 return;

  0006d	e9 9e 00 00 00	 jmp	 $LN13@DoCarry
  00072	e9 94 00 00 00	 jmp	 $LN8@DoCarry
$LN7@DoCarry:

; 63   :             }
; 64   :             else if (c)

  00077	0f be 45 08	 movsx	 eax, BYTE PTR _c$[ebp]
  0007b	85 c0		 test	 eax, eax
  0007d	74 4e		 je	 SHORT $LN5@DoCarry

; 65   :             {
; 66   :                 // u の最上位に達しておらず、かつキャリーが立っている場合
; 67   : 
; 68   :                 // 繰り上がりを継続する
; 69   :                 c = _ADD_UNIT(c, *u_ptr++, 0, w_ptr++);

  0007f	8b 4d 14	 mov	 ecx, DWORD PTR _w_ptr$[ebp]
  00082	89 4d e4	 mov	 DWORD PTR tv77[ebp], ecx
  00085	8b 55 14	 mov	 edx, DWORD PTR _w_ptr$[ebp]
  00088	83 c2 04	 add	 edx, 4
  0008b	89 55 14	 mov	 DWORD PTR _w_ptr$[ebp], edx
  0008e	8b 45 0c	 mov	 eax, DWORD PTR _u_ptr$[ebp]
  00091	8b 08		 mov	 ecx, DWORD PTR [eax]
  00093	89 4d e0	 mov	 DWORD PTR tv81[ebp], ecx
  00096	8b 55 0c	 mov	 edx, DWORD PTR _u_ptr$[ebp]
  00099	83 c2 04	 add	 edx, 4
  0009c	89 55 0c	 mov	 DWORD PTR _u_ptr$[ebp], edx
  0009f	8b 45 e4	 mov	 eax, DWORD PTR tv77[ebp]
  000a2	50		 push	 eax
  000a3	6a 00		 push	 0
  000a5	8b 4d e0	 mov	 ecx, DWORD PTR tv81[ebp]
  000a8	51		 push	 ecx
  000a9	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  000ad	52		 push	 edx
  000ae	e8 00 00 00 00	 call	 __ADD_UNIT
  000b3	83 c4 10	 add	 esp, 16			; 00000010H
  000b6	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 70   :                 --u_count;

  000b9	8b 45 10	 mov	 eax, DWORD PTR _u_count$[ebp]
  000bc	83 e8 01	 sub	 eax, 1
  000bf	89 45 10	 mov	 DWORD PTR _u_count$[ebp], eax

; 71   :                 --w_count;

  000c2	8b 4d 18	 mov	 ecx, DWORD PTR _w_count$[ebp]
  000c5	83 e9 01	 sub	 ecx, 1
  000c8	89 4d 18	 mov	 DWORD PTR _w_count$[ebp], ecx

; 72   :             }
; 73   :             else

  000cb	eb 3e		 jmp	 SHORT $LN8@DoCarry
$LN5@DoCarry:

; 74   :             {
; 75   :                 // u の最上位に達しておらず、かつキャリーが立っていない場合
; 76   : 
; 77   :                 // 繰り上がりを中断し、u の残りのデータをzにそのまま複写し、正常復帰する。
; 78   :                 while (u_count > 0)

  000cd	83 7d 10 00	 cmp	 DWORD PTR _u_count$[ebp], 0
  000d1	76 36		 jbe	 SHORT $LN6@DoCarry

; 79   :                 {
; 80   :                     *w_ptr++ = *u_ptr++;

  000d3	8b 55 0c	 mov	 edx, DWORD PTR _u_ptr$[ebp]
  000d6	8b 02		 mov	 eax, DWORD PTR [edx]
  000d8	89 45 dc	 mov	 DWORD PTR tv90[ebp], eax
  000db	8b 4d 0c	 mov	 ecx, DWORD PTR _u_ptr$[ebp]
  000de	83 c1 04	 add	 ecx, 4
  000e1	89 4d 0c	 mov	 DWORD PTR _u_ptr$[ebp], ecx
  000e4	8b 55 14	 mov	 edx, DWORD PTR _w_ptr$[ebp]
  000e7	8b 45 dc	 mov	 eax, DWORD PTR tv90[ebp]
  000ea	89 02		 mov	 DWORD PTR [edx], eax
  000ec	8b 4d 14	 mov	 ecx, DWORD PTR _w_ptr$[ebp]
  000ef	83 c1 04	 add	 ecx, 4
  000f2	89 4d 14	 mov	 DWORD PTR _w_ptr$[ebp], ecx

; 81   :                     --u_count;

  000f5	8b 55 10	 mov	 edx, DWORD PTR _u_count$[ebp]
  000f8	83 ea 01	 sub	 edx, 1
  000fb	89 55 10	 mov	 DWORD PTR _u_count$[ebp], edx

; 82   :                     --w_count;

  000fe	8b 45 18	 mov	 eax, DWORD PTR _w_count$[ebp]
  00101	83 e8 01	 sub	 eax, 1
  00104	89 45 18	 mov	 DWORD PTR _w_count$[ebp], eax

; 83   :                 }

  00107	eb c4		 jmp	 SHORT $LN5@DoCarry
$LN6@DoCarry:

; 84   :                 return;

  00109	eb 05		 jmp	 SHORT $LN13@DoCarry
$LN8@DoCarry:

; 85   :             }
; 86   :         }

  0010b	e9 20 ff ff ff	 jmp	 $LN4@DoCarry
$LN13@DoCarry:

; 87   :     }

  00110	83 c4 24	 add	 esp, 36			; 00000024H
  00113	3b ec		 cmp	 ebp, esp
  00115	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011a	8b e5		 mov	 esp, ebp
  0011c	5d		 pop	 ebp
  0011d	c3		 ret	 0
?DoCarry@Internal@Core@Math@Palmtree@@YAXDPAII0I@Z ENDP	; Palmtree::Math::Core::Internal::DoCarry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_2WORDS_ADCX PROC

; 2228 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __E05E7037_autogenerated_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 2229 : #ifdef _MSC_VER
; 2230 :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

  0000d	b8 04 00 00 00	 mov	 eax, 4
  00012	6b c8 00	 imul	 ecx, eax, 0
  00015	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00018	51		 push	 ecx
  00019	ba 04 00 00 00	 mov	 edx, 4
  0001e	6b c2 00	 imul	 eax, edx, 0
  00021	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00024	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00027	52		 push	 edx
  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  00033	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00036	50		 push	 eax
  00037	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 __ADDX_UNIT
  00041	83 c4 10	 add	 esp, 16			; 00000010H
  00044	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 2231 :     c = _ADDX_UNIT(c, xp[1], yp[1], &zp[1]);

  00047	ba 04 00 00 00	 mov	 edx, 4
  0004c	c1 e2 00	 shl	 edx, 0
  0004f	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00052	52		 push	 edx
  00053	b8 04 00 00 00	 mov	 eax, 4
  00058	c1 e0 00	 shl	 eax, 0
  0005b	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0005e	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00061	52		 push	 edx
  00062	b8 04 00 00 00	 mov	 eax, 4
  00067	c1 e0 00	 shl	 eax, 0
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  0006d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00070	52		 push	 edx
  00071	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 __ADDX_UNIT
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 2232 : #elif defined(__GNUC__)
; 2233 : #ifdef _M_IX86
; 2234 :     __asm__ volatile (
; 2235 :         "addb\t$-1, %0\n\t"
; 2236 :         "movl\t(%1), %%ecx\n\t"
; 2237 :         "adcxl\t(%2), %%ecx\n\t"
; 2238 :         "movl\t%%ecx, (%3)\n\t"
; 2239 :         "movl\t4(%1), %%ecx\n\t"
; 2240 :         "adcxl\t4(%2), %%ecx\n\t"
; 2241 :         "movl\t%%ecx, 4(%3)\n\t"
; 2242 :         "setc\t%0"
; 2243 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2244 :         :
; 2245 :         : "cc", "memory", "%ecx"
; 2246 : );
; 2247 : #elif defined(_M_X64)
; 2248 :     __asm__ volatile (
; 2249 :         "addb\t$-1, %0\n\t"
; 2250 :         "movq\t(%1), %%rcx\n\t"
; 2251 :         "adcxq\t(%2), %%rcx\n\t"
; 2252 :         "movq\t%%rcx, (%3)\n\t"
; 2253 :         "movq\t8(%1), %%rcx\n\t"
; 2254 :         "adcxq\t8(%2), %%rcx\n\t"
; 2255 :         "movq\t%%rcx, 8(%3)\n\t"
; 2256 :         "setc\t%0"
; 2257 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2258 :         :
; 2259 :         : "cc", "memory", "%rcx"
; 2260 : );
; 2261 : #else
; 2262 : #error unknown platform
; 2263 : #endif
; 2264 : #else
; 2265 : #error unknown compiler
; 2266 : #endif
; 2267 :     return (c);

  00081	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]

; 2268 : }

  00084	3b ec		 cmp	 ebp, esp
  00086	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008b	5d		 pop	 ebp
  0008c	c3		 ret	 0
__ADD_2WORDS_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_2WORDS_ADC PROC

; 2185 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __E05E7037_autogenerated_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 2186 : #ifdef _MSC_VER
; 2187 :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

  0000d	b8 04 00 00 00	 mov	 eax, 4
  00012	6b c8 00	 imul	 ecx, eax, 0
  00015	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00018	51		 push	 ecx
  00019	ba 04 00 00 00	 mov	 edx, 4
  0001e	6b c2 00	 imul	 eax, edx, 0
  00021	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00024	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00027	52		 push	 edx
  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  00033	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00036	50		 push	 eax
  00037	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 __ADD_UNIT
  00041	83 c4 10	 add	 esp, 16			; 00000010H
  00044	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 2188 :     c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);

  00047	ba 04 00 00 00	 mov	 edx, 4
  0004c	c1 e2 00	 shl	 edx, 0
  0004f	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00052	52		 push	 edx
  00053	b8 04 00 00 00	 mov	 eax, 4
  00058	c1 e0 00	 shl	 eax, 0
  0005b	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0005e	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00061	52		 push	 edx
  00062	b8 04 00 00 00	 mov	 eax, 4
  00067	c1 e0 00	 shl	 eax, 0
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  0006d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00070	52		 push	 edx
  00071	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 __ADD_UNIT
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 2189 : #elif defined(__GNUC__)
; 2190 : #ifdef _M_IX86
; 2191 :     __asm__ volatile (
; 2192 :         "addb\t$-1, %0\n\t"
; 2193 :         "movl\t(%1), %%ecx\n\t"
; 2194 :         "adcl\t(%2), %%ecx\n\t"
; 2195 :         "movl\t%%ecx, (%3)\n\t"
; 2196 :         "movl\t4(%1), %%ecx\n\t"
; 2197 :         "adcl\t4(%2), %%ecx\n\t"
; 2198 :         "movl\t%%ecx, 4(%3)\n\t"
; 2199 :         "setc\t%0"
; 2200 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2201 :         :
; 2202 :         : "cc", "memory", "%ecx"
; 2203 : );
; 2204 : #elif defined(_M_X64)
; 2205 :     __asm__ volatile (
; 2206 :         "addb\t$-1, %0\n\t"
; 2207 :         "movq\t(%1), %%rcx\n\t"
; 2208 :         "adcq\t(%2), %%rcx\n\t"
; 2209 :         "movq\t%%rcx, (%3)\n\t"
; 2210 :         "movq\t8(%1), %%rcx\n\t"
; 2211 :         "adcq\t8(%2), %%rcx\n\t"
; 2212 :         "movq\t%%rcx, 8(%3)\n\t"
; 2213 :         "setc\t%0"
; 2214 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2215 :         :
; 2216 :         : "cc", "memory", "%rcx"
; 2217 : );
; 2218 : #else
; 2219 : #error unknown platform
; 2220 : #endif
; 2221 : #else
; 2222 : #error unknown compiler
; 2223 : #endif
; 2224 :     return (c);

  00081	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]

; 2225 : }

  00084	3b ec		 cmp	 ebp, esp
  00086	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008b	5d		 pop	 ebp
  0008c	c3		 ret	 0
__ADD_2WORDS_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_4WORDS_ADCX PROC

; 2014 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __E05E7037_autogenerated_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 2015 : #ifdef _MSC_VER
; 2016 :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

  0000d	b8 04 00 00 00	 mov	 eax, 4
  00012	6b c8 00	 imul	 ecx, eax, 0
  00015	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00018	51		 push	 ecx
  00019	ba 04 00 00 00	 mov	 edx, 4
  0001e	6b c2 00	 imul	 eax, edx, 0
  00021	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00024	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00027	52		 push	 edx
  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  00033	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00036	50		 push	 eax
  00037	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 __ADDX_UNIT
  00041	83 c4 10	 add	 esp, 16			; 00000010H
  00044	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 2017 :     c = _ADDX_UNIT(c, xp[1], yp[1], &zp[1]);

  00047	ba 04 00 00 00	 mov	 edx, 4
  0004c	c1 e2 00	 shl	 edx, 0
  0004f	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00052	52		 push	 edx
  00053	b8 04 00 00 00	 mov	 eax, 4
  00058	c1 e0 00	 shl	 eax, 0
  0005b	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0005e	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00061	52		 push	 edx
  00062	b8 04 00 00 00	 mov	 eax, 4
  00067	c1 e0 00	 shl	 eax, 0
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  0006d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00070	52		 push	 edx
  00071	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 __ADDX_UNIT
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 2018 :     c = _ADDX_UNIT(c, xp[2], yp[2], &zp[2]);

  00081	b9 04 00 00 00	 mov	 ecx, 4
  00086	d1 e1		 shl	 ecx, 1
  00088	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  0008b	51		 push	 ecx
  0008c	ba 04 00 00 00	 mov	 edx, 4
  00091	d1 e2		 shl	 edx, 1
  00093	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00096	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00099	51		 push	 ecx
  0009a	ba 04 00 00 00	 mov	 edx, 4
  0009f	d1 e2		 shl	 edx, 1
  000a1	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  000a4	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  000a7	51		 push	 ecx
  000a8	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  000ac	52		 push	 edx
  000ad	e8 00 00 00 00	 call	 __ADDX_UNIT
  000b2	83 c4 10	 add	 esp, 16			; 00000010H
  000b5	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 2019 :     c = _ADDX_UNIT(c, xp[3], yp[3], &zp[3]);

  000b8	b8 04 00 00 00	 mov	 eax, 4
  000bd	6b c8 03	 imul	 ecx, eax, 3
  000c0	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  000c3	51		 push	 ecx
  000c4	ba 04 00 00 00	 mov	 edx, 4
  000c9	6b c2 03	 imul	 eax, edx, 3
  000cc	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  000cf	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  000d2	52		 push	 edx
  000d3	b8 04 00 00 00	 mov	 eax, 4
  000d8	6b c8 03	 imul	 ecx, eax, 3
  000db	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  000de	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  000e1	50		 push	 eax
  000e2	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  000e6	51		 push	 ecx
  000e7	e8 00 00 00 00	 call	 __ADDX_UNIT
  000ec	83 c4 10	 add	 esp, 16			; 00000010H
  000ef	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 2020 : #elif defined(__GNUC__)
; 2021 : #ifdef _M_IX86
; 2022 :     __asm__ volatile (
; 2023 :         "addb\t$-1, %0\n\t"
; 2024 :         "movl\t(%1), %%ecx\n\t"
; 2025 :         "adcxl\t(%2), %%ecx\n\t"
; 2026 :         "movl\t%%ecx, (%3)\n\t"
; 2027 :         "movl\t4(%1), %%ecx\n\t"
; 2028 :         "adcxl\t4(%2), %%ecx\n\t"
; 2029 :         "movl\t%%ecx, 4(%3)\n\t"
; 2030 :         "movl\t8(%1), %%ecx\n\t"
; 2031 :         "adcxl\t8(%2), %%ecx\n\t"
; 2032 :         "movl\t%%ecx, 8(%3)\n\t"
; 2033 :         "movl\t12(%1), %%ecx\n\t"
; 2034 :         "adcxl\t12(%2), %%ecx\n\t"
; 2035 :         "movl\t%%ecx, 12(%3)\n\t"
; 2036 :         "setc\t%0"
; 2037 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2038 :         :
; 2039 :         : "cc", "memory", "%ecx"
; 2040 : );
; 2041 : #elif defined(_M_X64)
; 2042 :     __asm__ volatile (
; 2043 :         "addb\t$-1, %0\n\t"
; 2044 :         "movq\t(%1), %%rcx\n\t"
; 2045 :         "adcxq\t(%2), %%rcx\n\t"
; 2046 :         "movq\t%%rcx, (%3)\n\t"
; 2047 :         "movq\t8(%1), %%rcx\n\t"
; 2048 :         "adcxq\t8(%2), %%rcx\n\t"
; 2049 :         "movq\t%%rcx, 8(%3)\n\t"
; 2050 :         "movq\t16(%1), %%rcx\n\t"
; 2051 :         "adcxq\t16(%2), %%rcx\n\t"
; 2052 :         "movq\t%%rcx, 16(%3)\n\t"
; 2053 :         "movq\t24(%1), %%rcx\n\t"
; 2054 :         "adcxq\t24(%2), %%rcx\n\t"
; 2055 :         "movq\t%%rcx, 24(%3)\n\t"
; 2056 :         "setc\t%0"
; 2057 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2058 :         :
; 2059 :         : "cc", "memory", "%rcx"
; 2060 : );
; 2061 : #else
; 2062 : #error unknown platform
; 2063 : #endif
; 2064 : #else
; 2065 : #error unknown compiler
; 2066 : #endif
; 2067 :     return (c);

  000f2	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]

; 2068 : }

  000f5	3b ec		 cmp	 ebp, esp
  000f7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fc	5d		 pop	 ebp
  000fd	c3		 ret	 0
__ADD_4WORDS_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_4WORDS_ADC PROC

; 1957 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __E05E7037_autogenerated_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1958 : #ifdef _MSC_VER
; 1959 :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

  0000d	b8 04 00 00 00	 mov	 eax, 4
  00012	6b c8 00	 imul	 ecx, eax, 0
  00015	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00018	51		 push	 ecx
  00019	ba 04 00 00 00	 mov	 edx, 4
  0001e	6b c2 00	 imul	 eax, edx, 0
  00021	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00024	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00027	52		 push	 edx
  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  00033	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00036	50		 push	 eax
  00037	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 __ADD_UNIT
  00041	83 c4 10	 add	 esp, 16			; 00000010H
  00044	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1960 :     c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);

  00047	ba 04 00 00 00	 mov	 edx, 4
  0004c	c1 e2 00	 shl	 edx, 0
  0004f	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00052	52		 push	 edx
  00053	b8 04 00 00 00	 mov	 eax, 4
  00058	c1 e0 00	 shl	 eax, 0
  0005b	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0005e	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00061	52		 push	 edx
  00062	b8 04 00 00 00	 mov	 eax, 4
  00067	c1 e0 00	 shl	 eax, 0
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  0006d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00070	52		 push	 edx
  00071	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 __ADD_UNIT
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1961 :     c = _ADD_UNIT(c, xp[2], yp[2], &zp[2]);

  00081	b9 04 00 00 00	 mov	 ecx, 4
  00086	d1 e1		 shl	 ecx, 1
  00088	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  0008b	51		 push	 ecx
  0008c	ba 04 00 00 00	 mov	 edx, 4
  00091	d1 e2		 shl	 edx, 1
  00093	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00096	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00099	51		 push	 ecx
  0009a	ba 04 00 00 00	 mov	 edx, 4
  0009f	d1 e2		 shl	 edx, 1
  000a1	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  000a4	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  000a7	51		 push	 ecx
  000a8	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  000ac	52		 push	 edx
  000ad	e8 00 00 00 00	 call	 __ADD_UNIT
  000b2	83 c4 10	 add	 esp, 16			; 00000010H
  000b5	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1962 :     c = _ADD_UNIT(c, xp[3], yp[3], &zp[3]);

  000b8	b8 04 00 00 00	 mov	 eax, 4
  000bd	6b c8 03	 imul	 ecx, eax, 3
  000c0	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  000c3	51		 push	 ecx
  000c4	ba 04 00 00 00	 mov	 edx, 4
  000c9	6b c2 03	 imul	 eax, edx, 3
  000cc	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  000cf	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  000d2	52		 push	 edx
  000d3	b8 04 00 00 00	 mov	 eax, 4
  000d8	6b c8 03	 imul	 ecx, eax, 3
  000db	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  000de	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  000e1	50		 push	 eax
  000e2	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  000e6	51		 push	 ecx
  000e7	e8 00 00 00 00	 call	 __ADD_UNIT
  000ec	83 c4 10	 add	 esp, 16			; 00000010H
  000ef	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1963 : #elif defined(__GNUC__)
; 1964 : #ifdef _M_IX86
; 1965 :     __asm__ volatile (
; 1966 :         "addb\t$-1, %0\n\t"
; 1967 :         "movl\t(%1), %%ecx\n\t"
; 1968 :         "adcl\t(%2), %%ecx\n\t"
; 1969 :         "movl\t%%ecx, (%3)\n\t"
; 1970 :         "movl\t4(%1), %%ecx\n\t"
; 1971 :         "adcl\t4(%2), %%ecx\n\t"
; 1972 :         "movl\t%%ecx, 4(%3)\n\t"
; 1973 :         "movl\t8(%1), %%ecx\n\t"
; 1974 :         "adcl\t8(%2), %%ecx\n\t"
; 1975 :         "movl\t%%ecx, 8(%3)\n\t"
; 1976 :         "movl\t12(%1), %%ecx\n\t"
; 1977 :         "adcl\t12(%2), %%ecx\n\t"
; 1978 :         "movl\t%%ecx, 12(%3)\n\t"
; 1979 :         "setc\t%0"
; 1980 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1981 :         :
; 1982 :         : "cc", "memory", "%ecx"
; 1983 : );
; 1984 : #elif defined(_M_X64)
; 1985 :     __asm__ volatile (
; 1986 :         "addb\t$-1, %0\n\t"
; 1987 :         "movq\t(%1), %%rcx\n\t"
; 1988 :         "adcq\t(%2), %%rcx\n\t"
; 1989 :         "movq\t%%rcx, (%3)\n\t"
; 1990 :         "movq\t8(%1), %%rcx\n\t"
; 1991 :         "adcq\t8(%2), %%rcx\n\t"
; 1992 :         "movq\t%%rcx, 8(%3)\n\t"
; 1993 :         "movq\t16(%1), %%rcx\n\t"
; 1994 :         "adcq\t16(%2), %%rcx\n\t"
; 1995 :         "movq\t%%rcx, 16(%3)\n\t"
; 1996 :         "movq\t24(%1), %%rcx\n\t"
; 1997 :         "adcq\t24(%2), %%rcx\n\t"
; 1998 :         "movq\t%%rcx, 24(%3)\n\t"
; 1999 :         "setc\t%0"
; 2000 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2001 :         :
; 2002 :         : "cc", "memory", "%rcx"
; 2003 : );
; 2004 : #else
; 2005 : #error unknown platform
; 2006 : #endif
; 2007 : #else
; 2008 : #error unknown compiler
; 2009 : #endif
; 2010 :     return (c);

  000f2	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]

; 2011 : }

  000f5	3b ec		 cmp	 ebp, esp
  000f7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fc	5d		 pop	 ebp
  000fd	c3		 ret	 0
__ADD_4WORDS_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_8WORDS_ADCX PROC

; 1702 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __E05E7037_autogenerated_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1703 : #ifdef _MSC_VER
; 1704 :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

  0000d	b8 04 00 00 00	 mov	 eax, 4
  00012	6b c8 00	 imul	 ecx, eax, 0
  00015	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00018	51		 push	 ecx
  00019	ba 04 00 00 00	 mov	 edx, 4
  0001e	6b c2 00	 imul	 eax, edx, 0
  00021	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00024	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00027	52		 push	 edx
  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  00033	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00036	50		 push	 eax
  00037	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 __ADDX_UNIT
  00041	83 c4 10	 add	 esp, 16			; 00000010H
  00044	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1705 :     c = _ADDX_UNIT(c, xp[1], yp[1], &zp[1]);

  00047	ba 04 00 00 00	 mov	 edx, 4
  0004c	c1 e2 00	 shl	 edx, 0
  0004f	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00052	52		 push	 edx
  00053	b8 04 00 00 00	 mov	 eax, 4
  00058	c1 e0 00	 shl	 eax, 0
  0005b	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0005e	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00061	52		 push	 edx
  00062	b8 04 00 00 00	 mov	 eax, 4
  00067	c1 e0 00	 shl	 eax, 0
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  0006d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00070	52		 push	 edx
  00071	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 __ADDX_UNIT
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1706 :     c = _ADDX_UNIT(c, xp[2], yp[2], &zp[2]);

  00081	b9 04 00 00 00	 mov	 ecx, 4
  00086	d1 e1		 shl	 ecx, 1
  00088	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  0008b	51		 push	 ecx
  0008c	ba 04 00 00 00	 mov	 edx, 4
  00091	d1 e2		 shl	 edx, 1
  00093	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00096	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00099	51		 push	 ecx
  0009a	ba 04 00 00 00	 mov	 edx, 4
  0009f	d1 e2		 shl	 edx, 1
  000a1	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  000a4	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  000a7	51		 push	 ecx
  000a8	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  000ac	52		 push	 edx
  000ad	e8 00 00 00 00	 call	 __ADDX_UNIT
  000b2	83 c4 10	 add	 esp, 16			; 00000010H
  000b5	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1707 :     c = _ADDX_UNIT(c, xp[3], yp[3], &zp[3]);

  000b8	b8 04 00 00 00	 mov	 eax, 4
  000bd	6b c8 03	 imul	 ecx, eax, 3
  000c0	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  000c3	51		 push	 ecx
  000c4	ba 04 00 00 00	 mov	 edx, 4
  000c9	6b c2 03	 imul	 eax, edx, 3
  000cc	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  000cf	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  000d2	52		 push	 edx
  000d3	b8 04 00 00 00	 mov	 eax, 4
  000d8	6b c8 03	 imul	 ecx, eax, 3
  000db	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  000de	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  000e1	50		 push	 eax
  000e2	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  000e6	51		 push	 ecx
  000e7	e8 00 00 00 00	 call	 __ADDX_UNIT
  000ec	83 c4 10	 add	 esp, 16			; 00000010H
  000ef	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1708 :     c = _ADDX_UNIT(c, xp[4], yp[4], &zp[4]);

  000f2	ba 04 00 00 00	 mov	 edx, 4
  000f7	c1 e2 02	 shl	 edx, 2
  000fa	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  000fd	52		 push	 edx
  000fe	b8 04 00 00 00	 mov	 eax, 4
  00103	c1 e0 02	 shl	 eax, 2
  00106	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00109	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0010c	52		 push	 edx
  0010d	b8 04 00 00 00	 mov	 eax, 4
  00112	c1 e0 02	 shl	 eax, 2
  00115	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00118	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0011b	52		 push	 edx
  0011c	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00120	50		 push	 eax
  00121	e8 00 00 00 00	 call	 __ADDX_UNIT
  00126	83 c4 10	 add	 esp, 16			; 00000010H
  00129	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1709 :     c = _ADDX_UNIT(c, xp[5], yp[5], &zp[5]);

  0012c	b9 04 00 00 00	 mov	 ecx, 4
  00131	6b d1 05	 imul	 edx, ecx, 5
  00134	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00137	52		 push	 edx
  00138	b8 04 00 00 00	 mov	 eax, 4
  0013d	6b c8 05	 imul	 ecx, eax, 5
  00140	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  00143	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00146	50		 push	 eax
  00147	b9 04 00 00 00	 mov	 ecx, 4
  0014c	6b d1 05	 imul	 edx, ecx, 5
  0014f	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  00152	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00155	51		 push	 ecx
  00156	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  0015a	52		 push	 edx
  0015b	e8 00 00 00 00	 call	 __ADDX_UNIT
  00160	83 c4 10	 add	 esp, 16			; 00000010H
  00163	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1710 :     c = _ADDX_UNIT(c, xp[6], yp[6], &zp[6]);

  00166	b8 04 00 00 00	 mov	 eax, 4
  0016b	6b c8 06	 imul	 ecx, eax, 6
  0016e	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00171	51		 push	 ecx
  00172	ba 04 00 00 00	 mov	 edx, 4
  00177	6b c2 06	 imul	 eax, edx, 6
  0017a	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0017d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00180	52		 push	 edx
  00181	b8 04 00 00 00	 mov	 eax, 4
  00186	6b c8 06	 imul	 ecx, eax, 6
  00189	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  0018c	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0018f	50		 push	 eax
  00190	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  00194	51		 push	 ecx
  00195	e8 00 00 00 00	 call	 __ADDX_UNIT
  0019a	83 c4 10	 add	 esp, 16			; 00000010H
  0019d	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1711 :     c = _ADDX_UNIT(c, xp[7], yp[7], &zp[7]);

  001a0	ba 04 00 00 00	 mov	 edx, 4
  001a5	6b c2 07	 imul	 eax, edx, 7
  001a8	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  001ab	50		 push	 eax
  001ac	b9 04 00 00 00	 mov	 ecx, 4
  001b1	6b d1 07	 imul	 edx, ecx, 7
  001b4	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  001b7	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  001ba	51		 push	 ecx
  001bb	ba 04 00 00 00	 mov	 edx, 4
  001c0	6b c2 07	 imul	 eax, edx, 7
  001c3	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  001c6	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  001c9	52		 push	 edx
  001ca	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  001ce	50		 push	 eax
  001cf	e8 00 00 00 00	 call	 __ADDX_UNIT
  001d4	83 c4 10	 add	 esp, 16			; 00000010H
  001d7	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1712 : #elif defined(__GNUC__)
; 1713 : #ifdef _M_IX86
; 1714 :     __asm__ volatile (
; 1715 :         "addb\t$-1, %0\n\t"
; 1716 :         "movl\t(%1), %%ecx\n\t"
; 1717 :         "adcxl\t(%2), %%ecx\n\t"
; 1718 :         "movl\t%%ecx, (%3)\n\t"
; 1719 :         "movl\t4(%1), %%ecx\n\t"
; 1720 :         "adcxl\t4(%2), %%ecx\n\t"
; 1721 :         "movl\t%%ecx, 4(%3)\n\t"
; 1722 :         "movl\t8(%1), %%ecx\n\t"
; 1723 :         "adcxl\t8(%2), %%ecx\n\t"
; 1724 :         "movl\t%%ecx, 8(%3)\n\t"
; 1725 :         "movl\t12(%1), %%ecx\n\t"
; 1726 :         "adcxl\t12(%2), %%ecx\n\t"
; 1727 :         "movl\t%%ecx, 12(%3)\n\t"
; 1728 :         "movl\t16(%1), %%ecx\n\t"
; 1729 :         "adcxl\t16(%2), %%ecx\n\t"
; 1730 :         "movl\t%%ecx, 16(%3)\n\t"
; 1731 :         "movl\t20(%1), %%ecx\n\t"
; 1732 :         "adcxl\t20(%2), %%ecx\n\t"
; 1733 :         "movl\t%%ecx, 20(%3)\n\t"
; 1734 :         "movl\t24(%1), %%ecx\n\t"
; 1735 :         "adcxl\t24(%2), %%ecx\n\t"
; 1736 :         "movl\t%%ecx, 24(%3)\n\t"
; 1737 :         "movl\t28(%1), %%ecx\n\t"
; 1738 :         "adcxl\t28(%2), %%ecx\n\t"
; 1739 :         "movl\t%%ecx, 28(%3)\n\t"
; 1740 :         "setc\t%0"
; 1741 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1742 :         :
; 1743 :         : "cc", "memory", "%ecx"
; 1744 : );
; 1745 : #elif defined(_M_X64)
; 1746 :     __asm__ volatile (
; 1747 :         "addb\t$-1, %0\n\t"
; 1748 :         "movq\t(%1), %%rcx\n\t"
; 1749 :         "adcxq\t(%2), %%rcx\n\t"
; 1750 :         "movq\t%%rcx, (%3)\n\t"
; 1751 :         "movq\t8(%1), %%rcx\n\t"
; 1752 :         "adcxq\t8(%2), %%rcx\n\t"
; 1753 :         "movq\t%%rcx, 8(%3)\n\t"
; 1754 :         "movq\t16(%1), %%rcx\n\t"
; 1755 :         "adcxq\t16(%2), %%rcx\n\t"
; 1756 :         "movq\t%%rcx, 16(%3)\n\t"
; 1757 :         "movq\t24(%1), %%rcx\n\t"
; 1758 :         "adcxq\t24(%2), %%rcx\n\t"
; 1759 :         "movq\t%%rcx, 24(%3)\n\t"
; 1760 :         "movq\t32(%1), %%rcx\n\t"
; 1761 :         "adcxq\t32(%2), %%rcx\n\t"
; 1762 :         "movq\t%%rcx, 32(%3)\n\t"
; 1763 :         "movq\t40(%1), %%rcx\n\t"
; 1764 :         "adcxq\t40(%2), %%rcx\n\t"
; 1765 :         "movq\t%%rcx, 40(%3)\n\t"
; 1766 :         "movq\t48(%1), %%rcx\n\t"
; 1767 :         "adcxq\t48(%2), %%rcx\n\t"
; 1768 :         "movq\t%%rcx, 48(%3)\n\t"
; 1769 :         "movq\t56(%1), %%rcx\n\t"
; 1770 :         "adcxq\t56(%2), %%rcx\n\t"
; 1771 :         "movq\t%%rcx, 56(%3)\n\t"
; 1772 :         "setc\t%0"
; 1773 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1774 :         :
; 1775 :         : "cc", "memory", "%rcx"
; 1776 : );
; 1777 : #else
; 1778 : #error unknown platform
; 1779 : #endif
; 1780 : #else
; 1781 : #error unknown compiler
; 1782 : #endif
; 1783 :     return (c);

  001da	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]

; 1784 : }

  001dd	3b ec		 cmp	 ebp, esp
  001df	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001e4	5d		 pop	 ebp
  001e5	c3		 ret	 0
__ADD_8WORDS_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_8WORDS_ADC PROC

; 1617 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __E05E7037_autogenerated_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1618 : #ifdef _MSC_VER
; 1619 :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

  0000d	b8 04 00 00 00	 mov	 eax, 4
  00012	6b c8 00	 imul	 ecx, eax, 0
  00015	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00018	51		 push	 ecx
  00019	ba 04 00 00 00	 mov	 edx, 4
  0001e	6b c2 00	 imul	 eax, edx, 0
  00021	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00024	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00027	52		 push	 edx
  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  00033	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00036	50		 push	 eax
  00037	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 __ADD_UNIT
  00041	83 c4 10	 add	 esp, 16			; 00000010H
  00044	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1620 :     c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);

  00047	ba 04 00 00 00	 mov	 edx, 4
  0004c	c1 e2 00	 shl	 edx, 0
  0004f	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00052	52		 push	 edx
  00053	b8 04 00 00 00	 mov	 eax, 4
  00058	c1 e0 00	 shl	 eax, 0
  0005b	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0005e	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00061	52		 push	 edx
  00062	b8 04 00 00 00	 mov	 eax, 4
  00067	c1 e0 00	 shl	 eax, 0
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  0006d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00070	52		 push	 edx
  00071	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 __ADD_UNIT
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1621 :     c = _ADD_UNIT(c, xp[2], yp[2], &zp[2]);

  00081	b9 04 00 00 00	 mov	 ecx, 4
  00086	d1 e1		 shl	 ecx, 1
  00088	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  0008b	51		 push	 ecx
  0008c	ba 04 00 00 00	 mov	 edx, 4
  00091	d1 e2		 shl	 edx, 1
  00093	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00096	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00099	51		 push	 ecx
  0009a	ba 04 00 00 00	 mov	 edx, 4
  0009f	d1 e2		 shl	 edx, 1
  000a1	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  000a4	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  000a7	51		 push	 ecx
  000a8	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  000ac	52		 push	 edx
  000ad	e8 00 00 00 00	 call	 __ADD_UNIT
  000b2	83 c4 10	 add	 esp, 16			; 00000010H
  000b5	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1622 :     c = _ADD_UNIT(c, xp[3], yp[3], &zp[3]);

  000b8	b8 04 00 00 00	 mov	 eax, 4
  000bd	6b c8 03	 imul	 ecx, eax, 3
  000c0	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  000c3	51		 push	 ecx
  000c4	ba 04 00 00 00	 mov	 edx, 4
  000c9	6b c2 03	 imul	 eax, edx, 3
  000cc	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  000cf	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  000d2	52		 push	 edx
  000d3	b8 04 00 00 00	 mov	 eax, 4
  000d8	6b c8 03	 imul	 ecx, eax, 3
  000db	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  000de	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  000e1	50		 push	 eax
  000e2	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  000e6	51		 push	 ecx
  000e7	e8 00 00 00 00	 call	 __ADD_UNIT
  000ec	83 c4 10	 add	 esp, 16			; 00000010H
  000ef	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1623 :     c = _ADD_UNIT(c, xp[4], yp[4], &zp[4]);

  000f2	ba 04 00 00 00	 mov	 edx, 4
  000f7	c1 e2 02	 shl	 edx, 2
  000fa	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  000fd	52		 push	 edx
  000fe	b8 04 00 00 00	 mov	 eax, 4
  00103	c1 e0 02	 shl	 eax, 2
  00106	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00109	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0010c	52		 push	 edx
  0010d	b8 04 00 00 00	 mov	 eax, 4
  00112	c1 e0 02	 shl	 eax, 2
  00115	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00118	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0011b	52		 push	 edx
  0011c	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00120	50		 push	 eax
  00121	e8 00 00 00 00	 call	 __ADD_UNIT
  00126	83 c4 10	 add	 esp, 16			; 00000010H
  00129	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1624 :     c = _ADD_UNIT(c, xp[5], yp[5], &zp[5]);

  0012c	b9 04 00 00 00	 mov	 ecx, 4
  00131	6b d1 05	 imul	 edx, ecx, 5
  00134	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00137	52		 push	 edx
  00138	b8 04 00 00 00	 mov	 eax, 4
  0013d	6b c8 05	 imul	 ecx, eax, 5
  00140	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  00143	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00146	50		 push	 eax
  00147	b9 04 00 00 00	 mov	 ecx, 4
  0014c	6b d1 05	 imul	 edx, ecx, 5
  0014f	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  00152	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00155	51		 push	 ecx
  00156	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  0015a	52		 push	 edx
  0015b	e8 00 00 00 00	 call	 __ADD_UNIT
  00160	83 c4 10	 add	 esp, 16			; 00000010H
  00163	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1625 :     c = _ADD_UNIT(c, xp[6], yp[6], &zp[6]);

  00166	b8 04 00 00 00	 mov	 eax, 4
  0016b	6b c8 06	 imul	 ecx, eax, 6
  0016e	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00171	51		 push	 ecx
  00172	ba 04 00 00 00	 mov	 edx, 4
  00177	6b c2 06	 imul	 eax, edx, 6
  0017a	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0017d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00180	52		 push	 edx
  00181	b8 04 00 00 00	 mov	 eax, 4
  00186	6b c8 06	 imul	 ecx, eax, 6
  00189	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  0018c	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0018f	50		 push	 eax
  00190	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  00194	51		 push	 ecx
  00195	e8 00 00 00 00	 call	 __ADD_UNIT
  0019a	83 c4 10	 add	 esp, 16			; 00000010H
  0019d	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1626 :     c = _ADD_UNIT(c, xp[7], yp[7], &zp[7]);

  001a0	ba 04 00 00 00	 mov	 edx, 4
  001a5	6b c2 07	 imul	 eax, edx, 7
  001a8	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  001ab	50		 push	 eax
  001ac	b9 04 00 00 00	 mov	 ecx, 4
  001b1	6b d1 07	 imul	 edx, ecx, 7
  001b4	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  001b7	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  001ba	51		 push	 ecx
  001bb	ba 04 00 00 00	 mov	 edx, 4
  001c0	6b c2 07	 imul	 eax, edx, 7
  001c3	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  001c6	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  001c9	52		 push	 edx
  001ca	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  001ce	50		 push	 eax
  001cf	e8 00 00 00 00	 call	 __ADD_UNIT
  001d4	83 c4 10	 add	 esp, 16			; 00000010H
  001d7	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1627 : #elif defined(__GNUC__)
; 1628 : #ifdef _M_IX86
; 1629 :     __asm__ volatile (
; 1630 :         "addb\t$-1, %0\n\t"
; 1631 :         "movl\t(%1), %%ecx\n\t"
; 1632 :         "adcl\t(%2), %%ecx\n\t"
; 1633 :         "movl\t%%ecx, (%3)\n\t"
; 1634 :         "movl\t4(%1), %%ecx\n\t"
; 1635 :         "adcl\t4(%2), %%ecx\n\t"
; 1636 :         "movl\t%%ecx, 4(%3)\n\t"
; 1637 :         "movl\t8(%1), %%ecx\n\t"
; 1638 :         "adcl\t8(%2), %%ecx\n\t"
; 1639 :         "movl\t%%ecx, 8(%3)\n\t"
; 1640 :         "movl\t12(%1), %%ecx\n\t"
; 1641 :         "adcl\t12(%2), %%ecx\n\t"
; 1642 :         "movl\t%%ecx, 12(%3)\n\t"
; 1643 :         "movl\t16(%1), %%ecx\n\t"
; 1644 :         "adcl\t16(%2), %%ecx\n\t"
; 1645 :         "movl\t%%ecx, 16(%3)\n\t"
; 1646 :         "movl\t20(%1), %%ecx\n\t"
; 1647 :         "adcl\t20(%2), %%ecx\n\t"
; 1648 :         "movl\t%%ecx, 20(%3)\n\t"
; 1649 :         "movl\t24(%1), %%ecx\n\t"
; 1650 :         "adcl\t24(%2), %%ecx\n\t"
; 1651 :         "movl\t%%ecx, 24(%3)\n\t"
; 1652 :         "movl\t28(%1), %%ecx\n\t"
; 1653 :         "adcl\t28(%2), %%ecx\n\t"
; 1654 :         "movl\t%%ecx, 28(%3)\n\t"
; 1655 :         "setc\t%0"
; 1656 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1657 :         :
; 1658 :         : "cc", "memory", "%ecx"
; 1659 : );
; 1660 : #elif defined(_M_X64)
; 1661 :     __asm__ volatile (
; 1662 :         "addb\t$-1, %0\n\t"
; 1663 :         "movq\t(%1), %%rcx\n\t"
; 1664 :         "adcq\t(%2), %%rcx\n\t"
; 1665 :         "movq\t%%rcx, (%3)\n\t"
; 1666 :         "movq\t8(%1), %%rcx\n\t"
; 1667 :         "adcq\t8(%2), %%rcx\n\t"
; 1668 :         "movq\t%%rcx, 8(%3)\n\t"
; 1669 :         "movq\t16(%1), %%rcx\n\t"
; 1670 :         "adcq\t16(%2), %%rcx\n\t"
; 1671 :         "movq\t%%rcx, 16(%3)\n\t"
; 1672 :         "movq\t24(%1), %%rcx\n\t"
; 1673 :         "adcq\t24(%2), %%rcx\n\t"
; 1674 :         "movq\t%%rcx, 24(%3)\n\t"
; 1675 :         "movq\t32(%1), %%rcx\n\t"
; 1676 :         "adcq\t32(%2), %%rcx\n\t"
; 1677 :         "movq\t%%rcx, 32(%3)\n\t"
; 1678 :         "movq\t40(%1), %%rcx\n\t"
; 1679 :         "adcq\t40(%2), %%rcx\n\t"
; 1680 :         "movq\t%%rcx, 40(%3)\n\t"
; 1681 :         "movq\t48(%1), %%rcx\n\t"
; 1682 :         "adcq\t48(%2), %%rcx\n\t"
; 1683 :         "movq\t%%rcx, 48(%3)\n\t"
; 1684 :         "movq\t56(%1), %%rcx\n\t"
; 1685 :         "adcq\t56(%2), %%rcx\n\t"
; 1686 :         "movq\t%%rcx, 56(%3)\n\t"
; 1687 :         "setc\t%0"
; 1688 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1689 :         :
; 1690 :         : "cc", "memory", "%rcx"
; 1691 : );
; 1692 : #else
; 1693 : #error unknown platform
; 1694 : #endif
; 1695 : #else
; 1696 : #error unknown compiler
; 1697 : #endif
; 1698 :     return (c);

  001da	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]

; 1699 : }

  001dd	3b ec		 cmp	 ebp, esp
  001df	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001e4	5d		 pop	 ebp
  001e5	c3		 ret	 0
__ADD_8WORDS_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_16WORDS_ADCX PROC

; 1194 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __E05E7037_autogenerated_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1195 : #ifdef _MSC_VER
; 1196 :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

  0000d	b8 04 00 00 00	 mov	 eax, 4
  00012	6b c8 00	 imul	 ecx, eax, 0
  00015	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00018	51		 push	 ecx
  00019	ba 04 00 00 00	 mov	 edx, 4
  0001e	6b c2 00	 imul	 eax, edx, 0
  00021	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00024	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00027	52		 push	 edx
  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  00033	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00036	50		 push	 eax
  00037	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 __ADDX_UNIT
  00041	83 c4 10	 add	 esp, 16			; 00000010H
  00044	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1197 :     c = _ADDX_UNIT(c, xp[1], yp[1], &zp[1]);

  00047	ba 04 00 00 00	 mov	 edx, 4
  0004c	c1 e2 00	 shl	 edx, 0
  0004f	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00052	52		 push	 edx
  00053	b8 04 00 00 00	 mov	 eax, 4
  00058	c1 e0 00	 shl	 eax, 0
  0005b	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0005e	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00061	52		 push	 edx
  00062	b8 04 00 00 00	 mov	 eax, 4
  00067	c1 e0 00	 shl	 eax, 0
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  0006d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00070	52		 push	 edx
  00071	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 __ADDX_UNIT
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1198 :     c = _ADDX_UNIT(c, xp[2], yp[2], &zp[2]);

  00081	b9 04 00 00 00	 mov	 ecx, 4
  00086	d1 e1		 shl	 ecx, 1
  00088	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  0008b	51		 push	 ecx
  0008c	ba 04 00 00 00	 mov	 edx, 4
  00091	d1 e2		 shl	 edx, 1
  00093	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00096	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00099	51		 push	 ecx
  0009a	ba 04 00 00 00	 mov	 edx, 4
  0009f	d1 e2		 shl	 edx, 1
  000a1	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  000a4	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  000a7	51		 push	 ecx
  000a8	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  000ac	52		 push	 edx
  000ad	e8 00 00 00 00	 call	 __ADDX_UNIT
  000b2	83 c4 10	 add	 esp, 16			; 00000010H
  000b5	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1199 :     c = _ADDX_UNIT(c, xp[3], yp[3], &zp[3]);

  000b8	b8 04 00 00 00	 mov	 eax, 4
  000bd	6b c8 03	 imul	 ecx, eax, 3
  000c0	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  000c3	51		 push	 ecx
  000c4	ba 04 00 00 00	 mov	 edx, 4
  000c9	6b c2 03	 imul	 eax, edx, 3
  000cc	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  000cf	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  000d2	52		 push	 edx
  000d3	b8 04 00 00 00	 mov	 eax, 4
  000d8	6b c8 03	 imul	 ecx, eax, 3
  000db	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  000de	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  000e1	50		 push	 eax
  000e2	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  000e6	51		 push	 ecx
  000e7	e8 00 00 00 00	 call	 __ADDX_UNIT
  000ec	83 c4 10	 add	 esp, 16			; 00000010H
  000ef	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1200 :     c = _ADDX_UNIT(c, xp[4], yp[4], &zp[4]);

  000f2	ba 04 00 00 00	 mov	 edx, 4
  000f7	c1 e2 02	 shl	 edx, 2
  000fa	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  000fd	52		 push	 edx
  000fe	b8 04 00 00 00	 mov	 eax, 4
  00103	c1 e0 02	 shl	 eax, 2
  00106	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00109	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0010c	52		 push	 edx
  0010d	b8 04 00 00 00	 mov	 eax, 4
  00112	c1 e0 02	 shl	 eax, 2
  00115	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00118	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0011b	52		 push	 edx
  0011c	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00120	50		 push	 eax
  00121	e8 00 00 00 00	 call	 __ADDX_UNIT
  00126	83 c4 10	 add	 esp, 16			; 00000010H
  00129	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1201 :     c = _ADDX_UNIT(c, xp[5], yp[5], &zp[5]);

  0012c	b9 04 00 00 00	 mov	 ecx, 4
  00131	6b d1 05	 imul	 edx, ecx, 5
  00134	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00137	52		 push	 edx
  00138	b8 04 00 00 00	 mov	 eax, 4
  0013d	6b c8 05	 imul	 ecx, eax, 5
  00140	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  00143	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00146	50		 push	 eax
  00147	b9 04 00 00 00	 mov	 ecx, 4
  0014c	6b d1 05	 imul	 edx, ecx, 5
  0014f	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  00152	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00155	51		 push	 ecx
  00156	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  0015a	52		 push	 edx
  0015b	e8 00 00 00 00	 call	 __ADDX_UNIT
  00160	83 c4 10	 add	 esp, 16			; 00000010H
  00163	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1202 :     c = _ADDX_UNIT(c, xp[6], yp[6], &zp[6]);

  00166	b8 04 00 00 00	 mov	 eax, 4
  0016b	6b c8 06	 imul	 ecx, eax, 6
  0016e	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00171	51		 push	 ecx
  00172	ba 04 00 00 00	 mov	 edx, 4
  00177	6b c2 06	 imul	 eax, edx, 6
  0017a	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0017d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00180	52		 push	 edx
  00181	b8 04 00 00 00	 mov	 eax, 4
  00186	6b c8 06	 imul	 ecx, eax, 6
  00189	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  0018c	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0018f	50		 push	 eax
  00190	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  00194	51		 push	 ecx
  00195	e8 00 00 00 00	 call	 __ADDX_UNIT
  0019a	83 c4 10	 add	 esp, 16			; 00000010H
  0019d	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1203 :     c = _ADDX_UNIT(c, xp[7], yp[7], &zp[7]);

  001a0	ba 04 00 00 00	 mov	 edx, 4
  001a5	6b c2 07	 imul	 eax, edx, 7
  001a8	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  001ab	50		 push	 eax
  001ac	b9 04 00 00 00	 mov	 ecx, 4
  001b1	6b d1 07	 imul	 edx, ecx, 7
  001b4	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  001b7	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  001ba	51		 push	 ecx
  001bb	ba 04 00 00 00	 mov	 edx, 4
  001c0	6b c2 07	 imul	 eax, edx, 7
  001c3	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  001c6	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  001c9	52		 push	 edx
  001ca	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  001ce	50		 push	 eax
  001cf	e8 00 00 00 00	 call	 __ADDX_UNIT
  001d4	83 c4 10	 add	 esp, 16			; 00000010H
  001d7	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1204 :     c = _ADDX_UNIT(c, xp[8], yp[8], &zp[8]);

  001da	b9 04 00 00 00	 mov	 ecx, 4
  001df	c1 e1 03	 shl	 ecx, 3
  001e2	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  001e5	51		 push	 ecx
  001e6	ba 04 00 00 00	 mov	 edx, 4
  001eb	c1 e2 03	 shl	 edx, 3
  001ee	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  001f1	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  001f4	51		 push	 ecx
  001f5	ba 04 00 00 00	 mov	 edx, 4
  001fa	c1 e2 03	 shl	 edx, 3
  001fd	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  00200	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00203	51		 push	 ecx
  00204	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  00208	52		 push	 edx
  00209	e8 00 00 00 00	 call	 __ADDX_UNIT
  0020e	83 c4 10	 add	 esp, 16			; 00000010H
  00211	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1205 :     c = _ADDX_UNIT(c, xp[9], yp[9], &zp[9]);

  00214	b8 04 00 00 00	 mov	 eax, 4
  00219	6b c8 09	 imul	 ecx, eax, 9
  0021c	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  0021f	51		 push	 ecx
  00220	ba 04 00 00 00	 mov	 edx, 4
  00225	6b c2 09	 imul	 eax, edx, 9
  00228	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0022b	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0022e	52		 push	 edx
  0022f	b8 04 00 00 00	 mov	 eax, 4
  00234	6b c8 09	 imul	 ecx, eax, 9
  00237	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  0023a	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0023d	50		 push	 eax
  0023e	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  00242	51		 push	 ecx
  00243	e8 00 00 00 00	 call	 __ADDX_UNIT
  00248	83 c4 10	 add	 esp, 16			; 00000010H
  0024b	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1206 :     c = _ADDX_UNIT(c, xp[10], yp[10], &zp[10]);

  0024e	ba 04 00 00 00	 mov	 edx, 4
  00253	6b c2 0a	 imul	 eax, edx, 10
  00256	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  00259	50		 push	 eax
  0025a	b9 04 00 00 00	 mov	 ecx, 4
  0025f	6b d1 0a	 imul	 edx, ecx, 10
  00262	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00265	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00268	51		 push	 ecx
  00269	ba 04 00 00 00	 mov	 edx, 4
  0026e	6b c2 0a	 imul	 eax, edx, 10
  00271	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00274	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00277	52		 push	 edx
  00278	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  0027c	50		 push	 eax
  0027d	e8 00 00 00 00	 call	 __ADDX_UNIT
  00282	83 c4 10	 add	 esp, 16			; 00000010H
  00285	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1207 :     c = _ADDX_UNIT(c, xp[11], yp[11], &zp[11]);

  00288	b9 04 00 00 00	 mov	 ecx, 4
  0028d	6b d1 0b	 imul	 edx, ecx, 11
  00290	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00293	52		 push	 edx
  00294	b8 04 00 00 00	 mov	 eax, 4
  00299	6b c8 0b	 imul	 ecx, eax, 11
  0029c	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  0029f	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  002a2	50		 push	 eax
  002a3	b9 04 00 00 00	 mov	 ecx, 4
  002a8	6b d1 0b	 imul	 edx, ecx, 11
  002ab	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  002ae	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  002b1	51		 push	 ecx
  002b2	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  002b6	52		 push	 edx
  002b7	e8 00 00 00 00	 call	 __ADDX_UNIT
  002bc	83 c4 10	 add	 esp, 16			; 00000010H
  002bf	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1208 :     c = _ADDX_UNIT(c, xp[12], yp[12], &zp[12]);

  002c2	b8 04 00 00 00	 mov	 eax, 4
  002c7	6b c8 0c	 imul	 ecx, eax, 12
  002ca	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  002cd	51		 push	 ecx
  002ce	ba 04 00 00 00	 mov	 edx, 4
  002d3	6b c2 0c	 imul	 eax, edx, 12
  002d6	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  002d9	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  002dc	52		 push	 edx
  002dd	b8 04 00 00 00	 mov	 eax, 4
  002e2	6b c8 0c	 imul	 ecx, eax, 12
  002e5	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  002e8	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  002eb	50		 push	 eax
  002ec	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  002f0	51		 push	 ecx
  002f1	e8 00 00 00 00	 call	 __ADDX_UNIT
  002f6	83 c4 10	 add	 esp, 16			; 00000010H
  002f9	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1209 :     c = _ADDX_UNIT(c, xp[13], yp[13], &zp[13]);

  002fc	ba 04 00 00 00	 mov	 edx, 4
  00301	6b c2 0d	 imul	 eax, edx, 13
  00304	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  00307	50		 push	 eax
  00308	b9 04 00 00 00	 mov	 ecx, 4
  0030d	6b d1 0d	 imul	 edx, ecx, 13
  00310	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00313	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00316	51		 push	 ecx
  00317	ba 04 00 00 00	 mov	 edx, 4
  0031c	6b c2 0d	 imul	 eax, edx, 13
  0031f	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00322	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00325	52		 push	 edx
  00326	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  0032a	50		 push	 eax
  0032b	e8 00 00 00 00	 call	 __ADDX_UNIT
  00330	83 c4 10	 add	 esp, 16			; 00000010H
  00333	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1210 :     c = _ADDX_UNIT(c, xp[14], yp[14], &zp[14]);

  00336	b9 04 00 00 00	 mov	 ecx, 4
  0033b	6b d1 0e	 imul	 edx, ecx, 14
  0033e	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00341	52		 push	 edx
  00342	b8 04 00 00 00	 mov	 eax, 4
  00347	6b c8 0e	 imul	 ecx, eax, 14
  0034a	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  0034d	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00350	50		 push	 eax
  00351	b9 04 00 00 00	 mov	 ecx, 4
  00356	6b d1 0e	 imul	 edx, ecx, 14
  00359	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  0035c	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0035f	51		 push	 ecx
  00360	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  00364	52		 push	 edx
  00365	e8 00 00 00 00	 call	 __ADDX_UNIT
  0036a	83 c4 10	 add	 esp, 16			; 00000010H
  0036d	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1211 :     c = _ADDX_UNIT(c, xp[15], yp[15], &zp[15]);

  00370	b8 04 00 00 00	 mov	 eax, 4
  00375	6b c8 0f	 imul	 ecx, eax, 15
  00378	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  0037b	51		 push	 ecx
  0037c	ba 04 00 00 00	 mov	 edx, 4
  00381	6b c2 0f	 imul	 eax, edx, 15
  00384	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00387	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0038a	52		 push	 edx
  0038b	b8 04 00 00 00	 mov	 eax, 4
  00390	6b c8 0f	 imul	 ecx, eax, 15
  00393	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  00396	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00399	50		 push	 eax
  0039a	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  0039e	51		 push	 ecx
  0039f	e8 00 00 00 00	 call	 __ADDX_UNIT
  003a4	83 c4 10	 add	 esp, 16			; 00000010H
  003a7	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1212 : #elif defined(__GNUC__)
; 1213 : #ifdef _M_IX86
; 1214 :     __asm__ volatile (
; 1215 :         "addb\t$-1, %0\n\t"
; 1216 :         "movl\t(%1), %%ecx\n\t"
; 1217 :         "adcxl\t(%2), %%ecx\n\t"
; 1218 :         "movl\t%%ecx, (%3)\n\t"
; 1219 :         "movl\t4(%1), %%ecx\n\t"
; 1220 :         "adcxl\t4(%2), %%ecx\n\t"
; 1221 :         "movl\t%%ecx, 4(%3)\n\t"
; 1222 :         "movl\t8(%1), %%ecx\n\t"
; 1223 :         "adcxl\t8(%2), %%ecx\n\t"
; 1224 :         "movl\t%%ecx, 8(%3)\n\t"
; 1225 :         "movl\t12(%1), %%ecx\n\t"
; 1226 :         "adcxl\t12(%2), %%ecx\n\t"
; 1227 :         "movl\t%%ecx, 12(%3)\n\t"
; 1228 :         "movl\t16(%1), %%ecx\n\t"
; 1229 :         "adcxl\t16(%2), %%ecx\n\t"
; 1230 :         "movl\t%%ecx, 16(%3)\n\t"
; 1231 :         "movl\t20(%1), %%ecx\n\t"
; 1232 :         "adcxl\t20(%2), %%ecx\n\t"
; 1233 :         "movl\t%%ecx, 20(%3)\n\t"
; 1234 :         "movl\t24(%1), %%ecx\n\t"
; 1235 :         "adcxl\t24(%2), %%ecx\n\t"
; 1236 :         "movl\t%%ecx, 24(%3)\n\t"
; 1237 :         "movl\t28(%1), %%ecx\n\t"
; 1238 :         "adcxl\t28(%2), %%ecx\n\t"
; 1239 :         "movl\t%%ecx, 28(%3)\n\t"
; 1240 :         "movl\t32(%1), %%ecx\n\t"
; 1241 :         "adcxl\t32(%2), %%ecx\n\t"
; 1242 :         "movl\t%%ecx, 32(%3)\n\t"
; 1243 :         "movl\t36(%1), %%ecx\n\t"
; 1244 :         "adcxl\t36(%2), %%ecx\n\t"
; 1245 :         "movl\t%%ecx, 36(%3)\n\t"
; 1246 :         "movl\t40(%1), %%ecx\n\t"
; 1247 :         "adcxl\t40(%2), %%ecx\n\t"
; 1248 :         "movl\t%%ecx, 40(%3)\n\t"
; 1249 :         "movl\t44(%1), %%ecx\n\t"
; 1250 :         "adcxl\t44(%2), %%ecx\n\t"
; 1251 :         "movl\t%%ecx, 44(%3)\n\t"
; 1252 :         "movl\t48(%1), %%ecx\n\t"
; 1253 :         "adcxl\t48(%2), %%ecx\n\t"
; 1254 :         "movl\t%%ecx, 48(%3)\n\t"
; 1255 :         "movl\t52(%1), %%ecx\n\t"
; 1256 :         "adcxl\t52(%2), %%ecx\n\t"
; 1257 :         "movl\t%%ecx, 52(%3)\n\t"
; 1258 :         "movl\t56(%1), %%ecx\n\t"
; 1259 :         "adcxl\t56(%2), %%ecx\n\t"
; 1260 :         "movl\t%%ecx, 56(%3)\n\t"
; 1261 :         "movl\t60(%1), %%ecx\n\t"
; 1262 :         "adcxl\t60(%2), %%ecx\n\t"
; 1263 :         "movl\t%%ecx, 60(%3)\n\t"
; 1264 :         "setc\t%0"
; 1265 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1266 :         :
; 1267 :         : "cc", "memory", "%ecx"
; 1268 : );
; 1269 : #elif defined(_M_X64)
; 1270 :     __asm__ volatile (
; 1271 :         "addb\t$-1, %0\n\t"
; 1272 :         "movq\t(%1), %%rcx\n\t"
; 1273 :         "adcxq\t(%2), %%rcx\n\t"
; 1274 :         "movq\t%%rcx, (%3)\n\t"
; 1275 :         "movq\t8(%1), %%rcx\n\t"
; 1276 :         "adcxq\t8(%2), %%rcx\n\t"
; 1277 :         "movq\t%%rcx, 8(%3)\n\t"
; 1278 :         "movq\t16(%1), %%rcx\n\t"
; 1279 :         "adcxq\t16(%2), %%rcx\n\t"
; 1280 :         "movq\t%%rcx, 16(%3)\n\t"
; 1281 :         "movq\t24(%1), %%rcx\n\t"
; 1282 :         "adcxq\t24(%2), %%rcx\n\t"
; 1283 :         "movq\t%%rcx, 24(%3)\n\t"
; 1284 :         "movq\t32(%1), %%rcx\n\t"
; 1285 :         "adcxq\t32(%2), %%rcx\n\t"
; 1286 :         "movq\t%%rcx, 32(%3)\n\t"
; 1287 :         "movq\t40(%1), %%rcx\n\t"
; 1288 :         "adcxq\t40(%2), %%rcx\n\t"
; 1289 :         "movq\t%%rcx, 40(%3)\n\t"
; 1290 :         "movq\t48(%1), %%rcx\n\t"
; 1291 :         "adcxq\t48(%2), %%rcx\n\t"
; 1292 :         "movq\t%%rcx, 48(%3)\n\t"
; 1293 :         "movq\t56(%1), %%rcx\n\t"
; 1294 :         "adcxq\t56(%2), %%rcx\n\t"
; 1295 :         "movq\t%%rcx, 56(%3)\n\t"
; 1296 :         "movq\t64(%1), %%rcx\n\t"
; 1297 :         "adcxq\t64(%2), %%rcx\n\t"
; 1298 :         "movq\t%%rcx, 64(%3)\n\t"
; 1299 :         "movq\t72(%1), %%rcx\n\t"
; 1300 :         "adcxq\t72(%2), %%rcx\n\t"
; 1301 :         "movq\t%%rcx, 72(%3)\n\t"
; 1302 :         "movq\t80(%1), %%rcx\n\t"
; 1303 :         "adcxq\t80(%2), %%rcx\n\t"
; 1304 :         "movq\t%%rcx, 80(%3)\n\t"
; 1305 :         "movq\t88(%1), %%rcx\n\t"
; 1306 :         "adcxq\t88(%2), %%rcx\n\t"
; 1307 :         "movq\t%%rcx, 88(%3)\n\t"
; 1308 :         "movq\t96(%1), %%rcx\n\t"
; 1309 :         "adcxq\t96(%2), %%rcx\n\t"
; 1310 :         "movq\t%%rcx, 96(%3)\n\t"
; 1311 :         "movq\t104(%1), %%rcx\n\t"
; 1312 :         "adcxq\t104(%2), %%rcx\n\t"
; 1313 :         "movq\t%%rcx, 104(%3)\n\t"
; 1314 :         "movq\t112(%1), %%rcx\n\t"
; 1315 :         "adcxq\t112(%2), %%rcx\n\t"
; 1316 :         "movq\t%%rcx, 112(%3)\n\t"
; 1317 :         "movq\t120(%1), %%rcx\n\t"
; 1318 :         "adcxq\t120(%2), %%rcx\n\t"
; 1319 :         "movq\t%%rcx, 120(%3)\n\t"
; 1320 :         "setc\t%0"
; 1321 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1322 :         :
; 1323 :         : "cc", "memory", "%rcx"
; 1324 : );
; 1325 : #else
; 1326 : #error unknown platform
; 1327 : #endif
; 1328 : #else
; 1329 : #error unknown compiler
; 1330 : #endif
; 1331 :     return (c);

  003aa	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]

; 1332 : }

  003ad	3b ec		 cmp	 ebp, esp
  003af	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003b4	5d		 pop	 ebp
  003b5	c3		 ret	 0
__ADD_16WORDS_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_16WORDS_ADC PROC

; 1053 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __E05E7037_autogenerated_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1054 : #ifdef _MSC_VER
; 1055 :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

  0000d	b8 04 00 00 00	 mov	 eax, 4
  00012	6b c8 00	 imul	 ecx, eax, 0
  00015	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00018	51		 push	 ecx
  00019	ba 04 00 00 00	 mov	 edx, 4
  0001e	6b c2 00	 imul	 eax, edx, 0
  00021	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00024	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00027	52		 push	 edx
  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  00033	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00036	50		 push	 eax
  00037	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 __ADD_UNIT
  00041	83 c4 10	 add	 esp, 16			; 00000010H
  00044	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1056 :     c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);

  00047	ba 04 00 00 00	 mov	 edx, 4
  0004c	c1 e2 00	 shl	 edx, 0
  0004f	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00052	52		 push	 edx
  00053	b8 04 00 00 00	 mov	 eax, 4
  00058	c1 e0 00	 shl	 eax, 0
  0005b	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0005e	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00061	52		 push	 edx
  00062	b8 04 00 00 00	 mov	 eax, 4
  00067	c1 e0 00	 shl	 eax, 0
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  0006d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00070	52		 push	 edx
  00071	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 __ADD_UNIT
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1057 :     c = _ADD_UNIT(c, xp[2], yp[2], &zp[2]);

  00081	b9 04 00 00 00	 mov	 ecx, 4
  00086	d1 e1		 shl	 ecx, 1
  00088	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  0008b	51		 push	 ecx
  0008c	ba 04 00 00 00	 mov	 edx, 4
  00091	d1 e2		 shl	 edx, 1
  00093	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00096	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00099	51		 push	 ecx
  0009a	ba 04 00 00 00	 mov	 edx, 4
  0009f	d1 e2		 shl	 edx, 1
  000a1	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  000a4	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  000a7	51		 push	 ecx
  000a8	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  000ac	52		 push	 edx
  000ad	e8 00 00 00 00	 call	 __ADD_UNIT
  000b2	83 c4 10	 add	 esp, 16			; 00000010H
  000b5	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1058 :     c = _ADD_UNIT(c, xp[3], yp[3], &zp[3]);

  000b8	b8 04 00 00 00	 mov	 eax, 4
  000bd	6b c8 03	 imul	 ecx, eax, 3
  000c0	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  000c3	51		 push	 ecx
  000c4	ba 04 00 00 00	 mov	 edx, 4
  000c9	6b c2 03	 imul	 eax, edx, 3
  000cc	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  000cf	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  000d2	52		 push	 edx
  000d3	b8 04 00 00 00	 mov	 eax, 4
  000d8	6b c8 03	 imul	 ecx, eax, 3
  000db	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  000de	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  000e1	50		 push	 eax
  000e2	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  000e6	51		 push	 ecx
  000e7	e8 00 00 00 00	 call	 __ADD_UNIT
  000ec	83 c4 10	 add	 esp, 16			; 00000010H
  000ef	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1059 :     c = _ADD_UNIT(c, xp[4], yp[4], &zp[4]);

  000f2	ba 04 00 00 00	 mov	 edx, 4
  000f7	c1 e2 02	 shl	 edx, 2
  000fa	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  000fd	52		 push	 edx
  000fe	b8 04 00 00 00	 mov	 eax, 4
  00103	c1 e0 02	 shl	 eax, 2
  00106	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00109	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0010c	52		 push	 edx
  0010d	b8 04 00 00 00	 mov	 eax, 4
  00112	c1 e0 02	 shl	 eax, 2
  00115	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00118	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0011b	52		 push	 edx
  0011c	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00120	50		 push	 eax
  00121	e8 00 00 00 00	 call	 __ADD_UNIT
  00126	83 c4 10	 add	 esp, 16			; 00000010H
  00129	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1060 :     c = _ADD_UNIT(c, xp[5], yp[5], &zp[5]);

  0012c	b9 04 00 00 00	 mov	 ecx, 4
  00131	6b d1 05	 imul	 edx, ecx, 5
  00134	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00137	52		 push	 edx
  00138	b8 04 00 00 00	 mov	 eax, 4
  0013d	6b c8 05	 imul	 ecx, eax, 5
  00140	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  00143	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00146	50		 push	 eax
  00147	b9 04 00 00 00	 mov	 ecx, 4
  0014c	6b d1 05	 imul	 edx, ecx, 5
  0014f	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  00152	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00155	51		 push	 ecx
  00156	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  0015a	52		 push	 edx
  0015b	e8 00 00 00 00	 call	 __ADD_UNIT
  00160	83 c4 10	 add	 esp, 16			; 00000010H
  00163	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1061 :     c = _ADD_UNIT(c, xp[6], yp[6], &zp[6]);

  00166	b8 04 00 00 00	 mov	 eax, 4
  0016b	6b c8 06	 imul	 ecx, eax, 6
  0016e	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00171	51		 push	 ecx
  00172	ba 04 00 00 00	 mov	 edx, 4
  00177	6b c2 06	 imul	 eax, edx, 6
  0017a	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0017d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00180	52		 push	 edx
  00181	b8 04 00 00 00	 mov	 eax, 4
  00186	6b c8 06	 imul	 ecx, eax, 6
  00189	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  0018c	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0018f	50		 push	 eax
  00190	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  00194	51		 push	 ecx
  00195	e8 00 00 00 00	 call	 __ADD_UNIT
  0019a	83 c4 10	 add	 esp, 16			; 00000010H
  0019d	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1062 :     c = _ADD_UNIT(c, xp[7], yp[7], &zp[7]);

  001a0	ba 04 00 00 00	 mov	 edx, 4
  001a5	6b c2 07	 imul	 eax, edx, 7
  001a8	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  001ab	50		 push	 eax
  001ac	b9 04 00 00 00	 mov	 ecx, 4
  001b1	6b d1 07	 imul	 edx, ecx, 7
  001b4	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  001b7	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  001ba	51		 push	 ecx
  001bb	ba 04 00 00 00	 mov	 edx, 4
  001c0	6b c2 07	 imul	 eax, edx, 7
  001c3	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  001c6	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  001c9	52		 push	 edx
  001ca	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  001ce	50		 push	 eax
  001cf	e8 00 00 00 00	 call	 __ADD_UNIT
  001d4	83 c4 10	 add	 esp, 16			; 00000010H
  001d7	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1063 :     c = _ADD_UNIT(c, xp[8], yp[8], &zp[8]);

  001da	b9 04 00 00 00	 mov	 ecx, 4
  001df	c1 e1 03	 shl	 ecx, 3
  001e2	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  001e5	51		 push	 ecx
  001e6	ba 04 00 00 00	 mov	 edx, 4
  001eb	c1 e2 03	 shl	 edx, 3
  001ee	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  001f1	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  001f4	51		 push	 ecx
  001f5	ba 04 00 00 00	 mov	 edx, 4
  001fa	c1 e2 03	 shl	 edx, 3
  001fd	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  00200	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00203	51		 push	 ecx
  00204	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  00208	52		 push	 edx
  00209	e8 00 00 00 00	 call	 __ADD_UNIT
  0020e	83 c4 10	 add	 esp, 16			; 00000010H
  00211	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1064 :     c = _ADD_UNIT(c, xp[9], yp[9], &zp[9]);

  00214	b8 04 00 00 00	 mov	 eax, 4
  00219	6b c8 09	 imul	 ecx, eax, 9
  0021c	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  0021f	51		 push	 ecx
  00220	ba 04 00 00 00	 mov	 edx, 4
  00225	6b c2 09	 imul	 eax, edx, 9
  00228	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0022b	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0022e	52		 push	 edx
  0022f	b8 04 00 00 00	 mov	 eax, 4
  00234	6b c8 09	 imul	 ecx, eax, 9
  00237	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  0023a	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0023d	50		 push	 eax
  0023e	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  00242	51		 push	 ecx
  00243	e8 00 00 00 00	 call	 __ADD_UNIT
  00248	83 c4 10	 add	 esp, 16			; 00000010H
  0024b	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1065 :     c = _ADD_UNIT(c, xp[10], yp[10], &zp[10]);

  0024e	ba 04 00 00 00	 mov	 edx, 4
  00253	6b c2 0a	 imul	 eax, edx, 10
  00256	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  00259	50		 push	 eax
  0025a	b9 04 00 00 00	 mov	 ecx, 4
  0025f	6b d1 0a	 imul	 edx, ecx, 10
  00262	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00265	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00268	51		 push	 ecx
  00269	ba 04 00 00 00	 mov	 edx, 4
  0026e	6b c2 0a	 imul	 eax, edx, 10
  00271	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00274	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00277	52		 push	 edx
  00278	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  0027c	50		 push	 eax
  0027d	e8 00 00 00 00	 call	 __ADD_UNIT
  00282	83 c4 10	 add	 esp, 16			; 00000010H
  00285	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1066 :     c = _ADD_UNIT(c, xp[11], yp[11], &zp[11]);

  00288	b9 04 00 00 00	 mov	 ecx, 4
  0028d	6b d1 0b	 imul	 edx, ecx, 11
  00290	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00293	52		 push	 edx
  00294	b8 04 00 00 00	 mov	 eax, 4
  00299	6b c8 0b	 imul	 ecx, eax, 11
  0029c	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  0029f	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  002a2	50		 push	 eax
  002a3	b9 04 00 00 00	 mov	 ecx, 4
  002a8	6b d1 0b	 imul	 edx, ecx, 11
  002ab	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  002ae	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  002b1	51		 push	 ecx
  002b2	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  002b6	52		 push	 edx
  002b7	e8 00 00 00 00	 call	 __ADD_UNIT
  002bc	83 c4 10	 add	 esp, 16			; 00000010H
  002bf	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1067 :     c = _ADD_UNIT(c, xp[12], yp[12], &zp[12]);

  002c2	b8 04 00 00 00	 mov	 eax, 4
  002c7	6b c8 0c	 imul	 ecx, eax, 12
  002ca	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  002cd	51		 push	 ecx
  002ce	ba 04 00 00 00	 mov	 edx, 4
  002d3	6b c2 0c	 imul	 eax, edx, 12
  002d6	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  002d9	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  002dc	52		 push	 edx
  002dd	b8 04 00 00 00	 mov	 eax, 4
  002e2	6b c8 0c	 imul	 ecx, eax, 12
  002e5	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  002e8	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  002eb	50		 push	 eax
  002ec	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  002f0	51		 push	 ecx
  002f1	e8 00 00 00 00	 call	 __ADD_UNIT
  002f6	83 c4 10	 add	 esp, 16			; 00000010H
  002f9	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1068 :     c = _ADD_UNIT(c, xp[13], yp[13], &zp[13]);

  002fc	ba 04 00 00 00	 mov	 edx, 4
  00301	6b c2 0d	 imul	 eax, edx, 13
  00304	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  00307	50		 push	 eax
  00308	b9 04 00 00 00	 mov	 ecx, 4
  0030d	6b d1 0d	 imul	 edx, ecx, 13
  00310	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00313	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00316	51		 push	 ecx
  00317	ba 04 00 00 00	 mov	 edx, 4
  0031c	6b c2 0d	 imul	 eax, edx, 13
  0031f	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00322	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00325	52		 push	 edx
  00326	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  0032a	50		 push	 eax
  0032b	e8 00 00 00 00	 call	 __ADD_UNIT
  00330	83 c4 10	 add	 esp, 16			; 00000010H
  00333	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1069 :     c = _ADD_UNIT(c, xp[14], yp[14], &zp[14]);

  00336	b9 04 00 00 00	 mov	 ecx, 4
  0033b	6b d1 0e	 imul	 edx, ecx, 14
  0033e	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00341	52		 push	 edx
  00342	b8 04 00 00 00	 mov	 eax, 4
  00347	6b c8 0e	 imul	 ecx, eax, 14
  0034a	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  0034d	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00350	50		 push	 eax
  00351	b9 04 00 00 00	 mov	 ecx, 4
  00356	6b d1 0e	 imul	 edx, ecx, 14
  00359	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  0035c	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0035f	51		 push	 ecx
  00360	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  00364	52		 push	 edx
  00365	e8 00 00 00 00	 call	 __ADD_UNIT
  0036a	83 c4 10	 add	 esp, 16			; 00000010H
  0036d	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1070 :     c = _ADD_UNIT(c, xp[15], yp[15], &zp[15]);

  00370	b8 04 00 00 00	 mov	 eax, 4
  00375	6b c8 0f	 imul	 ecx, eax, 15
  00378	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  0037b	51		 push	 ecx
  0037c	ba 04 00 00 00	 mov	 edx, 4
  00381	6b c2 0f	 imul	 eax, edx, 15
  00384	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00387	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0038a	52		 push	 edx
  0038b	b8 04 00 00 00	 mov	 eax, 4
  00390	6b c8 0f	 imul	 ecx, eax, 15
  00393	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  00396	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00399	50		 push	 eax
  0039a	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  0039e	51		 push	 ecx
  0039f	e8 00 00 00 00	 call	 __ADD_UNIT
  003a4	83 c4 10	 add	 esp, 16			; 00000010H
  003a7	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1071 : #elif defined(__GNUC__)
; 1072 : #ifdef _M_IX86
; 1073 :     __asm__ volatile (
; 1074 :         "addb\t$-1, %0\n\t"
; 1075 :         "movl\t(%1), %%ecx\n\t"
; 1076 :         "adcl\t(%2), %%ecx\n\t"
; 1077 :         "movl\t%%ecx, (%3)\n\t"
; 1078 :         "movl\t4(%1), %%ecx\n\t"
; 1079 :         "adcl\t4(%2), %%ecx\n\t"
; 1080 :         "movl\t%%ecx, 4(%3)\n\t"
; 1081 :         "movl\t8(%1), %%ecx\n\t"
; 1082 :         "adcl\t8(%2), %%ecx\n\t"
; 1083 :         "movl\t%%ecx, 8(%3)\n\t"
; 1084 :         "movl\t12(%1), %%ecx\n\t"
; 1085 :         "adcl\t12(%2), %%ecx\n\t"
; 1086 :         "movl\t%%ecx, 12(%3)\n\t"
; 1087 :         "movl\t16(%1), %%ecx\n\t"
; 1088 :         "adcl\t16(%2), %%ecx\n\t"
; 1089 :         "movl\t%%ecx, 16(%3)\n\t"
; 1090 :         "movl\t20(%1), %%ecx\n\t"
; 1091 :         "adcl\t20(%2), %%ecx\n\t"
; 1092 :         "movl\t%%ecx, 20(%3)\n\t"
; 1093 :         "movl\t24(%1), %%ecx\n\t"
; 1094 :         "adcl\t24(%2), %%ecx\n\t"
; 1095 :         "movl\t%%ecx, 24(%3)\n\t"
; 1096 :         "movl\t28(%1), %%ecx\n\t"
; 1097 :         "adcl\t28(%2), %%ecx\n\t"
; 1098 :         "movl\t%%ecx, 28(%3)\n\t"
; 1099 :         "movl\t32(%1), %%ecx\n\t"
; 1100 :         "adcl\t32(%2), %%ecx\n\t"
; 1101 :         "movl\t%%ecx, 32(%3)\n\t"
; 1102 :         "movl\t36(%1), %%ecx\n\t"
; 1103 :         "adcl\t36(%2), %%ecx\n\t"
; 1104 :         "movl\t%%ecx, 36(%3)\n\t"
; 1105 :         "movl\t40(%1), %%ecx\n\t"
; 1106 :         "adcl\t40(%2), %%ecx\n\t"
; 1107 :         "movl\t%%ecx, 40(%3)\n\t"
; 1108 :         "movl\t44(%1), %%ecx\n\t"
; 1109 :         "adcl\t44(%2), %%ecx\n\t"
; 1110 :         "movl\t%%ecx, 44(%3)\n\t"
; 1111 :         "movl\t48(%1), %%ecx\n\t"
; 1112 :         "adcl\t48(%2), %%ecx\n\t"
; 1113 :         "movl\t%%ecx, 48(%3)\n\t"
; 1114 :         "movl\t52(%1), %%ecx\n\t"
; 1115 :         "adcl\t52(%2), %%ecx\n\t"
; 1116 :         "movl\t%%ecx, 52(%3)\n\t"
; 1117 :         "movl\t56(%1), %%ecx\n\t"
; 1118 :         "adcl\t56(%2), %%ecx\n\t"
; 1119 :         "movl\t%%ecx, 56(%3)\n\t"
; 1120 :         "movl\t60(%1), %%ecx\n\t"
; 1121 :         "adcl\t60(%2), %%ecx\n\t"
; 1122 :         "movl\t%%ecx, 60(%3)\n\t"
; 1123 :         "setc\t%0"
; 1124 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1125 :         :
; 1126 :         : "cc", "memory", "%ecx"
; 1127 : );
; 1128 : #elif defined(_M_X64)
; 1129 :     __asm__ volatile (
; 1130 :         "addb\t$-1, %0\n\t"
; 1131 :         "movq\t(%1), %%rcx\n\t"
; 1132 :         "adcq\t(%2), %%rcx\n\t"
; 1133 :         "movq\t%%rcx, (%3)\n\t"
; 1134 :         "movq\t8(%1), %%rcx\n\t"
; 1135 :         "adcq\t8(%2), %%rcx\n\t"
; 1136 :         "movq\t%%rcx, 8(%3)\n\t"
; 1137 :         "movq\t16(%1), %%rcx\n\t"
; 1138 :         "adcq\t16(%2), %%rcx\n\t"
; 1139 :         "movq\t%%rcx, 16(%3)\n\t"
; 1140 :         "movq\t24(%1), %%rcx\n\t"
; 1141 :         "adcq\t24(%2), %%rcx\n\t"
; 1142 :         "movq\t%%rcx, 24(%3)\n\t"
; 1143 :         "movq\t32(%1), %%rcx\n\t"
; 1144 :         "adcq\t32(%2), %%rcx\n\t"
; 1145 :         "movq\t%%rcx, 32(%3)\n\t"
; 1146 :         "movq\t40(%1), %%rcx\n\t"
; 1147 :         "adcq\t40(%2), %%rcx\n\t"
; 1148 :         "movq\t%%rcx, 40(%3)\n\t"
; 1149 :         "movq\t48(%1), %%rcx\n\t"
; 1150 :         "adcq\t48(%2), %%rcx\n\t"
; 1151 :         "movq\t%%rcx, 48(%3)\n\t"
; 1152 :         "movq\t56(%1), %%rcx\n\t"
; 1153 :         "adcq\t56(%2), %%rcx\n\t"
; 1154 :         "movq\t%%rcx, 56(%3)\n\t"
; 1155 :         "movq\t64(%1), %%rcx\n\t"
; 1156 :         "adcq\t64(%2), %%rcx\n\t"
; 1157 :         "movq\t%%rcx, 64(%3)\n\t"
; 1158 :         "movq\t72(%1), %%rcx\n\t"
; 1159 :         "adcq\t72(%2), %%rcx\n\t"
; 1160 :         "movq\t%%rcx, 72(%3)\n\t"
; 1161 :         "movq\t80(%1), %%rcx\n\t"
; 1162 :         "adcq\t80(%2), %%rcx\n\t"
; 1163 :         "movq\t%%rcx, 80(%3)\n\t"
; 1164 :         "movq\t88(%1), %%rcx\n\t"
; 1165 :         "adcq\t88(%2), %%rcx\n\t"
; 1166 :         "movq\t%%rcx, 88(%3)\n\t"
; 1167 :         "movq\t96(%1), %%rcx\n\t"
; 1168 :         "adcq\t96(%2), %%rcx\n\t"
; 1169 :         "movq\t%%rcx, 96(%3)\n\t"
; 1170 :         "movq\t104(%1), %%rcx\n\t"
; 1171 :         "adcq\t104(%2), %%rcx\n\t"
; 1172 :         "movq\t%%rcx, 104(%3)\n\t"
; 1173 :         "movq\t112(%1), %%rcx\n\t"
; 1174 :         "adcq\t112(%2), %%rcx\n\t"
; 1175 :         "movq\t%%rcx, 112(%3)\n\t"
; 1176 :         "movq\t120(%1), %%rcx\n\t"
; 1177 :         "adcq\t120(%2), %%rcx\n\t"
; 1178 :         "movq\t%%rcx, 120(%3)\n\t"
; 1179 :         "setc\t%0"
; 1180 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1181 :         :
; 1182 :         : "cc", "memory", "%rcx"
; 1183 : );
; 1184 : #else
; 1185 : #error unknown platform
; 1186 : #endif
; 1187 : #else
; 1188 : #error unknown compiler
; 1189 : #endif
; 1190 :     return (c);

  003aa	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]

; 1191 : }

  003ad	3b ec		 cmp	 ebp, esp
  003af	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003b4	5d		 pop	 ebp
  003b5	c3		 ret	 0
__ADD_16WORDS_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_32WORDS_ADCX PROC

; 294  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __E05E7037_autogenerated_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 295  : #ifdef _MSC_VER
; 296  :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

  0000d	b8 04 00 00 00	 mov	 eax, 4
  00012	6b c8 00	 imul	 ecx, eax, 0
  00015	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00018	51		 push	 ecx
  00019	ba 04 00 00 00	 mov	 edx, 4
  0001e	6b c2 00	 imul	 eax, edx, 0
  00021	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00024	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00027	52		 push	 edx
  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  00033	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00036	50		 push	 eax
  00037	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 __ADDX_UNIT
  00041	83 c4 10	 add	 esp, 16			; 00000010H
  00044	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 297  :     c = _ADDX_UNIT(c, xp[1], yp[1], &zp[1]);

  00047	ba 04 00 00 00	 mov	 edx, 4
  0004c	c1 e2 00	 shl	 edx, 0
  0004f	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00052	52		 push	 edx
  00053	b8 04 00 00 00	 mov	 eax, 4
  00058	c1 e0 00	 shl	 eax, 0
  0005b	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0005e	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00061	52		 push	 edx
  00062	b8 04 00 00 00	 mov	 eax, 4
  00067	c1 e0 00	 shl	 eax, 0
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  0006d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00070	52		 push	 edx
  00071	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 __ADDX_UNIT
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 298  :     c = _ADDX_UNIT(c, xp[2], yp[2], &zp[2]);

  00081	b9 04 00 00 00	 mov	 ecx, 4
  00086	d1 e1		 shl	 ecx, 1
  00088	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  0008b	51		 push	 ecx
  0008c	ba 04 00 00 00	 mov	 edx, 4
  00091	d1 e2		 shl	 edx, 1
  00093	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00096	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00099	51		 push	 ecx
  0009a	ba 04 00 00 00	 mov	 edx, 4
  0009f	d1 e2		 shl	 edx, 1
  000a1	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  000a4	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  000a7	51		 push	 ecx
  000a8	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  000ac	52		 push	 edx
  000ad	e8 00 00 00 00	 call	 __ADDX_UNIT
  000b2	83 c4 10	 add	 esp, 16			; 00000010H
  000b5	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 299  :     c = _ADDX_UNIT(c, xp[3], yp[3], &zp[3]);

  000b8	b8 04 00 00 00	 mov	 eax, 4
  000bd	6b c8 03	 imul	 ecx, eax, 3
  000c0	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  000c3	51		 push	 ecx
  000c4	ba 04 00 00 00	 mov	 edx, 4
  000c9	6b c2 03	 imul	 eax, edx, 3
  000cc	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  000cf	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  000d2	52		 push	 edx
  000d3	b8 04 00 00 00	 mov	 eax, 4
  000d8	6b c8 03	 imul	 ecx, eax, 3
  000db	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  000de	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  000e1	50		 push	 eax
  000e2	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  000e6	51		 push	 ecx
  000e7	e8 00 00 00 00	 call	 __ADDX_UNIT
  000ec	83 c4 10	 add	 esp, 16			; 00000010H
  000ef	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 300  :     c = _ADDX_UNIT(c, xp[4], yp[4], &zp[4]);

  000f2	ba 04 00 00 00	 mov	 edx, 4
  000f7	c1 e2 02	 shl	 edx, 2
  000fa	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  000fd	52		 push	 edx
  000fe	b8 04 00 00 00	 mov	 eax, 4
  00103	c1 e0 02	 shl	 eax, 2
  00106	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00109	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0010c	52		 push	 edx
  0010d	b8 04 00 00 00	 mov	 eax, 4
  00112	c1 e0 02	 shl	 eax, 2
  00115	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00118	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0011b	52		 push	 edx
  0011c	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00120	50		 push	 eax
  00121	e8 00 00 00 00	 call	 __ADDX_UNIT
  00126	83 c4 10	 add	 esp, 16			; 00000010H
  00129	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 301  :     c = _ADDX_UNIT(c, xp[5], yp[5], &zp[5]);

  0012c	b9 04 00 00 00	 mov	 ecx, 4
  00131	6b d1 05	 imul	 edx, ecx, 5
  00134	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00137	52		 push	 edx
  00138	b8 04 00 00 00	 mov	 eax, 4
  0013d	6b c8 05	 imul	 ecx, eax, 5
  00140	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  00143	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00146	50		 push	 eax
  00147	b9 04 00 00 00	 mov	 ecx, 4
  0014c	6b d1 05	 imul	 edx, ecx, 5
  0014f	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  00152	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00155	51		 push	 ecx
  00156	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  0015a	52		 push	 edx
  0015b	e8 00 00 00 00	 call	 __ADDX_UNIT
  00160	83 c4 10	 add	 esp, 16			; 00000010H
  00163	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 302  :     c = _ADDX_UNIT(c, xp[6], yp[6], &zp[6]);

  00166	b8 04 00 00 00	 mov	 eax, 4
  0016b	6b c8 06	 imul	 ecx, eax, 6
  0016e	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00171	51		 push	 ecx
  00172	ba 04 00 00 00	 mov	 edx, 4
  00177	6b c2 06	 imul	 eax, edx, 6
  0017a	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0017d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00180	52		 push	 edx
  00181	b8 04 00 00 00	 mov	 eax, 4
  00186	6b c8 06	 imul	 ecx, eax, 6
  00189	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  0018c	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0018f	50		 push	 eax
  00190	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  00194	51		 push	 ecx
  00195	e8 00 00 00 00	 call	 __ADDX_UNIT
  0019a	83 c4 10	 add	 esp, 16			; 00000010H
  0019d	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 303  :     c = _ADDX_UNIT(c, xp[7], yp[7], &zp[7]);

  001a0	ba 04 00 00 00	 mov	 edx, 4
  001a5	6b c2 07	 imul	 eax, edx, 7
  001a8	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  001ab	50		 push	 eax
  001ac	b9 04 00 00 00	 mov	 ecx, 4
  001b1	6b d1 07	 imul	 edx, ecx, 7
  001b4	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  001b7	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  001ba	51		 push	 ecx
  001bb	ba 04 00 00 00	 mov	 edx, 4
  001c0	6b c2 07	 imul	 eax, edx, 7
  001c3	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  001c6	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  001c9	52		 push	 edx
  001ca	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  001ce	50		 push	 eax
  001cf	e8 00 00 00 00	 call	 __ADDX_UNIT
  001d4	83 c4 10	 add	 esp, 16			; 00000010H
  001d7	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 304  :     c = _ADDX_UNIT(c, xp[8], yp[8], &zp[8]);

  001da	b9 04 00 00 00	 mov	 ecx, 4
  001df	c1 e1 03	 shl	 ecx, 3
  001e2	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  001e5	51		 push	 ecx
  001e6	ba 04 00 00 00	 mov	 edx, 4
  001eb	c1 e2 03	 shl	 edx, 3
  001ee	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  001f1	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  001f4	51		 push	 ecx
  001f5	ba 04 00 00 00	 mov	 edx, 4
  001fa	c1 e2 03	 shl	 edx, 3
  001fd	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  00200	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00203	51		 push	 ecx
  00204	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  00208	52		 push	 edx
  00209	e8 00 00 00 00	 call	 __ADDX_UNIT
  0020e	83 c4 10	 add	 esp, 16			; 00000010H
  00211	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 305  :     c = _ADDX_UNIT(c, xp[9], yp[9], &zp[9]);

  00214	b8 04 00 00 00	 mov	 eax, 4
  00219	6b c8 09	 imul	 ecx, eax, 9
  0021c	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  0021f	51		 push	 ecx
  00220	ba 04 00 00 00	 mov	 edx, 4
  00225	6b c2 09	 imul	 eax, edx, 9
  00228	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0022b	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0022e	52		 push	 edx
  0022f	b8 04 00 00 00	 mov	 eax, 4
  00234	6b c8 09	 imul	 ecx, eax, 9
  00237	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  0023a	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0023d	50		 push	 eax
  0023e	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  00242	51		 push	 ecx
  00243	e8 00 00 00 00	 call	 __ADDX_UNIT
  00248	83 c4 10	 add	 esp, 16			; 00000010H
  0024b	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 306  :     c = _ADDX_UNIT(c, xp[10], yp[10], &zp[10]);

  0024e	ba 04 00 00 00	 mov	 edx, 4
  00253	6b c2 0a	 imul	 eax, edx, 10
  00256	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  00259	50		 push	 eax
  0025a	b9 04 00 00 00	 mov	 ecx, 4
  0025f	6b d1 0a	 imul	 edx, ecx, 10
  00262	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00265	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00268	51		 push	 ecx
  00269	ba 04 00 00 00	 mov	 edx, 4
  0026e	6b c2 0a	 imul	 eax, edx, 10
  00271	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00274	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00277	52		 push	 edx
  00278	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  0027c	50		 push	 eax
  0027d	e8 00 00 00 00	 call	 __ADDX_UNIT
  00282	83 c4 10	 add	 esp, 16			; 00000010H
  00285	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 307  :     c = _ADDX_UNIT(c, xp[11], yp[11], &zp[11]);

  00288	b9 04 00 00 00	 mov	 ecx, 4
  0028d	6b d1 0b	 imul	 edx, ecx, 11
  00290	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00293	52		 push	 edx
  00294	b8 04 00 00 00	 mov	 eax, 4
  00299	6b c8 0b	 imul	 ecx, eax, 11
  0029c	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  0029f	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  002a2	50		 push	 eax
  002a3	b9 04 00 00 00	 mov	 ecx, 4
  002a8	6b d1 0b	 imul	 edx, ecx, 11
  002ab	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  002ae	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  002b1	51		 push	 ecx
  002b2	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  002b6	52		 push	 edx
  002b7	e8 00 00 00 00	 call	 __ADDX_UNIT
  002bc	83 c4 10	 add	 esp, 16			; 00000010H
  002bf	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 308  :     c = _ADDX_UNIT(c, xp[12], yp[12], &zp[12]);

  002c2	b8 04 00 00 00	 mov	 eax, 4
  002c7	6b c8 0c	 imul	 ecx, eax, 12
  002ca	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  002cd	51		 push	 ecx
  002ce	ba 04 00 00 00	 mov	 edx, 4
  002d3	6b c2 0c	 imul	 eax, edx, 12
  002d6	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  002d9	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  002dc	52		 push	 edx
  002dd	b8 04 00 00 00	 mov	 eax, 4
  002e2	6b c8 0c	 imul	 ecx, eax, 12
  002e5	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  002e8	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  002eb	50		 push	 eax
  002ec	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  002f0	51		 push	 ecx
  002f1	e8 00 00 00 00	 call	 __ADDX_UNIT
  002f6	83 c4 10	 add	 esp, 16			; 00000010H
  002f9	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 309  :     c = _ADDX_UNIT(c, xp[13], yp[13], &zp[13]);

  002fc	ba 04 00 00 00	 mov	 edx, 4
  00301	6b c2 0d	 imul	 eax, edx, 13
  00304	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  00307	50		 push	 eax
  00308	b9 04 00 00 00	 mov	 ecx, 4
  0030d	6b d1 0d	 imul	 edx, ecx, 13
  00310	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00313	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00316	51		 push	 ecx
  00317	ba 04 00 00 00	 mov	 edx, 4
  0031c	6b c2 0d	 imul	 eax, edx, 13
  0031f	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00322	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00325	52		 push	 edx
  00326	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  0032a	50		 push	 eax
  0032b	e8 00 00 00 00	 call	 __ADDX_UNIT
  00330	83 c4 10	 add	 esp, 16			; 00000010H
  00333	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 310  :     c = _ADDX_UNIT(c, xp[14], yp[14], &zp[14]);

  00336	b9 04 00 00 00	 mov	 ecx, 4
  0033b	6b d1 0e	 imul	 edx, ecx, 14
  0033e	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00341	52		 push	 edx
  00342	b8 04 00 00 00	 mov	 eax, 4
  00347	6b c8 0e	 imul	 ecx, eax, 14
  0034a	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  0034d	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00350	50		 push	 eax
  00351	b9 04 00 00 00	 mov	 ecx, 4
  00356	6b d1 0e	 imul	 edx, ecx, 14
  00359	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  0035c	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0035f	51		 push	 ecx
  00360	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  00364	52		 push	 edx
  00365	e8 00 00 00 00	 call	 __ADDX_UNIT
  0036a	83 c4 10	 add	 esp, 16			; 00000010H
  0036d	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 311  :     c = _ADDX_UNIT(c, xp[15], yp[15], &zp[15]);

  00370	b8 04 00 00 00	 mov	 eax, 4
  00375	6b c8 0f	 imul	 ecx, eax, 15
  00378	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  0037b	51		 push	 ecx
  0037c	ba 04 00 00 00	 mov	 edx, 4
  00381	6b c2 0f	 imul	 eax, edx, 15
  00384	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00387	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0038a	52		 push	 edx
  0038b	b8 04 00 00 00	 mov	 eax, 4
  00390	6b c8 0f	 imul	 ecx, eax, 15
  00393	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  00396	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00399	50		 push	 eax
  0039a	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  0039e	51		 push	 ecx
  0039f	e8 00 00 00 00	 call	 __ADDX_UNIT
  003a4	83 c4 10	 add	 esp, 16			; 00000010H
  003a7	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 312  :     c = _ADDX_UNIT(c, xp[16], yp[16], &zp[16]);

  003aa	ba 04 00 00 00	 mov	 edx, 4
  003af	c1 e2 04	 shl	 edx, 4
  003b2	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  003b5	52		 push	 edx
  003b6	b8 04 00 00 00	 mov	 eax, 4
  003bb	c1 e0 04	 shl	 eax, 4
  003be	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  003c1	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  003c4	52		 push	 edx
  003c5	b8 04 00 00 00	 mov	 eax, 4
  003ca	c1 e0 04	 shl	 eax, 4
  003cd	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  003d0	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  003d3	52		 push	 edx
  003d4	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  003d8	50		 push	 eax
  003d9	e8 00 00 00 00	 call	 __ADDX_UNIT
  003de	83 c4 10	 add	 esp, 16			; 00000010H
  003e1	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 313  :     c = _ADDX_UNIT(c, xp[17], yp[17], &zp[17]);

  003e4	b9 04 00 00 00	 mov	 ecx, 4
  003e9	6b d1 11	 imul	 edx, ecx, 17
  003ec	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  003ef	52		 push	 edx
  003f0	b8 04 00 00 00	 mov	 eax, 4
  003f5	6b c8 11	 imul	 ecx, eax, 17
  003f8	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  003fb	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  003fe	50		 push	 eax
  003ff	b9 04 00 00 00	 mov	 ecx, 4
  00404	6b d1 11	 imul	 edx, ecx, 17
  00407	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  0040a	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0040d	51		 push	 ecx
  0040e	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  00412	52		 push	 edx
  00413	e8 00 00 00 00	 call	 __ADDX_UNIT
  00418	83 c4 10	 add	 esp, 16			; 00000010H
  0041b	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 314  :     c = _ADDX_UNIT(c, xp[18], yp[18], &zp[18]);

  0041e	b8 04 00 00 00	 mov	 eax, 4
  00423	6b c8 12	 imul	 ecx, eax, 18
  00426	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00429	51		 push	 ecx
  0042a	ba 04 00 00 00	 mov	 edx, 4
  0042f	6b c2 12	 imul	 eax, edx, 18
  00432	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00435	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00438	52		 push	 edx
  00439	b8 04 00 00 00	 mov	 eax, 4
  0043e	6b c8 12	 imul	 ecx, eax, 18
  00441	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  00444	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00447	50		 push	 eax
  00448	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  0044c	51		 push	 ecx
  0044d	e8 00 00 00 00	 call	 __ADDX_UNIT
  00452	83 c4 10	 add	 esp, 16			; 00000010H
  00455	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 315  :     c = _ADDX_UNIT(c, xp[19], yp[19], &zp[19]);

  00458	ba 04 00 00 00	 mov	 edx, 4
  0045d	6b c2 13	 imul	 eax, edx, 19
  00460	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  00463	50		 push	 eax
  00464	b9 04 00 00 00	 mov	 ecx, 4
  00469	6b d1 13	 imul	 edx, ecx, 19
  0046c	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  0046f	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00472	51		 push	 ecx
  00473	ba 04 00 00 00	 mov	 edx, 4
  00478	6b c2 13	 imul	 eax, edx, 19
  0047b	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  0047e	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00481	52		 push	 edx
  00482	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00486	50		 push	 eax
  00487	e8 00 00 00 00	 call	 __ADDX_UNIT
  0048c	83 c4 10	 add	 esp, 16			; 00000010H
  0048f	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 316  :     c = _ADDX_UNIT(c, xp[20], yp[20], &zp[20]);

  00492	b9 04 00 00 00	 mov	 ecx, 4
  00497	6b d1 14	 imul	 edx, ecx, 20
  0049a	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  0049d	52		 push	 edx
  0049e	b8 04 00 00 00	 mov	 eax, 4
  004a3	6b c8 14	 imul	 ecx, eax, 20
  004a6	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  004a9	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  004ac	50		 push	 eax
  004ad	b9 04 00 00 00	 mov	 ecx, 4
  004b2	6b d1 14	 imul	 edx, ecx, 20
  004b5	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  004b8	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  004bb	51		 push	 ecx
  004bc	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  004c0	52		 push	 edx
  004c1	e8 00 00 00 00	 call	 __ADDX_UNIT
  004c6	83 c4 10	 add	 esp, 16			; 00000010H
  004c9	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 317  :     c = _ADDX_UNIT(c, xp[21], yp[21], &zp[21]);

  004cc	b8 04 00 00 00	 mov	 eax, 4
  004d1	6b c8 15	 imul	 ecx, eax, 21
  004d4	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  004d7	51		 push	 ecx
  004d8	ba 04 00 00 00	 mov	 edx, 4
  004dd	6b c2 15	 imul	 eax, edx, 21
  004e0	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  004e3	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  004e6	52		 push	 edx
  004e7	b8 04 00 00 00	 mov	 eax, 4
  004ec	6b c8 15	 imul	 ecx, eax, 21
  004ef	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  004f2	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  004f5	50		 push	 eax
  004f6	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  004fa	51		 push	 ecx
  004fb	e8 00 00 00 00	 call	 __ADDX_UNIT
  00500	83 c4 10	 add	 esp, 16			; 00000010H
  00503	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 318  :     c = _ADDX_UNIT(c, xp[22], yp[22], &zp[22]);

  00506	ba 04 00 00 00	 mov	 edx, 4
  0050b	6b c2 16	 imul	 eax, edx, 22
  0050e	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  00511	50		 push	 eax
  00512	b9 04 00 00 00	 mov	 ecx, 4
  00517	6b d1 16	 imul	 edx, ecx, 22
  0051a	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  0051d	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00520	51		 push	 ecx
  00521	ba 04 00 00 00	 mov	 edx, 4
  00526	6b c2 16	 imul	 eax, edx, 22
  00529	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  0052c	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0052f	52		 push	 edx
  00530	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00534	50		 push	 eax
  00535	e8 00 00 00 00	 call	 __ADDX_UNIT
  0053a	83 c4 10	 add	 esp, 16			; 00000010H
  0053d	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 319  :     c = _ADDX_UNIT(c, xp[23], yp[23], &zp[23]);

  00540	b9 04 00 00 00	 mov	 ecx, 4
  00545	6b d1 17	 imul	 edx, ecx, 23
  00548	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  0054b	52		 push	 edx
  0054c	b8 04 00 00 00	 mov	 eax, 4
  00551	6b c8 17	 imul	 ecx, eax, 23
  00554	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  00557	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0055a	50		 push	 eax
  0055b	b9 04 00 00 00	 mov	 ecx, 4
  00560	6b d1 17	 imul	 edx, ecx, 23
  00563	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  00566	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00569	51		 push	 ecx
  0056a	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  0056e	52		 push	 edx
  0056f	e8 00 00 00 00	 call	 __ADDX_UNIT
  00574	83 c4 10	 add	 esp, 16			; 00000010H
  00577	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 320  :     c = _ADDX_UNIT(c, xp[24], yp[24], &zp[24]);

  0057a	b8 04 00 00 00	 mov	 eax, 4
  0057f	6b c8 18	 imul	 ecx, eax, 24
  00582	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00585	51		 push	 ecx
  00586	ba 04 00 00 00	 mov	 edx, 4
  0058b	6b c2 18	 imul	 eax, edx, 24
  0058e	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00591	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00594	52		 push	 edx
  00595	b8 04 00 00 00	 mov	 eax, 4
  0059a	6b c8 18	 imul	 ecx, eax, 24
  0059d	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  005a0	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  005a3	50		 push	 eax
  005a4	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  005a8	51		 push	 ecx
  005a9	e8 00 00 00 00	 call	 __ADDX_UNIT
  005ae	83 c4 10	 add	 esp, 16			; 00000010H
  005b1	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 321  :     c = _ADDX_UNIT(c, xp[25], yp[25], &zp[25]);

  005b4	ba 04 00 00 00	 mov	 edx, 4
  005b9	6b c2 19	 imul	 eax, edx, 25
  005bc	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  005bf	50		 push	 eax
  005c0	b9 04 00 00 00	 mov	 ecx, 4
  005c5	6b d1 19	 imul	 edx, ecx, 25
  005c8	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  005cb	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  005ce	51		 push	 ecx
  005cf	ba 04 00 00 00	 mov	 edx, 4
  005d4	6b c2 19	 imul	 eax, edx, 25
  005d7	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  005da	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  005dd	52		 push	 edx
  005de	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  005e2	50		 push	 eax
  005e3	e8 00 00 00 00	 call	 __ADDX_UNIT
  005e8	83 c4 10	 add	 esp, 16			; 00000010H
  005eb	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 322  :     c = _ADDX_UNIT(c, xp[26], yp[26], &zp[26]);

  005ee	b9 04 00 00 00	 mov	 ecx, 4
  005f3	6b d1 1a	 imul	 edx, ecx, 26
  005f6	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  005f9	52		 push	 edx
  005fa	b8 04 00 00 00	 mov	 eax, 4
  005ff	6b c8 1a	 imul	 ecx, eax, 26
  00602	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  00605	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00608	50		 push	 eax
  00609	b9 04 00 00 00	 mov	 ecx, 4
  0060e	6b d1 1a	 imul	 edx, ecx, 26
  00611	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  00614	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00617	51		 push	 ecx
  00618	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  0061c	52		 push	 edx
  0061d	e8 00 00 00 00	 call	 __ADDX_UNIT
  00622	83 c4 10	 add	 esp, 16			; 00000010H
  00625	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 323  :     c = _ADDX_UNIT(c, xp[27], yp[27], &zp[27]);

  00628	b8 04 00 00 00	 mov	 eax, 4
  0062d	6b c8 1b	 imul	 ecx, eax, 27
  00630	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00633	51		 push	 ecx
  00634	ba 04 00 00 00	 mov	 edx, 4
  00639	6b c2 1b	 imul	 eax, edx, 27
  0063c	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0063f	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00642	52		 push	 edx
  00643	b8 04 00 00 00	 mov	 eax, 4
  00648	6b c8 1b	 imul	 ecx, eax, 27
  0064b	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  0064e	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00651	50		 push	 eax
  00652	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  00656	51		 push	 ecx
  00657	e8 00 00 00 00	 call	 __ADDX_UNIT
  0065c	83 c4 10	 add	 esp, 16			; 00000010H
  0065f	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 324  :     c = _ADDX_UNIT(c, xp[28], yp[28], &zp[28]);

  00662	ba 04 00 00 00	 mov	 edx, 4
  00667	6b c2 1c	 imul	 eax, edx, 28
  0066a	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  0066d	50		 push	 eax
  0066e	b9 04 00 00 00	 mov	 ecx, 4
  00673	6b d1 1c	 imul	 edx, ecx, 28
  00676	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00679	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0067c	51		 push	 ecx
  0067d	ba 04 00 00 00	 mov	 edx, 4
  00682	6b c2 1c	 imul	 eax, edx, 28
  00685	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00688	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0068b	52		 push	 edx
  0068c	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00690	50		 push	 eax
  00691	e8 00 00 00 00	 call	 __ADDX_UNIT
  00696	83 c4 10	 add	 esp, 16			; 00000010H
  00699	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 325  :     c = _ADDX_UNIT(c, xp[29], yp[29], &zp[29]);

  0069c	b9 04 00 00 00	 mov	 ecx, 4
  006a1	6b d1 1d	 imul	 edx, ecx, 29
  006a4	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  006a7	52		 push	 edx
  006a8	b8 04 00 00 00	 mov	 eax, 4
  006ad	6b c8 1d	 imul	 ecx, eax, 29
  006b0	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  006b3	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  006b6	50		 push	 eax
  006b7	b9 04 00 00 00	 mov	 ecx, 4
  006bc	6b d1 1d	 imul	 edx, ecx, 29
  006bf	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  006c2	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  006c5	51		 push	 ecx
  006c6	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  006ca	52		 push	 edx
  006cb	e8 00 00 00 00	 call	 __ADDX_UNIT
  006d0	83 c4 10	 add	 esp, 16			; 00000010H
  006d3	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 326  :     c = _ADDX_UNIT(c, xp[30], yp[30], &zp[30]);

  006d6	b8 04 00 00 00	 mov	 eax, 4
  006db	6b c8 1e	 imul	 ecx, eax, 30
  006de	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  006e1	51		 push	 ecx
  006e2	ba 04 00 00 00	 mov	 edx, 4
  006e7	6b c2 1e	 imul	 eax, edx, 30
  006ea	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  006ed	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  006f0	52		 push	 edx
  006f1	b8 04 00 00 00	 mov	 eax, 4
  006f6	6b c8 1e	 imul	 ecx, eax, 30
  006f9	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  006fc	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  006ff	50		 push	 eax
  00700	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  00704	51		 push	 ecx
  00705	e8 00 00 00 00	 call	 __ADDX_UNIT
  0070a	83 c4 10	 add	 esp, 16			; 00000010H
  0070d	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 327  :     c = _ADDX_UNIT(c, xp[31], yp[31], &zp[31]);

  00710	ba 04 00 00 00	 mov	 edx, 4
  00715	6b c2 1f	 imul	 eax, edx, 31
  00718	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  0071b	50		 push	 eax
  0071c	b9 04 00 00 00	 mov	 ecx, 4
  00721	6b d1 1f	 imul	 edx, ecx, 31
  00724	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00727	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0072a	51		 push	 ecx
  0072b	ba 04 00 00 00	 mov	 edx, 4
  00730	6b c2 1f	 imul	 eax, edx, 31
  00733	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00736	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00739	52		 push	 edx
  0073a	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  0073e	50		 push	 eax
  0073f	e8 00 00 00 00	 call	 __ADDX_UNIT
  00744	83 c4 10	 add	 esp, 16			; 00000010H
  00747	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 328  : #elif defined(__GNUC__)
; 329  : #ifdef _M_IX86
; 330  :     __asm__ volatile (
; 331  :         "addb\t$-1, %0\n\t"
; 332  :         "movl\t(%1), %%ecx\n\t"
; 333  :         "adcxl\t(%2), %%ecx\n\t"
; 334  :         "movl\t%%ecx, (%3)\n\t"
; 335  :         "movl\t4(%1), %%ecx\n\t"
; 336  :         "adcxl\t4(%2), %%ecx\n\t"
; 337  :         "movl\t%%ecx, 4(%3)\n\t"
; 338  :         "movl\t8(%1), %%ecx\n\t"
; 339  :         "adcxl\t8(%2), %%ecx\n\t"
; 340  :         "movl\t%%ecx, 8(%3)\n\t"
; 341  :         "movl\t12(%1), %%ecx\n\t"
; 342  :         "adcxl\t12(%2), %%ecx\n\t"
; 343  :         "movl\t%%ecx, 12(%3)\n\t"
; 344  :         "movl\t16(%1), %%ecx\n\t"
; 345  :         "adcxl\t16(%2), %%ecx\n\t"
; 346  :         "movl\t%%ecx, 16(%3)\n\t"
; 347  :         "movl\t20(%1), %%ecx\n\t"
; 348  :         "adcxl\t20(%2), %%ecx\n\t"
; 349  :         "movl\t%%ecx, 20(%3)\n\t"
; 350  :         "movl\t24(%1), %%ecx\n\t"
; 351  :         "adcxl\t24(%2), %%ecx\n\t"
; 352  :         "movl\t%%ecx, 24(%3)\n\t"
; 353  :         "movl\t28(%1), %%ecx\n\t"
; 354  :         "adcxl\t28(%2), %%ecx\n\t"
; 355  :         "movl\t%%ecx, 28(%3)\n\t"
; 356  :         "movl\t32(%1), %%ecx\n\t"
; 357  :         "adcxl\t32(%2), %%ecx\n\t"
; 358  :         "movl\t%%ecx, 32(%3)\n\t"
; 359  :         "movl\t36(%1), %%ecx\n\t"
; 360  :         "adcxl\t36(%2), %%ecx\n\t"
; 361  :         "movl\t%%ecx, 36(%3)\n\t"
; 362  :         "movl\t40(%1), %%ecx\n\t"
; 363  :         "adcxl\t40(%2), %%ecx\n\t"
; 364  :         "movl\t%%ecx, 40(%3)\n\t"
; 365  :         "movl\t44(%1), %%ecx\n\t"
; 366  :         "adcxl\t44(%2), %%ecx\n\t"
; 367  :         "movl\t%%ecx, 44(%3)\n\t"
; 368  :         "movl\t48(%1), %%ecx\n\t"
; 369  :         "adcxl\t48(%2), %%ecx\n\t"
; 370  :         "movl\t%%ecx, 48(%3)\n\t"
; 371  :         "movl\t52(%1), %%ecx\n\t"
; 372  :         "adcxl\t52(%2), %%ecx\n\t"
; 373  :         "movl\t%%ecx, 52(%3)\n\t"
; 374  :         "movl\t56(%1), %%ecx\n\t"
; 375  :         "adcxl\t56(%2), %%ecx\n\t"
; 376  :         "movl\t%%ecx, 56(%3)\n\t"
; 377  :         "movl\t60(%1), %%ecx\n\t"
; 378  :         "adcxl\t60(%2), %%ecx\n\t"
; 379  :         "movl\t%%ecx, 60(%3)\n\t"
; 380  :         "movl\t64(%1), %%ecx\n\t"
; 381  :         "adcxl\t64(%2), %%ecx\n\t"
; 382  :         "movl\t%%ecx, 64(%3)\n\t"
; 383  :         "movl\t68(%1), %%ecx\n\t"
; 384  :         "adcxl\t68(%2), %%ecx\n\t"
; 385  :         "movl\t%%ecx, 68(%3)\n\t"
; 386  :         "movl\t72(%1), %%ecx\n\t"
; 387  :         "adcxl\t72(%2), %%ecx\n\t"
; 388  :         "movl\t%%ecx, 72(%3)\n\t"
; 389  :         "movl\t76(%1), %%ecx\n\t"
; 390  :         "adcxl\t76(%2), %%ecx\n\t"
; 391  :         "movl\t%%ecx, 76(%3)\n\t"
; 392  :         "movl\t80(%1), %%ecx\n\t"
; 393  :         "adcxl\t80(%2), %%ecx\n\t"
; 394  :         "movl\t%%ecx, 80(%3)\n\t"
; 395  :         "movl\t84(%1), %%ecx\n\t"
; 396  :         "adcxl\t84(%2), %%ecx\n\t"
; 397  :         "movl\t%%ecx, 84(%3)\n\t"
; 398  :         "movl\t88(%1), %%ecx\n\t"
; 399  :         "adcxl\t88(%2), %%ecx\n\t"
; 400  :         "movl\t%%ecx, 88(%3)\n\t"
; 401  :         "movl\t92(%1), %%ecx\n\t"
; 402  :         "adcxl\t92(%2), %%ecx\n\t"
; 403  :         "movl\t%%ecx, 92(%3)\n\t"
; 404  :         "movl\t96(%1), %%ecx\n\t"
; 405  :         "adcxl\t96(%2), %%ecx\n\t"
; 406  :         "movl\t%%ecx, 96(%3)\n\t"
; 407  :         "movl\t100(%1), %%ecx\n\t"
; 408  :         "adcxl\t100(%2), %%ecx\n\t"
; 409  :         "movl\t%%ecx, 100(%3)\n\t"
; 410  :         "movl\t104(%1), %%ecx\n\t"
; 411  :         "adcxl\t104(%2), %%ecx\n\t"
; 412  :         "movl\t%%ecx, 104(%3)\n\t"
; 413  :         "movl\t108(%1), %%ecx\n\t"
; 414  :         "adcxl\t108(%2), %%ecx\n\t"
; 415  :         "movl\t%%ecx, 108(%3)\n\t"
; 416  :         "movl\t112(%1), %%ecx\n\t"
; 417  :         "adcxl\t112(%2), %%ecx\n\t"
; 418  :         "movl\t%%ecx, 112(%3)\n\t"
; 419  :         "movl\t116(%1), %%ecx\n\t"
; 420  :         "adcxl\t116(%2), %%ecx\n\t"
; 421  :         "movl\t%%ecx, 116(%3)\n\t"
; 422  :         "movl\t120(%1), %%ecx\n\t"
; 423  :         "adcxl\t120(%2), %%ecx\n\t"
; 424  :         "movl\t%%ecx, 120(%3)\n\t"
; 425  :         "movl\t124(%1), %%ecx\n\t"
; 426  :         "adcxl\t124(%2), %%ecx\n\t"
; 427  :         "movl\t%%ecx, 124(%3)\n\t"
; 428  :         "setc\t%0"
; 429  :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 430  :         :
; 431  :         : "cc", "memory", "%ecx"
; 432  : );
; 433  : #elif defined(_M_X64)
; 434  :     __asm__ volatile (
; 435  :         "addb\t$-1, %0\n\t"
; 436  :         "movq\t(%1), %%rcx\n\t"
; 437  :         "adcxq\t(%2), %%rcx\n\t"
; 438  :         "movq\t%%rcx, (%3)\n\t"
; 439  :         "movq\t8(%1), %%rcx\n\t"
; 440  :         "adcxq\t8(%2), %%rcx\n\t"
; 441  :         "movq\t%%rcx, 8(%3)\n\t"
; 442  :         "movq\t16(%1), %%rcx\n\t"
; 443  :         "adcxq\t16(%2), %%rcx\n\t"
; 444  :         "movq\t%%rcx, 16(%3)\n\t"
; 445  :         "movq\t24(%1), %%rcx\n\t"
; 446  :         "adcxq\t24(%2), %%rcx\n\t"
; 447  :         "movq\t%%rcx, 24(%3)\n\t"
; 448  :         "movq\t32(%1), %%rcx\n\t"
; 449  :         "adcxq\t32(%2), %%rcx\n\t"
; 450  :         "movq\t%%rcx, 32(%3)\n\t"
; 451  :         "movq\t40(%1), %%rcx\n\t"
; 452  :         "adcxq\t40(%2), %%rcx\n\t"
; 453  :         "movq\t%%rcx, 40(%3)\n\t"
; 454  :         "movq\t48(%1), %%rcx\n\t"
; 455  :         "adcxq\t48(%2), %%rcx\n\t"
; 456  :         "movq\t%%rcx, 48(%3)\n\t"
; 457  :         "movq\t56(%1), %%rcx\n\t"
; 458  :         "adcxq\t56(%2), %%rcx\n\t"
; 459  :         "movq\t%%rcx, 56(%3)\n\t"
; 460  :         "movq\t64(%1), %%rcx\n\t"
; 461  :         "adcxq\t64(%2), %%rcx\n\t"
; 462  :         "movq\t%%rcx, 64(%3)\n\t"
; 463  :         "movq\t72(%1), %%rcx\n\t"
; 464  :         "adcxq\t72(%2), %%rcx\n\t"
; 465  :         "movq\t%%rcx, 72(%3)\n\t"
; 466  :         "movq\t80(%1), %%rcx\n\t"
; 467  :         "adcxq\t80(%2), %%rcx\n\t"
; 468  :         "movq\t%%rcx, 80(%3)\n\t"
; 469  :         "movq\t88(%1), %%rcx\n\t"
; 470  :         "adcxq\t88(%2), %%rcx\n\t"
; 471  :         "movq\t%%rcx, 88(%3)\n\t"
; 472  :         "movq\t96(%1), %%rcx\n\t"
; 473  :         "adcxq\t96(%2), %%rcx\n\t"
; 474  :         "movq\t%%rcx, 96(%3)\n\t"
; 475  :         "movq\t104(%1), %%rcx\n\t"
; 476  :         "adcxq\t104(%2), %%rcx\n\t"
; 477  :         "movq\t%%rcx, 104(%3)\n\t"
; 478  :         "movq\t112(%1), %%rcx\n\t"
; 479  :         "adcxq\t112(%2), %%rcx\n\t"
; 480  :         "movq\t%%rcx, 112(%3)\n\t"
; 481  :         "movq\t120(%1), %%rcx\n\t"
; 482  :         "adcxq\t120(%2), %%rcx\n\t"
; 483  :         "movq\t%%rcx, 120(%3)\n\t"
; 484  :         "movq\t128(%1), %%rcx\n\t"
; 485  :         "adcxq\t128(%2), %%rcx\n\t"
; 486  :         "movq\t%%rcx, 128(%3)\n\t"
; 487  :         "movq\t136(%1), %%rcx\n\t"
; 488  :         "adcxq\t136(%2), %%rcx\n\t"
; 489  :         "movq\t%%rcx, 136(%3)\n\t"
; 490  :         "movq\t144(%1), %%rcx\n\t"
; 491  :         "adcxq\t144(%2), %%rcx\n\t"
; 492  :         "movq\t%%rcx, 144(%3)\n\t"
; 493  :         "movq\t152(%1), %%rcx\n\t"
; 494  :         "adcxq\t152(%2), %%rcx\n\t"
; 495  :         "movq\t%%rcx, 152(%3)\n\t"
; 496  :         "movq\t160(%1), %%rcx\n\t"
; 497  :         "adcxq\t160(%2), %%rcx\n\t"
; 498  :         "movq\t%%rcx, 160(%3)\n\t"
; 499  :         "movq\t168(%1), %%rcx\n\t"
; 500  :         "adcxq\t168(%2), %%rcx\n\t"
; 501  :         "movq\t%%rcx, 168(%3)\n\t"
; 502  :         "movq\t176(%1), %%rcx\n\t"
; 503  :         "adcxq\t176(%2), %%rcx\n\t"
; 504  :         "movq\t%%rcx, 176(%3)\n\t"
; 505  :         "movq\t184(%1), %%rcx\n\t"
; 506  :         "adcxq\t184(%2), %%rcx\n\t"
; 507  :         "movq\t%%rcx, 184(%3)\n\t"
; 508  :         "movq\t192(%1), %%rcx\n\t"
; 509  :         "adcxq\t192(%2), %%rcx\n\t"
; 510  :         "movq\t%%rcx, 192(%3)\n\t"
; 511  :         "movq\t200(%1), %%rcx\n\t"
; 512  :         "adcxq\t200(%2), %%rcx\n\t"
; 513  :         "movq\t%%rcx, 200(%3)\n\t"
; 514  :         "movq\t208(%1), %%rcx\n\t"
; 515  :         "adcxq\t208(%2), %%rcx\n\t"
; 516  :         "movq\t%%rcx, 208(%3)\n\t"
; 517  :         "movq\t216(%1), %%rcx\n\t"
; 518  :         "adcxq\t216(%2), %%rcx\n\t"
; 519  :         "movq\t%%rcx, 216(%3)\n\t"
; 520  :         "movq\t224(%1), %%rcx\n\t"
; 521  :         "adcxq\t224(%2), %%rcx\n\t"
; 522  :         "movq\t%%rcx, 224(%3)\n\t"
; 523  :         "movq\t232(%1), %%rcx\n\t"
; 524  :         "adcxq\t232(%2), %%rcx\n\t"
; 525  :         "movq\t%%rcx, 232(%3)\n\t"
; 526  :         "movq\t240(%1), %%rcx\n\t"
; 527  :         "adcxq\t240(%2), %%rcx\n\t"
; 528  :         "movq\t%%rcx, 240(%3)\n\t"
; 529  :         "movq\t248(%1), %%rcx\n\t"
; 530  :         "adcxq\t248(%2), %%rcx\n\t"
; 531  :         "movq\t%%rcx, 248(%3)\n\t"
; 532  :         "setc\t%0"
; 533  :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 534  :         :
; 535  :         : "cc", "memory", "%rcx"
; 536  : );
; 537  : #else
; 538  : #error unknown platform
; 539  : #endif
; 540  : #else
; 541  : #error unknown compiler
; 542  : #endif
; 543  :     return (c);

  0074a	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]

; 544  : }

  0074d	3b ec		 cmp	 ebp, esp
  0074f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00754	5d		 pop	 ebp
  00755	c3		 ret	 0
__ADD_32WORDS_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_32WORDS_ADC PROC

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __E05E7037_autogenerated_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 42   : #ifdef _MSC_VER
; 43   :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

  0000d	b8 04 00 00 00	 mov	 eax, 4
  00012	6b c8 00	 imul	 ecx, eax, 0
  00015	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00018	51		 push	 ecx
  00019	ba 04 00 00 00	 mov	 edx, 4
  0001e	6b c2 00	 imul	 eax, edx, 0
  00021	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00024	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00027	52		 push	 edx
  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  00033	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00036	50		 push	 eax
  00037	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 __ADD_UNIT
  00041	83 c4 10	 add	 esp, 16			; 00000010H
  00044	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 44   :     c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);

  00047	ba 04 00 00 00	 mov	 edx, 4
  0004c	c1 e2 00	 shl	 edx, 0
  0004f	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00052	52		 push	 edx
  00053	b8 04 00 00 00	 mov	 eax, 4
  00058	c1 e0 00	 shl	 eax, 0
  0005b	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0005e	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00061	52		 push	 edx
  00062	b8 04 00 00 00	 mov	 eax, 4
  00067	c1 e0 00	 shl	 eax, 0
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  0006d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00070	52		 push	 edx
  00071	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 __ADD_UNIT
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 45   :     c = _ADD_UNIT(c, xp[2], yp[2], &zp[2]);

  00081	b9 04 00 00 00	 mov	 ecx, 4
  00086	d1 e1		 shl	 ecx, 1
  00088	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  0008b	51		 push	 ecx
  0008c	ba 04 00 00 00	 mov	 edx, 4
  00091	d1 e2		 shl	 edx, 1
  00093	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00096	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00099	51		 push	 ecx
  0009a	ba 04 00 00 00	 mov	 edx, 4
  0009f	d1 e2		 shl	 edx, 1
  000a1	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  000a4	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  000a7	51		 push	 ecx
  000a8	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  000ac	52		 push	 edx
  000ad	e8 00 00 00 00	 call	 __ADD_UNIT
  000b2	83 c4 10	 add	 esp, 16			; 00000010H
  000b5	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 46   :     c = _ADD_UNIT(c, xp[3], yp[3], &zp[3]);

  000b8	b8 04 00 00 00	 mov	 eax, 4
  000bd	6b c8 03	 imul	 ecx, eax, 3
  000c0	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  000c3	51		 push	 ecx
  000c4	ba 04 00 00 00	 mov	 edx, 4
  000c9	6b c2 03	 imul	 eax, edx, 3
  000cc	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  000cf	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  000d2	52		 push	 edx
  000d3	b8 04 00 00 00	 mov	 eax, 4
  000d8	6b c8 03	 imul	 ecx, eax, 3
  000db	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  000de	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  000e1	50		 push	 eax
  000e2	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  000e6	51		 push	 ecx
  000e7	e8 00 00 00 00	 call	 __ADD_UNIT
  000ec	83 c4 10	 add	 esp, 16			; 00000010H
  000ef	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 47   :     c = _ADD_UNIT(c, xp[4], yp[4], &zp[4]);

  000f2	ba 04 00 00 00	 mov	 edx, 4
  000f7	c1 e2 02	 shl	 edx, 2
  000fa	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  000fd	52		 push	 edx
  000fe	b8 04 00 00 00	 mov	 eax, 4
  00103	c1 e0 02	 shl	 eax, 2
  00106	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00109	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0010c	52		 push	 edx
  0010d	b8 04 00 00 00	 mov	 eax, 4
  00112	c1 e0 02	 shl	 eax, 2
  00115	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00118	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0011b	52		 push	 edx
  0011c	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00120	50		 push	 eax
  00121	e8 00 00 00 00	 call	 __ADD_UNIT
  00126	83 c4 10	 add	 esp, 16			; 00000010H
  00129	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 48   :     c = _ADD_UNIT(c, xp[5], yp[5], &zp[5]);

  0012c	b9 04 00 00 00	 mov	 ecx, 4
  00131	6b d1 05	 imul	 edx, ecx, 5
  00134	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00137	52		 push	 edx
  00138	b8 04 00 00 00	 mov	 eax, 4
  0013d	6b c8 05	 imul	 ecx, eax, 5
  00140	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  00143	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00146	50		 push	 eax
  00147	b9 04 00 00 00	 mov	 ecx, 4
  0014c	6b d1 05	 imul	 edx, ecx, 5
  0014f	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  00152	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00155	51		 push	 ecx
  00156	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  0015a	52		 push	 edx
  0015b	e8 00 00 00 00	 call	 __ADD_UNIT
  00160	83 c4 10	 add	 esp, 16			; 00000010H
  00163	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 49   :     c = _ADD_UNIT(c, xp[6], yp[6], &zp[6]);

  00166	b8 04 00 00 00	 mov	 eax, 4
  0016b	6b c8 06	 imul	 ecx, eax, 6
  0016e	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00171	51		 push	 ecx
  00172	ba 04 00 00 00	 mov	 edx, 4
  00177	6b c2 06	 imul	 eax, edx, 6
  0017a	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0017d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00180	52		 push	 edx
  00181	b8 04 00 00 00	 mov	 eax, 4
  00186	6b c8 06	 imul	 ecx, eax, 6
  00189	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  0018c	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0018f	50		 push	 eax
  00190	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  00194	51		 push	 ecx
  00195	e8 00 00 00 00	 call	 __ADD_UNIT
  0019a	83 c4 10	 add	 esp, 16			; 00000010H
  0019d	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 50   :     c = _ADD_UNIT(c, xp[7], yp[7], &zp[7]);

  001a0	ba 04 00 00 00	 mov	 edx, 4
  001a5	6b c2 07	 imul	 eax, edx, 7
  001a8	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  001ab	50		 push	 eax
  001ac	b9 04 00 00 00	 mov	 ecx, 4
  001b1	6b d1 07	 imul	 edx, ecx, 7
  001b4	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  001b7	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  001ba	51		 push	 ecx
  001bb	ba 04 00 00 00	 mov	 edx, 4
  001c0	6b c2 07	 imul	 eax, edx, 7
  001c3	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  001c6	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  001c9	52		 push	 edx
  001ca	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  001ce	50		 push	 eax
  001cf	e8 00 00 00 00	 call	 __ADD_UNIT
  001d4	83 c4 10	 add	 esp, 16			; 00000010H
  001d7	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 51   :     c = _ADD_UNIT(c, xp[8], yp[8], &zp[8]);

  001da	b9 04 00 00 00	 mov	 ecx, 4
  001df	c1 e1 03	 shl	 ecx, 3
  001e2	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  001e5	51		 push	 ecx
  001e6	ba 04 00 00 00	 mov	 edx, 4
  001eb	c1 e2 03	 shl	 edx, 3
  001ee	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  001f1	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  001f4	51		 push	 ecx
  001f5	ba 04 00 00 00	 mov	 edx, 4
  001fa	c1 e2 03	 shl	 edx, 3
  001fd	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  00200	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00203	51		 push	 ecx
  00204	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  00208	52		 push	 edx
  00209	e8 00 00 00 00	 call	 __ADD_UNIT
  0020e	83 c4 10	 add	 esp, 16			; 00000010H
  00211	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 52   :     c = _ADD_UNIT(c, xp[9], yp[9], &zp[9]);

  00214	b8 04 00 00 00	 mov	 eax, 4
  00219	6b c8 09	 imul	 ecx, eax, 9
  0021c	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  0021f	51		 push	 ecx
  00220	ba 04 00 00 00	 mov	 edx, 4
  00225	6b c2 09	 imul	 eax, edx, 9
  00228	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0022b	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0022e	52		 push	 edx
  0022f	b8 04 00 00 00	 mov	 eax, 4
  00234	6b c8 09	 imul	 ecx, eax, 9
  00237	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  0023a	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0023d	50		 push	 eax
  0023e	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  00242	51		 push	 ecx
  00243	e8 00 00 00 00	 call	 __ADD_UNIT
  00248	83 c4 10	 add	 esp, 16			; 00000010H
  0024b	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 53   :     c = _ADD_UNIT(c, xp[10], yp[10], &zp[10]);

  0024e	ba 04 00 00 00	 mov	 edx, 4
  00253	6b c2 0a	 imul	 eax, edx, 10
  00256	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  00259	50		 push	 eax
  0025a	b9 04 00 00 00	 mov	 ecx, 4
  0025f	6b d1 0a	 imul	 edx, ecx, 10
  00262	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00265	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00268	51		 push	 ecx
  00269	ba 04 00 00 00	 mov	 edx, 4
  0026e	6b c2 0a	 imul	 eax, edx, 10
  00271	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00274	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00277	52		 push	 edx
  00278	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  0027c	50		 push	 eax
  0027d	e8 00 00 00 00	 call	 __ADD_UNIT
  00282	83 c4 10	 add	 esp, 16			; 00000010H
  00285	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 54   :     c = _ADD_UNIT(c, xp[11], yp[11], &zp[11]);

  00288	b9 04 00 00 00	 mov	 ecx, 4
  0028d	6b d1 0b	 imul	 edx, ecx, 11
  00290	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00293	52		 push	 edx
  00294	b8 04 00 00 00	 mov	 eax, 4
  00299	6b c8 0b	 imul	 ecx, eax, 11
  0029c	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  0029f	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  002a2	50		 push	 eax
  002a3	b9 04 00 00 00	 mov	 ecx, 4
  002a8	6b d1 0b	 imul	 edx, ecx, 11
  002ab	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  002ae	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  002b1	51		 push	 ecx
  002b2	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  002b6	52		 push	 edx
  002b7	e8 00 00 00 00	 call	 __ADD_UNIT
  002bc	83 c4 10	 add	 esp, 16			; 00000010H
  002bf	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 55   :     c = _ADD_UNIT(c, xp[12], yp[12], &zp[12]);

  002c2	b8 04 00 00 00	 mov	 eax, 4
  002c7	6b c8 0c	 imul	 ecx, eax, 12
  002ca	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  002cd	51		 push	 ecx
  002ce	ba 04 00 00 00	 mov	 edx, 4
  002d3	6b c2 0c	 imul	 eax, edx, 12
  002d6	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  002d9	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  002dc	52		 push	 edx
  002dd	b8 04 00 00 00	 mov	 eax, 4
  002e2	6b c8 0c	 imul	 ecx, eax, 12
  002e5	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  002e8	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  002eb	50		 push	 eax
  002ec	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  002f0	51		 push	 ecx
  002f1	e8 00 00 00 00	 call	 __ADD_UNIT
  002f6	83 c4 10	 add	 esp, 16			; 00000010H
  002f9	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 56   :     c = _ADD_UNIT(c, xp[13], yp[13], &zp[13]);

  002fc	ba 04 00 00 00	 mov	 edx, 4
  00301	6b c2 0d	 imul	 eax, edx, 13
  00304	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  00307	50		 push	 eax
  00308	b9 04 00 00 00	 mov	 ecx, 4
  0030d	6b d1 0d	 imul	 edx, ecx, 13
  00310	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00313	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00316	51		 push	 ecx
  00317	ba 04 00 00 00	 mov	 edx, 4
  0031c	6b c2 0d	 imul	 eax, edx, 13
  0031f	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00322	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00325	52		 push	 edx
  00326	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  0032a	50		 push	 eax
  0032b	e8 00 00 00 00	 call	 __ADD_UNIT
  00330	83 c4 10	 add	 esp, 16			; 00000010H
  00333	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 57   :     c = _ADD_UNIT(c, xp[14], yp[14], &zp[14]);

  00336	b9 04 00 00 00	 mov	 ecx, 4
  0033b	6b d1 0e	 imul	 edx, ecx, 14
  0033e	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00341	52		 push	 edx
  00342	b8 04 00 00 00	 mov	 eax, 4
  00347	6b c8 0e	 imul	 ecx, eax, 14
  0034a	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  0034d	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00350	50		 push	 eax
  00351	b9 04 00 00 00	 mov	 ecx, 4
  00356	6b d1 0e	 imul	 edx, ecx, 14
  00359	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  0035c	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0035f	51		 push	 ecx
  00360	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  00364	52		 push	 edx
  00365	e8 00 00 00 00	 call	 __ADD_UNIT
  0036a	83 c4 10	 add	 esp, 16			; 00000010H
  0036d	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 58   :     c = _ADD_UNIT(c, xp[15], yp[15], &zp[15]);

  00370	b8 04 00 00 00	 mov	 eax, 4
  00375	6b c8 0f	 imul	 ecx, eax, 15
  00378	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  0037b	51		 push	 ecx
  0037c	ba 04 00 00 00	 mov	 edx, 4
  00381	6b c2 0f	 imul	 eax, edx, 15
  00384	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00387	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0038a	52		 push	 edx
  0038b	b8 04 00 00 00	 mov	 eax, 4
  00390	6b c8 0f	 imul	 ecx, eax, 15
  00393	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  00396	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00399	50		 push	 eax
  0039a	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  0039e	51		 push	 ecx
  0039f	e8 00 00 00 00	 call	 __ADD_UNIT
  003a4	83 c4 10	 add	 esp, 16			; 00000010H
  003a7	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 59   :     c = _ADD_UNIT(c, xp[16], yp[16], &zp[16]);

  003aa	ba 04 00 00 00	 mov	 edx, 4
  003af	c1 e2 04	 shl	 edx, 4
  003b2	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  003b5	52		 push	 edx
  003b6	b8 04 00 00 00	 mov	 eax, 4
  003bb	c1 e0 04	 shl	 eax, 4
  003be	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  003c1	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  003c4	52		 push	 edx
  003c5	b8 04 00 00 00	 mov	 eax, 4
  003ca	c1 e0 04	 shl	 eax, 4
  003cd	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  003d0	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  003d3	52		 push	 edx
  003d4	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  003d8	50		 push	 eax
  003d9	e8 00 00 00 00	 call	 __ADD_UNIT
  003de	83 c4 10	 add	 esp, 16			; 00000010H
  003e1	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 60   :     c = _ADD_UNIT(c, xp[17], yp[17], &zp[17]);

  003e4	b9 04 00 00 00	 mov	 ecx, 4
  003e9	6b d1 11	 imul	 edx, ecx, 17
  003ec	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  003ef	52		 push	 edx
  003f0	b8 04 00 00 00	 mov	 eax, 4
  003f5	6b c8 11	 imul	 ecx, eax, 17
  003f8	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  003fb	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  003fe	50		 push	 eax
  003ff	b9 04 00 00 00	 mov	 ecx, 4
  00404	6b d1 11	 imul	 edx, ecx, 17
  00407	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  0040a	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0040d	51		 push	 ecx
  0040e	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  00412	52		 push	 edx
  00413	e8 00 00 00 00	 call	 __ADD_UNIT
  00418	83 c4 10	 add	 esp, 16			; 00000010H
  0041b	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 61   :     c = _ADD_UNIT(c, xp[18], yp[18], &zp[18]);

  0041e	b8 04 00 00 00	 mov	 eax, 4
  00423	6b c8 12	 imul	 ecx, eax, 18
  00426	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00429	51		 push	 ecx
  0042a	ba 04 00 00 00	 mov	 edx, 4
  0042f	6b c2 12	 imul	 eax, edx, 18
  00432	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00435	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00438	52		 push	 edx
  00439	b8 04 00 00 00	 mov	 eax, 4
  0043e	6b c8 12	 imul	 ecx, eax, 18
  00441	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  00444	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00447	50		 push	 eax
  00448	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  0044c	51		 push	 ecx
  0044d	e8 00 00 00 00	 call	 __ADD_UNIT
  00452	83 c4 10	 add	 esp, 16			; 00000010H
  00455	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 62   :     c = _ADD_UNIT(c, xp[19], yp[19], &zp[19]);

  00458	ba 04 00 00 00	 mov	 edx, 4
  0045d	6b c2 13	 imul	 eax, edx, 19
  00460	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  00463	50		 push	 eax
  00464	b9 04 00 00 00	 mov	 ecx, 4
  00469	6b d1 13	 imul	 edx, ecx, 19
  0046c	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  0046f	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00472	51		 push	 ecx
  00473	ba 04 00 00 00	 mov	 edx, 4
  00478	6b c2 13	 imul	 eax, edx, 19
  0047b	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  0047e	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00481	52		 push	 edx
  00482	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00486	50		 push	 eax
  00487	e8 00 00 00 00	 call	 __ADD_UNIT
  0048c	83 c4 10	 add	 esp, 16			; 00000010H
  0048f	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 63   :     c = _ADD_UNIT(c, xp[20], yp[20], &zp[20]);

  00492	b9 04 00 00 00	 mov	 ecx, 4
  00497	6b d1 14	 imul	 edx, ecx, 20
  0049a	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  0049d	52		 push	 edx
  0049e	b8 04 00 00 00	 mov	 eax, 4
  004a3	6b c8 14	 imul	 ecx, eax, 20
  004a6	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  004a9	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  004ac	50		 push	 eax
  004ad	b9 04 00 00 00	 mov	 ecx, 4
  004b2	6b d1 14	 imul	 edx, ecx, 20
  004b5	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  004b8	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  004bb	51		 push	 ecx
  004bc	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  004c0	52		 push	 edx
  004c1	e8 00 00 00 00	 call	 __ADD_UNIT
  004c6	83 c4 10	 add	 esp, 16			; 00000010H
  004c9	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 64   :     c = _ADD_UNIT(c, xp[21], yp[21], &zp[21]);

  004cc	b8 04 00 00 00	 mov	 eax, 4
  004d1	6b c8 15	 imul	 ecx, eax, 21
  004d4	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  004d7	51		 push	 ecx
  004d8	ba 04 00 00 00	 mov	 edx, 4
  004dd	6b c2 15	 imul	 eax, edx, 21
  004e0	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  004e3	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  004e6	52		 push	 edx
  004e7	b8 04 00 00 00	 mov	 eax, 4
  004ec	6b c8 15	 imul	 ecx, eax, 21
  004ef	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  004f2	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  004f5	50		 push	 eax
  004f6	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  004fa	51		 push	 ecx
  004fb	e8 00 00 00 00	 call	 __ADD_UNIT
  00500	83 c4 10	 add	 esp, 16			; 00000010H
  00503	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 65   :     c = _ADD_UNIT(c, xp[22], yp[22], &zp[22]);

  00506	ba 04 00 00 00	 mov	 edx, 4
  0050b	6b c2 16	 imul	 eax, edx, 22
  0050e	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  00511	50		 push	 eax
  00512	b9 04 00 00 00	 mov	 ecx, 4
  00517	6b d1 16	 imul	 edx, ecx, 22
  0051a	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  0051d	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00520	51		 push	 ecx
  00521	ba 04 00 00 00	 mov	 edx, 4
  00526	6b c2 16	 imul	 eax, edx, 22
  00529	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  0052c	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0052f	52		 push	 edx
  00530	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00534	50		 push	 eax
  00535	e8 00 00 00 00	 call	 __ADD_UNIT
  0053a	83 c4 10	 add	 esp, 16			; 00000010H
  0053d	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 66   :     c = _ADD_UNIT(c, xp[23], yp[23], &zp[23]);

  00540	b9 04 00 00 00	 mov	 ecx, 4
  00545	6b d1 17	 imul	 edx, ecx, 23
  00548	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  0054b	52		 push	 edx
  0054c	b8 04 00 00 00	 mov	 eax, 4
  00551	6b c8 17	 imul	 ecx, eax, 23
  00554	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  00557	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0055a	50		 push	 eax
  0055b	b9 04 00 00 00	 mov	 ecx, 4
  00560	6b d1 17	 imul	 edx, ecx, 23
  00563	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  00566	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00569	51		 push	 ecx
  0056a	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  0056e	52		 push	 edx
  0056f	e8 00 00 00 00	 call	 __ADD_UNIT
  00574	83 c4 10	 add	 esp, 16			; 00000010H
  00577	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 67   :     c = _ADD_UNIT(c, xp[24], yp[24], &zp[24]);

  0057a	b8 04 00 00 00	 mov	 eax, 4
  0057f	6b c8 18	 imul	 ecx, eax, 24
  00582	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00585	51		 push	 ecx
  00586	ba 04 00 00 00	 mov	 edx, 4
  0058b	6b c2 18	 imul	 eax, edx, 24
  0058e	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00591	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00594	52		 push	 edx
  00595	b8 04 00 00 00	 mov	 eax, 4
  0059a	6b c8 18	 imul	 ecx, eax, 24
  0059d	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  005a0	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  005a3	50		 push	 eax
  005a4	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  005a8	51		 push	 ecx
  005a9	e8 00 00 00 00	 call	 __ADD_UNIT
  005ae	83 c4 10	 add	 esp, 16			; 00000010H
  005b1	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 68   :     c = _ADD_UNIT(c, xp[25], yp[25], &zp[25]);

  005b4	ba 04 00 00 00	 mov	 edx, 4
  005b9	6b c2 19	 imul	 eax, edx, 25
  005bc	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  005bf	50		 push	 eax
  005c0	b9 04 00 00 00	 mov	 ecx, 4
  005c5	6b d1 19	 imul	 edx, ecx, 25
  005c8	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  005cb	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  005ce	51		 push	 ecx
  005cf	ba 04 00 00 00	 mov	 edx, 4
  005d4	6b c2 19	 imul	 eax, edx, 25
  005d7	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  005da	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  005dd	52		 push	 edx
  005de	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  005e2	50		 push	 eax
  005e3	e8 00 00 00 00	 call	 __ADD_UNIT
  005e8	83 c4 10	 add	 esp, 16			; 00000010H
  005eb	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 69   :     c = _ADD_UNIT(c, xp[26], yp[26], &zp[26]);

  005ee	b9 04 00 00 00	 mov	 ecx, 4
  005f3	6b d1 1a	 imul	 edx, ecx, 26
  005f6	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  005f9	52		 push	 edx
  005fa	b8 04 00 00 00	 mov	 eax, 4
  005ff	6b c8 1a	 imul	 ecx, eax, 26
  00602	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  00605	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00608	50		 push	 eax
  00609	b9 04 00 00 00	 mov	 ecx, 4
  0060e	6b d1 1a	 imul	 edx, ecx, 26
  00611	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  00614	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00617	51		 push	 ecx
  00618	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  0061c	52		 push	 edx
  0061d	e8 00 00 00 00	 call	 __ADD_UNIT
  00622	83 c4 10	 add	 esp, 16			; 00000010H
  00625	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 70   :     c = _ADD_UNIT(c, xp[27], yp[27], &zp[27]);

  00628	b8 04 00 00 00	 mov	 eax, 4
  0062d	6b c8 1b	 imul	 ecx, eax, 27
  00630	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00633	51		 push	 ecx
  00634	ba 04 00 00 00	 mov	 edx, 4
  00639	6b c2 1b	 imul	 eax, edx, 27
  0063c	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0063f	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00642	52		 push	 edx
  00643	b8 04 00 00 00	 mov	 eax, 4
  00648	6b c8 1b	 imul	 ecx, eax, 27
  0064b	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  0064e	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00651	50		 push	 eax
  00652	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  00656	51		 push	 ecx
  00657	e8 00 00 00 00	 call	 __ADD_UNIT
  0065c	83 c4 10	 add	 esp, 16			; 00000010H
  0065f	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 71   :     c = _ADD_UNIT(c, xp[28], yp[28], &zp[28]);

  00662	ba 04 00 00 00	 mov	 edx, 4
  00667	6b c2 1c	 imul	 eax, edx, 28
  0066a	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  0066d	50		 push	 eax
  0066e	b9 04 00 00 00	 mov	 ecx, 4
  00673	6b d1 1c	 imul	 edx, ecx, 28
  00676	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00679	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0067c	51		 push	 ecx
  0067d	ba 04 00 00 00	 mov	 edx, 4
  00682	6b c2 1c	 imul	 eax, edx, 28
  00685	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00688	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0068b	52		 push	 edx
  0068c	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00690	50		 push	 eax
  00691	e8 00 00 00 00	 call	 __ADD_UNIT
  00696	83 c4 10	 add	 esp, 16			; 00000010H
  00699	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 72   :     c = _ADD_UNIT(c, xp[29], yp[29], &zp[29]);

  0069c	b9 04 00 00 00	 mov	 ecx, 4
  006a1	6b d1 1d	 imul	 edx, ecx, 29
  006a4	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  006a7	52		 push	 edx
  006a8	b8 04 00 00 00	 mov	 eax, 4
  006ad	6b c8 1d	 imul	 ecx, eax, 29
  006b0	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  006b3	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  006b6	50		 push	 eax
  006b7	b9 04 00 00 00	 mov	 ecx, 4
  006bc	6b d1 1d	 imul	 edx, ecx, 29
  006bf	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  006c2	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  006c5	51		 push	 ecx
  006c6	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  006ca	52		 push	 edx
  006cb	e8 00 00 00 00	 call	 __ADD_UNIT
  006d0	83 c4 10	 add	 esp, 16			; 00000010H
  006d3	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 73   :     c = _ADD_UNIT(c, xp[30], yp[30], &zp[30]);

  006d6	b8 04 00 00 00	 mov	 eax, 4
  006db	6b c8 1e	 imul	 ecx, eax, 30
  006de	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  006e1	51		 push	 ecx
  006e2	ba 04 00 00 00	 mov	 edx, 4
  006e7	6b c2 1e	 imul	 eax, edx, 30
  006ea	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  006ed	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  006f0	52		 push	 edx
  006f1	b8 04 00 00 00	 mov	 eax, 4
  006f6	6b c8 1e	 imul	 ecx, eax, 30
  006f9	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  006fc	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  006ff	50		 push	 eax
  00700	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  00704	51		 push	 ecx
  00705	e8 00 00 00 00	 call	 __ADD_UNIT
  0070a	83 c4 10	 add	 esp, 16			; 00000010H
  0070d	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 74   :     c = _ADD_UNIT(c, xp[31], yp[31], &zp[31]);

  00710	ba 04 00 00 00	 mov	 edx, 4
  00715	6b c2 1f	 imul	 eax, edx, 31
  00718	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  0071b	50		 push	 eax
  0071c	b9 04 00 00 00	 mov	 ecx, 4
  00721	6b d1 1f	 imul	 edx, ecx, 31
  00724	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00727	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0072a	51		 push	 ecx
  0072b	ba 04 00 00 00	 mov	 edx, 4
  00730	6b c2 1f	 imul	 eax, edx, 31
  00733	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00736	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00739	52		 push	 edx
  0073a	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  0073e	50		 push	 eax
  0073f	e8 00 00 00 00	 call	 __ADD_UNIT
  00744	83 c4 10	 add	 esp, 16			; 00000010H
  00747	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 75   : #elif defined(__GNUC__)
; 76   : #ifdef _M_IX86
; 77   :     __asm__ volatile (
; 78   :         "addb\t$-1, %0\n\t"
; 79   :         "movl\t(%1), %%ecx\n\t"
; 80   :         "adcl\t(%2), %%ecx\n\t"
; 81   :         "movl\t%%ecx, (%3)\n\t"
; 82   :         "movl\t4(%1), %%ecx\n\t"
; 83   :         "adcl\t4(%2), %%ecx\n\t"
; 84   :         "movl\t%%ecx, 4(%3)\n\t"
; 85   :         "movl\t8(%1), %%ecx\n\t"
; 86   :         "adcl\t8(%2), %%ecx\n\t"
; 87   :         "movl\t%%ecx, 8(%3)\n\t"
; 88   :         "movl\t12(%1), %%ecx\n\t"
; 89   :         "adcl\t12(%2), %%ecx\n\t"
; 90   :         "movl\t%%ecx, 12(%3)\n\t"
; 91   :         "movl\t16(%1), %%ecx\n\t"
; 92   :         "adcl\t16(%2), %%ecx\n\t"
; 93   :         "movl\t%%ecx, 16(%3)\n\t"
; 94   :         "movl\t20(%1), %%ecx\n\t"
; 95   :         "adcl\t20(%2), %%ecx\n\t"
; 96   :         "movl\t%%ecx, 20(%3)\n\t"
; 97   :         "movl\t24(%1), %%ecx\n\t"
; 98   :         "adcl\t24(%2), %%ecx\n\t"
; 99   :         "movl\t%%ecx, 24(%3)\n\t"
; 100  :         "movl\t28(%1), %%ecx\n\t"
; 101  :         "adcl\t28(%2), %%ecx\n\t"
; 102  :         "movl\t%%ecx, 28(%3)\n\t"
; 103  :         "movl\t32(%1), %%ecx\n\t"
; 104  :         "adcl\t32(%2), %%ecx\n\t"
; 105  :         "movl\t%%ecx, 32(%3)\n\t"
; 106  :         "movl\t36(%1), %%ecx\n\t"
; 107  :         "adcl\t36(%2), %%ecx\n\t"
; 108  :         "movl\t%%ecx, 36(%3)\n\t"
; 109  :         "movl\t40(%1), %%ecx\n\t"
; 110  :         "adcl\t40(%2), %%ecx\n\t"
; 111  :         "movl\t%%ecx, 40(%3)\n\t"
; 112  :         "movl\t44(%1), %%ecx\n\t"
; 113  :         "adcl\t44(%2), %%ecx\n\t"
; 114  :         "movl\t%%ecx, 44(%3)\n\t"
; 115  :         "movl\t48(%1), %%ecx\n\t"
; 116  :         "adcl\t48(%2), %%ecx\n\t"
; 117  :         "movl\t%%ecx, 48(%3)\n\t"
; 118  :         "movl\t52(%1), %%ecx\n\t"
; 119  :         "adcl\t52(%2), %%ecx\n\t"
; 120  :         "movl\t%%ecx, 52(%3)\n\t"
; 121  :         "movl\t56(%1), %%ecx\n\t"
; 122  :         "adcl\t56(%2), %%ecx\n\t"
; 123  :         "movl\t%%ecx, 56(%3)\n\t"
; 124  :         "movl\t60(%1), %%ecx\n\t"
; 125  :         "adcl\t60(%2), %%ecx\n\t"
; 126  :         "movl\t%%ecx, 60(%3)\n\t"
; 127  :         "movl\t64(%1), %%ecx\n\t"
; 128  :         "adcl\t64(%2), %%ecx\n\t"
; 129  :         "movl\t%%ecx, 64(%3)\n\t"
; 130  :         "movl\t68(%1), %%ecx\n\t"
; 131  :         "adcl\t68(%2), %%ecx\n\t"
; 132  :         "movl\t%%ecx, 68(%3)\n\t"
; 133  :         "movl\t72(%1), %%ecx\n\t"
; 134  :         "adcl\t72(%2), %%ecx\n\t"
; 135  :         "movl\t%%ecx, 72(%3)\n\t"
; 136  :         "movl\t76(%1), %%ecx\n\t"
; 137  :         "adcl\t76(%2), %%ecx\n\t"
; 138  :         "movl\t%%ecx, 76(%3)\n\t"
; 139  :         "movl\t80(%1), %%ecx\n\t"
; 140  :         "adcl\t80(%2), %%ecx\n\t"
; 141  :         "movl\t%%ecx, 80(%3)\n\t"
; 142  :         "movl\t84(%1), %%ecx\n\t"
; 143  :         "adcl\t84(%2), %%ecx\n\t"
; 144  :         "movl\t%%ecx, 84(%3)\n\t"
; 145  :         "movl\t88(%1), %%ecx\n\t"
; 146  :         "adcl\t88(%2), %%ecx\n\t"
; 147  :         "movl\t%%ecx, 88(%3)\n\t"
; 148  :         "movl\t92(%1), %%ecx\n\t"
; 149  :         "adcl\t92(%2), %%ecx\n\t"
; 150  :         "movl\t%%ecx, 92(%3)\n\t"
; 151  :         "movl\t96(%1), %%ecx\n\t"
; 152  :         "adcl\t96(%2), %%ecx\n\t"
; 153  :         "movl\t%%ecx, 96(%3)\n\t"
; 154  :         "movl\t100(%1), %%ecx\n\t"
; 155  :         "adcl\t100(%2), %%ecx\n\t"
; 156  :         "movl\t%%ecx, 100(%3)\n\t"
; 157  :         "movl\t104(%1), %%ecx\n\t"
; 158  :         "adcl\t104(%2), %%ecx\n\t"
; 159  :         "movl\t%%ecx, 104(%3)\n\t"
; 160  :         "movl\t108(%1), %%ecx\n\t"
; 161  :         "adcl\t108(%2), %%ecx\n\t"
; 162  :         "movl\t%%ecx, 108(%3)\n\t"
; 163  :         "movl\t112(%1), %%ecx\n\t"
; 164  :         "adcl\t112(%2), %%ecx\n\t"
; 165  :         "movl\t%%ecx, 112(%3)\n\t"
; 166  :         "movl\t116(%1), %%ecx\n\t"
; 167  :         "adcl\t116(%2), %%ecx\n\t"
; 168  :         "movl\t%%ecx, 116(%3)\n\t"
; 169  :         "movl\t120(%1), %%ecx\n\t"
; 170  :         "adcl\t120(%2), %%ecx\n\t"
; 171  :         "movl\t%%ecx, 120(%3)\n\t"
; 172  :         "movl\t124(%1), %%ecx\n\t"
; 173  :         "adcl\t124(%2), %%ecx\n\t"
; 174  :         "movl\t%%ecx, 124(%3)\n\t"
; 175  :         "setc\t%0"
; 176  :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 177  :         :
; 178  :         : "cc", "memory", "%ecx"
; 179  : );
; 180  : #elif defined(_M_X64)
; 181  :     __asm__ volatile (
; 182  :         "addb\t$-1, %0\n\t"
; 183  :         "movq\t(%1), %%rcx\n\t"
; 184  :         "adcq\t(%2), %%rcx\n\t"
; 185  :         "movq\t%%rcx, (%3)\n\t"
; 186  :         "movq\t8(%1), %%rcx\n\t"
; 187  :         "adcq\t8(%2), %%rcx\n\t"
; 188  :         "movq\t%%rcx, 8(%3)\n\t"
; 189  :         "movq\t16(%1), %%rcx\n\t"
; 190  :         "adcq\t16(%2), %%rcx\n\t"
; 191  :         "movq\t%%rcx, 16(%3)\n\t"
; 192  :         "movq\t24(%1), %%rcx\n\t"
; 193  :         "adcq\t24(%2), %%rcx\n\t"
; 194  :         "movq\t%%rcx, 24(%3)\n\t"
; 195  :         "movq\t32(%1), %%rcx\n\t"
; 196  :         "adcq\t32(%2), %%rcx\n\t"
; 197  :         "movq\t%%rcx, 32(%3)\n\t"
; 198  :         "movq\t40(%1), %%rcx\n\t"
; 199  :         "adcq\t40(%2), %%rcx\n\t"
; 200  :         "movq\t%%rcx, 40(%3)\n\t"
; 201  :         "movq\t48(%1), %%rcx\n\t"
; 202  :         "adcq\t48(%2), %%rcx\n\t"
; 203  :         "movq\t%%rcx, 48(%3)\n\t"
; 204  :         "movq\t56(%1), %%rcx\n\t"
; 205  :         "adcq\t56(%2), %%rcx\n\t"
; 206  :         "movq\t%%rcx, 56(%3)\n\t"
; 207  :         "movq\t64(%1), %%rcx\n\t"
; 208  :         "adcq\t64(%2), %%rcx\n\t"
; 209  :         "movq\t%%rcx, 64(%3)\n\t"
; 210  :         "movq\t72(%1), %%rcx\n\t"
; 211  :         "adcq\t72(%2), %%rcx\n\t"
; 212  :         "movq\t%%rcx, 72(%3)\n\t"
; 213  :         "movq\t80(%1), %%rcx\n\t"
; 214  :         "adcq\t80(%2), %%rcx\n\t"
; 215  :         "movq\t%%rcx, 80(%3)\n\t"
; 216  :         "movq\t88(%1), %%rcx\n\t"
; 217  :         "adcq\t88(%2), %%rcx\n\t"
; 218  :         "movq\t%%rcx, 88(%3)\n\t"
; 219  :         "movq\t96(%1), %%rcx\n\t"
; 220  :         "adcq\t96(%2), %%rcx\n\t"
; 221  :         "movq\t%%rcx, 96(%3)\n\t"
; 222  :         "movq\t104(%1), %%rcx\n\t"
; 223  :         "adcq\t104(%2), %%rcx\n\t"
; 224  :         "movq\t%%rcx, 104(%3)\n\t"
; 225  :         "movq\t112(%1), %%rcx\n\t"
; 226  :         "adcq\t112(%2), %%rcx\n\t"
; 227  :         "movq\t%%rcx, 112(%3)\n\t"
; 228  :         "movq\t120(%1), %%rcx\n\t"
; 229  :         "adcq\t120(%2), %%rcx\n\t"
; 230  :         "movq\t%%rcx, 120(%3)\n\t"
; 231  :         "movq\t128(%1), %%rcx\n\t"
; 232  :         "adcq\t128(%2), %%rcx\n\t"
; 233  :         "movq\t%%rcx, 128(%3)\n\t"
; 234  :         "movq\t136(%1), %%rcx\n\t"
; 235  :         "adcq\t136(%2), %%rcx\n\t"
; 236  :         "movq\t%%rcx, 136(%3)\n\t"
; 237  :         "movq\t144(%1), %%rcx\n\t"
; 238  :         "adcq\t144(%2), %%rcx\n\t"
; 239  :         "movq\t%%rcx, 144(%3)\n\t"
; 240  :         "movq\t152(%1), %%rcx\n\t"
; 241  :         "adcq\t152(%2), %%rcx\n\t"
; 242  :         "movq\t%%rcx, 152(%3)\n\t"
; 243  :         "movq\t160(%1), %%rcx\n\t"
; 244  :         "adcq\t160(%2), %%rcx\n\t"
; 245  :         "movq\t%%rcx, 160(%3)\n\t"
; 246  :         "movq\t168(%1), %%rcx\n\t"
; 247  :         "adcq\t168(%2), %%rcx\n\t"
; 248  :         "movq\t%%rcx, 168(%3)\n\t"
; 249  :         "movq\t176(%1), %%rcx\n\t"
; 250  :         "adcq\t176(%2), %%rcx\n\t"
; 251  :         "movq\t%%rcx, 176(%3)\n\t"
; 252  :         "movq\t184(%1), %%rcx\n\t"
; 253  :         "adcq\t184(%2), %%rcx\n\t"
; 254  :         "movq\t%%rcx, 184(%3)\n\t"
; 255  :         "movq\t192(%1), %%rcx\n\t"
; 256  :         "adcq\t192(%2), %%rcx\n\t"
; 257  :         "movq\t%%rcx, 192(%3)\n\t"
; 258  :         "movq\t200(%1), %%rcx\n\t"
; 259  :         "adcq\t200(%2), %%rcx\n\t"
; 260  :         "movq\t%%rcx, 200(%3)\n\t"
; 261  :         "movq\t208(%1), %%rcx\n\t"
; 262  :         "adcq\t208(%2), %%rcx\n\t"
; 263  :         "movq\t%%rcx, 208(%3)\n\t"
; 264  :         "movq\t216(%1), %%rcx\n\t"
; 265  :         "adcq\t216(%2), %%rcx\n\t"
; 266  :         "movq\t%%rcx, 216(%3)\n\t"
; 267  :         "movq\t224(%1), %%rcx\n\t"
; 268  :         "adcq\t224(%2), %%rcx\n\t"
; 269  :         "movq\t%%rcx, 224(%3)\n\t"
; 270  :         "movq\t232(%1), %%rcx\n\t"
; 271  :         "adcq\t232(%2), %%rcx\n\t"
; 272  :         "movq\t%%rcx, 232(%3)\n\t"
; 273  :         "movq\t240(%1), %%rcx\n\t"
; 274  :         "adcq\t240(%2), %%rcx\n\t"
; 275  :         "movq\t%%rcx, 240(%3)\n\t"
; 276  :         "movq\t248(%1), %%rcx\n\t"
; 277  :         "adcq\t248(%2), %%rcx\n\t"
; 278  :         "movq\t%%rcx, 248(%3)\n\t"
; 279  :         "setc\t%0"
; 280  :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 281  :         :
; 282  :         : "cc", "memory", "%rcx"
; 283  : );
; 284  : #else
; 285  : #error unknown platform
; 286  : #endif
; 287  : #else
; 288  : #error unknown compiler
; 289  : #endif
; 290  :     return (c);

  0074a	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]

; 291  : }

  0074d	3b ec		 cmp	 ebp, esp
  0074f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00754	5d		 pop	 ebp
  00755	c3		 ret	 0
__ADD_32WORDS_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT PROC

; 454  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 455  :             if (x == 0)

  00025	83 7d 08 00	 cmp	 DWORD PTR _x$[ebp], 0
  00029	75 07		 jne	 SHORT $LN2@LZCNT_ALT_

; 456  :                 return (sizeof(x) * 8);

  0002b	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00030	eb 0f		 jmp	 SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 457  : #ifdef _M_IX86
; 458  :             DWORD pos;
; 459  : #ifdef _MSC_VER
; 460  :             _BitScanReverse(&pos, x);

  00032	0f bd 45 08	 bsr	 eax, DWORD PTR _x$[ebp]
  00036	89 45 f8	 mov	 DWORD PTR _pos$[ebp], eax

; 461  : #elif defined(__GNUC__)
; 462  :             __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 463  : #else
; 464  : #error unknown compiler
; 465  : #endif
; 466  : #elif defined(_M_X64)
; 467  : #ifdef _MSC_VER
; 468  :             DWORD pos;
; 469  :             _BitScanReverse64(&pos, x);
; 470  : #elif defined(__GNUC__)
; 471  :             _UINT64_T pos;
; 472  :             __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 473  : #else
; 474  : #error unknown compiler
; 475  : #endif
; 476  : #else
; 477  : #error unknown platform
; 478  : #endif
; 479  :             return (sizeof(x) * 8 - 1 - pos);

  00039	b8 1f 00 00 00	 mov	 eax, 31			; 0000001fH
  0003e	2b 45 f8	 sub	 eax, DWORD PTR _pos$[ebp]
$LN1@LZCNT_ALT_:

; 480  :         }

  00041	52		 push	 edx
  00042	8b cd		 mov	 ecx, ebp
  00044	50		 push	 eax
  00045	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@LZCNT_ALT_
  0004b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00050	58		 pop	 eax
  00051	5a		 pop	 edx
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH
  00055	3b ec		 cmp	 ebp, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
$LN6@LZCNT_ALT_:
  00060	01 00 00 00	 DD	 1
  00064	00 00 00 00	 DD	 $LN5@LZCNT_ALT_
$LN5@LZCNT_ALT_:
  00068	f8 ff ff ff	 DD	 -8			; fffffff8H
  0006c	04 00 00 00	 DD	 4
  00070	00 00 00 00	 DD	 $LN4@LZCNT_ALT_
$LN4@LZCNT_ALT_:
  00074	70		 DB	 112			; 00000070H
  00075	6f		 DB	 111			; 0000006fH
  00076	73		 DB	 115			; 00000073H
  00077	00		 DB	 0
__LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 4
__LZCNT_ALT_32 PROC

; 421  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 422  :             if (x == 0)

  00025	83 7d 08 00	 cmp	 DWORD PTR _x$[ebp], 0
  00029	75 07		 jne	 SHORT $LN2@LZCNT_ALT_

; 423  :                 return (sizeof(x) * 8);

  0002b	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00030	eb 0f		 jmp	 SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 424  :             DWORD pos;
; 425  : #ifdef _MSC_VER
; 426  :             _BitScanReverse(&pos, x);

  00032	0f bd 45 08	 bsr	 eax, DWORD PTR _x$[ebp]
  00036	89 45 f8	 mov	 DWORD PTR _pos$[ebp], eax

; 427  : #elif defined(__GNUC__)
; 428  :             __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 429  : #else
; 430  : #error unknown compiler
; 431  : #endif
; 432  :             return (sizeof(x) * 8 - 1 - pos);

  00039	b8 1f 00 00 00	 mov	 eax, 31			; 0000001fH
  0003e	2b 45 f8	 sub	 eax, DWORD PTR _pos$[ebp]
$LN1@LZCNT_ALT_:

; 433  :         }

  00041	52		 push	 edx
  00042	8b cd		 mov	 ecx, ebp
  00044	50		 push	 eax
  00045	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@LZCNT_ALT_
  0004b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00050	58		 pop	 eax
  00051	5a		 pop	 edx
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH
  00055	3b ec		 cmp	 ebp, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
$LN6@LZCNT_ALT_:
  00060	01 00 00 00	 DD	 1
  00064	00 00 00 00	 DD	 $LN5@LZCNT_ALT_
$LN5@LZCNT_ALT_:
  00068	f8 ff ff ff	 DD	 -8			; fffffff8H
  0006c	04 00 00 00	 DD	 4
  00070	00 00 00 00	 DD	 $LN4@LZCNT_ALT_
$LN4@LZCNT_ALT_:
  00074	70		 DB	 112			; 00000070H
  00075	6f		 DB	 111			; 0000006fH
  00076	73		 DB	 115			; 00000073H
  00077	00		 DB	 0
__LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADDX_UNIT PROC

; 187  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00009	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 188  : #ifdef _M_IX86
; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0000e	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  00011	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00014	8b 55 0c	 mov	 edx, DWORD PTR _u$[ebp]
  00017	8a 5d 08	 mov	 bl, BYTE PTR _carry$[ebp]
  0001a	80 c3 ff	 add	 bl, 255			; 000000ffH
  0001d	66 0f 38 f6 d1	 adcx	 edx, ecx
  00022	0f 92 c1	 setb	 cl
  00025	89 10		 mov	 DWORD PTR [eax], edx
  00027	8a c1		 mov	 al, cl

; 190  : #elif defined(_M_X64)
; 191  :             return (_addcarryx_u64(carry, u, v, w));
; 192  : #else
; 193  : #error unknown platform
; 194  : #endif
; 195  :         }

  00029	5b		 pop	 ebx
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
__ADDX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADD_UNIT PROC

; 176  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00009	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 177  : #ifdef _M_IX86
; 178  :             return (_addcarry_u32(carry, u, v, w));

  0000e	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  00011	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00014	8b 55 0c	 mov	 edx, DWORD PTR _u$[ebp]
  00017	8a 5d 08	 mov	 bl, BYTE PTR _carry$[ebp]
  0001a	80 c3 ff	 add	 bl, 255			; 000000ffH
  0001d	13 d1		 adc	 edx, ecx
  0001f	0f 92 c1	 setb	 cl
  00022	89 10		 mov	 DWORD PTR [eax], edx
  00024	8a c1		 mov	 al, cl

; 179  : #elif defined(_M_X64)
; 180  :             return (_addcarry_u64(carry, u, v, w));
; 181  : #else
; 182  : #error unknown platform
; 183  : #endif
; 184  :         }

  00026	5b		 pop	 ebx
  00027	3b ec		 cmp	 ebp, esp
  00029	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
__ADD_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
tv65 = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
__MAXIMUM_UNIT PROC

; 166  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00010	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 167  :             return (x >= y ? x : y);

  00015	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00018	3b 45 0c	 cmp	 eax, DWORD PTR _y$[ebp]
  0001b	72 08		 jb	 SHORT $LN3@MAXIMUM_UN
  0001d	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00020	89 4d fc	 mov	 DWORD PTR tv65[ebp], ecx
  00023	eb 06		 jmp	 SHORT $LN4@MAXIMUM_UN
$LN3@MAXIMUM_UN:
  00025	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  00028	89 55 fc	 mov	 DWORD PTR tv65[ebp], edx
$LN4@MAXIMUM_UN:
  0002b	8b 45 fc	 mov	 eax, DWORD PTR tv65[ebp]

; 168  :         }

  0002e	83 c4 04	 add	 esp, 4
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
__MAXIMUM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC

; 145  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 146  :             *result_high = (_UINT32_T)(value >> 32);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  00010	8b 55 0c	 mov	 edx, DWORD PTR _value$[ebp+4]
  00013	b1 20		 mov	 cl, 32			; 00000020H
  00015	e8 00 00 00 00	 call	 __aullshr
  0001a	8b 4d 10	 mov	 ecx, DWORD PTR _result_high$[ebp]
  0001d	89 01		 mov	 DWORD PTR [ecx], eax

; 147  :             return ((_UINT32_T)value);

  0001f	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]

; 148  :         }

  00022	3b ec		 cmp	 ebp, esp
  00024	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_add.cpp
_TEXT	SEGMENT
$T2 = -92						; size = 4
$T3 = -88						; size = 24
$T4 = -64						; size = 24
_w$ = -40						; size = 4
_root$ = -32						; size = 16
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 4
?PMC_Add_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z PROC ; Palmtree::Math::Core::Internal::PMC_Add_X_X

; 551  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_Add_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	57		 push	 edi
  00015	8d 7d a4	 lea	 edi, DWORD PTR [ebp-92]
  00018	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	50		 push	 eax
  0002c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET __AF70AA4D_pmc_add@cpp
  0003a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 552  :         if (u == nullptr)

  0003f	83 7d 08 00	 cmp	 DWORD PTR _u$[ebp], 0
  00043	75 20		 jne	 SHORT $LN2@PMC_Add_X_

; 553  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"u");

  00045	68 00 00 00 00	 push	 OFFSET $SG118264
  0004a	68 00 00 00 00	 push	 OFFSET $SG118265
  0004f	8d 4d c0	 lea	 ecx, DWORD PTR $T4[ebp]
  00052	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  00057	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  0005c	8d 45 c0	 lea	 eax, DWORD PTR $T4[ebp]
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@PMC_Add_X_:

; 554  :         if (v == nullptr)

  00065	83 7d 0c 00	 cmp	 DWORD PTR _v$[ebp], 0
  00069	75 20		 jne	 SHORT $LN3@PMC_Add_X_

; 555  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"v");

  0006b	68 00 00 00 00	 push	 OFFSET $SG118268
  00070	68 00 00 00 00	 push	 OFFSET $SG118269
  00075	8d 4d a8	 lea	 ecx, DWORD PTR $T3[ebp]
  00078	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0007d	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  00082	8d 4d a8	 lea	 ecx, DWORD PTR $T3[ebp]
  00085	51		 push	 ecx
  00086	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@PMC_Add_X_:

; 556  :         CheckNumber((NUMBER_HEADER*)u);

  0008b	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  0008e	52		 push	 edx
  0008f	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  00094	83 c4 04	 add	 esp, 4

; 557  :         CheckNumber((NUMBER_HEADER*)v);

  00097	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  000a0	83 c4 04	 add	 esp, 4

; 558  :         ResourceHolderUINT root;

  000a3	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  000a6	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000ab	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 559  :         NUMBER_HEADER* w = PMC_Add_X_X_Imp((NUMBER_HEADER*)u, (NUMBER_HEADER*)v);

  000b2	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  000b5	51		 push	 ecx
  000b6	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  000b9	52		 push	 edx
  000ba	e8 00 00 00 00	 call	 ?PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z ; Palmtree::Math::Core::Internal::PMC_Add_X_X_Imp
  000bf	83 c4 08	 add	 esp, 8
  000c2	89 45 d8	 mov	 DWORD PTR _w$[ebp], eax

; 560  :         root.HookNumber(w);

  000c5	8b 45 d8	 mov	 eax, DWORD PTR _w$[ebp]
  000c8	50		 push	 eax
  000c9	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  000cc	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 561  : #ifdef _DEBUG
; 562  :         CheckNumber(w);

  000d1	8b 4d d8	 mov	 ecx, DWORD PTR _w$[ebp]
  000d4	51		 push	 ecx
  000d5	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  000da	83 c4 04	 add	 esp, 4

; 563  : #endif
; 564  :         root.UnlinkNumber(w);

  000dd	8b 55 d8	 mov	 edx, DWORD PTR _w$[ebp]
  000e0	52		 push	 edx
  000e1	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  000e4	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 565  :         return ((PMC_HANDLE_UINT)w);

  000e9	8b 45 d8	 mov	 eax, DWORD PTR _w$[ebp]
  000ec	89 45 a4	 mov	 DWORD PTR $T2[ebp], eax
  000ef	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f6	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  000f9	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  000fe	8b 45 a4	 mov	 eax, DWORD PTR $T2[ebp]
$LN4@PMC_Add_X_:

; 566  :     }

  00101	52		 push	 edx
  00102	8b cd		 mov	 ecx, ebp
  00104	50		 push	 eax
  00105	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@PMC_Add_X_
  0010b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00110	58		 pop	 eax
  00111	5a		 pop	 edx
  00112	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00115	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0011c	59		 pop	 ecx
  0011d	5f		 pop	 edi
  0011e	83 c4 5c	 add	 esp, 92			; 0000005cH
  00121	3b ec		 cmp	 ebp, esp
  00123	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00128	8b e5		 mov	 esp, ebp
  0012a	5d		 pop	 ebp
  0012b	c2 08 00	 ret	 8
  0012e	66 90		 npad	 2
$LN9@PMC_Add_X_:
  00130	01 00 00 00	 DD	 1
  00134	00 00 00 00	 DD	 $LN8@PMC_Add_X_
$LN8@PMC_Add_X_:
  00138	e0 ff ff ff	 DD	 -32			; ffffffe0H
  0013c	10 00 00 00	 DD	 16			; 00000010H
  00140	00 00 00 00	 DD	 $LN6@PMC_Add_X_
$LN6@PMC_Add_X_:
  00144	72		 DB	 114			; 00000072H
  00145	6f		 DB	 111			; 0000006fH
  00146	6f		 DB	 111			; 0000006fH
  00147	74		 DB	 116			; 00000074H
  00148	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_Add_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_Add_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_Add_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_Add_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z ENDP ; Palmtree::Math::Core::Internal::PMC_Add_X_X
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_add.cpp
_TEXT	SEGMENT
$T2 = -92						; size = 4
$T3 = -88						; size = 24
$T4 = -64						; size = 24
_w$ = -40						; size = 4
_root$ = -32						; size = 16
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 8
?PMC_Add_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z PROC ; Palmtree::Math::Core::Internal::PMC_Add_X_L

; 502  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_Add_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	57		 push	 edi
  00015	8d 7d a4	 lea	 edi, DWORD PTR [ebp-92]
  00018	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	50		 push	 eax
  0002c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET __AF70AA4D_pmc_add@cpp
  0003a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 503  :         if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(v) * 8)

  0003f	33 c0		 xor	 eax, eax
  00041	74 20		 je	 SHORT $LN2@PMC_Add_X_

; 504  :         {
; 505  :             // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 506  :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_add.cpp;PMC_Add_X_L;1");

  00043	68 00 00 00 00	 push	 OFFSET $SG118228
  00048	68 00 00 00 00	 push	 OFFSET $SG118229
  0004d	8d 4d c0	 lea	 ecx, DWORD PTR $T4[ebp]
  00050	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00055	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0005a	8d 4d c0	 lea	 ecx, DWORD PTR $T4[ebp]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@PMC_Add_X_:

; 507  :         }
; 508  :         if (u == nullptr)

  00063	83 7d 08 00	 cmp	 DWORD PTR _u$[ebp], 0
  00067	75 20		 jne	 SHORT $LN3@PMC_Add_X_

; 509  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"u");

  00069	68 00 00 00 00	 push	 OFFSET $SG118232
  0006e	68 00 00 00 00	 push	 OFFSET $SG118233
  00073	8d 4d a8	 lea	 ecx, DWORD PTR $T3[ebp]
  00076	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0007b	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  00080	8d 55 a8	 lea	 edx, DWORD PTR $T3[ebp]
  00083	52		 push	 edx
  00084	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@PMC_Add_X_:

; 510  :         CheckNumber((NUMBER_HEADER*)u);

  00089	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  00092	83 c4 04	 add	 esp, 4

; 511  :         ResourceHolderUINT root;

  00095	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00098	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  0009d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 512  :         NUMBER_HEADER* w = PMC_Add_X_L_Imp((NUMBER_HEADER*)u, v);

  000a4	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp+4]
  000a7	51		 push	 ecx
  000a8	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  000ab	52		 push	 edx
  000ac	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 ?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z ; Palmtree::Math::Core::Internal::PMC_Add_X_L_Imp
  000b5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b8	89 45 d8	 mov	 DWORD PTR _w$[ebp], eax

; 513  :         root.HookNumber(w);

  000bb	8b 4d d8	 mov	 ecx, DWORD PTR _w$[ebp]
  000be	51		 push	 ecx
  000bf	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  000c2	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 514  : #ifdef _DEBUG
; 515  :         CheckNumber((NUMBER_HEADER*)w);

  000c7	8b 55 d8	 mov	 edx, DWORD PTR _w$[ebp]
  000ca	52		 push	 edx
  000cb	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  000d0	83 c4 04	 add	 esp, 4

; 516  : #endif
; 517  :         root.UnlinkNumber(w);

  000d3	8b 45 d8	 mov	 eax, DWORD PTR _w$[ebp]
  000d6	50		 push	 eax
  000d7	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  000da	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 518  :         return ((PMC_HANDLE_UINT)w);

  000df	8b 4d d8	 mov	 ecx, DWORD PTR _w$[ebp]
  000e2	89 4d a4	 mov	 DWORD PTR $T2[ebp], ecx
  000e5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000ec	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  000ef	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  000f4	8b 45 a4	 mov	 eax, DWORD PTR $T2[ebp]
$LN4@PMC_Add_X_:

; 519  :     }

  000f7	52		 push	 edx
  000f8	8b cd		 mov	 ecx, ebp
  000fa	50		 push	 eax
  000fb	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@PMC_Add_X_
  00101	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00106	58		 pop	 eax
  00107	5a		 pop	 edx
  00108	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0010b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00112	59		 pop	 ecx
  00113	5f		 pop	 edi
  00114	83 c4 5c	 add	 esp, 92			; 0000005cH
  00117	3b ec		 cmp	 ebp, esp
  00119	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c2 0c 00	 ret	 12			; 0000000cH
$LN9@PMC_Add_X_:
  00124	01 00 00 00	 DD	 1
  00128	00 00 00 00	 DD	 $LN8@PMC_Add_X_
$LN8@PMC_Add_X_:
  0012c	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00130	10 00 00 00	 DD	 16			; 00000010H
  00134	00 00 00 00	 DD	 $LN6@PMC_Add_X_
$LN6@PMC_Add_X_:
  00138	72		 DB	 114			; 00000072H
  00139	6f		 DB	 111			; 0000006fH
  0013a	6f		 DB	 111			; 0000006fH
  0013b	74		 DB	 116			; 00000074H
  0013c	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_Add_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_Add_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_Add_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_Add_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z ENDP ; Palmtree::Math::Core::Internal::PMC_Add_X_L
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_add.cpp
_TEXT	SEGMENT
$T2 = -92						; size = 4
$T3 = -88						; size = 24
$T4 = -64						; size = 24
_nw$ = -40						; size = 4
_root$ = -32						; size = 16
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 4
?PMC_Add_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z PROC ; Palmtree::Math::Core::Internal::PMC_Add_X_I

; 370  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_Add_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	57		 push	 edi
  00015	8d 7d a4	 lea	 edi, DWORD PTR [ebp-92]
  00018	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	50		 push	 eax
  0002c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET __AF70AA4D_pmc_add@cpp
  0003a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 371  :         if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)

  0003f	33 c0		 xor	 eax, eax
  00041	74 20		 je	 SHORT $LN2@PMC_Add_X_

; 372  :         {
; 373  :             // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 374  :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_add.cpp;PMC_Add_X_I;1");

  00043	68 00 00 00 00	 push	 OFFSET $SG118152
  00048	68 00 00 00 00	 push	 OFFSET $SG118153
  0004d	8d 4d c0	 lea	 ecx, DWORD PTR $T4[ebp]
  00050	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00055	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0005a	8d 4d c0	 lea	 ecx, DWORD PTR $T4[ebp]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@PMC_Add_X_:

; 375  :         }
; 376  :         if (u == nullptr)

  00063	83 7d 08 00	 cmp	 DWORD PTR _u$[ebp], 0
  00067	75 20		 jne	 SHORT $LN3@PMC_Add_X_

; 377  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"u");

  00069	68 00 00 00 00	 push	 OFFSET $SG118156
  0006e	68 00 00 00 00	 push	 OFFSET $SG118157
  00073	8d 4d a8	 lea	 ecx, DWORD PTR $T3[ebp]
  00076	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0007b	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  00080	8d 55 a8	 lea	 edx, DWORD PTR $T3[ebp]
  00083	52		 push	 edx
  00084	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@PMC_Add_X_:

; 378  :         CheckNumber((NUMBER_HEADER*)u);

  00089	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  00092	83 c4 04	 add	 esp, 4

; 379  :         ResourceHolderUINT root;

  00095	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00098	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  0009d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 380  :         NUMBER_HEADER* nw = PMC_Add_X_I_Imp((NUMBER_HEADER*)u, v);

  000a4	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  000a7	51		 push	 ecx
  000a8	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  000ab	52		 push	 edx
  000ac	e8 00 00 00 00	 call	 ?PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_Add_X_I_Imp
  000b1	83 c4 08	 add	 esp, 8
  000b4	89 45 d8	 mov	 DWORD PTR _nw$[ebp], eax

; 381  :         root.HookNumber(nw);

  000b7	8b 45 d8	 mov	 eax, DWORD PTR _nw$[ebp]
  000ba	50		 push	 eax
  000bb	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  000be	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 382  : #ifdef _DEBUG
; 383  :         CheckNumber(nw);

  000c3	8b 4d d8	 mov	 ecx, DWORD PTR _nw$[ebp]
  000c6	51		 push	 ecx
  000c7	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  000cc	83 c4 04	 add	 esp, 4

; 384  : #endif
; 385  :         root.UnlinkNumber(nw);

  000cf	8b 55 d8	 mov	 edx, DWORD PTR _nw$[ebp]
  000d2	52		 push	 edx
  000d3	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  000d6	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 386  :         return ((PMC_HANDLE_UINT)nw);

  000db	8b 45 d8	 mov	 eax, DWORD PTR _nw$[ebp]
  000de	89 45 a4	 mov	 DWORD PTR $T2[ebp], eax
  000e1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000e8	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  000eb	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  000f0	8b 45 a4	 mov	 eax, DWORD PTR $T2[ebp]
$LN4@PMC_Add_X_:

; 387  :     }

  000f3	52		 push	 edx
  000f4	8b cd		 mov	 ecx, ebp
  000f6	50		 push	 eax
  000f7	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@PMC_Add_X_
  000fd	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00102	58		 pop	 eax
  00103	5a		 pop	 edx
  00104	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00107	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010e	59		 pop	 ecx
  0010f	5f		 pop	 edi
  00110	83 c4 5c	 add	 esp, 92			; 0000005cH
  00113	3b ec		 cmp	 ebp, esp
  00115	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011a	8b e5		 mov	 esp, ebp
  0011c	5d		 pop	 ebp
  0011d	c2 08 00	 ret	 8
$LN9@PMC_Add_X_:
  00120	01 00 00 00	 DD	 1
  00124	00 00 00 00	 DD	 $LN8@PMC_Add_X_
$LN8@PMC_Add_X_:
  00128	e0 ff ff ff	 DD	 -32			; ffffffe0H
  0012c	10 00 00 00	 DD	 16			; 00000010H
  00130	00 00 00 00	 DD	 $LN6@PMC_Add_X_
$LN6@PMC_Add_X_:
  00134	72		 DB	 114			; 00000072H
  00135	6f		 DB	 111			; 0000006fH
  00136	6f		 DB	 111			; 0000006fH
  00137	74		 DB	 116			; 00000074H
  00138	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_Add_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_Add_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_Add_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_Add_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z ENDP ; Palmtree::Math::Core::Internal::PMC_Add_X_I
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_add.cpp
_TEXT	SEGMENT
$T2 = -92						; size = 4
$T3 = -88						; size = 24
$T4 = -64						; size = 24
_w$ = -40						; size = 4
_root$ = -32						; size = 16
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 8
_v$ = 16						; size = 4
?PMC_Add_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z PROC ; Palmtree::Math::Core::Internal::PMC_Add_L_X

; 482  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_Add_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	57		 push	 edi
  00015	8d 7d a4	 lea	 edi, DWORD PTR [ebp-92]
  00018	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	50		 push	 eax
  0002c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET __AF70AA4D_pmc_add@cpp
  0003a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 483  :         if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(u) * 8)

  0003f	33 c0		 xor	 eax, eax
  00041	74 20		 je	 SHORT $LN2@PMC_Add_L_

; 484  :         {
; 485  :             // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 486  :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_add.cpp;PMC_Add_L_X;1");

  00043	68 00 00 00 00	 push	 OFFSET $SG118208
  00048	68 00 00 00 00	 push	 OFFSET $SG118209
  0004d	8d 4d c0	 lea	 ecx, DWORD PTR $T4[ebp]
  00050	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00055	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0005a	8d 4d c0	 lea	 ecx, DWORD PTR $T4[ebp]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@PMC_Add_L_:

; 487  :         }
; 488  :         if (v == nullptr)

  00063	83 7d 10 00	 cmp	 DWORD PTR _v$[ebp], 0
  00067	75 20		 jne	 SHORT $LN3@PMC_Add_L_

; 489  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"v");

  00069	68 00 00 00 00	 push	 OFFSET $SG118212
  0006e	68 00 00 00 00	 push	 OFFSET $SG118213
  00073	8d 4d a8	 lea	 ecx, DWORD PTR $T3[ebp]
  00076	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0007b	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  00080	8d 55 a8	 lea	 edx, DWORD PTR $T3[ebp]
  00083	52		 push	 edx
  00084	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@PMC_Add_L_:

; 490  :         CheckNumber((NUMBER_HEADER*)v);

  00089	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  00092	83 c4 04	 add	 esp, 4

; 491  :         ResourceHolderUINT root;

  00095	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00098	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  0009d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 492  :         NUMBER_HEADER* w = PMC_Add_X_L_Imp((NUMBER_HEADER*)v, u);

  000a4	8b 4d 0c	 mov	 ecx, DWORD PTR _u$[ebp+4]
  000a7	51		 push	 ecx
  000a8	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  000ab	52		 push	 edx
  000ac	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 ?PMC_Add_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z ; Palmtree::Math::Core::Internal::PMC_Add_X_L_Imp
  000b5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b8	89 45 d8	 mov	 DWORD PTR _w$[ebp], eax

; 493  :         root.HookNumber(w);

  000bb	8b 4d d8	 mov	 ecx, DWORD PTR _w$[ebp]
  000be	51		 push	 ecx
  000bf	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  000c2	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 494  : #ifdef _DEBUG
; 495  :         CheckNumber((NUMBER_HEADER*)w);

  000c7	8b 55 d8	 mov	 edx, DWORD PTR _w$[ebp]
  000ca	52		 push	 edx
  000cb	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  000d0	83 c4 04	 add	 esp, 4

; 496  : #endif
; 497  :         root.UnlinkNumber(w);

  000d3	8b 45 d8	 mov	 eax, DWORD PTR _w$[ebp]
  000d6	50		 push	 eax
  000d7	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  000da	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 498  :         return ((PMC_HANDLE_UINT)w);

  000df	8b 4d d8	 mov	 ecx, DWORD PTR _w$[ebp]
  000e2	89 4d a4	 mov	 DWORD PTR $T2[ebp], ecx
  000e5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000ec	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  000ef	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  000f4	8b 45 a4	 mov	 eax, DWORD PTR $T2[ebp]
$LN4@PMC_Add_L_:

; 499  :     }

  000f7	52		 push	 edx
  000f8	8b cd		 mov	 ecx, ebp
  000fa	50		 push	 eax
  000fb	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@PMC_Add_L_
  00101	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00106	58		 pop	 eax
  00107	5a		 pop	 edx
  00108	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0010b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00112	59		 pop	 ecx
  00113	5f		 pop	 edi
  00114	83 c4 5c	 add	 esp, 92			; 0000005cH
  00117	3b ec		 cmp	 ebp, esp
  00119	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	c2 0c 00	 ret	 12			; 0000000cH
$LN9@PMC_Add_L_:
  00124	01 00 00 00	 DD	 1
  00128	00 00 00 00	 DD	 $LN8@PMC_Add_L_
$LN8@PMC_Add_L_:
  0012c	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00130	10 00 00 00	 DD	 16			; 00000010H
  00134	00 00 00 00	 DD	 $LN6@PMC_Add_L_
$LN6@PMC_Add_L_:
  00138	72		 DB	 114			; 00000072H
  00139	6f		 DB	 111			; 0000006fH
  0013a	6f		 DB	 111			; 0000006fH
  0013b	74		 DB	 116			; 00000074H
  0013c	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_Add_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_Add_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_Add_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_Add_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z ENDP ; Palmtree::Math::Core::Internal::PMC_Add_L_X
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_add.cpp
_TEXT	SEGMENT
$T2 = -92						; size = 4
$T3 = -88						; size = 24
$T4 = -64						; size = 24
_nw$ = -40						; size = 4
_root$ = -32						; size = 16
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 4
?PMC_Add_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z PROC ; Palmtree::Math::Core::Internal::PMC_Add_I_X

; 350  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_Add_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	57		 push	 edi
  00015	8d 7d a4	 lea	 edi, DWORD PTR [ebp-92]
  00018	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	50		 push	 eax
  0002c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET __AF70AA4D_pmc_add@cpp
  0003a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 351  :         if (__UNIT_TYPE_BIT_COUNT < sizeof(u) * 8)

  0003f	33 c0		 xor	 eax, eax
  00041	74 20		 je	 SHORT $LN2@PMC_Add_I_

; 352  :         {
; 353  :             // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 354  :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_add.cpp;PMC_Add_I_X;1");

  00043	68 00 00 00 00	 push	 OFFSET $SG118129
  00048	68 00 00 00 00	 push	 OFFSET $SG118130
  0004d	8d 4d c0	 lea	 ecx, DWORD PTR $T4[ebp]
  00050	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00055	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0005a	8d 4d c0	 lea	 ecx, DWORD PTR $T4[ebp]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@PMC_Add_I_:

; 355  :         }
; 356  :         if (v == nullptr)

  00063	83 7d 0c 00	 cmp	 DWORD PTR _v$[ebp], 0
  00067	75 20		 jne	 SHORT $LN3@PMC_Add_I_

; 357  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"v");

  00069	68 00 00 00 00	 push	 OFFSET $SG118137
  0006e	68 00 00 00 00	 push	 OFFSET $SG118138
  00073	8d 4d a8	 lea	 ecx, DWORD PTR $T3[ebp]
  00076	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0007b	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  00080	8d 55 a8	 lea	 edx, DWORD PTR $T3[ebp]
  00083	52		 push	 edx
  00084	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@PMC_Add_I_:

; 358  :         CheckNumber((NUMBER_HEADER*)v);

  00089	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  00092	83 c4 04	 add	 esp, 4

; 359  :         ResourceHolderUINT root;

  00095	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00098	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  0009d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 360  :         NUMBER_HEADER* nw =  PMC_Add_X_I_Imp((NUMBER_HEADER*)v, u);

  000a4	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  000a7	51		 push	 ecx
  000a8	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  000ab	52		 push	 edx
  000ac	e8 00 00 00 00	 call	 ?PMC_Add_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_Add_X_I_Imp
  000b1	83 c4 08	 add	 esp, 8
  000b4	89 45 d8	 mov	 DWORD PTR _nw$[ebp], eax

; 361  :         root.HookNumber(nw);

  000b7	8b 45 d8	 mov	 eax, DWORD PTR _nw$[ebp]
  000ba	50		 push	 eax
  000bb	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  000be	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 362  : #ifdef _DEBUG
; 363  :         CheckNumber(nw);

  000c3	8b 4d d8	 mov	 ecx, DWORD PTR _nw$[ebp]
  000c6	51		 push	 ecx
  000c7	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  000cc	83 c4 04	 add	 esp, 4

; 364  : #endif
; 365  :         root.UnlinkNumber(nw);

  000cf	8b 55 d8	 mov	 edx, DWORD PTR _nw$[ebp]
  000d2	52		 push	 edx
  000d3	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  000d6	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 366  :         return ((PMC_HANDLE_UINT)nw);

  000db	8b 45 d8	 mov	 eax, DWORD PTR _nw$[ebp]
  000de	89 45 a4	 mov	 DWORD PTR $T2[ebp], eax
  000e1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000e8	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  000eb	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  000f0	8b 45 a4	 mov	 eax, DWORD PTR $T2[ebp]
$LN4@PMC_Add_I_:

; 367  :     }

  000f3	52		 push	 edx
  000f4	8b cd		 mov	 ecx, ebp
  000f6	50		 push	 eax
  000f7	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@PMC_Add_I_
  000fd	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00102	58		 pop	 eax
  00103	5a		 pop	 edx
  00104	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00107	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010e	59		 pop	 ecx
  0010f	5f		 pop	 edi
  00110	83 c4 5c	 add	 esp, 92			; 0000005cH
  00113	3b ec		 cmp	 ebp, esp
  00115	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011a	8b e5		 mov	 esp, ebp
  0011c	5d		 pop	 ebp
  0011d	c2 08 00	 ret	 8
$LN9@PMC_Add_I_:
  00120	01 00 00 00	 DD	 1
  00124	00 00 00 00	 DD	 $LN8@PMC_Add_I_
$LN8@PMC_Add_I_:
  00128	e0 ff ff ff	 DD	 -32			; ffffffe0H
  0012c	10 00 00 00	 DD	 16			; 00000010H
  00130	00 00 00 00	 DD	 $LN6@PMC_Add_I_
$LN6@PMC_Add_I_:
  00134	72		 DB	 114			; 00000072H
  00135	6f		 DB	 111			; 0000006fH
  00136	6f		 DB	 111			; 0000006fH
  00137	74		 DB	 116			; 00000074H
  00138	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_Add_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_Add_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_Add_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_Add_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z ENDP ; Palmtree::Math::Core::Internal::PMC_Add_I_X
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_add.cpp
_TEXT	SEGMENT
tv68 = -4						; size = 4
_feature$ = 8						; size = 4
?Initialize_Add@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z PROC ; Palmtree::Math::Core::Internal::Initialize_Add

; 569  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET __AF70AA4D_pmc_add@cpp
  00010	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 570  :         fp_Add_Imp = feature->PROCESSOR_FEATURE_ADX ? Add_Imp_using_ADCX : Add_Imp_using_ADC;

  00015	8b 45 08	 mov	 eax, DWORD PTR _feature$[ebp]
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	d1 e9		 shr	 ecx, 1
  0001c	83 e1 01	 and	 ecx, 1
  0001f	74 09		 je	 SHORT $LN3@Initialize
  00021	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], OFFSET ?Add_Imp_using_ADCX@Internal@Core@Math@Palmtree@@YAXPAII0I0I@Z ; Palmtree::Math::Core::Internal::Add_Imp_using_ADCX
  00028	eb 07		 jmp	 SHORT $LN4@Initialize
$LN3@Initialize:
  0002a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], OFFSET ?Add_Imp_using_ADC@Internal@Core@Math@Palmtree@@YAXPAII0I0I@Z ; Palmtree::Math::Core::Internal::Add_Imp_using_ADC
$LN4@Initialize:
  00031	8b 55 fc	 mov	 edx, DWORD PTR tv68[ebp]
  00034	89 15 00 00 00
	00		 mov	 DWORD PTR ?fp_Add_Imp@Internal@Core@Math@Palmtree@@3P6AXPAII0I0I@ZA, edx

; 571  :         return (PMC_STATUS_OK);

  0003a	33 c0		 xor	 eax, eax

; 572  :     }

  0003c	83 c4 04	 add	 esp, 4
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
?Initialize_Add@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ENDP ; Palmtree::Math::Core::Internal::Initialize_Add
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_add.cpp
_TEXT	SEGMENT
tv134 = -60						; size = 4
$T2 = -56						; size = 4
_w$3 = -52						; size = 4
_w_bit_count$4 = -48					; size = 4
_v_bit_count$5 = -44					; size = 4
_u_bit_count$6 = -40					; size = 4
_root$7 = -32						; size = 16
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 4
?PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z PROC ; Palmtree::Math::Core::Internal::PMC_Add_X_X_Imp

; 522  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 30	 sub	 esp, 48			; 00000030H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8d 7d c4	 lea	 edi, DWORD PTR [ebp-60]
  00019	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c5		 xor	 eax, ebp
  0002c	50		 push	 eax
  0002d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00030	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00036	b9 00 00 00 00	 mov	 ecx, OFFSET __AF70AA4D_pmc_add@cpp
  0003b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 523  :         if (u->IS_ZERO)

  00040	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00043	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00046	83 e1 01	 and	 ecx, 1
  00049	74 2d		 je	 SHORT $LN2@PMC_Add_X_

; 524  :         {
; 525  :             if (v->IS_ZERO)

  0004b	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  0004e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00051	83 e0 01	 and	 eax, 1
  00054	74 0c		 je	 SHORT $LN4@PMC_Add_X_

; 526  :                 return (&number_zero);

  00056	b8 00 00 00 00	 mov	 eax, OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  0005b	e9 fc 00 00 00	 jmp	 $LN1@PMC_Add_X_

; 527  :             else

  00060	eb 11		 jmp	 SHORT $LN5@PMC_Add_X_
$LN4@PMC_Add_X_:

; 528  :                 return (DuplicateNumber(v));

  00062	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  00065	51		 push	 ecx
  00066	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  0006b	83 c4 04	 add	 esp, 4
  0006e	e9 e9 00 00 00	 jmp	 $LN1@PMC_Add_X_
$LN5@PMC_Add_X_:

; 529  :         }
; 530  :         else

  00073	e9 e4 00 00 00	 jmp	 $LN1@PMC_Add_X_
$LN2@PMC_Add_X_:

; 531  :         {
; 532  :             if (v->IS_ZERO)

  00078	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  0007b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0007e	83 e0 01	 and	 eax, 1
  00081	74 16		 je	 SHORT $LN6@PMC_Add_X_

; 533  :                 return (DuplicateNumber(u));

  00083	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  00086	51		 push	 ecx
  00087	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  0008c	83 c4 04	 add	 esp, 4
  0008f	e9 c8 00 00 00	 jmp	 $LN1@PMC_Add_X_

; 534  :             else

  00094	e9 c3 00 00 00	 jmp	 $LN1@PMC_Add_X_
$LN6@PMC_Add_X_:

; 535  :             {
; 536  :                 ResourceHolderUINT root;

  00099	8d 4d e0	 lea	 ecx, DWORD PTR _root$7[ebp]
  0009c	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000a1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 537  :                 __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

  000a8	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  000ab	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000ae	89 45 d8	 mov	 DWORD PTR _u_bit_count$6[ebp], eax

; 538  :                 __UNIT_TYPE v_bit_count = v->UNIT_BIT_COUNT;

  000b1	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  000b4	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000b7	89 55 d4	 mov	 DWORD PTR _v_bit_count$5[ebp], edx

; 539  :                 __UNIT_TYPE w_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count) + 1;

  000ba	8b 45 d4	 mov	 eax, DWORD PTR _v_bit_count$5[ebp]
  000bd	50		 push	 eax
  000be	8b 4d d8	 mov	 ecx, DWORD PTR _u_bit_count$6[ebp]
  000c1	51		 push	 ecx
  000c2	e8 00 00 00 00	 call	 __MAXIMUM_UNIT
  000c7	83 c4 08	 add	 esp, 8
  000ca	83 c0 01	 add	 eax, 1
  000cd	89 45 d0	 mov	 DWORD PTR _w_bit_count$4[ebp], eax

; 540  :                 NUMBER_HEADER* w = root.AllocateNumber(w_bit_count);

  000d0	8b 55 d0	 mov	 edx, DWORD PTR _w_bit_count$4[ebp]
  000d3	52		 push	 edx
  000d4	8d 4d e0	 lea	 ecx, DWORD PTR _root$7[ebp]
  000d7	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  000dc	89 45 cc	 mov	 DWORD PTR _w$3[ebp], eax

; 541  :                 (*fp_Add_Imp)(u->BLOCK, u->UNIT_WORD_COUNT, v->BLOCK, v->UNIT_WORD_COUNT, w->BLOCK, w->BLOCK_COUNT);

  000df	a1 00 00 00 00	 mov	 eax, DWORD PTR ?fp_Add_Imp@Internal@Core@Math@Palmtree@@3P6AXPAII0I0I@ZA
  000e4	89 45 c4	 mov	 DWORD PTR tv134[ebp], eax
  000e7	8b f4		 mov	 esi, esp
  000e9	8b 4d cc	 mov	 ecx, DWORD PTR _w$3[ebp]
  000ec	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  000ef	52		 push	 edx
  000f0	8b 45 cc	 mov	 eax, DWORD PTR _w$3[ebp]
  000f3	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  000f6	51		 push	 ecx
  000f7	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  000fa	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000fd	50		 push	 eax
  000fe	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  00101	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00104	52		 push	 edx
  00105	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00108	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0010b	51		 push	 ecx
  0010c	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  0010f	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00112	50		 push	 eax
  00113	ff 55 c4	 call	 DWORD PTR tv134[ebp]
  00116	83 c4 18	 add	 esp, 24			; 00000018H
  00119	3b f4		 cmp	 esi, esp
  0011b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 542  :                 root.CheckNumber(w);

  00120	8b 4d cc	 mov	 ecx, DWORD PTR _w$3[ebp]
  00123	51		 push	 ecx
  00124	8d 4d e0	 lea	 ecx, DWORD PTR _root$7[ebp]
  00127	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 543  :                 CommitNumber(w);

  0012c	8b 55 cc	 mov	 edx, DWORD PTR _w$3[ebp]
  0012f	52		 push	 edx
  00130	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  00135	83 c4 04	 add	 esp, 4

; 544  :                 root.UnlinkNumber(w);

  00138	8b 45 cc	 mov	 eax, DWORD PTR _w$3[ebp]
  0013b	50		 push	 eax
  0013c	8d 4d e0	 lea	 ecx, DWORD PTR _root$7[ebp]
  0013f	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 545  :                 return (w);

  00144	8b 4d cc	 mov	 ecx, DWORD PTR _w$3[ebp]
  00147	89 4d c8	 mov	 DWORD PTR $T2[ebp], ecx
  0014a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00151	8d 4d e0	 lea	 ecx, DWORD PTR _root$7[ebp]
  00154	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00159	8b 45 c8	 mov	 eax, DWORD PTR $T2[ebp]
$LN1@PMC_Add_X_:

; 546  :             }
; 547  :         }
; 548  :     }

  0015c	52		 push	 edx
  0015d	8b cd		 mov	 ecx, ebp
  0015f	50		 push	 eax
  00160	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN13@PMC_Add_X_
  00166	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0016b	58		 pop	 eax
  0016c	5a		 pop	 edx
  0016d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00170	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00177	59		 pop	 ecx
  00178	5f		 pop	 edi
  00179	5e		 pop	 esi
  0017a	83 c4 3c	 add	 esp, 60			; 0000003cH
  0017d	3b ec		 cmp	 ebp, esp
  0017f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00184	8b e5		 mov	 esp, ebp
  00186	5d		 pop	 ebp
  00187	c3		 ret	 0
$LN13@PMC_Add_X_:
  00188	01 00 00 00	 DD	 1
  0018c	00 00 00 00	 DD	 $LN12@PMC_Add_X_
$LN12@PMC_Add_X_:
  00190	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00194	10 00 00 00	 DD	 16			; 00000010H
  00198	00 00 00 00	 DD	 $LN10@PMC_Add_X_
$LN10@PMC_Add_X_:
  0019c	72		 DB	 114			; 00000072H
  0019d	6f		 DB	 111			; 0000006fH
  0019e	6f		 DB	 111			; 0000006fH
  0019f	74		 DB	 116			; 00000074H
  001a0	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _root$7[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_Add_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z ENDP ; Palmtree::Math::Core::Internal::PMC_Add_X_X_Imp
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 18		 push	 24			; 00000018H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException, COMDAT
; _this$ = ecx

; 295  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 296  :         }

  00047	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException, COMDAT
; _this$ = ecx

; 291  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 290  :             : Exception(p)

  00037	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 291  :         {

  0004a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@

; 292  :         }

  00053	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00060	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00067	59		 pop	 ecx
  00068	83 c4 10	 add	 esp, 16			; 00000010H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
_data$ = 12						; size = 4
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException, COMDAT
; _this$ = ecx

; 286  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 285  :             : Exception(PMC_STATUS_INTERNAL_ERROR, message, data)

  00037	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _message$[ebp]
  0003e	51		 push	 ecx
  0003f	68 00 ff ff ff	 push	 -256			; ffffff00H
  00044	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 286  :         {

  00053	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00056	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@

; 287  :         }

  0005c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00063	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00066	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00069	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00070	59		 pop	 ecx
  00071	83 c4 10	 add	 esp, 16			; 00000010H
  00074	3b ec		 cmp	 ebp, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 18		 push	 24			; 00000018H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException, COMDAT
; _this$ = ecx

; 124  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 125  :         }

  00047	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException, COMDAT
; _this$ = ecx

; 120  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 119  :             : Exception(p)

  00037	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 120  :         {

  0004a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@

; 121  :         }

  00053	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00060	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00067	59		 pop	 ecx
  00068	83 c4 10	 add	 esp, 16			; 00000010H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
_param_name$ = 12					; size = 4
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException, COMDAT
; _this$ = ecx

; 115  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 114  :             : Exception(PMC_STATUS_ARGUMENT_NULL_ERROR, message, param_name)

  00037	8b 45 0c	 mov	 eax, DWORD PTR _param_name$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _message$[ebp]
  0003e	51		 push	 ecx
  0003f	6a fe		 push	 -2			; fffffffeH
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00049	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 115  :         {

  00050	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00053	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@

; 116  :         }

  00059	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00060	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00063	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00066	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006d	59		 pop	 ecx
  0006e	83 c4 10	 add	 esp, 16			; 00000010H
  00071	3b ec		 cmp	 ebp, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 18		 push	 24			; 00000018H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ PROC	; Palmtree::Math::Core::Internal::Exception::~Exception, COMDAT
; _this$ = ecx

; 70   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 71   :         }

  00047	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ENDP	; Palmtree::Math::Core::Internal::Exception::~Exception
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT
; _this$ = ecx

; 62   :         Exception(const Exception& p) noexcept(true)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00049	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 63   :         {
; 64   :             _code = p._code;

  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00055	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00058	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 65   :             _message = p._message;

  0005b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00061	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00064	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 66   :             _data = p._data;

  00067	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  0006d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00070	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 67   :         }

  00073	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0007a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0007d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00080	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00087	59		 pop	 ecx
  00088	83 c4 10	 add	 esp, 16			; 00000010H
  0008b	3b ec		 cmp	 ebp, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_code$ = 8						; size = 4
_message$ = 12						; size = 4
_data$ = 16						; size = 4
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT
; _this$ = ecx

; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00049	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 55   :         {
; 56   :             _code = code;

  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	8b 55 08	 mov	 edx, DWORD PTR _code$[ebp]
  00055	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 57   :             _message = message;

  00058	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	8b 4d 0c	 mov	 ecx, DWORD PTR _message$[ebp]
  0005e	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 58   :             _data = data;

  00061	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00064	8b 45 10	 mov	 eax, DWORD PTR _data$[ebp]
  00067	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 59   :         }

  0006a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00071	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00077	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007e	59		 pop	 ecx
  0007f	83 c4 10	 add	 esp, 16			; 00000010H
  00082	3b ec		 cmp	 ebp, esp
  00084	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 90   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __9BB4E194_vcruntime_exception@h
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 91   :         return _Data._What ? _Data._What : "Unknown exception";

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00028	74 0b		 je	 SHORT $LN3@what
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00030	89 55 f8	 mov	 DWORD PTR tv69[ebp], edx
  00033	eb 07		 jmp	 SHORT $LN4@what
$LN3@what:
  00035	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
$LN4@what:
  0003c	8b 45 f8	 mov	 eax, DWORD PTR tv69[ebp]

; 92   :     }

  0003f	83 c4 08	 add	 esp, 8
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 85   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1exception@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __9BB4E194_vcruntime_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 86   :         __std_exception_destroy(&_Data);

  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	83 c1 04	 add	 ecx, 4
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 ___std_exception_destroy
  0004c	83 c4 04	 add	 esp, 4

; 87   :     }

  0004f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00052	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00059	59		 pop	 ecx
  0005a	83 c4 10	 add	 esp, 16			; 00000010H
  0005d	3b ec		 cmp	 ebp, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1exception@std@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1exception@std@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0exception@std@@QAE@XZ PROC				; std::exception::exception, COMDAT
; _this$ = ecx

; 50   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0exception@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __9BB4E194_vcruntime_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 49   :         : _Data()

  00040	33 c9		 xor	 ecx, ecx
  00042	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00045	83 c2 04	 add	 edx, 4
  00048	89 0a		 mov	 DWORD PTR [edx], ecx
  0004a	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 51   :     }

  0004d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	83 c4 10	 add	 esp, 16			; 00000010H
  0005e	3b ec		 cmp	 ebp, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0exception@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0exception@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0exception@std@@QAE@XZ ENDP				; std::exception::exception
END
