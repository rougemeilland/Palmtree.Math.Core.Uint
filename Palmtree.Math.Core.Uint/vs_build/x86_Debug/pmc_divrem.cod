; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_divrem.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__2088847F_corecrt_memory@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__E9FFF232_guiddef@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__12AD47BB_winuser@h DB 01H
__B4B40122_winioctl@h DB 01H
__A73354DD_stdlib@h DB 01H
__25F3FB34_propidl@h DB 01H
__A40E48B8_oleauto@h DB 01H
__86261D59_stralign@h DB 01H
__2CC6E67D_corecrt_stdio_config@h DB 01H
__41381B41_corecrt_wconio@h DB 01H
__F0CC4AC4_corecrt_wio@h DB 01H
__05476D76_corecrt_wstdio@h DB 01H
__C0802A2B_corecrt_wtime@h DB 01H
__A40A425D_stat@h DB 01H
__5A74375D_wchar@h DB 01H
__6BC0FD35_vcruntime_new@h DB 01H
__77F53984_cstddef DB 01H
__188180DA_corecrt_math@h DB 01H
__D23EE329_cstdlib DB 01H
__5ECFF36E_type_traits DB 01H
__331E732B_malloc@h DB 01H
__9BB4E194_vcruntime_exception@h DB 01H
__7949CB39_exception DB 01H
__802FEEC0_pmc_exception@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__1AB12E38_pmc_resourceholder@h DB 01H
__746E1CEC_xmmintrin@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__E05E7037_autogenerated_inline_func@h DB 01H
__E17217E9_pmc_divrem@cpp DB 01H
msvcjmc	ENDS
CONST	SEGMENT
$SG118418 DB	'p', 00H, 'm', 00H, 'c', 00H, '_', 00H, 'd', 00H, 'i', 00H
	DB	'v', 00H, 'r', 00H, 'e', 00H, 'm', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, ';', 00H, 'P', 00H, 'M', 00H, 'C', 00H, '_', 00H
	DB	'D', 00H, 'i', 00H, 'v', 00H, 'R', 00H, 'e', 00H, 'm', 00H, '_'
	DB	00H, 'I', 00H, '_', 00H, 'X', 00H, ';', 00H, '1', 00H, 00H, 00H
$SG118419 DB	088H, 'N', 01fH, 'gW0f0D0j0D0', 0b3H, '0', 0fcH, '0', 0c9H
	DB	'0k00RT', 090H, 'W0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118426 DB	'v', 00H, 00H, 00H
$SG118427 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
	ORG $+2
$SG118434 DB	'0', 00H, 'k0', 088H, '0', 08bH, '0d', 096H, 097H, '{L0L', 088H
	DB	08fH, '0', 08cH, '0', 088H, '0F0h0W0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118464 DB	'0', 00H, 'k0', 088H, '0', 08bH, '0d', 096H, 097H, '{L0L', 088H
	DB	08fH, '0', 08cH, '0', 088H, '0F0h0W0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118494 DB	'p', 00H, 'm', 00H, 'c', 00H, '_', 00H, 'd', 00H, 'i', 00H
	DB	'v', 00H, 'r', 00H, 'e', 00H, 'm', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, ';', 00H, 'P', 00H, 'M', 00H, 'C', 00H, '_', 00H
	DB	'D', 00H, 'i', 00H, 'v', 00H, 'R', 00H, 'e', 00H, 'm', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'I', 00H, ';', 00H, '1', 00H, 00H, 00H
$SG118495 DB	088H, 'N', 01fH, 'gW0f0D0j0D0', 0b3H, '0', 0fcH, '0', 0c9H
	DB	'0k00RT', 090H, 'W0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118498 DB	'u', 00H, 00H, 00H
$SG118499 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
	ORG $+2
$SG118556 DB	'p', 00H, 'm', 00H, 'c', 00H, '_', 00H, 'd', 00H, 'i', 00H
	DB	'v', 00H, 'r', 00H, 'e', 00H, 'm', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, ';', 00H, 'P', 00H, 'M', 00H, 'C', 00H, '_', 00H
	DB	'D', 00H, 'i', 00H, 'v', 00H, 'R', 00H, 'e', 00H, 'm', 00H, '_'
	DB	00H, 'L', 00H, '_', 00H, 'X', 00H, ';', 00H, '1', 00H, 00H, 00H
$SG118557 DB	088H, 'N', 01fH, 'gW0f0D0j0D0', 0b3H, '0', 0fcH, '0', 0c9H
	DB	'0k00RT', 090H, 'W0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118560 DB	'v', 00H, 00H, 00H
$SG118561 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
	ORG $+2
$SG118564 DB	'0', 00H, 'k0', 088H, '0', 08bH, '0d', 096H, 097H, '{L0L', 088H
	DB	08fH, '0', 08cH, '0', 088H, '0F0h0W0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118648 DB	'0', 00H, 'k0', 088H, '0', 08bH, '0d', 096H, 097H, '{L0L', 088H
	DB	08fH, '0', 08cH, '0', 088H, '0F0h0W0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118701 DB	'p', 00H, 'm', 00H, 'c', 00H, '_', 00H, 'd', 00H, 'i', 00H
	DB	'v', 00H, 'r', 00H, 'e', 00H, 'm', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, ';', 00H, 'P', 00H, 'M', 00H, 'C', 00H, '_', 00H
	DB	'D', 00H, 'i', 00H, 'v', 00H, 'R', 00H, 'e', 00H, 'm', 00H, '_'
	DB	00H, 'X', 00H, '_', 00H, 'L', 00H, ';', 00H, '1', 00H, 00H, 00H
$SG118702 DB	088H, 'N', 01fH, 'gW0f0D0j0D0', 0b3H, '0', 0fcH, '0', 0c9H
	DB	'0k00RT', 090H, 'W0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118705 DB	'u', 00H, 00H, 00H
$SG118706 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
	ORG $+2
$SG118792 DB	'u', 00H, 00H, 00H
$SG118793 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
	ORG $+2
$SG118796 DB	'v', 00H, 00H, 00H
$SG118797 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
	ORG $+2
$SG118800 DB	'0', 00H, 'k0', 088H, '0', 08bH, '0d', 096H, 097H, '{L0L', 088H
	DB	08fH, '0', 08cH, '0', 088H, '0F0h0W0~0W0_0', 02H, '0', 00H, 00H
CONST	ENDS
PUBLIC	??0exception@std@@QAE@XZ			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z ; Palmtree::Math::Core::Internal::Exception::Exception
PUBLIC	??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ; Palmtree::Math::Core::Internal::Exception::Exception
PUBLIC	??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
PUBLIC	??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
PUBLIC	??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor'
PUBLIC	??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
PUBLIC	??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
PUBLIC	??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
PUBLIC	??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor'
PUBLIC	??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException
PUBLIC	??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException
PUBLIC	??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::DivisionByZeroException::~DivisionByZeroException
PUBLIC	??_GDivisionByZeroException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::DivisionByZeroException::`scalar deleting destructor'
PUBLIC	??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
PUBLIC	??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
PUBLIC	??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
PUBLIC	??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor'
PUBLIC	?DivRem_X_1W@Internal@Core@Math@Palmtree@@YAXPAIII00@Z ; Palmtree::Math::Core::Internal::DivRem_X_1W
PUBLIC	?Rem_X_1W@Internal@Core@Math@Palmtree@@YAIPAIII@Z ; Palmtree::Math::Core::Internal::Rem_X_1W
PUBLIC	?DivRem_X_X@Internal@Core@Math@Palmtree@@YAXPAII0I000@Z ; Palmtree::Math::Core::Internal::DivRem_X_X
PUBLIC	?Initialize_DivRem@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ; Palmtree::Math::Core::Internal::Initialize_DivRem
PUBLIC	?PMC_DivRem_I_X@Internal@Core@Math@Palmtree@@YGIIPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z ; Palmtree::Math::Core::Internal::PMC_DivRem_I_X
PUBLIC	?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YG_K_KPAU__tag_PMC_HANDLE_UINT@1234@PA_K@Z ; Palmtree::Math::Core::Internal::PMC_DivRem_L_X
PUBLIC	?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@IPAPAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_DivRem_X_I
PUBLIC	?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YG_KPAU__tag_PMC_HANDLE_UINT@1234@_KPAPAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_DivRem_X_L
PUBLIC	?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0PAPAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_DivRem_X_X
PUBLIC	__JustMyCode_Default
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7Exception@Internal@Core@Math@Palmtree@@6B@	; Palmtree::Math::Core::Internal::Exception::`vftable'
PUBLIC	??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`vftable'
PUBLIC	??_7DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DivisionByZeroException::`vftable'
PUBLIC	??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`vftable'
PUBLIC	__TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
PUBLIC	__CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InternalErrorException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	??_R0?AVException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::Exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	__TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
PUBLIC	__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	__TI2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@
PUBLIC	__CTA2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::DivisionByZeroException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@@8??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Exception@Internal@Core@Math@Palmtree@@6B@	; Palmtree::Math::Core::Internal::Exception::`RTTI Complete Object Locator'
PUBLIC	??_R3Exception@Internal@Core@Math@Palmtree@@8	; Palmtree::Math::Core::Internal::Exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Exception@Internal@Core@Math@Palmtree@@8	; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EN@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,77)'
PUBLIC	??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Complete Object Locator'
PUBLIC	??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DivisionByZeroException::`RTTI Complete Object Locator'
PUBLIC	??_R3DivisionByZeroException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DivisionByZeroException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DivisionByZeroException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DivisionByZeroException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DivisionByZeroException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DivisionByZeroException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Complete Object Locator'
PUBLIC	??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_EException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::Exception::`vector deleting destructor'
EXTRN	??_EArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::`vector deleting destructor'
EXTRN	??_EDivisionByZeroException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::DivisionByZeroException::`vector deleting destructor'
EXTRN	??_EInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::InternalErrorException::`vector deleting destructor'
EXTRN	?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z:PROC ; Palmtree::Math::Core::Internal::CommitNumber
EXTRN	?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z:PROC ; Palmtree::Math::Core::Internal::CheckNumber
EXTRN	?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z:PROC ; Palmtree::Math::Core::Internal::DuplicateNumber
EXTRN	?RightShift_Imp@Internal@Core@Math@Palmtree@@YAXPAIII0H@Z:PROC ; Palmtree::Math::Core::Internal::RightShift_Imp
EXTRN	?LeftShift_Imp@Internal@Core@Math@Palmtree@@YAXPAIII0H@Z:PROC ; Palmtree::Math::Core::Internal::LeftShift_Imp
EXTRN	??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
EXTRN	??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
EXTRN	?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAII@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
EXTRN	?DeallocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateBlock
EXTRN	?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock
EXTRN	?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
EXTRN	?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber
EXTRN	?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber
EXTRN	?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber
EXTRN	?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__allshl:PROC
EXTRN	__aulldiv:PROC
EXTRN	__aullrem:PROC
EXTRN	__aullshr:PROC
EXTRN	?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A:BYTE ; Palmtree::Math::Core::Internal::number_zero
EXTRN	?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A:BYTE ; Palmtree::Math::Core::Internal::statistics_info
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
?fp_DivRem_X_X@Internal@Core@Math@Palmtree@@3P6AXPAII0I000@ZA DD 01H DUP (?) ; Palmtree::Math::Core::Internal::fp_DivRem_X_X
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@DivisionByZeroException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DivisionByZeroException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::DivisionByZeroException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DivisionByZeroException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2DivisionByZeroException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2DivisionByZeroException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@DivisionByZeroException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DivisionByZeroException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3DivisionByZeroException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3DivisionByZeroException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::DivisionByZeroException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2DivisionByZeroException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::DivisionByZeroException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3DivisionByZeroException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EN@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EN@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,77)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	04dH
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2Exception@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3Exception@Internal@Core@Math@Palmtree@@8 DD 00H	; Palmtree::Math::Core::Internal::Exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4Exception@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4Exception@Internal@Core@Math@Palmtree@@6B@ DD 00H	; Palmtree::Math::Core::Internal::Exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@@8??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@@8??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::DivisionByZeroException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDivisionByZeroException@Internal@Core@Math@Palmtree@'
	DB	'@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__CTA2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	FLAT:__CT??_R0?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@@8??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
	DD	FLAT:__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	ENDS
;	COMDAT __TI2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__TI2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	FLAT:??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVArgumentNullException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	FLAT:__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
	DD	FLAT:__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	ENDS
;	COMDAT __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	FLAT:??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::Exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVInternalErrorException@Internal@Core@Math@Palmtree@@'
	DB	00H
data$r	ENDS
;	COMDAT __CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	FLAT:__CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
	DD	FLAT:__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	ENDS
;	COMDAT __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	FLAT:??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`vftable'
	DD	FLAT:??_EInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DivisionByZeroException::`vftable'
	DD	FLAT:??_EDivisionByZeroException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`vftable'
	DD	FLAT:??_EArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7Exception@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7Exception@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4Exception@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::Exception::`vftable'
	DD	FLAT:??_EException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPAU__tag_NUMBER_HEADER@1234@IPAPAU51234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPAU__tag_NUMBER_HEADER@1234@IPAPAU51234@@Z$0
__unwindtable$?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0PAPAU51234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0PAPAU51234@@Z$0
__unwindtable$?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YG_KPAU__tag_PMC_HANDLE_UINT@1234@_KPAPAU51234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YG_KPAU__tag_PMC_HANDLE_UINT@1234@_KPAPAU51234@@Z$0
__unwindtable$?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@IPAPAU51234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@IPAPAU51234@@Z$0
__unwindtable$?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0PAPAU51234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0PAPAU51234@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0PAPAU51234@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0PAPAU51234@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0PAPAU51234@@Z$3
__unwindtable$?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPAU__tag_NUMBER_HEADER@1234@_KPAPAU51234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPAU__tag_NUMBER_HEADER@1234@_KPAPAU51234@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPAU__tag_NUMBER_HEADER@1234@_KPAPAU51234@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPAU__tag_NUMBER_HEADER@1234@_KPAPAU51234@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPAU__tag_NUMBER_HEADER@1234@_KPAPAU51234@@Z$3
__ehfuncinfo$?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0PAPAU51234@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0PAPAU51234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPAU__tag_NUMBER_HEADER@1234@_KPAPAU51234@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPAU__tag_NUMBER_HEADER@1234@_KPAPAU51234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPAU__tag_NUMBER_HEADER@1234@IPAPAU51234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPAU__tag_NUMBER_HEADER@1234@IPAPAU51234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0PAPAU51234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0PAPAU51234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YG_KPAU__tag_PMC_HANDLE_UINT@1234@_KPAPAU51234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YG_KPAU__tag_PMC_HANDLE_UINT@1234@_KPAPAU51234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@IPAPAU51234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@IPAPAU51234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0
__ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$0
__ehfuncinfo$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0
__ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z$0
__ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z$0
__ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1exception@std@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0exception@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
_TEXT	SEGMENT
tv272 = -192						; size = 4
tv222 = -188						; size = 4
tv178 = -184						; size = 4
$T2 = -180						; size = 4
$T3 = -176						; size = 4
$T4 = -172						; size = 4
$T5 = -168						; size = 4
_work_v_buf$6 = -164					; size = 4
_r$7 = -160						; size = 4
_r_bit_count$8 = -156					; size = 4
_root$9 = -148						; size = 16
_work_v_buf$10 = -128					; size = 4
_r$11 = -124						; size = 4
_r_bit_count$12 = -120					; size = 4
_q_bit_count$13 = -116					; size = 4
_root$14 = -108						; size = 16
_r$15 = -88						; size = 4
_r_bit_count$16 = -84					; size = 4
_root$17 = -76						; size = 16
_r$18 = -56						; size = 4
_r_bit_count$19 = -52					; size = 4
_q_bit_count$20 = -48					; size = 4
_root$21 = -40						; size = 16
_v_bit_count$22 = -20					; size = 4
_u_bit_count$23 = -16					; size = 4
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_q$ = 16						; size = 4
?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0PAPAU51234@@Z PROC ; Palmtree::Math::Core::Internal::PMC_DivRem_X_X_Imp

; 2039 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0PAPAU51234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  0001f	b9 2d 00 00 00	 mov	 ecx, 45			; 0000002dH
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	b9 00 00 00 00	 mov	 ecx, OFFSET __E17217E9_pmc_divrem@cpp
  00041	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 2040 :         if (u->IS_ZERO)

  00046	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00049	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004c	83 e1 01	 and	 ecx, 1
  0004f	74 1e		 je	 SHORT $LN2@PMC_DivRem

; 2041 :         {
; 2042 :             // u が 0 である場合
; 2043 : 
; 2044 :             // q = 0, r = 0 を返す
; 2045 :             if (q != nullptr)

  00051	83 7d 10 00	 cmp	 DWORD PTR _q$[ebp], 0
  00055	74 09		 je	 SHORT $LN4@PMC_DivRem

; 2046 :                 *q = &number_zero;

  00057	8b 55 10	 mov	 edx, DWORD PTR _q$[ebp]
  0005a	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
$LN4@PMC_DivRem:

; 2047 :             return (&number_zero);

  00060	b8 00 00 00 00	 mov	 eax, OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  00065	e9 60 05 00 00	 jmp	 $LN1@PMC_DivRem

; 2048 :         }
; 2049 :         else

  0006a	e9 5b 05 00 00	 jmp	 $LN1@PMC_DivRem
$LN2@PMC_DivRem:

; 2050 :         {
; 2051 :             // u が 0 ではない場合
; 2052 : 
; 2053 :             if (v->IS_ONE)

  0006f	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  00072	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00075	d1 e9		 shr	 ecx, 1
  00077	83 e1 01	 and	 ecx, 1
  0007a	74 26		 je	 SHORT $LN5@PMC_DivRem

; 2054 :             {
; 2055 :                 // v が 1 である場合
; 2056 : 
; 2057 :                 // q = u, r = 0 を返す
; 2058 :                 if (q != nullptr)

  0007c	83 7d 10 00	 cmp	 DWORD PTR _q$[ebp], 0
  00080	74 11		 je	 SHORT $LN7@PMC_DivRem

; 2059 :                     *q = DuplicateNumber(u);

  00082	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00085	52		 push	 edx
  00086	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  0008b	83 c4 04	 add	 esp, 4
  0008e	8b 4d 10	 mov	 ecx, DWORD PTR _q$[ebp]
  00091	89 01		 mov	 DWORD PTR [ecx], eax
$LN7@PMC_DivRem:

; 2060 :                 return (&number_zero);

  00093	b8 00 00 00 00	 mov	 eax, OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  00098	e9 2d 05 00 00	 jmp	 $LN1@PMC_DivRem

; 2061 :             }
; 2062 :             else

  0009d	e9 28 05 00 00	 jmp	 $LN1@PMC_DivRem
$LN5@PMC_DivRem:

; 2063 :             {
; 2064 :                 // u > 0 かつ v > 1 である場合
; 2065 : 
; 2066 :                 // x と y の商・剰余を計算する
; 2067 :                 __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

  000a2	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  000a5	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000a8	89 45 f0	 mov	 DWORD PTR _u_bit_count$23[ebp], eax

; 2068 :                 __UNIT_TYPE v_bit_count = v->UNIT_BIT_COUNT;

  000ab	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  000ae	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000b1	89 55 ec	 mov	 DWORD PTR _v_bit_count$22[ebp], edx

; 2069 :                 if (u_bit_count < v_bit_count)

  000b4	8b 45 f0	 mov	 eax, DWORD PTR _u_bit_count$23[ebp]
  000b7	3b 45 ec	 cmp	 eax, DWORD PTR _v_bit_count$22[ebp]
  000ba	73 25		 jae	 SHORT $LN8@PMC_DivRem

; 2070 :                 {
; 2071 :                     // 明らかに u < v である場合
; 2072 : 
; 2073 :                     // q = 0, r = u を返す。
; 2074 :                     if (q != nullptr)

  000bc	83 7d 10 00	 cmp	 DWORD PTR _q$[ebp], 0
  000c0	74 09		 je	 SHORT $LN10@PMC_DivRem

; 2075 :                         *q = &number_zero;

  000c2	8b 4d 10	 mov	 ecx, DWORD PTR _q$[ebp]
  000c5	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
$LN10@PMC_DivRem:

; 2076 :                     return (DuplicateNumber(u));

  000cb	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  000ce	52		 push	 edx
  000cf	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  000d4	83 c4 04	 add	 esp, 4
  000d7	e9 ee 04 00 00	 jmp	 $LN1@PMC_DivRem
  000dc	e9 e9 04 00 00	 jmp	 $LN1@PMC_DivRem
$LN8@PMC_DivRem:

; 2077 :                 }
; 2078 :                 else if (v_bit_count <= sizeof(__UNIT_TYPE) * 8)

  000e1	83 7d ec 20	 cmp	 DWORD PTR _v_bit_count$22[ebp], 32 ; 00000020H
  000e5	0f 87 16 02 00
	00		 ja	 $LN11@PMC_DivRem

; 2079 :                 {
; 2080 :                     // 除数が 1 ワードで表現できる場合
; 2081 : 
; 2082 :                     if (q != nullptr)

  000eb	83 7d 10 00	 cmp	 DWORD PTR _q$[ebp], 0
  000ef	0f 84 36 01 00
	00		 je	 $LN13@PMC_DivRem

; 2083 :                     {
; 2084 :                         ResourceHolderUINT root;

  000f5	8d 4d d8	 lea	 ecx, DWORD PTR _root$21[ebp]
  000f8	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000fd	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2085 :                         __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

  00104	8b 45 f0	 mov	 eax, DWORD PTR _u_bit_count$23[ebp]
  00107	2b 45 ec	 sub	 eax, DWORD PTR _v_bit_count$22[ebp]
  0010a	83 c0 21	 add	 eax, 33			; 00000021H
  0010d	89 45 d0	 mov	 DWORD PTR _q_bit_count$20[ebp], eax

; 2086 :                         *q = root.AllocateNumber(q_bit_count);

  00110	8b 4d d0	 mov	 ecx, DWORD PTR _q_bit_count$20[ebp]
  00113	51		 push	 ecx
  00114	8d 4d d8	 lea	 ecx, DWORD PTR _root$21[ebp]
  00117	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  0011c	8b 55 10	 mov	 edx, DWORD PTR _q$[ebp]
  0011f	89 02		 mov	 DWORD PTR [edx], eax

; 2087 :                         __UNIT_TYPE r_bit_count = sizeof(__UNIT_TYPE) * 8;

  00121	c7 45 cc 20 00
	00 00		 mov	 DWORD PTR _r_bit_count$19[ebp], 32 ; 00000020H

; 2088 :                         NUMBER_HEADER* r = root.AllocateNumber(r_bit_count);

  00128	8b 45 cc	 mov	 eax, DWORD PTR _r_bit_count$19[ebp]
  0012b	50		 push	 eax
  0012c	8d 4d d8	 lea	 ecx, DWORD PTR _root$21[ebp]
  0012f	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  00134	89 45 c8	 mov	 DWORD PTR _r$18[ebp], eax

; 2089 :                         DivRem_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, (__UNIT_TYPE)v->BLOCK[0], (*q)->BLOCK, r->BLOCK);

  00137	8b 4d c8	 mov	 ecx, DWORD PTR _r$18[ebp]
  0013a	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0013d	52		 push	 edx
  0013e	8b 45 10	 mov	 eax, DWORD PTR _q$[ebp]
  00141	8b 08		 mov	 ecx, DWORD PTR [eax]
  00143	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00146	52		 push	 edx
  00147	b8 04 00 00 00	 mov	 eax, 4
  0014c	6b c8 00	 imul	 ecx, eax, 0
  0014f	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  00152	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00155	8b 0c 08	 mov	 ecx, DWORD PTR [eax+ecx]
  00158	51		 push	 ecx
  00159	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  0015c	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0015f	50		 push	 eax
  00160	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  00163	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00166	52		 push	 edx
  00167	e8 00 00 00 00	 call	 ?DivRem_X_1W@Internal@Core@Math@Palmtree@@YAXPAIII00@Z ; Palmtree::Math::Core::Internal::DivRem_X_1W
  0016c	83 c4 14	 add	 esp, 20			; 00000014H

; 2090 :                         root.CheckNumber(*q);

  0016f	8b 45 10	 mov	 eax, DWORD PTR _q$[ebp]
  00172	8b 08		 mov	 ecx, DWORD PTR [eax]
  00174	51		 push	 ecx
  00175	8d 4d d8	 lea	 ecx, DWORD PTR _root$21[ebp]
  00178	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 2091 :                         root.CheckNumber(r);

  0017d	8b 55 c8	 mov	 edx, DWORD PTR _r$18[ebp]
  00180	52		 push	 edx
  00181	8d 4d d8	 lea	 ecx, DWORD PTR _root$21[ebp]
  00184	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 2092 :                         CommitNumber(*q);

  00189	8b 45 10	 mov	 eax, DWORD PTR _q$[ebp]
  0018c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0018e	51		 push	 ecx
  0018f	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  00194	83 c4 04	 add	 esp, 4

; 2093 :                         CommitNumber(r);

  00197	8b 55 c8	 mov	 edx, DWORD PTR _r$18[ebp]
  0019a	52		 push	 edx
  0019b	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  001a0	83 c4 04	 add	 esp, 4

; 2094 :                         if ((*q)->IS_ZERO)

  001a3	8b 45 10	 mov	 eax, DWORD PTR _q$[ebp]
  001a6	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a8	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  001ab	83 e2 01	 and	 edx, 1
  001ae	74 19		 je	 SHORT $LN15@PMC_DivRem

; 2095 :                         {
; 2096 :                             root.DeallocateNumber(*q);

  001b0	8b 45 10	 mov	 eax, DWORD PTR _q$[ebp]
  001b3	8b 08		 mov	 ecx, DWORD PTR [eax]
  001b5	51		 push	 ecx
  001b6	8d 4d d8	 lea	 ecx, DWORD PTR _root$21[ebp]
  001b9	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 2097 :                             *q = &number_zero;

  001be	8b 55 10	 mov	 edx, DWORD PTR _q$[ebp]
  001c1	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero

; 2098 :                         }
; 2099 :                         else

  001c7	eb 0e		 jmp	 SHORT $LN16@PMC_DivRem
$LN15@PMC_DivRem:

; 2100 :                             root.UnlinkNumber(*q);

  001c9	8b 45 10	 mov	 eax, DWORD PTR _q$[ebp]
  001cc	8b 08		 mov	 ecx, DWORD PTR [eax]
  001ce	51		 push	 ecx
  001cf	8d 4d d8	 lea	 ecx, DWORD PTR _root$21[ebp]
  001d2	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN16@PMC_DivRem:

; 2101 :                         if (r->IS_ZERO)

  001d7	8b 55 c8	 mov	 edx, DWORD PTR _r$18[ebp]
  001da	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001dd	83 e0 01	 and	 eax, 1
  001e0	74 15		 je	 SHORT $LN17@PMC_DivRem

; 2102 :                         {
; 2103 :                             root.DeallocateNumber(r);

  001e2	8b 4d c8	 mov	 ecx, DWORD PTR _r$18[ebp]
  001e5	51		 push	 ecx
  001e6	8d 4d d8	 lea	 ecx, DWORD PTR _root$21[ebp]
  001e9	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 2104 :                             r = &number_zero;

  001ee	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _r$18[ebp], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero

; 2105 :                         }
; 2106 :                         else

  001f5	eb 0c		 jmp	 SHORT $LN18@PMC_DivRem
$LN17@PMC_DivRem:

; 2107 :                             root.UnlinkNumber(r);

  001f7	8b 55 c8	 mov	 edx, DWORD PTR _r$18[ebp]
  001fa	52		 push	 edx
  001fb	8d 4d d8	 lea	 ecx, DWORD PTR _root$21[ebp]
  001fe	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN18@PMC_DivRem:

; 2108 :                         return (r);

  00203	8b 45 c8	 mov	 eax, DWORD PTR _r$18[ebp]
  00206	89 85 58 ff ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  0020c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00213	8d 4d d8	 lea	 ecx, DWORD PTR _root$21[ebp]
  00216	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0021b	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR $T5[ebp]
  00221	e9 a4 03 00 00	 jmp	 $LN1@PMC_DivRem

; 2109 :                     }
; 2110 :                     else

  00226	e9 d1 00 00 00	 jmp	 $LN14@PMC_DivRem
$LN13@PMC_DivRem:

; 2111 :                     {
; 2112 :                         ResourceHolderUINT root;

  0022b	8d 4d b4	 lea	 ecx, DWORD PTR _root$17[ebp]
  0022e	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00233	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 2113 :                         __UNIT_TYPE r_bit_count = sizeof(__UNIT_TYPE) * 8;

  0023a	c7 45 ac 20 00
	00 00		 mov	 DWORD PTR _r_bit_count$16[ebp], 32 ; 00000020H

; 2114 :                         NUMBER_HEADER* r = root.AllocateNumber(r_bit_count);

  00241	8b 4d ac	 mov	 ecx, DWORD PTR _r_bit_count$16[ebp]
  00244	51		 push	 ecx
  00245	8d 4d b4	 lea	 ecx, DWORD PTR _root$17[ebp]
  00248	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  0024d	89 45 a8	 mov	 DWORD PTR _r$15[ebp], eax

; 2115 :                         r->BLOCK[0] = Rem_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, (__UNIT_TYPE)v->BLOCK[0]);

  00250	ba 04 00 00 00	 mov	 edx, 4
  00255	6b c2 00	 imul	 eax, edx, 0
  00258	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  0025b	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0025e	8b 04 02	 mov	 eax, DWORD PTR [edx+eax]
  00261	50		 push	 eax
  00262	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  00265	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00268	52		 push	 edx
  00269	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  0026c	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0026f	51		 push	 ecx
  00270	e8 00 00 00 00	 call	 ?Rem_X_1W@Internal@Core@Math@Palmtree@@YAIPAIII@Z ; Palmtree::Math::Core::Internal::Rem_X_1W
  00275	83 c4 0c	 add	 esp, 12			; 0000000cH
  00278	89 85 48 ff ff
	ff		 mov	 DWORD PTR tv178[ebp], eax
  0027e	ba 04 00 00 00	 mov	 edx, 4
  00283	6b c2 00	 imul	 eax, edx, 0
  00286	8b 4d a8	 mov	 ecx, DWORD PTR _r$15[ebp]
  00289	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0028c	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR tv178[ebp]
  00292	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx

; 2116 :                         root.CheckNumber(r);

  00295	8b 55 a8	 mov	 edx, DWORD PTR _r$15[ebp]
  00298	52		 push	 edx
  00299	8d 4d b4	 lea	 ecx, DWORD PTR _root$17[ebp]
  0029c	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 2117 :                         CommitNumber(r);

  002a1	8b 45 a8	 mov	 eax, DWORD PTR _r$15[ebp]
  002a4	50		 push	 eax
  002a5	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  002aa	83 c4 04	 add	 esp, 4

; 2118 :                         if (r->IS_ZERO)

  002ad	8b 4d a8	 mov	 ecx, DWORD PTR _r$15[ebp]
  002b0	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  002b3	83 e2 01	 and	 edx, 1
  002b6	74 15		 je	 SHORT $LN19@PMC_DivRem

; 2119 :                         {
; 2120 :                             root.DeallocateNumber(r);

  002b8	8b 45 a8	 mov	 eax, DWORD PTR _r$15[ebp]
  002bb	50		 push	 eax
  002bc	8d 4d b4	 lea	 ecx, DWORD PTR _root$17[ebp]
  002bf	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 2121 :                             r = &number_zero;

  002c4	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _r$15[ebp], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero

; 2122 :                         }
; 2123 :                         else

  002cb	eb 0c		 jmp	 SHORT $LN20@PMC_DivRem
$LN19@PMC_DivRem:

; 2124 :                             root.UnlinkNumber(r);

  002cd	8b 4d a8	 mov	 ecx, DWORD PTR _r$15[ebp]
  002d0	51		 push	 ecx
  002d1	8d 4d b4	 lea	 ecx, DWORD PTR _root$17[ebp]
  002d4	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN20@PMC_DivRem:

; 2125 :                         return (r);

  002d9	8b 55 a8	 mov	 edx, DWORD PTR _r$15[ebp]
  002dc	89 95 54 ff ff
	ff		 mov	 DWORD PTR $T4[ebp], edx
  002e2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002e9	8d 4d b4	 lea	 ecx, DWORD PTR _root$17[ebp]
  002ec	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  002f1	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR $T4[ebp]
  002f7	e9 ce 02 00 00	 jmp	 $LN1@PMC_DivRem
$LN14@PMC_DivRem:

; 2126 :                     }
; 2127 :                 }
; 2128 :                 else

  002fc	e9 c9 02 00 00	 jmp	 $LN1@PMC_DivRem
$LN11@PMC_DivRem:

; 2129 :                 {
; 2130 :                     // 除数を表現するのに 2 ワード以上必要な場合
; 2131 :                     if (q != nullptr)

  00301	83 7d 10 00	 cmp	 DWORD PTR _q$[ebp], 0
  00305	0f 84 7b 01 00
	00		 je	 $LN21@PMC_DivRem

; 2132 :                     {
; 2133 :                         ResourceHolderUINT root;

  0030b	8d 4d 94	 lea	 ecx, DWORD PTR _root$14[ebp]
  0030e	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00313	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2

; 2134 :                         __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

  0031a	8b 45 f0	 mov	 eax, DWORD PTR _u_bit_count$23[ebp]
  0031d	2b 45 ec	 sub	 eax, DWORD PTR _v_bit_count$22[ebp]
  00320	83 c0 21	 add	 eax, 33			; 00000021H
  00323	89 45 8c	 mov	 DWORD PTR _q_bit_count$13[ebp], eax

; 2135 :                         __UNIT_TYPE r_bit_count = u_bit_count + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには v_bit_count だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

  00326	8b 4d f0	 mov	 ecx, DWORD PTR _u_bit_count$23[ebp]
  00329	83 c1 20	 add	 ecx, 32			; 00000020H
  0032c	89 4d 88	 mov	 DWORD PTR _r_bit_count$12[ebp], ecx

; 2136 :                         *q = root.AllocateNumber(q_bit_count);

  0032f	8b 55 8c	 mov	 edx, DWORD PTR _q_bit_count$13[ebp]
  00332	52		 push	 edx
  00333	8d 4d 94	 lea	 ecx, DWORD PTR _root$14[ebp]
  00336	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  0033b	8b 4d 10	 mov	 ecx, DWORD PTR _q$[ebp]
  0033e	89 01		 mov	 DWORD PTR [ecx], eax

; 2137 :                         NUMBER_HEADER* r = root.AllocateNumber(r_bit_count);

  00340	8b 55 88	 mov	 edx, DWORD PTR _r_bit_count$12[ebp]
  00343	52		 push	 edx
  00344	8d 4d 94	 lea	 ecx, DWORD PTR _root$14[ebp]
  00347	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  0034c	89 45 84	 mov	 DWORD PTR _r$11[ebp], eax

; 2138 :                          __UNIT_TYPE* work_v_buf = root.AllocateBlock(v->UNIT_WORD_COUNT * __UNIT_TYPE_BIT_COUNT);

  0034f	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  00352	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00355	c1 e1 05	 shl	 ecx, 5
  00358	51		 push	 ecx
  00359	8d 4d 94	 lea	 ecx, DWORD PTR _root$14[ebp]
  0035c	e8 00 00 00 00	 call	 ?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAII@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
  00361	89 45 80	 mov	 DWORD PTR _work_v_buf$10[ebp], eax

; 2139 :                         (*fp_DivRem_X_X)(u->BLOCK, u->UNIT_WORD_COUNT, v->BLOCK, v->UNIT_WORD_COUNT, work_v_buf, (*q)->BLOCK, r->BLOCK);

  00364	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?fp_DivRem_X_X@Internal@Core@Math@Palmtree@@3P6AXPAII0I000@ZA
  0036a	89 95 44 ff ff
	ff		 mov	 DWORD PTR tv222[ebp], edx
  00370	8b f4		 mov	 esi, esp
  00372	8b 45 84	 mov	 eax, DWORD PTR _r$11[ebp]
  00375	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00378	51		 push	 ecx
  00379	8b 55 10	 mov	 edx, DWORD PTR _q$[ebp]
  0037c	8b 02		 mov	 eax, DWORD PTR [edx]
  0037e	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00381	51		 push	 ecx
  00382	8b 55 80	 mov	 edx, DWORD PTR _work_v_buf$10[ebp]
  00385	52		 push	 edx
  00386	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  00389	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0038c	51		 push	 ecx
  0038d	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  00390	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00393	50		 push	 eax
  00394	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  00397	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0039a	52		 push	 edx
  0039b	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  0039e	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  003a1	51		 push	 ecx
  003a2	ff 95 44 ff ff
	ff		 call	 DWORD PTR tv222[ebp]
  003a8	83 c4 1c	 add	 esp, 28			; 0000001cH
  003ab	3b f4		 cmp	 esi, esp
  003ad	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2140 :                         root.CheckBlock(work_v_buf);

  003b2	8b 55 80	 mov	 edx, DWORD PTR _work_v_buf$10[ebp]
  003b5	52		 push	 edx
  003b6	8d 4d 94	 lea	 ecx, DWORD PTR _root$14[ebp]
  003b9	e8 00 00 00 00	 call	 ?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock

; 2141 :                         root.CheckNumber(*q);

  003be	8b 45 10	 mov	 eax, DWORD PTR _q$[ebp]
  003c1	8b 08		 mov	 ecx, DWORD PTR [eax]
  003c3	51		 push	 ecx
  003c4	8d 4d 94	 lea	 ecx, DWORD PTR _root$14[ebp]
  003c7	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 2142 :                         root.CheckNumber(r);

  003cc	8b 55 84	 mov	 edx, DWORD PTR _r$11[ebp]
  003cf	52		 push	 edx
  003d0	8d 4d 94	 lea	 ecx, DWORD PTR _root$14[ebp]
  003d3	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 2143 :                         root.DeallocateBlock(work_v_buf);

  003d8	8b 45 80	 mov	 eax, DWORD PTR _work_v_buf$10[ebp]
  003db	50		 push	 eax
  003dc	8d 4d 94	 lea	 ecx, DWORD PTR _root$14[ebp]
  003df	e8 00 00 00 00	 call	 ?DeallocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateBlock

; 2144 :                         CommitNumber(*q);

  003e4	8b 4d 10	 mov	 ecx, DWORD PTR _q$[ebp]
  003e7	8b 11		 mov	 edx, DWORD PTR [ecx]
  003e9	52		 push	 edx
  003ea	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  003ef	83 c4 04	 add	 esp, 4

; 2145 :                         CommitNumber(r);

  003f2	8b 45 84	 mov	 eax, DWORD PTR _r$11[ebp]
  003f5	50		 push	 eax
  003f6	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  003fb	83 c4 04	 add	 esp, 4

; 2146 :                         if ((*q)->IS_ZERO)

  003fe	8b 4d 10	 mov	 ecx, DWORD PTR _q$[ebp]
  00401	8b 11		 mov	 edx, DWORD PTR [ecx]
  00403	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00406	83 e0 01	 and	 eax, 1
  00409	74 19		 je	 SHORT $LN23@PMC_DivRem

; 2147 :                         {
; 2148 :                             root.DeallocateNumber(*q);

  0040b	8b 4d 10	 mov	 ecx, DWORD PTR _q$[ebp]
  0040e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00410	52		 push	 edx
  00411	8d 4d 94	 lea	 ecx, DWORD PTR _root$14[ebp]
  00414	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 2149 :                             *q = &number_zero;

  00419	8b 45 10	 mov	 eax, DWORD PTR _q$[ebp]
  0041c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero

; 2150 :                         }
; 2151 :                         else

  00422	eb 0e		 jmp	 SHORT $LN24@PMC_DivRem
$LN23@PMC_DivRem:

; 2152 :                             root.UnlinkNumber(*q);

  00424	8b 4d 10	 mov	 ecx, DWORD PTR _q$[ebp]
  00427	8b 11		 mov	 edx, DWORD PTR [ecx]
  00429	52		 push	 edx
  0042a	8d 4d 94	 lea	 ecx, DWORD PTR _root$14[ebp]
  0042d	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN24@PMC_DivRem:

; 2153 :                         if (r->IS_ZERO)

  00432	8b 45 84	 mov	 eax, DWORD PTR _r$11[ebp]
  00435	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00438	83 e1 01	 and	 ecx, 1
  0043b	74 15		 je	 SHORT $LN25@PMC_DivRem

; 2154 :                         {
; 2155 :                             root.DeallocateNumber(r);

  0043d	8b 55 84	 mov	 edx, DWORD PTR _r$11[ebp]
  00440	52		 push	 edx
  00441	8d 4d 94	 lea	 ecx, DWORD PTR _root$14[ebp]
  00444	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 2156 :                             r = &number_zero;

  00449	c7 45 84 00 00
	00 00		 mov	 DWORD PTR _r$11[ebp], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero

; 2157 :                         }
; 2158 :                         else

  00450	eb 0c		 jmp	 SHORT $LN26@PMC_DivRem
$LN25@PMC_DivRem:

; 2159 :                             root.UnlinkNumber(r);

  00452	8b 45 84	 mov	 eax, DWORD PTR _r$11[ebp]
  00455	50		 push	 eax
  00456	8d 4d 94	 lea	 ecx, DWORD PTR _root$14[ebp]
  00459	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN26@PMC_DivRem:

; 2160 :                         return (r);

  0045e	8b 4d 84	 mov	 ecx, DWORD PTR _r$11[ebp]
  00461	89 8d 50 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], ecx
  00467	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0046e	8d 4d 94	 lea	 ecx, DWORD PTR _root$14[ebp]
  00471	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00476	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR $T3[ebp]
  0047c	e9 49 01 00 00	 jmp	 $LN1@PMC_DivRem

; 2161 :                     }
; 2162 :                     else

  00481	e9 44 01 00 00	 jmp	 $LN1@PMC_DivRem
$LN21@PMC_DivRem:

; 2163 :                     {
; 2164 :                         ResourceHolderUINT root;

  00486	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _root$9[ebp]
  0048c	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00491	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3

; 2165 :                         __UNIT_TYPE r_bit_count = u_bit_count + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには v_bit_count だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

  00498	8b 55 f0	 mov	 edx, DWORD PTR _u_bit_count$23[ebp]
  0049b	83 c2 20	 add	 edx, 32			; 00000020H
  0049e	89 95 64 ff ff
	ff		 mov	 DWORD PTR _r_bit_count$8[ebp], edx

; 2166 :                         NUMBER_HEADER* r = root.AllocateNumber(r_bit_count);

  004a4	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _r_bit_count$8[ebp]
  004aa	50		 push	 eax
  004ab	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _root$9[ebp]
  004b1	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  004b6	89 85 60 ff ff
	ff		 mov	 DWORD PTR _r$7[ebp], eax

; 2167 :                         __UNIT_TYPE* work_v_buf = root.AllocateBlock(v->UNIT_WORD_COUNT * __UNIT_TYPE_BIT_COUNT);

  004bc	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  004bf	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  004c2	c1 e2 05	 shl	 edx, 5
  004c5	52		 push	 edx
  004c6	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _root$9[ebp]
  004cc	e8 00 00 00 00	 call	 ?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAII@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
  004d1	89 85 5c ff ff
	ff		 mov	 DWORD PTR _work_v_buf$6[ebp], eax

; 2168 :                         (*fp_DivRem_X_X)(u->BLOCK, u->UNIT_WORD_COUNT, v->BLOCK, v->UNIT_WORD_COUNT, work_v_buf, nullptr, r->BLOCK);

  004d7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?fp_DivRem_X_X@Internal@Core@Math@Palmtree@@3P6AXPAII0I000@ZA
  004dc	89 85 40 ff ff
	ff		 mov	 DWORD PTR tv272[ebp], eax
  004e2	8b f4		 mov	 esi, esp
  004e4	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _r$7[ebp]
  004ea	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  004ed	52		 push	 edx
  004ee	6a 00		 push	 0
  004f0	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _work_v_buf$6[ebp]
  004f6	50		 push	 eax
  004f7	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  004fa	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  004fd	52		 push	 edx
  004fe	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  00501	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00504	51		 push	 ecx
  00505	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00508	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0050b	50		 push	 eax
  0050c	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  0050f	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00512	52		 push	 edx
  00513	ff 95 40 ff ff
	ff		 call	 DWORD PTR tv272[ebp]
  00519	83 c4 1c	 add	 esp, 28			; 0000001cH
  0051c	3b f4		 cmp	 esi, esp
  0051e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2169 :                         root.CheckBlock(work_v_buf);

  00523	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _work_v_buf$6[ebp]
  00529	50		 push	 eax
  0052a	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _root$9[ebp]
  00530	e8 00 00 00 00	 call	 ?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock

; 2170 :                         root.CheckNumber(r);

  00535	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _r$7[ebp]
  0053b	51		 push	 ecx
  0053c	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _root$9[ebp]
  00542	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 2171 :                         root.DeallocateBlock(work_v_buf);

  00547	8b 95 5c ff ff
	ff		 mov	 edx, DWORD PTR _work_v_buf$6[ebp]
  0054d	52		 push	 edx
  0054e	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _root$9[ebp]
  00554	e8 00 00 00 00	 call	 ?DeallocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateBlock

; 2172 :                         CommitNumber(r);

  00559	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _r$7[ebp]
  0055f	50		 push	 eax
  00560	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  00565	83 c4 04	 add	 esp, 4

; 2173 :                         if (r->IS_ZERO)

  00568	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _r$7[ebp]
  0056e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00571	83 e2 01	 and	 edx, 1
  00574	74 1e		 je	 SHORT $LN27@PMC_DivRem

; 2174 :                         {
; 2175 :                             root.DeallocateNumber(r);

  00576	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _r$7[ebp]
  0057c	50		 push	 eax
  0057d	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _root$9[ebp]
  00583	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 2176 :                             r = &number_zero;

  00588	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _r$7[ebp], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero

; 2177 :                         }
; 2178 :                         else

  00592	eb 12		 jmp	 SHORT $LN28@PMC_DivRem
$LN27@PMC_DivRem:

; 2179 :                             root.UnlinkNumber(r);

  00594	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _r$7[ebp]
  0059a	51		 push	 ecx
  0059b	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _root$9[ebp]
  005a1	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN28@PMC_DivRem:

; 2180 :                         return (r);

  005a6	8b 95 60 ff ff
	ff		 mov	 edx, DWORD PTR _r$7[ebp]
  005ac	89 95 4c ff ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  005b2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  005b9	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _root$9[ebp]
  005bf	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  005c4	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
$LN1@PMC_DivRem:

; 2181 :                     }
; 2182 :                 }
; 2183 :             }
; 2184 :         }
; 2185 :     }

  005ca	52		 push	 edx
  005cb	8b cd		 mov	 ecx, ebp
  005cd	50		 push	 eax
  005ce	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN40@PMC_DivRem
  005d4	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  005d9	58		 pop	 eax
  005da	5a		 pop	 edx
  005db	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  005de	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  005e5	59		 pop	 ecx
  005e6	5f		 pop	 edi
  005e7	5e		 pop	 esi
  005e8	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  005ee	3b ec		 cmp	 ebp, esp
  005f0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  005f5	8b e5		 mov	 esp, ebp
  005f7	5d		 pop	 ebp
  005f8	c3		 ret	 0
  005f9	0f 1f 00	 npad	 3
$LN40@PMC_DivRem:
  005fc	04 00 00 00	 DD	 4
  00600	00 00 00 00	 DD	 $LN39@PMC_DivRem
$LN39@PMC_DivRem:
  00604	d8 ff ff ff	 DD	 -40			; ffffffd8H
  00608	10 00 00 00	 DD	 16			; 00000010H
  0060c	00 00 00 00	 DD	 $LN34@PMC_DivRem
  00610	b4 ff ff ff	 DD	 -76			; ffffffb4H
  00614	10 00 00 00	 DD	 16			; 00000010H
  00618	00 00 00 00	 DD	 $LN35@PMC_DivRem
  0061c	94 ff ff ff	 DD	 -108			; ffffff94H
  00620	10 00 00 00	 DD	 16			; 00000010H
  00624	00 00 00 00	 DD	 $LN36@PMC_DivRem
  00628	6c ff ff ff	 DD	 -148			; ffffff6cH
  0062c	10 00 00 00	 DD	 16			; 00000010H
  00630	00 00 00 00	 DD	 $LN37@PMC_DivRem
$LN37@PMC_DivRem:
  00634	72		 DB	 114			; 00000072H
  00635	6f		 DB	 111			; 0000006fH
  00636	6f		 DB	 111			; 0000006fH
  00637	74		 DB	 116			; 00000074H
  00638	00		 DB	 0
$LN36@PMC_DivRem:
  00639	72		 DB	 114			; 00000072H
  0063a	6f		 DB	 111			; 0000006fH
  0063b	6f		 DB	 111			; 0000006fH
  0063c	74		 DB	 116			; 00000074H
  0063d	00		 DB	 0
$LN35@PMC_DivRem:
  0063e	72		 DB	 114			; 00000072H
  0063f	6f		 DB	 111			; 0000006fH
  00640	6f		 DB	 111			; 0000006fH
  00641	74		 DB	 116			; 00000074H
  00642	00		 DB	 0
$LN34@PMC_DivRem:
  00643	72		 DB	 114			; 00000072H
  00644	6f		 DB	 111			; 0000006fH
  00645	6f		 DB	 111			; 0000006fH
  00646	74		 DB	 116			; 00000074H
  00647	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0PAPAU51234@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _root$21[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__unwindfunclet$?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0PAPAU51234@@Z$1:
  00008	8d 4d b4	 lea	 ecx, DWORD PTR _root$17[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__unwindfunclet$?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0PAPAU51234@@Z$2:
  00010	8d 4d 94	 lea	 ecx, DWORD PTR _root$14[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__unwindfunclet$?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0PAPAU51234@@Z$3:
  00018	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _root$9[ebp]
  0001e	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0PAPAU51234@@Z:
  00023	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00027	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002a	8b 8a 40 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-192]
  00030	33 c8		 xor	 ecx, eax
  00032	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00037	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0PAPAU51234@@Z
  0003c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0PAPAU51234@@Z ENDP ; Palmtree::Math::Core::Internal::PMC_DivRem_X_X_Imp
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
_TEXT	SEGMENT
tv244 = -352						; size = 4
tv207 = -348						; size = 4
tv178 = -344						; size = 4
$T2 = -340						; size = 8
$T3 = -332						; size = 8
$T4 = -324						; size = 8
$T5 = -316						; size = 8
$T6 = -308						; size = 24
_r_buf$7 = -284						; size = 4
_r_buf$8 = -276						; size = 4
_q_bit_count$9 = -268					; size = 4
_root$10 = -260						; size = 16
_v_bit_count$11 = -240					; size = 4
_u_bit_count$12 = -236					; size = 4
_r$13 = -232						; size = 8
_r_buf$14 = -224					; size = 4
_work_v_buf$15 = -216					; size = 8
_v_buf$16 = -200					; size = 8
_r_bit_count$17 = -188					; size = 4
_root$18 = -180						; size = 16
_r_buf$19 = -160					; size = 4
_work_v_buf$20 = -152					; size = 8
_v_buf$21 = -136					; size = 8
_r_bit_count$22 = -124					; size = 4
_q_bit_count$23 = -120					; size = 4
_root$24 = -112						; size = 16
_r_hi$25 = -92						; size = 4
_r_lo$26 = -88						; size = 4
_v_bit_count$27 = -84					; size = 4
_r_buf$28 = -80						; size = 4
_r_buf$29 = -72						; size = 4
_q_bit_count$30 = -64					; size = 4
_root$31 = -56						; size = 16
_v_bit_count$32 = -36					; size = 4
_v_lo$33 = -32						; size = 4
_v_hi$34 = -24						; size = 4
_u_bit_count$35 = -16					; size = 4
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_q$ = 20						; size = 4
?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPAU__tag_NUMBER_HEADER@1234@_KPAPAU51234@@Z PROC ; Palmtree::Math::Core::Internal::PMC_DivRem_X_L_Imp

; 1818 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPAU__tag_NUMBER_HEADER@1234@_KPAPAU51234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 54 01 00
	00		 sub	 esp, 340		; 00000154H
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8d bd a0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-352]
  0001f	b9 55 00 00 00	 mov	 ecx, 85			; 00000055H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	b9 00 00 00 00	 mov	 ecx, OFFSET __E17217E9_pmc_divrem@cpp
  00041	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1819 :         if (v == 0)

  00046	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  00049	0b 45 10	 or	 eax, DWORD PTR _v$[ebp+4]
  0004c	75 21		 jne	 SHORT $LN2@PMC_DivRem

; 1820 :         {
; 1821 :             // v が 0 である場合
; 1822 : 
; 1823 :             // 0 による除算はエラーで返す
; 1824 :             throw DivisionByZeroException(L"0による除算が行われようとしました。");

  0004e	68 00 00 00 00	 push	 OFFSET $SG118648
  00053	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00059	e8 00 00 00 00	 call	 ??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException
  0005e	68 00 00 00 00	 push	 OFFSET __TI2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@
  00063	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00069	51		 push	 ecx
  0006a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@PMC_DivRem:

; 1825 :         }
; 1826 :         if (u->IS_ZERO)

  0006f	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00072	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00075	83 e0 01	 and	 eax, 1
  00078	74 1d		 je	 SHORT $LN3@PMC_DivRem

; 1827 :         {
; 1828 :             // x が 0 である場合
; 1829 : 
; 1830 :             // q = 0, r = 0 を返す
; 1831 :             if (q != nullptr)

  0007a	83 7d 14 00	 cmp	 DWORD PTR _q$[ebp], 0
  0007e	74 09		 je	 SHORT $LN5@PMC_DivRem

; 1832 :                 *q = &number_zero;

  00080	8b 4d 14	 mov	 ecx, DWORD PTR _q$[ebp]
  00083	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
$LN5@PMC_DivRem:

; 1833 :             return (0);

  00089	33 c0		 xor	 eax, eax
  0008b	33 d2		 xor	 edx, edx
  0008d	e9 d0 06 00 00	 jmp	 $LN36@PMC_DivRem

; 1834 :         }
; 1835 :         else

  00092	e9 cb 06 00 00	 jmp	 $LN36@PMC_DivRem
$LN3@PMC_DivRem:

; 1836 :         {
; 1837 :             // u が 0 ではない場合
; 1838 : 
; 1839 :             if (v == 1)

  00097	83 7d 0c 01	 cmp	 DWORD PTR _v$[ebp], 1
  0009b	75 2b		 jne	 SHORT $LN6@PMC_DivRem
  0009d	83 7d 10 00	 cmp	 DWORD PTR _v$[ebp+4], 0
  000a1	75 25		 jne	 SHORT $LN6@PMC_DivRem

; 1840 :             {
; 1841 :                 // v が 1 である場合
; 1842 : 
; 1843 :                 // q = u, r = 0 を返す
; 1844 :                 if (q != nullptr)

  000a3	83 7d 14 00	 cmp	 DWORD PTR _q$[ebp], 0
  000a7	74 11		 je	 SHORT $LN8@PMC_DivRem

; 1845 :                     *q = DuplicateNumber(u);

  000a9	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  000ac	52		 push	 edx
  000ad	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  000b2	83 c4 04	 add	 esp, 4
  000b5	8b 4d 14	 mov	 ecx, DWORD PTR _q$[ebp]
  000b8	89 01		 mov	 DWORD PTR [ecx], eax
$LN8@PMC_DivRem:

; 1846 :                 return (0);

  000ba	33 c0		 xor	 eax, eax
  000bc	33 d2		 xor	 edx, edx
  000be	e9 9f 06 00 00	 jmp	 $LN36@PMC_DivRem

; 1847 :             }
; 1848 :             else

  000c3	e9 9a 06 00 00	 jmp	 $LN36@PMC_DivRem
$LN6@PMC_DivRem:

; 1849 :             {
; 1850 :                 // u > 0 かつ v > 1 である場合
; 1851 : 
; 1852 :                 // u と v の商・剰余を計算する
; 1853 :                 __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

  000c8	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  000cb	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000ce	89 45 f0	 mov	 DWORD PTR _u_bit_count$35[ebp], eax

; 1854 :                 if (sizeof(__UNIT_TYPE) < sizeof(v))

  000d1	b9 01 00 00 00	 mov	 ecx, 1
  000d6	85 c9		 test	 ecx, ecx
  000d8	0f 84 f0 04 00
	00		 je	 $LN9@PMC_DivRem

; 1855 :                 {
; 1856 :                     // _UINT64_T が 1 ワードで表現しきれない場合
; 1857 :                     _UINT32_T v_hi;
; 1858 :                     _UINT32_T v_lo = _FROMDWORDTOWORD(v, &v_hi);

  000de	8d 55 e8	 lea	 edx, DWORD PTR _v_hi$34[ebp]
  000e1	52		 push	 edx
  000e2	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp+4]
  000e5	50		 push	 eax
  000e6	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  000e9	51		 push	 ecx
  000ea	e8 00 00 00 00	 call	 __FROMDWORDTOWORD
  000ef	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f2	89 45 e0	 mov	 DWORD PTR _v_lo$33[ebp], eax

; 1859 :                     if (v_hi == 0)

  000f5	83 7d e8 00	 cmp	 DWORD PTR _v_hi$34[ebp], 0
  000f9	0f 85 5f 01 00
	00		 jne	 $LN11@PMC_DivRem

; 1860 :                     {
; 1861 :                         // v の値が 32bit で表現可能な場合
; 1862 :                         __UNIT_TYPE v_bit_count = sizeof(v_lo) * 8 - _LZCNT_ALT_32(v_lo);

  000ff	8b 55 e0	 mov	 edx, DWORD PTR _v_lo$33[ebp]
  00102	52		 push	 edx
  00103	e8 00 00 00 00	 call	 __LZCNT_ALT_32
  00108	83 c4 04	 add	 esp, 4
  0010b	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00110	2b c8		 sub	 ecx, eax
  00112	89 4d dc	 mov	 DWORD PTR _v_bit_count$32[ebp], ecx

; 1863 :                         if (u_bit_count < v_bit_count)

  00115	8b 55 f0	 mov	 edx, DWORD PTR _u_bit_count$35[ebp]
  00118	3b 55 dc	 cmp	 edx, DWORD PTR _v_bit_count$32[ebp]
  0011b	73 2e		 jae	 SHORT $LN13@PMC_DivRem

; 1864 :                         {
; 1865 :                             // 明らかに u < v である場合
; 1866 : 
; 1867 :                             // q = 0, r = u を返す。
; 1868 :                             if (q != nullptr)

  0011d	83 7d 14 00	 cmp	 DWORD PTR _q$[ebp], 0
  00121	74 09		 je	 SHORT $LN15@PMC_DivRem

; 1869 :                                 *q = &number_zero;

  00123	8b 45 14	 mov	 eax, DWORD PTR _q$[ebp]
  00126	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
$LN15@PMC_DivRem:

; 1870 :                             return (u->BLOCK[0]);

  0012c	b9 04 00 00 00	 mov	 ecx, 4
  00131	6b d1 00	 imul	 edx, ecx, 0
  00134	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00137	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0013a	33 f6		 xor	 esi, esi
  0013c	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
  0013f	8b d6		 mov	 edx, esi
  00141	e9 1c 06 00 00	 jmp	 $LN36@PMC_DivRem

; 1871 :                         }
; 1872 :                         else

  00146	e9 0e 01 00 00	 jmp	 $LN14@PMC_DivRem
$LN13@PMC_DivRem:

; 1873 :                         {
; 1874 :                             if (q != nullptr)

  0014b	83 7d 14 00	 cmp	 DWORD PTR _q$[ebp], 0
  0014f	0f 84 dd 00 00
	00		 je	 $LN16@PMC_DivRem

; 1875 :                             {
; 1876 :                                 ResourceHolderUINT root;

  00155	8d 4d c8	 lea	 ecx, DWORD PTR _root$31[ebp]
  00158	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  0015d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1877 :                                 __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

  00164	8b 55 f0	 mov	 edx, DWORD PTR _u_bit_count$35[ebp]
  00167	2b 55 dc	 sub	 edx, DWORD PTR _v_bit_count$32[ebp]
  0016a	83 c2 21	 add	 edx, 33			; 00000021H
  0016d	89 55 c0	 mov	 DWORD PTR _q_bit_count$30[ebp], edx

; 1878 :                                 *q = root.AllocateNumber(q_bit_count);

  00170	8b 45 c0	 mov	 eax, DWORD PTR _q_bit_count$30[ebp]
  00173	50		 push	 eax
  00174	8d 4d c8	 lea	 ecx, DWORD PTR _root$31[ebp]
  00177	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  0017c	8b 4d 14	 mov	 ecx, DWORD PTR _q$[ebp]
  0017f	89 01		 mov	 DWORD PTR [ecx], eax

; 1879 :                                 __UNIT_TYPE r_buf = 0;

  00181	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _r_buf$29[ebp], 0

; 1880 :                                 DivRem_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, v_lo, (*q)->BLOCK, &r_buf);

  00188	8d 55 b8	 lea	 edx, DWORD PTR _r_buf$29[ebp]
  0018b	52		 push	 edx
  0018c	8b 45 14	 mov	 eax, DWORD PTR _q$[ebp]
  0018f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00191	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00194	52		 push	 edx
  00195	8b 45 e0	 mov	 eax, DWORD PTR _v_lo$33[ebp]
  00198	50		 push	 eax
  00199	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  0019c	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0019f	52		 push	 edx
  001a0	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  001a3	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  001a6	51		 push	 ecx
  001a7	e8 00 00 00 00	 call	 ?DivRem_X_1W@Internal@Core@Math@Palmtree@@YAXPAIII00@Z ; Palmtree::Math::Core::Internal::DivRem_X_1W
  001ac	83 c4 14	 add	 esp, 20			; 00000014H

; 1881 :                                 root.CheckNumber(*q);

  001af	8b 55 14	 mov	 edx, DWORD PTR _q$[ebp]
  001b2	8b 02		 mov	 eax, DWORD PTR [edx]
  001b4	50		 push	 eax
  001b5	8d 4d c8	 lea	 ecx, DWORD PTR _root$31[ebp]
  001b8	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 1882 :                                 CommitNumber(*q);

  001bd	8b 4d 14	 mov	 ecx, DWORD PTR _q$[ebp]
  001c0	8b 11		 mov	 edx, DWORD PTR [ecx]
  001c2	52		 push	 edx
  001c3	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  001c8	83 c4 04	 add	 esp, 4

; 1883 :                                 if ((*q)->IS_ZERO)

  001cb	8b 45 14	 mov	 eax, DWORD PTR _q$[ebp]
  001ce	8b 08		 mov	 ecx, DWORD PTR [eax]
  001d0	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  001d3	83 e2 01	 and	 edx, 1
  001d6	74 19		 je	 SHORT $LN18@PMC_DivRem

; 1884 :                                 {
; 1885 :                                     root.DeallocateNumber(*q);

  001d8	8b 45 14	 mov	 eax, DWORD PTR _q$[ebp]
  001db	8b 08		 mov	 ecx, DWORD PTR [eax]
  001dd	51		 push	 ecx
  001de	8d 4d c8	 lea	 ecx, DWORD PTR _root$31[ebp]
  001e1	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 1886 :                                     *q = &number_zero;

  001e6	8b 55 14	 mov	 edx, DWORD PTR _q$[ebp]
  001e9	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero

; 1887 :                                 }
; 1888 :                                 else

  001ef	eb 0e		 jmp	 SHORT $LN19@PMC_DivRem
$LN18@PMC_DivRem:

; 1889 :                                     root.UnlinkNumber(*q);

  001f1	8b 45 14	 mov	 eax, DWORD PTR _q$[ebp]
  001f4	8b 08		 mov	 ecx, DWORD PTR [eax]
  001f6	51		 push	 ecx
  001f7	8d 4d c8	 lea	 ecx, DWORD PTR _root$31[ebp]
  001fa	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN19@PMC_DivRem:

; 1890 :                                 return (r_buf);

  001ff	8b 55 b8	 mov	 edx, DWORD PTR _r_buf$29[ebp]
  00202	33 c0		 xor	 eax, eax
  00204	89 95 c4 fe ff
	ff		 mov	 DWORD PTR $T5[ebp], edx
  0020a	89 85 c8 fe ff
	ff		 mov	 DWORD PTR $T5[ebp+4], eax
  00210	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00217	8d 4d c8	 lea	 ecx, DWORD PTR _root$31[ebp]
  0021a	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0021f	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR $T5[ebp]
  00225	8b 95 c8 fe ff
	ff		 mov	 edx, DWORD PTR $T5[ebp+4]
  0022b	e9 32 05 00 00	 jmp	 $LN36@PMC_DivRem

; 1891 :                             }
; 1892 :                             else

  00230	eb 27		 jmp	 SHORT $LN14@PMC_DivRem
$LN16@PMC_DivRem:

; 1893 :                             {
; 1894 :                                 __UNIT_TYPE r_buf = Rem_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, v_lo);

  00232	8b 4d e0	 mov	 ecx, DWORD PTR _v_lo$33[ebp]
  00235	51		 push	 ecx
  00236	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00239	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0023c	50		 push	 eax
  0023d	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  00240	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00243	52		 push	 edx
  00244	e8 00 00 00 00	 call	 ?Rem_X_1W@Internal@Core@Math@Palmtree@@YAIPAIII@Z ; Palmtree::Math::Core::Internal::Rem_X_1W
  00249	83 c4 0c	 add	 esp, 12			; 0000000cH
  0024c	89 45 b0	 mov	 DWORD PTR _r_buf$28[ebp], eax

; 1895 :                                 return (r_buf);

  0024f	33 d2		 xor	 edx, edx
  00251	8b 45 b0	 mov	 eax, DWORD PTR _r_buf$28[ebp]
  00254	e9 09 05 00 00	 jmp	 $LN36@PMC_DivRem
$LN14@PMC_DivRem:

; 1896 :                             }
; 1897 :                         }
; 1898 :                     }
; 1899 :                     else

  00259	e9 6b 03 00 00	 jmp	 $LN12@PMC_DivRem
$LN11@PMC_DivRem:

; 1900 :                     {
; 1901 :                         // v の値が 32bit では表現できない場合
; 1902 :                         __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v_hi);

  0025e	8b 45 e8	 mov	 eax, DWORD PTR _v_hi$34[ebp]
  00261	50		 push	 eax
  00262	e8 00 00 00 00	 call	 __LZCNT_ALT_32
  00267	83 c4 04	 add	 esp, 4
  0026a	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0026f	2b c8		 sub	 ecx, eax
  00271	89 4d ac	 mov	 DWORD PTR _v_bit_count$27[ebp], ecx

; 1903 :                         if (u_bit_count < v_bit_count)

  00274	8b 55 f0	 mov	 edx, DWORD PTR _u_bit_count$35[ebp]
  00277	3b 55 ac	 cmp	 edx, DWORD PTR _v_bit_count$27[ebp]
  0027a	0f 83 92 00 00
	00		 jae	 $LN20@PMC_DivRem

; 1904 :                         {
; 1905 :                             // 明らかに u < v である場合
; 1906 : 
; 1907 :                             // q = 0, r = u を返す。
; 1908 :                             if (q != nullptr)

  00280	83 7d 14 00	 cmp	 DWORD PTR _q$[ebp], 0
  00284	74 09		 je	 SHORT $LN22@PMC_DivRem

; 1909 :                                 *q = &number_zero;

  00286	8b 45 14	 mov	 eax, DWORD PTR _q$[ebp]
  00289	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
$LN22@PMC_DivRem:

; 1910 :                             if (sizeof(v) == sizeof(__UNIT_TYPE))

  0028f	33 c9		 xor	 ecx, ecx
  00291	74 1c		 je	 SHORT $LN23@PMC_DivRem

; 1911 :                                 return (u->BLOCK[0]);

  00293	ba 04 00 00 00	 mov	 edx, 4
  00298	6b c2 00	 imul	 eax, edx, 0
  0029b	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  0029e	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  002a1	33 c9		 xor	 ecx, ecx
  002a3	8b 04 02	 mov	 eax, DWORD PTR [edx+eax]
  002a6	8b d1		 mov	 edx, ecx
  002a8	e9 b5 04 00 00	 jmp	 $LN36@PMC_DivRem

; 1912 :                             else

  002ad	eb 5e		 jmp	 SHORT $LN24@PMC_DivRem
$LN23@PMC_DivRem:

; 1913 :                             {
; 1914 :                                 __UNIT_TYPE r_lo = u->BLOCK[0];

  002af	ba 04 00 00 00	 mov	 edx, 4
  002b4	6b c2 00	 imul	 eax, edx, 0
  002b7	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  002ba	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  002bd	8b 04 10	 mov	 eax, DWORD PTR [eax+edx]
  002c0	89 45 a8	 mov	 DWORD PTR _r_lo$26[ebp], eax

; 1915 :                                 __UNIT_TYPE r_hi = u->UNIT_WORD_COUNT > 1 ? u->BLOCK[1] : 0;

  002c3	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  002c6	83 79 10 01	 cmp	 DWORD PTR [ecx+16], 1
  002ca	76 19		 jbe	 SHORT $LN37@PMC_DivRem
  002cc	ba 04 00 00 00	 mov	 edx, 4
  002d1	c1 e2 00	 shl	 edx, 0
  002d4	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  002d7	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  002da	8b 14 0a	 mov	 edx, DWORD PTR [edx+ecx]
  002dd	89 95 a8 fe ff
	ff		 mov	 DWORD PTR tv178[ebp], edx
  002e3	eb 0a		 jmp	 SHORT $LN38@PMC_DivRem
$LN37@PMC_DivRem:
  002e5	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv178[ebp], 0
$LN38@PMC_DivRem:
  002ef	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR tv178[ebp]
  002f5	89 45 a4	 mov	 DWORD PTR _r_hi$25[ebp], eax

; 1916 :                                 return (_FROMWORDTODWORD((_UINT32_T)r_hi, (_UINT32_T)r_lo));

  002f8	8b 4d a8	 mov	 ecx, DWORD PTR _r_lo$26[ebp]
  002fb	51		 push	 ecx
  002fc	8b 55 a4	 mov	 edx, DWORD PTR _r_hi$25[ebp]
  002ff	52		 push	 edx
  00300	e8 00 00 00 00	 call	 __FROMWORDTODWORD
  00305	83 c4 08	 add	 esp, 8
  00308	e9 55 04 00 00	 jmp	 $LN36@PMC_DivRem
$LN24@PMC_DivRem:

; 1917 :                             }
; 1918 :                         }
; 1919 :                         else

  0030d	e9 b7 02 00 00	 jmp	 $LN12@PMC_DivRem
$LN20@PMC_DivRem:

; 1920 :                         {
; 1921 :                             if (q != nullptr)

  00312	83 7d 14 00	 cmp	 DWORD PTR _q$[ebp], 0
  00316	0f 84 75 01 00
	00		 je	 $LN25@PMC_DivRem

; 1922 :                             {
; 1923 :                                 ResourceHolderUINT root;

  0031c	8d 4d 90	 lea	 ecx, DWORD PTR _root$24[ebp]
  0031f	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00324	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 1924 :                                 __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

  0032b	8b 45 f0	 mov	 eax, DWORD PTR _u_bit_count$35[ebp]
  0032e	2b 45 ac	 sub	 eax, DWORD PTR _v_bit_count$27[ebp]
  00331	83 c0 21	 add	 eax, 33			; 00000021H
  00334	89 45 88	 mov	 DWORD PTR _q_bit_count$23[ebp], eax

; 1925 :                                 __UNIT_TYPE r_bit_count = u_bit_count + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには v_bit_count だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

  00337	8b 4d f0	 mov	 ecx, DWORD PTR _u_bit_count$35[ebp]
  0033a	83 c1 20	 add	 ecx, 32			; 00000020H
  0033d	89 4d 84	 mov	 DWORD PTR _r_bit_count$22[ebp], ecx

; 1926 :                                 *q = root.AllocateNumber(q_bit_count);

  00340	8b 55 88	 mov	 edx, DWORD PTR _q_bit_count$23[ebp]
  00343	52		 push	 edx
  00344	8d 4d 90	 lea	 ecx, DWORD PTR _root$24[ebp]
  00347	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  0034c	8b 4d 14	 mov	 ecx, DWORD PTR _q$[ebp]
  0034f	89 01		 mov	 DWORD PTR [ecx], eax

; 1927 :                                 __UNIT_TYPE v_buf[] = { v_lo, v_hi };

  00351	8b 55 e0	 mov	 edx, DWORD PTR _v_lo$33[ebp]
  00354	89 95 78 ff ff
	ff		 mov	 DWORD PTR _v_buf$21[ebp], edx
  0035a	8b 45 e8	 mov	 eax, DWORD PTR _v_hi$34[ebp]
  0035d	89 85 7c ff ff
	ff		 mov	 DWORD PTR _v_buf$21[ebp+4], eax

; 1928 :                                 __UNIT_TYPE work_v_buf[] = { 0, 0 };

  00363	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _work_v_buf$20[ebp], 0
  0036d	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _work_v_buf$20[ebp+4], 0

; 1929 :                                 __UNIT_TYPE* r_buf = root.AllocateBlock(r_bit_count);

  00377	8b 4d 84	 mov	 ecx, DWORD PTR _r_bit_count$22[ebp]
  0037a	51		 push	 ecx
  0037b	8d 4d 90	 lea	 ecx, DWORD PTR _root$24[ebp]
  0037e	e8 00 00 00 00	 call	 ?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAII@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
  00383	89 85 60 ff ff
	ff		 mov	 DWORD PTR _r_buf$19[ebp], eax

; 1930 :                                 (*fp_DivRem_X_X)(u->BLOCK, u->UNIT_WORD_COUNT, v_buf, sizeof(v_buf) / sizeof(v_buf[0]), work_v_buf, (*q)->BLOCK, r_buf);

  00389	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?fp_DivRem_X_X@Internal@Core@Math@Palmtree@@3P6AXPAII0I000@ZA
  0038f	89 95 a4 fe ff
	ff		 mov	 DWORD PTR tv207[ebp], edx
  00395	8b f4		 mov	 esi, esp
  00397	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _r_buf$19[ebp]
  0039d	50		 push	 eax
  0039e	8b 4d 14	 mov	 ecx, DWORD PTR _q$[ebp]
  003a1	8b 11		 mov	 edx, DWORD PTR [ecx]
  003a3	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  003a6	50		 push	 eax
  003a7	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _work_v_buf$20[ebp]
  003ad	51		 push	 ecx
  003ae	6a 02		 push	 2
  003b0	8d 95 78 ff ff
	ff		 lea	 edx, DWORD PTR _v_buf$21[ebp]
  003b6	52		 push	 edx
  003b7	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  003ba	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  003bd	51		 push	 ecx
  003be	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  003c1	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  003c4	50		 push	 eax
  003c5	ff 95 a4 fe ff
	ff		 call	 DWORD PTR tv207[ebp]
  003cb	83 c4 1c	 add	 esp, 28			; 0000001cH
  003ce	3b f4		 cmp	 esi, esp
  003d0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1931 :                                 root.CheckNumber(*q);

  003d5	8b 4d 14	 mov	 ecx, DWORD PTR _q$[ebp]
  003d8	8b 11		 mov	 edx, DWORD PTR [ecx]
  003da	52		 push	 edx
  003db	8d 4d 90	 lea	 ecx, DWORD PTR _root$24[ebp]
  003de	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 1932 :                                 root.CheckBlock(r_buf);

  003e3	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _r_buf$19[ebp]
  003e9	50		 push	 eax
  003ea	8d 4d 90	 lea	 ecx, DWORD PTR _root$24[ebp]
  003ed	e8 00 00 00 00	 call	 ?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock

; 1933 :                                 CommitNumber(*q);

  003f2	8b 4d 14	 mov	 ecx, DWORD PTR _q$[ebp]
  003f5	8b 11		 mov	 edx, DWORD PTR [ecx]
  003f7	52		 push	 edx
  003f8	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  003fd	83 c4 04	 add	 esp, 4

; 1934 :                                 if ((*q)->IS_ZERO)

  00400	8b 45 14	 mov	 eax, DWORD PTR _q$[ebp]
  00403	8b 08		 mov	 ecx, DWORD PTR [eax]
  00405	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00408	83 e2 01	 and	 edx, 1
  0040b	74 19		 je	 SHORT $LN27@PMC_DivRem

; 1935 :                                 {
; 1936 :                                     root.DeallocateNumber(*q);

  0040d	8b 45 14	 mov	 eax, DWORD PTR _q$[ebp]
  00410	8b 08		 mov	 ecx, DWORD PTR [eax]
  00412	51		 push	 ecx
  00413	8d 4d 90	 lea	 ecx, DWORD PTR _root$24[ebp]
  00416	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 1937 :                                     *q = &number_zero;

  0041b	8b 55 14	 mov	 edx, DWORD PTR _q$[ebp]
  0041e	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero

; 1938 :                                 }
; 1939 :                                 else

  00424	eb 0e		 jmp	 SHORT $LN28@PMC_DivRem
$LN27@PMC_DivRem:

; 1940 :                                     root.UnlinkNumber(*q);

  00426	8b 45 14	 mov	 eax, DWORD PTR _q$[ebp]
  00429	8b 08		 mov	 ecx, DWORD PTR [eax]
  0042b	51		 push	 ecx
  0042c	8d 4d 90	 lea	 ecx, DWORD PTR _root$24[ebp]
  0042f	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN28@PMC_DivRem:

; 1941 :                                 return (_FROMWORDTODWORD((_UINT32_T)r_buf[1], (_UINT32_T)r_buf[0]));

  00434	ba 04 00 00 00	 mov	 edx, 4
  00439	6b c2 00	 imul	 eax, edx, 0
  0043c	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _r_buf$19[ebp]
  00442	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00445	52		 push	 edx
  00446	b8 04 00 00 00	 mov	 eax, 4
  0044b	c1 e0 00	 shl	 eax, 0
  0044e	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _r_buf$19[ebp]
  00454	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00457	52		 push	 edx
  00458	e8 00 00 00 00	 call	 __FROMWORDTODWORD
  0045d	83 c4 08	 add	 esp, 8
  00460	89 85 bc fe ff
	ff		 mov	 DWORD PTR $T4[ebp], eax
  00466	89 95 c0 fe ff
	ff		 mov	 DWORD PTR $T4[ebp+4], edx
  0046c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00473	8d 4d 90	 lea	 ecx, DWORD PTR _root$24[ebp]
  00476	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0047b	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR $T4[ebp]
  00481	8b 95 c0 fe ff
	ff		 mov	 edx, DWORD PTR $T4[ebp+4]
  00487	e9 d6 02 00 00	 jmp	 $LN36@PMC_DivRem

; 1942 :                             }
; 1943 :                             else

  0048c	e9 38 01 00 00	 jmp	 $LN12@PMC_DivRem
$LN25@PMC_DivRem:

; 1944 :                             {
; 1945 :                                 ResourceHolderUINT root;

  00491	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _root$18[ebp]
  00497	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  0049c	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2

; 1946 :                                 __UNIT_TYPE r_bit_count = u_bit_count + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには v_bit_count だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

  004a3	8b 45 f0	 mov	 eax, DWORD PTR _u_bit_count$35[ebp]
  004a6	83 c0 20	 add	 eax, 32			; 00000020H
  004a9	89 85 44 ff ff
	ff		 mov	 DWORD PTR _r_bit_count$17[ebp], eax

; 1947 :                                 __UNIT_TYPE v_buf[] = { v_lo, v_hi };

  004af	8b 4d e0	 mov	 ecx, DWORD PTR _v_lo$33[ebp]
  004b2	89 8d 38 ff ff
	ff		 mov	 DWORD PTR _v_buf$16[ebp], ecx
  004b8	8b 55 e8	 mov	 edx, DWORD PTR _v_hi$34[ebp]
  004bb	89 95 3c ff ff
	ff		 mov	 DWORD PTR _v_buf$16[ebp+4], edx

; 1948 :                                 __UNIT_TYPE work_v_buf[] = { 0, 0 };

  004c1	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _work_v_buf$15[ebp], 0
  004cb	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _work_v_buf$15[ebp+4], 0

; 1949 :                                 __UNIT_TYPE* r_buf = root.AllocateBlock(r_bit_count);

  004d5	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _r_bit_count$17[ebp]
  004db	50		 push	 eax
  004dc	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _root$18[ebp]
  004e2	e8 00 00 00 00	 call	 ?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAII@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
  004e7	89 85 20 ff ff
	ff		 mov	 DWORD PTR _r_buf$14[ebp], eax

; 1950 :                                 (*fp_DivRem_X_X)(u->BLOCK, u->UNIT_WORD_COUNT, v_buf, sizeof(v_buf) / sizeof(v_buf[0]), work_v_buf, nullptr, r_buf);

  004ed	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?fp_DivRem_X_X@Internal@Core@Math@Palmtree@@3P6AXPAII0I000@ZA
  004f3	89 8d a0 fe ff
	ff		 mov	 DWORD PTR tv244[ebp], ecx
  004f9	8b f4		 mov	 esi, esp
  004fb	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR _r_buf$14[ebp]
  00501	52		 push	 edx
  00502	6a 00		 push	 0
  00504	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR _work_v_buf$15[ebp]
  0050a	50		 push	 eax
  0050b	6a 02		 push	 2
  0050d	8d 8d 38 ff ff
	ff		 lea	 ecx, DWORD PTR _v_buf$16[ebp]
  00513	51		 push	 ecx
  00514	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00517	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0051a	50		 push	 eax
  0051b	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  0051e	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00521	52		 push	 edx
  00522	ff 95 a0 fe ff
	ff		 call	 DWORD PTR tv244[ebp]
  00528	83 c4 1c	 add	 esp, 28			; 0000001cH
  0052b	3b f4		 cmp	 esi, esp
  0052d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1951 :                                 root.CheckBlock(r_buf);

  00532	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _r_buf$14[ebp]
  00538	50		 push	 eax
  00539	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _root$18[ebp]
  0053f	e8 00 00 00 00	 call	 ?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock

; 1952 :                                 _UINT64_T r = _FROMWORDTODWORD((_UINT32_T)r_buf[1], (_UINT32_T)r_buf[0]);

  00544	b9 04 00 00 00	 mov	 ecx, 4
  00549	6b d1 00	 imul	 edx, ecx, 0
  0054c	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _r_buf$14[ebp]
  00552	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00555	51		 push	 ecx
  00556	ba 04 00 00 00	 mov	 edx, 4
  0055b	c1 e2 00	 shl	 edx, 0
  0055e	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _r_buf$14[ebp]
  00564	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00567	51		 push	 ecx
  00568	e8 00 00 00 00	 call	 __FROMWORDTODWORD
  0056d	83 c4 08	 add	 esp, 8
  00570	89 85 18 ff ff
	ff		 mov	 DWORD PTR _r$13[ebp], eax
  00576	89 95 1c ff ff
	ff		 mov	 DWORD PTR _r$13[ebp+4], edx

; 1953 :                                 root.DeallocateBlock(r_buf);

  0057c	8b 95 20 ff ff
	ff		 mov	 edx, DWORD PTR _r_buf$14[ebp]
  00582	52		 push	 edx
  00583	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _root$18[ebp]
  00589	e8 00 00 00 00	 call	 ?DeallocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateBlock

; 1954 :                                 return (r);

  0058e	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR _r$13[ebp]
  00594	89 85 b4 fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  0059a	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR _r$13[ebp+4]
  005a0	89 8d b8 fe ff
	ff		 mov	 DWORD PTR $T3[ebp+4], ecx
  005a6	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  005ad	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _root$18[ebp]
  005b3	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  005b8	8b 85 b4 fe ff
	ff		 mov	 eax, DWORD PTR $T3[ebp]
  005be	8b 95 b8 fe ff
	ff		 mov	 edx, DWORD PTR $T3[ebp+4]
  005c4	e9 99 01 00 00	 jmp	 $LN36@PMC_DivRem
$LN12@PMC_DivRem:

; 1955 :                             }
; 1956 :                         }
; 1957 :                     }
; 1958 :                 }
; 1959 :                 else

  005c9	e9 94 01 00 00	 jmp	 $LN36@PMC_DivRem
$LN9@PMC_DivRem:

; 1960 :                 {
; 1961 :                     // _UINT64_T が 1 ワードで表現できる場合
; 1962 : 
; 1963 :                     // x と y の商・剰余を計算する
; 1964 :                     __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

  005ce	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  005d1	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  005d4	89 85 14 ff ff
	ff		 mov	 DWORD PTR _u_bit_count$12[ebp], eax

; 1965 :                     __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);

  005da	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  005dd	51		 push	 ecx
  005de	e8 00 00 00 00	 call	 __LZCNT_ALT_UNIT
  005e3	83 c4 04	 add	 esp, 4
  005e6	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  005eb	2b d0		 sub	 edx, eax
  005ed	89 95 10 ff ff
	ff		 mov	 DWORD PTR _v_bit_count$11[ebp], edx

; 1966 :                     if (u_bit_count < v_bit_count)

  005f3	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _u_bit_count$12[ebp]
  005f9	3b 85 10 ff ff
	ff		 cmp	 eax, DWORD PTR _v_bit_count$11[ebp]
  005ff	73 2e		 jae	 SHORT $LN29@PMC_DivRem

; 1967 :                     {
; 1968 :                         // 明らかに u < v である場合
; 1969 : 
; 1970 :                         // q = 0, r = u を返す。
; 1971 :                         if (q != nullptr)

  00601	83 7d 14 00	 cmp	 DWORD PTR _q$[ebp], 0
  00605	74 09		 je	 SHORT $LN31@PMC_DivRem

; 1972 :                             *q = &number_zero;

  00607	8b 4d 14	 mov	 ecx, DWORD PTR _q$[ebp]
  0060a	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
$LN31@PMC_DivRem:

; 1973 :                         return (u->BLOCK[0]);

  00610	ba 04 00 00 00	 mov	 edx, 4
  00615	6b c2 00	 imul	 eax, edx, 0
  00618	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  0061b	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0061e	33 c9		 xor	 ecx, ecx
  00620	8b 04 02	 mov	 eax, DWORD PTR [edx+eax]
  00623	8b d1		 mov	 edx, ecx
  00625	e9 38 01 00 00	 jmp	 $LN36@PMC_DivRem

; 1974 :                     }
; 1975 :                     else

  0062a	e9 33 01 00 00	 jmp	 $LN36@PMC_DivRem
$LN29@PMC_DivRem:

; 1976 :                     {
; 1977 :                         if (q != nullptr)

  0062f	83 7d 14 00	 cmp	 DWORD PTR _q$[ebp], 0
  00633	0f 84 01 01 00
	00		 je	 $LN32@PMC_DivRem

; 1978 :                         {
; 1979 :                             ResourceHolderUINT root;

  00639	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _root$10[ebp]
  0063f	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00644	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3

; 1980 :                             __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

  0064b	8b 95 14 ff ff
	ff		 mov	 edx, DWORD PTR _u_bit_count$12[ebp]
  00651	2b 95 10 ff ff
	ff		 sub	 edx, DWORD PTR _v_bit_count$11[ebp]
  00657	83 c2 21	 add	 edx, 33			; 00000021H
  0065a	89 95 f4 fe ff
	ff		 mov	 DWORD PTR _q_bit_count$9[ebp], edx

; 1981 :                             *q = root.AllocateNumber(q_bit_count);

  00660	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _q_bit_count$9[ebp]
  00666	50		 push	 eax
  00667	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _root$10[ebp]
  0066d	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  00672	8b 4d 14	 mov	 ecx, DWORD PTR _q$[ebp]
  00675	89 01		 mov	 DWORD PTR [ecx], eax

; 1982 :                             __UNIT_TYPE r_buf = 0;

  00677	c7 85 ec fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _r_buf$8[ebp], 0

; 1983 :                             DivRem_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, (__UNIT_TYPE)v, (*q)->BLOCK, &r_buf);

  00681	8d 95 ec fe ff
	ff		 lea	 edx, DWORD PTR _r_buf$8[ebp]
  00687	52		 push	 edx
  00688	8b 45 14	 mov	 eax, DWORD PTR _q$[ebp]
  0068b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0068d	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00690	52		 push	 edx
  00691	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  00694	50		 push	 eax
  00695	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  00698	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0069b	52		 push	 edx
  0069c	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  0069f	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  006a2	51		 push	 ecx
  006a3	e8 00 00 00 00	 call	 ?DivRem_X_1W@Internal@Core@Math@Palmtree@@YAXPAIII00@Z ; Palmtree::Math::Core::Internal::DivRem_X_1W
  006a8	83 c4 14	 add	 esp, 20			; 00000014H

; 1984 :                             root.CheckNumber(*q);

  006ab	8b 55 14	 mov	 edx, DWORD PTR _q$[ebp]
  006ae	8b 02		 mov	 eax, DWORD PTR [edx]
  006b0	50		 push	 eax
  006b1	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _root$10[ebp]
  006b7	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 1985 :                             CommitNumber(*q);

  006bc	8b 4d 14	 mov	 ecx, DWORD PTR _q$[ebp]
  006bf	8b 11		 mov	 edx, DWORD PTR [ecx]
  006c1	52		 push	 edx
  006c2	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  006c7	83 c4 04	 add	 esp, 4

; 1986 :                             if ((*q)->IS_ZERO)

  006ca	8b 45 14	 mov	 eax, DWORD PTR _q$[ebp]
  006cd	8b 08		 mov	 ecx, DWORD PTR [eax]
  006cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  006d2	83 e2 01	 and	 edx, 1
  006d5	74 1c		 je	 SHORT $LN34@PMC_DivRem

; 1987 :                             {
; 1988 :                                 root.DeallocateNumber(*q);

  006d7	8b 45 14	 mov	 eax, DWORD PTR _q$[ebp]
  006da	8b 08		 mov	 ecx, DWORD PTR [eax]
  006dc	51		 push	 ecx
  006dd	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _root$10[ebp]
  006e3	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 1989 :                                 *q = &number_zero;

  006e8	8b 55 14	 mov	 edx, DWORD PTR _q$[ebp]
  006eb	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero

; 1990 :                             }
; 1991 :                             else

  006f1	eb 11		 jmp	 SHORT $LN35@PMC_DivRem
$LN34@PMC_DivRem:

; 1992 :                                 root.UnlinkNumber(*q);

  006f3	8b 45 14	 mov	 eax, DWORD PTR _q$[ebp]
  006f6	8b 08		 mov	 ecx, DWORD PTR [eax]
  006f8	51		 push	 ecx
  006f9	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _root$10[ebp]
  006ff	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN35@PMC_DivRem:

; 1993 :                             return (r_buf);

  00704	8b 95 ec fe ff
	ff		 mov	 edx, DWORD PTR _r_buf$8[ebp]
  0070a	33 c0		 xor	 eax, eax
  0070c	89 95 ac fe ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  00712	89 85 b0 fe ff
	ff		 mov	 DWORD PTR $T2[ebp+4], eax
  00718	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0071f	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _root$10[ebp]
  00725	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0072a	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00730	8b 95 b0 fe ff
	ff		 mov	 edx, DWORD PTR $T2[ebp+4]
  00736	eb 2a		 jmp	 SHORT $LN36@PMC_DivRem

; 1994 :                         }
; 1995 :                         else

  00738	eb 28		 jmp	 SHORT $LN36@PMC_DivRem
$LN32@PMC_DivRem:

; 1996 :                         {
; 1997 :                             __UNIT_TYPE r_buf = Rem_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, (__UNIT_TYPE)v);

  0073a	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  0073d	51		 push	 ecx
  0073e	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00741	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00744	50		 push	 eax
  00745	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  00748	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0074b	52		 push	 edx
  0074c	e8 00 00 00 00	 call	 ?Rem_X_1W@Internal@Core@Math@Palmtree@@YAIPAIII@Z ; Palmtree::Math::Core::Internal::Rem_X_1W
  00751	83 c4 0c	 add	 esp, 12			; 0000000cH
  00754	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _r_buf$7[ebp], eax

; 1998 :                             return (r_buf);

  0075a	33 d2		 xor	 edx, edx
  0075c	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _r_buf$7[ebp]
$LN36@PMC_DivRem:

; 1999 :                         }
; 2000 :                     }
; 2001 :                 }
; 2002 : 
; 2003 :             }
; 2004 :         }
; 2005 :     }

  00762	52		 push	 edx
  00763	8b cd		 mov	 ecx, ebp
  00765	50		 push	 eax
  00766	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN56@PMC_DivRem
  0076c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00771	58		 pop	 eax
  00772	5a		 pop	 edx
  00773	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00776	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0077d	59		 pop	 ecx
  0077e	5f		 pop	 edi
  0077f	5e		 pop	 esi
  00780	81 c4 60 01 00
	00		 add	 esp, 352		; 00000160H
  00786	3b ec		 cmp	 ebp, esp
  00788	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0078d	8b e5		 mov	 esp, ebp
  0078f	5d		 pop	 ebp
  00790	c3		 ret	 0
  00791	0f 1f 00	 npad	 3
$LN56@PMC_DivRem:
  00794	0b 00 00 00	 DD	 11			; 0000000bH
  00798	00 00 00 00	 DD	 $LN55@PMC_DivRem
$LN55@PMC_DivRem:
  0079c	e8 ff ff ff	 DD	 -24			; ffffffe8H
  007a0	04 00 00 00	 DD	 4
  007a4	00 00 00 00	 DD	 $LN43@PMC_DivRem
  007a8	c8 ff ff ff	 DD	 -56			; ffffffc8H
  007ac	10 00 00 00	 DD	 16			; 00000010H
  007b0	00 00 00 00	 DD	 $LN44@PMC_DivRem
  007b4	b8 ff ff ff	 DD	 -72			; ffffffb8H
  007b8	04 00 00 00	 DD	 4
  007bc	00 00 00 00	 DD	 $LN45@PMC_DivRem
  007c0	90 ff ff ff	 DD	 -112			; ffffff90H
  007c4	10 00 00 00	 DD	 16			; 00000010H
  007c8	00 00 00 00	 DD	 $LN46@PMC_DivRem
  007cc	78 ff ff ff	 DD	 -136			; ffffff78H
  007d0	08 00 00 00	 DD	 8
  007d4	00 00 00 00	 DD	 $LN47@PMC_DivRem
  007d8	68 ff ff ff	 DD	 -152			; ffffff68H
  007dc	08 00 00 00	 DD	 8
  007e0	00 00 00 00	 DD	 $LN48@PMC_DivRem
  007e4	4c ff ff ff	 DD	 -180			; ffffff4cH
  007e8	10 00 00 00	 DD	 16			; 00000010H
  007ec	00 00 00 00	 DD	 $LN49@PMC_DivRem
  007f0	38 ff ff ff	 DD	 -200			; ffffff38H
  007f4	08 00 00 00	 DD	 8
  007f8	00 00 00 00	 DD	 $LN50@PMC_DivRem
  007fc	28 ff ff ff	 DD	 -216			; ffffff28H
  00800	08 00 00 00	 DD	 8
  00804	00 00 00 00	 DD	 $LN51@PMC_DivRem
  00808	fc fe ff ff	 DD	 -260			; fffffefcH
  0080c	10 00 00 00	 DD	 16			; 00000010H
  00810	00 00 00 00	 DD	 $LN52@PMC_DivRem
  00814	ec fe ff ff	 DD	 -276			; fffffeecH
  00818	04 00 00 00	 DD	 4
  0081c	00 00 00 00	 DD	 $LN53@PMC_DivRem
$LN53@PMC_DivRem:
  00820	72		 DB	 114			; 00000072H
  00821	5f		 DB	 95			; 0000005fH
  00822	62		 DB	 98			; 00000062H
  00823	75		 DB	 117			; 00000075H
  00824	66		 DB	 102			; 00000066H
  00825	00		 DB	 0
$LN52@PMC_DivRem:
  00826	72		 DB	 114			; 00000072H
  00827	6f		 DB	 111			; 0000006fH
  00828	6f		 DB	 111			; 0000006fH
  00829	74		 DB	 116			; 00000074H
  0082a	00		 DB	 0
$LN51@PMC_DivRem:
  0082b	77		 DB	 119			; 00000077H
  0082c	6f		 DB	 111			; 0000006fH
  0082d	72		 DB	 114			; 00000072H
  0082e	6b		 DB	 107			; 0000006bH
  0082f	5f		 DB	 95			; 0000005fH
  00830	76		 DB	 118			; 00000076H
  00831	5f		 DB	 95			; 0000005fH
  00832	62		 DB	 98			; 00000062H
  00833	75		 DB	 117			; 00000075H
  00834	66		 DB	 102			; 00000066H
  00835	00		 DB	 0
$LN50@PMC_DivRem:
  00836	76		 DB	 118			; 00000076H
  00837	5f		 DB	 95			; 0000005fH
  00838	62		 DB	 98			; 00000062H
  00839	75		 DB	 117			; 00000075H
  0083a	66		 DB	 102			; 00000066H
  0083b	00		 DB	 0
$LN49@PMC_DivRem:
  0083c	72		 DB	 114			; 00000072H
  0083d	6f		 DB	 111			; 0000006fH
  0083e	6f		 DB	 111			; 0000006fH
  0083f	74		 DB	 116			; 00000074H
  00840	00		 DB	 0
$LN48@PMC_DivRem:
  00841	77		 DB	 119			; 00000077H
  00842	6f		 DB	 111			; 0000006fH
  00843	72		 DB	 114			; 00000072H
  00844	6b		 DB	 107			; 0000006bH
  00845	5f		 DB	 95			; 0000005fH
  00846	76		 DB	 118			; 00000076H
  00847	5f		 DB	 95			; 0000005fH
  00848	62		 DB	 98			; 00000062H
  00849	75		 DB	 117			; 00000075H
  0084a	66		 DB	 102			; 00000066H
  0084b	00		 DB	 0
$LN47@PMC_DivRem:
  0084c	76		 DB	 118			; 00000076H
  0084d	5f		 DB	 95			; 0000005fH
  0084e	62		 DB	 98			; 00000062H
  0084f	75		 DB	 117			; 00000075H
  00850	66		 DB	 102			; 00000066H
  00851	00		 DB	 0
$LN46@PMC_DivRem:
  00852	72		 DB	 114			; 00000072H
  00853	6f		 DB	 111			; 0000006fH
  00854	6f		 DB	 111			; 0000006fH
  00855	74		 DB	 116			; 00000074H
  00856	00		 DB	 0
$LN45@PMC_DivRem:
  00857	72		 DB	 114			; 00000072H
  00858	5f		 DB	 95			; 0000005fH
  00859	62		 DB	 98			; 00000062H
  0085a	75		 DB	 117			; 00000075H
  0085b	66		 DB	 102			; 00000066H
  0085c	00		 DB	 0
$LN44@PMC_DivRem:
  0085d	72		 DB	 114			; 00000072H
  0085e	6f		 DB	 111			; 0000006fH
  0085f	6f		 DB	 111			; 0000006fH
  00860	74		 DB	 116			; 00000074H
  00861	00		 DB	 0
$LN43@PMC_DivRem:
  00862	76		 DB	 118			; 00000076H
  00863	5f		 DB	 95			; 0000005fH
  00864	68		 DB	 104			; 00000068H
  00865	69		 DB	 105			; 00000069H
  00866	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPAU__tag_NUMBER_HEADER@1234@_KPAPAU51234@@Z$0:
  00000	8d 4d c8	 lea	 ecx, DWORD PTR _root$31[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__unwindfunclet$?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPAU__tag_NUMBER_HEADER@1234@_KPAPAU51234@@Z$1:
  00008	8d 4d 90	 lea	 ecx, DWORD PTR _root$24[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__unwindfunclet$?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPAU__tag_NUMBER_HEADER@1234@_KPAPAU51234@@Z$2:
  00010	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _root$18[ebp]
  00016	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__unwindfunclet$?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPAU__tag_NUMBER_HEADER@1234@_KPAPAU51234@@Z$3:
  0001b	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _root$10[ebp]
  00021	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPAU__tag_NUMBER_HEADER@1234@_KPAPAU51234@@Z:
  00026	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002d	8b 8a a0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-352]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPAU__tag_NUMBER_HEADER@1234@_KPAPAU51234@@Z
  0003f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPAU__tag_NUMBER_HEADER@1234@_KPAPAU51234@@Z ENDP ; Palmtree::Math::Core::Internal::PMC_DivRem_X_L_Imp
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
_TEXT	SEGMENT
$T2 = -92						; size = 4
$T3 = -88						; size = 24
_r_buf$4 = -64						; size = 4
_r_buf$5 = -56						; size = 4
_q_bit_count$6 = -48					; size = 4
_root$7 = -40						; size = 16
_v_bit_count$8 = -20					; size = 4
_u_bit_count$9 = -16					; size = 4
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_q$ = 16						; size = 4
?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPAU__tag_NUMBER_HEADER@1234@IPAPAU51234@@Z PROC ; Palmtree::Math::Core::Internal::PMC_DivRem_X_I_Imp

; 1521 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPAU__tag_NUMBER_HEADER@1234@IPAPAU51234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	57		 push	 edi
  00015	8d 7d a4	 lea	 edi, DWORD PTR [ebp-92]
  00018	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	50		 push	 eax
  0002c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET __E17217E9_pmc_divrem@cpp
  0003a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1522 :         if (v == 0)

  0003f	83 7d 0c 00	 cmp	 DWORD PTR _v$[ebp], 0
  00043	75 1b		 jne	 SHORT $LN2@PMC_DivRem

; 1523 :         {
; 1524 :             // v が 0 である場合
; 1525 : 
; 1526 :             // 0 による除算はエラーで返す
; 1527 :             throw DivisionByZeroException(L"0による除算が行われようとしました。");

  00045	68 00 00 00 00	 push	 OFFSET $SG118464
  0004a	8d 4d a8	 lea	 ecx, DWORD PTR $T3[ebp]
  0004d	e8 00 00 00 00	 call	 ??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException
  00052	68 00 00 00 00	 push	 OFFSET __TI2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@
  00057	8d 45 a8	 lea	 eax, DWORD PTR $T3[ebp]
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@PMC_DivRem:

; 1528 :         }
; 1529 :         if (u->IS_ZERO)

  00060	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  00063	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00066	83 e2 01	 and	 edx, 1
  00069	74 1b		 je	 SHORT $LN3@PMC_DivRem

; 1530 :         {
; 1531 :             // u が 0 である場合
; 1532 : 
; 1533 :             // q = 0, r = 0 を返す
; 1534 : 
; 1535 :             if (q != nullptr)

  0006b	83 7d 10 00	 cmp	 DWORD PTR _q$[ebp], 0
  0006f	74 09		 je	 SHORT $LN5@PMC_DivRem

; 1536 :                 *q = &number_zero;

  00071	8b 45 10	 mov	 eax, DWORD PTR _q$[ebp]
  00074	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
$LN5@PMC_DivRem:

; 1537 :             return (0);

  0007a	33 c0		 xor	 eax, eax
  0007c	e9 6f 01 00 00	 jmp	 $LN16@PMC_DivRem

; 1538 :         }
; 1539 :         else

  00081	e9 6a 01 00 00	 jmp	 $LN16@PMC_DivRem
$LN3@PMC_DivRem:

; 1540 :         {
; 1541 :             // u が 0 ではない場合
; 1542 : 
; 1543 :             if (v == 1)

  00086	83 7d 0c 01	 cmp	 DWORD PTR _v$[ebp], 1
  0008a	75 23		 jne	 SHORT $LN6@PMC_DivRem

; 1544 :             {
; 1545 :                 // v が 1 である場合
; 1546 : 
; 1547 :                 // q = u, r = 0 を返す
; 1548 :                 if (q != nullptr)

  0008c	83 7d 10 00	 cmp	 DWORD PTR _q$[ebp], 0
  00090	74 11		 je	 SHORT $LN8@PMC_DivRem

; 1549 :                     *q = DuplicateNumber(u);

  00092	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  00095	51		 push	 ecx
  00096	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  0009b	83 c4 04	 add	 esp, 4
  0009e	8b 55 10	 mov	 edx, DWORD PTR _q$[ebp]
  000a1	89 02		 mov	 DWORD PTR [edx], eax
$LN8@PMC_DivRem:

; 1550 :                 return (0);

  000a3	33 c0		 xor	 eax, eax
  000a5	e9 46 01 00 00	 jmp	 $LN16@PMC_DivRem

; 1551 :             }
; 1552 :             else

  000aa	e9 41 01 00 00	 jmp	 $LN16@PMC_DivRem
$LN6@PMC_DivRem:

; 1553 :             {
; 1554 :                 // u と v がともに 0 ではない場合
; 1555 : 
; 1556 :                 // x と y の商・剰余を計算する
; 1557 :                 __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

  000af	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  000b2	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000b5	89 4d f0	 mov	 DWORD PTR _u_bit_count$9[ebp], ecx

; 1558 :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

  000b8	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  000bb	52		 push	 edx
  000bc	e8 00 00 00 00	 call	 __LZCNT_ALT_32
  000c1	83 c4 04	 add	 esp, 4
  000c4	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  000c9	2b c8		 sub	 ecx, eax
  000cb	89 4d ec	 mov	 DWORD PTR _v_bit_count$8[ebp], ecx

; 1559 :                 if (u_bit_count < v_bit_count)

  000ce	8b 55 f0	 mov	 edx, DWORD PTR _u_bit_count$9[ebp]
  000d1	3b 55 ec	 cmp	 edx, DWORD PTR _v_bit_count$8[ebp]
  000d4	73 2a		 jae	 SHORT $LN9@PMC_DivRem

; 1560 :                 {
; 1561 :                     // 明らかに u < v である場合
; 1562 : 
; 1563 :                     // q = 0, r = u を返す。
; 1564 :                     if (q != nullptr)

  000d6	83 7d 10 00	 cmp	 DWORD PTR _q$[ebp], 0
  000da	74 09		 je	 SHORT $LN11@PMC_DivRem

; 1565 :                         *q = &number_zero;

  000dc	8b 45 10	 mov	 eax, DWORD PTR _q$[ebp]
  000df	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
$LN11@PMC_DivRem:

; 1566 :                     return ((_UINT32_T)u->BLOCK[0]);

  000e5	b9 04 00 00 00	 mov	 ecx, 4
  000ea	6b d1 00	 imul	 edx, ecx, 0
  000ed	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  000f0	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  000f3	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  000f6	e9 f5 00 00 00	 jmp	 $LN16@PMC_DivRem

; 1567 :                 }
; 1568 :                 else

  000fb	e9 f0 00 00 00	 jmp	 $LN16@PMC_DivRem
$LN9@PMC_DivRem:

; 1569 :                 {
; 1570 :                     if (q != nullptr)

  00100	83 7d 10 00	 cmp	 DWORD PTR _q$[ebp], 0
  00104	0f 84 c6 00 00
	00		 je	 $LN12@PMC_DivRem

; 1571 :                     {
; 1572 :                         ResourceHolderUINT root;

  0010a	8d 4d d8	 lea	 ecx, DWORD PTR _root$7[ebp]
  0010d	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00112	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1573 :                         __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

  00119	8b 55 f0	 mov	 edx, DWORD PTR _u_bit_count$9[ebp]
  0011c	2b 55 ec	 sub	 edx, DWORD PTR _v_bit_count$8[ebp]
  0011f	83 c2 21	 add	 edx, 33			; 00000021H
  00122	89 55 d0	 mov	 DWORD PTR _q_bit_count$6[ebp], edx

; 1574 :                         *q = root.AllocateNumber(q_bit_count);

  00125	8b 45 d0	 mov	 eax, DWORD PTR _q_bit_count$6[ebp]
  00128	50		 push	 eax
  00129	8d 4d d8	 lea	 ecx, DWORD PTR _root$7[ebp]
  0012c	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  00131	8b 4d 10	 mov	 ecx, DWORD PTR _q$[ebp]
  00134	89 01		 mov	 DWORD PTR [ecx], eax

; 1575 :                         __UNIT_TYPE r_buf = 0;

  00136	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _r_buf$5[ebp], 0

; 1576 :                         DivRem_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, v, (*q)->BLOCK, &r_buf);

  0013d	8d 55 c8	 lea	 edx, DWORD PTR _r_buf$5[ebp]
  00140	52		 push	 edx
  00141	8b 45 10	 mov	 eax, DWORD PTR _q$[ebp]
  00144	8b 08		 mov	 ecx, DWORD PTR [eax]
  00146	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00149	52		 push	 edx
  0014a	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  0014d	50		 push	 eax
  0014e	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  00151	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00154	52		 push	 edx
  00155	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00158	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0015b	51		 push	 ecx
  0015c	e8 00 00 00 00	 call	 ?DivRem_X_1W@Internal@Core@Math@Palmtree@@YAXPAIII00@Z ; Palmtree::Math::Core::Internal::DivRem_X_1W
  00161	83 c4 14	 add	 esp, 20			; 00000014H

; 1577 :                         root.CheckNumber(*q);

  00164	8b 55 10	 mov	 edx, DWORD PTR _q$[ebp]
  00167	8b 02		 mov	 eax, DWORD PTR [edx]
  00169	50		 push	 eax
  0016a	8d 4d d8	 lea	 ecx, DWORD PTR _root$7[ebp]
  0016d	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 1578 :                         CommitNumber(*q);

  00172	8b 4d 10	 mov	 ecx, DWORD PTR _q$[ebp]
  00175	8b 11		 mov	 edx, DWORD PTR [ecx]
  00177	52		 push	 edx
  00178	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  0017d	83 c4 04	 add	 esp, 4

; 1579 :                         if ((*q)->IS_ZERO)

  00180	8b 45 10	 mov	 eax, DWORD PTR _q$[ebp]
  00183	8b 08		 mov	 ecx, DWORD PTR [eax]
  00185	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00188	83 e2 01	 and	 edx, 1
  0018b	74 19		 je	 SHORT $LN14@PMC_DivRem

; 1580 :                         {
; 1581 :                             root.DeallocateNumber(*q);

  0018d	8b 45 10	 mov	 eax, DWORD PTR _q$[ebp]
  00190	8b 08		 mov	 ecx, DWORD PTR [eax]
  00192	51		 push	 ecx
  00193	8d 4d d8	 lea	 ecx, DWORD PTR _root$7[ebp]
  00196	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 1582 :                             *q = &number_zero;

  0019b	8b 55 10	 mov	 edx, DWORD PTR _q$[ebp]
  0019e	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero

; 1583 :                         }
; 1584 :                         else

  001a4	eb 0e		 jmp	 SHORT $LN15@PMC_DivRem
$LN14@PMC_DivRem:

; 1585 :                             root.UnlinkNumber(*q);

  001a6	8b 45 10	 mov	 eax, DWORD PTR _q$[ebp]
  001a9	8b 08		 mov	 ecx, DWORD PTR [eax]
  001ab	51		 push	 ecx
  001ac	8d 4d d8	 lea	 ecx, DWORD PTR _root$7[ebp]
  001af	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN15@PMC_DivRem:

; 1586 :                         return ((_UINT32_T)r_buf);

  001b4	8b 55 c8	 mov	 edx, DWORD PTR _r_buf$5[ebp]
  001b7	89 55 a4	 mov	 DWORD PTR $T2[ebp], edx
  001ba	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001c1	8d 4d d8	 lea	 ecx, DWORD PTR _root$7[ebp]
  001c4	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  001c9	8b 45 a4	 mov	 eax, DWORD PTR $T2[ebp]
  001cc	eb 22		 jmp	 SHORT $LN16@PMC_DivRem

; 1587 :                     }
; 1588 :                     else

  001ce	eb 20		 jmp	 SHORT $LN16@PMC_DivRem
$LN12@PMC_DivRem:

; 1589 :                     {
; 1590 :                         __UNIT_TYPE r_buf = Rem_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, v);

  001d0	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  001d3	50		 push	 eax
  001d4	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  001d7	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  001da	52		 push	 edx
  001db	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  001de	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  001e1	51		 push	 ecx
  001e2	e8 00 00 00 00	 call	 ?Rem_X_1W@Internal@Core@Math@Palmtree@@YAIPAIII@Z ; Palmtree::Math::Core::Internal::Rem_X_1W
  001e7	83 c4 0c	 add	 esp, 12			; 0000000cH
  001ea	89 45 c0	 mov	 DWORD PTR _r_buf$4[ebp], eax

; 1591 :                         return ((_UINT32_T)r_buf);

  001ed	8b 45 c0	 mov	 eax, DWORD PTR _r_buf$4[ebp]
$LN16@PMC_DivRem:

; 1592 :                     }
; 1593 :                 }
; 1594 :             }
; 1595 :         }
; 1596 :     }

  001f0	52		 push	 edx
  001f1	8b cd		 mov	 ecx, ebp
  001f3	50		 push	 eax
  001f4	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN22@PMC_DivRem
  001fa	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001ff	58		 pop	 eax
  00200	5a		 pop	 edx
  00201	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00204	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0020b	59		 pop	 ecx
  0020c	5f		 pop	 edi
  0020d	83 c4 5c	 add	 esp, 92			; 0000005cH
  00210	3b ec		 cmp	 ebp, esp
  00212	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00217	8b e5		 mov	 esp, ebp
  00219	5d		 pop	 ebp
  0021a	c3		 ret	 0
  0021b	90		 npad	 1
$LN22@PMC_DivRem:
  0021c	02 00 00 00	 DD	 2
  00220	00 00 00 00	 DD	 $LN21@PMC_DivRem
$LN21@PMC_DivRem:
  00224	d8 ff ff ff	 DD	 -40			; ffffffd8H
  00228	10 00 00 00	 DD	 16			; 00000010H
  0022c	00 00 00 00	 DD	 $LN18@PMC_DivRem
  00230	c8 ff ff ff	 DD	 -56			; ffffffc8H
  00234	04 00 00 00	 DD	 4
  00238	00 00 00 00	 DD	 $LN19@PMC_DivRem
$LN19@PMC_DivRem:
  0023c	72		 DB	 114			; 00000072H
  0023d	5f		 DB	 95			; 0000005fH
  0023e	62		 DB	 98			; 00000062H
  0023f	75		 DB	 117			; 00000075H
  00240	66		 DB	 102			; 00000066H
  00241	00		 DB	 0
$LN18@PMC_DivRem:
  00242	72		 DB	 114			; 00000072H
  00243	6f		 DB	 111			; 0000006fH
  00244	6f		 DB	 111			; 0000006fH
  00245	74		 DB	 116			; 00000074H
  00246	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPAU__tag_NUMBER_HEADER@1234@IPAPAU51234@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _root$7[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPAU__tag_NUMBER_HEADER@1234@IPAPAU51234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPAU__tag_NUMBER_HEADER@1234@IPAPAU51234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPAU__tag_NUMBER_HEADER@1234@IPAPAU51234@@Z ENDP ; Palmtree::Math::Core::Internal::PMC_DivRem_X_I_Imp
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
_TEXT	SEGMENT
_q_$1 = -16						; size = 4
_q_index$ = -12						; size = 4
_work_u_buf$ = -8					; size = 4
_d_factor$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_v_buf$ = 16						; size = 4
_v_buf_len$ = 20					; size = 4
_work_v_buf$ = 24					; size = 4
_q_buf$ = 28						; size = 4
_r_buf$ = 32						; size = 4
?DivRem_X_X_using_ADX_MULX@Internal@Core@Math@Palmtree@@YAXPAII0I000@Z PROC ; Palmtree::Math::Core::Internal::DivRem_X_X_using_ADX_MULX

; 1392 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __E17217E9_pmc_divrem@cpp
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1393 :         // u の最上位ワードは 0 でありうることに注意すること。
; 1394 : 
; 1395 : #ifdef _DEBUG
; 1396 :         if (v_buf[v_buf_len - 1] == 0)
; 1397 :         {
; 1398 :             ; // このルートには到達しないはず。デバッグ用。
; 1399 :         }
; 1400 : #endif
; 1401 : 
; 1402 :         __UNIT_TYPE d_factor = _LZCNT_ALT_UNIT(v_buf[v_buf_len - 1]);

  00021	8b 55 14	 mov	 edx, DWORD PTR _v_buf_len$[ebp]
  00024	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]
  00027	8b 4c 90 fc	 mov	 ecx, DWORD PTR [eax+edx*4-4]
  0002b	51		 push	 ecx
  0002c	e8 00 00 00 00	 call	 __LZCNT_ALT_UNIT
  00031	83 c4 04	 add	 esp, 4
  00034	89 45 fc	 mov	 DWORD PTR _d_factor$[ebp], eax

; 1403 :         if (d_factor == 0)

  00037	83 7d fc 00	 cmp	 DWORD PTR _d_factor$[ebp], 0
  0003b	75 37		 jne	 SHORT $LN6@DivRem_X_X

; 1404 :         {
; 1405 :             _COPY_MEMORY_UNIT(r_buf, u_buf, u_buf_len);

  0003d	8b 55 0c	 mov	 edx, DWORD PTR _u_buf_len$[ebp]
  00040	52		 push	 edx
  00041	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  00044	50		 push	 eax
  00045	8b 4d 20	 mov	 ecx, DWORD PTR _r_buf$[ebp]
  00048	51		 push	 ecx
  00049	e8 00 00 00 00	 call	 __COPY_MEMORY_UNIT
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1406 :             _COPY_MEMORY_UNIT(work_v_buf, v_buf, v_buf_len);

  00051	8b 55 14	 mov	 edx, DWORD PTR _v_buf_len$[ebp]
  00054	52		 push	 edx
  00055	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]
  00058	50		 push	 eax
  00059	8b 4d 18	 mov	 ecx, DWORD PTR _work_v_buf$[ebp]
  0005c	51		 push	 ecx
  0005d	e8 00 00 00 00	 call	 __COPY_MEMORY_UNIT
  00062	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1407 :             r_buf[u_buf_len] = 0;

  00065	8b 55 0c	 mov	 edx, DWORD PTR _u_buf_len$[ebp]
  00068	8b 45 20	 mov	 eax, DWORD PTR _r_buf$[ebp]
  0006b	c7 04 90 00 00
	00 00		 mov	 DWORD PTR [eax+edx*4], 0

; 1408 :         }
; 1409 :         else

  00072	eb 34		 jmp	 SHORT $LN7@DivRem_X_X
$LN6@DivRem_X_X:

; 1410 :         {
; 1411 :             LeftShift_Imp(u_buf, u_buf_len, d_factor, r_buf, FALSE);

  00074	6a 00		 push	 0
  00076	8b 4d 20	 mov	 ecx, DWORD PTR _r_buf$[ebp]
  00079	51		 push	 ecx
  0007a	8b 55 fc	 mov	 edx, DWORD PTR _d_factor$[ebp]
  0007d	52		 push	 edx
  0007e	8b 45 0c	 mov	 eax, DWORD PTR _u_buf_len$[ebp]
  00081	50		 push	 eax
  00082	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  00085	51		 push	 ecx
  00086	e8 00 00 00 00	 call	 ?LeftShift_Imp@Internal@Core@Math@Palmtree@@YAXPAIII0H@Z ; Palmtree::Math::Core::Internal::LeftShift_Imp
  0008b	83 c4 14	 add	 esp, 20			; 00000014H

; 1412 :             LeftShift_Imp(v_buf, v_buf_len, d_factor, work_v_buf, FALSE);

  0008e	6a 00		 push	 0
  00090	8b 55 18	 mov	 edx, DWORD PTR _work_v_buf$[ebp]
  00093	52		 push	 edx
  00094	8b 45 fc	 mov	 eax, DWORD PTR _d_factor$[ebp]
  00097	50		 push	 eax
  00098	8b 4d 14	 mov	 ecx, DWORD PTR _v_buf_len$[ebp]
  0009b	51		 push	 ecx
  0009c	8b 55 10	 mov	 edx, DWORD PTR _v_buf$[ebp]
  0009f	52		 push	 edx
  000a0	e8 00 00 00 00	 call	 ?LeftShift_Imp@Internal@Core@Math@Palmtree@@YAXPAIII0H@Z ; Palmtree::Math::Core::Internal::LeftShift_Imp
  000a5	83 c4 14	 add	 esp, 20			; 00000014H
$LN7@DivRem_X_X:

; 1413 :         }
; 1414 : 
; 1415 :         __UNIT_TYPE* work_u_buf = r_buf;

  000a8	8b 45 20	 mov	 eax, DWORD PTR _r_buf$[ebp]
  000ab	89 45 f8	 mov	 DWORD PTR _work_u_buf$[ebp], eax

; 1416 :         __UNIT_TYPE q_index = u_buf_len - v_buf_len;

  000ae	8b 4d 0c	 mov	 ecx, DWORD PTR _u_buf_len$[ebp]
  000b1	2b 4d 14	 sub	 ecx, DWORD PTR _v_buf_len$[ebp]
  000b4	89 4d f4	 mov	 DWORD PTR _q_index$[ebp], ecx
$LN4@DivRem_X_X:

; 1417 : 
; 1418 :         for (;;)
; 1419 :         {
; 1420 :             __UNIT_TYPE q_ = CalculateQ_X(work_u_buf, work_v_buf, v_buf_len, q_index);

  000b7	8b 55 f4	 mov	 edx, DWORD PTR _q_index$[ebp]
  000ba	52		 push	 edx
  000bb	8b 45 14	 mov	 eax, DWORD PTR _v_buf_len$[ebp]
  000be	50		 push	 eax
  000bf	8b 4d 18	 mov	 ecx, DWORD PTR _work_v_buf$[ebp]
  000c2	51		 push	 ecx
  000c3	8b 55 f8	 mov	 edx, DWORD PTR _work_u_buf$[ebp]
  000c6	52		 push	 edx
  000c7	e8 00 00 00 00	 call	 ?CalculateQ_X@Internal@Core@Math@Palmtree@@YAIPAI0II@Z ; Palmtree::Math::Core::Internal::CalculateQ_X
  000cc	83 c4 10	 add	 esp, 16			; 00000010H
  000cf	89 45 f0	 mov	 DWORD PTR _q_$1[ebp], eax

; 1421 : 
; 1422 :             if (SubtructOneLineX(work_u_buf, u_buf_len, work_v_buf, v_buf_len, q_index, q_))

  000d2	8b 45 f0	 mov	 eax, DWORD PTR _q_$1[ebp]
  000d5	50		 push	 eax
  000d6	8b 4d f4	 mov	 ecx, DWORD PTR _q_index$[ebp]
  000d9	51		 push	 ecx
  000da	8b 55 14	 mov	 edx, DWORD PTR _v_buf_len$[ebp]
  000dd	52		 push	 edx
  000de	8b 45 18	 mov	 eax, DWORD PTR _work_v_buf$[ebp]
  000e1	50		 push	 eax
  000e2	8b 4d 0c	 mov	 ecx, DWORD PTR _u_buf_len$[ebp]
  000e5	51		 push	 ecx
  000e6	8b 55 f8	 mov	 edx, DWORD PTR _work_u_buf$[ebp]
  000e9	52		 push	 edx
  000ea	e8 00 00 00 00	 call	 ?SubtructOneLineX@Internal@Core@Math@Palmtree@@YAHPAII0III@Z ; Palmtree::Math::Core::Internal::SubtructOneLineX
  000ef	83 c4 18	 add	 esp, 24			; 00000018H
  000f2	85 c0		 test	 eax, eax
  000f4	74 25		 je	 SHORT $LN8@DivRem_X_X

; 1423 :             {
; 1424 :                 // 桁借りが発生した場合
; 1425 : 
; 1426 :                 --q_;

  000f6	8b 45 f0	 mov	 eax, DWORD PTR _q_$1[ebp]
  000f9	83 e8 01	 sub	 eax, 1
  000fc	89 45 f0	 mov	 DWORD PTR _q_$1[ebp], eax

; 1427 :                 AddOneLineX(work_u_buf, u_buf_len, work_v_buf, v_buf_len, q_index);

  000ff	8b 4d f4	 mov	 ecx, DWORD PTR _q_index$[ebp]
  00102	51		 push	 ecx
  00103	8b 55 14	 mov	 edx, DWORD PTR _v_buf_len$[ebp]
  00106	52		 push	 edx
  00107	8b 45 18	 mov	 eax, DWORD PTR _work_v_buf$[ebp]
  0010a	50		 push	 eax
  0010b	8b 4d 0c	 mov	 ecx, DWORD PTR _u_buf_len$[ebp]
  0010e	51		 push	 ecx
  0010f	8b 55 f8	 mov	 edx, DWORD PTR _work_u_buf$[ebp]
  00112	52		 push	 edx
  00113	e8 00 00 00 00	 call	 ?AddOneLineX@Internal@Core@Math@Palmtree@@YAXPAII0II@Z ; Palmtree::Math::Core::Internal::AddOneLineX
  00118	83 c4 14	 add	 esp, 20			; 00000014H
$LN8@DivRem_X_X:

; 1428 :             }
; 1429 : 
; 1430 :             if (q_buf != nullptr)

  0011b	83 7d 1c 00	 cmp	 DWORD PTR _q_buf$[ebp], 0
  0011f	74 0c		 je	 SHORT $LN9@DivRem_X_X

; 1431 :                 q_buf[q_index] = q_;

  00121	8b 45 f4	 mov	 eax, DWORD PTR _q_index$[ebp]
  00124	8b 4d 1c	 mov	 ecx, DWORD PTR _q_buf$[ebp]
  00127	8b 55 f0	 mov	 edx, DWORD PTR _q_$1[ebp]
  0012a	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx
$LN9@DivRem_X_X:

; 1432 : 
; 1433 : 
; 1434 :             if (q_index == 0)

  0012d	83 7d f4 00	 cmp	 DWORD PTR _q_index$[ebp], 0
  00131	75 02		 jne	 SHORT $LN10@DivRem_X_X

; 1435 :                 break;

  00133	eb 0e		 jmp	 SHORT $LN3@DivRem_X_X
$LN10@DivRem_X_X:

; 1436 :             --q_index;

  00135	8b 45 f4	 mov	 eax, DWORD PTR _q_index$[ebp]
  00138	83 e8 01	 sub	 eax, 1
  0013b	89 45 f4	 mov	 DWORD PTR _q_index$[ebp], eax

; 1437 :         }

  0013e	e9 74 ff ff ff	 jmp	 $LN4@DivRem_X_X
$LN3@DivRem_X_X:

; 1438 : 
; 1439 :         if (d_factor > 0)

  00143	83 7d fc 00	 cmp	 DWORD PTR _d_factor$[ebp], 0
  00147	76 1d		 jbe	 SHORT $LN1@DivRem_X_X

; 1440 :             RightShift_Imp(work_u_buf, u_buf_len + 1, d_factor, work_u_buf, FALSE);

  00149	6a 00		 push	 0
  0014b	8b 4d f8	 mov	 ecx, DWORD PTR _work_u_buf$[ebp]
  0014e	51		 push	 ecx
  0014f	8b 55 fc	 mov	 edx, DWORD PTR _d_factor$[ebp]
  00152	52		 push	 edx
  00153	8b 45 0c	 mov	 eax, DWORD PTR _u_buf_len$[ebp]
  00156	83 c0 01	 add	 eax, 1
  00159	50		 push	 eax
  0015a	8b 4d f8	 mov	 ecx, DWORD PTR _work_u_buf$[ebp]
  0015d	51		 push	 ecx
  0015e	e8 00 00 00 00	 call	 ?RightShift_Imp@Internal@Core@Math@Palmtree@@YAXPAIII0H@Z ; Palmtree::Math::Core::Internal::RightShift_Imp
  00163	83 c4 14	 add	 esp, 20			; 00000014H
$LN1@DivRem_X_X:

; 1441 :     }

  00166	83 c4 10	 add	 esp, 16			; 00000010H
  00169	3b ec		 cmp	 ebp, esp
  0016b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00170	8b e5		 mov	 esp, ebp
  00172	5d		 pop	 ebp
  00173	c3		 ret	 0
?DivRem_X_X_using_ADX_MULX@Internal@Core@Math@Palmtree@@YAXPAII0I000@Z ENDP ; Palmtree::Math::Core::Internal::DivRem_X_X_using_ADX_MULX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
_TEXT	SEGMENT
_q_$1 = -16						; size = 4
_q_index$ = -12						; size = 4
_work_u_buf$ = -8					; size = 4
_d_factor$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_v_buf$ = 16						; size = 4
_v_buf_len$ = 20					; size = 4
_work_v_buf$ = 24					; size = 4
_q_buf$ = 28						; size = 4
_r_buf$ = 32						; size = 4
?DivRem_X_X_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAXPAII0I000@Z PROC ; Palmtree::Math::Core::Internal::DivRem_X_X_using_ADC_MUL

; 1335 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __E17217E9_pmc_divrem@cpp
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1336 :         // u および v の最上位ワードは 0 でありうることに注意すること。
; 1337 :         if (sizeof(__UNIT_TYPE) != sizeof(__UNIT_TYPE))

  00021	33 c0		 xor	 eax, eax
  00023	74 30		 je	 SHORT $LN10@DivRem_X_X
$LN2@DivRem_X_X:

; 1338 :         {
; 1339 :             while (u_buf[u_buf_len - 1] == 0)

  00025	8b 4d 0c	 mov	 ecx, DWORD PTR _u_buf_len$[ebp]
  00028	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  0002b	83 7c 8a fc 00	 cmp	 DWORD PTR [edx+ecx*4-4], 0
  00030	75 0b		 jne	 SHORT $LN4@DivRem_X_X

; 1340 :                 --u_buf_len;

  00032	8b 45 0c	 mov	 eax, DWORD PTR _u_buf_len$[ebp]
  00035	83 e8 01	 sub	 eax, 1
  00038	89 45 0c	 mov	 DWORD PTR _u_buf_len$[ebp], eax
  0003b	eb e8		 jmp	 SHORT $LN2@DivRem_X_X
$LN4@DivRem_X_X:

; 1341 :             while (v_buf[v_buf_len - 1] == 0)

  0003d	8b 4d 14	 mov	 ecx, DWORD PTR _v_buf_len$[ebp]
  00040	8b 55 10	 mov	 edx, DWORD PTR _v_buf$[ebp]
  00043	83 7c 8a fc 00	 cmp	 DWORD PTR [edx+ecx*4-4], 0
  00048	75 0b		 jne	 SHORT $LN10@DivRem_X_X

; 1342 :                 --v_buf_len;

  0004a	8b 45 14	 mov	 eax, DWORD PTR _v_buf_len$[ebp]
  0004d	83 e8 01	 sub	 eax, 1
  00050	89 45 14	 mov	 DWORD PTR _v_buf_len$[ebp], eax
  00053	eb e8		 jmp	 SHORT $LN4@DivRem_X_X
$LN10@DivRem_X_X:

; 1343 :         }
; 1344 : 
; 1345 : #ifdef _DEBUG
; 1346 :         if (v_buf[v_buf_len - 1] == 0)
; 1347 :         {
; 1348 :             ; // このルートには到達しないはず。デバッグ用。
; 1349 :         }
; 1350 : #endif
; 1351 : 
; 1352 :         __UNIT_TYPE d_factor = _LZCNT_ALT_UNIT(v_buf[v_buf_len - 1]);

  00055	8b 45 14	 mov	 eax, DWORD PTR _v_buf_len$[ebp]
  00058	8b 4d 10	 mov	 ecx, DWORD PTR _v_buf$[ebp]
  0005b	8b 54 81 fc	 mov	 edx, DWORD PTR [ecx+eax*4-4]
  0005f	52		 push	 edx
  00060	e8 00 00 00 00	 call	 __LZCNT_ALT_UNIT
  00065	83 c4 04	 add	 esp, 4
  00068	89 45 fc	 mov	 DWORD PTR _d_factor$[ebp], eax

; 1353 :         if (d_factor == 0)

  0006b	83 7d fc 00	 cmp	 DWORD PTR _d_factor$[ebp], 0
  0006f	75 37		 jne	 SHORT $LN11@DivRem_X_X

; 1354 :         {
; 1355 :             _COPY_MEMORY_UNIT(r_buf, u_buf, u_buf_len);

  00071	8b 45 0c	 mov	 eax, DWORD PTR _u_buf_len$[ebp]
  00074	50		 push	 eax
  00075	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  00078	51		 push	 ecx
  00079	8b 55 20	 mov	 edx, DWORD PTR _r_buf$[ebp]
  0007c	52		 push	 edx
  0007d	e8 00 00 00 00	 call	 __COPY_MEMORY_UNIT
  00082	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1356 :             _COPY_MEMORY_UNIT(work_v_buf, v_buf, v_buf_len);

  00085	8b 45 14	 mov	 eax, DWORD PTR _v_buf_len$[ebp]
  00088	50		 push	 eax
  00089	8b 4d 10	 mov	 ecx, DWORD PTR _v_buf$[ebp]
  0008c	51		 push	 ecx
  0008d	8b 55 18	 mov	 edx, DWORD PTR _work_v_buf$[ebp]
  00090	52		 push	 edx
  00091	e8 00 00 00 00	 call	 __COPY_MEMORY_UNIT
  00096	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1357 :             r_buf[u_buf_len] = 0;

  00099	8b 45 0c	 mov	 eax, DWORD PTR _u_buf_len$[ebp]
  0009c	8b 4d 20	 mov	 ecx, DWORD PTR _r_buf$[ebp]
  0009f	c7 04 81 00 00
	00 00		 mov	 DWORD PTR [ecx+eax*4], 0

; 1358 :         }
; 1359 :         else

  000a6	eb 34		 jmp	 SHORT $LN12@DivRem_X_X
$LN11@DivRem_X_X:

; 1360 :         {
; 1361 :             LeftShift_Imp(u_buf, u_buf_len, d_factor, r_buf, FALSE);

  000a8	6a 00		 push	 0
  000aa	8b 55 20	 mov	 edx, DWORD PTR _r_buf$[ebp]
  000ad	52		 push	 edx
  000ae	8b 45 fc	 mov	 eax, DWORD PTR _d_factor$[ebp]
  000b1	50		 push	 eax
  000b2	8b 4d 0c	 mov	 ecx, DWORD PTR _u_buf_len$[ebp]
  000b5	51		 push	 ecx
  000b6	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  000b9	52		 push	 edx
  000ba	e8 00 00 00 00	 call	 ?LeftShift_Imp@Internal@Core@Math@Palmtree@@YAXPAIII0H@Z ; Palmtree::Math::Core::Internal::LeftShift_Imp
  000bf	83 c4 14	 add	 esp, 20			; 00000014H

; 1362 :             LeftShift_Imp(v_buf, v_buf_len, d_factor, work_v_buf, FALSE);

  000c2	6a 00		 push	 0
  000c4	8b 45 18	 mov	 eax, DWORD PTR _work_v_buf$[ebp]
  000c7	50		 push	 eax
  000c8	8b 4d fc	 mov	 ecx, DWORD PTR _d_factor$[ebp]
  000cb	51		 push	 ecx
  000cc	8b 55 14	 mov	 edx, DWORD PTR _v_buf_len$[ebp]
  000cf	52		 push	 edx
  000d0	8b 45 10	 mov	 eax, DWORD PTR _v_buf$[ebp]
  000d3	50		 push	 eax
  000d4	e8 00 00 00 00	 call	 ?LeftShift_Imp@Internal@Core@Math@Palmtree@@YAXPAIII0H@Z ; Palmtree::Math::Core::Internal::LeftShift_Imp
  000d9	83 c4 14	 add	 esp, 20			; 00000014H
$LN12@DivRem_X_X:

; 1363 :         }
; 1364 : 
; 1365 :         __UNIT_TYPE* work_u_buf = r_buf;

  000dc	8b 4d 20	 mov	 ecx, DWORD PTR _r_buf$[ebp]
  000df	89 4d f8	 mov	 DWORD PTR _work_u_buf$[ebp], ecx

; 1366 :         __UNIT_TYPE q_index = u_buf_len - v_buf_len;

  000e2	8b 55 0c	 mov	 edx, DWORD PTR _u_buf_len$[ebp]
  000e5	2b 55 14	 sub	 edx, DWORD PTR _v_buf_len$[ebp]
  000e8	89 55 f4	 mov	 DWORD PTR _q_index$[ebp], edx
$LN8@DivRem_X_X:

; 1367 : 
; 1368 :         for (;;)
; 1369 :         {
; 1370 :             __UNIT_TYPE q_ = CalculateQ_(work_u_buf, work_v_buf, v_buf_len, q_index);

  000eb	8b 45 f4	 mov	 eax, DWORD PTR _q_index$[ebp]
  000ee	50		 push	 eax
  000ef	8b 4d 14	 mov	 ecx, DWORD PTR _v_buf_len$[ebp]
  000f2	51		 push	 ecx
  000f3	8b 55 18	 mov	 edx, DWORD PTR _work_v_buf$[ebp]
  000f6	52		 push	 edx
  000f7	8b 45 f8	 mov	 eax, DWORD PTR _work_u_buf$[ebp]
  000fa	50		 push	 eax
  000fb	e8 00 00 00 00	 call	 ?CalculateQ_@Internal@Core@Math@Palmtree@@YAIPAI0II@Z ; Palmtree::Math::Core::Internal::CalculateQ_
  00100	83 c4 10	 add	 esp, 16			; 00000010H
  00103	89 45 f0	 mov	 DWORD PTR _q_$1[ebp], eax

; 1371 : 
; 1372 : 
; 1373 :             if (SubtructOneLine(work_u_buf, u_buf_len, work_v_buf, v_buf_len, q_index, q_))

  00106	8b 4d f0	 mov	 ecx, DWORD PTR _q_$1[ebp]
  00109	51		 push	 ecx
  0010a	8b 55 f4	 mov	 edx, DWORD PTR _q_index$[ebp]
  0010d	52		 push	 edx
  0010e	8b 45 14	 mov	 eax, DWORD PTR _v_buf_len$[ebp]
  00111	50		 push	 eax
  00112	8b 4d 18	 mov	 ecx, DWORD PTR _work_v_buf$[ebp]
  00115	51		 push	 ecx
  00116	8b 55 0c	 mov	 edx, DWORD PTR _u_buf_len$[ebp]
  00119	52		 push	 edx
  0011a	8b 45 f8	 mov	 eax, DWORD PTR _work_u_buf$[ebp]
  0011d	50		 push	 eax
  0011e	e8 00 00 00 00	 call	 ?SubtructOneLine@Internal@Core@Math@Palmtree@@YAHPAII0III@Z ; Palmtree::Math::Core::Internal::SubtructOneLine
  00123	83 c4 18	 add	 esp, 24			; 00000018H
  00126	85 c0		 test	 eax, eax
  00128	74 25		 je	 SHORT $LN13@DivRem_X_X

; 1374 :             {
; 1375 :                 // 桁借りが発生した場合
; 1376 :                 --q_;

  0012a	8b 4d f0	 mov	 ecx, DWORD PTR _q_$1[ebp]
  0012d	83 e9 01	 sub	 ecx, 1
  00130	89 4d f0	 mov	 DWORD PTR _q_$1[ebp], ecx

; 1377 :                 AddOneLine(work_u_buf, u_buf_len, work_v_buf, v_buf_len, q_index);

  00133	8b 55 f4	 mov	 edx, DWORD PTR _q_index$[ebp]
  00136	52		 push	 edx
  00137	8b 45 14	 mov	 eax, DWORD PTR _v_buf_len$[ebp]
  0013a	50		 push	 eax
  0013b	8b 4d 18	 mov	 ecx, DWORD PTR _work_v_buf$[ebp]
  0013e	51		 push	 ecx
  0013f	8b 55 0c	 mov	 edx, DWORD PTR _u_buf_len$[ebp]
  00142	52		 push	 edx
  00143	8b 45 f8	 mov	 eax, DWORD PTR _work_u_buf$[ebp]
  00146	50		 push	 eax
  00147	e8 00 00 00 00	 call	 ?AddOneLine@Internal@Core@Math@Palmtree@@YAXPAII0II@Z ; Palmtree::Math::Core::Internal::AddOneLine
  0014c	83 c4 14	 add	 esp, 20			; 00000014H
$LN13@DivRem_X_X:

; 1378 :             }
; 1379 : 
; 1380 :             if (q_buf != nullptr)

  0014f	83 7d 1c 00	 cmp	 DWORD PTR _q_buf$[ebp], 0
  00153	74 0c		 je	 SHORT $LN14@DivRem_X_X

; 1381 :                 q_buf[q_index] = q_;

  00155	8b 4d f4	 mov	 ecx, DWORD PTR _q_index$[ebp]
  00158	8b 55 1c	 mov	 edx, DWORD PTR _q_buf$[ebp]
  0015b	8b 45 f0	 mov	 eax, DWORD PTR _q_$1[ebp]
  0015e	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax
$LN14@DivRem_X_X:

; 1382 :             if (q_index == 0)

  00161	83 7d f4 00	 cmp	 DWORD PTR _q_index$[ebp], 0
  00165	75 02		 jne	 SHORT $LN15@DivRem_X_X

; 1383 :                 break;

  00167	eb 0e		 jmp	 SHORT $LN7@DivRem_X_X
$LN15@DivRem_X_X:

; 1384 :             --q_index;

  00169	8b 4d f4	 mov	 ecx, DWORD PTR _q_index$[ebp]
  0016c	83 e9 01	 sub	 ecx, 1
  0016f	89 4d f4	 mov	 DWORD PTR _q_index$[ebp], ecx

; 1385 :         }

  00172	e9 74 ff ff ff	 jmp	 $LN8@DivRem_X_X
$LN7@DivRem_X_X:

; 1386 : 
; 1387 :         if (d_factor > 0)

  00177	83 7d fc 00	 cmp	 DWORD PTR _d_factor$[ebp], 0
  0017b	76 1d		 jbe	 SHORT $LN1@DivRem_X_X

; 1388 :             RightShift_Imp(work_u_buf, u_buf_len + 1, d_factor, work_u_buf, FALSE);

  0017d	6a 00		 push	 0
  0017f	8b 55 f8	 mov	 edx, DWORD PTR _work_u_buf$[ebp]
  00182	52		 push	 edx
  00183	8b 45 fc	 mov	 eax, DWORD PTR _d_factor$[ebp]
  00186	50		 push	 eax
  00187	8b 4d 0c	 mov	 ecx, DWORD PTR _u_buf_len$[ebp]
  0018a	83 c1 01	 add	 ecx, 1
  0018d	51		 push	 ecx
  0018e	8b 55 f8	 mov	 edx, DWORD PTR _work_u_buf$[ebp]
  00191	52		 push	 edx
  00192	e8 00 00 00 00	 call	 ?RightShift_Imp@Internal@Core@Math@Palmtree@@YAXPAIII0H@Z ; Palmtree::Math::Core::Internal::RightShift_Imp
  00197	83 c4 14	 add	 esp, 20			; 00000014H
$LN1@DivRem_X_X:

; 1389 :     }

  0019a	83 c4 10	 add	 esp, 16			; 00000010H
  0019d	3b ec		 cmp	 ebp, esp
  0019f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a4	8b e5		 mov	 esp, ebp
  001a6	5d		 pop	 ebp
  001a7	c3		 ret	 0
?DivRem_X_X_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAXPAII0I000@Z ENDP ; Palmtree::Math::Core::Internal::DivRem_X_X_using_ADC_MUL
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
_TEXT	SEGMENT
_count$ = -20						; size = 4
_c$ = -13						; size = 1
_v_count$ = -12						; size = 4
_v_ptr$ = -8						; size = 4
_u_ptr$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_v_buf$ = 16						; size = 4
_v_buf_len$ = 20					; size = 4
_q_index$ = 24						; size = 4
?AddOneLineX@Internal@Core@Math@Palmtree@@YAXPAII0II@Z PROC ; Palmtree::Math::Core::Internal::AddOneLineX

; 1269 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00011	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00014	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00017	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001a	b9 00 00 00 00	 mov	 ecx, OFFSET __E17217E9_pmc_divrem@cpp
  0001f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1270 :         __UNIT_TYPE* u_ptr = &u_buf[q_index];

  00024	8b 45 18	 mov	 eax, DWORD PTR _q_index$[ebp]
  00027	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  0002a	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  0002d	89 55 fc	 mov	 DWORD PTR _u_ptr$[ebp], edx

; 1271 :         __UNIT_TYPE* v_ptr = &v_buf[0];

  00030	b8 04 00 00 00	 mov	 eax, 4
  00035	6b c8 00	 imul	 ecx, eax, 0
  00038	03 4d 10	 add	 ecx, DWORD PTR _v_buf$[ebp]
  0003b	89 4d f8	 mov	 DWORD PTR _v_ptr$[ebp], ecx

; 1272 :         __UNIT_TYPE v_count = v_buf_len;

  0003e	8b 55 14	 mov	 edx, DWORD PTR _v_buf_len$[ebp]
  00041	89 55 f4	 mov	 DWORD PTR _v_count$[ebp], edx

; 1273 :         char c = 0;

  00044	c6 45 f3 00	 mov	 BYTE PTR _c$[ebp], 0

; 1274 : 
; 1275 :         // まず 32 ワードずつ加算をする。
; 1276 :         __UNIT_TYPE count = v_count >> 5;

  00048	8b 45 f4	 mov	 eax, DWORD PTR _v_count$[ebp]
  0004b	c1 e8 05	 shr	 eax, 5
  0004e	89 45 ec	 mov	 DWORD PTR _count$[ebp], eax
$LN2@AddOneLine:

; 1277 :         while (count != 0)

  00051	83 7d ec 00	 cmp	 DWORD PTR _count$[ebp], 0
  00055	74 3e		 je	 SHORT $LN3@AddOneLine

; 1278 :         {
; 1279 :             c = _ADD_32WORDS_ADCX(c, u_ptr, v_ptr, u_ptr);

  00057	8b 4d fc	 mov	 ecx, DWORD PTR _u_ptr$[ebp]
  0005a	51		 push	 ecx
  0005b	8b 55 f8	 mov	 edx, DWORD PTR _v_ptr$[ebp]
  0005e	52		 push	 edx
  0005f	8b 45 fc	 mov	 eax, DWORD PTR _u_ptr$[ebp]
  00062	50		 push	 eax
  00063	0f b6 4d f3	 movzx	 ecx, BYTE PTR _c$[ebp]
  00067	51		 push	 ecx
  00068	e8 00 00 00 00	 call	 __ADD_32WORDS_ADCX
  0006d	83 c4 10	 add	 esp, 16			; 00000010H
  00070	88 45 f3	 mov	 BYTE PTR _c$[ebp], al

; 1280 :             u_ptr += 32;

  00073	8b 55 fc	 mov	 edx, DWORD PTR _u_ptr$[ebp]
  00076	81 c2 80 00 00
	00		 add	 edx, 128		; 00000080H
  0007c	89 55 fc	 mov	 DWORD PTR _u_ptr$[ebp], edx

; 1281 :             v_ptr += 32;

  0007f	8b 45 f8	 mov	 eax, DWORD PTR _v_ptr$[ebp]
  00082	05 80 00 00 00	 add	 eax, 128		; 00000080H
  00087	89 45 f8	 mov	 DWORD PTR _v_ptr$[ebp], eax

; 1282 :             --count;

  0008a	8b 4d ec	 mov	 ecx, DWORD PTR _count$[ebp]
  0008d	83 e9 01	 sub	 ecx, 1
  00090	89 4d ec	 mov	 DWORD PTR _count$[ebp], ecx

; 1283 :         }

  00093	eb bc		 jmp	 SHORT $LN2@AddOneLine
$LN3@AddOneLine:

; 1284 :         // この時点で未処理の桁は 32 ワード未満のはず
; 1285 : 
; 1286 :         // 未処理の桁が 16 ワード以上あるなら 16 ワード加算を行う。
; 1287 :         if (v_count & 0x10)

  00095	8b 55 f4	 mov	 edx, DWORD PTR _v_count$[ebp]
  00098	83 e2 10	 and	 edx, 16			; 00000010H
  0009b	74 2e		 je	 SHORT $LN4@AddOneLine

; 1288 :         {
; 1289 :             c = _ADD_16WORDS_ADCX(c, u_ptr, v_ptr, u_ptr);

  0009d	8b 45 fc	 mov	 eax, DWORD PTR _u_ptr$[ebp]
  000a0	50		 push	 eax
  000a1	8b 4d f8	 mov	 ecx, DWORD PTR _v_ptr$[ebp]
  000a4	51		 push	 ecx
  000a5	8b 55 fc	 mov	 edx, DWORD PTR _u_ptr$[ebp]
  000a8	52		 push	 edx
  000a9	0f b6 45 f3	 movzx	 eax, BYTE PTR _c$[ebp]
  000ad	50		 push	 eax
  000ae	e8 00 00 00 00	 call	 __ADD_16WORDS_ADCX
  000b3	83 c4 10	 add	 esp, 16			; 00000010H
  000b6	88 45 f3	 mov	 BYTE PTR _c$[ebp], al

; 1290 :             u_ptr += 16;

  000b9	8b 4d fc	 mov	 ecx, DWORD PTR _u_ptr$[ebp]
  000bc	83 c1 40	 add	 ecx, 64			; 00000040H
  000bf	89 4d fc	 mov	 DWORD PTR _u_ptr$[ebp], ecx

; 1291 :             v_ptr += 16;

  000c2	8b 55 f8	 mov	 edx, DWORD PTR _v_ptr$[ebp]
  000c5	83 c2 40	 add	 edx, 64			; 00000040H
  000c8	89 55 f8	 mov	 DWORD PTR _v_ptr$[ebp], edx
$LN4@AddOneLine:

; 1292 :         }
; 1293 :         // この時点で未処理の桁は 16 ワード未満のはず
; 1294 : 
; 1295 :         // 未処理の桁が 8 ワード以上あるなら 8 ワード加算を行う。
; 1296 :         if (v_count & 0x8)

  000cb	8b 45 f4	 mov	 eax, DWORD PTR _v_count$[ebp]
  000ce	83 e0 08	 and	 eax, 8
  000d1	74 2e		 je	 SHORT $LN5@AddOneLine

; 1297 :         {
; 1298 :             c = _ADD_8WORDS_ADCX(c, u_ptr, v_ptr, u_ptr);

  000d3	8b 4d fc	 mov	 ecx, DWORD PTR _u_ptr$[ebp]
  000d6	51		 push	 ecx
  000d7	8b 55 f8	 mov	 edx, DWORD PTR _v_ptr$[ebp]
  000da	52		 push	 edx
  000db	8b 45 fc	 mov	 eax, DWORD PTR _u_ptr$[ebp]
  000de	50		 push	 eax
  000df	0f b6 4d f3	 movzx	 ecx, BYTE PTR _c$[ebp]
  000e3	51		 push	 ecx
  000e4	e8 00 00 00 00	 call	 __ADD_8WORDS_ADCX
  000e9	83 c4 10	 add	 esp, 16			; 00000010H
  000ec	88 45 f3	 mov	 BYTE PTR _c$[ebp], al

; 1299 :             u_ptr += 8;

  000ef	8b 55 fc	 mov	 edx, DWORD PTR _u_ptr$[ebp]
  000f2	83 c2 20	 add	 edx, 32			; 00000020H
  000f5	89 55 fc	 mov	 DWORD PTR _u_ptr$[ebp], edx

; 1300 :             v_ptr += 8;

  000f8	8b 45 f8	 mov	 eax, DWORD PTR _v_ptr$[ebp]
  000fb	83 c0 20	 add	 eax, 32			; 00000020H
  000fe	89 45 f8	 mov	 DWORD PTR _v_ptr$[ebp], eax
$LN5@AddOneLine:

; 1301 :         }
; 1302 :         // この時点で未処理の桁は 8 ワード未満のはず
; 1303 : 
; 1304 :         // 未処理の桁が 4 ワード以上あるなら 4 ワード加算を行う。
; 1305 :         if (v_count & 0x4)

  00101	8b 4d f4	 mov	 ecx, DWORD PTR _v_count$[ebp]
  00104	83 e1 04	 and	 ecx, 4
  00107	74 2e		 je	 SHORT $LN6@AddOneLine

; 1306 :         {
; 1307 :             c = _ADD_4WORDS_ADCX(c, u_ptr, v_ptr, u_ptr);

  00109	8b 55 fc	 mov	 edx, DWORD PTR _u_ptr$[ebp]
  0010c	52		 push	 edx
  0010d	8b 45 f8	 mov	 eax, DWORD PTR _v_ptr$[ebp]
  00110	50		 push	 eax
  00111	8b 4d fc	 mov	 ecx, DWORD PTR _u_ptr$[ebp]
  00114	51		 push	 ecx
  00115	0f b6 55 f3	 movzx	 edx, BYTE PTR _c$[ebp]
  00119	52		 push	 edx
  0011a	e8 00 00 00 00	 call	 __ADD_4WORDS_ADCX
  0011f	83 c4 10	 add	 esp, 16			; 00000010H
  00122	88 45 f3	 mov	 BYTE PTR _c$[ebp], al

; 1308 :             u_ptr += 4;

  00125	8b 45 fc	 mov	 eax, DWORD PTR _u_ptr$[ebp]
  00128	83 c0 10	 add	 eax, 16			; 00000010H
  0012b	89 45 fc	 mov	 DWORD PTR _u_ptr$[ebp], eax

; 1309 :             v_ptr += 4;

  0012e	8b 4d f8	 mov	 ecx, DWORD PTR _v_ptr$[ebp]
  00131	83 c1 10	 add	 ecx, 16			; 00000010H
  00134	89 4d f8	 mov	 DWORD PTR _v_ptr$[ebp], ecx
$LN6@AddOneLine:

; 1310 :         }
; 1311 :         // この時点で未処理の桁は 4 ワード未満のはず
; 1312 : 
; 1313 :         // 未処理の桁が 2 ワード以上あるなら 2 ワード加算を行う。
; 1314 :         if (v_count & 0x2)

  00137	8b 55 f4	 mov	 edx, DWORD PTR _v_count$[ebp]
  0013a	83 e2 02	 and	 edx, 2
  0013d	74 2e		 je	 SHORT $LN7@AddOneLine

; 1315 :         {
; 1316 :             c = _ADD_2WORDS_ADCX(c, u_ptr, v_ptr, u_ptr);

  0013f	8b 45 fc	 mov	 eax, DWORD PTR _u_ptr$[ebp]
  00142	50		 push	 eax
  00143	8b 4d f8	 mov	 ecx, DWORD PTR _v_ptr$[ebp]
  00146	51		 push	 ecx
  00147	8b 55 fc	 mov	 edx, DWORD PTR _u_ptr$[ebp]
  0014a	52		 push	 edx
  0014b	0f b6 45 f3	 movzx	 eax, BYTE PTR _c$[ebp]
  0014f	50		 push	 eax
  00150	e8 00 00 00 00	 call	 __ADD_2WORDS_ADCX
  00155	83 c4 10	 add	 esp, 16			; 00000010H
  00158	88 45 f3	 mov	 BYTE PTR _c$[ebp], al

; 1317 :             u_ptr += 2;

  0015b	8b 4d fc	 mov	 ecx, DWORD PTR _u_ptr$[ebp]
  0015e	83 c1 08	 add	 ecx, 8
  00161	89 4d fc	 mov	 DWORD PTR _u_ptr$[ebp], ecx

; 1318 :             v_ptr += 2;

  00164	8b 55 f8	 mov	 edx, DWORD PTR _v_ptr$[ebp]
  00167	83 c2 08	 add	 edx, 8
  0016a	89 55 f8	 mov	 DWORD PTR _v_ptr$[ebp], edx
$LN7@AddOneLine:

; 1319 :         }
; 1320 :         // この時点で未処理の桁は 2 ワード未満のはず
; 1321 : 
; 1322 :         // 未処理の桁が 1 ワード以上あるなら 1 ワード加算を行う。
; 1323 :         if (v_count & 0x1)

  0016d	8b 45 f4	 mov	 eax, DWORD PTR _v_count$[ebp]
  00170	83 e0 01	 and	 eax, 1
  00173	74 32		 je	 SHORT $LN8@AddOneLine

; 1324 :         {
; 1325 :             c = _ADD_UNIT(c, *u_ptr, *v_ptr, u_ptr);

  00175	8b 4d fc	 mov	 ecx, DWORD PTR _u_ptr$[ebp]
  00178	51		 push	 ecx
  00179	8b 55 f8	 mov	 edx, DWORD PTR _v_ptr$[ebp]
  0017c	8b 02		 mov	 eax, DWORD PTR [edx]
  0017e	50		 push	 eax
  0017f	8b 4d fc	 mov	 ecx, DWORD PTR _u_ptr$[ebp]
  00182	8b 11		 mov	 edx, DWORD PTR [ecx]
  00184	52		 push	 edx
  00185	0f b6 45 f3	 movzx	 eax, BYTE PTR _c$[ebp]
  00189	50		 push	 eax
  0018a	e8 00 00 00 00	 call	 __ADD_UNIT
  0018f	83 c4 10	 add	 esp, 16			; 00000010H
  00192	88 45 f3	 mov	 BYTE PTR _c$[ebp], al

; 1326 :             ++u_ptr;

  00195	8b 4d fc	 mov	 ecx, DWORD PTR _u_ptr$[ebp]
  00198	83 c1 04	 add	 ecx, 4
  0019b	89 4d fc	 mov	 DWORD PTR _u_ptr$[ebp], ecx

; 1327 :             ++v_ptr;

  0019e	8b 55 f8	 mov	 edx, DWORD PTR _v_ptr$[ebp]
  001a1	83 c2 04	 add	 edx, 4
  001a4	89 55 f8	 mov	 DWORD PTR _v_ptr$[ebp], edx
$LN8@AddOneLine:

; 1328 :         }
; 1329 : 
; 1330 :         // 残りの桁の繰り上がりを計算する。
; 1331 :         DoCarry(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr);

  001a7	8b 45 0c	 mov	 eax, DWORD PTR _u_buf_len$[ebp]
  001aa	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  001ad	8d 54 81 04	 lea	 edx, DWORD PTR [ecx+eax*4+4]
  001b1	2b 55 fc	 sub	 edx, DWORD PTR _u_ptr$[ebp]
  001b4	c1 fa 02	 sar	 edx, 2
  001b7	52		 push	 edx
  001b8	8b 45 fc	 mov	 eax, DWORD PTR _u_ptr$[ebp]
  001bb	50		 push	 eax
  001bc	0f b6 4d f3	 movzx	 ecx, BYTE PTR _c$[ebp]
  001c0	51		 push	 ecx
  001c1	e8 00 00 00 00	 call	 ?DoCarry@Internal@Core@Math@Palmtree@@YAXDPAII@Z ; Palmtree::Math::Core::Internal::DoCarry
  001c6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1332 :     }

  001c9	83 c4 14	 add	 esp, 20			; 00000014H
  001cc	3b ec		 cmp	 ebp, esp
  001ce	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001d3	8b e5		 mov	 esp, ebp
  001d5	5d		 pop	 ebp
  001d6	c3		 ret	 0
?AddOneLineX@Internal@Core@Math@Palmtree@@YAXPAII0II@Z ENDP ; Palmtree::Math::Core::Internal::AddOneLineX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
_TEXT	SEGMENT
_count$ = -20						; size = 4
_c$ = -13						; size = 1
_v_count$ = -12						; size = 4
_v_ptr$ = -8						; size = 4
_u_ptr$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_v_buf$ = 16						; size = 4
_v_buf_len$ = 20					; size = 4
_q_index$ = 24						; size = 4
?AddOneLine@Internal@Core@Math@Palmtree@@YAXPAII0II@Z PROC ; Palmtree::Math::Core::Internal::AddOneLine

; 1203 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00011	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00014	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00017	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001a	b9 00 00 00 00	 mov	 ecx, OFFSET __E17217E9_pmc_divrem@cpp
  0001f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1204 :         __UNIT_TYPE* u_ptr = &u_buf[q_index];

  00024	8b 45 18	 mov	 eax, DWORD PTR _q_index$[ebp]
  00027	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  0002a	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  0002d	89 55 fc	 mov	 DWORD PTR _u_ptr$[ebp], edx

; 1205 :         __UNIT_TYPE* v_ptr = &v_buf[0];

  00030	b8 04 00 00 00	 mov	 eax, 4
  00035	6b c8 00	 imul	 ecx, eax, 0
  00038	03 4d 10	 add	 ecx, DWORD PTR _v_buf$[ebp]
  0003b	89 4d f8	 mov	 DWORD PTR _v_ptr$[ebp], ecx

; 1206 :         __UNIT_TYPE v_count = v_buf_len;

  0003e	8b 55 14	 mov	 edx, DWORD PTR _v_buf_len$[ebp]
  00041	89 55 f4	 mov	 DWORD PTR _v_count$[ebp], edx

; 1207 :         char c = 0;

  00044	c6 45 f3 00	 mov	 BYTE PTR _c$[ebp], 0

; 1208 : 
; 1209 :         // まず 32 ワードずつ加算をする。
; 1210 :         __UNIT_TYPE count = v_count >> 5;

  00048	8b 45 f4	 mov	 eax, DWORD PTR _v_count$[ebp]
  0004b	c1 e8 05	 shr	 eax, 5
  0004e	89 45 ec	 mov	 DWORD PTR _count$[ebp], eax
$LN2@AddOneLine:

; 1211 :         while (count != 0)

  00051	83 7d ec 00	 cmp	 DWORD PTR _count$[ebp], 0
  00055	74 3e		 je	 SHORT $LN3@AddOneLine

; 1212 :         {
; 1213 :             c = _ADD_32WORDS_ADC(c, u_ptr, v_ptr, u_ptr);

  00057	8b 4d fc	 mov	 ecx, DWORD PTR _u_ptr$[ebp]
  0005a	51		 push	 ecx
  0005b	8b 55 f8	 mov	 edx, DWORD PTR _v_ptr$[ebp]
  0005e	52		 push	 edx
  0005f	8b 45 fc	 mov	 eax, DWORD PTR _u_ptr$[ebp]
  00062	50		 push	 eax
  00063	0f b6 4d f3	 movzx	 ecx, BYTE PTR _c$[ebp]
  00067	51		 push	 ecx
  00068	e8 00 00 00 00	 call	 __ADD_32WORDS_ADC
  0006d	83 c4 10	 add	 esp, 16			; 00000010H
  00070	88 45 f3	 mov	 BYTE PTR _c$[ebp], al

; 1214 :             u_ptr += 32;

  00073	8b 55 fc	 mov	 edx, DWORD PTR _u_ptr$[ebp]
  00076	81 c2 80 00 00
	00		 add	 edx, 128		; 00000080H
  0007c	89 55 fc	 mov	 DWORD PTR _u_ptr$[ebp], edx

; 1215 :             v_ptr += 32;

  0007f	8b 45 f8	 mov	 eax, DWORD PTR _v_ptr$[ebp]
  00082	05 80 00 00 00	 add	 eax, 128		; 00000080H
  00087	89 45 f8	 mov	 DWORD PTR _v_ptr$[ebp], eax

; 1216 :             --count;

  0008a	8b 4d ec	 mov	 ecx, DWORD PTR _count$[ebp]
  0008d	83 e9 01	 sub	 ecx, 1
  00090	89 4d ec	 mov	 DWORD PTR _count$[ebp], ecx

; 1217 :         }

  00093	eb bc		 jmp	 SHORT $LN2@AddOneLine
$LN3@AddOneLine:

; 1218 :         // この時点で未処理の桁は 32 ワード未満のはず
; 1219 : 
; 1220 :         // 未処理の桁が 16 ワード以上あるなら 16 ワード加算を行う。
; 1221 :         if (v_count & 0x10)

  00095	8b 55 f4	 mov	 edx, DWORD PTR _v_count$[ebp]
  00098	83 e2 10	 and	 edx, 16			; 00000010H
  0009b	74 2e		 je	 SHORT $LN4@AddOneLine

; 1222 :         {
; 1223 :             c = _ADD_16WORDS_ADC(c, u_ptr, v_ptr, u_ptr);

  0009d	8b 45 fc	 mov	 eax, DWORD PTR _u_ptr$[ebp]
  000a0	50		 push	 eax
  000a1	8b 4d f8	 mov	 ecx, DWORD PTR _v_ptr$[ebp]
  000a4	51		 push	 ecx
  000a5	8b 55 fc	 mov	 edx, DWORD PTR _u_ptr$[ebp]
  000a8	52		 push	 edx
  000a9	0f b6 45 f3	 movzx	 eax, BYTE PTR _c$[ebp]
  000ad	50		 push	 eax
  000ae	e8 00 00 00 00	 call	 __ADD_16WORDS_ADC
  000b3	83 c4 10	 add	 esp, 16			; 00000010H
  000b6	88 45 f3	 mov	 BYTE PTR _c$[ebp], al

; 1224 :             u_ptr += 16;

  000b9	8b 4d fc	 mov	 ecx, DWORD PTR _u_ptr$[ebp]
  000bc	83 c1 40	 add	 ecx, 64			; 00000040H
  000bf	89 4d fc	 mov	 DWORD PTR _u_ptr$[ebp], ecx

; 1225 :             v_ptr += 16;

  000c2	8b 55 f8	 mov	 edx, DWORD PTR _v_ptr$[ebp]
  000c5	83 c2 40	 add	 edx, 64			; 00000040H
  000c8	89 55 f8	 mov	 DWORD PTR _v_ptr$[ebp], edx
$LN4@AddOneLine:

; 1226 :         }
; 1227 :         // この時点で未処理の桁は 16 ワード未満のはず
; 1228 : 
; 1229 :         // 未処理の桁が 8 ワード以上あるなら 8 ワード加算を行う。
; 1230 :         if (v_count & 0x8)

  000cb	8b 45 f4	 mov	 eax, DWORD PTR _v_count$[ebp]
  000ce	83 e0 08	 and	 eax, 8
  000d1	74 2e		 je	 SHORT $LN5@AddOneLine

; 1231 :         {
; 1232 :             c = _ADD_8WORDS_ADC(c, u_ptr, v_ptr, u_ptr);

  000d3	8b 4d fc	 mov	 ecx, DWORD PTR _u_ptr$[ebp]
  000d6	51		 push	 ecx
  000d7	8b 55 f8	 mov	 edx, DWORD PTR _v_ptr$[ebp]
  000da	52		 push	 edx
  000db	8b 45 fc	 mov	 eax, DWORD PTR _u_ptr$[ebp]
  000de	50		 push	 eax
  000df	0f b6 4d f3	 movzx	 ecx, BYTE PTR _c$[ebp]
  000e3	51		 push	 ecx
  000e4	e8 00 00 00 00	 call	 __ADD_8WORDS_ADC
  000e9	83 c4 10	 add	 esp, 16			; 00000010H
  000ec	88 45 f3	 mov	 BYTE PTR _c$[ebp], al

; 1233 :             u_ptr += 8;

  000ef	8b 55 fc	 mov	 edx, DWORD PTR _u_ptr$[ebp]
  000f2	83 c2 20	 add	 edx, 32			; 00000020H
  000f5	89 55 fc	 mov	 DWORD PTR _u_ptr$[ebp], edx

; 1234 :             v_ptr += 8;

  000f8	8b 45 f8	 mov	 eax, DWORD PTR _v_ptr$[ebp]
  000fb	83 c0 20	 add	 eax, 32			; 00000020H
  000fe	89 45 f8	 mov	 DWORD PTR _v_ptr$[ebp], eax
$LN5@AddOneLine:

; 1235 :         }
; 1236 :         // この時点で未処理の桁は 8 ワード未満のはず
; 1237 : 
; 1238 :         // 未処理の桁が 4 ワード以上あるなら 4 ワード加算を行う。
; 1239 :         if (v_count & 0x4)

  00101	8b 4d f4	 mov	 ecx, DWORD PTR _v_count$[ebp]
  00104	83 e1 04	 and	 ecx, 4
  00107	74 2e		 je	 SHORT $LN6@AddOneLine

; 1240 :         {
; 1241 :             c = _ADD_4WORDS_ADC(c, u_ptr, v_ptr, u_ptr);

  00109	8b 55 fc	 mov	 edx, DWORD PTR _u_ptr$[ebp]
  0010c	52		 push	 edx
  0010d	8b 45 f8	 mov	 eax, DWORD PTR _v_ptr$[ebp]
  00110	50		 push	 eax
  00111	8b 4d fc	 mov	 ecx, DWORD PTR _u_ptr$[ebp]
  00114	51		 push	 ecx
  00115	0f b6 55 f3	 movzx	 edx, BYTE PTR _c$[ebp]
  00119	52		 push	 edx
  0011a	e8 00 00 00 00	 call	 __ADD_4WORDS_ADC
  0011f	83 c4 10	 add	 esp, 16			; 00000010H
  00122	88 45 f3	 mov	 BYTE PTR _c$[ebp], al

; 1242 :             u_ptr += 4;

  00125	8b 45 fc	 mov	 eax, DWORD PTR _u_ptr$[ebp]
  00128	83 c0 10	 add	 eax, 16			; 00000010H
  0012b	89 45 fc	 mov	 DWORD PTR _u_ptr$[ebp], eax

; 1243 :             v_ptr += 4;

  0012e	8b 4d f8	 mov	 ecx, DWORD PTR _v_ptr$[ebp]
  00131	83 c1 10	 add	 ecx, 16			; 00000010H
  00134	89 4d f8	 mov	 DWORD PTR _v_ptr$[ebp], ecx
$LN6@AddOneLine:

; 1244 :         }
; 1245 :         // この時点で未処理の桁は 4 ワード未満のはず
; 1246 : 
; 1247 :         // 未処理の桁が 2 ワード以上あるなら 2 ワード加算を行う。
; 1248 :         if (v_count & 0x2)

  00137	8b 55 f4	 mov	 edx, DWORD PTR _v_count$[ebp]
  0013a	83 e2 02	 and	 edx, 2
  0013d	74 2e		 je	 SHORT $LN7@AddOneLine

; 1249 :         {
; 1250 :             c = _ADD_2WORDS_ADC(c, u_ptr, v_ptr, u_ptr);

  0013f	8b 45 fc	 mov	 eax, DWORD PTR _u_ptr$[ebp]
  00142	50		 push	 eax
  00143	8b 4d f8	 mov	 ecx, DWORD PTR _v_ptr$[ebp]
  00146	51		 push	 ecx
  00147	8b 55 fc	 mov	 edx, DWORD PTR _u_ptr$[ebp]
  0014a	52		 push	 edx
  0014b	0f b6 45 f3	 movzx	 eax, BYTE PTR _c$[ebp]
  0014f	50		 push	 eax
  00150	e8 00 00 00 00	 call	 __ADD_2WORDS_ADC
  00155	83 c4 10	 add	 esp, 16			; 00000010H
  00158	88 45 f3	 mov	 BYTE PTR _c$[ebp], al

; 1251 :             u_ptr += 2;

  0015b	8b 4d fc	 mov	 ecx, DWORD PTR _u_ptr$[ebp]
  0015e	83 c1 08	 add	 ecx, 8
  00161	89 4d fc	 mov	 DWORD PTR _u_ptr$[ebp], ecx

; 1252 :             v_ptr += 2;

  00164	8b 55 f8	 mov	 edx, DWORD PTR _v_ptr$[ebp]
  00167	83 c2 08	 add	 edx, 8
  0016a	89 55 f8	 mov	 DWORD PTR _v_ptr$[ebp], edx
$LN7@AddOneLine:

; 1253 :         }
; 1254 :         // この時点で未処理の桁は 2 ワード未満のはず
; 1255 : 
; 1256 :         // 未処理の桁が 1 ワード以上あるなら 1 ワード加算を行う。
; 1257 :         if (v_count & 0x1)

  0016d	8b 45 f4	 mov	 eax, DWORD PTR _v_count$[ebp]
  00170	83 e0 01	 and	 eax, 1
  00173	74 32		 je	 SHORT $LN8@AddOneLine

; 1258 :         {
; 1259 :             c = _ADD_UNIT(c, *u_ptr, *v_ptr, u_ptr);

  00175	8b 4d fc	 mov	 ecx, DWORD PTR _u_ptr$[ebp]
  00178	51		 push	 ecx
  00179	8b 55 f8	 mov	 edx, DWORD PTR _v_ptr$[ebp]
  0017c	8b 02		 mov	 eax, DWORD PTR [edx]
  0017e	50		 push	 eax
  0017f	8b 4d fc	 mov	 ecx, DWORD PTR _u_ptr$[ebp]
  00182	8b 11		 mov	 edx, DWORD PTR [ecx]
  00184	52		 push	 edx
  00185	0f b6 45 f3	 movzx	 eax, BYTE PTR _c$[ebp]
  00189	50		 push	 eax
  0018a	e8 00 00 00 00	 call	 __ADD_UNIT
  0018f	83 c4 10	 add	 esp, 16			; 00000010H
  00192	88 45 f3	 mov	 BYTE PTR _c$[ebp], al

; 1260 :             ++u_ptr;

  00195	8b 4d fc	 mov	 ecx, DWORD PTR _u_ptr$[ebp]
  00198	83 c1 04	 add	 ecx, 4
  0019b	89 4d fc	 mov	 DWORD PTR _u_ptr$[ebp], ecx

; 1261 :             ++v_ptr;

  0019e	8b 55 f8	 mov	 edx, DWORD PTR _v_ptr$[ebp]
  001a1	83 c2 04	 add	 edx, 4
  001a4	89 55 f8	 mov	 DWORD PTR _v_ptr$[ebp], edx
$LN8@AddOneLine:

; 1262 :         }
; 1263 : 
; 1264 :         // 残りの桁の繰り上がりを計算する。
; 1265 :         DoCarry(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr);

  001a7	8b 45 0c	 mov	 eax, DWORD PTR _u_buf_len$[ebp]
  001aa	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  001ad	8d 54 81 04	 lea	 edx, DWORD PTR [ecx+eax*4+4]
  001b1	2b 55 fc	 sub	 edx, DWORD PTR _u_ptr$[ebp]
  001b4	c1 fa 02	 sar	 edx, 2
  001b7	52		 push	 edx
  001b8	8b 45 fc	 mov	 eax, DWORD PTR _u_ptr$[ebp]
  001bb	50		 push	 eax
  001bc	0f b6 4d f3	 movzx	 ecx, BYTE PTR _c$[ebp]
  001c0	51		 push	 ecx
  001c1	e8 00 00 00 00	 call	 ?DoCarry@Internal@Core@Math@Palmtree@@YAXDPAII@Z ; Palmtree::Math::Core::Internal::DoCarry
  001c6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1266 :     }

  001c9	83 c4 14	 add	 esp, 20			; 00000014H
  001cc	3b ec		 cmp	 ebp, esp
  001ce	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001d3	8b e5		 mov	 esp, ebp
  001d5	5d		 pop	 ebp
  001d6	c3		 ret	 0
?AddOneLine@Internal@Core@Math@Palmtree@@YAXPAII0II@Z ENDP ; Palmtree::Math::Core::Internal::AddOneLine
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
_TEXT	SEGMENT
_c$ = 8							; size = 1
_u_ptr$ = 12						; size = 4
_u_count$ = 16						; size = 4
?DoCarry@Internal@Core@Math@Palmtree@@YAXDPAII@Z PROC	; Palmtree::Math::Core::Internal::DoCarry

; 1174 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __E17217E9_pmc_divrem@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
$LN4@DoCarry:

; 1175 :         // 繰り上がりを続く限り行う
; 1176 :         for (;;)
; 1177 :         {
; 1178 :             if (u_count <= 0)

  0000d	83 7d 10 00	 cmp	 DWORD PTR _u_count$[ebp], 0
  00011	77 04		 ja	 SHORT $LN5@DoCarry

; 1179 :             {
; 1180 :                 // u の最上位まで達してしまった場合
; 1181 :                 return;

  00013	eb 3e		 jmp	 SHORT $LN1@DoCarry
  00015	eb 3a		 jmp	 SHORT $LN6@DoCarry
$LN5@DoCarry:

; 1182 :             }
; 1183 :             else if (c)

  00017	0f be 45 08	 movsx	 eax, BYTE PTR _c$[ebp]
  0001b	85 c0		 test	 eax, eax
  0001d	74 30		 je	 SHORT $LN7@DoCarry

; 1184 :             {
; 1185 :                 // u の最上位に達しておらず、かつキャリーが立っている場合
; 1186 : 
; 1187 :                 // 繰り上がりを継続する
; 1188 :                 c = _ADD_UNIT(c, *u_ptr, 0, u_ptr);

  0001f	8b 4d 0c	 mov	 ecx, DWORD PTR _u_ptr$[ebp]
  00022	51		 push	 ecx
  00023	6a 00		 push	 0
  00025	8b 55 0c	 mov	 edx, DWORD PTR _u_ptr$[ebp]
  00028	8b 02		 mov	 eax, DWORD PTR [edx]
  0002a	50		 push	 eax
  0002b	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 __ADD_UNIT
  00035	83 c4 10	 add	 esp, 16			; 00000010H
  00038	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1189 :                 ++u_ptr;

  0003b	8b 55 0c	 mov	 edx, DWORD PTR _u_ptr$[ebp]
  0003e	83 c2 04	 add	 edx, 4
  00041	89 55 0c	 mov	 DWORD PTR _u_ptr$[ebp], edx

; 1190 :                 --u_count;

  00044	8b 45 10	 mov	 eax, DWORD PTR _u_count$[ebp]
  00047	83 e8 01	 sub	 eax, 1
  0004a	89 45 10	 mov	 DWORD PTR _u_count$[ebp], eax

; 1191 :             }
; 1192 :             else

  0004d	eb 02		 jmp	 SHORT $LN6@DoCarry
$LN7@DoCarry:

; 1193 :             {
; 1194 :                 // u の最上位に達しておらず、かつキャリーが立っていない場合
; 1195 : 
; 1196 :                 // 繰り上がりを中断し、復帰する。
; 1197 :                 return;

  0004f	eb 02		 jmp	 SHORT $LN1@DoCarry
$LN6@DoCarry:

; 1198 :             }
; 1199 :         }

  00051	eb ba		 jmp	 SHORT $LN4@DoCarry
$LN1@DoCarry:

; 1200 :     }

  00053	3b ec		 cmp	 ebp, esp
  00055	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
?DoCarry@Internal@Core@Math@Palmtree@@YAXDPAII@Z ENDP	; Palmtree::Math::Core::Internal::DoCarry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
_TEXT	SEGMENT
_count$ = -32						; size = 4
_c$ = -25						; size = 1
_k$ = -20						; size = 4
_v_count$ = -12						; size = 4
_v_ptr$ = -8						; size = 4
_u_ptr$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_v_buf$ = 16						; size = 4
_v_buf_len$ = 20					; size = 4
_q_index$ = 24						; size = 4
_q_$ = 28						; size = 4
?SubtructOneLineX@Internal@Core@Math@Palmtree@@YAHPAII0III@Z PROC ; Palmtree::Math::Core::Internal::SubtructOneLineX

; 1023 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0000e	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00011	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00014	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00017	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001a	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001d	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00020	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __E17217E9_pmc_divrem@cpp
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1024 :         __UNIT_TYPE* u_ptr = &u_buf[q_index];

  0002d	8b 45 18	 mov	 eax, DWORD PTR _q_index$[ebp]
  00030	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  00033	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00036	89 55 fc	 mov	 DWORD PTR _u_ptr$[ebp], edx

; 1025 :         __UNIT_TYPE* v_ptr = &v_buf[0];

  00039	b8 04 00 00 00	 mov	 eax, 4
  0003e	6b c8 00	 imul	 ecx, eax, 0
  00041	03 4d 10	 add	 ecx, DWORD PTR _v_buf$[ebp]
  00044	89 4d f8	 mov	 DWORD PTR _v_ptr$[ebp], ecx

; 1026 :         __UNIT_TYPE v_count = v_buf_len;

  00047	8b 55 14	 mov	 edx, DWORD PTR _v_buf_len$[ebp]
  0004a	89 55 f4	 mov	 DWORD PTR _v_count$[ebp], edx

; 1027 :         __UNIT_TYPE k = 0;

  0004d	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _k$[ebp], 0

; 1028 :         char c = 0;

  00054	c6 45 e7 00	 mov	 BYTE PTR _c$[ebp], 0

; 1029 : 
; 1030 :         __UNIT_TYPE count = v_count >> 5;

  00058	8b 45 f4	 mov	 eax, DWORD PTR _v_count$[ebp]
  0005b	c1 e8 05	 shr	 eax, 5
  0005e	89 45 e0	 mov	 DWORD PTR _count$[ebp], eax
$LN2@SubtructOn:

; 1031 :         while (count != 0)

  00061	83 7d e0 00	 cmp	 DWORD PTR _count$[ebp], 0
  00065	0f 84 3d 06 00
	00		 je	 $LN3@SubtructOn

; 1032 :         {
; 1033 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[0], q_, &u_ptr[0]);

  0006b	b9 04 00 00 00	 mov	 ecx, 4
  00070	6b d1 00	 imul	 edx, ecx, 0
  00073	03 55 fc	 add	 edx, DWORD PTR _u_ptr$[ebp]
  00076	52		 push	 edx
  00077	8b 45 1c	 mov	 eax, DWORD PTR _q_$[ebp]
  0007a	50		 push	 eax
  0007b	b9 04 00 00 00	 mov	 ecx, 4
  00080	6b d1 00	 imul	 edx, ecx, 0
  00083	03 55 f8	 add	 edx, DWORD PTR _v_ptr$[ebp]
  00086	52		 push	 edx
  00087	8d 45 ec	 lea	 eax, DWORD PTR _k$[ebp]
  0008a	50		 push	 eax
  0008b	0f b6 4d e7	 movzx	 ecx, BYTE PTR _c$[ebp]
  0008f	51		 push	 ecx
  00090	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00095	83 c4 14	 add	 esp, 20			; 00000014H
  00098	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1034 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[1], q_, &u_ptr[1]);

  0009b	ba 04 00 00 00	 mov	 edx, 4
  000a0	c1 e2 00	 shl	 edx, 0
  000a3	03 55 fc	 add	 edx, DWORD PTR _u_ptr$[ebp]
  000a6	52		 push	 edx
  000a7	8b 45 1c	 mov	 eax, DWORD PTR _q_$[ebp]
  000aa	50		 push	 eax
  000ab	b9 04 00 00 00	 mov	 ecx, 4
  000b0	c1 e1 00	 shl	 ecx, 0
  000b3	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  000b6	51		 push	 ecx
  000b7	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  000ba	52		 push	 edx
  000bb	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  000bf	50		 push	 eax
  000c0	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  000c5	83 c4 14	 add	 esp, 20			; 00000014H
  000c8	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1035 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[2], q_, &u_ptr[2]);

  000cb	b9 04 00 00 00	 mov	 ecx, 4
  000d0	d1 e1		 shl	 ecx, 1
  000d2	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  000d5	51		 push	 ecx
  000d6	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  000d9	52		 push	 edx
  000da	b8 04 00 00 00	 mov	 eax, 4
  000df	d1 e0		 shl	 eax, 1
  000e1	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  000e4	50		 push	 eax
  000e5	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  000e8	51		 push	 ecx
  000e9	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  000ed	52		 push	 edx
  000ee	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  000f3	83 c4 14	 add	 esp, 20			; 00000014H
  000f6	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1036 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[3], q_, &u_ptr[3]);

  000f9	b8 04 00 00 00	 mov	 eax, 4
  000fe	6b c8 03	 imul	 ecx, eax, 3
  00101	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  00104	51		 push	 ecx
  00105	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  00108	52		 push	 edx
  00109	b8 04 00 00 00	 mov	 eax, 4
  0010e	6b c8 03	 imul	 ecx, eax, 3
  00111	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  00114	51		 push	 ecx
  00115	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  00118	52		 push	 edx
  00119	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  0011d	50		 push	 eax
  0011e	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00123	83 c4 14	 add	 esp, 20			; 00000014H
  00126	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1037 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[4], q_, &u_ptr[4]);

  00129	b9 04 00 00 00	 mov	 ecx, 4
  0012e	c1 e1 02	 shl	 ecx, 2
  00131	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  00134	51		 push	 ecx
  00135	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  00138	52		 push	 edx
  00139	b8 04 00 00 00	 mov	 eax, 4
  0013e	c1 e0 02	 shl	 eax, 2
  00141	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  00144	50		 push	 eax
  00145	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  00148	51		 push	 ecx
  00149	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  0014d	52		 push	 edx
  0014e	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00153	83 c4 14	 add	 esp, 20			; 00000014H
  00156	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1038 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[5], q_, &u_ptr[5]);

  00159	b8 04 00 00 00	 mov	 eax, 4
  0015e	6b c8 05	 imul	 ecx, eax, 5
  00161	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  00164	51		 push	 ecx
  00165	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  00168	52		 push	 edx
  00169	b8 04 00 00 00	 mov	 eax, 4
  0016e	6b c8 05	 imul	 ecx, eax, 5
  00171	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  00174	51		 push	 ecx
  00175	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  00178	52		 push	 edx
  00179	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  0017d	50		 push	 eax
  0017e	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00183	83 c4 14	 add	 esp, 20			; 00000014H
  00186	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1039 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[6], q_, &u_ptr[6]);

  00189	b9 04 00 00 00	 mov	 ecx, 4
  0018e	6b d1 06	 imul	 edx, ecx, 6
  00191	03 55 fc	 add	 edx, DWORD PTR _u_ptr$[ebp]
  00194	52		 push	 edx
  00195	8b 45 1c	 mov	 eax, DWORD PTR _q_$[ebp]
  00198	50		 push	 eax
  00199	b9 04 00 00 00	 mov	 ecx, 4
  0019e	6b d1 06	 imul	 edx, ecx, 6
  001a1	03 55 f8	 add	 edx, DWORD PTR _v_ptr$[ebp]
  001a4	52		 push	 edx
  001a5	8d 45 ec	 lea	 eax, DWORD PTR _k$[ebp]
  001a8	50		 push	 eax
  001a9	0f b6 4d e7	 movzx	 ecx, BYTE PTR _c$[ebp]
  001ad	51		 push	 ecx
  001ae	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  001b3	83 c4 14	 add	 esp, 20			; 00000014H
  001b6	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1040 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[7], q_, &u_ptr[7]);

  001b9	ba 04 00 00 00	 mov	 edx, 4
  001be	6b c2 07	 imul	 eax, edx, 7
  001c1	03 45 fc	 add	 eax, DWORD PTR _u_ptr$[ebp]
  001c4	50		 push	 eax
  001c5	8b 4d 1c	 mov	 ecx, DWORD PTR _q_$[ebp]
  001c8	51		 push	 ecx
  001c9	ba 04 00 00 00	 mov	 edx, 4
  001ce	6b c2 07	 imul	 eax, edx, 7
  001d1	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  001d4	50		 push	 eax
  001d5	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  001d8	51		 push	 ecx
  001d9	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  001dd	52		 push	 edx
  001de	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  001e3	83 c4 14	 add	 esp, 20			; 00000014H
  001e6	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1041 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[8], q_, &u_ptr[8]);

  001e9	b8 04 00 00 00	 mov	 eax, 4
  001ee	c1 e0 03	 shl	 eax, 3
  001f1	03 45 fc	 add	 eax, DWORD PTR _u_ptr$[ebp]
  001f4	50		 push	 eax
  001f5	8b 4d 1c	 mov	 ecx, DWORD PTR _q_$[ebp]
  001f8	51		 push	 ecx
  001f9	ba 04 00 00 00	 mov	 edx, 4
  001fe	c1 e2 03	 shl	 edx, 3
  00201	03 55 f8	 add	 edx, DWORD PTR _v_ptr$[ebp]
  00204	52		 push	 edx
  00205	8d 45 ec	 lea	 eax, DWORD PTR _k$[ebp]
  00208	50		 push	 eax
  00209	0f b6 4d e7	 movzx	 ecx, BYTE PTR _c$[ebp]
  0020d	51		 push	 ecx
  0020e	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00213	83 c4 14	 add	 esp, 20			; 00000014H
  00216	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1042 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[9], q_, &u_ptr[9]);

  00219	ba 04 00 00 00	 mov	 edx, 4
  0021e	6b c2 09	 imul	 eax, edx, 9
  00221	03 45 fc	 add	 eax, DWORD PTR _u_ptr$[ebp]
  00224	50		 push	 eax
  00225	8b 4d 1c	 mov	 ecx, DWORD PTR _q_$[ebp]
  00228	51		 push	 ecx
  00229	ba 04 00 00 00	 mov	 edx, 4
  0022e	6b c2 09	 imul	 eax, edx, 9
  00231	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  00234	50		 push	 eax
  00235	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  00238	51		 push	 ecx
  00239	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  0023d	52		 push	 edx
  0023e	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00243	83 c4 14	 add	 esp, 20			; 00000014H
  00246	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1043 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[10], q_, &u_ptr[10]);

  00249	b8 04 00 00 00	 mov	 eax, 4
  0024e	6b c8 0a	 imul	 ecx, eax, 10
  00251	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  00254	51		 push	 ecx
  00255	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  00258	52		 push	 edx
  00259	b8 04 00 00 00	 mov	 eax, 4
  0025e	6b c8 0a	 imul	 ecx, eax, 10
  00261	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  00264	51		 push	 ecx
  00265	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  00268	52		 push	 edx
  00269	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  0026d	50		 push	 eax
  0026e	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00273	83 c4 14	 add	 esp, 20			; 00000014H
  00276	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1044 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[11], q_, &u_ptr[11]);

  00279	b9 04 00 00 00	 mov	 ecx, 4
  0027e	6b d1 0b	 imul	 edx, ecx, 11
  00281	03 55 fc	 add	 edx, DWORD PTR _u_ptr$[ebp]
  00284	52		 push	 edx
  00285	8b 45 1c	 mov	 eax, DWORD PTR _q_$[ebp]
  00288	50		 push	 eax
  00289	b9 04 00 00 00	 mov	 ecx, 4
  0028e	6b d1 0b	 imul	 edx, ecx, 11
  00291	03 55 f8	 add	 edx, DWORD PTR _v_ptr$[ebp]
  00294	52		 push	 edx
  00295	8d 45 ec	 lea	 eax, DWORD PTR _k$[ebp]
  00298	50		 push	 eax
  00299	0f b6 4d e7	 movzx	 ecx, BYTE PTR _c$[ebp]
  0029d	51		 push	 ecx
  0029e	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  002a3	83 c4 14	 add	 esp, 20			; 00000014H
  002a6	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1045 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[12], q_, &u_ptr[12]);

  002a9	ba 04 00 00 00	 mov	 edx, 4
  002ae	6b c2 0c	 imul	 eax, edx, 12
  002b1	03 45 fc	 add	 eax, DWORD PTR _u_ptr$[ebp]
  002b4	50		 push	 eax
  002b5	8b 4d 1c	 mov	 ecx, DWORD PTR _q_$[ebp]
  002b8	51		 push	 ecx
  002b9	ba 04 00 00 00	 mov	 edx, 4
  002be	6b c2 0c	 imul	 eax, edx, 12
  002c1	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  002c4	50		 push	 eax
  002c5	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  002c8	51		 push	 ecx
  002c9	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  002cd	52		 push	 edx
  002ce	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  002d3	83 c4 14	 add	 esp, 20			; 00000014H
  002d6	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1046 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[13], q_, &u_ptr[13]);

  002d9	b8 04 00 00 00	 mov	 eax, 4
  002de	6b c8 0d	 imul	 ecx, eax, 13
  002e1	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  002e4	51		 push	 ecx
  002e5	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  002e8	52		 push	 edx
  002e9	b8 04 00 00 00	 mov	 eax, 4
  002ee	6b c8 0d	 imul	 ecx, eax, 13
  002f1	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  002f4	51		 push	 ecx
  002f5	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  002f8	52		 push	 edx
  002f9	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  002fd	50		 push	 eax
  002fe	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00303	83 c4 14	 add	 esp, 20			; 00000014H
  00306	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1047 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[14], q_, &u_ptr[14]);

  00309	b9 04 00 00 00	 mov	 ecx, 4
  0030e	6b d1 0e	 imul	 edx, ecx, 14
  00311	03 55 fc	 add	 edx, DWORD PTR _u_ptr$[ebp]
  00314	52		 push	 edx
  00315	8b 45 1c	 mov	 eax, DWORD PTR _q_$[ebp]
  00318	50		 push	 eax
  00319	b9 04 00 00 00	 mov	 ecx, 4
  0031e	6b d1 0e	 imul	 edx, ecx, 14
  00321	03 55 f8	 add	 edx, DWORD PTR _v_ptr$[ebp]
  00324	52		 push	 edx
  00325	8d 45 ec	 lea	 eax, DWORD PTR _k$[ebp]
  00328	50		 push	 eax
  00329	0f b6 4d e7	 movzx	 ecx, BYTE PTR _c$[ebp]
  0032d	51		 push	 ecx
  0032e	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00333	83 c4 14	 add	 esp, 20			; 00000014H
  00336	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1048 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[15], q_, &u_ptr[15]);

  00339	ba 04 00 00 00	 mov	 edx, 4
  0033e	6b c2 0f	 imul	 eax, edx, 15
  00341	03 45 fc	 add	 eax, DWORD PTR _u_ptr$[ebp]
  00344	50		 push	 eax
  00345	8b 4d 1c	 mov	 ecx, DWORD PTR _q_$[ebp]
  00348	51		 push	 ecx
  00349	ba 04 00 00 00	 mov	 edx, 4
  0034e	6b c2 0f	 imul	 eax, edx, 15
  00351	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  00354	50		 push	 eax
  00355	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  00358	51		 push	 ecx
  00359	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  0035d	52		 push	 edx
  0035e	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00363	83 c4 14	 add	 esp, 20			; 00000014H
  00366	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1049 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[16], q_, &u_ptr[16]);

  00369	b8 04 00 00 00	 mov	 eax, 4
  0036e	c1 e0 04	 shl	 eax, 4
  00371	03 45 fc	 add	 eax, DWORD PTR _u_ptr$[ebp]
  00374	50		 push	 eax
  00375	8b 4d 1c	 mov	 ecx, DWORD PTR _q_$[ebp]
  00378	51		 push	 ecx
  00379	ba 04 00 00 00	 mov	 edx, 4
  0037e	c1 e2 04	 shl	 edx, 4
  00381	03 55 f8	 add	 edx, DWORD PTR _v_ptr$[ebp]
  00384	52		 push	 edx
  00385	8d 45 ec	 lea	 eax, DWORD PTR _k$[ebp]
  00388	50		 push	 eax
  00389	0f b6 4d e7	 movzx	 ecx, BYTE PTR _c$[ebp]
  0038d	51		 push	 ecx
  0038e	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00393	83 c4 14	 add	 esp, 20			; 00000014H
  00396	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1050 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[17], q_, &u_ptr[17]);

  00399	ba 04 00 00 00	 mov	 edx, 4
  0039e	6b c2 11	 imul	 eax, edx, 17
  003a1	03 45 fc	 add	 eax, DWORD PTR _u_ptr$[ebp]
  003a4	50		 push	 eax
  003a5	8b 4d 1c	 mov	 ecx, DWORD PTR _q_$[ebp]
  003a8	51		 push	 ecx
  003a9	ba 04 00 00 00	 mov	 edx, 4
  003ae	6b c2 11	 imul	 eax, edx, 17
  003b1	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  003b4	50		 push	 eax
  003b5	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  003b8	51		 push	 ecx
  003b9	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  003bd	52		 push	 edx
  003be	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  003c3	83 c4 14	 add	 esp, 20			; 00000014H
  003c6	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1051 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[18], q_, &u_ptr[18]);

  003c9	b8 04 00 00 00	 mov	 eax, 4
  003ce	6b c8 12	 imul	 ecx, eax, 18
  003d1	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  003d4	51		 push	 ecx
  003d5	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  003d8	52		 push	 edx
  003d9	b8 04 00 00 00	 mov	 eax, 4
  003de	6b c8 12	 imul	 ecx, eax, 18
  003e1	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  003e4	51		 push	 ecx
  003e5	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  003e8	52		 push	 edx
  003e9	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  003ed	50		 push	 eax
  003ee	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  003f3	83 c4 14	 add	 esp, 20			; 00000014H
  003f6	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1052 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[19], q_, &u_ptr[19]);

  003f9	b9 04 00 00 00	 mov	 ecx, 4
  003fe	6b d1 13	 imul	 edx, ecx, 19
  00401	03 55 fc	 add	 edx, DWORD PTR _u_ptr$[ebp]
  00404	52		 push	 edx
  00405	8b 45 1c	 mov	 eax, DWORD PTR _q_$[ebp]
  00408	50		 push	 eax
  00409	b9 04 00 00 00	 mov	 ecx, 4
  0040e	6b d1 13	 imul	 edx, ecx, 19
  00411	03 55 f8	 add	 edx, DWORD PTR _v_ptr$[ebp]
  00414	52		 push	 edx
  00415	8d 45 ec	 lea	 eax, DWORD PTR _k$[ebp]
  00418	50		 push	 eax
  00419	0f b6 4d e7	 movzx	 ecx, BYTE PTR _c$[ebp]
  0041d	51		 push	 ecx
  0041e	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00423	83 c4 14	 add	 esp, 20			; 00000014H
  00426	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1053 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[20], q_, &u_ptr[20]);

  00429	ba 04 00 00 00	 mov	 edx, 4
  0042e	6b c2 14	 imul	 eax, edx, 20
  00431	03 45 fc	 add	 eax, DWORD PTR _u_ptr$[ebp]
  00434	50		 push	 eax
  00435	8b 4d 1c	 mov	 ecx, DWORD PTR _q_$[ebp]
  00438	51		 push	 ecx
  00439	ba 04 00 00 00	 mov	 edx, 4
  0043e	6b c2 14	 imul	 eax, edx, 20
  00441	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  00444	50		 push	 eax
  00445	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  00448	51		 push	 ecx
  00449	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  0044d	52		 push	 edx
  0044e	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00453	83 c4 14	 add	 esp, 20			; 00000014H
  00456	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1054 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[21], q_, &u_ptr[21]);

  00459	b8 04 00 00 00	 mov	 eax, 4
  0045e	6b c8 15	 imul	 ecx, eax, 21
  00461	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  00464	51		 push	 ecx
  00465	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  00468	52		 push	 edx
  00469	b8 04 00 00 00	 mov	 eax, 4
  0046e	6b c8 15	 imul	 ecx, eax, 21
  00471	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  00474	51		 push	 ecx
  00475	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  00478	52		 push	 edx
  00479	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  0047d	50		 push	 eax
  0047e	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00483	83 c4 14	 add	 esp, 20			; 00000014H
  00486	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1055 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[22], q_, &u_ptr[22]);

  00489	b9 04 00 00 00	 mov	 ecx, 4
  0048e	6b d1 16	 imul	 edx, ecx, 22
  00491	03 55 fc	 add	 edx, DWORD PTR _u_ptr$[ebp]
  00494	52		 push	 edx
  00495	8b 45 1c	 mov	 eax, DWORD PTR _q_$[ebp]
  00498	50		 push	 eax
  00499	b9 04 00 00 00	 mov	 ecx, 4
  0049e	6b d1 16	 imul	 edx, ecx, 22
  004a1	03 55 f8	 add	 edx, DWORD PTR _v_ptr$[ebp]
  004a4	52		 push	 edx
  004a5	8d 45 ec	 lea	 eax, DWORD PTR _k$[ebp]
  004a8	50		 push	 eax
  004a9	0f b6 4d e7	 movzx	 ecx, BYTE PTR _c$[ebp]
  004ad	51		 push	 ecx
  004ae	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  004b3	83 c4 14	 add	 esp, 20			; 00000014H
  004b6	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1056 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[23], q_, &u_ptr[23]);

  004b9	ba 04 00 00 00	 mov	 edx, 4
  004be	6b c2 17	 imul	 eax, edx, 23
  004c1	03 45 fc	 add	 eax, DWORD PTR _u_ptr$[ebp]
  004c4	50		 push	 eax
  004c5	8b 4d 1c	 mov	 ecx, DWORD PTR _q_$[ebp]
  004c8	51		 push	 ecx
  004c9	ba 04 00 00 00	 mov	 edx, 4
  004ce	6b c2 17	 imul	 eax, edx, 23
  004d1	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  004d4	50		 push	 eax
  004d5	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  004d8	51		 push	 ecx
  004d9	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  004dd	52		 push	 edx
  004de	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  004e3	83 c4 14	 add	 esp, 20			; 00000014H
  004e6	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1057 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[24], q_, &u_ptr[24]);

  004e9	b8 04 00 00 00	 mov	 eax, 4
  004ee	6b c8 18	 imul	 ecx, eax, 24
  004f1	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  004f4	51		 push	 ecx
  004f5	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  004f8	52		 push	 edx
  004f9	b8 04 00 00 00	 mov	 eax, 4
  004fe	6b c8 18	 imul	 ecx, eax, 24
  00501	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  00504	51		 push	 ecx
  00505	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  00508	52		 push	 edx
  00509	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  0050d	50		 push	 eax
  0050e	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00513	83 c4 14	 add	 esp, 20			; 00000014H
  00516	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1058 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[25], q_, &u_ptr[25]);

  00519	b9 04 00 00 00	 mov	 ecx, 4
  0051e	6b d1 19	 imul	 edx, ecx, 25
  00521	03 55 fc	 add	 edx, DWORD PTR _u_ptr$[ebp]
  00524	52		 push	 edx
  00525	8b 45 1c	 mov	 eax, DWORD PTR _q_$[ebp]
  00528	50		 push	 eax
  00529	b9 04 00 00 00	 mov	 ecx, 4
  0052e	6b d1 19	 imul	 edx, ecx, 25
  00531	03 55 f8	 add	 edx, DWORD PTR _v_ptr$[ebp]
  00534	52		 push	 edx
  00535	8d 45 ec	 lea	 eax, DWORD PTR _k$[ebp]
  00538	50		 push	 eax
  00539	0f b6 4d e7	 movzx	 ecx, BYTE PTR _c$[ebp]
  0053d	51		 push	 ecx
  0053e	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00543	83 c4 14	 add	 esp, 20			; 00000014H
  00546	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1059 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[26], q_, &u_ptr[26]);

  00549	ba 04 00 00 00	 mov	 edx, 4
  0054e	6b c2 1a	 imul	 eax, edx, 26
  00551	03 45 fc	 add	 eax, DWORD PTR _u_ptr$[ebp]
  00554	50		 push	 eax
  00555	8b 4d 1c	 mov	 ecx, DWORD PTR _q_$[ebp]
  00558	51		 push	 ecx
  00559	ba 04 00 00 00	 mov	 edx, 4
  0055e	6b c2 1a	 imul	 eax, edx, 26
  00561	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  00564	50		 push	 eax
  00565	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  00568	51		 push	 ecx
  00569	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  0056d	52		 push	 edx
  0056e	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00573	83 c4 14	 add	 esp, 20			; 00000014H
  00576	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1060 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[27], q_, &u_ptr[27]);

  00579	b8 04 00 00 00	 mov	 eax, 4
  0057e	6b c8 1b	 imul	 ecx, eax, 27
  00581	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  00584	51		 push	 ecx
  00585	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  00588	52		 push	 edx
  00589	b8 04 00 00 00	 mov	 eax, 4
  0058e	6b c8 1b	 imul	 ecx, eax, 27
  00591	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  00594	51		 push	 ecx
  00595	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  00598	52		 push	 edx
  00599	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  0059d	50		 push	 eax
  0059e	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  005a3	83 c4 14	 add	 esp, 20			; 00000014H
  005a6	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1061 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[28], q_, &u_ptr[28]);

  005a9	b9 04 00 00 00	 mov	 ecx, 4
  005ae	6b d1 1c	 imul	 edx, ecx, 28
  005b1	03 55 fc	 add	 edx, DWORD PTR _u_ptr$[ebp]
  005b4	52		 push	 edx
  005b5	8b 45 1c	 mov	 eax, DWORD PTR _q_$[ebp]
  005b8	50		 push	 eax
  005b9	b9 04 00 00 00	 mov	 ecx, 4
  005be	6b d1 1c	 imul	 edx, ecx, 28
  005c1	03 55 f8	 add	 edx, DWORD PTR _v_ptr$[ebp]
  005c4	52		 push	 edx
  005c5	8d 45 ec	 lea	 eax, DWORD PTR _k$[ebp]
  005c8	50		 push	 eax
  005c9	0f b6 4d e7	 movzx	 ecx, BYTE PTR _c$[ebp]
  005cd	51		 push	 ecx
  005ce	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  005d3	83 c4 14	 add	 esp, 20			; 00000014H
  005d6	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1062 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[29], q_, &u_ptr[29]);

  005d9	ba 04 00 00 00	 mov	 edx, 4
  005de	6b c2 1d	 imul	 eax, edx, 29
  005e1	03 45 fc	 add	 eax, DWORD PTR _u_ptr$[ebp]
  005e4	50		 push	 eax
  005e5	8b 4d 1c	 mov	 ecx, DWORD PTR _q_$[ebp]
  005e8	51		 push	 ecx
  005e9	ba 04 00 00 00	 mov	 edx, 4
  005ee	6b c2 1d	 imul	 eax, edx, 29
  005f1	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  005f4	50		 push	 eax
  005f5	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  005f8	51		 push	 ecx
  005f9	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  005fd	52		 push	 edx
  005fe	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00603	83 c4 14	 add	 esp, 20			; 00000014H
  00606	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1063 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[30], q_, &u_ptr[30]);

  00609	b8 04 00 00 00	 mov	 eax, 4
  0060e	6b c8 1e	 imul	 ecx, eax, 30
  00611	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  00614	51		 push	 ecx
  00615	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  00618	52		 push	 edx
  00619	b8 04 00 00 00	 mov	 eax, 4
  0061e	6b c8 1e	 imul	 ecx, eax, 30
  00621	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  00624	51		 push	 ecx
  00625	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  00628	52		 push	 edx
  00629	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  0062d	50		 push	 eax
  0062e	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00633	83 c4 14	 add	 esp, 20			; 00000014H
  00636	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1064 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[31], q_, &u_ptr[31]);

  00639	b9 04 00 00 00	 mov	 ecx, 4
  0063e	6b d1 1f	 imul	 edx, ecx, 31
  00641	03 55 fc	 add	 edx, DWORD PTR _u_ptr$[ebp]
  00644	52		 push	 edx
  00645	8b 45 1c	 mov	 eax, DWORD PTR _q_$[ebp]
  00648	50		 push	 eax
  00649	b9 04 00 00 00	 mov	 ecx, 4
  0064e	6b d1 1f	 imul	 edx, ecx, 31
  00651	03 55 f8	 add	 edx, DWORD PTR _v_ptr$[ebp]
  00654	52		 push	 edx
  00655	8d 45 ec	 lea	 eax, DWORD PTR _k$[ebp]
  00658	50		 push	 eax
  00659	0f b6 4d e7	 movzx	 ecx, BYTE PTR _c$[ebp]
  0065d	51		 push	 ecx
  0065e	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00663	83 c4 14	 add	 esp, 20			; 00000014H
  00666	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1065 :             u_ptr += 32;

  00669	8b 55 fc	 mov	 edx, DWORD PTR _u_ptr$[ebp]
  0066c	81 c2 80 00 00
	00		 add	 edx, 128		; 00000080H
  00672	89 55 fc	 mov	 DWORD PTR _u_ptr$[ebp], edx

; 1066 :             v_ptr += 32;

  00675	8b 45 f8	 mov	 eax, DWORD PTR _v_ptr$[ebp]
  00678	05 80 00 00 00	 add	 eax, 128		; 00000080H
  0067d	89 45 f8	 mov	 DWORD PTR _v_ptr$[ebp], eax

; 1067 :             --count;

  00680	8b 4d e0	 mov	 ecx, DWORD PTR _count$[ebp]
  00683	83 e9 01	 sub	 ecx, 1
  00686	89 4d e0	 mov	 DWORD PTR _count$[ebp], ecx

; 1068 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1069 :             if (sizeof(k) == sizeof(_UINT64_T))

  00689	33 d2		 xor	 edx, edx
  0068b	74 0c		 je	 SHORT $LN4@SubtructOn

; 1070 :                 AddToMULTI64Counter(32);

  0068d	6a 20		 push	 32			; 00000020H
  0068f	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
  00694	83 c4 04	 add	 esp, 4

; 1071 :             else

  00697	eb 0a		 jmp	 SHORT $LN5@SubtructOn
$LN4@SubtructOn:

; 1072 :                 AddToMULTI32Counter(32);

  00699	6a 20		 push	 32			; 00000020H
  0069b	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
  006a0	83 c4 04	 add	 esp, 4
$LN5@SubtructOn:

; 1073 : #endif
; 1074 :         }

  006a3	e9 b9 f9 ff ff	 jmp	 $LN2@SubtructOn
$LN3@SubtructOn:

; 1075 : 
; 1076 :         if (v_count & 0x10)

  006a8	8b 45 f4	 mov	 eax, DWORD PTR _v_count$[ebp]
  006ab	83 e0 10	 and	 eax, 16			; 00000010H
  006ae	0f 84 2a 03 00
	00		 je	 $LN6@SubtructOn

; 1077 :         {
; 1078 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[0], q_, &u_ptr[0]);

  006b4	b9 04 00 00 00	 mov	 ecx, 4
  006b9	6b d1 00	 imul	 edx, ecx, 0
  006bc	03 55 fc	 add	 edx, DWORD PTR _u_ptr$[ebp]
  006bf	52		 push	 edx
  006c0	8b 45 1c	 mov	 eax, DWORD PTR _q_$[ebp]
  006c3	50		 push	 eax
  006c4	b9 04 00 00 00	 mov	 ecx, 4
  006c9	6b d1 00	 imul	 edx, ecx, 0
  006cc	03 55 f8	 add	 edx, DWORD PTR _v_ptr$[ebp]
  006cf	52		 push	 edx
  006d0	8d 45 ec	 lea	 eax, DWORD PTR _k$[ebp]
  006d3	50		 push	 eax
  006d4	0f b6 4d e7	 movzx	 ecx, BYTE PTR _c$[ebp]
  006d8	51		 push	 ecx
  006d9	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  006de	83 c4 14	 add	 esp, 20			; 00000014H
  006e1	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1079 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[1], q_, &u_ptr[1]);

  006e4	ba 04 00 00 00	 mov	 edx, 4
  006e9	c1 e2 00	 shl	 edx, 0
  006ec	03 55 fc	 add	 edx, DWORD PTR _u_ptr$[ebp]
  006ef	52		 push	 edx
  006f0	8b 45 1c	 mov	 eax, DWORD PTR _q_$[ebp]
  006f3	50		 push	 eax
  006f4	b9 04 00 00 00	 mov	 ecx, 4
  006f9	c1 e1 00	 shl	 ecx, 0
  006fc	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  006ff	51		 push	 ecx
  00700	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  00703	52		 push	 edx
  00704	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  00708	50		 push	 eax
  00709	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  0070e	83 c4 14	 add	 esp, 20			; 00000014H
  00711	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1080 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[2], q_, &u_ptr[2]);

  00714	b9 04 00 00 00	 mov	 ecx, 4
  00719	d1 e1		 shl	 ecx, 1
  0071b	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  0071e	51		 push	 ecx
  0071f	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  00722	52		 push	 edx
  00723	b8 04 00 00 00	 mov	 eax, 4
  00728	d1 e0		 shl	 eax, 1
  0072a	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  0072d	50		 push	 eax
  0072e	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  00731	51		 push	 ecx
  00732	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  00736	52		 push	 edx
  00737	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  0073c	83 c4 14	 add	 esp, 20			; 00000014H
  0073f	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1081 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[3], q_, &u_ptr[3]);

  00742	b8 04 00 00 00	 mov	 eax, 4
  00747	6b c8 03	 imul	 ecx, eax, 3
  0074a	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  0074d	51		 push	 ecx
  0074e	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  00751	52		 push	 edx
  00752	b8 04 00 00 00	 mov	 eax, 4
  00757	6b c8 03	 imul	 ecx, eax, 3
  0075a	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  0075d	51		 push	 ecx
  0075e	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  00761	52		 push	 edx
  00762	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  00766	50		 push	 eax
  00767	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  0076c	83 c4 14	 add	 esp, 20			; 00000014H
  0076f	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1082 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[4], q_, &u_ptr[4]);

  00772	b9 04 00 00 00	 mov	 ecx, 4
  00777	c1 e1 02	 shl	 ecx, 2
  0077a	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  0077d	51		 push	 ecx
  0077e	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  00781	52		 push	 edx
  00782	b8 04 00 00 00	 mov	 eax, 4
  00787	c1 e0 02	 shl	 eax, 2
  0078a	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  0078d	50		 push	 eax
  0078e	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  00791	51		 push	 ecx
  00792	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  00796	52		 push	 edx
  00797	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  0079c	83 c4 14	 add	 esp, 20			; 00000014H
  0079f	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1083 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[5], q_, &u_ptr[5]);

  007a2	b8 04 00 00 00	 mov	 eax, 4
  007a7	6b c8 05	 imul	 ecx, eax, 5
  007aa	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  007ad	51		 push	 ecx
  007ae	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  007b1	52		 push	 edx
  007b2	b8 04 00 00 00	 mov	 eax, 4
  007b7	6b c8 05	 imul	 ecx, eax, 5
  007ba	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  007bd	51		 push	 ecx
  007be	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  007c1	52		 push	 edx
  007c2	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  007c6	50		 push	 eax
  007c7	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  007cc	83 c4 14	 add	 esp, 20			; 00000014H
  007cf	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1084 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[6], q_, &u_ptr[6]);

  007d2	b9 04 00 00 00	 mov	 ecx, 4
  007d7	6b d1 06	 imul	 edx, ecx, 6
  007da	03 55 fc	 add	 edx, DWORD PTR _u_ptr$[ebp]
  007dd	52		 push	 edx
  007de	8b 45 1c	 mov	 eax, DWORD PTR _q_$[ebp]
  007e1	50		 push	 eax
  007e2	b9 04 00 00 00	 mov	 ecx, 4
  007e7	6b d1 06	 imul	 edx, ecx, 6
  007ea	03 55 f8	 add	 edx, DWORD PTR _v_ptr$[ebp]
  007ed	52		 push	 edx
  007ee	8d 45 ec	 lea	 eax, DWORD PTR _k$[ebp]
  007f1	50		 push	 eax
  007f2	0f b6 4d e7	 movzx	 ecx, BYTE PTR _c$[ebp]
  007f6	51		 push	 ecx
  007f7	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  007fc	83 c4 14	 add	 esp, 20			; 00000014H
  007ff	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1085 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[7], q_, &u_ptr[7]);

  00802	ba 04 00 00 00	 mov	 edx, 4
  00807	6b c2 07	 imul	 eax, edx, 7
  0080a	03 45 fc	 add	 eax, DWORD PTR _u_ptr$[ebp]
  0080d	50		 push	 eax
  0080e	8b 4d 1c	 mov	 ecx, DWORD PTR _q_$[ebp]
  00811	51		 push	 ecx
  00812	ba 04 00 00 00	 mov	 edx, 4
  00817	6b c2 07	 imul	 eax, edx, 7
  0081a	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  0081d	50		 push	 eax
  0081e	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  00821	51		 push	 ecx
  00822	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  00826	52		 push	 edx
  00827	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  0082c	83 c4 14	 add	 esp, 20			; 00000014H
  0082f	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1086 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[8], q_, &u_ptr[8]);

  00832	b8 04 00 00 00	 mov	 eax, 4
  00837	c1 e0 03	 shl	 eax, 3
  0083a	03 45 fc	 add	 eax, DWORD PTR _u_ptr$[ebp]
  0083d	50		 push	 eax
  0083e	8b 4d 1c	 mov	 ecx, DWORD PTR _q_$[ebp]
  00841	51		 push	 ecx
  00842	ba 04 00 00 00	 mov	 edx, 4
  00847	c1 e2 03	 shl	 edx, 3
  0084a	03 55 f8	 add	 edx, DWORD PTR _v_ptr$[ebp]
  0084d	52		 push	 edx
  0084e	8d 45 ec	 lea	 eax, DWORD PTR _k$[ebp]
  00851	50		 push	 eax
  00852	0f b6 4d e7	 movzx	 ecx, BYTE PTR _c$[ebp]
  00856	51		 push	 ecx
  00857	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  0085c	83 c4 14	 add	 esp, 20			; 00000014H
  0085f	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1087 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[9], q_, &u_ptr[9]);

  00862	ba 04 00 00 00	 mov	 edx, 4
  00867	6b c2 09	 imul	 eax, edx, 9
  0086a	03 45 fc	 add	 eax, DWORD PTR _u_ptr$[ebp]
  0086d	50		 push	 eax
  0086e	8b 4d 1c	 mov	 ecx, DWORD PTR _q_$[ebp]
  00871	51		 push	 ecx
  00872	ba 04 00 00 00	 mov	 edx, 4
  00877	6b c2 09	 imul	 eax, edx, 9
  0087a	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  0087d	50		 push	 eax
  0087e	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  00881	51		 push	 ecx
  00882	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  00886	52		 push	 edx
  00887	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  0088c	83 c4 14	 add	 esp, 20			; 00000014H
  0088f	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1088 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[10], q_, &u_ptr[10]);

  00892	b8 04 00 00 00	 mov	 eax, 4
  00897	6b c8 0a	 imul	 ecx, eax, 10
  0089a	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  0089d	51		 push	 ecx
  0089e	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  008a1	52		 push	 edx
  008a2	b8 04 00 00 00	 mov	 eax, 4
  008a7	6b c8 0a	 imul	 ecx, eax, 10
  008aa	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  008ad	51		 push	 ecx
  008ae	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  008b1	52		 push	 edx
  008b2	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  008b6	50		 push	 eax
  008b7	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  008bc	83 c4 14	 add	 esp, 20			; 00000014H
  008bf	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1089 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[11], q_, &u_ptr[11]);

  008c2	b9 04 00 00 00	 mov	 ecx, 4
  008c7	6b d1 0b	 imul	 edx, ecx, 11
  008ca	03 55 fc	 add	 edx, DWORD PTR _u_ptr$[ebp]
  008cd	52		 push	 edx
  008ce	8b 45 1c	 mov	 eax, DWORD PTR _q_$[ebp]
  008d1	50		 push	 eax
  008d2	b9 04 00 00 00	 mov	 ecx, 4
  008d7	6b d1 0b	 imul	 edx, ecx, 11
  008da	03 55 f8	 add	 edx, DWORD PTR _v_ptr$[ebp]
  008dd	52		 push	 edx
  008de	8d 45 ec	 lea	 eax, DWORD PTR _k$[ebp]
  008e1	50		 push	 eax
  008e2	0f b6 4d e7	 movzx	 ecx, BYTE PTR _c$[ebp]
  008e6	51		 push	 ecx
  008e7	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  008ec	83 c4 14	 add	 esp, 20			; 00000014H
  008ef	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1090 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[12], q_, &u_ptr[12]);

  008f2	ba 04 00 00 00	 mov	 edx, 4
  008f7	6b c2 0c	 imul	 eax, edx, 12
  008fa	03 45 fc	 add	 eax, DWORD PTR _u_ptr$[ebp]
  008fd	50		 push	 eax
  008fe	8b 4d 1c	 mov	 ecx, DWORD PTR _q_$[ebp]
  00901	51		 push	 ecx
  00902	ba 04 00 00 00	 mov	 edx, 4
  00907	6b c2 0c	 imul	 eax, edx, 12
  0090a	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  0090d	50		 push	 eax
  0090e	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  00911	51		 push	 ecx
  00912	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  00916	52		 push	 edx
  00917	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  0091c	83 c4 14	 add	 esp, 20			; 00000014H
  0091f	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1091 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[13], q_, &u_ptr[13]);

  00922	b8 04 00 00 00	 mov	 eax, 4
  00927	6b c8 0d	 imul	 ecx, eax, 13
  0092a	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  0092d	51		 push	 ecx
  0092e	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  00931	52		 push	 edx
  00932	b8 04 00 00 00	 mov	 eax, 4
  00937	6b c8 0d	 imul	 ecx, eax, 13
  0093a	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  0093d	51		 push	 ecx
  0093e	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  00941	52		 push	 edx
  00942	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  00946	50		 push	 eax
  00947	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  0094c	83 c4 14	 add	 esp, 20			; 00000014H
  0094f	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1092 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[14], q_, &u_ptr[14]);

  00952	b9 04 00 00 00	 mov	 ecx, 4
  00957	6b d1 0e	 imul	 edx, ecx, 14
  0095a	03 55 fc	 add	 edx, DWORD PTR _u_ptr$[ebp]
  0095d	52		 push	 edx
  0095e	8b 45 1c	 mov	 eax, DWORD PTR _q_$[ebp]
  00961	50		 push	 eax
  00962	b9 04 00 00 00	 mov	 ecx, 4
  00967	6b d1 0e	 imul	 edx, ecx, 14
  0096a	03 55 f8	 add	 edx, DWORD PTR _v_ptr$[ebp]
  0096d	52		 push	 edx
  0096e	8d 45 ec	 lea	 eax, DWORD PTR _k$[ebp]
  00971	50		 push	 eax
  00972	0f b6 4d e7	 movzx	 ecx, BYTE PTR _c$[ebp]
  00976	51		 push	 ecx
  00977	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  0097c	83 c4 14	 add	 esp, 20			; 00000014H
  0097f	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1093 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[15], q_, &u_ptr[15]);

  00982	ba 04 00 00 00	 mov	 edx, 4
  00987	6b c2 0f	 imul	 eax, edx, 15
  0098a	03 45 fc	 add	 eax, DWORD PTR _u_ptr$[ebp]
  0098d	50		 push	 eax
  0098e	8b 4d 1c	 mov	 ecx, DWORD PTR _q_$[ebp]
  00991	51		 push	 ecx
  00992	ba 04 00 00 00	 mov	 edx, 4
  00997	6b c2 0f	 imul	 eax, edx, 15
  0099a	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  0099d	50		 push	 eax
  0099e	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  009a1	51		 push	 ecx
  009a2	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  009a6	52		 push	 edx
  009a7	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  009ac	83 c4 14	 add	 esp, 20			; 00000014H
  009af	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1094 :             u_ptr += 16;

  009b2	8b 45 fc	 mov	 eax, DWORD PTR _u_ptr$[ebp]
  009b5	83 c0 40	 add	 eax, 64			; 00000040H
  009b8	89 45 fc	 mov	 DWORD PTR _u_ptr$[ebp], eax

; 1095 :             v_ptr += 16;

  009bb	8b 4d f8	 mov	 ecx, DWORD PTR _v_ptr$[ebp]
  009be	83 c1 40	 add	 ecx, 64			; 00000040H
  009c1	89 4d f8	 mov	 DWORD PTR _v_ptr$[ebp], ecx

; 1096 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1097 :             if (sizeof(k) == sizeof(_UINT64_T))

  009c4	33 d2		 xor	 edx, edx
  009c6	74 0c		 je	 SHORT $LN7@SubtructOn

; 1098 :                 AddToMULTI64Counter(16);

  009c8	6a 10		 push	 16			; 00000010H
  009ca	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
  009cf	83 c4 04	 add	 esp, 4

; 1099 :             else

  009d2	eb 0a		 jmp	 SHORT $LN6@SubtructOn
$LN7@SubtructOn:

; 1100 :                 AddToMULTI32Counter(16);

  009d4	6a 10		 push	 16			; 00000010H
  009d6	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
  009db	83 c4 04	 add	 esp, 4
$LN6@SubtructOn:

; 1101 : #endif
; 1102 :         }
; 1103 : 
; 1104 :         if (v_count & 0x8)

  009de	8b 45 f4	 mov	 eax, DWORD PTR _v_count$[ebp]
  009e1	83 e0 08	 and	 eax, 8
  009e4	0f 84 aa 01 00
	00		 je	 $LN9@SubtructOn

; 1105 :         {
; 1106 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[0], q_, &u_ptr[0]);

  009ea	b9 04 00 00 00	 mov	 ecx, 4
  009ef	6b d1 00	 imul	 edx, ecx, 0
  009f2	03 55 fc	 add	 edx, DWORD PTR _u_ptr$[ebp]
  009f5	52		 push	 edx
  009f6	8b 45 1c	 mov	 eax, DWORD PTR _q_$[ebp]
  009f9	50		 push	 eax
  009fa	b9 04 00 00 00	 mov	 ecx, 4
  009ff	6b d1 00	 imul	 edx, ecx, 0
  00a02	03 55 f8	 add	 edx, DWORD PTR _v_ptr$[ebp]
  00a05	52		 push	 edx
  00a06	8d 45 ec	 lea	 eax, DWORD PTR _k$[ebp]
  00a09	50		 push	 eax
  00a0a	0f b6 4d e7	 movzx	 ecx, BYTE PTR _c$[ebp]
  00a0e	51		 push	 ecx
  00a0f	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00a14	83 c4 14	 add	 esp, 20			; 00000014H
  00a17	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1107 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[1], q_, &u_ptr[1]);

  00a1a	ba 04 00 00 00	 mov	 edx, 4
  00a1f	c1 e2 00	 shl	 edx, 0
  00a22	03 55 fc	 add	 edx, DWORD PTR _u_ptr$[ebp]
  00a25	52		 push	 edx
  00a26	8b 45 1c	 mov	 eax, DWORD PTR _q_$[ebp]
  00a29	50		 push	 eax
  00a2a	b9 04 00 00 00	 mov	 ecx, 4
  00a2f	c1 e1 00	 shl	 ecx, 0
  00a32	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  00a35	51		 push	 ecx
  00a36	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  00a39	52		 push	 edx
  00a3a	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  00a3e	50		 push	 eax
  00a3f	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00a44	83 c4 14	 add	 esp, 20			; 00000014H
  00a47	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1108 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[2], q_, &u_ptr[2]);

  00a4a	b9 04 00 00 00	 mov	 ecx, 4
  00a4f	d1 e1		 shl	 ecx, 1
  00a51	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  00a54	51		 push	 ecx
  00a55	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  00a58	52		 push	 edx
  00a59	b8 04 00 00 00	 mov	 eax, 4
  00a5e	d1 e0		 shl	 eax, 1
  00a60	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  00a63	50		 push	 eax
  00a64	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  00a67	51		 push	 ecx
  00a68	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  00a6c	52		 push	 edx
  00a6d	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00a72	83 c4 14	 add	 esp, 20			; 00000014H
  00a75	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1109 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[3], q_, &u_ptr[3]);

  00a78	b8 04 00 00 00	 mov	 eax, 4
  00a7d	6b c8 03	 imul	 ecx, eax, 3
  00a80	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  00a83	51		 push	 ecx
  00a84	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  00a87	52		 push	 edx
  00a88	b8 04 00 00 00	 mov	 eax, 4
  00a8d	6b c8 03	 imul	 ecx, eax, 3
  00a90	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  00a93	51		 push	 ecx
  00a94	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  00a97	52		 push	 edx
  00a98	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  00a9c	50		 push	 eax
  00a9d	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00aa2	83 c4 14	 add	 esp, 20			; 00000014H
  00aa5	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1110 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[4], q_, &u_ptr[4]);

  00aa8	b9 04 00 00 00	 mov	 ecx, 4
  00aad	c1 e1 02	 shl	 ecx, 2
  00ab0	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  00ab3	51		 push	 ecx
  00ab4	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  00ab7	52		 push	 edx
  00ab8	b8 04 00 00 00	 mov	 eax, 4
  00abd	c1 e0 02	 shl	 eax, 2
  00ac0	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  00ac3	50		 push	 eax
  00ac4	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  00ac7	51		 push	 ecx
  00ac8	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  00acc	52		 push	 edx
  00acd	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00ad2	83 c4 14	 add	 esp, 20			; 00000014H
  00ad5	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1111 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[5], q_, &u_ptr[5]);

  00ad8	b8 04 00 00 00	 mov	 eax, 4
  00add	6b c8 05	 imul	 ecx, eax, 5
  00ae0	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  00ae3	51		 push	 ecx
  00ae4	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  00ae7	52		 push	 edx
  00ae8	b8 04 00 00 00	 mov	 eax, 4
  00aed	6b c8 05	 imul	 ecx, eax, 5
  00af0	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  00af3	51		 push	 ecx
  00af4	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  00af7	52		 push	 edx
  00af8	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  00afc	50		 push	 eax
  00afd	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00b02	83 c4 14	 add	 esp, 20			; 00000014H
  00b05	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1112 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[6], q_, &u_ptr[6]);

  00b08	b9 04 00 00 00	 mov	 ecx, 4
  00b0d	6b d1 06	 imul	 edx, ecx, 6
  00b10	03 55 fc	 add	 edx, DWORD PTR _u_ptr$[ebp]
  00b13	52		 push	 edx
  00b14	8b 45 1c	 mov	 eax, DWORD PTR _q_$[ebp]
  00b17	50		 push	 eax
  00b18	b9 04 00 00 00	 mov	 ecx, 4
  00b1d	6b d1 06	 imul	 edx, ecx, 6
  00b20	03 55 f8	 add	 edx, DWORD PTR _v_ptr$[ebp]
  00b23	52		 push	 edx
  00b24	8d 45 ec	 lea	 eax, DWORD PTR _k$[ebp]
  00b27	50		 push	 eax
  00b28	0f b6 4d e7	 movzx	 ecx, BYTE PTR _c$[ebp]
  00b2c	51		 push	 ecx
  00b2d	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00b32	83 c4 14	 add	 esp, 20			; 00000014H
  00b35	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1113 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[7], q_, &u_ptr[7]);

  00b38	ba 04 00 00 00	 mov	 edx, 4
  00b3d	6b c2 07	 imul	 eax, edx, 7
  00b40	03 45 fc	 add	 eax, DWORD PTR _u_ptr$[ebp]
  00b43	50		 push	 eax
  00b44	8b 4d 1c	 mov	 ecx, DWORD PTR _q_$[ebp]
  00b47	51		 push	 ecx
  00b48	ba 04 00 00 00	 mov	 edx, 4
  00b4d	6b c2 07	 imul	 eax, edx, 7
  00b50	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  00b53	50		 push	 eax
  00b54	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  00b57	51		 push	 ecx
  00b58	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  00b5c	52		 push	 edx
  00b5d	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00b62	83 c4 14	 add	 esp, 20			; 00000014H
  00b65	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1114 :             u_ptr += 8;

  00b68	8b 45 fc	 mov	 eax, DWORD PTR _u_ptr$[ebp]
  00b6b	83 c0 20	 add	 eax, 32			; 00000020H
  00b6e	89 45 fc	 mov	 DWORD PTR _u_ptr$[ebp], eax

; 1115 :             v_ptr += 8;

  00b71	8b 4d f8	 mov	 ecx, DWORD PTR _v_ptr$[ebp]
  00b74	83 c1 20	 add	 ecx, 32			; 00000020H
  00b77	89 4d f8	 mov	 DWORD PTR _v_ptr$[ebp], ecx

; 1116 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1117 :             if (sizeof(k) == sizeof(_UINT64_T))

  00b7a	33 d2		 xor	 edx, edx
  00b7c	74 0c		 je	 SHORT $LN10@SubtructOn

; 1118 :                 AddToMULTI64Counter(8);

  00b7e	6a 08		 push	 8
  00b80	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
  00b85	83 c4 04	 add	 esp, 4

; 1119 :             else

  00b88	eb 0a		 jmp	 SHORT $LN9@SubtructOn
$LN10@SubtructOn:

; 1120 :                 AddToMULTI32Counter(8);

  00b8a	6a 08		 push	 8
  00b8c	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
  00b91	83 c4 04	 add	 esp, 4
$LN9@SubtructOn:

; 1121 : #endif
; 1122 :         }
; 1123 : 
; 1124 :         if (v_count & 0x4)

  00b94	8b 45 f4	 mov	 eax, DWORD PTR _v_count$[ebp]
  00b97	83 e0 04	 and	 eax, 4
  00b9a	0f 84 ea 00 00
	00		 je	 $LN12@SubtructOn

; 1125 :         {
; 1126 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[0], q_, &u_ptr[0]);

  00ba0	b9 04 00 00 00	 mov	 ecx, 4
  00ba5	6b d1 00	 imul	 edx, ecx, 0
  00ba8	03 55 fc	 add	 edx, DWORD PTR _u_ptr$[ebp]
  00bab	52		 push	 edx
  00bac	8b 45 1c	 mov	 eax, DWORD PTR _q_$[ebp]
  00baf	50		 push	 eax
  00bb0	b9 04 00 00 00	 mov	 ecx, 4
  00bb5	6b d1 00	 imul	 edx, ecx, 0
  00bb8	03 55 f8	 add	 edx, DWORD PTR _v_ptr$[ebp]
  00bbb	52		 push	 edx
  00bbc	8d 45 ec	 lea	 eax, DWORD PTR _k$[ebp]
  00bbf	50		 push	 eax
  00bc0	0f b6 4d e7	 movzx	 ecx, BYTE PTR _c$[ebp]
  00bc4	51		 push	 ecx
  00bc5	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00bca	83 c4 14	 add	 esp, 20			; 00000014H
  00bcd	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1127 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[1], q_, &u_ptr[1]);

  00bd0	ba 04 00 00 00	 mov	 edx, 4
  00bd5	c1 e2 00	 shl	 edx, 0
  00bd8	03 55 fc	 add	 edx, DWORD PTR _u_ptr$[ebp]
  00bdb	52		 push	 edx
  00bdc	8b 45 1c	 mov	 eax, DWORD PTR _q_$[ebp]
  00bdf	50		 push	 eax
  00be0	b9 04 00 00 00	 mov	 ecx, 4
  00be5	c1 e1 00	 shl	 ecx, 0
  00be8	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  00beb	51		 push	 ecx
  00bec	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  00bef	52		 push	 edx
  00bf0	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  00bf4	50		 push	 eax
  00bf5	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00bfa	83 c4 14	 add	 esp, 20			; 00000014H
  00bfd	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1128 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[2], q_, &u_ptr[2]);

  00c00	b9 04 00 00 00	 mov	 ecx, 4
  00c05	d1 e1		 shl	 ecx, 1
  00c07	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  00c0a	51		 push	 ecx
  00c0b	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  00c0e	52		 push	 edx
  00c0f	b8 04 00 00 00	 mov	 eax, 4
  00c14	d1 e0		 shl	 eax, 1
  00c16	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  00c19	50		 push	 eax
  00c1a	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  00c1d	51		 push	 ecx
  00c1e	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  00c22	52		 push	 edx
  00c23	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00c28	83 c4 14	 add	 esp, 20			; 00000014H
  00c2b	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1129 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[3], q_, &u_ptr[3]);

  00c2e	b8 04 00 00 00	 mov	 eax, 4
  00c33	6b c8 03	 imul	 ecx, eax, 3
  00c36	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  00c39	51		 push	 ecx
  00c3a	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  00c3d	52		 push	 edx
  00c3e	b8 04 00 00 00	 mov	 eax, 4
  00c43	6b c8 03	 imul	 ecx, eax, 3
  00c46	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  00c49	51		 push	 ecx
  00c4a	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  00c4d	52		 push	 edx
  00c4e	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  00c52	50		 push	 eax
  00c53	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00c58	83 c4 14	 add	 esp, 20			; 00000014H
  00c5b	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1130 :             u_ptr += 4;

  00c5e	8b 4d fc	 mov	 ecx, DWORD PTR _u_ptr$[ebp]
  00c61	83 c1 10	 add	 ecx, 16			; 00000010H
  00c64	89 4d fc	 mov	 DWORD PTR _u_ptr$[ebp], ecx

; 1131 :             v_ptr += 4;

  00c67	8b 55 f8	 mov	 edx, DWORD PTR _v_ptr$[ebp]
  00c6a	83 c2 10	 add	 edx, 16			; 00000010H
  00c6d	89 55 f8	 mov	 DWORD PTR _v_ptr$[ebp], edx

; 1132 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1133 :             if (sizeof(k) == sizeof(_UINT64_T))

  00c70	33 c0		 xor	 eax, eax
  00c72	74 0c		 je	 SHORT $LN13@SubtructOn

; 1134 :                 AddToMULTI64Counter(4);

  00c74	6a 04		 push	 4
  00c76	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
  00c7b	83 c4 04	 add	 esp, 4

; 1135 :             else

  00c7e	eb 0a		 jmp	 SHORT $LN12@SubtructOn
$LN13@SubtructOn:

; 1136 :                 AddToMULTI32Counter(4);

  00c80	6a 04		 push	 4
  00c82	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
  00c87	83 c4 04	 add	 esp, 4
$LN12@SubtructOn:

; 1137 : #endif
; 1138 :         }
; 1139 : 
; 1140 :         if (v_count & 0x2)

  00c8a	8b 4d f4	 mov	 ecx, DWORD PTR _v_count$[ebp]
  00c8d	83 e1 02	 and	 ecx, 2
  00c90	0f 84 8c 00 00
	00		 je	 $LN15@SubtructOn

; 1141 :         {
; 1142 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[0], q_, &u_ptr[0]);

  00c96	ba 04 00 00 00	 mov	 edx, 4
  00c9b	6b c2 00	 imul	 eax, edx, 0
  00c9e	03 45 fc	 add	 eax, DWORD PTR _u_ptr$[ebp]
  00ca1	50		 push	 eax
  00ca2	8b 4d 1c	 mov	 ecx, DWORD PTR _q_$[ebp]
  00ca5	51		 push	 ecx
  00ca6	ba 04 00 00 00	 mov	 edx, 4
  00cab	6b c2 00	 imul	 eax, edx, 0
  00cae	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  00cb1	50		 push	 eax
  00cb2	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  00cb5	51		 push	 ecx
  00cb6	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  00cba	52		 push	 edx
  00cbb	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00cc0	83 c4 14	 add	 esp, 20			; 00000014H
  00cc3	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1143 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[1], q_, &u_ptr[1]);

  00cc6	b8 04 00 00 00	 mov	 eax, 4
  00ccb	c1 e0 00	 shl	 eax, 0
  00cce	03 45 fc	 add	 eax, DWORD PTR _u_ptr$[ebp]
  00cd1	50		 push	 eax
  00cd2	8b 4d 1c	 mov	 ecx, DWORD PTR _q_$[ebp]
  00cd5	51		 push	 ecx
  00cd6	ba 04 00 00 00	 mov	 edx, 4
  00cdb	c1 e2 00	 shl	 edx, 0
  00cde	03 55 f8	 add	 edx, DWORD PTR _v_ptr$[ebp]
  00ce1	52		 push	 edx
  00ce2	8d 45 ec	 lea	 eax, DWORD PTR _k$[ebp]
  00ce5	50		 push	 eax
  00ce6	0f b6 4d e7	 movzx	 ecx, BYTE PTR _c$[ebp]
  00cea	51		 push	 ecx
  00ceb	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00cf0	83 c4 14	 add	 esp, 20			; 00000014H
  00cf3	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1144 :             u_ptr += 2;

  00cf6	8b 55 fc	 mov	 edx, DWORD PTR _u_ptr$[ebp]
  00cf9	83 c2 08	 add	 edx, 8
  00cfc	89 55 fc	 mov	 DWORD PTR _u_ptr$[ebp], edx

; 1145 :             v_ptr += 2;

  00cff	8b 45 f8	 mov	 eax, DWORD PTR _v_ptr$[ebp]
  00d02	83 c0 08	 add	 eax, 8
  00d05	89 45 f8	 mov	 DWORD PTR _v_ptr$[ebp], eax

; 1146 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1147 :             if (sizeof(k) == sizeof(_UINT64_T))

  00d08	33 c9		 xor	 ecx, ecx
  00d0a	74 0c		 je	 SHORT $LN16@SubtructOn

; 1148 :                 AddToMULTI64Counter(2);

  00d0c	6a 02		 push	 2
  00d0e	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
  00d13	83 c4 04	 add	 esp, 4

; 1149 :             else

  00d16	eb 0a		 jmp	 SHORT $LN15@SubtructOn
$LN16@SubtructOn:

; 1150 :                 AddToMULTI32Counter(2);

  00d18	6a 02		 push	 2
  00d1a	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
  00d1f	83 c4 04	 add	 esp, 4
$LN15@SubtructOn:

; 1151 : #endif
; 1152 :         }
; 1153 : 
; 1154 :         if (v_count & 0x1)

  00d22	8b 55 f4	 mov	 edx, DWORD PTR _v_count$[ebp]
  00d25	83 e2 01	 and	 edx, 1
  00d28	74 52		 je	 SHORT $LN18@SubtructOn

; 1155 :         {
; 1156 :             c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[0], q_, &u_ptr[0]);

  00d2a	b8 04 00 00 00	 mov	 eax, 4
  00d2f	6b c8 00	 imul	 ecx, eax, 0
  00d32	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  00d35	51		 push	 ecx
  00d36	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  00d39	52		 push	 edx
  00d3a	b8 04 00 00 00	 mov	 eax, 4
  00d3f	6b c8 00	 imul	 ecx, eax, 0
  00d42	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  00d45	51		 push	 ecx
  00d46	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  00d49	52		 push	 edx
  00d4a	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  00d4e	50		 push	 eax
  00d4f	e8 00 00 00 00	 call	 ?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
  00d54	83 c4 14	 add	 esp, 20			; 00000014H
  00d57	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1157 :             u_ptr += 1;

  00d5a	8b 4d fc	 mov	 ecx, DWORD PTR _u_ptr$[ebp]
  00d5d	83 c1 04	 add	 ecx, 4
  00d60	89 4d fc	 mov	 DWORD PTR _u_ptr$[ebp], ecx

; 1158 :             v_ptr += 1;

  00d63	8b 55 f8	 mov	 edx, DWORD PTR _v_ptr$[ebp]
  00d66	83 c2 04	 add	 edx, 4
  00d69	89 55 f8	 mov	 DWORD PTR _v_ptr$[ebp], edx

; 1159 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1160 :             if (sizeof(k) == sizeof(_UINT64_T))

  00d6c	33 c0		 xor	 eax, eax
  00d6e	74 07		 je	 SHORT $LN19@SubtructOn

; 1161 :                 IncrementMULTI64Counter();

  00d70	e8 00 00 00 00	 call	 ?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementMULTI64Counter

; 1162 :             else

  00d75	eb 05		 jmp	 SHORT $LN18@SubtructOn
$LN19@SubtructOn:

; 1163 :                 IncrementMULTI32Counter();

  00d77	e8 00 00 00 00	 call	 ?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementMULTI32Counter
$LN18@SubtructOn:

; 1164 : #endif
; 1165 :         }
; 1166 : 
; 1167 :         c = _SUBTRUCT_UNIT(c, *u_ptr, k, u_ptr);

  00d7c	8b 4d fc	 mov	 ecx, DWORD PTR _u_ptr$[ebp]
  00d7f	51		 push	 ecx
  00d80	8b 55 ec	 mov	 edx, DWORD PTR _k$[ebp]
  00d83	52		 push	 edx
  00d84	8b 45 fc	 mov	 eax, DWORD PTR _u_ptr$[ebp]
  00d87	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d89	51		 push	 ecx
  00d8a	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  00d8e	52		 push	 edx
  00d8f	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  00d94	83 c4 10	 add	 esp, 16			; 00000010H
  00d97	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1168 :         u_ptr += 1;

  00d9a	8b 45 fc	 mov	 eax, DWORD PTR _u_ptr$[ebp]
  00d9d	83 c0 04	 add	 eax, 4
  00da0	89 45 fc	 mov	 DWORD PTR _u_ptr$[ebp], eax

; 1169 : 
; 1170 :         return (DoBorrow(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr));

  00da3	8b 4d 0c	 mov	 ecx, DWORD PTR _u_buf_len$[ebp]
  00da6	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  00da9	8d 44 8a 04	 lea	 eax, DWORD PTR [edx+ecx*4+4]
  00dad	2b 45 fc	 sub	 eax, DWORD PTR _u_ptr$[ebp]
  00db0	c1 f8 02	 sar	 eax, 2
  00db3	50		 push	 eax
  00db4	8b 4d fc	 mov	 ecx, DWORD PTR _u_ptr$[ebp]
  00db7	51		 push	 ecx
  00db8	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  00dbc	52		 push	 edx
  00dbd	e8 00 00 00 00	 call	 ?DoBorrow@Internal@Core@Math@Palmtree@@YAHDPAII@Z ; Palmtree::Math::Core::Internal::DoBorrow
  00dc2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1171 :     }

  00dc5	52		 push	 edx
  00dc6	8b cd		 mov	 ecx, ebp
  00dc8	50		 push	 eax
  00dc9	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN24@SubtructOn
  00dcf	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00dd4	58		 pop	 eax
  00dd5	5a		 pop	 edx
  00dd6	83 c4 20	 add	 esp, 32			; 00000020H
  00dd9	3b ec		 cmp	 ebp, esp
  00ddb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00de0	8b e5		 mov	 esp, ebp
  00de2	5d		 pop	 ebp
  00de3	c3		 ret	 0
$LN24@SubtructOn:
  00de4	01 00 00 00	 DD	 1
  00de8	00 00 00 00	 DD	 $LN23@SubtructOn
$LN23@SubtructOn:
  00dec	ec ff ff ff	 DD	 -20			; ffffffecH
  00df0	04 00 00 00	 DD	 4
  00df4	00 00 00 00	 DD	 $LN22@SubtructOn
$LN22@SubtructOn:
  00df8	6b		 DB	 107			; 0000006bH
  00df9	00		 DB	 0
?SubtructOneLineX@Internal@Core@Math@Palmtree@@YAHPAII0III@Z ENDP ; Palmtree::Math::Core::Internal::SubtructOneLineX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
_TEXT	SEGMENT
_count$ = -32						; size = 4
_c$ = -25						; size = 1
_k$ = -20						; size = 4
_v_count$ = -12						; size = 4
_v_ptr$ = -8						; size = 4
_u_ptr$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_v_buf$ = 16						; size = 4
_v_buf_len$ = 20					; size = 4
_q_index$ = 24						; size = 4
_q_$ = 28						; size = 4
?SubtructOneLine@Internal@Core@Math@Palmtree@@YAHPAII0III@Z PROC ; Palmtree::Math::Core::Internal::SubtructOneLine

; 872  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0000e	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00011	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00014	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00017	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001a	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001d	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00020	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __E17217E9_pmc_divrem@cpp
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 873  :         __UNIT_TYPE* u_ptr = &u_buf[q_index];

  0002d	8b 45 18	 mov	 eax, DWORD PTR _q_index$[ebp]
  00030	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  00033	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  00036	89 55 fc	 mov	 DWORD PTR _u_ptr$[ebp], edx

; 874  :         __UNIT_TYPE* v_ptr = &v_buf[0];

  00039	b8 04 00 00 00	 mov	 eax, 4
  0003e	6b c8 00	 imul	 ecx, eax, 0
  00041	03 4d 10	 add	 ecx, DWORD PTR _v_buf$[ebp]
  00044	89 4d f8	 mov	 DWORD PTR _v_ptr$[ebp], ecx

; 875  :         __UNIT_TYPE v_count = v_buf_len;

  00047	8b 55 14	 mov	 edx, DWORD PTR _v_buf_len$[ebp]
  0004a	89 55 f4	 mov	 DWORD PTR _v_count$[ebp], edx

; 876  :         __UNIT_TYPE k = 0;

  0004d	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _k$[ebp], 0

; 877  :         char c = 0;

  00054	c6 45 e7 00	 mov	 BYTE PTR _c$[ebp], 0

; 878  : 
; 879  :         __UNIT_TYPE count = v_count >> 5;

  00058	8b 45 f4	 mov	 eax, DWORD PTR _v_count$[ebp]
  0005b	c1 e8 05	 shr	 eax, 5
  0005e	89 45 e0	 mov	 DWORD PTR _count$[ebp], eax
$LN2@SubtructOn:

; 880  :         while (count != 0)

  00061	83 7d e0 00	 cmp	 DWORD PTR _count$[ebp], 0
  00065	0f 84 3d 06 00
	00		 je	 $LN3@SubtructOn

; 881  :         {
; 882  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[0], q_, &u_ptr[0]);

  0006b	b9 04 00 00 00	 mov	 ecx, 4
  00070	6b d1 00	 imul	 edx, ecx, 0
  00073	03 55 fc	 add	 edx, DWORD PTR _u_ptr$[ebp]
  00076	52		 push	 edx
  00077	8b 45 1c	 mov	 eax, DWORD PTR _q_$[ebp]
  0007a	50		 push	 eax
  0007b	b9 04 00 00 00	 mov	 ecx, 4
  00080	6b d1 00	 imul	 edx, ecx, 0
  00083	03 55 f8	 add	 edx, DWORD PTR _v_ptr$[ebp]
  00086	52		 push	 edx
  00087	8d 45 ec	 lea	 eax, DWORD PTR _k$[ebp]
  0008a	50		 push	 eax
  0008b	0f b6 4d e7	 movzx	 ecx, BYTE PTR _c$[ebp]
  0008f	51		 push	 ecx
  00090	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00095	83 c4 14	 add	 esp, 20			; 00000014H
  00098	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 883  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[1], q_, &u_ptr[1]);

  0009b	ba 04 00 00 00	 mov	 edx, 4
  000a0	c1 e2 00	 shl	 edx, 0
  000a3	03 55 fc	 add	 edx, DWORD PTR _u_ptr$[ebp]
  000a6	52		 push	 edx
  000a7	8b 45 1c	 mov	 eax, DWORD PTR _q_$[ebp]
  000aa	50		 push	 eax
  000ab	b9 04 00 00 00	 mov	 ecx, 4
  000b0	c1 e1 00	 shl	 ecx, 0
  000b3	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  000b6	51		 push	 ecx
  000b7	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  000ba	52		 push	 edx
  000bb	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  000bf	50		 push	 eax
  000c0	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  000c5	83 c4 14	 add	 esp, 20			; 00000014H
  000c8	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 884  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[2], q_, &u_ptr[2]);

  000cb	b9 04 00 00 00	 mov	 ecx, 4
  000d0	d1 e1		 shl	 ecx, 1
  000d2	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  000d5	51		 push	 ecx
  000d6	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  000d9	52		 push	 edx
  000da	b8 04 00 00 00	 mov	 eax, 4
  000df	d1 e0		 shl	 eax, 1
  000e1	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  000e4	50		 push	 eax
  000e5	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  000e8	51		 push	 ecx
  000e9	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  000ed	52		 push	 edx
  000ee	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  000f3	83 c4 14	 add	 esp, 20			; 00000014H
  000f6	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 885  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[3], q_, &u_ptr[3]);

  000f9	b8 04 00 00 00	 mov	 eax, 4
  000fe	6b c8 03	 imul	 ecx, eax, 3
  00101	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  00104	51		 push	 ecx
  00105	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  00108	52		 push	 edx
  00109	b8 04 00 00 00	 mov	 eax, 4
  0010e	6b c8 03	 imul	 ecx, eax, 3
  00111	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  00114	51		 push	 ecx
  00115	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  00118	52		 push	 edx
  00119	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  0011d	50		 push	 eax
  0011e	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00123	83 c4 14	 add	 esp, 20			; 00000014H
  00126	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 886  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[4], q_, &u_ptr[4]);

  00129	b9 04 00 00 00	 mov	 ecx, 4
  0012e	c1 e1 02	 shl	 ecx, 2
  00131	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  00134	51		 push	 ecx
  00135	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  00138	52		 push	 edx
  00139	b8 04 00 00 00	 mov	 eax, 4
  0013e	c1 e0 02	 shl	 eax, 2
  00141	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  00144	50		 push	 eax
  00145	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  00148	51		 push	 ecx
  00149	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  0014d	52		 push	 edx
  0014e	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00153	83 c4 14	 add	 esp, 20			; 00000014H
  00156	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 887  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[5], q_, &u_ptr[5]);

  00159	b8 04 00 00 00	 mov	 eax, 4
  0015e	6b c8 05	 imul	 ecx, eax, 5
  00161	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  00164	51		 push	 ecx
  00165	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  00168	52		 push	 edx
  00169	b8 04 00 00 00	 mov	 eax, 4
  0016e	6b c8 05	 imul	 ecx, eax, 5
  00171	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  00174	51		 push	 ecx
  00175	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  00178	52		 push	 edx
  00179	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  0017d	50		 push	 eax
  0017e	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00183	83 c4 14	 add	 esp, 20			; 00000014H
  00186	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 888  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[6], q_, &u_ptr[6]);

  00189	b9 04 00 00 00	 mov	 ecx, 4
  0018e	6b d1 06	 imul	 edx, ecx, 6
  00191	03 55 fc	 add	 edx, DWORD PTR _u_ptr$[ebp]
  00194	52		 push	 edx
  00195	8b 45 1c	 mov	 eax, DWORD PTR _q_$[ebp]
  00198	50		 push	 eax
  00199	b9 04 00 00 00	 mov	 ecx, 4
  0019e	6b d1 06	 imul	 edx, ecx, 6
  001a1	03 55 f8	 add	 edx, DWORD PTR _v_ptr$[ebp]
  001a4	52		 push	 edx
  001a5	8d 45 ec	 lea	 eax, DWORD PTR _k$[ebp]
  001a8	50		 push	 eax
  001a9	0f b6 4d e7	 movzx	 ecx, BYTE PTR _c$[ebp]
  001ad	51		 push	 ecx
  001ae	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  001b3	83 c4 14	 add	 esp, 20			; 00000014H
  001b6	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 889  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[7], q_, &u_ptr[7]);

  001b9	ba 04 00 00 00	 mov	 edx, 4
  001be	6b c2 07	 imul	 eax, edx, 7
  001c1	03 45 fc	 add	 eax, DWORD PTR _u_ptr$[ebp]
  001c4	50		 push	 eax
  001c5	8b 4d 1c	 mov	 ecx, DWORD PTR _q_$[ebp]
  001c8	51		 push	 ecx
  001c9	ba 04 00 00 00	 mov	 edx, 4
  001ce	6b c2 07	 imul	 eax, edx, 7
  001d1	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  001d4	50		 push	 eax
  001d5	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  001d8	51		 push	 ecx
  001d9	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  001dd	52		 push	 edx
  001de	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  001e3	83 c4 14	 add	 esp, 20			; 00000014H
  001e6	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 890  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[8], q_, &u_ptr[8]);

  001e9	b8 04 00 00 00	 mov	 eax, 4
  001ee	c1 e0 03	 shl	 eax, 3
  001f1	03 45 fc	 add	 eax, DWORD PTR _u_ptr$[ebp]
  001f4	50		 push	 eax
  001f5	8b 4d 1c	 mov	 ecx, DWORD PTR _q_$[ebp]
  001f8	51		 push	 ecx
  001f9	ba 04 00 00 00	 mov	 edx, 4
  001fe	c1 e2 03	 shl	 edx, 3
  00201	03 55 f8	 add	 edx, DWORD PTR _v_ptr$[ebp]
  00204	52		 push	 edx
  00205	8d 45 ec	 lea	 eax, DWORD PTR _k$[ebp]
  00208	50		 push	 eax
  00209	0f b6 4d e7	 movzx	 ecx, BYTE PTR _c$[ebp]
  0020d	51		 push	 ecx
  0020e	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00213	83 c4 14	 add	 esp, 20			; 00000014H
  00216	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 891  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[9], q_, &u_ptr[9]);

  00219	ba 04 00 00 00	 mov	 edx, 4
  0021e	6b c2 09	 imul	 eax, edx, 9
  00221	03 45 fc	 add	 eax, DWORD PTR _u_ptr$[ebp]
  00224	50		 push	 eax
  00225	8b 4d 1c	 mov	 ecx, DWORD PTR _q_$[ebp]
  00228	51		 push	 ecx
  00229	ba 04 00 00 00	 mov	 edx, 4
  0022e	6b c2 09	 imul	 eax, edx, 9
  00231	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  00234	50		 push	 eax
  00235	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  00238	51		 push	 ecx
  00239	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  0023d	52		 push	 edx
  0023e	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00243	83 c4 14	 add	 esp, 20			; 00000014H
  00246	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 892  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[10], q_, &u_ptr[10]);

  00249	b8 04 00 00 00	 mov	 eax, 4
  0024e	6b c8 0a	 imul	 ecx, eax, 10
  00251	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  00254	51		 push	 ecx
  00255	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  00258	52		 push	 edx
  00259	b8 04 00 00 00	 mov	 eax, 4
  0025e	6b c8 0a	 imul	 ecx, eax, 10
  00261	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  00264	51		 push	 ecx
  00265	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  00268	52		 push	 edx
  00269	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  0026d	50		 push	 eax
  0026e	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00273	83 c4 14	 add	 esp, 20			; 00000014H
  00276	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 893  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[11], q_, &u_ptr[11]);

  00279	b9 04 00 00 00	 mov	 ecx, 4
  0027e	6b d1 0b	 imul	 edx, ecx, 11
  00281	03 55 fc	 add	 edx, DWORD PTR _u_ptr$[ebp]
  00284	52		 push	 edx
  00285	8b 45 1c	 mov	 eax, DWORD PTR _q_$[ebp]
  00288	50		 push	 eax
  00289	b9 04 00 00 00	 mov	 ecx, 4
  0028e	6b d1 0b	 imul	 edx, ecx, 11
  00291	03 55 f8	 add	 edx, DWORD PTR _v_ptr$[ebp]
  00294	52		 push	 edx
  00295	8d 45 ec	 lea	 eax, DWORD PTR _k$[ebp]
  00298	50		 push	 eax
  00299	0f b6 4d e7	 movzx	 ecx, BYTE PTR _c$[ebp]
  0029d	51		 push	 ecx
  0029e	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  002a3	83 c4 14	 add	 esp, 20			; 00000014H
  002a6	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 894  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[12], q_, &u_ptr[12]);

  002a9	ba 04 00 00 00	 mov	 edx, 4
  002ae	6b c2 0c	 imul	 eax, edx, 12
  002b1	03 45 fc	 add	 eax, DWORD PTR _u_ptr$[ebp]
  002b4	50		 push	 eax
  002b5	8b 4d 1c	 mov	 ecx, DWORD PTR _q_$[ebp]
  002b8	51		 push	 ecx
  002b9	ba 04 00 00 00	 mov	 edx, 4
  002be	6b c2 0c	 imul	 eax, edx, 12
  002c1	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  002c4	50		 push	 eax
  002c5	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  002c8	51		 push	 ecx
  002c9	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  002cd	52		 push	 edx
  002ce	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  002d3	83 c4 14	 add	 esp, 20			; 00000014H
  002d6	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 895  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[13], q_, &u_ptr[13]);

  002d9	b8 04 00 00 00	 mov	 eax, 4
  002de	6b c8 0d	 imul	 ecx, eax, 13
  002e1	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  002e4	51		 push	 ecx
  002e5	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  002e8	52		 push	 edx
  002e9	b8 04 00 00 00	 mov	 eax, 4
  002ee	6b c8 0d	 imul	 ecx, eax, 13
  002f1	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  002f4	51		 push	 ecx
  002f5	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  002f8	52		 push	 edx
  002f9	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  002fd	50		 push	 eax
  002fe	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00303	83 c4 14	 add	 esp, 20			; 00000014H
  00306	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 896  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[14], q_, &u_ptr[14]);

  00309	b9 04 00 00 00	 mov	 ecx, 4
  0030e	6b d1 0e	 imul	 edx, ecx, 14
  00311	03 55 fc	 add	 edx, DWORD PTR _u_ptr$[ebp]
  00314	52		 push	 edx
  00315	8b 45 1c	 mov	 eax, DWORD PTR _q_$[ebp]
  00318	50		 push	 eax
  00319	b9 04 00 00 00	 mov	 ecx, 4
  0031e	6b d1 0e	 imul	 edx, ecx, 14
  00321	03 55 f8	 add	 edx, DWORD PTR _v_ptr$[ebp]
  00324	52		 push	 edx
  00325	8d 45 ec	 lea	 eax, DWORD PTR _k$[ebp]
  00328	50		 push	 eax
  00329	0f b6 4d e7	 movzx	 ecx, BYTE PTR _c$[ebp]
  0032d	51		 push	 ecx
  0032e	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00333	83 c4 14	 add	 esp, 20			; 00000014H
  00336	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 897  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[15], q_, &u_ptr[15]);

  00339	ba 04 00 00 00	 mov	 edx, 4
  0033e	6b c2 0f	 imul	 eax, edx, 15
  00341	03 45 fc	 add	 eax, DWORD PTR _u_ptr$[ebp]
  00344	50		 push	 eax
  00345	8b 4d 1c	 mov	 ecx, DWORD PTR _q_$[ebp]
  00348	51		 push	 ecx
  00349	ba 04 00 00 00	 mov	 edx, 4
  0034e	6b c2 0f	 imul	 eax, edx, 15
  00351	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  00354	50		 push	 eax
  00355	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  00358	51		 push	 ecx
  00359	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  0035d	52		 push	 edx
  0035e	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00363	83 c4 14	 add	 esp, 20			; 00000014H
  00366	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 898  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[16], q_, &u_ptr[16]);

  00369	b8 04 00 00 00	 mov	 eax, 4
  0036e	c1 e0 04	 shl	 eax, 4
  00371	03 45 fc	 add	 eax, DWORD PTR _u_ptr$[ebp]
  00374	50		 push	 eax
  00375	8b 4d 1c	 mov	 ecx, DWORD PTR _q_$[ebp]
  00378	51		 push	 ecx
  00379	ba 04 00 00 00	 mov	 edx, 4
  0037e	c1 e2 04	 shl	 edx, 4
  00381	03 55 f8	 add	 edx, DWORD PTR _v_ptr$[ebp]
  00384	52		 push	 edx
  00385	8d 45 ec	 lea	 eax, DWORD PTR _k$[ebp]
  00388	50		 push	 eax
  00389	0f b6 4d e7	 movzx	 ecx, BYTE PTR _c$[ebp]
  0038d	51		 push	 ecx
  0038e	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00393	83 c4 14	 add	 esp, 20			; 00000014H
  00396	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 899  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[17], q_, &u_ptr[17]);

  00399	ba 04 00 00 00	 mov	 edx, 4
  0039e	6b c2 11	 imul	 eax, edx, 17
  003a1	03 45 fc	 add	 eax, DWORD PTR _u_ptr$[ebp]
  003a4	50		 push	 eax
  003a5	8b 4d 1c	 mov	 ecx, DWORD PTR _q_$[ebp]
  003a8	51		 push	 ecx
  003a9	ba 04 00 00 00	 mov	 edx, 4
  003ae	6b c2 11	 imul	 eax, edx, 17
  003b1	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  003b4	50		 push	 eax
  003b5	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  003b8	51		 push	 ecx
  003b9	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  003bd	52		 push	 edx
  003be	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  003c3	83 c4 14	 add	 esp, 20			; 00000014H
  003c6	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 900  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[18], q_, &u_ptr[18]);

  003c9	b8 04 00 00 00	 mov	 eax, 4
  003ce	6b c8 12	 imul	 ecx, eax, 18
  003d1	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  003d4	51		 push	 ecx
  003d5	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  003d8	52		 push	 edx
  003d9	b8 04 00 00 00	 mov	 eax, 4
  003de	6b c8 12	 imul	 ecx, eax, 18
  003e1	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  003e4	51		 push	 ecx
  003e5	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  003e8	52		 push	 edx
  003e9	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  003ed	50		 push	 eax
  003ee	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  003f3	83 c4 14	 add	 esp, 20			; 00000014H
  003f6	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 901  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[19], q_, &u_ptr[19]);

  003f9	b9 04 00 00 00	 mov	 ecx, 4
  003fe	6b d1 13	 imul	 edx, ecx, 19
  00401	03 55 fc	 add	 edx, DWORD PTR _u_ptr$[ebp]
  00404	52		 push	 edx
  00405	8b 45 1c	 mov	 eax, DWORD PTR _q_$[ebp]
  00408	50		 push	 eax
  00409	b9 04 00 00 00	 mov	 ecx, 4
  0040e	6b d1 13	 imul	 edx, ecx, 19
  00411	03 55 f8	 add	 edx, DWORD PTR _v_ptr$[ebp]
  00414	52		 push	 edx
  00415	8d 45 ec	 lea	 eax, DWORD PTR _k$[ebp]
  00418	50		 push	 eax
  00419	0f b6 4d e7	 movzx	 ecx, BYTE PTR _c$[ebp]
  0041d	51		 push	 ecx
  0041e	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00423	83 c4 14	 add	 esp, 20			; 00000014H
  00426	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 902  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[20], q_, &u_ptr[20]);

  00429	ba 04 00 00 00	 mov	 edx, 4
  0042e	6b c2 14	 imul	 eax, edx, 20
  00431	03 45 fc	 add	 eax, DWORD PTR _u_ptr$[ebp]
  00434	50		 push	 eax
  00435	8b 4d 1c	 mov	 ecx, DWORD PTR _q_$[ebp]
  00438	51		 push	 ecx
  00439	ba 04 00 00 00	 mov	 edx, 4
  0043e	6b c2 14	 imul	 eax, edx, 20
  00441	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  00444	50		 push	 eax
  00445	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  00448	51		 push	 ecx
  00449	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  0044d	52		 push	 edx
  0044e	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00453	83 c4 14	 add	 esp, 20			; 00000014H
  00456	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 903  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[21], q_, &u_ptr[21]);

  00459	b8 04 00 00 00	 mov	 eax, 4
  0045e	6b c8 15	 imul	 ecx, eax, 21
  00461	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  00464	51		 push	 ecx
  00465	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  00468	52		 push	 edx
  00469	b8 04 00 00 00	 mov	 eax, 4
  0046e	6b c8 15	 imul	 ecx, eax, 21
  00471	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  00474	51		 push	 ecx
  00475	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  00478	52		 push	 edx
  00479	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  0047d	50		 push	 eax
  0047e	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00483	83 c4 14	 add	 esp, 20			; 00000014H
  00486	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 904  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[22], q_, &u_ptr[22]);

  00489	b9 04 00 00 00	 mov	 ecx, 4
  0048e	6b d1 16	 imul	 edx, ecx, 22
  00491	03 55 fc	 add	 edx, DWORD PTR _u_ptr$[ebp]
  00494	52		 push	 edx
  00495	8b 45 1c	 mov	 eax, DWORD PTR _q_$[ebp]
  00498	50		 push	 eax
  00499	b9 04 00 00 00	 mov	 ecx, 4
  0049e	6b d1 16	 imul	 edx, ecx, 22
  004a1	03 55 f8	 add	 edx, DWORD PTR _v_ptr$[ebp]
  004a4	52		 push	 edx
  004a5	8d 45 ec	 lea	 eax, DWORD PTR _k$[ebp]
  004a8	50		 push	 eax
  004a9	0f b6 4d e7	 movzx	 ecx, BYTE PTR _c$[ebp]
  004ad	51		 push	 ecx
  004ae	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  004b3	83 c4 14	 add	 esp, 20			; 00000014H
  004b6	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 905  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[23], q_, &u_ptr[23]);

  004b9	ba 04 00 00 00	 mov	 edx, 4
  004be	6b c2 17	 imul	 eax, edx, 23
  004c1	03 45 fc	 add	 eax, DWORD PTR _u_ptr$[ebp]
  004c4	50		 push	 eax
  004c5	8b 4d 1c	 mov	 ecx, DWORD PTR _q_$[ebp]
  004c8	51		 push	 ecx
  004c9	ba 04 00 00 00	 mov	 edx, 4
  004ce	6b c2 17	 imul	 eax, edx, 23
  004d1	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  004d4	50		 push	 eax
  004d5	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  004d8	51		 push	 ecx
  004d9	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  004dd	52		 push	 edx
  004de	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  004e3	83 c4 14	 add	 esp, 20			; 00000014H
  004e6	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 906  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[24], q_, &u_ptr[24]);

  004e9	b8 04 00 00 00	 mov	 eax, 4
  004ee	6b c8 18	 imul	 ecx, eax, 24
  004f1	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  004f4	51		 push	 ecx
  004f5	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  004f8	52		 push	 edx
  004f9	b8 04 00 00 00	 mov	 eax, 4
  004fe	6b c8 18	 imul	 ecx, eax, 24
  00501	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  00504	51		 push	 ecx
  00505	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  00508	52		 push	 edx
  00509	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  0050d	50		 push	 eax
  0050e	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00513	83 c4 14	 add	 esp, 20			; 00000014H
  00516	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 907  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[25], q_, &u_ptr[25]);

  00519	b9 04 00 00 00	 mov	 ecx, 4
  0051e	6b d1 19	 imul	 edx, ecx, 25
  00521	03 55 fc	 add	 edx, DWORD PTR _u_ptr$[ebp]
  00524	52		 push	 edx
  00525	8b 45 1c	 mov	 eax, DWORD PTR _q_$[ebp]
  00528	50		 push	 eax
  00529	b9 04 00 00 00	 mov	 ecx, 4
  0052e	6b d1 19	 imul	 edx, ecx, 25
  00531	03 55 f8	 add	 edx, DWORD PTR _v_ptr$[ebp]
  00534	52		 push	 edx
  00535	8d 45 ec	 lea	 eax, DWORD PTR _k$[ebp]
  00538	50		 push	 eax
  00539	0f b6 4d e7	 movzx	 ecx, BYTE PTR _c$[ebp]
  0053d	51		 push	 ecx
  0053e	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00543	83 c4 14	 add	 esp, 20			; 00000014H
  00546	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 908  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[26], q_, &u_ptr[26]);

  00549	ba 04 00 00 00	 mov	 edx, 4
  0054e	6b c2 1a	 imul	 eax, edx, 26
  00551	03 45 fc	 add	 eax, DWORD PTR _u_ptr$[ebp]
  00554	50		 push	 eax
  00555	8b 4d 1c	 mov	 ecx, DWORD PTR _q_$[ebp]
  00558	51		 push	 ecx
  00559	ba 04 00 00 00	 mov	 edx, 4
  0055e	6b c2 1a	 imul	 eax, edx, 26
  00561	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  00564	50		 push	 eax
  00565	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  00568	51		 push	 ecx
  00569	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  0056d	52		 push	 edx
  0056e	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00573	83 c4 14	 add	 esp, 20			; 00000014H
  00576	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 909  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[27], q_, &u_ptr[27]);

  00579	b8 04 00 00 00	 mov	 eax, 4
  0057e	6b c8 1b	 imul	 ecx, eax, 27
  00581	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  00584	51		 push	 ecx
  00585	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  00588	52		 push	 edx
  00589	b8 04 00 00 00	 mov	 eax, 4
  0058e	6b c8 1b	 imul	 ecx, eax, 27
  00591	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  00594	51		 push	 ecx
  00595	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  00598	52		 push	 edx
  00599	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  0059d	50		 push	 eax
  0059e	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  005a3	83 c4 14	 add	 esp, 20			; 00000014H
  005a6	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 910  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[28], q_, &u_ptr[28]);

  005a9	b9 04 00 00 00	 mov	 ecx, 4
  005ae	6b d1 1c	 imul	 edx, ecx, 28
  005b1	03 55 fc	 add	 edx, DWORD PTR _u_ptr$[ebp]
  005b4	52		 push	 edx
  005b5	8b 45 1c	 mov	 eax, DWORD PTR _q_$[ebp]
  005b8	50		 push	 eax
  005b9	b9 04 00 00 00	 mov	 ecx, 4
  005be	6b d1 1c	 imul	 edx, ecx, 28
  005c1	03 55 f8	 add	 edx, DWORD PTR _v_ptr$[ebp]
  005c4	52		 push	 edx
  005c5	8d 45 ec	 lea	 eax, DWORD PTR _k$[ebp]
  005c8	50		 push	 eax
  005c9	0f b6 4d e7	 movzx	 ecx, BYTE PTR _c$[ebp]
  005cd	51		 push	 ecx
  005ce	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  005d3	83 c4 14	 add	 esp, 20			; 00000014H
  005d6	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 911  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[29], q_, &u_ptr[29]);

  005d9	ba 04 00 00 00	 mov	 edx, 4
  005de	6b c2 1d	 imul	 eax, edx, 29
  005e1	03 45 fc	 add	 eax, DWORD PTR _u_ptr$[ebp]
  005e4	50		 push	 eax
  005e5	8b 4d 1c	 mov	 ecx, DWORD PTR _q_$[ebp]
  005e8	51		 push	 ecx
  005e9	ba 04 00 00 00	 mov	 edx, 4
  005ee	6b c2 1d	 imul	 eax, edx, 29
  005f1	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  005f4	50		 push	 eax
  005f5	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  005f8	51		 push	 ecx
  005f9	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  005fd	52		 push	 edx
  005fe	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00603	83 c4 14	 add	 esp, 20			; 00000014H
  00606	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 912  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[30], q_, &u_ptr[30]);

  00609	b8 04 00 00 00	 mov	 eax, 4
  0060e	6b c8 1e	 imul	 ecx, eax, 30
  00611	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  00614	51		 push	 ecx
  00615	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  00618	52		 push	 edx
  00619	b8 04 00 00 00	 mov	 eax, 4
  0061e	6b c8 1e	 imul	 ecx, eax, 30
  00621	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  00624	51		 push	 ecx
  00625	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  00628	52		 push	 edx
  00629	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  0062d	50		 push	 eax
  0062e	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00633	83 c4 14	 add	 esp, 20			; 00000014H
  00636	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 913  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[31], q_, &u_ptr[31]);

  00639	b9 04 00 00 00	 mov	 ecx, 4
  0063e	6b d1 1f	 imul	 edx, ecx, 31
  00641	03 55 fc	 add	 edx, DWORD PTR _u_ptr$[ebp]
  00644	52		 push	 edx
  00645	8b 45 1c	 mov	 eax, DWORD PTR _q_$[ebp]
  00648	50		 push	 eax
  00649	b9 04 00 00 00	 mov	 ecx, 4
  0064e	6b d1 1f	 imul	 edx, ecx, 31
  00651	03 55 f8	 add	 edx, DWORD PTR _v_ptr$[ebp]
  00654	52		 push	 edx
  00655	8d 45 ec	 lea	 eax, DWORD PTR _k$[ebp]
  00658	50		 push	 eax
  00659	0f b6 4d e7	 movzx	 ecx, BYTE PTR _c$[ebp]
  0065d	51		 push	 ecx
  0065e	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00663	83 c4 14	 add	 esp, 20			; 00000014H
  00666	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 914  :             u_ptr += 32;

  00669	8b 55 fc	 mov	 edx, DWORD PTR _u_ptr$[ebp]
  0066c	81 c2 80 00 00
	00		 add	 edx, 128		; 00000080H
  00672	89 55 fc	 mov	 DWORD PTR _u_ptr$[ebp], edx

; 915  :             v_ptr += 32;

  00675	8b 45 f8	 mov	 eax, DWORD PTR _v_ptr$[ebp]
  00678	05 80 00 00 00	 add	 eax, 128		; 00000080H
  0067d	89 45 f8	 mov	 DWORD PTR _v_ptr$[ebp], eax

; 916  :             --count;

  00680	8b 4d e0	 mov	 ecx, DWORD PTR _count$[ebp]
  00683	83 e9 01	 sub	 ecx, 1
  00686	89 4d e0	 mov	 DWORD PTR _count$[ebp], ecx

; 917  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 918  :             if (sizeof(k) == sizeof(_UINT64_T))

  00689	33 d2		 xor	 edx, edx
  0068b	74 0c		 je	 SHORT $LN4@SubtructOn

; 919  :                 AddToMULTI64Counter(32);

  0068d	6a 20		 push	 32			; 00000020H
  0068f	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
  00694	83 c4 04	 add	 esp, 4

; 920  :             else

  00697	eb 0a		 jmp	 SHORT $LN5@SubtructOn
$LN4@SubtructOn:

; 921  :                 AddToMULTI32Counter(32);

  00699	6a 20		 push	 32			; 00000020H
  0069b	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
  006a0	83 c4 04	 add	 esp, 4
$LN5@SubtructOn:

; 922  : #endif
; 923  :         }

  006a3	e9 b9 f9 ff ff	 jmp	 $LN2@SubtructOn
$LN3@SubtructOn:

; 924  : 
; 925  :         if (v_count & 0x10)

  006a8	8b 45 f4	 mov	 eax, DWORD PTR _v_count$[ebp]
  006ab	83 e0 10	 and	 eax, 16			; 00000010H
  006ae	0f 84 2a 03 00
	00		 je	 $LN6@SubtructOn

; 926  :         {
; 927  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[0], q_, &u_ptr[0]);

  006b4	b9 04 00 00 00	 mov	 ecx, 4
  006b9	6b d1 00	 imul	 edx, ecx, 0
  006bc	03 55 fc	 add	 edx, DWORD PTR _u_ptr$[ebp]
  006bf	52		 push	 edx
  006c0	8b 45 1c	 mov	 eax, DWORD PTR _q_$[ebp]
  006c3	50		 push	 eax
  006c4	b9 04 00 00 00	 mov	 ecx, 4
  006c9	6b d1 00	 imul	 edx, ecx, 0
  006cc	03 55 f8	 add	 edx, DWORD PTR _v_ptr$[ebp]
  006cf	52		 push	 edx
  006d0	8d 45 ec	 lea	 eax, DWORD PTR _k$[ebp]
  006d3	50		 push	 eax
  006d4	0f b6 4d e7	 movzx	 ecx, BYTE PTR _c$[ebp]
  006d8	51		 push	 ecx
  006d9	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  006de	83 c4 14	 add	 esp, 20			; 00000014H
  006e1	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 928  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[1], q_, &u_ptr[1]);

  006e4	ba 04 00 00 00	 mov	 edx, 4
  006e9	c1 e2 00	 shl	 edx, 0
  006ec	03 55 fc	 add	 edx, DWORD PTR _u_ptr$[ebp]
  006ef	52		 push	 edx
  006f0	8b 45 1c	 mov	 eax, DWORD PTR _q_$[ebp]
  006f3	50		 push	 eax
  006f4	b9 04 00 00 00	 mov	 ecx, 4
  006f9	c1 e1 00	 shl	 ecx, 0
  006fc	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  006ff	51		 push	 ecx
  00700	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  00703	52		 push	 edx
  00704	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  00708	50		 push	 eax
  00709	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  0070e	83 c4 14	 add	 esp, 20			; 00000014H
  00711	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 929  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[2], q_, &u_ptr[2]);

  00714	b9 04 00 00 00	 mov	 ecx, 4
  00719	d1 e1		 shl	 ecx, 1
  0071b	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  0071e	51		 push	 ecx
  0071f	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  00722	52		 push	 edx
  00723	b8 04 00 00 00	 mov	 eax, 4
  00728	d1 e0		 shl	 eax, 1
  0072a	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  0072d	50		 push	 eax
  0072e	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  00731	51		 push	 ecx
  00732	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  00736	52		 push	 edx
  00737	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  0073c	83 c4 14	 add	 esp, 20			; 00000014H
  0073f	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 930  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[3], q_, &u_ptr[3]);

  00742	b8 04 00 00 00	 mov	 eax, 4
  00747	6b c8 03	 imul	 ecx, eax, 3
  0074a	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  0074d	51		 push	 ecx
  0074e	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  00751	52		 push	 edx
  00752	b8 04 00 00 00	 mov	 eax, 4
  00757	6b c8 03	 imul	 ecx, eax, 3
  0075a	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  0075d	51		 push	 ecx
  0075e	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  00761	52		 push	 edx
  00762	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  00766	50		 push	 eax
  00767	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  0076c	83 c4 14	 add	 esp, 20			; 00000014H
  0076f	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 931  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[4], q_, &u_ptr[4]);

  00772	b9 04 00 00 00	 mov	 ecx, 4
  00777	c1 e1 02	 shl	 ecx, 2
  0077a	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  0077d	51		 push	 ecx
  0077e	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  00781	52		 push	 edx
  00782	b8 04 00 00 00	 mov	 eax, 4
  00787	c1 e0 02	 shl	 eax, 2
  0078a	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  0078d	50		 push	 eax
  0078e	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  00791	51		 push	 ecx
  00792	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  00796	52		 push	 edx
  00797	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  0079c	83 c4 14	 add	 esp, 20			; 00000014H
  0079f	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 932  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[5], q_, &u_ptr[5]);

  007a2	b8 04 00 00 00	 mov	 eax, 4
  007a7	6b c8 05	 imul	 ecx, eax, 5
  007aa	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  007ad	51		 push	 ecx
  007ae	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  007b1	52		 push	 edx
  007b2	b8 04 00 00 00	 mov	 eax, 4
  007b7	6b c8 05	 imul	 ecx, eax, 5
  007ba	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  007bd	51		 push	 ecx
  007be	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  007c1	52		 push	 edx
  007c2	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  007c6	50		 push	 eax
  007c7	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  007cc	83 c4 14	 add	 esp, 20			; 00000014H
  007cf	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 933  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[6], q_, &u_ptr[6]);

  007d2	b9 04 00 00 00	 mov	 ecx, 4
  007d7	6b d1 06	 imul	 edx, ecx, 6
  007da	03 55 fc	 add	 edx, DWORD PTR _u_ptr$[ebp]
  007dd	52		 push	 edx
  007de	8b 45 1c	 mov	 eax, DWORD PTR _q_$[ebp]
  007e1	50		 push	 eax
  007e2	b9 04 00 00 00	 mov	 ecx, 4
  007e7	6b d1 06	 imul	 edx, ecx, 6
  007ea	03 55 f8	 add	 edx, DWORD PTR _v_ptr$[ebp]
  007ed	52		 push	 edx
  007ee	8d 45 ec	 lea	 eax, DWORD PTR _k$[ebp]
  007f1	50		 push	 eax
  007f2	0f b6 4d e7	 movzx	 ecx, BYTE PTR _c$[ebp]
  007f6	51		 push	 ecx
  007f7	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  007fc	83 c4 14	 add	 esp, 20			; 00000014H
  007ff	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 934  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[7], q_, &u_ptr[7]);

  00802	ba 04 00 00 00	 mov	 edx, 4
  00807	6b c2 07	 imul	 eax, edx, 7
  0080a	03 45 fc	 add	 eax, DWORD PTR _u_ptr$[ebp]
  0080d	50		 push	 eax
  0080e	8b 4d 1c	 mov	 ecx, DWORD PTR _q_$[ebp]
  00811	51		 push	 ecx
  00812	ba 04 00 00 00	 mov	 edx, 4
  00817	6b c2 07	 imul	 eax, edx, 7
  0081a	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  0081d	50		 push	 eax
  0081e	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  00821	51		 push	 ecx
  00822	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  00826	52		 push	 edx
  00827	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  0082c	83 c4 14	 add	 esp, 20			; 00000014H
  0082f	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 935  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[8], q_, &u_ptr[8]);

  00832	b8 04 00 00 00	 mov	 eax, 4
  00837	c1 e0 03	 shl	 eax, 3
  0083a	03 45 fc	 add	 eax, DWORD PTR _u_ptr$[ebp]
  0083d	50		 push	 eax
  0083e	8b 4d 1c	 mov	 ecx, DWORD PTR _q_$[ebp]
  00841	51		 push	 ecx
  00842	ba 04 00 00 00	 mov	 edx, 4
  00847	c1 e2 03	 shl	 edx, 3
  0084a	03 55 f8	 add	 edx, DWORD PTR _v_ptr$[ebp]
  0084d	52		 push	 edx
  0084e	8d 45 ec	 lea	 eax, DWORD PTR _k$[ebp]
  00851	50		 push	 eax
  00852	0f b6 4d e7	 movzx	 ecx, BYTE PTR _c$[ebp]
  00856	51		 push	 ecx
  00857	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  0085c	83 c4 14	 add	 esp, 20			; 00000014H
  0085f	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 936  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[9], q_, &u_ptr[9]);

  00862	ba 04 00 00 00	 mov	 edx, 4
  00867	6b c2 09	 imul	 eax, edx, 9
  0086a	03 45 fc	 add	 eax, DWORD PTR _u_ptr$[ebp]
  0086d	50		 push	 eax
  0086e	8b 4d 1c	 mov	 ecx, DWORD PTR _q_$[ebp]
  00871	51		 push	 ecx
  00872	ba 04 00 00 00	 mov	 edx, 4
  00877	6b c2 09	 imul	 eax, edx, 9
  0087a	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  0087d	50		 push	 eax
  0087e	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  00881	51		 push	 ecx
  00882	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  00886	52		 push	 edx
  00887	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  0088c	83 c4 14	 add	 esp, 20			; 00000014H
  0088f	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 937  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[10], q_, &u_ptr[10]);

  00892	b8 04 00 00 00	 mov	 eax, 4
  00897	6b c8 0a	 imul	 ecx, eax, 10
  0089a	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  0089d	51		 push	 ecx
  0089e	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  008a1	52		 push	 edx
  008a2	b8 04 00 00 00	 mov	 eax, 4
  008a7	6b c8 0a	 imul	 ecx, eax, 10
  008aa	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  008ad	51		 push	 ecx
  008ae	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  008b1	52		 push	 edx
  008b2	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  008b6	50		 push	 eax
  008b7	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  008bc	83 c4 14	 add	 esp, 20			; 00000014H
  008bf	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 938  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[11], q_, &u_ptr[11]);

  008c2	b9 04 00 00 00	 mov	 ecx, 4
  008c7	6b d1 0b	 imul	 edx, ecx, 11
  008ca	03 55 fc	 add	 edx, DWORD PTR _u_ptr$[ebp]
  008cd	52		 push	 edx
  008ce	8b 45 1c	 mov	 eax, DWORD PTR _q_$[ebp]
  008d1	50		 push	 eax
  008d2	b9 04 00 00 00	 mov	 ecx, 4
  008d7	6b d1 0b	 imul	 edx, ecx, 11
  008da	03 55 f8	 add	 edx, DWORD PTR _v_ptr$[ebp]
  008dd	52		 push	 edx
  008de	8d 45 ec	 lea	 eax, DWORD PTR _k$[ebp]
  008e1	50		 push	 eax
  008e2	0f b6 4d e7	 movzx	 ecx, BYTE PTR _c$[ebp]
  008e6	51		 push	 ecx
  008e7	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  008ec	83 c4 14	 add	 esp, 20			; 00000014H
  008ef	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 939  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[12], q_, &u_ptr[12]);

  008f2	ba 04 00 00 00	 mov	 edx, 4
  008f7	6b c2 0c	 imul	 eax, edx, 12
  008fa	03 45 fc	 add	 eax, DWORD PTR _u_ptr$[ebp]
  008fd	50		 push	 eax
  008fe	8b 4d 1c	 mov	 ecx, DWORD PTR _q_$[ebp]
  00901	51		 push	 ecx
  00902	ba 04 00 00 00	 mov	 edx, 4
  00907	6b c2 0c	 imul	 eax, edx, 12
  0090a	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  0090d	50		 push	 eax
  0090e	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  00911	51		 push	 ecx
  00912	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  00916	52		 push	 edx
  00917	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  0091c	83 c4 14	 add	 esp, 20			; 00000014H
  0091f	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 940  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[13], q_, &u_ptr[13]);

  00922	b8 04 00 00 00	 mov	 eax, 4
  00927	6b c8 0d	 imul	 ecx, eax, 13
  0092a	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  0092d	51		 push	 ecx
  0092e	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  00931	52		 push	 edx
  00932	b8 04 00 00 00	 mov	 eax, 4
  00937	6b c8 0d	 imul	 ecx, eax, 13
  0093a	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  0093d	51		 push	 ecx
  0093e	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  00941	52		 push	 edx
  00942	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  00946	50		 push	 eax
  00947	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  0094c	83 c4 14	 add	 esp, 20			; 00000014H
  0094f	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 941  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[14], q_, &u_ptr[14]);

  00952	b9 04 00 00 00	 mov	 ecx, 4
  00957	6b d1 0e	 imul	 edx, ecx, 14
  0095a	03 55 fc	 add	 edx, DWORD PTR _u_ptr$[ebp]
  0095d	52		 push	 edx
  0095e	8b 45 1c	 mov	 eax, DWORD PTR _q_$[ebp]
  00961	50		 push	 eax
  00962	b9 04 00 00 00	 mov	 ecx, 4
  00967	6b d1 0e	 imul	 edx, ecx, 14
  0096a	03 55 f8	 add	 edx, DWORD PTR _v_ptr$[ebp]
  0096d	52		 push	 edx
  0096e	8d 45 ec	 lea	 eax, DWORD PTR _k$[ebp]
  00971	50		 push	 eax
  00972	0f b6 4d e7	 movzx	 ecx, BYTE PTR _c$[ebp]
  00976	51		 push	 ecx
  00977	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  0097c	83 c4 14	 add	 esp, 20			; 00000014H
  0097f	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 942  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[15], q_, &u_ptr[15]);

  00982	ba 04 00 00 00	 mov	 edx, 4
  00987	6b c2 0f	 imul	 eax, edx, 15
  0098a	03 45 fc	 add	 eax, DWORD PTR _u_ptr$[ebp]
  0098d	50		 push	 eax
  0098e	8b 4d 1c	 mov	 ecx, DWORD PTR _q_$[ebp]
  00991	51		 push	 ecx
  00992	ba 04 00 00 00	 mov	 edx, 4
  00997	6b c2 0f	 imul	 eax, edx, 15
  0099a	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  0099d	50		 push	 eax
  0099e	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  009a1	51		 push	 ecx
  009a2	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  009a6	52		 push	 edx
  009a7	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  009ac	83 c4 14	 add	 esp, 20			; 00000014H
  009af	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 943  :             u_ptr += 16;

  009b2	8b 45 fc	 mov	 eax, DWORD PTR _u_ptr$[ebp]
  009b5	83 c0 40	 add	 eax, 64			; 00000040H
  009b8	89 45 fc	 mov	 DWORD PTR _u_ptr$[ebp], eax

; 944  :             v_ptr += 16;

  009bb	8b 4d f8	 mov	 ecx, DWORD PTR _v_ptr$[ebp]
  009be	83 c1 40	 add	 ecx, 64			; 00000040H
  009c1	89 4d f8	 mov	 DWORD PTR _v_ptr$[ebp], ecx

; 945  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 946  :             if (sizeof(k) == sizeof(_UINT64_T))

  009c4	33 d2		 xor	 edx, edx
  009c6	74 0c		 je	 SHORT $LN7@SubtructOn

; 947  :                 AddToMULTI64Counter(16);

  009c8	6a 10		 push	 16			; 00000010H
  009ca	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
  009cf	83 c4 04	 add	 esp, 4

; 948  :             else

  009d2	eb 0a		 jmp	 SHORT $LN6@SubtructOn
$LN7@SubtructOn:

; 949  :                 AddToMULTI32Counter(16);

  009d4	6a 10		 push	 16			; 00000010H
  009d6	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
  009db	83 c4 04	 add	 esp, 4
$LN6@SubtructOn:

; 950  : #endif
; 951  :         }
; 952  : 
; 953  :         if (v_count & 0x8)

  009de	8b 45 f4	 mov	 eax, DWORD PTR _v_count$[ebp]
  009e1	83 e0 08	 and	 eax, 8
  009e4	0f 84 aa 01 00
	00		 je	 $LN9@SubtructOn

; 954  :         {
; 955  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[0], q_, &u_ptr[0]);

  009ea	b9 04 00 00 00	 mov	 ecx, 4
  009ef	6b d1 00	 imul	 edx, ecx, 0
  009f2	03 55 fc	 add	 edx, DWORD PTR _u_ptr$[ebp]
  009f5	52		 push	 edx
  009f6	8b 45 1c	 mov	 eax, DWORD PTR _q_$[ebp]
  009f9	50		 push	 eax
  009fa	b9 04 00 00 00	 mov	 ecx, 4
  009ff	6b d1 00	 imul	 edx, ecx, 0
  00a02	03 55 f8	 add	 edx, DWORD PTR _v_ptr$[ebp]
  00a05	52		 push	 edx
  00a06	8d 45 ec	 lea	 eax, DWORD PTR _k$[ebp]
  00a09	50		 push	 eax
  00a0a	0f b6 4d e7	 movzx	 ecx, BYTE PTR _c$[ebp]
  00a0e	51		 push	 ecx
  00a0f	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00a14	83 c4 14	 add	 esp, 20			; 00000014H
  00a17	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 956  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[1], q_, &u_ptr[1]);

  00a1a	ba 04 00 00 00	 mov	 edx, 4
  00a1f	c1 e2 00	 shl	 edx, 0
  00a22	03 55 fc	 add	 edx, DWORD PTR _u_ptr$[ebp]
  00a25	52		 push	 edx
  00a26	8b 45 1c	 mov	 eax, DWORD PTR _q_$[ebp]
  00a29	50		 push	 eax
  00a2a	b9 04 00 00 00	 mov	 ecx, 4
  00a2f	c1 e1 00	 shl	 ecx, 0
  00a32	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  00a35	51		 push	 ecx
  00a36	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  00a39	52		 push	 edx
  00a3a	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  00a3e	50		 push	 eax
  00a3f	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00a44	83 c4 14	 add	 esp, 20			; 00000014H
  00a47	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 957  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[2], q_, &u_ptr[2]);

  00a4a	b9 04 00 00 00	 mov	 ecx, 4
  00a4f	d1 e1		 shl	 ecx, 1
  00a51	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  00a54	51		 push	 ecx
  00a55	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  00a58	52		 push	 edx
  00a59	b8 04 00 00 00	 mov	 eax, 4
  00a5e	d1 e0		 shl	 eax, 1
  00a60	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  00a63	50		 push	 eax
  00a64	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  00a67	51		 push	 ecx
  00a68	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  00a6c	52		 push	 edx
  00a6d	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00a72	83 c4 14	 add	 esp, 20			; 00000014H
  00a75	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 958  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[3], q_, &u_ptr[3]);

  00a78	b8 04 00 00 00	 mov	 eax, 4
  00a7d	6b c8 03	 imul	 ecx, eax, 3
  00a80	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  00a83	51		 push	 ecx
  00a84	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  00a87	52		 push	 edx
  00a88	b8 04 00 00 00	 mov	 eax, 4
  00a8d	6b c8 03	 imul	 ecx, eax, 3
  00a90	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  00a93	51		 push	 ecx
  00a94	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  00a97	52		 push	 edx
  00a98	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  00a9c	50		 push	 eax
  00a9d	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00aa2	83 c4 14	 add	 esp, 20			; 00000014H
  00aa5	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 959  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[4], q_, &u_ptr[4]);

  00aa8	b9 04 00 00 00	 mov	 ecx, 4
  00aad	c1 e1 02	 shl	 ecx, 2
  00ab0	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  00ab3	51		 push	 ecx
  00ab4	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  00ab7	52		 push	 edx
  00ab8	b8 04 00 00 00	 mov	 eax, 4
  00abd	c1 e0 02	 shl	 eax, 2
  00ac0	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  00ac3	50		 push	 eax
  00ac4	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  00ac7	51		 push	 ecx
  00ac8	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  00acc	52		 push	 edx
  00acd	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00ad2	83 c4 14	 add	 esp, 20			; 00000014H
  00ad5	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 960  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[5], q_, &u_ptr[5]);

  00ad8	b8 04 00 00 00	 mov	 eax, 4
  00add	6b c8 05	 imul	 ecx, eax, 5
  00ae0	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  00ae3	51		 push	 ecx
  00ae4	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  00ae7	52		 push	 edx
  00ae8	b8 04 00 00 00	 mov	 eax, 4
  00aed	6b c8 05	 imul	 ecx, eax, 5
  00af0	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  00af3	51		 push	 ecx
  00af4	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  00af7	52		 push	 edx
  00af8	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  00afc	50		 push	 eax
  00afd	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00b02	83 c4 14	 add	 esp, 20			; 00000014H
  00b05	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 961  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[6], q_, &u_ptr[6]);

  00b08	b9 04 00 00 00	 mov	 ecx, 4
  00b0d	6b d1 06	 imul	 edx, ecx, 6
  00b10	03 55 fc	 add	 edx, DWORD PTR _u_ptr$[ebp]
  00b13	52		 push	 edx
  00b14	8b 45 1c	 mov	 eax, DWORD PTR _q_$[ebp]
  00b17	50		 push	 eax
  00b18	b9 04 00 00 00	 mov	 ecx, 4
  00b1d	6b d1 06	 imul	 edx, ecx, 6
  00b20	03 55 f8	 add	 edx, DWORD PTR _v_ptr$[ebp]
  00b23	52		 push	 edx
  00b24	8d 45 ec	 lea	 eax, DWORD PTR _k$[ebp]
  00b27	50		 push	 eax
  00b28	0f b6 4d e7	 movzx	 ecx, BYTE PTR _c$[ebp]
  00b2c	51		 push	 ecx
  00b2d	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00b32	83 c4 14	 add	 esp, 20			; 00000014H
  00b35	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 962  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[7], q_, &u_ptr[7]);

  00b38	ba 04 00 00 00	 mov	 edx, 4
  00b3d	6b c2 07	 imul	 eax, edx, 7
  00b40	03 45 fc	 add	 eax, DWORD PTR _u_ptr$[ebp]
  00b43	50		 push	 eax
  00b44	8b 4d 1c	 mov	 ecx, DWORD PTR _q_$[ebp]
  00b47	51		 push	 ecx
  00b48	ba 04 00 00 00	 mov	 edx, 4
  00b4d	6b c2 07	 imul	 eax, edx, 7
  00b50	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  00b53	50		 push	 eax
  00b54	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  00b57	51		 push	 ecx
  00b58	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  00b5c	52		 push	 edx
  00b5d	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00b62	83 c4 14	 add	 esp, 20			; 00000014H
  00b65	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 963  :             u_ptr += 8;

  00b68	8b 45 fc	 mov	 eax, DWORD PTR _u_ptr$[ebp]
  00b6b	83 c0 20	 add	 eax, 32			; 00000020H
  00b6e	89 45 fc	 mov	 DWORD PTR _u_ptr$[ebp], eax

; 964  :             v_ptr += 8;

  00b71	8b 4d f8	 mov	 ecx, DWORD PTR _v_ptr$[ebp]
  00b74	83 c1 20	 add	 ecx, 32			; 00000020H
  00b77	89 4d f8	 mov	 DWORD PTR _v_ptr$[ebp], ecx

; 965  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 966  :             if (sizeof(k) == sizeof(_UINT64_T))

  00b7a	33 d2		 xor	 edx, edx
  00b7c	74 0c		 je	 SHORT $LN10@SubtructOn

; 967  :                 AddToMULTI64Counter(8);

  00b7e	6a 08		 push	 8
  00b80	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
  00b85	83 c4 04	 add	 esp, 4

; 968  :             else

  00b88	eb 0a		 jmp	 SHORT $LN9@SubtructOn
$LN10@SubtructOn:

; 969  :                 AddToMULTI32Counter(8);

  00b8a	6a 08		 push	 8
  00b8c	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
  00b91	83 c4 04	 add	 esp, 4
$LN9@SubtructOn:

; 970  : #endif
; 971  :         }
; 972  : 
; 973  :         if (v_count & 0x4)

  00b94	8b 45 f4	 mov	 eax, DWORD PTR _v_count$[ebp]
  00b97	83 e0 04	 and	 eax, 4
  00b9a	0f 84 ea 00 00
	00		 je	 $LN12@SubtructOn

; 974  :         {
; 975  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[0], q_, &u_ptr[0]);

  00ba0	b9 04 00 00 00	 mov	 ecx, 4
  00ba5	6b d1 00	 imul	 edx, ecx, 0
  00ba8	03 55 fc	 add	 edx, DWORD PTR _u_ptr$[ebp]
  00bab	52		 push	 edx
  00bac	8b 45 1c	 mov	 eax, DWORD PTR _q_$[ebp]
  00baf	50		 push	 eax
  00bb0	b9 04 00 00 00	 mov	 ecx, 4
  00bb5	6b d1 00	 imul	 edx, ecx, 0
  00bb8	03 55 f8	 add	 edx, DWORD PTR _v_ptr$[ebp]
  00bbb	52		 push	 edx
  00bbc	8d 45 ec	 lea	 eax, DWORD PTR _k$[ebp]
  00bbf	50		 push	 eax
  00bc0	0f b6 4d e7	 movzx	 ecx, BYTE PTR _c$[ebp]
  00bc4	51		 push	 ecx
  00bc5	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00bca	83 c4 14	 add	 esp, 20			; 00000014H
  00bcd	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 976  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[1], q_, &u_ptr[1]);

  00bd0	ba 04 00 00 00	 mov	 edx, 4
  00bd5	c1 e2 00	 shl	 edx, 0
  00bd8	03 55 fc	 add	 edx, DWORD PTR _u_ptr$[ebp]
  00bdb	52		 push	 edx
  00bdc	8b 45 1c	 mov	 eax, DWORD PTR _q_$[ebp]
  00bdf	50		 push	 eax
  00be0	b9 04 00 00 00	 mov	 ecx, 4
  00be5	c1 e1 00	 shl	 ecx, 0
  00be8	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  00beb	51		 push	 ecx
  00bec	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  00bef	52		 push	 edx
  00bf0	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  00bf4	50		 push	 eax
  00bf5	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00bfa	83 c4 14	 add	 esp, 20			; 00000014H
  00bfd	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 977  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[2], q_, &u_ptr[2]);

  00c00	b9 04 00 00 00	 mov	 ecx, 4
  00c05	d1 e1		 shl	 ecx, 1
  00c07	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  00c0a	51		 push	 ecx
  00c0b	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  00c0e	52		 push	 edx
  00c0f	b8 04 00 00 00	 mov	 eax, 4
  00c14	d1 e0		 shl	 eax, 1
  00c16	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  00c19	50		 push	 eax
  00c1a	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  00c1d	51		 push	 ecx
  00c1e	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  00c22	52		 push	 edx
  00c23	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00c28	83 c4 14	 add	 esp, 20			; 00000014H
  00c2b	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 978  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[3], q_, &u_ptr[3]);

  00c2e	b8 04 00 00 00	 mov	 eax, 4
  00c33	6b c8 03	 imul	 ecx, eax, 3
  00c36	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  00c39	51		 push	 ecx
  00c3a	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  00c3d	52		 push	 edx
  00c3e	b8 04 00 00 00	 mov	 eax, 4
  00c43	6b c8 03	 imul	 ecx, eax, 3
  00c46	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  00c49	51		 push	 ecx
  00c4a	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  00c4d	52		 push	 edx
  00c4e	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  00c52	50		 push	 eax
  00c53	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00c58	83 c4 14	 add	 esp, 20			; 00000014H
  00c5b	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 979  :             u_ptr += 4;

  00c5e	8b 4d fc	 mov	 ecx, DWORD PTR _u_ptr$[ebp]
  00c61	83 c1 10	 add	 ecx, 16			; 00000010H
  00c64	89 4d fc	 mov	 DWORD PTR _u_ptr$[ebp], ecx

; 980  :             v_ptr += 4;

  00c67	8b 55 f8	 mov	 edx, DWORD PTR _v_ptr$[ebp]
  00c6a	83 c2 10	 add	 edx, 16			; 00000010H
  00c6d	89 55 f8	 mov	 DWORD PTR _v_ptr$[ebp], edx

; 981  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 982  :             if (sizeof(k) == sizeof(_UINT64_T))

  00c70	33 c0		 xor	 eax, eax
  00c72	74 0c		 je	 SHORT $LN13@SubtructOn

; 983  :                 AddToMULTI64Counter(4);

  00c74	6a 04		 push	 4
  00c76	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
  00c7b	83 c4 04	 add	 esp, 4

; 984  :             else

  00c7e	eb 0a		 jmp	 SHORT $LN12@SubtructOn
$LN13@SubtructOn:

; 985  :                 AddToMULTI32Counter(4);

  00c80	6a 04		 push	 4
  00c82	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
  00c87	83 c4 04	 add	 esp, 4
$LN12@SubtructOn:

; 986  : #endif
; 987  :         }
; 988  : 
; 989  :         if (v_count & 0x2)

  00c8a	8b 4d f4	 mov	 ecx, DWORD PTR _v_count$[ebp]
  00c8d	83 e1 02	 and	 ecx, 2
  00c90	0f 84 8c 00 00
	00		 je	 $LN15@SubtructOn

; 990  :         {
; 991  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[0], q_, &u_ptr[0]);

  00c96	ba 04 00 00 00	 mov	 edx, 4
  00c9b	6b c2 00	 imul	 eax, edx, 0
  00c9e	03 45 fc	 add	 eax, DWORD PTR _u_ptr$[ebp]
  00ca1	50		 push	 eax
  00ca2	8b 4d 1c	 mov	 ecx, DWORD PTR _q_$[ebp]
  00ca5	51		 push	 ecx
  00ca6	ba 04 00 00 00	 mov	 edx, 4
  00cab	6b c2 00	 imul	 eax, edx, 0
  00cae	03 45 f8	 add	 eax, DWORD PTR _v_ptr$[ebp]
  00cb1	50		 push	 eax
  00cb2	8d 4d ec	 lea	 ecx, DWORD PTR _k$[ebp]
  00cb5	51		 push	 ecx
  00cb6	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  00cba	52		 push	 edx
  00cbb	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00cc0	83 c4 14	 add	 esp, 20			; 00000014H
  00cc3	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 992  :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[1], q_, &u_ptr[1]);

  00cc6	b8 04 00 00 00	 mov	 eax, 4
  00ccb	c1 e0 00	 shl	 eax, 0
  00cce	03 45 fc	 add	 eax, DWORD PTR _u_ptr$[ebp]
  00cd1	50		 push	 eax
  00cd2	8b 4d 1c	 mov	 ecx, DWORD PTR _q_$[ebp]
  00cd5	51		 push	 ecx
  00cd6	ba 04 00 00 00	 mov	 edx, 4
  00cdb	c1 e2 00	 shl	 edx, 0
  00cde	03 55 f8	 add	 edx, DWORD PTR _v_ptr$[ebp]
  00ce1	52		 push	 edx
  00ce2	8d 45 ec	 lea	 eax, DWORD PTR _k$[ebp]
  00ce5	50		 push	 eax
  00ce6	0f b6 4d e7	 movzx	 ecx, BYTE PTR _c$[ebp]
  00cea	51		 push	 ecx
  00ceb	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00cf0	83 c4 14	 add	 esp, 20			; 00000014H
  00cf3	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 993  :             u_ptr += 2;

  00cf6	8b 55 fc	 mov	 edx, DWORD PTR _u_ptr$[ebp]
  00cf9	83 c2 08	 add	 edx, 8
  00cfc	89 55 fc	 mov	 DWORD PTR _u_ptr$[ebp], edx

; 994  :             v_ptr += 2;

  00cff	8b 45 f8	 mov	 eax, DWORD PTR _v_ptr$[ebp]
  00d02	83 c0 08	 add	 eax, 8
  00d05	89 45 f8	 mov	 DWORD PTR _v_ptr$[ebp], eax

; 995  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 996  :             if (sizeof(k) == sizeof(_UINT64_T))

  00d08	33 c9		 xor	 ecx, ecx
  00d0a	74 0c		 je	 SHORT $LN16@SubtructOn

; 997  :                 AddToMULTI64Counter(2);

  00d0c	6a 02		 push	 2
  00d0e	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
  00d13	83 c4 04	 add	 esp, 4

; 998  :             else

  00d16	eb 0a		 jmp	 SHORT $LN15@SubtructOn
$LN16@SubtructOn:

; 999  :                 AddToMULTI32Counter(2);

  00d18	6a 02		 push	 2
  00d1a	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
  00d1f	83 c4 04	 add	 esp, 4
$LN15@SubtructOn:

; 1000 : #endif
; 1001 :         }
; 1002 : 
; 1003 :         if (v_count & 0x1)

  00d22	8b 55 f4	 mov	 edx, DWORD PTR _v_count$[ebp]
  00d25	83 e2 01	 and	 edx, 1
  00d28	74 52		 je	 SHORT $LN18@SubtructOn

; 1004 :         {
; 1005 :             c = _MULTIPLY_DIGIT_UNIT(c, &k, &v_ptr[0], q_, &u_ptr[0]);

  00d2a	b8 04 00 00 00	 mov	 eax, 4
  00d2f	6b c8 00	 imul	 ecx, eax, 0
  00d32	03 4d fc	 add	 ecx, DWORD PTR _u_ptr$[ebp]
  00d35	51		 push	 ecx
  00d36	8b 55 1c	 mov	 edx, DWORD PTR _q_$[ebp]
  00d39	52		 push	 edx
  00d3a	b8 04 00 00 00	 mov	 eax, 4
  00d3f	6b c8 00	 imul	 ecx, eax, 0
  00d42	03 4d f8	 add	 ecx, DWORD PTR _v_ptr$[ebp]
  00d45	51		 push	 ecx
  00d46	8d 55 ec	 lea	 edx, DWORD PTR _k$[ebp]
  00d49	52		 push	 edx
  00d4a	0f b6 45 e7	 movzx	 eax, BYTE PTR _c$[ebp]
  00d4e	50		 push	 eax
  00d4f	e8 00 00 00 00	 call	 ?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
  00d54	83 c4 14	 add	 esp, 20			; 00000014H
  00d57	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1006 :             u_ptr += 1;

  00d5a	8b 4d fc	 mov	 ecx, DWORD PTR _u_ptr$[ebp]
  00d5d	83 c1 04	 add	 ecx, 4
  00d60	89 4d fc	 mov	 DWORD PTR _u_ptr$[ebp], ecx

; 1007 :             v_ptr += 1;

  00d63	8b 55 f8	 mov	 edx, DWORD PTR _v_ptr$[ebp]
  00d66	83 c2 04	 add	 edx, 4
  00d69	89 55 f8	 mov	 DWORD PTR _v_ptr$[ebp], edx

; 1008 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1009 :             if (sizeof(k) == sizeof(_UINT64_T))

  00d6c	33 c0		 xor	 eax, eax
  00d6e	74 07		 je	 SHORT $LN19@SubtructOn

; 1010 :                 IncrementMULTI64Counter();

  00d70	e8 00 00 00 00	 call	 ?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementMULTI64Counter

; 1011 :             else

  00d75	eb 05		 jmp	 SHORT $LN18@SubtructOn
$LN19@SubtructOn:

; 1012 :                 IncrementMULTI32Counter();

  00d77	e8 00 00 00 00	 call	 ?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementMULTI32Counter
$LN18@SubtructOn:

; 1013 : #endif
; 1014 :         }
; 1015 : 
; 1016 :         c = _SUBTRUCT_UNIT(c, *u_ptr, k, u_ptr);

  00d7c	8b 4d fc	 mov	 ecx, DWORD PTR _u_ptr$[ebp]
  00d7f	51		 push	 ecx
  00d80	8b 55 ec	 mov	 edx, DWORD PTR _k$[ebp]
  00d83	52		 push	 edx
  00d84	8b 45 fc	 mov	 eax, DWORD PTR _u_ptr$[ebp]
  00d87	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d89	51		 push	 ecx
  00d8a	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  00d8e	52		 push	 edx
  00d8f	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  00d94	83 c4 10	 add	 esp, 16			; 00000010H
  00d97	88 45 e7	 mov	 BYTE PTR _c$[ebp], al

; 1017 :         u_ptr += 1;

  00d9a	8b 45 fc	 mov	 eax, DWORD PTR _u_ptr$[ebp]
  00d9d	83 c0 04	 add	 eax, 4
  00da0	89 45 fc	 mov	 DWORD PTR _u_ptr$[ebp], eax

; 1018 : 
; 1019 :         return (DoBorrow(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr));

  00da3	8b 4d 0c	 mov	 ecx, DWORD PTR _u_buf_len$[ebp]
  00da6	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  00da9	8d 44 8a 04	 lea	 eax, DWORD PTR [edx+ecx*4+4]
  00dad	2b 45 fc	 sub	 eax, DWORD PTR _u_ptr$[ebp]
  00db0	c1 f8 02	 sar	 eax, 2
  00db3	50		 push	 eax
  00db4	8b 4d fc	 mov	 ecx, DWORD PTR _u_ptr$[ebp]
  00db7	51		 push	 ecx
  00db8	0f b6 55 e7	 movzx	 edx, BYTE PTR _c$[ebp]
  00dbc	52		 push	 edx
  00dbd	e8 00 00 00 00	 call	 ?DoBorrow@Internal@Core@Math@Palmtree@@YAHDPAII@Z ; Palmtree::Math::Core::Internal::DoBorrow
  00dc2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1020 :     }

  00dc5	52		 push	 edx
  00dc6	8b cd		 mov	 ecx, ebp
  00dc8	50		 push	 eax
  00dc9	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN24@SubtructOn
  00dcf	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00dd4	58		 pop	 eax
  00dd5	5a		 pop	 edx
  00dd6	83 c4 20	 add	 esp, 32			; 00000020H
  00dd9	3b ec		 cmp	 ebp, esp
  00ddb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00de0	8b e5		 mov	 esp, ebp
  00de2	5d		 pop	 ebp
  00de3	c3		 ret	 0
$LN24@SubtructOn:
  00de4	01 00 00 00	 DD	 1
  00de8	00 00 00 00	 DD	 $LN23@SubtructOn
$LN23@SubtructOn:
  00dec	ec ff ff ff	 DD	 -20			; ffffffecH
  00df0	04 00 00 00	 DD	 4
  00df4	00 00 00 00	 DD	 $LN22@SubtructOn
$LN22@SubtructOn:
  00df8	6b		 DB	 107			; 0000006bH
  00df9	00		 DB	 0
?SubtructOneLine@Internal@Core@Math@Palmtree@@YAHPAII0III@Z ENDP ; Palmtree::Math::Core::Internal::SubtructOneLine
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
_TEXT	SEGMENT
tv79 = -29						; size = 1
tv81 = -28						; size = 4
_t_lo$ = -20						; size = 4
_t_hi$ = -8						; size = 4
_c$ = 8							; size = 1
_k$ = 12						; size = 4
_vp$ = 16						; size = 4
_q_$ = 20						; size = 4
_up$ = 24						; size = 4
?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z PROC ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV

; 861  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0000e	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00011	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00014	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00017	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001a	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001d	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00020	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __E17217E9_pmc_divrem@cpp
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 862  :         __UNIT_TYPE t_hi;
; 863  :         __UNIT_TYPE t_lo;
; 864  :         t_lo = _MULTIPLYX_UNIT(*vp, q_, &t_hi);

  0002d	8d 45 f8	 lea	 eax, DWORD PTR _t_hi$[ebp]
  00030	50		 push	 eax
  00031	8b 4d 14	 mov	 ecx, DWORD PTR _q_$[ebp]
  00034	51		 push	 ecx
  00035	8b 55 10	 mov	 edx, DWORD PTR _vp$[ebp]
  00038	8b 02		 mov	 eax, DWORD PTR [edx]
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 __MULTIPLYX_UNIT
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH
  00043	89 45 ec	 mov	 DWORD PTR _t_lo$[ebp], eax

; 865  :         _ADDX_UNIT(_ADDX_UNIT(0, t_lo, *k, &t_lo), t_hi, 0, &t_hi);

  00046	8b 4d f8	 mov	 ecx, DWORD PTR _t_hi$[ebp]
  00049	89 4d e4	 mov	 DWORD PTR tv81[ebp], ecx
  0004c	8d 55 ec	 lea	 edx, DWORD PTR _t_lo$[ebp]
  0004f	52		 push	 edx
  00050	8b 45 0c	 mov	 eax, DWORD PTR _k$[ebp]
  00053	8b 08		 mov	 ecx, DWORD PTR [eax]
  00055	51		 push	 ecx
  00056	8b 55 ec	 mov	 edx, DWORD PTR _t_lo$[ebp]
  00059	52		 push	 edx
  0005a	6a 00		 push	 0
  0005c	e8 00 00 00 00	 call	 __ADDX_UNIT
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	88 45 e3	 mov	 BYTE PTR tv79[ebp], al
  00067	8d 45 f8	 lea	 eax, DWORD PTR _t_hi$[ebp]
  0006a	50		 push	 eax
  0006b	6a 00		 push	 0
  0006d	8b 4d e4	 mov	 ecx, DWORD PTR tv81[ebp]
  00070	51		 push	 ecx
  00071	0f b6 55 e3	 movzx	 edx, BYTE PTR tv79[ebp]
  00075	52		 push	 edx
  00076	e8 00 00 00 00	 call	 __ADDX_UNIT
  0007b	83 c4 10	 add	 esp, 16			; 00000010H

; 866  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  0007e	8b 45 18	 mov	 eax, DWORD PTR _up$[ebp]
  00081	50		 push	 eax
  00082	8b 4d ec	 mov	 ecx, DWORD PTR _t_lo$[ebp]
  00085	51		 push	 ecx
  00086	8b 55 18	 mov	 edx, DWORD PTR _up$[ebp]
  00089	8b 02		 mov	 eax, DWORD PTR [edx]
  0008b	50		 push	 eax
  0008c	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  00090	51		 push	 ecx
  00091	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  00096	83 c4 10	 add	 esp, 16			; 00000010H
  00099	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 867  :         *k = t_hi;

  0009c	8b 55 0c	 mov	 edx, DWORD PTR _k$[ebp]
  0009f	8b 45 f8	 mov	 eax, DWORD PTR _t_hi$[ebp]
  000a2	89 02		 mov	 DWORD PTR [edx], eax

; 868  :         return (c);

  000a4	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]

; 869  :     }

  000a7	52		 push	 edx
  000a8	8b cd		 mov	 ecx, ebp
  000aa	50		 push	 eax
  000ab	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@MULTIPLYX_
  000b1	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000b6	58		 pop	 eax
  000b7	5a		 pop	 edx
  000b8	83 c4 20	 add	 esp, 32			; 00000020H
  000bb	3b ec		 cmp	 ebp, esp
  000bd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c2	8b e5		 mov	 esp, ebp
  000c4	5d		 pop	 ebp
  000c5	c3		 ret	 0
  000c6	66 90		 npad	 2
$LN6@MULTIPLYX_:
  000c8	02 00 00 00	 DD	 2
  000cc	00 00 00 00	 DD	 $LN5@MULTIPLYX_
$LN5@MULTIPLYX_:
  000d0	f8 ff ff ff	 DD	 -8			; fffffff8H
  000d4	04 00 00 00	 DD	 4
  000d8	00 00 00 00	 DD	 $LN3@MULTIPLYX_
  000dc	ec ff ff ff	 DD	 -20			; ffffffecH
  000e0	04 00 00 00	 DD	 4
  000e4	00 00 00 00	 DD	 $LN4@MULTIPLYX_
$LN4@MULTIPLYX_:
  000e8	74		 DB	 116			; 00000074H
  000e9	5f		 DB	 95			; 0000005fH
  000ea	6c		 DB	 108			; 0000006cH
  000eb	6f		 DB	 111			; 0000006fH
  000ec	00		 DB	 0
$LN3@MULTIPLYX_:
  000ed	74		 DB	 116			; 00000074H
  000ee	5f		 DB	 95			; 0000005fH
  000ef	68		 DB	 104			; 00000068H
  000f0	69		 DB	 105			; 00000069H
  000f1	00		 DB	 0
?_MULTIPLYX_DIGIT_UNIT_DIV@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ENDP ; Palmtree::Math::Core::Internal::_MULTIPLYX_DIGIT_UNIT_DIV
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
_TEXT	SEGMENT
tv79 = -29						; size = 1
tv81 = -28						; size = 4
_t_lo$ = -20						; size = 4
_t_hi$ = -8						; size = 4
_c$ = 8							; size = 1
_k$ = 12						; size = 4
_vp$ = 16						; size = 4
_q_$ = 20						; size = 4
_up$ = 24						; size = 4
?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z PROC ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT

; 850  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0000e	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00011	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00014	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00017	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001a	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001d	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00020	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __E17217E9_pmc_divrem@cpp
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 851  :         __UNIT_TYPE t_hi;
; 852  :         __UNIT_TYPE t_lo;
; 853  :         t_lo = _MULTIPLY_UNIT(*vp, q_, &t_hi);

  0002d	8d 45 f8	 lea	 eax, DWORD PTR _t_hi$[ebp]
  00030	50		 push	 eax
  00031	8b 4d 14	 mov	 ecx, DWORD PTR _q_$[ebp]
  00034	51		 push	 ecx
  00035	8b 55 10	 mov	 edx, DWORD PTR _vp$[ebp]
  00038	8b 02		 mov	 eax, DWORD PTR [edx]
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 __MULTIPLY_UNIT
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH
  00043	89 45 ec	 mov	 DWORD PTR _t_lo$[ebp], eax

; 854  :         _ADD_UNIT(_ADD_UNIT(0, t_lo, *k, &t_lo), t_hi, 0, &t_hi);

  00046	8b 4d f8	 mov	 ecx, DWORD PTR _t_hi$[ebp]
  00049	89 4d e4	 mov	 DWORD PTR tv81[ebp], ecx
  0004c	8d 55 ec	 lea	 edx, DWORD PTR _t_lo$[ebp]
  0004f	52		 push	 edx
  00050	8b 45 0c	 mov	 eax, DWORD PTR _k$[ebp]
  00053	8b 08		 mov	 ecx, DWORD PTR [eax]
  00055	51		 push	 ecx
  00056	8b 55 ec	 mov	 edx, DWORD PTR _t_lo$[ebp]
  00059	52		 push	 edx
  0005a	6a 00		 push	 0
  0005c	e8 00 00 00 00	 call	 __ADD_UNIT
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	88 45 e3	 mov	 BYTE PTR tv79[ebp], al
  00067	8d 45 f8	 lea	 eax, DWORD PTR _t_hi$[ebp]
  0006a	50		 push	 eax
  0006b	6a 00		 push	 0
  0006d	8b 4d e4	 mov	 ecx, DWORD PTR tv81[ebp]
  00070	51		 push	 ecx
  00071	0f b6 55 e3	 movzx	 edx, BYTE PTR tv79[ebp]
  00075	52		 push	 edx
  00076	e8 00 00 00 00	 call	 __ADD_UNIT
  0007b	83 c4 10	 add	 esp, 16			; 00000010H

; 855  :         c = _SUBTRUCT_UNIT(c, *up, t_lo, up);

  0007e	8b 45 18	 mov	 eax, DWORD PTR _up$[ebp]
  00081	50		 push	 eax
  00082	8b 4d ec	 mov	 ecx, DWORD PTR _t_lo$[ebp]
  00085	51		 push	 ecx
  00086	8b 55 18	 mov	 edx, DWORD PTR _up$[ebp]
  00089	8b 02		 mov	 eax, DWORD PTR [edx]
  0008b	50		 push	 eax
  0008c	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  00090	51		 push	 ecx
  00091	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  00096	83 c4 10	 add	 esp, 16			; 00000010H
  00099	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 856  :         *k = t_hi;

  0009c	8b 55 0c	 mov	 edx, DWORD PTR _k$[ebp]
  0009f	8b 45 f8	 mov	 eax, DWORD PTR _t_hi$[ebp]
  000a2	89 02		 mov	 DWORD PTR [edx], eax

; 857  :         return (c);

  000a4	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]

; 858  :     }

  000a7	52		 push	 edx
  000a8	8b cd		 mov	 ecx, ebp
  000aa	50		 push	 eax
  000ab	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@MULTIPLY_D
  000b1	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000b6	58		 pop	 eax
  000b7	5a		 pop	 edx
  000b8	83 c4 20	 add	 esp, 32			; 00000020H
  000bb	3b ec		 cmp	 ebp, esp
  000bd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c2	8b e5		 mov	 esp, ebp
  000c4	5d		 pop	 ebp
  000c5	c3		 ret	 0
  000c6	66 90		 npad	 2
$LN6@MULTIPLY_D:
  000c8	02 00 00 00	 DD	 2
  000cc	00 00 00 00	 DD	 $LN5@MULTIPLY_D
$LN5@MULTIPLY_D:
  000d0	f8 ff ff ff	 DD	 -8			; fffffff8H
  000d4	04 00 00 00	 DD	 4
  000d8	00 00 00 00	 DD	 $LN3@MULTIPLY_D
  000dc	ec ff ff ff	 DD	 -20			; ffffffecH
  000e0	04 00 00 00	 DD	 4
  000e4	00 00 00 00	 DD	 $LN4@MULTIPLY_D
$LN4@MULTIPLY_D:
  000e8	74		 DB	 116			; 00000074H
  000e9	5f		 DB	 95			; 0000005fH
  000ea	6c		 DB	 108			; 0000006cH
  000eb	6f		 DB	 111			; 0000006fH
  000ec	00		 DB	 0
$LN3@MULTIPLY_D:
  000ed	74		 DB	 116			; 00000074H
  000ee	5f		 DB	 95			; 0000005fH
  000ef	68		 DB	 104			; 00000068H
  000f0	69		 DB	 105			; 00000069H
  000f1	00		 DB	 0
?_MULTIPLY_DIGIT_UNIT@Internal@Core@Math@Palmtree@@YADDPAI0I0@Z ENDP ; Palmtree::Math::Core::Internal::_MULTIPLY_DIGIT_UNIT
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
_TEXT	SEGMENT
_c$ = 8							; size = 1
_up$ = 12						; size = 4
_u_count$ = 16						; size = 4
?DoBorrow@Internal@Core@Math@Palmtree@@YAHDPAII@Z PROC	; Palmtree::Math::Core::Internal::DoBorrow

; 810  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __E17217E9_pmc_divrem@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
$LN4@DoBorrow:

; 811  :         // 桁借りを続く限り行う
; 812  :         for (;;)
; 813  :         {
; 814  :             if (u_count <= 0)

  0000d	83 7d 10 00	 cmp	 DWORD PTR _u_count$[ebp], 0
  00011	77 15		 ja	 SHORT $LN5@DoBorrow

; 815  :             {
; 816  :                 // u の最上位まで達してしまった場合
; 817  : 
; 818  :                 if (c)

  00013	0f be 45 08	 movsx	 eax, BYTE PTR _c$[ebp]
  00017	85 c0		 test	 eax, eax
  00019	74 07		 je	 SHORT $LN7@DoBorrow

; 819  :                 {
; 820  :                     // かつそれでも桁借りを行う必要がある場合
; 821  : 
; 822  :                     // 減算結果が負になってしまったので呼び出し元に通知する。
; 823  :                     return (TRUE);

  0001b	b8 01 00 00 00	 mov	 eax, 1
  00020	eb 44		 jmp	 SHORT $LN1@DoBorrow
$LN7@DoBorrow:

; 824  :                 }
; 825  : 
; 826  :                 // u の最上位に達してしまった場合はいずれにしろループを中断して正常復帰する。
; 827  : 
; 828  :                 return (FALSE);

  00022	33 c0		 xor	 eax, eax
  00024	eb 40		 jmp	 SHORT $LN1@DoBorrow
  00026	eb 3c		 jmp	 SHORT $LN6@DoBorrow
$LN5@DoBorrow:

; 829  :             }
; 830  :             else if (c)

  00028	0f be 4d 08	 movsx	 ecx, BYTE PTR _c$[ebp]
  0002c	85 c9		 test	 ecx, ecx
  0002e	74 30		 je	 SHORT $LN8@DoBorrow

; 831  :             {
; 832  :                 // u の最上位に達しておらず、かつボローが立っている場合
; 833  : 
; 834  :                 // 桁借りを継続する
; 835  :                 c = _SUBTRUCT_UNIT(c, *up, 0, up);

  00030	8b 55 0c	 mov	 edx, DWORD PTR _up$[ebp]
  00033	52		 push	 edx
  00034	6a 00		 push	 0
  00036	8b 45 0c	 mov	 eax, DWORD PTR _up$[ebp]
  00039	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003b	51		 push	 ecx
  0003c	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  00040	52		 push	 edx
  00041	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  00046	83 c4 10	 add	 esp, 16			; 00000010H
  00049	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 836  :                 ++up;

  0004c	8b 45 0c	 mov	 eax, DWORD PTR _up$[ebp]
  0004f	83 c0 04	 add	 eax, 4
  00052	89 45 0c	 mov	 DWORD PTR _up$[ebp], eax

; 837  :                 --u_count;

  00055	8b 4d 10	 mov	 ecx, DWORD PTR _u_count$[ebp]
  00058	83 e9 01	 sub	 ecx, 1
  0005b	89 4d 10	 mov	 DWORD PTR _u_count$[ebp], ecx

; 838  :             }
; 839  :             else

  0005e	eb 04		 jmp	 SHORT $LN6@DoBorrow
$LN8@DoBorrow:

; 840  :             {
; 841  :                 // u の最上位に達しておらず、かつボローが立っていない場合
; 842  : 
; 843  :                 // 桁借りを中断し復帰する。
; 844  :                 return (FALSE);

  00060	33 c0		 xor	 eax, eax
  00062	eb 02		 jmp	 SHORT $LN1@DoBorrow
$LN6@DoBorrow:

; 845  :             }
; 846  :         }

  00064	eb a7		 jmp	 SHORT $LN4@DoBorrow
$LN1@DoBorrow:

; 847  :     }

  00066	3b ec		 cmp	 ebp, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
?DoBorrow@Internal@Core@Math@Palmtree@@YAHDPAII@Z ENDP	; Palmtree::Math::Core::Internal::DoBorrow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
_TEXT	SEGMENT
_q_$ = -28						; size = 4
_v2$ = -24						; size = 4
_v1$ = -20						; size = 4
_uj_2$ = -16						; size = 4
_uj_1$ = -12						; size = 4
_uj$ = -8						; size = 4
_u_index$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_v_buf$ = 12						; size = 4
_v_buf_len$ = 16					; size = 4
_q_index$ = 20						; size = 4
?CalculateQ_X@Internal@Core@Math@Palmtree@@YAIPAI0II@Z PROC ; Palmtree::Math::Core::Internal::CalculateQ_X

; 792  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000e	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00011	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00014	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00017	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001a	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001d	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __E17217E9_pmc_divrem@cpp
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 793  :         __UNIT_TYPE u_index = q_index + v_buf_len;

  0002a	8b 45 14	 mov	 eax, DWORD PTR _q_index$[ebp]
  0002d	03 45 10	 add	 eax, DWORD PTR _v_buf_len$[ebp]
  00030	89 45 fc	 mov	 DWORD PTR _u_index$[ebp], eax

; 794  :         __UNIT_TYPE uj = u_buf[u_index];

  00033	8b 4d fc	 mov	 ecx, DWORD PTR _u_index$[ebp]
  00036	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  00039	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  0003c	89 45 f8	 mov	 DWORD PTR _uj$[ebp], eax

; 795  :         __UNIT_TYPE uj_1 = u_buf[u_index - 1];

  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _u_index$[ebp]
  00042	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  00045	8b 44 8a fc	 mov	 eax, DWORD PTR [edx+ecx*4-4]
  00049	89 45 f4	 mov	 DWORD PTR _uj_1$[ebp], eax

; 796  :         __UNIT_TYPE uj_2 = u_buf[u_index - 2];

  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _u_index$[ebp]
  0004f	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  00052	8b 44 8a f8	 mov	 eax, DWORD PTR [edx+ecx*4-8]
  00056	89 45 f0	 mov	 DWORD PTR _uj_2$[ebp], eax

; 797  :         __UNIT_TYPE v1 = v_buf[v_buf_len - 1];

  00059	8b 4d 10	 mov	 ecx, DWORD PTR _v_buf_len$[ebp]
  0005c	8b 55 0c	 mov	 edx, DWORD PTR _v_buf$[ebp]
  0005f	8b 44 8a fc	 mov	 eax, DWORD PTR [edx+ecx*4-4]
  00063	89 45 ec	 mov	 DWORD PTR _v1$[ebp], eax

; 798  :         __UNIT_TYPE v2 = v_buf[v_buf_len - 2];

  00066	8b 4d 10	 mov	 ecx, DWORD PTR _v_buf_len$[ebp]
  00069	8b 55 0c	 mov	 edx, DWORD PTR _v_buf$[ebp]
  0006c	8b 44 8a f8	 mov	 eax, DWORD PTR [edx+ecx*4-8]
  00070	89 45 e8	 mov	 DWORD PTR _v2$[ebp], eax

; 799  :         __UNIT_TYPE q_ = AsumeQ_(uj, uj_1, v1);

  00073	8b 4d ec	 mov	 ecx, DWORD PTR _v1$[ebp]
  00076	51		 push	 ecx
  00077	8b 55 f4	 mov	 edx, DWORD PTR _uj_1$[ebp]
  0007a	52		 push	 edx
  0007b	8b 45 f8	 mov	 eax, DWORD PTR _uj$[ebp]
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ?AsumeQ_@Internal@Core@Math@Palmtree@@YAIIII@Z ; Palmtree::Math::Core::Internal::AsumeQ_
  00084	83 c4 0c	 add	 esp, 12			; 0000000cH
  00087	89 45 e4	 mov	 DWORD PTR _q_$[ebp], eax

; 800  :         if (!CheckQ_X(q_, uj, uj_1, uj_2, v1, v2))

  0008a	8b 4d e8	 mov	 ecx, DWORD PTR _v2$[ebp]
  0008d	51		 push	 ecx
  0008e	8b 55 ec	 mov	 edx, DWORD PTR _v1$[ebp]
  00091	52		 push	 edx
  00092	8b 45 f0	 mov	 eax, DWORD PTR _uj_2$[ebp]
  00095	50		 push	 eax
  00096	8b 4d f4	 mov	 ecx, DWORD PTR _uj_1$[ebp]
  00099	51		 push	 ecx
  0009a	8b 55 f8	 mov	 edx, DWORD PTR _uj$[ebp]
  0009d	52		 push	 edx
  0009e	8b 45 e4	 mov	 eax, DWORD PTR _q_$[ebp]
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ?CheckQ_X@Internal@Core@Math@Palmtree@@YAHIIIIII@Z ; Palmtree::Math::Core::Internal::CheckQ_X
  000a7	83 c4 18	 add	 esp, 24			; 00000018H
  000aa	85 c0		 test	 eax, eax
  000ac	75 05		 jne	 SHORT $LN2@CalculateQ

; 801  :             return (q_);

  000ae	8b 45 e4	 mov	 eax, DWORD PTR _q_$[ebp]
  000b1	eb 3e		 jmp	 SHORT $LN1@CalculateQ
$LN2@CalculateQ:

; 802  :         --q_;

  000b3	8b 4d e4	 mov	 ecx, DWORD PTR _q_$[ebp]
  000b6	83 e9 01	 sub	 ecx, 1
  000b9	89 4d e4	 mov	 DWORD PTR _q_$[ebp], ecx

; 803  :         if (!CheckQ_X(q_, uj, uj_1, uj_2, v1, v2))

  000bc	8b 55 e8	 mov	 edx, DWORD PTR _v2$[ebp]
  000bf	52		 push	 edx
  000c0	8b 45 ec	 mov	 eax, DWORD PTR _v1$[ebp]
  000c3	50		 push	 eax
  000c4	8b 4d f0	 mov	 ecx, DWORD PTR _uj_2$[ebp]
  000c7	51		 push	 ecx
  000c8	8b 55 f4	 mov	 edx, DWORD PTR _uj_1$[ebp]
  000cb	52		 push	 edx
  000cc	8b 45 f8	 mov	 eax, DWORD PTR _uj$[ebp]
  000cf	50		 push	 eax
  000d0	8b 4d e4	 mov	 ecx, DWORD PTR _q_$[ebp]
  000d3	51		 push	 ecx
  000d4	e8 00 00 00 00	 call	 ?CheckQ_X@Internal@Core@Math@Palmtree@@YAHIIIIII@Z ; Palmtree::Math::Core::Internal::CheckQ_X
  000d9	83 c4 18	 add	 esp, 24			; 00000018H
  000dc	85 c0		 test	 eax, eax
  000de	75 05		 jne	 SHORT $LN3@CalculateQ

; 804  :             return (q_);

  000e0	8b 45 e4	 mov	 eax, DWORD PTR _q_$[ebp]
  000e3	eb 0c		 jmp	 SHORT $LN1@CalculateQ
$LN3@CalculateQ:

; 805  :         --q_;

  000e5	8b 55 e4	 mov	 edx, DWORD PTR _q_$[ebp]
  000e8	83 ea 01	 sub	 edx, 1
  000eb	89 55 e4	 mov	 DWORD PTR _q_$[ebp], edx

; 806  :         return (q_);

  000ee	8b 45 e4	 mov	 eax, DWORD PTR _q_$[ebp]
$LN1@CalculateQ:

; 807  :     }

  000f1	83 c4 1c	 add	 esp, 28			; 0000001cH
  000f4	3b ec		 cmp	 ebp, esp
  000f6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fb	8b e5		 mov	 esp, ebp
  000fd	5d		 pop	 ebp
  000fe	c3		 ret	 0
?CalculateQ_X@Internal@Core@Math@Palmtree@@YAIPAI0II@Z ENDP ; Palmtree::Math::Core::Internal::CalculateQ_X
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
_TEXT	SEGMENT
_q_$ = -28						; size = 4
_v2$ = -24						; size = 4
_v1$ = -20						; size = 4
_uj_2$ = -16						; size = 4
_uj_1$ = -12						; size = 4
_uj$ = -8						; size = 4
_u_index$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_v_buf$ = 12						; size = 4
_v_buf_len$ = 16					; size = 4
_q_index$ = 20						; size = 4
?CalculateQ_@Internal@Core@Math@Palmtree@@YAIPAI0II@Z PROC ; Palmtree::Math::Core::Internal::CalculateQ_

; 774  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000e	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00011	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00014	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00017	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001a	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001d	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __E17217E9_pmc_divrem@cpp
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 775  :         __UNIT_TYPE u_index = q_index + v_buf_len;

  0002a	8b 45 14	 mov	 eax, DWORD PTR _q_index$[ebp]
  0002d	03 45 10	 add	 eax, DWORD PTR _v_buf_len$[ebp]
  00030	89 45 fc	 mov	 DWORD PTR _u_index$[ebp], eax

; 776  :         __UNIT_TYPE uj = u_buf[u_index];

  00033	8b 4d fc	 mov	 ecx, DWORD PTR _u_index$[ebp]
  00036	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  00039	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  0003c	89 45 f8	 mov	 DWORD PTR _uj$[ebp], eax

; 777  :         __UNIT_TYPE uj_1 = u_buf[u_index - 1];

  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _u_index$[ebp]
  00042	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  00045	8b 44 8a fc	 mov	 eax, DWORD PTR [edx+ecx*4-4]
  00049	89 45 f4	 mov	 DWORD PTR _uj_1$[ebp], eax

; 778  :         __UNIT_TYPE uj_2 = u_buf[u_index - 2];

  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _u_index$[ebp]
  0004f	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  00052	8b 44 8a f8	 mov	 eax, DWORD PTR [edx+ecx*4-8]
  00056	89 45 f0	 mov	 DWORD PTR _uj_2$[ebp], eax

; 779  :         __UNIT_TYPE v1 = v_buf[v_buf_len - 1];

  00059	8b 4d 10	 mov	 ecx, DWORD PTR _v_buf_len$[ebp]
  0005c	8b 55 0c	 mov	 edx, DWORD PTR _v_buf$[ebp]
  0005f	8b 44 8a fc	 mov	 eax, DWORD PTR [edx+ecx*4-4]
  00063	89 45 ec	 mov	 DWORD PTR _v1$[ebp], eax

; 780  :         __UNIT_TYPE v2 = v_buf[v_buf_len - 2];

  00066	8b 4d 10	 mov	 ecx, DWORD PTR _v_buf_len$[ebp]
  00069	8b 55 0c	 mov	 edx, DWORD PTR _v_buf$[ebp]
  0006c	8b 44 8a f8	 mov	 eax, DWORD PTR [edx+ecx*4-8]
  00070	89 45 e8	 mov	 DWORD PTR _v2$[ebp], eax

; 781  :         __UNIT_TYPE q_ = AsumeQ_(uj, uj_1, v1);

  00073	8b 4d ec	 mov	 ecx, DWORD PTR _v1$[ebp]
  00076	51		 push	 ecx
  00077	8b 55 f4	 mov	 edx, DWORD PTR _uj_1$[ebp]
  0007a	52		 push	 edx
  0007b	8b 45 f8	 mov	 eax, DWORD PTR _uj$[ebp]
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ?AsumeQ_@Internal@Core@Math@Palmtree@@YAIIII@Z ; Palmtree::Math::Core::Internal::AsumeQ_
  00084	83 c4 0c	 add	 esp, 12			; 0000000cH
  00087	89 45 e4	 mov	 DWORD PTR _q_$[ebp], eax

; 782  :         if (!CheckQ_(q_, uj, uj_1, uj_2, v1, v2))

  0008a	8b 4d e8	 mov	 ecx, DWORD PTR _v2$[ebp]
  0008d	51		 push	 ecx
  0008e	8b 55 ec	 mov	 edx, DWORD PTR _v1$[ebp]
  00091	52		 push	 edx
  00092	8b 45 f0	 mov	 eax, DWORD PTR _uj_2$[ebp]
  00095	50		 push	 eax
  00096	8b 4d f4	 mov	 ecx, DWORD PTR _uj_1$[ebp]
  00099	51		 push	 ecx
  0009a	8b 55 f8	 mov	 edx, DWORD PTR _uj$[ebp]
  0009d	52		 push	 edx
  0009e	8b 45 e4	 mov	 eax, DWORD PTR _q_$[ebp]
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ?CheckQ_@Internal@Core@Math@Palmtree@@YAHIIIIII@Z ; Palmtree::Math::Core::Internal::CheckQ_
  000a7	83 c4 18	 add	 esp, 24			; 00000018H
  000aa	85 c0		 test	 eax, eax
  000ac	75 05		 jne	 SHORT $LN2@CalculateQ

; 783  :             return (q_);

  000ae	8b 45 e4	 mov	 eax, DWORD PTR _q_$[ebp]
  000b1	eb 3e		 jmp	 SHORT $LN1@CalculateQ
$LN2@CalculateQ:

; 784  :         --q_;

  000b3	8b 4d e4	 mov	 ecx, DWORD PTR _q_$[ebp]
  000b6	83 e9 01	 sub	 ecx, 1
  000b9	89 4d e4	 mov	 DWORD PTR _q_$[ebp], ecx

; 785  :         if (!CheckQ_(q_, uj, uj_1, uj_2, v1, v2))

  000bc	8b 55 e8	 mov	 edx, DWORD PTR _v2$[ebp]
  000bf	52		 push	 edx
  000c0	8b 45 ec	 mov	 eax, DWORD PTR _v1$[ebp]
  000c3	50		 push	 eax
  000c4	8b 4d f0	 mov	 ecx, DWORD PTR _uj_2$[ebp]
  000c7	51		 push	 ecx
  000c8	8b 55 f4	 mov	 edx, DWORD PTR _uj_1$[ebp]
  000cb	52		 push	 edx
  000cc	8b 45 f8	 mov	 eax, DWORD PTR _uj$[ebp]
  000cf	50		 push	 eax
  000d0	8b 4d e4	 mov	 ecx, DWORD PTR _q_$[ebp]
  000d3	51		 push	 ecx
  000d4	e8 00 00 00 00	 call	 ?CheckQ_@Internal@Core@Math@Palmtree@@YAHIIIIII@Z ; Palmtree::Math::Core::Internal::CheckQ_
  000d9	83 c4 18	 add	 esp, 24			; 00000018H
  000dc	85 c0		 test	 eax, eax
  000de	75 05		 jne	 SHORT $LN3@CalculateQ

; 786  :             return (q_);

  000e0	8b 45 e4	 mov	 eax, DWORD PTR _q_$[ebp]
  000e3	eb 0c		 jmp	 SHORT $LN1@CalculateQ
$LN3@CalculateQ:

; 787  :         --q_;

  000e5	8b 55 e4	 mov	 edx, DWORD PTR _q_$[ebp]
  000e8	83 ea 01	 sub	 edx, 1
  000eb	89 55 e4	 mov	 DWORD PTR _q_$[ebp], edx

; 788  :         return (q_);

  000ee	8b 45 e4	 mov	 eax, DWORD PTR _q_$[ebp]
$LN1@CalculateQ:

; 789  :     }

  000f1	83 c4 1c	 add	 esp, 28			; 0000001cH
  000f4	3b ec		 cmp	 ebp, esp
  000f6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fb	8b e5		 mov	 esp, ebp
  000fd	5d		 pop	 ebp
  000fe	c3		 ret	 0
?CalculateQ_@Internal@Core@Math@Palmtree@@YAIPAI0II@Z ENDP ; Palmtree::Math::Core::Internal::CalculateQ_
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
_TEXT	SEGMENT
tv92 = -72						; size = 4
tv83 = -65						; size = 1
tv85 = -64						; size = 4
_t_mi$ = -60						; size = 4
_t_hi$ = -52						; size = 4
_rh_lo$ = -44						; size = 4
_rh_mi$ = -36						; size = 4
_rh_hi$ = -24						; size = 4
_lh_lo$ = -16						; size = 4
_lh_mi$ = -8						; size = 4
_q_$ = 8						; size = 4
_uj$ = 12						; size = 4
_uj_1$ = 16						; size = 4
_uj_2$ = 20						; size = 4
_v1$ = 24						; size = 4
_v2$ = 28						; size = 4
?CheckQ_X@Internal@Core@Math@Palmtree@@YAHIIIIII@Z PROC	; Palmtree::Math::Core::Internal::CheckQ_X

; 738  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	57		 push	 edi
  00007	8d 7d b8	 lea	 edi, DWORD PTR [ebp-72]
  0000a	b9 12 00 00 00	 mov	 ecx, 18			; 00000012H
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET __E17217E9_pmc_divrem@cpp
  0001b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 739  :         __UNIT_TYPE lh_mi;
; 740  :         __UNIT_TYPE lh_lo = _MULTIPLYX_UNIT(v2, q_, &lh_mi);

  00020	8d 45 f8	 lea	 eax, DWORD PTR _lh_mi$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _q_$[ebp]
  00027	51		 push	 ecx
  00028	8b 55 1c	 mov	 edx, DWORD PTR _v2$[ebp]
  0002b	52		 push	 edx
  0002c	e8 00 00 00 00	 call	 __MULTIPLYX_UNIT
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH
  00034	89 45 f0	 mov	 DWORD PTR _lh_lo$[ebp], eax

; 741  :         __UNIT_TYPE rh_hi;
; 742  :         __UNIT_TYPE rh_mi;
; 743  :         __UNIT_TYPE rh_lo = uj_2;

  00037	8b 45 14	 mov	 eax, DWORD PTR _uj_2$[ebp]
  0003a	89 45 d4	 mov	 DWORD PTR _rh_lo$[ebp], eax

; 744  :         __UNIT_TYPE t_hi;
; 745  :         __UNIT_TYPE t_mi = _MULTIPLYX_UNIT(q_, v1, &t_hi);

  0003d	8d 4d cc	 lea	 ecx, DWORD PTR _t_hi$[ebp]
  00040	51		 push	 ecx
  00041	8b 55 18	 mov	 edx, DWORD PTR _v1$[ebp]
  00044	52		 push	 edx
  00045	8b 45 08	 mov	 eax, DWORD PTR _q_$[ebp]
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 __MULTIPLYX_UNIT
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00051	89 45 c4	 mov	 DWORD PTR _t_mi$[ebp], eax

; 746  : 
; 747  :         _SUBTRUCT_UNIT(_SUBTRUCT_UNIT(0, uj_1, t_mi, &rh_mi), uj, t_hi, &rh_hi);

  00054	8b 4d cc	 mov	 ecx, DWORD PTR _t_hi$[ebp]
  00057	89 4d c0	 mov	 DWORD PTR tv85[ebp], ecx
  0005a	8d 55 dc	 lea	 edx, DWORD PTR _rh_mi$[ebp]
  0005d	52		 push	 edx
  0005e	8b 45 c4	 mov	 eax, DWORD PTR _t_mi$[ebp]
  00061	50		 push	 eax
  00062	8b 4d 10	 mov	 ecx, DWORD PTR _uj_1$[ebp]
  00065	51		 push	 ecx
  00066	6a 00		 push	 0
  00068	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  0006d	83 c4 10	 add	 esp, 16			; 00000010H
  00070	88 45 bf	 mov	 BYTE PTR tv83[ebp], al
  00073	8d 55 e8	 lea	 edx, DWORD PTR _rh_hi$[ebp]
  00076	52		 push	 edx
  00077	8b 45 c0	 mov	 eax, DWORD PTR tv85[ebp]
  0007a	50		 push	 eax
  0007b	8b 4d 0c	 mov	 ecx, DWORD PTR _uj$[ebp]
  0007e	51		 push	 ecx
  0007f	0f b6 55 bf	 movzx	 edx, BYTE PTR tv83[ebp]
  00083	52		 push	 edx
  00084	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  00089	83 c4 10	 add	 esp, 16			; 00000010H

; 748  : 
; 749  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 750  :         if (sizeof(q_) == sizeof(_UINT64_T))

  0008c	33 c0		 xor	 eax, eax
  0008e	74 0c		 je	 SHORT $LN2@CheckQ_X

; 751  :             AddToMULTI64Counter(2);

  00090	6a 02		 push	 2
  00092	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
  00097	83 c4 04	 add	 esp, 4

; 752  :         else

  0009a	eb 0a		 jmp	 SHORT $LN3@CheckQ_X
$LN2@CheckQ_X:

; 753  :             AddToMULTI32Counter(2);

  0009c	6a 02		 push	 2
  0009e	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
  000a3	83 c4 04	 add	 esp, 4
$LN3@CheckQ_X:

; 754  : #endif
; 755  :         if (rh_hi > 0)

  000a6	83 7d e8 00	 cmp	 DWORD PTR _rh_hi$[ebp], 0
  000aa	76 06		 jbe	 SHORT $LN4@CheckQ_X

; 756  :         {
; 757  :             return (FALSE);

  000ac	33 c0		 xor	 eax, eax
  000ae	eb 3c		 jmp	 SHORT $LN1@CheckQ_X
  000b0	eb 3a		 jmp	 SHORT $LN1@CheckQ_X
$LN4@CheckQ_X:

; 758  :         }
; 759  :         else if (lh_mi > rh_mi)

  000b2	8b 4d f8	 mov	 ecx, DWORD PTR _lh_mi$[ebp]
  000b5	3b 4d dc	 cmp	 ecx, DWORD PTR _rh_mi$[ebp]
  000b8	76 09		 jbe	 SHORT $LN6@CheckQ_X

; 760  :         {
; 761  :             return (TRUE);

  000ba	b8 01 00 00 00	 mov	 eax, 1
  000bf	eb 2b		 jmp	 SHORT $LN1@CheckQ_X
  000c1	eb 29		 jmp	 SHORT $LN1@CheckQ_X
$LN6@CheckQ_X:

; 762  :         }
; 763  :         else if (lh_mi < rh_mi)

  000c3	8b 55 f8	 mov	 edx, DWORD PTR _lh_mi$[ebp]
  000c6	3b 55 dc	 cmp	 edx, DWORD PTR _rh_mi$[ebp]
  000c9	73 06		 jae	 SHORT $LN8@CheckQ_X

; 764  :         {
; 765  :             return (FALSE);

  000cb	33 c0		 xor	 eax, eax
  000cd	eb 1d		 jmp	 SHORT $LN1@CheckQ_X

; 766  :         }
; 767  :         else

  000cf	eb 1b		 jmp	 SHORT $LN1@CheckQ_X
$LN8@CheckQ_X:

; 768  :         {
; 769  :             return (lh_lo > rh_lo);

  000d1	8b 45 f0	 mov	 eax, DWORD PTR _lh_lo$[ebp]
  000d4	3b 45 d4	 cmp	 eax, DWORD PTR _rh_lo$[ebp]
  000d7	76 09		 jbe	 SHORT $LN11@CheckQ_X
  000d9	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv92[ebp], 1
  000e0	eb 07		 jmp	 SHORT $LN12@CheckQ_X
$LN11@CheckQ_X:
  000e2	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv92[ebp], 0
$LN12@CheckQ_X:
  000e9	8b 45 b8	 mov	 eax, DWORD PTR tv92[ebp]
$LN1@CheckQ_X:

; 770  :         }
; 771  :     }

  000ec	52		 push	 edx
  000ed	8b cd		 mov	 ecx, ebp
  000ef	50		 push	 eax
  000f0	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN18@CheckQ_X
  000f6	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000fb	58		 pop	 eax
  000fc	5a		 pop	 edx
  000fd	5f		 pop	 edi
  000fe	83 c4 48	 add	 esp, 72			; 00000048H
  00101	3b ec		 cmp	 ebp, esp
  00103	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c3		 ret	 0
$LN18@CheckQ_X:
  0010c	04 00 00 00	 DD	 4
  00110	00 00 00 00	 DD	 $LN17@CheckQ_X
$LN17@CheckQ_X:
  00114	f8 ff ff ff	 DD	 -8			; fffffff8H
  00118	04 00 00 00	 DD	 4
  0011c	00 00 00 00	 DD	 $LN13@CheckQ_X
  00120	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00124	04 00 00 00	 DD	 4
  00128	00 00 00 00	 DD	 $LN14@CheckQ_X
  0012c	dc ff ff ff	 DD	 -36			; ffffffdcH
  00130	04 00 00 00	 DD	 4
  00134	00 00 00 00	 DD	 $LN15@CheckQ_X
  00138	cc ff ff ff	 DD	 -52			; ffffffccH
  0013c	04 00 00 00	 DD	 4
  00140	00 00 00 00	 DD	 $LN16@CheckQ_X
$LN16@CheckQ_X:
  00144	74		 DB	 116			; 00000074H
  00145	5f		 DB	 95			; 0000005fH
  00146	68		 DB	 104			; 00000068H
  00147	69		 DB	 105			; 00000069H
  00148	00		 DB	 0
$LN15@CheckQ_X:
  00149	72		 DB	 114			; 00000072H
  0014a	68		 DB	 104			; 00000068H
  0014b	5f		 DB	 95			; 0000005fH
  0014c	6d		 DB	 109			; 0000006dH
  0014d	69		 DB	 105			; 00000069H
  0014e	00		 DB	 0
$LN14@CheckQ_X:
  0014f	72		 DB	 114			; 00000072H
  00150	68		 DB	 104			; 00000068H
  00151	5f		 DB	 95			; 0000005fH
  00152	68		 DB	 104			; 00000068H
  00153	69		 DB	 105			; 00000069H
  00154	00		 DB	 0
$LN13@CheckQ_X:
  00155	6c		 DB	 108			; 0000006cH
  00156	68		 DB	 104			; 00000068H
  00157	5f		 DB	 95			; 0000005fH
  00158	6d		 DB	 109			; 0000006dH
  00159	69		 DB	 105			; 00000069H
  0015a	00		 DB	 0
?CheckQ_X@Internal@Core@Math@Palmtree@@YAHIIIIII@Z ENDP	; Palmtree::Math::Core::Internal::CheckQ_X
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
_TEXT	SEGMENT
tv92 = -72						; size = 4
tv83 = -65						; size = 1
tv85 = -64						; size = 4
_t_mi$ = -60						; size = 4
_t_hi$ = -52						; size = 4
_rh_lo$ = -44						; size = 4
_rh_mi$ = -36						; size = 4
_rh_hi$ = -24						; size = 4
_lh_lo$ = -16						; size = 4
_lh_mi$ = -8						; size = 4
_q_$ = 8						; size = 4
_uj$ = 12						; size = 4
_uj_1$ = 16						; size = 4
_uj_2$ = 20						; size = 4
_v1$ = 24						; size = 4
_v2$ = 28						; size = 4
?CheckQ_@Internal@Core@Math@Palmtree@@YAHIIIIII@Z PROC	; Palmtree::Math::Core::Internal::CheckQ_

; 711  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	57		 push	 edi
  00007	8d 7d b8	 lea	 edi, DWORD PTR [ebp-72]
  0000a	b9 12 00 00 00	 mov	 ecx, 18			; 00000012H
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET __E17217E9_pmc_divrem@cpp
  0001b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 712  :         __UNIT_TYPE lh_mi;
; 713  :         __UNIT_TYPE lh_lo = _MULTIPLY_UNIT(v2, q_, &lh_mi);

  00020	8d 45 f8	 lea	 eax, DWORD PTR _lh_mi$[ebp]
  00023	50		 push	 eax
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _q_$[ebp]
  00027	51		 push	 ecx
  00028	8b 55 1c	 mov	 edx, DWORD PTR _v2$[ebp]
  0002b	52		 push	 edx
  0002c	e8 00 00 00 00	 call	 __MULTIPLY_UNIT
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH
  00034	89 45 f0	 mov	 DWORD PTR _lh_lo$[ebp], eax

; 714  :         __UNIT_TYPE rh_hi;
; 715  :         __UNIT_TYPE rh_mi;
; 716  :         __UNIT_TYPE rh_lo = uj_2;

  00037	8b 45 14	 mov	 eax, DWORD PTR _uj_2$[ebp]
  0003a	89 45 d4	 mov	 DWORD PTR _rh_lo$[ebp], eax

; 717  :         __UNIT_TYPE t_hi;
; 718  :         __UNIT_TYPE t_mi = _MULTIPLY_UNIT(q_, v1, &t_hi);

  0003d	8d 4d cc	 lea	 ecx, DWORD PTR _t_hi$[ebp]
  00040	51		 push	 ecx
  00041	8b 55 18	 mov	 edx, DWORD PTR _v1$[ebp]
  00044	52		 push	 edx
  00045	8b 45 08	 mov	 eax, DWORD PTR _q_$[ebp]
  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 __MULTIPLY_UNIT
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00051	89 45 c4	 mov	 DWORD PTR _t_mi$[ebp], eax

; 719  :         _SUBTRUCT_UNIT(_SUBTRUCT_UNIT(0, uj_1, t_mi, &rh_mi), uj, t_hi, &rh_hi);

  00054	8b 4d cc	 mov	 ecx, DWORD PTR _t_hi$[ebp]
  00057	89 4d c0	 mov	 DWORD PTR tv85[ebp], ecx
  0005a	8d 55 dc	 lea	 edx, DWORD PTR _rh_mi$[ebp]
  0005d	52		 push	 edx
  0005e	8b 45 c4	 mov	 eax, DWORD PTR _t_mi$[ebp]
  00061	50		 push	 eax
  00062	8b 4d 10	 mov	 ecx, DWORD PTR _uj_1$[ebp]
  00065	51		 push	 ecx
  00066	6a 00		 push	 0
  00068	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  0006d	83 c4 10	 add	 esp, 16			; 00000010H
  00070	88 45 bf	 mov	 BYTE PTR tv83[ebp], al
  00073	8d 55 e8	 lea	 edx, DWORD PTR _rh_hi$[ebp]
  00076	52		 push	 edx
  00077	8b 45 c0	 mov	 eax, DWORD PTR tv85[ebp]
  0007a	50		 push	 eax
  0007b	8b 4d 0c	 mov	 ecx, DWORD PTR _uj$[ebp]
  0007e	51		 push	 ecx
  0007f	0f b6 55 bf	 movzx	 edx, BYTE PTR tv83[ebp]
  00083	52		 push	 edx
  00084	e8 00 00 00 00	 call	 __SUBTRUCT_UNIT
  00089	83 c4 10	 add	 esp, 16			; 00000010H

; 720  : 
; 721  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 722  :         if (sizeof(q_) == sizeof(_UINT64_T))

  0008c	33 c0		 xor	 eax, eax
  0008e	74 0c		 je	 SHORT $LN2@CheckQ_

; 723  :             AddToMULTI64Counter(2);

  00090	6a 02		 push	 2
  00092	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
  00097	83 c4 04	 add	 esp, 4

; 724  :         else

  0009a	eb 0a		 jmp	 SHORT $LN3@CheckQ_
$LN2@CheckQ_:

; 725  :             AddToMULTI32Counter(2);

  0009c	6a 02		 push	 2
  0009e	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
  000a3	83 c4 04	 add	 esp, 4
$LN3@CheckQ_:

; 726  : #endif
; 727  :         if (rh_hi > 0)

  000a6	83 7d e8 00	 cmp	 DWORD PTR _rh_hi$[ebp], 0
  000aa	76 06		 jbe	 SHORT $LN4@CheckQ_

; 728  :             return (FALSE);

  000ac	33 c0		 xor	 eax, eax
  000ae	eb 3c		 jmp	 SHORT $LN1@CheckQ_
  000b0	eb 3a		 jmp	 SHORT $LN1@CheckQ_
$LN4@CheckQ_:

; 729  :         else if (lh_mi > rh_mi)

  000b2	8b 4d f8	 mov	 ecx, DWORD PTR _lh_mi$[ebp]
  000b5	3b 4d dc	 cmp	 ecx, DWORD PTR _rh_mi$[ebp]
  000b8	76 09		 jbe	 SHORT $LN6@CheckQ_

; 730  :             return (TRUE);

  000ba	b8 01 00 00 00	 mov	 eax, 1
  000bf	eb 2b		 jmp	 SHORT $LN1@CheckQ_
  000c1	eb 29		 jmp	 SHORT $LN1@CheckQ_
$LN6@CheckQ_:

; 731  :         else if (lh_mi < rh_mi)

  000c3	8b 55 f8	 mov	 edx, DWORD PTR _lh_mi$[ebp]
  000c6	3b 55 dc	 cmp	 edx, DWORD PTR _rh_mi$[ebp]
  000c9	73 06		 jae	 SHORT $LN8@CheckQ_

; 732  :             return (FALSE);

  000cb	33 c0		 xor	 eax, eax
  000cd	eb 1d		 jmp	 SHORT $LN1@CheckQ_

; 733  :         else

  000cf	eb 1b		 jmp	 SHORT $LN1@CheckQ_
$LN8@CheckQ_:

; 734  :             return (lh_lo > rh_lo);

  000d1	8b 45 f0	 mov	 eax, DWORD PTR _lh_lo$[ebp]
  000d4	3b 45 d4	 cmp	 eax, DWORD PTR _rh_lo$[ebp]
  000d7	76 09		 jbe	 SHORT $LN11@CheckQ_
  000d9	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv92[ebp], 1
  000e0	eb 07		 jmp	 SHORT $LN12@CheckQ_
$LN11@CheckQ_:
  000e2	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv92[ebp], 0
$LN12@CheckQ_:
  000e9	8b 45 b8	 mov	 eax, DWORD PTR tv92[ebp]
$LN1@CheckQ_:

; 735  :     }

  000ec	52		 push	 edx
  000ed	8b cd		 mov	 ecx, ebp
  000ef	50		 push	 eax
  000f0	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN18@CheckQ_
  000f6	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000fb	58		 pop	 eax
  000fc	5a		 pop	 edx
  000fd	5f		 pop	 edi
  000fe	83 c4 48	 add	 esp, 72			; 00000048H
  00101	3b ec		 cmp	 ebp, esp
  00103	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c3		 ret	 0
$LN18@CheckQ_:
  0010c	04 00 00 00	 DD	 4
  00110	00 00 00 00	 DD	 $LN17@CheckQ_
$LN17@CheckQ_:
  00114	f8 ff ff ff	 DD	 -8			; fffffff8H
  00118	04 00 00 00	 DD	 4
  0011c	00 00 00 00	 DD	 $LN13@CheckQ_
  00120	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00124	04 00 00 00	 DD	 4
  00128	00 00 00 00	 DD	 $LN14@CheckQ_
  0012c	dc ff ff ff	 DD	 -36			; ffffffdcH
  00130	04 00 00 00	 DD	 4
  00134	00 00 00 00	 DD	 $LN15@CheckQ_
  00138	cc ff ff ff	 DD	 -52			; ffffffccH
  0013c	04 00 00 00	 DD	 4
  00140	00 00 00 00	 DD	 $LN16@CheckQ_
$LN16@CheckQ_:
  00144	74		 DB	 116			; 00000074H
  00145	5f		 DB	 95			; 0000005fH
  00146	68		 DB	 104			; 00000068H
  00147	69		 DB	 105			; 00000069H
  00148	00		 DB	 0
$LN15@CheckQ_:
  00149	72		 DB	 114			; 00000072H
  0014a	68		 DB	 104			; 00000068H
  0014b	5f		 DB	 95			; 0000005fH
  0014c	6d		 DB	 109			; 0000006dH
  0014d	69		 DB	 105			; 00000069H
  0014e	00		 DB	 0
$LN14@CheckQ_:
  0014f	72		 DB	 114			; 00000072H
  00150	68		 DB	 104			; 00000068H
  00151	5f		 DB	 95			; 0000005fH
  00152	68		 DB	 104			; 00000068H
  00153	69		 DB	 105			; 00000069H
  00154	00		 DB	 0
$LN13@CheckQ_:
  00155	6c		 DB	 108			; 0000006cH
  00156	68		 DB	 104			; 00000068H
  00157	5f		 DB	 95			; 0000005fH
  00158	6d		 DB	 109			; 0000006dH
  00159	69		 DB	 105			; 00000069H
  0015a	00		 DB	 0
?CheckQ_@Internal@Core@Math@Palmtree@@YAHIIIIII@Z ENDP	; Palmtree::Math::Core::Internal::CheckQ_
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
_TEXT	SEGMENT
_q$ = -16						; size = 4
_r$ = -8						; size = 4
_uj$ = 8						; size = 4
_uj_1$ = 12						; size = 4
_v1$ = 16						; size = 4
?AsumeQ_@Internal@Core@Math@Palmtree@@YAIIII@Z PROC	; Palmtree::Math::Core::Internal::AsumeQ_

; 696  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __E17217E9_pmc_divrem@cpp
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 697  :         if (uj == v1)

  00021	8b 45 08	 mov	 eax, DWORD PTR _uj$[ebp]
  00024	3b 45 10	 cmp	 eax, DWORD PTR _v1$[ebp]
  00027	75 05		 jne	 SHORT $LN2@AsumeQ_

; 698  :             return (-1);

  00029	83 c8 ff	 or	 eax, -1
  0002c	eb 2e		 jmp	 SHORT $LN1@AsumeQ_
$LN2@AsumeQ_:

; 699  :         __UNIT_TYPE r;
; 700  :         __UNIT_TYPE q = _DIVREM_UNIT(uj, uj_1, v1, &r);

  0002e	8d 4d f8	 lea	 ecx, DWORD PTR _r$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 10	 mov	 edx, DWORD PTR _v1$[ebp]
  00035	52		 push	 edx
  00036	8b 45 0c	 mov	 eax, DWORD PTR _uj_1$[ebp]
  00039	50		 push	 eax
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _uj$[ebp]
  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 __DIVREM_UNIT
  00043	83 c4 10	 add	 esp, 16			; 00000010H
  00046	89 45 f0	 mov	 DWORD PTR _q$[ebp], eax

; 701  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 702  :         if (sizeof(v1) == sizeof(_UINT64_T))

  00049	33 d2		 xor	 edx, edx
  0004b	74 07		 je	 SHORT $LN3@AsumeQ_

; 703  :             IncrementDIV64Counter();

  0004d	e8 00 00 00 00	 call	 ?IncrementDIV64Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementDIV64Counter

; 704  :         else

  00052	eb 05		 jmp	 SHORT $LN4@AsumeQ_
$LN3@AsumeQ_:

; 705  :             IncrementDIV32Counter();

  00054	e8 00 00 00 00	 call	 ?IncrementDIV32Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementDIV32Counter
$LN4@AsumeQ_:

; 706  : #endif
; 707  :         return (q);

  00059	8b 45 f0	 mov	 eax, DWORD PTR _q$[ebp]
$LN1@AsumeQ_:

; 708  :     }

  0005c	52		 push	 edx
  0005d	8b cd		 mov	 ecx, ebp
  0005f	50		 push	 eax
  00060	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@AsumeQ_
  00066	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0006b	58		 pop	 eax
  0006c	5a		 pop	 edx
  0006d	83 c4 10	 add	 esp, 16			; 00000010H
  00070	3b ec		 cmp	 ebp, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
  0007b	90		 npad	 1
$LN8@AsumeQ_:
  0007c	01 00 00 00	 DD	 1
  00080	00 00 00 00	 DD	 $LN7@AsumeQ_
$LN7@AsumeQ_:
  00084	f8 ff ff ff	 DD	 -8			; fffffff8H
  00088	04 00 00 00	 DD	 4
  0008c	00 00 00 00	 DD	 $LN6@AsumeQ_
$LN6@AsumeQ_:
  00090	72		 DB	 114			; 00000072H
  00091	00		 DB	 0
?AsumeQ_@Internal@Core@Math@Palmtree@@YAIIII@Z ENDP	; Palmtree::Math::Core::Internal::AsumeQ_
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_2WORDS_ADCX PROC

; 2228 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __E05E7037_autogenerated_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 2229 : #ifdef _MSC_VER
; 2230 :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

  0000d	b8 04 00 00 00	 mov	 eax, 4
  00012	6b c8 00	 imul	 ecx, eax, 0
  00015	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00018	51		 push	 ecx
  00019	ba 04 00 00 00	 mov	 edx, 4
  0001e	6b c2 00	 imul	 eax, edx, 0
  00021	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00024	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00027	52		 push	 edx
  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  00033	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00036	50		 push	 eax
  00037	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 __ADDX_UNIT
  00041	83 c4 10	 add	 esp, 16			; 00000010H
  00044	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 2231 :     c = _ADDX_UNIT(c, xp[1], yp[1], &zp[1]);

  00047	ba 04 00 00 00	 mov	 edx, 4
  0004c	c1 e2 00	 shl	 edx, 0
  0004f	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00052	52		 push	 edx
  00053	b8 04 00 00 00	 mov	 eax, 4
  00058	c1 e0 00	 shl	 eax, 0
  0005b	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0005e	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00061	52		 push	 edx
  00062	b8 04 00 00 00	 mov	 eax, 4
  00067	c1 e0 00	 shl	 eax, 0
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  0006d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00070	52		 push	 edx
  00071	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 __ADDX_UNIT
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 2232 : #elif defined(__GNUC__)
; 2233 : #ifdef _M_IX86
; 2234 :     __asm__ volatile (
; 2235 :         "addb\t$-1, %0\n\t"
; 2236 :         "movl\t(%1), %%ecx\n\t"
; 2237 :         "adcxl\t(%2), %%ecx\n\t"
; 2238 :         "movl\t%%ecx, (%3)\n\t"
; 2239 :         "movl\t4(%1), %%ecx\n\t"
; 2240 :         "adcxl\t4(%2), %%ecx\n\t"
; 2241 :         "movl\t%%ecx, 4(%3)\n\t"
; 2242 :         "setc\t%0"
; 2243 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2244 :         :
; 2245 :         : "cc", "memory", "%ecx"
; 2246 : );
; 2247 : #elif defined(_M_X64)
; 2248 :     __asm__ volatile (
; 2249 :         "addb\t$-1, %0\n\t"
; 2250 :         "movq\t(%1), %%rcx\n\t"
; 2251 :         "adcxq\t(%2), %%rcx\n\t"
; 2252 :         "movq\t%%rcx, (%3)\n\t"
; 2253 :         "movq\t8(%1), %%rcx\n\t"
; 2254 :         "adcxq\t8(%2), %%rcx\n\t"
; 2255 :         "movq\t%%rcx, 8(%3)\n\t"
; 2256 :         "setc\t%0"
; 2257 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2258 :         :
; 2259 :         : "cc", "memory", "%rcx"
; 2260 : );
; 2261 : #else
; 2262 : #error unknown platform
; 2263 : #endif
; 2264 : #else
; 2265 : #error unknown compiler
; 2266 : #endif
; 2267 :     return (c);

  00081	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]

; 2268 : }

  00084	3b ec		 cmp	 ebp, esp
  00086	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008b	5d		 pop	 ebp
  0008c	c3		 ret	 0
__ADD_2WORDS_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_2WORDS_ADC PROC

; 2185 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __E05E7037_autogenerated_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 2186 : #ifdef _MSC_VER
; 2187 :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

  0000d	b8 04 00 00 00	 mov	 eax, 4
  00012	6b c8 00	 imul	 ecx, eax, 0
  00015	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00018	51		 push	 ecx
  00019	ba 04 00 00 00	 mov	 edx, 4
  0001e	6b c2 00	 imul	 eax, edx, 0
  00021	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00024	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00027	52		 push	 edx
  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  00033	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00036	50		 push	 eax
  00037	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 __ADD_UNIT
  00041	83 c4 10	 add	 esp, 16			; 00000010H
  00044	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 2188 :     c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);

  00047	ba 04 00 00 00	 mov	 edx, 4
  0004c	c1 e2 00	 shl	 edx, 0
  0004f	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00052	52		 push	 edx
  00053	b8 04 00 00 00	 mov	 eax, 4
  00058	c1 e0 00	 shl	 eax, 0
  0005b	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0005e	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00061	52		 push	 edx
  00062	b8 04 00 00 00	 mov	 eax, 4
  00067	c1 e0 00	 shl	 eax, 0
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  0006d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00070	52		 push	 edx
  00071	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 __ADD_UNIT
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 2189 : #elif defined(__GNUC__)
; 2190 : #ifdef _M_IX86
; 2191 :     __asm__ volatile (
; 2192 :         "addb\t$-1, %0\n\t"
; 2193 :         "movl\t(%1), %%ecx\n\t"
; 2194 :         "adcl\t(%2), %%ecx\n\t"
; 2195 :         "movl\t%%ecx, (%3)\n\t"
; 2196 :         "movl\t4(%1), %%ecx\n\t"
; 2197 :         "adcl\t4(%2), %%ecx\n\t"
; 2198 :         "movl\t%%ecx, 4(%3)\n\t"
; 2199 :         "setc\t%0"
; 2200 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2201 :         :
; 2202 :         : "cc", "memory", "%ecx"
; 2203 : );
; 2204 : #elif defined(_M_X64)
; 2205 :     __asm__ volatile (
; 2206 :         "addb\t$-1, %0\n\t"
; 2207 :         "movq\t(%1), %%rcx\n\t"
; 2208 :         "adcq\t(%2), %%rcx\n\t"
; 2209 :         "movq\t%%rcx, (%3)\n\t"
; 2210 :         "movq\t8(%1), %%rcx\n\t"
; 2211 :         "adcq\t8(%2), %%rcx\n\t"
; 2212 :         "movq\t%%rcx, 8(%3)\n\t"
; 2213 :         "setc\t%0"
; 2214 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2215 :         :
; 2216 :         : "cc", "memory", "%rcx"
; 2217 : );
; 2218 : #else
; 2219 : #error unknown platform
; 2220 : #endif
; 2221 : #else
; 2222 : #error unknown compiler
; 2223 : #endif
; 2224 :     return (c);

  00081	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]

; 2225 : }

  00084	3b ec		 cmp	 ebp, esp
  00086	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008b	5d		 pop	 ebp
  0008c	c3		 ret	 0
__ADD_2WORDS_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_4WORDS_ADCX PROC

; 2014 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __E05E7037_autogenerated_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 2015 : #ifdef _MSC_VER
; 2016 :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

  0000d	b8 04 00 00 00	 mov	 eax, 4
  00012	6b c8 00	 imul	 ecx, eax, 0
  00015	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00018	51		 push	 ecx
  00019	ba 04 00 00 00	 mov	 edx, 4
  0001e	6b c2 00	 imul	 eax, edx, 0
  00021	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00024	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00027	52		 push	 edx
  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  00033	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00036	50		 push	 eax
  00037	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 __ADDX_UNIT
  00041	83 c4 10	 add	 esp, 16			; 00000010H
  00044	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 2017 :     c = _ADDX_UNIT(c, xp[1], yp[1], &zp[1]);

  00047	ba 04 00 00 00	 mov	 edx, 4
  0004c	c1 e2 00	 shl	 edx, 0
  0004f	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00052	52		 push	 edx
  00053	b8 04 00 00 00	 mov	 eax, 4
  00058	c1 e0 00	 shl	 eax, 0
  0005b	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0005e	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00061	52		 push	 edx
  00062	b8 04 00 00 00	 mov	 eax, 4
  00067	c1 e0 00	 shl	 eax, 0
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  0006d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00070	52		 push	 edx
  00071	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 __ADDX_UNIT
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 2018 :     c = _ADDX_UNIT(c, xp[2], yp[2], &zp[2]);

  00081	b9 04 00 00 00	 mov	 ecx, 4
  00086	d1 e1		 shl	 ecx, 1
  00088	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  0008b	51		 push	 ecx
  0008c	ba 04 00 00 00	 mov	 edx, 4
  00091	d1 e2		 shl	 edx, 1
  00093	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00096	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00099	51		 push	 ecx
  0009a	ba 04 00 00 00	 mov	 edx, 4
  0009f	d1 e2		 shl	 edx, 1
  000a1	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  000a4	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  000a7	51		 push	 ecx
  000a8	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  000ac	52		 push	 edx
  000ad	e8 00 00 00 00	 call	 __ADDX_UNIT
  000b2	83 c4 10	 add	 esp, 16			; 00000010H
  000b5	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 2019 :     c = _ADDX_UNIT(c, xp[3], yp[3], &zp[3]);

  000b8	b8 04 00 00 00	 mov	 eax, 4
  000bd	6b c8 03	 imul	 ecx, eax, 3
  000c0	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  000c3	51		 push	 ecx
  000c4	ba 04 00 00 00	 mov	 edx, 4
  000c9	6b c2 03	 imul	 eax, edx, 3
  000cc	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  000cf	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  000d2	52		 push	 edx
  000d3	b8 04 00 00 00	 mov	 eax, 4
  000d8	6b c8 03	 imul	 ecx, eax, 3
  000db	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  000de	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  000e1	50		 push	 eax
  000e2	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  000e6	51		 push	 ecx
  000e7	e8 00 00 00 00	 call	 __ADDX_UNIT
  000ec	83 c4 10	 add	 esp, 16			; 00000010H
  000ef	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 2020 : #elif defined(__GNUC__)
; 2021 : #ifdef _M_IX86
; 2022 :     __asm__ volatile (
; 2023 :         "addb\t$-1, %0\n\t"
; 2024 :         "movl\t(%1), %%ecx\n\t"
; 2025 :         "adcxl\t(%2), %%ecx\n\t"
; 2026 :         "movl\t%%ecx, (%3)\n\t"
; 2027 :         "movl\t4(%1), %%ecx\n\t"
; 2028 :         "adcxl\t4(%2), %%ecx\n\t"
; 2029 :         "movl\t%%ecx, 4(%3)\n\t"
; 2030 :         "movl\t8(%1), %%ecx\n\t"
; 2031 :         "adcxl\t8(%2), %%ecx\n\t"
; 2032 :         "movl\t%%ecx, 8(%3)\n\t"
; 2033 :         "movl\t12(%1), %%ecx\n\t"
; 2034 :         "adcxl\t12(%2), %%ecx\n\t"
; 2035 :         "movl\t%%ecx, 12(%3)\n\t"
; 2036 :         "setc\t%0"
; 2037 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2038 :         :
; 2039 :         : "cc", "memory", "%ecx"
; 2040 : );
; 2041 : #elif defined(_M_X64)
; 2042 :     __asm__ volatile (
; 2043 :         "addb\t$-1, %0\n\t"
; 2044 :         "movq\t(%1), %%rcx\n\t"
; 2045 :         "adcxq\t(%2), %%rcx\n\t"
; 2046 :         "movq\t%%rcx, (%3)\n\t"
; 2047 :         "movq\t8(%1), %%rcx\n\t"
; 2048 :         "adcxq\t8(%2), %%rcx\n\t"
; 2049 :         "movq\t%%rcx, 8(%3)\n\t"
; 2050 :         "movq\t16(%1), %%rcx\n\t"
; 2051 :         "adcxq\t16(%2), %%rcx\n\t"
; 2052 :         "movq\t%%rcx, 16(%3)\n\t"
; 2053 :         "movq\t24(%1), %%rcx\n\t"
; 2054 :         "adcxq\t24(%2), %%rcx\n\t"
; 2055 :         "movq\t%%rcx, 24(%3)\n\t"
; 2056 :         "setc\t%0"
; 2057 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2058 :         :
; 2059 :         : "cc", "memory", "%rcx"
; 2060 : );
; 2061 : #else
; 2062 : #error unknown platform
; 2063 : #endif
; 2064 : #else
; 2065 : #error unknown compiler
; 2066 : #endif
; 2067 :     return (c);

  000f2	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]

; 2068 : }

  000f5	3b ec		 cmp	 ebp, esp
  000f7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fc	5d		 pop	 ebp
  000fd	c3		 ret	 0
__ADD_4WORDS_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_4WORDS_ADC PROC

; 1957 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __E05E7037_autogenerated_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1958 : #ifdef _MSC_VER
; 1959 :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

  0000d	b8 04 00 00 00	 mov	 eax, 4
  00012	6b c8 00	 imul	 ecx, eax, 0
  00015	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00018	51		 push	 ecx
  00019	ba 04 00 00 00	 mov	 edx, 4
  0001e	6b c2 00	 imul	 eax, edx, 0
  00021	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00024	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00027	52		 push	 edx
  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  00033	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00036	50		 push	 eax
  00037	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 __ADD_UNIT
  00041	83 c4 10	 add	 esp, 16			; 00000010H
  00044	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1960 :     c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);

  00047	ba 04 00 00 00	 mov	 edx, 4
  0004c	c1 e2 00	 shl	 edx, 0
  0004f	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00052	52		 push	 edx
  00053	b8 04 00 00 00	 mov	 eax, 4
  00058	c1 e0 00	 shl	 eax, 0
  0005b	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0005e	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00061	52		 push	 edx
  00062	b8 04 00 00 00	 mov	 eax, 4
  00067	c1 e0 00	 shl	 eax, 0
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  0006d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00070	52		 push	 edx
  00071	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 __ADD_UNIT
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1961 :     c = _ADD_UNIT(c, xp[2], yp[2], &zp[2]);

  00081	b9 04 00 00 00	 mov	 ecx, 4
  00086	d1 e1		 shl	 ecx, 1
  00088	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  0008b	51		 push	 ecx
  0008c	ba 04 00 00 00	 mov	 edx, 4
  00091	d1 e2		 shl	 edx, 1
  00093	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00096	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00099	51		 push	 ecx
  0009a	ba 04 00 00 00	 mov	 edx, 4
  0009f	d1 e2		 shl	 edx, 1
  000a1	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  000a4	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  000a7	51		 push	 ecx
  000a8	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  000ac	52		 push	 edx
  000ad	e8 00 00 00 00	 call	 __ADD_UNIT
  000b2	83 c4 10	 add	 esp, 16			; 00000010H
  000b5	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1962 :     c = _ADD_UNIT(c, xp[3], yp[3], &zp[3]);

  000b8	b8 04 00 00 00	 mov	 eax, 4
  000bd	6b c8 03	 imul	 ecx, eax, 3
  000c0	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  000c3	51		 push	 ecx
  000c4	ba 04 00 00 00	 mov	 edx, 4
  000c9	6b c2 03	 imul	 eax, edx, 3
  000cc	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  000cf	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  000d2	52		 push	 edx
  000d3	b8 04 00 00 00	 mov	 eax, 4
  000d8	6b c8 03	 imul	 ecx, eax, 3
  000db	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  000de	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  000e1	50		 push	 eax
  000e2	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  000e6	51		 push	 ecx
  000e7	e8 00 00 00 00	 call	 __ADD_UNIT
  000ec	83 c4 10	 add	 esp, 16			; 00000010H
  000ef	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1963 : #elif defined(__GNUC__)
; 1964 : #ifdef _M_IX86
; 1965 :     __asm__ volatile (
; 1966 :         "addb\t$-1, %0\n\t"
; 1967 :         "movl\t(%1), %%ecx\n\t"
; 1968 :         "adcl\t(%2), %%ecx\n\t"
; 1969 :         "movl\t%%ecx, (%3)\n\t"
; 1970 :         "movl\t4(%1), %%ecx\n\t"
; 1971 :         "adcl\t4(%2), %%ecx\n\t"
; 1972 :         "movl\t%%ecx, 4(%3)\n\t"
; 1973 :         "movl\t8(%1), %%ecx\n\t"
; 1974 :         "adcl\t8(%2), %%ecx\n\t"
; 1975 :         "movl\t%%ecx, 8(%3)\n\t"
; 1976 :         "movl\t12(%1), %%ecx\n\t"
; 1977 :         "adcl\t12(%2), %%ecx\n\t"
; 1978 :         "movl\t%%ecx, 12(%3)\n\t"
; 1979 :         "setc\t%0"
; 1980 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1981 :         :
; 1982 :         : "cc", "memory", "%ecx"
; 1983 : );
; 1984 : #elif defined(_M_X64)
; 1985 :     __asm__ volatile (
; 1986 :         "addb\t$-1, %0\n\t"
; 1987 :         "movq\t(%1), %%rcx\n\t"
; 1988 :         "adcq\t(%2), %%rcx\n\t"
; 1989 :         "movq\t%%rcx, (%3)\n\t"
; 1990 :         "movq\t8(%1), %%rcx\n\t"
; 1991 :         "adcq\t8(%2), %%rcx\n\t"
; 1992 :         "movq\t%%rcx, 8(%3)\n\t"
; 1993 :         "movq\t16(%1), %%rcx\n\t"
; 1994 :         "adcq\t16(%2), %%rcx\n\t"
; 1995 :         "movq\t%%rcx, 16(%3)\n\t"
; 1996 :         "movq\t24(%1), %%rcx\n\t"
; 1997 :         "adcq\t24(%2), %%rcx\n\t"
; 1998 :         "movq\t%%rcx, 24(%3)\n\t"
; 1999 :         "setc\t%0"
; 2000 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2001 :         :
; 2002 :         : "cc", "memory", "%rcx"
; 2003 : );
; 2004 : #else
; 2005 : #error unknown platform
; 2006 : #endif
; 2007 : #else
; 2008 : #error unknown compiler
; 2009 : #endif
; 2010 :     return (c);

  000f2	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]

; 2011 : }

  000f5	3b ec		 cmp	 ebp, esp
  000f7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fc	5d		 pop	 ebp
  000fd	c3		 ret	 0
__ADD_4WORDS_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_8WORDS_ADCX PROC

; 1702 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __E05E7037_autogenerated_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1703 : #ifdef _MSC_VER
; 1704 :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

  0000d	b8 04 00 00 00	 mov	 eax, 4
  00012	6b c8 00	 imul	 ecx, eax, 0
  00015	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00018	51		 push	 ecx
  00019	ba 04 00 00 00	 mov	 edx, 4
  0001e	6b c2 00	 imul	 eax, edx, 0
  00021	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00024	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00027	52		 push	 edx
  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  00033	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00036	50		 push	 eax
  00037	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 __ADDX_UNIT
  00041	83 c4 10	 add	 esp, 16			; 00000010H
  00044	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1705 :     c = _ADDX_UNIT(c, xp[1], yp[1], &zp[1]);

  00047	ba 04 00 00 00	 mov	 edx, 4
  0004c	c1 e2 00	 shl	 edx, 0
  0004f	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00052	52		 push	 edx
  00053	b8 04 00 00 00	 mov	 eax, 4
  00058	c1 e0 00	 shl	 eax, 0
  0005b	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0005e	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00061	52		 push	 edx
  00062	b8 04 00 00 00	 mov	 eax, 4
  00067	c1 e0 00	 shl	 eax, 0
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  0006d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00070	52		 push	 edx
  00071	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 __ADDX_UNIT
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1706 :     c = _ADDX_UNIT(c, xp[2], yp[2], &zp[2]);

  00081	b9 04 00 00 00	 mov	 ecx, 4
  00086	d1 e1		 shl	 ecx, 1
  00088	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  0008b	51		 push	 ecx
  0008c	ba 04 00 00 00	 mov	 edx, 4
  00091	d1 e2		 shl	 edx, 1
  00093	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00096	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00099	51		 push	 ecx
  0009a	ba 04 00 00 00	 mov	 edx, 4
  0009f	d1 e2		 shl	 edx, 1
  000a1	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  000a4	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  000a7	51		 push	 ecx
  000a8	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  000ac	52		 push	 edx
  000ad	e8 00 00 00 00	 call	 __ADDX_UNIT
  000b2	83 c4 10	 add	 esp, 16			; 00000010H
  000b5	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1707 :     c = _ADDX_UNIT(c, xp[3], yp[3], &zp[3]);

  000b8	b8 04 00 00 00	 mov	 eax, 4
  000bd	6b c8 03	 imul	 ecx, eax, 3
  000c0	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  000c3	51		 push	 ecx
  000c4	ba 04 00 00 00	 mov	 edx, 4
  000c9	6b c2 03	 imul	 eax, edx, 3
  000cc	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  000cf	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  000d2	52		 push	 edx
  000d3	b8 04 00 00 00	 mov	 eax, 4
  000d8	6b c8 03	 imul	 ecx, eax, 3
  000db	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  000de	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  000e1	50		 push	 eax
  000e2	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  000e6	51		 push	 ecx
  000e7	e8 00 00 00 00	 call	 __ADDX_UNIT
  000ec	83 c4 10	 add	 esp, 16			; 00000010H
  000ef	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1708 :     c = _ADDX_UNIT(c, xp[4], yp[4], &zp[4]);

  000f2	ba 04 00 00 00	 mov	 edx, 4
  000f7	c1 e2 02	 shl	 edx, 2
  000fa	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  000fd	52		 push	 edx
  000fe	b8 04 00 00 00	 mov	 eax, 4
  00103	c1 e0 02	 shl	 eax, 2
  00106	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00109	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0010c	52		 push	 edx
  0010d	b8 04 00 00 00	 mov	 eax, 4
  00112	c1 e0 02	 shl	 eax, 2
  00115	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00118	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0011b	52		 push	 edx
  0011c	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00120	50		 push	 eax
  00121	e8 00 00 00 00	 call	 __ADDX_UNIT
  00126	83 c4 10	 add	 esp, 16			; 00000010H
  00129	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1709 :     c = _ADDX_UNIT(c, xp[5], yp[5], &zp[5]);

  0012c	b9 04 00 00 00	 mov	 ecx, 4
  00131	6b d1 05	 imul	 edx, ecx, 5
  00134	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00137	52		 push	 edx
  00138	b8 04 00 00 00	 mov	 eax, 4
  0013d	6b c8 05	 imul	 ecx, eax, 5
  00140	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  00143	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00146	50		 push	 eax
  00147	b9 04 00 00 00	 mov	 ecx, 4
  0014c	6b d1 05	 imul	 edx, ecx, 5
  0014f	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  00152	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00155	51		 push	 ecx
  00156	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  0015a	52		 push	 edx
  0015b	e8 00 00 00 00	 call	 __ADDX_UNIT
  00160	83 c4 10	 add	 esp, 16			; 00000010H
  00163	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1710 :     c = _ADDX_UNIT(c, xp[6], yp[6], &zp[6]);

  00166	b8 04 00 00 00	 mov	 eax, 4
  0016b	6b c8 06	 imul	 ecx, eax, 6
  0016e	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00171	51		 push	 ecx
  00172	ba 04 00 00 00	 mov	 edx, 4
  00177	6b c2 06	 imul	 eax, edx, 6
  0017a	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0017d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00180	52		 push	 edx
  00181	b8 04 00 00 00	 mov	 eax, 4
  00186	6b c8 06	 imul	 ecx, eax, 6
  00189	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  0018c	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0018f	50		 push	 eax
  00190	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  00194	51		 push	 ecx
  00195	e8 00 00 00 00	 call	 __ADDX_UNIT
  0019a	83 c4 10	 add	 esp, 16			; 00000010H
  0019d	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1711 :     c = _ADDX_UNIT(c, xp[7], yp[7], &zp[7]);

  001a0	ba 04 00 00 00	 mov	 edx, 4
  001a5	6b c2 07	 imul	 eax, edx, 7
  001a8	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  001ab	50		 push	 eax
  001ac	b9 04 00 00 00	 mov	 ecx, 4
  001b1	6b d1 07	 imul	 edx, ecx, 7
  001b4	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  001b7	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  001ba	51		 push	 ecx
  001bb	ba 04 00 00 00	 mov	 edx, 4
  001c0	6b c2 07	 imul	 eax, edx, 7
  001c3	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  001c6	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  001c9	52		 push	 edx
  001ca	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  001ce	50		 push	 eax
  001cf	e8 00 00 00 00	 call	 __ADDX_UNIT
  001d4	83 c4 10	 add	 esp, 16			; 00000010H
  001d7	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1712 : #elif defined(__GNUC__)
; 1713 : #ifdef _M_IX86
; 1714 :     __asm__ volatile (
; 1715 :         "addb\t$-1, %0\n\t"
; 1716 :         "movl\t(%1), %%ecx\n\t"
; 1717 :         "adcxl\t(%2), %%ecx\n\t"
; 1718 :         "movl\t%%ecx, (%3)\n\t"
; 1719 :         "movl\t4(%1), %%ecx\n\t"
; 1720 :         "adcxl\t4(%2), %%ecx\n\t"
; 1721 :         "movl\t%%ecx, 4(%3)\n\t"
; 1722 :         "movl\t8(%1), %%ecx\n\t"
; 1723 :         "adcxl\t8(%2), %%ecx\n\t"
; 1724 :         "movl\t%%ecx, 8(%3)\n\t"
; 1725 :         "movl\t12(%1), %%ecx\n\t"
; 1726 :         "adcxl\t12(%2), %%ecx\n\t"
; 1727 :         "movl\t%%ecx, 12(%3)\n\t"
; 1728 :         "movl\t16(%1), %%ecx\n\t"
; 1729 :         "adcxl\t16(%2), %%ecx\n\t"
; 1730 :         "movl\t%%ecx, 16(%3)\n\t"
; 1731 :         "movl\t20(%1), %%ecx\n\t"
; 1732 :         "adcxl\t20(%2), %%ecx\n\t"
; 1733 :         "movl\t%%ecx, 20(%3)\n\t"
; 1734 :         "movl\t24(%1), %%ecx\n\t"
; 1735 :         "adcxl\t24(%2), %%ecx\n\t"
; 1736 :         "movl\t%%ecx, 24(%3)\n\t"
; 1737 :         "movl\t28(%1), %%ecx\n\t"
; 1738 :         "adcxl\t28(%2), %%ecx\n\t"
; 1739 :         "movl\t%%ecx, 28(%3)\n\t"
; 1740 :         "setc\t%0"
; 1741 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1742 :         :
; 1743 :         : "cc", "memory", "%ecx"
; 1744 : );
; 1745 : #elif defined(_M_X64)
; 1746 :     __asm__ volatile (
; 1747 :         "addb\t$-1, %0\n\t"
; 1748 :         "movq\t(%1), %%rcx\n\t"
; 1749 :         "adcxq\t(%2), %%rcx\n\t"
; 1750 :         "movq\t%%rcx, (%3)\n\t"
; 1751 :         "movq\t8(%1), %%rcx\n\t"
; 1752 :         "adcxq\t8(%2), %%rcx\n\t"
; 1753 :         "movq\t%%rcx, 8(%3)\n\t"
; 1754 :         "movq\t16(%1), %%rcx\n\t"
; 1755 :         "adcxq\t16(%2), %%rcx\n\t"
; 1756 :         "movq\t%%rcx, 16(%3)\n\t"
; 1757 :         "movq\t24(%1), %%rcx\n\t"
; 1758 :         "adcxq\t24(%2), %%rcx\n\t"
; 1759 :         "movq\t%%rcx, 24(%3)\n\t"
; 1760 :         "movq\t32(%1), %%rcx\n\t"
; 1761 :         "adcxq\t32(%2), %%rcx\n\t"
; 1762 :         "movq\t%%rcx, 32(%3)\n\t"
; 1763 :         "movq\t40(%1), %%rcx\n\t"
; 1764 :         "adcxq\t40(%2), %%rcx\n\t"
; 1765 :         "movq\t%%rcx, 40(%3)\n\t"
; 1766 :         "movq\t48(%1), %%rcx\n\t"
; 1767 :         "adcxq\t48(%2), %%rcx\n\t"
; 1768 :         "movq\t%%rcx, 48(%3)\n\t"
; 1769 :         "movq\t56(%1), %%rcx\n\t"
; 1770 :         "adcxq\t56(%2), %%rcx\n\t"
; 1771 :         "movq\t%%rcx, 56(%3)\n\t"
; 1772 :         "setc\t%0"
; 1773 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1774 :         :
; 1775 :         : "cc", "memory", "%rcx"
; 1776 : );
; 1777 : #else
; 1778 : #error unknown platform
; 1779 : #endif
; 1780 : #else
; 1781 : #error unknown compiler
; 1782 : #endif
; 1783 :     return (c);

  001da	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]

; 1784 : }

  001dd	3b ec		 cmp	 ebp, esp
  001df	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001e4	5d		 pop	 ebp
  001e5	c3		 ret	 0
__ADD_8WORDS_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_8WORDS_ADC PROC

; 1617 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __E05E7037_autogenerated_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1618 : #ifdef _MSC_VER
; 1619 :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

  0000d	b8 04 00 00 00	 mov	 eax, 4
  00012	6b c8 00	 imul	 ecx, eax, 0
  00015	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00018	51		 push	 ecx
  00019	ba 04 00 00 00	 mov	 edx, 4
  0001e	6b c2 00	 imul	 eax, edx, 0
  00021	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00024	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00027	52		 push	 edx
  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  00033	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00036	50		 push	 eax
  00037	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 __ADD_UNIT
  00041	83 c4 10	 add	 esp, 16			; 00000010H
  00044	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1620 :     c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);

  00047	ba 04 00 00 00	 mov	 edx, 4
  0004c	c1 e2 00	 shl	 edx, 0
  0004f	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00052	52		 push	 edx
  00053	b8 04 00 00 00	 mov	 eax, 4
  00058	c1 e0 00	 shl	 eax, 0
  0005b	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0005e	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00061	52		 push	 edx
  00062	b8 04 00 00 00	 mov	 eax, 4
  00067	c1 e0 00	 shl	 eax, 0
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  0006d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00070	52		 push	 edx
  00071	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 __ADD_UNIT
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1621 :     c = _ADD_UNIT(c, xp[2], yp[2], &zp[2]);

  00081	b9 04 00 00 00	 mov	 ecx, 4
  00086	d1 e1		 shl	 ecx, 1
  00088	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  0008b	51		 push	 ecx
  0008c	ba 04 00 00 00	 mov	 edx, 4
  00091	d1 e2		 shl	 edx, 1
  00093	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00096	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00099	51		 push	 ecx
  0009a	ba 04 00 00 00	 mov	 edx, 4
  0009f	d1 e2		 shl	 edx, 1
  000a1	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  000a4	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  000a7	51		 push	 ecx
  000a8	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  000ac	52		 push	 edx
  000ad	e8 00 00 00 00	 call	 __ADD_UNIT
  000b2	83 c4 10	 add	 esp, 16			; 00000010H
  000b5	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1622 :     c = _ADD_UNIT(c, xp[3], yp[3], &zp[3]);

  000b8	b8 04 00 00 00	 mov	 eax, 4
  000bd	6b c8 03	 imul	 ecx, eax, 3
  000c0	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  000c3	51		 push	 ecx
  000c4	ba 04 00 00 00	 mov	 edx, 4
  000c9	6b c2 03	 imul	 eax, edx, 3
  000cc	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  000cf	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  000d2	52		 push	 edx
  000d3	b8 04 00 00 00	 mov	 eax, 4
  000d8	6b c8 03	 imul	 ecx, eax, 3
  000db	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  000de	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  000e1	50		 push	 eax
  000e2	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  000e6	51		 push	 ecx
  000e7	e8 00 00 00 00	 call	 __ADD_UNIT
  000ec	83 c4 10	 add	 esp, 16			; 00000010H
  000ef	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1623 :     c = _ADD_UNIT(c, xp[4], yp[4], &zp[4]);

  000f2	ba 04 00 00 00	 mov	 edx, 4
  000f7	c1 e2 02	 shl	 edx, 2
  000fa	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  000fd	52		 push	 edx
  000fe	b8 04 00 00 00	 mov	 eax, 4
  00103	c1 e0 02	 shl	 eax, 2
  00106	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00109	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0010c	52		 push	 edx
  0010d	b8 04 00 00 00	 mov	 eax, 4
  00112	c1 e0 02	 shl	 eax, 2
  00115	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00118	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0011b	52		 push	 edx
  0011c	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00120	50		 push	 eax
  00121	e8 00 00 00 00	 call	 __ADD_UNIT
  00126	83 c4 10	 add	 esp, 16			; 00000010H
  00129	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1624 :     c = _ADD_UNIT(c, xp[5], yp[5], &zp[5]);

  0012c	b9 04 00 00 00	 mov	 ecx, 4
  00131	6b d1 05	 imul	 edx, ecx, 5
  00134	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00137	52		 push	 edx
  00138	b8 04 00 00 00	 mov	 eax, 4
  0013d	6b c8 05	 imul	 ecx, eax, 5
  00140	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  00143	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00146	50		 push	 eax
  00147	b9 04 00 00 00	 mov	 ecx, 4
  0014c	6b d1 05	 imul	 edx, ecx, 5
  0014f	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  00152	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00155	51		 push	 ecx
  00156	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  0015a	52		 push	 edx
  0015b	e8 00 00 00 00	 call	 __ADD_UNIT
  00160	83 c4 10	 add	 esp, 16			; 00000010H
  00163	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1625 :     c = _ADD_UNIT(c, xp[6], yp[6], &zp[6]);

  00166	b8 04 00 00 00	 mov	 eax, 4
  0016b	6b c8 06	 imul	 ecx, eax, 6
  0016e	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00171	51		 push	 ecx
  00172	ba 04 00 00 00	 mov	 edx, 4
  00177	6b c2 06	 imul	 eax, edx, 6
  0017a	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0017d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00180	52		 push	 edx
  00181	b8 04 00 00 00	 mov	 eax, 4
  00186	6b c8 06	 imul	 ecx, eax, 6
  00189	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  0018c	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0018f	50		 push	 eax
  00190	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  00194	51		 push	 ecx
  00195	e8 00 00 00 00	 call	 __ADD_UNIT
  0019a	83 c4 10	 add	 esp, 16			; 00000010H
  0019d	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1626 :     c = _ADD_UNIT(c, xp[7], yp[7], &zp[7]);

  001a0	ba 04 00 00 00	 mov	 edx, 4
  001a5	6b c2 07	 imul	 eax, edx, 7
  001a8	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  001ab	50		 push	 eax
  001ac	b9 04 00 00 00	 mov	 ecx, 4
  001b1	6b d1 07	 imul	 edx, ecx, 7
  001b4	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  001b7	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  001ba	51		 push	 ecx
  001bb	ba 04 00 00 00	 mov	 edx, 4
  001c0	6b c2 07	 imul	 eax, edx, 7
  001c3	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  001c6	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  001c9	52		 push	 edx
  001ca	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  001ce	50		 push	 eax
  001cf	e8 00 00 00 00	 call	 __ADD_UNIT
  001d4	83 c4 10	 add	 esp, 16			; 00000010H
  001d7	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1627 : #elif defined(__GNUC__)
; 1628 : #ifdef _M_IX86
; 1629 :     __asm__ volatile (
; 1630 :         "addb\t$-1, %0\n\t"
; 1631 :         "movl\t(%1), %%ecx\n\t"
; 1632 :         "adcl\t(%2), %%ecx\n\t"
; 1633 :         "movl\t%%ecx, (%3)\n\t"
; 1634 :         "movl\t4(%1), %%ecx\n\t"
; 1635 :         "adcl\t4(%2), %%ecx\n\t"
; 1636 :         "movl\t%%ecx, 4(%3)\n\t"
; 1637 :         "movl\t8(%1), %%ecx\n\t"
; 1638 :         "adcl\t8(%2), %%ecx\n\t"
; 1639 :         "movl\t%%ecx, 8(%3)\n\t"
; 1640 :         "movl\t12(%1), %%ecx\n\t"
; 1641 :         "adcl\t12(%2), %%ecx\n\t"
; 1642 :         "movl\t%%ecx, 12(%3)\n\t"
; 1643 :         "movl\t16(%1), %%ecx\n\t"
; 1644 :         "adcl\t16(%2), %%ecx\n\t"
; 1645 :         "movl\t%%ecx, 16(%3)\n\t"
; 1646 :         "movl\t20(%1), %%ecx\n\t"
; 1647 :         "adcl\t20(%2), %%ecx\n\t"
; 1648 :         "movl\t%%ecx, 20(%3)\n\t"
; 1649 :         "movl\t24(%1), %%ecx\n\t"
; 1650 :         "adcl\t24(%2), %%ecx\n\t"
; 1651 :         "movl\t%%ecx, 24(%3)\n\t"
; 1652 :         "movl\t28(%1), %%ecx\n\t"
; 1653 :         "adcl\t28(%2), %%ecx\n\t"
; 1654 :         "movl\t%%ecx, 28(%3)\n\t"
; 1655 :         "setc\t%0"
; 1656 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1657 :         :
; 1658 :         : "cc", "memory", "%ecx"
; 1659 : );
; 1660 : #elif defined(_M_X64)
; 1661 :     __asm__ volatile (
; 1662 :         "addb\t$-1, %0\n\t"
; 1663 :         "movq\t(%1), %%rcx\n\t"
; 1664 :         "adcq\t(%2), %%rcx\n\t"
; 1665 :         "movq\t%%rcx, (%3)\n\t"
; 1666 :         "movq\t8(%1), %%rcx\n\t"
; 1667 :         "adcq\t8(%2), %%rcx\n\t"
; 1668 :         "movq\t%%rcx, 8(%3)\n\t"
; 1669 :         "movq\t16(%1), %%rcx\n\t"
; 1670 :         "adcq\t16(%2), %%rcx\n\t"
; 1671 :         "movq\t%%rcx, 16(%3)\n\t"
; 1672 :         "movq\t24(%1), %%rcx\n\t"
; 1673 :         "adcq\t24(%2), %%rcx\n\t"
; 1674 :         "movq\t%%rcx, 24(%3)\n\t"
; 1675 :         "movq\t32(%1), %%rcx\n\t"
; 1676 :         "adcq\t32(%2), %%rcx\n\t"
; 1677 :         "movq\t%%rcx, 32(%3)\n\t"
; 1678 :         "movq\t40(%1), %%rcx\n\t"
; 1679 :         "adcq\t40(%2), %%rcx\n\t"
; 1680 :         "movq\t%%rcx, 40(%3)\n\t"
; 1681 :         "movq\t48(%1), %%rcx\n\t"
; 1682 :         "adcq\t48(%2), %%rcx\n\t"
; 1683 :         "movq\t%%rcx, 48(%3)\n\t"
; 1684 :         "movq\t56(%1), %%rcx\n\t"
; 1685 :         "adcq\t56(%2), %%rcx\n\t"
; 1686 :         "movq\t%%rcx, 56(%3)\n\t"
; 1687 :         "setc\t%0"
; 1688 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1689 :         :
; 1690 :         : "cc", "memory", "%rcx"
; 1691 : );
; 1692 : #else
; 1693 : #error unknown platform
; 1694 : #endif
; 1695 : #else
; 1696 : #error unknown compiler
; 1697 : #endif
; 1698 :     return (c);

  001da	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]

; 1699 : }

  001dd	3b ec		 cmp	 ebp, esp
  001df	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001e4	5d		 pop	 ebp
  001e5	c3		 ret	 0
__ADD_8WORDS_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_16WORDS_ADCX PROC

; 1194 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __E05E7037_autogenerated_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1195 : #ifdef _MSC_VER
; 1196 :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

  0000d	b8 04 00 00 00	 mov	 eax, 4
  00012	6b c8 00	 imul	 ecx, eax, 0
  00015	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00018	51		 push	 ecx
  00019	ba 04 00 00 00	 mov	 edx, 4
  0001e	6b c2 00	 imul	 eax, edx, 0
  00021	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00024	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00027	52		 push	 edx
  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  00033	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00036	50		 push	 eax
  00037	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 __ADDX_UNIT
  00041	83 c4 10	 add	 esp, 16			; 00000010H
  00044	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1197 :     c = _ADDX_UNIT(c, xp[1], yp[1], &zp[1]);

  00047	ba 04 00 00 00	 mov	 edx, 4
  0004c	c1 e2 00	 shl	 edx, 0
  0004f	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00052	52		 push	 edx
  00053	b8 04 00 00 00	 mov	 eax, 4
  00058	c1 e0 00	 shl	 eax, 0
  0005b	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0005e	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00061	52		 push	 edx
  00062	b8 04 00 00 00	 mov	 eax, 4
  00067	c1 e0 00	 shl	 eax, 0
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  0006d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00070	52		 push	 edx
  00071	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 __ADDX_UNIT
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1198 :     c = _ADDX_UNIT(c, xp[2], yp[2], &zp[2]);

  00081	b9 04 00 00 00	 mov	 ecx, 4
  00086	d1 e1		 shl	 ecx, 1
  00088	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  0008b	51		 push	 ecx
  0008c	ba 04 00 00 00	 mov	 edx, 4
  00091	d1 e2		 shl	 edx, 1
  00093	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00096	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00099	51		 push	 ecx
  0009a	ba 04 00 00 00	 mov	 edx, 4
  0009f	d1 e2		 shl	 edx, 1
  000a1	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  000a4	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  000a7	51		 push	 ecx
  000a8	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  000ac	52		 push	 edx
  000ad	e8 00 00 00 00	 call	 __ADDX_UNIT
  000b2	83 c4 10	 add	 esp, 16			; 00000010H
  000b5	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1199 :     c = _ADDX_UNIT(c, xp[3], yp[3], &zp[3]);

  000b8	b8 04 00 00 00	 mov	 eax, 4
  000bd	6b c8 03	 imul	 ecx, eax, 3
  000c0	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  000c3	51		 push	 ecx
  000c4	ba 04 00 00 00	 mov	 edx, 4
  000c9	6b c2 03	 imul	 eax, edx, 3
  000cc	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  000cf	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  000d2	52		 push	 edx
  000d3	b8 04 00 00 00	 mov	 eax, 4
  000d8	6b c8 03	 imul	 ecx, eax, 3
  000db	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  000de	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  000e1	50		 push	 eax
  000e2	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  000e6	51		 push	 ecx
  000e7	e8 00 00 00 00	 call	 __ADDX_UNIT
  000ec	83 c4 10	 add	 esp, 16			; 00000010H
  000ef	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1200 :     c = _ADDX_UNIT(c, xp[4], yp[4], &zp[4]);

  000f2	ba 04 00 00 00	 mov	 edx, 4
  000f7	c1 e2 02	 shl	 edx, 2
  000fa	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  000fd	52		 push	 edx
  000fe	b8 04 00 00 00	 mov	 eax, 4
  00103	c1 e0 02	 shl	 eax, 2
  00106	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00109	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0010c	52		 push	 edx
  0010d	b8 04 00 00 00	 mov	 eax, 4
  00112	c1 e0 02	 shl	 eax, 2
  00115	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00118	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0011b	52		 push	 edx
  0011c	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00120	50		 push	 eax
  00121	e8 00 00 00 00	 call	 __ADDX_UNIT
  00126	83 c4 10	 add	 esp, 16			; 00000010H
  00129	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1201 :     c = _ADDX_UNIT(c, xp[5], yp[5], &zp[5]);

  0012c	b9 04 00 00 00	 mov	 ecx, 4
  00131	6b d1 05	 imul	 edx, ecx, 5
  00134	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00137	52		 push	 edx
  00138	b8 04 00 00 00	 mov	 eax, 4
  0013d	6b c8 05	 imul	 ecx, eax, 5
  00140	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  00143	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00146	50		 push	 eax
  00147	b9 04 00 00 00	 mov	 ecx, 4
  0014c	6b d1 05	 imul	 edx, ecx, 5
  0014f	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  00152	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00155	51		 push	 ecx
  00156	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  0015a	52		 push	 edx
  0015b	e8 00 00 00 00	 call	 __ADDX_UNIT
  00160	83 c4 10	 add	 esp, 16			; 00000010H
  00163	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1202 :     c = _ADDX_UNIT(c, xp[6], yp[6], &zp[6]);

  00166	b8 04 00 00 00	 mov	 eax, 4
  0016b	6b c8 06	 imul	 ecx, eax, 6
  0016e	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00171	51		 push	 ecx
  00172	ba 04 00 00 00	 mov	 edx, 4
  00177	6b c2 06	 imul	 eax, edx, 6
  0017a	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0017d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00180	52		 push	 edx
  00181	b8 04 00 00 00	 mov	 eax, 4
  00186	6b c8 06	 imul	 ecx, eax, 6
  00189	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  0018c	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0018f	50		 push	 eax
  00190	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  00194	51		 push	 ecx
  00195	e8 00 00 00 00	 call	 __ADDX_UNIT
  0019a	83 c4 10	 add	 esp, 16			; 00000010H
  0019d	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1203 :     c = _ADDX_UNIT(c, xp[7], yp[7], &zp[7]);

  001a0	ba 04 00 00 00	 mov	 edx, 4
  001a5	6b c2 07	 imul	 eax, edx, 7
  001a8	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  001ab	50		 push	 eax
  001ac	b9 04 00 00 00	 mov	 ecx, 4
  001b1	6b d1 07	 imul	 edx, ecx, 7
  001b4	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  001b7	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  001ba	51		 push	 ecx
  001bb	ba 04 00 00 00	 mov	 edx, 4
  001c0	6b c2 07	 imul	 eax, edx, 7
  001c3	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  001c6	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  001c9	52		 push	 edx
  001ca	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  001ce	50		 push	 eax
  001cf	e8 00 00 00 00	 call	 __ADDX_UNIT
  001d4	83 c4 10	 add	 esp, 16			; 00000010H
  001d7	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1204 :     c = _ADDX_UNIT(c, xp[8], yp[8], &zp[8]);

  001da	b9 04 00 00 00	 mov	 ecx, 4
  001df	c1 e1 03	 shl	 ecx, 3
  001e2	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  001e5	51		 push	 ecx
  001e6	ba 04 00 00 00	 mov	 edx, 4
  001eb	c1 e2 03	 shl	 edx, 3
  001ee	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  001f1	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  001f4	51		 push	 ecx
  001f5	ba 04 00 00 00	 mov	 edx, 4
  001fa	c1 e2 03	 shl	 edx, 3
  001fd	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  00200	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00203	51		 push	 ecx
  00204	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  00208	52		 push	 edx
  00209	e8 00 00 00 00	 call	 __ADDX_UNIT
  0020e	83 c4 10	 add	 esp, 16			; 00000010H
  00211	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1205 :     c = _ADDX_UNIT(c, xp[9], yp[9], &zp[9]);

  00214	b8 04 00 00 00	 mov	 eax, 4
  00219	6b c8 09	 imul	 ecx, eax, 9
  0021c	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  0021f	51		 push	 ecx
  00220	ba 04 00 00 00	 mov	 edx, 4
  00225	6b c2 09	 imul	 eax, edx, 9
  00228	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0022b	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0022e	52		 push	 edx
  0022f	b8 04 00 00 00	 mov	 eax, 4
  00234	6b c8 09	 imul	 ecx, eax, 9
  00237	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  0023a	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0023d	50		 push	 eax
  0023e	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  00242	51		 push	 ecx
  00243	e8 00 00 00 00	 call	 __ADDX_UNIT
  00248	83 c4 10	 add	 esp, 16			; 00000010H
  0024b	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1206 :     c = _ADDX_UNIT(c, xp[10], yp[10], &zp[10]);

  0024e	ba 04 00 00 00	 mov	 edx, 4
  00253	6b c2 0a	 imul	 eax, edx, 10
  00256	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  00259	50		 push	 eax
  0025a	b9 04 00 00 00	 mov	 ecx, 4
  0025f	6b d1 0a	 imul	 edx, ecx, 10
  00262	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00265	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00268	51		 push	 ecx
  00269	ba 04 00 00 00	 mov	 edx, 4
  0026e	6b c2 0a	 imul	 eax, edx, 10
  00271	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00274	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00277	52		 push	 edx
  00278	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  0027c	50		 push	 eax
  0027d	e8 00 00 00 00	 call	 __ADDX_UNIT
  00282	83 c4 10	 add	 esp, 16			; 00000010H
  00285	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1207 :     c = _ADDX_UNIT(c, xp[11], yp[11], &zp[11]);

  00288	b9 04 00 00 00	 mov	 ecx, 4
  0028d	6b d1 0b	 imul	 edx, ecx, 11
  00290	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00293	52		 push	 edx
  00294	b8 04 00 00 00	 mov	 eax, 4
  00299	6b c8 0b	 imul	 ecx, eax, 11
  0029c	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  0029f	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  002a2	50		 push	 eax
  002a3	b9 04 00 00 00	 mov	 ecx, 4
  002a8	6b d1 0b	 imul	 edx, ecx, 11
  002ab	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  002ae	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  002b1	51		 push	 ecx
  002b2	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  002b6	52		 push	 edx
  002b7	e8 00 00 00 00	 call	 __ADDX_UNIT
  002bc	83 c4 10	 add	 esp, 16			; 00000010H
  002bf	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1208 :     c = _ADDX_UNIT(c, xp[12], yp[12], &zp[12]);

  002c2	b8 04 00 00 00	 mov	 eax, 4
  002c7	6b c8 0c	 imul	 ecx, eax, 12
  002ca	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  002cd	51		 push	 ecx
  002ce	ba 04 00 00 00	 mov	 edx, 4
  002d3	6b c2 0c	 imul	 eax, edx, 12
  002d6	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  002d9	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  002dc	52		 push	 edx
  002dd	b8 04 00 00 00	 mov	 eax, 4
  002e2	6b c8 0c	 imul	 ecx, eax, 12
  002e5	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  002e8	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  002eb	50		 push	 eax
  002ec	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  002f0	51		 push	 ecx
  002f1	e8 00 00 00 00	 call	 __ADDX_UNIT
  002f6	83 c4 10	 add	 esp, 16			; 00000010H
  002f9	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1209 :     c = _ADDX_UNIT(c, xp[13], yp[13], &zp[13]);

  002fc	ba 04 00 00 00	 mov	 edx, 4
  00301	6b c2 0d	 imul	 eax, edx, 13
  00304	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  00307	50		 push	 eax
  00308	b9 04 00 00 00	 mov	 ecx, 4
  0030d	6b d1 0d	 imul	 edx, ecx, 13
  00310	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00313	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00316	51		 push	 ecx
  00317	ba 04 00 00 00	 mov	 edx, 4
  0031c	6b c2 0d	 imul	 eax, edx, 13
  0031f	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00322	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00325	52		 push	 edx
  00326	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  0032a	50		 push	 eax
  0032b	e8 00 00 00 00	 call	 __ADDX_UNIT
  00330	83 c4 10	 add	 esp, 16			; 00000010H
  00333	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1210 :     c = _ADDX_UNIT(c, xp[14], yp[14], &zp[14]);

  00336	b9 04 00 00 00	 mov	 ecx, 4
  0033b	6b d1 0e	 imul	 edx, ecx, 14
  0033e	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00341	52		 push	 edx
  00342	b8 04 00 00 00	 mov	 eax, 4
  00347	6b c8 0e	 imul	 ecx, eax, 14
  0034a	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  0034d	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00350	50		 push	 eax
  00351	b9 04 00 00 00	 mov	 ecx, 4
  00356	6b d1 0e	 imul	 edx, ecx, 14
  00359	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  0035c	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0035f	51		 push	 ecx
  00360	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  00364	52		 push	 edx
  00365	e8 00 00 00 00	 call	 __ADDX_UNIT
  0036a	83 c4 10	 add	 esp, 16			; 00000010H
  0036d	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1211 :     c = _ADDX_UNIT(c, xp[15], yp[15], &zp[15]);

  00370	b8 04 00 00 00	 mov	 eax, 4
  00375	6b c8 0f	 imul	 ecx, eax, 15
  00378	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  0037b	51		 push	 ecx
  0037c	ba 04 00 00 00	 mov	 edx, 4
  00381	6b c2 0f	 imul	 eax, edx, 15
  00384	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00387	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0038a	52		 push	 edx
  0038b	b8 04 00 00 00	 mov	 eax, 4
  00390	6b c8 0f	 imul	 ecx, eax, 15
  00393	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  00396	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00399	50		 push	 eax
  0039a	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  0039e	51		 push	 ecx
  0039f	e8 00 00 00 00	 call	 __ADDX_UNIT
  003a4	83 c4 10	 add	 esp, 16			; 00000010H
  003a7	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1212 : #elif defined(__GNUC__)
; 1213 : #ifdef _M_IX86
; 1214 :     __asm__ volatile (
; 1215 :         "addb\t$-1, %0\n\t"
; 1216 :         "movl\t(%1), %%ecx\n\t"
; 1217 :         "adcxl\t(%2), %%ecx\n\t"
; 1218 :         "movl\t%%ecx, (%3)\n\t"
; 1219 :         "movl\t4(%1), %%ecx\n\t"
; 1220 :         "adcxl\t4(%2), %%ecx\n\t"
; 1221 :         "movl\t%%ecx, 4(%3)\n\t"
; 1222 :         "movl\t8(%1), %%ecx\n\t"
; 1223 :         "adcxl\t8(%2), %%ecx\n\t"
; 1224 :         "movl\t%%ecx, 8(%3)\n\t"
; 1225 :         "movl\t12(%1), %%ecx\n\t"
; 1226 :         "adcxl\t12(%2), %%ecx\n\t"
; 1227 :         "movl\t%%ecx, 12(%3)\n\t"
; 1228 :         "movl\t16(%1), %%ecx\n\t"
; 1229 :         "adcxl\t16(%2), %%ecx\n\t"
; 1230 :         "movl\t%%ecx, 16(%3)\n\t"
; 1231 :         "movl\t20(%1), %%ecx\n\t"
; 1232 :         "adcxl\t20(%2), %%ecx\n\t"
; 1233 :         "movl\t%%ecx, 20(%3)\n\t"
; 1234 :         "movl\t24(%1), %%ecx\n\t"
; 1235 :         "adcxl\t24(%2), %%ecx\n\t"
; 1236 :         "movl\t%%ecx, 24(%3)\n\t"
; 1237 :         "movl\t28(%1), %%ecx\n\t"
; 1238 :         "adcxl\t28(%2), %%ecx\n\t"
; 1239 :         "movl\t%%ecx, 28(%3)\n\t"
; 1240 :         "movl\t32(%1), %%ecx\n\t"
; 1241 :         "adcxl\t32(%2), %%ecx\n\t"
; 1242 :         "movl\t%%ecx, 32(%3)\n\t"
; 1243 :         "movl\t36(%1), %%ecx\n\t"
; 1244 :         "adcxl\t36(%2), %%ecx\n\t"
; 1245 :         "movl\t%%ecx, 36(%3)\n\t"
; 1246 :         "movl\t40(%1), %%ecx\n\t"
; 1247 :         "adcxl\t40(%2), %%ecx\n\t"
; 1248 :         "movl\t%%ecx, 40(%3)\n\t"
; 1249 :         "movl\t44(%1), %%ecx\n\t"
; 1250 :         "adcxl\t44(%2), %%ecx\n\t"
; 1251 :         "movl\t%%ecx, 44(%3)\n\t"
; 1252 :         "movl\t48(%1), %%ecx\n\t"
; 1253 :         "adcxl\t48(%2), %%ecx\n\t"
; 1254 :         "movl\t%%ecx, 48(%3)\n\t"
; 1255 :         "movl\t52(%1), %%ecx\n\t"
; 1256 :         "adcxl\t52(%2), %%ecx\n\t"
; 1257 :         "movl\t%%ecx, 52(%3)\n\t"
; 1258 :         "movl\t56(%1), %%ecx\n\t"
; 1259 :         "adcxl\t56(%2), %%ecx\n\t"
; 1260 :         "movl\t%%ecx, 56(%3)\n\t"
; 1261 :         "movl\t60(%1), %%ecx\n\t"
; 1262 :         "adcxl\t60(%2), %%ecx\n\t"
; 1263 :         "movl\t%%ecx, 60(%3)\n\t"
; 1264 :         "setc\t%0"
; 1265 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1266 :         :
; 1267 :         : "cc", "memory", "%ecx"
; 1268 : );
; 1269 : #elif defined(_M_X64)
; 1270 :     __asm__ volatile (
; 1271 :         "addb\t$-1, %0\n\t"
; 1272 :         "movq\t(%1), %%rcx\n\t"
; 1273 :         "adcxq\t(%2), %%rcx\n\t"
; 1274 :         "movq\t%%rcx, (%3)\n\t"
; 1275 :         "movq\t8(%1), %%rcx\n\t"
; 1276 :         "adcxq\t8(%2), %%rcx\n\t"
; 1277 :         "movq\t%%rcx, 8(%3)\n\t"
; 1278 :         "movq\t16(%1), %%rcx\n\t"
; 1279 :         "adcxq\t16(%2), %%rcx\n\t"
; 1280 :         "movq\t%%rcx, 16(%3)\n\t"
; 1281 :         "movq\t24(%1), %%rcx\n\t"
; 1282 :         "adcxq\t24(%2), %%rcx\n\t"
; 1283 :         "movq\t%%rcx, 24(%3)\n\t"
; 1284 :         "movq\t32(%1), %%rcx\n\t"
; 1285 :         "adcxq\t32(%2), %%rcx\n\t"
; 1286 :         "movq\t%%rcx, 32(%3)\n\t"
; 1287 :         "movq\t40(%1), %%rcx\n\t"
; 1288 :         "adcxq\t40(%2), %%rcx\n\t"
; 1289 :         "movq\t%%rcx, 40(%3)\n\t"
; 1290 :         "movq\t48(%1), %%rcx\n\t"
; 1291 :         "adcxq\t48(%2), %%rcx\n\t"
; 1292 :         "movq\t%%rcx, 48(%3)\n\t"
; 1293 :         "movq\t56(%1), %%rcx\n\t"
; 1294 :         "adcxq\t56(%2), %%rcx\n\t"
; 1295 :         "movq\t%%rcx, 56(%3)\n\t"
; 1296 :         "movq\t64(%1), %%rcx\n\t"
; 1297 :         "adcxq\t64(%2), %%rcx\n\t"
; 1298 :         "movq\t%%rcx, 64(%3)\n\t"
; 1299 :         "movq\t72(%1), %%rcx\n\t"
; 1300 :         "adcxq\t72(%2), %%rcx\n\t"
; 1301 :         "movq\t%%rcx, 72(%3)\n\t"
; 1302 :         "movq\t80(%1), %%rcx\n\t"
; 1303 :         "adcxq\t80(%2), %%rcx\n\t"
; 1304 :         "movq\t%%rcx, 80(%3)\n\t"
; 1305 :         "movq\t88(%1), %%rcx\n\t"
; 1306 :         "adcxq\t88(%2), %%rcx\n\t"
; 1307 :         "movq\t%%rcx, 88(%3)\n\t"
; 1308 :         "movq\t96(%1), %%rcx\n\t"
; 1309 :         "adcxq\t96(%2), %%rcx\n\t"
; 1310 :         "movq\t%%rcx, 96(%3)\n\t"
; 1311 :         "movq\t104(%1), %%rcx\n\t"
; 1312 :         "adcxq\t104(%2), %%rcx\n\t"
; 1313 :         "movq\t%%rcx, 104(%3)\n\t"
; 1314 :         "movq\t112(%1), %%rcx\n\t"
; 1315 :         "adcxq\t112(%2), %%rcx\n\t"
; 1316 :         "movq\t%%rcx, 112(%3)\n\t"
; 1317 :         "movq\t120(%1), %%rcx\n\t"
; 1318 :         "adcxq\t120(%2), %%rcx\n\t"
; 1319 :         "movq\t%%rcx, 120(%3)\n\t"
; 1320 :         "setc\t%0"
; 1321 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1322 :         :
; 1323 :         : "cc", "memory", "%rcx"
; 1324 : );
; 1325 : #else
; 1326 : #error unknown platform
; 1327 : #endif
; 1328 : #else
; 1329 : #error unknown compiler
; 1330 : #endif
; 1331 :     return (c);

  003aa	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]

; 1332 : }

  003ad	3b ec		 cmp	 ebp, esp
  003af	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003b4	5d		 pop	 ebp
  003b5	c3		 ret	 0
__ADD_16WORDS_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_16WORDS_ADC PROC

; 1053 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __E05E7037_autogenerated_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1054 : #ifdef _MSC_VER
; 1055 :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

  0000d	b8 04 00 00 00	 mov	 eax, 4
  00012	6b c8 00	 imul	 ecx, eax, 0
  00015	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00018	51		 push	 ecx
  00019	ba 04 00 00 00	 mov	 edx, 4
  0001e	6b c2 00	 imul	 eax, edx, 0
  00021	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00024	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00027	52		 push	 edx
  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  00033	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00036	50		 push	 eax
  00037	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 __ADD_UNIT
  00041	83 c4 10	 add	 esp, 16			; 00000010H
  00044	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1056 :     c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);

  00047	ba 04 00 00 00	 mov	 edx, 4
  0004c	c1 e2 00	 shl	 edx, 0
  0004f	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00052	52		 push	 edx
  00053	b8 04 00 00 00	 mov	 eax, 4
  00058	c1 e0 00	 shl	 eax, 0
  0005b	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0005e	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00061	52		 push	 edx
  00062	b8 04 00 00 00	 mov	 eax, 4
  00067	c1 e0 00	 shl	 eax, 0
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  0006d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00070	52		 push	 edx
  00071	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 __ADD_UNIT
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1057 :     c = _ADD_UNIT(c, xp[2], yp[2], &zp[2]);

  00081	b9 04 00 00 00	 mov	 ecx, 4
  00086	d1 e1		 shl	 ecx, 1
  00088	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  0008b	51		 push	 ecx
  0008c	ba 04 00 00 00	 mov	 edx, 4
  00091	d1 e2		 shl	 edx, 1
  00093	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00096	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00099	51		 push	 ecx
  0009a	ba 04 00 00 00	 mov	 edx, 4
  0009f	d1 e2		 shl	 edx, 1
  000a1	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  000a4	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  000a7	51		 push	 ecx
  000a8	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  000ac	52		 push	 edx
  000ad	e8 00 00 00 00	 call	 __ADD_UNIT
  000b2	83 c4 10	 add	 esp, 16			; 00000010H
  000b5	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1058 :     c = _ADD_UNIT(c, xp[3], yp[3], &zp[3]);

  000b8	b8 04 00 00 00	 mov	 eax, 4
  000bd	6b c8 03	 imul	 ecx, eax, 3
  000c0	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  000c3	51		 push	 ecx
  000c4	ba 04 00 00 00	 mov	 edx, 4
  000c9	6b c2 03	 imul	 eax, edx, 3
  000cc	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  000cf	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  000d2	52		 push	 edx
  000d3	b8 04 00 00 00	 mov	 eax, 4
  000d8	6b c8 03	 imul	 ecx, eax, 3
  000db	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  000de	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  000e1	50		 push	 eax
  000e2	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  000e6	51		 push	 ecx
  000e7	e8 00 00 00 00	 call	 __ADD_UNIT
  000ec	83 c4 10	 add	 esp, 16			; 00000010H
  000ef	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1059 :     c = _ADD_UNIT(c, xp[4], yp[4], &zp[4]);

  000f2	ba 04 00 00 00	 mov	 edx, 4
  000f7	c1 e2 02	 shl	 edx, 2
  000fa	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  000fd	52		 push	 edx
  000fe	b8 04 00 00 00	 mov	 eax, 4
  00103	c1 e0 02	 shl	 eax, 2
  00106	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00109	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0010c	52		 push	 edx
  0010d	b8 04 00 00 00	 mov	 eax, 4
  00112	c1 e0 02	 shl	 eax, 2
  00115	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00118	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0011b	52		 push	 edx
  0011c	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00120	50		 push	 eax
  00121	e8 00 00 00 00	 call	 __ADD_UNIT
  00126	83 c4 10	 add	 esp, 16			; 00000010H
  00129	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1060 :     c = _ADD_UNIT(c, xp[5], yp[5], &zp[5]);

  0012c	b9 04 00 00 00	 mov	 ecx, 4
  00131	6b d1 05	 imul	 edx, ecx, 5
  00134	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00137	52		 push	 edx
  00138	b8 04 00 00 00	 mov	 eax, 4
  0013d	6b c8 05	 imul	 ecx, eax, 5
  00140	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  00143	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00146	50		 push	 eax
  00147	b9 04 00 00 00	 mov	 ecx, 4
  0014c	6b d1 05	 imul	 edx, ecx, 5
  0014f	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  00152	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00155	51		 push	 ecx
  00156	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  0015a	52		 push	 edx
  0015b	e8 00 00 00 00	 call	 __ADD_UNIT
  00160	83 c4 10	 add	 esp, 16			; 00000010H
  00163	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1061 :     c = _ADD_UNIT(c, xp[6], yp[6], &zp[6]);

  00166	b8 04 00 00 00	 mov	 eax, 4
  0016b	6b c8 06	 imul	 ecx, eax, 6
  0016e	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00171	51		 push	 ecx
  00172	ba 04 00 00 00	 mov	 edx, 4
  00177	6b c2 06	 imul	 eax, edx, 6
  0017a	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0017d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00180	52		 push	 edx
  00181	b8 04 00 00 00	 mov	 eax, 4
  00186	6b c8 06	 imul	 ecx, eax, 6
  00189	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  0018c	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0018f	50		 push	 eax
  00190	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  00194	51		 push	 ecx
  00195	e8 00 00 00 00	 call	 __ADD_UNIT
  0019a	83 c4 10	 add	 esp, 16			; 00000010H
  0019d	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1062 :     c = _ADD_UNIT(c, xp[7], yp[7], &zp[7]);

  001a0	ba 04 00 00 00	 mov	 edx, 4
  001a5	6b c2 07	 imul	 eax, edx, 7
  001a8	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  001ab	50		 push	 eax
  001ac	b9 04 00 00 00	 mov	 ecx, 4
  001b1	6b d1 07	 imul	 edx, ecx, 7
  001b4	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  001b7	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  001ba	51		 push	 ecx
  001bb	ba 04 00 00 00	 mov	 edx, 4
  001c0	6b c2 07	 imul	 eax, edx, 7
  001c3	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  001c6	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  001c9	52		 push	 edx
  001ca	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  001ce	50		 push	 eax
  001cf	e8 00 00 00 00	 call	 __ADD_UNIT
  001d4	83 c4 10	 add	 esp, 16			; 00000010H
  001d7	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1063 :     c = _ADD_UNIT(c, xp[8], yp[8], &zp[8]);

  001da	b9 04 00 00 00	 mov	 ecx, 4
  001df	c1 e1 03	 shl	 ecx, 3
  001e2	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  001e5	51		 push	 ecx
  001e6	ba 04 00 00 00	 mov	 edx, 4
  001eb	c1 e2 03	 shl	 edx, 3
  001ee	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  001f1	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  001f4	51		 push	 ecx
  001f5	ba 04 00 00 00	 mov	 edx, 4
  001fa	c1 e2 03	 shl	 edx, 3
  001fd	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  00200	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00203	51		 push	 ecx
  00204	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  00208	52		 push	 edx
  00209	e8 00 00 00 00	 call	 __ADD_UNIT
  0020e	83 c4 10	 add	 esp, 16			; 00000010H
  00211	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1064 :     c = _ADD_UNIT(c, xp[9], yp[9], &zp[9]);

  00214	b8 04 00 00 00	 mov	 eax, 4
  00219	6b c8 09	 imul	 ecx, eax, 9
  0021c	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  0021f	51		 push	 ecx
  00220	ba 04 00 00 00	 mov	 edx, 4
  00225	6b c2 09	 imul	 eax, edx, 9
  00228	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0022b	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0022e	52		 push	 edx
  0022f	b8 04 00 00 00	 mov	 eax, 4
  00234	6b c8 09	 imul	 ecx, eax, 9
  00237	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  0023a	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0023d	50		 push	 eax
  0023e	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  00242	51		 push	 ecx
  00243	e8 00 00 00 00	 call	 __ADD_UNIT
  00248	83 c4 10	 add	 esp, 16			; 00000010H
  0024b	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1065 :     c = _ADD_UNIT(c, xp[10], yp[10], &zp[10]);

  0024e	ba 04 00 00 00	 mov	 edx, 4
  00253	6b c2 0a	 imul	 eax, edx, 10
  00256	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  00259	50		 push	 eax
  0025a	b9 04 00 00 00	 mov	 ecx, 4
  0025f	6b d1 0a	 imul	 edx, ecx, 10
  00262	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00265	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00268	51		 push	 ecx
  00269	ba 04 00 00 00	 mov	 edx, 4
  0026e	6b c2 0a	 imul	 eax, edx, 10
  00271	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00274	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00277	52		 push	 edx
  00278	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  0027c	50		 push	 eax
  0027d	e8 00 00 00 00	 call	 __ADD_UNIT
  00282	83 c4 10	 add	 esp, 16			; 00000010H
  00285	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1066 :     c = _ADD_UNIT(c, xp[11], yp[11], &zp[11]);

  00288	b9 04 00 00 00	 mov	 ecx, 4
  0028d	6b d1 0b	 imul	 edx, ecx, 11
  00290	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00293	52		 push	 edx
  00294	b8 04 00 00 00	 mov	 eax, 4
  00299	6b c8 0b	 imul	 ecx, eax, 11
  0029c	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  0029f	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  002a2	50		 push	 eax
  002a3	b9 04 00 00 00	 mov	 ecx, 4
  002a8	6b d1 0b	 imul	 edx, ecx, 11
  002ab	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  002ae	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  002b1	51		 push	 ecx
  002b2	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  002b6	52		 push	 edx
  002b7	e8 00 00 00 00	 call	 __ADD_UNIT
  002bc	83 c4 10	 add	 esp, 16			; 00000010H
  002bf	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1067 :     c = _ADD_UNIT(c, xp[12], yp[12], &zp[12]);

  002c2	b8 04 00 00 00	 mov	 eax, 4
  002c7	6b c8 0c	 imul	 ecx, eax, 12
  002ca	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  002cd	51		 push	 ecx
  002ce	ba 04 00 00 00	 mov	 edx, 4
  002d3	6b c2 0c	 imul	 eax, edx, 12
  002d6	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  002d9	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  002dc	52		 push	 edx
  002dd	b8 04 00 00 00	 mov	 eax, 4
  002e2	6b c8 0c	 imul	 ecx, eax, 12
  002e5	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  002e8	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  002eb	50		 push	 eax
  002ec	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  002f0	51		 push	 ecx
  002f1	e8 00 00 00 00	 call	 __ADD_UNIT
  002f6	83 c4 10	 add	 esp, 16			; 00000010H
  002f9	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1068 :     c = _ADD_UNIT(c, xp[13], yp[13], &zp[13]);

  002fc	ba 04 00 00 00	 mov	 edx, 4
  00301	6b c2 0d	 imul	 eax, edx, 13
  00304	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  00307	50		 push	 eax
  00308	b9 04 00 00 00	 mov	 ecx, 4
  0030d	6b d1 0d	 imul	 edx, ecx, 13
  00310	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00313	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00316	51		 push	 ecx
  00317	ba 04 00 00 00	 mov	 edx, 4
  0031c	6b c2 0d	 imul	 eax, edx, 13
  0031f	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00322	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00325	52		 push	 edx
  00326	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  0032a	50		 push	 eax
  0032b	e8 00 00 00 00	 call	 __ADD_UNIT
  00330	83 c4 10	 add	 esp, 16			; 00000010H
  00333	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1069 :     c = _ADD_UNIT(c, xp[14], yp[14], &zp[14]);

  00336	b9 04 00 00 00	 mov	 ecx, 4
  0033b	6b d1 0e	 imul	 edx, ecx, 14
  0033e	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00341	52		 push	 edx
  00342	b8 04 00 00 00	 mov	 eax, 4
  00347	6b c8 0e	 imul	 ecx, eax, 14
  0034a	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  0034d	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00350	50		 push	 eax
  00351	b9 04 00 00 00	 mov	 ecx, 4
  00356	6b d1 0e	 imul	 edx, ecx, 14
  00359	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  0035c	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0035f	51		 push	 ecx
  00360	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  00364	52		 push	 edx
  00365	e8 00 00 00 00	 call	 __ADD_UNIT
  0036a	83 c4 10	 add	 esp, 16			; 00000010H
  0036d	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1070 :     c = _ADD_UNIT(c, xp[15], yp[15], &zp[15]);

  00370	b8 04 00 00 00	 mov	 eax, 4
  00375	6b c8 0f	 imul	 ecx, eax, 15
  00378	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  0037b	51		 push	 ecx
  0037c	ba 04 00 00 00	 mov	 edx, 4
  00381	6b c2 0f	 imul	 eax, edx, 15
  00384	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00387	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0038a	52		 push	 edx
  0038b	b8 04 00 00 00	 mov	 eax, 4
  00390	6b c8 0f	 imul	 ecx, eax, 15
  00393	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  00396	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00399	50		 push	 eax
  0039a	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  0039e	51		 push	 ecx
  0039f	e8 00 00 00 00	 call	 __ADD_UNIT
  003a4	83 c4 10	 add	 esp, 16			; 00000010H
  003a7	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 1071 : #elif defined(__GNUC__)
; 1072 : #ifdef _M_IX86
; 1073 :     __asm__ volatile (
; 1074 :         "addb\t$-1, %0\n\t"
; 1075 :         "movl\t(%1), %%ecx\n\t"
; 1076 :         "adcl\t(%2), %%ecx\n\t"
; 1077 :         "movl\t%%ecx, (%3)\n\t"
; 1078 :         "movl\t4(%1), %%ecx\n\t"
; 1079 :         "adcl\t4(%2), %%ecx\n\t"
; 1080 :         "movl\t%%ecx, 4(%3)\n\t"
; 1081 :         "movl\t8(%1), %%ecx\n\t"
; 1082 :         "adcl\t8(%2), %%ecx\n\t"
; 1083 :         "movl\t%%ecx, 8(%3)\n\t"
; 1084 :         "movl\t12(%1), %%ecx\n\t"
; 1085 :         "adcl\t12(%2), %%ecx\n\t"
; 1086 :         "movl\t%%ecx, 12(%3)\n\t"
; 1087 :         "movl\t16(%1), %%ecx\n\t"
; 1088 :         "adcl\t16(%2), %%ecx\n\t"
; 1089 :         "movl\t%%ecx, 16(%3)\n\t"
; 1090 :         "movl\t20(%1), %%ecx\n\t"
; 1091 :         "adcl\t20(%2), %%ecx\n\t"
; 1092 :         "movl\t%%ecx, 20(%3)\n\t"
; 1093 :         "movl\t24(%1), %%ecx\n\t"
; 1094 :         "adcl\t24(%2), %%ecx\n\t"
; 1095 :         "movl\t%%ecx, 24(%3)\n\t"
; 1096 :         "movl\t28(%1), %%ecx\n\t"
; 1097 :         "adcl\t28(%2), %%ecx\n\t"
; 1098 :         "movl\t%%ecx, 28(%3)\n\t"
; 1099 :         "movl\t32(%1), %%ecx\n\t"
; 1100 :         "adcl\t32(%2), %%ecx\n\t"
; 1101 :         "movl\t%%ecx, 32(%3)\n\t"
; 1102 :         "movl\t36(%1), %%ecx\n\t"
; 1103 :         "adcl\t36(%2), %%ecx\n\t"
; 1104 :         "movl\t%%ecx, 36(%3)\n\t"
; 1105 :         "movl\t40(%1), %%ecx\n\t"
; 1106 :         "adcl\t40(%2), %%ecx\n\t"
; 1107 :         "movl\t%%ecx, 40(%3)\n\t"
; 1108 :         "movl\t44(%1), %%ecx\n\t"
; 1109 :         "adcl\t44(%2), %%ecx\n\t"
; 1110 :         "movl\t%%ecx, 44(%3)\n\t"
; 1111 :         "movl\t48(%1), %%ecx\n\t"
; 1112 :         "adcl\t48(%2), %%ecx\n\t"
; 1113 :         "movl\t%%ecx, 48(%3)\n\t"
; 1114 :         "movl\t52(%1), %%ecx\n\t"
; 1115 :         "adcl\t52(%2), %%ecx\n\t"
; 1116 :         "movl\t%%ecx, 52(%3)\n\t"
; 1117 :         "movl\t56(%1), %%ecx\n\t"
; 1118 :         "adcl\t56(%2), %%ecx\n\t"
; 1119 :         "movl\t%%ecx, 56(%3)\n\t"
; 1120 :         "movl\t60(%1), %%ecx\n\t"
; 1121 :         "adcl\t60(%2), %%ecx\n\t"
; 1122 :         "movl\t%%ecx, 60(%3)\n\t"
; 1123 :         "setc\t%0"
; 1124 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1125 :         :
; 1126 :         : "cc", "memory", "%ecx"
; 1127 : );
; 1128 : #elif defined(_M_X64)
; 1129 :     __asm__ volatile (
; 1130 :         "addb\t$-1, %0\n\t"
; 1131 :         "movq\t(%1), %%rcx\n\t"
; 1132 :         "adcq\t(%2), %%rcx\n\t"
; 1133 :         "movq\t%%rcx, (%3)\n\t"
; 1134 :         "movq\t8(%1), %%rcx\n\t"
; 1135 :         "adcq\t8(%2), %%rcx\n\t"
; 1136 :         "movq\t%%rcx, 8(%3)\n\t"
; 1137 :         "movq\t16(%1), %%rcx\n\t"
; 1138 :         "adcq\t16(%2), %%rcx\n\t"
; 1139 :         "movq\t%%rcx, 16(%3)\n\t"
; 1140 :         "movq\t24(%1), %%rcx\n\t"
; 1141 :         "adcq\t24(%2), %%rcx\n\t"
; 1142 :         "movq\t%%rcx, 24(%3)\n\t"
; 1143 :         "movq\t32(%1), %%rcx\n\t"
; 1144 :         "adcq\t32(%2), %%rcx\n\t"
; 1145 :         "movq\t%%rcx, 32(%3)\n\t"
; 1146 :         "movq\t40(%1), %%rcx\n\t"
; 1147 :         "adcq\t40(%2), %%rcx\n\t"
; 1148 :         "movq\t%%rcx, 40(%3)\n\t"
; 1149 :         "movq\t48(%1), %%rcx\n\t"
; 1150 :         "adcq\t48(%2), %%rcx\n\t"
; 1151 :         "movq\t%%rcx, 48(%3)\n\t"
; 1152 :         "movq\t56(%1), %%rcx\n\t"
; 1153 :         "adcq\t56(%2), %%rcx\n\t"
; 1154 :         "movq\t%%rcx, 56(%3)\n\t"
; 1155 :         "movq\t64(%1), %%rcx\n\t"
; 1156 :         "adcq\t64(%2), %%rcx\n\t"
; 1157 :         "movq\t%%rcx, 64(%3)\n\t"
; 1158 :         "movq\t72(%1), %%rcx\n\t"
; 1159 :         "adcq\t72(%2), %%rcx\n\t"
; 1160 :         "movq\t%%rcx, 72(%3)\n\t"
; 1161 :         "movq\t80(%1), %%rcx\n\t"
; 1162 :         "adcq\t80(%2), %%rcx\n\t"
; 1163 :         "movq\t%%rcx, 80(%3)\n\t"
; 1164 :         "movq\t88(%1), %%rcx\n\t"
; 1165 :         "adcq\t88(%2), %%rcx\n\t"
; 1166 :         "movq\t%%rcx, 88(%3)\n\t"
; 1167 :         "movq\t96(%1), %%rcx\n\t"
; 1168 :         "adcq\t96(%2), %%rcx\n\t"
; 1169 :         "movq\t%%rcx, 96(%3)\n\t"
; 1170 :         "movq\t104(%1), %%rcx\n\t"
; 1171 :         "adcq\t104(%2), %%rcx\n\t"
; 1172 :         "movq\t%%rcx, 104(%3)\n\t"
; 1173 :         "movq\t112(%1), %%rcx\n\t"
; 1174 :         "adcq\t112(%2), %%rcx\n\t"
; 1175 :         "movq\t%%rcx, 112(%3)\n\t"
; 1176 :         "movq\t120(%1), %%rcx\n\t"
; 1177 :         "adcq\t120(%2), %%rcx\n\t"
; 1178 :         "movq\t%%rcx, 120(%3)\n\t"
; 1179 :         "setc\t%0"
; 1180 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1181 :         :
; 1182 :         : "cc", "memory", "%rcx"
; 1183 : );
; 1184 : #else
; 1185 : #error unknown platform
; 1186 : #endif
; 1187 : #else
; 1188 : #error unknown compiler
; 1189 : #endif
; 1190 :     return (c);

  003aa	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]

; 1191 : }

  003ad	3b ec		 cmp	 ebp, esp
  003af	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003b4	5d		 pop	 ebp
  003b5	c3		 ret	 0
__ADD_16WORDS_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_32WORDS_ADCX PROC

; 294  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __E05E7037_autogenerated_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 295  : #ifdef _MSC_VER
; 296  :     c = _ADDX_UNIT(c, xp[0], yp[0], &zp[0]);

  0000d	b8 04 00 00 00	 mov	 eax, 4
  00012	6b c8 00	 imul	 ecx, eax, 0
  00015	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00018	51		 push	 ecx
  00019	ba 04 00 00 00	 mov	 edx, 4
  0001e	6b c2 00	 imul	 eax, edx, 0
  00021	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00024	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00027	52		 push	 edx
  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  00033	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00036	50		 push	 eax
  00037	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 __ADDX_UNIT
  00041	83 c4 10	 add	 esp, 16			; 00000010H
  00044	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 297  :     c = _ADDX_UNIT(c, xp[1], yp[1], &zp[1]);

  00047	ba 04 00 00 00	 mov	 edx, 4
  0004c	c1 e2 00	 shl	 edx, 0
  0004f	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00052	52		 push	 edx
  00053	b8 04 00 00 00	 mov	 eax, 4
  00058	c1 e0 00	 shl	 eax, 0
  0005b	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0005e	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00061	52		 push	 edx
  00062	b8 04 00 00 00	 mov	 eax, 4
  00067	c1 e0 00	 shl	 eax, 0
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  0006d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00070	52		 push	 edx
  00071	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 __ADDX_UNIT
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 298  :     c = _ADDX_UNIT(c, xp[2], yp[2], &zp[2]);

  00081	b9 04 00 00 00	 mov	 ecx, 4
  00086	d1 e1		 shl	 ecx, 1
  00088	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  0008b	51		 push	 ecx
  0008c	ba 04 00 00 00	 mov	 edx, 4
  00091	d1 e2		 shl	 edx, 1
  00093	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00096	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00099	51		 push	 ecx
  0009a	ba 04 00 00 00	 mov	 edx, 4
  0009f	d1 e2		 shl	 edx, 1
  000a1	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  000a4	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  000a7	51		 push	 ecx
  000a8	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  000ac	52		 push	 edx
  000ad	e8 00 00 00 00	 call	 __ADDX_UNIT
  000b2	83 c4 10	 add	 esp, 16			; 00000010H
  000b5	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 299  :     c = _ADDX_UNIT(c, xp[3], yp[3], &zp[3]);

  000b8	b8 04 00 00 00	 mov	 eax, 4
  000bd	6b c8 03	 imul	 ecx, eax, 3
  000c0	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  000c3	51		 push	 ecx
  000c4	ba 04 00 00 00	 mov	 edx, 4
  000c9	6b c2 03	 imul	 eax, edx, 3
  000cc	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  000cf	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  000d2	52		 push	 edx
  000d3	b8 04 00 00 00	 mov	 eax, 4
  000d8	6b c8 03	 imul	 ecx, eax, 3
  000db	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  000de	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  000e1	50		 push	 eax
  000e2	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  000e6	51		 push	 ecx
  000e7	e8 00 00 00 00	 call	 __ADDX_UNIT
  000ec	83 c4 10	 add	 esp, 16			; 00000010H
  000ef	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 300  :     c = _ADDX_UNIT(c, xp[4], yp[4], &zp[4]);

  000f2	ba 04 00 00 00	 mov	 edx, 4
  000f7	c1 e2 02	 shl	 edx, 2
  000fa	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  000fd	52		 push	 edx
  000fe	b8 04 00 00 00	 mov	 eax, 4
  00103	c1 e0 02	 shl	 eax, 2
  00106	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00109	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0010c	52		 push	 edx
  0010d	b8 04 00 00 00	 mov	 eax, 4
  00112	c1 e0 02	 shl	 eax, 2
  00115	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00118	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0011b	52		 push	 edx
  0011c	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00120	50		 push	 eax
  00121	e8 00 00 00 00	 call	 __ADDX_UNIT
  00126	83 c4 10	 add	 esp, 16			; 00000010H
  00129	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 301  :     c = _ADDX_UNIT(c, xp[5], yp[5], &zp[5]);

  0012c	b9 04 00 00 00	 mov	 ecx, 4
  00131	6b d1 05	 imul	 edx, ecx, 5
  00134	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00137	52		 push	 edx
  00138	b8 04 00 00 00	 mov	 eax, 4
  0013d	6b c8 05	 imul	 ecx, eax, 5
  00140	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  00143	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00146	50		 push	 eax
  00147	b9 04 00 00 00	 mov	 ecx, 4
  0014c	6b d1 05	 imul	 edx, ecx, 5
  0014f	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  00152	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00155	51		 push	 ecx
  00156	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  0015a	52		 push	 edx
  0015b	e8 00 00 00 00	 call	 __ADDX_UNIT
  00160	83 c4 10	 add	 esp, 16			; 00000010H
  00163	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 302  :     c = _ADDX_UNIT(c, xp[6], yp[6], &zp[6]);

  00166	b8 04 00 00 00	 mov	 eax, 4
  0016b	6b c8 06	 imul	 ecx, eax, 6
  0016e	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00171	51		 push	 ecx
  00172	ba 04 00 00 00	 mov	 edx, 4
  00177	6b c2 06	 imul	 eax, edx, 6
  0017a	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0017d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00180	52		 push	 edx
  00181	b8 04 00 00 00	 mov	 eax, 4
  00186	6b c8 06	 imul	 ecx, eax, 6
  00189	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  0018c	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0018f	50		 push	 eax
  00190	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  00194	51		 push	 ecx
  00195	e8 00 00 00 00	 call	 __ADDX_UNIT
  0019a	83 c4 10	 add	 esp, 16			; 00000010H
  0019d	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 303  :     c = _ADDX_UNIT(c, xp[7], yp[7], &zp[7]);

  001a0	ba 04 00 00 00	 mov	 edx, 4
  001a5	6b c2 07	 imul	 eax, edx, 7
  001a8	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  001ab	50		 push	 eax
  001ac	b9 04 00 00 00	 mov	 ecx, 4
  001b1	6b d1 07	 imul	 edx, ecx, 7
  001b4	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  001b7	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  001ba	51		 push	 ecx
  001bb	ba 04 00 00 00	 mov	 edx, 4
  001c0	6b c2 07	 imul	 eax, edx, 7
  001c3	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  001c6	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  001c9	52		 push	 edx
  001ca	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  001ce	50		 push	 eax
  001cf	e8 00 00 00 00	 call	 __ADDX_UNIT
  001d4	83 c4 10	 add	 esp, 16			; 00000010H
  001d7	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 304  :     c = _ADDX_UNIT(c, xp[8], yp[8], &zp[8]);

  001da	b9 04 00 00 00	 mov	 ecx, 4
  001df	c1 e1 03	 shl	 ecx, 3
  001e2	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  001e5	51		 push	 ecx
  001e6	ba 04 00 00 00	 mov	 edx, 4
  001eb	c1 e2 03	 shl	 edx, 3
  001ee	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  001f1	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  001f4	51		 push	 ecx
  001f5	ba 04 00 00 00	 mov	 edx, 4
  001fa	c1 e2 03	 shl	 edx, 3
  001fd	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  00200	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00203	51		 push	 ecx
  00204	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  00208	52		 push	 edx
  00209	e8 00 00 00 00	 call	 __ADDX_UNIT
  0020e	83 c4 10	 add	 esp, 16			; 00000010H
  00211	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 305  :     c = _ADDX_UNIT(c, xp[9], yp[9], &zp[9]);

  00214	b8 04 00 00 00	 mov	 eax, 4
  00219	6b c8 09	 imul	 ecx, eax, 9
  0021c	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  0021f	51		 push	 ecx
  00220	ba 04 00 00 00	 mov	 edx, 4
  00225	6b c2 09	 imul	 eax, edx, 9
  00228	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0022b	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0022e	52		 push	 edx
  0022f	b8 04 00 00 00	 mov	 eax, 4
  00234	6b c8 09	 imul	 ecx, eax, 9
  00237	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  0023a	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0023d	50		 push	 eax
  0023e	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  00242	51		 push	 ecx
  00243	e8 00 00 00 00	 call	 __ADDX_UNIT
  00248	83 c4 10	 add	 esp, 16			; 00000010H
  0024b	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 306  :     c = _ADDX_UNIT(c, xp[10], yp[10], &zp[10]);

  0024e	ba 04 00 00 00	 mov	 edx, 4
  00253	6b c2 0a	 imul	 eax, edx, 10
  00256	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  00259	50		 push	 eax
  0025a	b9 04 00 00 00	 mov	 ecx, 4
  0025f	6b d1 0a	 imul	 edx, ecx, 10
  00262	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00265	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00268	51		 push	 ecx
  00269	ba 04 00 00 00	 mov	 edx, 4
  0026e	6b c2 0a	 imul	 eax, edx, 10
  00271	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00274	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00277	52		 push	 edx
  00278	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  0027c	50		 push	 eax
  0027d	e8 00 00 00 00	 call	 __ADDX_UNIT
  00282	83 c4 10	 add	 esp, 16			; 00000010H
  00285	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 307  :     c = _ADDX_UNIT(c, xp[11], yp[11], &zp[11]);

  00288	b9 04 00 00 00	 mov	 ecx, 4
  0028d	6b d1 0b	 imul	 edx, ecx, 11
  00290	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00293	52		 push	 edx
  00294	b8 04 00 00 00	 mov	 eax, 4
  00299	6b c8 0b	 imul	 ecx, eax, 11
  0029c	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  0029f	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  002a2	50		 push	 eax
  002a3	b9 04 00 00 00	 mov	 ecx, 4
  002a8	6b d1 0b	 imul	 edx, ecx, 11
  002ab	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  002ae	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  002b1	51		 push	 ecx
  002b2	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  002b6	52		 push	 edx
  002b7	e8 00 00 00 00	 call	 __ADDX_UNIT
  002bc	83 c4 10	 add	 esp, 16			; 00000010H
  002bf	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 308  :     c = _ADDX_UNIT(c, xp[12], yp[12], &zp[12]);

  002c2	b8 04 00 00 00	 mov	 eax, 4
  002c7	6b c8 0c	 imul	 ecx, eax, 12
  002ca	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  002cd	51		 push	 ecx
  002ce	ba 04 00 00 00	 mov	 edx, 4
  002d3	6b c2 0c	 imul	 eax, edx, 12
  002d6	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  002d9	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  002dc	52		 push	 edx
  002dd	b8 04 00 00 00	 mov	 eax, 4
  002e2	6b c8 0c	 imul	 ecx, eax, 12
  002e5	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  002e8	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  002eb	50		 push	 eax
  002ec	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  002f0	51		 push	 ecx
  002f1	e8 00 00 00 00	 call	 __ADDX_UNIT
  002f6	83 c4 10	 add	 esp, 16			; 00000010H
  002f9	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 309  :     c = _ADDX_UNIT(c, xp[13], yp[13], &zp[13]);

  002fc	ba 04 00 00 00	 mov	 edx, 4
  00301	6b c2 0d	 imul	 eax, edx, 13
  00304	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  00307	50		 push	 eax
  00308	b9 04 00 00 00	 mov	 ecx, 4
  0030d	6b d1 0d	 imul	 edx, ecx, 13
  00310	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00313	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00316	51		 push	 ecx
  00317	ba 04 00 00 00	 mov	 edx, 4
  0031c	6b c2 0d	 imul	 eax, edx, 13
  0031f	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00322	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00325	52		 push	 edx
  00326	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  0032a	50		 push	 eax
  0032b	e8 00 00 00 00	 call	 __ADDX_UNIT
  00330	83 c4 10	 add	 esp, 16			; 00000010H
  00333	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 310  :     c = _ADDX_UNIT(c, xp[14], yp[14], &zp[14]);

  00336	b9 04 00 00 00	 mov	 ecx, 4
  0033b	6b d1 0e	 imul	 edx, ecx, 14
  0033e	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00341	52		 push	 edx
  00342	b8 04 00 00 00	 mov	 eax, 4
  00347	6b c8 0e	 imul	 ecx, eax, 14
  0034a	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  0034d	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00350	50		 push	 eax
  00351	b9 04 00 00 00	 mov	 ecx, 4
  00356	6b d1 0e	 imul	 edx, ecx, 14
  00359	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  0035c	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0035f	51		 push	 ecx
  00360	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  00364	52		 push	 edx
  00365	e8 00 00 00 00	 call	 __ADDX_UNIT
  0036a	83 c4 10	 add	 esp, 16			; 00000010H
  0036d	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 311  :     c = _ADDX_UNIT(c, xp[15], yp[15], &zp[15]);

  00370	b8 04 00 00 00	 mov	 eax, 4
  00375	6b c8 0f	 imul	 ecx, eax, 15
  00378	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  0037b	51		 push	 ecx
  0037c	ba 04 00 00 00	 mov	 edx, 4
  00381	6b c2 0f	 imul	 eax, edx, 15
  00384	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00387	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0038a	52		 push	 edx
  0038b	b8 04 00 00 00	 mov	 eax, 4
  00390	6b c8 0f	 imul	 ecx, eax, 15
  00393	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  00396	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00399	50		 push	 eax
  0039a	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  0039e	51		 push	 ecx
  0039f	e8 00 00 00 00	 call	 __ADDX_UNIT
  003a4	83 c4 10	 add	 esp, 16			; 00000010H
  003a7	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 312  :     c = _ADDX_UNIT(c, xp[16], yp[16], &zp[16]);

  003aa	ba 04 00 00 00	 mov	 edx, 4
  003af	c1 e2 04	 shl	 edx, 4
  003b2	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  003b5	52		 push	 edx
  003b6	b8 04 00 00 00	 mov	 eax, 4
  003bb	c1 e0 04	 shl	 eax, 4
  003be	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  003c1	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  003c4	52		 push	 edx
  003c5	b8 04 00 00 00	 mov	 eax, 4
  003ca	c1 e0 04	 shl	 eax, 4
  003cd	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  003d0	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  003d3	52		 push	 edx
  003d4	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  003d8	50		 push	 eax
  003d9	e8 00 00 00 00	 call	 __ADDX_UNIT
  003de	83 c4 10	 add	 esp, 16			; 00000010H
  003e1	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 313  :     c = _ADDX_UNIT(c, xp[17], yp[17], &zp[17]);

  003e4	b9 04 00 00 00	 mov	 ecx, 4
  003e9	6b d1 11	 imul	 edx, ecx, 17
  003ec	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  003ef	52		 push	 edx
  003f0	b8 04 00 00 00	 mov	 eax, 4
  003f5	6b c8 11	 imul	 ecx, eax, 17
  003f8	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  003fb	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  003fe	50		 push	 eax
  003ff	b9 04 00 00 00	 mov	 ecx, 4
  00404	6b d1 11	 imul	 edx, ecx, 17
  00407	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  0040a	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0040d	51		 push	 ecx
  0040e	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  00412	52		 push	 edx
  00413	e8 00 00 00 00	 call	 __ADDX_UNIT
  00418	83 c4 10	 add	 esp, 16			; 00000010H
  0041b	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 314  :     c = _ADDX_UNIT(c, xp[18], yp[18], &zp[18]);

  0041e	b8 04 00 00 00	 mov	 eax, 4
  00423	6b c8 12	 imul	 ecx, eax, 18
  00426	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00429	51		 push	 ecx
  0042a	ba 04 00 00 00	 mov	 edx, 4
  0042f	6b c2 12	 imul	 eax, edx, 18
  00432	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00435	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00438	52		 push	 edx
  00439	b8 04 00 00 00	 mov	 eax, 4
  0043e	6b c8 12	 imul	 ecx, eax, 18
  00441	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  00444	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00447	50		 push	 eax
  00448	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  0044c	51		 push	 ecx
  0044d	e8 00 00 00 00	 call	 __ADDX_UNIT
  00452	83 c4 10	 add	 esp, 16			; 00000010H
  00455	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 315  :     c = _ADDX_UNIT(c, xp[19], yp[19], &zp[19]);

  00458	ba 04 00 00 00	 mov	 edx, 4
  0045d	6b c2 13	 imul	 eax, edx, 19
  00460	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  00463	50		 push	 eax
  00464	b9 04 00 00 00	 mov	 ecx, 4
  00469	6b d1 13	 imul	 edx, ecx, 19
  0046c	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  0046f	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00472	51		 push	 ecx
  00473	ba 04 00 00 00	 mov	 edx, 4
  00478	6b c2 13	 imul	 eax, edx, 19
  0047b	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  0047e	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00481	52		 push	 edx
  00482	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00486	50		 push	 eax
  00487	e8 00 00 00 00	 call	 __ADDX_UNIT
  0048c	83 c4 10	 add	 esp, 16			; 00000010H
  0048f	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 316  :     c = _ADDX_UNIT(c, xp[20], yp[20], &zp[20]);

  00492	b9 04 00 00 00	 mov	 ecx, 4
  00497	6b d1 14	 imul	 edx, ecx, 20
  0049a	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  0049d	52		 push	 edx
  0049e	b8 04 00 00 00	 mov	 eax, 4
  004a3	6b c8 14	 imul	 ecx, eax, 20
  004a6	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  004a9	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  004ac	50		 push	 eax
  004ad	b9 04 00 00 00	 mov	 ecx, 4
  004b2	6b d1 14	 imul	 edx, ecx, 20
  004b5	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  004b8	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  004bb	51		 push	 ecx
  004bc	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  004c0	52		 push	 edx
  004c1	e8 00 00 00 00	 call	 __ADDX_UNIT
  004c6	83 c4 10	 add	 esp, 16			; 00000010H
  004c9	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 317  :     c = _ADDX_UNIT(c, xp[21], yp[21], &zp[21]);

  004cc	b8 04 00 00 00	 mov	 eax, 4
  004d1	6b c8 15	 imul	 ecx, eax, 21
  004d4	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  004d7	51		 push	 ecx
  004d8	ba 04 00 00 00	 mov	 edx, 4
  004dd	6b c2 15	 imul	 eax, edx, 21
  004e0	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  004e3	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  004e6	52		 push	 edx
  004e7	b8 04 00 00 00	 mov	 eax, 4
  004ec	6b c8 15	 imul	 ecx, eax, 21
  004ef	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  004f2	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  004f5	50		 push	 eax
  004f6	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  004fa	51		 push	 ecx
  004fb	e8 00 00 00 00	 call	 __ADDX_UNIT
  00500	83 c4 10	 add	 esp, 16			; 00000010H
  00503	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 318  :     c = _ADDX_UNIT(c, xp[22], yp[22], &zp[22]);

  00506	ba 04 00 00 00	 mov	 edx, 4
  0050b	6b c2 16	 imul	 eax, edx, 22
  0050e	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  00511	50		 push	 eax
  00512	b9 04 00 00 00	 mov	 ecx, 4
  00517	6b d1 16	 imul	 edx, ecx, 22
  0051a	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  0051d	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00520	51		 push	 ecx
  00521	ba 04 00 00 00	 mov	 edx, 4
  00526	6b c2 16	 imul	 eax, edx, 22
  00529	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  0052c	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0052f	52		 push	 edx
  00530	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00534	50		 push	 eax
  00535	e8 00 00 00 00	 call	 __ADDX_UNIT
  0053a	83 c4 10	 add	 esp, 16			; 00000010H
  0053d	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 319  :     c = _ADDX_UNIT(c, xp[23], yp[23], &zp[23]);

  00540	b9 04 00 00 00	 mov	 ecx, 4
  00545	6b d1 17	 imul	 edx, ecx, 23
  00548	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  0054b	52		 push	 edx
  0054c	b8 04 00 00 00	 mov	 eax, 4
  00551	6b c8 17	 imul	 ecx, eax, 23
  00554	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  00557	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0055a	50		 push	 eax
  0055b	b9 04 00 00 00	 mov	 ecx, 4
  00560	6b d1 17	 imul	 edx, ecx, 23
  00563	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  00566	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00569	51		 push	 ecx
  0056a	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  0056e	52		 push	 edx
  0056f	e8 00 00 00 00	 call	 __ADDX_UNIT
  00574	83 c4 10	 add	 esp, 16			; 00000010H
  00577	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 320  :     c = _ADDX_UNIT(c, xp[24], yp[24], &zp[24]);

  0057a	b8 04 00 00 00	 mov	 eax, 4
  0057f	6b c8 18	 imul	 ecx, eax, 24
  00582	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00585	51		 push	 ecx
  00586	ba 04 00 00 00	 mov	 edx, 4
  0058b	6b c2 18	 imul	 eax, edx, 24
  0058e	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00591	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00594	52		 push	 edx
  00595	b8 04 00 00 00	 mov	 eax, 4
  0059a	6b c8 18	 imul	 ecx, eax, 24
  0059d	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  005a0	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  005a3	50		 push	 eax
  005a4	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  005a8	51		 push	 ecx
  005a9	e8 00 00 00 00	 call	 __ADDX_UNIT
  005ae	83 c4 10	 add	 esp, 16			; 00000010H
  005b1	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 321  :     c = _ADDX_UNIT(c, xp[25], yp[25], &zp[25]);

  005b4	ba 04 00 00 00	 mov	 edx, 4
  005b9	6b c2 19	 imul	 eax, edx, 25
  005bc	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  005bf	50		 push	 eax
  005c0	b9 04 00 00 00	 mov	 ecx, 4
  005c5	6b d1 19	 imul	 edx, ecx, 25
  005c8	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  005cb	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  005ce	51		 push	 ecx
  005cf	ba 04 00 00 00	 mov	 edx, 4
  005d4	6b c2 19	 imul	 eax, edx, 25
  005d7	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  005da	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  005dd	52		 push	 edx
  005de	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  005e2	50		 push	 eax
  005e3	e8 00 00 00 00	 call	 __ADDX_UNIT
  005e8	83 c4 10	 add	 esp, 16			; 00000010H
  005eb	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 322  :     c = _ADDX_UNIT(c, xp[26], yp[26], &zp[26]);

  005ee	b9 04 00 00 00	 mov	 ecx, 4
  005f3	6b d1 1a	 imul	 edx, ecx, 26
  005f6	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  005f9	52		 push	 edx
  005fa	b8 04 00 00 00	 mov	 eax, 4
  005ff	6b c8 1a	 imul	 ecx, eax, 26
  00602	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  00605	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00608	50		 push	 eax
  00609	b9 04 00 00 00	 mov	 ecx, 4
  0060e	6b d1 1a	 imul	 edx, ecx, 26
  00611	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  00614	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00617	51		 push	 ecx
  00618	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  0061c	52		 push	 edx
  0061d	e8 00 00 00 00	 call	 __ADDX_UNIT
  00622	83 c4 10	 add	 esp, 16			; 00000010H
  00625	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 323  :     c = _ADDX_UNIT(c, xp[27], yp[27], &zp[27]);

  00628	b8 04 00 00 00	 mov	 eax, 4
  0062d	6b c8 1b	 imul	 ecx, eax, 27
  00630	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00633	51		 push	 ecx
  00634	ba 04 00 00 00	 mov	 edx, 4
  00639	6b c2 1b	 imul	 eax, edx, 27
  0063c	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0063f	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00642	52		 push	 edx
  00643	b8 04 00 00 00	 mov	 eax, 4
  00648	6b c8 1b	 imul	 ecx, eax, 27
  0064b	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  0064e	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00651	50		 push	 eax
  00652	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  00656	51		 push	 ecx
  00657	e8 00 00 00 00	 call	 __ADDX_UNIT
  0065c	83 c4 10	 add	 esp, 16			; 00000010H
  0065f	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 324  :     c = _ADDX_UNIT(c, xp[28], yp[28], &zp[28]);

  00662	ba 04 00 00 00	 mov	 edx, 4
  00667	6b c2 1c	 imul	 eax, edx, 28
  0066a	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  0066d	50		 push	 eax
  0066e	b9 04 00 00 00	 mov	 ecx, 4
  00673	6b d1 1c	 imul	 edx, ecx, 28
  00676	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00679	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0067c	51		 push	 ecx
  0067d	ba 04 00 00 00	 mov	 edx, 4
  00682	6b c2 1c	 imul	 eax, edx, 28
  00685	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00688	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0068b	52		 push	 edx
  0068c	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00690	50		 push	 eax
  00691	e8 00 00 00 00	 call	 __ADDX_UNIT
  00696	83 c4 10	 add	 esp, 16			; 00000010H
  00699	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 325  :     c = _ADDX_UNIT(c, xp[29], yp[29], &zp[29]);

  0069c	b9 04 00 00 00	 mov	 ecx, 4
  006a1	6b d1 1d	 imul	 edx, ecx, 29
  006a4	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  006a7	52		 push	 edx
  006a8	b8 04 00 00 00	 mov	 eax, 4
  006ad	6b c8 1d	 imul	 ecx, eax, 29
  006b0	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  006b3	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  006b6	50		 push	 eax
  006b7	b9 04 00 00 00	 mov	 ecx, 4
  006bc	6b d1 1d	 imul	 edx, ecx, 29
  006bf	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  006c2	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  006c5	51		 push	 ecx
  006c6	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  006ca	52		 push	 edx
  006cb	e8 00 00 00 00	 call	 __ADDX_UNIT
  006d0	83 c4 10	 add	 esp, 16			; 00000010H
  006d3	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 326  :     c = _ADDX_UNIT(c, xp[30], yp[30], &zp[30]);

  006d6	b8 04 00 00 00	 mov	 eax, 4
  006db	6b c8 1e	 imul	 ecx, eax, 30
  006de	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  006e1	51		 push	 ecx
  006e2	ba 04 00 00 00	 mov	 edx, 4
  006e7	6b c2 1e	 imul	 eax, edx, 30
  006ea	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  006ed	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  006f0	52		 push	 edx
  006f1	b8 04 00 00 00	 mov	 eax, 4
  006f6	6b c8 1e	 imul	 ecx, eax, 30
  006f9	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  006fc	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  006ff	50		 push	 eax
  00700	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  00704	51		 push	 ecx
  00705	e8 00 00 00 00	 call	 __ADDX_UNIT
  0070a	83 c4 10	 add	 esp, 16			; 00000010H
  0070d	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 327  :     c = _ADDX_UNIT(c, xp[31], yp[31], &zp[31]);

  00710	ba 04 00 00 00	 mov	 edx, 4
  00715	6b c2 1f	 imul	 eax, edx, 31
  00718	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  0071b	50		 push	 eax
  0071c	b9 04 00 00 00	 mov	 ecx, 4
  00721	6b d1 1f	 imul	 edx, ecx, 31
  00724	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00727	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0072a	51		 push	 ecx
  0072b	ba 04 00 00 00	 mov	 edx, 4
  00730	6b c2 1f	 imul	 eax, edx, 31
  00733	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00736	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00739	52		 push	 edx
  0073a	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  0073e	50		 push	 eax
  0073f	e8 00 00 00 00	 call	 __ADDX_UNIT
  00744	83 c4 10	 add	 esp, 16			; 00000010H
  00747	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 328  : #elif defined(__GNUC__)
; 329  : #ifdef _M_IX86
; 330  :     __asm__ volatile (
; 331  :         "addb\t$-1, %0\n\t"
; 332  :         "movl\t(%1), %%ecx\n\t"
; 333  :         "adcxl\t(%2), %%ecx\n\t"
; 334  :         "movl\t%%ecx, (%3)\n\t"
; 335  :         "movl\t4(%1), %%ecx\n\t"
; 336  :         "adcxl\t4(%2), %%ecx\n\t"
; 337  :         "movl\t%%ecx, 4(%3)\n\t"
; 338  :         "movl\t8(%1), %%ecx\n\t"
; 339  :         "adcxl\t8(%2), %%ecx\n\t"
; 340  :         "movl\t%%ecx, 8(%3)\n\t"
; 341  :         "movl\t12(%1), %%ecx\n\t"
; 342  :         "adcxl\t12(%2), %%ecx\n\t"
; 343  :         "movl\t%%ecx, 12(%3)\n\t"
; 344  :         "movl\t16(%1), %%ecx\n\t"
; 345  :         "adcxl\t16(%2), %%ecx\n\t"
; 346  :         "movl\t%%ecx, 16(%3)\n\t"
; 347  :         "movl\t20(%1), %%ecx\n\t"
; 348  :         "adcxl\t20(%2), %%ecx\n\t"
; 349  :         "movl\t%%ecx, 20(%3)\n\t"
; 350  :         "movl\t24(%1), %%ecx\n\t"
; 351  :         "adcxl\t24(%2), %%ecx\n\t"
; 352  :         "movl\t%%ecx, 24(%3)\n\t"
; 353  :         "movl\t28(%1), %%ecx\n\t"
; 354  :         "adcxl\t28(%2), %%ecx\n\t"
; 355  :         "movl\t%%ecx, 28(%3)\n\t"
; 356  :         "movl\t32(%1), %%ecx\n\t"
; 357  :         "adcxl\t32(%2), %%ecx\n\t"
; 358  :         "movl\t%%ecx, 32(%3)\n\t"
; 359  :         "movl\t36(%1), %%ecx\n\t"
; 360  :         "adcxl\t36(%2), %%ecx\n\t"
; 361  :         "movl\t%%ecx, 36(%3)\n\t"
; 362  :         "movl\t40(%1), %%ecx\n\t"
; 363  :         "adcxl\t40(%2), %%ecx\n\t"
; 364  :         "movl\t%%ecx, 40(%3)\n\t"
; 365  :         "movl\t44(%1), %%ecx\n\t"
; 366  :         "adcxl\t44(%2), %%ecx\n\t"
; 367  :         "movl\t%%ecx, 44(%3)\n\t"
; 368  :         "movl\t48(%1), %%ecx\n\t"
; 369  :         "adcxl\t48(%2), %%ecx\n\t"
; 370  :         "movl\t%%ecx, 48(%3)\n\t"
; 371  :         "movl\t52(%1), %%ecx\n\t"
; 372  :         "adcxl\t52(%2), %%ecx\n\t"
; 373  :         "movl\t%%ecx, 52(%3)\n\t"
; 374  :         "movl\t56(%1), %%ecx\n\t"
; 375  :         "adcxl\t56(%2), %%ecx\n\t"
; 376  :         "movl\t%%ecx, 56(%3)\n\t"
; 377  :         "movl\t60(%1), %%ecx\n\t"
; 378  :         "adcxl\t60(%2), %%ecx\n\t"
; 379  :         "movl\t%%ecx, 60(%3)\n\t"
; 380  :         "movl\t64(%1), %%ecx\n\t"
; 381  :         "adcxl\t64(%2), %%ecx\n\t"
; 382  :         "movl\t%%ecx, 64(%3)\n\t"
; 383  :         "movl\t68(%1), %%ecx\n\t"
; 384  :         "adcxl\t68(%2), %%ecx\n\t"
; 385  :         "movl\t%%ecx, 68(%3)\n\t"
; 386  :         "movl\t72(%1), %%ecx\n\t"
; 387  :         "adcxl\t72(%2), %%ecx\n\t"
; 388  :         "movl\t%%ecx, 72(%3)\n\t"
; 389  :         "movl\t76(%1), %%ecx\n\t"
; 390  :         "adcxl\t76(%2), %%ecx\n\t"
; 391  :         "movl\t%%ecx, 76(%3)\n\t"
; 392  :         "movl\t80(%1), %%ecx\n\t"
; 393  :         "adcxl\t80(%2), %%ecx\n\t"
; 394  :         "movl\t%%ecx, 80(%3)\n\t"
; 395  :         "movl\t84(%1), %%ecx\n\t"
; 396  :         "adcxl\t84(%2), %%ecx\n\t"
; 397  :         "movl\t%%ecx, 84(%3)\n\t"
; 398  :         "movl\t88(%1), %%ecx\n\t"
; 399  :         "adcxl\t88(%2), %%ecx\n\t"
; 400  :         "movl\t%%ecx, 88(%3)\n\t"
; 401  :         "movl\t92(%1), %%ecx\n\t"
; 402  :         "adcxl\t92(%2), %%ecx\n\t"
; 403  :         "movl\t%%ecx, 92(%3)\n\t"
; 404  :         "movl\t96(%1), %%ecx\n\t"
; 405  :         "adcxl\t96(%2), %%ecx\n\t"
; 406  :         "movl\t%%ecx, 96(%3)\n\t"
; 407  :         "movl\t100(%1), %%ecx\n\t"
; 408  :         "adcxl\t100(%2), %%ecx\n\t"
; 409  :         "movl\t%%ecx, 100(%3)\n\t"
; 410  :         "movl\t104(%1), %%ecx\n\t"
; 411  :         "adcxl\t104(%2), %%ecx\n\t"
; 412  :         "movl\t%%ecx, 104(%3)\n\t"
; 413  :         "movl\t108(%1), %%ecx\n\t"
; 414  :         "adcxl\t108(%2), %%ecx\n\t"
; 415  :         "movl\t%%ecx, 108(%3)\n\t"
; 416  :         "movl\t112(%1), %%ecx\n\t"
; 417  :         "adcxl\t112(%2), %%ecx\n\t"
; 418  :         "movl\t%%ecx, 112(%3)\n\t"
; 419  :         "movl\t116(%1), %%ecx\n\t"
; 420  :         "adcxl\t116(%2), %%ecx\n\t"
; 421  :         "movl\t%%ecx, 116(%3)\n\t"
; 422  :         "movl\t120(%1), %%ecx\n\t"
; 423  :         "adcxl\t120(%2), %%ecx\n\t"
; 424  :         "movl\t%%ecx, 120(%3)\n\t"
; 425  :         "movl\t124(%1), %%ecx\n\t"
; 426  :         "adcxl\t124(%2), %%ecx\n\t"
; 427  :         "movl\t%%ecx, 124(%3)\n\t"
; 428  :         "setc\t%0"
; 429  :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 430  :         :
; 431  :         : "cc", "memory", "%ecx"
; 432  : );
; 433  : #elif defined(_M_X64)
; 434  :     __asm__ volatile (
; 435  :         "addb\t$-1, %0\n\t"
; 436  :         "movq\t(%1), %%rcx\n\t"
; 437  :         "adcxq\t(%2), %%rcx\n\t"
; 438  :         "movq\t%%rcx, (%3)\n\t"
; 439  :         "movq\t8(%1), %%rcx\n\t"
; 440  :         "adcxq\t8(%2), %%rcx\n\t"
; 441  :         "movq\t%%rcx, 8(%3)\n\t"
; 442  :         "movq\t16(%1), %%rcx\n\t"
; 443  :         "adcxq\t16(%2), %%rcx\n\t"
; 444  :         "movq\t%%rcx, 16(%3)\n\t"
; 445  :         "movq\t24(%1), %%rcx\n\t"
; 446  :         "adcxq\t24(%2), %%rcx\n\t"
; 447  :         "movq\t%%rcx, 24(%3)\n\t"
; 448  :         "movq\t32(%1), %%rcx\n\t"
; 449  :         "adcxq\t32(%2), %%rcx\n\t"
; 450  :         "movq\t%%rcx, 32(%3)\n\t"
; 451  :         "movq\t40(%1), %%rcx\n\t"
; 452  :         "adcxq\t40(%2), %%rcx\n\t"
; 453  :         "movq\t%%rcx, 40(%3)\n\t"
; 454  :         "movq\t48(%1), %%rcx\n\t"
; 455  :         "adcxq\t48(%2), %%rcx\n\t"
; 456  :         "movq\t%%rcx, 48(%3)\n\t"
; 457  :         "movq\t56(%1), %%rcx\n\t"
; 458  :         "adcxq\t56(%2), %%rcx\n\t"
; 459  :         "movq\t%%rcx, 56(%3)\n\t"
; 460  :         "movq\t64(%1), %%rcx\n\t"
; 461  :         "adcxq\t64(%2), %%rcx\n\t"
; 462  :         "movq\t%%rcx, 64(%3)\n\t"
; 463  :         "movq\t72(%1), %%rcx\n\t"
; 464  :         "adcxq\t72(%2), %%rcx\n\t"
; 465  :         "movq\t%%rcx, 72(%3)\n\t"
; 466  :         "movq\t80(%1), %%rcx\n\t"
; 467  :         "adcxq\t80(%2), %%rcx\n\t"
; 468  :         "movq\t%%rcx, 80(%3)\n\t"
; 469  :         "movq\t88(%1), %%rcx\n\t"
; 470  :         "adcxq\t88(%2), %%rcx\n\t"
; 471  :         "movq\t%%rcx, 88(%3)\n\t"
; 472  :         "movq\t96(%1), %%rcx\n\t"
; 473  :         "adcxq\t96(%2), %%rcx\n\t"
; 474  :         "movq\t%%rcx, 96(%3)\n\t"
; 475  :         "movq\t104(%1), %%rcx\n\t"
; 476  :         "adcxq\t104(%2), %%rcx\n\t"
; 477  :         "movq\t%%rcx, 104(%3)\n\t"
; 478  :         "movq\t112(%1), %%rcx\n\t"
; 479  :         "adcxq\t112(%2), %%rcx\n\t"
; 480  :         "movq\t%%rcx, 112(%3)\n\t"
; 481  :         "movq\t120(%1), %%rcx\n\t"
; 482  :         "adcxq\t120(%2), %%rcx\n\t"
; 483  :         "movq\t%%rcx, 120(%3)\n\t"
; 484  :         "movq\t128(%1), %%rcx\n\t"
; 485  :         "adcxq\t128(%2), %%rcx\n\t"
; 486  :         "movq\t%%rcx, 128(%3)\n\t"
; 487  :         "movq\t136(%1), %%rcx\n\t"
; 488  :         "adcxq\t136(%2), %%rcx\n\t"
; 489  :         "movq\t%%rcx, 136(%3)\n\t"
; 490  :         "movq\t144(%1), %%rcx\n\t"
; 491  :         "adcxq\t144(%2), %%rcx\n\t"
; 492  :         "movq\t%%rcx, 144(%3)\n\t"
; 493  :         "movq\t152(%1), %%rcx\n\t"
; 494  :         "adcxq\t152(%2), %%rcx\n\t"
; 495  :         "movq\t%%rcx, 152(%3)\n\t"
; 496  :         "movq\t160(%1), %%rcx\n\t"
; 497  :         "adcxq\t160(%2), %%rcx\n\t"
; 498  :         "movq\t%%rcx, 160(%3)\n\t"
; 499  :         "movq\t168(%1), %%rcx\n\t"
; 500  :         "adcxq\t168(%2), %%rcx\n\t"
; 501  :         "movq\t%%rcx, 168(%3)\n\t"
; 502  :         "movq\t176(%1), %%rcx\n\t"
; 503  :         "adcxq\t176(%2), %%rcx\n\t"
; 504  :         "movq\t%%rcx, 176(%3)\n\t"
; 505  :         "movq\t184(%1), %%rcx\n\t"
; 506  :         "adcxq\t184(%2), %%rcx\n\t"
; 507  :         "movq\t%%rcx, 184(%3)\n\t"
; 508  :         "movq\t192(%1), %%rcx\n\t"
; 509  :         "adcxq\t192(%2), %%rcx\n\t"
; 510  :         "movq\t%%rcx, 192(%3)\n\t"
; 511  :         "movq\t200(%1), %%rcx\n\t"
; 512  :         "adcxq\t200(%2), %%rcx\n\t"
; 513  :         "movq\t%%rcx, 200(%3)\n\t"
; 514  :         "movq\t208(%1), %%rcx\n\t"
; 515  :         "adcxq\t208(%2), %%rcx\n\t"
; 516  :         "movq\t%%rcx, 208(%3)\n\t"
; 517  :         "movq\t216(%1), %%rcx\n\t"
; 518  :         "adcxq\t216(%2), %%rcx\n\t"
; 519  :         "movq\t%%rcx, 216(%3)\n\t"
; 520  :         "movq\t224(%1), %%rcx\n\t"
; 521  :         "adcxq\t224(%2), %%rcx\n\t"
; 522  :         "movq\t%%rcx, 224(%3)\n\t"
; 523  :         "movq\t232(%1), %%rcx\n\t"
; 524  :         "adcxq\t232(%2), %%rcx\n\t"
; 525  :         "movq\t%%rcx, 232(%3)\n\t"
; 526  :         "movq\t240(%1), %%rcx\n\t"
; 527  :         "adcxq\t240(%2), %%rcx\n\t"
; 528  :         "movq\t%%rcx, 240(%3)\n\t"
; 529  :         "movq\t248(%1), %%rcx\n\t"
; 530  :         "adcxq\t248(%2), %%rcx\n\t"
; 531  :         "movq\t%%rcx, 248(%3)\n\t"
; 532  :         "setc\t%0"
; 533  :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 534  :         :
; 535  :         : "cc", "memory", "%rcx"
; 536  : );
; 537  : #else
; 538  : #error unknown platform
; 539  : #endif
; 540  : #else
; 541  : #error unknown compiler
; 542  : #endif
; 543  :     return (c);

  0074a	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]

; 544  : }

  0074d	3b ec		 cmp	 ebp, esp
  0074f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00754	5d		 pop	 ebp
  00755	c3		 ret	 0
__ADD_32WORDS_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_32WORDS_ADC PROC

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __E05E7037_autogenerated_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 42   : #ifdef _MSC_VER
; 43   :     c = _ADD_UNIT(c, xp[0], yp[0], &zp[0]);

  0000d	b8 04 00 00 00	 mov	 eax, 4
  00012	6b c8 00	 imul	 ecx, eax, 0
  00015	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00018	51		 push	 ecx
  00019	ba 04 00 00 00	 mov	 edx, 4
  0001e	6b c2 00	 imul	 eax, edx, 0
  00021	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00024	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00027	52		 push	 edx
  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  00033	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00036	50		 push	 eax
  00037	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 __ADD_UNIT
  00041	83 c4 10	 add	 esp, 16			; 00000010H
  00044	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 44   :     c = _ADD_UNIT(c, xp[1], yp[1], &zp[1]);

  00047	ba 04 00 00 00	 mov	 edx, 4
  0004c	c1 e2 00	 shl	 edx, 0
  0004f	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00052	52		 push	 edx
  00053	b8 04 00 00 00	 mov	 eax, 4
  00058	c1 e0 00	 shl	 eax, 0
  0005b	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0005e	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00061	52		 push	 edx
  00062	b8 04 00 00 00	 mov	 eax, 4
  00067	c1 e0 00	 shl	 eax, 0
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  0006d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00070	52		 push	 edx
  00071	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 __ADD_UNIT
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 45   :     c = _ADD_UNIT(c, xp[2], yp[2], &zp[2]);

  00081	b9 04 00 00 00	 mov	 ecx, 4
  00086	d1 e1		 shl	 ecx, 1
  00088	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  0008b	51		 push	 ecx
  0008c	ba 04 00 00 00	 mov	 edx, 4
  00091	d1 e2		 shl	 edx, 1
  00093	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00096	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00099	51		 push	 ecx
  0009a	ba 04 00 00 00	 mov	 edx, 4
  0009f	d1 e2		 shl	 edx, 1
  000a1	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  000a4	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  000a7	51		 push	 ecx
  000a8	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  000ac	52		 push	 edx
  000ad	e8 00 00 00 00	 call	 __ADD_UNIT
  000b2	83 c4 10	 add	 esp, 16			; 00000010H
  000b5	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 46   :     c = _ADD_UNIT(c, xp[3], yp[3], &zp[3]);

  000b8	b8 04 00 00 00	 mov	 eax, 4
  000bd	6b c8 03	 imul	 ecx, eax, 3
  000c0	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  000c3	51		 push	 ecx
  000c4	ba 04 00 00 00	 mov	 edx, 4
  000c9	6b c2 03	 imul	 eax, edx, 3
  000cc	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  000cf	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  000d2	52		 push	 edx
  000d3	b8 04 00 00 00	 mov	 eax, 4
  000d8	6b c8 03	 imul	 ecx, eax, 3
  000db	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  000de	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  000e1	50		 push	 eax
  000e2	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  000e6	51		 push	 ecx
  000e7	e8 00 00 00 00	 call	 __ADD_UNIT
  000ec	83 c4 10	 add	 esp, 16			; 00000010H
  000ef	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 47   :     c = _ADD_UNIT(c, xp[4], yp[4], &zp[4]);

  000f2	ba 04 00 00 00	 mov	 edx, 4
  000f7	c1 e2 02	 shl	 edx, 2
  000fa	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  000fd	52		 push	 edx
  000fe	b8 04 00 00 00	 mov	 eax, 4
  00103	c1 e0 02	 shl	 eax, 2
  00106	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00109	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0010c	52		 push	 edx
  0010d	b8 04 00 00 00	 mov	 eax, 4
  00112	c1 e0 02	 shl	 eax, 2
  00115	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00118	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0011b	52		 push	 edx
  0011c	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00120	50		 push	 eax
  00121	e8 00 00 00 00	 call	 __ADD_UNIT
  00126	83 c4 10	 add	 esp, 16			; 00000010H
  00129	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 48   :     c = _ADD_UNIT(c, xp[5], yp[5], &zp[5]);

  0012c	b9 04 00 00 00	 mov	 ecx, 4
  00131	6b d1 05	 imul	 edx, ecx, 5
  00134	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00137	52		 push	 edx
  00138	b8 04 00 00 00	 mov	 eax, 4
  0013d	6b c8 05	 imul	 ecx, eax, 5
  00140	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  00143	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00146	50		 push	 eax
  00147	b9 04 00 00 00	 mov	 ecx, 4
  0014c	6b d1 05	 imul	 edx, ecx, 5
  0014f	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  00152	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00155	51		 push	 ecx
  00156	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  0015a	52		 push	 edx
  0015b	e8 00 00 00 00	 call	 __ADD_UNIT
  00160	83 c4 10	 add	 esp, 16			; 00000010H
  00163	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 49   :     c = _ADD_UNIT(c, xp[6], yp[6], &zp[6]);

  00166	b8 04 00 00 00	 mov	 eax, 4
  0016b	6b c8 06	 imul	 ecx, eax, 6
  0016e	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00171	51		 push	 ecx
  00172	ba 04 00 00 00	 mov	 edx, 4
  00177	6b c2 06	 imul	 eax, edx, 6
  0017a	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0017d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00180	52		 push	 edx
  00181	b8 04 00 00 00	 mov	 eax, 4
  00186	6b c8 06	 imul	 ecx, eax, 6
  00189	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  0018c	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0018f	50		 push	 eax
  00190	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  00194	51		 push	 ecx
  00195	e8 00 00 00 00	 call	 __ADD_UNIT
  0019a	83 c4 10	 add	 esp, 16			; 00000010H
  0019d	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 50   :     c = _ADD_UNIT(c, xp[7], yp[7], &zp[7]);

  001a0	ba 04 00 00 00	 mov	 edx, 4
  001a5	6b c2 07	 imul	 eax, edx, 7
  001a8	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  001ab	50		 push	 eax
  001ac	b9 04 00 00 00	 mov	 ecx, 4
  001b1	6b d1 07	 imul	 edx, ecx, 7
  001b4	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  001b7	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  001ba	51		 push	 ecx
  001bb	ba 04 00 00 00	 mov	 edx, 4
  001c0	6b c2 07	 imul	 eax, edx, 7
  001c3	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  001c6	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  001c9	52		 push	 edx
  001ca	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  001ce	50		 push	 eax
  001cf	e8 00 00 00 00	 call	 __ADD_UNIT
  001d4	83 c4 10	 add	 esp, 16			; 00000010H
  001d7	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 51   :     c = _ADD_UNIT(c, xp[8], yp[8], &zp[8]);

  001da	b9 04 00 00 00	 mov	 ecx, 4
  001df	c1 e1 03	 shl	 ecx, 3
  001e2	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  001e5	51		 push	 ecx
  001e6	ba 04 00 00 00	 mov	 edx, 4
  001eb	c1 e2 03	 shl	 edx, 3
  001ee	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  001f1	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  001f4	51		 push	 ecx
  001f5	ba 04 00 00 00	 mov	 edx, 4
  001fa	c1 e2 03	 shl	 edx, 3
  001fd	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  00200	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00203	51		 push	 ecx
  00204	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  00208	52		 push	 edx
  00209	e8 00 00 00 00	 call	 __ADD_UNIT
  0020e	83 c4 10	 add	 esp, 16			; 00000010H
  00211	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 52   :     c = _ADD_UNIT(c, xp[9], yp[9], &zp[9]);

  00214	b8 04 00 00 00	 mov	 eax, 4
  00219	6b c8 09	 imul	 ecx, eax, 9
  0021c	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  0021f	51		 push	 ecx
  00220	ba 04 00 00 00	 mov	 edx, 4
  00225	6b c2 09	 imul	 eax, edx, 9
  00228	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0022b	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0022e	52		 push	 edx
  0022f	b8 04 00 00 00	 mov	 eax, 4
  00234	6b c8 09	 imul	 ecx, eax, 9
  00237	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  0023a	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0023d	50		 push	 eax
  0023e	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  00242	51		 push	 ecx
  00243	e8 00 00 00 00	 call	 __ADD_UNIT
  00248	83 c4 10	 add	 esp, 16			; 00000010H
  0024b	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 53   :     c = _ADD_UNIT(c, xp[10], yp[10], &zp[10]);

  0024e	ba 04 00 00 00	 mov	 edx, 4
  00253	6b c2 0a	 imul	 eax, edx, 10
  00256	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  00259	50		 push	 eax
  0025a	b9 04 00 00 00	 mov	 ecx, 4
  0025f	6b d1 0a	 imul	 edx, ecx, 10
  00262	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00265	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00268	51		 push	 ecx
  00269	ba 04 00 00 00	 mov	 edx, 4
  0026e	6b c2 0a	 imul	 eax, edx, 10
  00271	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00274	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00277	52		 push	 edx
  00278	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  0027c	50		 push	 eax
  0027d	e8 00 00 00 00	 call	 __ADD_UNIT
  00282	83 c4 10	 add	 esp, 16			; 00000010H
  00285	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 54   :     c = _ADD_UNIT(c, xp[11], yp[11], &zp[11]);

  00288	b9 04 00 00 00	 mov	 ecx, 4
  0028d	6b d1 0b	 imul	 edx, ecx, 11
  00290	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00293	52		 push	 edx
  00294	b8 04 00 00 00	 mov	 eax, 4
  00299	6b c8 0b	 imul	 ecx, eax, 11
  0029c	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  0029f	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  002a2	50		 push	 eax
  002a3	b9 04 00 00 00	 mov	 ecx, 4
  002a8	6b d1 0b	 imul	 edx, ecx, 11
  002ab	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  002ae	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  002b1	51		 push	 ecx
  002b2	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  002b6	52		 push	 edx
  002b7	e8 00 00 00 00	 call	 __ADD_UNIT
  002bc	83 c4 10	 add	 esp, 16			; 00000010H
  002bf	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 55   :     c = _ADD_UNIT(c, xp[12], yp[12], &zp[12]);

  002c2	b8 04 00 00 00	 mov	 eax, 4
  002c7	6b c8 0c	 imul	 ecx, eax, 12
  002ca	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  002cd	51		 push	 ecx
  002ce	ba 04 00 00 00	 mov	 edx, 4
  002d3	6b c2 0c	 imul	 eax, edx, 12
  002d6	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  002d9	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  002dc	52		 push	 edx
  002dd	b8 04 00 00 00	 mov	 eax, 4
  002e2	6b c8 0c	 imul	 ecx, eax, 12
  002e5	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  002e8	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  002eb	50		 push	 eax
  002ec	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  002f0	51		 push	 ecx
  002f1	e8 00 00 00 00	 call	 __ADD_UNIT
  002f6	83 c4 10	 add	 esp, 16			; 00000010H
  002f9	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 56   :     c = _ADD_UNIT(c, xp[13], yp[13], &zp[13]);

  002fc	ba 04 00 00 00	 mov	 edx, 4
  00301	6b c2 0d	 imul	 eax, edx, 13
  00304	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  00307	50		 push	 eax
  00308	b9 04 00 00 00	 mov	 ecx, 4
  0030d	6b d1 0d	 imul	 edx, ecx, 13
  00310	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00313	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00316	51		 push	 ecx
  00317	ba 04 00 00 00	 mov	 edx, 4
  0031c	6b c2 0d	 imul	 eax, edx, 13
  0031f	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00322	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00325	52		 push	 edx
  00326	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  0032a	50		 push	 eax
  0032b	e8 00 00 00 00	 call	 __ADD_UNIT
  00330	83 c4 10	 add	 esp, 16			; 00000010H
  00333	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 57   :     c = _ADD_UNIT(c, xp[14], yp[14], &zp[14]);

  00336	b9 04 00 00 00	 mov	 ecx, 4
  0033b	6b d1 0e	 imul	 edx, ecx, 14
  0033e	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  00341	52		 push	 edx
  00342	b8 04 00 00 00	 mov	 eax, 4
  00347	6b c8 0e	 imul	 ecx, eax, 14
  0034a	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  0034d	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00350	50		 push	 eax
  00351	b9 04 00 00 00	 mov	 ecx, 4
  00356	6b d1 0e	 imul	 edx, ecx, 14
  00359	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  0035c	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0035f	51		 push	 ecx
  00360	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  00364	52		 push	 edx
  00365	e8 00 00 00 00	 call	 __ADD_UNIT
  0036a	83 c4 10	 add	 esp, 16			; 00000010H
  0036d	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 58   :     c = _ADD_UNIT(c, xp[15], yp[15], &zp[15]);

  00370	b8 04 00 00 00	 mov	 eax, 4
  00375	6b c8 0f	 imul	 ecx, eax, 15
  00378	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  0037b	51		 push	 ecx
  0037c	ba 04 00 00 00	 mov	 edx, 4
  00381	6b c2 0f	 imul	 eax, edx, 15
  00384	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00387	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0038a	52		 push	 edx
  0038b	b8 04 00 00 00	 mov	 eax, 4
  00390	6b c8 0f	 imul	 ecx, eax, 15
  00393	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  00396	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00399	50		 push	 eax
  0039a	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  0039e	51		 push	 ecx
  0039f	e8 00 00 00 00	 call	 __ADD_UNIT
  003a4	83 c4 10	 add	 esp, 16			; 00000010H
  003a7	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 59   :     c = _ADD_UNIT(c, xp[16], yp[16], &zp[16]);

  003aa	ba 04 00 00 00	 mov	 edx, 4
  003af	c1 e2 04	 shl	 edx, 4
  003b2	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  003b5	52		 push	 edx
  003b6	b8 04 00 00 00	 mov	 eax, 4
  003bb	c1 e0 04	 shl	 eax, 4
  003be	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  003c1	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  003c4	52		 push	 edx
  003c5	b8 04 00 00 00	 mov	 eax, 4
  003ca	c1 e0 04	 shl	 eax, 4
  003cd	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  003d0	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  003d3	52		 push	 edx
  003d4	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  003d8	50		 push	 eax
  003d9	e8 00 00 00 00	 call	 __ADD_UNIT
  003de	83 c4 10	 add	 esp, 16			; 00000010H
  003e1	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 60   :     c = _ADD_UNIT(c, xp[17], yp[17], &zp[17]);

  003e4	b9 04 00 00 00	 mov	 ecx, 4
  003e9	6b d1 11	 imul	 edx, ecx, 17
  003ec	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  003ef	52		 push	 edx
  003f0	b8 04 00 00 00	 mov	 eax, 4
  003f5	6b c8 11	 imul	 ecx, eax, 17
  003f8	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  003fb	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  003fe	50		 push	 eax
  003ff	b9 04 00 00 00	 mov	 ecx, 4
  00404	6b d1 11	 imul	 edx, ecx, 17
  00407	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  0040a	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0040d	51		 push	 ecx
  0040e	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  00412	52		 push	 edx
  00413	e8 00 00 00 00	 call	 __ADD_UNIT
  00418	83 c4 10	 add	 esp, 16			; 00000010H
  0041b	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 61   :     c = _ADD_UNIT(c, xp[18], yp[18], &zp[18]);

  0041e	b8 04 00 00 00	 mov	 eax, 4
  00423	6b c8 12	 imul	 ecx, eax, 18
  00426	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00429	51		 push	 ecx
  0042a	ba 04 00 00 00	 mov	 edx, 4
  0042f	6b c2 12	 imul	 eax, edx, 18
  00432	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00435	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00438	52		 push	 edx
  00439	b8 04 00 00 00	 mov	 eax, 4
  0043e	6b c8 12	 imul	 ecx, eax, 18
  00441	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  00444	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00447	50		 push	 eax
  00448	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  0044c	51		 push	 ecx
  0044d	e8 00 00 00 00	 call	 __ADD_UNIT
  00452	83 c4 10	 add	 esp, 16			; 00000010H
  00455	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 62   :     c = _ADD_UNIT(c, xp[19], yp[19], &zp[19]);

  00458	ba 04 00 00 00	 mov	 edx, 4
  0045d	6b c2 13	 imul	 eax, edx, 19
  00460	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  00463	50		 push	 eax
  00464	b9 04 00 00 00	 mov	 ecx, 4
  00469	6b d1 13	 imul	 edx, ecx, 19
  0046c	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  0046f	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00472	51		 push	 ecx
  00473	ba 04 00 00 00	 mov	 edx, 4
  00478	6b c2 13	 imul	 eax, edx, 19
  0047b	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  0047e	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00481	52		 push	 edx
  00482	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00486	50		 push	 eax
  00487	e8 00 00 00 00	 call	 __ADD_UNIT
  0048c	83 c4 10	 add	 esp, 16			; 00000010H
  0048f	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 63   :     c = _ADD_UNIT(c, xp[20], yp[20], &zp[20]);

  00492	b9 04 00 00 00	 mov	 ecx, 4
  00497	6b d1 14	 imul	 edx, ecx, 20
  0049a	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  0049d	52		 push	 edx
  0049e	b8 04 00 00 00	 mov	 eax, 4
  004a3	6b c8 14	 imul	 ecx, eax, 20
  004a6	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  004a9	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  004ac	50		 push	 eax
  004ad	b9 04 00 00 00	 mov	 ecx, 4
  004b2	6b d1 14	 imul	 edx, ecx, 20
  004b5	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  004b8	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  004bb	51		 push	 ecx
  004bc	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  004c0	52		 push	 edx
  004c1	e8 00 00 00 00	 call	 __ADD_UNIT
  004c6	83 c4 10	 add	 esp, 16			; 00000010H
  004c9	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 64   :     c = _ADD_UNIT(c, xp[21], yp[21], &zp[21]);

  004cc	b8 04 00 00 00	 mov	 eax, 4
  004d1	6b c8 15	 imul	 ecx, eax, 21
  004d4	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  004d7	51		 push	 ecx
  004d8	ba 04 00 00 00	 mov	 edx, 4
  004dd	6b c2 15	 imul	 eax, edx, 21
  004e0	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  004e3	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  004e6	52		 push	 edx
  004e7	b8 04 00 00 00	 mov	 eax, 4
  004ec	6b c8 15	 imul	 ecx, eax, 21
  004ef	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  004f2	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  004f5	50		 push	 eax
  004f6	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  004fa	51		 push	 ecx
  004fb	e8 00 00 00 00	 call	 __ADD_UNIT
  00500	83 c4 10	 add	 esp, 16			; 00000010H
  00503	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 65   :     c = _ADD_UNIT(c, xp[22], yp[22], &zp[22]);

  00506	ba 04 00 00 00	 mov	 edx, 4
  0050b	6b c2 16	 imul	 eax, edx, 22
  0050e	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  00511	50		 push	 eax
  00512	b9 04 00 00 00	 mov	 ecx, 4
  00517	6b d1 16	 imul	 edx, ecx, 22
  0051a	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  0051d	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00520	51		 push	 ecx
  00521	ba 04 00 00 00	 mov	 edx, 4
  00526	6b c2 16	 imul	 eax, edx, 22
  00529	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  0052c	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0052f	52		 push	 edx
  00530	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00534	50		 push	 eax
  00535	e8 00 00 00 00	 call	 __ADD_UNIT
  0053a	83 c4 10	 add	 esp, 16			; 00000010H
  0053d	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 66   :     c = _ADD_UNIT(c, xp[23], yp[23], &zp[23]);

  00540	b9 04 00 00 00	 mov	 ecx, 4
  00545	6b d1 17	 imul	 edx, ecx, 23
  00548	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  0054b	52		 push	 edx
  0054c	b8 04 00 00 00	 mov	 eax, 4
  00551	6b c8 17	 imul	 ecx, eax, 23
  00554	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  00557	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0055a	50		 push	 eax
  0055b	b9 04 00 00 00	 mov	 ecx, 4
  00560	6b d1 17	 imul	 edx, ecx, 23
  00563	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  00566	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00569	51		 push	 ecx
  0056a	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  0056e	52		 push	 edx
  0056f	e8 00 00 00 00	 call	 __ADD_UNIT
  00574	83 c4 10	 add	 esp, 16			; 00000010H
  00577	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 67   :     c = _ADD_UNIT(c, xp[24], yp[24], &zp[24]);

  0057a	b8 04 00 00 00	 mov	 eax, 4
  0057f	6b c8 18	 imul	 ecx, eax, 24
  00582	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00585	51		 push	 ecx
  00586	ba 04 00 00 00	 mov	 edx, 4
  0058b	6b c2 18	 imul	 eax, edx, 24
  0058e	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  00591	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00594	52		 push	 edx
  00595	b8 04 00 00 00	 mov	 eax, 4
  0059a	6b c8 18	 imul	 ecx, eax, 24
  0059d	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  005a0	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  005a3	50		 push	 eax
  005a4	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  005a8	51		 push	 ecx
  005a9	e8 00 00 00 00	 call	 __ADD_UNIT
  005ae	83 c4 10	 add	 esp, 16			; 00000010H
  005b1	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 68   :     c = _ADD_UNIT(c, xp[25], yp[25], &zp[25]);

  005b4	ba 04 00 00 00	 mov	 edx, 4
  005b9	6b c2 19	 imul	 eax, edx, 25
  005bc	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  005bf	50		 push	 eax
  005c0	b9 04 00 00 00	 mov	 ecx, 4
  005c5	6b d1 19	 imul	 edx, ecx, 25
  005c8	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  005cb	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  005ce	51		 push	 ecx
  005cf	ba 04 00 00 00	 mov	 edx, 4
  005d4	6b c2 19	 imul	 eax, edx, 25
  005d7	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  005da	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  005dd	52		 push	 edx
  005de	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  005e2	50		 push	 eax
  005e3	e8 00 00 00 00	 call	 __ADD_UNIT
  005e8	83 c4 10	 add	 esp, 16			; 00000010H
  005eb	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 69   :     c = _ADD_UNIT(c, xp[26], yp[26], &zp[26]);

  005ee	b9 04 00 00 00	 mov	 ecx, 4
  005f3	6b d1 1a	 imul	 edx, ecx, 26
  005f6	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  005f9	52		 push	 edx
  005fa	b8 04 00 00 00	 mov	 eax, 4
  005ff	6b c8 1a	 imul	 ecx, eax, 26
  00602	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  00605	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00608	50		 push	 eax
  00609	b9 04 00 00 00	 mov	 ecx, 4
  0060e	6b d1 1a	 imul	 edx, ecx, 26
  00611	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  00614	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00617	51		 push	 ecx
  00618	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  0061c	52		 push	 edx
  0061d	e8 00 00 00 00	 call	 __ADD_UNIT
  00622	83 c4 10	 add	 esp, 16			; 00000010H
  00625	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 70   :     c = _ADD_UNIT(c, xp[27], yp[27], &zp[27]);

  00628	b8 04 00 00 00	 mov	 eax, 4
  0062d	6b c8 1b	 imul	 ecx, eax, 27
  00630	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  00633	51		 push	 ecx
  00634	ba 04 00 00 00	 mov	 edx, 4
  00639	6b c2 1b	 imul	 eax, edx, 27
  0063c	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  0063f	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00642	52		 push	 edx
  00643	b8 04 00 00 00	 mov	 eax, 4
  00648	6b c8 1b	 imul	 ecx, eax, 27
  0064b	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  0064e	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00651	50		 push	 eax
  00652	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  00656	51		 push	 ecx
  00657	e8 00 00 00 00	 call	 __ADD_UNIT
  0065c	83 c4 10	 add	 esp, 16			; 00000010H
  0065f	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 71   :     c = _ADD_UNIT(c, xp[28], yp[28], &zp[28]);

  00662	ba 04 00 00 00	 mov	 edx, 4
  00667	6b c2 1c	 imul	 eax, edx, 28
  0066a	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  0066d	50		 push	 eax
  0066e	b9 04 00 00 00	 mov	 ecx, 4
  00673	6b d1 1c	 imul	 edx, ecx, 28
  00676	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00679	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0067c	51		 push	 ecx
  0067d	ba 04 00 00 00	 mov	 edx, 4
  00682	6b c2 1c	 imul	 eax, edx, 28
  00685	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00688	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0068b	52		 push	 edx
  0068c	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  00690	50		 push	 eax
  00691	e8 00 00 00 00	 call	 __ADD_UNIT
  00696	83 c4 10	 add	 esp, 16			; 00000010H
  00699	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 72   :     c = _ADD_UNIT(c, xp[29], yp[29], &zp[29]);

  0069c	b9 04 00 00 00	 mov	 ecx, 4
  006a1	6b d1 1d	 imul	 edx, ecx, 29
  006a4	03 55 14	 add	 edx, DWORD PTR _zp$[ebp]
  006a7	52		 push	 edx
  006a8	b8 04 00 00 00	 mov	 eax, 4
  006ad	6b c8 1d	 imul	 ecx, eax, 29
  006b0	8b 55 10	 mov	 edx, DWORD PTR _yp$[ebp]
  006b3	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  006b6	50		 push	 eax
  006b7	b9 04 00 00 00	 mov	 ecx, 4
  006bc	6b d1 1d	 imul	 edx, ecx, 29
  006bf	8b 45 0c	 mov	 eax, DWORD PTR _xp$[ebp]
  006c2	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  006c5	51		 push	 ecx
  006c6	0f b6 55 08	 movzx	 edx, BYTE PTR _c$[ebp]
  006ca	52		 push	 edx
  006cb	e8 00 00 00 00	 call	 __ADD_UNIT
  006d0	83 c4 10	 add	 esp, 16			; 00000010H
  006d3	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 73   :     c = _ADD_UNIT(c, xp[30], yp[30], &zp[30]);

  006d6	b8 04 00 00 00	 mov	 eax, 4
  006db	6b c8 1e	 imul	 ecx, eax, 30
  006de	03 4d 14	 add	 ecx, DWORD PTR _zp$[ebp]
  006e1	51		 push	 ecx
  006e2	ba 04 00 00 00	 mov	 edx, 4
  006e7	6b c2 1e	 imul	 eax, edx, 30
  006ea	8b 4d 10	 mov	 ecx, DWORD PTR _yp$[ebp]
  006ed	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  006f0	52		 push	 edx
  006f1	b8 04 00 00 00	 mov	 eax, 4
  006f6	6b c8 1e	 imul	 ecx, eax, 30
  006f9	8b 55 0c	 mov	 edx, DWORD PTR _xp$[ebp]
  006fc	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  006ff	50		 push	 eax
  00700	0f b6 4d 08	 movzx	 ecx, BYTE PTR _c$[ebp]
  00704	51		 push	 ecx
  00705	e8 00 00 00 00	 call	 __ADD_UNIT
  0070a	83 c4 10	 add	 esp, 16			; 00000010H
  0070d	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 74   :     c = _ADD_UNIT(c, xp[31], yp[31], &zp[31]);

  00710	ba 04 00 00 00	 mov	 edx, 4
  00715	6b c2 1f	 imul	 eax, edx, 31
  00718	03 45 14	 add	 eax, DWORD PTR _zp$[ebp]
  0071b	50		 push	 eax
  0071c	b9 04 00 00 00	 mov	 ecx, 4
  00721	6b d1 1f	 imul	 edx, ecx, 31
  00724	8b 45 10	 mov	 eax, DWORD PTR _yp$[ebp]
  00727	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0072a	51		 push	 ecx
  0072b	ba 04 00 00 00	 mov	 edx, 4
  00730	6b c2 1f	 imul	 eax, edx, 31
  00733	8b 4d 0c	 mov	 ecx, DWORD PTR _xp$[ebp]
  00736	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00739	52		 push	 edx
  0073a	0f b6 45 08	 movzx	 eax, BYTE PTR _c$[ebp]
  0073e	50		 push	 eax
  0073f	e8 00 00 00 00	 call	 __ADD_UNIT
  00744	83 c4 10	 add	 esp, 16			; 00000010H
  00747	88 45 08	 mov	 BYTE PTR _c$[ebp], al

; 75   : #elif defined(__GNUC__)
; 76   : #ifdef _M_IX86
; 77   :     __asm__ volatile (
; 78   :         "addb\t$-1, %0\n\t"
; 79   :         "movl\t(%1), %%ecx\n\t"
; 80   :         "adcl\t(%2), %%ecx\n\t"
; 81   :         "movl\t%%ecx, (%3)\n\t"
; 82   :         "movl\t4(%1), %%ecx\n\t"
; 83   :         "adcl\t4(%2), %%ecx\n\t"
; 84   :         "movl\t%%ecx, 4(%3)\n\t"
; 85   :         "movl\t8(%1), %%ecx\n\t"
; 86   :         "adcl\t8(%2), %%ecx\n\t"
; 87   :         "movl\t%%ecx, 8(%3)\n\t"
; 88   :         "movl\t12(%1), %%ecx\n\t"
; 89   :         "adcl\t12(%2), %%ecx\n\t"
; 90   :         "movl\t%%ecx, 12(%3)\n\t"
; 91   :         "movl\t16(%1), %%ecx\n\t"
; 92   :         "adcl\t16(%2), %%ecx\n\t"
; 93   :         "movl\t%%ecx, 16(%3)\n\t"
; 94   :         "movl\t20(%1), %%ecx\n\t"
; 95   :         "adcl\t20(%2), %%ecx\n\t"
; 96   :         "movl\t%%ecx, 20(%3)\n\t"
; 97   :         "movl\t24(%1), %%ecx\n\t"
; 98   :         "adcl\t24(%2), %%ecx\n\t"
; 99   :         "movl\t%%ecx, 24(%3)\n\t"
; 100  :         "movl\t28(%1), %%ecx\n\t"
; 101  :         "adcl\t28(%2), %%ecx\n\t"
; 102  :         "movl\t%%ecx, 28(%3)\n\t"
; 103  :         "movl\t32(%1), %%ecx\n\t"
; 104  :         "adcl\t32(%2), %%ecx\n\t"
; 105  :         "movl\t%%ecx, 32(%3)\n\t"
; 106  :         "movl\t36(%1), %%ecx\n\t"
; 107  :         "adcl\t36(%2), %%ecx\n\t"
; 108  :         "movl\t%%ecx, 36(%3)\n\t"
; 109  :         "movl\t40(%1), %%ecx\n\t"
; 110  :         "adcl\t40(%2), %%ecx\n\t"
; 111  :         "movl\t%%ecx, 40(%3)\n\t"
; 112  :         "movl\t44(%1), %%ecx\n\t"
; 113  :         "adcl\t44(%2), %%ecx\n\t"
; 114  :         "movl\t%%ecx, 44(%3)\n\t"
; 115  :         "movl\t48(%1), %%ecx\n\t"
; 116  :         "adcl\t48(%2), %%ecx\n\t"
; 117  :         "movl\t%%ecx, 48(%3)\n\t"
; 118  :         "movl\t52(%1), %%ecx\n\t"
; 119  :         "adcl\t52(%2), %%ecx\n\t"
; 120  :         "movl\t%%ecx, 52(%3)\n\t"
; 121  :         "movl\t56(%1), %%ecx\n\t"
; 122  :         "adcl\t56(%2), %%ecx\n\t"
; 123  :         "movl\t%%ecx, 56(%3)\n\t"
; 124  :         "movl\t60(%1), %%ecx\n\t"
; 125  :         "adcl\t60(%2), %%ecx\n\t"
; 126  :         "movl\t%%ecx, 60(%3)\n\t"
; 127  :         "movl\t64(%1), %%ecx\n\t"
; 128  :         "adcl\t64(%2), %%ecx\n\t"
; 129  :         "movl\t%%ecx, 64(%3)\n\t"
; 130  :         "movl\t68(%1), %%ecx\n\t"
; 131  :         "adcl\t68(%2), %%ecx\n\t"
; 132  :         "movl\t%%ecx, 68(%3)\n\t"
; 133  :         "movl\t72(%1), %%ecx\n\t"
; 134  :         "adcl\t72(%2), %%ecx\n\t"
; 135  :         "movl\t%%ecx, 72(%3)\n\t"
; 136  :         "movl\t76(%1), %%ecx\n\t"
; 137  :         "adcl\t76(%2), %%ecx\n\t"
; 138  :         "movl\t%%ecx, 76(%3)\n\t"
; 139  :         "movl\t80(%1), %%ecx\n\t"
; 140  :         "adcl\t80(%2), %%ecx\n\t"
; 141  :         "movl\t%%ecx, 80(%3)\n\t"
; 142  :         "movl\t84(%1), %%ecx\n\t"
; 143  :         "adcl\t84(%2), %%ecx\n\t"
; 144  :         "movl\t%%ecx, 84(%3)\n\t"
; 145  :         "movl\t88(%1), %%ecx\n\t"
; 146  :         "adcl\t88(%2), %%ecx\n\t"
; 147  :         "movl\t%%ecx, 88(%3)\n\t"
; 148  :         "movl\t92(%1), %%ecx\n\t"
; 149  :         "adcl\t92(%2), %%ecx\n\t"
; 150  :         "movl\t%%ecx, 92(%3)\n\t"
; 151  :         "movl\t96(%1), %%ecx\n\t"
; 152  :         "adcl\t96(%2), %%ecx\n\t"
; 153  :         "movl\t%%ecx, 96(%3)\n\t"
; 154  :         "movl\t100(%1), %%ecx\n\t"
; 155  :         "adcl\t100(%2), %%ecx\n\t"
; 156  :         "movl\t%%ecx, 100(%3)\n\t"
; 157  :         "movl\t104(%1), %%ecx\n\t"
; 158  :         "adcl\t104(%2), %%ecx\n\t"
; 159  :         "movl\t%%ecx, 104(%3)\n\t"
; 160  :         "movl\t108(%1), %%ecx\n\t"
; 161  :         "adcl\t108(%2), %%ecx\n\t"
; 162  :         "movl\t%%ecx, 108(%3)\n\t"
; 163  :         "movl\t112(%1), %%ecx\n\t"
; 164  :         "adcl\t112(%2), %%ecx\n\t"
; 165  :         "movl\t%%ecx, 112(%3)\n\t"
; 166  :         "movl\t116(%1), %%ecx\n\t"
; 167  :         "adcl\t116(%2), %%ecx\n\t"
; 168  :         "movl\t%%ecx, 116(%3)\n\t"
; 169  :         "movl\t120(%1), %%ecx\n\t"
; 170  :         "adcl\t120(%2), %%ecx\n\t"
; 171  :         "movl\t%%ecx, 120(%3)\n\t"
; 172  :         "movl\t124(%1), %%ecx\n\t"
; 173  :         "adcl\t124(%2), %%ecx\n\t"
; 174  :         "movl\t%%ecx, 124(%3)\n\t"
; 175  :         "setc\t%0"
; 176  :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 177  :         :
; 178  :         : "cc", "memory", "%ecx"
; 179  : );
; 180  : #elif defined(_M_X64)
; 181  :     __asm__ volatile (
; 182  :         "addb\t$-1, %0\n\t"
; 183  :         "movq\t(%1), %%rcx\n\t"
; 184  :         "adcq\t(%2), %%rcx\n\t"
; 185  :         "movq\t%%rcx, (%3)\n\t"
; 186  :         "movq\t8(%1), %%rcx\n\t"
; 187  :         "adcq\t8(%2), %%rcx\n\t"
; 188  :         "movq\t%%rcx, 8(%3)\n\t"
; 189  :         "movq\t16(%1), %%rcx\n\t"
; 190  :         "adcq\t16(%2), %%rcx\n\t"
; 191  :         "movq\t%%rcx, 16(%3)\n\t"
; 192  :         "movq\t24(%1), %%rcx\n\t"
; 193  :         "adcq\t24(%2), %%rcx\n\t"
; 194  :         "movq\t%%rcx, 24(%3)\n\t"
; 195  :         "movq\t32(%1), %%rcx\n\t"
; 196  :         "adcq\t32(%2), %%rcx\n\t"
; 197  :         "movq\t%%rcx, 32(%3)\n\t"
; 198  :         "movq\t40(%1), %%rcx\n\t"
; 199  :         "adcq\t40(%2), %%rcx\n\t"
; 200  :         "movq\t%%rcx, 40(%3)\n\t"
; 201  :         "movq\t48(%1), %%rcx\n\t"
; 202  :         "adcq\t48(%2), %%rcx\n\t"
; 203  :         "movq\t%%rcx, 48(%3)\n\t"
; 204  :         "movq\t56(%1), %%rcx\n\t"
; 205  :         "adcq\t56(%2), %%rcx\n\t"
; 206  :         "movq\t%%rcx, 56(%3)\n\t"
; 207  :         "movq\t64(%1), %%rcx\n\t"
; 208  :         "adcq\t64(%2), %%rcx\n\t"
; 209  :         "movq\t%%rcx, 64(%3)\n\t"
; 210  :         "movq\t72(%1), %%rcx\n\t"
; 211  :         "adcq\t72(%2), %%rcx\n\t"
; 212  :         "movq\t%%rcx, 72(%3)\n\t"
; 213  :         "movq\t80(%1), %%rcx\n\t"
; 214  :         "adcq\t80(%2), %%rcx\n\t"
; 215  :         "movq\t%%rcx, 80(%3)\n\t"
; 216  :         "movq\t88(%1), %%rcx\n\t"
; 217  :         "adcq\t88(%2), %%rcx\n\t"
; 218  :         "movq\t%%rcx, 88(%3)\n\t"
; 219  :         "movq\t96(%1), %%rcx\n\t"
; 220  :         "adcq\t96(%2), %%rcx\n\t"
; 221  :         "movq\t%%rcx, 96(%3)\n\t"
; 222  :         "movq\t104(%1), %%rcx\n\t"
; 223  :         "adcq\t104(%2), %%rcx\n\t"
; 224  :         "movq\t%%rcx, 104(%3)\n\t"
; 225  :         "movq\t112(%1), %%rcx\n\t"
; 226  :         "adcq\t112(%2), %%rcx\n\t"
; 227  :         "movq\t%%rcx, 112(%3)\n\t"
; 228  :         "movq\t120(%1), %%rcx\n\t"
; 229  :         "adcq\t120(%2), %%rcx\n\t"
; 230  :         "movq\t%%rcx, 120(%3)\n\t"
; 231  :         "movq\t128(%1), %%rcx\n\t"
; 232  :         "adcq\t128(%2), %%rcx\n\t"
; 233  :         "movq\t%%rcx, 128(%3)\n\t"
; 234  :         "movq\t136(%1), %%rcx\n\t"
; 235  :         "adcq\t136(%2), %%rcx\n\t"
; 236  :         "movq\t%%rcx, 136(%3)\n\t"
; 237  :         "movq\t144(%1), %%rcx\n\t"
; 238  :         "adcq\t144(%2), %%rcx\n\t"
; 239  :         "movq\t%%rcx, 144(%3)\n\t"
; 240  :         "movq\t152(%1), %%rcx\n\t"
; 241  :         "adcq\t152(%2), %%rcx\n\t"
; 242  :         "movq\t%%rcx, 152(%3)\n\t"
; 243  :         "movq\t160(%1), %%rcx\n\t"
; 244  :         "adcq\t160(%2), %%rcx\n\t"
; 245  :         "movq\t%%rcx, 160(%3)\n\t"
; 246  :         "movq\t168(%1), %%rcx\n\t"
; 247  :         "adcq\t168(%2), %%rcx\n\t"
; 248  :         "movq\t%%rcx, 168(%3)\n\t"
; 249  :         "movq\t176(%1), %%rcx\n\t"
; 250  :         "adcq\t176(%2), %%rcx\n\t"
; 251  :         "movq\t%%rcx, 176(%3)\n\t"
; 252  :         "movq\t184(%1), %%rcx\n\t"
; 253  :         "adcq\t184(%2), %%rcx\n\t"
; 254  :         "movq\t%%rcx, 184(%3)\n\t"
; 255  :         "movq\t192(%1), %%rcx\n\t"
; 256  :         "adcq\t192(%2), %%rcx\n\t"
; 257  :         "movq\t%%rcx, 192(%3)\n\t"
; 258  :         "movq\t200(%1), %%rcx\n\t"
; 259  :         "adcq\t200(%2), %%rcx\n\t"
; 260  :         "movq\t%%rcx, 200(%3)\n\t"
; 261  :         "movq\t208(%1), %%rcx\n\t"
; 262  :         "adcq\t208(%2), %%rcx\n\t"
; 263  :         "movq\t%%rcx, 208(%3)\n\t"
; 264  :         "movq\t216(%1), %%rcx\n\t"
; 265  :         "adcq\t216(%2), %%rcx\n\t"
; 266  :         "movq\t%%rcx, 216(%3)\n\t"
; 267  :         "movq\t224(%1), %%rcx\n\t"
; 268  :         "adcq\t224(%2), %%rcx\n\t"
; 269  :         "movq\t%%rcx, 224(%3)\n\t"
; 270  :         "movq\t232(%1), %%rcx\n\t"
; 271  :         "adcq\t232(%2), %%rcx\n\t"
; 272  :         "movq\t%%rcx, 232(%3)\n\t"
; 273  :         "movq\t240(%1), %%rcx\n\t"
; 274  :         "adcq\t240(%2), %%rcx\n\t"
; 275  :         "movq\t%%rcx, 240(%3)\n\t"
; 276  :         "movq\t248(%1), %%rcx\n\t"
; 277  :         "adcq\t248(%2), %%rcx\n\t"
; 278  :         "movq\t%%rcx, 248(%3)\n\t"
; 279  :         "setc\t%0"
; 280  :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 281  :         :
; 282  :         : "cc", "memory", "%rcx"
; 283  : );
; 284  : #else
; 285  : #error unknown platform
; 286  : #endif
; 287  : #else
; 288  : #error unknown compiler
; 289  : #endif
; 290  :     return (c);

  0074a	8a 45 08	 mov	 al, BYTE PTR _c$[ebp]

; 291  : }

  0074d	3b ec		 cmp	 ebp, esp
  0074f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00754	5d		 pop	 ebp
  00755	c3		 ret	 0
__ADD_32WORDS_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT PROC

; 454  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 455  :             if (x == 0)

  00025	83 7d 08 00	 cmp	 DWORD PTR _x$[ebp], 0
  00029	75 07		 jne	 SHORT $LN2@LZCNT_ALT_

; 456  :                 return (sizeof(x) * 8);

  0002b	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00030	eb 0f		 jmp	 SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 457  : #ifdef _M_IX86
; 458  :             DWORD pos;
; 459  : #ifdef _MSC_VER
; 460  :             _BitScanReverse(&pos, x);

  00032	0f bd 45 08	 bsr	 eax, DWORD PTR _x$[ebp]
  00036	89 45 f8	 mov	 DWORD PTR _pos$[ebp], eax

; 461  : #elif defined(__GNUC__)
; 462  :             __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 463  : #else
; 464  : #error unknown compiler
; 465  : #endif
; 466  : #elif defined(_M_X64)
; 467  : #ifdef _MSC_VER
; 468  :             DWORD pos;
; 469  :             _BitScanReverse64(&pos, x);
; 470  : #elif defined(__GNUC__)
; 471  :             _UINT64_T pos;
; 472  :             __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 473  : #else
; 474  : #error unknown compiler
; 475  : #endif
; 476  : #else
; 477  : #error unknown platform
; 478  : #endif
; 479  :             return (sizeof(x) * 8 - 1 - pos);

  00039	b8 1f 00 00 00	 mov	 eax, 31			; 0000001fH
  0003e	2b 45 f8	 sub	 eax, DWORD PTR _pos$[ebp]
$LN1@LZCNT_ALT_:

; 480  :         }

  00041	52		 push	 edx
  00042	8b cd		 mov	 ecx, ebp
  00044	50		 push	 eax
  00045	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@LZCNT_ALT_
  0004b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00050	58		 pop	 eax
  00051	5a		 pop	 edx
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH
  00055	3b ec		 cmp	 ebp, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
$LN6@LZCNT_ALT_:
  00060	01 00 00 00	 DD	 1
  00064	00 00 00 00	 DD	 $LN5@LZCNT_ALT_
$LN5@LZCNT_ALT_:
  00068	f8 ff ff ff	 DD	 -8			; fffffff8H
  0006c	04 00 00 00	 DD	 4
  00070	00 00 00 00	 DD	 $LN4@LZCNT_ALT_
$LN4@LZCNT_ALT_:
  00074	70		 DB	 112			; 00000070H
  00075	6f		 DB	 111			; 0000006fH
  00076	73		 DB	 115			; 00000073H
  00077	00		 DB	 0
__LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 4
__LZCNT_ALT_32 PROC

; 421  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 422  :             if (x == 0)

  00025	83 7d 08 00	 cmp	 DWORD PTR _x$[ebp], 0
  00029	75 07		 jne	 SHORT $LN2@LZCNT_ALT_

; 423  :                 return (sizeof(x) * 8);

  0002b	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00030	eb 0f		 jmp	 SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 424  :             DWORD pos;
; 425  : #ifdef _MSC_VER
; 426  :             _BitScanReverse(&pos, x);

  00032	0f bd 45 08	 bsr	 eax, DWORD PTR _x$[ebp]
  00036	89 45 f8	 mov	 DWORD PTR _pos$[ebp], eax

; 427  : #elif defined(__GNUC__)
; 428  :             __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 429  : #else
; 430  : #error unknown compiler
; 431  : #endif
; 432  :             return (sizeof(x) * 8 - 1 - pos);

  00039	b8 1f 00 00 00	 mov	 eax, 31			; 0000001fH
  0003e	2b 45 f8	 sub	 eax, DWORD PTR _pos$[ebp]
$LN1@LZCNT_ALT_:

; 433  :         }

  00041	52		 push	 edx
  00042	8b cd		 mov	 ecx, ebp
  00044	50		 push	 eax
  00045	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@LZCNT_ALT_
  0004b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00050	58		 pop	 eax
  00051	5a		 pop	 edx
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH
  00055	3b ec		 cmp	 ebp, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
$LN6@LZCNT_ALT_:
  00060	01 00 00 00	 DD	 1
  00064	00 00 00 00	 DD	 $LN5@LZCNT_ALT_
$LN5@LZCNT_ALT_:
  00068	f8 ff ff ff	 DD	 -8			; fffffff8H
  0006c	04 00 00 00	 DD	 4
  00070	00 00 00 00	 DD	 $LN4@LZCNT_ALT_
$LN4@LZCNT_ALT_:
  00074	70		 DB	 112			; 00000070H
  00075	6f		 DB	 111			; 0000006fH
  00076	73		 DB	 115			; 00000073H
  00077	00		 DB	 0
__LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_t$ = -8						; size = 8
_r$ = 8							; size = 4
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_q$ = 20						; size = 4
__DIVREM_SINGLE_UNIT PROC

; 290  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00019	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 291  :             // 64bit/32bitの除算を行う組み込み関数は実装されていない。
; 292  :             _UINT64_T t = _FROMWORDTODWORD(r, u);

  0001e	8b 45 0c	 mov	 eax, DWORD PTR _u$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 08	 mov	 ecx, DWORD PTR _r$[ebp]
  00025	51		 push	 ecx
  00026	e8 00 00 00 00	 call	 __FROMWORDTODWORD
  0002b	83 c4 08	 add	 esp, 8
  0002e	89 45 f8	 mov	 DWORD PTR _t$[ebp], eax
  00031	89 55 fc	 mov	 DWORD PTR _t$[ebp+4], edx

; 293  :             *q = (_UINT32_T)(t / v);

  00034	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00037	33 c0		 xor	 eax, eax
  00039	50		 push	 eax
  0003a	52		 push	 edx
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _t$[ebp+4]
  0003e	51		 push	 ecx
  0003f	8b 55 f8	 mov	 edx, DWORD PTR _t$[ebp]
  00042	52		 push	 edx
  00043	e8 00 00 00 00	 call	 __aulldiv
  00048	8b 4d 14	 mov	 ecx, DWORD PTR _q$[ebp]
  0004b	89 01		 mov	 DWORD PTR [ecx], eax

; 294  :             return ((_UINT32_T)(t % v));

  0004d	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00050	33 c0		 xor	 eax, eax
  00052	50		 push	 eax
  00053	52		 push	 edx
  00054	8b 4d fc	 mov	 ecx, DWORD PTR _t$[ebp+4]
  00057	51		 push	 ecx
  00058	8b 55 f8	 mov	 edx, DWORD PTR _t$[ebp]
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 __aullrem

; 295  :         }

  00061	83 c4 08	 add	 esp, 8
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
__DIVREM_SINGLE_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_t$ = -8						; size = 8
_u_high$ = 8						; size = 4
_u_low$ = 12						; size = 4
_v$ = 16						; size = 4
_r$ = 20						; size = 4
__DIVREM_UNIT PROC

; 258  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00019	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 259  :             // 64bit/32bitの除算を行う組み込み関数は実装されていない。
; 260  :             _UINT64_T t = _FROMWORDTODWORD(u_high, u_low);

  0001e	8b 45 0c	 mov	 eax, DWORD PTR _u_low$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 08	 mov	 ecx, DWORD PTR _u_high$[ebp]
  00025	51		 push	 ecx
  00026	e8 00 00 00 00	 call	 __FROMWORDTODWORD
  0002b	83 c4 08	 add	 esp, 8
  0002e	89 45 f8	 mov	 DWORD PTR _t$[ebp], eax
  00031	89 55 fc	 mov	 DWORD PTR _t$[ebp+4], edx

; 261  :             *r = (_UINT32_T)(t % v);

  00034	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00037	33 c0		 xor	 eax, eax
  00039	50		 push	 eax
  0003a	52		 push	 edx
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _t$[ebp+4]
  0003e	51		 push	 ecx
  0003f	8b 55 f8	 mov	 edx, DWORD PTR _t$[ebp]
  00042	52		 push	 edx
  00043	e8 00 00 00 00	 call	 __aullrem
  00048	8b 4d 14	 mov	 ecx, DWORD PTR _r$[ebp]
  0004b	89 01		 mov	 DWORD PTR [ecx], eax

; 262  :             return ((_UINT32_T)(t / v));

  0004d	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00050	33 c0		 xor	 eax, eax
  00052	50		 push	 eax
  00053	52		 push	 edx
  00054	8b 4d fc	 mov	 ecx, DWORD PTR _t$[ebp+4]
  00057	51		 push	 ecx
  00058	8b 55 f8	 mov	 edx, DWORD PTR _t$[ebp]
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 __aulldiv

; 263  :         }

  00061	83 c4 08	 add	 esp, 8
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
__DIVREM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w_hi$ = 16						; size = 4
__MULTIPLYX_UNIT PROC

; 228  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 229  : #ifdef _MSC_VER
; 230  : #ifdef _M_IX86
; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0000d	8b 45 10	 mov	 eax, DWORD PTR _w_hi$[ebp]
  00010	50		 push	 eax
  00011	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00014	f7 65 0c	 mul	 DWORD PTR _v$[ebp]
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 __FROMDWORDTOWORD
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 232  : #elif defined(_M_X64)
; 233  :             return (_mulx_u64(u, v, w_hi));
; 234  : #else
; 235  : #error unknown platform
; 236  : #endif
; 237  : #elif defined(__GNUC__)
; 238  : #ifdef _M_IX86
; 239  :             _UINT32_T w_lo;
; 240  :             __asm__("mulxl %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 241  :             return (w_lo);
; 242  : #elif defined(_M_X64)
; 243  :             _UINT64_T w_lo;
; 244  :             __asm__("mulxq %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 245  :             return (w_lo);
; 246  : #else
; 247  : #error unknown platform
; 248  : #endif
; 249  : #else
; 250  : #error unknown compiler
; 251  : #endif
; 252  :         }

  00021	3b ec		 cmp	 ebp, esp
  00023	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__MULTIPLYX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w_hi$ = 16						; size = 4
__MULTIPLY_UNIT PROC

; 209  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 210  : #ifdef _M_IX86
; 211  : #ifdef _MSC_VER
; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0000d	8b 45 10	 mov	 eax, DWORD PTR _w_hi$[ebp]
  00010	50		 push	 eax
  00011	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00014	f7 65 0c	 mul	 DWORD PTR _v$[ebp]
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 __FROMDWORDTOWORD
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 213  : #elif defined(__GNUC__)
; 214  :             _UINT32_T w_lo;
; 215  :             __asm__("mull %3": "=a"(w_lo), "=d"(*w_hi) : "0"(u), "rm"(v));
; 216  :             return (w_lo);
; 217  : #else
; 218  : #error unknown compiler
; 219  : #endif
; 220  : #elif defined(_M_X64)
; 221  :             return (_umul128(u, v, w_hi));
; 222  : #else
; 223  : #error unknown platform
; 224  : #endif
; 225  :         }

  00021	3b ec		 cmp	 ebp, esp
  00023	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__MULTIPLY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_borrow$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__SUBTRUCT_UNIT PROC

; 198  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00009	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 199  : #ifdef _M_IX86
; 200  :             return (_subborrow_u32(borrow, u, v, w));

  0000e	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  00011	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00014	8b 55 0c	 mov	 edx, DWORD PTR _u$[ebp]
  00017	8a 5d 08	 mov	 bl, BYTE PTR _borrow$[ebp]
  0001a	80 c3 ff	 add	 bl, 255			; 000000ffH
  0001d	1b d1		 sbb	 edx, ecx
  0001f	0f 92 c1	 setb	 cl
  00022	89 10		 mov	 DWORD PTR [eax], edx
  00024	8a c1		 mov	 al, cl

; 201  : #elif defined(_M_X64)
; 202  :             return (_subborrow_u64(borrow, u, v, w));
; 203  : #else
; 204  : #error unknown platform
; 205  : #endif
; 206  :         }

  00026	5b		 pop	 ebx
  00027	3b ec		 cmp	 ebp, esp
  00029	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
__SUBTRUCT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADDX_UNIT PROC

; 187  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00009	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 188  : #ifdef _M_IX86
; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0000e	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  00011	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00014	8b 55 0c	 mov	 edx, DWORD PTR _u$[ebp]
  00017	8a 5d 08	 mov	 bl, BYTE PTR _carry$[ebp]
  0001a	80 c3 ff	 add	 bl, 255			; 000000ffH
  0001d	66 0f 38 f6 d1	 adcx	 edx, ecx
  00022	0f 92 c1	 setb	 cl
  00025	89 10		 mov	 DWORD PTR [eax], edx
  00027	8a c1		 mov	 al, cl

; 190  : #elif defined(_M_X64)
; 191  :             return (_addcarryx_u64(carry, u, v, w));
; 192  : #else
; 193  : #error unknown platform
; 194  : #endif
; 195  :         }

  00029	5b		 pop	 ebx
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
__ADDX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADD_UNIT PROC

; 176  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00009	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 177  : #ifdef _M_IX86
; 178  :             return (_addcarry_u32(carry, u, v, w));

  0000e	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  00011	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00014	8b 55 0c	 mov	 edx, DWORD PTR _u$[ebp]
  00017	8a 5d 08	 mov	 bl, BYTE PTR _carry$[ebp]
  0001a	80 c3 ff	 add	 bl, 255			; 000000ffH
  0001d	13 d1		 adc	 edx, ecx
  0001f	0f 92 c1	 setb	 cl
  00022	89 10		 mov	 DWORD PTR [eax], edx
  00024	8a c1		 mov	 al, cl

; 179  : #elif defined(_M_X64)
; 180  :             return (_addcarry_u64(carry, u, v, w));
; 181  : #else
; 182  : #error unknown platform
; 183  : #endif
; 184  :         }

  00026	5b		 pop	 ebx
  00027	3b ec		 cmp	 ebp, esp
  00029	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
__ADD_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC

; 145  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 146  :             *result_high = (_UINT32_T)(value >> 32);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  00010	8b 55 0c	 mov	 edx, DWORD PTR _value$[ebp+4]
  00013	b1 20		 mov	 cl, 32			; 00000020H
  00015	e8 00 00 00 00	 call	 __aullshr
  0001a	8b 4d 10	 mov	 ecx, DWORD PTR _result_high$[ebp]
  0001d	89 01		 mov	 DWORD PTR [ecx], eax

; 147  :             return ((_UINT32_T)value);

  0001f	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]

; 148  :         }

  00022	3b ec		 cmp	 ebp, esp
  00024	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_value_high$ = 8					; size = 4
_value_low$ = 12					; size = 4
__FROMWORDTODWORD PROC

; 140  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 141  :             return (((_UINT64_T)value_high << 32) | value_low);

  0000d	33 d2		 xor	 edx, edx
  0000f	8b 45 08	 mov	 eax, DWORD PTR _value_high$[ebp]
  00012	b1 20		 mov	 cl, 32			; 00000020H
  00014	e8 00 00 00 00	 call	 __allshl
  00019	33 c9		 xor	 ecx, ecx
  0001b	0b 45 0c	 or	 eax, DWORD PTR _value_low$[ebp]
  0001e	0b d1		 or	 edx, ecx

; 142  :         }

  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
__FROMWORDTODWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT PROC

; 63   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  0000a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 64   : #ifdef _M_IX86
; 65   :             __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

  0000f	8b 7d 08	 mov	 edi, DWORD PTR _d$[ebp]
  00012	8b 75 0c	 mov	 esi, DWORD PTR _s$[ebp]
  00015	8b 4d 10	 mov	 ecx, DWORD PTR _count$[ebp]
  00018	f3 a5		 rep movsd

; 66   : #elif defined(_M_X64)
; 67   :             __movsq(d, s, count);
; 68   : #else
; 69   : #error unknown platform
; 70   : #endif
; 71   :         }

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
__COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
_TEXT	SEGMENT
_value$ = 8						; size = 4
?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z PROC ; Palmtree::Math::Core::Internal::AddToMULTI64Counter

; 344  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __BB6D3116_pmc_uint_internal@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  00010	b9 00 00 00 00	 mov	 ecx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A ; Palmtree::Math::Core::Internal::statistics_info
  00015	f0 0f c1 01	 lock	  xadd	 DWORD PTR [ecx], eax

; 346  :     }

  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ENDP ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
_TEXT	SEGMENT
_value$ = 8						; size = 4
?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z PROC ; Palmtree::Math::Core::Internal::AddToMULTI32Counter

; 338  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __BB6D3116_pmc_uint_internal@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  00010	b9 04 00 00 00	 mov	 ecx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
  00015	f0 0f c1 01	 lock	  xadd	 DWORD PTR [ecx], eax

; 340  :     }

  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ENDP ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
_TEXT	SEGMENT
_value$ = 8						; size = 4
?AddToDIV64Counter@Internal@Core@Math@Palmtree@@YAXH@Z PROC ; Palmtree::Math::Core::Internal::AddToDIV64Counter

; 332  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __BB6D3116_pmc_uint_internal@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 333  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV64, value);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  00010	b9 08 00 00 00	 mov	 ecx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+8
  00015	f0 0f c1 01	 lock	  xadd	 DWORD PTR [ecx], eax

; 334  :     }

  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?AddToDIV64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ENDP ; Palmtree::Math::Core::Internal::AddToDIV64Counter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
_TEXT	SEGMENT
_value$ = 8						; size = 4
?AddToDIV32Counter@Internal@Core@Math@Palmtree@@YAXH@Z PROC ; Palmtree::Math::Core::Internal::AddToDIV32Counter

; 326  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __BB6D3116_pmc_uint_internal@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 327  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  00010	b9 0c 00 00 00	 mov	 ecx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+12
  00015	f0 0f c1 01	 lock	  xadd	 DWORD PTR [ecx], eax

; 328  :     }

  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?AddToDIV32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ENDP ; Palmtree::Math::Core::Internal::AddToDIV32Counter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
_TEXT	SEGMENT
?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ PROC ; Palmtree::Math::Core::Internal::IncrementMULTI64Counter

; 321  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __BB6D3116_pmc_uint_internal@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 322  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI64);

  0000d	f0 ff 05 00 00
	00 00		 lock	  inc	 (null) PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A

; 323  :     }

  00014	3b ec		 cmp	 ebp, esp
  00016	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ ENDP ; Palmtree::Math::Core::Internal::IncrementMULTI64Counter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
_TEXT	SEGMENT
?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ PROC ; Palmtree::Math::Core::Internal::IncrementMULTI32Counter

; 315  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __BB6D3116_pmc_uint_internal@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 316  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

  0000d	f0 ff 05 04 00
	00 00		 lock	  inc	 (null) PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4

; 317  :     }

  00014	3b ec		 cmp	 ebp, esp
  00016	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ ENDP ; Palmtree::Math::Core::Internal::IncrementMULTI32Counter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
_TEXT	SEGMENT
?IncrementDIV64Counter@Internal@Core@Math@Palmtree@@YAXXZ PROC ; Palmtree::Math::Core::Internal::IncrementDIV64Counter

; 309  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __BB6D3116_pmc_uint_internal@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 310  :         _InterlockedIncrement(&statistics_info.COUNT_DIV64);

  0000d	f0 ff 05 08 00
	00 00		 lock	  inc	 (null) PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+8

; 311  :     }

  00014	3b ec		 cmp	 ebp, esp
  00016	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?IncrementDIV64Counter@Internal@Core@Math@Palmtree@@YAXXZ ENDP ; Palmtree::Math::Core::Internal::IncrementDIV64Counter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
_TEXT	SEGMENT
?IncrementDIV32Counter@Internal@Core@Math@Palmtree@@YAXXZ PROC ; Palmtree::Math::Core::Internal::IncrementDIV32Counter

; 303  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __BB6D3116_pmc_uint_internal@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 304  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

  0000d	f0 ff 05 0c 00
	00 00		 lock	  inc	 (null) PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+12

; 305  :     }

  00014	3b ec		 cmp	 ebp, esp
  00016	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?IncrementDIV32Counter@Internal@Core@Math@Palmtree@@YAXXZ ENDP ; Palmtree::Math::Core::Internal::IncrementDIV32Counter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
_TEXT	SEGMENT
$T2 = -136						; size = 4
$T3 = -132						; size = 24
$T4 = -108						; size = 24
$T5 = -84						; size = 24
_nr$ = -60						; size = 4
_nq$ = -52						; size = 4
_root$ = -40						; size = 16
_nv$ = -20						; size = 4
_nu$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_q$ = 16						; size = 4
?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0PAPAU51234@@Z PROC ; Palmtree::Math::Core::Internal::PMC_DivRem_X_X

; 2188 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0PAPAU51234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00014	57		 push	 edi
  00015	8d bd 78 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-136]
  0001b	b9 1f 00 00 00	 mov	 ecx, 31			; 0000001fH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002c	33 c5		 xor	 eax, ebp
  0002e	50		 push	 eax
  0002f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00032	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00038	b9 00 00 00 00	 mov	 ecx, OFFSET __E17217E9_pmc_divrem@cpp
  0003d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 2189 :         if (u == nullptr)

  00042	83 7d 08 00	 cmp	 DWORD PTR _u$[ebp], 0
  00046	75 20		 jne	 SHORT $LN2@PMC_DivRem

; 2190 :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"u");

  00048	68 00 00 00 00	 push	 OFFSET $SG118792
  0004d	68 00 00 00 00	 push	 OFFSET $SG118793
  00052	8d 4d ac	 lea	 ecx, DWORD PTR $T5[ebp]
  00055	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0005a	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  0005f	8d 45 ac	 lea	 eax, DWORD PTR $T5[ebp]
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@PMC_DivRem:

; 2191 :         if (v == nullptr)

  00068	83 7d 0c 00	 cmp	 DWORD PTR _v$[ebp], 0
  0006c	75 20		 jne	 SHORT $LN3@PMC_DivRem

; 2192 :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"v");

  0006e	68 00 00 00 00	 push	 OFFSET $SG118796
  00073	68 00 00 00 00	 push	 OFFSET $SG118797
  00078	8d 4d 94	 lea	 ecx, DWORD PTR $T4[ebp]
  0007b	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  00080	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  00085	8d 4d 94	 lea	 ecx, DWORD PTR $T4[ebp]
  00088	51		 push	 ecx
  00089	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@PMC_DivRem:

; 2193 :         NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

  0008e	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00091	89 55 f0	 mov	 DWORD PTR _nu$[ebp], edx

; 2194 :         NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

  00094	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  00097	89 45 ec	 mov	 DWORD PTR _nv$[ebp], eax

; 2195 :         CheckNumber(nu);

  0009a	8b 4d f0	 mov	 ecx, DWORD PTR _nu$[ebp]
  0009d	51		 push	 ecx
  0009e	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  000a3	83 c4 04	 add	 esp, 4

; 2196 :         CheckNumber(nv);

  000a6	8b 55 ec	 mov	 edx, DWORD PTR _nv$[ebp]
  000a9	52		 push	 edx
  000aa	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  000af	83 c4 04	 add	 esp, 4

; 2197 :         if (nv->IS_ZERO)

  000b2	8b 45 ec	 mov	 eax, DWORD PTR _nv$[ebp]
  000b5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000b8	83 e1 01	 and	 ecx, 1
  000bb	74 21		 je	 SHORT $LN4@PMC_DivRem

; 2198 :         {
; 2199 :             // v が 0 である場合
; 2200 : 
; 2201 :             // 0 による除算はエラーで返す
; 2202 :             throw DivisionByZeroException(L"0による除算が行われようとしました。");

  000bd	68 00 00 00 00	 push	 OFFSET $SG118800
  000c2	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  000c8	e8 00 00 00 00	 call	 ??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException
  000cd	68 00 00 00 00	 push	 OFFSET __TI2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@
  000d2	8d 95 7c ff ff
	ff		 lea	 edx, DWORD PTR $T3[ebp]
  000d8	52		 push	 edx
  000d9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@PMC_DivRem:

; 2203 :         }
; 2204 :         ResourceHolderUINT root;

  000de	8d 4d d8	 lea	 ecx, DWORD PTR _root$[ebp]
  000e1	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000e6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2205 :         NUMBER_HEADER* nq;
; 2206 :         NUMBER_HEADER* nr;
; 2207 : 
; 2208 :         if (q != nullptr)

  000ed	83 7d 10 00	 cmp	 DWORD PTR _q$[ebp], 0
  000f1	74 69		 je	 SHORT $LN5@PMC_DivRem

; 2209 :         {
; 2210 :             nr = PMC_DivRem_X_X_Imp(nu, nv, &nq);

  000f3	8d 45 cc	 lea	 eax, DWORD PTR _nq$[ebp]
  000f6	50		 push	 eax
  000f7	8b 4d ec	 mov	 ecx, DWORD PTR _nv$[ebp]
  000fa	51		 push	 ecx
  000fb	8b 55 f0	 mov	 edx, DWORD PTR _nu$[ebp]
  000fe	52		 push	 edx
  000ff	e8 00 00 00 00	 call	 ?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0PAPAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_DivRem_X_X_Imp
  00104	83 c4 0c	 add	 esp, 12			; 0000000cH
  00107	89 45 c4	 mov	 DWORD PTR _nr$[ebp], eax

; 2211 :             root.HookNumber(nq);

  0010a	8b 45 cc	 mov	 eax, DWORD PTR _nq$[ebp]
  0010d	50		 push	 eax
  0010e	8d 4d d8	 lea	 ecx, DWORD PTR _root$[ebp]
  00111	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 2212 :             root.HookNumber(nr);

  00116	8b 4d c4	 mov	 ecx, DWORD PTR _nr$[ebp]
  00119	51		 push	 ecx
  0011a	8d 4d d8	 lea	 ecx, DWORD PTR _root$[ebp]
  0011d	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 2213 : #ifdef _DEBUG
; 2214 :             CheckNumber(nq);

  00122	8b 55 cc	 mov	 edx, DWORD PTR _nq$[ebp]
  00125	52		 push	 edx
  00126	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  0012b	83 c4 04	 add	 esp, 4

; 2215 :             CheckNumber(nr);

  0012e	8b 45 c4	 mov	 eax, DWORD PTR _nr$[ebp]
  00131	50		 push	 eax
  00132	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  00137	83 c4 04	 add	 esp, 4

; 2216 : #endif
; 2217 :             root.UnlinkNumber(nq);

  0013a	8b 4d cc	 mov	 ecx, DWORD PTR _nq$[ebp]
  0013d	51		 push	 ecx
  0013e	8d 4d d8	 lea	 ecx, DWORD PTR _root$[ebp]
  00141	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 2218 :             *q = (PMC_HANDLE_UINT)nq;

  00146	8b 55 10	 mov	 edx, DWORD PTR _q$[ebp]
  00149	8b 45 cc	 mov	 eax, DWORD PTR _nq$[ebp]
  0014c	89 02		 mov	 DWORD PTR [edx], eax

; 2219 :             root.UnlinkNumber(nr);

  0014e	8b 4d c4	 mov	 ecx, DWORD PTR _nr$[ebp]
  00151	51		 push	 ecx
  00152	8d 4d d8	 lea	 ecx, DWORD PTR _root$[ebp]
  00155	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 2220 :         }
; 2221 :         else

  0015a	eb 39		 jmp	 SHORT $LN6@PMC_DivRem
$LN5@PMC_DivRem:

; 2222 :         {
; 2223 :             nr = PMC_DivRem_X_X_Imp(nu, nv, nullptr);

  0015c	6a 00		 push	 0
  0015e	8b 55 ec	 mov	 edx, DWORD PTR _nv$[ebp]
  00161	52		 push	 edx
  00162	8b 45 f0	 mov	 eax, DWORD PTR _nu$[ebp]
  00165	50		 push	 eax
  00166	e8 00 00 00 00	 call	 ?PMC_DivRem_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0PAPAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_DivRem_X_X_Imp
  0016b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0016e	89 45 c4	 mov	 DWORD PTR _nr$[ebp], eax

; 2224 :             root.HookNumber(nr);

  00171	8b 4d c4	 mov	 ecx, DWORD PTR _nr$[ebp]
  00174	51		 push	 ecx
  00175	8d 4d d8	 lea	 ecx, DWORD PTR _root$[ebp]
  00178	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 2225 : #ifdef _DEBUG
; 2226 :             CheckNumber(nr);

  0017d	8b 55 c4	 mov	 edx, DWORD PTR _nr$[ebp]
  00180	52		 push	 edx
  00181	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  00186	83 c4 04	 add	 esp, 4

; 2227 : #endif
; 2228 :             root.UnlinkNumber(nr);

  00189	8b 45 c4	 mov	 eax, DWORD PTR _nr$[ebp]
  0018c	50		 push	 eax
  0018d	8d 4d d8	 lea	 ecx, DWORD PTR _root$[ebp]
  00190	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN6@PMC_DivRem:

; 2229 :         }
; 2230 : 
; 2231 :         return ((PMC_HANDLE_UINT)nr);

  00195	8b 4d c4	 mov	 ecx, DWORD PTR _nr$[ebp]
  00198	89 8d 78 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  0019e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001a5	8d 4d d8	 lea	 ecx, DWORD PTR _root$[ebp]
  001a8	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  001ad	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
$LN7@PMC_DivRem:

; 2232 :     }

  001b3	52		 push	 edx
  001b4	8b cd		 mov	 ecx, ebp
  001b6	50		 push	 eax
  001b7	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN13@PMC_DivRem
  001bd	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001c2	58		 pop	 eax
  001c3	5a		 pop	 edx
  001c4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001c7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ce	59		 pop	 ecx
  001cf	5f		 pop	 edi
  001d0	81 c4 88 00 00
	00		 add	 esp, 136		; 00000088H
  001d6	3b ec		 cmp	 ebp, esp
  001d8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001dd	8b e5		 mov	 esp, ebp
  001df	5d		 pop	 ebp
  001e0	c2 0c 00	 ret	 12			; 0000000cH
  001e3	90		 npad	 1
$LN13@PMC_DivRem:
  001e4	02 00 00 00	 DD	 2
  001e8	00 00 00 00	 DD	 $LN12@PMC_DivRem
$LN12@PMC_DivRem:
  001ec	d8 ff ff ff	 DD	 -40			; ffffffd8H
  001f0	10 00 00 00	 DD	 16			; 00000010H
  001f4	00 00 00 00	 DD	 $LN9@PMC_DivRem
  001f8	cc ff ff ff	 DD	 -52			; ffffffccH
  001fc	04 00 00 00	 DD	 4
  00200	00 00 00 00	 DD	 $LN10@PMC_DivRem
$LN10@PMC_DivRem:
  00204	6e		 DB	 110			; 0000006eH
  00205	71		 DB	 113			; 00000071H
  00206	00		 DB	 0
$LN9@PMC_DivRem:
  00207	72		 DB	 114			; 00000072H
  00208	6f		 DB	 111			; 0000006fH
  00209	6f		 DB	 111			; 0000006fH
  0020a	74		 DB	 116			; 00000074H
  0020b	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0PAPAU51234@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0PAPAU51234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 7c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-132]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0PAPAU51234@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0PAPAU51234@@Z ENDP ; Palmtree::Math::Core::Internal::PMC_DivRem_X_X
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
_TEXT	SEGMENT
$T2 = -132						; size = 8
$T3 = -124						; size = 8
$T4 = -116						; size = 24
$T5 = -92						; size = 24
_r$6 = -68						; size = 8
_r$7 = -60						; size = 8
_nq$ = -48						; size = 4
_root$ = -36						; size = 16
_nu$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_q$ = 20						; size = 4
?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YG_KPAU__tag_PMC_HANDLE_UINT@1234@_KPAPAU51234@@Z PROC ; Palmtree::Math::Core::Internal::PMC_DivRem_X_L

; 2008 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YG_KPAU__tag_PMC_HANDLE_UINT@1234@_KPAPAU51234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 78	 sub	 esp, 120		; 00000078H
  00014	57		 push	 edi
  00015	8d bd 7c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-132]
  0001b	b9 1e 00 00 00	 mov	 ecx, 30			; 0000001eH
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002c	33 c5		 xor	 eax, ebp
  0002e	50		 push	 eax
  0002f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00032	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00038	b9 00 00 00 00	 mov	 ecx, OFFSET __E17217E9_pmc_divrem@cpp
  0003d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 2009 :         if (sizeof(__UNIT_TYPE) * 2 < sizeof(v))

  00042	33 c0		 xor	 eax, eax
  00044	74 20		 je	 SHORT $LN2@PMC_DivRem

; 2010 :         {
; 2011 :             // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 2012 :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_divrem.cpp;PMC_DivRem_X_L;1");

  00046	68 00 00 00 00	 push	 OFFSET $SG118701
  0004b	68 00 00 00 00	 push	 OFFSET $SG118702
  00050	8d 4d a4	 lea	 ecx, DWORD PTR $T5[ebp]
  00053	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00058	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0005d	8d 4d a4	 lea	 ecx, DWORD PTR $T5[ebp]
  00060	51		 push	 ecx
  00061	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@PMC_DivRem:

; 2013 :         }
; 2014 :         if (u == nullptr)

  00066	83 7d 08 00	 cmp	 DWORD PTR _u$[ebp], 0
  0006a	75 20		 jne	 SHORT $LN3@PMC_DivRem

; 2015 :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"u");

  0006c	68 00 00 00 00	 push	 OFFSET $SG118705
  00071	68 00 00 00 00	 push	 OFFSET $SG118706
  00076	8d 4d 8c	 lea	 ecx, DWORD PTR $T4[ebp]
  00079	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0007e	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  00083	8d 55 8c	 lea	 edx, DWORD PTR $T4[ebp]
  00086	52		 push	 edx
  00087	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@PMC_DivRem:

; 2016 :         NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

  0008c	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  0008f	89 45 f0	 mov	 DWORD PTR _nu$[ebp], eax

; 2017 :         CheckNumber(nu);

  00092	8b 4d f0	 mov	 ecx, DWORD PTR _nu$[ebp]
  00095	51		 push	 ecx
  00096	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  0009b	83 c4 04	 add	 esp, 4

; 2018 :         ResourceHolderUINT root;

  0009e	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  000a1	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000a6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2019 :         NUMBER_HEADER* nq;
; 2020 :         if (q != nullptr)

  000ad	83 7d 14 00	 cmp	 DWORD PTR _q$[ebp], 0
  000b1	74 6f		 je	 SHORT $LN4@PMC_DivRem

; 2021 :         {
; 2022 :             _UINT64_T r = PMC_DivRem_X_L_Imp(nu, v, &nq);

  000b3	8d 55 d0	 lea	 edx, DWORD PTR _nq$[ebp]
  000b6	52		 push	 edx
  000b7	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp+4]
  000ba	50		 push	 eax
  000bb	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  000be	51		 push	 ecx
  000bf	8b 55 f0	 mov	 edx, DWORD PTR _nu$[ebp]
  000c2	52		 push	 edx
  000c3	e8 00 00 00 00	 call	 ?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPAU__tag_NUMBER_HEADER@1234@_KPAPAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_DivRem_X_L_Imp
  000c8	83 c4 10	 add	 esp, 16			; 00000010H
  000cb	89 45 c4	 mov	 DWORD PTR _r$7[ebp], eax
  000ce	89 55 c8	 mov	 DWORD PTR _r$7[ebp+4], edx

; 2023 :             root.HookNumber(nq);

  000d1	8b 45 d0	 mov	 eax, DWORD PTR _nq$[ebp]
  000d4	50		 push	 eax
  000d5	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  000d8	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 2024 : #ifdef _DEBUG
; 2025 :             CheckNumber(nq);

  000dd	8b 4d d0	 mov	 ecx, DWORD PTR _nq$[ebp]
  000e0	51		 push	 ecx
  000e1	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  000e6	83 c4 04	 add	 esp, 4

; 2026 : #endif
; 2027 :             *q = (PMC_HANDLE_UINT)nq;

  000e9	8b 55 14	 mov	 edx, DWORD PTR _q$[ebp]
  000ec	8b 45 d0	 mov	 eax, DWORD PTR _nq$[ebp]
  000ef	89 02		 mov	 DWORD PTR [edx], eax

; 2028 :             root.UnlinkNumber(nq);

  000f1	8b 4d d0	 mov	 ecx, DWORD PTR _nq$[ebp]
  000f4	51		 push	 ecx
  000f5	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  000f8	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 2029 :             return (r);

  000fd	8b 55 c4	 mov	 edx, DWORD PTR _r$7[ebp]
  00100	89 55 84	 mov	 DWORD PTR $T3[ebp], edx
  00103	8b 45 c8	 mov	 eax, DWORD PTR _r$7[ebp+4]
  00106	89 45 88	 mov	 DWORD PTR $T3[ebp+4], eax
  00109	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00110	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00113	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00118	8b 45 84	 mov	 eax, DWORD PTR $T3[ebp]
  0011b	8b 55 88	 mov	 edx, DWORD PTR $T3[ebp+4]
  0011e	eb 56		 jmp	 SHORT $LN6@PMC_DivRem

; 2030 :         }
; 2031 :         else

  00120	eb 45		 jmp	 SHORT $LN5@PMC_DivRem
$LN4@PMC_DivRem:

; 2032 :         {
; 2033 :             _UINT64_T r = PMC_DivRem_X_L_Imp(nu, v, nullptr);

  00122	6a 00		 push	 0
  00124	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp+4]
  00127	51		 push	 ecx
  00128	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  0012b	52		 push	 edx
  0012c	8b 45 f0	 mov	 eax, DWORD PTR _nu$[ebp]
  0012f	50		 push	 eax
  00130	e8 00 00 00 00	 call	 ?PMC_DivRem_X_L_Imp@Internal@Core@Math@Palmtree@@YA_KPAU__tag_NUMBER_HEADER@1234@_KPAPAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_DivRem_X_L_Imp
  00135	83 c4 10	 add	 esp, 16			; 00000010H
  00138	89 45 bc	 mov	 DWORD PTR _r$6[ebp], eax
  0013b	89 55 c0	 mov	 DWORD PTR _r$6[ebp+4], edx

; 2034 :             return (r);

  0013e	8b 4d bc	 mov	 ecx, DWORD PTR _r$6[ebp]
  00141	89 8d 7c ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  00147	8b 55 c0	 mov	 edx, DWORD PTR _r$6[ebp+4]
  0014a	89 55 80	 mov	 DWORD PTR $T2[ebp+4], edx
  0014d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00154	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00157	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0015c	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00162	8b 55 80	 mov	 edx, DWORD PTR $T2[ebp+4]
  00165	eb 0f		 jmp	 SHORT $LN6@PMC_DivRem
$LN5@PMC_DivRem:

; 2035 :         }
; 2036 :     }

  00167	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0016e	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00171	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
$LN6@PMC_DivRem:
  00176	52		 push	 edx
  00177	8b cd		 mov	 ecx, ebp
  00179	50		 push	 eax
  0017a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@PMC_DivRem
  00180	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00185	58		 pop	 eax
  00186	5a		 pop	 edx
  00187	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0018a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00191	59		 pop	 ecx
  00192	5f		 pop	 edi
  00193	81 c4 84 00 00
	00		 add	 esp, 132		; 00000084H
  00199	3b ec		 cmp	 ebp, esp
  0019b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a0	8b e5		 mov	 esp, ebp
  001a2	5d		 pop	 ebp
  001a3	c2 10 00	 ret	 16			; 00000010H
  001a6	66 90		 npad	 2
$LN12@PMC_DivRem:
  001a8	02 00 00 00	 DD	 2
  001ac	00 00 00 00	 DD	 $LN11@PMC_DivRem
$LN11@PMC_DivRem:
  001b0	dc ff ff ff	 DD	 -36			; ffffffdcH
  001b4	10 00 00 00	 DD	 16			; 00000010H
  001b8	00 00 00 00	 DD	 $LN8@PMC_DivRem
  001bc	d0 ff ff ff	 DD	 -48			; ffffffd0H
  001c0	04 00 00 00	 DD	 4
  001c4	00 00 00 00	 DD	 $LN9@PMC_DivRem
$LN9@PMC_DivRem:
  001c8	6e		 DB	 110			; 0000006eH
  001c9	71		 DB	 113			; 00000071H
  001ca	00		 DB	 0
$LN8@PMC_DivRem:
  001cb	72		 DB	 114			; 00000072H
  001cc	6f		 DB	 111			; 0000006fH
  001cd	6f		 DB	 111			; 0000006fH
  001ce	74		 DB	 116			; 00000074H
  001cf	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YG_KPAU__tag_PMC_HANDLE_UINT@1234@_KPAPAU51234@@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YG_KPAU__tag_PMC_HANDLE_UINT@1234@_KPAPAU51234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a 80	 mov	 ecx, DWORD PTR [edx-128]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YG_KPAU__tag_PMC_HANDLE_UINT@1234@_KPAPAU51234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YG_KPAU__tag_PMC_HANDLE_UINT@1234@_KPAPAU51234@@Z ENDP ; Palmtree::Math::Core::Internal::PMC_DivRem_X_L
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
_TEXT	SEGMENT
$T2 = -116						; size = 4
$T3 = -112						; size = 4
$T4 = -108						; size = 24
$T5 = -84						; size = 24
_r$6 = -60						; size = 4
_r$7 = -56						; size = 4
_nq$ = -48						; size = 4
_root$ = -36						; size = 16
_nu$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_q$ = 16						; size = 4
?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@IPAPAU51234@@Z PROC ; Palmtree::Math::Core::Internal::PMC_DivRem_X_I

; 1599 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@IPAPAU51234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	57		 push	 edi
  00015	8d 7d 8c	 lea	 edi, DWORD PTR [ebp-116]
  00018	b9 1a 00 00 00	 mov	 ecx, 26			; 0000001aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	50		 push	 eax
  0002c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET __E17217E9_pmc_divrem@cpp
  0003a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1600 :         if (sizeof(__UNIT_TYPE) < sizeof(v))

  0003f	33 c0		 xor	 eax, eax
  00041	74 20		 je	 SHORT $LN2@PMC_DivRem

; 1601 :         {
; 1602 :             // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 1603 :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_divrem.cpp;PMC_DivRem_X_I;1");

  00043	68 00 00 00 00	 push	 OFFSET $SG118494
  00048	68 00 00 00 00	 push	 OFFSET $SG118495
  0004d	8d 4d ac	 lea	 ecx, DWORD PTR $T5[ebp]
  00050	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00055	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0005a	8d 4d ac	 lea	 ecx, DWORD PTR $T5[ebp]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@PMC_DivRem:

; 1604 :         }
; 1605 :         if (u == nullptr)

  00063	83 7d 08 00	 cmp	 DWORD PTR _u$[ebp], 0
  00067	75 20		 jne	 SHORT $LN3@PMC_DivRem

; 1606 :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"u");

  00069	68 00 00 00 00	 push	 OFFSET $SG118498
  0006e	68 00 00 00 00	 push	 OFFSET $SG118499
  00073	8d 4d 94	 lea	 ecx, DWORD PTR $T4[ebp]
  00076	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0007b	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  00080	8d 55 94	 lea	 edx, DWORD PTR $T4[ebp]
  00083	52		 push	 edx
  00084	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@PMC_DivRem:

; 1607 :         NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

  00089	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  0008c	89 45 f0	 mov	 DWORD PTR _nu$[ebp], eax

; 1608 :         CheckNumber(nu);

  0008f	8b 4d f0	 mov	 ecx, DWORD PTR _nu$[ebp]
  00092	51		 push	 ecx
  00093	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  00098	83 c4 04	 add	 esp, 4

; 1609 :         ResourceHolderUINT root;

  0009b	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  0009e	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000a3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1610 :         NUMBER_HEADER* nq;
; 1611 :         if (q != nullptr)

  000aa	83 7d 10 00	 cmp	 DWORD PTR _q$[ebp], 0
  000ae	74 5f		 je	 SHORT $LN4@PMC_DivRem

; 1612 :         {
; 1613 :             _UINT32_T r = PMC_DivRem_X_I_Imp(nu, v, &nq);

  000b0	8d 55 d0	 lea	 edx, DWORD PTR _nq$[ebp]
  000b3	52		 push	 edx
  000b4	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  000b7	50		 push	 eax
  000b8	8b 4d f0	 mov	 ecx, DWORD PTR _nu$[ebp]
  000bb	51		 push	 ecx
  000bc	e8 00 00 00 00	 call	 ?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPAU__tag_NUMBER_HEADER@1234@IPAPAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_DivRem_X_I_Imp
  000c1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c4	89 45 c8	 mov	 DWORD PTR _r$7[ebp], eax

; 1614 :             root.HookNumber(nq);

  000c7	8b 55 d0	 mov	 edx, DWORD PTR _nq$[ebp]
  000ca	52		 push	 edx
  000cb	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  000ce	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 1615 : #ifdef _DEBUG
; 1616 :             CheckNumber(nq);

  000d3	8b 45 d0	 mov	 eax, DWORD PTR _nq$[ebp]
  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  000dc	83 c4 04	 add	 esp, 4

; 1617 : #endif
; 1618 :             *q = (PMC_HANDLE_UINT)nq;

  000df	8b 4d 10	 mov	 ecx, DWORD PTR _q$[ebp]
  000e2	8b 55 d0	 mov	 edx, DWORD PTR _nq$[ebp]
  000e5	89 11		 mov	 DWORD PTR [ecx], edx

; 1619 :             root.UnlinkNumber(nq);

  000e7	8b 45 d0	 mov	 eax, DWORD PTR _nq$[ebp]
  000ea	50		 push	 eax
  000eb	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  000ee	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 1620 :             return (r);

  000f3	8b 4d c8	 mov	 ecx, DWORD PTR _r$7[ebp]
  000f6	89 4d 90	 mov	 DWORD PTR $T3[ebp], ecx
  000f9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00100	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00103	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00108	8b 45 90	 mov	 eax, DWORD PTR $T3[ebp]
  0010b	eb 40		 jmp	 SHORT $LN6@PMC_DivRem

; 1621 :         }
; 1622 :         else

  0010d	eb 2f		 jmp	 SHORT $LN5@PMC_DivRem
$LN4@PMC_DivRem:

; 1623 :         {
; 1624 :             _UINT32_T r = PMC_DivRem_X_I_Imp(nu, v, nullptr);

  0010f	6a 00		 push	 0
  00111	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  00114	52		 push	 edx
  00115	8b 45 f0	 mov	 eax, DWORD PTR _nu$[ebp]
  00118	50		 push	 eax
  00119	e8 00 00 00 00	 call	 ?PMC_DivRem_X_I_Imp@Internal@Core@Math@Palmtree@@YAIPAU__tag_NUMBER_HEADER@1234@IPAPAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_DivRem_X_I_Imp
  0011e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00121	89 45 c4	 mov	 DWORD PTR _r$6[ebp], eax

; 1625 :             return (r);

  00124	8b 4d c4	 mov	 ecx, DWORD PTR _r$6[ebp]
  00127	89 4d 8c	 mov	 DWORD PTR $T2[ebp], ecx
  0012a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00131	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00134	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00139	8b 45 8c	 mov	 eax, DWORD PTR $T2[ebp]
  0013c	eb 0f		 jmp	 SHORT $LN6@PMC_DivRem
$LN5@PMC_DivRem:

; 1626 :         }
; 1627 :     }

  0013e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00145	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00148	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
$LN6@PMC_DivRem:
  0014d	52		 push	 edx
  0014e	8b cd		 mov	 ecx, ebp
  00150	50		 push	 eax
  00151	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@PMC_DivRem
  00157	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0015c	58		 pop	 eax
  0015d	5a		 pop	 edx
  0015e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00161	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00168	59		 pop	 ecx
  00169	5f		 pop	 edi
  0016a	83 c4 74	 add	 esp, 116		; 00000074H
  0016d	3b ec		 cmp	 ebp, esp
  0016f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00174	8b e5		 mov	 esp, ebp
  00176	5d		 pop	 ebp
  00177	c2 0c 00	 ret	 12			; 0000000cH
  0017a	66 90		 npad	 2
$LN12@PMC_DivRem:
  0017c	02 00 00 00	 DD	 2
  00180	00 00 00 00	 DD	 $LN11@PMC_DivRem
$LN11@PMC_DivRem:
  00184	dc ff ff ff	 DD	 -36			; ffffffdcH
  00188	10 00 00 00	 DD	 16			; 00000010H
  0018c	00 00 00 00	 DD	 $LN8@PMC_DivRem
  00190	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00194	04 00 00 00	 DD	 4
  00198	00 00 00 00	 DD	 $LN9@PMC_DivRem
$LN9@PMC_DivRem:
  0019c	6e		 DB	 110			; 0000006eH
  0019d	71		 DB	 113			; 00000071H
  0019e	00		 DB	 0
$LN8@PMC_DivRem:
  0019f	72		 DB	 114			; 00000072H
  001a0	6f		 DB	 111			; 0000006fH
  001a1	6f		 DB	 111			; 0000006fH
  001a2	74		 DB	 116			; 00000074H
  001a3	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@IPAPAU51234@@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@IPAPAU51234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a 90	 mov	 ecx, DWORD PTR [edx-112]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@IPAPAU51234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@IPAPAU51234@@Z ENDP ; Palmtree::Math::Core::Internal::PMC_DivRem_X_I
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
_TEXT	SEGMENT
tv248 = -352						; size = 4
tv191 = -348						; size = 4
$T1 = -344						; size = 24
$T2 = -320						; size = 24
$T3 = -296						; size = 24
_temp_q$4 = -272					; size = 4
_temp_r$5 = -264					; size = 4
_v_bit_count$6 = -256					; size = 4
_u_bit_count$7 = -252					; size = 4
_work_v_buf$8 = -244					; size = 8
_r_buf$9 = -228						; size = 12
_u_buf$10 = -208					; size = 8
_work_v_buf$11 = -192					; size = 8
_r_buf$12 = -176					; size = 12
_q_buf$13 = -156					; size = 12
_u_buf$14 = -136					; size = 8
_r_buf$15 = -124					; size = 4
_u_buf$16 = -116					; size = 8
_r_buf$17 = -100					; size = 4
_q_buf$18 = -88						; size = 12
_u_buf$19 = -68						; size = 8
_v_bit_count$20 = -56					; size = 4
_u_bit_count$21 = -52					; size = 4
_temp_q$22 = -48					; size = 4
_temp_r$23 = -40					; size = 4
_v_bit_count$24 = -32					; size = 4
_u_bit_count$25 = -28					; size = 4
_u_lo$26 = -24						; size = 4
_u_hi$27 = -16						; size = 4
_nv$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 8
_v$ = 16						; size = 4
_q$ = 20						; size = 4
?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YG_K_KPAU__tag_PMC_HANDLE_UINT@1234@PA_K@Z PROC ; Palmtree::Math::Core::Internal::PMC_DivRem_L_X

; 1630 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 60 01 00
	00		 sub	 esp, 352		; 00000160H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd a0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-352]
  00011	b9 58 00 00 00	 mov	 ecx, 88			; 00000058H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00027	b9 00 00 00 00	 mov	 ecx, OFFSET __E17217E9_pmc_divrem@cpp
  0002c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1631 :         if (sizeof(__UNIT_TYPE) * 2 < sizeof(u))

  00031	33 c0		 xor	 eax, eax
  00033	74 26		 je	 SHORT $LN2@PMC_DivRem

; 1632 :         {
; 1633 :             // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 1634 :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_divrem.cpp;PMC_DivRem_L_X;1");

  00035	68 00 00 00 00	 push	 OFFSET $SG118556
  0003a	68 00 00 00 00	 push	 OFFSET $SG118557
  0003f	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00045	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  0004a	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0004f	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00055	51		 push	 ecx
  00056	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@PMC_DivRem:

; 1635 :         }
; 1636 :         if (v == nullptr)

  0005b	83 7d 10 00	 cmp	 DWORD PTR _v$[ebp], 0
  0005f	75 26		 jne	 SHORT $LN3@PMC_DivRem

; 1637 :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"v");

  00061	68 00 00 00 00	 push	 OFFSET $SG118560
  00066	68 00 00 00 00	 push	 OFFSET $SG118561
  0006b	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00071	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  00076	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  0007b	8d 95 c0 fe ff
	ff		 lea	 edx, DWORD PTR $T2[ebp]
  00081	52		 push	 edx
  00082	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@PMC_DivRem:

; 1638 :         NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

  00087	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0008a	89 45 f8	 mov	 DWORD PTR _nv$[ebp], eax

; 1639 :         CheckNumber(nv);

  0008d	8b 4d f8	 mov	 ecx, DWORD PTR _nv$[ebp]
  00090	51		 push	 ecx
  00091	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  00096	83 c4 04	 add	 esp, 4

; 1640 :         if (nv->IS_ZERO)

  00099	8b 55 f8	 mov	 edx, DWORD PTR _nv$[ebp]
  0009c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0009f	83 e0 01	 and	 eax, 1
  000a2	74 21		 je	 SHORT $LN4@PMC_DivRem

; 1641 :         {
; 1642 :             // v が 0 である場合
; 1643 : 
; 1644 :             // 0 による除算はエラーで返す
; 1645 :             throw DivisionByZeroException(L"0による除算が行われようとしました。");

  000a4	68 00 00 00 00	 push	 OFFSET $SG118564
  000a9	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  000af	e8 00 00 00 00	 call	 ??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException
  000b4	68 00 00 00 00	 push	 OFFSET __TI2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@
  000b9	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  000bf	51		 push	 ecx
  000c0	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@PMC_DivRem:

; 1646 :         }
; 1647 :         if (u == 0)

  000c5	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  000c8	0b 55 0c	 or	 edx, DWORD PTR _u$[ebp+4]
  000cb	75 24		 jne	 SHORT $LN5@PMC_DivRem

; 1648 :         {
; 1649 :             // x が 0 である場合
; 1650 : 
; 1651 :             // q = 0, r = 0 を返す
; 1652 :             if (q != nullptr)

  000cd	83 7d 14 00	 cmp	 DWORD PTR _q$[ebp], 0
  000d1	74 10		 je	 SHORT $LN7@PMC_DivRem

; 1653 :                 *q = 0;

  000d3	8b 45 14	 mov	 eax, DWORD PTR _q$[ebp]
  000d6	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  000dc	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN7@PMC_DivRem:

; 1654 :             return (0);

  000e3	33 c0		 xor	 eax, eax
  000e5	33 d2		 xor	 edx, edx
  000e7	e9 a0 04 00 00	 jmp	 $LN36@PMC_DivRem

; 1655 :         }
; 1656 :         else

  000ec	e9 9b 04 00 00	 jmp	 $LN36@PMC_DivRem
$LN5@PMC_DivRem:

; 1657 :         {
; 1658 :             // u が 0 ではない場合
; 1659 : 
; 1660 :             if (nv->IS_ONE)

  000f1	8b 4d f8	 mov	 ecx, DWORD PTR _nv$[ebp]
  000f4	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000f7	d1 ea		 shr	 edx, 1
  000f9	83 e2 01	 and	 edx, 1
  000fc	74 22		 je	 SHORT $LN8@PMC_DivRem

; 1661 :             {
; 1662 :                 // v が 1 である場合
; 1663 : 
; 1664 :                 // q = u, r = 0 を返す
; 1665 :                 if (q != nullptr)

  000fe	83 7d 14 00	 cmp	 DWORD PTR _q$[ebp], 0
  00102	74 0e		 je	 SHORT $LN10@PMC_DivRem

; 1666 :                     *q = u;

  00104	8b 45 14	 mov	 eax, DWORD PTR _q$[ebp]
  00107	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  0010a	89 08		 mov	 DWORD PTR [eax], ecx
  0010c	8b 55 0c	 mov	 edx, DWORD PTR _u$[ebp+4]
  0010f	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN10@PMC_DivRem:

; 1667 :                 return (0);

  00112	33 c0		 xor	 eax, eax
  00114	33 d2		 xor	 edx, edx
  00116	e9 71 04 00 00	 jmp	 $LN36@PMC_DivRem

; 1668 :             }
; 1669 :             else

  0011b	e9 6c 04 00 00	 jmp	 $LN36@PMC_DivRem
$LN8@PMC_DivRem:

; 1670 :             {
; 1671 :                 // u > 0 かつ v > 1 である場合
; 1672 : 
; 1673 :                 // u と v の商・剰余を計算する
; 1674 :                 if (sizeof(__UNIT_TYPE) < sizeof(u))

  00120	b8 01 00 00 00	 mov	 eax, 1
  00125	85 c0		 test	 eax, eax
  00127	0f 84 b1 03 00
	00		 je	 $LN11@PMC_DivRem

; 1675 :                 {
; 1676 :                     // _UINT64_T が 1 ワードで表現しきれない場合
; 1677 :                     _UINT32_T u_hi;
; 1678 :                     _UINT32_T u_lo = _FROMDWORDTOWORD(u, &u_hi);

  0012d	8d 4d f0	 lea	 ecx, DWORD PTR _u_hi$27[ebp]
  00130	51		 push	 ecx
  00131	8b 55 0c	 mov	 edx, DWORD PTR _u$[ebp+4]
  00134	52		 push	 edx
  00135	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00138	50		 push	 eax
  00139	e8 00 00 00 00	 call	 __FROMDWORDTOWORD
  0013e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00141	89 45 e8	 mov	 DWORD PTR _u_lo$26[ebp], eax

; 1679 :                     if (u_hi == 0)

  00144	83 7d f0 00	 cmp	 DWORD PTR _u_hi$27[ebp], 0
  00148	0f 85 a2 00 00
	00		 jne	 $LN13@PMC_DivRem

; 1680 :                     {
; 1681 :                         // u の値が 32bit で表現可能な場合
; 1682 :                         __UNIT_TYPE u_bit_count = sizeof(u_lo) * 8 - _LZCNT_ALT_32(u_lo);

  0014e	8b 4d e8	 mov	 ecx, DWORD PTR _u_lo$26[ebp]
  00151	51		 push	 ecx
  00152	e8 00 00 00 00	 call	 __LZCNT_ALT_32
  00157	83 c4 04	 add	 esp, 4
  0015a	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  0015f	2b d0		 sub	 edx, eax
  00161	89 55 e4	 mov	 DWORD PTR _u_bit_count$25[ebp], edx

; 1683 :                         __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

  00164	8b 45 f8	 mov	 eax, DWORD PTR _nv$[ebp]
  00167	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0016a	89 4d e0	 mov	 DWORD PTR _v_bit_count$24[ebp], ecx

; 1684 :                         if (u_bit_count < v_bit_count)

  0016d	8b 55 e4	 mov	 edx, DWORD PTR _u_bit_count$25[ebp]
  00170	3b 55 e0	 cmp	 edx, DWORD PTR _v_bit_count$24[ebp]
  00173	73 22		 jae	 SHORT $LN15@PMC_DivRem

; 1685 :                         {
; 1686 :                             // 明らかに u < v である場合
; 1687 : 
; 1688 :                             // q = 0, r = u を返す。
; 1689 :                             if (q != nullptr)

  00175	83 7d 14 00	 cmp	 DWORD PTR _q$[ebp], 0
  00179	74 10		 je	 SHORT $LN17@PMC_DivRem

; 1690 :                                 *q = 0;

  0017b	8b 45 14	 mov	 eax, DWORD PTR _q$[ebp]
  0017e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00184	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN17@PMC_DivRem:

; 1691 :                             return (u_lo);

  0018b	33 d2		 xor	 edx, edx
  0018d	8b 45 e8	 mov	 eax, DWORD PTR _u_lo$26[ebp]
  00190	e9 f7 03 00 00	 jmp	 $LN36@PMC_DivRem

; 1692 :                         }
; 1693 :                         else

  00195	eb 54		 jmp	 SHORT $LN16@PMC_DivRem
$LN15@PMC_DivRem:

; 1694 :                         {
; 1695 :                             // u のビット数が v のビット数以上である場合
; 1696 : 
; 1697 :                             // u は 32bit で表現できるので、v も 32bit で表現できる。
; 1698 :                             __UNIT_TYPE temp_r;
; 1699 :                             __UNIT_TYPE temp_q = _DIVREM_UNIT(0, u_lo, (__UNIT_TYPE)nv->BLOCK[0], &temp_r);

  00197	8d 4d d8	 lea	 ecx, DWORD PTR _temp_r$23[ebp]
  0019a	51		 push	 ecx
  0019b	ba 04 00 00 00	 mov	 edx, 4
  001a0	6b c2 00	 imul	 eax, edx, 0
  001a3	8b 4d f8	 mov	 ecx, DWORD PTR _nv$[ebp]
  001a6	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  001a9	8b 04 02	 mov	 eax, DWORD PTR [edx+eax]
  001ac	50		 push	 eax
  001ad	8b 4d e8	 mov	 ecx, DWORD PTR _u_lo$26[ebp]
  001b0	51		 push	 ecx
  001b1	6a 00		 push	 0
  001b3	e8 00 00 00 00	 call	 __DIVREM_UNIT
  001b8	83 c4 10	 add	 esp, 16			; 00000010H
  001bb	89 45 d0	 mov	 DWORD PTR _temp_q$22[ebp], eax

; 1700 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1701 :                             if (sizeof(u_lo) == sizeof(_UINT64_T))

  001be	33 d2		 xor	 edx, edx
  001c0	74 07		 je	 SHORT $LN18@PMC_DivRem

; 1702 :                                 IncrementDIV64Counter();

  001c2	e8 00 00 00 00	 call	 ?IncrementDIV64Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementDIV64Counter

; 1703 :                             else

  001c7	eb 05		 jmp	 SHORT $LN19@PMC_DivRem
$LN18@PMC_DivRem:

; 1704 :                                 IncrementDIV32Counter();

  001c9	e8 00 00 00 00	 call	 ?IncrementDIV32Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementDIV32Counter
$LN19@PMC_DivRem:

; 1705 : #endif
; 1706 :                             if (q != nullptr)

  001ce	83 7d 14 00	 cmp	 DWORD PTR _q$[ebp], 0
  001d2	74 0d		 je	 SHORT $LN20@PMC_DivRem

; 1707 :                                 *q = temp_q;

  001d4	8b 45 d0	 mov	 eax, DWORD PTR _temp_q$22[ebp]
  001d7	33 c9		 xor	 ecx, ecx
  001d9	8b 55 14	 mov	 edx, DWORD PTR _q$[ebp]
  001dc	89 02		 mov	 DWORD PTR [edx], eax
  001de	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$LN20@PMC_DivRem:

; 1708 :                             return (temp_r);

  001e1	33 d2		 xor	 edx, edx
  001e3	8b 45 d8	 mov	 eax, DWORD PTR _temp_r$23[ebp]
  001e6	e9 a1 03 00 00	 jmp	 $LN36@PMC_DivRem
$LN16@PMC_DivRem:

; 1709 :                         }
; 1710 :                     }
; 1711 :                     else

  001eb	e9 e9 02 00 00	 jmp	 $LN14@PMC_DivRem
$LN13@PMC_DivRem:

; 1712 :                     {
; 1713 :                         // v の値が 32bit では表現できない場合
; 1714 :                         __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_32(u_hi);

  001f0	8b 45 f0	 mov	 eax, DWORD PTR _u_hi$27[ebp]
  001f3	50		 push	 eax
  001f4	e8 00 00 00 00	 call	 __LZCNT_ALT_32
  001f9	83 c4 04	 add	 esp, 4
  001fc	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00201	2b c8		 sub	 ecx, eax
  00203	89 4d cc	 mov	 DWORD PTR _u_bit_count$21[ebp], ecx

; 1715 :                         __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

  00206	8b 55 f8	 mov	 edx, DWORD PTR _nv$[ebp]
  00209	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0020c	89 45 c8	 mov	 DWORD PTR _v_bit_count$20[ebp], eax

; 1716 :                         if (u_bit_count < v_bit_count)

  0020f	8b 4d cc	 mov	 ecx, DWORD PTR _u_bit_count$21[ebp]
  00212	3b 4d c8	 cmp	 ecx, DWORD PTR _v_bit_count$20[ebp]
  00215	73 26		 jae	 SHORT $LN21@PMC_DivRem

; 1717 :                         {
; 1718 :                             // 明らかに u < v である場合
; 1719 : 
; 1720 :                             // q = 0, r = u を返す。
; 1721 :                             if (q != nullptr)

  00217	83 7d 14 00	 cmp	 DWORD PTR _q$[ebp], 0
  0021b	74 10		 je	 SHORT $LN23@PMC_DivRem

; 1722 :                                 *q = 0;

  0021d	8b 55 14	 mov	 edx, DWORD PTR _q$[ebp]
  00220	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
  00226	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
$LN23@PMC_DivRem:

; 1723 :                             return (u);

  0022d	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00230	8b 55 0c	 mov	 edx, DWORD PTR _u$[ebp+4]
  00233	e9 54 03 00 00	 jmp	 $LN36@PMC_DivRem

; 1724 :                         }
; 1725 :                         else

  00238	e9 9c 02 00 00	 jmp	 $LN14@PMC_DivRem
$LN21@PMC_DivRem:

; 1726 :                         {
; 1727 :                             // u のビット長が 33 以上 64 以下であり、かつ、u のビット長が v のビット長以上(v のビット長は多くとも64以下)である場合
; 1728 : 
; 1729 :                             if (nv->UNIT_BIT_COUNT <= sizeof(__UNIT_TYPE) * 8)

  0023d	8b 45 f8	 mov	 eax, DWORD PTR _nv$[ebp]
  00240	83 78 14 20	 cmp	 DWORD PTR [eax+20], 32	; 00000020H
  00244	0f 87 c3 00 00
	00		 ja	 $LN24@PMC_DivRem

; 1730 :                             {
; 1731 :                                 // v が 32bit で表現できる場合
; 1732 : 
; 1733 :                                 if (q != nullptr)

  0024a	83 7d 14 00	 cmp	 DWORD PTR _q$[ebp], 0
  0024e	74 7f		 je	 SHORT $LN26@PMC_DivRem

; 1734 :                                 {
; 1735 :                                     __UNIT_TYPE u_buf[] = { u_lo, u_hi };

  00250	8b 4d e8	 mov	 ecx, DWORD PTR _u_lo$26[ebp]
  00253	89 4d bc	 mov	 DWORD PTR _u_buf$19[ebp], ecx
  00256	8b 55 f0	 mov	 edx, DWORD PTR _u_hi$27[ebp]
  00259	89 55 c0	 mov	 DWORD PTR _u_buf$19[ebp+4], edx

; 1736 :                                     __UNIT_TYPE q_buf[] = { 0, 0, 0 };

  0025c	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _q_buf$18[ebp], 0
  00263	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _q_buf$18[ebp+4], 0
  0026a	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _q_buf$18[ebp+8], 0

; 1737 :                                     __UNIT_TYPE r_buf;
; 1738 : 
; 1739 :                                     DivRem_X_1W(u_buf, countof(u_buf), (__UNIT_TYPE)nv->BLOCK[0], q_buf, &r_buf);

  00271	8d 45 9c	 lea	 eax, DWORD PTR _r_buf$17[ebp]
  00274	50		 push	 eax
  00275	8d 4d a8	 lea	 ecx, DWORD PTR _q_buf$18[ebp]
  00278	51		 push	 ecx
  00279	ba 04 00 00 00	 mov	 edx, 4
  0027e	6b c2 00	 imul	 eax, edx, 0
  00281	8b 4d f8	 mov	 ecx, DWORD PTR _nv$[ebp]
  00284	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00287	8b 04 02	 mov	 eax, DWORD PTR [edx+eax]
  0028a	50		 push	 eax
  0028b	6a 02		 push	 2
  0028d	8d 4d bc	 lea	 ecx, DWORD PTR _u_buf$19[ebp]
  00290	51		 push	 ecx
  00291	e8 00 00 00 00	 call	 ?DivRem_X_1W@Internal@Core@Math@Palmtree@@YAXPAIII00@Z ; Palmtree::Math::Core::Internal::DivRem_X_1W
  00296	83 c4 14	 add	 esp, 20			; 00000014H

; 1740 : 
; 1741 :                                     *q = _FROMWORDTODWORD((_UINT32_T)q_buf[1], (_UINT32_T)q_buf[0]);

  00299	ba 04 00 00 00	 mov	 edx, 4
  0029e	6b c2 00	 imul	 eax, edx, 0
  002a1	8b 4c 05 a8	 mov	 ecx, DWORD PTR _q_buf$18[ebp+eax]
  002a5	51		 push	 ecx
  002a6	ba 04 00 00 00	 mov	 edx, 4
  002ab	c1 e2 00	 shl	 edx, 0
  002ae	8b 44 15 a8	 mov	 eax, DWORD PTR _q_buf$18[ebp+edx]
  002b2	50		 push	 eax
  002b3	e8 00 00 00 00	 call	 __FROMWORDTODWORD
  002b8	83 c4 08	 add	 esp, 8
  002bb	8b 4d 14	 mov	 ecx, DWORD PTR _q$[ebp]
  002be	89 01		 mov	 DWORD PTR [ecx], eax
  002c0	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 1742 :                                     return (r_buf);

  002c3	33 d2		 xor	 edx, edx
  002c5	8b 45 9c	 mov	 eax, DWORD PTR _r_buf$17[ebp]
  002c8	e9 bf 02 00 00	 jmp	 $LN36@PMC_DivRem

; 1743 :                                 }
; 1744 :                                 else

  002cd	eb 39		 jmp	 SHORT $LN27@PMC_DivRem
$LN26@PMC_DivRem:

; 1745 :                                 {
; 1746 :                                     __UNIT_TYPE u_buf[] = { u_lo, u_hi };

  002cf	8b 55 e8	 mov	 edx, DWORD PTR _u_lo$26[ebp]
  002d2	89 55 8c	 mov	 DWORD PTR _u_buf$16[ebp], edx
  002d5	8b 45 f0	 mov	 eax, DWORD PTR _u_hi$27[ebp]
  002d8	89 45 90	 mov	 DWORD PTR _u_buf$16[ebp+4], eax

; 1747 :                                     __UNIT_TYPE r_buf = Rem_X_1W(u_buf, countof(u_buf), (__UNIT_TYPE)nv->BLOCK[0]);

  002db	b9 04 00 00 00	 mov	 ecx, 4
  002e0	6b d1 00	 imul	 edx, ecx, 0
  002e3	8b 45 f8	 mov	 eax, DWORD PTR _nv$[ebp]
  002e6	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  002e9	8b 14 11	 mov	 edx, DWORD PTR [ecx+edx]
  002ec	52		 push	 edx
  002ed	6a 02		 push	 2
  002ef	8d 45 8c	 lea	 eax, DWORD PTR _u_buf$16[ebp]
  002f2	50		 push	 eax
  002f3	e8 00 00 00 00	 call	 ?Rem_X_1W@Internal@Core@Math@Palmtree@@YAIPAIII@Z ; Palmtree::Math::Core::Internal::Rem_X_1W
  002f8	83 c4 0c	 add	 esp, 12			; 0000000cH
  002fb	89 45 84	 mov	 DWORD PTR _r_buf$15[ebp], eax

; 1748 :                                     return (r_buf);

  002fe	33 d2		 xor	 edx, edx
  00300	8b 45 84	 mov	 eax, DWORD PTR _r_buf$15[ebp]
  00303	e9 84 02 00 00	 jmp	 $LN36@PMC_DivRem
$LN27@PMC_DivRem:

; 1749 :                                 }
; 1750 :                             }
; 1751 :                             else

  00308	e9 cc 01 00 00	 jmp	 $LN14@PMC_DivRem
$LN24@PMC_DivRem:

; 1752 :                             {
; 1753 :                                 // v が 32bit では表現できない場合
; 1754 : 
; 1755 :                                 // この場合、2 ワード / 2 ワード の除算となるため、_DIVREM_UNIT 単発では計算できない。
; 1756 :                                 if (q != nullptr)

  0030d	83 7d 14 00	 cmp	 DWORD PTR _q$[ebp], 0
  00311	0f 84 0d 01 00
	00		 je	 $LN28@PMC_DivRem

; 1757 :                                 {
; 1758 :                                     __UNIT_TYPE u_buf[] = { u_lo, u_hi };

  00317	8b 4d e8	 mov	 ecx, DWORD PTR _u_lo$26[ebp]
  0031a	89 8d 78 ff ff
	ff		 mov	 DWORD PTR _u_buf$14[ebp], ecx
  00320	8b 55 f0	 mov	 edx, DWORD PTR _u_hi$27[ebp]
  00323	89 95 7c ff ff
	ff		 mov	 DWORD PTR _u_buf$14[ebp+4], edx

; 1759 :                                     __UNIT_TYPE q_buf[] = { 0, 0, 0 };// 演算結果を格納するためには u のビット数 - v のビット数 + 1 ビットだけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

  00329	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _q_buf$13[ebp], 0
  00333	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _q_buf$13[ebp+4], 0
  0033d	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _q_buf$13[ebp+8], 0

; 1760 :                                     __UNIT_TYPE r_buf[] = { 0, 0, 0 }; // 演算結果を格納するためには v と同じ大きさだけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

  00347	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _r_buf$12[ebp], 0
  00351	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _r_buf$12[ebp+4], 0
  0035b	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _r_buf$12[ebp+8], 0

; 1761 :                                     __UNIT_TYPE work_v_buf[] = { 0, 0 };

  00365	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _work_v_buf$11[ebp], 0
  0036f	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _work_v_buf$11[ebp+4], 0

; 1762 :                                     (*fp_DivRem_X_X)(u_buf, countof(u_buf), nv->BLOCK, nv->UNIT_WORD_COUNT, work_v_buf, q_buf, r_buf);

  00379	a1 00 00 00 00	 mov	 eax, DWORD PTR ?fp_DivRem_X_X@Internal@Core@Math@Palmtree@@3P6AXPAII0I000@ZA
  0037e	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv191[ebp], eax
  00384	8b f4		 mov	 esi, esp
  00386	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR _r_buf$12[ebp]
  0038c	51		 push	 ecx
  0038d	8d 95 64 ff ff
	ff		 lea	 edx, DWORD PTR _q_buf$13[ebp]
  00393	52		 push	 edx
  00394	8d 85 40 ff ff
	ff		 lea	 eax, DWORD PTR _work_v_buf$11[ebp]
  0039a	50		 push	 eax
  0039b	8b 4d f8	 mov	 ecx, DWORD PTR _nv$[ebp]
  0039e	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  003a1	52		 push	 edx
  003a2	8b 45 f8	 mov	 eax, DWORD PTR _nv$[ebp]
  003a5	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  003a8	51		 push	 ecx
  003a9	6a 02		 push	 2
  003ab	8d 95 78 ff ff
	ff		 lea	 edx, DWORD PTR _u_buf$14[ebp]
  003b1	52		 push	 edx
  003b2	ff 95 a4 fe ff
	ff		 call	 DWORD PTR tv191[ebp]
  003b8	83 c4 1c	 add	 esp, 28			; 0000001cH
  003bb	3b f4		 cmp	 esi, esp
  003bd	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1763 :                                     *q = _FROMWORDTODWORD((_UINT32_T)q_buf[1], (_UINT32_T)q_buf[0]);

  003c2	b8 04 00 00 00	 mov	 eax, 4
  003c7	6b c8 00	 imul	 ecx, eax, 0
  003ca	8b 94 0d 64 ff
	ff ff		 mov	 edx, DWORD PTR _q_buf$13[ebp+ecx]
  003d1	52		 push	 edx
  003d2	b8 04 00 00 00	 mov	 eax, 4
  003d7	c1 e0 00	 shl	 eax, 0
  003da	8b 8c 05 64 ff
	ff ff		 mov	 ecx, DWORD PTR _q_buf$13[ebp+eax]
  003e1	51		 push	 ecx
  003e2	e8 00 00 00 00	 call	 __FROMWORDTODWORD
  003e7	83 c4 08	 add	 esp, 8
  003ea	8b 4d 14	 mov	 ecx, DWORD PTR _q$[ebp]
  003ed	89 01		 mov	 DWORD PTR [ecx], eax
  003ef	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 1764 :                                     return (_FROMWORDTODWORD((_UINT32_T)r_buf[1], (_UINT32_T)r_buf[0]));

  003f2	ba 04 00 00 00	 mov	 edx, 4
  003f7	6b c2 00	 imul	 eax, edx, 0
  003fa	8b 8c 05 50 ff
	ff ff		 mov	 ecx, DWORD PTR _r_buf$12[ebp+eax]
  00401	51		 push	 ecx
  00402	ba 04 00 00 00	 mov	 edx, 4
  00407	c1 e2 00	 shl	 edx, 0
  0040a	8b 84 15 50 ff
	ff ff		 mov	 eax, DWORD PTR _r_buf$12[ebp+edx]
  00411	50		 push	 eax
  00412	e8 00 00 00 00	 call	 __FROMWORDTODWORD
  00417	83 c4 08	 add	 esp, 8
  0041a	e9 6d 01 00 00	 jmp	 $LN36@PMC_DivRem

; 1765 :                                 }
; 1766 :                                 else

  0041f	e9 b5 00 00 00	 jmp	 $LN14@PMC_DivRem
$LN28@PMC_DivRem:

; 1767 :                                 {
; 1768 :                                     __UNIT_TYPE u_buf[] = { u_lo, u_hi };

  00424	8b 4d e8	 mov	 ecx, DWORD PTR _u_lo$26[ebp]
  00427	89 8d 30 ff ff
	ff		 mov	 DWORD PTR _u_buf$10[ebp], ecx
  0042d	8b 55 f0	 mov	 edx, DWORD PTR _u_hi$27[ebp]
  00430	89 95 34 ff ff
	ff		 mov	 DWORD PTR _u_buf$10[ebp+4], edx

; 1769 :                                     __UNIT_TYPE r_buf[] = { 0, 0, 0 }; // 演算結果を格納するためには v と同じ大きさだけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

  00436	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _r_buf$9[ebp], 0
  00440	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _r_buf$9[ebp+4], 0
  0044a	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _r_buf$9[ebp+8], 0

; 1770 :                                     __UNIT_TYPE work_v_buf[] = { 0, 0 };

  00454	c7 85 0c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _work_v_buf$8[ebp], 0
  0045e	c7 85 10 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _work_v_buf$8[ebp+4], 0

; 1771 :                                     (*fp_DivRem_X_X)(u_buf, countof(u_buf), nv->BLOCK, nv->UNIT_WORD_COUNT, work_v_buf, nullptr, r_buf);

  00468	a1 00 00 00 00	 mov	 eax, DWORD PTR ?fp_DivRem_X_X@Internal@Core@Math@Palmtree@@3P6AXPAII0I000@ZA
  0046d	89 85 a0 fe ff
	ff		 mov	 DWORD PTR tv248[ebp], eax
  00473	8b f4		 mov	 esi, esp
  00475	8d 8d 1c ff ff
	ff		 lea	 ecx, DWORD PTR _r_buf$9[ebp]
  0047b	51		 push	 ecx
  0047c	6a 00		 push	 0
  0047e	8d 95 0c ff ff
	ff		 lea	 edx, DWORD PTR _work_v_buf$8[ebp]
  00484	52		 push	 edx
  00485	8b 45 f8	 mov	 eax, DWORD PTR _nv$[ebp]
  00488	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0048b	51		 push	 ecx
  0048c	8b 55 f8	 mov	 edx, DWORD PTR _nv$[ebp]
  0048f	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00492	50		 push	 eax
  00493	6a 02		 push	 2
  00495	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _u_buf$10[ebp]
  0049b	51		 push	 ecx
  0049c	ff 95 a0 fe ff
	ff		 call	 DWORD PTR tv248[ebp]
  004a2	83 c4 1c	 add	 esp, 28			; 0000001cH
  004a5	3b f4		 cmp	 esi, esp
  004a7	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1772 :                                     return (_FROMWORDTODWORD((_UINT32_T)r_buf[1], (_UINT32_T)r_buf[0]));

  004ac	ba 04 00 00 00	 mov	 edx, 4
  004b1	6b c2 00	 imul	 eax, edx, 0
  004b4	8b 8c 05 1c ff
	ff ff		 mov	 ecx, DWORD PTR _r_buf$9[ebp+eax]
  004bb	51		 push	 ecx
  004bc	ba 04 00 00 00	 mov	 edx, 4
  004c1	c1 e2 00	 shl	 edx, 0
  004c4	8b 84 15 1c ff
	ff ff		 mov	 eax, DWORD PTR _r_buf$9[ebp+edx]
  004cb	50		 push	 eax
  004cc	e8 00 00 00 00	 call	 __FROMWORDTODWORD
  004d1	83 c4 08	 add	 esp, 8
  004d4	e9 b3 00 00 00	 jmp	 $LN36@PMC_DivRem
$LN14@PMC_DivRem:

; 1773 :                                 }
; 1774 :                             }
; 1775 :                         }
; 1776 :                     }
; 1777 :                 }
; 1778 :                 else

  004d9	e9 ae 00 00 00	 jmp	 $LN36@PMC_DivRem
$LN11@PMC_DivRem:

; 1779 :                 {
; 1780 :                     // _UINT64_T が 1 ワードで表現できる場合
; 1781 : 
; 1782 :                     // x と y の商・剰余を計算する
; 1783 :                     __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)u);

  004de	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  004e1	51		 push	 ecx
  004e2	e8 00 00 00 00	 call	 __LZCNT_ALT_UNIT
  004e7	83 c4 04	 add	 esp, 4
  004ea	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  004ef	2b d0		 sub	 edx, eax
  004f1	89 95 04 ff ff
	ff		 mov	 DWORD PTR _u_bit_count$7[ebp], edx

; 1784 :                     __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

  004f7	8b 45 f8	 mov	 eax, DWORD PTR _nv$[ebp]
  004fa	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  004fd	89 8d 00 ff ff
	ff		 mov	 DWORD PTR _v_bit_count$6[ebp], ecx

; 1785 :                     if (u_bit_count < v_bit_count)

  00503	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _u_bit_count$7[ebp]
  00509	3b 95 00 ff ff
	ff		 cmp	 edx, DWORD PTR _v_bit_count$6[ebp]
  0050f	73 20		 jae	 SHORT $LN30@PMC_DivRem

; 1786 :                     {
; 1787 :                         // 明らかに u < v である場合
; 1788 : 
; 1789 :                         // q = 0, r = u を返す。
; 1790 :                         if (q != nullptr)

  00511	83 7d 14 00	 cmp	 DWORD PTR _q$[ebp], 0
  00515	74 10		 je	 SHORT $LN32@PMC_DivRem

; 1791 :                             *q = 0;

  00517	8b 45 14	 mov	 eax, DWORD PTR _q$[ebp]
  0051a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00520	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN32@PMC_DivRem:

; 1792 :                         return (u);

  00527	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  0052a	8b 55 0c	 mov	 edx, DWORD PTR _u$[ebp+4]
  0052d	eb 5d		 jmp	 SHORT $LN36@PMC_DivRem

; 1793 :                     }
; 1794 :                     else

  0052f	eb 5b		 jmp	 SHORT $LN36@PMC_DivRem
$LN30@PMC_DivRem:

; 1795 :                     {
; 1796 :                         // u のビット数が v のビット数以上である場合
; 1797 : 
; 1798 :                         // u は 1 ワードで表現できるので、v も 1 ワードで表現できる。
; 1799 :                         __UNIT_TYPE temp_r;
; 1800 :                         __UNIT_TYPE temp_q = _DIVREM_UNIT(0, (__UNIT_TYPE)u, (__UNIT_TYPE)nv->BLOCK[0], &temp_r);

  00531	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _temp_r$5[ebp]
  00537	51		 push	 ecx
  00538	ba 04 00 00 00	 mov	 edx, 4
  0053d	6b c2 00	 imul	 eax, edx, 0
  00540	8b 4d f8	 mov	 ecx, DWORD PTR _nv$[ebp]
  00543	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00546	8b 04 02	 mov	 eax, DWORD PTR [edx+eax]
  00549	50		 push	 eax
  0054a	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  0054d	51		 push	 ecx
  0054e	6a 00		 push	 0
  00550	e8 00 00 00 00	 call	 __DIVREM_UNIT
  00555	83 c4 10	 add	 esp, 16			; 00000010H
  00558	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _temp_q$4[ebp], eax

; 1801 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1802 :                         if (sizeof(temp_r) == sizeof(_UINT64_T))

  0055e	33 d2		 xor	 edx, edx
  00560	74 07		 je	 SHORT $LN33@PMC_DivRem

; 1803 :                             IncrementDIV64Counter();

  00562	e8 00 00 00 00	 call	 ?IncrementDIV64Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementDIV64Counter

; 1804 :                         else

  00567	eb 05		 jmp	 SHORT $LN34@PMC_DivRem
$LN33@PMC_DivRem:

; 1805 :                             IncrementDIV32Counter();

  00569	e8 00 00 00 00	 call	 ?IncrementDIV32Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementDIV32Counter
$LN34@PMC_DivRem:

; 1806 : #endif
; 1807 :                         if (q != nullptr)

  0056e	83 7d 14 00	 cmp	 DWORD PTR _q$[ebp], 0
  00572	74 10		 je	 SHORT $LN35@PMC_DivRem

; 1808 :                             *q = temp_q;

  00574	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _temp_q$4[ebp]
  0057a	33 c9		 xor	 ecx, ecx
  0057c	8b 55 14	 mov	 edx, DWORD PTR _q$[ebp]
  0057f	89 02		 mov	 DWORD PTR [edx], eax
  00581	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$LN35@PMC_DivRem:

; 1809 :                         return (temp_r);

  00584	33 d2		 xor	 edx, edx
  00586	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _temp_r$5[ebp]
$LN36@PMC_DivRem:

; 1810 :                     }
; 1811 :                 }
; 1812 : 
; 1813 :             }
; 1814 :         }
; 1815 :     }

  0058c	52		 push	 edx
  0058d	8b cd		 mov	 ecx, ebp
  0058f	50		 push	 eax
  00590	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN52@PMC_DivRem
  00596	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0059b	58		 pop	 eax
  0059c	5a		 pop	 edx
  0059d	5f		 pop	 edi
  0059e	5e		 pop	 esi
  0059f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  005a2	33 cd		 xor	 ecx, ebp
  005a4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  005a9	81 c4 60 01 00
	00		 add	 esp, 352		; 00000160H
  005af	3b ec		 cmp	 ebp, esp
  005b1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  005b6	8b e5		 mov	 esp, ebp
  005b8	5d		 pop	 ebp
  005b9	c2 10 00	 ret	 16			; 00000010H
$LN52@PMC_DivRem:
  005bc	0e 00 00 00	 DD	 14			; 0000000eH
  005c0	00 00 00 00	 DD	 $LN51@PMC_DivRem
$LN51@PMC_DivRem:
  005c4	f0 ff ff ff	 DD	 -16			; fffffff0H
  005c8	04 00 00 00	 DD	 4
  005cc	00 00 00 00	 DD	 $LN37@PMC_DivRem
  005d0	d8 ff ff ff	 DD	 -40			; ffffffd8H
  005d4	04 00 00 00	 DD	 4
  005d8	00 00 00 00	 DD	 $LN38@PMC_DivRem
  005dc	bc ff ff ff	 DD	 -68			; ffffffbcH
  005e0	08 00 00 00	 DD	 8
  005e4	00 00 00 00	 DD	 $LN39@PMC_DivRem
  005e8	a8 ff ff ff	 DD	 -88			; ffffffa8H
  005ec	0c 00 00 00	 DD	 12			; 0000000cH
  005f0	00 00 00 00	 DD	 $LN40@PMC_DivRem
  005f4	9c ff ff ff	 DD	 -100			; ffffff9cH
  005f8	04 00 00 00	 DD	 4
  005fc	00 00 00 00	 DD	 $LN41@PMC_DivRem
  00600	8c ff ff ff	 DD	 -116			; ffffff8cH
  00604	08 00 00 00	 DD	 8
  00608	00 00 00 00	 DD	 $LN42@PMC_DivRem
  0060c	78 ff ff ff	 DD	 -136			; ffffff78H
  00610	08 00 00 00	 DD	 8
  00614	00 00 00 00	 DD	 $LN43@PMC_DivRem
  00618	64 ff ff ff	 DD	 -156			; ffffff64H
  0061c	0c 00 00 00	 DD	 12			; 0000000cH
  00620	00 00 00 00	 DD	 $LN44@PMC_DivRem
  00624	50 ff ff ff	 DD	 -176			; ffffff50H
  00628	0c 00 00 00	 DD	 12			; 0000000cH
  0062c	00 00 00 00	 DD	 $LN45@PMC_DivRem
  00630	40 ff ff ff	 DD	 -192			; ffffff40H
  00634	08 00 00 00	 DD	 8
  00638	00 00 00 00	 DD	 $LN46@PMC_DivRem
  0063c	30 ff ff ff	 DD	 -208			; ffffff30H
  00640	08 00 00 00	 DD	 8
  00644	00 00 00 00	 DD	 $LN47@PMC_DivRem
  00648	1c ff ff ff	 DD	 -228			; ffffff1cH
  0064c	0c 00 00 00	 DD	 12			; 0000000cH
  00650	00 00 00 00	 DD	 $LN48@PMC_DivRem
  00654	0c ff ff ff	 DD	 -244			; ffffff0cH
  00658	08 00 00 00	 DD	 8
  0065c	00 00 00 00	 DD	 $LN49@PMC_DivRem
  00660	f8 fe ff ff	 DD	 -264			; fffffef8H
  00664	04 00 00 00	 DD	 4
  00668	00 00 00 00	 DD	 $LN50@PMC_DivRem
$LN50@PMC_DivRem:
  0066c	74		 DB	 116			; 00000074H
  0066d	65		 DB	 101			; 00000065H
  0066e	6d		 DB	 109			; 0000006dH
  0066f	70		 DB	 112			; 00000070H
  00670	5f		 DB	 95			; 0000005fH
  00671	72		 DB	 114			; 00000072H
  00672	00		 DB	 0
$LN49@PMC_DivRem:
  00673	77		 DB	 119			; 00000077H
  00674	6f		 DB	 111			; 0000006fH
  00675	72		 DB	 114			; 00000072H
  00676	6b		 DB	 107			; 0000006bH
  00677	5f		 DB	 95			; 0000005fH
  00678	76		 DB	 118			; 00000076H
  00679	5f		 DB	 95			; 0000005fH
  0067a	62		 DB	 98			; 00000062H
  0067b	75		 DB	 117			; 00000075H
  0067c	66		 DB	 102			; 00000066H
  0067d	00		 DB	 0
$LN48@PMC_DivRem:
  0067e	72		 DB	 114			; 00000072H
  0067f	5f		 DB	 95			; 0000005fH
  00680	62		 DB	 98			; 00000062H
  00681	75		 DB	 117			; 00000075H
  00682	66		 DB	 102			; 00000066H
  00683	00		 DB	 0
$LN47@PMC_DivRem:
  00684	75		 DB	 117			; 00000075H
  00685	5f		 DB	 95			; 0000005fH
  00686	62		 DB	 98			; 00000062H
  00687	75		 DB	 117			; 00000075H
  00688	66		 DB	 102			; 00000066H
  00689	00		 DB	 0
$LN46@PMC_DivRem:
  0068a	77		 DB	 119			; 00000077H
  0068b	6f		 DB	 111			; 0000006fH
  0068c	72		 DB	 114			; 00000072H
  0068d	6b		 DB	 107			; 0000006bH
  0068e	5f		 DB	 95			; 0000005fH
  0068f	76		 DB	 118			; 00000076H
  00690	5f		 DB	 95			; 0000005fH
  00691	62		 DB	 98			; 00000062H
  00692	75		 DB	 117			; 00000075H
  00693	66		 DB	 102			; 00000066H
  00694	00		 DB	 0
$LN45@PMC_DivRem:
  00695	72		 DB	 114			; 00000072H
  00696	5f		 DB	 95			; 0000005fH
  00697	62		 DB	 98			; 00000062H
  00698	75		 DB	 117			; 00000075H
  00699	66		 DB	 102			; 00000066H
  0069a	00		 DB	 0
$LN44@PMC_DivRem:
  0069b	71		 DB	 113			; 00000071H
  0069c	5f		 DB	 95			; 0000005fH
  0069d	62		 DB	 98			; 00000062H
  0069e	75		 DB	 117			; 00000075H
  0069f	66		 DB	 102			; 00000066H
  006a0	00		 DB	 0
$LN43@PMC_DivRem:
  006a1	75		 DB	 117			; 00000075H
  006a2	5f		 DB	 95			; 0000005fH
  006a3	62		 DB	 98			; 00000062H
  006a4	75		 DB	 117			; 00000075H
  006a5	66		 DB	 102			; 00000066H
  006a6	00		 DB	 0
$LN42@PMC_DivRem:
  006a7	75		 DB	 117			; 00000075H
  006a8	5f		 DB	 95			; 0000005fH
  006a9	62		 DB	 98			; 00000062H
  006aa	75		 DB	 117			; 00000075H
  006ab	66		 DB	 102			; 00000066H
  006ac	00		 DB	 0
$LN41@PMC_DivRem:
  006ad	72		 DB	 114			; 00000072H
  006ae	5f		 DB	 95			; 0000005fH
  006af	62		 DB	 98			; 00000062H
  006b0	75		 DB	 117			; 00000075H
  006b1	66		 DB	 102			; 00000066H
  006b2	00		 DB	 0
$LN40@PMC_DivRem:
  006b3	71		 DB	 113			; 00000071H
  006b4	5f		 DB	 95			; 0000005fH
  006b5	62		 DB	 98			; 00000062H
  006b6	75		 DB	 117			; 00000075H
  006b7	66		 DB	 102			; 00000066H
  006b8	00		 DB	 0
$LN39@PMC_DivRem:
  006b9	75		 DB	 117			; 00000075H
  006ba	5f		 DB	 95			; 0000005fH
  006bb	62		 DB	 98			; 00000062H
  006bc	75		 DB	 117			; 00000075H
  006bd	66		 DB	 102			; 00000066H
  006be	00		 DB	 0
$LN38@PMC_DivRem:
  006bf	74		 DB	 116			; 00000074H
  006c0	65		 DB	 101			; 00000065H
  006c1	6d		 DB	 109			; 0000006dH
  006c2	70		 DB	 112			; 00000070H
  006c3	5f		 DB	 95			; 0000005fH
  006c4	72		 DB	 114			; 00000072H
  006c5	00		 DB	 0
$LN37@PMC_DivRem:
  006c6	75		 DB	 117			; 00000075H
  006c7	5f		 DB	 95			; 0000005fH
  006c8	68		 DB	 104			; 00000068H
  006c9	69		 DB	 105			; 00000069H
  006ca	00		 DB	 0
?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YG_K_KPAU__tag_PMC_HANDLE_UINT@1234@PA_K@Z ENDP ; Palmtree::Math::Core::Internal::PMC_DivRem_L_X
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
_TEXT	SEGMENT
$T1 = -100						; size = 24
$T2 = -76						; size = 24
$T3 = -52						; size = 24
_temp_q$4 = -28						; size = 4
_temp_r$5 = -20						; size = 4
_v_bit_count$6 = -12					; size = 4
_u_bit_count$7 = -8					; size = 4
_nv$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_q$ = 16						; size = 4
?PMC_DivRem_I_X@Internal@Core@Math@Palmtree@@YGIIPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z PROC ; Palmtree::Math::Core::Internal::PMC_DivRem_I_X

; 1444 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	57		 push	 edi
  00007	8d 7d 9c	 lea	 edi, DWORD PTR [ebp-100]
  0000a	b9 19 00 00 00	 mov	 ecx, 25			; 00000019H
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET __E17217E9_pmc_divrem@cpp
  0001b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1445 :         if (sizeof(__UNIT_TYPE) < sizeof(u))

  00020	33 c0		 xor	 eax, eax
  00022	74 20		 je	 SHORT $LN2@PMC_DivRem

; 1446 :         {
; 1447 :             // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 1448 :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_divrem.cpp;PMC_DivRem_I_X;1");

  00024	68 00 00 00 00	 push	 OFFSET $SG118418
  00029	68 00 00 00 00	 push	 OFFSET $SG118419
  0002e	8d 4d cc	 lea	 ecx, DWORD PTR $T3[ebp]
  00031	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00036	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0003b	8d 4d cc	 lea	 ecx, DWORD PTR $T3[ebp]
  0003e	51		 push	 ecx
  0003f	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@PMC_DivRem:

; 1449 :         }
; 1450 :         if (v == nullptr)

  00044	83 7d 0c 00	 cmp	 DWORD PTR _v$[ebp], 0
  00048	75 20		 jne	 SHORT $LN3@PMC_DivRem

; 1451 :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"v");

  0004a	68 00 00 00 00	 push	 OFFSET $SG118426
  0004f	68 00 00 00 00	 push	 OFFSET $SG118427
  00054	8d 4d b4	 lea	 ecx, DWORD PTR $T2[ebp]
  00057	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0005c	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  00061	8d 55 b4	 lea	 edx, DWORD PTR $T2[ebp]
  00064	52		 push	 edx
  00065	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@PMC_DivRem:

; 1452 :         NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

  0006a	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  0006d	89 45 fc	 mov	 DWORD PTR _nv$[ebp], eax

; 1453 :         CheckNumber(nv);

  00070	8b 4d fc	 mov	 ecx, DWORD PTR _nv$[ebp]
  00073	51		 push	 ecx
  00074	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  00079	83 c4 04	 add	 esp, 4

; 1454 :         if (nv->IS_ZERO)

  0007c	8b 55 fc	 mov	 edx, DWORD PTR _nv$[ebp]
  0007f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00082	83 e0 01	 and	 eax, 1
  00085	74 1b		 je	 SHORT $LN4@PMC_DivRem

; 1455 :         {
; 1456 :             // v が 0 である場合
; 1457 : 
; 1458 :             // 0 による除算はエラーで返す
; 1459 :             throw DivisionByZeroException(L"0による除算が行われようとしました。");

  00087	68 00 00 00 00	 push	 OFFSET $SG118434
  0008c	8d 4d 9c	 lea	 ecx, DWORD PTR $T1[ebp]
  0008f	e8 00 00 00 00	 call	 ??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException
  00094	68 00 00 00 00	 push	 OFFSET __TI2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@
  00099	8d 4d 9c	 lea	 ecx, DWORD PTR $T1[ebp]
  0009c	51		 push	 ecx
  0009d	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@PMC_DivRem:

; 1460 :         }
; 1461 :         if (u == 0)

  000a2	83 7d 08 00	 cmp	 DWORD PTR _u$[ebp], 0
  000a6	75 1b		 jne	 SHORT $LN5@PMC_DivRem

; 1462 :         {
; 1463 :             // u が 0 である場合
; 1464 : 
; 1465 :             // q = 0, r = 0 を返す
; 1466 :             if (q != nullptr)

  000a8	83 7d 10 00	 cmp	 DWORD PTR _q$[ebp], 0
  000ac	74 09		 je	 SHORT $LN7@PMC_DivRem

; 1467 :                 *q = 0;

  000ae	8b 55 10	 mov	 edx, DWORD PTR _q$[ebp]
  000b1	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
$LN7@PMC_DivRem:

; 1468 :             return (0);

  000b7	33 c0		 xor	 eax, eax
  000b9	e9 b1 00 00 00	 jmp	 $LN17@PMC_DivRem

; 1469 :         }
; 1470 :         else

  000be	e9 ac 00 00 00	 jmp	 $LN17@PMC_DivRem
$LN5@PMC_DivRem:

; 1471 :         {
; 1472 :             // u が 0 ではない場合
; 1473 : 
; 1474 :             if (nv->IS_ONE)

  000c3	8b 45 fc	 mov	 eax, DWORD PTR _nv$[ebp]
  000c6	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c9	d1 e9		 shr	 ecx, 1
  000cb	83 e1 01	 and	 ecx, 1
  000ce	74 1a		 je	 SHORT $LN8@PMC_DivRem

; 1475 :             {
; 1476 :                 // v が 1 である場合
; 1477 : 
; 1478 :                 // q = u, r = 0 を返す
; 1479 :                 if (q != nullptr)

  000d0	83 7d 10 00	 cmp	 DWORD PTR _q$[ebp], 0
  000d4	74 08		 je	 SHORT $LN10@PMC_DivRem

; 1480 :                     *q = u;

  000d6	8b 55 10	 mov	 edx, DWORD PTR _q$[ebp]
  000d9	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  000dc	89 02		 mov	 DWORD PTR [edx], eax
$LN10@PMC_DivRem:

; 1481 :                 return (0);

  000de	33 c0		 xor	 eax, eax
  000e0	e9 8a 00 00 00	 jmp	 $LN17@PMC_DivRem

; 1482 :             }
; 1483 :             else

  000e5	e9 85 00 00 00	 jmp	 $LN17@PMC_DivRem
$LN8@PMC_DivRem:

; 1484 :             {
; 1485 :                 // u と v がともに 0 ではない場合
; 1486 : 
; 1487 :                 // x と y の商・剰余を計算する
; 1488 :                 __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_32(u);

  000ea	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  000ed	51		 push	 ecx
  000ee	e8 00 00 00 00	 call	 __LZCNT_ALT_32
  000f3	83 c4 04	 add	 esp, 4
  000f6	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  000fb	2b d0		 sub	 edx, eax
  000fd	89 55 f8	 mov	 DWORD PTR _u_bit_count$7[ebp], edx

; 1489 :                 __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

  00100	8b 45 fc	 mov	 eax, DWORD PTR _nv$[ebp]
  00103	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00106	89 4d f4	 mov	 DWORD PTR _v_bit_count$6[ebp], ecx

; 1490 :                 if (u_bit_count < v_bit_count)

  00109	8b 55 f8	 mov	 edx, DWORD PTR _u_bit_count$7[ebp]
  0010c	3b 55 f4	 cmp	 edx, DWORD PTR _v_bit_count$6[ebp]
  0010f	73 16		 jae	 SHORT $LN11@PMC_DivRem

; 1491 :                 {
; 1492 :                     // 明らかに u < v である場合
; 1493 : 
; 1494 :                     // q = 0, r = u を返す。
; 1495 :                     if (q != nullptr)

  00111	83 7d 10 00	 cmp	 DWORD PTR _q$[ebp], 0
  00115	74 09		 je	 SHORT $LN13@PMC_DivRem

; 1496 :                         *q = 0;

  00117	8b 45 10	 mov	 eax, DWORD PTR _q$[ebp]
  0011a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN13@PMC_DivRem:

; 1497 :                     return (u);

  00120	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00123	eb 4a		 jmp	 SHORT $LN17@PMC_DivRem

; 1498 :                 }
; 1499 :                 else

  00125	eb 48		 jmp	 SHORT $LN17@PMC_DivRem
$LN11@PMC_DivRem:

; 1500 :                 {
; 1501 :                     // u のビット数が v のビット数以上である場合
; 1502 : 
; 1503 :                     // u は 1 ワードで表現できるので、v も 1 ワードで表現できる。
; 1504 :                     __UNIT_TYPE temp_r;
; 1505 :                     __UNIT_TYPE temp_q = _DIVREM_UNIT(0, u, (__UNIT_TYPE)nv->BLOCK[0], &temp_r);

  00127	8d 4d ec	 lea	 ecx, DWORD PTR _temp_r$5[ebp]
  0012a	51		 push	 ecx
  0012b	ba 04 00 00 00	 mov	 edx, 4
  00130	6b c2 00	 imul	 eax, edx, 0
  00133	8b 4d fc	 mov	 ecx, DWORD PTR _nv$[ebp]
  00136	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00139	8b 04 02	 mov	 eax, DWORD PTR [edx+eax]
  0013c	50		 push	 eax
  0013d	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  00140	51		 push	 ecx
  00141	6a 00		 push	 0
  00143	e8 00 00 00 00	 call	 __DIVREM_UNIT
  00148	83 c4 10	 add	 esp, 16			; 00000010H
  0014b	89 45 e4	 mov	 DWORD PTR _temp_q$4[ebp], eax

; 1506 :                     if (q != nullptr)

  0014e	83 7d 10 00	 cmp	 DWORD PTR _q$[ebp], 0
  00152	74 08		 je	 SHORT $LN14@PMC_DivRem

; 1507 :                         *q = (_UINT32_T)temp_q;

  00154	8b 55 10	 mov	 edx, DWORD PTR _q$[ebp]
  00157	8b 45 e4	 mov	 eax, DWORD PTR _temp_q$4[ebp]
  0015a	89 02		 mov	 DWORD PTR [edx], eax
$LN14@PMC_DivRem:

; 1508 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1509 :                     if (sizeof(u) == sizeof(_UINT64_T))

  0015c	33 c9		 xor	 ecx, ecx
  0015e	74 07		 je	 SHORT $LN15@PMC_DivRem

; 1510 :                         IncrementDIV64Counter();

  00160	e8 00 00 00 00	 call	 ?IncrementDIV64Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementDIV64Counter

; 1511 :                     else

  00165	eb 05		 jmp	 SHORT $LN16@PMC_DivRem
$LN15@PMC_DivRem:

; 1512 :                         IncrementDIV32Counter();

  00167	e8 00 00 00 00	 call	 ?IncrementDIV32Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementDIV32Counter
$LN16@PMC_DivRem:

; 1513 : #endif
; 1514 :                     return ((_UINT32_T)temp_r);

  0016c	8b 45 ec	 mov	 eax, DWORD PTR _temp_r$5[ebp]
$LN17@PMC_DivRem:

; 1515 :                 }
; 1516 :             }
; 1517 :         }
; 1518 :     }

  0016f	52		 push	 edx
  00170	8b cd		 mov	 ecx, ebp
  00172	50		 push	 eax
  00173	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN20@PMC_DivRem
  00179	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0017e	58		 pop	 eax
  0017f	5a		 pop	 edx
  00180	5f		 pop	 edi
  00181	83 c4 64	 add	 esp, 100		; 00000064H
  00184	3b ec		 cmp	 ebp, esp
  00186	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0018b	8b e5		 mov	 esp, ebp
  0018d	5d		 pop	 ebp
  0018e	c2 0c 00	 ret	 12			; 0000000cH
  00191	0f 1f 00	 npad	 3
$LN20@PMC_DivRem:
  00194	01 00 00 00	 DD	 1
  00198	00 00 00 00	 DD	 $LN19@PMC_DivRem
$LN19@PMC_DivRem:
  0019c	ec ff ff ff	 DD	 -20			; ffffffecH
  001a0	04 00 00 00	 DD	 4
  001a4	00 00 00 00	 DD	 $LN18@PMC_DivRem
$LN18@PMC_DivRem:
  001a8	74		 DB	 116			; 00000074H
  001a9	65		 DB	 101			; 00000065H
  001aa	6d		 DB	 109			; 0000006dH
  001ab	70		 DB	 112			; 00000070H
  001ac	5f		 DB	 95			; 0000005fH
  001ad	72		 DB	 114			; 00000072H
  001ae	00		 DB	 0
?PMC_DivRem_I_X@Internal@Core@Math@Palmtree@@YGIIPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z ENDP ; Palmtree::Math::Core::Internal::PMC_DivRem_I_X
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
_TEXT	SEGMENT
tv72 = -4						; size = 4
_feature$ = 8						; size = 4
?Initialize_DivRem@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z PROC ; Palmtree::Math::Core::Internal::Initialize_DivRem

; 2235 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET __E17217E9_pmc_divrem@cpp
  00010	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 2236 :         fp_DivRem_X_X = feature->PROCESSOR_FEATURE_ADX && feature->PROCESSOR_FEATURE_BMI2 ? DivRem_X_X_using_ADX_MULX : DivRem_X_X_using_ADC_MUL;

  00015	8b 45 08	 mov	 eax, DWORD PTR _feature$[ebp]
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	d1 e9		 shr	 ecx, 1
  0001c	83 e1 01	 and	 ecx, 1
  0001f	74 16		 je	 SHORT $LN3@Initialize
  00021	8b 55 08	 mov	 edx, DWORD PTR _feature$[ebp]
  00024	8b 02		 mov	 eax, DWORD PTR [edx]
  00026	c1 e8 03	 shr	 eax, 3
  00029	83 e0 01	 and	 eax, 1
  0002c	74 09		 je	 SHORT $LN3@Initialize
  0002e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], OFFSET ?DivRem_X_X_using_ADX_MULX@Internal@Core@Math@Palmtree@@YAXPAII0I000@Z ; Palmtree::Math::Core::Internal::DivRem_X_X_using_ADX_MULX
  00035	eb 07		 jmp	 SHORT $LN4@Initialize
$LN3@Initialize:
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], OFFSET ?DivRem_X_X_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAXPAII0I000@Z ; Palmtree::Math::Core::Internal::DivRem_X_X_using_ADC_MUL
$LN4@Initialize:
  0003e	8b 4d fc	 mov	 ecx, DWORD PTR tv72[ebp]
  00041	89 0d 00 00 00
	00		 mov	 DWORD PTR ?fp_DivRem_X_X@Internal@Core@Math@Palmtree@@3P6AXPAII0I000@ZA, ecx

; 2237 :         return (PMC_STATUS_OK);

  00047	33 c0		 xor	 eax, eax

; 2238 :     }

  00049	83 c4 04	 add	 esp, 4
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
?Initialize_DivRem@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ENDP ; Palmtree::Math::Core::Internal::Initialize_DivRem
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
_TEXT	SEGMENT
tv146 = -48						; size = 4
_r$1 = -40						; size = 4
_q$2 = -32						; size = 4
_r$3 = -24						; size = 4
_v_count_2$ = -16					; size = 4
_v_buf_2$ = -12						; size = 4
_u_count_2$ = -8					; size = 4
_u_buf_2$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v_buf$ = 16						; size = 4
_v_count$ = 20						; size = 4
_work_v_buf$ = 24					; size = 4
_q_buf$ = 28						; size = 4
_r_buf$ = 32						; size = 4
?DivRem_X_X@Internal@Core@Math@Palmtree@@YAXPAII0I000@Z PROC ; Palmtree::Math::Core::Internal::DivRem_X_X

; 352  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0000b	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __E17217E9_pmc_divrem@cpp
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 353  :         __UNIT_TYPE* u_buf_2 = u_buf;

  00021	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  00024	89 45 fc	 mov	 DWORD PTR _u_buf_2$[ebp], eax

; 354  :         __UNIT_TYPE u_count_2 = u_count;

  00027	8b 4d 0c	 mov	 ecx, DWORD PTR _u_count$[ebp]
  0002a	89 4d f8	 mov	 DWORD PTR _u_count_2$[ebp], ecx

; 355  :         __UNIT_TYPE* v_buf_2 = v_buf;

  0002d	8b 55 10	 mov	 edx, DWORD PTR _v_buf$[ebp]
  00030	89 55 f4	 mov	 DWORD PTR _v_buf_2$[ebp], edx

; 356  :         __UNIT_TYPE v_count_2 = v_count;

  00033	8b 45 14	 mov	 eax, DWORD PTR _v_count$[ebp]
  00036	89 45 f0	 mov	 DWORD PTR _v_count_2$[ebp], eax

; 357  :         if (v_count_2 == 1)

  00039	83 7d f0 01	 cmp	 DWORD PTR _v_count_2$[ebp], 1
  0003d	0f 85 de 00 00
	00		 jne	 $LN2@DivRem_X_X

; 358  :         {
; 359  :             if (u_count_2 == 1)

  00043	83 7d f8 01	 cmp	 DWORD PTR _u_count_2$[ebp], 1
  00047	75 69		 jne	 SHORT $LN4@DivRem_X_X

; 360  :             {
; 361  :                 __UNIT_TYPE r;
; 362  :                 __UNIT_TYPE q = _DIVREM_UNIT(0, u_buf_2[0], v_buf_2[0], &r);

  00049	8d 4d e8	 lea	 ecx, DWORD PTR _r$3[ebp]
  0004c	51		 push	 ecx
  0004d	ba 04 00 00 00	 mov	 edx, 4
  00052	6b c2 00	 imul	 eax, edx, 0
  00055	8b 4d f4	 mov	 ecx, DWORD PTR _v_buf_2$[ebp]
  00058	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0005b	52		 push	 edx
  0005c	b8 04 00 00 00	 mov	 eax, 4
  00061	6b c8 00	 imul	 ecx, eax, 0
  00064	8b 55 fc	 mov	 edx, DWORD PTR _u_buf_2$[ebp]
  00067	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0006a	50		 push	 eax
  0006b	6a 00		 push	 0
  0006d	e8 00 00 00 00	 call	 __DIVREM_UNIT
  00072	83 c4 10	 add	 esp, 16			; 00000010H
  00075	89 45 e0	 mov	 DWORD PTR _q$2[ebp], eax

; 363  :                 if (q_buf != nullptr)

  00078	83 7d 1c 00	 cmp	 DWORD PTR _q_buf$[ebp], 0
  0007c	74 11		 je	 SHORT $LN6@DivRem_X_X

; 364  :                     q_buf[0] = q;

  0007e	b9 04 00 00 00	 mov	 ecx, 4
  00083	6b d1 00	 imul	 edx, ecx, 0
  00086	8b 45 1c	 mov	 eax, DWORD PTR _q_buf$[ebp]
  00089	8b 4d e0	 mov	 ecx, DWORD PTR _q$2[ebp]
  0008c	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx
$LN6@DivRem_X_X:

; 365  :                 r_buf[0] = r;

  0008f	ba 04 00 00 00	 mov	 edx, 4
  00094	6b c2 00	 imul	 eax, edx, 0
  00097	8b 4d 20	 mov	 ecx, DWORD PTR _r_buf$[ebp]
  0009a	8b 55 e8	 mov	 edx, DWORD PTR _r$3[ebp]
  0009d	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 366  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 367  :                 if (sizeof(r) == sizeof(_UINT64_T))

  000a0	33 c0		 xor	 eax, eax
  000a2	74 07		 je	 SHORT $LN7@DivRem_X_X

; 368  :                     IncrementDIV64Counter();

  000a4	e8 00 00 00 00	 call	 ?IncrementDIV64Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementDIV64Counter

; 369  :                 else

  000a9	eb 05		 jmp	 SHORT $LN8@DivRem_X_X
$LN7@DivRem_X_X:

; 370  :                     IncrementDIV32Counter();

  000ab	e8 00 00 00 00	 call	 ?IncrementDIV32Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementDIV32Counter
$LN8@DivRem_X_X:

; 371  : #endif
; 372  :             }
; 373  :             else

  000b0	eb 6d		 jmp	 SHORT $LN5@DivRem_X_X
$LN4@DivRem_X_X:

; 374  :             {
; 375  :                 if (q_buf != nullptr)

  000b2	83 7d 1c 00	 cmp	 DWORD PTR _q_buf$[ebp], 0
  000b6	74 3a		 je	 SHORT $LN9@DivRem_X_X

; 376  :                 {
; 377  :                     __UNIT_TYPE r;
; 378  :                     DivRem_X_1W(u_buf_2, u_count_2, v_buf_2[0], q_buf, &r);

  000b8	8d 4d d8	 lea	 ecx, DWORD PTR _r$1[ebp]
  000bb	51		 push	 ecx
  000bc	8b 55 1c	 mov	 edx, DWORD PTR _q_buf$[ebp]
  000bf	52		 push	 edx
  000c0	b8 04 00 00 00	 mov	 eax, 4
  000c5	6b c8 00	 imul	 ecx, eax, 0
  000c8	8b 55 f4	 mov	 edx, DWORD PTR _v_buf_2$[ebp]
  000cb	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  000ce	50		 push	 eax
  000cf	8b 4d f8	 mov	 ecx, DWORD PTR _u_count_2$[ebp]
  000d2	51		 push	 ecx
  000d3	8b 55 fc	 mov	 edx, DWORD PTR _u_buf_2$[ebp]
  000d6	52		 push	 edx
  000d7	e8 00 00 00 00	 call	 ?DivRem_X_1W@Internal@Core@Math@Palmtree@@YAXPAIII00@Z ; Palmtree::Math::Core::Internal::DivRem_X_1W
  000dc	83 c4 14	 add	 esp, 20			; 00000014H

; 379  :                     r_buf[0] = r;

  000df	b8 04 00 00 00	 mov	 eax, 4
  000e4	6b c8 00	 imul	 ecx, eax, 0
  000e7	8b 55 20	 mov	 edx, DWORD PTR _r_buf$[ebp]
  000ea	8b 45 d8	 mov	 eax, DWORD PTR _r$1[ebp]
  000ed	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 380  :                 }
; 381  :                 else

  000f0	eb 2d		 jmp	 SHORT $LN5@DivRem_X_X
$LN9@DivRem_X_X:

; 382  :                     r_buf[0] = Rem_X_1W(u_buf_2, u_count_2, v_buf_2[0]);

  000f2	b9 04 00 00 00	 mov	 ecx, 4
  000f7	6b d1 00	 imul	 edx, ecx, 0
  000fa	8b 45 f4	 mov	 eax, DWORD PTR _v_buf_2$[ebp]
  000fd	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00100	51		 push	 ecx
  00101	8b 55 f8	 mov	 edx, DWORD PTR _u_count_2$[ebp]
  00104	52		 push	 edx
  00105	8b 45 fc	 mov	 eax, DWORD PTR _u_buf_2$[ebp]
  00108	50		 push	 eax
  00109	e8 00 00 00 00	 call	 ?Rem_X_1W@Internal@Core@Math@Palmtree@@YAIPAIII@Z ; Palmtree::Math::Core::Internal::Rem_X_1W
  0010e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00111	b9 04 00 00 00	 mov	 ecx, 4
  00116	6b d1 00	 imul	 edx, ecx, 0
  00119	8b 4d 20	 mov	 ecx, DWORD PTR _r_buf$[ebp]
  0011c	89 04 11	 mov	 DWORD PTR [ecx+edx], eax
$LN5@DivRem_X_X:

; 383  :             }
; 384  :         }
; 385  :         else

  0011f	eb 69		 jmp	 SHORT $LN1@DivRem_X_X
$LN2@DivRem_X_X:

; 386  :         {
; 387  :             if (u_count_2 < v_count_2)

  00121	8b 55 f8	 mov	 edx, DWORD PTR _u_count_2$[ebp]
  00124	3b 55 f0	 cmp	 edx, DWORD PTR _v_count_2$[ebp]
  00127	73 2e		 jae	 SHORT $LN11@DivRem_X_X

; 388  :             {
; 389  :                 if (q_buf != nullptr)

  00129	83 7d 1c 00	 cmp	 DWORD PTR _q_buf$[ebp], 0
  0012d	74 12		 je	 SHORT $LN13@DivRem_X_X

; 390  :                     q_buf[0] = 0;

  0012f	b8 04 00 00 00	 mov	 eax, 4
  00134	6b c8 00	 imul	 ecx, eax, 0
  00137	8b 55 1c	 mov	 edx, DWORD PTR _q_buf$[ebp]
  0013a	c7 04 0a 00 00
	00 00		 mov	 DWORD PTR [edx+ecx], 0
$LN13@DivRem_X_X:

; 391  :                 _COPY_MEMORY_UNIT(r_buf, u_buf, u_count);

  00141	8b 45 0c	 mov	 eax, DWORD PTR _u_count$[ebp]
  00144	50		 push	 eax
  00145	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  00148	51		 push	 ecx
  00149	8b 55 20	 mov	 edx, DWORD PTR _r_buf$[ebp]
  0014c	52		 push	 edx
  0014d	e8 00 00 00 00	 call	 __COPY_MEMORY_UNIT
  00152	83 c4 0c	 add	 esp, 12			; 0000000cH

; 392  :             }
; 393  :             else

  00155	eb 33		 jmp	 SHORT $LN1@DivRem_X_X
$LN11@DivRem_X_X:

; 394  :                 (*fp_DivRem_X_X)(u_buf_2, u_count_2, v_buf_2, v_count_2, work_v_buf, q_buf, r_buf);

  00157	a1 00 00 00 00	 mov	 eax, DWORD PTR ?fp_DivRem_X_X@Internal@Core@Math@Palmtree@@3P6AXPAII0I000@ZA
  0015c	89 45 d0	 mov	 DWORD PTR tv146[ebp], eax
  0015f	8b f4		 mov	 esi, esp
  00161	8b 4d 20	 mov	 ecx, DWORD PTR _r_buf$[ebp]
  00164	51		 push	 ecx
  00165	8b 55 1c	 mov	 edx, DWORD PTR _q_buf$[ebp]
  00168	52		 push	 edx
  00169	8b 45 18	 mov	 eax, DWORD PTR _work_v_buf$[ebp]
  0016c	50		 push	 eax
  0016d	8b 4d f0	 mov	 ecx, DWORD PTR _v_count_2$[ebp]
  00170	51		 push	 ecx
  00171	8b 55 f4	 mov	 edx, DWORD PTR _v_buf_2$[ebp]
  00174	52		 push	 edx
  00175	8b 45 f8	 mov	 eax, DWORD PTR _u_count_2$[ebp]
  00178	50		 push	 eax
  00179	8b 4d fc	 mov	 ecx, DWORD PTR _u_buf_2$[ebp]
  0017c	51		 push	 ecx
  0017d	ff 55 d0	 call	 DWORD PTR tv146[ebp]
  00180	83 c4 1c	 add	 esp, 28			; 0000001cH
  00183	3b f4		 cmp	 esi, esp
  00185	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@DivRem_X_X:

; 395  :         }
; 396  :     }

  0018a	52		 push	 edx
  0018b	8b cd		 mov	 ecx, ebp
  0018d	50		 push	 eax
  0018e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN18@DivRem_X_X
  00194	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00199	58		 pop	 eax
  0019a	5a		 pop	 edx
  0019b	5f		 pop	 edi
  0019c	5e		 pop	 esi
  0019d	83 c4 30	 add	 esp, 48			; 00000030H
  001a0	3b ec		 cmp	 ebp, esp
  001a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a7	8b e5		 mov	 esp, ebp
  001a9	5d		 pop	 ebp
  001aa	c3		 ret	 0
  001ab	90		 npad	 1
$LN18@DivRem_X_X:
  001ac	02 00 00 00	 DD	 2
  001b0	00 00 00 00	 DD	 $LN17@DivRem_X_X
$LN17@DivRem_X_X:
  001b4	e8 ff ff ff	 DD	 -24			; ffffffe8H
  001b8	04 00 00 00	 DD	 4
  001bc	00 00 00 00	 DD	 $LN15@DivRem_X_X
  001c0	d8 ff ff ff	 DD	 -40			; ffffffd8H
  001c4	04 00 00 00	 DD	 4
  001c8	00 00 00 00	 DD	 $LN16@DivRem_X_X
$LN16@DivRem_X_X:
  001cc	72		 DB	 114			; 00000072H
  001cd	00		 DB	 0
$LN15@DivRem_X_X:
  001ce	72		 DB	 114			; 00000072H
  001cf	00		 DB	 0
?DivRem_X_X@Internal@Core@Math@Palmtree@@YAXPAII0I000@Z ENDP ; Palmtree::Math::Core::Internal::DivRem_X_X
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
_TEXT	SEGMENT
_count$ = -28						; size = 4
_r$ = -24						; size = 4
_dummy_q$ = -16						; size = 4
_u_count$ = -8						; size = 4
_up$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_v$ = 16						; size = 4
?Rem_X_1W@Internal@Core@Math@Palmtree@@YAIPAIII@Z PROC	; Palmtree::Math::Core::Internal::Rem_X_1W

; 399  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000e	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00011	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00014	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00017	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001a	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001d	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __E17217E9_pmc_divrem@cpp
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 400  :         // u の最上位ワードは 0 でありうることに注意すること。
; 401  :         __UNIT_TYPE* up = u_buf + u_buf_len - 1;

  0002a	8b 45 0c	 mov	 eax, DWORD PTR _u_buf_len$[ebp]
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  00030	8d 54 81 fc	 lea	 edx, DWORD PTR [ecx+eax*4-4]
  00034	89 55 fc	 mov	 DWORD PTR _up$[ebp], edx

; 402  :         __UNIT_TYPE u_count = u_buf_len;

  00037	8b 45 0c	 mov	 eax, DWORD PTR _u_buf_len$[ebp]
  0003a	89 45 f8	 mov	 DWORD PTR _u_count$[ebp], eax

; 403  :         __UNIT_TYPE dummy_q;
; 404  :         __UNIT_TYPE r = 0;

  0003d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _r$[ebp], 0

; 405  :         __UNIT_TYPE count = u_count >> 5;

  00044	8b 4d f8	 mov	 ecx, DWORD PTR _u_count$[ebp]
  00047	c1 e9 05	 shr	 ecx, 5
  0004a	89 4d e4	 mov	 DWORD PTR _count$[ebp], ecx
$LN2@Rem_X_1W:

; 406  :         while (count != 0)

  0004d	83 7d e4 00	 cmp	 DWORD PTR _count$[ebp], 0
  00051	0f 84 f4 04 00
	00		 je	 $LN3@Rem_X_1W

; 407  :         {
; 408  :             r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &dummy_q);

  00057	8d 55 f0	 lea	 edx, DWORD PTR _dummy_q$[ebp]
  0005a	52		 push	 edx
  0005b	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0005e	50		 push	 eax
  0005f	b9 04 00 00 00	 mov	 ecx, 4
  00064	6b d1 00	 imul	 edx, ecx, 0
  00067	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  0006a	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0006d	51		 push	 ecx
  0006e	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  00071	52		 push	 edx
  00072	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00077	83 c4 10	 add	 esp, 16			; 00000010H
  0007a	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 409  :             r = _DIVREM_SINGLE_UNIT(r, up[-1], v, &dummy_q);

  0007d	8d 45 f0	 lea	 eax, DWORD PTR _dummy_q$[ebp]
  00080	50		 push	 eax
  00081	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00084	51		 push	 ecx
  00085	ba 04 00 00 00	 mov	 edx, 4
  0008a	6b c2 ff	 imul	 eax, edx, -1
  0008d	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  00090	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00093	52		 push	 edx
  00094	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  00097	50		 push	 eax
  00098	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  0009d	83 c4 10	 add	 esp, 16			; 00000010H
  000a0	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 410  :             r = _DIVREM_SINGLE_UNIT(r, up[-2], v, &dummy_q);

  000a3	8d 4d f0	 lea	 ecx, DWORD PTR _dummy_q$[ebp]
  000a6	51		 push	 ecx
  000a7	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  000aa	52		 push	 edx
  000ab	b8 04 00 00 00	 mov	 eax, 4
  000b0	6b c8 fe	 imul	 ecx, eax, -2
  000b3	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  000b6	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  000b9	50		 push	 eax
  000ba	8b 4d e8	 mov	 ecx, DWORD PTR _r$[ebp]
  000bd	51		 push	 ecx
  000be	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  000c3	83 c4 10	 add	 esp, 16			; 00000010H
  000c6	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 411  :             r = _DIVREM_SINGLE_UNIT(r, up[-3], v, &dummy_q);

  000c9	8d 55 f0	 lea	 edx, DWORD PTR _dummy_q$[ebp]
  000cc	52		 push	 edx
  000cd	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  000d0	50		 push	 eax
  000d1	b9 04 00 00 00	 mov	 ecx, 4
  000d6	6b d1 fd	 imul	 edx, ecx, -3
  000d9	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  000dc	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  000df	51		 push	 ecx
  000e0	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  000e3	52		 push	 edx
  000e4	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  000e9	83 c4 10	 add	 esp, 16			; 00000010H
  000ec	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 412  :             r = _DIVREM_SINGLE_UNIT(r, up[-4], v, &dummy_q);

  000ef	8d 45 f0	 lea	 eax, DWORD PTR _dummy_q$[ebp]
  000f2	50		 push	 eax
  000f3	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  000f6	51		 push	 ecx
  000f7	ba 04 00 00 00	 mov	 edx, 4
  000fc	6b c2 fc	 imul	 eax, edx, -4
  000ff	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  00102	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00105	52		 push	 edx
  00106	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  00109	50		 push	 eax
  0010a	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  0010f	83 c4 10	 add	 esp, 16			; 00000010H
  00112	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 413  :             r = _DIVREM_SINGLE_UNIT(r, up[-5], v, &dummy_q);

  00115	8d 4d f0	 lea	 ecx, DWORD PTR _dummy_q$[ebp]
  00118	51		 push	 ecx
  00119	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  0011c	52		 push	 edx
  0011d	b8 04 00 00 00	 mov	 eax, 4
  00122	6b c8 fb	 imul	 ecx, eax, -5
  00125	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  00128	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0012b	50		 push	 eax
  0012c	8b 4d e8	 mov	 ecx, DWORD PTR _r$[ebp]
  0012f	51		 push	 ecx
  00130	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00135	83 c4 10	 add	 esp, 16			; 00000010H
  00138	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 414  :             r = _DIVREM_SINGLE_UNIT(r, up[-6], v, &dummy_q);

  0013b	8d 55 f0	 lea	 edx, DWORD PTR _dummy_q$[ebp]
  0013e	52		 push	 edx
  0013f	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00142	50		 push	 eax
  00143	b9 04 00 00 00	 mov	 ecx, 4
  00148	6b d1 fa	 imul	 edx, ecx, -6
  0014b	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  0014e	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00151	51		 push	 ecx
  00152	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  00155	52		 push	 edx
  00156	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  0015b	83 c4 10	 add	 esp, 16			; 00000010H
  0015e	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 415  :             r = _DIVREM_SINGLE_UNIT(r, up[-7], v, &dummy_q);

  00161	8d 45 f0	 lea	 eax, DWORD PTR _dummy_q$[ebp]
  00164	50		 push	 eax
  00165	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00168	51		 push	 ecx
  00169	ba 04 00 00 00	 mov	 edx, 4
  0016e	6b c2 f9	 imul	 eax, edx, -7
  00171	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  00174	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00177	52		 push	 edx
  00178	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  0017b	50		 push	 eax
  0017c	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00181	83 c4 10	 add	 esp, 16			; 00000010H
  00184	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 416  :             r = _DIVREM_SINGLE_UNIT(r, up[-8], v, &dummy_q);

  00187	8d 4d f0	 lea	 ecx, DWORD PTR _dummy_q$[ebp]
  0018a	51		 push	 ecx
  0018b	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  0018e	52		 push	 edx
  0018f	b8 04 00 00 00	 mov	 eax, 4
  00194	6b c8 f8	 imul	 ecx, eax, -8
  00197	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  0019a	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0019d	50		 push	 eax
  0019e	8b 4d e8	 mov	 ecx, DWORD PTR _r$[ebp]
  001a1	51		 push	 ecx
  001a2	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  001a7	83 c4 10	 add	 esp, 16			; 00000010H
  001aa	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 417  :             r = _DIVREM_SINGLE_UNIT(r, up[-9], v, &dummy_q);

  001ad	8d 55 f0	 lea	 edx, DWORD PTR _dummy_q$[ebp]
  001b0	52		 push	 edx
  001b1	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  001b4	50		 push	 eax
  001b5	b9 04 00 00 00	 mov	 ecx, 4
  001ba	6b d1 f7	 imul	 edx, ecx, -9
  001bd	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  001c0	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  001c3	51		 push	 ecx
  001c4	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  001c7	52		 push	 edx
  001c8	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  001cd	83 c4 10	 add	 esp, 16			; 00000010H
  001d0	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 418  :             r = _DIVREM_SINGLE_UNIT(r, up[-10], v, &dummy_q);

  001d3	8d 45 f0	 lea	 eax, DWORD PTR _dummy_q$[ebp]
  001d6	50		 push	 eax
  001d7	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  001da	51		 push	 ecx
  001db	ba 04 00 00 00	 mov	 edx, 4
  001e0	6b c2 f6	 imul	 eax, edx, -10
  001e3	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  001e6	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  001e9	52		 push	 edx
  001ea	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  001ed	50		 push	 eax
  001ee	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  001f3	83 c4 10	 add	 esp, 16			; 00000010H
  001f6	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 419  :             r = _DIVREM_SINGLE_UNIT(r, up[-11], v, &dummy_q);

  001f9	8d 4d f0	 lea	 ecx, DWORD PTR _dummy_q$[ebp]
  001fc	51		 push	 ecx
  001fd	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00200	52		 push	 edx
  00201	b8 04 00 00 00	 mov	 eax, 4
  00206	6b c8 f5	 imul	 ecx, eax, -11
  00209	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  0020c	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0020f	50		 push	 eax
  00210	8b 4d e8	 mov	 ecx, DWORD PTR _r$[ebp]
  00213	51		 push	 ecx
  00214	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00219	83 c4 10	 add	 esp, 16			; 00000010H
  0021c	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 420  :             r = _DIVREM_SINGLE_UNIT(r, up[-12], v, &dummy_q);

  0021f	8d 55 f0	 lea	 edx, DWORD PTR _dummy_q$[ebp]
  00222	52		 push	 edx
  00223	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00226	50		 push	 eax
  00227	b9 04 00 00 00	 mov	 ecx, 4
  0022c	6b d1 f4	 imul	 edx, ecx, -12
  0022f	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  00232	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00235	51		 push	 ecx
  00236	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  00239	52		 push	 edx
  0023a	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  0023f	83 c4 10	 add	 esp, 16			; 00000010H
  00242	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 421  :             r = _DIVREM_SINGLE_UNIT(r, up[-13], v, &dummy_q);

  00245	8d 45 f0	 lea	 eax, DWORD PTR _dummy_q$[ebp]
  00248	50		 push	 eax
  00249	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  0024c	51		 push	 ecx
  0024d	ba 04 00 00 00	 mov	 edx, 4
  00252	6b c2 f3	 imul	 eax, edx, -13
  00255	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  00258	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0025b	52		 push	 edx
  0025c	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  0025f	50		 push	 eax
  00260	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00265	83 c4 10	 add	 esp, 16			; 00000010H
  00268	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 422  :             r = _DIVREM_SINGLE_UNIT(r, up[-14], v, &dummy_q);

  0026b	8d 4d f0	 lea	 ecx, DWORD PTR _dummy_q$[ebp]
  0026e	51		 push	 ecx
  0026f	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00272	52		 push	 edx
  00273	b8 04 00 00 00	 mov	 eax, 4
  00278	6b c8 f2	 imul	 ecx, eax, -14
  0027b	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  0027e	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00281	50		 push	 eax
  00282	8b 4d e8	 mov	 ecx, DWORD PTR _r$[ebp]
  00285	51		 push	 ecx
  00286	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  0028b	83 c4 10	 add	 esp, 16			; 00000010H
  0028e	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 423  :             r = _DIVREM_SINGLE_UNIT(r, up[-15], v, &dummy_q);

  00291	8d 55 f0	 lea	 edx, DWORD PTR _dummy_q$[ebp]
  00294	52		 push	 edx
  00295	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00298	50		 push	 eax
  00299	b9 04 00 00 00	 mov	 ecx, 4
  0029e	6b d1 f1	 imul	 edx, ecx, -15
  002a1	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  002a4	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  002a7	51		 push	 ecx
  002a8	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  002ab	52		 push	 edx
  002ac	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  002b1	83 c4 10	 add	 esp, 16			; 00000010H
  002b4	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 424  :             r = _DIVREM_SINGLE_UNIT(r, up[-16], v, &dummy_q);

  002b7	8d 45 f0	 lea	 eax, DWORD PTR _dummy_q$[ebp]
  002ba	50		 push	 eax
  002bb	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  002be	51		 push	 ecx
  002bf	ba 04 00 00 00	 mov	 edx, 4
  002c4	6b c2 f0	 imul	 eax, edx, -16
  002c7	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  002ca	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  002cd	52		 push	 edx
  002ce	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  002d1	50		 push	 eax
  002d2	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  002d7	83 c4 10	 add	 esp, 16			; 00000010H
  002da	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 425  :             r = _DIVREM_SINGLE_UNIT(r, up[-17], v, &dummy_q);

  002dd	8d 4d f0	 lea	 ecx, DWORD PTR _dummy_q$[ebp]
  002e0	51		 push	 ecx
  002e1	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  002e4	52		 push	 edx
  002e5	b8 04 00 00 00	 mov	 eax, 4
  002ea	6b c8 ef	 imul	 ecx, eax, -17
  002ed	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  002f0	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  002f3	50		 push	 eax
  002f4	8b 4d e8	 mov	 ecx, DWORD PTR _r$[ebp]
  002f7	51		 push	 ecx
  002f8	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  002fd	83 c4 10	 add	 esp, 16			; 00000010H
  00300	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 426  :             r = _DIVREM_SINGLE_UNIT(r, up[-18], v, &dummy_q);

  00303	8d 55 f0	 lea	 edx, DWORD PTR _dummy_q$[ebp]
  00306	52		 push	 edx
  00307	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0030a	50		 push	 eax
  0030b	b9 04 00 00 00	 mov	 ecx, 4
  00310	6b d1 ee	 imul	 edx, ecx, -18
  00313	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  00316	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00319	51		 push	 ecx
  0031a	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  0031d	52		 push	 edx
  0031e	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00323	83 c4 10	 add	 esp, 16			; 00000010H
  00326	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 427  :             r = _DIVREM_SINGLE_UNIT(r, up[-19], v, &dummy_q);

  00329	8d 45 f0	 lea	 eax, DWORD PTR _dummy_q$[ebp]
  0032c	50		 push	 eax
  0032d	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00330	51		 push	 ecx
  00331	ba 04 00 00 00	 mov	 edx, 4
  00336	6b c2 ed	 imul	 eax, edx, -19
  00339	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  0033c	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0033f	52		 push	 edx
  00340	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  00343	50		 push	 eax
  00344	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00349	83 c4 10	 add	 esp, 16			; 00000010H
  0034c	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 428  :             r = _DIVREM_SINGLE_UNIT(r, up[-20], v, &dummy_q);

  0034f	8d 4d f0	 lea	 ecx, DWORD PTR _dummy_q$[ebp]
  00352	51		 push	 ecx
  00353	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00356	52		 push	 edx
  00357	b8 04 00 00 00	 mov	 eax, 4
  0035c	6b c8 ec	 imul	 ecx, eax, -20
  0035f	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  00362	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00365	50		 push	 eax
  00366	8b 4d e8	 mov	 ecx, DWORD PTR _r$[ebp]
  00369	51		 push	 ecx
  0036a	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  0036f	83 c4 10	 add	 esp, 16			; 00000010H
  00372	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 429  :             r = _DIVREM_SINGLE_UNIT(r, up[-21], v, &dummy_q);

  00375	8d 55 f0	 lea	 edx, DWORD PTR _dummy_q$[ebp]
  00378	52		 push	 edx
  00379	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0037c	50		 push	 eax
  0037d	b9 04 00 00 00	 mov	 ecx, 4
  00382	6b d1 eb	 imul	 edx, ecx, -21
  00385	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  00388	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0038b	51		 push	 ecx
  0038c	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  0038f	52		 push	 edx
  00390	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00395	83 c4 10	 add	 esp, 16			; 00000010H
  00398	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 430  :             r = _DIVREM_SINGLE_UNIT(r, up[-22], v, &dummy_q);

  0039b	8d 45 f0	 lea	 eax, DWORD PTR _dummy_q$[ebp]
  0039e	50		 push	 eax
  0039f	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  003a2	51		 push	 ecx
  003a3	ba 04 00 00 00	 mov	 edx, 4
  003a8	6b c2 ea	 imul	 eax, edx, -22
  003ab	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  003ae	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  003b1	52		 push	 edx
  003b2	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  003b5	50		 push	 eax
  003b6	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  003bb	83 c4 10	 add	 esp, 16			; 00000010H
  003be	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 431  :             r = _DIVREM_SINGLE_UNIT(r, up[-23], v, &dummy_q);

  003c1	8d 4d f0	 lea	 ecx, DWORD PTR _dummy_q$[ebp]
  003c4	51		 push	 ecx
  003c5	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  003c8	52		 push	 edx
  003c9	b8 04 00 00 00	 mov	 eax, 4
  003ce	6b c8 e9	 imul	 ecx, eax, -23
  003d1	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  003d4	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  003d7	50		 push	 eax
  003d8	8b 4d e8	 mov	 ecx, DWORD PTR _r$[ebp]
  003db	51		 push	 ecx
  003dc	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  003e1	83 c4 10	 add	 esp, 16			; 00000010H
  003e4	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 432  :             r = _DIVREM_SINGLE_UNIT(r, up[-24], v, &dummy_q);

  003e7	8d 55 f0	 lea	 edx, DWORD PTR _dummy_q$[ebp]
  003ea	52		 push	 edx
  003eb	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  003ee	50		 push	 eax
  003ef	b9 04 00 00 00	 mov	 ecx, 4
  003f4	6b d1 e8	 imul	 edx, ecx, -24
  003f7	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  003fa	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  003fd	51		 push	 ecx
  003fe	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  00401	52		 push	 edx
  00402	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00407	83 c4 10	 add	 esp, 16			; 00000010H
  0040a	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 433  :             r = _DIVREM_SINGLE_UNIT(r, up[-25], v, &dummy_q);

  0040d	8d 45 f0	 lea	 eax, DWORD PTR _dummy_q$[ebp]
  00410	50		 push	 eax
  00411	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00414	51		 push	 ecx
  00415	ba 04 00 00 00	 mov	 edx, 4
  0041a	6b c2 e7	 imul	 eax, edx, -25
  0041d	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  00420	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00423	52		 push	 edx
  00424	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  00427	50		 push	 eax
  00428	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  0042d	83 c4 10	 add	 esp, 16			; 00000010H
  00430	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 434  :             r = _DIVREM_SINGLE_UNIT(r, up[-26], v, &dummy_q);

  00433	8d 4d f0	 lea	 ecx, DWORD PTR _dummy_q$[ebp]
  00436	51		 push	 ecx
  00437	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  0043a	52		 push	 edx
  0043b	b8 04 00 00 00	 mov	 eax, 4
  00440	6b c8 e6	 imul	 ecx, eax, -26
  00443	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  00446	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00449	50		 push	 eax
  0044a	8b 4d e8	 mov	 ecx, DWORD PTR _r$[ebp]
  0044d	51		 push	 ecx
  0044e	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00453	83 c4 10	 add	 esp, 16			; 00000010H
  00456	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 435  :             r = _DIVREM_SINGLE_UNIT(r, up[-27], v, &dummy_q);

  00459	8d 55 f0	 lea	 edx, DWORD PTR _dummy_q$[ebp]
  0045c	52		 push	 edx
  0045d	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00460	50		 push	 eax
  00461	b9 04 00 00 00	 mov	 ecx, 4
  00466	6b d1 e5	 imul	 edx, ecx, -27
  00469	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  0046c	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0046f	51		 push	 ecx
  00470	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  00473	52		 push	 edx
  00474	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00479	83 c4 10	 add	 esp, 16			; 00000010H
  0047c	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 436  :             r = _DIVREM_SINGLE_UNIT(r, up[-28], v, &dummy_q);

  0047f	8d 45 f0	 lea	 eax, DWORD PTR _dummy_q$[ebp]
  00482	50		 push	 eax
  00483	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00486	51		 push	 ecx
  00487	ba 04 00 00 00	 mov	 edx, 4
  0048c	6b c2 e4	 imul	 eax, edx, -28
  0048f	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  00492	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00495	52		 push	 edx
  00496	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  00499	50		 push	 eax
  0049a	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  0049f	83 c4 10	 add	 esp, 16			; 00000010H
  004a2	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 437  :             r = _DIVREM_SINGLE_UNIT(r, up[-29], v, &dummy_q);

  004a5	8d 4d f0	 lea	 ecx, DWORD PTR _dummy_q$[ebp]
  004a8	51		 push	 ecx
  004a9	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  004ac	52		 push	 edx
  004ad	b8 04 00 00 00	 mov	 eax, 4
  004b2	6b c8 e3	 imul	 ecx, eax, -29
  004b5	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  004b8	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  004bb	50		 push	 eax
  004bc	8b 4d e8	 mov	 ecx, DWORD PTR _r$[ebp]
  004bf	51		 push	 ecx
  004c0	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  004c5	83 c4 10	 add	 esp, 16			; 00000010H
  004c8	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 438  :             r = _DIVREM_SINGLE_UNIT(r, up[-30], v, &dummy_q);

  004cb	8d 55 f0	 lea	 edx, DWORD PTR _dummy_q$[ebp]
  004ce	52		 push	 edx
  004cf	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  004d2	50		 push	 eax
  004d3	b9 04 00 00 00	 mov	 ecx, 4
  004d8	6b d1 e2	 imul	 edx, ecx, -30
  004db	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  004de	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  004e1	51		 push	 ecx
  004e2	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  004e5	52		 push	 edx
  004e6	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  004eb	83 c4 10	 add	 esp, 16			; 00000010H
  004ee	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 439  :             r = _DIVREM_SINGLE_UNIT(r, up[-31], v, &dummy_q);

  004f1	8d 45 f0	 lea	 eax, DWORD PTR _dummy_q$[ebp]
  004f4	50		 push	 eax
  004f5	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  004f8	51		 push	 ecx
  004f9	ba 04 00 00 00	 mov	 edx, 4
  004fe	6b c2 e1	 imul	 eax, edx, -31
  00501	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  00504	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00507	52		 push	 edx
  00508	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  0050b	50		 push	 eax
  0050c	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00511	83 c4 10	 add	 esp, 16			; 00000010H
  00514	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 440  :             up -= 32;

  00517	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  0051a	81 e9 80 00 00
	00		 sub	 ecx, 128		; 00000080H
  00520	89 4d fc	 mov	 DWORD PTR _up$[ebp], ecx

; 441  :             --count;

  00523	8b 55 e4	 mov	 edx, DWORD PTR _count$[ebp]
  00526	83 ea 01	 sub	 edx, 1
  00529	89 55 e4	 mov	 DWORD PTR _count$[ebp], edx

; 442  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 443  :             if (sizeof(r) == sizeof(_UINT64_T))

  0052c	33 c0		 xor	 eax, eax
  0052e	74 0c		 je	 SHORT $LN4@Rem_X_1W

; 444  :                 AddToDIV64Counter(32);

  00530	6a 20		 push	 32			; 00000020H
  00532	e8 00 00 00 00	 call	 ?AddToDIV64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV64Counter
  00537	83 c4 04	 add	 esp, 4

; 445  :             else

  0053a	eb 0a		 jmp	 SHORT $LN5@Rem_X_1W
$LN4@Rem_X_1W:

; 446  :                 AddToDIV32Counter(32);

  0053c	6a 20		 push	 32			; 00000020H
  0053e	e8 00 00 00 00	 call	 ?AddToDIV32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV32Counter
  00543	83 c4 04	 add	 esp, 4
$LN5@Rem_X_1W:

; 447  : #endif
; 448  :         }

  00546	e9 02 fb ff ff	 jmp	 $LN2@Rem_X_1W
$LN3@Rem_X_1W:

; 449  : 
; 450  :         if (u_count & 0x10)

  0054b	8b 4d f8	 mov	 ecx, DWORD PTR _u_count$[ebp]
  0054e	83 e1 10	 and	 ecx, 16			; 00000010H
  00551	0f 84 83 02 00
	00		 je	 $LN6@Rem_X_1W

; 451  :         {
; 452  :             r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &dummy_q);

  00557	8d 55 f0	 lea	 edx, DWORD PTR _dummy_q$[ebp]
  0055a	52		 push	 edx
  0055b	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0055e	50		 push	 eax
  0055f	b9 04 00 00 00	 mov	 ecx, 4
  00564	6b d1 00	 imul	 edx, ecx, 0
  00567	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  0056a	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0056d	51		 push	 ecx
  0056e	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  00571	52		 push	 edx
  00572	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00577	83 c4 10	 add	 esp, 16			; 00000010H
  0057a	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 453  :             r = _DIVREM_SINGLE_UNIT(r, up[-1], v, &dummy_q);

  0057d	8d 45 f0	 lea	 eax, DWORD PTR _dummy_q$[ebp]
  00580	50		 push	 eax
  00581	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00584	51		 push	 ecx
  00585	ba 04 00 00 00	 mov	 edx, 4
  0058a	6b c2 ff	 imul	 eax, edx, -1
  0058d	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  00590	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00593	52		 push	 edx
  00594	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  00597	50		 push	 eax
  00598	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  0059d	83 c4 10	 add	 esp, 16			; 00000010H
  005a0	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 454  :             r = _DIVREM_SINGLE_UNIT(r, up[-2], v, &dummy_q);

  005a3	8d 4d f0	 lea	 ecx, DWORD PTR _dummy_q$[ebp]
  005a6	51		 push	 ecx
  005a7	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  005aa	52		 push	 edx
  005ab	b8 04 00 00 00	 mov	 eax, 4
  005b0	6b c8 fe	 imul	 ecx, eax, -2
  005b3	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  005b6	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  005b9	50		 push	 eax
  005ba	8b 4d e8	 mov	 ecx, DWORD PTR _r$[ebp]
  005bd	51		 push	 ecx
  005be	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  005c3	83 c4 10	 add	 esp, 16			; 00000010H
  005c6	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 455  :             r = _DIVREM_SINGLE_UNIT(r, up[-3], v, &dummy_q);

  005c9	8d 55 f0	 lea	 edx, DWORD PTR _dummy_q$[ebp]
  005cc	52		 push	 edx
  005cd	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  005d0	50		 push	 eax
  005d1	b9 04 00 00 00	 mov	 ecx, 4
  005d6	6b d1 fd	 imul	 edx, ecx, -3
  005d9	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  005dc	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  005df	51		 push	 ecx
  005e0	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  005e3	52		 push	 edx
  005e4	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  005e9	83 c4 10	 add	 esp, 16			; 00000010H
  005ec	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 456  :             r = _DIVREM_SINGLE_UNIT(r, up[-4], v, &dummy_q);

  005ef	8d 45 f0	 lea	 eax, DWORD PTR _dummy_q$[ebp]
  005f2	50		 push	 eax
  005f3	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  005f6	51		 push	 ecx
  005f7	ba 04 00 00 00	 mov	 edx, 4
  005fc	6b c2 fc	 imul	 eax, edx, -4
  005ff	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  00602	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00605	52		 push	 edx
  00606	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  00609	50		 push	 eax
  0060a	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  0060f	83 c4 10	 add	 esp, 16			; 00000010H
  00612	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 457  :             r = _DIVREM_SINGLE_UNIT(r, up[-5], v, &dummy_q);

  00615	8d 4d f0	 lea	 ecx, DWORD PTR _dummy_q$[ebp]
  00618	51		 push	 ecx
  00619	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  0061c	52		 push	 edx
  0061d	b8 04 00 00 00	 mov	 eax, 4
  00622	6b c8 fb	 imul	 ecx, eax, -5
  00625	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  00628	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0062b	50		 push	 eax
  0062c	8b 4d e8	 mov	 ecx, DWORD PTR _r$[ebp]
  0062f	51		 push	 ecx
  00630	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00635	83 c4 10	 add	 esp, 16			; 00000010H
  00638	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 458  :             r = _DIVREM_SINGLE_UNIT(r, up[-6], v, &dummy_q);

  0063b	8d 55 f0	 lea	 edx, DWORD PTR _dummy_q$[ebp]
  0063e	52		 push	 edx
  0063f	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00642	50		 push	 eax
  00643	b9 04 00 00 00	 mov	 ecx, 4
  00648	6b d1 fa	 imul	 edx, ecx, -6
  0064b	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  0064e	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00651	51		 push	 ecx
  00652	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  00655	52		 push	 edx
  00656	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  0065b	83 c4 10	 add	 esp, 16			; 00000010H
  0065e	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 459  :             r = _DIVREM_SINGLE_UNIT(r, up[-7], v, &dummy_q);

  00661	8d 45 f0	 lea	 eax, DWORD PTR _dummy_q$[ebp]
  00664	50		 push	 eax
  00665	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00668	51		 push	 ecx
  00669	ba 04 00 00 00	 mov	 edx, 4
  0066e	6b c2 f9	 imul	 eax, edx, -7
  00671	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  00674	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00677	52		 push	 edx
  00678	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  0067b	50		 push	 eax
  0067c	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00681	83 c4 10	 add	 esp, 16			; 00000010H
  00684	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 460  :             r = _DIVREM_SINGLE_UNIT(r, up[-8], v, &dummy_q);

  00687	8d 4d f0	 lea	 ecx, DWORD PTR _dummy_q$[ebp]
  0068a	51		 push	 ecx
  0068b	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  0068e	52		 push	 edx
  0068f	b8 04 00 00 00	 mov	 eax, 4
  00694	6b c8 f8	 imul	 ecx, eax, -8
  00697	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  0069a	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0069d	50		 push	 eax
  0069e	8b 4d e8	 mov	 ecx, DWORD PTR _r$[ebp]
  006a1	51		 push	 ecx
  006a2	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  006a7	83 c4 10	 add	 esp, 16			; 00000010H
  006aa	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 461  :             r = _DIVREM_SINGLE_UNIT(r, up[-9], v, &dummy_q);

  006ad	8d 55 f0	 lea	 edx, DWORD PTR _dummy_q$[ebp]
  006b0	52		 push	 edx
  006b1	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  006b4	50		 push	 eax
  006b5	b9 04 00 00 00	 mov	 ecx, 4
  006ba	6b d1 f7	 imul	 edx, ecx, -9
  006bd	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  006c0	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  006c3	51		 push	 ecx
  006c4	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  006c7	52		 push	 edx
  006c8	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  006cd	83 c4 10	 add	 esp, 16			; 00000010H
  006d0	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 462  :             r = _DIVREM_SINGLE_UNIT(r, up[-10], v, &dummy_q);

  006d3	8d 45 f0	 lea	 eax, DWORD PTR _dummy_q$[ebp]
  006d6	50		 push	 eax
  006d7	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  006da	51		 push	 ecx
  006db	ba 04 00 00 00	 mov	 edx, 4
  006e0	6b c2 f6	 imul	 eax, edx, -10
  006e3	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  006e6	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  006e9	52		 push	 edx
  006ea	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  006ed	50		 push	 eax
  006ee	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  006f3	83 c4 10	 add	 esp, 16			; 00000010H
  006f6	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 463  :             r = _DIVREM_SINGLE_UNIT(r, up[-11], v, &dummy_q);

  006f9	8d 4d f0	 lea	 ecx, DWORD PTR _dummy_q$[ebp]
  006fc	51		 push	 ecx
  006fd	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00700	52		 push	 edx
  00701	b8 04 00 00 00	 mov	 eax, 4
  00706	6b c8 f5	 imul	 ecx, eax, -11
  00709	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  0070c	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0070f	50		 push	 eax
  00710	8b 4d e8	 mov	 ecx, DWORD PTR _r$[ebp]
  00713	51		 push	 ecx
  00714	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00719	83 c4 10	 add	 esp, 16			; 00000010H
  0071c	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 464  :             r = _DIVREM_SINGLE_UNIT(r, up[-12], v, &dummy_q);

  0071f	8d 55 f0	 lea	 edx, DWORD PTR _dummy_q$[ebp]
  00722	52		 push	 edx
  00723	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00726	50		 push	 eax
  00727	b9 04 00 00 00	 mov	 ecx, 4
  0072c	6b d1 f4	 imul	 edx, ecx, -12
  0072f	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  00732	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00735	51		 push	 ecx
  00736	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  00739	52		 push	 edx
  0073a	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  0073f	83 c4 10	 add	 esp, 16			; 00000010H
  00742	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 465  :             r = _DIVREM_SINGLE_UNIT(r, up[-13], v, &dummy_q);

  00745	8d 45 f0	 lea	 eax, DWORD PTR _dummy_q$[ebp]
  00748	50		 push	 eax
  00749	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  0074c	51		 push	 ecx
  0074d	ba 04 00 00 00	 mov	 edx, 4
  00752	6b c2 f3	 imul	 eax, edx, -13
  00755	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  00758	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0075b	52		 push	 edx
  0075c	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  0075f	50		 push	 eax
  00760	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00765	83 c4 10	 add	 esp, 16			; 00000010H
  00768	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 466  :             r = _DIVREM_SINGLE_UNIT(r, up[-14], v, &dummy_q);

  0076b	8d 4d f0	 lea	 ecx, DWORD PTR _dummy_q$[ebp]
  0076e	51		 push	 ecx
  0076f	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00772	52		 push	 edx
  00773	b8 04 00 00 00	 mov	 eax, 4
  00778	6b c8 f2	 imul	 ecx, eax, -14
  0077b	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  0077e	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00781	50		 push	 eax
  00782	8b 4d e8	 mov	 ecx, DWORD PTR _r$[ebp]
  00785	51		 push	 ecx
  00786	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  0078b	83 c4 10	 add	 esp, 16			; 00000010H
  0078e	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 467  :             r = _DIVREM_SINGLE_UNIT(r, up[-15], v, &dummy_q);

  00791	8d 55 f0	 lea	 edx, DWORD PTR _dummy_q$[ebp]
  00794	52		 push	 edx
  00795	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00798	50		 push	 eax
  00799	b9 04 00 00 00	 mov	 ecx, 4
  0079e	6b d1 f1	 imul	 edx, ecx, -15
  007a1	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  007a4	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  007a7	51		 push	 ecx
  007a8	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  007ab	52		 push	 edx
  007ac	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  007b1	83 c4 10	 add	 esp, 16			; 00000010H
  007b4	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 468  :             up -= 16;

  007b7	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  007ba	83 e8 40	 sub	 eax, 64			; 00000040H
  007bd	89 45 fc	 mov	 DWORD PTR _up$[ebp], eax

; 469  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 470  :             if (sizeof(r) == sizeof(_UINT64_T))

  007c0	33 c9		 xor	 ecx, ecx
  007c2	74 0c		 je	 SHORT $LN7@Rem_X_1W

; 471  :                 AddToDIV64Counter(16);

  007c4	6a 10		 push	 16			; 00000010H
  007c6	e8 00 00 00 00	 call	 ?AddToDIV64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV64Counter
  007cb	83 c4 04	 add	 esp, 4

; 472  :             else

  007ce	eb 0a		 jmp	 SHORT $LN6@Rem_X_1W
$LN7@Rem_X_1W:

; 473  :                 AddToDIV32Counter(16);

  007d0	6a 10		 push	 16			; 00000010H
  007d2	e8 00 00 00 00	 call	 ?AddToDIV32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV32Counter
  007d7	83 c4 04	 add	 esp, 4
$LN6@Rem_X_1W:

; 474  : #endif
; 475  :         }
; 476  : 
; 477  :         if (u_count & 0x8)

  007da	8b 55 f8	 mov	 edx, DWORD PTR _u_count$[ebp]
  007dd	83 e2 08	 and	 edx, 8
  007e0	0f 84 53 01 00
	00		 je	 $LN9@Rem_X_1W

; 478  :         {
; 479  :             r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &dummy_q);

  007e6	8d 45 f0	 lea	 eax, DWORD PTR _dummy_q$[ebp]
  007e9	50		 push	 eax
  007ea	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  007ed	51		 push	 ecx
  007ee	ba 04 00 00 00	 mov	 edx, 4
  007f3	6b c2 00	 imul	 eax, edx, 0
  007f6	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  007f9	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  007fc	52		 push	 edx
  007fd	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  00800	50		 push	 eax
  00801	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00806	83 c4 10	 add	 esp, 16			; 00000010H
  00809	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 480  :             r = _DIVREM_SINGLE_UNIT(r, up[-1], v, &dummy_q);

  0080c	8d 4d f0	 lea	 ecx, DWORD PTR _dummy_q$[ebp]
  0080f	51		 push	 ecx
  00810	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00813	52		 push	 edx
  00814	b8 04 00 00 00	 mov	 eax, 4
  00819	6b c8 ff	 imul	 ecx, eax, -1
  0081c	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  0081f	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00822	50		 push	 eax
  00823	8b 4d e8	 mov	 ecx, DWORD PTR _r$[ebp]
  00826	51		 push	 ecx
  00827	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  0082c	83 c4 10	 add	 esp, 16			; 00000010H
  0082f	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 481  :             r = _DIVREM_SINGLE_UNIT(r, up[-2], v, &dummy_q);

  00832	8d 55 f0	 lea	 edx, DWORD PTR _dummy_q$[ebp]
  00835	52		 push	 edx
  00836	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00839	50		 push	 eax
  0083a	b9 04 00 00 00	 mov	 ecx, 4
  0083f	6b d1 fe	 imul	 edx, ecx, -2
  00842	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  00845	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00848	51		 push	 ecx
  00849	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  0084c	52		 push	 edx
  0084d	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00852	83 c4 10	 add	 esp, 16			; 00000010H
  00855	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 482  :             r = _DIVREM_SINGLE_UNIT(r, up[-3], v, &dummy_q);

  00858	8d 45 f0	 lea	 eax, DWORD PTR _dummy_q$[ebp]
  0085b	50		 push	 eax
  0085c	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  0085f	51		 push	 ecx
  00860	ba 04 00 00 00	 mov	 edx, 4
  00865	6b c2 fd	 imul	 eax, edx, -3
  00868	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  0086b	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0086e	52		 push	 edx
  0086f	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  00872	50		 push	 eax
  00873	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00878	83 c4 10	 add	 esp, 16			; 00000010H
  0087b	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 483  :             r = _DIVREM_SINGLE_UNIT(r, up[-4], v, &dummy_q);

  0087e	8d 4d f0	 lea	 ecx, DWORD PTR _dummy_q$[ebp]
  00881	51		 push	 ecx
  00882	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00885	52		 push	 edx
  00886	b8 04 00 00 00	 mov	 eax, 4
  0088b	6b c8 fc	 imul	 ecx, eax, -4
  0088e	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  00891	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00894	50		 push	 eax
  00895	8b 4d e8	 mov	 ecx, DWORD PTR _r$[ebp]
  00898	51		 push	 ecx
  00899	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  0089e	83 c4 10	 add	 esp, 16			; 00000010H
  008a1	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 484  :             r = _DIVREM_SINGLE_UNIT(r, up[-5], v, &dummy_q);

  008a4	8d 55 f0	 lea	 edx, DWORD PTR _dummy_q$[ebp]
  008a7	52		 push	 edx
  008a8	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  008ab	50		 push	 eax
  008ac	b9 04 00 00 00	 mov	 ecx, 4
  008b1	6b d1 fb	 imul	 edx, ecx, -5
  008b4	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  008b7	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  008ba	51		 push	 ecx
  008bb	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  008be	52		 push	 edx
  008bf	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  008c4	83 c4 10	 add	 esp, 16			; 00000010H
  008c7	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 485  :             r = _DIVREM_SINGLE_UNIT(r, up[-6], v, &dummy_q);

  008ca	8d 45 f0	 lea	 eax, DWORD PTR _dummy_q$[ebp]
  008cd	50		 push	 eax
  008ce	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  008d1	51		 push	 ecx
  008d2	ba 04 00 00 00	 mov	 edx, 4
  008d7	6b c2 fa	 imul	 eax, edx, -6
  008da	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  008dd	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  008e0	52		 push	 edx
  008e1	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  008e4	50		 push	 eax
  008e5	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  008ea	83 c4 10	 add	 esp, 16			; 00000010H
  008ed	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 486  :             r = _DIVREM_SINGLE_UNIT(r, up[-7], v, &dummy_q);

  008f0	8d 4d f0	 lea	 ecx, DWORD PTR _dummy_q$[ebp]
  008f3	51		 push	 ecx
  008f4	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  008f7	52		 push	 edx
  008f8	b8 04 00 00 00	 mov	 eax, 4
  008fd	6b c8 f9	 imul	 ecx, eax, -7
  00900	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  00903	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00906	50		 push	 eax
  00907	8b 4d e8	 mov	 ecx, DWORD PTR _r$[ebp]
  0090a	51		 push	 ecx
  0090b	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00910	83 c4 10	 add	 esp, 16			; 00000010H
  00913	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 487  :             up -= 8;

  00916	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  00919	83 ea 20	 sub	 edx, 32			; 00000020H
  0091c	89 55 fc	 mov	 DWORD PTR _up$[ebp], edx

; 488  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 489  :             if (sizeof(r) == sizeof(_UINT64_T))

  0091f	33 c0		 xor	 eax, eax
  00921	74 0c		 je	 SHORT $LN10@Rem_X_1W

; 490  :                 AddToDIV64Counter(8);

  00923	6a 08		 push	 8
  00925	e8 00 00 00 00	 call	 ?AddToDIV64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV64Counter
  0092a	83 c4 04	 add	 esp, 4

; 491  :             else

  0092d	eb 0a		 jmp	 SHORT $LN9@Rem_X_1W
$LN10@Rem_X_1W:

; 492  :                 AddToDIV32Counter(8);

  0092f	6a 08		 push	 8
  00931	e8 00 00 00 00	 call	 ?AddToDIV32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV32Counter
  00936	83 c4 04	 add	 esp, 4
$LN9@Rem_X_1W:

; 493  : #endif
; 494  :         }
; 495  : 
; 496  :         if (u_count & 0x4)

  00939	8b 4d f8	 mov	 ecx, DWORD PTR _u_count$[ebp]
  0093c	83 e1 04	 and	 ecx, 4
  0093f	0f 84 bb 00 00
	00		 je	 $LN12@Rem_X_1W

; 497  :         {
; 498  :             r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &dummy_q);

  00945	8d 55 f0	 lea	 edx, DWORD PTR _dummy_q$[ebp]
  00948	52		 push	 edx
  00949	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0094c	50		 push	 eax
  0094d	b9 04 00 00 00	 mov	 ecx, 4
  00952	6b d1 00	 imul	 edx, ecx, 0
  00955	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  00958	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0095b	51		 push	 ecx
  0095c	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  0095f	52		 push	 edx
  00960	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00965	83 c4 10	 add	 esp, 16			; 00000010H
  00968	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 499  :             r = _DIVREM_SINGLE_UNIT(r, up[-1], v, &dummy_q);

  0096b	8d 45 f0	 lea	 eax, DWORD PTR _dummy_q$[ebp]
  0096e	50		 push	 eax
  0096f	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00972	51		 push	 ecx
  00973	ba 04 00 00 00	 mov	 edx, 4
  00978	6b c2 ff	 imul	 eax, edx, -1
  0097b	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  0097e	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00981	52		 push	 edx
  00982	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  00985	50		 push	 eax
  00986	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  0098b	83 c4 10	 add	 esp, 16			; 00000010H
  0098e	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 500  :             r = _DIVREM_SINGLE_UNIT(r, up[-2], v, &dummy_q);

  00991	8d 4d f0	 lea	 ecx, DWORD PTR _dummy_q$[ebp]
  00994	51		 push	 ecx
  00995	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00998	52		 push	 edx
  00999	b8 04 00 00 00	 mov	 eax, 4
  0099e	6b c8 fe	 imul	 ecx, eax, -2
  009a1	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  009a4	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  009a7	50		 push	 eax
  009a8	8b 4d e8	 mov	 ecx, DWORD PTR _r$[ebp]
  009ab	51		 push	 ecx
  009ac	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  009b1	83 c4 10	 add	 esp, 16			; 00000010H
  009b4	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 501  :             r = _DIVREM_SINGLE_UNIT(r, up[-3], v, &dummy_q);

  009b7	8d 55 f0	 lea	 edx, DWORD PTR _dummy_q$[ebp]
  009ba	52		 push	 edx
  009bb	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  009be	50		 push	 eax
  009bf	b9 04 00 00 00	 mov	 ecx, 4
  009c4	6b d1 fd	 imul	 edx, ecx, -3
  009c7	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  009ca	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  009cd	51		 push	 ecx
  009ce	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  009d1	52		 push	 edx
  009d2	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  009d7	83 c4 10	 add	 esp, 16			; 00000010H
  009da	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 502  :             up -= 4;

  009dd	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  009e0	83 e8 10	 sub	 eax, 16			; 00000010H
  009e3	89 45 fc	 mov	 DWORD PTR _up$[ebp], eax

; 503  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 504  :             if (sizeof(r) == sizeof(_UINT64_T))

  009e6	33 c9		 xor	 ecx, ecx
  009e8	74 0c		 je	 SHORT $LN13@Rem_X_1W

; 505  :                 AddToDIV64Counter(4);

  009ea	6a 04		 push	 4
  009ec	e8 00 00 00 00	 call	 ?AddToDIV64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV64Counter
  009f1	83 c4 04	 add	 esp, 4

; 506  :             else

  009f4	eb 0a		 jmp	 SHORT $LN12@Rem_X_1W
$LN13@Rem_X_1W:

; 507  :                 AddToDIV32Counter(4);

  009f6	6a 04		 push	 4
  009f8	e8 00 00 00 00	 call	 ?AddToDIV32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV32Counter
  009fd	83 c4 04	 add	 esp, 4
$LN12@Rem_X_1W:

; 508  : #endif
; 509  :         }
; 510  : 
; 511  :         if (u_count & 0x2)

  00a00	8b 55 f8	 mov	 edx, DWORD PTR _u_count$[ebp]
  00a03	83 e2 02	 and	 edx, 2
  00a06	74 6f		 je	 SHORT $LN15@Rem_X_1W

; 512  :         {
; 513  :             r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &dummy_q);

  00a08	8d 45 f0	 lea	 eax, DWORD PTR _dummy_q$[ebp]
  00a0b	50		 push	 eax
  00a0c	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00a0f	51		 push	 ecx
  00a10	ba 04 00 00 00	 mov	 edx, 4
  00a15	6b c2 00	 imul	 eax, edx, 0
  00a18	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  00a1b	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00a1e	52		 push	 edx
  00a1f	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]
  00a22	50		 push	 eax
  00a23	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00a28	83 c4 10	 add	 esp, 16			; 00000010H
  00a2b	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 514  :             r = _DIVREM_SINGLE_UNIT(r, up[-1], v, &dummy_q);

  00a2e	8d 4d f0	 lea	 ecx, DWORD PTR _dummy_q$[ebp]
  00a31	51		 push	 ecx
  00a32	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00a35	52		 push	 edx
  00a36	b8 04 00 00 00	 mov	 eax, 4
  00a3b	6b c8 ff	 imul	 ecx, eax, -1
  00a3e	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  00a41	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00a44	50		 push	 eax
  00a45	8b 4d e8	 mov	 ecx, DWORD PTR _r$[ebp]
  00a48	51		 push	 ecx
  00a49	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00a4e	83 c4 10	 add	 esp, 16			; 00000010H
  00a51	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 515  :             up -= 2;

  00a54	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  00a57	83 ea 08	 sub	 edx, 8
  00a5a	89 55 fc	 mov	 DWORD PTR _up$[ebp], edx

; 516  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 517  :             if (sizeof(r) == sizeof(_UINT64_T))

  00a5d	33 c0		 xor	 eax, eax
  00a5f	74 0c		 je	 SHORT $LN16@Rem_X_1W

; 518  :                 AddToDIV64Counter(2);

  00a61	6a 02		 push	 2
  00a63	e8 00 00 00 00	 call	 ?AddToDIV64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV64Counter
  00a68	83 c4 04	 add	 esp, 4

; 519  :             else

  00a6b	eb 0a		 jmp	 SHORT $LN15@Rem_X_1W
$LN16@Rem_X_1W:

; 520  :                 AddToDIV32Counter(2);

  00a6d	6a 02		 push	 2
  00a6f	e8 00 00 00 00	 call	 ?AddToDIV32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV32Counter
  00a74	83 c4 04	 add	 esp, 4
$LN15@Rem_X_1W:

; 521  : #endif
; 522  :         }
; 523  : 
; 524  :         if (u_count & 0x1)

  00a77	8b 4d f8	 mov	 ecx, DWORD PTR _u_count$[ebp]
  00a7a	83 e1 01	 and	 ecx, 1
  00a7d	74 3f		 je	 SHORT $LN18@Rem_X_1W

; 525  :         {
; 526  :             r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &dummy_q);

  00a7f	8d 55 f0	 lea	 edx, DWORD PTR _dummy_q$[ebp]
  00a82	52		 push	 edx
  00a83	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00a86	50		 push	 eax
  00a87	b9 04 00 00 00	 mov	 ecx, 4
  00a8c	6b d1 00	 imul	 edx, ecx, 0
  00a8f	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  00a92	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00a95	51		 push	 ecx
  00a96	8b 55 e8	 mov	 edx, DWORD PTR _r$[ebp]
  00a99	52		 push	 edx
  00a9a	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00a9f	83 c4 10	 add	 esp, 16			; 00000010H
  00aa2	89 45 e8	 mov	 DWORD PTR _r$[ebp], eax

; 527  :             up -= 1;

  00aa5	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  00aa8	83 e8 04	 sub	 eax, 4
  00aab	89 45 fc	 mov	 DWORD PTR _up$[ebp], eax

; 528  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 529  :             if (sizeof(r) == sizeof(_UINT64_T))

  00aae	33 c9		 xor	 ecx, ecx
  00ab0	74 07		 je	 SHORT $LN19@Rem_X_1W

; 530  :                 IncrementDIV64Counter();

  00ab2	e8 00 00 00 00	 call	 ?IncrementDIV64Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementDIV64Counter

; 531  :             else

  00ab7	eb 05		 jmp	 SHORT $LN18@Rem_X_1W
$LN19@Rem_X_1W:

; 532  :                 IncrementDIV32Counter();

  00ab9	e8 00 00 00 00	 call	 ?IncrementDIV32Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementDIV32Counter
$LN18@Rem_X_1W:

; 533  : #endif
; 534  :         }
; 535  : 
; 536  :         return (r);

  00abe	8b 45 e8	 mov	 eax, DWORD PTR _r$[ebp]

; 537  :     }

  00ac1	52		 push	 edx
  00ac2	8b cd		 mov	 ecx, ebp
  00ac4	50		 push	 eax
  00ac5	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN24@Rem_X_1W
  00acb	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00ad0	58		 pop	 eax
  00ad1	5a		 pop	 edx
  00ad2	83 c4 1c	 add	 esp, 28			; 0000001cH
  00ad5	3b ec		 cmp	 ebp, esp
  00ad7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00adc	8b e5		 mov	 esp, ebp
  00ade	5d		 pop	 ebp
  00adf	c3		 ret	 0
$LN24@Rem_X_1W:
  00ae0	01 00 00 00	 DD	 1
  00ae4	00 00 00 00	 DD	 $LN23@Rem_X_1W
$LN23@Rem_X_1W:
  00ae8	f0 ff ff ff	 DD	 -16			; fffffff0H
  00aec	04 00 00 00	 DD	 4
  00af0	00 00 00 00	 DD	 $LN22@Rem_X_1W
$LN22@Rem_X_1W:
  00af4	64		 DB	 100			; 00000064H
  00af5	75		 DB	 117			; 00000075H
  00af6	6d		 DB	 109			; 0000006dH
  00af7	6d		 DB	 109			; 0000006dH
  00af8	79		 DB	 121			; 00000079H
  00af9	5f		 DB	 95			; 0000005fH
  00afa	71		 DB	 113			; 00000071H
  00afb	00		 DB	 0
?Rem_X_1W@Internal@Core@Math@Palmtree@@YAIPAIII@Z ENDP	; Palmtree::Math::Core::Internal::Rem_X_1W
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.cpp
_TEXT	SEGMENT
_count$ = -20						; size = 4
_r$ = -16						; size = 4
_u_count$ = -12						; size = 4
_qp$ = -8						; size = 4
_up$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_v$ = 16						; size = 4
_q_buf$ = 20						; size = 4
_r_buf$ = 24						; size = 4
?DivRem_X_1W@Internal@Core@Math@Palmtree@@YAXPAIII00@Z PROC ; Palmtree::Math::Core::Internal::DivRem_X_1W

; 540  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00011	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00014	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00017	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001a	b9 00 00 00 00	 mov	 ecx, OFFSET __E17217E9_pmc_divrem@cpp
  0001f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 541  :         // u の最上位ワードは 0 でありうることに注意すること。
; 542  :         __UNIT_TYPE* up = u_buf + u_buf_len - 1;

  00024	8b 45 0c	 mov	 eax, DWORD PTR _u_buf_len$[ebp]
  00027	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  0002a	8d 54 81 fc	 lea	 edx, DWORD PTR [ecx+eax*4-4]
  0002e	89 55 fc	 mov	 DWORD PTR _up$[ebp], edx

; 543  :         __UNIT_TYPE* qp = q_buf + u_buf_len - 1;

  00031	8b 45 0c	 mov	 eax, DWORD PTR _u_buf_len$[ebp]
  00034	8b 4d 14	 mov	 ecx, DWORD PTR _q_buf$[ebp]
  00037	8d 54 81 fc	 lea	 edx, DWORD PTR [ecx+eax*4-4]
  0003b	89 55 f8	 mov	 DWORD PTR _qp$[ebp], edx

; 544  :         __UNIT_TYPE u_count = u_buf_len;

  0003e	8b 45 0c	 mov	 eax, DWORD PTR _u_buf_len$[ebp]
  00041	89 45 f4	 mov	 DWORD PTR _u_count$[ebp], eax

; 545  :         if (sizeof(__UNIT_TYPE) != sizeof(__UNIT_TYPE))

  00044	33 c9		 xor	 ecx, ecx
  00046	74 25		 je	 SHORT $LN6@DivRem_X_1
$LN2@DivRem_X_1:

; 546  :         {
; 547  :             while (*up == 0)

  00048	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  0004b	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0004e	75 1d		 jne	 SHORT $LN6@DivRem_X_1

; 548  :             {
; 549  :                 --up;

  00050	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  00053	83 e8 04	 sub	 eax, 4
  00056	89 45 fc	 mov	 DWORD PTR _up$[ebp], eax

; 550  :                 --qp;

  00059	8b 4d f8	 mov	 ecx, DWORD PTR _qp$[ebp]
  0005c	83 e9 04	 sub	 ecx, 4
  0005f	89 4d f8	 mov	 DWORD PTR _qp$[ebp], ecx

; 551  :                 --u_count;

  00062	8b 55 f4	 mov	 edx, DWORD PTR _u_count$[ebp]
  00065	83 ea 01	 sub	 edx, 1
  00068	89 55 f4	 mov	 DWORD PTR _u_count$[ebp], edx

; 552  :             }

  0006b	eb db		 jmp	 SHORT $LN2@DivRem_X_1
$LN6@DivRem_X_1:

; 553  :         }
; 554  :         __UNIT_TYPE r = 0;

  0006d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _r$[ebp], 0

; 555  :         __UNIT_TYPE count = u_count >> 5;

  00074	8b 45 f4	 mov	 eax, DWORD PTR _u_count$[ebp]
  00077	c1 e8 05	 shr	 eax, 5
  0007a	89 45 ec	 mov	 DWORD PTR _count$[ebp], eax
$LN4@DivRem_X_1:

; 556  :         while (count != 0)

  0007d	83 7d ec 00	 cmp	 DWORD PTR _count$[ebp], 0
  00081	0f 84 ff 05 00
	00		 je	 $LN5@DivRem_X_1

; 557  :         {
; 558  :             r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &qp[-0]);

  00087	b9 04 00 00 00	 mov	 ecx, 4
  0008c	6b d1 00	 imul	 edx, ecx, 0
  0008f	03 55 f8	 add	 edx, DWORD PTR _qp$[ebp]
  00092	52		 push	 edx
  00093	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00096	50		 push	 eax
  00097	b9 04 00 00 00	 mov	 ecx, 4
  0009c	6b d1 00	 imul	 edx, ecx, 0
  0009f	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  000a2	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  000a5	51		 push	 ecx
  000a6	8b 55 f0	 mov	 edx, DWORD PTR _r$[ebp]
  000a9	52		 push	 edx
  000aa	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  000af	83 c4 10	 add	 esp, 16			; 00000010H
  000b2	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 559  :             r = _DIVREM_SINGLE_UNIT(r, up[-1], v, &qp[-1]);

  000b5	b8 04 00 00 00	 mov	 eax, 4
  000ba	6b c8 ff	 imul	 ecx, eax, -1
  000bd	03 4d f8	 add	 ecx, DWORD PTR _qp$[ebp]
  000c0	51		 push	 ecx
  000c1	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  000c4	52		 push	 edx
  000c5	b8 04 00 00 00	 mov	 eax, 4
  000ca	6b c8 ff	 imul	 ecx, eax, -1
  000cd	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  000d0	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  000d3	50		 push	 eax
  000d4	8b 4d f0	 mov	 ecx, DWORD PTR _r$[ebp]
  000d7	51		 push	 ecx
  000d8	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  000dd	83 c4 10	 add	 esp, 16			; 00000010H
  000e0	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 560  :             r = _DIVREM_SINGLE_UNIT(r, up[-2], v, &qp[-2]);

  000e3	ba 04 00 00 00	 mov	 edx, 4
  000e8	6b c2 fe	 imul	 eax, edx, -2
  000eb	03 45 f8	 add	 eax, DWORD PTR _qp$[ebp]
  000ee	50		 push	 eax
  000ef	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  000f2	51		 push	 ecx
  000f3	ba 04 00 00 00	 mov	 edx, 4
  000f8	6b c2 fe	 imul	 eax, edx, -2
  000fb	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  000fe	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00101	52		 push	 edx
  00102	8b 45 f0	 mov	 eax, DWORD PTR _r$[ebp]
  00105	50		 push	 eax
  00106	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  0010b	83 c4 10	 add	 esp, 16			; 00000010H
  0010e	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 561  :             r = _DIVREM_SINGLE_UNIT(r, up[-3], v, &qp[-3]);

  00111	b9 04 00 00 00	 mov	 ecx, 4
  00116	6b d1 fd	 imul	 edx, ecx, -3
  00119	03 55 f8	 add	 edx, DWORD PTR _qp$[ebp]
  0011c	52		 push	 edx
  0011d	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00120	50		 push	 eax
  00121	b9 04 00 00 00	 mov	 ecx, 4
  00126	6b d1 fd	 imul	 edx, ecx, -3
  00129	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  0012c	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0012f	51		 push	 ecx
  00130	8b 55 f0	 mov	 edx, DWORD PTR _r$[ebp]
  00133	52		 push	 edx
  00134	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00139	83 c4 10	 add	 esp, 16			; 00000010H
  0013c	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 562  :             r = _DIVREM_SINGLE_UNIT(r, up[-4], v, &qp[-4]);

  0013f	b8 04 00 00 00	 mov	 eax, 4
  00144	6b c8 fc	 imul	 ecx, eax, -4
  00147	03 4d f8	 add	 ecx, DWORD PTR _qp$[ebp]
  0014a	51		 push	 ecx
  0014b	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  0014e	52		 push	 edx
  0014f	b8 04 00 00 00	 mov	 eax, 4
  00154	6b c8 fc	 imul	 ecx, eax, -4
  00157	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  0015a	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0015d	50		 push	 eax
  0015e	8b 4d f0	 mov	 ecx, DWORD PTR _r$[ebp]
  00161	51		 push	 ecx
  00162	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00167	83 c4 10	 add	 esp, 16			; 00000010H
  0016a	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 563  :             r = _DIVREM_SINGLE_UNIT(r, up[-5], v, &qp[-5]);

  0016d	ba 04 00 00 00	 mov	 edx, 4
  00172	6b c2 fb	 imul	 eax, edx, -5
  00175	03 45 f8	 add	 eax, DWORD PTR _qp$[ebp]
  00178	50		 push	 eax
  00179	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  0017c	51		 push	 ecx
  0017d	ba 04 00 00 00	 mov	 edx, 4
  00182	6b c2 fb	 imul	 eax, edx, -5
  00185	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  00188	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0018b	52		 push	 edx
  0018c	8b 45 f0	 mov	 eax, DWORD PTR _r$[ebp]
  0018f	50		 push	 eax
  00190	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00195	83 c4 10	 add	 esp, 16			; 00000010H
  00198	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 564  :             r = _DIVREM_SINGLE_UNIT(r, up[-6], v, &qp[-6]);

  0019b	b9 04 00 00 00	 mov	 ecx, 4
  001a0	6b d1 fa	 imul	 edx, ecx, -6
  001a3	03 55 f8	 add	 edx, DWORD PTR _qp$[ebp]
  001a6	52		 push	 edx
  001a7	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  001aa	50		 push	 eax
  001ab	b9 04 00 00 00	 mov	 ecx, 4
  001b0	6b d1 fa	 imul	 edx, ecx, -6
  001b3	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  001b6	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  001b9	51		 push	 ecx
  001ba	8b 55 f0	 mov	 edx, DWORD PTR _r$[ebp]
  001bd	52		 push	 edx
  001be	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  001c3	83 c4 10	 add	 esp, 16			; 00000010H
  001c6	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 565  :             r = _DIVREM_SINGLE_UNIT(r, up[-7], v, &qp[-7]);

  001c9	b8 04 00 00 00	 mov	 eax, 4
  001ce	6b c8 f9	 imul	 ecx, eax, -7
  001d1	03 4d f8	 add	 ecx, DWORD PTR _qp$[ebp]
  001d4	51		 push	 ecx
  001d5	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  001d8	52		 push	 edx
  001d9	b8 04 00 00 00	 mov	 eax, 4
  001de	6b c8 f9	 imul	 ecx, eax, -7
  001e1	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  001e4	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  001e7	50		 push	 eax
  001e8	8b 4d f0	 mov	 ecx, DWORD PTR _r$[ebp]
  001eb	51		 push	 ecx
  001ec	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  001f1	83 c4 10	 add	 esp, 16			; 00000010H
  001f4	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 566  :             r = _DIVREM_SINGLE_UNIT(r, up[-8], v, &qp[-8]);

  001f7	ba 04 00 00 00	 mov	 edx, 4
  001fc	6b c2 f8	 imul	 eax, edx, -8
  001ff	03 45 f8	 add	 eax, DWORD PTR _qp$[ebp]
  00202	50		 push	 eax
  00203	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00206	51		 push	 ecx
  00207	ba 04 00 00 00	 mov	 edx, 4
  0020c	6b c2 f8	 imul	 eax, edx, -8
  0020f	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  00212	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00215	52		 push	 edx
  00216	8b 45 f0	 mov	 eax, DWORD PTR _r$[ebp]
  00219	50		 push	 eax
  0021a	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  0021f	83 c4 10	 add	 esp, 16			; 00000010H
  00222	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 567  :             r = _DIVREM_SINGLE_UNIT(r, up[-9], v, &qp[-9]);

  00225	b9 04 00 00 00	 mov	 ecx, 4
  0022a	6b d1 f7	 imul	 edx, ecx, -9
  0022d	03 55 f8	 add	 edx, DWORD PTR _qp$[ebp]
  00230	52		 push	 edx
  00231	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00234	50		 push	 eax
  00235	b9 04 00 00 00	 mov	 ecx, 4
  0023a	6b d1 f7	 imul	 edx, ecx, -9
  0023d	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  00240	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00243	51		 push	 ecx
  00244	8b 55 f0	 mov	 edx, DWORD PTR _r$[ebp]
  00247	52		 push	 edx
  00248	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  0024d	83 c4 10	 add	 esp, 16			; 00000010H
  00250	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 568  :             r = _DIVREM_SINGLE_UNIT(r, up[-10], v, &qp[-10]);

  00253	b8 04 00 00 00	 mov	 eax, 4
  00258	6b c8 f6	 imul	 ecx, eax, -10
  0025b	03 4d f8	 add	 ecx, DWORD PTR _qp$[ebp]
  0025e	51		 push	 ecx
  0025f	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00262	52		 push	 edx
  00263	b8 04 00 00 00	 mov	 eax, 4
  00268	6b c8 f6	 imul	 ecx, eax, -10
  0026b	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  0026e	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00271	50		 push	 eax
  00272	8b 4d f0	 mov	 ecx, DWORD PTR _r$[ebp]
  00275	51		 push	 ecx
  00276	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  0027b	83 c4 10	 add	 esp, 16			; 00000010H
  0027e	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 569  :             r = _DIVREM_SINGLE_UNIT(r, up[-11], v, &qp[-11]);

  00281	ba 04 00 00 00	 mov	 edx, 4
  00286	6b c2 f5	 imul	 eax, edx, -11
  00289	03 45 f8	 add	 eax, DWORD PTR _qp$[ebp]
  0028c	50		 push	 eax
  0028d	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00290	51		 push	 ecx
  00291	ba 04 00 00 00	 mov	 edx, 4
  00296	6b c2 f5	 imul	 eax, edx, -11
  00299	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  0029c	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0029f	52		 push	 edx
  002a0	8b 45 f0	 mov	 eax, DWORD PTR _r$[ebp]
  002a3	50		 push	 eax
  002a4	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  002a9	83 c4 10	 add	 esp, 16			; 00000010H
  002ac	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 570  :             r = _DIVREM_SINGLE_UNIT(r, up[-12], v, &qp[-12]);

  002af	b9 04 00 00 00	 mov	 ecx, 4
  002b4	6b d1 f4	 imul	 edx, ecx, -12
  002b7	03 55 f8	 add	 edx, DWORD PTR _qp$[ebp]
  002ba	52		 push	 edx
  002bb	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  002be	50		 push	 eax
  002bf	b9 04 00 00 00	 mov	 ecx, 4
  002c4	6b d1 f4	 imul	 edx, ecx, -12
  002c7	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  002ca	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  002cd	51		 push	 ecx
  002ce	8b 55 f0	 mov	 edx, DWORD PTR _r$[ebp]
  002d1	52		 push	 edx
  002d2	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  002d7	83 c4 10	 add	 esp, 16			; 00000010H
  002da	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 571  :             r = _DIVREM_SINGLE_UNIT(r, up[-13], v, &qp[-13]);

  002dd	b8 04 00 00 00	 mov	 eax, 4
  002e2	6b c8 f3	 imul	 ecx, eax, -13
  002e5	03 4d f8	 add	 ecx, DWORD PTR _qp$[ebp]
  002e8	51		 push	 ecx
  002e9	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  002ec	52		 push	 edx
  002ed	b8 04 00 00 00	 mov	 eax, 4
  002f2	6b c8 f3	 imul	 ecx, eax, -13
  002f5	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  002f8	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  002fb	50		 push	 eax
  002fc	8b 4d f0	 mov	 ecx, DWORD PTR _r$[ebp]
  002ff	51		 push	 ecx
  00300	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00305	83 c4 10	 add	 esp, 16			; 00000010H
  00308	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 572  :             r = _DIVREM_SINGLE_UNIT(r, up[-14], v, &qp[-14]);

  0030b	ba 04 00 00 00	 mov	 edx, 4
  00310	6b c2 f2	 imul	 eax, edx, -14
  00313	03 45 f8	 add	 eax, DWORD PTR _qp$[ebp]
  00316	50		 push	 eax
  00317	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  0031a	51		 push	 ecx
  0031b	ba 04 00 00 00	 mov	 edx, 4
  00320	6b c2 f2	 imul	 eax, edx, -14
  00323	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  00326	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00329	52		 push	 edx
  0032a	8b 45 f0	 mov	 eax, DWORD PTR _r$[ebp]
  0032d	50		 push	 eax
  0032e	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00333	83 c4 10	 add	 esp, 16			; 00000010H
  00336	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 573  :             r = _DIVREM_SINGLE_UNIT(r, up[-15], v, &qp[-15]);

  00339	b9 04 00 00 00	 mov	 ecx, 4
  0033e	6b d1 f1	 imul	 edx, ecx, -15
  00341	03 55 f8	 add	 edx, DWORD PTR _qp$[ebp]
  00344	52		 push	 edx
  00345	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00348	50		 push	 eax
  00349	b9 04 00 00 00	 mov	 ecx, 4
  0034e	6b d1 f1	 imul	 edx, ecx, -15
  00351	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  00354	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00357	51		 push	 ecx
  00358	8b 55 f0	 mov	 edx, DWORD PTR _r$[ebp]
  0035b	52		 push	 edx
  0035c	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00361	83 c4 10	 add	 esp, 16			; 00000010H
  00364	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 574  :             r = _DIVREM_SINGLE_UNIT(r, up[-16], v, &qp[-16]);

  00367	b8 04 00 00 00	 mov	 eax, 4
  0036c	6b c8 f0	 imul	 ecx, eax, -16
  0036f	03 4d f8	 add	 ecx, DWORD PTR _qp$[ebp]
  00372	51		 push	 ecx
  00373	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00376	52		 push	 edx
  00377	b8 04 00 00 00	 mov	 eax, 4
  0037c	6b c8 f0	 imul	 ecx, eax, -16
  0037f	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  00382	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00385	50		 push	 eax
  00386	8b 4d f0	 mov	 ecx, DWORD PTR _r$[ebp]
  00389	51		 push	 ecx
  0038a	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  0038f	83 c4 10	 add	 esp, 16			; 00000010H
  00392	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 575  :             r = _DIVREM_SINGLE_UNIT(r, up[-17], v, &qp[-17]);

  00395	ba 04 00 00 00	 mov	 edx, 4
  0039a	6b c2 ef	 imul	 eax, edx, -17
  0039d	03 45 f8	 add	 eax, DWORD PTR _qp$[ebp]
  003a0	50		 push	 eax
  003a1	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  003a4	51		 push	 ecx
  003a5	ba 04 00 00 00	 mov	 edx, 4
  003aa	6b c2 ef	 imul	 eax, edx, -17
  003ad	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  003b0	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  003b3	52		 push	 edx
  003b4	8b 45 f0	 mov	 eax, DWORD PTR _r$[ebp]
  003b7	50		 push	 eax
  003b8	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  003bd	83 c4 10	 add	 esp, 16			; 00000010H
  003c0	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 576  :             r = _DIVREM_SINGLE_UNIT(r, up[-18], v, &qp[-18]);

  003c3	b9 04 00 00 00	 mov	 ecx, 4
  003c8	6b d1 ee	 imul	 edx, ecx, -18
  003cb	03 55 f8	 add	 edx, DWORD PTR _qp$[ebp]
  003ce	52		 push	 edx
  003cf	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  003d2	50		 push	 eax
  003d3	b9 04 00 00 00	 mov	 ecx, 4
  003d8	6b d1 ee	 imul	 edx, ecx, -18
  003db	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  003de	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  003e1	51		 push	 ecx
  003e2	8b 55 f0	 mov	 edx, DWORD PTR _r$[ebp]
  003e5	52		 push	 edx
  003e6	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  003eb	83 c4 10	 add	 esp, 16			; 00000010H
  003ee	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 577  :             r = _DIVREM_SINGLE_UNIT(r, up[-19], v, &qp[-19]);

  003f1	b8 04 00 00 00	 mov	 eax, 4
  003f6	6b c8 ed	 imul	 ecx, eax, -19
  003f9	03 4d f8	 add	 ecx, DWORD PTR _qp$[ebp]
  003fc	51		 push	 ecx
  003fd	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00400	52		 push	 edx
  00401	b8 04 00 00 00	 mov	 eax, 4
  00406	6b c8 ed	 imul	 ecx, eax, -19
  00409	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  0040c	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0040f	50		 push	 eax
  00410	8b 4d f0	 mov	 ecx, DWORD PTR _r$[ebp]
  00413	51		 push	 ecx
  00414	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00419	83 c4 10	 add	 esp, 16			; 00000010H
  0041c	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 578  :             r = _DIVREM_SINGLE_UNIT(r, up[-20], v, &qp[-20]);

  0041f	ba 04 00 00 00	 mov	 edx, 4
  00424	6b c2 ec	 imul	 eax, edx, -20
  00427	03 45 f8	 add	 eax, DWORD PTR _qp$[ebp]
  0042a	50		 push	 eax
  0042b	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  0042e	51		 push	 ecx
  0042f	ba 04 00 00 00	 mov	 edx, 4
  00434	6b c2 ec	 imul	 eax, edx, -20
  00437	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  0043a	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0043d	52		 push	 edx
  0043e	8b 45 f0	 mov	 eax, DWORD PTR _r$[ebp]
  00441	50		 push	 eax
  00442	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00447	83 c4 10	 add	 esp, 16			; 00000010H
  0044a	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 579  :             r = _DIVREM_SINGLE_UNIT(r, up[-21], v, &qp[-21]);

  0044d	b9 04 00 00 00	 mov	 ecx, 4
  00452	6b d1 eb	 imul	 edx, ecx, -21
  00455	03 55 f8	 add	 edx, DWORD PTR _qp$[ebp]
  00458	52		 push	 edx
  00459	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0045c	50		 push	 eax
  0045d	b9 04 00 00 00	 mov	 ecx, 4
  00462	6b d1 eb	 imul	 edx, ecx, -21
  00465	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  00468	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0046b	51		 push	 ecx
  0046c	8b 55 f0	 mov	 edx, DWORD PTR _r$[ebp]
  0046f	52		 push	 edx
  00470	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00475	83 c4 10	 add	 esp, 16			; 00000010H
  00478	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 580  :             r = _DIVREM_SINGLE_UNIT(r, up[-22], v, &qp[-22]);

  0047b	b8 04 00 00 00	 mov	 eax, 4
  00480	6b c8 ea	 imul	 ecx, eax, -22
  00483	03 4d f8	 add	 ecx, DWORD PTR _qp$[ebp]
  00486	51		 push	 ecx
  00487	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  0048a	52		 push	 edx
  0048b	b8 04 00 00 00	 mov	 eax, 4
  00490	6b c8 ea	 imul	 ecx, eax, -22
  00493	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  00496	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00499	50		 push	 eax
  0049a	8b 4d f0	 mov	 ecx, DWORD PTR _r$[ebp]
  0049d	51		 push	 ecx
  0049e	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  004a3	83 c4 10	 add	 esp, 16			; 00000010H
  004a6	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 581  :             r = _DIVREM_SINGLE_UNIT(r, up[-23], v, &qp[-23]);

  004a9	ba 04 00 00 00	 mov	 edx, 4
  004ae	6b c2 e9	 imul	 eax, edx, -23
  004b1	03 45 f8	 add	 eax, DWORD PTR _qp$[ebp]
  004b4	50		 push	 eax
  004b5	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  004b8	51		 push	 ecx
  004b9	ba 04 00 00 00	 mov	 edx, 4
  004be	6b c2 e9	 imul	 eax, edx, -23
  004c1	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  004c4	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  004c7	52		 push	 edx
  004c8	8b 45 f0	 mov	 eax, DWORD PTR _r$[ebp]
  004cb	50		 push	 eax
  004cc	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  004d1	83 c4 10	 add	 esp, 16			; 00000010H
  004d4	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 582  :             r = _DIVREM_SINGLE_UNIT(r, up[-24], v, &qp[-24]);

  004d7	b9 04 00 00 00	 mov	 ecx, 4
  004dc	6b d1 e8	 imul	 edx, ecx, -24
  004df	03 55 f8	 add	 edx, DWORD PTR _qp$[ebp]
  004e2	52		 push	 edx
  004e3	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  004e6	50		 push	 eax
  004e7	b9 04 00 00 00	 mov	 ecx, 4
  004ec	6b d1 e8	 imul	 edx, ecx, -24
  004ef	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  004f2	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  004f5	51		 push	 ecx
  004f6	8b 55 f0	 mov	 edx, DWORD PTR _r$[ebp]
  004f9	52		 push	 edx
  004fa	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  004ff	83 c4 10	 add	 esp, 16			; 00000010H
  00502	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 583  :             r = _DIVREM_SINGLE_UNIT(r, up[-25], v, &qp[-25]);

  00505	b8 04 00 00 00	 mov	 eax, 4
  0050a	6b c8 e7	 imul	 ecx, eax, -25
  0050d	03 4d f8	 add	 ecx, DWORD PTR _qp$[ebp]
  00510	51		 push	 ecx
  00511	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00514	52		 push	 edx
  00515	b8 04 00 00 00	 mov	 eax, 4
  0051a	6b c8 e7	 imul	 ecx, eax, -25
  0051d	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  00520	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00523	50		 push	 eax
  00524	8b 4d f0	 mov	 ecx, DWORD PTR _r$[ebp]
  00527	51		 push	 ecx
  00528	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  0052d	83 c4 10	 add	 esp, 16			; 00000010H
  00530	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 584  :             r = _DIVREM_SINGLE_UNIT(r, up[-26], v, &qp[-26]);

  00533	ba 04 00 00 00	 mov	 edx, 4
  00538	6b c2 e6	 imul	 eax, edx, -26
  0053b	03 45 f8	 add	 eax, DWORD PTR _qp$[ebp]
  0053e	50		 push	 eax
  0053f	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00542	51		 push	 ecx
  00543	ba 04 00 00 00	 mov	 edx, 4
  00548	6b c2 e6	 imul	 eax, edx, -26
  0054b	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  0054e	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00551	52		 push	 edx
  00552	8b 45 f0	 mov	 eax, DWORD PTR _r$[ebp]
  00555	50		 push	 eax
  00556	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  0055b	83 c4 10	 add	 esp, 16			; 00000010H
  0055e	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 585  :             r = _DIVREM_SINGLE_UNIT(r, up[-27], v, &qp[-27]);

  00561	b9 04 00 00 00	 mov	 ecx, 4
  00566	6b d1 e5	 imul	 edx, ecx, -27
  00569	03 55 f8	 add	 edx, DWORD PTR _qp$[ebp]
  0056c	52		 push	 edx
  0056d	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00570	50		 push	 eax
  00571	b9 04 00 00 00	 mov	 ecx, 4
  00576	6b d1 e5	 imul	 edx, ecx, -27
  00579	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  0057c	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0057f	51		 push	 ecx
  00580	8b 55 f0	 mov	 edx, DWORD PTR _r$[ebp]
  00583	52		 push	 edx
  00584	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00589	83 c4 10	 add	 esp, 16			; 00000010H
  0058c	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 586  :             r = _DIVREM_SINGLE_UNIT(r, up[-28], v, &qp[-28]);

  0058f	b8 04 00 00 00	 mov	 eax, 4
  00594	6b c8 e4	 imul	 ecx, eax, -28
  00597	03 4d f8	 add	 ecx, DWORD PTR _qp$[ebp]
  0059a	51		 push	 ecx
  0059b	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  0059e	52		 push	 edx
  0059f	b8 04 00 00 00	 mov	 eax, 4
  005a4	6b c8 e4	 imul	 ecx, eax, -28
  005a7	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  005aa	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  005ad	50		 push	 eax
  005ae	8b 4d f0	 mov	 ecx, DWORD PTR _r$[ebp]
  005b1	51		 push	 ecx
  005b2	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  005b7	83 c4 10	 add	 esp, 16			; 00000010H
  005ba	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 587  :             r = _DIVREM_SINGLE_UNIT(r, up[-29], v, &qp[-29]);

  005bd	ba 04 00 00 00	 mov	 edx, 4
  005c2	6b c2 e3	 imul	 eax, edx, -29
  005c5	03 45 f8	 add	 eax, DWORD PTR _qp$[ebp]
  005c8	50		 push	 eax
  005c9	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  005cc	51		 push	 ecx
  005cd	ba 04 00 00 00	 mov	 edx, 4
  005d2	6b c2 e3	 imul	 eax, edx, -29
  005d5	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  005d8	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  005db	52		 push	 edx
  005dc	8b 45 f0	 mov	 eax, DWORD PTR _r$[ebp]
  005df	50		 push	 eax
  005e0	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  005e5	83 c4 10	 add	 esp, 16			; 00000010H
  005e8	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 588  :             r = _DIVREM_SINGLE_UNIT(r, up[-30], v, &qp[-30]);

  005eb	b9 04 00 00 00	 mov	 ecx, 4
  005f0	6b d1 e2	 imul	 edx, ecx, -30
  005f3	03 55 f8	 add	 edx, DWORD PTR _qp$[ebp]
  005f6	52		 push	 edx
  005f7	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  005fa	50		 push	 eax
  005fb	b9 04 00 00 00	 mov	 ecx, 4
  00600	6b d1 e2	 imul	 edx, ecx, -30
  00603	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  00606	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00609	51		 push	 ecx
  0060a	8b 55 f0	 mov	 edx, DWORD PTR _r$[ebp]
  0060d	52		 push	 edx
  0060e	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00613	83 c4 10	 add	 esp, 16			; 00000010H
  00616	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 589  :             r = _DIVREM_SINGLE_UNIT(r, up[-31], v, &qp[-31]);

  00619	b8 04 00 00 00	 mov	 eax, 4
  0061e	6b c8 e1	 imul	 ecx, eax, -31
  00621	03 4d f8	 add	 ecx, DWORD PTR _qp$[ebp]
  00624	51		 push	 ecx
  00625	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00628	52		 push	 edx
  00629	b8 04 00 00 00	 mov	 eax, 4
  0062e	6b c8 e1	 imul	 ecx, eax, -31
  00631	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  00634	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00637	50		 push	 eax
  00638	8b 4d f0	 mov	 ecx, DWORD PTR _r$[ebp]
  0063b	51		 push	 ecx
  0063c	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00641	83 c4 10	 add	 esp, 16			; 00000010H
  00644	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 590  :             up -= 32;

  00647	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  0064a	81 ea 80 00 00
	00		 sub	 edx, 128		; 00000080H
  00650	89 55 fc	 mov	 DWORD PTR _up$[ebp], edx

; 591  :             qp -= 32;

  00653	8b 45 f8	 mov	 eax, DWORD PTR _qp$[ebp]
  00656	2d 80 00 00 00	 sub	 eax, 128		; 00000080H
  0065b	89 45 f8	 mov	 DWORD PTR _qp$[ebp], eax

; 592  :             --count;

  0065e	8b 4d ec	 mov	 ecx, DWORD PTR _count$[ebp]
  00661	83 e9 01	 sub	 ecx, 1
  00664	89 4d ec	 mov	 DWORD PTR _count$[ebp], ecx

; 593  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 594  :             if (sizeof(r) == sizeof(_UINT64_T))

  00667	33 d2		 xor	 edx, edx
  00669	74 0c		 je	 SHORT $LN7@DivRem_X_1

; 595  :                 AddToDIV64Counter(32);

  0066b	6a 20		 push	 32			; 00000020H
  0066d	e8 00 00 00 00	 call	 ?AddToDIV64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV64Counter
  00672	83 c4 04	 add	 esp, 4

; 596  :             else

  00675	eb 0a		 jmp	 SHORT $LN8@DivRem_X_1
$LN7@DivRem_X_1:

; 597  :                 AddToDIV32Counter(32);

  00677	6a 20		 push	 32			; 00000020H
  00679	e8 00 00 00 00	 call	 ?AddToDIV32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV32Counter
  0067e	83 c4 04	 add	 esp, 4
$LN8@DivRem_X_1:

; 598  : #endif
; 599  :         }

  00681	e9 f7 f9 ff ff	 jmp	 $LN4@DivRem_X_1
$LN5@DivRem_X_1:

; 600  : 
; 601  :         if (u_count & 0x10)

  00686	8b 45 f4	 mov	 eax, DWORD PTR _u_count$[ebp]
  00689	83 e0 10	 and	 eax, 16			; 00000010H
  0068c	0f 84 0c 03 00
	00		 je	 $LN9@DivRem_X_1

; 602  :         {
; 603  :             r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &qp[-0]);

  00692	b9 04 00 00 00	 mov	 ecx, 4
  00697	6b d1 00	 imul	 edx, ecx, 0
  0069a	03 55 f8	 add	 edx, DWORD PTR _qp$[ebp]
  0069d	52		 push	 edx
  0069e	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  006a1	50		 push	 eax
  006a2	b9 04 00 00 00	 mov	 ecx, 4
  006a7	6b d1 00	 imul	 edx, ecx, 0
  006aa	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  006ad	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  006b0	51		 push	 ecx
  006b1	8b 55 f0	 mov	 edx, DWORD PTR _r$[ebp]
  006b4	52		 push	 edx
  006b5	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  006ba	83 c4 10	 add	 esp, 16			; 00000010H
  006bd	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 604  :             r = _DIVREM_SINGLE_UNIT(r, up[-1], v, &qp[-1]);

  006c0	b8 04 00 00 00	 mov	 eax, 4
  006c5	6b c8 ff	 imul	 ecx, eax, -1
  006c8	03 4d f8	 add	 ecx, DWORD PTR _qp$[ebp]
  006cb	51		 push	 ecx
  006cc	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  006cf	52		 push	 edx
  006d0	b8 04 00 00 00	 mov	 eax, 4
  006d5	6b c8 ff	 imul	 ecx, eax, -1
  006d8	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  006db	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  006de	50		 push	 eax
  006df	8b 4d f0	 mov	 ecx, DWORD PTR _r$[ebp]
  006e2	51		 push	 ecx
  006e3	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  006e8	83 c4 10	 add	 esp, 16			; 00000010H
  006eb	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 605  :             r = _DIVREM_SINGLE_UNIT(r, up[-2], v, &qp[-2]);

  006ee	ba 04 00 00 00	 mov	 edx, 4
  006f3	6b c2 fe	 imul	 eax, edx, -2
  006f6	03 45 f8	 add	 eax, DWORD PTR _qp$[ebp]
  006f9	50		 push	 eax
  006fa	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  006fd	51		 push	 ecx
  006fe	ba 04 00 00 00	 mov	 edx, 4
  00703	6b c2 fe	 imul	 eax, edx, -2
  00706	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  00709	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0070c	52		 push	 edx
  0070d	8b 45 f0	 mov	 eax, DWORD PTR _r$[ebp]
  00710	50		 push	 eax
  00711	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00716	83 c4 10	 add	 esp, 16			; 00000010H
  00719	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 606  :             r = _DIVREM_SINGLE_UNIT(r, up[-3], v, &qp[-3]);

  0071c	b9 04 00 00 00	 mov	 ecx, 4
  00721	6b d1 fd	 imul	 edx, ecx, -3
  00724	03 55 f8	 add	 edx, DWORD PTR _qp$[ebp]
  00727	52		 push	 edx
  00728	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0072b	50		 push	 eax
  0072c	b9 04 00 00 00	 mov	 ecx, 4
  00731	6b d1 fd	 imul	 edx, ecx, -3
  00734	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  00737	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0073a	51		 push	 ecx
  0073b	8b 55 f0	 mov	 edx, DWORD PTR _r$[ebp]
  0073e	52		 push	 edx
  0073f	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00744	83 c4 10	 add	 esp, 16			; 00000010H
  00747	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 607  :             r = _DIVREM_SINGLE_UNIT(r, up[-4], v, &qp[-4]);

  0074a	b8 04 00 00 00	 mov	 eax, 4
  0074f	6b c8 fc	 imul	 ecx, eax, -4
  00752	03 4d f8	 add	 ecx, DWORD PTR _qp$[ebp]
  00755	51		 push	 ecx
  00756	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00759	52		 push	 edx
  0075a	b8 04 00 00 00	 mov	 eax, 4
  0075f	6b c8 fc	 imul	 ecx, eax, -4
  00762	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  00765	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00768	50		 push	 eax
  00769	8b 4d f0	 mov	 ecx, DWORD PTR _r$[ebp]
  0076c	51		 push	 ecx
  0076d	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00772	83 c4 10	 add	 esp, 16			; 00000010H
  00775	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 608  :             r = _DIVREM_SINGLE_UNIT(r, up[-5], v, &qp[-5]);

  00778	ba 04 00 00 00	 mov	 edx, 4
  0077d	6b c2 fb	 imul	 eax, edx, -5
  00780	03 45 f8	 add	 eax, DWORD PTR _qp$[ebp]
  00783	50		 push	 eax
  00784	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00787	51		 push	 ecx
  00788	ba 04 00 00 00	 mov	 edx, 4
  0078d	6b c2 fb	 imul	 eax, edx, -5
  00790	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  00793	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00796	52		 push	 edx
  00797	8b 45 f0	 mov	 eax, DWORD PTR _r$[ebp]
  0079a	50		 push	 eax
  0079b	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  007a0	83 c4 10	 add	 esp, 16			; 00000010H
  007a3	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 609  :             r = _DIVREM_SINGLE_UNIT(r, up[-6], v, &qp[-6]);

  007a6	b9 04 00 00 00	 mov	 ecx, 4
  007ab	6b d1 fa	 imul	 edx, ecx, -6
  007ae	03 55 f8	 add	 edx, DWORD PTR _qp$[ebp]
  007b1	52		 push	 edx
  007b2	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  007b5	50		 push	 eax
  007b6	b9 04 00 00 00	 mov	 ecx, 4
  007bb	6b d1 fa	 imul	 edx, ecx, -6
  007be	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  007c1	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  007c4	51		 push	 ecx
  007c5	8b 55 f0	 mov	 edx, DWORD PTR _r$[ebp]
  007c8	52		 push	 edx
  007c9	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  007ce	83 c4 10	 add	 esp, 16			; 00000010H
  007d1	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 610  :             r = _DIVREM_SINGLE_UNIT(r, up[-7], v, &qp[-7]);

  007d4	b8 04 00 00 00	 mov	 eax, 4
  007d9	6b c8 f9	 imul	 ecx, eax, -7
  007dc	03 4d f8	 add	 ecx, DWORD PTR _qp$[ebp]
  007df	51		 push	 ecx
  007e0	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  007e3	52		 push	 edx
  007e4	b8 04 00 00 00	 mov	 eax, 4
  007e9	6b c8 f9	 imul	 ecx, eax, -7
  007ec	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  007ef	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  007f2	50		 push	 eax
  007f3	8b 4d f0	 mov	 ecx, DWORD PTR _r$[ebp]
  007f6	51		 push	 ecx
  007f7	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  007fc	83 c4 10	 add	 esp, 16			; 00000010H
  007ff	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 611  :             r = _DIVREM_SINGLE_UNIT(r, up[-8], v, &qp[-8]);

  00802	ba 04 00 00 00	 mov	 edx, 4
  00807	6b c2 f8	 imul	 eax, edx, -8
  0080a	03 45 f8	 add	 eax, DWORD PTR _qp$[ebp]
  0080d	50		 push	 eax
  0080e	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00811	51		 push	 ecx
  00812	ba 04 00 00 00	 mov	 edx, 4
  00817	6b c2 f8	 imul	 eax, edx, -8
  0081a	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  0081d	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00820	52		 push	 edx
  00821	8b 45 f0	 mov	 eax, DWORD PTR _r$[ebp]
  00824	50		 push	 eax
  00825	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  0082a	83 c4 10	 add	 esp, 16			; 00000010H
  0082d	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 612  :             r = _DIVREM_SINGLE_UNIT(r, up[-9], v, &qp[-9]);

  00830	b9 04 00 00 00	 mov	 ecx, 4
  00835	6b d1 f7	 imul	 edx, ecx, -9
  00838	03 55 f8	 add	 edx, DWORD PTR _qp$[ebp]
  0083b	52		 push	 edx
  0083c	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0083f	50		 push	 eax
  00840	b9 04 00 00 00	 mov	 ecx, 4
  00845	6b d1 f7	 imul	 edx, ecx, -9
  00848	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  0084b	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0084e	51		 push	 ecx
  0084f	8b 55 f0	 mov	 edx, DWORD PTR _r$[ebp]
  00852	52		 push	 edx
  00853	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00858	83 c4 10	 add	 esp, 16			; 00000010H
  0085b	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 613  :             r = _DIVREM_SINGLE_UNIT(r, up[-10], v, &qp[-10]);

  0085e	b8 04 00 00 00	 mov	 eax, 4
  00863	6b c8 f6	 imul	 ecx, eax, -10
  00866	03 4d f8	 add	 ecx, DWORD PTR _qp$[ebp]
  00869	51		 push	 ecx
  0086a	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  0086d	52		 push	 edx
  0086e	b8 04 00 00 00	 mov	 eax, 4
  00873	6b c8 f6	 imul	 ecx, eax, -10
  00876	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  00879	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0087c	50		 push	 eax
  0087d	8b 4d f0	 mov	 ecx, DWORD PTR _r$[ebp]
  00880	51		 push	 ecx
  00881	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00886	83 c4 10	 add	 esp, 16			; 00000010H
  00889	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 614  :             r = _DIVREM_SINGLE_UNIT(r, up[-11], v, &qp[-11]);

  0088c	ba 04 00 00 00	 mov	 edx, 4
  00891	6b c2 f5	 imul	 eax, edx, -11
  00894	03 45 f8	 add	 eax, DWORD PTR _qp$[ebp]
  00897	50		 push	 eax
  00898	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  0089b	51		 push	 ecx
  0089c	ba 04 00 00 00	 mov	 edx, 4
  008a1	6b c2 f5	 imul	 eax, edx, -11
  008a4	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  008a7	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  008aa	52		 push	 edx
  008ab	8b 45 f0	 mov	 eax, DWORD PTR _r$[ebp]
  008ae	50		 push	 eax
  008af	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  008b4	83 c4 10	 add	 esp, 16			; 00000010H
  008b7	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 615  :             r = _DIVREM_SINGLE_UNIT(r, up[-12], v, &qp[-12]);

  008ba	b9 04 00 00 00	 mov	 ecx, 4
  008bf	6b d1 f4	 imul	 edx, ecx, -12
  008c2	03 55 f8	 add	 edx, DWORD PTR _qp$[ebp]
  008c5	52		 push	 edx
  008c6	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  008c9	50		 push	 eax
  008ca	b9 04 00 00 00	 mov	 ecx, 4
  008cf	6b d1 f4	 imul	 edx, ecx, -12
  008d2	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  008d5	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  008d8	51		 push	 ecx
  008d9	8b 55 f0	 mov	 edx, DWORD PTR _r$[ebp]
  008dc	52		 push	 edx
  008dd	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  008e2	83 c4 10	 add	 esp, 16			; 00000010H
  008e5	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 616  :             r = _DIVREM_SINGLE_UNIT(r, up[-13], v, &qp[-13]);

  008e8	b8 04 00 00 00	 mov	 eax, 4
  008ed	6b c8 f3	 imul	 ecx, eax, -13
  008f0	03 4d f8	 add	 ecx, DWORD PTR _qp$[ebp]
  008f3	51		 push	 ecx
  008f4	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  008f7	52		 push	 edx
  008f8	b8 04 00 00 00	 mov	 eax, 4
  008fd	6b c8 f3	 imul	 ecx, eax, -13
  00900	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  00903	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00906	50		 push	 eax
  00907	8b 4d f0	 mov	 ecx, DWORD PTR _r$[ebp]
  0090a	51		 push	 ecx
  0090b	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00910	83 c4 10	 add	 esp, 16			; 00000010H
  00913	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 617  :             r = _DIVREM_SINGLE_UNIT(r, up[-14], v, &qp[-14]);

  00916	ba 04 00 00 00	 mov	 edx, 4
  0091b	6b c2 f2	 imul	 eax, edx, -14
  0091e	03 45 f8	 add	 eax, DWORD PTR _qp$[ebp]
  00921	50		 push	 eax
  00922	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00925	51		 push	 ecx
  00926	ba 04 00 00 00	 mov	 edx, 4
  0092b	6b c2 f2	 imul	 eax, edx, -14
  0092e	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  00931	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00934	52		 push	 edx
  00935	8b 45 f0	 mov	 eax, DWORD PTR _r$[ebp]
  00938	50		 push	 eax
  00939	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  0093e	83 c4 10	 add	 esp, 16			; 00000010H
  00941	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 618  :             r = _DIVREM_SINGLE_UNIT(r, up[-15], v, &qp[-15]);

  00944	b9 04 00 00 00	 mov	 ecx, 4
  00949	6b d1 f1	 imul	 edx, ecx, -15
  0094c	03 55 f8	 add	 edx, DWORD PTR _qp$[ebp]
  0094f	52		 push	 edx
  00950	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00953	50		 push	 eax
  00954	b9 04 00 00 00	 mov	 ecx, 4
  00959	6b d1 f1	 imul	 edx, ecx, -15
  0095c	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  0095f	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00962	51		 push	 ecx
  00963	8b 55 f0	 mov	 edx, DWORD PTR _r$[ebp]
  00966	52		 push	 edx
  00967	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  0096c	83 c4 10	 add	 esp, 16			; 00000010H
  0096f	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 619  :             up -= 16;

  00972	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  00975	83 e8 40	 sub	 eax, 64			; 00000040H
  00978	89 45 fc	 mov	 DWORD PTR _up$[ebp], eax

; 620  :             qp -= 16;

  0097b	8b 4d f8	 mov	 ecx, DWORD PTR _qp$[ebp]
  0097e	83 e9 40	 sub	 ecx, 64			; 00000040H
  00981	89 4d f8	 mov	 DWORD PTR _qp$[ebp], ecx

; 621  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 622  :             if (sizeof(r) == sizeof(_UINT64_T))

  00984	33 d2		 xor	 edx, edx
  00986	74 0c		 je	 SHORT $LN10@DivRem_X_1

; 623  :                 AddToDIV64Counter(16);

  00988	6a 10		 push	 16			; 00000010H
  0098a	e8 00 00 00 00	 call	 ?AddToDIV64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV64Counter
  0098f	83 c4 04	 add	 esp, 4

; 624  :             else

  00992	eb 0a		 jmp	 SHORT $LN9@DivRem_X_1
$LN10@DivRem_X_1:

; 625  :                 AddToDIV32Counter(16);

  00994	6a 10		 push	 16			; 00000010H
  00996	e8 00 00 00 00	 call	 ?AddToDIV32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV32Counter
  0099b	83 c4 04	 add	 esp, 4
$LN9@DivRem_X_1:

; 626  : #endif
; 627  :         }
; 628  : 
; 629  :         if (u_count & 0x8)

  0099e	8b 45 f4	 mov	 eax, DWORD PTR _u_count$[ebp]
  009a1	83 e0 08	 and	 eax, 8
  009a4	0f 84 9c 01 00
	00		 je	 $LN12@DivRem_X_1

; 630  :         {
; 631  :             r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &qp[-0]);

  009aa	b9 04 00 00 00	 mov	 ecx, 4
  009af	6b d1 00	 imul	 edx, ecx, 0
  009b2	03 55 f8	 add	 edx, DWORD PTR _qp$[ebp]
  009b5	52		 push	 edx
  009b6	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  009b9	50		 push	 eax
  009ba	b9 04 00 00 00	 mov	 ecx, 4
  009bf	6b d1 00	 imul	 edx, ecx, 0
  009c2	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  009c5	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  009c8	51		 push	 ecx
  009c9	8b 55 f0	 mov	 edx, DWORD PTR _r$[ebp]
  009cc	52		 push	 edx
  009cd	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  009d2	83 c4 10	 add	 esp, 16			; 00000010H
  009d5	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 632  :             r = _DIVREM_SINGLE_UNIT(r, up[-1], v, &qp[-1]);

  009d8	b8 04 00 00 00	 mov	 eax, 4
  009dd	6b c8 ff	 imul	 ecx, eax, -1
  009e0	03 4d f8	 add	 ecx, DWORD PTR _qp$[ebp]
  009e3	51		 push	 ecx
  009e4	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  009e7	52		 push	 edx
  009e8	b8 04 00 00 00	 mov	 eax, 4
  009ed	6b c8 ff	 imul	 ecx, eax, -1
  009f0	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  009f3	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  009f6	50		 push	 eax
  009f7	8b 4d f0	 mov	 ecx, DWORD PTR _r$[ebp]
  009fa	51		 push	 ecx
  009fb	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00a00	83 c4 10	 add	 esp, 16			; 00000010H
  00a03	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 633  :             r = _DIVREM_SINGLE_UNIT(r, up[-2], v, &qp[-2]);

  00a06	ba 04 00 00 00	 mov	 edx, 4
  00a0b	6b c2 fe	 imul	 eax, edx, -2
  00a0e	03 45 f8	 add	 eax, DWORD PTR _qp$[ebp]
  00a11	50		 push	 eax
  00a12	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00a15	51		 push	 ecx
  00a16	ba 04 00 00 00	 mov	 edx, 4
  00a1b	6b c2 fe	 imul	 eax, edx, -2
  00a1e	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  00a21	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00a24	52		 push	 edx
  00a25	8b 45 f0	 mov	 eax, DWORD PTR _r$[ebp]
  00a28	50		 push	 eax
  00a29	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00a2e	83 c4 10	 add	 esp, 16			; 00000010H
  00a31	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 634  :             r = _DIVREM_SINGLE_UNIT(r, up[-3], v, &qp[-3]);

  00a34	b9 04 00 00 00	 mov	 ecx, 4
  00a39	6b d1 fd	 imul	 edx, ecx, -3
  00a3c	03 55 f8	 add	 edx, DWORD PTR _qp$[ebp]
  00a3f	52		 push	 edx
  00a40	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00a43	50		 push	 eax
  00a44	b9 04 00 00 00	 mov	 ecx, 4
  00a49	6b d1 fd	 imul	 edx, ecx, -3
  00a4c	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  00a4f	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00a52	51		 push	 ecx
  00a53	8b 55 f0	 mov	 edx, DWORD PTR _r$[ebp]
  00a56	52		 push	 edx
  00a57	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00a5c	83 c4 10	 add	 esp, 16			; 00000010H
  00a5f	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 635  :             r = _DIVREM_SINGLE_UNIT(r, up[-4], v, &qp[-4]);

  00a62	b8 04 00 00 00	 mov	 eax, 4
  00a67	6b c8 fc	 imul	 ecx, eax, -4
  00a6a	03 4d f8	 add	 ecx, DWORD PTR _qp$[ebp]
  00a6d	51		 push	 ecx
  00a6e	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00a71	52		 push	 edx
  00a72	b8 04 00 00 00	 mov	 eax, 4
  00a77	6b c8 fc	 imul	 ecx, eax, -4
  00a7a	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  00a7d	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00a80	50		 push	 eax
  00a81	8b 4d f0	 mov	 ecx, DWORD PTR _r$[ebp]
  00a84	51		 push	 ecx
  00a85	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00a8a	83 c4 10	 add	 esp, 16			; 00000010H
  00a8d	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 636  :             r = _DIVREM_SINGLE_UNIT(r, up[-5], v, &qp[-5]);

  00a90	ba 04 00 00 00	 mov	 edx, 4
  00a95	6b c2 fb	 imul	 eax, edx, -5
  00a98	03 45 f8	 add	 eax, DWORD PTR _qp$[ebp]
  00a9b	50		 push	 eax
  00a9c	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00a9f	51		 push	 ecx
  00aa0	ba 04 00 00 00	 mov	 edx, 4
  00aa5	6b c2 fb	 imul	 eax, edx, -5
  00aa8	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  00aab	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00aae	52		 push	 edx
  00aaf	8b 45 f0	 mov	 eax, DWORD PTR _r$[ebp]
  00ab2	50		 push	 eax
  00ab3	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00ab8	83 c4 10	 add	 esp, 16			; 00000010H
  00abb	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 637  :             r = _DIVREM_SINGLE_UNIT(r, up[-6], v, &qp[-6]);

  00abe	b9 04 00 00 00	 mov	 ecx, 4
  00ac3	6b d1 fa	 imul	 edx, ecx, -6
  00ac6	03 55 f8	 add	 edx, DWORD PTR _qp$[ebp]
  00ac9	52		 push	 edx
  00aca	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00acd	50		 push	 eax
  00ace	b9 04 00 00 00	 mov	 ecx, 4
  00ad3	6b d1 fa	 imul	 edx, ecx, -6
  00ad6	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  00ad9	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00adc	51		 push	 ecx
  00add	8b 55 f0	 mov	 edx, DWORD PTR _r$[ebp]
  00ae0	52		 push	 edx
  00ae1	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00ae6	83 c4 10	 add	 esp, 16			; 00000010H
  00ae9	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 638  :             r = _DIVREM_SINGLE_UNIT(r, up[-7], v, &qp[-7]);

  00aec	b8 04 00 00 00	 mov	 eax, 4
  00af1	6b c8 f9	 imul	 ecx, eax, -7
  00af4	03 4d f8	 add	 ecx, DWORD PTR _qp$[ebp]
  00af7	51		 push	 ecx
  00af8	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00afb	52		 push	 edx
  00afc	b8 04 00 00 00	 mov	 eax, 4
  00b01	6b c8 f9	 imul	 ecx, eax, -7
  00b04	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  00b07	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00b0a	50		 push	 eax
  00b0b	8b 4d f0	 mov	 ecx, DWORD PTR _r$[ebp]
  00b0e	51		 push	 ecx
  00b0f	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00b14	83 c4 10	 add	 esp, 16			; 00000010H
  00b17	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 639  :             up -= 8;

  00b1a	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  00b1d	83 ea 20	 sub	 edx, 32			; 00000020H
  00b20	89 55 fc	 mov	 DWORD PTR _up$[ebp], edx

; 640  :             qp -= 8;

  00b23	8b 45 f8	 mov	 eax, DWORD PTR _qp$[ebp]
  00b26	83 e8 20	 sub	 eax, 32			; 00000020H
  00b29	89 45 f8	 mov	 DWORD PTR _qp$[ebp], eax

; 641  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 642  :             if (sizeof(r) == sizeof(_UINT64_T))

  00b2c	33 c9		 xor	 ecx, ecx
  00b2e	74 0c		 je	 SHORT $LN13@DivRem_X_1

; 643  :                 AddToDIV64Counter(8);

  00b30	6a 08		 push	 8
  00b32	e8 00 00 00 00	 call	 ?AddToDIV64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV64Counter
  00b37	83 c4 04	 add	 esp, 4

; 644  :             else

  00b3a	eb 0a		 jmp	 SHORT $LN12@DivRem_X_1
$LN13@DivRem_X_1:

; 645  :                 AddToDIV32Counter(8);

  00b3c	6a 08		 push	 8
  00b3e	e8 00 00 00 00	 call	 ?AddToDIV32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV32Counter
  00b43	83 c4 04	 add	 esp, 4
$LN12@DivRem_X_1:

; 646  : #endif
; 647  :         }
; 648  : 
; 649  :         if (u_count & 0x4)

  00b46	8b 55 f4	 mov	 edx, DWORD PTR _u_count$[ebp]
  00b49	83 e2 04	 and	 edx, 4
  00b4c	0f 84 e4 00 00
	00		 je	 $LN15@DivRem_X_1

; 650  :         {
; 651  :             r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &qp[-0]);

  00b52	b8 04 00 00 00	 mov	 eax, 4
  00b57	6b c8 00	 imul	 ecx, eax, 0
  00b5a	03 4d f8	 add	 ecx, DWORD PTR _qp$[ebp]
  00b5d	51		 push	 ecx
  00b5e	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00b61	52		 push	 edx
  00b62	b8 04 00 00 00	 mov	 eax, 4
  00b67	6b c8 00	 imul	 ecx, eax, 0
  00b6a	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  00b6d	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00b70	50		 push	 eax
  00b71	8b 4d f0	 mov	 ecx, DWORD PTR _r$[ebp]
  00b74	51		 push	 ecx
  00b75	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00b7a	83 c4 10	 add	 esp, 16			; 00000010H
  00b7d	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 652  :             r = _DIVREM_SINGLE_UNIT(r, up[-1], v, &qp[-1]);

  00b80	ba 04 00 00 00	 mov	 edx, 4
  00b85	6b c2 ff	 imul	 eax, edx, -1
  00b88	03 45 f8	 add	 eax, DWORD PTR _qp$[ebp]
  00b8b	50		 push	 eax
  00b8c	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00b8f	51		 push	 ecx
  00b90	ba 04 00 00 00	 mov	 edx, 4
  00b95	6b c2 ff	 imul	 eax, edx, -1
  00b98	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  00b9b	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00b9e	52		 push	 edx
  00b9f	8b 45 f0	 mov	 eax, DWORD PTR _r$[ebp]
  00ba2	50		 push	 eax
  00ba3	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00ba8	83 c4 10	 add	 esp, 16			; 00000010H
  00bab	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 653  :             r = _DIVREM_SINGLE_UNIT(r, up[-2], v, &qp[-2]);

  00bae	b9 04 00 00 00	 mov	 ecx, 4
  00bb3	6b d1 fe	 imul	 edx, ecx, -2
  00bb6	03 55 f8	 add	 edx, DWORD PTR _qp$[ebp]
  00bb9	52		 push	 edx
  00bba	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00bbd	50		 push	 eax
  00bbe	b9 04 00 00 00	 mov	 ecx, 4
  00bc3	6b d1 fe	 imul	 edx, ecx, -2
  00bc6	8b 45 fc	 mov	 eax, DWORD PTR _up$[ebp]
  00bc9	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00bcc	51		 push	 ecx
  00bcd	8b 55 f0	 mov	 edx, DWORD PTR _r$[ebp]
  00bd0	52		 push	 edx
  00bd1	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00bd6	83 c4 10	 add	 esp, 16			; 00000010H
  00bd9	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 654  :             r = _DIVREM_SINGLE_UNIT(r, up[-3], v, &qp[-3]);

  00bdc	b8 04 00 00 00	 mov	 eax, 4
  00be1	6b c8 fd	 imul	 ecx, eax, -3
  00be4	03 4d f8	 add	 ecx, DWORD PTR _qp$[ebp]
  00be7	51		 push	 ecx
  00be8	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00beb	52		 push	 edx
  00bec	b8 04 00 00 00	 mov	 eax, 4
  00bf1	6b c8 fd	 imul	 ecx, eax, -3
  00bf4	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  00bf7	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00bfa	50		 push	 eax
  00bfb	8b 4d f0	 mov	 ecx, DWORD PTR _r$[ebp]
  00bfe	51		 push	 ecx
  00bff	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00c04	83 c4 10	 add	 esp, 16			; 00000010H
  00c07	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 655  :             up -= 4;

  00c0a	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  00c0d	83 ea 10	 sub	 edx, 16			; 00000010H
  00c10	89 55 fc	 mov	 DWORD PTR _up$[ebp], edx

; 656  :             qp -= 4;

  00c13	8b 45 f8	 mov	 eax, DWORD PTR _qp$[ebp]
  00c16	83 e8 10	 sub	 eax, 16			; 00000010H
  00c19	89 45 f8	 mov	 DWORD PTR _qp$[ebp], eax

; 657  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 658  :             if (sizeof(r) == sizeof(_UINT64_T))

  00c1c	33 c9		 xor	 ecx, ecx
  00c1e	74 0c		 je	 SHORT $LN16@DivRem_X_1

; 659  :                 AddToDIV64Counter(4);

  00c20	6a 04		 push	 4
  00c22	e8 00 00 00 00	 call	 ?AddToDIV64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV64Counter
  00c27	83 c4 04	 add	 esp, 4

; 660  :             else

  00c2a	eb 0a		 jmp	 SHORT $LN15@DivRem_X_1
$LN16@DivRem_X_1:

; 661  :                 AddToDIV32Counter(4);

  00c2c	6a 04		 push	 4
  00c2e	e8 00 00 00 00	 call	 ?AddToDIV32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV32Counter
  00c33	83 c4 04	 add	 esp, 4
$LN15@DivRem_X_1:

; 662  : #endif
; 663  :         }
; 664  : 
; 665  :         if (u_count & 0x2)

  00c36	8b 55 f4	 mov	 edx, DWORD PTR _u_count$[ebp]
  00c39	83 e2 02	 and	 edx, 2
  00c3c	0f 84 88 00 00
	00		 je	 $LN18@DivRem_X_1

; 666  :         {
; 667  :             r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &qp[-0]);

  00c42	b8 04 00 00 00	 mov	 eax, 4
  00c47	6b c8 00	 imul	 ecx, eax, 0
  00c4a	03 4d f8	 add	 ecx, DWORD PTR _qp$[ebp]
  00c4d	51		 push	 ecx
  00c4e	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00c51	52		 push	 edx
  00c52	b8 04 00 00 00	 mov	 eax, 4
  00c57	6b c8 00	 imul	 ecx, eax, 0
  00c5a	8b 55 fc	 mov	 edx, DWORD PTR _up$[ebp]
  00c5d	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00c60	50		 push	 eax
  00c61	8b 4d f0	 mov	 ecx, DWORD PTR _r$[ebp]
  00c64	51		 push	 ecx
  00c65	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00c6a	83 c4 10	 add	 esp, 16			; 00000010H
  00c6d	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 668  :             r = _DIVREM_SINGLE_UNIT(r, up[-1], v, &qp[-1]);

  00c70	ba 04 00 00 00	 mov	 edx, 4
  00c75	6b c2 ff	 imul	 eax, edx, -1
  00c78	03 45 f8	 add	 eax, DWORD PTR _qp$[ebp]
  00c7b	50		 push	 eax
  00c7c	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00c7f	51		 push	 ecx
  00c80	ba 04 00 00 00	 mov	 edx, 4
  00c85	6b c2 ff	 imul	 eax, edx, -1
  00c88	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  00c8b	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00c8e	52		 push	 edx
  00c8f	8b 45 f0	 mov	 eax, DWORD PTR _r$[ebp]
  00c92	50		 push	 eax
  00c93	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00c98	83 c4 10	 add	 esp, 16			; 00000010H
  00c9b	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 669  :             up -= 2;

  00c9e	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  00ca1	83 e9 08	 sub	 ecx, 8
  00ca4	89 4d fc	 mov	 DWORD PTR _up$[ebp], ecx

; 670  :             qp -= 2;

  00ca7	8b 55 f8	 mov	 edx, DWORD PTR _qp$[ebp]
  00caa	83 ea 08	 sub	 edx, 8
  00cad	89 55 f8	 mov	 DWORD PTR _qp$[ebp], edx

; 671  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 672  :             if (sizeof(r) == sizeof(_UINT64_T))

  00cb0	33 c0		 xor	 eax, eax
  00cb2	74 0c		 je	 SHORT $LN19@DivRem_X_1

; 673  :                 AddToDIV64Counter(2);

  00cb4	6a 02		 push	 2
  00cb6	e8 00 00 00 00	 call	 ?AddToDIV64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV64Counter
  00cbb	83 c4 04	 add	 esp, 4

; 674  :             else

  00cbe	eb 0a		 jmp	 SHORT $LN18@DivRem_X_1
$LN19@DivRem_X_1:

; 675  :                 AddToDIV32Counter(2);

  00cc0	6a 02		 push	 2
  00cc2	e8 00 00 00 00	 call	 ?AddToDIV32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToDIV32Counter
  00cc7	83 c4 04	 add	 esp, 4
$LN18@DivRem_X_1:

; 676  : #endif
; 677  :         }
; 678  : 
; 679  :         if (u_count & 0x1)

  00cca	8b 4d f4	 mov	 ecx, DWORD PTR _u_count$[ebp]
  00ccd	83 e1 01	 and	 ecx, 1
  00cd0	74 50		 je	 SHORT $LN21@DivRem_X_1

; 680  :         {
; 681  :             r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &qp[-0]);

  00cd2	ba 04 00 00 00	 mov	 edx, 4
  00cd7	6b c2 00	 imul	 eax, edx, 0
  00cda	03 45 f8	 add	 eax, DWORD PTR _qp$[ebp]
  00cdd	50		 push	 eax
  00cde	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00ce1	51		 push	 ecx
  00ce2	ba 04 00 00 00	 mov	 edx, 4
  00ce7	6b c2 00	 imul	 eax, edx, 0
  00cea	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  00ced	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00cf0	52		 push	 edx
  00cf1	8b 45 f0	 mov	 eax, DWORD PTR _r$[ebp]
  00cf4	50		 push	 eax
  00cf5	e8 00 00 00 00	 call	 __DIVREM_SINGLE_UNIT
  00cfa	83 c4 10	 add	 esp, 16			; 00000010H
  00cfd	89 45 f0	 mov	 DWORD PTR _r$[ebp], eax

; 682  :             up -= 1;

  00d00	8b 4d fc	 mov	 ecx, DWORD PTR _up$[ebp]
  00d03	83 e9 04	 sub	 ecx, 4
  00d06	89 4d fc	 mov	 DWORD PTR _up$[ebp], ecx

; 683  :             qp -= 1;

  00d09	8b 55 f8	 mov	 edx, DWORD PTR _qp$[ebp]
  00d0c	83 ea 04	 sub	 edx, 4
  00d0f	89 55 f8	 mov	 DWORD PTR _qp$[ebp], edx

; 684  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 685  :             if (sizeof(r) == sizeof(_UINT64_T))

  00d12	33 c0		 xor	 eax, eax
  00d14	74 07		 je	 SHORT $LN22@DivRem_X_1

; 686  :                 IncrementDIV64Counter();

  00d16	e8 00 00 00 00	 call	 ?IncrementDIV64Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementDIV64Counter

; 687  :             else

  00d1b	eb 05		 jmp	 SHORT $LN21@DivRem_X_1
$LN22@DivRem_X_1:

; 688  :                 IncrementDIV32Counter();

  00d1d	e8 00 00 00 00	 call	 ?IncrementDIV32Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementDIV32Counter
$LN21@DivRem_X_1:

; 689  : #endif
; 690  :         }
; 691  : 
; 692  :         *r_buf = r;

  00d22	8b 4d 18	 mov	 ecx, DWORD PTR _r_buf$[ebp]
  00d25	8b 55 f0	 mov	 edx, DWORD PTR _r$[ebp]
  00d28	89 11		 mov	 DWORD PTR [ecx], edx

; 693  :     }

  00d2a	83 c4 14	 add	 esp, 20			; 00000014H
  00d2d	3b ec		 cmp	 ebp, esp
  00d2f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00d34	8b e5		 mov	 esp, ebp
  00d36	5d		 pop	 ebp
  00d37	c3		 ret	 0
?DivRem_X_1W@Internal@Core@Math@Palmtree@@YAXPAIII00@Z ENDP ; Palmtree::Math::Core::Internal::DivRem_X_1W
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 18		 push	 24			; 00000018H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException, COMDAT
; _this$ = ecx

; 295  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 296  :         }

  00047	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException, COMDAT
; _this$ = ecx

; 291  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 290  :             : Exception(p)

  00037	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 291  :         {

  0004a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@

; 292  :         }

  00053	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00060	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00067	59		 pop	 ecx
  00068	83 c4 10	 add	 esp, 16			; 00000010H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
_data$ = 12						; size = 4
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException, COMDAT
; _this$ = ecx

; 286  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 285  :             : Exception(PMC_STATUS_INTERNAL_ERROR, message, data)

  00037	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _message$[ebp]
  0003e	51		 push	 ecx
  0003f	68 00 ff ff ff	 push	 -256			; ffffff00H
  00044	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 286  :         {

  00053	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00056	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@

; 287  :         }

  0005c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00063	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00066	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00069	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00070	59		 pop	 ecx
  00071	83 c4 10	 add	 esp, 16			; 00000010H
  00074	3b ec		 cmp	 ebp, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GDivisionByZeroException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDivisionByZeroException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::DivisionByZeroException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::DivisionByZeroException::~DivisionByZeroException
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 18		 push	 24			; 00000018H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GDivisionByZeroException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::DivisionByZeroException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::DivisionByZeroException::~DivisionByZeroException, COMDAT
; _this$ = ecx

; 181  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 182  :         }

  00047	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::DivisionByZeroException::~DivisionByZeroException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException, COMDAT
; _this$ = ecx

; 177  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 176  :             : Exception(p)

  00037	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 177  :         {

  0004a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@

; 178  :         }

  00053	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00060	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00067	59		 pop	 ecx
  00068	83 c4 10	 add	 esp, 16			; 00000010H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z PROC ; Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException, COMDAT
; _this$ = ecx

; 172  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 171  :             : Exception(PMC_STATUS_DIVISION_BY_ZERO, message)

  00037	8b 45 08	 mov	 eax, DWORD PTR _message$[ebp]
  0003a	50		 push	 eax
  0003b	6a fb		 push	 -5			; fffffffbH
  0003d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 172  :         {

  0004c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@

; 173  :         }

  00055	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	83 c4 10	 add	 esp, 16			; 00000010H
  0006d	3b ec		 cmp	 ebp, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ENDP ; Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 18		 push	 24			; 00000018H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException, COMDAT
; _this$ = ecx

; 124  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 125  :         }

  00047	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException, COMDAT
; _this$ = ecx

; 120  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 119  :             : Exception(p)

  00037	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 120  :         {

  0004a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@

; 121  :         }

  00053	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00060	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00067	59		 pop	 ecx
  00068	83 c4 10	 add	 esp, 16			; 00000010H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
_param_name$ = 12					; size = 4
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException, COMDAT
; _this$ = ecx

; 115  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 114  :             : Exception(PMC_STATUS_ARGUMENT_NULL_ERROR, message, param_name)

  00037	8b 45 0c	 mov	 eax, DWORD PTR _param_name$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _message$[ebp]
  0003e	51		 push	 ecx
  0003f	6a fe		 push	 -2			; fffffffeH
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00049	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 115  :         {

  00050	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00053	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@

; 116  :         }

  00059	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00060	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00063	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00066	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006d	59		 pop	 ecx
  0006e	83 c4 10	 add	 esp, 16			; 00000010H
  00071	3b ec		 cmp	 ebp, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 18		 push	 24			; 00000018H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ PROC	; Palmtree::Math::Core::Internal::Exception::~Exception, COMDAT
; _this$ = ecx

; 70   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 71   :         }

  00047	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ENDP	; Palmtree::Math::Core::Internal::Exception::~Exception
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT
; _this$ = ecx

; 62   :         Exception(const Exception& p) noexcept(true)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00049	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 63   :         {
; 64   :             _code = p._code;

  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00055	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00058	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 65   :             _message = p._message;

  0005b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00061	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00064	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 66   :             _data = p._data;

  00067	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  0006d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00070	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 67   :         }

  00073	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0007a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0007d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00080	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00087	59		 pop	 ecx
  00088	83 c4 10	 add	 esp, 16			; 00000010H
  0008b	3b ec		 cmp	 ebp, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_code$ = 8						; size = 4
_message$ = 12						; size = 4
_data$ = 16						; size = 4
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT
; _this$ = ecx

; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00049	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 55   :         {
; 56   :             _code = code;

  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	8b 55 08	 mov	 edx, DWORD PTR _code$[ebp]
  00055	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 57   :             _message = message;

  00058	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	8b 4d 0c	 mov	 ecx, DWORD PTR _message$[ebp]
  0005e	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 58   :             _data = data;

  00061	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00064	8b 45 10	 mov	 eax, DWORD PTR _data$[ebp]
  00067	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 59   :         }

  0006a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00071	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00077	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007e	59		 pop	 ecx
  0007f	83 c4 10	 add	 esp, 16			; 00000010H
  00082	3b ec		 cmp	 ebp, esp
  00084	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_code$ = 8						; size = 4
_message$ = 12						; size = 4
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT
; _this$ = ecx

; 47   :         Exception(PMC_STATUS_CODE code, const wchar_t* message) noexcept(true)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00049	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 48   :         {
; 49   :             _code = code;

  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	8b 55 08	 mov	 edx, DWORD PTR _code$[ebp]
  00055	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 50   :             _message = message;

  00058	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	8b 4d 0c	 mov	 ecx, DWORD PTR _message$[ebp]
  0005e	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 51   :             _data = nullptr;

  00061	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00064	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0

; 52   :         }

  0006b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00072	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00075	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00078	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007f	59		 pop	 ecx
  00080	83 c4 10	 add	 esp, 16			; 00000010H
  00083	3b ec		 cmp	 ebp, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 90   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __9BB4E194_vcruntime_exception@h
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 91   :         return _Data._What ? _Data._What : "Unknown exception";

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00028	74 0b		 je	 SHORT $LN3@what
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00030	89 55 f8	 mov	 DWORD PTR tv69[ebp], edx
  00033	eb 07		 jmp	 SHORT $LN4@what
$LN3@what:
  00035	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
$LN4@what:
  0003c	8b 45 f8	 mov	 eax, DWORD PTR tv69[ebp]

; 92   :     }

  0003f	83 c4 08	 add	 esp, 8
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 85   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1exception@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __9BB4E194_vcruntime_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 86   :         __std_exception_destroy(&_Data);

  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	83 c1 04	 add	 ecx, 4
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 ___std_exception_destroy
  0004c	83 c4 04	 add	 esp, 4

; 87   :     }

  0004f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00052	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00059	59		 pop	 ecx
  0005a	83 c4 10	 add	 esp, 16			; 00000010H
  0005d	3b ec		 cmp	 ebp, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1exception@std@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1exception@std@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0exception@std@@QAE@XZ PROC				; std::exception::exception, COMDAT
; _this$ = ecx

; 50   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0exception@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __9BB4E194_vcruntime_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 49   :         : _Data()

  00040	33 c9		 xor	 ecx, ecx
  00042	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00045	83 c2 04	 add	 edx, 4
  00048	89 0a		 mov	 DWORD PTR [edx], ecx
  0004a	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 51   :     }

  0004d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	83 c4 10	 add	 esp, 16			; 00000010H
  0005e	3b ec		 cmp	 ebp, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0exception@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0exception@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0exception@std@@QAE@XZ ENDP				; std::exception::exception
END
