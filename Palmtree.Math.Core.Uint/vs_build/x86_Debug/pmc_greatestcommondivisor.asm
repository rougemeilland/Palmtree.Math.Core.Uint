; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_greatestcommondivisor.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__E05E7037_autogenerated_inline_func@h DB 01H
__3257AA0B_pmc_greatestcommondivisor@c DB 01H
msvcjmc	ENDS
PUBLIC	_Initialize_GreatestCommonDivisor
PUBLIC	_PMC_GreatestCommonDivisor_I_X@12
PUBLIC	_PMC_GreatestCommonDivisor_L_X@16
PUBLIC	_PMC_GreatestCommonDivisor_X_I@12
PUBLIC	_PMC_GreatestCommonDivisor_X_L@16
PUBLIC	_PMC_GreatestCommonDivisor_X_X@12
PUBLIC	__JustMyCode_Default
EXTRN	_AllocateBlock:PROC
EXTRN	_DeallocateBlock:PROC
EXTRN	_CheckBlockLight:PROC
EXTRN	_AllocateNumber:PROC
EXTRN	_CommitNumber:PROC
EXTRN	_CheckNumber:PROC
EXTRN	_DuplicateNumber:PROC
EXTRN	_From_I_Imp:PROC
EXTRN	_From_L_Imp:PROC
EXTRN	_RightShift_Imp:PROC
EXTRN	_LeftShift_Imp:PROC
EXTRN	_Subtruct_Imp:PROC
EXTRN	_Compare_Imp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__aullshr:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
_TEXT	SEGMENT
tv238 = -332						; size = 4
_w_buf_count$1 = -324					; size = 4
_k$2 = -316						; size = 4
_v_tzcnt$3 = -312					; size = 4
_u_tzcnt$4 = -308					; size = 4
_nw_check_code$5 = -300					; size = 4
_work_v_buf$6 = -292					; size = 4
_work_v_buf_words$7 = -284				; size = 4
_work_v_buf_code$8 = -272				; size = 4
_work_u_buf$9 = -264					; size = 4
_work_u_buf_words$10 = -256				; size = 4
_work_u_buf_code$11 = -244				; size = 4
_work_bit_count$12 = -236				; size = 4
_v_bit_count$13 = -232					; size = 4
_u_bit_count$14 = -228					; size = 4
_w_buf_count$15 = -220					; size = 4
_k$16 = -212						; size = 4
_v_tzcnt$17 = -208					; size = 4
_u_tzcnt$18 = -204					; size = 4
_nw_check_code$19 = -196				; size = 4
_work_v_buf$20 = -188					; size = 4
_work_v_buf_words$21 = -180				; size = 4
_work_v_buf_code$22 = -168				; size = 4
_work_u_buf$23 = -160					; size = 4
_work_u_buf_words$24 = -152				; size = 4
_work_u_buf_code$25 = -140				; size = 4
_work_bit_count$26 = -132				; size = 4
_v_bit_count$27 = -128					; size = 4
_w_buf_count$28 = -120					; size = 4
_k$29 = -112						; size = 4
_v_tzcnt$30 = -108					; size = 4
_u_tzcnt$31 = -104					; size = 4
_nw_check_code$32 = -96					; size = 4
_work_v_buf$33 = -88					; size = 4
_work_v_buf_words$34 = -80				; size = 4
_work_v_buf_code$35 = -68				; size = 4
_work_u_buf$36 = -60					; size = 4
_work_u_buf_words$37 = -52				; size = 4
_work_u_buf_code$38 = -40				; size = 4
_work_bit_count$39 = -32				; size = 4
_v_bit_count$40 = -28					; size = 4
_v_lo$41 = -24						; size = 4
_v_hi$42 = -16						; size = 4
_u_bit_count$43 = -8					; size = 4
_result$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_w$ = 20						; size = 4
_PMC_GreatestCommonDivisor_X_L_Imp PROC

; 222  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 332				; 0000014cH
	push	edi
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 83					; 00000053H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __3257AA0B_pmc_greatestcommondivisor@c
	call	@__CheckForDebuggerJustMyCode@4

; 223  :     PMC_STATUS_CODE result;
; 224  :     if (u->IS_ZERO)

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN2@PMC_Greate

; 225  :     {
; 226  :         // u が 0 である場合
; 227  : 
; 228  :         if (v == 0)

	mov	edx, DWORD PTR _v$[ebp]
	or	edx, DWORD PTR _v$[ebp+4]
	jne	SHORT $LN4@PMC_Greate

; 229  :         {
; 230  :             // v が 0 である場合
; 231  : 
; 232  :             // u と v がともに 0 であり、GCD は一意に存在しないため、エラーを返す。
; 233  :             return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Greate

; 234  :         }

	jmp	SHORT $LN5@PMC_Greate
$LN4@PMC_Greate:

; 235  :         else
; 236  :         {
; 237  :             // v が 0 ではない場合
; 238  : 
; 239  :             // GCD は v そのものであるため、v を計算結果として返す。
; 240  :             if ((result = From_L_Imp(v, w)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	call	_From_L_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Greate

; 241  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Greate
$LN5@PMC_Greate:

; 242  :         }
; 243  :     }

	jmp	$LN3@PMC_Greate
$LN2@PMC_Greate:

; 244  :     else
; 245  :     {
; 246  :         // u が 0 ではない場合
; 247  : 
; 248  :         if (v == 0)

	mov	eax, DWORD PTR _v$[ebp]
	or	eax, DWORD PTR _v$[ebp+4]
	jne	SHORT $LN7@PMC_Greate

; 249  :         {
; 250  :             // v が 0 である場合
; 251  : 
; 252  :             // GCD は u そのものであるため、u を計算結果として返す。
; 253  :             if ((result = DuplicateNumber(u, w)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _w$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN9@PMC_Greate

; 254  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Greate
$LN9@PMC_Greate:

; 255  :         }

	jmp	$LN3@PMC_Greate
$LN7@PMC_Greate:

; 256  :         else
; 257  :         {
; 258  :             // u と v がともに 0 ではない場合
; 259  : 
; 260  :             // u と v の GCD を計算する
; 261  :             if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)

	mov	eax, 1
	test	eax, eax
	je	$LN10@PMC_Greate

; 262  :             {
; 263  :                 // _UINT64_T が 1 ワードで表現しきれない場合
; 264  : 
; 265  :                 __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _u_bit_count$43[ebp], edx

; 266  :                 _UINT32_T v_hi;
; 267  :                 _UINT32_T v_lo = _FROMDWORDTOWORD(v, &v_hi);

	lea	eax, DWORD PTR _v_hi$42[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	call	__FROMDWORDTOWORD
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _v_lo$41[ebp], eax

; 268  :                 if (v_hi == 0)

	cmp	DWORD PTR _v_hi$42[ebp], 0
	jne	$LN12@PMC_Greate

; 269  :                 {
; 270  :                     // v の値が 32bit で表現可能な場合
; 271  :                     __UNIT_TYPE v_bit_count = sizeof(v_lo) * 8 - _LZCNT_ALT_32(v_lo);

	mov	eax, DWORD PTR _v_lo$41[ebp]
	push	eax
	call	__LZCNT_ALT_32
	add	esp, 4
	mov	ecx, 32					; 00000020H
	sub	ecx, eax
	mov	DWORD PTR _v_bit_count$40[ebp], ecx

; 272  :                     __UNIT_TYPE work_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count);

	mov	edx, DWORD PTR _v_bit_count$40[ebp]
	push	edx
	mov	eax, DWORD PTR _u_bit_count$43[ebp]
	push	eax
	call	__MAXIMUM_UNIT
	add	esp, 8
	mov	DWORD PTR _work_bit_count$39[ebp], eax

; 273  : 
; 274  :                     __UNIT_TYPE work_u_buf_code;
; 275  :                     __UNIT_TYPE work_u_buf_words;
; 276  :                     __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	ecx, DWORD PTR _work_u_buf_code$38[ebp]
	push	ecx
	lea	edx, DWORD PTR _work_u_buf_words$37[ebp]
	push	edx
	mov	eax, DWORD PTR _work_bit_count$39[ebp]
	push	eax
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_u_buf$36[ebp], eax

; 277  :                     if (work_u_buf == NULL)

	cmp	DWORD PTR _work_u_buf$36[ebp], 0
	jne	SHORT $LN14@PMC_Greate

; 278  :                         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@PMC_Greate
$LN14@PMC_Greate:

; 279  : 
; 280  :                     __UNIT_TYPE work_v_buf_code;
; 281  :                     __UNIT_TYPE work_v_buf_words;
; 282  :                     __UNIT_TYPE* work_v_buf = AllocateBlock(work_bit_count, &work_v_buf_words, &work_v_buf_code);

	lea	ecx, DWORD PTR _work_v_buf_code$35[ebp]
	push	ecx
	lea	edx, DWORD PTR _work_v_buf_words$34[ebp]
	push	edx
	mov	eax, DWORD PTR _work_bit_count$39[ebp]
	push	eax
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_v_buf$33[ebp], eax

; 283  :                     if (work_v_buf == NULL)

	cmp	DWORD PTR _work_v_buf$33[ebp], 0
	jne	SHORT $LN15@PMC_Greate

; 284  :                     {
; 285  :                         DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	ecx, DWORD PTR _work_u_buf_words$37[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_u_buf$36[ebp]
	push	edx
	call	_DeallocateBlock
	add	esp, 8

; 286  :                         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@PMC_Greate
$LN15@PMC_Greate:

; 287  :                     }
; 288  : 
; 289  :                     __UNIT_TYPE nw_check_code;
; 290  :                     if ((result = AllocateNumber(w, work_bit_count, &nw_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw_check_code$32[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_bit_count$39[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN16@PMC_Greate

; 291  :                     {
; 292  :                         DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	eax, DWORD PTR _work_v_buf_words$34[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_v_buf$33[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 293  :                         DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	edx, DWORD PTR _work_u_buf_words$37[ebp]
	push	edx
	mov	eax, DWORD PTR _work_u_buf$36[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 294  :                         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Greate
$LN16@PMC_Greate:

; 295  :                     }
; 296  : 
; 297  :                     __UNIT_TYPE u_tzcnt = u->TRAILING_ZERO_BITS_COUNT;

	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _u_tzcnt$31[ebp], edx

; 298  :                     __UNIT_TYPE v_tzcnt = _TZCNT_ALT_UNIT(v_lo);

	mov	eax, DWORD PTR _v_lo$41[ebp]
	push	eax
	call	__TZCNT_ALT_UNIT
	add	esp, 4
	mov	DWORD PTR _v_tzcnt$30[ebp], eax

; 299  :                     __UNIT_TYPE k = _MINIMUM_UNIT(u_tzcnt, v_tzcnt);

	mov	ecx, DWORD PTR _v_tzcnt$30[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_tzcnt$31[ebp]
	push	edx
	call	__MINIMUM_UNIT
	add	esp, 8
	mov	DWORD PTR _k$29[ebp], eax

; 300  :                     if (u_tzcnt > 0)

	cmp	DWORD PTR _u_tzcnt$31[ebp], 0
	jbe	SHORT $LN17@PMC_Greate

; 301  :                         RightShift_Imp(u->BLOCK, u->UNIT_WORD_COUNT, u_tzcnt, work_u_buf, FALSE);

	push	0
	mov	eax, DWORD PTR _work_u_buf$36[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_tzcnt$31[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_RightShift_Imp
	add	esp, 20					; 00000014H
	jmp	SHORT $LN18@PMC_Greate
$LN17@PMC_Greate:

; 302  :                     else
; 303  :                         _COPY_MEMORY_UNIT(work_u_buf, u->BLOCK, u->UNIT_WORD_COUNT);

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _work_u_buf$36[ebp]
	push	ecx
	call	__COPY_MEMORY_UNIT
	add	esp, 12					; 0000000cH
$LN18@PMC_Greate:

; 304  :                     work_v_buf[0] = v_lo >> v_tzcnt;

	mov	edx, DWORD PTR _v_lo$41[ebp]
	mov	ecx, DWORD PTR _v_tzcnt$30[ebp]
	shr	edx, cl
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _work_v_buf$33[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 305  : 
; 306  :                     __UNIT_TYPE w_buf_count;
; 307  :                     GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), (*w)->BLOCK, &w_buf_count);

	lea	ecx, DWORD PTR _w_buf_count$28[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	push	32					; 00000020H
	mov	edx, DWORD PTR _work_bit_count$39[ebp]
	push	edx
	call	__DIVIDE_CEILING_UNIT
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR _work_v_buf$33[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_u_buf$36[ebp]
	push	ecx
	call	_GreatestCommonDivisor_Imp
	add	esp, 20					; 00000014H

; 308  :                     if ((result = CheckBlockLight(work_u_buf, work_u_buf_code)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _work_u_buf_code$38[ebp]
	push	edx
	mov	eax, DWORD PTR _work_u_buf$36[ebp]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN19@PMC_Greate

; 309  :                         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Greate
$LN19@PMC_Greate:

; 310  :                     if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _work_v_buf_code$35[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_v_buf$33[ebp]
	push	edx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN20@PMC_Greate

; 311  :                         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Greate
$LN20@PMC_Greate:

; 312  :                     if ((result = CheckBlockLight((*w)->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nw_check_code$32[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN21@PMC_Greate

; 313  :                         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Greate
$LN21@PMC_Greate:

; 314  :                     DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	ecx, DWORD PTR _work_v_buf_words$34[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_v_buf$33[ebp]
	push	edx
	call	_DeallocateBlock
	add	esp, 8

; 315  :                     DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	eax, DWORD PTR _work_u_buf_words$37[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_u_buf$36[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 316  : 
; 317  :                     LeftShift_Imp((*w)->BLOCK, w_buf_count, k, (*w)->BLOCK, TRUE);

	push	1
	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _k$29[ebp]
	push	edx
	mov	eax, DWORD PTR _w_buf_count$28[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_LeftShift_Imp
	add	esp, 20					; 00000014H

; 318  :                     if ((result = CheckBlockLight((*w)->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _nw_check_code$32[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN22@PMC_Greate

; 319  :                         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Greate
$LN22@PMC_Greate:

; 320  :                     CommitNumber(*w);

	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_CommitNumber
	add	esp, 4

; 321  :                 }

	jmp	$LN13@PMC_Greate
$LN12@PMC_Greate:

; 322  :                 else
; 323  :                 {
; 324  :                     // y の値が 32bit では表現できない場合
; 325  :                     __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v_hi);

	mov	ecx, DWORD PTR _v_hi$42[ebp]
	push	ecx
	call	__LZCNT_ALT_32
	add	esp, 4
	mov	edx, 64					; 00000040H
	sub	edx, eax
	mov	DWORD PTR _v_bit_count$27[ebp], edx

; 326  :                     __UNIT_TYPE work_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count);

	mov	eax, DWORD PTR _v_bit_count$27[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_bit_count$43[ebp]
	push	ecx
	call	__MAXIMUM_UNIT
	add	esp, 8
	mov	DWORD PTR _work_bit_count$26[ebp], eax

; 327  : 
; 328  :                     __UNIT_TYPE work_u_buf_code;
; 329  :                     __UNIT_TYPE work_u_buf_words;
; 330  :                     __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	edx, DWORD PTR _work_u_buf_code$25[ebp]
	push	edx
	lea	eax, DWORD PTR _work_u_buf_words$24[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_bit_count$26[ebp]
	push	ecx
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_u_buf$23[ebp], eax

; 331  :                     if (work_u_buf == NULL)

	cmp	DWORD PTR _work_u_buf$23[ebp], 0
	jne	SHORT $LN23@PMC_Greate

; 332  :                         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@PMC_Greate
$LN23@PMC_Greate:

; 333  : 
; 334  :                     __UNIT_TYPE work_v_buf_code;
; 335  :                     __UNIT_TYPE work_v_buf_words;
; 336  :                     __UNIT_TYPE* work_v_buf = AllocateBlock(work_bit_count, &work_v_buf_words, &work_v_buf_code);

	lea	edx, DWORD PTR _work_v_buf_code$22[ebp]
	push	edx
	lea	eax, DWORD PTR _work_v_buf_words$21[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_bit_count$26[ebp]
	push	ecx
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_v_buf$20[ebp], eax

; 337  :                     if (work_v_buf == NULL)

	cmp	DWORD PTR _work_v_buf$20[ebp], 0
	jne	SHORT $LN24@PMC_Greate

; 338  :                     {
; 339  :                         DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	edx, DWORD PTR _work_u_buf_words$24[ebp]
	push	edx
	mov	eax, DWORD PTR _work_u_buf$23[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 340  :                         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@PMC_Greate
$LN24@PMC_Greate:

; 341  :                     }
; 342  : 
; 343  :                     __UNIT_TYPE nw_check_code;
; 344  :                     if ((result = AllocateNumber(w, work_bit_count, &nw_check_code)) != PMC_STATUS_OK)

	lea	ecx, DWORD PTR _nw_check_code$19[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_bit_count$26[ebp]
	push	edx
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN25@PMC_Greate

; 345  :                     {
; 346  :                         DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	ecx, DWORD PTR _work_v_buf_words$21[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_v_buf$20[ebp]
	push	edx
	call	_DeallocateBlock
	add	esp, 8

; 347  :                         DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	eax, DWORD PTR _work_u_buf_words$24[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_u_buf$23[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 348  :                         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Greate
$LN25@PMC_Greate:

; 349  :                     }
; 350  : 
; 351  :                     __UNIT_TYPE u_tzcnt = u->TRAILING_ZERO_BITS_COUNT;

	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _u_tzcnt$18[ebp], eax

; 352  :                     __UNIT_TYPE v_tzcnt = v_lo == 0 ? 32 + _TZCNT_ALT_UNIT(v_hi) : _TZCNT_ALT_UNIT(v_lo);

	cmp	DWORD PTR _v_lo$41[ebp], 0
	jne	SHORT $LN43@PMC_Greate
	mov	ecx, DWORD PTR _v_hi$42[ebp]
	push	ecx
	call	__TZCNT_ALT_UNIT
	add	esp, 4
	add	eax, 32					; 00000020H
	mov	DWORD PTR tv238[ebp], eax
	jmp	SHORT $LN44@PMC_Greate
$LN43@PMC_Greate:
	mov	edx, DWORD PTR _v_lo$41[ebp]
	push	edx
	call	__TZCNT_ALT_UNIT
	add	esp, 4
	mov	DWORD PTR tv238[ebp], eax
$LN44@PMC_Greate:
	mov	eax, DWORD PTR tv238[ebp]
	mov	DWORD PTR _v_tzcnt$17[ebp], eax

; 353  :                     __UNIT_TYPE k = _MINIMUM_UNIT(u_tzcnt, v_tzcnt);

	mov	ecx, DWORD PTR _v_tzcnt$17[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_tzcnt$18[ebp]
	push	edx
	call	__MINIMUM_UNIT
	add	esp, 8
	mov	DWORD PTR _k$16[ebp], eax

; 354  :                     if (u_tzcnt > 0)

	cmp	DWORD PTR _u_tzcnt$18[ebp], 0
	jbe	SHORT $LN26@PMC_Greate

; 355  :                         RightShift_Imp(u->BLOCK, u->UNIT_WORD_COUNT, u_tzcnt, work_u_buf, FALSE);

	push	0
	mov	eax, DWORD PTR _work_u_buf$23[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_tzcnt$18[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_RightShift_Imp
	add	esp, 20					; 00000014H
	jmp	SHORT $LN27@PMC_Greate
$LN26@PMC_Greate:

; 356  :                     else
; 357  :                         _COPY_MEMORY_UNIT(work_u_buf, u->BLOCK, u->UNIT_WORD_COUNT);

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _work_u_buf$23[ebp]
	push	ecx
	call	__COPY_MEMORY_UNIT
	add	esp, 12					; 0000000cH
$LN27@PMC_Greate:

; 358  :                     work_v_buf[0] = v_lo;

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _work_v_buf$20[ebp]
	mov	edx, DWORD PTR _v_lo$41[ebp]
	mov	DWORD PTR [ecx+eax], edx

; 359  :                     work_v_buf[1] = v_hi;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _work_v_buf$20[ebp]
	mov	edx, DWORD PTR _v_hi$42[ebp]
	mov	DWORD PTR [ecx+eax], edx

; 360  :                     if (v_tzcnt > 0)

	cmp	DWORD PTR _v_tzcnt$17[ebp], 0
	jbe	SHORT $LN28@PMC_Greate

; 361  :                         RightShift_Imp(work_v_buf, 2, v_tzcnt, work_v_buf, TRUE);

	push	1
	mov	eax, DWORD PTR _work_v_buf$20[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_tzcnt$17[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _work_v_buf$20[ebp]
	push	edx
	call	_RightShift_Imp
	add	esp, 20					; 00000014H
$LN28@PMC_Greate:

; 362  : 
; 363  :                     __UNIT_TYPE w_buf_count;
; 364  :                     GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), (*w)->BLOCK, &w_buf_count);

	lea	eax, DWORD PTR _w_buf_count$15[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR _work_bit_count$26[ebp]
	push	ecx
	call	__DIVIDE_CEILING_UNIT
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _work_v_buf$20[ebp]
	push	edx
	mov	eax, DWORD PTR _work_u_buf$23[ebp]
	push	eax
	call	_GreatestCommonDivisor_Imp
	add	esp, 20					; 00000014H

; 365  :                     if ((result = CheckBlockLight(work_u_buf, work_u_buf_code)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _work_u_buf_code$25[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_u_buf$23[ebp]
	push	edx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN29@PMC_Greate

; 366  :                         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Greate
$LN29@PMC_Greate:

; 367  :                     if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _work_v_buf_code$22[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_v_buf$20[ebp]
	push	ecx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN30@PMC_Greate

; 368  :                         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Greate
$LN30@PMC_Greate:

; 369  :                     if ((result = CheckBlockLight((*w)->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nw_check_code$19[ebp]
	push	edx
	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN31@PMC_Greate

; 370  :                         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Greate
$LN31@PMC_Greate:

; 371  :                     DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	eax, DWORD PTR _work_v_buf_words$21[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_v_buf$20[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 372  :                     DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	edx, DWORD PTR _work_u_buf_words$24[ebp]
	push	edx
	mov	eax, DWORD PTR _work_u_buf$23[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 373  : 
; 374  :                     LeftShift_Imp((*w)->BLOCK, w_buf_count, k, (*w)->BLOCK, TRUE);

	push	1
	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _k$16[ebp]
	push	ecx
	mov	edx, DWORD PTR _w_buf_count$15[ebp]
	push	edx
	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_LeftShift_Imp
	add	esp, 20					; 00000014H

; 375  :                     if ((result = CheckBlockLight((*w)->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nw_check_code$19[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN32@PMC_Greate

; 376  :                         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Greate
$LN32@PMC_Greate:

; 377  :                     CommitNumber(*w);

	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_CommitNumber
	add	esp, 4
$LN13@PMC_Greate:

; 378  :                 }
; 379  :             }

	jmp	$LN3@PMC_Greate
$LN10@PMC_Greate:

; 380  :             else
; 381  :             {
; 382  :                 // _UINT64_T が 1 ワードで表現できる場合
; 383  : 
; 384  :                 __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _u_bit_count$14[ebp], ecx

; 385  :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);

	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	call	__LZCNT_ALT_UNIT
	add	esp, 4
	mov	ecx, 64					; 00000040H
	sub	ecx, eax
	mov	DWORD PTR _v_bit_count$13[ebp], ecx

; 386  :                 __UNIT_TYPE work_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count);

	mov	edx, DWORD PTR _v_bit_count$13[ebp]
	push	edx
	mov	eax, DWORD PTR _u_bit_count$14[ebp]
	push	eax
	call	__MAXIMUM_UNIT
	add	esp, 8
	mov	DWORD PTR _work_bit_count$12[ebp], eax

; 387  : 
; 388  :                 __UNIT_TYPE work_u_buf_code;
; 389  :                 __UNIT_TYPE work_u_buf_words;
; 390  :                 __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	ecx, DWORD PTR _work_u_buf_code$11[ebp]
	push	ecx
	lea	edx, DWORD PTR _work_u_buf_words$10[ebp]
	push	edx
	mov	eax, DWORD PTR _work_bit_count$12[ebp]
	push	eax
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_u_buf$9[ebp], eax

; 391  :                 if (work_u_buf == NULL)

	cmp	DWORD PTR _work_u_buf$9[ebp], 0
	jne	SHORT $LN33@PMC_Greate

; 392  :                     return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@PMC_Greate
$LN33@PMC_Greate:

; 393  : 
; 394  :                 __UNIT_TYPE work_v_buf_code;
; 395  :                 __UNIT_TYPE work_v_buf_words;
; 396  :                 __UNIT_TYPE* work_v_buf = AllocateBlock(work_bit_count, &work_v_buf_words, &work_v_buf_code);

	lea	ecx, DWORD PTR _work_v_buf_code$8[ebp]
	push	ecx
	lea	edx, DWORD PTR _work_v_buf_words$7[ebp]
	push	edx
	mov	eax, DWORD PTR _work_bit_count$12[ebp]
	push	eax
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_v_buf$6[ebp], eax

; 397  :                 if (work_v_buf == NULL)

	cmp	DWORD PTR _work_v_buf$6[ebp], 0
	jne	SHORT $LN34@PMC_Greate

; 398  :                 {
; 399  :                     DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	ecx, DWORD PTR _work_u_buf_words$10[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_u_buf$9[ebp]
	push	edx
	call	_DeallocateBlock
	add	esp, 8

; 400  :                     return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@PMC_Greate
$LN34@PMC_Greate:

; 401  :                 }
; 402  : 
; 403  :                 __UNIT_TYPE nw_check_code;
; 404  :                 if ((result = AllocateNumber(w, work_bit_count, &nw_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw_check_code$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_bit_count$12[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN35@PMC_Greate

; 405  :                 {
; 406  :                     DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	eax, DWORD PTR _work_v_buf_words$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_v_buf$6[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 407  :                     DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	edx, DWORD PTR _work_u_buf_words$10[ebp]
	push	edx
	mov	eax, DWORD PTR _work_u_buf$9[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 408  :                     return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Greate
$LN35@PMC_Greate:

; 409  :                 }
; 410  : 
; 411  :                 __UNIT_TYPE u_tzcnt = u->TRAILING_ZERO_BITS_COUNT;

	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _u_tzcnt$4[ebp], edx

; 412  :                 __UNIT_TYPE v_tzcnt = _TZCNT_ALT_UNIT((__UNIT_TYPE)v);

	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	call	__TZCNT_ALT_UNIT
	add	esp, 4
	mov	DWORD PTR _v_tzcnt$3[ebp], eax

; 413  :                 __UNIT_TYPE k = _MINIMUM_UNIT(u_tzcnt, v_tzcnt);

	mov	ecx, DWORD PTR _v_tzcnt$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_tzcnt$4[ebp]
	push	edx
	call	__MINIMUM_UNIT
	add	esp, 8
	mov	DWORD PTR _k$2[ebp], eax

; 414  :                 if (u_tzcnt > 0)

	cmp	DWORD PTR _u_tzcnt$4[ebp], 0
	jbe	SHORT $LN36@PMC_Greate

; 415  :                     RightShift_Imp(u->BLOCK, u->UNIT_WORD_COUNT, u_tzcnt, work_u_buf, FALSE);

	push	0
	mov	eax, DWORD PTR _work_u_buf$9[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_tzcnt$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_RightShift_Imp
	add	esp, 20					; 00000014H
	jmp	SHORT $LN37@PMC_Greate
$LN36@PMC_Greate:

; 416  :                 else
; 417  :                     _COPY_MEMORY_UNIT(work_u_buf, u->BLOCK, u->UNIT_WORD_COUNT);

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _work_u_buf$9[ebp]
	push	ecx
	call	__COPY_MEMORY_UNIT
	add	esp, 12					; 0000000cH
$LN37@PMC_Greate:

; 418  :                 work_v_buf[0] = (__UNIT_TYPE)(v >> v_tzcnt);

	mov	eax, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _v$[ebp+4]
	mov	ecx, DWORD PTR _v_tzcnt$3[ebp]
	call	__aullshr
	mov	edx, 4
	imul	ecx, edx, 0
	mov	edx, DWORD PTR _work_v_buf$6[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 419  : 
; 420  :                 __UNIT_TYPE w_buf_count;
; 421  :                 GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), (*w)->BLOCK, &w_buf_count);

	lea	eax, DWORD PTR _w_buf_count$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR _work_bit_count$12[ebp]
	push	ecx
	call	__DIVIDE_CEILING_UNIT
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _work_v_buf$6[ebp]
	push	edx
	mov	eax, DWORD PTR _work_u_buf$9[ebp]
	push	eax
	call	_GreatestCommonDivisor_Imp
	add	esp, 20					; 00000014H

; 422  :                 if ((result = CheckBlockLight(work_u_buf, work_u_buf_code)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _work_u_buf_code$11[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_u_buf$9[ebp]
	push	edx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN38@PMC_Greate

; 423  :                     return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Greate
$LN38@PMC_Greate:

; 424  :                 if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _work_v_buf_code$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_v_buf$6[ebp]
	push	ecx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN39@PMC_Greate

; 425  :                     return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Greate
$LN39@PMC_Greate:

; 426  :                 if ((result = CheckBlockLight((*w)->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nw_check_code$5[ebp]
	push	edx
	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN40@PMC_Greate

; 427  :                     return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Greate
$LN40@PMC_Greate:

; 428  :                 DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	eax, DWORD PTR _work_v_buf_words$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_v_buf$6[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 429  :                 DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	edx, DWORD PTR _work_u_buf_words$10[ebp]
	push	edx
	mov	eax, DWORD PTR _work_u_buf$9[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 430  : 
; 431  :                 LeftShift_Imp((*w)->BLOCK, w_buf_count, k, (*w)->BLOCK, TRUE);

	push	1
	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _k$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _w_buf_count$1[ebp]
	push	edx
	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_LeftShift_Imp
	add	esp, 20					; 00000014H

; 432  :                 if ((result = CheckBlockLight((*w)->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nw_check_code$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN41@PMC_Greate

; 433  :                     return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Greate
$LN41@PMC_Greate:

; 434  :                 CommitNumber(*w);

	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_CommitNumber
	add	esp, 4
$LN3@PMC_Greate:

; 435  :             }
; 436  :         }
; 437  :     }
; 438  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Greate:

; 439  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN65@PMC_Greate
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN65@PMC_Greate:
	DD	19					; 00000013H
	DD	$LN64@PMC_Greate
$LN64@PMC_Greate:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN45@PMC_Greate
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN46@PMC_Greate
	DD	-52					; ffffffccH
	DD	4
	DD	$LN47@PMC_Greate
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN48@PMC_Greate
	DD	-80					; ffffffb0H
	DD	4
	DD	$LN49@PMC_Greate
	DD	-96					; ffffffa0H
	DD	4
	DD	$LN50@PMC_Greate
	DD	-120					; ffffff88H
	DD	4
	DD	$LN51@PMC_Greate
	DD	-140					; ffffff74H
	DD	4
	DD	$LN52@PMC_Greate
	DD	-152					; ffffff68H
	DD	4
	DD	$LN53@PMC_Greate
	DD	-168					; ffffff58H
	DD	4
	DD	$LN54@PMC_Greate
	DD	-180					; ffffff4cH
	DD	4
	DD	$LN55@PMC_Greate
	DD	-196					; ffffff3cH
	DD	4
	DD	$LN56@PMC_Greate
	DD	-220					; ffffff24H
	DD	4
	DD	$LN57@PMC_Greate
	DD	-244					; ffffff0cH
	DD	4
	DD	$LN58@PMC_Greate
	DD	-256					; ffffff00H
	DD	4
	DD	$LN59@PMC_Greate
	DD	-272					; fffffef0H
	DD	4
	DD	$LN60@PMC_Greate
	DD	-284					; fffffee4H
	DD	4
	DD	$LN61@PMC_Greate
	DD	-300					; fffffed4H
	DD	4
	DD	$LN62@PMC_Greate
	DD	-324					; fffffebcH
	DD	4
	DD	$LN63@PMC_Greate
$LN63@PMC_Greate:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN62@PMC_Greate:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN61@PMC_Greate:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN60@PMC_Greate:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN59@PMC_Greate:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN58@PMC_Greate:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN57@PMC_Greate:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN56@PMC_Greate:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN55@PMC_Greate:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN54@PMC_Greate:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN53@PMC_Greate:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN52@PMC_Greate:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN51@PMC_Greate:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN50@PMC_Greate:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN49@PMC_Greate:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN48@PMC_Greate:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN47@PMC_Greate:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN46@PMC_Greate:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN45@PMC_Greate:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	0
_PMC_GreatestCommonDivisor_X_L_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
_TEXT	SEGMENT
_w_buf_count$1 = -104					; size = 4
_k$2 = -96						; size = 4
_v_tzcnt$3 = -92					; size = 4
_u_tzcnt$4 = -88					; size = 4
_nw_check_code$5 = -80					; size = 4
_work_v_buf$6 = -72					; size = 4
_work_v_buf_words$7 = -64				; size = 4
_work_v_buf_code$8 = -52				; size = 4
_work_u_buf$9 = -44					; size = 4
_work_u_buf_words$10 = -36				; size = 4
_work_u_buf_code$11 = -24				; size = 4
_work_bit_count$12 = -16				; size = 4
_v_bit_count$13 = -12					; size = 4
_u_bit_count$14 = -8					; size = 4
_result$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_GreatestCommonDivisor_X_I_Imp PROC

; 80   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	push	edi
	lea	edi, DWORD PTR [ebp-108]
	mov	ecx, 27					; 0000001bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __3257AA0B_pmc_greatestcommondivisor@c
	call	@__CheckForDebuggerJustMyCode@4

; 81   :     PMC_STATUS_CODE result;
; 82   :     if (u->IS_ZERO)

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN2@PMC_Greate

; 83   :     {
; 84   :         // u が 0 である場合
; 85   : 
; 86   :         if (v == 0)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN4@PMC_Greate

; 87   :         {
; 88   :             // v が 0 である場合
; 89   : 
; 90   :             // u と v がともに 0 であり、GCD は一意に存在しないため、エラーを返す。
; 91   :             return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Greate

; 92   :         }

	jmp	SHORT $LN5@PMC_Greate
$LN4@PMC_Greate:

; 93   :         else
; 94   :         {
; 95   :             // v が 0 ではない場合
; 96   : 
; 97   :             // GCD は v そのものであるため、v を計算結果として返す。
; 98   :             if ((result = From_I_Imp(v, w)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	call	_From_I_Imp
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Greate

; 99   :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Greate
$LN5@PMC_Greate:

; 100  :         }
; 101  :     }

	jmp	$LN3@PMC_Greate
$LN2@PMC_Greate:

; 102  :     else
; 103  :     {
; 104  :         // u が 0 ではない場合
; 105  : 
; 106  :         if (v == 0)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN7@PMC_Greate

; 107  :         {
; 108  :             // v が 0 である場合
; 109  : 
; 110  :             // GCD は u そのものであるため、u を計算結果として返す。
; 111  :             if ((result = DuplicateNumber(u, w)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _w$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN9@PMC_Greate

; 112  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Greate
$LN9@PMC_Greate:

; 113  :         }

	jmp	$LN3@PMC_Greate
$LN7@PMC_Greate:

; 114  :         else
; 115  :         {
; 116  :             // u と v がともに 0 ではない場合
; 117  : 
; 118  :             // u と v の GCD を計算する
; 119  :             __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _u_bit_count$14[ebp], ecx

; 120  :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	call	__LZCNT_ALT_32
	add	esp, 4
	mov	ecx, 32					; 00000020H
	sub	ecx, eax
	mov	DWORD PTR _v_bit_count$13[ebp], ecx

; 121  :             __UNIT_TYPE work_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count);

	mov	edx, DWORD PTR _v_bit_count$13[ebp]
	push	edx
	mov	eax, DWORD PTR _u_bit_count$14[ebp]
	push	eax
	call	__MAXIMUM_UNIT
	add	esp, 8
	mov	DWORD PTR _work_bit_count$12[ebp], eax

; 122  : 
; 123  :             __UNIT_TYPE work_u_buf_code;
; 124  :             __UNIT_TYPE work_u_buf_words;
; 125  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	ecx, DWORD PTR _work_u_buf_code$11[ebp]
	push	ecx
	lea	edx, DWORD PTR _work_u_buf_words$10[ebp]
	push	edx
	mov	eax, DWORD PTR _work_bit_count$12[ebp]
	push	eax
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_u_buf$9[ebp], eax

; 126  :             if (work_u_buf == NULL)

	cmp	DWORD PTR _work_u_buf$9[ebp], 0
	jne	SHORT $LN10@PMC_Greate

; 127  :                 return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@PMC_Greate
$LN10@PMC_Greate:

; 128  : 
; 129  :             __UNIT_TYPE work_v_buf_code;
; 130  :             __UNIT_TYPE work_v_buf_words;
; 131  :             __UNIT_TYPE* work_v_buf = AllocateBlock(work_bit_count, &work_v_buf_words, &work_v_buf_code);

	lea	ecx, DWORD PTR _work_v_buf_code$8[ebp]
	push	ecx
	lea	edx, DWORD PTR _work_v_buf_words$7[ebp]
	push	edx
	mov	eax, DWORD PTR _work_bit_count$12[ebp]
	push	eax
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_v_buf$6[ebp], eax

; 132  :             if (work_v_buf == NULL)

	cmp	DWORD PTR _work_v_buf$6[ebp], 0
	jne	SHORT $LN11@PMC_Greate

; 133  :             {
; 134  :                 DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	ecx, DWORD PTR _work_u_buf_words$10[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_u_buf$9[ebp]
	push	edx
	call	_DeallocateBlock
	add	esp, 8

; 135  :                 return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@PMC_Greate
$LN11@PMC_Greate:

; 136  :             }
; 137  : 
; 138  :             __UNIT_TYPE nw_check_code;
; 139  :             if ((result = AllocateNumber(w, work_bit_count, &nw_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw_check_code$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_bit_count$12[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN12@PMC_Greate

; 140  :             {
; 141  :                 DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	eax, DWORD PTR _work_v_buf_words$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_v_buf$6[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 142  :                 DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	edx, DWORD PTR _work_u_buf_words$10[ebp]
	push	edx
	mov	eax, DWORD PTR _work_u_buf$9[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 143  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Greate
$LN12@PMC_Greate:

; 144  :             }
; 145  : 
; 146  :             __UNIT_TYPE u_tzcnt = u->TRAILING_ZERO_BITS_COUNT;

	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _u_tzcnt$4[ebp], edx

; 147  :             __UNIT_TYPE v_tzcnt = _TZCNT_ALT_UNIT(v);

	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	call	__TZCNT_ALT_UNIT
	add	esp, 4
	mov	DWORD PTR _v_tzcnt$3[ebp], eax

; 148  :             __UNIT_TYPE k = _MINIMUM_UNIT(u_tzcnt, v_tzcnt);

	mov	ecx, DWORD PTR _v_tzcnt$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_tzcnt$4[ebp]
	push	edx
	call	__MINIMUM_UNIT
	add	esp, 8
	mov	DWORD PTR _k$2[ebp], eax

; 149  :             if (u_tzcnt > 0)

	cmp	DWORD PTR _u_tzcnt$4[ebp], 0
	jbe	SHORT $LN13@PMC_Greate

; 150  :                 RightShift_Imp(u->BLOCK, u->UNIT_WORD_COUNT, u_tzcnt, work_u_buf, FALSE);

	push	0
	mov	eax, DWORD PTR _work_u_buf$9[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_tzcnt$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_RightShift_Imp
	add	esp, 20					; 00000014H
	jmp	SHORT $LN14@PMC_Greate
$LN13@PMC_Greate:

; 151  :             else
; 152  :                 _COPY_MEMORY_UNIT(work_u_buf, u->BLOCK, u->UNIT_WORD_COUNT);

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _work_u_buf$9[ebp]
	push	ecx
	call	__COPY_MEMORY_UNIT
	add	esp, 12					; 0000000cH
$LN14@PMC_Greate:

; 153  :             work_v_buf[0] = v >> v_tzcnt;

	mov	edx, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _v_tzcnt$3[ebp]
	shr	edx, cl
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _work_v_buf$6[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 154  : 
; 155  :             __UNIT_TYPE w_buf_count;
; 156  :             GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), (*w)->BLOCK, &w_buf_count);

	lea	ecx, DWORD PTR _w_buf_count$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	push	32					; 00000020H
	mov	edx, DWORD PTR _work_bit_count$12[ebp]
	push	edx
	call	__DIVIDE_CEILING_UNIT
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR _work_v_buf$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_u_buf$9[ebp]
	push	ecx
	call	_GreatestCommonDivisor_Imp
	add	esp, 20					; 00000014H

; 157  :             if ((result = CheckBlockLight(work_u_buf, work_u_buf_code)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _work_u_buf_code$11[ebp]
	push	edx
	mov	eax, DWORD PTR _work_u_buf$9[ebp]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN15@PMC_Greate

; 158  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Greate
$LN15@PMC_Greate:

; 159  :             if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _work_v_buf_code$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_v_buf$6[ebp]
	push	edx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN16@PMC_Greate

; 160  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Greate
$LN16@PMC_Greate:

; 161  :             if ((result = CheckBlockLight((*w)->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nw_check_code$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN17@PMC_Greate

; 162  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Greate
$LN17@PMC_Greate:

; 163  :             DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	ecx, DWORD PTR _work_v_buf_words$7[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_v_buf$6[ebp]
	push	edx
	call	_DeallocateBlock
	add	esp, 8

; 164  :             DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	eax, DWORD PTR _work_u_buf_words$10[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_u_buf$9[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 165  : 
; 166  :             LeftShift_Imp((*w)->BLOCK, w_buf_count, k, (*w)->BLOCK, TRUE);

	push	1
	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _k$2[ebp]
	push	edx
	mov	eax, DWORD PTR _w_buf_count$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_LeftShift_Imp
	add	esp, 20					; 00000014H

; 167  :             if ((result = CheckBlockLight((*w)->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _nw_check_code$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN18@PMC_Greate

; 168  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Greate
$LN18@PMC_Greate:

; 169  :             CommitNumber(*w);

	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_CommitNumber
	add	esp, 4
$LN3@PMC_Greate:

; 170  :         }
; 171  :     }
; 172  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Greate:

; 173  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN27@PMC_Greate
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 108				; 0000006cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN27@PMC_Greate:
	DD	6
	DD	$LN26@PMC_Greate
$LN26@PMC_Greate:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN20@PMC_Greate
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN21@PMC_Greate
	DD	-52					; ffffffccH
	DD	4
	DD	$LN22@PMC_Greate
	DD	-64					; ffffffc0H
	DD	4
	DD	$LN23@PMC_Greate
	DD	-80					; ffffffb0H
	DD	4
	DD	$LN24@PMC_Greate
	DD	-104					; ffffff98H
	DD	4
	DD	$LN25@PMC_Greate
$LN25@PMC_Greate:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN24@PMC_Greate:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN23@PMC_Greate:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN22@PMC_Greate:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN21@PMC_Greate:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN20@PMC_Greate:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_PMC_GreatestCommonDivisor_X_I_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
_TEXT	SEGMENT
_tt$1 = -16						; size = 4
_c$2 = -12						; size = 4
_v$ = -8						; size = 4
_u$ = -4						; size = 4
_p1_buf$ = 8						; size = 4
_p2_buf$ = 12						; size = 4
_word_count$ = 16					; size = 4
_w_buf$ = 20						; size = 4
_w_buf_count$ = 24					; size = 4
_GreatestCommonDivisor_Imp PROC

; 39   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __3257AA0B_pmc_greatestcommondivisor@c
	call	@__CheckForDebuggerJustMyCode@4

; 40   :     __UNIT_TYPE* u = p1_buf;

	mov	eax, DWORD PTR _p1_buf$[ebp]
	mov	DWORD PTR _u$[ebp], eax

; 41   :     __UNIT_TYPE* v = p2_buf;

	mov	ecx, DWORD PTR _p2_buf$[ebp]
	mov	DWORD PTR _v$[ebp], ecx
$LN5@GreatestCo:

; 42   :     for (;;)
; 43   :     {
; 44   :         while (word_count > 0 && u[word_count - 1] == 0 && v[word_count - 1] == 0)

	cmp	DWORD PTR _word_count$[ebp], 0
	jbe	SHORT $LN6@GreatestCo
	mov	edx, DWORD PTR _word_count$[ebp]
	mov	eax, DWORD PTR _u$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], 0
	jne	SHORT $LN6@GreatestCo
	mov	ecx, DWORD PTR _word_count$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	cmp	DWORD PTR [edx+ecx*4-4], 0
	jne	SHORT $LN6@GreatestCo

; 45   :             --word_count;

	mov	eax, DWORD PTR _word_count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _word_count$[ebp], eax
	jmp	SHORT $LN5@GreatestCo
$LN6@GreatestCo:

; 46   :         if (word_count <= 0)

	cmp	DWORD PTR _word_count$[ebp], 0
	ja	SHORT $LN9@GreatestCo

; 47   :         {
; 48   :             // このルートへの到達はあり得ないはず。
; 49   :             w_buf[0] = 0;

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _w_buf$[ebp]
	mov	DWORD PTR [eax+edx], 0

; 50   :             *w_buf_count = 1;

	mov	ecx, DWORD PTR _w_buf_count$[ebp]
	mov	DWORD PTR [ecx], 1
$LN9@GreatestCo:

; 51   :         }
; 52   :         int c = Compare_Imp(u, v, word_count);

	mov	edx, DWORD PTR _word_count$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	_Compare_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _c$2[ebp], eax

; 53   :         if (c == 0)

	cmp	DWORD PTR _c$2[ebp], 0
	jne	SHORT $LN10@GreatestCo

; 54   :         {
; 55   :             // u == v の場合
; 56   : 
; 57   :             // GCD を u として復帰
; 58   :             _COPY_MEMORY_UNIT(w_buf, u, word_count);

	mov	edx, DWORD PTR _word_count$[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _w_buf$[ebp]
	push	ecx
	call	__COPY_MEMORY_UNIT
	add	esp, 12					; 0000000cH

; 59   :             *w_buf_count = word_count;

	mov	edx, DWORD PTR _w_buf_count$[ebp]
	mov	eax, DWORD PTR _word_count$[ebp]
	mov	DWORD PTR [edx], eax

; 60   :             return;

	jmp	SHORT $LN1@GreatestCo
$LN10@GreatestCo:

; 61   :         }
; 62   :         if (c < 0)

	cmp	DWORD PTR _c$2[ebp], 0
	jge	SHORT $LN11@GreatestCo

; 63   :         {
; 64   :             __UNIT_TYPE* tt = u;

	mov	ecx, DWORD PTR _u$[ebp]
	mov	DWORD PTR _tt$1[ebp], ecx

; 65   :             u = v;

	mov	edx, DWORD PTR _v$[ebp]
	mov	DWORD PTR _u$[ebp], edx

; 66   :             v = tt;

	mov	eax, DWORD PTR _tt$1[ebp]
	mov	DWORD PTR _v$[ebp], eax
$LN11@GreatestCo:

; 67   :         }
; 68   :         // この時点で u > v かつ u と v はともに奇数である
; 69   : 
; 70   :         Subtruct_Imp(u, word_count, v, word_count, u, word_count);

	mov	ecx, DWORD PTR _word_count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	mov	eax, DWORD PTR _word_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _word_count$[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	call	_Subtruct_Imp
	add	esp, 24					; 00000018H
$LN7@GreatestCo:

; 71   : 
; 72   :         // この時点で u は偶数
; 73   : 
; 74   :         while ((*u & 1) == 0)

	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 1
	jne	SHORT $LN8@GreatestCo

; 75   :             RightShift_Imp(u, word_count, 1, u, TRUE);

	push	1
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _word_count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	_RightShift_Imp
	add	esp, 20					; 00000014H
	jmp	SHORT $LN7@GreatestCo
$LN8@GreatestCo:

; 76   :     }

	jmp	$LN5@GreatestCo
$LN1@GreatestCo:

; 77   : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GreatestCommonDivisor_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 4
__TZCNT_ALT_UNIT PROC

; 709  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 710  :         if (x == 0)

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN2@TZCNT_ALT_

; 711  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H
	jmp	SHORT $LN1@TZCNT_ALT_
$LN2@TZCNT_ALT_:

; 712  : #ifdef _M_IX86
; 713  :         _UINT32_T pos;
; 714  : #ifdef _MSC_VER
; 715  :         _BitScanForward(&pos, x);

	bsf	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _pos$[ebp], eax

; 716  : #elif defined(__GNUC__)
; 717  :         __asm__("bsfl %1, %0" : "=r"(pos) : "rm"(x));
; 718  : #else
; 719  : #error unknown compiler
; 720  : #endif
; 721  : #elif defined(_M_X64)
; 722  : #ifdef _MSC_VER
; 723  :         _UINT32_T pos;
; 724  :         _BitScanForward64(&pos, x);
; 725  : #elif defined(__GNUC__)
; 726  :         _UINT64_T pos;
; 727  :         __asm__("bsfq %1, %0" : "=r"(pos) : "rm"(x));
; 728  : #else
; 729  : #error unknown compiler
; 730  : #endif
; 731  : #else
; 732  : #error unknown platform
; 733  : #endif
; 734  :         return (pos);

	mov	eax, DWORD PTR _pos$[ebp]
$LN1@TZCNT_ALT_:

; 735  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@TZCNT_ALT_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@TZCNT_ALT_:
	DD	1
	DD	$LN5@TZCNT_ALT_
$LN5@TZCNT_ALT_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@TZCNT_ALT_
$LN4@TZCNT_ALT_:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
__TZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT PROC

; 629  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 630  :         if (x == 0)

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 631  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 632  : #ifdef _M_IX86
; 633  :         _UINT32_T pos;
; 634  : #ifdef _MSC_VER
; 635  :         _BitScanReverse(&pos, x);

	bsr	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _pos$[ebp], eax

; 636  : #elif defined(__GNUC__)
; 637  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 638  : #else
; 639  : #error unknown compiler
; 640  : #endif
; 641  : #elif defined(_M_X64)
; 642  : #ifdef _MSC_VER
; 643  :         _UINT32_T pos;
; 644  :         _BitScanReverse64(&pos, x);
; 645  : #elif defined(__GNUC__)
; 646  :         _UINT64_T pos;
; 647  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 648  : #else
; 649  : #error unknown compiler
; 650  : #endif
; 651  : #else
; 652  : #error unknown platform
; 653  : #endif
; 654  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, DWORD PTR _pos$[ebp]
$LN1@LZCNT_ALT_:

; 655  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@LZCNT_ALT_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@LZCNT_ALT_:
	DD	1
	DD	$LN5@LZCNT_ALT_
$LN5@LZCNT_ALT_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@LZCNT_ALT_
$LN4@LZCNT_ALT_:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
__LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 4
__LZCNT_ALT_32 PROC

; 596  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 597  :         if (x == 0)

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 598  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 599  :         _UINT32_T pos;
; 600  : #ifdef _MSC_VER
; 601  :         _BitScanReverse(&pos, x);

	bsr	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _pos$[ebp], eax

; 602  : #elif defined(__GNUC__)
; 603  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 604  : #else
; 605  : #error unknown compiler
; 606  : #endif
; 607  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, DWORD PTR _pos$[ebp]
$LN1@LZCNT_ALT_:

; 608  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@LZCNT_ALT_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@LZCNT_ALT_:
	DD	1
	DD	$LN5@LZCNT_ALT_
$LN5@LZCNT_ALT_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@LZCNT_ALT_
$LN4@LZCNT_ALT_:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
__LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
tv65 = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
__MINIMUM_UNIT PROC

; 208  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 209  :         return (x <= y ? x : y);

	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _y$[ebp]
	ja	SHORT $LN3@MINIMUM_UN
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv65[ebp], ecx
	jmp	SHORT $LN4@MINIMUM_UN
$LN3@MINIMUM_UN:
	mov	edx, DWORD PTR _y$[ebp]
	mov	DWORD PTR tv65[ebp], edx
$LN4@MINIMUM_UN:
	mov	eax, DWORD PTR tv65[ebp]

; 210  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__MINIMUM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
tv65 = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
__MAXIMUM_UNIT PROC

; 203  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 204  :         return (x >= y ? x : y);

	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _y$[ebp]
	jb	SHORT $LN3@MAXIMUM_UN
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv65[ebp], ecx
	jmp	SHORT $LN4@MAXIMUM_UN
$LN3@MAXIMUM_UN:
	mov	edx, DWORD PTR _y$[ebp]
	mov	DWORD PTR tv65[ebp], edx
$LN4@MAXIMUM_UN:
	mov	eax, DWORD PTR tv65[ebp]

; 205  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__MAXIMUM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
__DIVIDE_CEILING_UNIT PROC

; 193  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 194  :         return ((u + v - 1) / v);

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _u$[ebp]
	lea	eax, DWORD PTR [ecx+eax-1]
	xor	edx, edx
	div	DWORD PTR _v$[ebp]

; 195  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__DIVIDE_CEILING_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC

; 182  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 183  :         *result_high = (_UINT32_T)(value >> 32);

	mov	eax, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR _value$[ebp+4]
	mov	cl, 32					; 00000020H
	call	__aullshr
	mov	ecx, DWORD PTR _result_high$[ebp]
	mov	DWORD PTR [ecx], eax

; 184  :         return ((_UINT32_T)value);

	mov	eax, DWORD PTR _value$[ebp]

; 185  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT PROC

; 66   :     {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 67   : #ifdef _M_IX86
; 68   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, DWORD PTR _d$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep movsd

; 69   : #elif defined(_M_X64)
; 70   :         __movsq(d, s, count);
; 71   : #else
; 72   : #error unknown platform
; 73   : #endif
; 74   :     }

	pop	edi
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
_TEXT	SEGMENT
_w_buf_count$1 = -124					; size = 4
_k$2 = -116						; size = 4
_v_tzcnt$3 = -112					; size = 4
_u_tzcnt$4 = -108					; size = 4
_nw_check_code$5 = -100					; size = 4
_work_v_buf$6 = -92					; size = 4
_work_v_buf_words$7 = -84				; size = 4
_work_v_buf_code$8 = -72				; size = 4
_work_u_buf$9 = -64					; size = 4
_work_u_buf_words$10 = -56				; size = 4
_work_u_buf_code$11 = -44				; size = 4
_work_bit_count$12 = -36				; size = 4
_v_bit_count$13 = -32					; size = 4
_u_bit_count$14 = -28					; size = 4
_nw$ = -20						; size = 4
_result$ = -12						; size = 4
_nv$ = -8						; size = 4
_nu$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_GreatestCommonDivisor_X_X@12 PROC

; 488  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H
	push	edi
	lea	edi, DWORD PTR [ebp-128]
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __3257AA0B_pmc_greatestcommondivisor@c
	call	@__CheckForDebuggerJustMyCode@4

; 489  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Greate

; 490  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Greate
$LN2@PMC_Greate:

; 491  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Greate

; 492  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Greate
$LN3@PMC_Greate:

; 493  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Greate

; 494  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Greate
$LN4@PMC_Greate:

; 495  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 496  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	ecx, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], ecx

; 497  :     PMC_STATUS_CODE result;
; 498  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nu$[ebp]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Greate

; 499  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Greate
$LN5@PMC_Greate:

; 500  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Greate

; 501  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Greate
$LN6@PMC_Greate:

; 502  :     NUMBER_HEADER* nw;
; 503  :     if (nu->IS_ZERO)

	mov	ecx, DWORD PTR _nu$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	shr	edx, 1
	and	edx, 1
	je	SHORT $LN7@PMC_Greate

; 504  :     {
; 505  :         // u が 0 である場合
; 506  : 
; 507  :         if (nv->IS_ZERO)

	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN9@PMC_Greate

; 508  :         {
; 509  :             // v が 0 である場合
; 510  : 
; 511  :             // u と v がともに 0 であり、GCD は一意に存在しないため、エラーを返す。
; 512  :             return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Greate

; 513  :         }

	jmp	SHORT $LN10@PMC_Greate
$LN9@PMC_Greate:

; 514  :         else
; 515  :         {
; 516  :             // v が 0 ではない場合
; 517  : 
; 518  :             // GCD は v そのものであるため、v を計算結果として返す。
; 519  :             if ((result = DuplicateNumber(nv, &nw)) != PMC_STATUS_OK)

	lea	edx, DWORD PTR _nw$[ebp]
	push	edx
	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN11@PMC_Greate

; 520  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Greate
$LN11@PMC_Greate:

; 521  :             *w = nw;

	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [ecx], edx
$LN10@PMC_Greate:

; 522  :         }
; 523  :     }

	jmp	$LN8@PMC_Greate
$LN7@PMC_Greate:

; 524  :     else
; 525  :     {
; 526  :         // u が 0 ではない場合
; 527  : 
; 528  :         if (nv->IS_ZERO)

	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN12@PMC_Greate

; 529  :         {
; 530  :             // v が 0 である場合
; 531  : 
; 532  :             // GCD は u そのものであるため、u を計算結果として返す。
; 533  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	edx, DWORD PTR _nw$[ebp]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	push	eax
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN14@PMC_Greate

; 534  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Greate
$LN14@PMC_Greate:

; 535  :             *w = nw;

	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [ecx], edx

; 536  :         }

	jmp	$LN8@PMC_Greate
$LN12@PMC_Greate:

; 537  :         else
; 538  :         {
; 539  :             // u と v がともに 0 ではない場合
; 540  : 
; 541  :             // u と v の GCD を計算する
; 542  :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _u_bit_count$14[ebp], ecx

; 543  :             __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _v_bit_count$13[ebp], eax

; 544  :             __UNIT_TYPE work_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count);

	mov	ecx, DWORD PTR _v_bit_count$13[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_bit_count$14[ebp]
	push	edx
	call	__MAXIMUM_UNIT
	add	esp, 8
	mov	DWORD PTR _work_bit_count$12[ebp], eax

; 545  : 
; 546  :             __UNIT_TYPE work_u_buf_code;
; 547  :             __UNIT_TYPE work_u_buf_words;
; 548  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	eax, DWORD PTR _work_u_buf_code$11[ebp]
	push	eax
	lea	ecx, DWORD PTR _work_u_buf_words$10[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_bit_count$12[ebp]
	push	edx
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_u_buf$9[ebp], eax

; 549  :             if (work_u_buf == NULL)

	cmp	DWORD PTR _work_u_buf$9[ebp], 0
	jne	SHORT $LN15@PMC_Greate

; 550  :                 return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@PMC_Greate
$LN15@PMC_Greate:

; 551  : 
; 552  :             __UNIT_TYPE work_v_buf_code;
; 553  :             __UNIT_TYPE work_v_buf_words;
; 554  :             __UNIT_TYPE* work_v_buf = AllocateBlock(work_bit_count, &work_v_buf_words, &work_v_buf_code);

	lea	eax, DWORD PTR _work_v_buf_code$8[ebp]
	push	eax
	lea	ecx, DWORD PTR _work_v_buf_words$7[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_bit_count$12[ebp]
	push	edx
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_v_buf$6[ebp], eax

; 555  :             if (work_v_buf == NULL)

	cmp	DWORD PTR _work_v_buf$6[ebp], 0
	jne	SHORT $LN16@PMC_Greate

; 556  :             {
; 557  :                 DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	eax, DWORD PTR _work_u_buf_words$10[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_u_buf$9[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 558  :                 return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@PMC_Greate
$LN16@PMC_Greate:

; 559  :             }
; 560  : 
; 561  :             __UNIT_TYPE nw_check_code;
; 562  :             if ((result = AllocateNumber(&nw, work_bit_count, &nw_check_code)) != PMC_STATUS_OK)

	lea	edx, DWORD PTR _nw_check_code$5[ebp]
	push	edx
	mov	eax, DWORD PTR _work_bit_count$12[ebp]
	push	eax
	lea	ecx, DWORD PTR _nw$[ebp]
	push	ecx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN17@PMC_Greate

; 563  :             {
; 564  :                 DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	edx, DWORD PTR _work_v_buf_words$7[ebp]
	push	edx
	mov	eax, DWORD PTR _work_v_buf$6[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 565  :                 DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	ecx, DWORD PTR _work_u_buf_words$10[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_u_buf$9[ebp]
	push	edx
	call	_DeallocateBlock
	add	esp, 8

; 566  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Greate
$LN17@PMC_Greate:

; 567  :             }
; 568  : 
; 569  :             __UNIT_TYPE u_tzcnt = nu->TRAILING_ZERO_BITS_COUNT;

	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _u_tzcnt$4[ebp], ecx

; 570  :             __UNIT_TYPE v_tzcnt = nv->TRAILING_ZERO_BITS_COUNT;

	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _v_tzcnt$3[ebp], eax

; 571  :             __UNIT_TYPE k = _MINIMUM_UNIT(u_tzcnt, v_tzcnt);

	mov	ecx, DWORD PTR _v_tzcnt$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_tzcnt$4[ebp]
	push	edx
	call	__MINIMUM_UNIT
	add	esp, 8
	mov	DWORD PTR _k$2[ebp], eax

; 572  :             if (u_tzcnt > 0)

	cmp	DWORD PTR _u_tzcnt$4[ebp], 0
	jbe	SHORT $LN18@PMC_Greate

; 573  :                 RightShift_Imp(nu->BLOCK, nu->UNIT_WORD_COUNT, u_tzcnt, work_u_buf, FALSE);

	push	0
	mov	eax, DWORD PTR _work_u_buf$9[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_tzcnt$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_RightShift_Imp
	add	esp, 20					; 00000014H
	jmp	SHORT $LN19@PMC_Greate
$LN18@PMC_Greate:

; 574  :             else
; 575  :                 _COPY_MEMORY_UNIT(work_u_buf, nu->BLOCK, nu->UNIT_WORD_COUNT);

	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _work_u_buf$9[ebp]
	push	ecx
	call	__COPY_MEMORY_UNIT
	add	esp, 12					; 0000000cH
$LN19@PMC_Greate:

; 576  :             if (v_tzcnt > 0)

	cmp	DWORD PTR _v_tzcnt$3[ebp], 0
	jbe	SHORT $LN20@PMC_Greate

; 577  :                 RightShift_Imp(nv->BLOCK, nv->UNIT_WORD_COUNT, v_tzcnt, work_v_buf, FALSE);

	push	0
	mov	edx, DWORD PTR _work_v_buf$6[ebp]
	push	edx
	mov	eax, DWORD PTR _v_tzcnt$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_RightShift_Imp
	add	esp, 20					; 00000014H
	jmp	SHORT $LN21@PMC_Greate
$LN20@PMC_Greate:

; 578  :             else
; 579  :                 _COPY_MEMORY_UNIT(work_v_buf, nv->BLOCK, nv->UNIT_WORD_COUNT);

	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR _work_v_buf$6[ebp]
	push	eax
	call	__COPY_MEMORY_UNIT
	add	esp, 12					; 0000000cH
$LN21@PMC_Greate:

; 580  : 
; 581  :             __UNIT_TYPE w_buf_count;
; 582  :             GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), nw->BLOCK, &w_buf_count);

	lea	ecx, DWORD PTR _w_buf_count$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _nw$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR _work_bit_count$12[ebp]
	push	ecx
	call	__DIVIDE_CEILING_UNIT
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _work_v_buf$6[ebp]
	push	edx
	mov	eax, DWORD PTR _work_u_buf$9[ebp]
	push	eax
	call	_GreatestCommonDivisor_Imp
	add	esp, 20					; 00000014H

; 583  :             if ((result = CheckBlockLight(work_u_buf, work_u_buf_code)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _work_u_buf_code$11[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_u_buf$9[ebp]
	push	edx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN22@PMC_Greate

; 584  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Greate
$LN22@PMC_Greate:

; 585  :             if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _work_v_buf_code$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_v_buf$6[ebp]
	push	ecx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN23@PMC_Greate

; 586  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Greate
$LN23@PMC_Greate:

; 587  :             if ((result = CheckBlockLight(nw->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nw_check_code$5[ebp]
	push	edx
	mov	eax, DWORD PTR _nw$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN24@PMC_Greate

; 588  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Greate
$LN24@PMC_Greate:

; 589  :             DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	edx, DWORD PTR _work_v_buf_words$7[ebp]
	push	edx
	mov	eax, DWORD PTR _work_v_buf$6[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 590  :             DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	ecx, DWORD PTR _work_u_buf_words$10[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_u_buf$9[ebp]
	push	edx
	call	_DeallocateBlock
	add	esp, 8

; 591  : 
; 592  :             LeftShift_Imp(nw->BLOCK, w_buf_count, k, nw->BLOCK, TRUE);

	push	1
	mov	eax, DWORD PTR _nw$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _k$2[ebp]
	push	edx
	mov	eax, DWORD PTR _w_buf_count$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_LeftShift_Imp
	add	esp, 20					; 00000014H

; 593  :             if ((result = CheckBlockLight(nw->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nw_check_code$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN25@PMC_Greate

; 594  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Greate
$LN25@PMC_Greate:

; 595  :             CommitNumber(nw);

	mov	eax, DWORD PTR _nw$[ebp]
	push	eax
	call	_CommitNumber
	add	esp, 4

; 596  :             *w = nw;

	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [ecx], edx
$LN8@PMC_Greate:

; 597  :         }
; 598  :     }
; 599  : #ifdef _DEBUG
; 600  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN26@PMC_Greate

; 601  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Greate
$LN26@PMC_Greate:

; 602  : #endif
; 603  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Greate:

; 604  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN36@PMC_Greate
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 128				; 00000080H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN36@PMC_Greate:
	DD	7
	DD	$LN35@PMC_Greate
$LN35@PMC_Greate:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN28@PMC_Greate
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN29@PMC_Greate
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN30@PMC_Greate
	DD	-72					; ffffffb8H
	DD	4
	DD	$LN31@PMC_Greate
	DD	-84					; ffffffacH
	DD	4
	DD	$LN32@PMC_Greate
	DD	-100					; ffffff9cH
	DD	4
	DD	$LN33@PMC_Greate
	DD	-124					; ffffff84H
	DD	4
	DD	$LN34@PMC_Greate
$LN34@PMC_Greate:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN33@PMC_Greate:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN32@PMC_Greate:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN31@PMC_Greate:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN30@PMC_Greate:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN29@PMC_Greate:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN28@PMC_Greate:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_GreatestCommonDivisor_X_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
_TEXT	SEGMENT
_result$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_w$ = 20						; size = 4
_PMC_GreatestCommonDivisor_X_L@16 PROC

; 465  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __3257AA0B_pmc_greatestcommondivisor@c
	call	@__CheckForDebuggerJustMyCode@4

; 466  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(v) * 8)

	xor	eax, eax
	je	SHORT $LN2@PMC_Greate

; 467  :     {
; 468  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 469  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@PMC_Greate
$LN2@PMC_Greate:

; 470  :     }
; 471  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN3@PMC_Greate

; 472  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Greate
$LN3@PMC_Greate:

; 473  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Greate

; 474  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Greate
$LN4@PMC_Greate:

; 475  :     PMC_STATUS_CODE result;
; 476  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Greate

; 477  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Greate
$LN5@PMC_Greate:

; 478  :     if ((result = PMC_GreatestCommonDivisor_X_L_Imp((NUMBER_HEADER*)u, v, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	_PMC_GreatestCommonDivisor_X_L_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Greate

; 479  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Greate
$LN6@PMC_Greate:

; 480  : #ifdef _DEBUG
; 481  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN7@PMC_Greate

; 482  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Greate
$LN7@PMC_Greate:

; 483  : #endif
; 484  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Greate:

; 485  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_PMC_GreatestCommonDivisor_X_L@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
_TEXT	SEGMENT
_result$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_GreatestCommonDivisor_X_I@12 PROC

; 199  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __3257AA0B_pmc_greatestcommondivisor@c
	call	@__CheckForDebuggerJustMyCode@4

; 200  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)

	xor	eax, eax
	je	SHORT $LN2@PMC_Greate

; 201  :     {
; 202  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 203  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@PMC_Greate
$LN2@PMC_Greate:

; 204  :     }
; 205  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN3@PMC_Greate

; 206  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Greate
$LN3@PMC_Greate:

; 207  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Greate

; 208  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Greate
$LN4@PMC_Greate:

; 209  :     PMC_STATUS_CODE result;
; 210  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Greate

; 211  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Greate
$LN5@PMC_Greate:

; 212  :     if ((result = PMC_GreatestCommonDivisor_X_I_Imp((NUMBER_HEADER*)u, v, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	_PMC_GreatestCommonDivisor_X_I_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Greate

; 213  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Greate
$LN6@PMC_Greate:

; 214  : #ifdef _DEBUG
; 215  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN7@PMC_Greate

; 216  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Greate
$LN7@PMC_Greate:

; 217  : #endif
; 218  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Greate:

; 219  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_PMC_GreatestCommonDivisor_X_I@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
_TEXT	SEGMENT
_result$ = -4						; size = 4
_u$ = 8							; size = 8
_v$ = 16						; size = 4
_w$ = 20						; size = 4
_PMC_GreatestCommonDivisor_L_X@16 PROC

; 442  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __3257AA0B_pmc_greatestcommondivisor@c
	call	@__CheckForDebuggerJustMyCode@4

; 443  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(u) * 8)

	xor	eax, eax
	je	SHORT $LN2@PMC_Greate

; 444  :     {
; 445  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 446  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@PMC_Greate
$LN2@PMC_Greate:

; 447  :     }
; 448  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Greate

; 449  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Greate
$LN3@PMC_Greate:

; 450  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Greate

; 451  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Greate
$LN4@PMC_Greate:

; 452  :     PMC_STATUS_CODE result;
; 453  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Greate

; 454  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Greate
$LN5@PMC_Greate:

; 455  :     if ((result = PMC_GreatestCommonDivisor_X_L_Imp((NUMBER_HEADER*)v, u, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	call	_PMC_GreatestCommonDivisor_X_L_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Greate

; 456  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Greate
$LN6@PMC_Greate:

; 457  : #ifdef _DEBUG
; 458  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN7@PMC_Greate

; 459  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Greate
$LN7@PMC_Greate:

; 460  : #endif
; 461  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Greate:

; 462  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_PMC_GreatestCommonDivisor_L_X@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
_TEXT	SEGMENT
_result$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_GreatestCommonDivisor_I_X@12 PROC

; 176  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __3257AA0B_pmc_greatestcommondivisor@c
	call	@__CheckForDebuggerJustMyCode@4

; 177  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(u) * 8)

	xor	eax, eax
	je	SHORT $LN2@PMC_Greate

; 178  :     {
; 179  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 180  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@PMC_Greate
$LN2@PMC_Greate:

; 181  :     }
; 182  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Greate

; 183  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Greate
$LN3@PMC_Greate:

; 184  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Greate

; 185  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Greate
$LN4@PMC_Greate:

; 186  :     PMC_STATUS_CODE result;
; 187  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Greate

; 188  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Greate
$LN5@PMC_Greate:

; 189  :     if ((result = PMC_GreatestCommonDivisor_X_I_Imp((NUMBER_HEADER*)v, u, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_PMC_GreatestCommonDivisor_X_I_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Greate

; 190  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Greate
$LN6@PMC_Greate:

; 191  : #ifdef _DEBUG
; 192  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN7@PMC_Greate

; 193  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Greate
$LN7@PMC_Greate:

; 194  : #endif
; 195  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Greate:

; 196  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_PMC_GreatestCommonDivisor_I_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_GreatestCommonDivisor PROC

; 607  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __3257AA0B_pmc_greatestcommondivisor@c
	call	@__CheckForDebuggerJustMyCode@4

; 608  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 609  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_Initialize_GreatestCommonDivisor ENDP
_TEXT	ENDS
END
