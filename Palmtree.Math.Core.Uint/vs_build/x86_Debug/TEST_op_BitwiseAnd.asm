; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\TEST_op_BitwiseAnd.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__630249ED_pmc_uint_debug@h DB 01H
__83453097_test_op_bitwiseand@c DB 01H
msvcjmc	ENDS
PUBLIC	_TEST_PMC_BitwiseAnd_I_X
PUBLIC	_TEST_PMC_BitwiseAnd_L_X
PUBLIC	_TEST_PMC_BitwiseAnd_X_I
PUBLIC	_TEST_PMC_BitwiseAnd_X_L
PUBLIC	_TEST_PMC_BitwiseAnd_X_X
PUBLIC	__JustMyCode_Default
EXTRN	_TEST_Assert:PROC
EXTRN	_FormatTestLabel:PROC
EXTRN	_FormatTestMesssage:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
_DATA	SEGMENT
$SG94739 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A'
	DB	00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H
	DB	'0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG94740 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'B', 00H, 'i', 00H
	DB	't', 00H, 'w', 00H, 'i', 00H, 's', 00H, 'e', 00H, 'A', 00H, 'n'
	DB	00H, 'd', 00H, '_', 00H, 'I', 00H, '_', 00H, 'X', 00H, ' ', 00H
	DB	'(', 00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+6
$SG94741 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'B', 00H, 'i', 00H
	DB	't', 00H, 'w', 00H, 'i', 00H, 's', 00H, 'e', 00H, 'A', 00H, 'n'
	DB	00H, 'd', 00H, '_', 00H, 'I', 00H, '_', 00H, 'X', 00H, 'n0', 0a9H
	DB	'_0^', 0b3H, '0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH
	DB	090H, 08aH, '0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H
	DB	00H
$SG94742 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'B', 00H, 'i', 00H
	DB	't', 00H, 'w', 00H, 'i', 00H, 's', 00H, 'e', 00H, 'A', 00H, 'n'
	DB	00H, 'd', 00H, '_', 00H, 'I', 00H, '_', 00H, 'X', 00H, ' ', 00H
	DB	'(', 00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG94743 DB	0c7H, '0', 0fcH, '0', 0bfH, '0n0', 085H, 'Q', 0b9H, '[L0', 00H
	DB	'N', 0f4H, 081H, 'W0j0D0', 00H, 00H
	ORG $+2
$SG94744 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'B', 00H, 'i', 00H
	DB	't', 00H, 'w', 00H, 'i', 00H, 's', 00H, 'e', 00H, 'A', 00H, 'n'
	DB	00H, 'd', 00H, '_', 00H, 'I', 00H, '_', 00H, 'X', 00H, ' ', 00H
	DB	'(', 00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG94765 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A'
	DB	00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H
	DB	'0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG94766 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'B', 00H, 'i', 00H
	DB	't', 00H, 'w', 00H, 'i', 00H, 's', 00H, 'e', 00H, 'A', 00H, 'n'
	DB	00H, 'd', 00H, '_', 00H, 'L', 00H, '_', 00H, 'X', 00H, ' ', 00H
	DB	'(', 00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+6
$SG94767 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'B', 00H, 'i', 00H
	DB	't', 00H, 'w', 00H, 'i', 00H, 's', 00H, 'e', 00H, 'A', 00H, 'n'
	DB	00H, 'd', 00H, '_', 00H, 'L', 00H, '_', 00H, 'X', 00H, 'n0', 0a9H
	DB	'_0^', 0b3H, '0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH
	DB	090H, 08aH, '0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H
	DB	00H
$SG94768 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'B', 00H, 'i', 00H
	DB	't', 00H, 'w', 00H, 'i', 00H, 's', 00H, 'e', 00H, 'A', 00H, 'n'
	DB	00H, 'd', 00H, '_', 00H, 'L', 00H, '_', 00H, 'X', 00H, ' ', 00H
	DB	'(', 00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG94769 DB	0c7H, '0', 0fcH, '0', 0bfH, '0n0', 085H, 'Q', 0b9H, '[L0', 00H
	DB	'N', 0f4H, 081H, 'W0j0D0', 00H, 00H
	ORG $+2
$SG94770 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'B', 00H, 'i', 00H
	DB	't', 00H, 'w', 00H, 'i', 00H, 's', 00H, 'e', 00H, 'A', 00H, 'n'
	DB	00H, 'd', 00H, '_', 00H, 'L', 00H, '_', 00H, 'X', 00H, ' ', 00H
	DB	'(', 00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG94791 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A'
	DB	00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H
	DB	'0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG94792 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'B', 00H, 'i', 00H
	DB	't', 00H, 'w', 00H, 'i', 00H, 's', 00H, 'e', 00H, 'A', 00H, 'n'
	DB	00H, 'd', 00H, '_', 00H, 'X', 00H, '_', 00H, 'I', 00H, ' ', 00H
	DB	'(', 00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+6
$SG94793 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'B', 00H, 'i', 00H
	DB	't', 00H, 'w', 00H, 'i', 00H, 's', 00H, 'e', 00H, 'A', 00H, 'n'
	DB	00H, 'd', 00H, '_', 00H, 'X', 00H, '_', 00H, 'I', 00H, 'n0', 0a9H
	DB	'_0^', 0b3H, '0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH
	DB	090H, 08aH, '0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H
	DB	00H
$SG94794 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'B', 00H, 'i', 00H
	DB	't', 00H, 'w', 00H, 'i', 00H, 's', 00H, 'e', 00H, 'A', 00H, 'n'
	DB	00H, 'd', 00H, '_', 00H, 'X', 00H, '_', 00H, 'I', 00H, ' ', 00H
	DB	'(', 00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG94795 DB	0c7H, '0', 0fcH, '0', 0bfH, '0n0', 085H, 'Q', 0b9H, '[L0', 00H
	DB	'N', 0f4H, 081H, 'W0j0D0', 00H, 00H
	ORG $+2
$SG94796 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'B', 00H, 'i', 00H
	DB	't', 00H, 'w', 00H, 'i', 00H, 's', 00H, 'e', 00H, 'A', 00H, 'n'
	DB	00H, 'd', 00H, '_', 00H, 'X', 00H, '_', 00H, 'I', 00H, ' ', 00H
	DB	'(', 00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG94817 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A'
	DB	00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H
	DB	'0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG94818 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'B', 00H, 'i', 00H
	DB	't', 00H, 'w', 00H, 'i', 00H, 's', 00H, 'e', 00H, 'A', 00H, 'n'
	DB	00H, 'd', 00H, '_', 00H, 'X', 00H, '_', 00H, 'L', 00H, ' ', 00H
	DB	'(', 00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+6
$SG94819 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'B', 00H, 'i', 00H
	DB	't', 00H, 'w', 00H, 'i', 00H, 's', 00H, 'e', 00H, 'A', 00H, 'n'
	DB	00H, 'd', 00H, '_', 00H, 'X', 00H, '_', 00H, 'L', 00H, 'n0', 0a9H
	DB	'_0^', 0b3H, '0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH
	DB	090H, 08aH, '0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H
	DB	00H
$SG94820 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'B', 00H, 'i', 00H
	DB	't', 00H, 'w', 00H, 'i', 00H, 's', 00H, 'e', 00H, 'A', 00H, 'n'
	DB	00H, 'd', 00H, '_', 00H, 'X', 00H, '_', 00H, 'L', 00H, ' ', 00H
	DB	'(', 00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG94821 DB	0c7H, '0', 0fcH, '0', 0bfH, '0n0', 085H, 'Q', 0b9H, '[L0', 00H
	DB	'N', 0f4H, 081H, 'W0j0D0', 00H, 00H
	ORG $+2
$SG94822 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'B', 00H, 'i', 00H
	DB	't', 00H, 'w', 00H, 'i', 00H, 's', 00H, 'e', 00H, 'A', 00H, 'n'
	DB	00H, 'd', 00H, '_', 00H, 'X', 00H, '_', 00H, 'L', 00H, ' ', 00H
	DB	'(', 00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG94852 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A'
	DB	00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H
	DB	'0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG94853 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'B', 00H, 'i', 00H
	DB	't', 00H, 'w', 00H, 'i', 00H, 's', 00H, 'e', 00H, 'A', 00H, 'n'
	DB	00H, 'd', 00H, '_', 00H, 'X', 00H, '_', 00H, 'X', 00H, ' ', 00H
	DB	'(', 00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+6
$SG94854 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A'
	DB	00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H
	DB	'0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG94855 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'B', 00H, 'i', 00H
	DB	't', 00H, 'w', 00H, 'i', 00H, 's', 00H, 'e', 00H, 'A', 00H, 'n'
	DB	00H, 'd', 00H, '_', 00H, 'X', 00H, '_', 00H, 'X', 00H, ' ', 00H
	DB	'(', 00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+6
$SG94856 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'B', 00H, 'i', 00H
	DB	't', 00H, 'w', 00H, 'i', 00H, 's', 00H, 'e', 00H, 'A', 00H, 'n'
	DB	00H, 'd', 00H, '_', 00H, 'X', 00H, '_', 00H, 'X', 00H, 'n0', 0a9H
	DB	'_0^', 0b3H, '0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH
	DB	090H, 08aH, '0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H
	DB	00H
$SG94857 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'B', 00H, 'i', 00H
	DB	't', 00H, 'w', 00H, 'i', 00H, 's', 00H, 'e', 00H, 'A', 00H, 'n'
	DB	00H, 'd', 00H, '_', 00H, 'X', 00H, '_', 00H, 'X', 00H, ' ', 00H
	DB	'(', 00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+6
$SG94858 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'T', 00H, 'o', 00H
	DB	'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A', 00H, 'r', 00H, 'r'
	DB	00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H, '0', 0fcH, '0'
	DB	0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH, '0g0o0j0D'
	DB	'0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG94859 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'B', 00H, 'i', 00H
	DB	't', 00H, 'w', 00H, 'i', 00H, 's', 00H, 'e', 00H, 'A', 00H, 'n'
	DB	00H, 'd', 00H, '_', 00H, 'X', 00H, '_', 00H, 'X', 00H, ' ', 00H
	DB	'(', 00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG94860 DB	0c7H, '0', 0fcH, '0', 0bfH, '0n0', 085H, 'Q', 0b9H, '[L0', 00H
	DB	'N', 0f4H, 081H, 'W0j0D0', 00H, 00H
	ORG $+2
$SG94861 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'B', 00H, 'i', 00H
	DB	't', 00H, 'w', 00H, 'i', 00H, 's', 00H, 'e', 00H, 'A', 00H, 'n'
	DB	00H, 'd', 00H, '_', 00H, 'X', 00H, '_', 00H, 'X', 00H, ' ', 00H
	DB	'(', 00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')'
	DB	00H, 00H, 00H
_DATA	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_debug.h
_TEXT	SEGMENT
_buffer1$ = 8						; size = 4
_count1$ = 12						; size = 4
_buffer2$ = 16						; size = 4
_count2$ = 20						; size = 4
__EQUALS_MEMORY PROC

; 147  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __630249ED_pmc_uint_debug@h
	call	@__CheckForDebuggerJustMyCode@4

; 148  :     if (count1 != count2)

	mov	eax, DWORD PTR _count1$[ebp]
	cmp	eax, DWORD PTR _count2$[ebp]
	je	SHORT $LN2@EQUALS_MEM

; 149  :         return (-1);

	or	eax, -1
	jmp	SHORT $LN1@EQUALS_MEM
$LN2@EQUALS_MEM:

; 150  :     while (count1 > 0)

	cmp	DWORD PTR _count1$[ebp], 0
	jbe	SHORT $LN3@EQUALS_MEM

; 151  :     {
; 152  :         if (*buffer1 != *buffer2)

	mov	ecx, DWORD PTR _buffer1$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _buffer2$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	edx, ecx
	je	SHORT $LN5@EQUALS_MEM

; 153  :             return (-1);

	or	eax, -1
	jmp	SHORT $LN1@EQUALS_MEM
$LN5@EQUALS_MEM:

; 154  :         ++buffer1;

	mov	edx, DWORD PTR _buffer1$[ebp]
	add	edx, 1
	mov	DWORD PTR _buffer1$[ebp], edx

; 155  :         ++buffer2;

	mov	eax, DWORD PTR _buffer2$[ebp]
	add	eax, 1
	mov	DWORD PTR _buffer2$[ebp], eax

; 156  :         --count1;

	mov	ecx, DWORD PTR _count1$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count1$[ebp], ecx

; 157  :     }

	jmp	SHORT $LN2@EQUALS_MEM
$LN3@EQUALS_MEM:

; 158  :     return (0);

	xor	eax, eax
$LN1@EQUALS_MEM:

; 159  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__EQUALS_MEMORY ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\test_op_bitwiseand.c
_TEXT	SEGMENT
tv176 = -352						; size = 4
tv161 = -348						; size = 4
tv142 = -344						; size = 4
tv92 = -340						; size = 4
tv74 = -336						; size = 4
_w_result$ = -332					; size = 4
_v_result$ = -328					; size = 4
_u_result$ = -324					; size = 4
_result$ = -320						; size = 4
_actual_w_buf_size$ = -312				; size = 4
_actual_w_buf$ = -300					; size = 256
_w$ = -36						; size = 4
_v$ = -24						; size = 4
_u$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_u_buf$ = 20						; size = 4
_u_buf_size$ = 24					; size = 4
_v_buf$ = 28						; size = 4
_v_buf_size$ = 32					; size = 4
_desired_w_buf$ = 36					; size = 4
_desired_w_buf_size$ = 40				; size = 4
_TEST_PMC_BitwiseAnd_X_X PROC

; 85   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 352				; 00000160H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-352]
	mov	ecx, 88					; 00000058H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __83453097_test_op_bitwiseand@c
	call	@__CheckForDebuggerJustMyCode@4

; 86   :     PMC_HANDLE_UINT u;
; 87   :     PMC_HANDLE_UINT v;
; 88   :     PMC_HANDLE_UINT w;
; 89   :     unsigned char actual_w_buf[256];
; 90   :     size_t actual_w_buf_size;
; 91   :     PMC_STATUS_CODE result;
; 92   :     PMC_STATUS_CODE u_result;
; 93   :     PMC_STATUS_CODE v_result;
; 94   :     PMC_STATUS_CODE w_result;
; 95   :     TEST_Assert(env, FormatTestLabel(L"PMC_BitwiseAnd_X_X (%d.%d)", no, 1), (u_result = ep->FromByteArray(u_buf, u_buf_size, &u)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_FromByteArrayの復帰コードが期待通りではない(%d)", u_result));

	mov	esi, esp
	lea	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _u_result$[ebp], eax
	cmp	DWORD PTR _u_result$[ebp], 0
	jne	SHORT $LN6@TEST_PMC_B
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN7@TEST_PMC_B
$LN6@TEST_PMC_B:
	mov	DWORD PTR tv74[ebp], 0
$LN7@TEST_PMC_B:
	mov	edx, DWORD PTR _u_result$[ebp]
	push	edx
	push	OFFSET $SG94852
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG94853
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 96   :     TEST_Assert(env, FormatTestLabel(L"PMC_BitwiseAnd_X_X (%d.%d)", no, 2), (v_result = ep->FromByteArray(v_buf, v_buf_size, &v)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_FromByteArrayの復帰コードが期待通りではない(%d)", v_result));

	mov	esi, esp
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _v_result$[ebp], eax
	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN8@TEST_PMC_B
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN9@TEST_PMC_B
$LN8@TEST_PMC_B:
	mov	DWORD PTR tv92[ebp], 0
$LN9@TEST_PMC_B:
	mov	edx, DWORD PTR _v_result$[ebp]
	push	edx
	push	OFFSET $SG94854
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv92[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG94855
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 97   :     TEST_Assert(env, FormatTestLabel(L"PMC_BitwiseAnd_X_X (%d.%d)", no, 3), (w_result = ep->BitwiseAnd_X_X(u, v, &w)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_BitwiseAnd_X_Xの復帰コードが期待通りではない(%d)", w_result));

	mov	esi, esp
	lea	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+168]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _w_result$[ebp], eax
	cmp	DWORD PTR _w_result$[ebp], 0
	jne	SHORT $LN10@TEST_PMC_B
	mov	DWORD PTR tv142[ebp], 1
	jmp	SHORT $LN11@TEST_PMC_B
$LN10@TEST_PMC_B:
	mov	DWORD PTR tv142[ebp], 0
$LN11@TEST_PMC_B:
	mov	edx, DWORD PTR _w_result$[ebp]
	push	edx
	push	OFFSET $SG94856
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv142[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG94857
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 98   :     TEST_Assert(env, FormatTestLabel(L"PMC_BitwiseAnd_X_X (%d.%d)", no, 4), (result = ep->ToByteArray(w, actual_w_buf, sizeof(actual_w_buf), &actual_w_buf_size)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_ToByteArrayの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	eax, DWORD PTR _actual_w_buf_size$[ebp]
	push	eax
	push	256					; 00000100H
	lea	ecx, DWORD PTR _actual_w_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN12@TEST_PMC_B
	mov	DWORD PTR tv161[ebp], 1
	jmp	SHORT $LN13@TEST_PMC_B
$LN12@TEST_PMC_B:
	mov	DWORD PTR tv161[ebp], 0
$LN13@TEST_PMC_B:
	mov	edx, DWORD PTR _result$[ebp]
	push	edx
	push	OFFSET $SG94858
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv161[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG94859
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 99   :     TEST_Assert(env, FormatTestLabel(L"PMC_BitwiseAnd_X_X (%d.%d)", no, 5), _EQUALS_MEMORY(actual_w_buf, actual_w_buf_size, desired_w_buf, desired_w_buf_size) == 0, L"データの内容が一致しない");

	mov	eax, DWORD PTR _desired_w_buf_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _desired_w_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _actual_w_buf_size$[ebp]
	push	edx
	lea	eax, DWORD PTR _actual_w_buf$[ebp]
	push	eax
	call	__EQUALS_MEMORY
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN14@TEST_PMC_B
	mov	DWORD PTR tv176[ebp], 1
	jmp	SHORT $LN15@TEST_PMC_B
$LN14@TEST_PMC_B:
	mov	DWORD PTR tv176[ebp], 0
$LN15@TEST_PMC_B:
	push	OFFSET $SG94860
	mov	ecx, DWORD PTR tv176[ebp]
	push	ecx
	push	5
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET $SG94861
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 100  :     if (w_result == PMC_STATUS_OK)

	cmp	DWORD PTR _w_result$[ebp], 0
	jne	SHORT $LN2@TEST_PMC_B

; 101  :         ep->Dispose(w);

	mov	esi, esp
	mov	ecx, DWORD PTR _w$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@TEST_PMC_B:

; 102  :     if (v_result == PMC_STATUS_OK)

	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN3@TEST_PMC_B

; 103  :         ep->Dispose(v);

	mov	esi, esp
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@TEST_PMC_B:

; 104  :     if (u_result == PMC_STATUS_OK)

	cmp	DWORD PTR _u_result$[ebp], 0
	jne	SHORT $LN1@TEST_PMC_B

; 105  :         ep->Dispose(u);

	mov	esi, esp
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_PMC_B:

; 106  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@TEST_PMC_B
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 352				; 00000160H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN22@TEST_PMC_B:
	DD	5
	DD	$LN21@TEST_PMC_B
$LN21@TEST_PMC_B:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN16@TEST_PMC_B
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN17@TEST_PMC_B
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN18@TEST_PMC_B
	DD	-300					; fffffed4H
	DD	256					; 00000100H
	DD	$LN19@TEST_PMC_B
	DD	-312					; fffffec8H
	DD	4
	DD	$LN20@TEST_PMC_B
$LN20@TEST_PMC_B:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN19@TEST_PMC_B:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN18@TEST_PMC_B:
	DB	119					; 00000077H
	DB	0
$LN17@TEST_PMC_B:
	DB	118					; 00000076H
	DB	0
$LN16@TEST_PMC_B:
	DB	117					; 00000075H
	DB	0
_TEST_PMC_BitwiseAnd_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\test_op_bitwiseand.c
_TEXT	SEGMENT
tv134 = -48						; size = 4
tv92 = -44						; size = 4
tv74 = -40						; size = 4
_u_result$ = -36					; size = 4
_result$ = -32						; size = 4
_actual_w$ = -24					; size = 8
_u$ = -8						; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_u_buf$ = 20						; size = 4
_u_buf_size$ = 24					; size = 4
_v$ = 28						; size = 8
_desired_w$ = 36					; size = 8
_TEST_PMC_BitwiseAnd_X_L PROC

; 72   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __83453097_test_op_bitwiseand@c
	call	@__CheckForDebuggerJustMyCode@4

; 73   :     PMC_HANDLE_UINT u;
; 74   :     unsigned __int64 actual_w;
; 75   :     PMC_STATUS_CODE result;
; 76   :     PMC_STATUS_CODE u_result;
; 77   :     TEST_Assert(env, FormatTestLabel(L"PMC_BitwiseAnd_X_L (%d.%d)", no, 1), (u_result = ep->FromByteArray(u_buf, u_buf_size, &u)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_FromByteArrayの復帰コードが期待通りではない(%d)", u_result));

	mov	esi, esp
	lea	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _u_result$[ebp], eax
	cmp	DWORD PTR _u_result$[ebp], 0
	jne	SHORT $LN4@TEST_PMC_B
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN5@TEST_PMC_B
$LN4@TEST_PMC_B:
	mov	DWORD PTR tv74[ebp], 0
$LN5@TEST_PMC_B:
	mov	edx, DWORD PTR _u_result$[ebp]
	push	edx
	push	OFFSET $SG94817
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG94818
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 78   :     TEST_Assert(env, FormatTestLabel(L"PMC_BitwiseAnd_X_L (%d.%d)", no, 2), (result = ep->BitwiseAnd_X_L(u, v, &actual_w)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_BitwiseAnd_X_Lの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	eax, DWORD PTR _actual_w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+164]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN6@TEST_PMC_B
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN7@TEST_PMC_B
$LN6@TEST_PMC_B:
	mov	DWORD PTR tv92[ebp], 0
$LN7@TEST_PMC_B:
	mov	eax, DWORD PTR _result$[ebp]
	push	eax
	push	OFFSET $SG94819
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR tv92[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET $SG94820
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 79   :     TEST_Assert(env, FormatTestLabel(L"PMC_BitwiseAnd_X_L (%d.%d)", no, 3), actual_w == desired_w, L"データの内容が一致しない");

	mov	ecx, DWORD PTR _actual_w$[ebp]
	cmp	ecx, DWORD PTR _desired_w$[ebp]
	jne	SHORT $LN8@TEST_PMC_B
	mov	edx, DWORD PTR _actual_w$[ebp+4]
	cmp	edx, DWORD PTR _desired_w$[ebp+4]
	jne	SHORT $LN8@TEST_PMC_B
	mov	DWORD PTR tv134[ebp], 1
	jmp	SHORT $LN9@TEST_PMC_B
$LN8@TEST_PMC_B:
	mov	DWORD PTR tv134[ebp], 0
$LN9@TEST_PMC_B:
	push	OFFSET $SG94821
	mov	eax, DWORD PTR tv134[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG94822
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 80   :     if (u_result == PMC_STATUS_OK)

	cmp	DWORD PTR _u_result$[ebp], 0
	jne	SHORT $LN1@TEST_PMC_B

; 81   :         ep->Dispose(u);

	mov	esi, esp
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_PMC_B:

; 82   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@TEST_PMC_B
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN13@TEST_PMC_B:
	DD	2
	DD	$LN12@TEST_PMC_B
$LN12@TEST_PMC_B:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN10@TEST_PMC_B
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN11@TEST_PMC_B
$LN11@TEST_PMC_B:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	0
$LN10@TEST_PMC_B:
	DB	117					; 00000075H
	DB	0
_TEST_PMC_BitwiseAnd_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\test_op_bitwiseand.c
_TEXT	SEGMENT
tv134 = -44						; size = 4
tv92 = -40						; size = 4
tv74 = -36						; size = 4
_u_result$ = -32					; size = 4
_result$ = -28						; size = 4
_actual_w$ = -20					; size = 4
_u$ = -8						; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_u_buf$ = 20						; size = 4
_u_buf_size$ = 24					; size = 4
_v$ = 28						; size = 4
_desired_w$ = 32					; size = 4
_TEST_PMC_BitwiseAnd_X_I PROC

; 59   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __83453097_test_op_bitwiseand@c
	call	@__CheckForDebuggerJustMyCode@4

; 60   :     PMC_HANDLE_UINT u;
; 61   :     unsigned __int32 actual_w;
; 62   :     PMC_STATUS_CODE result;
; 63   :     PMC_STATUS_CODE u_result;
; 64   :     TEST_Assert(env, FormatTestLabel(L"PMC_BitwiseAnd_X_I (%d.%d)", no, 1), (u_result = ep->FromByteArray(u_buf, u_buf_size, &u)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_FromByteArrayの復帰コードが期待通りではない(%d)", u_result));

	mov	esi, esp
	lea	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _u_result$[ebp], eax
	cmp	DWORD PTR _u_result$[ebp], 0
	jne	SHORT $LN4@TEST_PMC_B
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN5@TEST_PMC_B
$LN4@TEST_PMC_B:
	mov	DWORD PTR tv74[ebp], 0
$LN5@TEST_PMC_B:
	mov	edx, DWORD PTR _u_result$[ebp]
	push	edx
	push	OFFSET $SG94791
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG94792
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 65   :     TEST_Assert(env, FormatTestLabel(L"PMC_BitwiseAnd_X_I (%d.%d)", no, 2), (result = ep->BitwiseAnd_X_I(u, v, &actual_w)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_BitwiseAnd_X_Iの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	eax, DWORD PTR _actual_w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN6@TEST_PMC_B
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN7@TEST_PMC_B
$LN6@TEST_PMC_B:
	mov	DWORD PTR tv92[ebp], 0
$LN7@TEST_PMC_B:
	mov	edx, DWORD PTR _result$[ebp]
	push	edx
	push	OFFSET $SG94793
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv92[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG94794
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 66   :     TEST_Assert(env, FormatTestLabel(L"PMC_BitwiseAnd_X_I (%d.%d)", no, 3), actual_w == desired_w, L"データの内容が一致しない");

	mov	eax, DWORD PTR _actual_w$[ebp]
	cmp	eax, DWORD PTR _desired_w$[ebp]
	jne	SHORT $LN8@TEST_PMC_B
	mov	DWORD PTR tv134[ebp], 1
	jmp	SHORT $LN9@TEST_PMC_B
$LN8@TEST_PMC_B:
	mov	DWORD PTR tv134[ebp], 0
$LN9@TEST_PMC_B:
	push	OFFSET $SG94795
	mov	ecx, DWORD PTR tv134[ebp]
	push	ecx
	push	3
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET $SG94796
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 67   :     if (u_result == PMC_STATUS_OK)

	cmp	DWORD PTR _u_result$[ebp], 0
	jne	SHORT $LN1@TEST_PMC_B

; 68   :         ep->Dispose(u);

	mov	esi, esp
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_PMC_B:

; 69   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@TEST_PMC_B
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN13@TEST_PMC_B:
	DD	2
	DD	$LN12@TEST_PMC_B
$LN12@TEST_PMC_B:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN10@TEST_PMC_B
	DD	-20					; ffffffecH
	DD	4
	DD	$LN11@TEST_PMC_B
$LN11@TEST_PMC_B:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	0
$LN10@TEST_PMC_B:
	DB	117					; 00000075H
	DB	0
_TEST_PMC_BitwiseAnd_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\test_op_bitwiseand.c
_TEXT	SEGMENT
tv134 = -48						; size = 4
tv92 = -44						; size = 4
tv74 = -40						; size = 4
_v_result$ = -36					; size = 4
_result$ = -32						; size = 4
_actual_w$ = -24					; size = 8
_v$ = -8						; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_u$ = 20						; size = 8
_v_buf$ = 28						; size = 4
_v_buf_size$ = 32					; size = 4
_desired_w$ = 36					; size = 8
_TEST_PMC_BitwiseAnd_L_X PROC

; 46   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __83453097_test_op_bitwiseand@c
	call	@__CheckForDebuggerJustMyCode@4

; 47   :     PMC_HANDLE_UINT v;
; 48   :     unsigned __int64 actual_w;
; 49   :     PMC_STATUS_CODE result;
; 50   :     PMC_STATUS_CODE v_result;
; 51   :     TEST_Assert(env, FormatTestLabel(L"PMC_BitwiseAnd_L_X (%d.%d)", no, 1), (v_result = ep->FromByteArray(v_buf, v_buf_size, &v)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_FromByteArrayの復帰コードが期待通りではない(%d)", v_result));

	mov	esi, esp
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _v_result$[ebp], eax
	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN4@TEST_PMC_B
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN5@TEST_PMC_B
$LN4@TEST_PMC_B:
	mov	DWORD PTR tv74[ebp], 0
$LN5@TEST_PMC_B:
	mov	edx, DWORD PTR _v_result$[ebp]
	push	edx
	push	OFFSET $SG94765
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG94766
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 52   :     TEST_Assert(env, FormatTestLabel(L"PMC_BitwiseAnd_L_X (%d.%d)", no, 2), (result = ep->BitwiseAnd_L_X(u, v, &actual_w)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_BitwiseAnd_L_Xの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	eax, DWORD PTR _actual_w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN6@TEST_PMC_B
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN7@TEST_PMC_B
$LN6@TEST_PMC_B:
	mov	DWORD PTR tv92[ebp], 0
$LN7@TEST_PMC_B:
	mov	eax, DWORD PTR _result$[ebp]
	push	eax
	push	OFFSET $SG94767
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR tv92[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET $SG94768
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 53   :     TEST_Assert(env, FormatTestLabel(L"PMC_BitwiseAnd_L_X (%d.%d)", no, 3), actual_w == desired_w, L"データの内容が一致しない");

	mov	ecx, DWORD PTR _actual_w$[ebp]
	cmp	ecx, DWORD PTR _desired_w$[ebp]
	jne	SHORT $LN8@TEST_PMC_B
	mov	edx, DWORD PTR _actual_w$[ebp+4]
	cmp	edx, DWORD PTR _desired_w$[ebp+4]
	jne	SHORT $LN8@TEST_PMC_B
	mov	DWORD PTR tv134[ebp], 1
	jmp	SHORT $LN9@TEST_PMC_B
$LN8@TEST_PMC_B:
	mov	DWORD PTR tv134[ebp], 0
$LN9@TEST_PMC_B:
	push	OFFSET $SG94769
	mov	eax, DWORD PTR tv134[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG94770
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 54   :     if (v_result == PMC_STATUS_OK)

	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN1@TEST_PMC_B

; 55   :         ep->Dispose(v);

	mov	esi, esp
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_PMC_B:

; 56   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@TEST_PMC_B
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN13@TEST_PMC_B:
	DD	2
	DD	$LN12@TEST_PMC_B
$LN12@TEST_PMC_B:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN10@TEST_PMC_B
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN11@TEST_PMC_B
$LN11@TEST_PMC_B:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	0
$LN10@TEST_PMC_B:
	DB	118					; 00000076H
	DB	0
_TEST_PMC_BitwiseAnd_L_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\test_op_bitwiseand.c
_TEXT	SEGMENT
tv134 = -44						; size = 4
tv92 = -40						; size = 4
tv74 = -36						; size = 4
_v_result$ = -32					; size = 4
_result$ = -28						; size = 4
_actual_w$ = -20					; size = 4
_v$ = -8						; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_u$ = 20						; size = 4
_v_buf$ = 24						; size = 4
_v_buf_size$ = 28					; size = 4
_desired_w$ = 32					; size = 4
_TEST_PMC_BitwiseAnd_I_X PROC

; 33   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __83453097_test_op_bitwiseand@c
	call	@__CheckForDebuggerJustMyCode@4

; 34   :     PMC_HANDLE_UINT v;
; 35   :     unsigned __int32 actual_w;
; 36   :     PMC_STATUS_CODE result;
; 37   :     PMC_STATUS_CODE v_result;
; 38   :     TEST_Assert(env, FormatTestLabel(L"PMC_BitwiseAnd_I_X (%d.%d)", no, 1), (v_result = ep->FromByteArray(v_buf, v_buf_size, &v)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_FromByteArrayの復帰コードが期待通りではない(%d)", v_result));

	mov	esi, esp
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _v_result$[ebp], eax
	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN4@TEST_PMC_B
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN5@TEST_PMC_B
$LN4@TEST_PMC_B:
	mov	DWORD PTR tv74[ebp], 0
$LN5@TEST_PMC_B:
	mov	edx, DWORD PTR _v_result$[ebp]
	push	edx
	push	OFFSET $SG94739
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG94740
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 39   :     TEST_Assert(env, FormatTestLabel(L"PMC_BitwiseAnd_I_X (%d.%d)", no, 2), (result = ep->BitwiseAnd_I_X(u, v, &actual_w)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_BitwiseAnd_I_Xの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	eax, DWORD PTR _actual_w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+152]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN6@TEST_PMC_B
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN7@TEST_PMC_B
$LN6@TEST_PMC_B:
	mov	DWORD PTR tv92[ebp], 0
$LN7@TEST_PMC_B:
	mov	edx, DWORD PTR _result$[ebp]
	push	edx
	push	OFFSET $SG94741
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv92[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG94742
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 40   :     TEST_Assert(env, FormatTestLabel(L"PMC_BitwiseAnd_I_X (%d.%d)", no, 3), actual_w == desired_w, L"データの内容が一致しない");

	mov	eax, DWORD PTR _actual_w$[ebp]
	cmp	eax, DWORD PTR _desired_w$[ebp]
	jne	SHORT $LN8@TEST_PMC_B
	mov	DWORD PTR tv134[ebp], 1
	jmp	SHORT $LN9@TEST_PMC_B
$LN8@TEST_PMC_B:
	mov	DWORD PTR tv134[ebp], 0
$LN9@TEST_PMC_B:
	push	OFFSET $SG94743
	mov	ecx, DWORD PTR tv134[ebp]
	push	ecx
	push	3
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET $SG94744
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 41   :     if (v_result == PMC_STATUS_OK)

	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN1@TEST_PMC_B

; 42   :         ep->Dispose(v);

	mov	esi, esp
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_PMC_B:

; 43   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@TEST_PMC_B
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN13@TEST_PMC_B:
	DD	2
	DD	$LN12@TEST_PMC_B
$LN12@TEST_PMC_B:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN10@TEST_PMC_B
	DD	-20					; ffffffecH
	DD	4
	DD	$LN11@TEST_PMC_B
$LN11@TEST_PMC_B:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	0
$LN10@TEST_PMC_B:
	DB	118					; 00000076H
	DB	0
_TEST_PMC_BitwiseAnd_I_X ENDP
_TEXT	ENDS
END
