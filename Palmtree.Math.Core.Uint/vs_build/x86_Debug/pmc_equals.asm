; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_equals.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__01E10085_pmc_equals@c DB 01H
msvcjmc	ENDS
PUBLIC	_Initialize_Equals
PUBLIC	_PMC_Equals_I_X@12
PUBLIC	_PMC_Equals_L_X@16
PUBLIC	_PMC_Equals_X_I@12
PUBLIC	_PMC_Equals_X_L@16
PUBLIC	_PMC_Equals_X_X@12
PUBLIC	_Equals_X_X
PUBLIC	__JustMyCode_Default
EXTRN	_CheckNumber:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__aullshr:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_equals.c
_TEXT	SEGMENT
tv141 = -56						; size = 4
tv200 = -52						; size = 8
tv129 = -44						; size = 4
tv84 = -40						; size = 4
_v_bit_count$1 = -36					; size = 4
_u_bit_count$2 = -32					; size = 4
_v_bit_count$3 = -28					; size = 4
_v_bit_count$4 = -24					; size = 4
_v_lo$5 = -20						; size = 4
_v_hi$6 = -12						; size = 4
_u_bit_count$7 = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_w$ = 20						; size = 4
_PMC_Equals_X_L_Imp PROC

; 132  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __01E10085_pmc_equals@c
	call	@__CheckForDebuggerJustMyCode@4

; 133  :     if (u->IS_ZERO)

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN2@PMC_Equals

; 134  :     {
; 135  :         // u が 0 である場合
; 136  :         if (v == 0)

	mov	edx, DWORD PTR _v$[ebp]
	or	edx, DWORD PTR _v$[ebp+4]
	jne	SHORT $LN4@PMC_Equals

; 137  :         {
; 138  :             // v が 0 である場合
; 139  :             *w = 1;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], 1

; 140  :         }

	jmp	SHORT $LN5@PMC_Equals
$LN4@PMC_Equals:

; 141  :         else
; 142  :         {
; 143  :             // v が 0 でない場合
; 144  :             *w = 0;

	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx], 0
$LN5@PMC_Equals:

; 145  :         }
; 146  :     }

	jmp	$LN3@PMC_Equals
$LN2@PMC_Equals:

; 147  :     else if (v == 0)

	mov	edx, DWORD PTR _v$[ebp]
	or	edx, DWORD PTR _v$[ebp+4]
	jne	SHORT $LN6@PMC_Equals

; 148  :     {
; 149  :         // v が 0 である場合
; 150  :         *w = 0;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], 0

; 151  :     }

	jmp	$LN3@PMC_Equals
$LN6@PMC_Equals:

; 152  :     else
; 153  :     {
; 154  :         // u と v がともに 0 ではない場合
; 155  :         if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)

	mov	ecx, 1
	test	ecx, ecx
	je	$LN8@PMC_Equals

; 156  :         {
; 157  :             // _UINT64_T が 1 ワードで表現しきれない場合
; 158  :             __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _u_bit_count$7[ebp], eax

; 159  :             _UINT32_T v_hi;
; 160  :             _UINT32_T v_lo = _FROMDWORDTOWORD(v, &v_hi);

	lea	ecx, DWORD PTR _v_hi$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	call	__FROMDWORDTOWORD
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _v_lo$5[ebp], eax

; 161  :             if (v_hi == 0)

	cmp	DWORD PTR _v_hi$6[ebp], 0
	jne	SHORT $LN10@PMC_Equals

; 162  :             {
; 163  :                 // v の値が 32bit では表現できる場合
; 164  :                 __UNIT_TYPE v_bit_count = sizeof(v_lo) * 8 - _LZCNT_ALT_32(v_lo);

	mov	ecx, DWORD PTR _v_lo$5[ebp]
	push	ecx
	call	__LZCNT_ALT_32
	add	esp, 4
	mov	edx, 32					; 00000020H
	sub	edx, eax
	mov	DWORD PTR _v_bit_count$4[ebp], edx

; 165  :                 if (u_bit_count != v_bit_count)

	mov	eax, DWORD PTR _u_bit_count$7[ebp]
	cmp	eax, DWORD PTR _v_bit_count$4[ebp]
	je	SHORT $LN12@PMC_Equals

; 166  :                 {
; 167  :                     // 明らかに u > v である場合
; 168  :                     *w = 0;

	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx], 0

; 169  :                 }

	jmp	SHORT $LN13@PMC_Equals
$LN12@PMC_Equals:

; 170  :                 else
; 171  :                 {
; 172  :                     // u > 0 && v > 0 かつ u のビット長と v のビット長が等しく、かつ v が 1 ワードで表現できる場合
; 173  :                     // ⇒ u と v はともに 1 ワードで表現できる
; 174  :                     *w = u->BLOCK[0] == v_lo;

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [eax+edx]
	cmp	eax, DWORD PTR _v_lo$5[ebp]
	jne	SHORT $LN19@PMC_Equals
	mov	DWORD PTR tv84[ebp], 1
	jmp	SHORT $LN20@PMC_Equals
$LN19@PMC_Equals:
	mov	DWORD PTR tv84[ebp], 0
$LN20@PMC_Equals:
	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR [ecx], edx
$LN13@PMC_Equals:

; 175  :                 }
; 176  :             }

	jmp	SHORT $LN11@PMC_Equals
$LN10@PMC_Equals:

; 177  :             else
; 178  :             {
; 179  :                 // v の値が 32bit では表現できない場合
; 180  :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v_hi);

	mov	eax, DWORD PTR _v_hi$6[ebp]
	push	eax
	call	__LZCNT_ALT_32
	add	esp, 4
	mov	ecx, 64					; 00000040H
	sub	ecx, eax
	mov	DWORD PTR _v_bit_count$3[ebp], ecx

; 181  :                 if (u_bit_count != v_bit_count)

	mov	edx, DWORD PTR _u_bit_count$7[ebp]
	cmp	edx, DWORD PTR _v_bit_count$3[ebp]
	je	SHORT $LN14@PMC_Equals

; 182  :                 {
; 183  :                     // 明らかに u > v である場合
; 184  :                     *w = 0;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], 0

; 185  :                 }

	jmp	SHORT $LN11@PMC_Equals
$LN14@PMC_Equals:

; 186  :                 else
; 187  :                 {
; 188  :                     // u > 0 && v > 0 かつ u のビット長と v のビット長が等しく、かつ v が 2 ワードで表現できる場合
; 189  :                     // ⇒ u と v はともに 2 ワードで表現できる
; 190  :                     *w = u->BLOCK[1] == v_hi && u->BLOCK[0] == v_lo;

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [ecx+eax]
	cmp	ecx, DWORD PTR _v_hi$6[ebp]
	jne	SHORT $LN21@PMC_Equals
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [eax+edx]
	cmp	eax, DWORD PTR _v_lo$5[ebp]
	jne	SHORT $LN21@PMC_Equals
	mov	DWORD PTR tv129[ebp], 1
	jmp	SHORT $LN22@PMC_Equals
$LN21@PMC_Equals:
	mov	DWORD PTR tv129[ebp], 0
$LN22@PMC_Equals:
	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR tv129[ebp]
	mov	DWORD PTR [ecx], edx
$LN11@PMC_Equals:

; 191  :                 }
; 192  :             }
; 193  :         }

	jmp	SHORT $LN3@PMC_Equals
$LN8@PMC_Equals:

; 194  :         else
; 195  :         {
; 196  :             // _UINT64_T が 1 ワードで表現できる場合
; 197  : 
; 198  :             __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _u_bit_count$2[ebp], ecx

; 199  :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);

	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	call	__LZCNT_ALT_UNIT
	add	esp, 4
	mov	ecx, 64					; 00000040H
	sub	ecx, eax
	mov	DWORD PTR _v_bit_count$1[ebp], ecx

; 200  :             if (u_bit_count != v_bit_count)

	mov	edx, DWORD PTR _u_bit_count$2[ebp]
	cmp	edx, DWORD PTR _v_bit_count$1[ebp]
	je	SHORT $LN16@PMC_Equals

; 201  :             {
; 202  :                 // 明らかに u > v である場合
; 203  :                 *w = 0;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], 0

; 204  :             }

	jmp	SHORT $LN3@PMC_Equals
$LN16@PMC_Equals:

; 205  :             else
; 206  :             {
; 207  :                 // u > 0 && v > 0 かつ u のビット長と v のビット長が等しく、かつ v が 1 ワードで表現できる場合
; 208  :                 // ⇒ u と v はともに 1 ワードで表現できる
; 209  :                 *w = u->BLOCK[0] == v;

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+edx]
	xor	eax, eax
	mov	DWORD PTR tv200[ebp], edx
	mov	DWORD PTR tv200[ebp+4], eax
	mov	ecx, DWORD PTR tv200[ebp]
	cmp	ecx, DWORD PTR _v$[ebp]
	jne	SHORT $LN23@PMC_Equals
	mov	edx, DWORD PTR tv200[ebp+4]
	cmp	edx, DWORD PTR _v$[ebp+4]
	jne	SHORT $LN23@PMC_Equals
	mov	DWORD PTR tv141[ebp], 1
	jmp	SHORT $LN24@PMC_Equals
$LN23@PMC_Equals:
	mov	DWORD PTR tv141[ebp], 0
$LN24@PMC_Equals:
	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR tv141[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@PMC_Equals:

; 210  :             }
; 211  :         }
; 212  :     }
; 213  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 214  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN27@PMC_Equals
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN27@PMC_Equals:
	DD	1
	DD	$LN26@PMC_Equals
$LN26@PMC_Equals:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN25@PMC_Equals
$LN25@PMC_Equals:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	0
_PMC_Equals_X_L_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_equals.c
_TEXT	SEGMENT
tv79 = -12						; size = 4
_v_bit_count$1 = -8					; size = 4
_u_bit_count$2 = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Equals_X_I_Imp PROC

; 53   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __01E10085_pmc_equals@c
	call	@__CheckForDebuggerJustMyCode@4

; 54   :     if (u->IS_ZERO)

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN2@PMC_Equals

; 55   :     {
; 56   :         // u が 0 である場合
; 57   :         if (v == 0)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN4@PMC_Equals

; 58   :         {
; 59   :             // v が 0 である場合
; 60   :             *w = 1;

	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx], 1

; 61   :         }

	jmp	SHORT $LN5@PMC_Equals
$LN4@PMC_Equals:

; 62   :         else
; 63   :         {
; 64   :             // v が 0 でない場合
; 65   :             *w = 0;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], 0
$LN5@PMC_Equals:

; 66   :         }
; 67   :     }

	jmp	SHORT $LN3@PMC_Equals
$LN2@PMC_Equals:

; 68   :     else if (v == 0)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN6@PMC_Equals

; 69   :     {
; 70   :         // v が 0 である場合
; 71   :         *w = 0;

	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx], 0

; 72   :     }

	jmp	SHORT $LN3@PMC_Equals
$LN6@PMC_Equals:

; 73   :     else
; 74   :     {
; 75   :         // x と y がともに 0 ではない場合
; 76   :         __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _u_bit_count$2[ebp], eax

; 77   :         __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	__LZCNT_ALT_32
	add	esp, 4
	mov	edx, 32					; 00000020H
	sub	edx, eax
	mov	DWORD PTR _v_bit_count$1[ebp], edx

; 78   :         if (u_bit_count != v_bit_count)

	mov	eax, DWORD PTR _u_bit_count$2[ebp]
	cmp	eax, DWORD PTR _v_bit_count$1[ebp]
	je	SHORT $LN8@PMC_Equals

; 79   :         {
; 80   :             // 明らかに u != v である場合
; 81   :             *w = 0;

	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx], 0

; 82   :         }

	jmp	SHORT $LN3@PMC_Equals
$LN8@PMC_Equals:

; 83   :         else
; 84   :         {
; 85   :             // u > 0 && v > 0 かつ u のビット長と v のビット長が等しい場合
; 86   :             // ⇒ u と v はともに 1 ワードで表現できる
; 87   :             *w = u->BLOCK[0] == v;

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [eax+edx]
	cmp	eax, DWORD PTR _v$[ebp]
	jne	SHORT $LN11@PMC_Equals
	mov	DWORD PTR tv79[ebp], 1
	jmp	SHORT $LN12@PMC_Equals
$LN11@PMC_Equals:
	mov	DWORD PTR tv79[ebp], 0
$LN12@PMC_Equals:
	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR [ecx], edx
$LN3@PMC_Equals:

; 88   :         }
; 89   :     }
; 90   :     return (PMC_STATUS_OK);

	xor	eax, eax

; 91   : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_PMC_Equals_X_I_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_equals.c
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_count$ = 16						; size = 4
_Equals_X_X PROC

; 39   : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __01E10085_pmc_equals@c
	call	@__CheckForDebuggerJustMyCode@4
$LN2@Equals_X_X:

; 40   :     while (count > 0)

	cmp	DWORD PTR _count$[ebp], 0
	jbe	SHORT $LN3@Equals_X_X

; 41   :     {
; 42   :         if (*u != *v)

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	je	SHORT $LN4@Equals_X_X

; 43   :             return (0);

	xor	eax, eax
	jmp	SHORT $LN1@Equals_X_X
$LN4@Equals_X_X:

; 44   :         ++u;

	mov	eax, DWORD PTR _u$[ebp]
	add	eax, 4
	mov	DWORD PTR _u$[ebp], eax

; 45   :         ++v;

	mov	ecx, DWORD PTR _v$[ebp]
	add	ecx, 4
	mov	DWORD PTR _v$[ebp], ecx

; 46   :         --count;

	mov	edx, DWORD PTR _count$[ebp]
	sub	edx, 1
	mov	DWORD PTR _count$[ebp], edx

; 47   :     }

	jmp	SHORT $LN2@Equals_X_X
$LN3@Equals_X_X:

; 48   :     return (1);

	mov	eax, 1
$LN1@Equals_X_X:

; 49   : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_Equals_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT PROC

; 629  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 630  :         if (x == 0)

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 631  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 632  : #ifdef _M_IX86
; 633  :         _UINT32_T pos;
; 634  : #ifdef _MSC_VER
; 635  :         _BitScanReverse(&pos, x);

	bsr	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _pos$[ebp], eax

; 636  : #elif defined(__GNUC__)
; 637  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 638  : #else
; 639  : #error unknown compiler
; 640  : #endif
; 641  : #elif defined(_M_X64)
; 642  : #ifdef _MSC_VER
; 643  :         _UINT32_T pos;
; 644  :         _BitScanReverse64(&pos, x);
; 645  : #elif defined(__GNUC__)
; 646  :         _UINT64_T pos;
; 647  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 648  : #else
; 649  : #error unknown compiler
; 650  : #endif
; 651  : #else
; 652  : #error unknown platform
; 653  : #endif
; 654  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, DWORD PTR _pos$[ebp]
$LN1@LZCNT_ALT_:

; 655  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@LZCNT_ALT_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@LZCNT_ALT_:
	DD	1
	DD	$LN5@LZCNT_ALT_
$LN5@LZCNT_ALT_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@LZCNT_ALT_
$LN4@LZCNT_ALT_:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
__LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 4
__LZCNT_ALT_32 PROC

; 596  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 597  :         if (x == 0)

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 598  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 599  :         _UINT32_T pos;
; 600  : #ifdef _MSC_VER
; 601  :         _BitScanReverse(&pos, x);

	bsr	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _pos$[ebp], eax

; 602  : #elif defined(__GNUC__)
; 603  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 604  : #else
; 605  : #error unknown compiler
; 606  : #endif
; 607  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, DWORD PTR _pos$[ebp]
$LN1@LZCNT_ALT_:

; 608  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@LZCNT_ALT_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@LZCNT_ALT_:
	DD	1
	DD	$LN5@LZCNT_ALT_
$LN5@LZCNT_ALT_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@LZCNT_ALT_
$LN4@LZCNT_ALT_:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
__LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC

; 182  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 183  :         *result_high = (_UINT32_T)(value >> 32);

	mov	eax, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR _value$[ebp+4]
	mov	cl, 32					; 00000020H
	call	__aullshr
	mov	ecx, DWORD PTR _result_high$[ebp]
	mov	DWORD PTR [ecx], eax

; 184  :         return ((_UINT32_T)value);

	mov	eax, DWORD PTR _value$[ebp]

; 185  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_equals.c
_TEXT	SEGMENT
tv81 = -24						; size = 4
_v_bit_count$1 = -20					; size = 4
_u_bit_count$2 = -16					; size = 4
_result$ = -12						; size = 4
_nv$ = -8						; size = 4
_nu$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Equals_X_X@12 PROC

; 255  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __01E10085_pmc_equals@c
	call	@__CheckForDebuggerJustMyCode@4

; 256  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Equals

; 257  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Equals
$LN2@PMC_Equals:

; 258  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Equals

; 259  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Equals
$LN3@PMC_Equals:

; 260  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Equals

; 261  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Equals
$LN4@PMC_Equals:

; 262  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 263  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	ecx, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], ecx

; 264  :     PMC_STATUS_CODE result;
; 265  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nu$[ebp]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Equals

; 266  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Equals
$LN5@PMC_Equals:

; 267  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Equals

; 268  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Equals
$LN6@PMC_Equals:

; 269  :     if (nu->IS_ZERO)

	mov	ecx, DWORD PTR _nu$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	shr	edx, 1
	and	edx, 1
	je	SHORT $LN7@PMC_Equals

; 270  :     {
; 271  :         *w = nv->IS_ZERO ? 1 : 0;

	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN14@PMC_Equals
	mov	DWORD PTR tv81[ebp], 1
	jmp	SHORT $LN15@PMC_Equals
$LN14@PMC_Equals:
	mov	DWORD PTR tv81[ebp], 0
$LN15@PMC_Equals:
	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR tv81[ebp]
	mov	DWORD PTR [edx], eax

; 272  :     }

	jmp	SHORT $LN8@PMC_Equals
$LN7@PMC_Equals:

; 273  :     else if (nv->IS_ZERO)

	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	shr	edx, 1
	and	edx, 1
	je	SHORT $LN9@PMC_Equals

; 274  :     {
; 275  :         *w = 0;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], 0

; 276  :     }

	jmp	SHORT $LN8@PMC_Equals
$LN9@PMC_Equals:

; 277  :     else
; 278  :     {
; 279  :         __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	ecx, DWORD PTR _nu$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _u_bit_count$2[ebp], edx

; 280  :         __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _v_bit_count$1[ebp], ecx

; 281  :         if (u_bit_count != v_bit_count)

	mov	edx, DWORD PTR _u_bit_count$2[ebp]
	cmp	edx, DWORD PTR _v_bit_count$1[ebp]
	je	SHORT $LN11@PMC_Equals

; 282  :         {
; 283  :             // 明らかに u > v である場合
; 284  :             *w = 0;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], 0

; 285  :         }

	jmp	SHORT $LN8@PMC_Equals
$LN11@PMC_Equals:

; 286  :         else
; 287  :         {
; 288  :             // u > 0 && v > 0 かつ u のビット長と v のビット長が等しい場合
; 289  :             *w = Equals_X_X(nu->BLOCK, nv->BLOCK, nu->UNIT_WORD_COUNT);

	mov	ecx, DWORD PTR _nu$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_Equals_X_X
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx], eax
$LN8@PMC_Equals:

; 290  :         }
; 291  :     }
; 292  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Equals:

; 293  : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_PMC_Equals_X_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_equals.c
_TEXT	SEGMENT
_result$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_w$ = 20						; size = 4
_PMC_Equals_X_L@16 PROC

; 236  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __01E10085_pmc_equals@c
	call	@__CheckForDebuggerJustMyCode@4

; 237  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(v) * 8)

	xor	eax, eax
	je	SHORT $LN2@PMC_Equals

; 238  :     {
; 239  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 240  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@PMC_Equals
$LN2@PMC_Equals:

; 241  :     }
; 242  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN3@PMC_Equals

; 243  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Equals
$LN3@PMC_Equals:

; 244  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Equals

; 245  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Equals
$LN4@PMC_Equals:

; 246  :     PMC_STATUS_CODE result;
; 247  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Equals

; 248  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Equals
$LN5@PMC_Equals:

; 249  :     if ((result = PMC_Equals_X_L_Imp((NUMBER_HEADER*)u, v, w)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	_PMC_Equals_X_L_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Equals

; 250  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Equals
$LN6@PMC_Equals:

; 251  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Equals:

; 252  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_PMC_Equals_X_L@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_equals.c
_TEXT	SEGMENT
_result$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Equals_X_I@12 PROC

; 113  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __01E10085_pmc_equals@c
	call	@__CheckForDebuggerJustMyCode@4

; 114  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)

	xor	eax, eax
	je	SHORT $LN2@PMC_Equals

; 115  :     {
; 116  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 117  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@PMC_Equals
$LN2@PMC_Equals:

; 118  :     }
; 119  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN3@PMC_Equals

; 120  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Equals
$LN3@PMC_Equals:

; 121  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Equals

; 122  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Equals
$LN4@PMC_Equals:

; 123  :     PMC_STATUS_CODE result;
; 124  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Equals

; 125  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Equals
$LN5@PMC_Equals:

; 126  :     if ((result = PMC_Equals_X_I_Imp((NUMBER_HEADER*)u, v, w)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	_PMC_Equals_X_I_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Equals

; 127  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Equals
$LN6@PMC_Equals:

; 128  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Equals:

; 129  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_PMC_Equals_X_I@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_equals.c
_TEXT	SEGMENT
_result$ = -4						; size = 4
_u$ = 8							; size = 8
_v$ = 16						; size = 4
_w$ = 20						; size = 4
_PMC_Equals_L_X@16 PROC

; 217  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __01E10085_pmc_equals@c
	call	@__CheckForDebuggerJustMyCode@4

; 218  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(u) * 8)

	xor	eax, eax
	je	SHORT $LN2@PMC_Equals

; 219  :     {
; 220  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 221  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@PMC_Equals
$LN2@PMC_Equals:

; 222  :     }
; 223  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Equals

; 224  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Equals
$LN3@PMC_Equals:

; 225  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Equals

; 226  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Equals
$LN4@PMC_Equals:

; 227  :     PMC_STATUS_CODE result;
; 228  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Equals

; 229  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Equals
$LN5@PMC_Equals:

; 230  :     if ((result = PMC_Equals_X_L_Imp((NUMBER_HEADER*)v, u, w)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	call	_PMC_Equals_X_L_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Equals

; 231  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Equals
$LN6@PMC_Equals:

; 232  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Equals:

; 233  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_PMC_Equals_L_X@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_equals.c
_TEXT	SEGMENT
_result$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Equals_I_X@12 PROC

; 94   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __01E10085_pmc_equals@c
	call	@__CheckForDebuggerJustMyCode@4

; 95   :     if (__UNIT_TYPE_BIT_COUNT < sizeof(u) * 8)

	xor	eax, eax
	je	SHORT $LN2@PMC_Equals

; 96   :     {
; 97   :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 98   :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@PMC_Equals
$LN2@PMC_Equals:

; 99   :     }
; 100  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Equals

; 101  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Equals
$LN3@PMC_Equals:

; 102  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Equals

; 103  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Equals
$LN4@PMC_Equals:

; 104  :     PMC_STATUS_CODE result;
; 105  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Equals

; 106  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Equals
$LN5@PMC_Equals:

; 107  :     if ((result = PMC_Equals_X_I_Imp((NUMBER_HEADER*)v, u, w)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_PMC_Equals_X_I_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Equals

; 108  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Equals
$LN6@PMC_Equals:

; 109  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Equals:

; 110  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_PMC_Equals_I_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_equals.c
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_Equals PROC

; 296  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __01E10085_pmc_equals@c
	call	@__CheckForDebuggerJustMyCode@4

; 297  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 298  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_Initialize_Equals ENDP
_TEXT	ENDS
END
