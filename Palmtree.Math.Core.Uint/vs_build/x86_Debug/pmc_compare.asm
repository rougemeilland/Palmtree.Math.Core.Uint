; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_compare.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__B6CC0FF4_pmc_compare@c DB 01H
msvcjmc	ENDS
PUBLIC	_Compare_Imp
PUBLIC	_Initialize_Compare
PUBLIC	_PMC_Compare_I_X@12
PUBLIC	_PMC_Compare_L_X@16
PUBLIC	_PMC_Compare_X_I@12
PUBLIC	_PMC_Compare_X_L@16
PUBLIC	_PMC_Compare_X_X@12
PUBLIC	__JustMyCode_Default
EXTRN	_CheckNumber:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__aullshr:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_compare.c
_TEXT	SEGMENT
tv252 = -52						; size = 8
tv240 = -44						; size = 8
_v_bit_count$1 = -36					; size = 4
_u_bit_count$2 = -32					; size = 4
_v_bit_count$3 = -28					; size = 4
_v_bit_count$4 = -24					; size = 4
_v_lo$5 = -20						; size = 4
_v_hi$6 = -12						; size = 4
_u_bit_count$7 = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_w$ = 20						; size = 4
_PMC_Compare_X_L_Imp PROC

; 144  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __B6CC0FF4_pmc_compare@c
	call	@__CheckForDebuggerJustMyCode@4

; 145  :     if (u->IS_ZERO)

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN2@PMC_Compar

; 146  :     {
; 147  :         // u が 0 である場合
; 148  :         if (v == 0)

	mov	edx, DWORD PTR _v$[ebp]
	or	edx, DWORD PTR _v$[ebp+4]
	jne	SHORT $LN4@PMC_Compar

; 149  :         {
; 150  :             // v が 0 である場合
; 151  :             *w = 0;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], 0

; 152  :         }

	jmp	SHORT $LN5@PMC_Compar
$LN4@PMC_Compar:

; 153  :         else
; 154  :         {
; 155  :             // v が 0 でない場合
; 156  :             *w = -1;

	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx], -1
$LN5@PMC_Compar:

; 157  :         }
; 158  :     }

	jmp	$LN1@PMC_Compar
$LN2@PMC_Compar:

; 159  :     else if (v == 0)

	mov	edx, DWORD PTR _v$[ebp]
	or	edx, DWORD PTR _v$[ebp+4]
	jne	SHORT $LN6@PMC_Compar

; 160  :     {
; 161  :         // v が 0 である場合
; 162  :         *w = 1;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], 1

; 163  :     }

	jmp	$LN1@PMC_Compar
$LN6@PMC_Compar:

; 164  :     else
; 165  :     {
; 166  :         // u と v がともに 0 ではない場合
; 167  :         if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)

	mov	ecx, 1
	test	ecx, ecx
	je	$LN8@PMC_Compar

; 168  :         {
; 169  :             // _UINT64_T が 1 ワードで表現しきれない場合
; 170  :             __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _u_bit_count$7[ebp], eax

; 171  :             _UINT32_T v_hi;
; 172  :             _UINT32_T v_lo = _FROMDWORDTOWORD(v, &v_hi);

	lea	ecx, DWORD PTR _v_hi$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	call	__FROMDWORDTOWORD
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _v_lo$5[ebp], eax

; 173  :             if (v_hi == 0)

	cmp	DWORD PTR _v_hi$6[ebp], 0
	jne	$LN10@PMC_Compar

; 174  :             {
; 175  :                 // v の値が 32bit では表現できる場合
; 176  :                 __UNIT_TYPE v_bit_count = sizeof(v_lo) * 8 - _LZCNT_ALT_32(v_lo);

	mov	ecx, DWORD PTR _v_lo$5[ebp]
	push	ecx
	call	__LZCNT_ALT_32
	add	esp, 4
	mov	edx, 32					; 00000020H
	sub	edx, eax
	mov	DWORD PTR _v_bit_count$4[ebp], edx

; 177  :                 if (u_bit_count > v_bit_count)

	mov	eax, DWORD PTR _u_bit_count$7[ebp]
	cmp	eax, DWORD PTR _v_bit_count$4[ebp]
	jbe	SHORT $LN12@PMC_Compar

; 178  :                 {
; 179  :                     // 明らかに u > v である場合
; 180  :                     *w = 1;

	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx], 1

; 181  :                 }

	jmp	SHORT $LN13@PMC_Compar
$LN12@PMC_Compar:

; 182  :                 else if (u_bit_count < v_bit_count)

	mov	edx, DWORD PTR _u_bit_count$7[ebp]
	cmp	edx, DWORD PTR _v_bit_count$4[ebp]
	jae	SHORT $LN14@PMC_Compar

; 183  :                 {
; 184  :                     // 明らかに u < v である場合
; 185  :                     *w = -1;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], -1

; 186  :                 }

	jmp	SHORT $LN13@PMC_Compar
$LN14@PMC_Compar:

; 187  :                 else
; 188  :                 {
; 189  :                     // u > 0 && v > 0 かつ u のビット長と v のビット長が等しく、かつ v が 1 ワードで表現できる場合
; 190  :                     // ⇒ u と v はともに 1 ワードで表現できる
; 191  :                     if (u->BLOCK[0] > v_lo)

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [edx+ecx]
	cmp	edx, DWORD PTR _v_lo$5[ebp]
	jbe	SHORT $LN16@PMC_Compar

; 192  :                         *w = 1;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], 1
	jmp	SHORT $LN13@PMC_Compar
$LN16@PMC_Compar:

; 193  :                     else if (u->BLOCK[0] < v_lo)

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [edx+ecx]
	cmp	edx, DWORD PTR _v_lo$5[ebp]
	jae	SHORT $LN18@PMC_Compar

; 194  :                         *w = -1;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], -1
	jmp	SHORT $LN13@PMC_Compar
$LN18@PMC_Compar:

; 195  :                     else
; 196  :                         *w = 0;

	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx], 0
$LN13@PMC_Compar:

; 197  :                 }
; 198  :             }

	jmp	$LN11@PMC_Compar
$LN10@PMC_Compar:

; 199  :             else
; 200  :             {
; 201  :                 // v の値が 32bit では表現できない場合
; 202  :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v_hi);

	mov	edx, DWORD PTR _v_hi$6[ebp]
	push	edx
	call	__LZCNT_ALT_32
	add	esp, 4
	mov	ecx, 64					; 00000040H
	sub	ecx, eax
	mov	DWORD PTR _v_bit_count$3[ebp], ecx

; 203  :                 if (u_bit_count > v_bit_count)

	mov	edx, DWORD PTR _u_bit_count$7[ebp]
	cmp	edx, DWORD PTR _v_bit_count$3[ebp]
	jbe	SHORT $LN20@PMC_Compar

; 204  :                 {
; 205  :                     // 明らかに u > v である場合
; 206  :                     *w = 1;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], 1

; 207  :                 }

	jmp	$LN11@PMC_Compar
$LN20@PMC_Compar:

; 208  :                 else if (u_bit_count < v_bit_count)

	mov	ecx, DWORD PTR _u_bit_count$7[ebp]
	cmp	ecx, DWORD PTR _v_bit_count$3[ebp]
	jae	SHORT $LN22@PMC_Compar

; 209  :                 {
; 210  :                     // 明らかに u < v である場合
; 211  :                     *w = -1;

	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx], -1

; 212  :                 }

	jmp	$LN11@PMC_Compar
$LN22@PMC_Compar:

; 213  :                 else
; 214  :                 {
; 215  :                     // u > 0 && v > 0 かつ u のビット長と v のビット長が等しく、かつ v が 2 ワードで表現できる場合
; 216  :                     // ⇒ u と v はともに 2 ワードで表現できる
; 217  :                     if (u->BLOCK[1] > v_hi)

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [eax+edx]
	cmp	eax, DWORD PTR _v_hi$6[ebp]
	jbe	SHORT $LN24@PMC_Compar

; 218  :                         *w = 1;

	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx], 1
	jmp	SHORT $LN11@PMC_Compar
$LN24@PMC_Compar:

; 219  :                     else if (u->BLOCK[1] < v_hi)

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [edx+ecx]
	cmp	edx, DWORD PTR _v_hi$6[ebp]
	jae	SHORT $LN26@PMC_Compar

; 220  :                         *w = -1;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], -1
	jmp	SHORT $LN11@PMC_Compar
$LN26@PMC_Compar:

; 221  :                     else if (u->BLOCK[0] > v_lo)

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [edx+ecx]
	cmp	edx, DWORD PTR _v_lo$5[ebp]
	jbe	SHORT $LN28@PMC_Compar

; 222  :                         *w = 1;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], 1
	jmp	SHORT $LN11@PMC_Compar
$LN28@PMC_Compar:

; 223  :                     else if (u->BLOCK[0] < v_lo)

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [edx+ecx]
	cmp	edx, DWORD PTR _v_lo$5[ebp]
	jae	SHORT $LN30@PMC_Compar

; 224  :                         *w = -1;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], -1
	jmp	SHORT $LN11@PMC_Compar
$LN30@PMC_Compar:

; 225  :                     else
; 226  :                         *w = 0;

	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx], 0
$LN11@PMC_Compar:

; 227  :                 }
; 228  :             }
; 229  :         }

	jmp	$LN1@PMC_Compar
$LN8@PMC_Compar:

; 230  :         else
; 231  :         {
; 232  :             // _UINT64_T が 1 ワードで表現できる場合
; 233  : 
; 234  :             __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _u_bit_count$2[ebp], eax

; 235  :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);

	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	__LZCNT_ALT_UNIT
	add	esp, 4
	mov	edx, 64					; 00000040H
	sub	edx, eax
	mov	DWORD PTR _v_bit_count$1[ebp], edx

; 236  :             if (u_bit_count > v_bit_count)

	mov	eax, DWORD PTR _u_bit_count$2[ebp]
	cmp	eax, DWORD PTR _v_bit_count$1[ebp]
	jbe	SHORT $LN32@PMC_Compar

; 237  :             {
; 238  :                 // 明らかに u > v である場合
; 239  :                 *w = 1;

	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx], 1

; 240  :             }

	jmp	$LN1@PMC_Compar
$LN32@PMC_Compar:

; 241  :             else if (u_bit_count < v_bit_count)

	mov	edx, DWORD PTR _u_bit_count$2[ebp]
	cmp	edx, DWORD PTR _v_bit_count$1[ebp]
	jae	SHORT $LN34@PMC_Compar

; 242  :             {
; 243  :                 // 明らかに u < v である場合
; 244  :                 *w = -1;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], -1

; 245  :             }

	jmp	SHORT $LN1@PMC_Compar
$LN34@PMC_Compar:

; 246  :             else
; 247  :             {
; 248  :                 // u > 0 && v > 0 かつ u のビット長と v のビット長が等しく、かつ v が 1 ワードで表現できる場合
; 249  :                 // ⇒ u と v はともに 1 ワードで表現できる
; 250  :                 if (u->BLOCK[0] > v)

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+edx]
	xor	eax, eax
	mov	DWORD PTR tv240[ebp], edx
	mov	DWORD PTR tv240[ebp+4], eax
	mov	ecx, DWORD PTR tv240[ebp+4]
	cmp	ecx, DWORD PTR _v$[ebp+4]
	jb	SHORT $LN36@PMC_Compar
	ja	SHORT $LN41@PMC_Compar
	mov	edx, DWORD PTR tv240[ebp]
	cmp	edx, DWORD PTR _v$[ebp]
	jbe	SHORT $LN36@PMC_Compar
$LN41@PMC_Compar:

; 251  :                     *w = 1;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], 1
	jmp	SHORT $LN1@PMC_Compar
$LN36@PMC_Compar:

; 252  :                 else if (u->BLOCK[0] < v)

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+edx]
	xor	eax, eax
	mov	DWORD PTR tv252[ebp], edx
	mov	DWORD PTR tv252[ebp+4], eax
	mov	ecx, DWORD PTR tv252[ebp+4]
	cmp	ecx, DWORD PTR _v$[ebp+4]
	ja	SHORT $LN38@PMC_Compar
	jb	SHORT $LN42@PMC_Compar
	mov	edx, DWORD PTR tv252[ebp]
	cmp	edx, DWORD PTR _v$[ebp]
	jae	SHORT $LN38@PMC_Compar
$LN42@PMC_Compar:

; 253  :                     *w = -1;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], -1
	jmp	SHORT $LN1@PMC_Compar
$LN38@PMC_Compar:

; 254  :                 else
; 255  :                     *w = 0;

	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx], 0
$LN1@PMC_Compar:

; 256  :             }
; 257  :         }
; 258  :     }
; 259  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN45@PMC_Compar
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN45@PMC_Compar:
	DD	1
	DD	$LN44@PMC_Compar
$LN44@PMC_Compar:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN43@PMC_Compar
$LN43@PMC_Compar:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	0
_PMC_Compare_X_L_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_compare.c
_TEXT	SEGMENT
_v_bit_count$1 = -8					; size = 4
_u_bit_count$2 = -4					; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Compare_X_I_Imp PROC

; 54   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __B6CC0FF4_pmc_compare@c
	call	@__CheckForDebuggerJustMyCode@4

; 55   :     if (u->IS_ZERO)

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN2@PMC_Compar

; 56   :     {
; 57   :         // u が 0 である場合
; 58   :         if (v == 0)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN4@PMC_Compar

; 59   :         {
; 60   :             // v が 0 である場合
; 61   :             *w = 0;

	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx], 0

; 62   :         }

	jmp	SHORT $LN5@PMC_Compar
$LN4@PMC_Compar:

; 63   :         else
; 64   :         {
; 65   :             // v が 0 でない場合
; 66   :             *w = -1;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], -1
$LN5@PMC_Compar:

; 67   :         }
; 68   :     }

	jmp	$LN1@PMC_Compar
$LN2@PMC_Compar:

; 69   :     else if (v == 0)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN6@PMC_Compar

; 70   :     {
; 71   :         // v が 0 である場合
; 72   :         *w = 1;

	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx], 1

; 73   :     }

	jmp	$LN1@PMC_Compar
$LN6@PMC_Compar:

; 74   :     else
; 75   :     {
; 76   :         // x と y がともに 0 ではない場合
; 77   :         __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _u_bit_count$2[ebp], eax

; 78   :         __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	__LZCNT_ALT_32
	add	esp, 4
	mov	edx, 32					; 00000020H
	sub	edx, eax
	mov	DWORD PTR _v_bit_count$1[ebp], edx

; 79   :         if (u_bit_count > v_bit_count)

	mov	eax, DWORD PTR _u_bit_count$2[ebp]
	cmp	eax, DWORD PTR _v_bit_count$1[ebp]
	jbe	SHORT $LN8@PMC_Compar

; 80   :         {
; 81   :             // 明らかに u > v である場合
; 82   :             *w = 1;

	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx], 1

; 83   :         }

	jmp	SHORT $LN1@PMC_Compar
$LN8@PMC_Compar:

; 84   :         else if (u_bit_count < v_bit_count)

	mov	edx, DWORD PTR _u_bit_count$2[ebp]
	cmp	edx, DWORD PTR _v_bit_count$1[ebp]
	jae	SHORT $LN10@PMC_Compar

; 85   :         {
; 86   :             // 明らかに u < v である場合
; 87   :             *w = -1;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], -1

; 88   :         }

	jmp	SHORT $LN1@PMC_Compar
$LN10@PMC_Compar:

; 89   :         else
; 90   :         {
; 91   :             // u > 0 && v > 0 かつ u のビット長と v のビット長が等しい場合
; 92   :             // ⇒ u と v はともに 1 ワードで表現できる
; 93   :             if (u->BLOCK[0] > v)

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [edx+ecx]
	cmp	edx, DWORD PTR _v$[ebp]
	jbe	SHORT $LN12@PMC_Compar

; 94   :                 *w = 1;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], 1
	jmp	SHORT $LN1@PMC_Compar
$LN12@PMC_Compar:

; 95   :             else if (u->BLOCK[0] < v)

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [edx+ecx]
	cmp	edx, DWORD PTR _v$[ebp]
	jae	SHORT $LN14@PMC_Compar

; 96   :                 *w = -1;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], -1
	jmp	SHORT $LN1@PMC_Compar
$LN14@PMC_Compar:

; 97   :             else
; 98   :                 *w = 0;

	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx], 0
$LN1@PMC_Compar:

; 99   :         }
; 100  :     }
; 101  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_PMC_Compare_X_I_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT PROC

; 623  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 624  :         if (x == 0)

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 625  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 626  : #ifdef _M_IX86
; 627  :         _UINT32_T pos;
; 628  : #ifdef _MSC_VER
; 629  :         _BitScanReverse(&pos, x);

	bsr	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _pos$[ebp], eax

; 630  : #elif defined(__GNUC__)
; 631  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 632  : #else
; 633  : #error unknown compiler
; 634  : #endif
; 635  : #elif defined(_M_X64)
; 636  : #ifdef _MSC_VER
; 637  :         _UINT32_T pos;
; 638  :         _BitScanReverse64(&pos, x);
; 639  : #elif defined(__GNUC__)
; 640  :         _UINT64_T pos;
; 641  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 642  : #else
; 643  : #error unknown compiler
; 644  : #endif
; 645  : #else
; 646  : #error unknown platform
; 647  : #endif
; 648  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, DWORD PTR _pos$[ebp]
$LN1@LZCNT_ALT_:

; 649  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@LZCNT_ALT_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@LZCNT_ALT_:
	DD	1
	DD	$LN5@LZCNT_ALT_
$LN5@LZCNT_ALT_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@LZCNT_ALT_
$LN4@LZCNT_ALT_:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
__LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 4
__LZCNT_ALT_32 PROC

; 590  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 591  :         if (x == 0)

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 592  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 593  :         _UINT32_T pos;
; 594  : #ifdef _MSC_VER
; 595  :         _BitScanReverse(&pos, x);

	bsr	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _pos$[ebp], eax

; 596  : #elif defined(__GNUC__)
; 597  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 598  : #else
; 599  : #error unknown compiler
; 600  : #endif
; 601  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, DWORD PTR _pos$[ebp]
$LN1@LZCNT_ALT_:

; 602  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@LZCNT_ALT_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@LZCNT_ALT_:
	DD	1
	DD	$LN5@LZCNT_ALT_
$LN5@LZCNT_ALT_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@LZCNT_ALT_
$LN4@LZCNT_ALT_:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
__LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC

; 176  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	eax, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR _value$[ebp+4]
	mov	cl, 32					; 00000020H
	call	__aullshr
	mov	ecx, DWORD PTR _result_high$[ebp]
	mov	DWORD PTR [ecx], eax

; 178  :         return ((_UINT32_T)value);

	mov	eax, DWORD PTR _value$[ebp]

; 179  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_compare.c
_TEXT	SEGMENT
tv81 = -24						; size = 4
_v_bit_count$1 = -20					; size = 4
_u_bit_count$2 = -16					; size = 4
_result$ = -12						; size = 4
_nv$ = -8						; size = 4
_nu$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Compare_X_X@12 PROC

; 302  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __B6CC0FF4_pmc_compare@c
	call	@__CheckForDebuggerJustMyCode@4

; 303  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Compar

; 304  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Compar
$LN2@PMC_Compar:

; 305  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Compar

; 306  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Compar
$LN3@PMC_Compar:

; 307  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Compar

; 308  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Compar
$LN4@PMC_Compar:

; 309  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 310  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	ecx, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], ecx

; 311  :     PMC_STATUS_CODE result;
; 312  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nu$[ebp]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Compar

; 313  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Compar
$LN5@PMC_Compar:

; 314  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Compar

; 315  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Compar
$LN6@PMC_Compar:

; 316  :     if (nu->IS_ZERO)

	mov	ecx, DWORD PTR _nu$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	shr	edx, 1
	and	edx, 1
	je	SHORT $LN7@PMC_Compar

; 317  :     {
; 318  :         *w = nv->IS_ZERO ? 0 : -1;

	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN16@PMC_Compar
	mov	DWORD PTR tv81[ebp], 0
	jmp	SHORT $LN17@PMC_Compar
$LN16@PMC_Compar:
	mov	DWORD PTR tv81[ebp], -1
$LN17@PMC_Compar:
	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR tv81[ebp]
	mov	DWORD PTR [edx], eax

; 319  :     }

	jmp	SHORT $LN8@PMC_Compar
$LN7@PMC_Compar:

; 320  :     else if (nv->IS_ZERO)

	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	shr	edx, 1
	and	edx, 1
	je	SHORT $LN9@PMC_Compar

; 321  :     {
; 322  :         *w = 1;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], 1

; 323  :     }

	jmp	SHORT $LN8@PMC_Compar
$LN9@PMC_Compar:

; 324  :     else
; 325  :     {
; 326  :         __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	ecx, DWORD PTR _nu$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _u_bit_count$2[ebp], edx

; 327  :         __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _v_bit_count$1[ebp], ecx

; 328  :         if (u_bit_count > v_bit_count)

	mov	edx, DWORD PTR _u_bit_count$2[ebp]
	cmp	edx, DWORD PTR _v_bit_count$1[ebp]
	jbe	SHORT $LN11@PMC_Compar

; 329  :         {
; 330  :             // 明らかに u > v である場合
; 331  :             *w = 1;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], 1

; 332  :         }

	jmp	SHORT $LN8@PMC_Compar
$LN11@PMC_Compar:

; 333  :         else if (u_bit_count < v_bit_count)

	mov	ecx, DWORD PTR _u_bit_count$2[ebp]
	cmp	ecx, DWORD PTR _v_bit_count$1[ebp]
	jae	SHORT $LN13@PMC_Compar

; 334  :         {
; 335  :             // 明らかに u < v である場合
; 336  :             *w = -1;

	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx], -1

; 337  :         }

	jmp	SHORT $LN8@PMC_Compar
$LN13@PMC_Compar:

; 338  :         else
; 339  :         {
; 340  :             // u > 0 && v > 0 かつ u のビット長と v のビット長が等しい場合
; 341  :             *w = Compare_Imp(nu->BLOCK, nv->BLOCK, nu->UNIT_WORD_COUNT);

	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_Compare_Imp
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx], eax
$LN8@PMC_Compar:

; 342  :         }
; 343  :     }
; 344  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Compar:

; 345  : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_PMC_Compare_X_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_compare.c
_TEXT	SEGMENT
_w_temp$ = -12						; size = 4
_result$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_w$ = 20						; size = 4
_PMC_Compare_X_L@16 PROC

; 282  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __B6CC0FF4_pmc_compare@c
	call	@__CheckForDebuggerJustMyCode@4

; 283  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(v) * 8)

	xor	eax, eax
	je	SHORT $LN2@PMC_Compar

; 284  :     {
; 285  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 286  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@PMC_Compar
$LN2@PMC_Compar:

; 287  :     }
; 288  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN3@PMC_Compar

; 289  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Compar
$LN3@PMC_Compar:

; 290  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Compar

; 291  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Compar
$LN4@PMC_Compar:

; 292  :     PMC_STATUS_CODE result;
; 293  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Compar

; 294  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Compar
$LN5@PMC_Compar:

; 295  :     _INT32_T w_temp;
; 296  :     PMC_Compare_X_L_Imp((NUMBER_HEADER*)u, v, &w_temp);

	lea	edx, DWORD PTR _w_temp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	_PMC_Compare_X_L_Imp
	add	esp, 16					; 00000010H

; 297  :     *w = w_temp;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _w_temp$[ebp]
	mov	DWORD PTR [eax], ecx

; 298  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Compar:

; 299  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@PMC_Compar
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	1
$LN9@PMC_Compar:
	DD	1
	DD	$LN8@PMC_Compar
$LN8@PMC_Compar:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN7@PMC_Compar
$LN7@PMC_Compar:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_PMC_Compare_X_L@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_compare.c
_TEXT	SEGMENT
_w_temp$ = -12						; size = 4
_result$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Compare_X_I@12 PROC

; 124  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __B6CC0FF4_pmc_compare@c
	call	@__CheckForDebuggerJustMyCode@4

; 125  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)

	xor	eax, eax
	je	SHORT $LN2@PMC_Compar

; 126  :     {
; 127  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 128  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@PMC_Compar
$LN2@PMC_Compar:

; 129  :     }
; 130  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN3@PMC_Compar

; 131  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Compar
$LN3@PMC_Compar:

; 132  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Compar

; 133  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Compar
$LN4@PMC_Compar:

; 134  :     PMC_STATUS_CODE result;
; 135  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Compar

; 136  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Compar
$LN5@PMC_Compar:

; 137  :     _INT32_T w_temp;
; 138  :     PMC_Compare_X_I_Imp((NUMBER_HEADER*)u, v, &w_temp);

	lea	edx, DWORD PTR _w_temp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	_PMC_Compare_X_I_Imp
	add	esp, 12					; 0000000cH

; 139  :     *w = w_temp;

	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR _w_temp$[ebp]
	mov	DWORD PTR [edx], eax

; 140  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Compar:

; 141  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@PMC_Compar
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN9@PMC_Compar:
	DD	1
	DD	$LN8@PMC_Compar
$LN8@PMC_Compar:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN7@PMC_Compar
$LN7@PMC_Compar:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_PMC_Compare_X_I@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_compare.c
_TEXT	SEGMENT
_w_temp$ = -12						; size = 4
_result$ = -4						; size = 4
_u$ = 8							; size = 8
_v$ = 16						; size = 4
_w$ = 20						; size = 4
_PMC_Compare_L_X@16 PROC

; 262  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __B6CC0FF4_pmc_compare@c
	call	@__CheckForDebuggerJustMyCode@4

; 263  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(u) * 8)

	xor	eax, eax
	je	SHORT $LN2@PMC_Compar

; 264  :     {
; 265  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 266  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@PMC_Compar
$LN2@PMC_Compar:

; 267  :     }
; 268  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Compar

; 269  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Compar
$LN3@PMC_Compar:

; 270  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Compar

; 271  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Compar
$LN4@PMC_Compar:

; 272  :     PMC_STATUS_CODE result;
; 273  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Compar

; 274  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Compar
$LN5@PMC_Compar:

; 275  :     _INT32_T w_temp;
; 276  :     PMC_Compare_X_L_Imp((NUMBER_HEADER*)v, u, &w_temp);

	lea	edx, DWORD PTR _w_temp$[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	call	_PMC_Compare_X_L_Imp
	add	esp, 16					; 00000010H

; 277  :     *w = -w_temp;

	mov	eax, DWORD PTR _w_temp$[ebp]
	neg	eax
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx], eax

; 278  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Compar:

; 279  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@PMC_Compar
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN9@PMC_Compar:
	DD	1
	DD	$LN8@PMC_Compar
$LN8@PMC_Compar:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN7@PMC_Compar
$LN7@PMC_Compar:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_PMC_Compare_L_X@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_compare.c
_TEXT	SEGMENT
_w_temp$ = -12						; size = 4
_result$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Compare_I_X@12 PROC

; 104  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __B6CC0FF4_pmc_compare@c
	call	@__CheckForDebuggerJustMyCode@4

; 105  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(u) * 8)

	xor	eax, eax
	je	SHORT $LN2@PMC_Compar

; 106  :     {
; 107  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 108  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@PMC_Compar
$LN2@PMC_Compar:

; 109  :     }
; 110  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Compar

; 111  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Compar
$LN3@PMC_Compar:

; 112  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Compar

; 113  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Compar
$LN4@PMC_Compar:

; 114  :     PMC_STATUS_CODE result;
; 115  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Compar

; 116  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Compar
$LN5@PMC_Compar:

; 117  :     _INT32_T w_temp;
; 118  :     PMC_Compare_X_I_Imp((NUMBER_HEADER*)v, u, &w_temp);

	lea	edx, DWORD PTR _w_temp$[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_PMC_Compare_X_I_Imp
	add	esp, 12					; 0000000cH

; 119  :     *w = -w_temp;

	mov	edx, DWORD PTR _w_temp$[ebp]
	neg	edx
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], edx

; 120  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Compar:

; 121  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@PMC_Compar
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN9@PMC_Compar:
	DD	1
	DD	$LN8@PMC_Compar
$LN8@PMC_Compar:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN7@PMC_Compar
$LN7@PMC_Compar:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_PMC_Compare_I_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_compare.c
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_Compare PROC

; 348  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __B6CC0FF4_pmc_compare@c
	call	@__CheckForDebuggerJustMyCode@4

; 349  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 350  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_Initialize_Compare ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_compare.c
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_count$ = 16						; size = 4
_Compare_Imp PROC

; 32   : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __B6CC0FF4_pmc_compare@c
	call	@__CheckForDebuggerJustMyCode@4

; 33   :     u += count;

	mov	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _u$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _u$[ebp], edx

; 34   :     v += count;

	mov	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _v$[ebp], edx
$LN2@Compare_Im:

; 35   :     while (count > 0)

	cmp	DWORD PTR _count$[ebp], 0
	jbe	SHORT $LN3@Compare_Im

; 36   :     {
; 37   :         --u;

	mov	eax, DWORD PTR _u$[ebp]
	sub	eax, 4
	mov	DWORD PTR _u$[ebp], eax

; 38   :         --v;

	mov	ecx, DWORD PTR _v$[ebp]
	sub	ecx, 4
	mov	DWORD PTR _v$[ebp], ecx

; 39   :         --count;

	mov	edx, DWORD PTR _count$[ebp]
	sub	edx, 1
	mov	DWORD PTR _count$[ebp], edx

; 40   : 
; 41   :         if (*u > *v)

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jbe	SHORT $LN4@Compare_Im

; 42   :             return (1);

	mov	eax, 1
	jmp	SHORT $LN1@Compare_Im
	jmp	SHORT $LN5@Compare_Im
$LN4@Compare_Im:

; 43   :         else if (*u < *v)

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN5@Compare_Im

; 44   :             return (-1);

	or	eax, -1
	jmp	SHORT $LN1@Compare_Im
$LN5@Compare_Im:

; 45   :         else
; 46   :         {
; 47   :         }
; 48   :     }

	jmp	SHORT $LN2@Compare_Im
$LN3@Compare_Im:

; 49   :     return (0);

	xor	eax, eax
$LN1@Compare_Im:

; 50   : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_Compare_Imp ENDP
_TEXT	ENDS
END
