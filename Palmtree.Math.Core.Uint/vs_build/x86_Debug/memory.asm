; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\memory.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_number_zero:BYTE:024H
COMM	_number_one:BYTE:024H
COMM	_hLocalHeap:DWORD
_DATA	ENDS
msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__FB6BCCD2_memory@c DB 01H
msvcjmc	ENDS
PUBLIC	_AllocateHeapArea
PUBLIC	_DeallocateHeapArea
PUBLIC	_AllocateBlock
PUBLIC	_DeallocateBlock
PUBLIC	_CheckBlockLight
PUBLIC	_AttatchNumber
PUBLIC	_AllocateNumber
PUBLIC	_DetatchNumber
PUBLIC	_DeallocateNumber
PUBLIC	_CommitNumber
PUBLIC	_CheckNumber
PUBLIC	_DuplicateNumber
PUBLIC	_Initialize_Memory
PUBLIC	_PMC_Dispose@4
PUBLIC	__JustMyCode_Default
EXTRN	__imp__HeapCreate@12:PROC
EXTRN	__imp__HeapDestroy@4:PROC
EXTRN	__imp__HeapAlloc@12:PROC
EXTRN	__imp__HeapFree@12:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_configuration_info:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\memory.c
_TEXT	SEGMENT
_bit_count$ = -4					; size = 4
_p$ = 8							; size = 4
_word_count$ = 12					; size = 4
_GetTrailingZeroBitCount PROC

; 462  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __FB6BCCD2_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 463  :     __UNIT_TYPE bit_count = 0;

	mov	DWORD PTR _bit_count$[ebp], 0
$LN2@GetTrailin:

; 464  :     while (word_count > 0)

	cmp	DWORD PTR _word_count$[ebp], 0
	jbe	SHORT $LN3@GetTrailin

; 465  :     {
; 466  :         --word_count;

	mov	eax, DWORD PTR _word_count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _word_count$[ebp], eax

; 467  :         if (*p != 0)

	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN4@GetTrailin

; 468  :             return (bit_count + _TZCNT_ALT_UNIT(*p));

	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	__TZCNT_ALT_UNIT
	add	esp, 4
	add	eax, DWORD PTR _bit_count$[ebp]
	jmp	SHORT $LN1@GetTrailin
$LN4@GetTrailin:

; 469  :         bit_count += __UNIT_TYPE_BIT_COUNT;

	mov	ecx, DWORD PTR _bit_count$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _bit_count$[ebp], ecx

; 470  :         ++p;

	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	mov	DWORD PTR _p$[ebp], edx

; 471  :     }

	jmp	SHORT $LN2@GetTrailin
$LN3@GetTrailin:

; 472  :     // このルートには到達しないはず
; 473  :     return (0);

	xor	eax, eax
$LN1@GetTrailin:

; 474  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GetTrailingZeroBitCount ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\memory.c
_TEXT	SEGMENT
_p$ = 8							; size = 4
_word_count$ = 12					; size = 4
_effective_word_count$ = 16				; size = 4
_GetEffectiveBitLength PROC

; 440  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __FB6BCCD2_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 441  :     if (p == NULL)

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN4@GetEffecti

; 442  :     {
; 443  :         *effective_word_count = 0;

	mov	eax, DWORD PTR _effective_word_count$[ebp]
	mov	DWORD PTR [eax], 0

; 444  :         return (0);

	xor	eax, eax
	jmp	SHORT $LN1@GetEffecti
$LN4@GetEffecti:

; 445  :     }
; 446  :     p += word_count;

	mov	ecx, DWORD PTR _word_count$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _p$[ebp], eax
$LN2@GetEffecti:

; 447  :     while (word_count != 0)

	cmp	DWORD PTR _word_count$[ebp], 0
	je	SHORT $LN3@GetEffecti

; 448  :     {
; 449  :         --p;

	mov	ecx, DWORD PTR _p$[ebp]
	sub	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx

; 450  :         if (*p != 0)

	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN5@GetEffecti

; 451  :         {
; 452  :             *effective_word_count = word_count;

	mov	eax, DWORD PTR _effective_word_count$[ebp]
	mov	ecx, DWORD PTR _word_count$[ebp]
	mov	DWORD PTR [eax], ecx

; 453  :             return (word_count * __UNIT_TYPE_BIT_COUNT - _LZCNT_ALT_UNIT(*p));

	mov	esi, DWORD PTR _word_count$[ebp]
	shl	esi, 5
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	__LZCNT_ALT_UNIT
	add	esp, 4
	sub	esi, eax
	mov	eax, esi
	jmp	SHORT $LN1@GetEffecti
$LN5@GetEffecti:

; 454  :         }
; 455  :         --word_count;

	mov	ecx, DWORD PTR _word_count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _word_count$[ebp], ecx

; 456  :     }

	jmp	SHORT $LN2@GetEffecti
$LN3@GetEffecti:

; 457  :     *effective_word_count = 0;

	mov	edx, DWORD PTR _effective_word_count$[ebp]
	mov	DWORD PTR [edx], 0

; 458  :     return (0);

	xor	eax, eax
$LN1@GetEffecti:

; 459  : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_GetEffectiveBitLength ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\memory.c
_TEXT	SEGMENT
_p$ = 8							; size = 4
_CleanUpNumber PROC

; 393  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __FB6BCCD2_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 394  :     if (p->BLOCK != NULL)

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN1@CleanUpNum

; 395  :     {
; 396  :         DeallocateBlock(p->BLOCK, p->BLOCK_COUNT);

	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 397  :         p->BLOCK = NULL;

	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+32], 0
$LN1@CleanUpNum:

; 398  :     }
; 399  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_CleanUpNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\memory.c
_TEXT	SEGMENT
_block$1 = -16						; size = 4
_word_count$2 = -8					; size = 4
_p$ = 8							; size = 4
_bit_count$ = 12					; size = 4
_light_check_code$ = 16					; size = 4
_InitializeNumber PROC

; 365  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __FB6BCCD2_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 366  :     if (bit_count > 0)

	cmp	DWORD PTR _bit_count$[ebp], 0
	jbe	SHORT $LN2@Initialize

; 367  :     {
; 368  :         __UNIT_TYPE word_count;
; 369  :         __UNIT_TYPE* block = AllocateBlock(bit_count, &word_count, light_check_code);

	mov	eax, DWORD PTR _light_check_code$[ebp]
	push	eax
	lea	ecx, DWORD PTR _word_count$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _bit_count$[ebp]
	push	edx
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _block$1[ebp], eax

; 370  :         if (block == NULL)

	cmp	DWORD PTR _block$1[ebp], 0
	jne	SHORT $LN4@Initialize

; 371  :             return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	SHORT $LN1@Initialize
$LN4@Initialize:

; 372  :         ClearNumberHeader(p);

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_ClearNumberHeader
	add	esp, 4

; 373  :         p->SIGNATURE1 = PMC_SIGNATURE;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], 1231244656		; 49634d70H

; 374  :         p->SIGNATURE2 = PMC_UINT_SIGNATURE;

	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+4], 1416522069		; 546e6955H

; 375  :         p->UNIT_BIT_COUNT = bit_count;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _bit_count$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 376  :         p->BLOCK_COUNT = word_count;

	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _word_count$2[ebp]
	mov	DWORD PTR [edx+28], eax

; 377  :         p->BLOCK = block;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _block$1[ebp]
	mov	DWORD PTR [ecx+32], edx

; 378  :     }

	jmp	SHORT $LN3@Initialize
$LN2@Initialize:

; 379  :     else
; 380  :     {
; 381  :         // bit_count に 0 が与えられるのは、数値が 0 の場合。
; 382  :         ClearNumberHeader(p);

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_ClearNumberHeader
	add	esp, 4

; 383  :         p->SIGNATURE1 = PMC_SIGNATURE;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], 1231244656		; 49634d70H

; 384  :         p->SIGNATURE2 = PMC_UINT_SIGNATURE;

	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+4], 1416522069		; 546e6955H

; 385  :         p->UNIT_BIT_COUNT = 0;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+12], 0

; 386  :         p->BLOCK_COUNT = 0;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+28], 0

; 387  :         p->BLOCK = NULL;

	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+32], 0
$LN3@Initialize:

; 388  :     }
; 389  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@Initialize:

; 390  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@Initialize
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN8@Initialize:
	DD	1
	DD	$LN7@Initialize
$LN7@Initialize:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN6@Initialize
$LN6@Initialize:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
_InitializeNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\memory.c
_TEXT	SEGMENT
___p$1 = -4						; size = 4
_p$ = 8							; size = 4
_FillNumberHeader PROC

; 321  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __FB6BCCD2_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 322  : #ifdef _M_IX64
; 323  :     if (sizeof(*p) == sizeof(_UINT64_T) * 8)
; 324  :     {
; 325  :         _UINT64_T* __p = (_UINT64_T*)p;
; 326  :         __p[0] = DEFAULT_MEMORY_DATA;
; 327  :         __p[1] = DEFAULT_MEMORY_DATA;
; 328  :         __p[2] = DEFAULT_MEMORY_DATA;
; 329  :         __p[3] = DEFAULT_MEMORY_DATA;
; 330  :         __p[4] = DEFAULT_MEMORY_DATA;
; 331  :         __p[5] = DEFAULT_MEMORY_DATA;
; 332  :         __p[6] = DEFAULT_MEMORY_DATA;
; 333  :         __p[7] = DEFAULT_MEMORY_DATA;
; 334  :     }
; 335  :     else if (sizeof(*p) % sizeof(_UINT64_T) == 0)
; 336  :         _FILL_MEMORY_64((_UINT64_T*)p, DEFAULT_MEMORY_DATA, sizeof(*p) / sizeof(_UINT64_T));
; 337  :     else
; 338  :     {
; 339  : #endif
; 340  :         if (sizeof(*p) == sizeof(_UINT32_T) * 9)

	mov	eax, 1
	test	eax, eax
	je	$LN2@FillNumber

; 341  :         {
; 342  :             _UINT32_T* __p = (_UINT32_T*)p;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR ___p$1[ebp], ecx

; 343  :             __p[0] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [ecx+eax], -858993460		; ccccccccH

; 344  :             __p[1] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [eax+edx], -858993460		; ccccccccH

; 345  :             __p[2] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [edx+ecx], -858993460		; ccccccccH

; 346  :             __p[3] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [edx+ecx], -858993460		; ccccccccH

; 347  :             __p[4] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [ecx+eax], -858993460		; ccccccccH

; 348  :             __p[5] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [ecx+eax], -858993460		; ccccccccH

; 349  :             __p[6] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [ecx+eax], -858993460		; ccccccccH

; 350  :             __p[7] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [ecx+eax], -858993460		; ccccccccH

; 351  :             __p[8] = (_UINT32_T)DEFAULT_MEMORY_DATA;

	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [eax+edx], -858993460		; ccccccccH

; 352  :         }

	jmp	SHORT $LN1@FillNumber
$LN2@FillNumber:

; 353  :         else if (sizeof(*p) % sizeof(_UINT32_T) == 0)

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN4@FillNumber

; 354  :             _FILL_MEMORY_32((_UINT32_T*)p, (_UINT32_T)DEFAULT_MEMORY_DATA, sizeof(*p) / sizeof(_UINT32_T));

	push	9
	push	-858993460				; ccccccccH
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	__FILL_MEMORY_32
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN1@FillNumber
$LN4@FillNumber:

; 355  :         else if (sizeof(*p) % sizeof(_UINT16_T) == 0)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN6@FillNumber

; 356  :             _FILL_MEMORY_16((_UINT16_T*)p, (_UINT16_T)DEFAULT_MEMORY_DATA, sizeof(*p) / sizeof(_UINT16_T));

	push	18					; 00000012H
	push	52428					; 0000ccccH
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	__FILL_MEMORY_16
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN1@FillNumber
$LN6@FillNumber:

; 357  :         else
; 358  :             _FILL_MEMORY_BYTE(p, (unsigned char)DEFAULT_MEMORY_DATA, sizeof(*p));

	push	36					; 00000024H
	push	204					; 000000ccH
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	__FILL_MEMORY_BYTE
	add	esp, 12					; 0000000cH
$LN1@FillNumber:

; 359  : #ifdef _M_IX64
; 360  :     }
; 361  : #endif
; 362  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_FillNumberHeader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\memory.c
_TEXT	SEGMENT
___p$1 = -4						; size = 4
_p$ = 8							; size = 4
_ClearNumberHeader PROC

; 277  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __FB6BCCD2_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 278  : #ifdef _M_IX64
; 279  :     if (sizeof(*p) == sizeof(_UINT64_T) * 8)
; 280  :     {
; 281  :         _UINT64_T* __p = (_UINT64_T*)p;
; 282  :         __p[0] = 0;
; 283  :         __p[1] = 0;
; 284  :         __p[2] = 0;
; 285  :         __p[3] = 0;
; 286  :         __p[4] = 0;
; 287  :         __p[5] = 0;
; 288  :         __p[6] = 0;
; 289  :         __p[7] = 0;
; 290  :     }
; 291  :     else if (sizeof(*p) % sizeof(_UINT64_T) == 0)
; 292  :         _ZERO_MEMORY_64((_UINT64_T*)p, sizeof(*p) / sizeof(_UINT64_T));
; 293  :     else
; 294  :     {
; 295  : #endif
; 296  :         if (sizeof(*p) == sizeof(_UINT32_T) * 9)

	mov	eax, 1
	test	eax, eax
	je	$LN2@ClearNumbe

; 297  :         {
; 298  :             _UINT32_T* __p = (_UINT32_T*)p;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR ___p$1[ebp], ecx

; 299  :             __p[0] = 0;

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [ecx+eax], 0

; 300  :             __p[1] = 0;

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [eax+edx], 0

; 301  :             __p[2] = 0;

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [edx+ecx], 0

; 302  :             __p[3] = 0;

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [edx+ecx], 0

; 303  :             __p[4] = 0;

	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [ecx+eax], 0

; 304  :             __p[5] = 0;

	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [ecx+eax], 0

; 305  :             __p[6] = 0;

	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [ecx+eax], 0

; 306  :             __p[7] = 0;

	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [ecx+eax], 0

; 307  :             __p[8] = 0;

	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR ___p$1[ebp]
	mov	DWORD PTR [eax+edx], 0

; 308  :         }

	jmp	SHORT $LN1@ClearNumbe
$LN2@ClearNumbe:

; 309  :         else if (sizeof(*p) % sizeof(_UINT32_T) == 0)

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN4@ClearNumbe

; 310  :             _ZERO_MEMORY_32((_UINT32_T*)p, sizeof(*p) / sizeof(_UINT32_T));

	push	9
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	__ZERO_MEMORY_32
	add	esp, 8
	jmp	SHORT $LN1@ClearNumbe
$LN4@ClearNumbe:

; 311  :         else if (sizeof(*p) % sizeof(_UINT16_T) == 0)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN6@ClearNumbe

; 312  :             _ZERO_MEMORY_16((_UINT16_T*)p, sizeof(*p) / sizeof(_UINT16_T));

	push	18					; 00000012H
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	__ZERO_MEMORY_16
	add	esp, 8
	jmp	SHORT $LN1@ClearNumbe
$LN6@ClearNumbe:

; 313  :         else
; 314  :             _ZERO_MEMORY_BYTE(p, sizeof(*p));

	push	36					; 00000024H
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	__ZERO_MEMORY_BYTE
	add	esp, 8
$LN1@ClearNumbe:

; 315  : #ifdef _M_IX64
; 316  :     }
; 317  : #endif
; 318  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ClearNumberHeader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\memory.c
_TEXT	SEGMENT
_code_actual$ = -12					; size = 4
_code_desired$ = -8					; size = 4
_words$ = -4						; size = 4
_buffer$ = 8						; size = 4
_CheckBlock PROC

; 240  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __FB6BCCD2_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 241  : #ifdef _DEBUG
; 242  :     if (buffer == NULL)

	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN2@CheckBlock

; 243  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@CheckBlock
$LN2@CheckBlock:

; 244  :     --buffer;

	mov	eax, DWORD PTR _buffer$[ebp]
	sub	eax, 4
	mov	DWORD PTR _buffer$[ebp], eax

; 245  :     __UNIT_TYPE words = buffer[0];

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _words$[ebp], ecx

; 246  :     __UNIT_TYPE code_desired = buffer[words + 1];

	mov	edx, DWORD PTR _words$[ebp]
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+4]
	mov	DWORD PTR _code_desired$[ebp], ecx

; 247  :     __UNIT_TYPE code_actual = CalculateCheckCode(&buffer[1], words);

	mov	edx, DWORD PTR _words$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	add	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_CalculateCheckCode
	add	esp, 8
	mov	DWORD PTR _code_actual$[ebp], eax

; 248  :     if (code_actual == code_desired)

	mov	ecx, DWORD PTR _code_actual$[ebp]
	cmp	ecx, DWORD PTR _code_desired$[ebp]
	jne	SHORT $LN3@CheckBlock

; 249  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@CheckBlock
	jmp	SHORT $LN1@CheckBlock
$LN3@CheckBlock:

; 250  :     else
; 251  :         return (PMC_STATUS_BAD_BUFFER);

	mov	eax, -257				; fffffeffH
$LN1@CheckBlock:

; 252  : #else
; 253  :     return (PMC_STATUS_OK);
; 254  : #endif
; 255  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CheckBlock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\memory.c
_TEXT	SEGMENT
_code$1 = -8						; size = 4
_words$2 = -4						; size = 4
_buffer$ = 8						; size = 4
_CommitBlock PROC

; 224  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __FB6BCCD2_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 225  :     if (buffer != NULL)

	cmp	DWORD PTR _buffer$[ebp], 0
	je	SHORT $LN1@CommitBloc

; 226  :     {
; 227  :         --buffer;

	mov	eax, DWORD PTR _buffer$[ebp]
	sub	eax, 4
	mov	DWORD PTR _buffer$[ebp], eax

; 228  :         __UNIT_TYPE words = buffer[0];

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _words$2[ebp], ecx

; 229  : #ifdef _DEBUG
; 230  :         __UNIT_TYPE code = CalculateCheckCode(&buffer[1], words);

	mov	edx, DWORD PTR _words$2[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	add	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_CalculateCheckCode
	add	esp, 8
	mov	DWORD PTR _code$1[ebp], eax

; 231  : #else
; 232  :         __UNIT_TYPE code = 0;
; 233  : #endif
; 234  :         buffer[words + 1] = code;

	mov	ecx, DWORD PTR _words$2[ebp]
	mov	edx, DWORD PTR _buffer$[ebp]
	mov	eax, DWORD PTR _code$1[ebp]
	mov	DWORD PTR [edx+ecx*4+4], eax
$LN1@CommitBloc:

; 235  :     }
; 236  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CommitBlock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\memory.c
_TEXT	SEGMENT
_count$ = -8						; size = 4
_code$ = -4						; size = 4
_p$ = 8							; size = 4
_words$ = 12						; size = 4
_CalculateCheckCode PROC

; 59   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __FB6BCCD2_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 60   : 	__UNIT_TYPE code = CHECK_CODE_INIT;

	mov	DWORD PTR _code$[ebp], -2071690108	; 84848484H

; 61   : 	
; 62   :     __UNIT_TYPE count = words >> 5;

	mov	eax, DWORD PTR _words$[ebp]
	shr	eax, 5
	mov	DWORD PTR _count$[ebp], eax
$LN2@CalculateC:

; 63   : 	while (count != 0)

	cmp	DWORD PTR _count$[ebp], 0
	je	$LN3@CalculateC

; 64   : 	{
; 65   :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	push	3
	mov	ecx, DWORD PTR _code$[ebp]
	push	ecx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	edx, 4
	imul	ecx, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 66   :         code = _ROTATE_L_UNIT(code, 3) ^ p[1];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 67   :         code = _ROTATE_L_UNIT(code, 3) ^ p[2];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 68   :         code = _ROTATE_L_UNIT(code, 3) ^ p[3];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 69   :         code = _ROTATE_L_UNIT(code, 3) ^ p[4];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 70   :         code = _ROTATE_L_UNIT(code, 3) ^ p[5];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 71   :         code = _ROTATE_L_UNIT(code, 3) ^ p[6];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 72   :         code = _ROTATE_L_UNIT(code, 3) ^ p[7];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 73   :         code = _ROTATE_L_UNIT(code, 3) ^ p[8];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 3
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 74   :         code = _ROTATE_L_UNIT(code, 3) ^ p[9];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 9
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 75   :         code = _ROTATE_L_UNIT(code, 3) ^ p[10];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 10
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 76   :         code = _ROTATE_L_UNIT(code, 3) ^ p[11];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 11
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 77   :         code = _ROTATE_L_UNIT(code, 3) ^ p[12];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 12
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 78   :         code = _ROTATE_L_UNIT(code, 3) ^ p[13];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 79   :         code = _ROTATE_L_UNIT(code, 3) ^ p[14];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 14
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 80   :         code = _ROTATE_L_UNIT(code, 3) ^ p[15];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 15
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 81   :         code = _ROTATE_L_UNIT(code, 3) ^ p[16];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 4
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 82   :         code = _ROTATE_L_UNIT(code, 3) ^ p[17];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 17
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 83   :         code = _ROTATE_L_UNIT(code, 3) ^ p[18];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 18
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 84   :         code = _ROTATE_L_UNIT(code, 3) ^ p[19];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 19
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 85   :         code = _ROTATE_L_UNIT(code, 3) ^ p[20];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 20
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 86   :         code = _ROTATE_L_UNIT(code, 3) ^ p[21];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 21
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 87   :         code = _ROTATE_L_UNIT(code, 3) ^ p[22];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 22
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 88   :         code = _ROTATE_L_UNIT(code, 3) ^ p[23];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 23
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 89   :         code = _ROTATE_L_UNIT(code, 3) ^ p[24];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 24
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 90   :         code = _ROTATE_L_UNIT(code, 3) ^ p[25];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 25
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 91   :         code = _ROTATE_L_UNIT(code, 3) ^ p[26];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 26
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 92   :         code = _ROTATE_L_UNIT(code, 3) ^ p[27];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 27
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 93   :         code = _ROTATE_L_UNIT(code, 3) ^ p[28];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 28
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 94   :         code = _ROTATE_L_UNIT(code, 3) ^ p[29];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 29
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 95   :         code = _ROTATE_L_UNIT(code, 3) ^ p[30];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 30
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 96   :         code = _ROTATE_L_UNIT(code, 3) ^ p[31];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 31
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 97   :         p += 32;

	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 128				; 00000080H
	mov	DWORD PTR _p$[ebp], edx

; 98   :         --count;

	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax

; 99   :     }

	jmp	$LN2@CalculateC
$LN3@CalculateC:

; 100  : 
; 101  : 	if (words & 0x10)

	mov	ecx, DWORD PTR _words$[ebp]
	and	ecx, 16					; 00000010H
	je	$LN4@CalculateC

; 102  : 	{
; 103  :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 104  :         code = _ROTATE_L_UNIT(code, 3) ^ p[1];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 105  :         code = _ROTATE_L_UNIT(code, 3) ^ p[2];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 106  :         code = _ROTATE_L_UNIT(code, 3) ^ p[3];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 107  :         code = _ROTATE_L_UNIT(code, 3) ^ p[4];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 108  :         code = _ROTATE_L_UNIT(code, 3) ^ p[5];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 109  :         code = _ROTATE_L_UNIT(code, 3) ^ p[6];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 110  :         code = _ROTATE_L_UNIT(code, 3) ^ p[7];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 111  :         code = _ROTATE_L_UNIT(code, 3) ^ p[8];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 3
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 112  :         code = _ROTATE_L_UNIT(code, 3) ^ p[9];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 9
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 113  :         code = _ROTATE_L_UNIT(code, 3) ^ p[10];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 10
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 114  :         code = _ROTATE_L_UNIT(code, 3) ^ p[11];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 11
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 115  :         code = _ROTATE_L_UNIT(code, 3) ^ p[12];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 12
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 116  :         code = _ROTATE_L_UNIT(code, 3) ^ p[13];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 117  :         code = _ROTATE_L_UNIT(code, 3) ^ p[14];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 14
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 118  :         code = _ROTATE_L_UNIT(code, 3) ^ p[15];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 15
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 119  :         p += 16;

	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 64					; 00000040H
	mov	DWORD PTR _p$[ebp], edx
$LN4@CalculateC:

; 120  :     }
; 121  : 
; 122  :     if (words & 0x8)

	mov	eax, DWORD PTR _words$[ebp]
	and	eax, 8
	je	$LN5@CalculateC

; 123  :     {
; 124  :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	push	3
	mov	ecx, DWORD PTR _code$[ebp]
	push	ecx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	edx, 4
	imul	ecx, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 125  :         code = _ROTATE_L_UNIT(code, 3) ^ p[1];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 126  :         code = _ROTATE_L_UNIT(code, 3) ^ p[2];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 127  :         code = _ROTATE_L_UNIT(code, 3) ^ p[3];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 128  :         code = _ROTATE_L_UNIT(code, 3) ^ p[4];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 129  :         code = _ROTATE_L_UNIT(code, 3) ^ p[5];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 130  :         code = _ROTATE_L_UNIT(code, 3) ^ p[6];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 131  :         code = _ROTATE_L_UNIT(code, 3) ^ p[7];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 132  :         p += 8;

	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _p$[ebp], edx
$LN5@CalculateC:

; 133  :     }
; 134  : 
; 135  :     if (words & 0x4)

	mov	eax, DWORD PTR _words$[ebp]
	and	eax, 4
	je	$LN6@CalculateC

; 136  :     {
; 137  :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	push	3
	mov	ecx, DWORD PTR _code$[ebp]
	push	ecx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	edx, 4
	imul	ecx, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 138  :         code = _ROTATE_L_UNIT(code, 3) ^ p[1];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 139  :         code = _ROTATE_L_UNIT(code, 3) ^ p[2];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 140  :         code = _ROTATE_L_UNIT(code, 3) ^ p[3];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax

; 141  :         p += 4;

	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], edx
$LN6@CalculateC:

; 142  :     }
; 143  : 
; 144  :     if (words & 0x2)

	mov	eax, DWORD PTR _words$[ebp]
	and	eax, 2
	je	SHORT $LN7@CalculateC

; 145  :     {
; 146  :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	push	3
	mov	ecx, DWORD PTR _code$[ebp]
	push	ecx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	edx, 4
	imul	ecx, edx, 0
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 147  :         code = _ROTATE_L_UNIT(code, 3) ^ p[1];

	push	3
	mov	eax, DWORD PTR _code$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _code$[ebp], eax

; 148  :         p += 2;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 8
	mov	DWORD PTR _p$[ebp], eax
$LN7@CalculateC:

; 149  :     }
; 150  : 
; 151  :     if (words & 0x1)

	mov	ecx, DWORD PTR _words$[ebp]
	and	ecx, 1
	je	SHORT $LN8@CalculateC

; 152  :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	push	3
	mov	edx, DWORD PTR _code$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	xor	eax, DWORD PTR [ecx+edx]
	mov	DWORD PTR _code$[ebp], eax
$LN8@CalculateC:

; 153  :     
; 154  :     return (code);

	mov	eax, DWORD PTR _code$[ebp]

; 155  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CalculateCheckCode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 4
__TZCNT_ALT_UNIT PROC

; 709  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 710  :         if (x == 0)

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN2@TZCNT_ALT_

; 711  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H
	jmp	SHORT $LN1@TZCNT_ALT_
$LN2@TZCNT_ALT_:

; 712  : #ifdef _M_IX86
; 713  :         _UINT32_T pos;
; 714  : #ifdef _MSC_VER
; 715  :         _BitScanForward(&pos, x);

	bsf	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _pos$[ebp], eax

; 716  : #elif defined(__GNUC__)
; 717  :         __asm__("bsfl %1, %0" : "=r"(pos) : "rm"(x));
; 718  : #else
; 719  : #error unknown compiler
; 720  : #endif
; 721  : #elif defined(_M_X64)
; 722  : #ifdef _MSC_VER
; 723  :         _UINT32_T pos;
; 724  :         _BitScanForward64(&pos, x);
; 725  : #elif defined(__GNUC__)
; 726  :         _UINT64_T pos;
; 727  :         __asm__("bsfq %1, %0" : "=r"(pos) : "rm"(x));
; 728  : #else
; 729  : #error unknown compiler
; 730  : #endif
; 731  : #else
; 732  : #error unknown platform
; 733  : #endif
; 734  :         return (pos);

	mov	eax, DWORD PTR _pos$[ebp]
$LN1@TZCNT_ALT_:

; 735  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@TZCNT_ALT_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@TZCNT_ALT_:
	DD	1
	DD	$LN5@TZCNT_ALT_
$LN5@TZCNT_ALT_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@TZCNT_ALT_
$LN4@TZCNT_ALT_:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
__TZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT PROC

; 629  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 630  :         if (x == 0)

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 631  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 632  : #ifdef _M_IX86
; 633  :         _UINT32_T pos;
; 634  : #ifdef _MSC_VER
; 635  :         _BitScanReverse(&pos, x);

	bsr	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _pos$[ebp], eax

; 636  : #elif defined(__GNUC__)
; 637  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 638  : #else
; 639  : #error unknown compiler
; 640  : #endif
; 641  : #elif defined(_M_X64)
; 642  : #ifdef _MSC_VER
; 643  :         _UINT32_T pos;
; 644  :         _BitScanReverse64(&pos, x);
; 645  : #elif defined(__GNUC__)
; 646  :         _UINT64_T pos;
; 647  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 648  : #else
; 649  : #error unknown compiler
; 650  : #endif
; 651  : #else
; 652  : #error unknown platform
; 653  : #endif
; 654  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, DWORD PTR _pos$[ebp]
$LN1@LZCNT_ALT_:

; 655  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@LZCNT_ALT_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@LZCNT_ALT_:
	DD	1
	DD	$LN5@LZCNT_ALT_
$LN5@LZCNT_ALT_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@LZCNT_ALT_
$LN4@LZCNT_ALT_:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
__LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
_count$ = 12						; size = 4
__ROTATE_L_UNIT PROC

; 481  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 482  : #ifdef _M_IX86
; 483  :         return (_rotl(x, count));

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rol	eax, cl

; 484  : #elif defined(_M_X64)
; 485  :         return (_rotl64(x, count));
; 486  : #else
; 487  : #error unknown platform
; 488  : #endif
; 489  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ROTATE_L_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
__DIVIDE_CEILING_UNIT PROC

; 193  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 194  :         return ((u + v - 1) / v);

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _u$[ebp]
	lea	eax, DWORD PTR [ecx+eax-1]
	xor	edx, edx
	div	DWORD PTR _v$[ebp]

; 195  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__DIVIDE_CEILING_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_x$ = 12						; size = 4
_count$ = 16						; size = 4
__FILL_MEMORY_UNIT PROC

; 166  :     {

	push	ebp
	mov	ebp, esp
	push	edi
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 167  : #ifdef _M_IX86
; 168  :         __stosd((unsigned long*)d, x, (unsigned long)count);

	mov	edi, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep stosd

; 169  : #elif defined(_M_X64)
; 170  :         __stosq(d, x, count);
; 171  : #else
; 172  : #error unknown platform
; 173  : #endif
; 174  :     }

	pop	edi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__FILL_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_x$ = 12						; size = 4
_count$ = 16						; size = 4
__FILL_MEMORY_32 PROC

; 154  :     {

	push	ebp
	mov	ebp, esp
	push	edi
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 155  :         __stosd((unsigned long*)d, x, count);

	mov	edi, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep stosd

; 156  :     }

	pop	edi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__FILL_MEMORY_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_x$ = 12						; size = 2
_count$ = 16						; size = 4
__FILL_MEMORY_16 PROC

; 149  :     {

	push	ebp
	mov	ebp, esp
	push	edi
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 150  :         __stosw(d, x, count);

	mov	edi, DWORD PTR _d$[ebp]
	mov	ax, WORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep stosw

; 151  :     }

	pop	edi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__FILL_MEMORY_16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_x$ = 12						; size = 1
_count$ = 16						; size = 4
__FILL_MEMORY_BYTE PROC

; 144  :     {

	push	ebp
	mov	ebp, esp
	push	edi
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 145  :         __stosb(d, x, count);

	mov	edi, DWORD PTR _d$[ebp]
	mov	al, BYTE PTR _x$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep stosb

; 146  :     }

	pop	edi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__FILL_MEMORY_BYTE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_count$ = 12						; size = 4
__ZERO_MEMORY_32 PROC

; 104  :     {

	push	ebp
	mov	ebp, esp
	push	edi
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 105  :         __stosd((unsigned long*)d, 0, count);

	mov	edi, DWORD PTR _d$[ebp]
	xor	eax, eax
	mov	ecx, DWORD PTR _count$[ebp]
	rep stosd

; 106  :     }

	pop	edi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ZERO_MEMORY_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_count$ = 12						; size = 4
__ZERO_MEMORY_16 PROC

; 99   :     {

	push	ebp
	mov	ebp, esp
	push	edi
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 100  :         __stosw(d, 0, count);

	xor	eax, eax
	mov	edi, DWORD PTR _d$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep stosw

; 101  :     }

	pop	edi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ZERO_MEMORY_16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_count$ = 12						; size = 4
__ZERO_MEMORY_BYTE PROC

; 94   :     {

	push	ebp
	mov	ebp, esp
	push	edi
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 95   :         __stosb(d, 0, count);

	mov	edi, DWORD PTR _d$[ebp]
	xor	al, al
	mov	ecx, DWORD PTR _count$[ebp]
	rep stosb

; 96   :     }

	pop	edi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ZERO_MEMORY_BYTE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT PROC

; 66   :     {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 67   : #ifdef _M_IX86
; 68   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, DWORD PTR _d$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep movsd

; 69   : #elif defined(_M_X64)
; 70   :         __movsq(d, s, count);
; 71   : #else
; 72   : #error unknown platform
; 73   : #endif
; 74   :     }

	pop	edi
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\memory.c
_TEXT	SEGMENT
_result$ = -8						; size = 4
_np$ = -4						; size = 4
_p$ = 8							; size = 4
_PMC_Dispose@4 PROC

; 553  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __FB6BCCD2_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 554  :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _np$[ebp], eax

; 555  :     PMC_STATUS_CODE result = CheckNumber(np);

	mov	ecx, DWORD PTR _np$[ebp]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax

; 556  :     if (result != PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN2@PMC_Dispos

; 557  :         return;

	jmp	SHORT $LN1@PMC_Dispos
$LN2@PMC_Dispos:

; 558  :     DeallocateNumber(np);

	mov	edx, DWORD PTR _np$[ebp]
	push	edx
	call	_DeallocateNumber
	add	esp, 4
$LN1@PMC_Dispos:

; 559  :     return;
; 560  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_PMC_Dispose@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\memory.c
_TEXT	SEGMENT
_number_one_ok$ = -12					; size = 4
_number_zero_ok$ = -8					; size = 4
_result$ = -4						; size = 4
_feature$ = 8						; size = 4
_Initialize_Memory PROC

; 563  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __FB6BCCD2_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 564  :     PMC_STATUS_CODE result = PMC_STATUS_OK;

	mov	DWORD PTR _result$[ebp], 0

; 565  : 
; 566  :     BOOL number_zero_ok = TRUE;

	mov	DWORD PTR _number_zero_ok$[ebp], 1

; 567  :     BOOL number_one_ok = TRUE;

	mov	DWORD PTR _number_one_ok$[ebp], 1

; 568  :     if (result == PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN2@Initialize

; 569  :     {
; 570  :         result = AttatchNumber(&number_zero, 0);

	push	0
	push	OFFSET _number_zero
	call	_AttatchNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax

; 571  :         if (result == PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN2@Initialize

; 572  :         {
; 573  :             CommitNumber(&number_zero);

	push	OFFSET _number_zero
	call	_CommitNumber
	add	esp, 4

; 574  :             number_zero_ok = TRUE;

	mov	DWORD PTR _number_zero_ok$[ebp], 1
$LN2@Initialize:

; 575  :         }
; 576  :     }
; 577  : 
; 578  :     if (result == PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN4@Initialize

; 579  :     {
; 580  :         result = AttatchNumber(&number_one, 1);

	push	1
	push	OFFSET _number_one
	call	_AttatchNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax

; 581  :         if (result == PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN4@Initialize

; 582  :         {
; 583  :             number_one.BLOCK[0] = 1;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _number_one+32
	mov	DWORD PTR [edx+ecx], 1

; 584  :             CommitNumber(&number_one);

	push	OFFSET _number_one
	call	_CommitNumber
	add	esp, 4

; 585  :             number_one_ok = TRUE;

	mov	DWORD PTR _number_one_ok$[ebp], 1
$LN4@Initialize:

; 586  :         }
; 587  :     }
; 588  : 
; 589  :     if (result != PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@Initialize

; 590  :     {
; 591  :         if (number_zero_ok)

	cmp	DWORD PTR _number_zero_ok$[ebp], 0
	je	SHORT $LN7@Initialize

; 592  :             DetatchNumber(&number_zero);

	push	OFFSET _number_zero
	call	_DetatchNumber
	add	esp, 4
$LN7@Initialize:

; 593  :         if (number_one_ok)

	cmp	DWORD PTR _number_one_ok$[ebp], 0
	je	SHORT $LN6@Initialize

; 594  :             DetatchNumber(&number_one);

	push	OFFSET _number_one
	call	_DetatchNumber
	add	esp, 4
$LN6@Initialize:

; 595  :     }
; 596  : 
; 597  :     return (result);

	mov	eax, DWORD PTR _result$[ebp]

; 598  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Initialize_Memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\memory.c
_TEXT	SEGMENT
_o$ = -16						; size = 4
_result$ = -8						; size = 4
_x_bit_count$ = -4					; size = 4
_x$ = 8							; size = 4
_op$ = 12						; size = 4
_DuplicateNumber PROC

; 529  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __FB6BCCD2_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 530  :     if (x->IS_STATIC)

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	and	ecx, 1
	je	SHORT $LN2@DuplicateN

; 531  :     {
; 532  :         *op = x;

	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR [edx], eax

; 533  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@DuplicateN
$LN2@DuplicateN:

; 534  :     }
; 535  :     if (x->IS_ZERO)

	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	shr	edx, 1
	and	edx, 1
	je	SHORT $LN3@DuplicateN

; 536  :     {
; 537  :         *op = &number_zero;

	mov	eax, DWORD PTR _op$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_zero

; 538  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@DuplicateN
$LN3@DuplicateN:

; 539  :     }
; 540  :     __UNIT_TYPE x_bit_count = x->UNIT_BIT_COUNT;

	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _x_bit_count$[ebp], edx

; 541  :     PMC_STATUS_CODE result;
; 542  :     NUMBER_HEADER* o;
; 543  :     if ((result = AllocateNumber(&o, x_bit_count, NULL)) != PMC_STATUS_OK)

	push	0
	mov	eax, DWORD PTR _x_bit_count$[ebp]
	push	eax
	lea	ecx, DWORD PTR _o$[ebp]
	push	ecx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN4@DuplicateN

; 544  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@DuplicateN
$LN4@DuplicateN:

; 545  :     _COPY_MEMORY_UNIT(o->BLOCK, x->BLOCK, _DIVIDE_CEILING_UNIT(x_bit_count, __UNIT_TYPE_BIT_COUNT));

	push	32					; 00000020H
	mov	edx, DWORD PTR _x_bit_count$[ebp]
	push	edx
	call	__DIVIDE_CEILING_UNIT
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	__COPY_MEMORY_UNIT
	add	esp, 12					; 0000000cH

; 546  :     CommitNumber(o);

	mov	ecx, DWORD PTR _o$[ebp]
	push	ecx
	call	_CommitNumber
	add	esp, 4

; 547  :     *op = o;

	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _o$[ebp]
	mov	DWORD PTR [edx], eax

; 548  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@DuplicateN:

; 549  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@DuplicateN
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@DuplicateN:
	DD	1
	DD	$LN7@DuplicateN
$LN7@DuplicateN:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN6@DuplicateN
$LN6@DuplicateN:
	DB	111					; 0000006fH
	DB	0
_DuplicateNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\memory.c
_TEXT	SEGMENT
_desired_hash_code$1 = -8				; size = 4
_result$2 = -4						; size = 4
_p$ = 8							; size = 4
_CheckNumber PROC

; 510  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __FB6BCCD2_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 511  :     if (p->SIGNATURE1 != PMC_SIGNATURE || p->SIGNATURE2 != PMC_UINT_SIGNATURE)

	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax], 1231244656		; 49634d70H
	jne	SHORT $LN3@CheckNumbe
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+4], 1416522069		; 546e6955H
	je	SHORT $LN2@CheckNumbe
$LN3@CheckNumbe:

; 512  :         return (PMC_STATUS_BAD_BUFFER);

	mov	eax, -257				; fffffeffH
	jmp	SHORT $LN1@CheckNumbe
$LN2@CheckNumbe:

; 513  :     if (!p->IS_ZERO)

	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+24]
	shr	eax, 1
	and	eax, 1
	jne	SHORT $LN4@CheckNumbe

; 514  :     {
; 515  :         PMC_STATUS_CODE result;
; 516  :         if ((result = CheckBlock(p->BLOCK)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_CheckBlock
	add	esp, 4
	mov	DWORD PTR _result$2[ebp], eax
	cmp	DWORD PTR _result$2[ebp], 0
	je	SHORT $LN5@CheckNumbe

; 517  :             return (result);

	mov	eax, DWORD PTR _result$2[ebp]
	jmp	SHORT $LN1@CheckNumbe
$LN5@CheckNumbe:

; 518  : #ifdef _DEBUG
; 519  :         __UNIT_TYPE desired_hash_code = CalculateCheckCode(p->BLOCK, p->UNIT_WORD_COUNT);

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_CalculateCheckCode
	add	esp, 8
	mov	DWORD PTR _desired_hash_code$1[ebp], eax

; 520  :         if (desired_hash_code != p->HASH_CODE)

	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _desired_hash_code$1[ebp]
	cmp	edx, DWORD PTR [ecx+16]
	je	SHORT $LN4@CheckNumbe

; 521  :             return (PMC_STATUS_BAD_BUFFER);

	mov	eax, -257				; fffffeffH
	jmp	SHORT $LN1@CheckNumbe
$LN4@CheckNumbe:

; 522  : #endif
; 523  :     }
; 524  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@CheckNumbe:

; 525  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CheckNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\memory.c
_TEXT	SEGMENT
tv186 = -12						; size = 4
tv169 = -8						; size = 4
tv138 = -4						; size = 4
_p$ = 8							; size = 4
_CommitNumber PROC

; 477  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __FB6BCCD2_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 478  :     CommitBlock(p->BLOCK);

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_CommitBlock
	add	esp, 4

; 479  :     p->UNIT_BIT_COUNT = GetEffectiveBitLength(p->BLOCK, p->BLOCK_COUNT, &p->UNIT_WORD_COUNT);

	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_GetEffectiveBitLength
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 480  :     if (p->UNIT_BIT_COUNT <= 0)

	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+12], 0
	ja	SHORT $LN2@CommitNumb

; 481  :     {
; 482  :         p->HASH_CODE = 0;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+16], 0

; 483  :         p->IS_ZERO = TRUE;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	or	edx, 2
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+24], edx

; 484  :         p->IS_ONE = FALSE;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	and	edx, -5					; fffffffbH
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+24], edx

; 485  :         p->IS_EVEN = TRUE;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	or	edx, 8
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+24], edx

; 486  :         p->TRAILING_ZERO_BITS_COUNT = 0;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 487  :         p->IS_POWER_OF_TWO = FALSE;

	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+24]
	and	eax, -17				; ffffffefH
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+24], eax

; 488  :     }

	jmp	$LN1@CommitNumb
$LN2@CommitNumb:

; 489  :     else if (p->UNIT_BIT_COUNT == 1)

	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+12], 1
	jne	$LN4@CommitNumb

; 490  :     {
; 491  :         p->HASH_CODE = CalculateCheckCode(p->BLOCK, p->UNIT_WORD_COUNT);

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_CalculateCheckCode
	add	esp, 8
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 492  :         p->IS_ZERO = FALSE;

	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+24]
	and	eax, -3					; fffffffdH
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+24], eax

; 493  :         p->IS_ONE = p->BLOCK[0] == 1; // 無条件でTRUEでも大丈夫だが念のため。

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	cmp	DWORD PTR [eax+edx], 1
	jne	SHORT $LN7@CommitNumb
	mov	DWORD PTR tv138[ebp], 1
	jmp	SHORT $LN8@CommitNumb
$LN7@CommitNumb:
	mov	DWORD PTR tv138[ebp], 0
$LN8@CommitNumb:
	mov	eax, DWORD PTR tv138[ebp]
	and	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	and	edx, -5					; fffffffbH
	or	edx, eax
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+24], edx

; 494  :         p->IS_EVEN = FALSE;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	and	edx, -9					; fffffff7H
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+24], edx

; 495  :         p->TRAILING_ZERO_BITS_COUNT = 0;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 496  :         p->IS_POWER_OF_TWO = TRUE;

	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+24]
	or	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+24], eax

; 497  :     }

	jmp	$LN1@CommitNumb
$LN4@CommitNumb:

; 498  :     else
; 499  :     {
; 500  :         p->HASH_CODE = CalculateCheckCode(p->BLOCK, p->UNIT_WORD_COUNT);

	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_CalculateCheckCode
	add	esp, 8
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 501  :         p->IS_ZERO = FALSE;

	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+24]
	and	eax, -3					; fffffffdH
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+24], eax

; 502  :         p->IS_ONE = FALSE;

	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+24]
	and	eax, -5					; fffffffbH
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+24], eax

; 503  :         p->IS_EVEN = !(p->BLOCK[0] & 1);

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+eax]
	and	eax, 1
	jne	SHORT $LN9@CommitNumb
	mov	DWORD PTR tv169[ebp], 1
	jmp	SHORT $LN10@CommitNumb
$LN9@CommitNumb:
	mov	DWORD PTR tv169[ebp], 0
$LN10@CommitNumb:
	mov	ecx, DWORD PTR tv169[ebp]
	and	ecx, 1
	shl	ecx, 3
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+24]
	and	eax, -9					; fffffff7H
	or	eax, ecx
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+24], eax

; 504  :         p->TRAILING_ZERO_BITS_COUNT = GetTrailingZeroBitCount(p->BLOCK, p->UNIT_WORD_COUNT);

	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_GetTrailingZeroBitCount
	add	esp, 8
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 505  :         p->IS_POWER_OF_TWO = p->TRAILING_ZERO_BITS_COUNT + 1 == p->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	eax, DWORD PTR [ecx+12]
	jne	SHORT $LN11@CommitNumb
	mov	DWORD PTR tv186[ebp], 1
	jmp	SHORT $LN12@CommitNumb
$LN11@CommitNumb:
	mov	DWORD PTR tv186[ebp], 0
$LN12@CommitNumb:
	mov	edx, DWORD PTR tv186[ebp]
	and	edx, 1
	shl	edx, 4
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	and	ecx, -17				; ffffffefH
	or	ecx, edx
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+24], ecx
$LN1@CommitNumb:

; 506  :     }
; 507  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CommitNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\memory.c
_TEXT	SEGMENT
_p$ = 8							; size = 4
_DeallocateNumber PROC

; 431  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __FB6BCCD2_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 432  :     if (p == NULL || p->IS_STATIC)

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN3@Deallocate
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	and	ecx, 1
	je	SHORT $LN2@Deallocate
$LN3@Deallocate:

; 433  :         return;

	jmp	SHORT $LN1@Deallocate
$LN2@Deallocate:

; 434  :     CleanUpNumber(p);

	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_CleanUpNumber
	add	esp, 4

; 435  :     FillNumberHeader(p);

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_FillNumberHeader
	add	esp, 4

; 436  :     HeapFree(hLocalHeap, 0, p);

	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _hLocalHeap
	push	edx
	call	DWORD PTR __imp__HeapFree@12
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Deallocate:

; 437  : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_DeallocateNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\memory.c
_TEXT	SEGMENT
_p$ = 8							; size = 4
_DetatchNumber PROC

; 424  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __FB6BCCD2_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 425  :     if (p == NULL || !p->IS_STATIC)

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN3@DetatchNum
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	and	ecx, 1
	jne	SHORT $LN2@DetatchNum
$LN3@DetatchNum:

; 426  :         return;

	jmp	SHORT $LN1@DetatchNum
$LN2@DetatchNum:

; 427  :     CleanUpNumber(p);

	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_CleanUpNumber
	add	esp, 4
$LN1@DetatchNum:

; 428  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_DetatchNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\memory.c
_TEXT	SEGMENT
_result$ = -8						; size = 4
_p$ = -4						; size = 4
_pp$ = 8						; size = 4
_bit_count$ = 12					; size = 4
_light_check_code$ = 16					; size = 4
_AllocateNumber PROC

; 411  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __FB6BCCD2_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 412  :     NUMBER_HEADER* p = (NUMBER_HEADER*)HeapAlloc(hLocalHeap, HEAP_ZERO_MEMORY, sizeof(NUMBER_HEADER));

	mov	esi, esp
	push	36					; 00000024H
	push	8
	mov	eax, DWORD PTR _hLocalHeap
	push	eax
	call	DWORD PTR __imp__HeapAlloc@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _p$[ebp], eax

; 413  :     if (p == NULL)

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN2@AllocateNu

; 414  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	SHORT $LN1@AllocateNu
$LN2@AllocateNu:

; 415  :     PMC_STATUS_CODE result = InitializeNumber(p, bit_count, light_check_code);

	mov	ecx, DWORD PTR _light_check_code$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bit_count$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_InitializeNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax

; 416  :     if (result != PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN3@AllocateNu

; 417  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@AllocateNu
$LN3@AllocateNu:

; 418  :     p->IS_STATIC = FALSE;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	and	edx, -2					; fffffffeH
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+24], edx

; 419  :     *pp = p;

	mov	ecx, DWORD PTR _pp$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], edx

; 420  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@AllocateNu:

; 421  : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_AllocateNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\memory.c
_TEXT	SEGMENT
_result$ = -4						; size = 4
_p$ = 8							; size = 4
_bit_count$ = 12					; size = 4
_AttatchNumber PROC

; 402  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __FB6BCCD2_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 403  :     PMC_STATUS_CODE result = InitializeNumber(p, bit_count, NULL);

	push	0
	mov	eax, DWORD PTR _bit_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_InitializeNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax

; 404  :     if (result != PMC_STATUS_OK)

	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN2@AttatchNum

; 405  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@AttatchNum
$LN2@AttatchNum:

; 406  :     p->IS_STATIC = TRUE;

	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+24]
	or	eax, 1
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+24], eax

; 407  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@AttatchNum:

; 408  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_AttatchNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\memory.c
_TEXT	SEGMENT
_code_actual$ = -12					; size = 4
_code_desired$ = -8					; size = 4
_words$ = -4						; size = 4
_buffer$ = 8						; size = 4
_code$ = 12						; size = 4
_CheckBlockLight PROC

; 259  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __FB6BCCD2_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 260  : #ifdef _DEBUG
; 261  :     if (buffer == NULL)

	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN2@CheckBlock

; 262  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@CheckBlock
$LN2@CheckBlock:

; 263  :     --buffer;

	mov	eax, DWORD PTR _buffer$[ebp]
	sub	eax, 4
	mov	DWORD PTR _buffer$[ebp], eax

; 264  :     __UNIT_TYPE words = buffer[0];

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _words$[ebp], ecx

; 265  :     __UNIT_TYPE code_desired = buffer[words + 1] ^ (__UNIT_TYPE)&buffer[words + 1];

	mov	edx, DWORD PTR _words$[ebp]
	mov	eax, DWORD PTR _buffer$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4+4]
	mov	edx, DWORD PTR _words$[ebp]
	mov	eax, DWORD PTR _buffer$[ebp]
	xor	ecx, DWORD PTR [eax+edx*4+4]
	mov	DWORD PTR _code_desired$[ebp], ecx

; 266  :     __UNIT_TYPE code_actual = code;

	mov	ecx, DWORD PTR _code$[ebp]
	mov	DWORD PTR _code_actual$[ebp], ecx

; 267  :     if (code_actual == code_desired)

	mov	edx, DWORD PTR _code_actual$[ebp]
	cmp	edx, DWORD PTR _code_desired$[ebp]
	jne	SHORT $LN3@CheckBlock

; 268  :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@CheckBlock
	jmp	SHORT $LN1@CheckBlock
$LN3@CheckBlock:

; 269  :     else
; 270  :         return (PMC_STATUS_BAD_BUFFER);

	mov	eax, -257				; fffffeffH
$LN1@CheckBlock:

; 271  : #else
; 272  :     return (PMC_STATUS_OK);
; 273  : #endif
; 274  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CheckBlockLight ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\memory.c
_TEXT	SEGMENT
_p$1 = -4						; size = 4
_buffer$ = 8						; size = 4
_buffer_words$ = 12					; size = 4
_DeallocateBlock PROC

; 204  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __FB6BCCD2_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 205  : 	if (buffer != NULL)

	cmp	DWORD PTR _buffer$[ebp], 0
	je	SHORT $LN1@Deallocate

; 206  : 	{
; 207  :         __UNIT_TYPE* p = buffer - 1;

	mov	eax, DWORD PTR _buffer$[ebp]
	sub	eax, 4
	mov	DWORD PTR _p$1[ebp], eax

; 208  :         if (*p != buffer_words)

	mov	ecx, DWORD PTR _p$1[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _buffer_words$[ebp]
	je	SHORT $LN3@Deallocate

; 209  :         {
; 210  :             // もし、buffer の指す内容が壊れていることが明らかならば、二重解放の恐れがあるので解放処理はしない。
; 211  :         }

	jmp	SHORT $LN1@Deallocate
$LN3@Deallocate:

; 212  :         else
; 213  :         {
; 214  :             // 使用済みのバッファを既定のデータで塗りつぶす。
; 215  :             _FILL_MEMORY_UNIT(p, DEFAULT_MEMORY_DATA, buffer_words + 2);

	mov	eax, DWORD PTR _buffer_words$[ebp]
	add	eax, 2
	push	eax
	push	-858993460				; ccccccccH
	mov	ecx, DWORD PTR _p$1[ebp]
	push	ecx
	call	__FILL_MEMORY_UNIT
	add	esp, 12					; 0000000cH

; 216  :             // バッファを解放する。
; 217  :             HeapFree(hLocalHeap, 0, p);

	mov	esi, esp
	mov	edx, DWORD PTR _p$1[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _hLocalHeap
	push	eax
	call	DWORD PTR __imp__HeapFree@12
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Deallocate:

; 218  :         }
; 219  : 	}
; 220  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DeallocateBlock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\memory.c
_TEXT	SEGMENT
tv88 = -28						; size = 4
_check_code$ = -24					; size = 4
_r$ = -20						; size = 4
_buffer$ = -16						; size = 4
_bytes$ = -12						; size = 4
_words2$ = -8						; size = 4
_words1$ = -4						; size = 4
_bits$ = 8						; size = 4
_allocated_block_words$ = 12				; size = 4
_code$ = 16						; size = 4
_AllocateBlock PROC

; 162  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __FB6BCCD2_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 163  :     // 実際に獲得されるメモリ領域は「引数で渡されたワード数+2」のワード数となる。
; 164  :     // 最初のワードには獲得時に引数で渡されたワード数が格納される。
; 165  :     // 最後のワードには格納されている内容の正当性確認のための値が格納される。
; 166  :     // 2番目のワードへのポインタは呼び出し元に通知され利用される。
; 167  :     __UNIT_TYPE words1 = _DIVIDE_CEILING_UNIT(bits, __UNIT_TYPE_BIT_COUNT);

	push	32					; 00000020H
	mov	eax, DWORD PTR _bits$[ebp]
	push	eax
	call	__DIVIDE_CEILING_UNIT
	add	esp, 8
	mov	DWORD PTR _words1$[ebp], eax

; 168  : 	__UNIT_TYPE words2 = words1 + 2;

	mov	ecx, DWORD PTR _words1$[ebp]
	add	ecx, 2
	mov	DWORD PTR _words2$[ebp], ecx

; 169  : 	__UNIT_TYPE bytes = words2 * __UNIT_TYPE_BYTE_COUNT;

	mov	edx, DWORD PTR _words2$[ebp]
	shl	edx, 2
	mov	DWORD PTR _bytes$[ebp], edx

; 170  : 	__UNIT_TYPE* buffer = (__UNIT_TYPE*)HeapAlloc(hLocalHeap, HEAP_ZERO_MEMORY, bytes);

	mov	esi, esp
	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	push	8
	mov	ecx, DWORD PTR _hLocalHeap
	push	ecx
	call	DWORD PTR __imp__HeapAlloc@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _buffer$[ebp], eax

; 171  : 	if (buffer == NULL)

	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN2@AllocateBl

; 172  : 		return (NULL);

	xor	eax, eax
	jmp	$LN1@AllocateBl
$LN2@AllocateBl:

; 173  : 	buffer[0] = words1;

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	edx, DWORD PTR _words1$[ebp]
	mov	DWORD PTR [ecx+eax], edx

; 174  :     *allocated_block_words = words1;

	mov	eax, DWORD PTR _allocated_block_words$[ebp]
	mov	ecx, DWORD PTR _words1$[ebp]
	mov	DWORD PTR [eax], ecx

; 175  : #ifdef _DEBUG
; 176  :     // 乱数もどきを生成する。
; 177  : #ifdef _M_IX86
; 178  :     __UNIT_TYPE r = GetTickCount();

	mov	esi, esp
	call	DWORD PTR __imp__GetTickCount@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _r$[ebp], eax

; 179  : #elif defined(_M_IX64)
; 180  : #ifdef _MSC_VER
; 181  :     __UNIT_TYPE r = GetTickCount64();
; 182  : #elif defined(__GNUC__)
; 183  :     _UINT32_T temp = GetTickCount();
; 184  :     __UNIT_TYPE r = _FROMWORDTODWORD(temp, temp);
; 185  : #else
; 186  : #error unknown compiler
; 187  : #endif
; 188  : #else
; 189  : #error unknown platform
; 190  : #endif
; 191  :     __UNIT_TYPE check_code = configuration_info.MEMORY_VERIFICATION_ENABLED ? CalculateCheckCode(&buffer[1], words1) : CHECK_CODE_INIT | r;

	mov	edx, DWORD PTR _configuration_info
	and	edx, 1
	je	SHORT $LN5@AllocateBl
	mov	eax, DWORD PTR _words1$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	add	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_CalculateCheckCode
	add	esp, 8
	mov	DWORD PTR tv88[ebp], eax
	jmp	SHORT $LN6@AllocateBl
$LN5@AllocateBl:
	mov	edx, DWORD PTR _r$[ebp]
	or	edx, -2071690108			; 84848484H
	mov	DWORD PTR tv88[ebp], edx
$LN6@AllocateBl:
	mov	eax, DWORD PTR tv88[ebp]
	mov	DWORD PTR _check_code$[ebp], eax

; 192  : #else
; 193  :     __UNIT_TYPE check_code = 0;
; 194  : #endif
; 195  :     buffer[words1 + 1] = check_code ^ (__UNIT_TYPE)&buffer[words1 + 1];

	mov	ecx, DWORD PTR _words1$[ebp]
	mov	edx, DWORD PTR _buffer$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+4]
	xor	eax, DWORD PTR _check_code$[ebp]
	mov	ecx, DWORD PTR _words1$[ebp]
	mov	edx, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR [edx+ecx*4+4], eax

; 196  :     if (code != NULL)

	cmp	DWORD PTR _code$[ebp], 0
	je	SHORT $LN3@AllocateBl

; 197  :         *code = check_code;

	mov	eax, DWORD PTR _code$[ebp]
	mov	ecx, DWORD PTR _check_code$[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@AllocateBl:

; 198  :     return (&buffer[1]);

	mov	eax, 4
	shl	eax, 0
	add	eax, DWORD PTR _buffer$[ebp]
$LN1@AllocateBl:

; 199  : }

	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_AllocateBlock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\memory.c
_TEXT	SEGMENT
_DeallocateHeapArea PROC

; 609  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __FB6BCCD2_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 610  :     if (hLocalHeap != NULL)

	cmp	DWORD PTR _hLocalHeap, 0
	je	SHORT $LN1@Deallocate

; 611  :     {
; 612  :         HeapDestroy(hLocalHeap);

	mov	esi, esp
	mov	eax, DWORD PTR _hLocalHeap
	push	eax
	call	DWORD PTR __imp__HeapDestroy@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 613  :         hLocalHeap = NULL;

	mov	DWORD PTR _hLocalHeap, 0
$LN1@Deallocate:

; 614  :     }
; 615  : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_DeallocateHeapArea ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\memory.c
_TEXT	SEGMENT
_AllocateHeapArea PROC

; 601  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __FB6BCCD2_memory@c
	call	@__CheckForDebuggerJustMyCode@4

; 602  :     hLocalHeap = HeapCreate(0, 0x1000, 0);

	mov	esi, esp
	push	0
	push	4096					; 00001000H
	push	0
	call	DWORD PTR __imp__HeapCreate@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hLocalHeap, eax

; 603  :     if (hLocalHeap == NULL)

	cmp	DWORD PTR _hLocalHeap, 0
	jne	SHORT $LN2@AllocateHe

; 604  :         return (FALSE);

	xor	eax, eax
	jmp	SHORT $LN1@AllocateHe
$LN2@AllocateHe:

; 605  :     return (TRUE);

	mov	eax, 1
$LN1@AllocateHe:

; 606  : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_AllocateHeapArea ENDP
_TEXT	ENDS
END
