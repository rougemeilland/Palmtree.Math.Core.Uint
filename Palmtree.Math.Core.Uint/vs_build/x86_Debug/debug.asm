; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\debug.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_test_total_count
PUBLIC	_test_ok_count
PUBLIC	___DEBUG_LOG
_BSS	SEGMENT
_test_total_count DD 01H DUP (?)
_test_ok_count DD 01H DUP (?)
___DEBUG_LOG DD	01H DUP (?)
_BSS	ENDS
msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__630249ED_pmc_uint_debug@h DB 01H
__709645E0_debug@c DB 01H
msvcjmc	ENDS
PUBLIC	_TEST_Assert
PUBLIC	_FormatTestLabel
PUBLIC	_FormatTestMesssage
PUBLIC	_DoDebug@4
PUBLIC	_DumpBinary_UNIT
PUBLIC	__JustMyCode_Default
EXTRN	__imp__wsprintfW:PROC
EXTRN	_PMC_UINT_Initialize@4:PROC
EXTRN	_TEST_autogenerated:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
_BSS	SEGMENT
?buffer@?1??FormatTestLabel@@9@9 DW 0100H DUP (?)	; `FormatTestLabel'::`2'::buffer
?buffer@?1??FormatTestMesssage@@9@9 DW 0100H DUP (?)	; `FormatTestMesssage'::`2'::buffer
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
_DATA	SEGMENT
$SG94743 DB	0c6H, '0', 0b9H, '0', 0c8H, '0', 08bH, 095H, 0cbH, 'Y', 0aH
	DB	00H, 00H, 00H
	ORG $+2
$SG94748 DB	0c6H, '0', 0b9H, '0', 0c8H, '0', 08cH, '[', 086H, 'N', 02H
	DB	'0', 05H, 098H, 0eeH, 'vpe=', 00H, '%', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'O', 00H, 'K', 00H, 05H, 098H, 0eeH, 'vpe=', 00H, '%'
	DB	00H, 'd', 00H, ',', 00H, ' ', 00H, 'N', 00H, 'G', 00H, 05H, 098H
	DB	0eeH, 'vpe=', 00H, '%', 00H, 'd', 00H, ',', 00H, ' ', 00H, 'O', 00H
	DB	'K', 00H, 087H, 's=', 00H, '%', 00H, 'd', 00H, '%', 00H, '%', 00H
	DB	',', 00H, ' ', 00H, 'N', 00H, 'G', 00H, 087H, 's=', 00H, '%', 00H
	DB	'd', 00H, '%', 00H, '%', 00H, 0aH, 00H, 00H, 00H
$SG94766 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'U', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, '_', 00H, 'I', 00H, 'n', 00H, 'i', 00H, 't'
	DB	00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H, 'e', 00H
	DB	' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd'
	DB	00H, 00H, 00H
	ORG $+2
$SG94767 DB	'x', 00H, '8', 00H, '6', 00H, 00H, 00H
$SG94768 DB	'M', 00H, 'S', 00H, 'C', 00H, 00H, 00H
$SG94769 DB	'P', 00H, 'L', 00H, 'A', 00H, 'T', 00H, 'F', 00H, 'O', 00H
	DB	'R', 00H, 'M', 00H, ':', 00H, ' ', 00H, '%', 00H, 's', 00H, 0aH
	DB	00H, 00H, 00H
$SG94770 DB	'C', 00H, 'O', 00H, 'M', 00H, 'P', 00H, 'I', 00H, 'L', 00H
	DB	'E', 00H, 'R', 00H, ':', 00H, ' ', 00H, '%', 00H, 's', 00H, 0aH
	DB	00H, 00H, 00H
	ORG $+4
$SG94771 DB	'C', 00H, 'P', 00H, 'U', 00H, '-', 00H, 'I', 00H, 'N', 00H
	DB	'F', 00H, 'O', 00H, ':', 00H, ' ', 00H, 'P', 00H, 'O', 00H, 'P'
	DB	00H, 'C', 00H, 'N', 00H, 'T', 00H, '=', 00H, '%', 00H, 'd', 00H
	DB	',', 00H, ' ', 00H, 'A', 00H, 'D', 00H, 'X', 00H, '=', 00H, '%'
	DB	00H, 'd', 00H, ',', 00H, ' ', 00H, 'B', 00H, 'M', 00H, 'I', 00H
	DB	'1', 00H, '=', 00H, '%', 00H, 'd', 00H, ',', 00H, ' ', 00H, 'B'
	DB	00H, 'M', 00H, 'I', 00H, '2', 00H, '=', 00H, '%', 00H, 'd', 00H
	DB	',', 00H, ' ', 00H, 'A', 00H, 'B', 00H, 'M', 00H, '=', 00H, '%'
	DB	00H, 'd', 00H, 0aH, 00H, 00H, 00H
	ORG $+2
$SG94783 DB	'*', 00H, '*', 00H, '*', 00H, 'N', 00H, 'G', 00H, '*', 00H
	DB	'*', 00H, '*', 00H, 00H, 00H
	ORG $+2
$SG94784 DB	0c6H, '0', 0b9H, '0', 0c8H, '0 ', 00H, 'N', 00H, 'o', 00H
	DB	'.', 00H, '%', 00H, 'd', 00H, ':', 00H, ' ', 00H, '%', 00H, 's'
	DB	00H, ' ', 00H, '=', 00H, '>', 00H, ' ', 00H, '%', 00H, 's', 00H
	DB	' ', 00H, '(', 00H, '%', 00H, 's', 00H, ')', 00H, 0aH, 00H, 00H
	DB	00H
$SG94819 DB	',', 00H, ' ', 00H, 00H, 00H
	ORG $+2
$SG94820 DB	'0', 00H, 'x', 00H, '%', 00H, '0', 00H, '2', 00H, 'x', 00H
	DB	00H, 00H
_DATA	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\debug.c
_TEXT	SEGMENT
_is_first$1 = -8					; size = 4
_p$2 = -4						; size = 4
_buf$ = 8						; size = 4
_count$ = 12						; size = 4
_DumpBinary_UNIT PROC

; 135  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __709645E0_debug@c
	call	@__CheckForDebuggerJustMyCode@4

; 136  :     if (__DEBUG_LOG != NULL)

	cmp	DWORD PTR ___DEBUG_LOG, 0
	je	$LN1@DumpBinary

; 137  :     {
; 138  :         unsigned char* p = (unsigned char*)buf;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _p$2[ebp], eax

; 139  :         count *= sizeof(__UNIT_TYPE);

	mov	ecx, DWORD PTR _count$[ebp]
	shl	ecx, 2
	mov	DWORD PTR _count$[ebp], ecx
$LN2@DumpBinary:

; 140  :         while (count > 0 && p[count - 1] == 0)

	cmp	DWORD PTR _count$[ebp], 0
	jbe	SHORT $LN3@DumpBinary
	mov	edx, DWORD PTR _p$2[ebp]
	add	edx, DWORD PTR _count$[ebp]
	movzx	eax, BYTE PTR [edx-1]
	test	eax, eax
	jne	SHORT $LN3@DumpBinary

; 141  :             --count;

	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx
	jmp	SHORT $LN2@DumpBinary
$LN3@DumpBinary:

; 142  :         if (count <= 0)

	cmp	DWORD PTR _count$[ebp], 0
	ja	SHORT $LN7@DumpBinary

; 143  :             count = 1;

	mov	DWORD PTR _count$[ebp], 1
$LN7@DumpBinary:

; 144  :         int is_first = 1;

	mov	DWORD PTR _is_first$1[ebp], 1
$LN4@DumpBinary:

; 145  :         while (count > 0)

	cmp	DWORD PTR _count$[ebp], 0
	jbe	SHORT $LN1@DumpBinary

; 146  :         {
; 147  :             if (!is_first)

	cmp	DWORD PTR _is_first$1[ebp], 0
	jne	SHORT $LN8@DumpBinary

; 148  :                 (*__DEBUG_LOG)(L", ");

	mov	esi, esp
	push	OFFSET $SG94819
	call	DWORD PTR ___DEBUG_LOG
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@DumpBinary:

; 149  :             (*__DEBUG_LOG)(L"0x%02x", *p);

	mov	edx, DWORD PTR _p$2[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	esi, esp
	push	eax
	push	OFFSET $SG94820
	call	DWORD PTR ___DEBUG_LOG
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 150  :             ++p;

	mov	ecx, DWORD PTR _p$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$2[ebp], ecx

; 151  :             --count;

	mov	edx, DWORD PTR _count$[ebp]
	sub	edx, 1
	mov	DWORD PTR _count$[ebp], edx

; 152  :             is_first = 0;

	mov	DWORD PTR _is_first$1[ebp], 0

; 153  :         }

	jmp	SHORT $LN4@DumpBinary
$LN1@DumpBinary:

; 154  :     }
; 155  : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DumpBinary_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\debug.c
_TEXT	SEGMENT
_compiler$ = -24					; size = 4
_platform$ = -20					; size = 4
_ep$ = -16						; size = 4
_conf$ = -8						; size = 4
_env$ = 8						; size = 4
_DoDebug@4 PROC

; 66   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __709645E0_debug@c
	call	@__CheckForDebuggerJustMyCode@4

; 67   : #ifdef _DEBUG
; 68   :     PMC_CONFIGURATION_INFO conf;
; 69   :     conf.MEMORY_VERIFICATION_ENABLED = FALSE;

	mov	eax, DWORD PTR _conf$[ebp]
	and	eax, -2					; fffffffeH
	mov	DWORD PTR _conf$[ebp], eax

; 70   :     PMC_UINT_ENTRY_POINTS* ep = PMC_UINT_Initialize(&conf);

	lea	ecx, DWORD PTR _conf$[ebp]
	push	ecx
	call	_PMC_UINT_Initialize@4
	mov	DWORD PTR _ep$[ebp], eax

; 71   :     if (ep == NULL)

	cmp	DWORD PTR _ep$[ebp], 0
	jne	SHORT $LN2@DoDebug

; 72   :     {
; 73   :          env->log(L"PMC_UINT_Initialize failed");

	mov	esi, esp
	push	OFFSET $SG94766
	mov	edx, DWORD PTR _env$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 74   :          return;

	jmp	$LN1@DoDebug
$LN2@DoDebug:

; 75   :     }
; 76   : #ifdef _M_IX86
; 77   :     wchar_t* platform = L"x86";

	mov	DWORD PTR _platform$[ebp], OFFSET $SG94767

; 78   : #elif defined(_M_IX64)
; 79   :     wchar_t* platform = L"x64";
; 80   : #else
; 81   : #error unknown platform
; 82   : #endif
; 83   : #ifdef _MSC_VER
; 84   :     wchar_t* compiler = L"MSC";

	mov	DWORD PTR _compiler$[ebp], OFFSET $SG94768

; 85   : #elif defined(__GNUC__)
; 86   :     wchar_t* compiler = L"GNUC";
; 87   : #else
; 88   : #error unknown platform
; 89   : #endif
; 90   : 
; 91   :     env->log(L"PLATFORM: %s\n", platform);

	mov	esi, esp
	mov	ecx, DWORD PTR _platform$[ebp]
	push	ecx
	push	OFFSET $SG94769
	mov	edx, DWORD PTR _env$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 92   :     env->log(L"COMPILER: %s\n", compiler);

	mov	esi, esp
	mov	ecx, DWORD PTR _compiler$[ebp]
	push	ecx
	push	OFFSET $SG94770
	mov	edx, DWORD PTR _env$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 93   :     env->log(L"CPU-INFO: POPCNT=%d, ADX=%d, BMI1=%d, BMI2=%d, ABM=%d\n",

	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx]
	shr	edx, 4
	and	edx, 1
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax]
	shr	ecx, 3
	and	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx]
	shr	eax, 2
	and	eax, 1
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx]
	shr	edx, 1
	and	edx, 1
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	push	ecx
	push	OFFSET $SG94771
	mov	edx, DWORD PTR _env$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 94   :              ep->PROCESSOR_FEATURE_POPCNT,
; 95   :              ep->PROCESSOR_FEATURE_ADX,
; 96   :              ep->PROCESSOR_FEATURE_BMI1,
; 97   :              ep->PROCESSOR_FEATURE_BMI2,
; 98   :              ep->PROCESSOR_FEATURE_ABM);
; 99   : 
; 100  :     //CalculateCriticalDataOfDivision(env);
; 101  :     DoTest(env, ep);

	mov	ecx, DWORD PTR _ep$[ebp]
	push	ecx
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_DoTest
	add	esp, 8
$LN1@DoDebug:

; 102  : #endif
; 103  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@DoDebug
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN6@DoDebug:
	DD	1
	DD	$LN5@DoDebug
$LN5@DoDebug:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@DoDebug
$LN4@DoDebug:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	0
_DoDebug@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\debug.c
_TEXT	SEGMENT
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_DoTest	PROC

; 56   : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __709645E0_debug@c
	call	@__CheckForDebuggerJustMyCode@4

; 57   :     __DEBUG_LOG = env->log;

	mov	eax, DWORD PTR _env$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR ___DEBUG_LOG, ecx

; 58   :     TEST_Start(env);

	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Start
	add	esp, 4

; 59   :     TEST_autogenerated(env, ep);

	mov	eax, DWORD PTR _ep$[ebp]
	push	eax
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	call	_TEST_autogenerated
	add	esp, 8

; 60   :     TEST_End(env);

	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_End
	add	esp, 4

; 61   :     __DEBUG_LOG = NULL;

	mov	DWORD PTR ___DEBUG_LOG, 0

; 62   : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_DoTest	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\debug.c
_TEXT	SEGMENT
_env$ = 8						; size = 4
_TEST_End PROC

; 46   : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __709645E0_debug@c
	call	@__CheckForDebuggerJustMyCode@4

; 47   :     env->log(L"テスト完了。項目数=%d, OK項目数=%d, NG項目数=%d, OK率=%d%%, NG率=%d%%\n",

	mov	eax, DWORD PTR _test_total_count
	sub	eax, DWORD PTR _test_ok_count
	imul	eax, eax, 100
	cdq
	idiv	DWORD PTR _test_total_count
	mov	esi, esp
	push	eax
	imul	eax, DWORD PTR _test_ok_count, 100
	cdq
	idiv	DWORD PTR _test_total_count
	push	eax
	mov	ecx, DWORD PTR _test_total_count
	sub	ecx, DWORD PTR _test_ok_count
	push	ecx
	mov	edx, DWORD PTR _test_ok_count
	push	edx
	mov	eax, DWORD PTR _test_total_count
	push	eax
	push	OFFSET $SG94748
	mov	ecx, DWORD PTR _env$[ebp]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 48   :              test_total_count,
; 49   :              test_ok_count,
; 50   :              test_total_count - test_ok_count,
; 51   :              test_ok_count * 100 / test_total_count,
; 52   :              (test_total_count - test_ok_count) * 100 / test_total_count);
; 53   : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_TEST_End ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\debug.c
_TEXT	SEGMENT
_env$ = 8						; size = 4
_TEST_Start PROC

; 39   : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __709645E0_debug@c
	call	@__CheckForDebuggerJustMyCode@4

; 40   :     test_total_count = 0;

	mov	DWORD PTR _test_total_count, 0

; 41   :     test_ok_count = 0;

	mov	DWORD PTR _test_ok_count, 0

; 42   :     env->log(L"テスト開始\n");

	mov	esi, esp
	push	OFFSET $SG94743
	mov	eax, DWORD PTR _env$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 43   : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_TEST_Start ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\debug.c
_TEXT	SEGMENT
_format$ = 8						; size = 4
_return_value$ = 12					; size = 4
_FormatTestMesssage PROC

; 128  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __709645E0_debug@c
	call	@__CheckForDebuggerJustMyCode@4

; 129  :     static wchar_t buffer[256];
; 130  :     wsprintfW(buffer, format, return_value);

	mov	esi, esp
	mov	eax, DWORD PTR _return_value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _format$[ebp]
	push	ecx
	push	OFFSET ?buffer@?1??FormatTestMesssage@@9@9
	call	DWORD PTR __imp__wsprintfW
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 131  :     return buffer;

	mov	eax, OFFSET ?buffer@?1??FormatTestMesssage@@9@9

; 132  : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_FormatTestMesssage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\debug.c
_TEXT	SEGMENT
_format$ = 8						; size = 4
_n1$ = 12						; size = 4
_n2$ = 16						; size = 4
_FormatTestLabel PROC

; 121  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __709645E0_debug@c
	call	@__CheckForDebuggerJustMyCode@4

; 122  :     static wchar_t buffer[256];
; 123  :     wsprintfW(buffer, format, n1, n2);

	mov	esi, esp
	mov	eax, DWORD PTR _n2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _n1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _format$[ebp]
	push	edx
	push	OFFSET ?buffer@?1??FormatTestLabel@@9@9
	call	DWORD PTR __imp__wsprintfW
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 124  :     return buffer;

	mov	eax, OFFSET ?buffer@?1??FormatTestLabel@@9@9

; 125  : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_FormatTestLabel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\debug.c
_TEXT	SEGMENT
_env$ = 8						; size = 4
_test_name$ = 12					; size = 4
_condition$ = 16					; size = 4
_reason$ = 20						; size = 4
_TEST_Assert PROC

; 107  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __709645E0_debug@c
	call	@__CheckForDebuggerJustMyCode@4

; 108  :     if (condition)

	cmp	DWORD PTR _condition$[ebp], 0
	je	SHORT $LN2@TEST_Asser

; 109  :     {
; 110  :         //env->log(L"テスト No.%d: %s => %s\n", test_total_count + 1, test_name, L"Ok");
; 111  :         ++test_ok_count;

	mov	eax, DWORD PTR _test_ok_count
	add	eax, 1
	mov	DWORD PTR _test_ok_count, eax

; 112  :     }

	jmp	SHORT $LN3@TEST_Asser
$LN2@TEST_Asser:

; 113  :     else
; 114  :     {
; 115  :         env->log(L"テスト No.%d: %s => %s (%s)\n", test_total_count + 1, test_name, L"***NG***", reason);

	mov	esi, esp
	mov	ecx, DWORD PTR _reason$[ebp]
	push	ecx
	push	OFFSET $SG94783
	mov	edx, DWORD PTR _test_name$[ebp]
	push	edx
	mov	eax, DWORD PTR _test_total_count
	add	eax, 1
	push	eax
	push	OFFSET $SG94784
	mov	ecx, DWORD PTR _env$[ebp]
	mov	edx, DWORD PTR [ecx]
	call	edx
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@TEST_Asser:

; 116  :     }
; 117  :     ++test_total_count;

	mov	eax, DWORD PTR _test_total_count
	add	eax, 1
	mov	DWORD PTR _test_total_count, eax

; 118  : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_TEST_Assert ENDP
_TEXT	ENDS
END
