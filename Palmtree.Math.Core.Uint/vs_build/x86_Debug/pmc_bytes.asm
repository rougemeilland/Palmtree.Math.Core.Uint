; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_bytes.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__B1857B5F_pmc_bytes@c DB 01H
msvcjmc	ENDS
PUBLIC	_PMC_FromByteArray@12
PUBLIC	_PMC_ToByteArray@16
PUBLIC	__JustMyCode_Default
EXTRN	_AllocateNumber:PROC
EXTRN	_CommitNumber:PROC
EXTRN	_CheckNumber:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_number_zero:BYTE
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bytes.c
_TEXT	SEGMENT
_p$ = 8							; size = 4
_count$ = 12						; size = 4
_CountActualBitsFromBuffer PROC

; 32   : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __B1857B5F_pmc_bytes@c
	call	@__CheckForDebuggerJustMyCode@4

; 33   :     p += count;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _count$[ebp]
	mov	DWORD PTR _p$[ebp], eax
$LN2@CountActua:

; 34   :     while (count > 0)

	cmp	DWORD PTR _count$[ebp], 0
	jbe	SHORT $LN3@CountActua

; 35   :     {
; 36   :         --p;

	mov	ecx, DWORD PTR _p$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx

; 37   :         if (*p != 0)

	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN4@CountActua

; 38   :             return (count * 8 - _LZCNT_ALT_8(*p));

	mov	esi, DWORD PTR _count$[ebp]
	shl	esi, 3
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	push	edx
	call	__LZCNT_ALT_8
	add	esp, 4
	sub	esi, eax
	mov	eax, esi
	jmp	SHORT $LN1@CountActua
$LN4@CountActua:

; 39   :         --count;

	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax

; 40   :     }

	jmp	SHORT $LN2@CountActua
$LN3@CountActua:

; 41   :     return (0);

	xor	eax, eax
$LN1@CountActua:

; 42   : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_CountActualBitsFromBuffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 1
__LZCNT_ALT_8 PROC

; 574  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 575  :         if (x == 0)

	movzx	eax, BYTE PTR _x$[ebp]
	test	eax, eax
	jne	SHORT $LN2@LZCNT_ALT_

; 576  :             return (sizeof(x) * 8);

	mov	eax, 8
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 577  :         _UINT32_T pos;
; 578  : #ifdef _MSC_VER
; 579  :         _BitScanReverse(&pos, x);

	movzx	ecx, BYTE PTR _x$[ebp]
	bsr	edx, ecx
	mov	DWORD PTR _pos$[ebp], edx

; 580  : #elif defined(__GNUC__)
; 581  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"((_UINT32_T)x));
; 582  : #else
; 583  : #error unknown compiler
; 584  : #endif
; 585  :         return ((unsigned char)(sizeof(x) * 8 - 1 - pos));

	mov	eax, 7
	sub	eax, DWORD PTR _pos$[ebp]
	movzx	eax, al
$LN1@LZCNT_ALT_:

; 586  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@LZCNT_ALT_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@LZCNT_ALT_:
	DD	1
	DD	$LN5@LZCNT_ALT_
$LN5@LZCNT_ALT_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@LZCNT_ALT_
$LN4@LZCNT_ALT_:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
__LZCNT_ALT_8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
__DIVIDE_CEILING_SIZE PROC

; 191  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 192  :         return ((u + v - 1) / v);

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _u$[ebp]
	lea	eax, DWORD PTR [ecx+eax-1]
	xor	edx, edx
	div	DWORD PTR _v$[ebp]

; 193  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__DIVIDE_CEILING_SIZE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_BYTE PROC

; 42   :     {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 43   :         __movsb(d, s, count);

	mov	edi, DWORD PTR _d$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep movsb

; 44   :     }

	pop	edi
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__COPY_MEMORY_BYTE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bytes.c
_TEXT	SEGMENT
tv77 = -16						; size = 4
_expected_buffer_size$ = -12				; size = 4
_result$ = -8						; size = 4
_np$ = -4						; size = 4
_p$ = 8							; size = 4
_buffer$ = 12						; size = 4
_buffer_size$ = 16					; size = 4
_count$ = 20						; size = 4
_PMC_ToByteArray@16 PROC

; 91   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __B1857B5F_pmc_bytes@c
	call	@__CheckForDebuggerJustMyCode@4

; 92   :     if (p == NULL)

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN2@PMC_ToByte

; 93   :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_ToByte
$LN2@PMC_ToByte:

; 94   :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _np$[ebp], eax

; 95   :     PMC_STATUS_CODE result;
; 96   :     if ((result = CheckNumber(np)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _np$[ebp]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN3@PMC_ToByte

; 97   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_ToByte
$LN3@PMC_ToByte:

; 98   :     size_t expected_buffer_size = np->IS_ZERO ? 1 : _DIVIDE_CEILING_SIZE(np->UNIT_BIT_COUNT, 8) + 1;

	mov	edx, DWORD PTR _np$[ebp]
	mov	eax, DWORD PTR [edx+24]
	shr	eax, 1
	and	eax, 1
	je	SHORT $LN9@PMC_ToByte
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN10@PMC_ToByte
$LN9@PMC_ToByte:
	push	8
	mov	ecx, DWORD PTR _np$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	__DIVIDE_CEILING_SIZE
	add	esp, 8
	add	eax, 1
	mov	DWORD PTR tv77[ebp], eax
$LN10@PMC_ToByte:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR _expected_buffer_size$[ebp], eax

; 99   :     if (buffer != NULL)

	cmp	DWORD PTR _buffer$[ebp], 0
	je	SHORT $LN4@PMC_ToByte

; 100  :     {
; 101  :         if (8 + np->UNIT_BIT_COUNT > sizeof(*buffer) * 8 * buffer_size)

	mov	ecx, DWORD PTR _np$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 8
	mov	eax, DWORD PTR _buffer_size$[ebp]
	shl	eax, 3
	cmp	edx, eax
	jbe	SHORT $LN5@PMC_ToByte

; 102  :             return (PMC_STATUS_INSUFFICIENT_BUFFER);

	mov	eax, -4					; fffffffcH
	jmp	SHORT $LN1@PMC_ToByte
$LN5@PMC_ToByte:

; 103  :         if (np->IS_ZERO)

	mov	ecx, DWORD PTR _np$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	shr	edx, 1
	and	edx, 1
	je	SHORT $LN6@PMC_ToByte

; 104  :             buffer[0] = 0;

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _buffer$[ebp]
	mov	BYTE PTR [edx+ecx], 0
	jmp	SHORT $LN4@PMC_ToByte
$LN6@PMC_ToByte:

; 105  :         else
; 106  :         {
; 107  :             buffer[0] = 1;

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _buffer$[ebp]
	mov	BYTE PTR [edx+ecx], 1

; 108  :             _COPY_MEMORY_BYTE(buffer + 1, np->BLOCK, expected_buffer_size - 1);

	mov	eax, DWORD PTR _expected_buffer_size$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _np$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR _buffer$[ebp]
	add	eax, 1
	push	eax
	call	__COPY_MEMORY_BYTE
	add	esp, 12					; 0000000cH
$LN4@PMC_ToByte:

; 109  :         }
; 110  :     }
; 111  :     *count = expected_buffer_size;

	mov	ecx, DWORD PTR _count$[ebp]
	mov	edx, DWORD PTR _expected_buffer_size$[ebp]
	mov	DWORD PTR [ecx], edx

; 112  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_ToByte:

; 113  : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_PMC_ToByteArray@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bytes.c
_TEXT	SEGMENT
_p$1 = -20						; size = 4
_bit_count$2 = -12					; size = 4
_header_reserved$ = -7					; size = 1
_sign$ = -6						; size = 1
_header$ = -5						; size = 1
_result$ = -4						; size = 4
_buffer$ = 8						; size = 4
_count$ = 12						; size = 4
_o$ = 16						; size = 4
_PMC_FromByteArray@12 PROC

; 46   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __B1857B5F_pmc_bytes@c
	call	@__CheckForDebuggerJustMyCode@4

; 47   :     PMC_STATUS_CODE result;
; 48   :     if (buffer == NULL)

	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN2@PMC_FromBy

; 49   :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_FromBy
$LN2@PMC_FromBy:

; 50   :     if (count < 1)

	cmp	DWORD PTR _count$[ebp], 1
	jae	SHORT $LN3@PMC_FromBy

; 51   :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_FromBy
$LN3@PMC_FromBy:

; 52   :     if (o == NULL)

	cmp	DWORD PTR _o$[ebp], 0
	jne	SHORT $LN4@PMC_FromBy

; 53   :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_FromBy
$LN4@PMC_FromBy:

; 54   :     unsigned char header = buffer[0];

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _buffer$[ebp]
	mov	al, BYTE PTR [edx+ecx]
	mov	BYTE PTR _header$[ebp], al

; 55   :     unsigned char sign = header & 0x03;

	movzx	ecx, BYTE PTR _header$[ebp]
	and	ecx, 3
	mov	BYTE PTR _sign$[ebp], cl

; 56   :     unsigned char header_reserved = header & 0xfc;

	movzx	edx, BYTE PTR _header$[ebp]
	and	edx, 252				; 000000fcH
	mov	BYTE PTR _header_reserved$[ebp], dl

; 57   :     if (header_reserved != 0)

	movzx	eax, BYTE PTR _header_reserved$[ebp]
	test	eax, eax
	je	SHORT $LN5@PMC_FromBy

; 58   :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_FromBy
$LN5@PMC_FromBy:

; 59   :     if (sign == 0)

	movzx	ecx, BYTE PTR _sign$[ebp]
	test	ecx, ecx
	jne	SHORT $LN6@PMC_FromBy

; 60   :     {
; 61   :         if (count != 1)

	cmp	DWORD PTR _count$[ebp], 1
	je	SHORT $LN8@PMC_FromBy

; 62   :             return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_FromBy
$LN8@PMC_FromBy:

; 63   :         *o = (PMC_HANDLE_UINT)&number_zero;

	mov	edx, DWORD PTR _o$[ebp]
	mov	DWORD PTR [edx], OFFSET _number_zero

; 64   :     }

	jmp	$LN7@PMC_FromBy
$LN6@PMC_FromBy:

; 65   :     else if (sign == 1)

	movzx	eax, BYTE PTR _sign$[ebp]
	cmp	eax, 1
	jne	$LN9@PMC_FromBy

; 66   :     {
; 67   :         __UNIT_TYPE bit_count = CountActualBitsFromBuffer(buffer + 1, count - 1);

	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	add	edx, 1
	push	edx
	call	_CountActualBitsFromBuffer
	add	esp, 8
	mov	DWORD PTR _bit_count$2[ebp], eax

; 68   :         if (bit_count == 0)

	cmp	DWORD PTR _bit_count$2[ebp], 0
	jne	SHORT $LN11@PMC_FromBy

; 69   :             *o = (PMC_HANDLE_UINT)&number_zero;

	mov	eax, DWORD PTR _o$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_zero
	jmp	SHORT $LN12@PMC_FromBy
$LN11@PMC_FromBy:

; 70   :         else
; 71   :         {
; 72   :             NUMBER_HEADER* p;
; 73   :             if ((result = AllocateNumber(&p, bit_count, NULL)) != PMC_STATUS_OK)

	push	0
	mov	ecx, DWORD PTR _bit_count$2[ebp]
	push	ecx
	lea	edx, DWORD PTR _p$1[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_FromBy

; 74   :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_FromBy
$LN13@PMC_FromBy:

; 75   :             _COPY_MEMORY_BYTE(p->BLOCK, buffer + 1, _DIVIDE_CEILING_SIZE(bit_count, 8));

	push	8
	mov	eax, DWORD PTR _bit_count$2[ebp]
	push	eax
	call	__DIVIDE_CEILING_SIZE
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _p$1[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	__COPY_MEMORY_BYTE
	add	esp, 12					; 0000000cH

; 76   :             CommitNumber(p);

	mov	ecx, DWORD PTR _p$1[ebp]
	push	ecx
	call	_CommitNumber
	add	esp, 4

; 77   :             *o = (PMC_HANDLE_UINT)p;

	mov	edx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR _p$1[ebp]
	mov	DWORD PTR [edx], eax
$LN12@PMC_FromBy:

; 78   :         }
; 79   :     }

	jmp	SHORT $LN7@PMC_FromBy
$LN9@PMC_FromBy:

; 80   :     else
; 81   :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_FromBy
$LN7@PMC_FromBy:

; 82   : 
; 83   : #ifdef _DEBUG
; 84   :     if ((result = CheckNumber((NUMBER_HEADER*)*o)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN14@PMC_FromBy

; 85   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_FromBy
$LN14@PMC_FromBy:

; 86   : #endif
; 87   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_FromBy:

; 88   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@PMC_FromBy
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN18@PMC_FromBy:
	DD	1
	DD	$LN17@PMC_FromBy
$LN17@PMC_FromBy:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN16@PMC_FromBy
$LN16@PMC_FromBy:
	DB	112					; 00000070H
	DB	0
_PMC_FromByteArray@12 ENDP
_TEXT	ENDS
END
