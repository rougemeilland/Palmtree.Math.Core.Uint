; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\INTERNALTEST_op_Multiply.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__630249ED_pmc_uint_debug@h DB 01H
__E80DD667_internaltest_op_multiply@c DB 01H
msvcjmc	ENDS
PUBLIC	_INTERNALTEST_Multiply_X_X_Imp
PUBLIC	__JustMyCode_Default
EXTRN	_AllocateBlock:PROC
EXTRN	_DeallocateBlock:PROC
EXTRN	_CheckBlockLight:PROC
EXTRN	_Multiply_X_X_Imp:PROC
EXTRN	_TEST_Assert:PROC
EXTRN	_FormatTestLabel:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
_DATA	SEGMENT
$SG95980 DB	'a', 00H, 'c', 00H, 't', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	'_', 00H, 'w', 00H, '_', 00H, 'b', 00H, 'u', 00H, 'f', 00H, 'n'
	DB	'0', 085H, 'Q', 0b9H, '[L04x', 0dH, 'dW0f0D0', 08bH, '0', 00H, 00H
	ORG $+2
$SG95981 DB	'M', 00H, 'u', 00H, 'l', 00H, 't', 00H, 'i', 00H, 'p', 00H
	DB	'l', 00H, 'y', 00H, '_', 00H, 'X', 00H, '_', 00H, 'X', 00H, '_'
	DB	00H, 'I', 00H, 'm', 00H, 'p', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG95982 DB	0c7H, '0', 0fcH, '0', 0bfH, '0n0', 085H, 'Q', 0b9H, '[L0', 00H
	DB	'N', 0f4H, 081H, 'W0j0D0', 00H, 00H
	ORG $+2
$SG95983 DB	'M', 00H, 'u', 00H, 'l', 00H, 't', 00H, 'i', 00H, 'p', 00H
	DB	'l', 00H, 'y', 00H, '_', 00H, 'X', 00H, '_', 00H, 'X', 00H, '_'
	DB	00H, 'I', 00H, 'm', 00H, 'p', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
_DATA	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_debug.h
_TEXT	SEGMENT
_buffer1$ = 8						; size = 4
_count1$ = 12						; size = 4
_buffer2$ = 16						; size = 4
_count2$ = 20						; size = 4
__EQUALS_MEMORY PROC

; 147  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __630249ED_pmc_uint_debug@h
	call	@__CheckForDebuggerJustMyCode@4

; 148  :     if (count1 != count2)

	mov	eax, DWORD PTR _count1$[ebp]
	cmp	eax, DWORD PTR _count2$[ebp]
	je	SHORT $LN2@EQUALS_MEM

; 149  :         return (-1);

	or	eax, -1
	jmp	SHORT $LN1@EQUALS_MEM
$LN2@EQUALS_MEM:

; 150  :     while (count1 > 0)

	cmp	DWORD PTR _count1$[ebp], 0
	jbe	SHORT $LN3@EQUALS_MEM

; 151  :     {
; 152  :         if (*buffer1 != *buffer2)

	mov	ecx, DWORD PTR _buffer1$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _buffer2$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	edx, ecx
	je	SHORT $LN5@EQUALS_MEM

; 153  :             return (-1);

	or	eax, -1
	jmp	SHORT $LN1@EQUALS_MEM
$LN5@EQUALS_MEM:

; 154  :         ++buffer1;

	mov	edx, DWORD PTR _buffer1$[ebp]
	add	edx, 1
	mov	DWORD PTR _buffer1$[ebp], edx

; 155  :         ++buffer2;

	mov	eax, DWORD PTR _buffer2$[ebp]
	add	eax, 1
	mov	DWORD PTR _buffer2$[ebp], eax

; 156  :         --count1;

	mov	ecx, DWORD PTR _count1$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count1$[ebp], ecx

; 157  :     }

	jmp	SHORT $LN2@EQUALS_MEM
$LN3@EQUALS_MEM:

; 158  :     return (0);

	xor	eax, eax
$LN1@EQUALS_MEM:

; 159  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__EQUALS_MEMORY ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\internaltest_op_multiply.c
_TEXT	SEGMENT
tv165 = -100						; size = 4
tv148 = -96						; size = 4
_actual_w$ = -92					; size = 4
_actual_w_count$ = -88					; size = 4
_actual_w_buf$ = -84					; size = 4
_actual_w_buf_code$ = -76				; size = 4
_actual_w_buf_words$ = -64				; size = 4
_v_buf$ = -56						; size = 4
_v_buf_code$ = -48					; size = 4
_v_buf_words$ = -36					; size = 4
_u_buf$ = -28						; size = 4
_u_buf_code$ = -20					; size = 4
_u_buf_words$ = -8					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_u$ = 20						; size = 4
_u_count$ = 24						; size = 4
_v$ = 28						; size = 4
_v_count$ = 32						; size = 4
_desired_w$ = 36					; size = 4
_desired_w_count$ = 40					; size = 4
_INTERNALTEST_Multiply_X_X_Imp PROC

; 34   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-100]
	mov	ecx, 25					; 00000019H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __E80DD667_internaltest_op_multiply@c
	call	@__CheckForDebuggerJustMyCode@4

; 35   :     __UNIT_TYPE u_buf_words;
; 36   :     __UNIT_TYPE u_buf_code;
; 37   :     __UNIT_TYPE* u_buf = AllocateBlock(u_count * 8 - 8, &u_buf_words, &u_buf_code);

	lea	eax, DWORD PTR _u_buf_code$[ebp]
	push	eax
	lea	ecx, DWORD PTR _u_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_count$[ebp]
	lea	eax, DWORD PTR [edx*8-8]
	push	eax
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _u_buf$[ebp], eax

; 38   :     _COPY_MEMORY_BYTE(u_buf, u + 1, u_count - 1);

	mov	ecx, DWORD PTR _u_count$[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	call	__COPY_MEMORY_BYTE
	add	esp, 12					; 0000000cH

; 39   : 
; 40   :     __UNIT_TYPE v_buf_words;
; 41   :     __UNIT_TYPE v_buf_code;
; 42   :     __UNIT_TYPE* v_buf = AllocateBlock(v_count * 8 - 8, &v_buf_words, &v_buf_code);

	lea	ecx, DWORD PTR _v_buf_code$[ebp]
	push	ecx
	lea	edx, DWORD PTR _v_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _v_count$[ebp]
	lea	ecx, DWORD PTR [eax*8-8]
	push	ecx
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _v_buf$[ebp], eax

; 43   :     _COPY_MEMORY_BYTE(v_buf, v + 1, v_count - 1);

	mov	edx, DWORD PTR _v_count$[ebp]
	sub	edx, 1
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _v_buf$[ebp]
	push	ecx
	call	__COPY_MEMORY_BYTE
	add	esp, 12					; 0000000cH

; 44   : 
; 45   :     __UNIT_TYPE actual_w_buf_words;
; 46   :     __UNIT_TYPE actual_w_buf_code;
; 47   :     __UNIT_TYPE* actual_w_buf = AllocateBlock((_DIVIDE_CEILING_SIZE(u_count, __UNIT_TYPE_BYTE_COUNT) + _DIVIDE_CEILING_SIZE(v_count, __UNIT_TYPE_BYTE_COUNT)) * __UNIT_TYPE_BIT_COUNT, &actual_w_buf_words, &actual_w_buf_code);

	lea	edx, DWORD PTR _actual_w_buf_code$[ebp]
	push	edx
	lea	eax, DWORD PTR _actual_w_buf_words$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _u_count$[ebp]
	push	ecx
	call	__DIVIDE_CEILING_SIZE
	add	esp, 8
	mov	esi, eax
	push	4
	mov	edx, DWORD PTR _v_count$[ebp]
	push	edx
	call	__DIVIDE_CEILING_SIZE
	add	esp, 8
	add	esi, eax
	shl	esi, 5
	push	esi
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _actual_w_buf$[ebp], eax

; 48   : 
; 49   :     Multiply_X_X_Imp(u_buf, u_buf_words, v_buf, v_buf_words, actual_w_buf);

	mov	eax, DWORD PTR _actual_w_buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _u_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	call	_Multiply_X_X_Imp
	add	esp, 20					; 00000014H

; 50   : 
; 51   :     size_t actual_w_count = actual_w_buf_words * __UNIT_TYPE_BYTE_COUNT;

	mov	edx, DWORD PTR _actual_w_buf_words$[ebp]
	shl	edx, 2
	mov	DWORD PTR _actual_w_count$[ebp], edx

; 52   :     unsigned char* actual_w = (unsigned char*)actual_w_buf;

	mov	eax, DWORD PTR _actual_w_buf$[ebp]
	mov	DWORD PTR _actual_w$[ebp], eax
$LN2@INTERNALTE:

; 53   :     while (actual_w_count > 0 && actual_w[actual_w_count - 1] == 0)

	cmp	DWORD PTR _actual_w_count$[ebp], 0
	jbe	SHORT $LN3@INTERNALTE
	mov	ecx, DWORD PTR _actual_w$[ebp]
	add	ecx, DWORD PTR _actual_w_count$[ebp]
	movzx	edx, BYTE PTR [ecx-1]
	test	edx, edx
	jne	SHORT $LN3@INTERNALTE

; 54   :         --actual_w_count;

	mov	eax, DWORD PTR _actual_w_count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _actual_w_count$[ebp], eax
	jmp	SHORT $LN2@INTERNALTE
$LN3@INTERNALTE:

; 55   : 
; 56   :     TEST_Assert(env, FormatTestLabel(L"Multiply_X_X_Imp (%d.%d)", no, 1), CheckBlockLight(actual_w_buf, actual_w_buf_code) == PMC_STATUS_OK, L"actual_w_bufの内容が破損している");

	mov	ecx, DWORD PTR _actual_w_buf_code$[ebp]
	push	ecx
	mov	edx, DWORD PTR _actual_w_buf$[ebp]
	push	edx
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@INTERNALTE
	mov	DWORD PTR tv148[ebp], 1
	jmp	SHORT $LN6@INTERNALTE
$LN5@INTERNALTE:
	mov	DWORD PTR tv148[ebp], 0
$LN6@INTERNALTE:
	push	OFFSET $SG95980
	mov	eax, DWORD PTR tv148[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG95981
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 57   :     TEST_Assert(env, FormatTestLabel(L"Multiply_X_X_Imp (%d.%d)", no, 2), _EQUALS_MEMORY(actual_w, actual_w_count, desired_w + 1, desired_w_count - 1) == 0, L"データの内容が一致しない");

	mov	eax, DWORD PTR _desired_w_count$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _desired_w$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _actual_w_count$[ebp]
	push	edx
	mov	eax, DWORD PTR _actual_w$[ebp]
	push	eax
	call	__EQUALS_MEMORY
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN7@INTERNALTE
	mov	DWORD PTR tv165[ebp], 1
	jmp	SHORT $LN8@INTERNALTE
$LN7@INTERNALTE:
	mov	DWORD PTR tv165[ebp], 0
$LN8@INTERNALTE:
	push	OFFSET $SG95982
	mov	ecx, DWORD PTR tv165[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET $SG95983
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 58   : 
; 59   :     DeallocateBlock(actual_w_buf, actual_w_buf_words);

	mov	ecx, DWORD PTR _actual_w_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _actual_w_buf$[ebp]
	push	edx
	call	_DeallocateBlock
	add	esp, 8

; 60   :     DeallocateBlock(v_buf, v_buf_words);

	mov	eax, DWORD PTR _v_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 61   :     DeallocateBlock(u_buf, u_buf_words);

	mov	edx, DWORD PTR _u_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 62   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@INTERNALTE
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 100				; 00000064H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN16@INTERNALTE:
	DD	6
	DD	$LN15@INTERNALTE
$LN15@INTERNALTE:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN9@INTERNALTE
	DD	-20					; ffffffecH
	DD	4
	DD	$LN10@INTERNALTE
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN11@INTERNALTE
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN12@INTERNALTE
	DD	-64					; ffffffc0H
	DD	4
	DD	$LN13@INTERNALTE
	DD	-76					; ffffffb4H
	DD	4
	DD	$LN14@INTERNALTE
$LN14@INTERNALTE:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN13@INTERNALTE:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN12@INTERNALTE:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN11@INTERNALTE:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN10@INTERNALTE:
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN9@INTERNALTE:
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_INTERNALTEST_Multiply_X_X_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
__DIVIDE_CEILING_SIZE PROC

; 192  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 193  :         return ((u + v - 1) / v);

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _u$[ebp]
	lea	eax, DWORD PTR [ecx+eax-1]
	xor	edx, edx
	div	DWORD PTR _v$[ebp]

; 194  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__DIVIDE_CEILING_SIZE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_BYTE PROC

; 43   :     {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 44   :         __movsb(d, s, count);

	mov	edi, DWORD PTR _d$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep movsb

; 45   :     }

	pop	edi
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__COPY_MEMORY_BYTE ENDP
_TEXT	ENDS
END
