; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_modpow.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__2088847F_corecrt_memory@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__E9FFF232_guiddef@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__12AD47BB_winuser@h DB 01H
__B4B40122_winioctl@h DB 01H
__A73354DD_stdlib@h DB 01H
__25F3FB34_propidl@h DB 01H
__A40E48B8_oleauto@h DB 01H
__86261D59_stralign@h DB 01H
__2CC6E67D_corecrt_stdio_config@h DB 01H
__41381B41_corecrt_wconio@h DB 01H
__F0CC4AC4_corecrt_wio@h DB 01H
__05476D76_corecrt_wstdio@h DB 01H
__C0802A2B_corecrt_wtime@h DB 01H
__A40A425D_stat@h DB 01H
__5A74375D_wchar@h DB 01H
__6BC0FD35_vcruntime_new@h DB 01H
__77F53984_cstddef DB 01H
__188180DA_corecrt_math@h DB 01H
__D23EE329_cstdlib DB 01H
__5ECFF36E_type_traits DB 01H
__331E732B_malloc@h DB 01H
__9BB4E194_vcruntime_exception@h DB 01H
__7949CB39_exception DB 01H
__802FEEC0_pmc_exception@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__1AB12E38_pmc_resourceholder@h DB 01H
__746E1CEC_xmmintrin@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__4CB7CE93_pmc_modpow@cpp DB 01H
msvcjmc	ENDS
CONST	SEGMENT
$SG117994 DB	'0', 00H, 'k0', 088H, '0', 08bH, '0d', 096H, 097H, '{L0L', 088H
	DB	08fH, '0', 08cH, '0', 088H, '0F0h0W0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118006 DB	'0', 00H, 'n00', 00H, 'WNn0$Po0*g', 09aH, '[', 0a9H, 07fH
	DB	'g0Y0', 02H, '0', 00H, 00H
$SG118012 DB	'0', 00H, 'n00', 00H, 'WNn0$Po0*g', 09aH, '[', 0a9H, 07fH
	DB	'g0Y0', 02H, '0', 00H, 00H
$SG118042 DB	'v', 00H, 00H, 00H
$SG118043 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
	ORG $+2
$SG118046 DB	'e', 00H, 00H, 00H
$SG118047 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
	ORG $+2
$SG118050 DB	'm', 00H, 00H, 00H
$SG118051 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
CONST	ENDS
PUBLIC	??0exception@std@@QAE@XZ			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z ; Palmtree::Math::Core::Internal::Exception::Exception
PUBLIC	??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ; Palmtree::Math::Core::Internal::Exception::Exception
PUBLIC	??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
PUBLIC	??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
PUBLIC	??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor'
PUBLIC	??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
PUBLIC	??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
PUBLIC	??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
PUBLIC	??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor'
PUBLIC	??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException
PUBLIC	??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException
PUBLIC	??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::DivisionByZeroException::~DivisionByZeroException
PUBLIC	??_GDivisionByZeroException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::DivisionByZeroException::`scalar deleting destructor'
PUBLIC	??0ArithmeticException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::ArithmeticException::ArithmeticException
PUBLIC	??1ArithmeticException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ArithmeticException::~ArithmeticException
PUBLIC	??0ArithmeticException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::ArithmeticException::ArithmeticException
PUBLIC	??_GArithmeticException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::ArithmeticException::`scalar deleting destructor'
PUBLIC	?Initialize_ModPow@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ; Palmtree::Math::Core::Internal::Initialize_ModPow
PUBLIC	?PMC_ModPow_X_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@00@Z ; Palmtree::Math::Core::Internal::PMC_ModPow_X_X_X
PUBLIC	?exception_filter@Internal@Core@Math@Palmtree@@YAJK@Z ; Palmtree::Math::Core::Internal::exception_filter
PUBLIC	__JustMyCode_Default
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7Exception@Internal@Core@Math@Palmtree@@6B@	; Palmtree::Math::Core::Internal::Exception::`vftable'
PUBLIC	??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`vftable'
PUBLIC	??_7DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DivisionByZeroException::`vftable'
PUBLIC	??_7ArithmeticException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArithmeticException::`vftable'
PUBLIC	??_R0?AVException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::Exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	__TI2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@
PUBLIC	__CTA2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::DivisionByZeroException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@@8??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	__TI2?AVArithmeticException@Internal@Core@Math@Palmtree@@
PUBLIC	__CTA2?AVArithmeticException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVArithmeticException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArithmeticException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVArithmeticException@Internal@Core@Math@Palmtree@@@8??0ArithmeticException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	__TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
PUBLIC	__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Exception@Internal@Core@Math@Palmtree@@6B@	; Palmtree::Math::Core::Internal::Exception::`RTTI Complete Object Locator'
PUBLIC	??_R3Exception@Internal@Core@Math@Palmtree@@8	; Palmtree::Math::Core::Internal::Exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Exception@Internal@Core@Math@Palmtree@@8	; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EN@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,77)'
PUBLIC	??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Complete Object Locator'
PUBLIC	??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DivisionByZeroException::`RTTI Complete Object Locator'
PUBLIC	??_R3DivisionByZeroException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DivisionByZeroException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DivisionByZeroException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DivisionByZeroException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DivisionByZeroException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DivisionByZeroException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ArithmeticException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArithmeticException::`RTTI Complete Object Locator'
PUBLIC	??_R3ArithmeticException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArithmeticException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ArithmeticException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArithmeticException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ArithmeticException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArithmeticException::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_EException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::Exception::`vector deleting destructor'
EXTRN	??_EArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::`vector deleting destructor'
EXTRN	??_EDivisionByZeroException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::DivisionByZeroException::`vector deleting destructor'
EXTRN	??_EArithmeticException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::ArithmeticException::`vector deleting destructor'
EXTRN	?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z:PROC ; Palmtree::Math::Core::Internal::CommitNumber
EXTRN	?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z:PROC ; Palmtree::Math::Core::Internal::CheckNumber
EXTRN	?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z:PROC ; Palmtree::Math::Core::Internal::DuplicateNumber
EXTRN	?Multiply_X_X_Imp@Internal@Core@Math@Palmtree@@YAXPAII0I0@Z:PROC ; Palmtree::Math::Core::Internal::Multiply_X_X_Imp
EXTRN	?DivRem_X_X@Internal@Core@Math@Palmtree@@YAXPAII0I000@Z:PROC ; Palmtree::Math::Core::Internal::DivRem_X_X
EXTRN	?Compare_Imp@Internal@Core@Math@Palmtree@@YAHPAI0I@Z:PROC ; Palmtree::Math::Core::Internal::Compare_Imp
EXTRN	??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
EXTRN	??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
EXTRN	?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAII@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
EXTRN	?ClearBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ClearBlock
EXTRN	?DeallocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateBlock
EXTRN	?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock
EXTRN	?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
EXTRN	?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber
EXTRN	?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber
EXTRN	?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A:BYTE ; Palmtree::Math::Core::Internal::number_zero
EXTRN	?number_one@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A:BYTE ; Palmtree::Math::Core::Internal::number_one
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@ArithmeticException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ArithmeticException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVArithmeticException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArithmeticException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ArithmeticException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2ArithmeticException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2ArithmeticException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@ArithmeticException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArithmeticException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ArithmeticException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3ArithmeticException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::ArithmeticException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ArithmeticException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4ArithmeticException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4ArithmeticException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::ArithmeticException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVArithmeticException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3ArithmeticException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@DivisionByZeroException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DivisionByZeroException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::DivisionByZeroException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DivisionByZeroException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2DivisionByZeroException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2DivisionByZeroException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@DivisionByZeroException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::DivisionByZeroException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3DivisionByZeroException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3DivisionByZeroException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::DivisionByZeroException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2DivisionByZeroException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::DivisionByZeroException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3DivisionByZeroException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EN@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EN@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,77)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	04dH
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2Exception@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3Exception@Internal@Core@Math@Palmtree@@8 DD 00H	; Palmtree::Math::Core::Internal::Exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4Exception@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4Exception@Internal@Core@Math@Palmtree@@6B@ DD 00H	; Palmtree::Math::Core::Internal::Exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVArgumentNullException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	FLAT:__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
	DD	FLAT:__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	ENDS
;	COMDAT __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	FLAT:??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVArithmeticException@Internal@Core@Math@Palmtree@@@8??0ArithmeticException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVArithmeticException@Internal@Core@Math@Palmtree@@@8??0ArithmeticException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVArithmeticException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0ArithmeticException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVArithmeticException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVArithmeticException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::ArithmeticException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVArithmeticException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVArithmeticException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__CTA2?AVArithmeticException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	FLAT:__CT??_R0?AVArithmeticException@Internal@Core@Math@Palmtree@@@8??0ArithmeticException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
	DD	FLAT:__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	ENDS
;	COMDAT __TI2?AVArithmeticException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__TI2?AVArithmeticException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	FLAT:??1ArithmeticException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVArithmeticException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@@8??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@@8??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::DivisionByZeroException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDivisionByZeroException@Internal@Core@Math@Palmtree@'
	DB	'@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__CTA2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	FLAT:__CT??_R0?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@@8??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
	DD	FLAT:__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	ENDS
;	COMDAT __TI2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__TI2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	FLAT:??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::Exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT ??_7ArithmeticException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7ArithmeticException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4ArithmeticException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArithmeticException::`vftable'
	DD	FLAT:??_EArithmeticException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::DivisionByZeroException::`vftable'
	DD	FLAT:??_EDivisionByZeroException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`vftable'
	DD	FLAT:??_EArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7Exception@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7Exception@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4Exception@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::Exception::`vftable'
	DD	FLAT:??_EException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$?ModulePower@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@00@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ModulePower@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@00@Z$0
__unwindtable$?Remainder@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Remainder@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z$0
__unwindtable$?PMC_ModPow_X_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@00@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_ModPow_X_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@00@Z$0
__ehfuncinfo$?ModulePower@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@00@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ModulePower@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@00@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?Remainder@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Remainder@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PMC_ModPow_X_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@00@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_ModPow_X_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@00@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ArithmeticException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArithmeticException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0ArithmeticException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ArithmeticException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ArithmeticException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ArithmeticException@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1ArithmeticException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1ArithmeticException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ArithmeticException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArithmeticException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$0
__ehfuncinfo$??0ArithmeticException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ArithmeticException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$0
__ehfuncinfo$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0
__ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z$0
__ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z$0
__ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1exception@std@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0exception@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.cpp
_TEXT	SEGMENT
$T1 = -72						; size = 24
$T2 = -48						; size = 24
$T3 = -24						; size = 24
_v$ = 8							; size = 4
_e$ = 12						; size = 4
_m$ = 16						; size = 4
?PMC_ModPow_X_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@00@Z PROC ; Palmtree::Math::Core::Internal::PMC_ModPow_X_X_X_Imp

; 273  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	57		 push	 edi
  00007	8d 7d b8	 lea	 edi, DWORD PTR [ebp-72]
  0000a	b9 12 00 00 00	 mov	 ecx, 18			; 00000012H
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET __4CB7CE93_pmc_modpow@cpp
  0001b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 274  :         //Lock lock_obj;
; 275  :         if (m->IS_ZERO)

  00020	8b 45 10	 mov	 eax, DWORD PTR _m$[ebp]
  00023	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00026	83 e1 01	 and	 ecx, 1
  00029	74 20		 je	 SHORT $LN2@PMC_ModPow

; 276  :         {
; 277  :             // m が 0 の場合
; 278  : 
; 279  :             // 0 による除算は許されないのでエラーを通知する
; 280  :             throw DivisionByZeroException(L"0による除算が行われようとしました。");

  0002b	68 00 00 00 00	 push	 OFFSET $SG117994
  00030	8d 4d e8	 lea	 ecx, DWORD PTR $T3[ebp]
  00033	e8 00 00 00 00	 call	 ??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException
  00038	68 00 00 00 00	 push	 OFFSET __TI2?AVDivisionByZeroException@Internal@Core@Math@Palmtree@@
  0003d	8d 55 e8	 lea	 edx, DWORD PTR $T3[ebp]
  00040	52		 push	 edx
  00041	e8 00 00 00 00	 call	 __CxxThrowException@8
  00046	e9 f6 00 00 00	 jmp	 $LN20@PMC_ModPow
$LN2@PMC_ModPow:

; 281  :         }
; 282  :         else if (m->IS_ONE)

  0004b	8b 45 10	 mov	 eax, DWORD PTR _m$[ebp]
  0004e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00051	d1 e9		 shr	 ecx, 1
  00053	83 e1 01	 and	 ecx, 1
  00056	74 4e		 je	 SHORT $LN4@PMC_ModPow

; 283  :         {
; 284  :             // m が 1 の場合
; 285  :             if (v->IS_ZERO)

  00058	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  0005b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0005e	83 e0 01	 and	 eax, 1
  00061	74 34		 je	 SHORT $LN6@PMC_ModPow

; 286  :             {
; 287  :                 // v が 0 の場合
; 288  :                 if (e->IS_ZERO)

  00063	8b 4d 0c	 mov	 ecx, DWORD PTR _e$[ebp]
  00066	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00069	83 e2 01	 and	 edx, 1
  0006c	74 1d		 je	 SHORT $LN8@PMC_ModPow

; 289  :                 {
; 290  :                     // e が 0 の場合
; 291  : 
; 292  :                     // 0 の 0 乗となるので、エラーを返す
; 293  :                     throw ArithmeticException(L"0の0乗の値は未定義です。");

  0006e	68 00 00 00 00	 push	 OFFSET $SG118006
  00073	8d 4d d0	 lea	 ecx, DWORD PTR $T2[ebp]
  00076	e8 00 00 00 00	 call	 ??0ArithmeticException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::ArithmeticException::ArithmeticException
  0007b	68 00 00 00 00	 push	 OFFSET __TI2?AVArithmeticException@Internal@Core@Math@Palmtree@@
  00080	8d 45 d0	 lea	 eax, DWORD PTR $T2[ebp]
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 __CxxThrowException@8

; 294  :                 }
; 295  :                 else

  00089	eb 0a		 jmp	 SHORT $LN9@PMC_ModPow
$LN8@PMC_ModPow:

; 296  :                 {
; 297  :                     // e が 0 ではない場合
; 298  : 
; 299  :                     // v の e 乗がどんな値であっても 1 では必ず割り切れるので剰余は 0 となる。
; 300  :                     return (&number_zero);

  0008b	b8 00 00 00 00	 mov	 eax, OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  00090	e9 ac 00 00 00	 jmp	 $LN20@PMC_ModPow
$LN9@PMC_ModPow:

; 301  :                 }
; 302  :             }
; 303  :             else

  00095	eb 0a		 jmp	 SHORT $LN7@PMC_ModPow
$LN6@PMC_ModPow:

; 304  :             {
; 305  :                 // v が 0 ではない場合
; 306  : 
; 307  :                 // v の e 乗がどんな値であっても 1 では必ず割り切れるので剰余は 0 となる。
; 308  :                 return (&number_zero);

  00097	b8 00 00 00 00	 mov	 eax, OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  0009c	e9 a0 00 00 00	 jmp	 $LN20@PMC_ModPow
$LN7@PMC_ModPow:

; 309  :             }
; 310  :         }
; 311  :         else

  000a1	e9 9b 00 00 00	 jmp	 $LN20@PMC_ModPow
$LN4@PMC_ModPow:

; 312  :         {
; 313  :             // m が 2 以上の場合
; 314  :             if (v->IS_ZERO)

  000a6	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  000a9	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000ac	83 e2 01	 and	 edx, 1
  000af	74 31		 je	 SHORT $LN10@PMC_ModPow

; 315  :             {
; 316  :                 // v が 0 の場合
; 317  :                 if (e->IS_ZERO)

  000b1	8b 45 0c	 mov	 eax, DWORD PTR _e$[ebp]
  000b4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000b7	83 e1 01	 and	 ecx, 1
  000ba	74 1d		 je	 SHORT $LN12@PMC_ModPow

; 318  :                 {
; 319  :                     // e が 0 の場合
; 320  : 
; 321  :                     // 0 の 0 乗となるので、エラーを返す
; 322  :                     throw ArithmeticException(L"0の0乗の値は未定義です。");

  000bc	68 00 00 00 00	 push	 OFFSET $SG118012
  000c1	8d 4d b8	 lea	 ecx, DWORD PTR $T1[ebp]
  000c4	e8 00 00 00 00	 call	 ??0ArithmeticException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::ArithmeticException::ArithmeticException
  000c9	68 00 00 00 00	 push	 OFFSET __TI2?AVArithmeticException@Internal@Core@Math@Palmtree@@
  000ce	8d 55 b8	 lea	 edx, DWORD PTR $T1[ebp]
  000d1	52		 push	 edx
  000d2	e8 00 00 00 00	 call	 __CxxThrowException@8

; 323  :                 }
; 324  :                 else

  000d7	eb 07		 jmp	 SHORT $LN13@PMC_ModPow
$LN12@PMC_ModPow:

; 325  :                 {
; 326  :                     // e が 0 ではない場合
; 327  : 
; 328  :                     return (&number_zero);

  000d9	b8 00 00 00 00	 mov	 eax, OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  000de	eb 61		 jmp	 SHORT $LN20@PMC_ModPow
$LN13@PMC_ModPow:

; 329  :                 }

  000e0	eb 5f		 jmp	 SHORT $LN20@PMC_ModPow
$LN10@PMC_ModPow:

; 330  :             }
; 331  :             else if (v->IS_ONE)

  000e2	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  000e5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000e8	d1 e9		 shr	 ecx, 1
  000ea	83 e1 01	 and	 ecx, 1
  000ed	74 09		 je	 SHORT $LN14@PMC_ModPow

; 332  :             {
; 333  :                 // v が 1 の場合
; 334  : 
; 335  :                 // 1 を何乗しても 1 であり、1 を 2 以上の数で割ればその剰余は必ず 1 となる
; 336  :                 return (&number_one);

  000ef	b8 00 00 00 00	 mov	 eax, OFFSET ?number_one@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_one
  000f4	eb 4b		 jmp	 SHORT $LN20@PMC_ModPow

; 337  :             }
; 338  :             else

  000f6	eb 49		 jmp	 SHORT $LN20@PMC_ModPow
$LN14@PMC_ModPow:

; 339  :             {
; 340  :                 // v が 2 以上の場合
; 341  :                 if (e->IS_ZERO)

  000f8	8b 55 0c	 mov	 edx, DWORD PTR _e$[ebp]
  000fb	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000fe	83 e0 01	 and	 eax, 1
  00101	74 09		 je	 SHORT $LN16@PMC_ModPow

; 342  :                 {
; 343  :                     // e が 0 の場合
; 344  :                     return (&number_one);

  00103	b8 00 00 00 00	 mov	 eax, OFFSET ?number_one@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_one
  00108	eb 37		 jmp	 SHORT $LN20@PMC_ModPow
  0010a	eb 35		 jmp	 SHORT $LN20@PMC_ModPow
$LN16@PMC_ModPow:

; 345  :                 }
; 346  :                 else if (e->IS_ONE)

  0010c	8b 4d 0c	 mov	 ecx, DWORD PTR _e$[ebp]
  0010f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00112	d1 ea		 shr	 edx, 1
  00114	83 e2 01	 and	 edx, 1
  00117	74 14		 je	 SHORT $LN18@PMC_ModPow

; 347  :                 {
; 348  :                     // e が 1 の場合
; 349  : 
; 350  :                     // v % m を計算して返す
; 351  :                     return (Remainder(v, m));

  00119	8b 45 10	 mov	 eax, DWORD PTR _m$[ebp]
  0011c	50		 push	 eax
  0011d	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00120	51		 push	 ecx
  00121	e8 00 00 00 00	 call	 ?Remainder@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z ; Palmtree::Math::Core::Internal::Remainder
  00126	83 c4 08	 add	 esp, 8
  00129	eb 16		 jmp	 SHORT $LN20@PMC_ModPow

; 352  :                 }
; 353  :                 else

  0012b	eb 14		 jmp	 SHORT $LN20@PMC_ModPow
$LN18@PMC_ModPow:

; 354  :                 {
; 355  :                     // v、e、m がすべて 2 以上である場合
; 356  :                     // v の e 乗 の m による剰余を計算して返す
; 357  :                     return (ModulePower(v, e, m));

  0012d	8b 55 10	 mov	 edx, DWORD PTR _m$[ebp]
  00130	52		 push	 edx
  00131	8b 45 0c	 mov	 eax, DWORD PTR _e$[ebp]
  00134	50		 push	 eax
  00135	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00138	51		 push	 ecx
  00139	e8 00 00 00 00	 call	 ?ModulePower@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@00@Z ; Palmtree::Math::Core::Internal::ModulePower
  0013e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN20@PMC_ModPow:

; 358  :                 }
; 359  :             }
; 360  :         }
; 361  :     }

  00141	5f		 pop	 edi
  00142	83 c4 48	 add	 esp, 72			; 00000048H
  00145	3b ec		 cmp	 ebp, esp
  00147	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0014c	8b e5		 mov	 esp, ebp
  0014e	5d		 pop	 ebp
  0014f	c3		 ret	 0
?PMC_ModPow_X_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@00@Z ENDP ; Palmtree::Math::Core::Internal::PMC_ModPow_X_X_X_Imp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.cpp
_TEXT	SEGMENT
$T2 = -152						; size = 4
$T3 = -148						; size = 4
$T4 = -144						; size = 4
$T5 = -140						; size = 4
$T6 = -136						; size = 4
_u_count$ = -132					; size = 4
_w_ptr$ = -124						; size = 4
_v_ptr$ = -116						; size = 4
_u_ptr$ = -108						; size = 4
_e_mask$ = -100						; size = 4
_e_count$ = -96						; size = 4
_cmp$ = -92						; size = 4
_v_count$ = -88						; size = 4
_r$ = -84						; size = 4
_r_bit_count$ = -80					; size = 4
_work_v_buf$ = -76					; size = 4
_work_v_bit_count$ = -72				; size = 4
_work_2_buf$ = -68					; size = 4
_work_2_bit_count$ = -64				; size = 4
_work_1_buf$ = -60					; size = 4
_work_1_bit_count$ = -56				; size = 4
_v_2_buf$ = -52						; size = 4
_v_2_bit_count$ = -48					; size = 4
_m_count$ = -44						; size = 4
_m_buf$ = -40						; size = 4
_root$ = -32						; size = 16
__$EHRec$ = -12						; size = 12
_v$ = 8							; size = 4
_e$ = 12						; size = 4
_m$ = 16						; size = 4
?ModulePower@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@00@Z PROC ; Palmtree::Math::Core::Internal::ModulePower

; 90   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ModulePower@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@00@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00017	57		 push	 edi
  00018	8d bd 68 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-152]
  0001e	b9 23 00 00 00	 mov	 ecx, 35			; 00000023H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002f	33 c5		 xor	 eax, ebp
  00031	50		 push	 eax
  00032	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00035	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003b	b9 00 00 00 00	 mov	 ecx, OFFSET __4CB7CE93_pmc_modpow@cpp
  00040	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 91   :         //Lock lock_obj;
; 92   :         ResourceHolderUINT root;

  00045	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00048	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  0004d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 93   : 
; 94   :         __UNIT_TYPE* m_buf = m->BLOCK;

  00054	8b 45 10	 mov	 eax, DWORD PTR _m$[ebp]
  00057	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0005a	89 4d d8	 mov	 DWORD PTR _m_buf$[ebp], ecx

; 95   :         __UNIT_TYPE m_count = m->UNIT_WORD_COUNT;

  0005d	8b 55 10	 mov	 edx, DWORD PTR _m$[ebp]
  00060	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00063	89 45 d4	 mov	 DWORD PTR _m_count$[ebp], eax

; 96   : 
; 97   :         // 作業域を獲得する
; 98   : 
; 99   :         __UNIT_TYPE v_2_bit_count = v->UNIT_WORD_COUNT * __UNIT_TYPE_BIT_COUNT + __UNIT_TYPE_BIT_COUNT;

  00066	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00069	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0006c	c1 e2 05	 shl	 edx, 5
  0006f	83 c2 20	 add	 edx, 32			; 00000020H
  00072	89 55 d0	 mov	 DWORD PTR _v_2_bit_count$[ebp], edx

; 100  :         __UNIT_TYPE* v_2_buf = root.AllocateBlock(v_2_bit_count);

  00075	8b 45 d0	 mov	 eax, DWORD PTR _v_2_bit_count$[ebp]
  00078	50		 push	 eax
  00079	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  0007c	e8 00 00 00 00	 call	 ?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAII@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
  00081	89 45 cc	 mov	 DWORD PTR _v_2_buf$[ebp], eax

; 101  :         __UNIT_TYPE work_1_bit_count = m_count * 2 * __UNIT_TYPE_BIT_COUNT + __UNIT_TYPE_BIT_COUNT;

  00084	8b 4d d4	 mov	 ecx, DWORD PTR _m_count$[ebp]
  00087	d1 e1		 shl	 ecx, 1
  00089	c1 e1 05	 shl	 ecx, 5
  0008c	83 c1 20	 add	 ecx, 32			; 00000020H
  0008f	89 4d c8	 mov	 DWORD PTR _work_1_bit_count$[ebp], ecx

; 102  :         __UNIT_TYPE* work_1_buf = root.AllocateBlock(work_1_bit_count);

  00092	8b 55 c8	 mov	 edx, DWORD PTR _work_1_bit_count$[ebp]
  00095	52		 push	 edx
  00096	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00099	e8 00 00 00 00	 call	 ?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAII@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
  0009e	89 45 c4	 mov	 DWORD PTR _work_1_buf$[ebp], eax

; 103  :         __UNIT_TYPE work_2_bit_count = m_count * 2 * __UNIT_TYPE_BIT_COUNT + __UNIT_TYPE_BIT_COUNT;

  000a1	8b 45 d4	 mov	 eax, DWORD PTR _m_count$[ebp]
  000a4	d1 e0		 shl	 eax, 1
  000a6	c1 e0 05	 shl	 eax, 5
  000a9	83 c0 20	 add	 eax, 32			; 00000020H
  000ac	89 45 c0	 mov	 DWORD PTR _work_2_bit_count$[ebp], eax

; 104  :         __UNIT_TYPE* work_2_buf = root.AllocateBlock(work_2_bit_count);

  000af	8b 4d c0	 mov	 ecx, DWORD PTR _work_2_bit_count$[ebp]
  000b2	51		 push	 ecx
  000b3	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  000b6	e8 00 00 00 00	 call	 ?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAII@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
  000bb	89 45 bc	 mov	 DWORD PTR _work_2_buf$[ebp], eax

; 105  :         __UNIT_TYPE work_v_bit_count = m_count * __UNIT_TYPE_BIT_COUNT;

  000be	8b 55 d4	 mov	 edx, DWORD PTR _m_count$[ebp]
  000c1	c1 e2 05	 shl	 edx, 5
  000c4	89 55 b8	 mov	 DWORD PTR _work_v_bit_count$[ebp], edx

; 106  :         __UNIT_TYPE* work_v_buf = root.AllocateBlock(work_v_bit_count);

  000c7	8b 45 b8	 mov	 eax, DWORD PTR _work_v_bit_count$[ebp]
  000ca	50		 push	 eax
  000cb	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  000ce	e8 00 00 00 00	 call	 ?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAII@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
  000d3	89 45 b4	 mov	 DWORD PTR _work_v_buf$[ebp], eax

; 107  :         __UNIT_TYPE r_bit_count = m->UNIT_BIT_COUNT;

  000d6	8b 4d 10	 mov	 ecx, DWORD PTR _m$[ebp]
  000d9	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000dc	89 55 b0	 mov	 DWORD PTR _r_bit_count$[ebp], edx

; 108  :         NUMBER_HEADER* r = root.AllocateNumber(r_bit_count);

  000df	8b 45 b0	 mov	 eax, DWORD PTR _r_bit_count$[ebp]
  000e2	50		 push	 eax
  000e3	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  000e6	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  000eb	89 45 ac	 mov	 DWORD PTR _r$[ebp], eax

; 109  : 
; 110  :         __UNIT_TYPE v_count;
; 111  :         int cmp = Compare_Easy(v->BLOCK, v->UNIT_WORD_COUNT, m_buf, m_count);

  000ee	8b 4d d4	 mov	 ecx, DWORD PTR _m_count$[ebp]
  000f1	51		 push	 ecx
  000f2	8b 55 d8	 mov	 edx, DWORD PTR _m_buf$[ebp]
  000f5	52		 push	 edx
  000f6	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  000f9	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000fc	51		 push	 ecx
  000fd	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  00100	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 ?Compare_Easy@Internal@Core@Math@Palmtree@@YAHPAII0I@Z ; Palmtree::Math::Core::Internal::Compare_Easy
  00109	83 c4 10	 add	 esp, 16			; 00000010H
  0010c	89 45 a4	 mov	 DWORD PTR _cmp$[ebp], eax

; 112  :         if (cmp == 0)

  0010f	83 7d a4 00	 cmp	 DWORD PTR _cmp$[ebp], 0
  00113	75 29		 jne	 SHORT $LN10@ModulePowe

; 113  :         {
; 114  :             // v == m である場合
; 115  : 
; 116  :             // v を何乗してもその剰余は 0 であるため、0 を返す。
; 117  :             return (&number_zero);

  00115	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T6[ebp], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  0011f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00126	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00129	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0012e	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR $T6[ebp]
  00134	e9 a4 04 00 00	 jmp	 $LN1@ModulePowe
  00139	e9 bd 00 00 00	 jmp	 $LN11@ModulePowe
$LN10@ModulePowe:

; 118  :         }
; 119  :         else if (cmp > 0)

  0013e	83 7d a4 00	 cmp	 DWORD PTR _cmp$[ebp], 0
  00142	0f 8e 90 00 00
	00		 jle	 $LN12@ModulePowe

; 120  :         {
; 121  :             // v > m である場合
; 122  : 
; 123  :             // v2 を v % m に設定する。
; 124  : 
; 125  :             DivRem_X_X(v->BLOCK, v->UNIT_WORD_COUNT, m_buf, m_count, work_v_buf, nullptr, v_2_buf);

  00148	8b 4d cc	 mov	 ecx, DWORD PTR _v_2_buf$[ebp]
  0014b	51		 push	 ecx
  0014c	6a 00		 push	 0
  0014e	8b 55 b4	 mov	 edx, DWORD PTR _work_v_buf$[ebp]
  00151	52		 push	 edx
  00152	8b 45 d4	 mov	 eax, DWORD PTR _m_count$[ebp]
  00155	50		 push	 eax
  00156	8b 4d d8	 mov	 ecx, DWORD PTR _m_buf$[ebp]
  00159	51		 push	 ecx
  0015a	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  0015d	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00160	50		 push	 eax
  00161	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  00164	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00167	52		 push	 edx
  00168	e8 00 00 00 00	 call	 ?DivRem_X_X@Internal@Core@Math@Palmtree@@YAXPAII0I000@Z ; Palmtree::Math::Core::Internal::DivRem_X_X
  0016d	83 c4 1c	 add	 esp, 28			; 0000001cH

; 126  :             root.CheckBlock(work_v_buf);

  00170	8b 45 b4	 mov	 eax, DWORD PTR _work_v_buf$[ebp]
  00173	50		 push	 eax
  00174	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00177	e8 00 00 00 00	 call	 ?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock

; 127  :             root.CheckBlock(v_2_buf);

  0017c	8b 4d cc	 mov	 ecx, DWORD PTR _v_2_buf$[ebp]
  0017f	51		 push	 ecx
  00180	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00183	e8 00 00 00 00	 call	 ?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock

; 128  :             v_count = m_count;

  00188	8b 55 d4	 mov	 edx, DWORD PTR _m_count$[ebp]
  0018b	89 55 a8	 mov	 DWORD PTR _v_count$[ebp], edx
$LN2@ModulePowe:

; 129  :             while (v_count > 0 && v_2_buf[v_count - 1] == 0)

  0018e	83 7d a8 00	 cmp	 DWORD PTR _v_count$[ebp], 0
  00192	76 18		 jbe	 SHORT $LN3@ModulePowe
  00194	8b 45 a8	 mov	 eax, DWORD PTR _v_count$[ebp]
  00197	8b 4d cc	 mov	 ecx, DWORD PTR _v_2_buf$[ebp]
  0019a	83 7c 81 fc 00	 cmp	 DWORD PTR [ecx+eax*4-4], 0
  0019f	75 0b		 jne	 SHORT $LN3@ModulePowe

; 130  :                 --v_count;

  001a1	8b 55 a8	 mov	 edx, DWORD PTR _v_count$[ebp]
  001a4	83 ea 01	 sub	 edx, 1
  001a7	89 55 a8	 mov	 DWORD PTR _v_count$[ebp], edx
  001aa	eb e2		 jmp	 SHORT $LN2@ModulePowe
$LN3@ModulePowe:

; 131  : 
; 132  :             if (v_count <= 0)

  001ac	83 7d a8 00	 cmp	 DWORD PTR _v_count$[ebp], 0
  001b0	77 24		 ja	 SHORT $LN14@ModulePowe

; 133  :             {
; 134  :                 // v2 が 0 になってしまった場合はべき乗を繰り返しても 0 になることが確定なので 0 を返す
; 135  :                 return (&number_zero);

  001b2	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T5[ebp], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  001bc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001c3	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  001c6	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  001cb	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR $T5[ebp]
  001d1	e9 07 04 00 00	 jmp	 $LN1@ModulePowe
$LN14@ModulePowe:

; 136  :             }
; 137  :         }
; 138  :         else

  001d6	eb 23		 jmp	 SHORT $LN11@ModulePowe
$LN12@ModulePowe:

; 139  :         {
; 140  :             // v2 を v に設定する。
; 141  : 
; 142  :             _COPY_MEMORY_UNIT(v_2_buf, v->BLOCK, v->UNIT_WORD_COUNT);

  001d8	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  001db	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  001de	51		 push	 ecx
  001df	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  001e2	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  001e5	50		 push	 eax
  001e6	8b 4d cc	 mov	 ecx, DWORD PTR _v_2_buf$[ebp]
  001e9	51		 push	 ecx
  001ea	e8 00 00 00 00	 call	 __COPY_MEMORY_UNIT
  001ef	83 c4 0c	 add	 esp, 12			; 0000000cH

; 143  :             v_count = v->UNIT_WORD_COUNT;

  001f2	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  001f5	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  001f8	89 45 a8	 mov	 DWORD PTR _v_count$[ebp], eax
$LN11@ModulePowe:

; 144  :         }
; 145  : 
; 146  :         __UNIT_TYPE e_count = e->UNIT_WORD_COUNT;

  001fb	8b 4d 0c	 mov	 ecx, DWORD PTR _e$[ebp]
  001fe	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00201	89 55 a0	 mov	 DWORD PTR _e_count$[ebp], edx

; 147  :         __UNIT_TYPE e_mask = ~((__UNIT_TYPE)-1 >> 1);

  00204	c7 45 9c 00 00
	00 80		 mov	 DWORD PTR _e_mask$[ebp], -2147483648 ; 80000000H

; 148  :         e_mask = e_mask >> _LZCNT_ALT_UNIT(e->BLOCK[e_count - 1]);

  0020b	8b 45 0c	 mov	 eax, DWORD PTR _e$[ebp]
  0020e	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00211	8b 55 a0	 mov	 edx, DWORD PTR _e_count$[ebp]
  00214	8b 44 91 fc	 mov	 eax, DWORD PTR [ecx+edx*4-4]
  00218	50		 push	 eax
  00219	e8 00 00 00 00	 call	 __LZCNT_ALT_UNIT
  0021e	83 c4 04	 add	 esp, 4
  00221	8b 55 9c	 mov	 edx, DWORD PTR _e_mask$[ebp]
  00224	8b c8		 mov	 ecx, eax
  00226	d3 ea		 shr	 edx, cl
  00228	89 55 9c	 mov	 DWORD PTR _e_mask$[ebp], edx

; 149  :         // e_mask は e の最上位 bit を示しているはず
; 150  :         // かつ、e は 2以上であるので、同時に最下位 bit であることはあり得ない
; 151  :         _COPY_MEMORY_UNIT(work_1_buf, v_2_buf, m_count);

  0022b	8b 45 d4	 mov	 eax, DWORD PTR _m_count$[ebp]
  0022e	50		 push	 eax
  0022f	8b 4d cc	 mov	 ecx, DWORD PTR _v_2_buf$[ebp]
  00232	51		 push	 ecx
  00233	8b 55 c4	 mov	 edx, DWORD PTR _work_1_buf$[ebp]
  00236	52		 push	 edx
  00237	e8 00 00 00 00	 call	 __COPY_MEMORY_UNIT
  0023c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 152  : 
; 153  : #ifdef _DEBUG
; 154  :         if ((e_mask & e->BLOCK[e_count - 1]) == 0)

  0023f	8b 45 0c	 mov	 eax, DWORD PTR _e$[ebp]
  00242	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00245	8b 55 a0	 mov	 edx, DWORD PTR _e_count$[ebp]
  00248	8b 45 9c	 mov	 eax, DWORD PTR _e_mask$[ebp]
  0024b	23 44 91 fc	 and	 eax, DWORD PTR [ecx+edx*4-4]
  0024f	75 0a		 jne	 SHORT $LN15@ModulePowe

; 155  :             *((int*)0) = 0;

  00251	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ds:0, 0
$LN15@ModulePowe:

; 156  : #endif
; 157  : 
; 158  :         __UNIT_TYPE* u_ptr = work_1_buf;

  0025b	8b 4d c4	 mov	 ecx, DWORD PTR _work_1_buf$[ebp]
  0025e	89 4d 94	 mov	 DWORD PTR _u_ptr$[ebp], ecx

; 159  :         __UNIT_TYPE* v_ptr = v_2_buf;

  00261	8b 55 cc	 mov	 edx, DWORD PTR _v_2_buf$[ebp]
  00264	89 55 8c	 mov	 DWORD PTR _v_ptr$[ebp], edx

; 160  :         __UNIT_TYPE* w_ptr = work_2_buf;

  00267	8b 45 bc	 mov	 eax, DWORD PTR _work_2_buf$[ebp]
  0026a	89 45 84	 mov	 DWORD PTR _w_ptr$[ebp], eax

; 161  :         __UNIT_TYPE u_count = v_count;

  0026d	8b 4d a8	 mov	 ecx, DWORD PTR _v_count$[ebp]
  00270	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _u_count$[ebp], ecx
$LN4@ModulePowe:

; 162  : 
; 163  :         while (e_count > 0)

  00276	83 7d a0 00	 cmp	 DWORD PTR _e_count$[ebp], 0
  0027a	0f 86 01 03 00
	00		 jbe	 $LN5@ModulePowe

; 164  :         {
; 165  :             //Lock lock_obj;
; 166  : 
; 167  :             // 次の桁の準備をする
; 168  :             e_mask >>= 1;

  00280	8b 55 9c	 mov	 edx, DWORD PTR _e_mask$[ebp]
  00283	d1 ea		 shr	 edx, 1
  00285	89 55 9c	 mov	 DWORD PTR _e_mask$[ebp], edx

; 169  :             if (e_mask == 0)

  00288	75 10		 jne	 SHORT $LN16@ModulePowe

; 170  :             {
; 171  :                 e_mask = ~((__UNIT_TYPE)-1 >> 1);

  0028a	c7 45 9c 00 00
	00 80		 mov	 DWORD PTR _e_mask$[ebp], -2147483648 ; 80000000H

; 172  :                 --e_count;

  00291	8b 45 a0	 mov	 eax, DWORD PTR _e_count$[ebp]
  00294	83 e8 01	 sub	 eax, 1
  00297	89 45 a0	 mov	 DWORD PTR _e_count$[ebp], eax
$LN16@ModulePowe:

; 173  :             }
; 174  : 
; 175  :             if (e_count <= 0)

  0029a	83 7d a0 00	 cmp	 DWORD PTR _e_count$[ebp], 0
  0029e	77 05		 ja	 SHORT $LN17@ModulePowe

; 176  :                 break;

  002a0	e9 dc 02 00 00	 jmp	 $LN5@ModulePowe
$LN17@ModulePowe:

; 177  : 
; 178  :             // w := u * u を計算する
; 179  :             root.ClearBlock(w_ptr);

  002a5	8b 4d 84	 mov	 ecx, DWORD PTR _w_ptr$[ebp]
  002a8	51		 push	 ecx
  002a9	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  002ac	e8 00 00 00 00	 call	 ?ClearBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ClearBlock

; 180  :             {
; 181  :                 // ここの乗算をクリティカルセクションに含めることによりアクセス違反の頻度が大きく変わる模様
; 182  :                 //Lock lock_obj;
; 183  :                 Multiply_X_X_Imp(u_ptr, u_count, u_ptr, u_count, w_ptr);

  002b1	8b 55 84	 mov	 edx, DWORD PTR _w_ptr$[ebp]
  002b4	52		 push	 edx
  002b5	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _u_count$[ebp]
  002bb	50		 push	 eax
  002bc	8b 4d 94	 mov	 ecx, DWORD PTR _u_ptr$[ebp]
  002bf	51		 push	 ecx
  002c0	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _u_count$[ebp]
  002c6	52		 push	 edx
  002c7	8b 45 94	 mov	 eax, DWORD PTR _u_ptr$[ebp]
  002ca	50		 push	 eax
  002cb	e8 00 00 00 00	 call	 ?Multiply_X_X_Imp@Internal@Core@Math@Palmtree@@YAXPAII0I0@Z ; Palmtree::Math::Core::Internal::Multiply_X_X_Imp
  002d0	83 c4 14	 add	 esp, 20			; 00000014H

; 184  :             }
; 185  :             root.CheckBlock(work_1_buf);

  002d3	8b 4d c4	 mov	 ecx, DWORD PTR _work_1_buf$[ebp]
  002d6	51		 push	 ecx
  002d7	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  002da	e8 00 00 00 00	 call	 ?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock

; 186  :             root.CheckBlock(work_2_buf);

  002df	8b 55 bc	 mov	 edx, DWORD PTR _work_2_buf$[ebp]
  002e2	52		 push	 edx
  002e3	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  002e6	e8 00 00 00 00	 call	 ?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock

; 187  :             SwapPointer(&u_ptr, &w_ptr);

  002eb	8d 45 84	 lea	 eax, DWORD PTR _w_ptr$[ebp]
  002ee	50		 push	 eax
  002ef	8d 4d 94	 lea	 ecx, DWORD PTR _u_ptr$[ebp]
  002f2	51		 push	 ecx
  002f3	e8 00 00 00 00	 call	 ?SwapPointer@Internal@Core@Math@Palmtree@@YAXPAPAI0@Z ; Palmtree::Math::Core::Internal::SwapPointer
  002f8	83 c4 08	 add	 esp, 8

; 188  :             u_count *= 2;

  002fb	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _u_count$[ebp]
  00301	d1 e2		 shl	 edx, 1
  00303	89 95 7c ff ff
	ff		 mov	 DWORD PTR _u_count$[ebp], edx

; 189  :             if (u_ptr[u_count - 1] == 0)

  00309	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _u_count$[ebp]
  0030f	8b 4d 94	 mov	 ecx, DWORD PTR _u_ptr$[ebp]
  00312	83 7c 81 fc 00	 cmp	 DWORD PTR [ecx+eax*4-4], 0
  00317	75 0f		 jne	 SHORT $LN18@ModulePowe

; 190  :                 --u_count;

  00319	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _u_count$[ebp]
  0031f	83 ea 01	 sub	 edx, 1
  00322	89 95 7c ff ff
	ff		 mov	 DWORD PTR _u_count$[ebp], edx
$LN18@ModulePowe:

; 191  : 
; 192  :             // w := u % m を計算する
; 193  :             if (u_count >= m_count)

  00328	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _u_count$[ebp]
  0032e	3b 45 d4	 cmp	 eax, DWORD PTR _m_count$[ebp]
  00331	0f 82 d1 00 00
	00		 jb	 $LN19@ModulePowe

; 194  :             {
; 195  :                 //Lock lock_obj;
; 196  : 
; 197  :                 root.ClearBlock(work_v_buf);

  00337	8b 4d b4	 mov	 ecx, DWORD PTR _work_v_buf$[ebp]
  0033a	51		 push	 ecx
  0033b	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  0033e	e8 00 00 00 00	 call	 ?ClearBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ClearBlock

; 198  :                 root.ClearBlock(w_ptr);

  00343	8b 55 84	 mov	 edx, DWORD PTR _w_ptr$[ebp]
  00346	52		 push	 edx
  00347	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  0034a	e8 00 00 00 00	 call	 ?ClearBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ClearBlock

; 199  :                 DivRem_X_X(u_ptr, u_count, m_buf, m_count, work_v_buf, nullptr, w_ptr);

  0034f	8b 45 84	 mov	 eax, DWORD PTR _w_ptr$[ebp]
  00352	50		 push	 eax
  00353	6a 00		 push	 0
  00355	8b 4d b4	 mov	 ecx, DWORD PTR _work_v_buf$[ebp]
  00358	51		 push	 ecx
  00359	8b 55 d4	 mov	 edx, DWORD PTR _m_count$[ebp]
  0035c	52		 push	 edx
  0035d	8b 45 d8	 mov	 eax, DWORD PTR _m_buf$[ebp]
  00360	50		 push	 eax
  00361	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _u_count$[ebp]
  00367	51		 push	 ecx
  00368	8b 55 94	 mov	 edx, DWORD PTR _u_ptr$[ebp]
  0036b	52		 push	 edx
  0036c	e8 00 00 00 00	 call	 ?DivRem_X_X@Internal@Core@Math@Palmtree@@YAXPAII0I000@Z ; Palmtree::Math::Core::Internal::DivRem_X_X
  00371	83 c4 1c	 add	 esp, 28			; 0000001cH

; 200  :                 root.CheckBlock(work_v_buf);

  00374	8b 45 b4	 mov	 eax, DWORD PTR _work_v_buf$[ebp]
  00377	50		 push	 eax
  00378	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  0037b	e8 00 00 00 00	 call	 ?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock

; 201  :                 root.CheckBlock(work_1_buf);

  00380	8b 4d c4	 mov	 ecx, DWORD PTR _work_1_buf$[ebp]
  00383	51		 push	 ecx
  00384	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00387	e8 00 00 00 00	 call	 ?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock

; 202  :                 root.CheckBlock(work_2_buf);

  0038c	8b 55 bc	 mov	 edx, DWORD PTR _work_2_buf$[ebp]
  0038f	52		 push	 edx
  00390	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00393	e8 00 00 00 00	 call	 ?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock

; 203  :                 SwapPointer(&u_ptr, &w_ptr);

  00398	8d 45 84	 lea	 eax, DWORD PTR _w_ptr$[ebp]
  0039b	50		 push	 eax
  0039c	8d 4d 94	 lea	 ecx, DWORD PTR _u_ptr$[ebp]
  0039f	51		 push	 ecx
  003a0	e8 00 00 00 00	 call	 ?SwapPointer@Internal@Core@Math@Palmtree@@YAXPAPAI0@Z ; Palmtree::Math::Core::Internal::SwapPointer
  003a5	83 c4 08	 add	 esp, 8

; 204  :                 u_count = m_count;

  003a8	8b 55 d4	 mov	 edx, DWORD PTR _m_count$[ebp]
  003ab	89 95 7c ff ff
	ff		 mov	 DWORD PTR _u_count$[ebp], edx
$LN6@ModulePowe:

; 205  :                 while (u_count > 0 && u_ptr[u_count - 1] == 0)

  003b1	83 bd 7c ff ff
	ff 00		 cmp	 DWORD PTR _u_count$[ebp], 0
  003b8	76 21		 jbe	 SHORT $LN7@ModulePowe
  003ba	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _u_count$[ebp]
  003c0	8b 4d 94	 mov	 ecx, DWORD PTR _u_ptr$[ebp]
  003c3	83 7c 81 fc 00	 cmp	 DWORD PTR [ecx+eax*4-4], 0
  003c8	75 11		 jne	 SHORT $LN7@ModulePowe

; 206  :                     --u_count;

  003ca	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _u_count$[ebp]
  003d0	83 ea 01	 sub	 edx, 1
  003d3	89 95 7c ff ff
	ff		 mov	 DWORD PTR _u_count$[ebp], edx
  003d9	eb d6		 jmp	 SHORT $LN6@ModulePowe
$LN7@ModulePowe:

; 207  : 
; 208  :                 if (u_count <= 0)

  003db	83 bd 7c ff ff
	ff 00		 cmp	 DWORD PTR _u_count$[ebp], 0
  003e2	77 24		 ja	 SHORT $LN19@ModulePowe

; 209  :                 {
; 210  :                     // 剰余が 0 になった場合はこれ以上続行しても解が 0 以外にはならないので、処理を中断して 0 を返す
; 211  :                     return (&number_zero);

  003e4	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T4[ebp], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  003ee	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  003f5	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  003f8	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  003fd	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR $T4[ebp]
  00403	e9 d5 01 00 00	 jmp	 $LN1@ModulePowe
$LN19@ModulePowe:

; 212  :                 }
; 213  :             }
; 214  : 
; 215  :             if (e_mask & e->BLOCK[e_count - 1])

  00408	8b 45 0c	 mov	 eax, DWORD PTR _e$[ebp]
  0040b	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0040e	8b 55 a0	 mov	 edx, DWORD PTR _e_count$[ebp]
  00411	8b 45 9c	 mov	 eax, DWORD PTR _e_mask$[ebp]
  00414	23 44 91 fc	 and	 eax, DWORD PTR [ecx+edx*4-4]
  00418	0f 84 5e 01 00
	00		 je	 $LN21@ModulePowe

; 216  :             {
; 217  :                 // e の当該桁のビットが立っている場合
; 218  : 
; 219  :                 //Lock lock_obj;
; 220  : 
; 221  :                 // w := u * v を計算する
; 222  :                 root.ClearBlock(w_ptr);

  0041e	8b 4d 84	 mov	 ecx, DWORD PTR _w_ptr$[ebp]
  00421	51		 push	 ecx
  00422	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00425	e8 00 00 00 00	 call	 ?ClearBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ClearBlock

; 223  :                 {
; 224  :                     //Lock lock_obj;
; 225  :                     Multiply_X_X_Imp(u_ptr, u_count, v_ptr, v_count, w_ptr);

  0042a	8b 55 84	 mov	 edx, DWORD PTR _w_ptr$[ebp]
  0042d	52		 push	 edx
  0042e	8b 45 a8	 mov	 eax, DWORD PTR _v_count$[ebp]
  00431	50		 push	 eax
  00432	8b 4d 8c	 mov	 ecx, DWORD PTR _v_ptr$[ebp]
  00435	51		 push	 ecx
  00436	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _u_count$[ebp]
  0043c	52		 push	 edx
  0043d	8b 45 94	 mov	 eax, DWORD PTR _u_ptr$[ebp]
  00440	50		 push	 eax
  00441	e8 00 00 00 00	 call	 ?Multiply_X_X_Imp@Internal@Core@Math@Palmtree@@YAXPAII0I0@Z ; Palmtree::Math::Core::Internal::Multiply_X_X_Imp
  00446	83 c4 14	 add	 esp, 20			; 00000014H

; 226  :                 }
; 227  :                 root.CheckBlock(work_1_buf);

  00449	8b 4d c4	 mov	 ecx, DWORD PTR _work_1_buf$[ebp]
  0044c	51		 push	 ecx
  0044d	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00450	e8 00 00 00 00	 call	 ?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock

; 228  :                 root.CheckBlock(work_2_buf);

  00455	8b 55 bc	 mov	 edx, DWORD PTR _work_2_buf$[ebp]
  00458	52		 push	 edx
  00459	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  0045c	e8 00 00 00 00	 call	 ?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock

; 229  :                 SwapPointer(&u_ptr, &w_ptr);

  00461	8d 45 84	 lea	 eax, DWORD PTR _w_ptr$[ebp]
  00464	50		 push	 eax
  00465	8d 4d 94	 lea	 ecx, DWORD PTR _u_ptr$[ebp]
  00468	51		 push	 ecx
  00469	e8 00 00 00 00	 call	 ?SwapPointer@Internal@Core@Math@Palmtree@@YAXPAPAI0@Z ; Palmtree::Math::Core::Internal::SwapPointer
  0046e	83 c4 08	 add	 esp, 8

; 230  :                 u_count += v_count;

  00471	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _u_count$[ebp]
  00477	03 55 a8	 add	 edx, DWORD PTR _v_count$[ebp]
  0047a	89 95 7c ff ff
	ff		 mov	 DWORD PTR _u_count$[ebp], edx

; 231  :                 if (u_ptr[u_count - 1] == 0)

  00480	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _u_count$[ebp]
  00486	8b 4d 94	 mov	 ecx, DWORD PTR _u_ptr$[ebp]
  00489	83 7c 81 fc 00	 cmp	 DWORD PTR [ecx+eax*4-4], 0
  0048e	75 0f		 jne	 SHORT $LN22@ModulePowe

; 232  :                     --u_count;

  00490	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _u_count$[ebp]
  00496	83 ea 01	 sub	 edx, 1
  00499	89 95 7c ff ff
	ff		 mov	 DWORD PTR _u_count$[ebp], edx
$LN22@ModulePowe:

; 233  : 
; 234  :                 // w := u % m を計算する
; 235  :                 if (u_count >= m_count)

  0049f	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _u_count$[ebp]
  004a5	3b 45 d4	 cmp	 eax, DWORD PTR _m_count$[ebp]
  004a8	0f 82 ce 00 00
	00		 jb	 $LN21@ModulePowe

; 236  :                 {
; 237  :                     root.ClearBlock(work_v_buf);

  004ae	8b 4d b4	 mov	 ecx, DWORD PTR _work_v_buf$[ebp]
  004b1	51		 push	 ecx
  004b2	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  004b5	e8 00 00 00 00	 call	 ?ClearBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ClearBlock

; 238  :                     {
; 239  :                         // このClearBlockをクリティカルセクションに含めるかどうかでアクセス違反の頻度が大きく変わる
; 240  :                         //Lock lock_obj;
; 241  :                         root.ClearBlock(w_ptr);

  004ba	8b 55 84	 mov	 edx, DWORD PTR _w_ptr$[ebp]
  004bd	52		 push	 edx
  004be	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  004c1	e8 00 00 00 00	 call	 ?ClearBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ClearBlock

; 242  :                     }
; 243  :                     {
; 244  :                         // この除算をクリティカルセクションに含めるかどうかでアクセス違反の頻度が大きく変わる
; 245  :                         //Lock lock_obj;
; 246  :                         DivRem_X_X(u_ptr, u_count, m_buf, m_count, work_v_buf, nullptr, w_ptr);

  004c6	8b 45 84	 mov	 eax, DWORD PTR _w_ptr$[ebp]
  004c9	50		 push	 eax
  004ca	6a 00		 push	 0
  004cc	8b 4d b4	 mov	 ecx, DWORD PTR _work_v_buf$[ebp]
  004cf	51		 push	 ecx
  004d0	8b 55 d4	 mov	 edx, DWORD PTR _m_count$[ebp]
  004d3	52		 push	 edx
  004d4	8b 45 d8	 mov	 eax, DWORD PTR _m_buf$[ebp]
  004d7	50		 push	 eax
  004d8	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _u_count$[ebp]
  004de	51		 push	 ecx
  004df	8b 55 94	 mov	 edx, DWORD PTR _u_ptr$[ebp]
  004e2	52		 push	 edx
  004e3	e8 00 00 00 00	 call	 ?DivRem_X_X@Internal@Core@Math@Palmtree@@YAXPAII0I000@Z ; Palmtree::Math::Core::Internal::DivRem_X_X
  004e8	83 c4 1c	 add	 esp, 28			; 0000001cH

; 247  :                     }
; 248  :                     root.CheckBlock(work_v_buf);

  004eb	8b 45 b4	 mov	 eax, DWORD PTR _work_v_buf$[ebp]
  004ee	50		 push	 eax
  004ef	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  004f2	e8 00 00 00 00	 call	 ?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock

; 249  :                     root.CheckBlock(work_1_buf);

  004f7	8b 4d c4	 mov	 ecx, DWORD PTR _work_1_buf$[ebp]
  004fa	51		 push	 ecx
  004fb	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  004fe	e8 00 00 00 00	 call	 ?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock

; 250  :                     root.CheckBlock(work_2_buf);

  00503	8b 55 bc	 mov	 edx, DWORD PTR _work_2_buf$[ebp]
  00506	52		 push	 edx
  00507	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  0050a	e8 00 00 00 00	 call	 ?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock

; 251  :                     SwapPointer(&u_ptr, &w_ptr);

  0050f	8d 45 84	 lea	 eax, DWORD PTR _w_ptr$[ebp]
  00512	50		 push	 eax
  00513	8d 4d 94	 lea	 ecx, DWORD PTR _u_ptr$[ebp]
  00516	51		 push	 ecx
  00517	e8 00 00 00 00	 call	 ?SwapPointer@Internal@Core@Math@Palmtree@@YAXPAPAI0@Z ; Palmtree::Math::Core::Internal::SwapPointer
  0051c	83 c4 08	 add	 esp, 8

; 252  :                     u_count = m_count;

  0051f	8b 55 d4	 mov	 edx, DWORD PTR _m_count$[ebp]
  00522	89 95 7c ff ff
	ff		 mov	 DWORD PTR _u_count$[ebp], edx
$LN8@ModulePowe:

; 253  :                     while (u_count > 0 && u_ptr[u_count - 1] == 0)

  00528	83 bd 7c ff ff
	ff 00		 cmp	 DWORD PTR _u_count$[ebp], 0
  0052f	76 21		 jbe	 SHORT $LN9@ModulePowe
  00531	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _u_count$[ebp]
  00537	8b 4d 94	 mov	 ecx, DWORD PTR _u_ptr$[ebp]
  0053a	83 7c 81 fc 00	 cmp	 DWORD PTR [ecx+eax*4-4], 0
  0053f	75 11		 jne	 SHORT $LN9@ModulePowe

; 254  :                         --u_count;

  00541	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _u_count$[ebp]
  00547	83 ea 01	 sub	 edx, 1
  0054a	89 95 7c ff ff
	ff		 mov	 DWORD PTR _u_count$[ebp], edx
  00550	eb d6		 jmp	 SHORT $LN8@ModulePowe
$LN9@ModulePowe:

; 255  :                     if (u_count <= 0)

  00552	83 bd 7c ff ff
	ff 00		 cmp	 DWORD PTR _u_count$[ebp], 0
  00559	77 21		 ja	 SHORT $LN21@ModulePowe

; 256  :                     {
; 257  :                         // 剰余が 0 になった場合はこれ以上続行しても解が 0 以外にはならないので、処理を中断して 0 を返す
; 258  :                         return (&number_zero);

  0055b	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T3[ebp], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  00565	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0056c	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  0056f	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00574	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR $T3[ebp]
  0057a	eb 61		 jmp	 SHORT $LN1@ModulePowe
$LN21@ModulePowe:

; 259  :                     }
; 260  :                 }
; 261  :             }
; 262  :         }

  0057c	e9 f5 fc ff ff	 jmp	 $LN4@ModulePowe
$LN5@ModulePowe:

; 263  : 
; 264  :         // 最下位桁まで達したので u_ptr と u_count を解として帰る
; 265  :         _COPY_MEMORY_UNIT(r->BLOCK, u_ptr, u_count);

  00581	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _u_count$[ebp]
  00587	50		 push	 eax
  00588	8b 4d 94	 mov	 ecx, DWORD PTR _u_ptr$[ebp]
  0058b	51		 push	 ecx
  0058c	8b 55 ac	 mov	 edx, DWORD PTR _r$[ebp]
  0058f	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00592	50		 push	 eax
  00593	e8 00 00 00 00	 call	 __COPY_MEMORY_UNIT
  00598	83 c4 0c	 add	 esp, 12			; 0000000cH

; 266  :         root.CheckNumber(r);

  0059b	8b 4d ac	 mov	 ecx, DWORD PTR _r$[ebp]
  0059e	51		 push	 ecx
  0059f	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  005a2	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 267  :         CommitNumber(r);

  005a7	8b 55 ac	 mov	 edx, DWORD PTR _r$[ebp]
  005aa	52		 push	 edx
  005ab	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  005b0	83 c4 04	 add	 esp, 4

; 268  :         root.UnlinkNumber(r);

  005b3	8b 45 ac	 mov	 eax, DWORD PTR _r$[ebp]
  005b6	50		 push	 eax
  005b7	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  005ba	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 269  :         return (r);

  005bf	8b 4d ac	 mov	 ecx, DWORD PTR _r$[ebp]
  005c2	89 8d 68 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  005c8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  005cf	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  005d2	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  005d7	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
$LN1@ModulePowe:

; 270  :     }

  005dd	52		 push	 edx
  005de	8b cd		 mov	 ecx, ebp
  005e0	50		 push	 eax
  005e1	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN32@ModulePowe
  005e7	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  005ec	58		 pop	 eax
  005ed	5a		 pop	 edx
  005ee	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  005f1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  005f8	59		 pop	 ecx
  005f9	5f		 pop	 edi
  005fa	81 c4 98 00 00
	00		 add	 esp, 152		; 00000098H
  00600	3b ec		 cmp	 ebp, esp
  00602	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00607	8b e5		 mov	 esp, ebp
  00609	5d		 pop	 ebp
  0060a	c3		 ret	 0
  0060b	90		 npad	 1
$LN32@ModulePowe:
  0060c	03 00 00 00	 DD	 3
  00610	00 00 00 00	 DD	 $LN31@ModulePowe
$LN31@ModulePowe:
  00614	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00618	10 00 00 00	 DD	 16			; 00000010H
  0061c	00 00 00 00	 DD	 $LN27@ModulePowe
  00620	94 ff ff ff	 DD	 -108			; ffffff94H
  00624	04 00 00 00	 DD	 4
  00628	00 00 00 00	 DD	 $LN28@ModulePowe
  0062c	84 ff ff ff	 DD	 -124			; ffffff84H
  00630	04 00 00 00	 DD	 4
  00634	00 00 00 00	 DD	 $LN29@ModulePowe
$LN29@ModulePowe:
  00638	77		 DB	 119			; 00000077H
  00639	5f		 DB	 95			; 0000005fH
  0063a	70		 DB	 112			; 00000070H
  0063b	74		 DB	 116			; 00000074H
  0063c	72		 DB	 114			; 00000072H
  0063d	00		 DB	 0
$LN28@ModulePowe:
  0063e	75		 DB	 117			; 00000075H
  0063f	5f		 DB	 95			; 0000005fH
  00640	70		 DB	 112			; 00000070H
  00641	74		 DB	 116			; 00000074H
  00642	72		 DB	 114			; 00000072H
  00643	00		 DB	 0
$LN27@ModulePowe:
  00644	72		 DB	 114			; 00000072H
  00645	6f		 DB	 111			; 0000006fH
  00646	6f		 DB	 111			; 0000006fH
  00647	74		 DB	 116			; 00000074H
  00648	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ModulePower@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@00@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?ModulePower@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@00@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 6c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-148]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ModulePower@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@00@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ModulePower@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@00@Z ENDP ; Palmtree::Math::Core::Internal::ModulePower
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.cpp
_TEXT	SEGMENT
_code$ = 8						; size = 4
?exception_filter@Internal@Core@Math@Palmtree@@YAJK@Z PROC ; Palmtree::Math::Core::Internal::exception_filter

; 82   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __4CB7CE93_pmc_modpow@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 83   :         if (code == EXCEPTION_ACCESS_VIOLATION)

  0000d	81 7d 08 05 00
	00 c0		 cmp	 DWORD PTR _code$[ebp], -1073741819 ; c0000005H
  00014	75 09		 jne	 SHORT $LN2@exception_

; 84   :             return (EXCEPTION_EXECUTE_HANDLER);

  00016	b8 01 00 00 00	 mov	 eax, 1
  0001b	eb 04		 jmp	 SHORT $LN1@exception_

; 85   :         else

  0001d	eb 02		 jmp	 SHORT $LN1@exception_
$LN2@exception_:

; 86   :             return (EXCEPTION_CONTINUE_SEARCH);

  0001f	33 c0		 xor	 eax, eax
$LN1@exception_:

; 87   :     }

  00021	3b ec		 cmp	 ebp, esp
  00023	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?exception_filter@Internal@Core@Math@Palmtree@@YAJK@Z ENDP ; Palmtree::Math::Core::Internal::exception_filter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.cpp
_TEXT	SEGMENT
$T2 = -48						; size = 4
_r$3 = -44						; size = 4
_work_v_buf$4 = -40					; size = 4
_root$5 = -32						; size = 16
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 4
?Remainder@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z PROC ; Palmtree::Math::Core::Internal::Remainder

; 57   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Remainder@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 d0	 mov	 DWORD PTR [ebp-48], eax
  0001c	89 45 d4	 mov	 DWORD PTR [ebp-44], eax
  0001f	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  00022	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  00025	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00028	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0002b	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0002e	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00031	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00039	33 c5		 xor	 eax, ebp
  0003b	50		 push	 eax
  0003c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00045	b9 00 00 00 00	 mov	 ecx, OFFSET __4CB7CE93_pmc_modpow@cpp
  0004a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 58   :         //Lock lock_obj;
; 59   :         if (u->UNIT_BIT_COUNT < v->UNIT_BIT_COUNT)

  0004f	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00052	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  00055	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00058	3b 51 14	 cmp	 edx, DWORD PTR [ecx+20]
  0005b	73 16		 jae	 SHORT $LN2@Remainder

; 60   :             return (DuplicateNumber(u));

  0005d	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  00066	83 c4 04	 add	 esp, 4
  00069	e9 ed 00 00 00	 jmp	 $LN1@Remainder

; 61   :         else

  0006e	e9 e8 00 00 00	 jmp	 $LN1@Remainder
$LN2@Remainder:

; 62   :         {
; 63   :             ResourceHolderUINT root;

  00073	8d 4d e0	 lea	 ecx, DWORD PTR _root$5[ebp]
  00076	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  0007b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 64   :             __UNIT_TYPE* work_v_buf = root.AllocateBlock(v->UNIT_BIT_COUNT);

  00082	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  00085	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00088	52		 push	 edx
  00089	8d 4d e0	 lea	 ecx, DWORD PTR _root$5[ebp]
  0008c	e8 00 00 00 00	 call	 ?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAII@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
  00091	89 45 d8	 mov	 DWORD PTR _work_v_buf$4[ebp], eax

; 65   :             NUMBER_HEADER* r = root.AllocateNumber(u->UNIT_BIT_COUNT + __UNIT_TYPE_BIT_COUNT);

  00094	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00097	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0009a	83 c1 20	 add	 ecx, 32			; 00000020H
  0009d	51		 push	 ecx
  0009e	8d 4d e0	 lea	 ecx, DWORD PTR _root$5[ebp]
  000a1	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  000a6	89 45 d4	 mov	 DWORD PTR _r$3[ebp], eax

; 66   :             if (u->UNIT_WORD_COUNT < v->UNIT_WORD_COUNT)

  000a9	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  000ac	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  000af	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  000b2	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  000b5	73 1f		 jae	 SHORT $LN4@Remainder

; 67   :                 _COPY_MEMORY_UNIT(r->BLOCK, u->BLOCK, u->UNIT_WORD_COUNT);

  000b7	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  000ba	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000bd	50		 push	 eax
  000be	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  000c1	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  000c4	52		 push	 edx
  000c5	8b 45 d4	 mov	 eax, DWORD PTR _r$3[ebp]
  000c8	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  000cb	51		 push	 ecx
  000cc	e8 00 00 00 00	 call	 __COPY_MEMORY_UNIT
  000d1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 68   :             else

  000d4	eb 49		 jmp	 SHORT $LN5@Remainder
$LN4@Remainder:

; 69   :             {
; 70   :                 DivRem_X_X(u->BLOCK, u->UNIT_WORD_COUNT, v->BLOCK, v->UNIT_WORD_COUNT, work_v_buf, nullptr, r->BLOCK);

  000d6	8b 55 d4	 mov	 edx, DWORD PTR _r$3[ebp]
  000d9	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  000dc	50		 push	 eax
  000dd	6a 00		 push	 0
  000df	8b 4d d8	 mov	 ecx, DWORD PTR _work_v_buf$4[ebp]
  000e2	51		 push	 ecx
  000e3	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  000e6	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000e9	50		 push	 eax
  000ea	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  000ed	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  000f0	52		 push	 edx
  000f1	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  000f4	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000f7	51		 push	 ecx
  000f8	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  000fb	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  000fe	50		 push	 eax
  000ff	e8 00 00 00 00	 call	 ?DivRem_X_X@Internal@Core@Math@Palmtree@@YAXPAII0I000@Z ; Palmtree::Math::Core::Internal::DivRem_X_X
  00104	83 c4 1c	 add	 esp, 28			; 0000001cH

; 71   :                 root.CheckBlock(work_v_buf);

  00107	8b 4d d8	 mov	 ecx, DWORD PTR _work_v_buf$4[ebp]
  0010a	51		 push	 ecx
  0010b	8d 4d e0	 lea	 ecx, DWORD PTR _root$5[ebp]
  0010e	e8 00 00 00 00	 call	 ?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock

; 72   :                 root.CheckNumber(r);

  00113	8b 55 d4	 mov	 edx, DWORD PTR _r$3[ebp]
  00116	52		 push	 edx
  00117	8d 4d e0	 lea	 ecx, DWORD PTR _root$5[ebp]
  0011a	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber
$LN5@Remainder:

; 73   :             }
; 74   :             root.DeallocateBlock(work_v_buf);

  0011f	8b 45 d8	 mov	 eax, DWORD PTR _work_v_buf$4[ebp]
  00122	50		 push	 eax
  00123	8d 4d e0	 lea	 ecx, DWORD PTR _root$5[ebp]
  00126	e8 00 00 00 00	 call	 ?DeallocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateBlock

; 75   :             CommitNumber(r);

  0012b	8b 4d d4	 mov	 ecx, DWORD PTR _r$3[ebp]
  0012e	51		 push	 ecx
  0012f	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  00134	83 c4 04	 add	 esp, 4

; 76   :             root.UnlinkNumber(r);

  00137	8b 55 d4	 mov	 edx, DWORD PTR _r$3[ebp]
  0013a	52		 push	 edx
  0013b	8d 4d e0	 lea	 ecx, DWORD PTR _root$5[ebp]
  0013e	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 77   :             return (r);

  00143	8b 45 d4	 mov	 eax, DWORD PTR _r$3[ebp]
  00146	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
  00149	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00150	8d 4d e0	 lea	 ecx, DWORD PTR _root$5[ebp]
  00153	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00158	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]
$LN1@Remainder:

; 78   :         }
; 79   :     }

  0015b	52		 push	 edx
  0015c	8b cd		 mov	 ecx, ebp
  0015e	50		 push	 eax
  0015f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@Remainder
  00165	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0016a	58		 pop	 eax
  0016b	5a		 pop	 edx
  0016c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0016f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00176	59		 pop	 ecx
  00177	83 c4 30	 add	 esp, 48			; 00000030H
  0017a	3b ec		 cmp	 ebp, esp
  0017c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00181	8b e5		 mov	 esp, ebp
  00183	5d		 pop	 ebp
  00184	c3		 ret	 0
  00185	0f 1f 00	 npad	 3
$LN11@Remainder:
  00188	01 00 00 00	 DD	 1
  0018c	00 00 00 00	 DD	 $LN10@Remainder
$LN10@Remainder:
  00190	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00194	10 00 00 00	 DD	 16			; 00000010H
  00198	00 00 00 00	 DD	 $LN8@Remainder
$LN8@Remainder:
  0019c	72		 DB	 114			; 00000072H
  0019d	6f		 DB	 111			; 0000006fH
  0019e	6f		 DB	 111			; 0000006fH
  0019f	74		 DB	 116			; 00000074H
  001a0	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Remainder@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _root$5[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?Remainder@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Remainder@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Remainder@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z ENDP ; Palmtree::Math::Core::Internal::Remainder
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.cpp
_TEXT	SEGMENT
_t$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
?SwapPointer@Internal@Core@Math@Palmtree@@YAXPAPAI0@Z PROC ; Palmtree::Math::Core::Internal::SwapPointer

; 50   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET __4CB7CE93_pmc_modpow@cpp
  00010	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 51   :         __UNIT_TYPE* t = *u;

  00015	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	89 4d fc	 mov	 DWORD PTR _t$[ebp], ecx

; 52   :         *u = *v;

  0001d	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00020	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  00023	8b 08		 mov	 ecx, DWORD PTR [eax]
  00025	89 0a		 mov	 DWORD PTR [edx], ecx

; 53   :         *v = t;

  00027	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _t$[ebp]
  0002d	89 02		 mov	 DWORD PTR [edx], eax

; 54   :     }

  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
?SwapPointer@Internal@Core@Math@Palmtree@@YAXPAPAI0@Z ENDP ; Palmtree::Math::Core::Internal::SwapPointer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.cpp
_TEXT	SEGMENT
_u$ = 8							; size = 4
_u_count$ = 12						; size = 4
_v$ = 16						; size = 4
_v_count$ = 20						; size = 4
?Compare_Easy@Internal@Core@Math@Palmtree@@YAHPAII0I@Z PROC ; Palmtree::Math::Core::Internal::Compare_Easy

; 40   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __4CB7CE93_pmc_modpow@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 41   :         if (u_count > v_count)

  0000d	8b 45 0c	 mov	 eax, DWORD PTR _u_count$[ebp]
  00010	3b 45 14	 cmp	 eax, DWORD PTR _v_count$[ebp]
  00013	76 09		 jbe	 SHORT $LN2@Compare_Ea

; 42   :             return (1);

  00015	b8 01 00 00 00	 mov	 eax, 1
  0001a	eb 25		 jmp	 SHORT $LN1@Compare_Ea
  0001c	eb 23		 jmp	 SHORT $LN1@Compare_Ea
$LN2@Compare_Ea:

; 43   :         else if (u_count < v_count)

  0001e	8b 4d 0c	 mov	 ecx, DWORD PTR _u_count$[ebp]
  00021	3b 4d 14	 cmp	 ecx, DWORD PTR _v_count$[ebp]
  00024	73 07		 jae	 SHORT $LN4@Compare_Ea

; 44   :             return (-1);

  00026	83 c8 ff	 or	 eax, -1
  00029	eb 16		 jmp	 SHORT $LN1@Compare_Ea

; 45   :         else

  0002b	eb 14		 jmp	 SHORT $LN1@Compare_Ea
$LN4@Compare_Ea:

; 46   :             return (Compare_Imp(u, v, u_count));

  0002d	8b 55 0c	 mov	 edx, DWORD PTR _u_count$[ebp]
  00030	52		 push	 edx
  00031	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00034	50		 push	 eax
  00035	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  00038	51		 push	 ecx
  00039	e8 00 00 00 00	 call	 ?Compare_Imp@Internal@Core@Math@Palmtree@@YAHPAI0I@Z ; Palmtree::Math::Core::Internal::Compare_Imp
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@Compare_Ea:

; 47   :     }

  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
?Compare_Easy@Internal@Core@Math@Palmtree@@YAHPAII0I@Z ENDP ; Palmtree::Math::Core::Internal::Compare_Easy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT PROC

; 454  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 455  :             if (x == 0)

  00025	83 7d 08 00	 cmp	 DWORD PTR _x$[ebp], 0
  00029	75 07		 jne	 SHORT $LN2@LZCNT_ALT_

; 456  :                 return (sizeof(x) * 8);

  0002b	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00030	eb 0f		 jmp	 SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 457  : #ifdef _M_IX86
; 458  :             DWORD pos;
; 459  : #ifdef _MSC_VER
; 460  :             _BitScanReverse(&pos, x);

  00032	0f bd 45 08	 bsr	 eax, DWORD PTR _x$[ebp]
  00036	89 45 f8	 mov	 DWORD PTR _pos$[ebp], eax

; 461  : #elif defined(__GNUC__)
; 462  :             __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 463  : #else
; 464  : #error unknown compiler
; 465  : #endif
; 466  : #elif defined(_M_X64)
; 467  : #ifdef _MSC_VER
; 468  :             DWORD pos;
; 469  :             _BitScanReverse64(&pos, x);
; 470  : #elif defined(__GNUC__)
; 471  :             _UINT64_T pos;
; 472  :             __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 473  : #else
; 474  : #error unknown compiler
; 475  : #endif
; 476  : #else
; 477  : #error unknown platform
; 478  : #endif
; 479  :             return (sizeof(x) * 8 - 1 - pos);

  00039	b8 1f 00 00 00	 mov	 eax, 31			; 0000001fH
  0003e	2b 45 f8	 sub	 eax, DWORD PTR _pos$[ebp]
$LN1@LZCNT_ALT_:

; 480  :         }

  00041	52		 push	 edx
  00042	8b cd		 mov	 ecx, ebp
  00044	50		 push	 eax
  00045	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@LZCNT_ALT_
  0004b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00050	58		 pop	 eax
  00051	5a		 pop	 edx
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH
  00055	3b ec		 cmp	 ebp, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
$LN6@LZCNT_ALT_:
  00060	01 00 00 00	 DD	 1
  00064	00 00 00 00	 DD	 $LN5@LZCNT_ALT_
$LN5@LZCNT_ALT_:
  00068	f8 ff ff ff	 DD	 -8			; fffffff8H
  0006c	04 00 00 00	 DD	 4
  00070	00 00 00 00	 DD	 $LN4@LZCNT_ALT_
$LN4@LZCNT_ALT_:
  00074	70		 DB	 112			; 00000070H
  00075	6f		 DB	 111			; 0000006fH
  00076	73		 DB	 115			; 00000073H
  00077	00		 DB	 0
__LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT PROC

; 63   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  0000a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 64   : #ifdef _M_IX86
; 65   :             __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

  0000f	8b 7d 08	 mov	 edi, DWORD PTR _d$[ebp]
  00012	8b 75 0c	 mov	 esi, DWORD PTR _s$[ebp]
  00015	8b 4d 10	 mov	 ecx, DWORD PTR _count$[ebp]
  00018	f3 a5		 rep movsd

; 66   : #elif defined(_M_X64)
; 67   :             __movsq(d, s, count);
; 68   : #else
; 69   : #error unknown platform
; 70   : #endif
; 71   :         }

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
__COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.cpp
_TEXT	SEGMENT
$T2 = -116						; size = 4
$T3 = -112						; size = 24
$T4 = -88						; size = 24
$T5 = -64						; size = 24
_r$ = -40						; size = 4
_root$ = -32						; size = 16
__$EHRec$ = -12						; size = 12
_v$ = 8							; size = 4
_e$ = 12						; size = 4
_m$ = 16						; size = 4
?PMC_ModPow_X_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@00@Z PROC ; Palmtree::Math::Core::Internal::PMC_ModPow_X_X_X

; 364  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_ModPow_X_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@00@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	57		 push	 edi
  00015	8d 7d 8c	 lea	 edi, DWORD PTR [ebp-116]
  00018	b9 1a 00 00 00	 mov	 ecx, 26			; 0000001aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	50		 push	 eax
  0002c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET __4CB7CE93_pmc_modpow@cpp
  0003a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 365  :         //Lock lock_obj;
; 366  :         if (v == nullptr)

  0003f	83 7d 08 00	 cmp	 DWORD PTR _v$[ebp], 0
  00043	75 20		 jne	 SHORT $LN2@PMC_ModPow

; 367  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"v");

  00045	68 00 00 00 00	 push	 OFFSET $SG118042
  0004a	68 00 00 00 00	 push	 OFFSET $SG118043
  0004f	8d 4d c0	 lea	 ecx, DWORD PTR $T5[ebp]
  00052	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  00057	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  0005c	8d 45 c0	 lea	 eax, DWORD PTR $T5[ebp]
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@PMC_ModPow:

; 368  :         if (e == nullptr)

  00065	83 7d 0c 00	 cmp	 DWORD PTR _e$[ebp], 0
  00069	75 20		 jne	 SHORT $LN3@PMC_ModPow

; 369  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"e");

  0006b	68 00 00 00 00	 push	 OFFSET $SG118046
  00070	68 00 00 00 00	 push	 OFFSET $SG118047
  00075	8d 4d a8	 lea	 ecx, DWORD PTR $T4[ebp]
  00078	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0007d	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  00082	8d 4d a8	 lea	 ecx, DWORD PTR $T4[ebp]
  00085	51		 push	 ecx
  00086	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@PMC_ModPow:

; 370  :         if (m == nullptr)

  0008b	83 7d 10 00	 cmp	 DWORD PTR _m$[ebp], 0
  0008f	75 20		 jne	 SHORT $LN4@PMC_ModPow

; 371  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"m");

  00091	68 00 00 00 00	 push	 OFFSET $SG118050
  00096	68 00 00 00 00	 push	 OFFSET $SG118051
  0009b	8d 4d 90	 lea	 ecx, DWORD PTR $T3[ebp]
  0009e	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  000a3	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  000a8	8d 55 90	 lea	 edx, DWORD PTR $T3[ebp]
  000ab	52		 push	 edx
  000ac	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@PMC_ModPow:

; 372  :         CheckNumber((NUMBER_HEADER*)v);

  000b1	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  000b4	50		 push	 eax
  000b5	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  000ba	83 c4 04	 add	 esp, 4

; 373  :         CheckNumber((NUMBER_HEADER*)e);

  000bd	8b 4d 0c	 mov	 ecx, DWORD PTR _e$[ebp]
  000c0	51		 push	 ecx
  000c1	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  000c6	83 c4 04	 add	 esp, 4

; 374  :         CheckNumber((NUMBER_HEADER*)m);

  000c9	8b 55 10	 mov	 edx, DWORD PTR _m$[ebp]
  000cc	52		 push	 edx
  000cd	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  000d2	83 c4 04	 add	 esp, 4

; 375  :         ResourceHolderUINT root;

  000d5	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  000d8	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000dd	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 376  :         NUMBER_HEADER* r = PMC_ModPow_X_X_X_Imp((NUMBER_HEADER*)v, (NUMBER_HEADER*)e, (NUMBER_HEADER*)m);

  000e4	8b 45 10	 mov	 eax, DWORD PTR _m$[ebp]
  000e7	50		 push	 eax
  000e8	8b 4d 0c	 mov	 ecx, DWORD PTR _e$[ebp]
  000eb	51		 push	 ecx
  000ec	8b 55 08	 mov	 edx, DWORD PTR _v$[ebp]
  000ef	52		 push	 edx
  000f0	e8 00 00 00 00	 call	 ?PMC_ModPow_X_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@00@Z ; Palmtree::Math::Core::Internal::PMC_ModPow_X_X_X_Imp
  000f5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f8	89 45 d8	 mov	 DWORD PTR _r$[ebp], eax

; 377  :         root.HookNumber(r);

  000fb	8b 45 d8	 mov	 eax, DWORD PTR _r$[ebp]
  000fe	50		 push	 eax
  000ff	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00102	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 378  : #ifdef _DEBUG
; 379  :         CheckNumber(r);

  00107	8b 4d d8	 mov	 ecx, DWORD PTR _r$[ebp]
  0010a	51		 push	 ecx
  0010b	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  00110	83 c4 04	 add	 esp, 4

; 380  : #endif
; 381  :         root.UnlinkNumber(r);

  00113	8b 55 d8	 mov	 edx, DWORD PTR _r$[ebp]
  00116	52		 push	 edx
  00117	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  0011a	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 382  :         return ((PMC_HANDLE_UINT)r);

  0011f	8b 45 d8	 mov	 eax, DWORD PTR _r$[ebp]
  00122	89 45 8c	 mov	 DWORD PTR $T2[ebp], eax
  00125	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0012c	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  0012f	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00134	8b 45 8c	 mov	 eax, DWORD PTR $T2[ebp]
$LN5@PMC_ModPow:

; 383  :     }

  00137	52		 push	 edx
  00138	8b cd		 mov	 ecx, ebp
  0013a	50		 push	 eax
  0013b	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@PMC_ModPow
  00141	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00146	58		 pop	 eax
  00147	5a		 pop	 edx
  00148	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0014b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00152	59		 pop	 ecx
  00153	5f		 pop	 edi
  00154	83 c4 74	 add	 esp, 116		; 00000074H
  00157	3b ec		 cmp	 ebp, esp
  00159	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0015e	8b e5		 mov	 esp, ebp
  00160	5d		 pop	 ebp
  00161	c2 0c 00	 ret	 12			; 0000000cH
$LN10@PMC_ModPow:
  00164	01 00 00 00	 DD	 1
  00168	00 00 00 00	 DD	 $LN9@PMC_ModPow
$LN9@PMC_ModPow:
  0016c	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00170	10 00 00 00	 DD	 16			; 00000010H
  00174	00 00 00 00	 DD	 $LN7@PMC_ModPow
$LN7@PMC_ModPow:
  00178	72		 DB	 114			; 00000072H
  00179	6f		 DB	 111			; 0000006fH
  0017a	6f		 DB	 111			; 0000006fH
  0017b	74		 DB	 116			; 00000074H
  0017c	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_ModPow_X_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@00@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_ModPow_X_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@00@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a 90	 mov	 ecx, DWORD PTR [edx-112]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_ModPow_X_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@00@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_ModPow_X_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@00@Z ENDP ; Palmtree::Math::Core::Internal::PMC_ModPow_X_X_X
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_modpow.cpp
_TEXT	SEGMENT
_feature$ = 8						; size = 4
?Initialize_ModPow@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z PROC ; Palmtree::Math::Core::Internal::Initialize_ModPow

; 386  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __4CB7CE93_pmc_modpow@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 387  :         return (PMC_STATUS_OK);

  0000d	33 c0		 xor	 eax, eax

; 388  :     }

  0000f	3b ec		 cmp	 ebp, esp
  00011	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?Initialize_ModPow@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ENDP ; Palmtree::Math::Core::Internal::Initialize_ModPow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GArithmeticException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GArithmeticException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::ArithmeticException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1ArithmeticException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ArithmeticException::~ArithmeticException
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 18		 push	 24			; 00000018H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GArithmeticException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::ArithmeticException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0ArithmeticException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0ArithmeticException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::ArithmeticException::ArithmeticException, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ArithmeticException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00030	50		 push	 eax
  00031	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ArithmeticException@Internal@Core@Math@Palmtree@@6B@
  00049	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00050	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00053	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00056	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005d	59		 pop	 ecx
  0005e	83 c4 10	 add	 esp, 16			; 00000010H
  00061	3b ec		 cmp	 ebp, esp
  00063	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ArithmeticException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0ArithmeticException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ArithmeticException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ArithmeticException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::ArithmeticException::ArithmeticException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1ArithmeticException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ArithmeticException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::ArithmeticException::~ArithmeticException, COMDAT
; _this$ = ecx

; 200  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1ArithmeticException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ArithmeticException@Internal@Core@Math@Palmtree@@6B@
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 201  :         }

  00047	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ArithmeticException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??1ArithmeticException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ArithmeticException@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ArithmeticException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::ArithmeticException::~ArithmeticException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArithmeticException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
??0ArithmeticException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z PROC ; Palmtree::Math::Core::Internal::ArithmeticException::ArithmeticException, COMDAT
; _this$ = ecx

; 191  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ArithmeticException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 190  :             : Exception(PMC_STATUS_ARITHMETIC_ERROR, message)

  00037	8b 45 08	 mov	 eax, DWORD PTR _message$[ebp]
  0003a	50		 push	 eax
  0003b	6a fa		 push	 -6			; fffffffaH
  0003d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 191  :         {

  0004c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ArithmeticException@Internal@Core@Math@Palmtree@@6B@

; 192  :         }

  00055	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	83 c4 10	 add	 esp, 16			; 00000010H
  0006d	3b ec		 cmp	 ebp, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ArithmeticException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0ArithmeticException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ArithmeticException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ArithmeticException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ENDP ; Palmtree::Math::Core::Internal::ArithmeticException::ArithmeticException
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GDivisionByZeroException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDivisionByZeroException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::DivisionByZeroException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::DivisionByZeroException::~DivisionByZeroException
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 18		 push	 24			; 00000018H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GDivisionByZeroException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::DivisionByZeroException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::DivisionByZeroException::~DivisionByZeroException, COMDAT
; _this$ = ecx

; 181  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 182  :         }

  00047	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1DivisionByZeroException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::DivisionByZeroException::~DivisionByZeroException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException, COMDAT
; _this$ = ecx

; 177  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 176  :             : Exception(p)

  00037	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 177  :         {

  0004a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@

; 178  :         }

  00053	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00060	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00067	59		 pop	 ecx
  00068	83 c4 10	 add	 esp, 16			; 00000010H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z PROC ; Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException, COMDAT
; _this$ = ecx

; 172  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 171  :             : Exception(PMC_STATUS_DIVISION_BY_ZERO, message)

  00037	8b 45 08	 mov	 eax, DWORD PTR _message$[ebp]
  0003a	50		 push	 eax
  0003b	6a fb		 push	 -5			; fffffffbH
  0003d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 172  :         {

  0004c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7DivisionByZeroException@Internal@Core@Math@Palmtree@@6B@

; 173  :         }

  00055	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	83 c4 10	 add	 esp, 16			; 00000010H
  0006d	3b ec		 cmp	 ebp, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0DivisionByZeroException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ENDP ; Palmtree::Math::Core::Internal::DivisionByZeroException::DivisionByZeroException
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 18		 push	 24			; 00000018H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException, COMDAT
; _this$ = ecx

; 124  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 125  :         }

  00047	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException, COMDAT
; _this$ = ecx

; 120  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 119  :             : Exception(p)

  00037	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 120  :         {

  0004a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@

; 121  :         }

  00053	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00060	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00067	59		 pop	 ecx
  00068	83 c4 10	 add	 esp, 16			; 00000010H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
_param_name$ = 12					; size = 4
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException, COMDAT
; _this$ = ecx

; 115  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 114  :             : Exception(PMC_STATUS_ARGUMENT_NULL_ERROR, message, param_name)

  00037	8b 45 0c	 mov	 eax, DWORD PTR _param_name$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _message$[ebp]
  0003e	51		 push	 ecx
  0003f	6a fe		 push	 -2			; fffffffeH
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00049	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 115  :         {

  00050	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00053	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@

; 116  :         }

  00059	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00060	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00063	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00066	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006d	59		 pop	 ecx
  0006e	83 c4 10	 add	 esp, 16			; 00000010H
  00071	3b ec		 cmp	 ebp, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 18		 push	 24			; 00000018H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ PROC	; Palmtree::Math::Core::Internal::Exception::~Exception, COMDAT
; _this$ = ecx

; 70   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 71   :         }

  00047	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ENDP	; Palmtree::Math::Core::Internal::Exception::~Exception
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT
; _this$ = ecx

; 62   :         Exception(const Exception& p) noexcept(true)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00049	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 63   :         {
; 64   :             _code = p._code;

  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00055	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00058	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 65   :             _message = p._message;

  0005b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00061	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00064	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 66   :             _data = p._data;

  00067	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  0006d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00070	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 67   :         }

  00073	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0007a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0007d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00080	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00087	59		 pop	 ecx
  00088	83 c4 10	 add	 esp, 16			; 00000010H
  0008b	3b ec		 cmp	 ebp, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_code$ = 8						; size = 4
_message$ = 12						; size = 4
_data$ = 16						; size = 4
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT
; _this$ = ecx

; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00049	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 55   :         {
; 56   :             _code = code;

  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	8b 55 08	 mov	 edx, DWORD PTR _code$[ebp]
  00055	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 57   :             _message = message;

  00058	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	8b 4d 0c	 mov	 ecx, DWORD PTR _message$[ebp]
  0005e	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 58   :             _data = data;

  00061	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00064	8b 45 10	 mov	 eax, DWORD PTR _data$[ebp]
  00067	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 59   :         }

  0006a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00071	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00077	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007e	59		 pop	 ecx
  0007f	83 c4 10	 add	 esp, 16			; 00000010H
  00082	3b ec		 cmp	 ebp, esp
  00084	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_code$ = 8						; size = 4
_message$ = 12						; size = 4
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT
; _this$ = ecx

; 47   :         Exception(PMC_STATUS_CODE code, const wchar_t* message) noexcept(true)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00049	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 48   :         {
; 49   :             _code = code;

  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	8b 55 08	 mov	 edx, DWORD PTR _code$[ebp]
  00055	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 50   :             _message = message;

  00058	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	8b 4d 0c	 mov	 ecx, DWORD PTR _message$[ebp]
  0005e	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 51   :             _data = nullptr;

  00061	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00064	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0

; 52   :         }

  0006b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00072	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00075	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00078	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007f	59		 pop	 ecx
  00080	83 c4 10	 add	 esp, 16			; 00000010H
  00083	3b ec		 cmp	 ebp, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 90   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __9BB4E194_vcruntime_exception@h
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 91   :         return _Data._What ? _Data._What : "Unknown exception";

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00028	74 0b		 je	 SHORT $LN3@what
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00030	89 55 f8	 mov	 DWORD PTR tv69[ebp], edx
  00033	eb 07		 jmp	 SHORT $LN4@what
$LN3@what:
  00035	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
$LN4@what:
  0003c	8b 45 f8	 mov	 eax, DWORD PTR tv69[ebp]

; 92   :     }

  0003f	83 c4 08	 add	 esp, 8
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 85   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1exception@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __9BB4E194_vcruntime_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 86   :         __std_exception_destroy(&_Data);

  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	83 c1 04	 add	 ecx, 4
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 ___std_exception_destroy
  0004c	83 c4 04	 add	 esp, 4

; 87   :     }

  0004f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00052	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00059	59		 pop	 ecx
  0005a	83 c4 10	 add	 esp, 16			; 00000010H
  0005d	3b ec		 cmp	 ebp, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1exception@std@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1exception@std@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0exception@std@@QAE@XZ PROC				; std::exception::exception, COMDAT
; _this$ = ecx

; 50   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0exception@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __9BB4E194_vcruntime_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 49   :         : _Data()

  00040	33 c9		 xor	 ecx, ecx
  00042	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00045	83 c2 04	 add	 edx, 4
  00048	89 0a		 mov	 DWORD PTR [edx], ecx
  0004a	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 51   :     }

  0004d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	83 c4 10	 add	 esp, 16			; 00000010H
  0005e	3b ec		 cmp	 ebp, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0exception@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0exception@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0exception@std@@QAE@XZ ENDP				; std::exception::exception
END
