; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\TEST_op_Add.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__630249ED_pmc_uint_debug@h DB 01H
__2574342F_test_op_add@c DB 01H
msvcjmc	ENDS
PUBLIC	_TEST_PMC_Add_I_X
PUBLIC	_TEST_PMC_Add_L_X
PUBLIC	_TEST_PMC_Add_X_I
PUBLIC	_TEST_PMC_Add_X_L
PUBLIC	_TEST_PMC_Add_X_X
PUBLIC	__JustMyCode_Default
EXTRN	_TEST_Assert:PROC
EXTRN	_FormatTestLabel:PROC
EXTRN	_FormatTestMesssage:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
_DATA	SEGMENT
$SG94550 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A'
	DB	00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H
	DB	'0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG94551 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'A', 00H, 'd', 00H
	DB	'd', 00H, '_', 00H, 'I', 00H, '_', 00H, 'X', 00H, ' ', 00H, '('
	DB	00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H
	DB	00H, 00H
$SG94552 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'A', 00H, 'd', 00H
	DB	'd', 00H, '_', 00H, 'I', 00H, '_', 00H, 'X', 00H, 'n0', 0a9H, '_'
	DB	'0^', 0b3H, '0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH
	DB	090H, 08aH, '0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H
	DB	00H
	ORG $+2
$SG94553 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'A', 00H, 'd', 00H
	DB	'd', 00H, '_', 00H, 'I', 00H, '_', 00H, 'X', 00H, ' ', 00H, '('
	DB	00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H
	DB	00H, 00H
	ORG $+4
$SG94554 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'T', 00H, 'o', 00H
	DB	'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A', 00H, 'r', 00H, 'r'
	DB	00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H, '0', 0fcH, '0'
	DB	0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH, '0g0o0j0D'
	DB	'0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG94555 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'A', 00H, 'd', 00H
	DB	'd', 00H, '_', 00H, 'I', 00H, '_', 00H, 'X', 00H, ' ', 00H, '('
	DB	00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H
	DB	00H, 00H
$SG94556 DB	0c7H, '0', 0fcH, '0', 0bfH, '0n0', 085H, 'Q', 0b9H, '[L0', 00H
	DB	'N', 0f4H, 081H, 'W0j0D0', 00H, 00H
	ORG $+2
$SG94557 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'A', 00H, 'd', 00H
	DB	'd', 00H, '_', 00H, 'I', 00H, '_', 00H, 'X', 00H, ' ', 00H, '('
	DB	00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H
	DB	00H, 00H
	ORG $+4
$SG94584 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A'
	DB	00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H
	DB	'0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG94585 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'A', 00H, 'd', 00H
	DB	'd', 00H, '_', 00H, 'L', 00H, '_', 00H, 'X', 00H, ' ', 00H, '('
	DB	00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H
	DB	00H, 00H
$SG94586 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'A', 00H, 'd', 00H
	DB	'd', 00H, '_', 00H, 'L', 00H, '_', 00H, 'X', 00H, 'n0', 0a9H, '_'
	DB	'0^', 0b3H, '0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH
	DB	090H, 08aH, '0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H
	DB	00H
	ORG $+2
$SG94587 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'A', 00H, 'd', 00H
	DB	'd', 00H, '_', 00H, 'L', 00H, '_', 00H, 'X', 00H, ' ', 00H, '('
	DB	00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H
	DB	00H, 00H
	ORG $+4
$SG94588 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'T', 00H, 'o', 00H
	DB	'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A', 00H, 'r', 00H, 'r'
	DB	00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H, '0', 0fcH, '0'
	DB	0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH, '0g0o0j0D'
	DB	'0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG94589 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'A', 00H, 'd', 00H
	DB	'd', 00H, '_', 00H, 'L', 00H, '_', 00H, 'X', 00H, ' ', 00H, '('
	DB	00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H
	DB	00H, 00H
$SG94590 DB	0c7H, '0', 0fcH, '0', 0bfH, '0n0', 085H, 'Q', 0b9H, '[L0', 00H
	DB	'N', 0f4H, 081H, 'W0j0D0', 00H, 00H
	ORG $+2
$SG94591 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'A', 00H, 'd', 00H
	DB	'd', 00H, '_', 00H, 'L', 00H, '_', 00H, 'X', 00H, ' ', 00H, '('
	DB	00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H
	DB	00H, 00H
	ORG $+4
$SG94618 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A'
	DB	00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H
	DB	'0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG94619 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'A', 00H, 'd', 00H
	DB	'd', 00H, '_', 00H, 'X', 00H, '_', 00H, 'I', 00H, ' ', 00H, '('
	DB	00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H
	DB	00H, 00H
$SG94620 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'A', 00H, 'd', 00H
	DB	'd', 00H, '_', 00H, 'X', 00H, '_', 00H, 'I', 00H, 'n0', 0a9H, '_'
	DB	'0^', 0b3H, '0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH
	DB	090H, 08aH, '0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H
	DB	00H
	ORG $+2
$SG94621 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'A', 00H, 'd', 00H
	DB	'd', 00H, '_', 00H, 'X', 00H, '_', 00H, 'I', 00H, ' ', 00H, '('
	DB	00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H
	DB	00H, 00H
	ORG $+4
$SG94622 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'T', 00H, 'o', 00H
	DB	'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A', 00H, 'r', 00H, 'r'
	DB	00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H, '0', 0fcH, '0'
	DB	0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH, '0g0o0j0D'
	DB	'0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG94623 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'A', 00H, 'd', 00H
	DB	'd', 00H, '_', 00H, 'X', 00H, '_', 00H, 'I', 00H, ' ', 00H, '('
	DB	00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H
	DB	00H, 00H
$SG94624 DB	0c7H, '0', 0fcH, '0', 0bfH, '0n0', 085H, 'Q', 0b9H, '[L0', 00H
	DB	'N', 0f4H, 081H, 'W0j0D0', 00H, 00H
	ORG $+2
$SG94625 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'A', 00H, 'd', 00H
	DB	'd', 00H, '_', 00H, 'X', 00H, '_', 00H, 'I', 00H, ' ', 00H, '('
	DB	00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H
	DB	00H, 00H
	ORG $+4
$SG94652 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A'
	DB	00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H
	DB	'0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG94653 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'A', 00H, 'd', 00H
	DB	'd', 00H, '_', 00H, 'X', 00H, '_', 00H, 'L', 00H, ' ', 00H, '('
	DB	00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H
	DB	00H, 00H
$SG94654 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'A', 00H, 'd', 00H
	DB	'd', 00H, '_', 00H, 'X', 00H, '_', 00H, 'L', 00H, 'n0', 0a9H, '_'
	DB	'0^', 0b3H, '0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH
	DB	090H, 08aH, '0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H
	DB	00H
	ORG $+2
$SG94655 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'A', 00H, 'd', 00H
	DB	'd', 00H, '_', 00H, 'X', 00H, '_', 00H, 'L', 00H, ' ', 00H, '('
	DB	00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H
	DB	00H, 00H
	ORG $+4
$SG94656 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'T', 00H, 'o', 00H
	DB	'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A', 00H, 'r', 00H, 'r'
	DB	00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H, '0', 0fcH, '0'
	DB	0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH, '0g0o0j0D'
	DB	'0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG94657 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'A', 00H, 'd', 00H
	DB	'd', 00H, '_', 00H, 'X', 00H, '_', 00H, 'L', 00H, ' ', 00H, '('
	DB	00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H
	DB	00H, 00H
$SG94658 DB	0c7H, '0', 0fcH, '0', 0bfH, '0n0', 085H, 'Q', 0b9H, '[L0', 00H
	DB	'N', 0f4H, 081H, 'W0j0D0', 00H, 00H
	ORG $+2
$SG94659 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'A', 00H, 'd', 00H
	DB	'd', 00H, '_', 00H, 'X', 00H, '_', 00H, 'L', 00H, ' ', 00H, '('
	DB	00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H
	DB	00H, 00H
	ORG $+4
$SG94690 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A'
	DB	00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H
	DB	'0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG94691 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'A', 00H, 'd', 00H
	DB	'd', 00H, '_', 00H, 'X', 00H, '_', 00H, 'X', 00H, ' ', 00H, '('
	DB	00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H
	DB	00H, 00H
	ORG $+4
$SG94692 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A'
	DB	00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H
	DB	'0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG94693 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'A', 00H, 'd', 00H
	DB	'd', 00H, '_', 00H, 'X', 00H, '_', 00H, 'X', 00H, ' ', 00H, '('
	DB	00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H
	DB	00H, 00H
$SG94694 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'A', 00H, 'd', 00H
	DB	'd', 00H, '_', 00H, 'X', 00H, '_', 00H, 'X', 00H, 'n0', 0a9H, '_'
	DB	'0^', 0b3H, '0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH
	DB	090H, 08aH, '0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H
	DB	00H
	ORG $+2
$SG94695 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'A', 00H, 'd', 00H
	DB	'd', 00H, '_', 00H, 'X', 00H, '_', 00H, 'X', 00H, ' ', 00H, '('
	DB	00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H
	DB	00H, 00H
	ORG $+4
$SG94696 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'T', 00H, 'o', 00H
	DB	'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A', 00H, 'r', 00H, 'r'
	DB	00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H, '0', 0fcH, '0'
	DB	0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH, '0g0o0j0D'
	DB	'0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG94697 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'A', 00H, 'd', 00H
	DB	'd', 00H, '_', 00H, 'X', 00H, '_', 00H, 'X', 00H, ' ', 00H, '('
	DB	00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H
	DB	00H, 00H
$SG94698 DB	0c7H, '0', 0fcH, '0', 0bfH, '0n0', 085H, 'Q', 0b9H, '[L0', 00H
	DB	'N', 0f4H, 081H, 'W0j0D0', 00H, 00H
	ORG $+2
$SG94699 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'A', 00H, 'd', 00H
	DB	'd', 00H, '_', 00H, 'X', 00H, '_', 00H, 'X', 00H, ' ', 00H, '('
	DB	00H, '%', 00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H
	DB	00H, 00H
_DATA	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_debug.h
_TEXT	SEGMENT
_buffer1$ = 8						; size = 4
_count1$ = 12						; size = 4
_buffer2$ = 16						; size = 4
_count2$ = 20						; size = 4
__EQUALS_MEMORY PROC

; 149  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __630249ED_pmc_uint_debug@h
	call	@__CheckForDebuggerJustMyCode@4

; 150  :     if (count1 != count2)

	mov	eax, DWORD PTR _count1$[ebp]
	cmp	eax, DWORD PTR _count2$[ebp]
	je	SHORT $LN2@EQUALS_MEM

; 151  :         return (-1);

	or	eax, -1
	jmp	SHORT $LN1@EQUALS_MEM
$LN2@EQUALS_MEM:

; 152  :     while (count1 > 0)

	cmp	DWORD PTR _count1$[ebp], 0
	jbe	SHORT $LN3@EQUALS_MEM

; 153  :     {
; 154  :         if (*buffer1 != *buffer2)

	mov	ecx, DWORD PTR _buffer1$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _buffer2$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	edx, ecx
	je	SHORT $LN5@EQUALS_MEM

; 155  :             return (-1);

	or	eax, -1
	jmp	SHORT $LN1@EQUALS_MEM
$LN5@EQUALS_MEM:

; 156  :         ++buffer1;

	mov	edx, DWORD PTR _buffer1$[ebp]
	add	edx, 1
	mov	DWORD PTR _buffer1$[ebp], edx

; 157  :         ++buffer2;

	mov	eax, DWORD PTR _buffer2$[ebp]
	add	eax, 1
	mov	DWORD PTR _buffer2$[ebp], eax

; 158  :         --count1;

	mov	ecx, DWORD PTR _count1$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count1$[ebp], ecx

; 159  :     }

	jmp	SHORT $LN2@EQUALS_MEM
$LN3@EQUALS_MEM:

; 160  :     return (0);

	xor	eax, eax
$LN1@EQUALS_MEM:

; 161  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__EQUALS_MEMORY ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\test_op_add.c
_TEXT	SEGMENT
tv176 = -352						; size = 4
tv161 = -348						; size = 4
tv142 = -344						; size = 4
tv92 = -340						; size = 4
tv74 = -336						; size = 4
_z_result$ = -332					; size = 4
_y_result$ = -328					; size = 4
_x_result$ = -324					; size = 4
_result$ = -320						; size = 4
_actual_z_buf_size$ = -312				; size = 4
_actual_z_buf$ = -300					; size = 256
_z$ = -36						; size = 4
_y$ = -24						; size = 4
_x$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_x_buf$ = 20						; size = 4
_x_buf_size$ = 24					; size = 4
_y_buf$ = 28						; size = 4
_y_buf_size$ = 32					; size = 4
_desired_z_buf$ = 36					; size = 4
_desired_z_buf_size$ = 40				; size = 4
_TEST_PMC_Add_X_X PROC

; 109  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 352				; 00000160H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-352]
	mov	ecx, 88					; 00000058H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __2574342F_test_op_add@c
	call	@__CheckForDebuggerJustMyCode@4

; 110  :     HANDLE x;
; 111  :     HANDLE y;
; 112  :     HANDLE z;
; 113  :     unsigned char actual_z_buf[256];
; 114  :     size_t actual_z_buf_size;
; 115  :     PMC_STATUS_CODE result;
; 116  :     PMC_STATUS_CODE x_result;
; 117  :     PMC_STATUS_CODE y_result;
; 118  :     PMC_STATUS_CODE z_result;
; 119  :     TEST_Assert(env, FormatTestLabel(L"PMC_Add_X_X (%d.%d)", no, 1), (x_result = ep->PMC_FromByteArray(x_buf, x_buf_size, &x)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_FromByteArrayの復帰コードが期待通りではない(%d)", x_result));

	mov	esi, esp
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _x_result$[ebp], eax
	cmp	DWORD PTR _x_result$[ebp], 0
	jne	SHORT $LN6@TEST_PMC_A
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN7@TEST_PMC_A
$LN6@TEST_PMC_A:
	mov	DWORD PTR tv74[ebp], 0
$LN7@TEST_PMC_A:
	mov	edx, DWORD PTR _x_result$[ebp]
	push	edx
	push	OFFSET $SG94690
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG94691
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 120  :     TEST_Assert(env, FormatTestLabel(L"PMC_Add_X_X (%d.%d)", no, 2), (y_result = ep->PMC_FromByteArray(y_buf, y_buf_size, &y)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_FromByteArrayの復帰コードが期待通りではない(%d)", y_result));

	mov	esi, esp
	lea	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _y_result$[ebp], eax
	cmp	DWORD PTR _y_result$[ebp], 0
	jne	SHORT $LN8@TEST_PMC_A
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN9@TEST_PMC_A
$LN8@TEST_PMC_A:
	mov	DWORD PTR tv92[ebp], 0
$LN9@TEST_PMC_A:
	mov	edx, DWORD PTR _y_result$[ebp]
	push	edx
	push	OFFSET $SG94692
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv92[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG94693
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 121  :     TEST_Assert(env, FormatTestLabel(L"PMC_Add_X_X (%d.%d)", no, 3), (z_result = ep->PMC_Add_X_X(x, y, &z)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_Add_X_Xの復帰コードが期待通りではない(%d)", z_result));

	mov	esi, esp
	lea	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _z_result$[ebp], eax
	cmp	DWORD PTR _z_result$[ebp], 0
	jne	SHORT $LN10@TEST_PMC_A
	mov	DWORD PTR tv142[ebp], 1
	jmp	SHORT $LN11@TEST_PMC_A
$LN10@TEST_PMC_A:
	mov	DWORD PTR tv142[ebp], 0
$LN11@TEST_PMC_A:
	mov	edx, DWORD PTR _z_result$[ebp]
	push	edx
	push	OFFSET $SG94694
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv142[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG94695
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 122  :     TEST_Assert(env, FormatTestLabel(L"PMC_Add_X_X (%d.%d)", no, 4), (result = ep->PMC_ToByteArray(z, actual_z_buf, sizeof(actual_z_buf), &actual_z_buf_size)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_ToByteArrayの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	eax, DWORD PTR _actual_z_buf_size$[ebp]
	push	eax
	push	256					; 00000100H
	lea	ecx, DWORD PTR _actual_z_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _z$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN12@TEST_PMC_A
	mov	DWORD PTR tv161[ebp], 1
	jmp	SHORT $LN13@TEST_PMC_A
$LN12@TEST_PMC_A:
	mov	DWORD PTR tv161[ebp], 0
$LN13@TEST_PMC_A:
	mov	edx, DWORD PTR _result$[ebp]
	push	edx
	push	OFFSET $SG94696
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv161[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG94697
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 123  :     TEST_Assert(env, FormatTestLabel(L"PMC_Add_X_X (%d.%d)", no, 5), _EQUALS_MEMORY(actual_z_buf, actual_z_buf_size, desired_z_buf, desired_z_buf_size) == 0, L"データの内容が一致しない");

	mov	eax, DWORD PTR _desired_z_buf_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _desired_z_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _actual_z_buf_size$[ebp]
	push	edx
	lea	eax, DWORD PTR _actual_z_buf$[ebp]
	push	eax
	call	__EQUALS_MEMORY
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN14@TEST_PMC_A
	mov	DWORD PTR tv176[ebp], 1
	jmp	SHORT $LN15@TEST_PMC_A
$LN14@TEST_PMC_A:
	mov	DWORD PTR tv176[ebp], 0
$LN15@TEST_PMC_A:
	push	OFFSET $SG94698
	mov	ecx, DWORD PTR tv176[ebp]
	push	ecx
	push	5
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET $SG94699
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 124  :     if (z_result == PMC_STATUS_OK)

	cmp	DWORD PTR _z_result$[ebp], 0
	jne	SHORT $LN2@TEST_PMC_A

; 125  :         ep->PMC_Dispose(z);

	mov	esi, esp
	mov	ecx, DWORD PTR _z$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@TEST_PMC_A:

; 126  :     if (y_result == PMC_STATUS_OK)

	cmp	DWORD PTR _y_result$[ebp], 0
	jne	SHORT $LN3@TEST_PMC_A

; 127  :         ep->PMC_Dispose(y);

	mov	esi, esp
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@TEST_PMC_A:

; 128  :     if (x_result == PMC_STATUS_OK)

	cmp	DWORD PTR _x_result$[ebp], 0
	jne	SHORT $LN1@TEST_PMC_A

; 129  :         ep->PMC_Dispose(x);

	mov	esi, esp
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_PMC_A:

; 130  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@TEST_PMC_A
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 352				; 00000160H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN22@TEST_PMC_A:
	DD	5
	DD	$LN21@TEST_PMC_A
$LN21@TEST_PMC_A:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN16@TEST_PMC_A
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN17@TEST_PMC_A
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN18@TEST_PMC_A
	DD	-300					; fffffed4H
	DD	256					; 00000100H
	DD	$LN19@TEST_PMC_A
	DD	-312					; fffffec8H
	DD	4
	DD	$LN20@TEST_PMC_A
$LN20@TEST_PMC_A:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN19@TEST_PMC_A:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN18@TEST_PMC_A:
	DB	122					; 0000007aH
	DB	0
$LN17@TEST_PMC_A:
	DB	121					; 00000079H
	DB	0
$LN16@TEST_PMC_A:
	DB	120					; 00000078H
	DB	0
_TEST_PMC_Add_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\test_op_add.c
_TEXT	SEGMENT
tv158 = -332						; size = 4
tv143 = -328						; size = 4
tv92 = -324						; size = 4
tv74 = -320						; size = 4
_z_result$ = -316					; size = 4
_x_result$ = -312					; size = 4
_result$ = -308						; size = 4
_actual_z_buf_size$ = -300				; size = 4
_actual_z_buf$ = -288					; size = 256
_z$ = -24						; size = 4
_x$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_x_buf$ = 20						; size = 4
_x_buf_size$ = 24					; size = 4
_y$ = 28						; size = 8
_desired_z_buf$ = 36					; size = 4
_desired_z_buf_size$ = 40				; size = 4
_TEST_PMC_Add_X_L PROC

; 90   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 332				; 0000014cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 83					; 00000053H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __2574342F_test_op_add@c
	call	@__CheckForDebuggerJustMyCode@4

; 91   :     HANDLE x;
; 92   :     HANDLE z;
; 93   :     unsigned char actual_z_buf[256];
; 94   :     size_t actual_z_buf_size;
; 95   :     PMC_STATUS_CODE result;
; 96   :     PMC_STATUS_CODE x_result;
; 97   :     PMC_STATUS_CODE z_result;
; 98   :     TEST_Assert(env, FormatTestLabel(L"PMC_Add_X_L (%d.%d)", no, 1), (x_result = ep->PMC_FromByteArray(x_buf, x_buf_size, &x)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_FromByteArrayの復帰コードが期待通りではない(%d)", x_result));

	mov	esi, esp
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _x_result$[ebp], eax
	cmp	DWORD PTR _x_result$[ebp], 0
	jne	SHORT $LN5@TEST_PMC_A
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN6@TEST_PMC_A
$LN5@TEST_PMC_A:
	mov	DWORD PTR tv74[ebp], 0
$LN6@TEST_PMC_A:
	mov	edx, DWORD PTR _x_result$[ebp]
	push	edx
	push	OFFSET $SG94652
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG94653
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 99   :     TEST_Assert(env, FormatTestLabel(L"PMC_Add_X_L (%d.%d)", no, 2), (z_result = ep->PMC_Add_X_L(x, y, &z)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_Add_X_Lの復帰コードが期待通りではない(%d)", z_result));

	mov	esi, esp
	lea	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _z_result$[ebp], eax
	cmp	DWORD PTR _z_result$[ebp], 0
	jne	SHORT $LN7@TEST_PMC_A
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN8@TEST_PMC_A
$LN7@TEST_PMC_A:
	mov	DWORD PTR tv92[ebp], 0
$LN8@TEST_PMC_A:
	mov	eax, DWORD PTR _z_result$[ebp]
	push	eax
	push	OFFSET $SG94654
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR tv92[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET $SG94655
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 100  :     TEST_Assert(env, FormatTestLabel(L"PMC_Add_X_L (%d.%d)", no, 3), (result = ep->PMC_ToByteArray(z, actual_z_buf, sizeof(actual_z_buf), &actual_z_buf_size)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_ToByteArrayの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	ecx, DWORD PTR _actual_z_buf_size$[ebp]
	push	ecx
	push	256					; 00000100H
	lea	edx, DWORD PTR _actual_z_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN9@TEST_PMC_A
	mov	DWORD PTR tv143[ebp], 1
	jmp	SHORT $LN10@TEST_PMC_A
$LN9@TEST_PMC_A:
	mov	DWORD PTR tv143[ebp], 0
$LN10@TEST_PMC_A:
	mov	eax, DWORD PTR _result$[ebp]
	push	eax
	push	OFFSET $SG94656
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR tv143[ebp]
	push	ecx
	push	3
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET $SG94657
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 101  :     TEST_Assert(env, FormatTestLabel(L"PMC_Add_X_L (%d.%d)", no, 4), _EQUALS_MEMORY(actual_z_buf, actual_z_buf_size, desired_z_buf, desired_z_buf_size) == 0, L"データの内容が一致しない");

	mov	ecx, DWORD PTR _desired_z_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _desired_z_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _actual_z_buf_size$[ebp]
	push	eax
	lea	ecx, DWORD PTR _actual_z_buf$[ebp]
	push	ecx
	call	__EQUALS_MEMORY
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN11@TEST_PMC_A
	mov	DWORD PTR tv158[ebp], 1
	jmp	SHORT $LN12@TEST_PMC_A
$LN11@TEST_PMC_A:
	mov	DWORD PTR tv158[ebp], 0
$LN12@TEST_PMC_A:
	push	OFFSET $SG94658
	mov	edx, DWORD PTR tv158[ebp]
	push	edx
	push	4
	mov	eax, DWORD PTR _no$[ebp]
	push	eax
	push	OFFSET $SG94659
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 102  :     if (z_result == PMC_STATUS_OK)

	cmp	DWORD PTR _z_result$[ebp], 0
	jne	SHORT $LN2@TEST_PMC_A

; 103  :         ep->PMC_Dispose(z);

	mov	esi, esp
	mov	edx, DWORD PTR _z$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@TEST_PMC_A:

; 104  :     if (x_result == PMC_STATUS_OK)

	cmp	DWORD PTR _x_result$[ebp], 0
	jne	SHORT $LN1@TEST_PMC_A

; 105  :         ep->PMC_Dispose(x);

	mov	esi, esp
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_PMC_A:

; 106  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@TEST_PMC_A
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@TEST_PMC_A:
	DD	4
	DD	$LN17@TEST_PMC_A
$LN17@TEST_PMC_A:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN13@TEST_PMC_A
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN14@TEST_PMC_A
	DD	-288					; fffffee0H
	DD	256					; 00000100H
	DD	$LN15@TEST_PMC_A
	DD	-300					; fffffed4H
	DD	4
	DD	$LN16@TEST_PMC_A
$LN16@TEST_PMC_A:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN15@TEST_PMC_A:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN14@TEST_PMC_A:
	DB	122					; 0000007aH
	DB	0
$LN13@TEST_PMC_A:
	DB	120					; 00000078H
	DB	0
_TEST_PMC_Add_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\test_op_add.c
_TEXT	SEGMENT
tv158 = -332						; size = 4
tv143 = -328						; size = 4
tv92 = -324						; size = 4
tv74 = -320						; size = 4
_z_result$ = -316					; size = 4
_x_result$ = -312					; size = 4
_result$ = -308						; size = 4
_actual_z_buf_size$ = -300				; size = 4
_actual_z_buf$ = -288					; size = 256
_z$ = -24						; size = 4
_x$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_x_buf$ = 20						; size = 4
_x_buf_size$ = 24					; size = 4
_y$ = 28						; size = 4
_desired_z_buf$ = 32					; size = 4
_desired_z_buf_size$ = 36				; size = 4
_TEST_PMC_Add_X_I PROC

; 71   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 332				; 0000014cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 83					; 00000053H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __2574342F_test_op_add@c
	call	@__CheckForDebuggerJustMyCode@4

; 72   :     HANDLE x;
; 73   :     HANDLE z;
; 74   :     unsigned char actual_z_buf[256];
; 75   :     size_t actual_z_buf_size;
; 76   :     PMC_STATUS_CODE result;
; 77   :     PMC_STATUS_CODE x_result;
; 78   :     PMC_STATUS_CODE z_result;
; 79   :     TEST_Assert(env, FormatTestLabel(L"PMC_Add_X_I (%d.%d)", no, 1), (x_result = ep->PMC_FromByteArray(x_buf, x_buf_size, &x)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_FromByteArrayの復帰コードが期待通りではない(%d)", x_result));

	mov	esi, esp
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _x_result$[ebp], eax
	cmp	DWORD PTR _x_result$[ebp], 0
	jne	SHORT $LN5@TEST_PMC_A
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN6@TEST_PMC_A
$LN5@TEST_PMC_A:
	mov	DWORD PTR tv74[ebp], 0
$LN6@TEST_PMC_A:
	mov	edx, DWORD PTR _x_result$[ebp]
	push	edx
	push	OFFSET $SG94618
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG94619
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 80   :     TEST_Assert(env, FormatTestLabel(L"PMC_Add_X_I (%d.%d)", no, 2), (z_result = ep->PMC_Add_X_I(x, y, &z)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_Add_X_Iの復帰コードが期待通りではない(%d)", z_result));

	mov	esi, esp
	lea	eax, DWORD PTR _z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _z_result$[ebp], eax
	cmp	DWORD PTR _z_result$[ebp], 0
	jne	SHORT $LN7@TEST_PMC_A
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN8@TEST_PMC_A
$LN7@TEST_PMC_A:
	mov	DWORD PTR tv92[ebp], 0
$LN8@TEST_PMC_A:
	mov	edx, DWORD PTR _z_result$[ebp]
	push	edx
	push	OFFSET $SG94620
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv92[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG94621
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 81   :     TEST_Assert(env, FormatTestLabel(L"PMC_Add_X_I (%d.%d)", no, 3), (result = ep->PMC_ToByteArray(z, actual_z_buf, sizeof(actual_z_buf), &actual_z_buf_size)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_ToByteArrayの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	eax, DWORD PTR _actual_z_buf_size$[ebp]
	push	eax
	push	256					; 00000100H
	lea	ecx, DWORD PTR _actual_z_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _z$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN9@TEST_PMC_A
	mov	DWORD PTR tv143[ebp], 1
	jmp	SHORT $LN10@TEST_PMC_A
$LN9@TEST_PMC_A:
	mov	DWORD PTR tv143[ebp], 0
$LN10@TEST_PMC_A:
	mov	edx, DWORD PTR _result$[ebp]
	push	edx
	push	OFFSET $SG94622
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv143[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG94623
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 82   :     TEST_Assert(env, FormatTestLabel(L"PMC_Add_X_I (%d.%d)", no, 4), _EQUALS_MEMORY(actual_z_buf, actual_z_buf_size, desired_z_buf, desired_z_buf_size) == 0, L"データの内容が一致しない");

	mov	eax, DWORD PTR _desired_z_buf_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _desired_z_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _actual_z_buf_size$[ebp]
	push	edx
	lea	eax, DWORD PTR _actual_z_buf$[ebp]
	push	eax
	call	__EQUALS_MEMORY
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN11@TEST_PMC_A
	mov	DWORD PTR tv158[ebp], 1
	jmp	SHORT $LN12@TEST_PMC_A
$LN11@TEST_PMC_A:
	mov	DWORD PTR tv158[ebp], 0
$LN12@TEST_PMC_A:
	push	OFFSET $SG94624
	mov	ecx, DWORD PTR tv158[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET $SG94625
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 83   :     if (z_result == PMC_STATUS_OK)

	cmp	DWORD PTR _z_result$[ebp], 0
	jne	SHORT $LN2@TEST_PMC_A

; 84   :         ep->PMC_Dispose(z);

	mov	esi, esp
	mov	ecx, DWORD PTR _z$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@TEST_PMC_A:

; 85   :     if (x_result == PMC_STATUS_OK)

	cmp	DWORD PTR _x_result$[ebp], 0
	jne	SHORT $LN1@TEST_PMC_A

; 86   :         ep->PMC_Dispose(x);

	mov	esi, esp
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_PMC_A:

; 87   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@TEST_PMC_A
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@TEST_PMC_A:
	DD	4
	DD	$LN17@TEST_PMC_A
$LN17@TEST_PMC_A:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN13@TEST_PMC_A
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN14@TEST_PMC_A
	DD	-288					; fffffee0H
	DD	256					; 00000100H
	DD	$LN15@TEST_PMC_A
	DD	-300					; fffffed4H
	DD	4
	DD	$LN16@TEST_PMC_A
$LN16@TEST_PMC_A:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN15@TEST_PMC_A:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN14@TEST_PMC_A:
	DB	122					; 0000007aH
	DB	0
$LN13@TEST_PMC_A:
	DB	120					; 00000078H
	DB	0
_TEST_PMC_Add_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\test_op_add.c
_TEXT	SEGMENT
tv158 = -332						; size = 4
tv143 = -328						; size = 4
tv92 = -324						; size = 4
tv74 = -320						; size = 4
_w_result$ = -316					; size = 4
_v_result$ = -312					; size = 4
_result$ = -308						; size = 4
_actual_w_buf_size$ = -300				; size = 4
_actual_w_buf$ = -288					; size = 256
_w$ = -24						; size = 4
_v$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_u$ = 20						; size = 8
_v_buf$ = 28						; size = 4
_v_buf_size$ = 32					; size = 4
_desired_w_buf$ = 36					; size = 4
_desired_w_buf_size$ = 40				; size = 4
_TEST_PMC_Add_L_X PROC

; 52   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 332				; 0000014cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 83					; 00000053H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __2574342F_test_op_add@c
	call	@__CheckForDebuggerJustMyCode@4

; 53   :     HANDLE v;
; 54   :     HANDLE w;
; 55   :     unsigned char actual_w_buf[256];
; 56   :     size_t actual_w_buf_size;
; 57   :     PMC_STATUS_CODE result;
; 58   :     PMC_STATUS_CODE v_result;
; 59   :     PMC_STATUS_CODE w_result;
; 60   :     TEST_Assert(env, FormatTestLabel(L"PMC_Add_L_X (%d.%d)", no, 1), (v_result = ep->PMC_FromByteArray(v_buf, v_buf_size, &v)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_FromByteArrayの復帰コードが期待通りではない(%d)", v_result));

	mov	esi, esp
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _v_result$[ebp], eax
	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN5@TEST_PMC_A
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN6@TEST_PMC_A
$LN5@TEST_PMC_A:
	mov	DWORD PTR tv74[ebp], 0
$LN6@TEST_PMC_A:
	mov	edx, DWORD PTR _v_result$[ebp]
	push	edx
	push	OFFSET $SG94584
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG94585
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 61   :     TEST_Assert(env, FormatTestLabel(L"PMC_Add_L_X (%d.%d)", no, 2), (w_result = ep->PMC_Add_L_X(u, v, &w)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_Add_L_Xの復帰コードが期待通りではない(%d)", w_result));

	mov	esi, esp
	lea	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _w_result$[ebp], eax
	cmp	DWORD PTR _w_result$[ebp], 0
	jne	SHORT $LN7@TEST_PMC_A
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN8@TEST_PMC_A
$LN7@TEST_PMC_A:
	mov	DWORD PTR tv92[ebp], 0
$LN8@TEST_PMC_A:
	mov	eax, DWORD PTR _w_result$[ebp]
	push	eax
	push	OFFSET $SG94586
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR tv92[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET $SG94587
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 62   :     TEST_Assert(env, FormatTestLabel(L"PMC_Add_L_X (%d.%d)", no, 3), (result = ep->PMC_ToByteArray(w, actual_w_buf, sizeof(actual_w_buf), &actual_w_buf_size)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_ToByteArrayの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	ecx, DWORD PTR _actual_w_buf_size$[ebp]
	push	ecx
	push	256					; 00000100H
	lea	edx, DWORD PTR _actual_w_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN9@TEST_PMC_A
	mov	DWORD PTR tv143[ebp], 1
	jmp	SHORT $LN10@TEST_PMC_A
$LN9@TEST_PMC_A:
	mov	DWORD PTR tv143[ebp], 0
$LN10@TEST_PMC_A:
	mov	eax, DWORD PTR _result$[ebp]
	push	eax
	push	OFFSET $SG94588
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR tv143[ebp]
	push	ecx
	push	3
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET $SG94589
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 63   :     TEST_Assert(env, FormatTestLabel(L"PMC_Add_L_X (%d.%d)", no, 4), _EQUALS_MEMORY(actual_w_buf, actual_w_buf_size, desired_w_buf, desired_w_buf_size) == 0, L"データの内容が一致しない");

	mov	ecx, DWORD PTR _desired_w_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _desired_w_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _actual_w_buf_size$[ebp]
	push	eax
	lea	ecx, DWORD PTR _actual_w_buf$[ebp]
	push	ecx
	call	__EQUALS_MEMORY
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN11@TEST_PMC_A
	mov	DWORD PTR tv158[ebp], 1
	jmp	SHORT $LN12@TEST_PMC_A
$LN11@TEST_PMC_A:
	mov	DWORD PTR tv158[ebp], 0
$LN12@TEST_PMC_A:
	push	OFFSET $SG94590
	mov	edx, DWORD PTR tv158[ebp]
	push	edx
	push	4
	mov	eax, DWORD PTR _no$[ebp]
	push	eax
	push	OFFSET $SG94591
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 64   :     if (w_result == PMC_STATUS_OK)

	cmp	DWORD PTR _w_result$[ebp], 0
	jne	SHORT $LN2@TEST_PMC_A

; 65   :         ep->PMC_Dispose(w);

	mov	esi, esp
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@TEST_PMC_A:

; 66   :     if (v_result == PMC_STATUS_OK)

	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN1@TEST_PMC_A

; 67   :         ep->PMC_Dispose(v);

	mov	esi, esp
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_PMC_A:

; 68   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@TEST_PMC_A
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@TEST_PMC_A:
	DD	4
	DD	$LN17@TEST_PMC_A
$LN17@TEST_PMC_A:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN13@TEST_PMC_A
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN14@TEST_PMC_A
	DD	-288					; fffffee0H
	DD	256					; 00000100H
	DD	$LN15@TEST_PMC_A
	DD	-300					; fffffed4H
	DD	4
	DD	$LN16@TEST_PMC_A
$LN16@TEST_PMC_A:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN15@TEST_PMC_A:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN14@TEST_PMC_A:
	DB	119					; 00000077H
	DB	0
$LN13@TEST_PMC_A:
	DB	118					; 00000076H
	DB	0
_TEST_PMC_Add_L_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\test_op_add.c
_TEXT	SEGMENT
tv158 = -332						; size = 4
tv143 = -328						; size = 4
tv92 = -324						; size = 4
tv74 = -320						; size = 4
_w_result$ = -316					; size = 4
_v_result$ = -312					; size = 4
_result$ = -308						; size = 4
_actual_w_buf_size$ = -300				; size = 4
_actual_w_buf$ = -288					; size = 256
_w$ = -24						; size = 4
_v$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_u$ = 20						; size = 4
_v_buf$ = 24						; size = 4
_v_buf_size$ = 28					; size = 4
_desired_w_buf$ = 32					; size = 4
_desired_w_buf_size$ = 36				; size = 4
_TEST_PMC_Add_I_X PROC

; 33   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 332				; 0000014cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 83					; 00000053H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __2574342F_test_op_add@c
	call	@__CheckForDebuggerJustMyCode@4

; 34   :     HANDLE v;
; 35   :     HANDLE w;
; 36   :     unsigned char actual_w_buf[256];
; 37   :     size_t actual_w_buf_size;
; 38   :     PMC_STATUS_CODE result;
; 39   :     PMC_STATUS_CODE v_result;
; 40   :     PMC_STATUS_CODE w_result;
; 41   :     TEST_Assert(env, FormatTestLabel(L"PMC_Add_I_X (%d.%d)", no, 1), (v_result = ep->PMC_FromByteArray(v_buf, v_buf_size, &v)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_FromByteArrayの復帰コードが期待通りではない(%d)", v_result));

	mov	esi, esp
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _v_result$[ebp], eax
	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN5@TEST_PMC_A
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN6@TEST_PMC_A
$LN5@TEST_PMC_A:
	mov	DWORD PTR tv74[ebp], 0
$LN6@TEST_PMC_A:
	mov	edx, DWORD PTR _v_result$[ebp]
	push	edx
	push	OFFSET $SG94550
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG94551
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 42   :     TEST_Assert(env, FormatTestLabel(L"PMC_Add_I_X (%d.%d)", no, 2), (w_result = ep->PMC_Add_I_X(u, v, &w)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_Add_I_Xの復帰コードが期待通りではない(%d)", w_result));

	mov	esi, esp
	lea	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _w_result$[ebp], eax
	cmp	DWORD PTR _w_result$[ebp], 0
	jne	SHORT $LN7@TEST_PMC_A
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN8@TEST_PMC_A
$LN7@TEST_PMC_A:
	mov	DWORD PTR tv92[ebp], 0
$LN8@TEST_PMC_A:
	mov	edx, DWORD PTR _w_result$[ebp]
	push	edx
	push	OFFSET $SG94552
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv92[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG94553
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 43   :     TEST_Assert(env, FormatTestLabel(L"PMC_Add_I_X (%d.%d)", no, 3), (result = ep->PMC_ToByteArray(w, actual_w_buf, sizeof(actual_w_buf), &actual_w_buf_size)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_ToByteArrayの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	eax, DWORD PTR _actual_w_buf_size$[ebp]
	push	eax
	push	256					; 00000100H
	lea	ecx, DWORD PTR _actual_w_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN9@TEST_PMC_A
	mov	DWORD PTR tv143[ebp], 1
	jmp	SHORT $LN10@TEST_PMC_A
$LN9@TEST_PMC_A:
	mov	DWORD PTR tv143[ebp], 0
$LN10@TEST_PMC_A:
	mov	edx, DWORD PTR _result$[ebp]
	push	edx
	push	OFFSET $SG94554
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv143[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG94555
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 44   :     TEST_Assert(env, FormatTestLabel(L"PMC_Add_I_X (%d.%d)", no, 4), _EQUALS_MEMORY(actual_w_buf, actual_w_buf_size, desired_w_buf, desired_w_buf_size) == 0, L"データの内容が一致しない");

	mov	eax, DWORD PTR _desired_w_buf_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _desired_w_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _actual_w_buf_size$[ebp]
	push	edx
	lea	eax, DWORD PTR _actual_w_buf$[ebp]
	push	eax
	call	__EQUALS_MEMORY
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN11@TEST_PMC_A
	mov	DWORD PTR tv158[ebp], 1
	jmp	SHORT $LN12@TEST_PMC_A
$LN11@TEST_PMC_A:
	mov	DWORD PTR tv158[ebp], 0
$LN12@TEST_PMC_A:
	push	OFFSET $SG94556
	mov	ecx, DWORD PTR tv158[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET $SG94557
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 45   :     if (w_result == PMC_STATUS_OK)

	cmp	DWORD PTR _w_result$[ebp], 0
	jne	SHORT $LN2@TEST_PMC_A

; 46   :         ep->PMC_Dispose(w);

	mov	esi, esp
	mov	ecx, DWORD PTR _w$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@TEST_PMC_A:

; 47   :     if (v_result == PMC_STATUS_OK)

	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN1@TEST_PMC_A

; 48   :         ep->PMC_Dispose(v);

	mov	esi, esp
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_PMC_A:

; 49   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@TEST_PMC_A
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@TEST_PMC_A:
	DD	4
	DD	$LN17@TEST_PMC_A
$LN17@TEST_PMC_A:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN13@TEST_PMC_A
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN14@TEST_PMC_A
	DD	-288					; fffffee0H
	DD	256					; 00000100H
	DD	$LN15@TEST_PMC_A
	DD	-300					; fffffed4H
	DD	4
	DD	$LN16@TEST_PMC_A
$LN16@TEST_PMC_A:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN15@TEST_PMC_A:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN14@TEST_PMC_A:
	DB	119					; 00000077H
	DB	0
$LN13@TEST_PMC_A:
	DB	118					; 00000076H
	DB	0
_TEST_PMC_Add_I_X ENDP
_TEXT	ENDS
END
