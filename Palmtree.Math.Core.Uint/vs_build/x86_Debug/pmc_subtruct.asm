; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_subtruct.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__E05E7037_autogenerated_inline_func@h DB 01H
__6B07DC87_pmc_subtruct@c DB 01H
msvcjmc	ENDS
PUBLIC	_Subtruct_Imp
PUBLIC	_Initialize_Subtruct
PUBLIC	_PMC_Subtruct_I_X@12
PUBLIC	_PMC_Subtruct_L_X@16
PUBLIC	_PMC_Subtruct_X_I@12
PUBLIC	_PMC_Subtruct_X_L@16
PUBLIC	_PMC_Subtruct_X_X@12
PUBLIC	__JustMyCode_Default
EXTRN	_CheckBlockLight:PROC
EXTRN	_AllocateNumber:PROC
EXTRN	_DeallocateNumber:PROC
EXTRN	_CommitNumber:PROC
EXTRN	_CheckNumber:PROC
EXTRN	_DuplicateNumber:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__allshl:PROC
EXTRN	__aullshr:PROC
EXTRN	_number_zero:BYTE
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_subtruct.c
_TEXT	SEGMENT
tv80 = -20						; size = 4
tv76 = -16						; size = 4
tv71 = -12						; size = 4
tv67 = -8						; size = 4
_c$1 = -1						; size = 1
_up$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v_hi$ = 16						; size = 4
_v_lo$ = 20						; size = 4
_wp$ = 24						; size = 4
_w_count$ = 28						; size = 4
_Subtruct_X_2W PROC

; 91   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __6B07DC87_pmc_subtruct@c
	call	@__CheckForDebuggerJustMyCode@4

; 92   :     if (u_count < 2)

	cmp	DWORD PTR _u_count$[ebp], 2
	jae	SHORT $LN2@Subtruct_X

; 93   :     {
; 94   :         // u が 1 ワードしかなかった場合
; 95   : 
; 96   :         // 明らかに演算結果が負になるのでエラーを通知する。
; 97   :         return (PMC_STATUS_INTERNAL_BORROW);

	mov	eax, -258				; fffffefeH
	jmp	$LN1@Subtruct_X

; 98   :     }

	jmp	$LN1@Subtruct_X
$LN2@Subtruct_X:

; 99   :     else
; 100  :     {
; 101  :         // x が 2 ワード以上あった場合
; 102  : 
; 103  :         // 最下位のワードの減算をする
; 104  :         char c = _SUBTRUCT_UNIT(0, *up++, v_lo, wp++);

	mov	eax, DWORD PTR _wp$[ebp]
	mov	DWORD PTR tv67[ebp], eax
	mov	ecx, DWORD PTR _wp$[ebp]
	add	ecx, 4
	mov	DWORD PTR _wp$[ebp], ecx
	mov	edx, DWORD PTR _up$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv71[ebp], eax
	mov	ecx, DWORD PTR _up$[ebp]
	add	ecx, 4
	mov	DWORD PTR _up$[ebp], ecx
	mov	edx, DWORD PTR tv67[ebp]
	push	edx
	mov	eax, DWORD PTR _v_lo$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv71[ebp]
	push	ecx
	push	0
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$1[ebp], al

; 105  : 
; 106  :         // 最下位から 2 番目のワードの減算をする。
; 107  :         c = _SUBTRUCT_UNIT(c, *up++, v_hi, wp++);

	mov	edx, DWORD PTR _wp$[ebp]
	mov	DWORD PTR tv76[ebp], edx
	mov	eax, DWORD PTR _wp$[ebp]
	add	eax, 4
	mov	DWORD PTR _wp$[ebp], eax
	mov	ecx, DWORD PTR _up$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv80[ebp], edx
	mov	eax, DWORD PTR _up$[ebp]
	add	eax, 4
	mov	DWORD PTR _up$[ebp], eax
	mov	ecx, DWORD PTR tv76[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_hi$[ebp]
	push	edx
	mov	eax, DWORD PTR tv80[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$1[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$1[ebp], al

; 108  :         u_count -= 2;

	mov	edx, DWORD PTR _u_count$[ebp]
	sub	edx, 2
	mov	DWORD PTR _u_count$[ebp], edx

; 109  :         w_count -= 2;

	mov	eax, DWORD PTR _w_count$[ebp]
	sub	eax, 2
	mov	DWORD PTR _w_count$[ebp], eax

; 110  : 
; 111  :         // 残りの桁の繰り上がりを計算し、復帰する。
; 112  :         return (DoBorrow(c, up, u_count, wp, w_count));

	mov	ecx, DWORD PTR _w_count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _u_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _up$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$1[ebp]
	push	edx
	call	_DoBorrow
	add	esp, 20					; 00000014H
$LN1@Subtruct_X:

; 113  :     }
; 114  : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Subtruct_X_2W ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_subtruct.c
_TEXT	SEGMENT
tv70 = -12						; size = 4
tv66 = -8						; size = 4
_c$ = -1						; size = 1
_up$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v$ = 16						; size = 4
_wp$ = 20						; size = 4
_w_count$ = 24						; size = 4
_Subtruct_X_1W PROC

; 79   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __6B07DC87_pmc_subtruct@c
	call	@__CheckForDebuggerJustMyCode@4

; 80   :     // 最下桁の減算を行う
; 81   :     char c = _SUBTRUCT_UNIT(0, *up++, v, wp++);

	mov	eax, DWORD PTR _wp$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	mov	ecx, DWORD PTR _wp$[ebp]
	add	ecx, 4
	mov	DWORD PTR _wp$[ebp], ecx
	mov	edx, DWORD PTR _up$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv70[ebp], eax
	mov	ecx, DWORD PTR _up$[ebp]
	add	ecx, 4
	mov	DWORD PTR _up$[ebp], ecx
	mov	edx, DWORD PTR tv66[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv70[ebp]
	push	ecx
	push	0
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 82   :     --u_count;

	mov	edx, DWORD PTR _u_count$[ebp]
	sub	edx, 1
	mov	DWORD PTR _u_count$[ebp], edx

; 83   :     --w_count;

	mov	eax, DWORD PTR _w_count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _w_count$[ebp], eax

; 84   : 
; 85   :     // 残りの桁の繰上りを行い復帰する。
; 86   :     return (DoBorrow(c, up, u_count, wp, w_count));

	mov	ecx, DWORD PTR _w_count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _u_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _up$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	_DoBorrow
	add	esp, 20					; 00000014H

; 87   : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Subtruct_X_1W ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_subtruct.c
_TEXT	SEGMENT
tv75 = -8						; size = 4
tv71 = -4						; size = 4
_c$ = 8							; size = 1
_up$ = 12						; size = 4
_u_count$ = 16						; size = 4
_wp$ = 20						; size = 4
_w_count$ = 24						; size = 4
_DoBorrow PROC

; 33   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __6B07DC87_pmc_subtruct@c
	call	@__CheckForDebuggerJustMyCode@4
$LN4@DoBorrow:

; 34   :     // 桁借りを続く限り行う
; 35   :     for (;;)
; 36   :     {
; 37   :         if (u_count <= 0)

	cmp	DWORD PTR _u_count$[ebp], 0
	ja	SHORT $LN7@DoBorrow

; 38   :         {
; 39   :             // x の最上位まで達してしまった場合
; 40   : 
; 41   :             if (c)

	movsx	eax, BYTE PTR _c$[ebp]
	test	eax, eax
	je	SHORT $LN9@DoBorrow

; 42   :             {
; 43   :                 // かつそれでも桁借りを行う必要がある場合
; 44   : 
; 45   :                 // 減算結果が負になってしまったので呼び出し元に通知する。
; 46   :                 return (PMC_STATUS_INTERNAL_BORROW);

	mov	eax, -258				; fffffefeH
	jmp	$LN1@DoBorrow
$LN9@DoBorrow:

; 47   :             }
; 48   : 
; 49   :             // xの最上位に達してしまった場合はいずれにしろループを中断して正常復帰する。
; 50   : 
; 51   :             return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN1@DoBorrow

; 52   :         }

	jmp	$LN8@DoBorrow
$LN7@DoBorrow:

; 53   :         else if (c)

	movsx	ecx, BYTE PTR _c$[ebp]
	test	ecx, ecx
	je	SHORT $LN5@DoBorrow

; 54   :         {
; 55   :             // xの最上位に達しておらず、かつボローが立っている場合
; 56   : 
; 57   :             // 桁借りを継続する
; 58   :             c = _SUBTRUCT_UNIT(c, *up++, 0, wp++);

	mov	edx, DWORD PTR _wp$[ebp]
	mov	DWORD PTR tv71[ebp], edx
	mov	eax, DWORD PTR _wp$[ebp]
	add	eax, 4
	mov	DWORD PTR _wp$[ebp], eax
	mov	ecx, DWORD PTR _up$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv75[ebp], edx
	mov	eax, DWORD PTR _up$[ebp]
	add	eax, 4
	mov	DWORD PTR _up$[ebp], eax
	mov	ecx, DWORD PTR tv71[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR tv75[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 59   :             --u_count;

	mov	ecx, DWORD PTR _u_count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _u_count$[ebp], ecx

; 60   :             --w_count;

	mov	edx, DWORD PTR _w_count$[ebp]
	sub	edx, 1
	mov	DWORD PTR _w_count$[ebp], edx

; 61   :         }

	jmp	SHORT $LN8@DoBorrow
$LN5@DoBorrow:

; 62   :         else
; 63   :         {
; 64   :             // xの最上位に達しておらず、かつボローが立っていない場合
; 65   : 
; 66   :             // 桁借りを中断し、xの残りのデータをzにそのまま複写し、正常復帰する。
; 67   :             while (u_count > 0)

	cmp	DWORD PTR _u_count$[ebp], 0
	jbe	SHORT $LN6@DoBorrow

; 68   :             {
; 69   :                 *wp++ = *up++;

	mov	eax, DWORD PTR _wp$[ebp]
	mov	ecx, DWORD PTR _up$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _wp$[ebp]
	add	eax, 4
	mov	DWORD PTR _wp$[ebp], eax
	mov	ecx, DWORD PTR _up$[ebp]
	add	ecx, 4
	mov	DWORD PTR _up$[ebp], ecx

; 70   :                 --u_count;

	mov	edx, DWORD PTR _u_count$[ebp]
	sub	edx, 1
	mov	DWORD PTR _u_count$[ebp], edx

; 71   :                 --w_count;

	mov	eax, DWORD PTR _w_count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _w_count$[ebp], eax

; 72   :             }

	jmp	SHORT $LN5@DoBorrow
$LN6@DoBorrow:

; 73   :             return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@DoBorrow
$LN8@DoBorrow:

; 74   :         }
; 75   :     }

	jmp	$LN4@DoBorrow
$LN1@DoBorrow:

; 76   : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DoBorrow ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__SUBTRUCT_2WORDS_SBB PROC

; 4457 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __E05E7037_autogenerated_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 4458 : #ifdef _MSC_VER
; 4459 :     c = _SUBTRUCT_UNIT(c, xp[0], yp[0], &zp[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 4460 :     c = _SUBTRUCT_UNIT(c, xp[1], yp[1], &zp[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 4461 : #elif defined(__GNUC__)
; 4462 : #ifdef _M_IX86
; 4463 :     __asm__ volatile (
; 4464 :         "addb\t$-1, %0\n\t"
; 4465 :         "movl\t(%1), %%ecx\n\t"
; 4466 :         "sbbl\t(%2), %%ecx\n\t"
; 4467 :         "movl\t%%ecx, (%3)\n\t"
; 4468 :         "movl\t4(%1), %%ecx\n\t"
; 4469 :         "sbbl\t4(%2), %%ecx\n\t"
; 4470 :         "movl\t%%ecx, 4(%3)\n\t"
; 4471 :         "setc\t%0"
; 4472 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 4473 :         :
; 4474 :         : "cc", "memory", "%ecx"
; 4475 : );
; 4476 : #elif defined(_M_IX64)
; 4477 :     __asm__ volatile (
; 4478 :         "addb\t$-1, %0\n\t"
; 4479 :         "movq\t(%1), %%rcx\n\t"
; 4480 :         "sbbq\t(%2), %%rcx\n\t"
; 4481 :         "movq\t%%rcx, (%3)\n\t"
; 4482 :         "movq\t8(%1), %%rcx\n\t"
; 4483 :         "sbbq\t8(%2), %%rcx\n\t"
; 4484 :         "movq\t%%rcx, 8(%3)\n\t"
; 4485 :         "setc\t%0"
; 4486 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 4487 :         :
; 4488 :         : "cc", "memory", "%rcx"
; 4489 : );
; 4490 : #else
; 4491 : #error unknown platform
; 4492 : #endif
; 4493 : #else
; 4494 : #error unknown compiler
; 4495 : #endif
; 4496 :     return (c);

	mov	al, BYTE PTR _c$[ebp]

; 4497 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__SUBTRUCT_2WORDS_SBB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__SUBTRUCT_4WORDS_SBB PROC

; 4043 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __E05E7037_autogenerated_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 4044 : #ifdef _MSC_VER
; 4045 :     c = _SUBTRUCT_UNIT(c, xp[0], yp[0], &zp[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 4046 :     c = _SUBTRUCT_UNIT(c, xp[1], yp[1], &zp[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 4047 :     c = _SUBTRUCT_UNIT(c, xp[2], yp[2], &zp[2]);

	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 4048 :     c = _SUBTRUCT_UNIT(c, xp[3], yp[3], &zp[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 4049 : #elif defined(__GNUC__)
; 4050 : #ifdef _M_IX86
; 4051 :     __asm__ volatile (
; 4052 :         "addb\t$-1, %0\n\t"
; 4053 :         "movl\t(%1), %%ecx\n\t"
; 4054 :         "sbbl\t(%2), %%ecx\n\t"
; 4055 :         "movl\t%%ecx, (%3)\n\t"
; 4056 :         "movl\t4(%1), %%ecx\n\t"
; 4057 :         "sbbl\t4(%2), %%ecx\n\t"
; 4058 :         "movl\t%%ecx, 4(%3)\n\t"
; 4059 :         "movl\t8(%1), %%ecx\n\t"
; 4060 :         "sbbl\t8(%2), %%ecx\n\t"
; 4061 :         "movl\t%%ecx, 8(%3)\n\t"
; 4062 :         "movl\t12(%1), %%ecx\n\t"
; 4063 :         "sbbl\t12(%2), %%ecx\n\t"
; 4064 :         "movl\t%%ecx, 12(%3)\n\t"
; 4065 :         "setc\t%0"
; 4066 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 4067 :         :
; 4068 :         : "cc", "memory", "%ecx"
; 4069 : );
; 4070 : #elif defined(_M_IX64)
; 4071 :     __asm__ volatile (
; 4072 :         "addb\t$-1, %0\n\t"
; 4073 :         "movq\t(%1), %%rcx\n\t"
; 4074 :         "sbbq\t(%2), %%rcx\n\t"
; 4075 :         "movq\t%%rcx, (%3)\n\t"
; 4076 :         "movq\t8(%1), %%rcx\n\t"
; 4077 :         "sbbq\t8(%2), %%rcx\n\t"
; 4078 :         "movq\t%%rcx, 8(%3)\n\t"
; 4079 :         "movq\t16(%1), %%rcx\n\t"
; 4080 :         "sbbq\t16(%2), %%rcx\n\t"
; 4081 :         "movq\t%%rcx, 16(%3)\n\t"
; 4082 :         "movq\t24(%1), %%rcx\n\t"
; 4083 :         "sbbq\t24(%2), %%rcx\n\t"
; 4084 :         "movq\t%%rcx, 24(%3)\n\t"
; 4085 :         "setc\t%0"
; 4086 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 4087 :         :
; 4088 :         : "cc", "memory", "%rcx"
; 4089 : );
; 4090 : #else
; 4091 : #error unknown platform
; 4092 : #endif
; 4093 : #else
; 4094 : #error unknown compiler
; 4095 : #endif
; 4096 :     return (c);

	mov	al, BYTE PTR _c$[ebp]

; 4097 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__SUBTRUCT_4WORDS_SBB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__SUBTRUCT_8WORDS_SBB PROC

; 3447 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __E05E7037_autogenerated_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 3448 : #ifdef _MSC_VER
; 3449 :     c = _SUBTRUCT_UNIT(c, xp[0], yp[0], &zp[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3450 :     c = _SUBTRUCT_UNIT(c, xp[1], yp[1], &zp[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3451 :     c = _SUBTRUCT_UNIT(c, xp[2], yp[2], &zp[2]);

	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3452 :     c = _SUBTRUCT_UNIT(c, xp[3], yp[3], &zp[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3453 :     c = _SUBTRUCT_UNIT(c, xp[4], yp[4], &zp[4]);

	mov	edx, 4
	shl	edx, 2
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3454 :     c = _SUBTRUCT_UNIT(c, xp[5], yp[5], &zp[5]);

	mov	ecx, 4
	imul	edx, ecx, 5
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3455 :     c = _SUBTRUCT_UNIT(c, xp[6], yp[6], &zp[6]);

	mov	eax, 4
	imul	ecx, eax, 6
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3456 :     c = _SUBTRUCT_UNIT(c, xp[7], yp[7], &zp[7]);

	mov	edx, 4
	imul	eax, edx, 7
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3457 : #elif defined(__GNUC__)
; 3458 : #ifdef _M_IX86
; 3459 :     __asm__ volatile (
; 3460 :         "addb\t$-1, %0\n\t"
; 3461 :         "movl\t(%1), %%ecx\n\t"
; 3462 :         "sbbl\t(%2), %%ecx\n\t"
; 3463 :         "movl\t%%ecx, (%3)\n\t"
; 3464 :         "movl\t4(%1), %%ecx\n\t"
; 3465 :         "sbbl\t4(%2), %%ecx\n\t"
; 3466 :         "movl\t%%ecx, 4(%3)\n\t"
; 3467 :         "movl\t8(%1), %%ecx\n\t"
; 3468 :         "sbbl\t8(%2), %%ecx\n\t"
; 3469 :         "movl\t%%ecx, 8(%3)\n\t"
; 3470 :         "movl\t12(%1), %%ecx\n\t"
; 3471 :         "sbbl\t12(%2), %%ecx\n\t"
; 3472 :         "movl\t%%ecx, 12(%3)\n\t"
; 3473 :         "movl\t16(%1), %%ecx\n\t"
; 3474 :         "sbbl\t16(%2), %%ecx\n\t"
; 3475 :         "movl\t%%ecx, 16(%3)\n\t"
; 3476 :         "movl\t20(%1), %%ecx\n\t"
; 3477 :         "sbbl\t20(%2), %%ecx\n\t"
; 3478 :         "movl\t%%ecx, 20(%3)\n\t"
; 3479 :         "movl\t24(%1), %%ecx\n\t"
; 3480 :         "sbbl\t24(%2), %%ecx\n\t"
; 3481 :         "movl\t%%ecx, 24(%3)\n\t"
; 3482 :         "movl\t28(%1), %%ecx\n\t"
; 3483 :         "sbbl\t28(%2), %%ecx\n\t"
; 3484 :         "movl\t%%ecx, 28(%3)\n\t"
; 3485 :         "setc\t%0"
; 3486 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 3487 :         :
; 3488 :         : "cc", "memory", "%ecx"
; 3489 : );
; 3490 : #elif defined(_M_IX64)
; 3491 :     __asm__ volatile (
; 3492 :         "addb\t$-1, %0\n\t"
; 3493 :         "movq\t(%1), %%rcx\n\t"
; 3494 :         "sbbq\t(%2), %%rcx\n\t"
; 3495 :         "movq\t%%rcx, (%3)\n\t"
; 3496 :         "movq\t8(%1), %%rcx\n\t"
; 3497 :         "sbbq\t8(%2), %%rcx\n\t"
; 3498 :         "movq\t%%rcx, 8(%3)\n\t"
; 3499 :         "movq\t16(%1), %%rcx\n\t"
; 3500 :         "sbbq\t16(%2), %%rcx\n\t"
; 3501 :         "movq\t%%rcx, 16(%3)\n\t"
; 3502 :         "movq\t24(%1), %%rcx\n\t"
; 3503 :         "sbbq\t24(%2), %%rcx\n\t"
; 3504 :         "movq\t%%rcx, 24(%3)\n\t"
; 3505 :         "movq\t32(%1), %%rcx\n\t"
; 3506 :         "sbbq\t32(%2), %%rcx\n\t"
; 3507 :         "movq\t%%rcx, 32(%3)\n\t"
; 3508 :         "movq\t40(%1), %%rcx\n\t"
; 3509 :         "sbbq\t40(%2), %%rcx\n\t"
; 3510 :         "movq\t%%rcx, 40(%3)\n\t"
; 3511 :         "movq\t48(%1), %%rcx\n\t"
; 3512 :         "sbbq\t48(%2), %%rcx\n\t"
; 3513 :         "movq\t%%rcx, 48(%3)\n\t"
; 3514 :         "movq\t56(%1), %%rcx\n\t"
; 3515 :         "sbbq\t56(%2), %%rcx\n\t"
; 3516 :         "movq\t%%rcx, 56(%3)\n\t"
; 3517 :         "setc\t%0"
; 3518 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 3519 :         :
; 3520 :         : "cc", "memory", "%rcx"
; 3521 : );
; 3522 : #else
; 3523 : #error unknown platform
; 3524 : #endif
; 3525 : #else
; 3526 : #error unknown compiler
; 3527 : #endif
; 3528 :     return (c);

	mov	al, BYTE PTR _c$[ebp]

; 3529 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__SUBTRUCT_8WORDS_SBB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__SUBTRUCT_16WORDS_SBB PROC

; 2487 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __E05E7037_autogenerated_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 2488 : #ifdef _MSC_VER
; 2489 :     c = _SUBTRUCT_UNIT(c, xp[0], yp[0], &zp[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2490 :     c = _SUBTRUCT_UNIT(c, xp[1], yp[1], &zp[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2491 :     c = _SUBTRUCT_UNIT(c, xp[2], yp[2], &zp[2]);

	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2492 :     c = _SUBTRUCT_UNIT(c, xp[3], yp[3], &zp[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2493 :     c = _SUBTRUCT_UNIT(c, xp[4], yp[4], &zp[4]);

	mov	edx, 4
	shl	edx, 2
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2494 :     c = _SUBTRUCT_UNIT(c, xp[5], yp[5], &zp[5]);

	mov	ecx, 4
	imul	edx, ecx, 5
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2495 :     c = _SUBTRUCT_UNIT(c, xp[6], yp[6], &zp[6]);

	mov	eax, 4
	imul	ecx, eax, 6
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2496 :     c = _SUBTRUCT_UNIT(c, xp[7], yp[7], &zp[7]);

	mov	edx, 4
	imul	eax, edx, 7
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2497 :     c = _SUBTRUCT_UNIT(c, xp[8], yp[8], &zp[8]);

	mov	ecx, 4
	shl	ecx, 3
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2498 :     c = _SUBTRUCT_UNIT(c, xp[9], yp[9], &zp[9]);

	mov	eax, 4
	imul	ecx, eax, 9
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 9
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2499 :     c = _SUBTRUCT_UNIT(c, xp[10], yp[10], &zp[10]);

	mov	edx, 4
	imul	eax, edx, 10
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 10
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 10
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2500 :     c = _SUBTRUCT_UNIT(c, xp[11], yp[11], &zp[11]);

	mov	ecx, 4
	imul	edx, ecx, 11
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 11
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2501 :     c = _SUBTRUCT_UNIT(c, xp[12], yp[12], &zp[12]);

	mov	eax, 4
	imul	ecx, eax, 12
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 12
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2502 :     c = _SUBTRUCT_UNIT(c, xp[13], yp[13], &zp[13]);

	mov	edx, 4
	imul	eax, edx, 13
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 13
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2503 :     c = _SUBTRUCT_UNIT(c, xp[14], yp[14], &zp[14]);

	mov	ecx, 4
	imul	edx, ecx, 14
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 14
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2504 :     c = _SUBTRUCT_UNIT(c, xp[15], yp[15], &zp[15]);

	mov	eax, 4
	imul	ecx, eax, 15
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 15
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 15
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2505 : #elif defined(__GNUC__)
; 2506 : #ifdef _M_IX86
; 2507 :     __asm__ volatile (
; 2508 :         "addb\t$-1, %0\n\t"
; 2509 :         "movl\t(%1), %%ecx\n\t"
; 2510 :         "sbbl\t(%2), %%ecx\n\t"
; 2511 :         "movl\t%%ecx, (%3)\n\t"
; 2512 :         "movl\t4(%1), %%ecx\n\t"
; 2513 :         "sbbl\t4(%2), %%ecx\n\t"
; 2514 :         "movl\t%%ecx, 4(%3)\n\t"
; 2515 :         "movl\t8(%1), %%ecx\n\t"
; 2516 :         "sbbl\t8(%2), %%ecx\n\t"
; 2517 :         "movl\t%%ecx, 8(%3)\n\t"
; 2518 :         "movl\t12(%1), %%ecx\n\t"
; 2519 :         "sbbl\t12(%2), %%ecx\n\t"
; 2520 :         "movl\t%%ecx, 12(%3)\n\t"
; 2521 :         "movl\t16(%1), %%ecx\n\t"
; 2522 :         "sbbl\t16(%2), %%ecx\n\t"
; 2523 :         "movl\t%%ecx, 16(%3)\n\t"
; 2524 :         "movl\t20(%1), %%ecx\n\t"
; 2525 :         "sbbl\t20(%2), %%ecx\n\t"
; 2526 :         "movl\t%%ecx, 20(%3)\n\t"
; 2527 :         "movl\t24(%1), %%ecx\n\t"
; 2528 :         "sbbl\t24(%2), %%ecx\n\t"
; 2529 :         "movl\t%%ecx, 24(%3)\n\t"
; 2530 :         "movl\t28(%1), %%ecx\n\t"
; 2531 :         "sbbl\t28(%2), %%ecx\n\t"
; 2532 :         "movl\t%%ecx, 28(%3)\n\t"
; 2533 :         "movl\t32(%1), %%ecx\n\t"
; 2534 :         "sbbl\t32(%2), %%ecx\n\t"
; 2535 :         "movl\t%%ecx, 32(%3)\n\t"
; 2536 :         "movl\t36(%1), %%ecx\n\t"
; 2537 :         "sbbl\t36(%2), %%ecx\n\t"
; 2538 :         "movl\t%%ecx, 36(%3)\n\t"
; 2539 :         "movl\t40(%1), %%ecx\n\t"
; 2540 :         "sbbl\t40(%2), %%ecx\n\t"
; 2541 :         "movl\t%%ecx, 40(%3)\n\t"
; 2542 :         "movl\t44(%1), %%ecx\n\t"
; 2543 :         "sbbl\t44(%2), %%ecx\n\t"
; 2544 :         "movl\t%%ecx, 44(%3)\n\t"
; 2545 :         "movl\t48(%1), %%ecx\n\t"
; 2546 :         "sbbl\t48(%2), %%ecx\n\t"
; 2547 :         "movl\t%%ecx, 48(%3)\n\t"
; 2548 :         "movl\t52(%1), %%ecx\n\t"
; 2549 :         "sbbl\t52(%2), %%ecx\n\t"
; 2550 :         "movl\t%%ecx, 52(%3)\n\t"
; 2551 :         "movl\t56(%1), %%ecx\n\t"
; 2552 :         "sbbl\t56(%2), %%ecx\n\t"
; 2553 :         "movl\t%%ecx, 56(%3)\n\t"
; 2554 :         "movl\t60(%1), %%ecx\n\t"
; 2555 :         "sbbl\t60(%2), %%ecx\n\t"
; 2556 :         "movl\t%%ecx, 60(%3)\n\t"
; 2557 :         "setc\t%0"
; 2558 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2559 :         :
; 2560 :         : "cc", "memory", "%ecx"
; 2561 : );
; 2562 : #elif defined(_M_IX64)
; 2563 :     __asm__ volatile (
; 2564 :         "addb\t$-1, %0\n\t"
; 2565 :         "movq\t(%1), %%rcx\n\t"
; 2566 :         "sbbq\t(%2), %%rcx\n\t"
; 2567 :         "movq\t%%rcx, (%3)\n\t"
; 2568 :         "movq\t8(%1), %%rcx\n\t"
; 2569 :         "sbbq\t8(%2), %%rcx\n\t"
; 2570 :         "movq\t%%rcx, 8(%3)\n\t"
; 2571 :         "movq\t16(%1), %%rcx\n\t"
; 2572 :         "sbbq\t16(%2), %%rcx\n\t"
; 2573 :         "movq\t%%rcx, 16(%3)\n\t"
; 2574 :         "movq\t24(%1), %%rcx\n\t"
; 2575 :         "sbbq\t24(%2), %%rcx\n\t"
; 2576 :         "movq\t%%rcx, 24(%3)\n\t"
; 2577 :         "movq\t32(%1), %%rcx\n\t"
; 2578 :         "sbbq\t32(%2), %%rcx\n\t"
; 2579 :         "movq\t%%rcx, 32(%3)\n\t"
; 2580 :         "movq\t40(%1), %%rcx\n\t"
; 2581 :         "sbbq\t40(%2), %%rcx\n\t"
; 2582 :         "movq\t%%rcx, 40(%3)\n\t"
; 2583 :         "movq\t48(%1), %%rcx\n\t"
; 2584 :         "sbbq\t48(%2), %%rcx\n\t"
; 2585 :         "movq\t%%rcx, 48(%3)\n\t"
; 2586 :         "movq\t56(%1), %%rcx\n\t"
; 2587 :         "sbbq\t56(%2), %%rcx\n\t"
; 2588 :         "movq\t%%rcx, 56(%3)\n\t"
; 2589 :         "movq\t64(%1), %%rcx\n\t"
; 2590 :         "sbbq\t64(%2), %%rcx\n\t"
; 2591 :         "movq\t%%rcx, 64(%3)\n\t"
; 2592 :         "movq\t72(%1), %%rcx\n\t"
; 2593 :         "sbbq\t72(%2), %%rcx\n\t"
; 2594 :         "movq\t%%rcx, 72(%3)\n\t"
; 2595 :         "movq\t80(%1), %%rcx\n\t"
; 2596 :         "sbbq\t80(%2), %%rcx\n\t"
; 2597 :         "movq\t%%rcx, 80(%3)\n\t"
; 2598 :         "movq\t88(%1), %%rcx\n\t"
; 2599 :         "sbbq\t88(%2), %%rcx\n\t"
; 2600 :         "movq\t%%rcx, 88(%3)\n\t"
; 2601 :         "movq\t96(%1), %%rcx\n\t"
; 2602 :         "sbbq\t96(%2), %%rcx\n\t"
; 2603 :         "movq\t%%rcx, 96(%3)\n\t"
; 2604 :         "movq\t104(%1), %%rcx\n\t"
; 2605 :         "sbbq\t104(%2), %%rcx\n\t"
; 2606 :         "movq\t%%rcx, 104(%3)\n\t"
; 2607 :         "movq\t112(%1), %%rcx\n\t"
; 2608 :         "sbbq\t112(%2), %%rcx\n\t"
; 2609 :         "movq\t%%rcx, 112(%3)\n\t"
; 2610 :         "movq\t120(%1), %%rcx\n\t"
; 2611 :         "sbbq\t120(%2), %%rcx\n\t"
; 2612 :         "movq\t%%rcx, 120(%3)\n\t"
; 2613 :         "setc\t%0"
; 2614 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2615 :         :
; 2616 :         : "cc", "memory", "%rcx"
; 2617 : );
; 2618 : #else
; 2619 : #error unknown platform
; 2620 : #endif
; 2621 : #else
; 2622 : #error unknown compiler
; 2623 : #endif
; 2624 :     return (c);

	mov	al, BYTE PTR _c$[ebp]

; 2625 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__SUBTRUCT_16WORDS_SBB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__SUBTRUCT_32WORDS_SBB PROC

; 799  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __E05E7037_autogenerated_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 800  : #ifdef _MSC_VER
; 801  :     c = _SUBTRUCT_UNIT(c, xp[0], yp[0], &zp[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 802  :     c = _SUBTRUCT_UNIT(c, xp[1], yp[1], &zp[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 803  :     c = _SUBTRUCT_UNIT(c, xp[2], yp[2], &zp[2]);

	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 804  :     c = _SUBTRUCT_UNIT(c, xp[3], yp[3], &zp[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 805  :     c = _SUBTRUCT_UNIT(c, xp[4], yp[4], &zp[4]);

	mov	edx, 4
	shl	edx, 2
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 806  :     c = _SUBTRUCT_UNIT(c, xp[5], yp[5], &zp[5]);

	mov	ecx, 4
	imul	edx, ecx, 5
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 807  :     c = _SUBTRUCT_UNIT(c, xp[6], yp[6], &zp[6]);

	mov	eax, 4
	imul	ecx, eax, 6
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 808  :     c = _SUBTRUCT_UNIT(c, xp[7], yp[7], &zp[7]);

	mov	edx, 4
	imul	eax, edx, 7
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 809  :     c = _SUBTRUCT_UNIT(c, xp[8], yp[8], &zp[8]);

	mov	ecx, 4
	shl	ecx, 3
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 810  :     c = _SUBTRUCT_UNIT(c, xp[9], yp[9], &zp[9]);

	mov	eax, 4
	imul	ecx, eax, 9
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 9
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 811  :     c = _SUBTRUCT_UNIT(c, xp[10], yp[10], &zp[10]);

	mov	edx, 4
	imul	eax, edx, 10
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 10
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 10
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 812  :     c = _SUBTRUCT_UNIT(c, xp[11], yp[11], &zp[11]);

	mov	ecx, 4
	imul	edx, ecx, 11
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 11
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 813  :     c = _SUBTRUCT_UNIT(c, xp[12], yp[12], &zp[12]);

	mov	eax, 4
	imul	ecx, eax, 12
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 12
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 814  :     c = _SUBTRUCT_UNIT(c, xp[13], yp[13], &zp[13]);

	mov	edx, 4
	imul	eax, edx, 13
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 13
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 815  :     c = _SUBTRUCT_UNIT(c, xp[14], yp[14], &zp[14]);

	mov	ecx, 4
	imul	edx, ecx, 14
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 14
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 816  :     c = _SUBTRUCT_UNIT(c, xp[15], yp[15], &zp[15]);

	mov	eax, 4
	imul	ecx, eax, 15
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 15
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 15
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 817  :     c = _SUBTRUCT_UNIT(c, xp[16], yp[16], &zp[16]);

	mov	edx, 4
	shl	edx, 4
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 4
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 4
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 818  :     c = _SUBTRUCT_UNIT(c, xp[17], yp[17], &zp[17]);

	mov	ecx, 4
	imul	edx, ecx, 17
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 17
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 17
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 819  :     c = _SUBTRUCT_UNIT(c, xp[18], yp[18], &zp[18]);

	mov	eax, 4
	imul	ecx, eax, 18
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 18
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 18
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 820  :     c = _SUBTRUCT_UNIT(c, xp[19], yp[19], &zp[19]);

	mov	edx, 4
	imul	eax, edx, 19
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 19
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 19
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 821  :     c = _SUBTRUCT_UNIT(c, xp[20], yp[20], &zp[20]);

	mov	ecx, 4
	imul	edx, ecx, 20
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 20
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 822  :     c = _SUBTRUCT_UNIT(c, xp[21], yp[21], &zp[21]);

	mov	eax, 4
	imul	ecx, eax, 21
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 21
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 21
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 823  :     c = _SUBTRUCT_UNIT(c, xp[22], yp[22], &zp[22]);

	mov	edx, 4
	imul	eax, edx, 22
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 22
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 22
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 824  :     c = _SUBTRUCT_UNIT(c, xp[23], yp[23], &zp[23]);

	mov	ecx, 4
	imul	edx, ecx, 23
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 23
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 23
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 825  :     c = _SUBTRUCT_UNIT(c, xp[24], yp[24], &zp[24]);

	mov	eax, 4
	imul	ecx, eax, 24
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 24
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 24
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 826  :     c = _SUBTRUCT_UNIT(c, xp[25], yp[25], &zp[25]);

	mov	edx, 4
	imul	eax, edx, 25
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 25
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 25
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 827  :     c = _SUBTRUCT_UNIT(c, xp[26], yp[26], &zp[26]);

	mov	ecx, 4
	imul	edx, ecx, 26
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 26
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 26
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 828  :     c = _SUBTRUCT_UNIT(c, xp[27], yp[27], &zp[27]);

	mov	eax, 4
	imul	ecx, eax, 27
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 27
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 27
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 829  :     c = _SUBTRUCT_UNIT(c, xp[28], yp[28], &zp[28]);

	mov	edx, 4
	imul	eax, edx, 28
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 28
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 28
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 830  :     c = _SUBTRUCT_UNIT(c, xp[29], yp[29], &zp[29]);

	mov	ecx, 4
	imul	edx, ecx, 29
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 29
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 29
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 831  :     c = _SUBTRUCT_UNIT(c, xp[30], yp[30], &zp[30]);

	mov	eax, 4
	imul	ecx, eax, 30
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 30
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 30
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 832  :     c = _SUBTRUCT_UNIT(c, xp[31], yp[31], &zp[31]);

	mov	edx, 4
	imul	eax, edx, 31
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 31
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 31
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 833  : #elif defined(__GNUC__)
; 834  : #ifdef _M_IX86
; 835  :     __asm__ volatile (
; 836  :         "addb\t$-1, %0\n\t"
; 837  :         "movl\t(%1), %%ecx\n\t"
; 838  :         "sbbl\t(%2), %%ecx\n\t"
; 839  :         "movl\t%%ecx, (%3)\n\t"
; 840  :         "movl\t4(%1), %%ecx\n\t"
; 841  :         "sbbl\t4(%2), %%ecx\n\t"
; 842  :         "movl\t%%ecx, 4(%3)\n\t"
; 843  :         "movl\t8(%1), %%ecx\n\t"
; 844  :         "sbbl\t8(%2), %%ecx\n\t"
; 845  :         "movl\t%%ecx, 8(%3)\n\t"
; 846  :         "movl\t12(%1), %%ecx\n\t"
; 847  :         "sbbl\t12(%2), %%ecx\n\t"
; 848  :         "movl\t%%ecx, 12(%3)\n\t"
; 849  :         "movl\t16(%1), %%ecx\n\t"
; 850  :         "sbbl\t16(%2), %%ecx\n\t"
; 851  :         "movl\t%%ecx, 16(%3)\n\t"
; 852  :         "movl\t20(%1), %%ecx\n\t"
; 853  :         "sbbl\t20(%2), %%ecx\n\t"
; 854  :         "movl\t%%ecx, 20(%3)\n\t"
; 855  :         "movl\t24(%1), %%ecx\n\t"
; 856  :         "sbbl\t24(%2), %%ecx\n\t"
; 857  :         "movl\t%%ecx, 24(%3)\n\t"
; 858  :         "movl\t28(%1), %%ecx\n\t"
; 859  :         "sbbl\t28(%2), %%ecx\n\t"
; 860  :         "movl\t%%ecx, 28(%3)\n\t"
; 861  :         "movl\t32(%1), %%ecx\n\t"
; 862  :         "sbbl\t32(%2), %%ecx\n\t"
; 863  :         "movl\t%%ecx, 32(%3)\n\t"
; 864  :         "movl\t36(%1), %%ecx\n\t"
; 865  :         "sbbl\t36(%2), %%ecx\n\t"
; 866  :         "movl\t%%ecx, 36(%3)\n\t"
; 867  :         "movl\t40(%1), %%ecx\n\t"
; 868  :         "sbbl\t40(%2), %%ecx\n\t"
; 869  :         "movl\t%%ecx, 40(%3)\n\t"
; 870  :         "movl\t44(%1), %%ecx\n\t"
; 871  :         "sbbl\t44(%2), %%ecx\n\t"
; 872  :         "movl\t%%ecx, 44(%3)\n\t"
; 873  :         "movl\t48(%1), %%ecx\n\t"
; 874  :         "sbbl\t48(%2), %%ecx\n\t"
; 875  :         "movl\t%%ecx, 48(%3)\n\t"
; 876  :         "movl\t52(%1), %%ecx\n\t"
; 877  :         "sbbl\t52(%2), %%ecx\n\t"
; 878  :         "movl\t%%ecx, 52(%3)\n\t"
; 879  :         "movl\t56(%1), %%ecx\n\t"
; 880  :         "sbbl\t56(%2), %%ecx\n\t"
; 881  :         "movl\t%%ecx, 56(%3)\n\t"
; 882  :         "movl\t60(%1), %%ecx\n\t"
; 883  :         "sbbl\t60(%2), %%ecx\n\t"
; 884  :         "movl\t%%ecx, 60(%3)\n\t"
; 885  :         "movl\t64(%1), %%ecx\n\t"
; 886  :         "sbbl\t64(%2), %%ecx\n\t"
; 887  :         "movl\t%%ecx, 64(%3)\n\t"
; 888  :         "movl\t68(%1), %%ecx\n\t"
; 889  :         "sbbl\t68(%2), %%ecx\n\t"
; 890  :         "movl\t%%ecx, 68(%3)\n\t"
; 891  :         "movl\t72(%1), %%ecx\n\t"
; 892  :         "sbbl\t72(%2), %%ecx\n\t"
; 893  :         "movl\t%%ecx, 72(%3)\n\t"
; 894  :         "movl\t76(%1), %%ecx\n\t"
; 895  :         "sbbl\t76(%2), %%ecx\n\t"
; 896  :         "movl\t%%ecx, 76(%3)\n\t"
; 897  :         "movl\t80(%1), %%ecx\n\t"
; 898  :         "sbbl\t80(%2), %%ecx\n\t"
; 899  :         "movl\t%%ecx, 80(%3)\n\t"
; 900  :         "movl\t84(%1), %%ecx\n\t"
; 901  :         "sbbl\t84(%2), %%ecx\n\t"
; 902  :         "movl\t%%ecx, 84(%3)\n\t"
; 903  :         "movl\t88(%1), %%ecx\n\t"
; 904  :         "sbbl\t88(%2), %%ecx\n\t"
; 905  :         "movl\t%%ecx, 88(%3)\n\t"
; 906  :         "movl\t92(%1), %%ecx\n\t"
; 907  :         "sbbl\t92(%2), %%ecx\n\t"
; 908  :         "movl\t%%ecx, 92(%3)\n\t"
; 909  :         "movl\t96(%1), %%ecx\n\t"
; 910  :         "sbbl\t96(%2), %%ecx\n\t"
; 911  :         "movl\t%%ecx, 96(%3)\n\t"
; 912  :         "movl\t100(%1), %%ecx\n\t"
; 913  :         "sbbl\t100(%2), %%ecx\n\t"
; 914  :         "movl\t%%ecx, 100(%3)\n\t"
; 915  :         "movl\t104(%1), %%ecx\n\t"
; 916  :         "sbbl\t104(%2), %%ecx\n\t"
; 917  :         "movl\t%%ecx, 104(%3)\n\t"
; 918  :         "movl\t108(%1), %%ecx\n\t"
; 919  :         "sbbl\t108(%2), %%ecx\n\t"
; 920  :         "movl\t%%ecx, 108(%3)\n\t"
; 921  :         "movl\t112(%1), %%ecx\n\t"
; 922  :         "sbbl\t112(%2), %%ecx\n\t"
; 923  :         "movl\t%%ecx, 112(%3)\n\t"
; 924  :         "movl\t116(%1), %%ecx\n\t"
; 925  :         "sbbl\t116(%2), %%ecx\n\t"
; 926  :         "movl\t%%ecx, 116(%3)\n\t"
; 927  :         "movl\t120(%1), %%ecx\n\t"
; 928  :         "sbbl\t120(%2), %%ecx\n\t"
; 929  :         "movl\t%%ecx, 120(%3)\n\t"
; 930  :         "movl\t124(%1), %%ecx\n\t"
; 931  :         "sbbl\t124(%2), %%ecx\n\t"
; 932  :         "movl\t%%ecx, 124(%3)\n\t"
; 933  :         "setc\t%0"
; 934  :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 935  :         :
; 936  :         : "cc", "memory", "%ecx"
; 937  : );
; 938  : #elif defined(_M_IX64)
; 939  :     __asm__ volatile (
; 940  :         "addb\t$-1, %0\n\t"
; 941  :         "movq\t(%1), %%rcx\n\t"
; 942  :         "sbbq\t(%2), %%rcx\n\t"
; 943  :         "movq\t%%rcx, (%3)\n\t"
; 944  :         "movq\t8(%1), %%rcx\n\t"
; 945  :         "sbbq\t8(%2), %%rcx\n\t"
; 946  :         "movq\t%%rcx, 8(%3)\n\t"
; 947  :         "movq\t16(%1), %%rcx\n\t"
; 948  :         "sbbq\t16(%2), %%rcx\n\t"
; 949  :         "movq\t%%rcx, 16(%3)\n\t"
; 950  :         "movq\t24(%1), %%rcx\n\t"
; 951  :         "sbbq\t24(%2), %%rcx\n\t"
; 952  :         "movq\t%%rcx, 24(%3)\n\t"
; 953  :         "movq\t32(%1), %%rcx\n\t"
; 954  :         "sbbq\t32(%2), %%rcx\n\t"
; 955  :         "movq\t%%rcx, 32(%3)\n\t"
; 956  :         "movq\t40(%1), %%rcx\n\t"
; 957  :         "sbbq\t40(%2), %%rcx\n\t"
; 958  :         "movq\t%%rcx, 40(%3)\n\t"
; 959  :         "movq\t48(%1), %%rcx\n\t"
; 960  :         "sbbq\t48(%2), %%rcx\n\t"
; 961  :         "movq\t%%rcx, 48(%3)\n\t"
; 962  :         "movq\t56(%1), %%rcx\n\t"
; 963  :         "sbbq\t56(%2), %%rcx\n\t"
; 964  :         "movq\t%%rcx, 56(%3)\n\t"
; 965  :         "movq\t64(%1), %%rcx\n\t"
; 966  :         "sbbq\t64(%2), %%rcx\n\t"
; 967  :         "movq\t%%rcx, 64(%3)\n\t"
; 968  :         "movq\t72(%1), %%rcx\n\t"
; 969  :         "sbbq\t72(%2), %%rcx\n\t"
; 970  :         "movq\t%%rcx, 72(%3)\n\t"
; 971  :         "movq\t80(%1), %%rcx\n\t"
; 972  :         "sbbq\t80(%2), %%rcx\n\t"
; 973  :         "movq\t%%rcx, 80(%3)\n\t"
; 974  :         "movq\t88(%1), %%rcx\n\t"
; 975  :         "sbbq\t88(%2), %%rcx\n\t"
; 976  :         "movq\t%%rcx, 88(%3)\n\t"
; 977  :         "movq\t96(%1), %%rcx\n\t"
; 978  :         "sbbq\t96(%2), %%rcx\n\t"
; 979  :         "movq\t%%rcx, 96(%3)\n\t"
; 980  :         "movq\t104(%1), %%rcx\n\t"
; 981  :         "sbbq\t104(%2), %%rcx\n\t"
; 982  :         "movq\t%%rcx, 104(%3)\n\t"
; 983  :         "movq\t112(%1), %%rcx\n\t"
; 984  :         "sbbq\t112(%2), %%rcx\n\t"
; 985  :         "movq\t%%rcx, 112(%3)\n\t"
; 986  :         "movq\t120(%1), %%rcx\n\t"
; 987  :         "sbbq\t120(%2), %%rcx\n\t"
; 988  :         "movq\t%%rcx, 120(%3)\n\t"
; 989  :         "movq\t128(%1), %%rcx\n\t"
; 990  :         "sbbq\t128(%2), %%rcx\n\t"
; 991  :         "movq\t%%rcx, 128(%3)\n\t"
; 992  :         "movq\t136(%1), %%rcx\n\t"
; 993  :         "sbbq\t136(%2), %%rcx\n\t"
; 994  :         "movq\t%%rcx, 136(%3)\n\t"
; 995  :         "movq\t144(%1), %%rcx\n\t"
; 996  :         "sbbq\t144(%2), %%rcx\n\t"
; 997  :         "movq\t%%rcx, 144(%3)\n\t"
; 998  :         "movq\t152(%1), %%rcx\n\t"
; 999  :         "sbbq\t152(%2), %%rcx\n\t"
; 1000 :         "movq\t%%rcx, 152(%3)\n\t"
; 1001 :         "movq\t160(%1), %%rcx\n\t"
; 1002 :         "sbbq\t160(%2), %%rcx\n\t"
; 1003 :         "movq\t%%rcx, 160(%3)\n\t"
; 1004 :         "movq\t168(%1), %%rcx\n\t"
; 1005 :         "sbbq\t168(%2), %%rcx\n\t"
; 1006 :         "movq\t%%rcx, 168(%3)\n\t"
; 1007 :         "movq\t176(%1), %%rcx\n\t"
; 1008 :         "sbbq\t176(%2), %%rcx\n\t"
; 1009 :         "movq\t%%rcx, 176(%3)\n\t"
; 1010 :         "movq\t184(%1), %%rcx\n\t"
; 1011 :         "sbbq\t184(%2), %%rcx\n\t"
; 1012 :         "movq\t%%rcx, 184(%3)\n\t"
; 1013 :         "movq\t192(%1), %%rcx\n\t"
; 1014 :         "sbbq\t192(%2), %%rcx\n\t"
; 1015 :         "movq\t%%rcx, 192(%3)\n\t"
; 1016 :         "movq\t200(%1), %%rcx\n\t"
; 1017 :         "sbbq\t200(%2), %%rcx\n\t"
; 1018 :         "movq\t%%rcx, 200(%3)\n\t"
; 1019 :         "movq\t208(%1), %%rcx\n\t"
; 1020 :         "sbbq\t208(%2), %%rcx\n\t"
; 1021 :         "movq\t%%rcx, 208(%3)\n\t"
; 1022 :         "movq\t216(%1), %%rcx\n\t"
; 1023 :         "sbbq\t216(%2), %%rcx\n\t"
; 1024 :         "movq\t%%rcx, 216(%3)\n\t"
; 1025 :         "movq\t224(%1), %%rcx\n\t"
; 1026 :         "sbbq\t224(%2), %%rcx\n\t"
; 1027 :         "movq\t%%rcx, 224(%3)\n\t"
; 1028 :         "movq\t232(%1), %%rcx\n\t"
; 1029 :         "sbbq\t232(%2), %%rcx\n\t"
; 1030 :         "movq\t%%rcx, 232(%3)\n\t"
; 1031 :         "movq\t240(%1), %%rcx\n\t"
; 1032 :         "sbbq\t240(%2), %%rcx\n\t"
; 1033 :         "movq\t%%rcx, 240(%3)\n\t"
; 1034 :         "movq\t248(%1), %%rcx\n\t"
; 1035 :         "sbbq\t248(%2), %%rcx\n\t"
; 1036 :         "movq\t%%rcx, 248(%3)\n\t"
; 1037 :         "setc\t%0"
; 1038 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1039 :         :
; 1040 :         : "cc", "memory", "%rcx"
; 1041 : );
; 1042 : #else
; 1043 : #error unknown platform
; 1044 : #endif
; 1045 : #else
; 1046 : #error unknown compiler
; 1047 : #endif
; 1048 :     return (c);

	mov	al, BYTE PTR _c$[ebp]

; 1049 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__SUBTRUCT_32WORDS_SBB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT PROC

; 623  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 624  :         if (x == 0)

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 625  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 626  : #ifdef _M_IX86
; 627  :         _UINT32_T pos;
; 628  : #ifdef _MSC_VER
; 629  :         _BitScanReverse(&pos, x);

	bsr	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _pos$[ebp], eax

; 630  : #elif defined(__GNUC__)
; 631  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 632  : #else
; 633  : #error unknown compiler
; 634  : #endif
; 635  : #elif defined(_M_X64)
; 636  : #ifdef _MSC_VER
; 637  :         _UINT32_T pos;
; 638  :         _BitScanReverse64(&pos, x);
; 639  : #elif defined(__GNUC__)
; 640  :         _UINT64_T pos;
; 641  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 642  : #else
; 643  : #error unknown compiler
; 644  : #endif
; 645  : #else
; 646  : #error unknown platform
; 647  : #endif
; 648  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, DWORD PTR _pos$[ebp]
$LN1@LZCNT_ALT_:

; 649  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@LZCNT_ALT_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@LZCNT_ALT_:
	DD	1
	DD	$LN5@LZCNT_ALT_
$LN5@LZCNT_ALT_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@LZCNT_ALT_
$LN4@LZCNT_ALT_:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
__LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 4
__LZCNT_ALT_32 PROC

; 590  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 591  :         if (x == 0)

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 592  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 593  :         _UINT32_T pos;
; 594  : #ifdef _MSC_VER
; 595  :         _BitScanReverse(&pos, x);

	bsr	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _pos$[ebp], eax

; 596  : #elif defined(__GNUC__)
; 597  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 598  : #else
; 599  : #error unknown compiler
; 600  : #endif
; 601  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, DWORD PTR _pos$[ebp]
$LN1@LZCNT_ALT_:

; 602  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@LZCNT_ALT_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@LZCNT_ALT_:
	DD	1
	DD	$LN5@LZCNT_ALT_
$LN5@LZCNT_ALT_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@LZCNT_ALT_
$LN4@LZCNT_ALT_:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
__LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_borrow$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__SUBTRUCT_UNIT PROC

; 263  :     {

	push	ebp
	mov	ebp, esp
	push	ebx
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 264  : #ifdef _M_IX86
; 265  :         return (_subborrow_u32(borrow, u, v, w));

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _u$[ebp]
	mov	bl, BYTE PTR _borrow$[ebp]
	add	bl, 255					; 000000ffH
	sbb	edx, ecx
	setb	cl
	mov	DWORD PTR [eax], edx
	mov	al, cl

; 266  : #elif defined(_M_X64)
; 267  :         return (_subborrow_u64(borrow, u, v, w));
; 268  : #else
; 269  : #error unknown platform
; 270  : #endif
; 271  :     }

	pop	ebx
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__SUBTRUCT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC

; 176  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	eax, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR _value$[ebp+4]
	mov	cl, 32					; 00000020H
	call	__aullshr
	mov	ecx, DWORD PTR _result_high$[ebp]
	mov	DWORD PTR [ecx], eax

; 178  :         return ((_UINT32_T)value);

	mov	eax, DWORD PTR _value$[ebp]

; 179  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_value_high$ = 8					; size = 4
_value_low$ = 12					; size = 4
__FROMWORDTODWORD PROC

; 171  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	edx, edx
	mov	eax, DWORD PTR _value_high$[ebp]
	mov	cl, 32					; 00000020H
	call	__allshl
	xor	ecx, ecx
	or	eax, DWORD PTR _value_low$[ebp]
	or	edx, ecx

; 173  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__FROMWORDTODWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_subtruct.c
_TEXT	SEGMENT
tv142 = -52						; size = 4
_nz_light_check_code$1 = -44				; size = 4
_z_bit_count$2 = -36					; size = 4
_y_bit_count$3 = -32					; size = 4
_x_bit_count$4 = -28					; size = 4
_nz$ = -20						; size = 4
_result$ = -12						; size = 4
_ny$ = -8						; size = 4
_nx$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_o$ = 16						; size = 4
_PMC_Subtruct_X_X@12 PROC

; 658  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6B07DC87_pmc_subtruct@c
	call	@__CheckForDebuggerJustMyCode@4

; 659  :     if (x == NULL)

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN2@PMC_Subtru

; 660  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN2@PMC_Subtru:

; 661  :     if (y == NULL)

	cmp	DWORD PTR _y$[ebp], 0
	jne	SHORT $LN3@PMC_Subtru

; 662  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN3@PMC_Subtru:

; 663  :     if (o == NULL)

	cmp	DWORD PTR _o$[ebp], 0
	jne	SHORT $LN4@PMC_Subtru

; 664  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN4@PMC_Subtru:

; 665  :     NUMBER_HEADER* nx = (NUMBER_HEADER*)x;

	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _nx$[ebp], eax

; 666  :     NUMBER_HEADER* ny = (NUMBER_HEADER*)y;

	mov	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR _ny$[ebp], ecx

; 667  :     PMC_STATUS_CODE result;
; 668  :     if ((result = CheckNumber(nx)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nx$[ebp]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Subtru

; 669  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN5@PMC_Subtru:

; 670  :     if ((result = CheckNumber(ny)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _ny$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Subtru

; 671  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN6@PMC_Subtru:

; 672  :     NUMBER_HEADER* nz;
; 673  :     if (nx->IS_ZERO)

	mov	ecx, DWORD PTR _nx$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 1
	je	SHORT $LN7@PMC_Subtru

; 674  :     {
; 675  :         if (ny->IS_ZERO)

	mov	eax, DWORD PTR _ny$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN9@PMC_Subtru

; 676  :         {
; 677  :             // y が 0 である場合
; 678  : 
; 679  :             // x と y がともに 0 であるので、演算結果の 0 を呼び出し元に返す。
; 680  :             *o = (PMC_HANDLE_UINT)&number_zero;

	mov	edx, DWORD PTR _o$[ebp]
	mov	DWORD PTR [edx], OFFSET _number_zero

; 681  :         }

	jmp	SHORT $LN10@PMC_Subtru
$LN9@PMC_Subtru:

; 682  :         else
; 683  :         {
; 684  :             // y が 0 ではない場合
; 685  : 
; 686  :             // 演算結果は負となってしまうのでエラーを返す。
; 687  :             return (PMC_STATUS_OVERFLOW);

	mov	eax, -2					; fffffffeH
	jmp	$LN1@PMC_Subtru
$LN10@PMC_Subtru:

; 688  :         }
; 689  :     }

	jmp	$LN8@PMC_Subtru
$LN7@PMC_Subtru:

; 690  :     else
; 691  :     {
; 692  :         // x が 0 ではない場合
; 693  : 
; 694  :         if (ny->IS_ZERO)

	mov	eax, DWORD PTR _ny$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN11@PMC_Subtru

; 695  :         {
; 696  :             // y が 0 である場合
; 697  : 
; 698  :             // 演算結果となる x の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 699  :             if ((result = DuplicateNumber(nx, &nz)) != PMC_STATUS_OK)

	lea	edx, DWORD PTR _nz$[ebp]
	push	edx
	mov	eax, DWORD PTR _nx$[ebp]
	push	eax
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_Subtru

; 700  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN13@PMC_Subtru:

; 701  :         }

	jmp	$LN12@PMC_Subtru
$LN11@PMC_Subtru:

; 702  :         else
; 703  :         {
; 704  :             // x と y がともに 0 ではない場合
; 705  : 
; 706  :             // x と y の差を計算する
; 707  :             __UNIT_TYPE x_bit_count = nx->UNIT_BIT_COUNT;

	mov	ecx, DWORD PTR _nx$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _x_bit_count$4[ebp], edx

; 708  :             __UNIT_TYPE y_bit_count = ny->UNIT_BIT_COUNT;

	mov	eax, DWORD PTR _ny$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _y_bit_count$3[ebp], ecx

; 709  :             if (x_bit_count < y_bit_count)

	mov	edx, DWORD PTR _x_bit_count$4[ebp]
	cmp	edx, DWORD PTR _y_bit_count$3[ebp]
	jae	SHORT $LN14@PMC_Subtru

; 710  :             {
; 711  :                 // 演算結果は負となってしまうのでエラーを返す。
; 712  :                 return (PMC_STATUS_OVERFLOW);

	mov	eax, -2					; fffffffeH
	jmp	$LN1@PMC_Subtru
$LN14@PMC_Subtru:

; 713  :             }
; 714  :             __UNIT_TYPE z_bit_count = x_bit_count;

	mov	eax, DWORD PTR _x_bit_count$4[ebp]
	mov	DWORD PTR _z_bit_count$2[ebp], eax

; 715  :             __UNIT_TYPE nz_light_check_code;
; 716  :             if ((result = AllocateNumber(&nz, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)

	lea	ecx, DWORD PTR _nz_light_check_code$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _z_bit_count$2[ebp]
	push	edx
	lea	eax, DWORD PTR _nz$[ebp]
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN15@PMC_Subtru

; 717  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN15@PMC_Subtru:

; 718  :             if ((result = Subtruct_Imp(nx->BLOCK, nx->UNIT_WORD_COUNT, ny->BLOCK, ny->UNIT_WORD_COUNT, nz->BLOCK, nz->BLOCK_COUNT)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _nz$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR _nz$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR _ny$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _ny$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	mov	eax, DWORD PTR _nx$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _nx$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	call	_Subtruct_Imp
	add	esp, 24					; 00000018H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN16@PMC_Subtru

; 719  :             {
; 720  :                 DeallocateNumber(nz);

	mov	ecx, DWORD PTR _nz$[ebp]
	push	ecx
	call	_DeallocateNumber
	add	esp, 4

; 721  :                 return (result == PMC_STATUS_INTERNAL_BORROW ? PMC_STATUS_OVERFLOW : result);

	cmp	DWORD PTR _result$[ebp], -258		; fffffefeH
	jne	SHORT $LN20@PMC_Subtru
	mov	DWORD PTR tv142[ebp], -2		; fffffffeH
	jmp	SHORT $LN21@PMC_Subtru
$LN20@PMC_Subtru:
	mov	edx, DWORD PTR _result$[ebp]
	mov	DWORD PTR tv142[ebp], edx
$LN21@PMC_Subtru:
	mov	eax, DWORD PTR tv142[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN16@PMC_Subtru:

; 722  :             }
; 723  :             if ((result = CheckBlockLight(nz->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nz_light_check_code$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _nz$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN17@PMC_Subtru

; 724  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN17@PMC_Subtru:

; 725  :             CommitNumber(nz);

	mov	eax, DWORD PTR _nz$[ebp]
	push	eax
	call	_CommitNumber
	add	esp, 4
$LN12@PMC_Subtru:

; 726  :         }
; 727  :         *o = (PMC_HANDLE_UINT)nz;

	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR _nz$[ebp]
	mov	DWORD PTR [ecx], edx
$LN8@PMC_Subtru:

; 728  :     }
; 729  : #ifdef _DEBUG
; 730  :     if ((result = CheckNumber((NUMBER_HEADER*)*o)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _o$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN18@PMC_Subtru

; 731  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN18@PMC_Subtru:

; 732  : #endif
; 733  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Subtru:

; 734  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN25@PMC_Subtru
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN25@PMC_Subtru:
	DD	2
	DD	$LN24@PMC_Subtru
$LN24@PMC_Subtru:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN22@PMC_Subtru
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN23@PMC_Subtru
$LN23@PMC_Subtru:
	DB	110					; 0000006eH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN22@PMC_Subtru:
	DB	110					; 0000006eH
	DB	122					; 0000007aH
	DB	0
_PMC_Subtruct_X_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_subtruct.c
_TEXT	SEGMENT
tv199 = -116						; size = 4
tv168 = -112						; size = 4
tv139 = -108						; size = 4
_nz_light_check_code$1 = -100				; size = 4
_z_bit_count$2 = -92					; size = 4
_y_bit_count$3 = -88					; size = 4
_x_bit_count$4 = -84					; size = 4
_nz_light_check_code$5 = -76				; size = 4
_z_bit_count$6 = -68					; size = 4
_y_bit_count$7 = -64					; size = 4
_nz_light_check_code$8 = -56				; size = 4
_z_bit_count$9 = -48					; size = 4
_y_bit_count$10 = -44					; size = 4
_y_lo$11 = -40						; size = 4
_y_hi$12 = -32						; size = 4
_x_bit_count$13 = -24					; size = 4
_nz$ = -16						; size = 4
_result$ = -8						; size = 4
_nx$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 8
_o$ = 20						; size = 4
_PMC_Subtruct_X_L@16 PROC

; 517  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	push	edi
	lea	edi, DWORD PTR [ebp-116]
	mov	ecx, 29					; 0000001dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6B07DC87_pmc_subtruct@c
	call	@__CheckForDebuggerJustMyCode@4

; 518  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(y) * 8)

	xor	eax, eax
	je	SHORT $LN2@PMC_Subtru

; 519  :     {
; 520  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 521  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	$LN1@PMC_Subtru
$LN2@PMC_Subtru:

; 522  :     }
; 523  :     if (x == NULL)

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN3@PMC_Subtru

; 524  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN3@PMC_Subtru:

; 525  :     if (o == NULL)

	cmp	DWORD PTR _o$[ebp], 0
	jne	SHORT $LN4@PMC_Subtru

; 526  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN4@PMC_Subtru:

; 527  :     NUMBER_HEADER* nx = (NUMBER_HEADER*)x;

	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR _nx$[ebp], ecx

; 528  :     PMC_STATUS_CODE result;
; 529  :     if ((result = CheckNumber(nx)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nx$[ebp]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Subtru

; 530  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN5@PMC_Subtru:

; 531  :     NUMBER_HEADER* nz;
; 532  :     if (nx->IS_ZERO)

	mov	eax, DWORD PTR _nx$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN6@PMC_Subtru

; 533  :     {
; 534  :         // x が 0 である場合
; 535  : 
; 536  :         if (y == 0)

	mov	edx, DWORD PTR _y$[ebp]
	or	edx, DWORD PTR _y$[ebp+4]
	jne	SHORT $LN8@PMC_Subtru

; 537  :         {
; 538  :             // y が 0 である場合
; 539  : 
; 540  :             // x と y がともに 0 であるので、演算結果の 0 を呼び出し元に返す。
; 541  :             *o = (PMC_HANDLE_UINT)&number_zero;

	mov	eax, DWORD PTR _o$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_zero

; 542  :         }

	jmp	SHORT $LN9@PMC_Subtru
$LN8@PMC_Subtru:

; 543  :         else
; 544  :         {
; 545  :             // y が 0 ではない場合
; 546  : 
; 547  :             // 演算結果は負となってしまうのでエラーを返す。
; 548  :             return (PMC_STATUS_OVERFLOW);

	mov	eax, -2					; fffffffeH
	jmp	$LN1@PMC_Subtru
$LN9@PMC_Subtru:

; 549  :         }
; 550  :     }

	jmp	$LN7@PMC_Subtru
$LN6@PMC_Subtru:

; 551  :     else
; 552  :     {
; 553  :         // x が 0 ではない場合
; 554  : 
; 555  :         if (y == 0)

	mov	ecx, DWORD PTR _y$[ebp]
	or	ecx, DWORD PTR _y$[ebp+4]
	jne	SHORT $LN10@PMC_Subtru

; 556  :         {
; 557  :             // y が 0 である場合
; 558  : 
; 559  :             // 演算結果となる x の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 560  :             if ((result = DuplicateNumber(nx, &nz)) != PMC_STATUS_OK)

	lea	edx, DWORD PTR _nz$[ebp]
	push	edx
	mov	eax, DWORD PTR _nx$[ebp]
	push	eax
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN12@PMC_Subtru

; 561  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN12@PMC_Subtru:

; 562  :         }

	jmp	$LN11@PMC_Subtru
$LN10@PMC_Subtru:

; 563  :         else
; 564  :         {
; 565  :             // x と y がともに 0 ではない場合
; 566  : 
; 567  :             // x と y の差を計算する
; 568  :             if (__UNIT_TYPE_BIT_COUNT < sizeof(y) * 8)

	mov	ecx, 1
	test	ecx, ecx
	je	$LN13@PMC_Subtru

; 569  :             {
; 570  :                 // _UINT64_T が 1 ワードで表現しきれない場合
; 571  : 
; 572  :                 __UNIT_TYPE x_bit_count = nx->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR _nx$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _x_bit_count$13[ebp], eax

; 573  :                 _UINT32_T y_hi;
; 574  :                 _UINT32_T y_lo = _FROMDWORDTOWORD(y, &y_hi);

	lea	ecx, DWORD PTR _y_hi$12[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	call	__FROMDWORDTOWORD
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _y_lo$11[ebp], eax

; 575  :                 if (y_hi == 0)

	cmp	DWORD PTR _y_hi$12[ebp], 0
	jne	$LN15@PMC_Subtru

; 576  :                 {
; 577  :                     // y の値が 32bit で表現可能な場合
; 578  :                     __UNIT_TYPE y_bit_count = sizeof(y_lo) * 8 - _LZCNT_ALT_32(y_lo);

	mov	ecx, DWORD PTR _y_lo$11[ebp]
	push	ecx
	call	__LZCNT_ALT_32
	add	esp, 4
	mov	edx, 32					; 00000020H
	sub	edx, eax
	mov	DWORD PTR _y_bit_count$10[ebp], edx

; 579  :                     if (x_bit_count < y_bit_count)

	mov	eax, DWORD PTR _x_bit_count$13[ebp]
	cmp	eax, DWORD PTR _y_bit_count$10[ebp]
	jae	SHORT $LN17@PMC_Subtru

; 580  :                     {
; 581  :                         // 演算結果は負となってしまうのでエラーを返す。
; 582  :                         return (PMC_STATUS_OVERFLOW);

	mov	eax, -2					; fffffffeH
	jmp	$LN1@PMC_Subtru
$LN17@PMC_Subtru:

; 583  :                     }
; 584  :                     __UNIT_TYPE z_bit_count = x_bit_count;

	mov	ecx, DWORD PTR _x_bit_count$13[ebp]
	mov	DWORD PTR _z_bit_count$9[ebp], ecx

; 585  :                     __UNIT_TYPE nz_light_check_code;
; 586  :                     if ((result = AllocateNumber(&nz, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)

	lea	edx, DWORD PTR _nz_light_check_code$8[ebp]
	push	edx
	mov	eax, DWORD PTR _z_bit_count$9[ebp]
	push	eax
	lea	ecx, DWORD PTR _nz$[ebp]
	push	ecx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN18@PMC_Subtru

; 587  :                         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN18@PMC_Subtru:

; 588  :                     if ((result = Subtruct_X_1W(nx->BLOCK, nx->UNIT_WORD_COUNT, y_lo, nz->BLOCK, nz->BLOCK_COUNT)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nz$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _nz$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	mov	eax, DWORD PTR _y_lo$11[ebp]
	push	eax
	mov	ecx, DWORD PTR _nx$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _nx$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	call	_Subtruct_X_1W
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN19@PMC_Subtru

; 589  :                     {
; 590  :                         DeallocateNumber(nz);

	mov	edx, DWORD PTR _nz$[ebp]
	push	edx
	call	_DeallocateNumber
	add	esp, 4

; 591  :                         return (result == PMC_STATUS_INTERNAL_BORROW ? PMC_STATUS_OVERFLOW : result);

	cmp	DWORD PTR _result$[ebp], -258		; fffffefeH
	jne	SHORT $LN32@PMC_Subtru
	mov	DWORD PTR tv139[ebp], -2		; fffffffeH
	jmp	SHORT $LN33@PMC_Subtru
$LN32@PMC_Subtru:
	mov	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR tv139[ebp], eax
$LN33@PMC_Subtru:
	mov	eax, DWORD PTR tv139[ebp]
	jmp	$LN1@PMC_Subtru
$LN19@PMC_Subtru:

; 592  :                     }
; 593  :                     if ((result = CheckBlockLight(nz->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _nz_light_check_code$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _nz$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN20@PMC_Subtru

; 594  :                         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN20@PMC_Subtru:

; 595  :                 }

	jmp	$LN16@PMC_Subtru
$LN15@PMC_Subtru:

; 596  :                 else
; 597  :                 {
; 598  :                     // y の値が 32bit では表現できない場合
; 599  :                     __UNIT_TYPE y_bit_count = sizeof(y) * 8 - _LZCNT_ALT_32(y_hi);

	mov	ecx, DWORD PTR _y_hi$12[ebp]
	push	ecx
	call	__LZCNT_ALT_32
	add	esp, 4
	mov	edx, 64					; 00000040H
	sub	edx, eax
	mov	DWORD PTR _y_bit_count$7[ebp], edx

; 600  :                     if (x_bit_count < y_bit_count)

	mov	eax, DWORD PTR _x_bit_count$13[ebp]
	cmp	eax, DWORD PTR _y_bit_count$7[ebp]
	jae	SHORT $LN21@PMC_Subtru

; 601  :                     {
; 602  :                         // 演算結果は負となってしまうのでエラーを返す。
; 603  :                         return (PMC_STATUS_OVERFLOW);

	mov	eax, -2					; fffffffeH
	jmp	$LN1@PMC_Subtru
$LN21@PMC_Subtru:

; 604  :                     }
; 605  :                     __UNIT_TYPE z_bit_count = x_bit_count;

	mov	ecx, DWORD PTR _x_bit_count$13[ebp]
	mov	DWORD PTR _z_bit_count$6[ebp], ecx

; 606  :                     __UNIT_TYPE nz_light_check_code;
; 607  :                     if ((result = AllocateNumber(&nz, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)

	lea	edx, DWORD PTR _nz_light_check_code$5[ebp]
	push	edx
	mov	eax, DWORD PTR _z_bit_count$6[ebp]
	push	eax
	lea	ecx, DWORD PTR _nz$[ebp]
	push	ecx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN22@PMC_Subtru

; 608  :                         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN22@PMC_Subtru:

; 609  :                     if ((result = Subtruct_X_2W(nx->BLOCK, nx->UNIT_WORD_COUNT, y_hi, y_lo, nz->BLOCK, nz->BLOCK_COUNT)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nz$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _nz$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	mov	eax, DWORD PTR _y_lo$11[ebp]
	push	eax
	mov	ecx, DWORD PTR _y_hi$12[ebp]
	push	ecx
	mov	edx, DWORD PTR _nx$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _nx$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	call	_Subtruct_X_2W
	add	esp, 24					; 00000018H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN23@PMC_Subtru

; 610  :                     {
; 611  :                         DeallocateNumber(nz);

	mov	eax, DWORD PTR _nz$[ebp]
	push	eax
	call	_DeallocateNumber
	add	esp, 4

; 612  :                         return (result == PMC_STATUS_INTERNAL_BORROW ? PMC_STATUS_OVERFLOW : result);

	cmp	DWORD PTR _result$[ebp], -258		; fffffefeH
	jne	SHORT $LN34@PMC_Subtru
	mov	DWORD PTR tv168[ebp], -2		; fffffffeH
	jmp	SHORT $LN35@PMC_Subtru
$LN34@PMC_Subtru:
	mov	ecx, DWORD PTR _result$[ebp]
	mov	DWORD PTR tv168[ebp], ecx
$LN35@PMC_Subtru:
	mov	eax, DWORD PTR tv168[ebp]
	jmp	$LN1@PMC_Subtru
$LN23@PMC_Subtru:

; 613  :                     }
; 614  :                     if ((result = CheckBlockLight(nz->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nz_light_check_code$5[ebp]
	push	edx
	mov	eax, DWORD PTR _nz$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN16@PMC_Subtru

; 615  :                         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN16@PMC_Subtru:

; 616  :                 }
; 617  :             }

	jmp	$LN14@PMC_Subtru
$LN13@PMC_Subtru:

; 618  :             else
; 619  :             {
; 620  :                 // _UINT64_T が 1 ワードで表現できる場合
; 621  : 
; 622  :                 __UNIT_TYPE x_bit_count = nx->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR _nx$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _x_bit_count$4[ebp], eax

; 623  :                 __UNIT_TYPE y_bit_count = sizeof(y) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)y);

	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	call	__LZCNT_ALT_UNIT
	add	esp, 4
	mov	edx, 64					; 00000040H
	sub	edx, eax
	mov	DWORD PTR _y_bit_count$3[ebp], edx

; 624  :                 if (x_bit_count < y_bit_count)

	mov	eax, DWORD PTR _x_bit_count$4[ebp]
	cmp	eax, DWORD PTR _y_bit_count$3[ebp]
	jae	SHORT $LN25@PMC_Subtru

; 625  :                 {
; 626  :                     // 演算結果は負となってしまうのでエラーを返す。
; 627  :                     return (PMC_STATUS_OVERFLOW);

	mov	eax, -2					; fffffffeH
	jmp	$LN1@PMC_Subtru
$LN25@PMC_Subtru:

; 628  :                 }
; 629  :                 __UNIT_TYPE z_bit_count = x_bit_count;

	mov	ecx, DWORD PTR _x_bit_count$4[ebp]
	mov	DWORD PTR _z_bit_count$2[ebp], ecx

; 630  :                 __UNIT_TYPE nz_light_check_code;
; 631  :                 if ((result = AllocateNumber(&nz, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)

	lea	edx, DWORD PTR _nz_light_check_code$1[ebp]
	push	edx
	mov	eax, DWORD PTR _z_bit_count$2[ebp]
	push	eax
	lea	ecx, DWORD PTR _nz$[ebp]
	push	ecx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN26@PMC_Subtru

; 632  :                     return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN26@PMC_Subtru:

; 633  :                 if ((result = Subtruct_X_1W(nx->BLOCK, nx->UNIT_WORD_COUNT, (__UNIT_TYPE)y, nz->BLOCK, nz->BLOCK_COUNT)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nz$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _nz$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nx$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _nx$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	call	_Subtruct_X_1W
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN27@PMC_Subtru

; 634  :                 {
; 635  :                     DeallocateNumber(nz);

	mov	edx, DWORD PTR _nz$[ebp]
	push	edx
	call	_DeallocateNumber
	add	esp, 4

; 636  :                     return (result == PMC_STATUS_INTERNAL_BORROW ? PMC_STATUS_OVERFLOW : result);

	cmp	DWORD PTR _result$[ebp], -258		; fffffefeH
	jne	SHORT $LN36@PMC_Subtru
	mov	DWORD PTR tv199[ebp], -2		; fffffffeH
	jmp	SHORT $LN37@PMC_Subtru
$LN36@PMC_Subtru:
	mov	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR tv199[ebp], eax
$LN37@PMC_Subtru:
	mov	eax, DWORD PTR tv199[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN27@PMC_Subtru:

; 637  :                 }
; 638  :                 if ((result = CheckBlockLight(nz->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _nz_light_check_code$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _nz$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN14@PMC_Subtru

; 639  :                     return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN14@PMC_Subtru:

; 640  :             }
; 641  :             CommitNumber(nz);

	mov	ecx, DWORD PTR _nz$[ebp]
	push	ecx
	call	_CommitNumber
	add	esp, 4

; 642  :             if (nz->IS_ZERO)

	mov	edx, DWORD PTR _nz$[ebp]
	mov	eax, DWORD PTR [edx]
	and	eax, 1
	je	SHORT $LN11@PMC_Subtru

; 643  :             {
; 644  :                 DeallocateNumber(nz);

	mov	ecx, DWORD PTR _nz$[ebp]
	push	ecx
	call	_DeallocateNumber
	add	esp, 4

; 645  :                 nz = &number_zero;

	mov	DWORD PTR _nz$[ebp], OFFSET _number_zero
$LN11@PMC_Subtru:

; 646  :             }
; 647  :         }
; 648  :         *o = (PMC_HANDLE_UINT)nz;

	mov	edx, DWORD PTR _o$[ebp]
	mov	eax, DWORD PTR _nz$[ebp]
	mov	DWORD PTR [edx], eax
$LN7@PMC_Subtru:

; 649  :     }
; 650  : #ifdef _DEBUG
; 651  :     if ((result = CheckNumber((NUMBER_HEADER*)*o)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN30@PMC_Subtru

; 652  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN30@PMC_Subtru:

; 653  : #endif
; 654  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Subtru:

; 655  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN44@PMC_Subtru
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 116				; 00000074H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN44@PMC_Subtru:
	DD	5
	DD	$LN43@PMC_Subtru
$LN43@PMC_Subtru:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN38@PMC_Subtru
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN39@PMC_Subtru
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN40@PMC_Subtru
	DD	-76					; ffffffb4H
	DD	4
	DD	$LN41@PMC_Subtru
	DD	-100					; ffffff9cH
	DD	4
	DD	$LN42@PMC_Subtru
$LN42@PMC_Subtru:
	DB	110					; 0000006eH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN41@PMC_Subtru:
	DB	110					; 0000006eH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN40@PMC_Subtru:
	DB	110					; 0000006eH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN39@PMC_Subtru:
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	0
$LN38@PMC_Subtru:
	DB	110					; 0000006eH
	DB	122					; 0000007aH
	DB	0
_PMC_Subtruct_X_L@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_subtruct.c
_TEXT	SEGMENT
tv134 = -48						; size = 4
_w_light_check_code$1 = -40				; size = 4
_w_bit_count$2 = -32					; size = 4
_v_bit_count$3 = -28					; size = 4
_u_bit_count$4 = -24					; size = 4
_nw$ = -16						; size = 4
_result$ = -8						; size = 4
_nu$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Subtruct_X_I@12 PROC

; 262  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6B07DC87_pmc_subtruct@c
	call	@__CheckForDebuggerJustMyCode@4

; 263  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)

	xor	eax, eax
	je	SHORT $LN2@PMC_Subtru

; 264  :     {
; 265  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 266  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	$LN1@PMC_Subtru
$LN2@PMC_Subtru:

; 267  :     }
; 268  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN3@PMC_Subtru

; 269  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN3@PMC_Subtru:

; 270  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Subtru

; 271  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN4@PMC_Subtru:

; 272  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	ecx, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], ecx

; 273  :     PMC_STATUS_CODE result;
; 274  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nu$[ebp]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Subtru

; 275  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN5@PMC_Subtru:

; 276  :     NUMBER_HEADER* nw;
; 277  :     if (nu->IS_ZERO)

	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN6@PMC_Subtru

; 278  :     {
; 279  :         // u が 0 である場合
; 280  : 
; 281  :         if (v == 0)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN8@PMC_Subtru

; 282  :         {
; 283  :             // v が 0 である場合
; 284  : 
; 285  :             // u と v がともに 0 であるので、演算結果の 0 を呼び出し元に返す。
; 286  :             *w = (PMC_HANDLE_UINT)&number_zero;

	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx], OFFSET _number_zero

; 287  :         }

	jmp	SHORT $LN9@PMC_Subtru
$LN8@PMC_Subtru:

; 288  :         else
; 289  :         {
; 290  :             // v が 0 ではない場合
; 291  : 
; 292  :             // 演算結果は負となってしまうのでエラーを返す。
; 293  :             return (PMC_STATUS_OVERFLOW);

	mov	eax, -2					; fffffffeH
	jmp	$LN1@PMC_Subtru
$LN9@PMC_Subtru:

; 294  :         }
; 295  :     }

	jmp	$LN7@PMC_Subtru
$LN6@PMC_Subtru:

; 296  :     else
; 297  :     {
; 298  :         // u が 0 ではない場合
; 299  : 
; 300  :         if (v == 0)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN10@PMC_Subtru

; 301  :         {
; 302  :             // v が 0 である場合
; 303  : 
; 304  :             // 演算結果となる x の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 305  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN12@PMC_Subtru

; 306  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN12@PMC_Subtru:

; 307  :         }

	jmp	$LN11@PMC_Subtru
$LN10@PMC_Subtru:

; 308  :         else
; 309  :         {
; 310  :             // u と v がともに 0 ではない場合
; 311  : 
; 312  :             // u と v の差を計算する
; 313  :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _u_bit_count$4[ebp], eax

; 314  :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	__LZCNT_ALT_32
	add	esp, 4
	mov	edx, 32					; 00000020H
	sub	edx, eax
	mov	DWORD PTR _v_bit_count$3[ebp], edx

; 315  :             if (u_bit_count < v_bit_count)

	mov	eax, DWORD PTR _u_bit_count$4[ebp]
	cmp	eax, DWORD PTR _v_bit_count$3[ebp]
	jae	SHORT $LN13@PMC_Subtru

; 316  :             {
; 317  :                 // 演算結果は負となってしまうのでエラーを返す。
; 318  :                 return (PMC_STATUS_OVERFLOW);

	mov	eax, -2					; fffffffeH
	jmp	$LN1@PMC_Subtru
$LN13@PMC_Subtru:

; 319  :             }
; 320  :             __UNIT_TYPE w_bit_count = u_bit_count;

	mov	ecx, DWORD PTR _u_bit_count$4[ebp]
	mov	DWORD PTR _w_bit_count$2[ebp], ecx

; 321  :             __UNIT_TYPE w_light_check_code;
; 322  :             if ((result = AllocateNumber(&nw, w_bit_count, &w_light_check_code)) != PMC_STATUS_OK)

	lea	edx, DWORD PTR _w_light_check_code$1[ebp]
	push	edx
	mov	eax, DWORD PTR _w_bit_count$2[ebp]
	push	eax
	lea	ecx, DWORD PTR _nw$[ebp]
	push	ecx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN14@PMC_Subtru

; 323  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN14@PMC_Subtru:

; 324  :             if ((result = Subtruct_X_1W(nu->BLOCK, nu->UNIT_WORD_COUNT, v, nw->BLOCK, nw->BLOCK_COUNT)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nw$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _nw$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	call	_Subtruct_X_1W
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN15@PMC_Subtru

; 325  :             {
; 326  :                 DeallocateNumber(nw);

	mov	edx, DWORD PTR _nw$[ebp]
	push	edx
	call	_DeallocateNumber
	add	esp, 4

; 327  :                 return (result == PMC_STATUS_INTERNAL_BORROW ? PMC_STATUS_OVERFLOW : result);

	cmp	DWORD PTR _result$[ebp], -258		; fffffefeH
	jne	SHORT $LN20@PMC_Subtru
	mov	DWORD PTR tv134[ebp], -2		; fffffffeH
	jmp	SHORT $LN21@PMC_Subtru
$LN20@PMC_Subtru:
	mov	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR tv134[ebp], eax
$LN21@PMC_Subtru:
	mov	eax, DWORD PTR tv134[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN15@PMC_Subtru:

; 328  :             }
; 329  :             if ((result = CheckBlockLight(nw->BLOCK, w_light_check_code)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _w_light_check_code$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _nw$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN16@PMC_Subtru

; 330  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN16@PMC_Subtru:

; 331  :             CommitNumber(nw);

	mov	ecx, DWORD PTR _nw$[ebp]
	push	ecx
	call	_CommitNumber
	add	esp, 4

; 332  :             if (nw->IS_ZERO)

	mov	edx, DWORD PTR _nw$[ebp]
	mov	eax, DWORD PTR [edx]
	and	eax, 1
	je	SHORT $LN11@PMC_Subtru

; 333  :             {
; 334  :                 DeallocateNumber(nw);

	mov	ecx, DWORD PTR _nw$[ebp]
	push	ecx
	call	_DeallocateNumber
	add	esp, 4

; 335  :                 nw = &number_zero;

	mov	DWORD PTR _nw$[ebp], OFFSET _number_zero
$LN11@PMC_Subtru:

; 336  :             }
; 337  :         }
; 338  :         *w = (PMC_HANDLE_UINT)nw;

	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [edx], eax
$LN7@PMC_Subtru:

; 339  :     }
; 340  : #ifdef _DEBUG
; 341  :     if ((result = CheckNumber((NUMBER_HEADER*)*w)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN18@PMC_Subtru

; 342  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Subtru
$LN18@PMC_Subtru:

; 343  : #endif
; 344  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Subtru:

; 345  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN25@PMC_Subtru
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN25@PMC_Subtru:
	DD	2
	DD	$LN24@PMC_Subtru
$LN24@PMC_Subtru:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN22@PMC_Subtru
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN23@PMC_Subtru
$LN23@PMC_Subtru:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN22@PMC_Subtru:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_Subtruct_X_I@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_subtruct.c
_TEXT	SEGMENT
_borrow$1 = -105					; size = 1
_temp_w$2 = -100					; size = 4
_v_bit_count$3 = -92					; size = 4
_u_bit_count$4 = -88					; size = 4
_borrow$5 = -81						; size = 1
_temp_w_lo$6 = -76					; size = 4
_temp_w_hi$7 = -64					; size = 4
_v_bit_count$8 = -56					; size = 4
_u_bit_count$9 = -52					; size = 4
_borrow$10 = -45					; size = 1
_temp_w$11 = -40					; size = 4
_v_bit_count$12 = -32					; size = 4
_u_bit_count$13 = -28					; size = 4
_u_lo$14 = -24						; size = 4
_u_hi$15 = -16						; size = 4
_result$ = -8						; size = 4
_nv$ = -4						; size = 4
_u$ = 8							; size = 8
_v$ = 16						; size = 4
_w$ = 20						; size = 4
_PMC_Subtruct_L_X@16 PROC

; 348  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	push	edi
	lea	edi, DWORD PTR [ebp-108]
	mov	ecx, 27					; 0000001bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __6B07DC87_pmc_subtruct@c
	call	@__CheckForDebuggerJustMyCode@4

; 349  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(u) * 8)

	xor	eax, eax
	je	SHORT $LN2@PMC_Subtru

; 350  :     {
; 351  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 352  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	$LN1@PMC_Subtru
$LN2@PMC_Subtru:

; 353  :     }
; 354  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Subtru

; 355  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN3@PMC_Subtru:

; 356  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Subtru

; 357  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN4@PMC_Subtru:

; 358  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	ecx, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], ecx

; 359  :     PMC_STATUS_CODE result;
; 360  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nv$[ebp]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Subtru

; 361  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN5@PMC_Subtru:

; 362  :     if (u == 0)

	mov	eax, DWORD PTR _u$[ebp]
	or	eax, DWORD PTR _u$[ebp+4]
	jne	SHORT $LN6@PMC_Subtru

; 363  :     {
; 364  :         // u が 0 である場合
; 365  : 
; 366  :         if (nv->IS_ZERO)

	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 1
	je	SHORT $LN8@PMC_Subtru

; 367  :         {
; 368  :             // v が 0 である場合
; 369  : 
; 370  :             // x と y がともに 0 であるので、演算結果の 0 を呼び出し元に返す。
; 371  :             *w = 0;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0

; 372  :         }

	jmp	SHORT $LN9@PMC_Subtru
$LN8@PMC_Subtru:

; 373  :         else
; 374  :         {
; 375  :             // v が 0 ではない場合
; 376  : 
; 377  :             // 演算結果は負となってしまうのでエラーを返す。
; 378  :             return (PMC_STATUS_OVERFLOW);

	mov	eax, -2					; fffffffeH
	jmp	$LN1@PMC_Subtru
$LN9@PMC_Subtru:

; 379  :         }
; 380  :     }

	jmp	$LN7@PMC_Subtru
$LN6@PMC_Subtru:

; 381  :     else
; 382  :     {
; 383  :         // u が 0 ではない場合
; 384  : 
; 385  :         if (nv->IS_ZERO)

	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 1
	je	SHORT $LN10@PMC_Subtru

; 386  :         {
; 387  :             // v が 0 である場合
; 388  : 
; 389  :             // 演算結果となる u の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 390  :             *w = u;

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _u$[ebp+4]
	mov	DWORD PTR [eax+4], edx

; 391  :         }

	jmp	$LN7@PMC_Subtru
$LN10@PMC_Subtru:

; 392  :         else
; 393  :         {
; 394  :             // u と v がともに 0 ではない場合
; 395  : 
; 396  :             // u と v の差を計算する
; 397  :             if (__UNIT_TYPE_BIT_COUNT < sizeof(u) * 8)

	mov	eax, 1
	test	eax, eax
	je	$LN12@PMC_Subtru

; 398  :             {
; 399  :                 // _UINT64_T が 1 ワードで表現しきれない場合
; 400  : 
; 401  :                 _UINT32_T u_hi;
; 402  :                 _UINT32_T u_lo = _FROMDWORDTOWORD(u, &u_hi);

	lea	ecx, DWORD PTR _u_hi$15[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	call	__FROMDWORDTOWORD
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _u_lo$14[ebp], eax

; 403  :                 if (u_hi == 0)

	cmp	DWORD PTR _u_hi$15[ebp], 0
	jne	$LN14@PMC_Subtru

; 404  :                 {
; 405  :                     // u の値が 32bit で表現可能な場合
; 406  :                     __UNIT_TYPE u_bit_count = sizeof(u_lo) * 8 - _LZCNT_ALT_32(u_lo);

	mov	ecx, DWORD PTR _u_lo$14[ebp]
	push	ecx
	call	__LZCNT_ALT_32
	add	esp, 4
	mov	edx, 32					; 00000020H
	sub	edx, eax
	mov	DWORD PTR _u_bit_count$13[ebp], edx

; 407  :                     __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _v_bit_count$12[ebp], ecx

; 408  :                     if (u_bit_count < v_bit_count)

	mov	edx, DWORD PTR _u_bit_count$13[ebp]
	cmp	edx, DWORD PTR _v_bit_count$12[ebp]
	jae	SHORT $LN16@PMC_Subtru

; 409  :                     {
; 410  :                         // 明らかに u < v である場合
; 411  : 
; 412  :                         // 演算結果は負となってしまうのでエラーを返す。
; 413  :                         return (PMC_STATUS_OVERFLOW);

	mov	eax, -2					; fffffffeH
	jmp	$LN1@PMC_Subtru

; 414  :                     }

	jmp	SHORT $LN17@PMC_Subtru
$LN16@PMC_Subtru:

; 415  :                     else
; 416  :                     {
; 417  :                         // u のビット長が v のビット長以上である場合
; 418  : 
; 419  :                         // u が32bit 整数で表現できるので v も 32bit 整数で表現できる
; 420  : 
; 421  :                         __UNIT_TYPE temp_w;
; 422  :                         char borrow = _SUBTRUCT_UNIT(0, u_lo, nv->BLOCK[0], &temp_w);

	lea	eax, DWORD PTR _temp_w$11[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+edx]
	push	edx
	mov	eax, DWORD PTR _u_lo$14[ebp]
	push	eax
	push	0
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _borrow$10[ebp], al

; 423  :                         if (borrow)

	movsx	ecx, BYTE PTR _borrow$10[ebp]
	test	ecx, ecx
	je	SHORT $LN18@PMC_Subtru

; 424  :                         {
; 425  :                             // ボローが発生した場合は演算結果が負なのでエラーとする
; 426  :                             return (PMC_STATUS_OVERFLOW);

	mov	eax, -2					; fffffffeH
	jmp	$LN1@PMC_Subtru

; 427  :                         }

	jmp	SHORT $LN17@PMC_Subtru
$LN18@PMC_Subtru:

; 428  :                         else
; 429  :                         {
; 430  :                             *w = temp_w;

	mov	edx, DWORD PTR _temp_w$11[ebp]
	xor	eax, eax
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
$LN17@PMC_Subtru:

; 431  :                         }
; 432  :                     }
; 433  :                 }

	jmp	$LN15@PMC_Subtru
$LN14@PMC_Subtru:

; 434  :                 else
; 435  :                 {
; 436  :                     // u の値が 32bit では表現できない場合
; 437  :                     __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_32(u_hi);

	mov	edx, DWORD PTR _u_hi$15[ebp]
	push	edx
	call	__LZCNT_ALT_32
	add	esp, 4
	mov	ecx, 64					; 00000040H
	sub	ecx, eax
	mov	DWORD PTR _u_bit_count$9[ebp], ecx

; 438  :                     __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _v_bit_count$8[ebp], eax

; 439  :                     if (u_bit_count < v_bit_count)

	mov	ecx, DWORD PTR _u_bit_count$9[ebp]
	cmp	ecx, DWORD PTR _v_bit_count$8[ebp]
	jae	SHORT $LN20@PMC_Subtru

; 440  :                     {
; 441  :                         // 明らかに u < v である場合
; 442  : 
; 443  :                         // 演算結果は負となってしまうのでエラーを返す。
; 444  :                         return (PMC_STATUS_OVERFLOW);

	mov	eax, -2					; fffffffeH
	jmp	$LN1@PMC_Subtru

; 445  :                     }

	jmp	$LN15@PMC_Subtru
$LN20@PMC_Subtru:

; 446  :                     else
; 447  :                     {
; 448  :                         // u のビット長が v のビット長以上である場合
; 449  : 
; 450  :                         // この時点では u は 33 ～ 64bit 整数であり、v は 1 ～ 64bit整数である
; 451  : 
; 452  :                         __UNIT_TYPE temp_w_hi;
; 453  :                         __UNIT_TYPE temp_w_lo;
; 454  :                         char borrow;
; 455  :                         borrow = _SUBTRUCT_UNIT(0, u_lo, nv->BLOCK[0], &temp_w_lo);

	lea	edx, DWORD PTR _temp_w_lo$6[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+ecx]
	push	ecx
	mov	edx, DWORD PTR _u_lo$14[ebp]
	push	edx
	push	0
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _borrow$5[ebp], al

; 456  :                         if (nv->UNIT_WORD_COUNT <= 1)

	mov	eax, DWORD PTR _nv$[ebp]
	cmp	DWORD PTR [eax+12], 1
	ja	SHORT $LN22@PMC_Subtru

; 457  :                         {
; 458  :                             // v が 1 ワードで表現できる場合(1 ～ 32bit 整数)
; 459  :                             borrow = _SUBTRUCT_UNIT(borrow, u_hi, 0, &temp_w_hi);

	lea	ecx, DWORD PTR _temp_w_hi$7[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _u_hi$15[ebp]
	push	edx
	movzx	eax, BYTE PTR _borrow$5[ebp]
	push	eax
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _borrow$5[ebp], al

; 460  :                         }

	jmp	SHORT $LN23@PMC_Subtru
$LN22@PMC_Subtru:

; 461  :                         else
; 462  :                         {
; 463  :                             // v が 1 ワードで表現できない場合(33 ～ 64bit 整数)
; 464  :                             borrow = _SUBTRUCT_UNIT(borrow, u_hi, nv->BLOCK[1], &temp_w_hi);

	lea	ecx, DWORD PTR _temp_w_hi$7[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+edx]
	push	edx
	mov	eax, DWORD PTR _u_hi$15[ebp]
	push	eax
	movzx	ecx, BYTE PTR _borrow$5[ebp]
	push	ecx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _borrow$5[ebp], al
$LN23@PMC_Subtru:

; 465  :                         }
; 466  :                         if (borrow)

	movsx	edx, BYTE PTR _borrow$5[ebp]
	test	edx, edx
	je	SHORT $LN24@PMC_Subtru

; 467  :                         {
; 468  :                             // ボローが発生した場合は演算結果が負なのでエラーとする
; 469  :                             return (PMC_STATUS_OVERFLOW);

	mov	eax, -2					; fffffffeH
	jmp	$LN1@PMC_Subtru

; 470  :                         }

	jmp	SHORT $LN15@PMC_Subtru
$LN24@PMC_Subtru:

; 471  :                         else
; 472  :                         {
; 473  :                             *w = _FROMWORDTODWORD((_UINT32_T)temp_w_hi, (_UINT32_T)temp_w_lo);

	mov	eax, DWORD PTR _temp_w_lo$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _temp_w_hi$7[ebp]
	push	ecx
	call	__FROMWORDTODWORD
	add	esp, 8
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
$LN15@PMC_Subtru:

; 474  :                         }
; 475  : 
; 476  :                     }
; 477  :                 }
; 478  :             }

	jmp	SHORT $LN7@PMC_Subtru
$LN12@PMC_Subtru:

; 479  :             else
; 480  :             {
; 481  :                 // _UINT64_T が 1 ワードで表現できる場合
; 482  : 
; 483  :                 __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)u);

	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	__LZCNT_ALT_UNIT
	add	esp, 4
	mov	ecx, 64					; 00000040H
	sub	ecx, eax
	mov	DWORD PTR _u_bit_count$4[ebp], ecx

; 484  :                 __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _v_bit_count$3[ebp], eax

; 485  :                 if (u_bit_count < v_bit_count)

	mov	ecx, DWORD PTR _u_bit_count$4[ebp]
	cmp	ecx, DWORD PTR _v_bit_count$3[ebp]
	jae	SHORT $LN26@PMC_Subtru

; 486  :                 {
; 487  :                     // 明らかに u < v である場合
; 488  : 
; 489  :                     // 演算結果は負となってしまうのでエラーを返す。
; 490  :                     return (PMC_STATUS_OVERFLOW);

	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN1@PMC_Subtru

; 491  :                 }

	jmp	SHORT $LN7@PMC_Subtru
$LN26@PMC_Subtru:

; 492  :                 else
; 493  :                 {
; 494  :                     // u のビット長が v のビット長以上である場合
; 495  : 
; 496  :                     // u が 64bit 整数で表現できるので v も 64bit 整数で表現できる
; 497  : 
; 498  :                     __UNIT_TYPE temp_w;
; 499  :                     char borrow = _SUBTRUCT_UNIT(0, (__UNIT_TYPE)u, nv->BLOCK[0], &temp_w);

	lea	edx, DWORD PTR _temp_w$2[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+ecx]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	push	0
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _borrow$1[ebp], al

; 500  :                     if (borrow)

	movsx	eax, BYTE PTR _borrow$1[ebp]
	test	eax, eax
	je	SHORT $LN28@PMC_Subtru

; 501  :                     {
; 502  :                         // ボローが発生した場合は演算結果が負なのでエラーとする
; 503  :                         return (PMC_STATUS_OVERFLOW);

	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN1@PMC_Subtru

; 504  :                     }

	jmp	SHORT $LN7@PMC_Subtru
$LN28@PMC_Subtru:

; 505  :                     else
; 506  :                     {
; 507  :                         *w = temp_w;

	mov	ecx, DWORD PTR _temp_w$2[ebp]
	xor	edx, edx
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
$LN7@PMC_Subtru:

; 508  :                     }
; 509  :                 }
; 510  :             }
; 511  :         }
; 512  :     }
; 513  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Subtru:

; 514  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN37@PMC_Subtru
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 108				; 0000006cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	2
$LN37@PMC_Subtru:
	DD	5
	DD	$LN36@PMC_Subtru
$LN36@PMC_Subtru:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN31@PMC_Subtru
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN32@PMC_Subtru
	DD	-64					; ffffffc0H
	DD	4
	DD	$LN33@PMC_Subtru
	DD	-76					; ffffffb4H
	DD	4
	DD	$LN34@PMC_Subtru
	DD	-100					; ffffff9cH
	DD	4
	DD	$LN35@PMC_Subtru
$LN35@PMC_Subtru:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	0
$LN34@PMC_Subtru:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	0
$LN33@PMC_Subtru:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	0
$LN32@PMC_Subtru:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	0
$LN31@PMC_Subtru:
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	0
_PMC_Subtruct_L_X@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_subtruct.c
_TEXT	SEGMENT
_borrow$1 = -29						; size = 1
_temp_w$2 = -24						; size = 4
_v_bit_count$3 = -16					; size = 4
_u_bit_count$4 = -12					; size = 4
_result$ = -8						; size = 4
_nv$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_Subtruct_I_X@12 PROC

; 182  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __6B07DC87_pmc_subtruct@c
	call	@__CheckForDebuggerJustMyCode@4

; 183  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(u) * 8)

	xor	eax, eax
	je	SHORT $LN2@PMC_Subtru

; 184  :     {
; 185  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 186  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	$LN1@PMC_Subtru
$LN2@PMC_Subtru:

; 187  :     }
; 188  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Subtru

; 189  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN3@PMC_Subtru:

; 190  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Subtru

; 191  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Subtru
$LN4@PMC_Subtru:

; 192  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	ecx, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], ecx

; 193  :     PMC_STATUS_CODE result;
; 194  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nv$[ebp]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Subtru

; 195  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Subtru
$LN5@PMC_Subtru:

; 196  :     if (u == 0)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN6@PMC_Subtru

; 197  :     {
; 198  :         // u が 0 である場合
; 199  : 
; 200  :         if (nv->IS_ZERO)

	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN8@PMC_Subtru

; 201  :         {
; 202  :             // v が 0 である場合
; 203  : 
; 204  :             // u と v がともに 0 であるので、演算結果の 0 を呼び出し元に返す。
; 205  :             *w = 0;

	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx], 0

; 206  :         }

	jmp	SHORT $LN9@PMC_Subtru
$LN8@PMC_Subtru:

; 207  :         else
; 208  :         {
; 209  :             // v が 0 ではない場合
; 210  : 
; 211  :             // 演算結果は負となってしまうのでエラーを返す。
; 212  :             return (PMC_STATUS_OVERFLOW);

	mov	eax, -2					; fffffffeH
	jmp	$LN1@PMC_Subtru
$LN9@PMC_Subtru:

; 213  :         }
; 214  :     }

	jmp	$LN7@PMC_Subtru
$LN6@PMC_Subtru:

; 215  :     else
; 216  :     {
; 217  :         // u が 0 ではない場合
; 218  : 
; 219  :         if (nv->IS_ZERO)

	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN10@PMC_Subtru

; 220  :         {
; 221  :             // v が 0 である場合
; 222  : 
; 223  :             // 演算結果となる u の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 224  :             *w = u;

	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR [edx], eax

; 225  :         }

	jmp	SHORT $LN7@PMC_Subtru
$LN10@PMC_Subtru:

; 226  :         else
; 227  :         {
; 228  :             // u と v がともに 0 ではない場合
; 229  : 
; 230  :             // x と y の差を計算する
; 231  :             __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_32(u);

	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	__LZCNT_ALT_32
	add	esp, 4
	mov	edx, 32					; 00000020H
	sub	edx, eax
	mov	DWORD PTR _u_bit_count$4[ebp], edx

; 232  :             __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _v_bit_count$3[ebp], ecx

; 233  :             if (u_bit_count < v_bit_count)

	mov	edx, DWORD PTR _u_bit_count$4[ebp]
	cmp	edx, DWORD PTR _v_bit_count$3[ebp]
	jae	SHORT $LN12@PMC_Subtru

; 234  :             {
; 235  :                 // 明らかに u < v である場合
; 236  :                 // 演算結果は負となってしまうのでエラーを返す。
; 237  :                 return (PMC_STATUS_OVERFLOW);

	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN1@PMC_Subtru

; 238  :             }

	jmp	SHORT $LN7@PMC_Subtru
$LN12@PMC_Subtru:

; 239  :             else
; 240  :             {
; 241  :                 // u のビット長が v のビット長以上である場合
; 242  : 
; 243  :                 // u が 32bit 整数なので、v も32bit 整数で表現できる
; 244  :                 __UNIT_TYPE temp_w;
; 245  :                 char borrow = _SUBTRUCT_UNIT(0, u, nv->BLOCK[0], &temp_w);

	lea	eax, DWORD PTR _temp_w$2[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+edx]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	push	0
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _borrow$1[ebp], al

; 246  :                 if (borrow)

	movsx	ecx, BYTE PTR _borrow$1[ebp]
	test	ecx, ecx
	je	SHORT $LN14@PMC_Subtru

; 247  :                 {
; 248  :                     // ボローが発生した場合は演算結果が負なのでエラーとする
; 249  :                     return (PMC_STATUS_OVERFLOW);

	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN1@PMC_Subtru

; 250  :                 }

	jmp	SHORT $LN7@PMC_Subtru
$LN14@PMC_Subtru:

; 251  :                 else
; 252  :                 {
; 253  :                     *w = (_UINT32_T)temp_w;

	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR _temp_w$2[ebp]
	mov	DWORD PTR [edx], eax
$LN7@PMC_Subtru:

; 254  :                 }
; 255  :             }
; 256  :         }
; 257  :     }
; 258  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Subtru:

; 259  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@PMC_Subtru
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN19@PMC_Subtru:
	DD	1
	DD	$LN18@PMC_Subtru
$LN18@PMC_Subtru:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN17@PMC_Subtru
$LN17@PMC_Subtru:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	0
_PMC_Subtruct_I_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_subtruct.c
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_Subtruct PROC

; 737  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __6B07DC87_pmc_subtruct@c
	call	@__CheckForDebuggerJustMyCode@4

; 738  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 739  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_Initialize_Subtruct ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_subtruct.c
_TEXT	SEGMENT
tv157 = -20						; size = 4
tv154 = -16						; size = 4
tv151 = -12						; size = 4
_count$ = -8						; size = 4
_c$ = -1						; size = 1
_up$ = 8						; size = 4
_u_count$ = 12						; size = 4
_vp$ = 16						; size = 4
_v_count$ = 20						; size = 4
_wp$ = 24						; size = 4
_w_count$ = 28						; size = 4
_Subtruct_Imp PROC

; 118  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __6B07DC87_pmc_subtruct@c
	call	@__CheckForDebuggerJustMyCode@4

; 119  :     char c = 0;

	mov	BYTE PTR _c$[ebp], 0

; 120  : 
; 121  :     // まず 32 ワードずつ減算をする。
; 122  :     __UNIT_TYPE count = v_count >> 5;

	mov	eax, DWORD PTR _v_count$[ebp]
	shr	eax, 5
	mov	DWORD PTR _count$[ebp], eax
$LN2@Subtruct_I:

; 123  :     while (count != 0)

	cmp	DWORD PTR _count$[ebp], 0
	je	SHORT $LN3@Subtruct_I

; 124  :     {
; 125  :         c= _SUBTRUCT_32WORDS_SBB(c, up, vp, wp);

	mov	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vp$[ebp]
	push	edx
	mov	eax, DWORD PTR _up$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_32WORDS_SBB
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 126  :         up += 32;

	mov	edx, DWORD PTR _up$[ebp]
	add	edx, 128				; 00000080H
	mov	DWORD PTR _up$[ebp], edx

; 127  :         vp += 32;

	mov	eax, DWORD PTR _vp$[ebp]
	add	eax, 128				; 00000080H
	mov	DWORD PTR _vp$[ebp], eax

; 128  :         wp += 32;

	mov	ecx, DWORD PTR _wp$[ebp]
	add	ecx, 128				; 00000080H
	mov	DWORD PTR _wp$[ebp], ecx

; 129  :         --count;

	mov	edx, DWORD PTR _count$[ebp]
	sub	edx, 1
	mov	DWORD PTR _count$[ebp], edx

; 130  :     }

	jmp	SHORT $LN2@Subtruct_I
$LN3@Subtruct_I:

; 131  :     // この時点で未処理の桁は 32 ワード未満のはず
; 132  : 
; 133  :     // 未処理の桁が 16 ワード以上あるなら 16 ワード減算を行う。
; 134  :     if (v_count & 0x10)

	mov	eax, DWORD PTR _v_count$[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN4@Subtruct_I

; 135  :     {
; 136  :         c = _SUBTRUCT_16WORDS_SBB(c, up, vp, wp);

	mov	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vp$[ebp]
	push	edx
	mov	eax, DWORD PTR _up$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_16WORDS_SBB
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 137  :         up += 16;

	mov	edx, DWORD PTR _up$[ebp]
	add	edx, 64					; 00000040H
	mov	DWORD PTR _up$[ebp], edx

; 138  :         vp += 16;

	mov	eax, DWORD PTR _vp$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _vp$[ebp], eax

; 139  :         wp += 16;

	mov	ecx, DWORD PTR _wp$[ebp]
	add	ecx, 64					; 00000040H
	mov	DWORD PTR _wp$[ebp], ecx
$LN4@Subtruct_I:

; 140  :     }
; 141  :     // この時点で未処理の桁は 16 ワード未満のはず
; 142  : 
; 143  :     // 未処理の桁が 8 ワード以上あるなら 8 ワード減算を行う。
; 144  :     if (v_count & 0x8)

	mov	edx, DWORD PTR _v_count$[ebp]
	and	edx, 8
	je	SHORT $LN5@Subtruct_I

; 145  :     {
; 146  :         c = _SUBTRUCT_8WORDS_SBB(c, up, vp, wp);

	mov	eax, DWORD PTR _wp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _up$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_8WORDS_SBB
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 147  :         up += 8;

	mov	ecx, DWORD PTR _up$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _up$[ebp], ecx

; 148  :         vp += 8;

	mov	edx, DWORD PTR _vp$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _vp$[ebp], edx

; 149  :         wp += 8;

	mov	eax, DWORD PTR _wp$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _wp$[ebp], eax
$LN5@Subtruct_I:

; 150  :     }
; 151  :     // この時点で未処理の桁は 8 ワード未満のはず
; 152  : 
; 153  :     // 未処理の桁が 4 ワード以上あるなら 4 ワード減算を行う。
; 154  :     if (v_count & 0x4)

	mov	ecx, DWORD PTR _v_count$[ebp]
	and	ecx, 4
	je	SHORT $LN6@Subtruct_I

; 155  :     {
; 156  :         c = _SUBTRUCT_4WORDS_SBB(c, up, vp, wp);

	mov	edx, DWORD PTR _wp$[ebp]
	push	edx
	mov	eax, DWORD PTR _vp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _up$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_4WORDS_SBB
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 157  :         up += 4;

	mov	eax, DWORD PTR _up$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _up$[ebp], eax

; 158  :         vp += 4;

	mov	ecx, DWORD PTR _vp$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _vp$[ebp], ecx

; 159  :         wp += 4;

	mov	edx, DWORD PTR _wp$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _wp$[ebp], edx
$LN6@Subtruct_I:

; 160  :     }
; 161  :     // この時点で未処理の桁は 4 ワード未満のはず
; 162  : 
; 163  :     // 未処理の桁が 2 ワード以上あるなら 2 ワード減算を行う。
; 164  :     if (v_count & 0x2)

	mov	eax, DWORD PTR _v_count$[ebp]
	and	eax, 2
	je	SHORT $LN7@Subtruct_I

; 165  :     {
; 166  :         c = _SUBTRUCT_2WORDS_SBB(c, up, vp, wp);

	mov	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vp$[ebp]
	push	edx
	mov	eax, DWORD PTR _up$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__SUBTRUCT_2WORDS_SBB
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 167  :         up += 2;

	mov	edx, DWORD PTR _up$[ebp]
	add	edx, 8
	mov	DWORD PTR _up$[ebp], edx

; 168  :         vp += 2;

	mov	eax, DWORD PTR _vp$[ebp]
	add	eax, 8
	mov	DWORD PTR _vp$[ebp], eax

; 169  :         wp += 2;

	mov	ecx, DWORD PTR _wp$[ebp]
	add	ecx, 8
	mov	DWORD PTR _wp$[ebp], ecx
$LN7@Subtruct_I:

; 170  :     }
; 171  :     // この時点で未処理の桁は 2 ワード未満のはず
; 172  : 
; 173  :     // 未処理の桁が 1 ワード以上あるなら 1 ワード減算を行う。
; 174  :     if (v_count & 1)

	mov	edx, DWORD PTR _v_count$[ebp]
	and	edx, 1
	je	SHORT $LN8@Subtruct_I

; 175  :         c = _SUBTRUCT_UNIT(c, *up++, *vp++, wp++);

	mov	eax, DWORD PTR _wp$[ebp]
	mov	DWORD PTR tv151[ebp], eax
	mov	ecx, DWORD PTR _wp$[ebp]
	add	ecx, 4
	mov	DWORD PTR _wp$[ebp], ecx
	mov	edx, DWORD PTR _vp$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv154[ebp], eax
	mov	ecx, DWORD PTR _vp$[ebp]
	add	ecx, 4
	mov	DWORD PTR _vp$[ebp], ecx
	mov	edx, DWORD PTR _up$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv157[ebp], eax
	mov	ecx, DWORD PTR _up$[ebp]
	add	ecx, 4
	mov	DWORD PTR _up$[ebp], ecx
	mov	edx, DWORD PTR tv151[ebp]
	push	edx
	mov	eax, DWORD PTR tv154[ebp]
	push	eax
	mov	ecx, DWORD PTR tv157[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al
$LN8@Subtruct_I:

; 176  : 
; 177  :     // 残りの桁の繰り上がりを計算し、復帰する。
; 178  :     return (DoBorrow(c, up, u_count - v_count, wp, w_count - v_count));

	mov	eax, DWORD PTR _w_count$[ebp]
	sub	eax, DWORD PTR _v_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_count$[ebp]
	sub	edx, DWORD PTR _v_count$[ebp]
	push	edx
	mov	eax, DWORD PTR _up$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	_DoBorrow
	add	esp, 20					; 00000014H

; 179  : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Subtruct_Imp ENDP
_TEXT	ENDS
END
