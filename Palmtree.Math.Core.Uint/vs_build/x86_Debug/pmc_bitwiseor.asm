; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_bitwiseor.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__3F1A8F43_pmc_bitwiseor@c DB 01H
msvcjmc	ENDS
PUBLIC	_Initialize_BitwiseOr
PUBLIC	_PMC_BitwiseOr_I_X@12
PUBLIC	_PMC_BitwiseOr_L_X@16
PUBLIC	_PMC_BitwiseOr_X_I@12
PUBLIC	_PMC_BitwiseOr_X_L@16
PUBLIC	_PMC_BitwiseOr_X_X@12
PUBLIC	__JustMyCode_Default
EXTRN	_CheckBlockLight:PROC
EXTRN	_AllocateNumber:PROC
EXTRN	_CommitNumber:PROC
EXTRN	_CheckNumber:PROC
EXTRN	_DuplicateNumber:PROC
EXTRN	_From_I_Imp:PROC
EXTRN	_From_L_Imp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__aullshr:PROC
EXTRN	_number_zero:BYTE
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c
_TEXT	SEGMENT
_nw_light_check_code$1 = -84				; size = 4
_w_bit_count$2 = -76					; size = 4
_v_bit_count$3 = -72					; size = 4
_u_bit_count$4 = -68					; size = 4
_w_light_check_code$5 = -60				; size = 4
_w_bit_count$6 = -52					; size = 4
_v_bit_count$7 = -48					; size = 4
_w_light_check_code$8 = -40				; size = 4
_w_bit_count$9 = -32					; size = 4
_v_bit_count$10 = -28					; size = 4
_v_lo$11 = -24						; size = 4
_v_hi$12 = -16						; size = 4
_u_bit_count$13 = -8					; size = 4
_result$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_w$ = 20						; size = 4
_PMC_BitwiseOr_X_L_Imp PROC

; 275  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	edi
	lea	edi, DWORD PTR [ebp-88]
	mov	ecx, 22					; 00000016H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __3F1A8F43_pmc_bitwiseor@c
	call	@__CheckForDebuggerJustMyCode@4

; 276  :     PMC_STATUS_CODE result;
; 277  :     if (u->IS_ZERO)

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN2@PMC_Bitwis

; 278  :     {
; 279  :         // u が 0 である場合
; 280  :         if (v == 0)

	mov	edx, DWORD PTR _v$[ebp]
	or	edx, DWORD PTR _v$[ebp+4]
	jne	SHORT $LN4@PMC_Bitwis

; 281  :         {
; 282  :             // v が 0 である場合
; 283  :             *w = &number_zero;

	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax], OFFSET _number_zero

; 284  :         }

	jmp	SHORT $LN5@PMC_Bitwis
$LN4@PMC_Bitwis:

; 285  :         else
; 286  :         {
; 287  :             // v が 0 でない場合
; 288  :             if ((result = From_L_Imp(v, w)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _w$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	call	_From_L_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Bitwis

; 289  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Bitwis
$LN5@PMC_Bitwis:

; 290  :         }
; 291  :     }

	jmp	$LN3@PMC_Bitwis
$LN2@PMC_Bitwis:

; 292  :     else if (v == 0)

	mov	ecx, DWORD PTR _v$[ebp]
	or	ecx, DWORD PTR _v$[ebp+4]
	jne	SHORT $LN7@PMC_Bitwis

; 293  :     {
; 294  :         // v が 0 である場合
; 295  :         if ((result = DuplicateNumber(u, w)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN9@PMC_Bitwis

; 296  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Bitwis
$LN9@PMC_Bitwis:

; 297  :     }

	jmp	$LN3@PMC_Bitwis
$LN7@PMC_Bitwis:

; 298  :     else
; 299  :     {
; 300  :         // u と v がともに 0 ではない場合
; 301  :         if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)

	mov	ecx, 1
	test	ecx, ecx
	je	$LN10@PMC_Bitwis

; 302  :         {
; 303  :             // _UINT64_T が 1 ワードで表現しきれない場合
; 304  :             __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _u_bit_count$13[ebp], eax

; 305  :             _UINT32_T v_hi;
; 306  :             _UINT32_T v_lo = _FROMDWORDTOWORD(v, &v_hi);

	lea	ecx, DWORD PTR _v_hi$12[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	call	__FROMDWORDTOWORD
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _v_lo$11[ebp], eax

; 307  :             if (v_hi == 0)

	cmp	DWORD PTR _v_hi$12[ebp], 0
	jne	$LN12@PMC_Bitwis

; 308  :             {
; 309  :                 // v の値が 32bit で表現可能な場合
; 310  :                 __UNIT_TYPE v_bit_count = sizeof(v_lo) * 8 - _LZCNT_ALT_32(v_lo);

	mov	ecx, DWORD PTR _v_lo$11[ebp]
	push	ecx
	call	__LZCNT_ALT_32
	add	esp, 4
	mov	edx, 32					; 00000020H
	sub	edx, eax
	mov	DWORD PTR _v_bit_count$10[ebp], edx

; 311  :                 __UNIT_TYPE w_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count);

	mov	eax, DWORD PTR _v_bit_count$10[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_bit_count$13[ebp]
	push	ecx
	call	__MAXIMUM_UNIT
	add	esp, 8
	mov	DWORD PTR _w_bit_count$9[ebp], eax

; 312  :                 __UNIT_TYPE w_light_check_code;
; 313  :                 if ((result = AllocateNumber(w, w_bit_count, &w_light_check_code)) != PMC_STATUS_OK)

	lea	edx, DWORD PTR _w_light_check_code$8[ebp]
	push	edx
	mov	eax, DWORD PTR _w_bit_count$9[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	push	ecx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN14@PMC_Bitwis

; 314  :                     return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Bitwis
$LN14@PMC_Bitwis:

; 315  :                 BitwiseOr_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, v_lo, (*w)->BLOCK);

	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _v_lo$11[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_BitwiseOr_X_1W
	add	esp, 16					; 00000010H

; 316  :                 if ((result = CheckBlockLight((*w)->BLOCK, w_light_check_code)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _w_light_check_code$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN15@PMC_Bitwis

; 317  :                     return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Bitwis
$LN15@PMC_Bitwis:

; 318  :             }

	jmp	$LN13@PMC_Bitwis
$LN12@PMC_Bitwis:

; 319  :             else
; 320  :             {
; 321  :                 // y の値が 32bit では表現できない場合
; 322  :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v_hi);

	mov	edx, DWORD PTR _v_hi$12[ebp]
	push	edx
	call	__LZCNT_ALT_32
	add	esp, 4
	mov	ecx, 64					; 00000040H
	sub	ecx, eax
	mov	DWORD PTR _v_bit_count$7[ebp], ecx

; 323  :                 __UNIT_TYPE w_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count);

	mov	edx, DWORD PTR _v_bit_count$7[ebp]
	push	edx
	mov	eax, DWORD PTR _u_bit_count$13[ebp]
	push	eax
	call	__MAXIMUM_UNIT
	add	esp, 8
	mov	DWORD PTR _w_bit_count$6[ebp], eax

; 324  :                 __UNIT_TYPE w_light_check_code;
; 325  :                 if ((result = AllocateNumber(w, w_bit_count, &w_light_check_code)) != PMC_STATUS_OK)

	lea	ecx, DWORD PTR _w_light_check_code$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _w_bit_count$6[ebp]
	push	edx
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN16@PMC_Bitwis

; 326  :                     return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Bitwis
$LN16@PMC_Bitwis:

; 327  :                 BitwiseOr_X_2W(u->BLOCK, u->UNIT_WORD_COUNT, v_hi, v_lo, (*w)->BLOCK);

	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _v_lo$11[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_hi$12[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_BitwiseOr_X_2W
	add	esp, 20					; 00000014H

; 328  :                 if ((result = CheckBlockLight((*w)->BLOCK, w_light_check_code)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _w_light_check_code$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_Bitwis

; 329  :                     return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Bitwis
$LN13@PMC_Bitwis:

; 330  :             }
; 331  :             CommitNumber(*w);

	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_CommitNumber
	add	esp, 4

; 332  :         }

	jmp	$LN3@PMC_Bitwis
$LN10@PMC_Bitwis:

; 333  :         else
; 334  :         {
; 335  :             // _UINT64_T が 1 ワードで表現できる場合
; 336  : 
; 337  :             __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _u_bit_count$4[ebp], edx

; 338  :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);

	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	call	__LZCNT_ALT_UNIT
	add	esp, 4
	mov	ecx, 64					; 00000040H
	sub	ecx, eax
	mov	DWORD PTR _v_bit_count$3[ebp], ecx

; 339  :             __UNIT_TYPE w_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count) + 1;

	mov	edx, DWORD PTR _v_bit_count$3[ebp]
	push	edx
	mov	eax, DWORD PTR _u_bit_count$4[ebp]
	push	eax
	call	__MAXIMUM_UNIT
	add	esp, 8
	add	eax, 1
	mov	DWORD PTR _w_bit_count$2[ebp], eax

; 340  :             __UNIT_TYPE nw_light_check_code;
; 341  :             if ((result = AllocateNumber(w, w_bit_count, &nw_light_check_code)) != PMC_STATUS_OK)

	lea	ecx, DWORD PTR _nw_light_check_code$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _w_bit_count$2[ebp]
	push	edx
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN18@PMC_Bitwis

; 342  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Bitwis
$LN18@PMC_Bitwis:

; 343  :             BitwiseOr_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, (__UNIT_TYPE)v, (*w)->BLOCK);

	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_BitwiseOr_X_1W
	add	esp, 16					; 00000010H

; 344  :             if ((result = CheckBlockLight((*w)->BLOCK, nw_light_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nw_light_check_code$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN19@PMC_Bitwis

; 345  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Bitwis
$LN19@PMC_Bitwis:

; 346  :             CommitNumber(*w);

	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_CommitNumber
	add	esp, 4
$LN3@PMC_Bitwis:

; 347  :         }
; 348  :     }
; 349  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Bitwis:

; 350  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN26@PMC_Bitwis
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 88					; 00000058H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN26@PMC_Bitwis:
	DD	4
	DD	$LN25@PMC_Bitwis
$LN25@PMC_Bitwis:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN21@PMC_Bitwis
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN22@PMC_Bitwis
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN23@PMC_Bitwis
	DD	-84					; ffffffacH
	DD	4
	DD	$LN24@PMC_Bitwis
$LN24@PMC_Bitwis:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN23@PMC_Bitwis:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN22@PMC_Bitwis:
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN21@PMC_Bitwis:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	0
_PMC_BitwiseOr_X_L_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c
_TEXT	SEGMENT
_nz_check_code$1 = -24					; size = 4
_w_bit_count$2 = -16					; size = 4
_v_bit_count$3 = -12					; size = 4
_u_bit_count$4 = -8					; size = 4
_result$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_BitwiseOr_X_I_Imp PROC

; 188  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __3F1A8F43_pmc_bitwiseor@c
	call	@__CheckForDebuggerJustMyCode@4

; 189  :     PMC_STATUS_CODE result;
; 190  :     if (u->IS_ZERO)

	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN2@PMC_Bitwis

; 191  :     {
; 192  :         // u が 0 である場合
; 193  :         if (v == 0)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN4@PMC_Bitwis

; 194  :         {
; 195  :             // v が 0 である場合
; 196  :             *w = &number_zero;

	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx], OFFSET _number_zero

; 197  :         }

	jmp	SHORT $LN5@PMC_Bitwis
$LN4@PMC_Bitwis:

; 198  :         else
; 199  :         {
; 200  :             // v が 0 でない場合
; 201  :             if ((result = From_I_Imp(v, w)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_From_I_Imp
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Bitwis

; 202  :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Bitwis
$LN5@PMC_Bitwis:

; 203  :         }
; 204  :     }

	jmp	$LN3@PMC_Bitwis
$LN2@PMC_Bitwis:

; 205  :     else if (v == 0)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN7@PMC_Bitwis

; 206  :     {
; 207  :         // v が 0 である場合
; 208  :         if ((result = DuplicateNumber(u, w)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN9@PMC_Bitwis

; 209  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Bitwis
$LN9@PMC_Bitwis:

; 210  :     }

	jmp	$LN3@PMC_Bitwis
$LN7@PMC_Bitwis:

; 211  :     else
; 212  :     {
; 213  :         // x と y がともに 0 ではない場合
; 214  :         __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _u_bit_count$4[ebp], edx

; 215  :         __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	call	__LZCNT_ALT_32
	add	esp, 4
	mov	ecx, 32					; 00000020H
	sub	ecx, eax
	mov	DWORD PTR _v_bit_count$3[ebp], ecx

; 216  :         __UNIT_TYPE w_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count) + 1;

	mov	edx, DWORD PTR _v_bit_count$3[ebp]
	push	edx
	mov	eax, DWORD PTR _u_bit_count$4[ebp]
	push	eax
	call	__MAXIMUM_UNIT
	add	esp, 8
	add	eax, 1
	mov	DWORD PTR _w_bit_count$2[ebp], eax

; 217  :         __UNIT_TYPE nz_check_code;
; 218  :         if ((result = AllocateNumber(w, w_bit_count, &nz_check_code)) != PMC_STATUS_OK)

	lea	ecx, DWORD PTR _nz_check_code$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _w_bit_count$2[ebp]
	push	edx
	mov	eax, DWORD PTR _w$[ebp]
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN10@PMC_Bitwis

; 219  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Bitwis
$LN10@PMC_Bitwis:

; 220  :         BitwiseOr_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, v, (*w)->BLOCK);

	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_BitwiseOr_X_1W
	add	esp, 16					; 00000010H

; 221  :         if ((result = CheckBlockLight((*w)->BLOCK, nz_check_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nz_check_code$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN11@PMC_Bitwis

; 222  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Bitwis
$LN11@PMC_Bitwis:

; 223  :         CommitNumber(*w);

	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_CommitNumber
	add	esp, 4
$LN3@PMC_Bitwis:

; 224  :     }
; 225  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Bitwis:

; 226  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@PMC_Bitwis
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN15@PMC_Bitwis:
	DD	1
	DD	$LN14@PMC_Bitwis
$LN14@PMC_Bitwis:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN13@PMC_Bitwis
$LN13@PMC_Bitwis:
	DB	110					; 0000006eH
	DB	122					; 0000007aH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_PMC_BitwiseOr_X_I_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c
_TEXT	SEGMENT
_count$ = -12						; size = 4
_cp_count$ = -8						; size = 4
_or_count$ = -4						; size = 4
_u$ = 8							; size = 4
_u_count$ = 12						; size = 4
_v$ = 16						; size = 4
_v_count$ = 20						; size = 4
_w$ = 24						; size = 4
_BitwiseOr_X_X PROC

; 73   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __3F1A8F43_pmc_bitwiseor@c
	call	@__CheckForDebuggerJustMyCode@4

; 74   :     __UNIT_TYPE or_count = v_count;

	mov	eax, DWORD PTR _v_count$[ebp]
	mov	DWORD PTR _or_count$[ebp], eax

; 75   :     __UNIT_TYPE cp_count = u_count - v_count;

	mov	ecx, DWORD PTR _u_count$[ebp]
	sub	ecx, DWORD PTR _v_count$[ebp]
	mov	DWORD PTR _cp_count$[ebp], ecx

; 76   : 
; 77   :     __UNIT_TYPE count = or_count >> 5;

	mov	edx, DWORD PTR _or_count$[ebp]
	shr	edx, 5
	mov	DWORD PTR _count$[ebp], edx
$LN2@BitwiseOr_:

; 78   :     while (count > 0)

	cmp	DWORD PTR _count$[ebp], 0
	jbe	$LN3@BitwiseOr_

; 79   :     {
; 80   :         w[0] = u[0] | v[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	or	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 81   :         w[1] = u[1] | v[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	or	eax, DWORD PTR [esi+ecx]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 82   :         w[2] = u[2] | v[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	or	eax, DWORD PTR [esi+ecx]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 83   :         w[3] = u[3] | v[3];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 3
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	or	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 3
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 84   :         w[4] = u[4] | v[4];

	mov	eax, 4
	shl	eax, 2
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	or	eax, DWORD PTR [esi+ecx]
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 85   :         w[5] = u[5] | v[5];

	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, 4
	imul	eax, edx, 5
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	or	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 5
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 86   :         w[6] = u[6] | v[6];

	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, 4
	imul	eax, edx, 6
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	or	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 6
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 87   :         w[7] = u[7] | v[7];

	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, 4
	imul	eax, edx, 7
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	or	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 7
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 88   :         w[8] = u[8] | v[8];

	mov	eax, 4
	shl	eax, 3
	mov	ecx, 4
	shl	ecx, 3
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	or	eax, DWORD PTR [esi+ecx]
	mov	ecx, 4
	shl	ecx, 3
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 89   :         w[9] = u[9] | v[9];

	mov	eax, 4
	imul	ecx, eax, 9
	mov	edx, 4
	imul	eax, edx, 9
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	or	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 9
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 90   :         w[10] = u[10] | v[10];

	mov	eax, 4
	imul	ecx, eax, 10
	mov	edx, 4
	imul	eax, edx, 10
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	or	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 10
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 91   :         w[11] = u[11] | v[11];

	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, 4
	imul	eax, edx, 11
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	or	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 11
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 92   :         w[12] = u[12] | v[12];

	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, 4
	imul	eax, edx, 12
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	or	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 12
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 93   :         w[13] = u[13] | v[13];

	mov	eax, 4
	imul	ecx, eax, 13
	mov	edx, 4
	imul	eax, edx, 13
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	or	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 13
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 94   :         w[14] = u[14] | v[14];

	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, 4
	imul	eax, edx, 14
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	or	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 14
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 95   :         w[15] = u[15] | v[15];

	mov	eax, 4
	imul	ecx, eax, 15
	mov	edx, 4
	imul	eax, edx, 15
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	or	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 15
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 96   :         w[16] = u[16] | v[16];

	mov	eax, 4
	shl	eax, 4
	mov	ecx, 4
	shl	ecx, 4
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	or	eax, DWORD PTR [esi+ecx]
	mov	ecx, 4
	shl	ecx, 4
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 97   :         w[17] = u[17] | v[17];

	mov	eax, 4
	imul	ecx, eax, 17
	mov	edx, 4
	imul	eax, edx, 17
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	or	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 17
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 98   :         w[18] = u[18] | v[18];

	mov	eax, 4
	imul	ecx, eax, 18
	mov	edx, 4
	imul	eax, edx, 18
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	or	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 18
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 99   :         w[19] = u[19] | v[19];

	mov	eax, 4
	imul	ecx, eax, 19
	mov	edx, 4
	imul	eax, edx, 19
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	or	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 19
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 100  :         w[20] = u[20] | v[20];

	mov	eax, 4
	imul	ecx, eax, 20
	mov	edx, 4
	imul	eax, edx, 20
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	or	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 20
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 101  :         w[21] = u[21] | v[21];

	mov	eax, 4
	imul	ecx, eax, 21
	mov	edx, 4
	imul	eax, edx, 21
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	or	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 21
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 102  :         w[22] = u[22] | v[22];

	mov	eax, 4
	imul	ecx, eax, 22
	mov	edx, 4
	imul	eax, edx, 22
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	or	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 22
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 103  :         w[23] = u[23] | v[23];

	mov	eax, 4
	imul	ecx, eax, 23
	mov	edx, 4
	imul	eax, edx, 23
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	or	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 23
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 104  :         w[24] = u[24] | v[24];

	mov	eax, 4
	imul	ecx, eax, 24
	mov	edx, 4
	imul	eax, edx, 24
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	or	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 24
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 105  :         w[25] = u[25] | v[25];

	mov	eax, 4
	imul	ecx, eax, 25
	mov	edx, 4
	imul	eax, edx, 25
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	or	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 25
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 106  :         w[26] = u[26] | v[26];

	mov	eax, 4
	imul	ecx, eax, 26
	mov	edx, 4
	imul	eax, edx, 26
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	or	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 26
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 107  :         w[27] = u[27] | v[27];

	mov	eax, 4
	imul	ecx, eax, 27
	mov	edx, 4
	imul	eax, edx, 27
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	or	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 27
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 108  :         w[28] = u[28] | v[28];

	mov	eax, 4
	imul	ecx, eax, 28
	mov	edx, 4
	imul	eax, edx, 28
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	or	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 28
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 109  :         w[29] = u[29] | v[29];

	mov	eax, 4
	imul	ecx, eax, 29
	mov	edx, 4
	imul	eax, edx, 29
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	or	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 29
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 110  :         w[30] = u[30] | v[30];

	mov	eax, 4
	imul	ecx, eax, 30
	mov	edx, 4
	imul	eax, edx, 30
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	or	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 30
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 111  :         w[31] = u[31] | v[31];

	mov	eax, 4
	imul	ecx, eax, 31
	mov	edx, 4
	imul	eax, edx, 31
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	or	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 31
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 112  :         u += 32;

	mov	eax, DWORD PTR _u$[ebp]
	add	eax, 128				; 00000080H
	mov	DWORD PTR _u$[ebp], eax

; 113  :         v += 32;

	mov	ecx, DWORD PTR _v$[ebp]
	add	ecx, 128				; 00000080H
	mov	DWORD PTR _v$[ebp], ecx

; 114  :         w += 32;

	mov	edx, DWORD PTR _w$[ebp]
	add	edx, 128				; 00000080H
	mov	DWORD PTR _w$[ebp], edx

; 115  :         --count;

	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _count$[ebp], eax

; 116  :     }

	jmp	$LN2@BitwiseOr_
$LN3@BitwiseOr_:

; 117  : 
; 118  :     if (or_count & 0x10)

	mov	ecx, DWORD PTR _or_count$[ebp]
	and	ecx, 16					; 00000010H
	je	$LN4@BitwiseOr_

; 119  :     {
; 120  :         w[0] = u[0] | v[0];

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	or	eax, DWORD PTR [esi+edx]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx+edx], eax

; 121  :         w[1] = u[1] | v[1];

	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	or	edx, DWORD PTR [esi+eax]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx+eax], edx

; 122  :         w[2] = u[2] | v[2];

	mov	edx, 4
	shl	edx, 1
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	or	edx, DWORD PTR [esi+eax]
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx+eax], edx

; 123  :         w[3] = u[3] | v[3];

	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	or	eax, DWORD PTR [esi+edx]
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx+edx], eax

; 124  :         w[4] = u[4] | v[4];

	mov	edx, 4
	shl	edx, 2
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	or	edx, DWORD PTR [esi+eax]
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx+eax], edx

; 125  :         w[5] = u[5] | v[5];

	mov	edx, 4
	imul	eax, edx, 5
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	ecx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	or	eax, DWORD PTR [esi+edx]
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx+edx], eax

; 126  :         w[6] = u[6] | v[6];

	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	ecx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	or	eax, DWORD PTR [esi+edx]
	mov	ecx, 4
	imul	edx, ecx, 6
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx+edx], eax

; 127  :         w[7] = u[7] | v[7];

	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	ecx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	or	eax, DWORD PTR [esi+edx]
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx+edx], eax

; 128  :         w[8] = u[8] | v[8];

	mov	edx, 4
	shl	edx, 3
	mov	eax, 4
	shl	eax, 3
	mov	ecx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	or	edx, DWORD PTR [esi+eax]
	mov	eax, 4
	shl	eax, 3
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx+eax], edx

; 129  :         w[9] = u[9] | v[9];

	mov	edx, 4
	imul	eax, edx, 9
	mov	ecx, 4
	imul	edx, ecx, 9
	mov	ecx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	or	eax, DWORD PTR [esi+edx]
	mov	ecx, 4
	imul	edx, ecx, 9
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx+edx], eax

; 130  :         w[10] = u[10] | v[10];

	mov	edx, 4
	imul	eax, edx, 10
	mov	ecx, 4
	imul	edx, ecx, 10
	mov	ecx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	or	eax, DWORD PTR [esi+edx]
	mov	ecx, 4
	imul	edx, ecx, 10
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx+edx], eax

; 131  :         w[11] = u[11] | v[11];

	mov	edx, 4
	imul	eax, edx, 11
	mov	ecx, 4
	imul	edx, ecx, 11
	mov	ecx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	or	eax, DWORD PTR [esi+edx]
	mov	ecx, 4
	imul	edx, ecx, 11
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx+edx], eax

; 132  :         w[12] = u[12] | v[12];

	mov	edx, 4
	imul	eax, edx, 12
	mov	ecx, 4
	imul	edx, ecx, 12
	mov	ecx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	or	eax, DWORD PTR [esi+edx]
	mov	ecx, 4
	imul	edx, ecx, 12
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx+edx], eax

; 133  :         w[13] = u[13] | v[13];

	mov	edx, 4
	imul	eax, edx, 13
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	ecx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	or	eax, DWORD PTR [esi+edx]
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx+edx], eax

; 134  :         w[14] = u[14] | v[14];

	mov	edx, 4
	imul	eax, edx, 14
	mov	ecx, 4
	imul	edx, ecx, 14
	mov	ecx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	or	eax, DWORD PTR [esi+edx]
	mov	ecx, 4
	imul	edx, ecx, 14
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx+edx], eax

; 135  :         w[15] = u[15] | v[15];

	mov	edx, 4
	imul	eax, edx, 15
	mov	ecx, 4
	imul	edx, ecx, 15
	mov	ecx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	or	eax, DWORD PTR [esi+edx]
	mov	ecx, 4
	imul	edx, ecx, 15
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx+edx], eax

; 136  :         u += 16;

	mov	edx, DWORD PTR _u$[ebp]
	add	edx, 64					; 00000040H
	mov	DWORD PTR _u$[ebp], edx

; 137  :         v += 16;

	mov	eax, DWORD PTR _v$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _v$[ebp], eax

; 138  :         w += 16;

	mov	ecx, DWORD PTR _w$[ebp]
	add	ecx, 64					; 00000040H
	mov	DWORD PTR _w$[ebp], ecx
$LN4@BitwiseOr_:

; 139  :     }
; 140  : 
; 141  :     if (or_count & 0x8)

	mov	edx, DWORD PTR _or_count$[ebp]
	and	edx, 8
	je	$LN5@BitwiseOr_

; 142  :     {
; 143  :         w[0] = u[0] | v[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	or	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 144  :         w[1] = u[1] | v[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	or	eax, DWORD PTR [esi+ecx]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 145  :         w[2] = u[2] | v[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	or	eax, DWORD PTR [esi+ecx]
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 146  :         w[3] = u[3] | v[3];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, 4
	imul	eax, edx, 3
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	or	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 3
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 147  :         w[4] = u[4] | v[4];

	mov	eax, 4
	shl	eax, 2
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	or	eax, DWORD PTR [esi+ecx]
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 148  :         w[5] = u[5] | v[5];

	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, 4
	imul	eax, edx, 5
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	or	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 5
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 149  :         w[6] = u[6] | v[6];

	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, 4
	imul	eax, edx, 6
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	or	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 6
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 150  :         w[7] = u[7] | v[7];

	mov	eax, 4
	imul	ecx, eax, 7
	mov	edx, 4
	imul	eax, edx, 7
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	or	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 7
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 151  :         u += 8;

	mov	eax, DWORD PTR _u$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _u$[ebp], eax

; 152  :         v += 8;

	mov	ecx, DWORD PTR _v$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _v$[ebp], ecx

; 153  :         w += 8;

	mov	edx, DWORD PTR _w$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _w$[ebp], edx
$LN5@BitwiseOr_:

; 154  :     }
; 155  : 
; 156  :     if (or_count & 0x4)

	mov	eax, DWORD PTR _or_count$[ebp]
	and	eax, 4
	je	$LN6@BitwiseOr_

; 157  :     {
; 158  :         w[0] = u[0] | v[0];

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	or	edx, DWORD PTR [esi+ecx]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 159  :         w[1] = u[1] | v[1];

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	or	ecx, DWORD PTR [esi+edx]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+edx], ecx

; 160  :         w[2] = u[2] | v[2];

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	or	ecx, DWORD PTR [esi+edx]
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+edx], ecx

; 161  :         w[3] = u[3] | v[3];

	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, 4
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [eax+edx]
	or	edx, DWORD PTR [esi+ecx]
	mov	eax, 4
	imul	ecx, eax, 3
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 162  :         u += 4;

	mov	ecx, DWORD PTR _u$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _u$[ebp], ecx

; 163  :         v += 4;

	mov	edx, DWORD PTR _v$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _v$[ebp], edx

; 164  :         w += 4;

	mov	eax, DWORD PTR _w$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _w$[ebp], eax
$LN6@BitwiseOr_:

; 165  :     }
; 166  : 
; 167  :     if (or_count & 0x2)

	mov	ecx, DWORD PTR _or_count$[ebp]
	and	ecx, 2
	je	SHORT $LN7@BitwiseOr_

; 168  :     {
; 169  :         w[0] = u[0] | v[0];

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	or	eax, DWORD PTR [esi+edx]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx+edx], eax

; 170  :         w[1] = u[1] | v[1];

	mov	edx, 4
	shl	edx, 0
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+edx]
	or	edx, DWORD PTR [esi+eax]
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx+eax], edx

; 171  :         u += 2;

	mov	edx, DWORD PTR _u$[ebp]
	add	edx, 8
	mov	DWORD PTR _u$[ebp], edx

; 172  :         v += 2;

	mov	eax, DWORD PTR _v$[ebp]
	add	eax, 8
	mov	DWORD PTR _v$[ebp], eax

; 173  :         w += 2;

	mov	ecx, DWORD PTR _w$[ebp]
	add	ecx, 8
	mov	DWORD PTR _w$[ebp], ecx
$LN7@BitwiseOr_:

; 174  :     }
; 175  : 
; 176  :     if (or_count & 0x1)

	mov	edx, DWORD PTR _or_count$[ebp]
	and	edx, 1
	je	SHORT $LN8@BitwiseOr_

; 177  :     {
; 178  :         w[0] = u[0] | v[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _u$[ebp]
	mov	esi, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	or	ecx, DWORD PTR [esi+eax]
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 179  :         u += 1;

	mov	eax, DWORD PTR _u$[ebp]
	add	eax, 4
	mov	DWORD PTR _u$[ebp], eax

; 180  :         v += 1;

	mov	ecx, DWORD PTR _v$[ebp]
	add	ecx, 4
	mov	DWORD PTR _v$[ebp], ecx

; 181  :         w += 1;

	mov	edx, DWORD PTR _w$[ebp]
	add	edx, 4
	mov	DWORD PTR _w$[ebp], edx
$LN8@BitwiseOr_:

; 182  :     }
; 183  : 
; 184  :     _COPY_MEMORY_UNIT(w, u, cp_count);

	mov	eax, DWORD PTR _cp_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	call	__COPY_MEMORY_UNIT
	add	esp, 12					; 0000000cH

; 185  : }

	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_BitwiseOr_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c
_TEXT	SEGMENT
_u$ = 8							; size = 4
_u_count$ = 12						; size = 4
_v_hi$ = 16						; size = 4
_v_lo$ = 20						; size = 4
_w$ = 24						; size = 4
_BitwiseOr_X_2W PROC

; 52   : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __3F1A8F43_pmc_bitwiseor@c
	call	@__CheckForDebuggerJustMyCode@4

; 53   :     if (u_count == 1)

	cmp	DWORD PTR _u_count$[ebp], 1
	jne	SHORT $LN2@BitwiseOr_

; 54   :     {
; 55   :         w[0] = u[0] | v_lo;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	or	eax, DWORD PTR _v_lo$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx+edx], eax

; 56   :         w[1] = v_hi;

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _v_hi$[ebp]
	mov	DWORD PTR [eax+edx], ecx

; 57   :     }

	jmp	$LN1@BitwiseOr_
$LN2@BitwiseOr_:

; 58   :     else if (u_count == 2)

	cmp	DWORD PTR _u_count$[ebp], 2
	jne	SHORT $LN4@BitwiseOr_

; 59   :     {
; 60   :         w[0] = u[0] | v_lo;

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	or	edx, DWORD PTR _v_lo$[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 61   :         w[1] = u[1] | v_hi;

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	or	eax, DWORD PTR _v_hi$[ebp]
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 62   :     }

	jmp	SHORT $LN1@BitwiseOr_
$LN4@BitwiseOr_:

; 63   :     else
; 64   :     {
; 65   :         w[0] = u[0] | v_lo;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	or	eax, DWORD PTR _v_lo$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx+edx], eax

; 66   :         w[1] = u[1] | v_hi;

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _u$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	or	ecx, DWORD PTR _v_hi$[ebp]
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+edx], ecx

; 67   :         _COPY_MEMORY_UNIT(w + 2, u + 2, u_count - 2);

	mov	ecx, DWORD PTR _u_count$[ebp]
	sub	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR _w$[ebp]
	add	eax, 8
	push	eax
	call	__COPY_MEMORY_UNIT
	add	esp, 12					; 0000000cH
$LN1@BitwiseOr_:

; 68   :     }
; 69   : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_BitwiseOr_X_2W ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c
_TEXT	SEGMENT
_u$ = 8							; size = 4
_u_count$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
_BitwiseOr_X_1W PROC

; 40   : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __3F1A8F43_pmc_bitwiseor@c
	call	@__CheckForDebuggerJustMyCode@4

; 41   :     if (u_count == 1)

	cmp	DWORD PTR _u_count$[ebp], 1
	jne	SHORT $LN2@BitwiseOr_

; 42   :         w[0] = u[0] | v;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _u$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	or	eax, DWORD PTR _v$[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _w$[ebp]
	mov	DWORD PTR [ecx+edx], eax
	jmp	SHORT $LN1@BitwiseOr_
$LN2@BitwiseOr_:

; 43   :     else
; 44   :     {
; 45   :         w[0] = u[0] | v;

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _u$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	or	edx, DWORD PTR _v$[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _w$[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 46   :         _COPY_MEMORY_UNIT(w + 1, u + 1, u_count - 1);

	mov	ecx, DWORD PTR _u_count$[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR _w$[ebp]
	add	eax, 4
	push	eax
	call	__COPY_MEMORY_UNIT
	add	esp, 12					; 0000000cH
$LN1@BitwiseOr_:

; 47   :     }
; 48   : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_BitwiseOr_X_1W ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT PROC

; 629  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 630  :         if (x == 0)

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 631  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 632  : #ifdef _M_IX86
; 633  :         _UINT32_T pos;
; 634  : #ifdef _MSC_VER
; 635  :         _BitScanReverse(&pos, x);

	bsr	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _pos$[ebp], eax

; 636  : #elif defined(__GNUC__)
; 637  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 638  : #else
; 639  : #error unknown compiler
; 640  : #endif
; 641  : #elif defined(_M_X64)
; 642  : #ifdef _MSC_VER
; 643  :         _UINT32_T pos;
; 644  :         _BitScanReverse64(&pos, x);
; 645  : #elif defined(__GNUC__)
; 646  :         _UINT64_T pos;
; 647  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 648  : #else
; 649  : #error unknown compiler
; 650  : #endif
; 651  : #else
; 652  : #error unknown platform
; 653  : #endif
; 654  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, DWORD PTR _pos$[ebp]
$LN1@LZCNT_ALT_:

; 655  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@LZCNT_ALT_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@LZCNT_ALT_:
	DD	1
	DD	$LN5@LZCNT_ALT_
$LN5@LZCNT_ALT_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@LZCNT_ALT_
$LN4@LZCNT_ALT_:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
__LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 4
__LZCNT_ALT_32 PROC

; 596  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 597  :         if (x == 0)

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 598  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 599  :         _UINT32_T pos;
; 600  : #ifdef _MSC_VER
; 601  :         _BitScanReverse(&pos, x);

	bsr	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _pos$[ebp], eax

; 602  : #elif defined(__GNUC__)
; 603  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 604  : #else
; 605  : #error unknown compiler
; 606  : #endif
; 607  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, DWORD PTR _pos$[ebp]
$LN1@LZCNT_ALT_:

; 608  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@LZCNT_ALT_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@LZCNT_ALT_:
	DD	1
	DD	$LN5@LZCNT_ALT_
$LN5@LZCNT_ALT_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@LZCNT_ALT_
$LN4@LZCNT_ALT_:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
__LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
tv65 = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
__MAXIMUM_UNIT PROC

; 203  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 204  :         return (x >= y ? x : y);

	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _y$[ebp]
	jb	SHORT $LN3@MAXIMUM_UN
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv65[ebp], ecx
	jmp	SHORT $LN4@MAXIMUM_UN
$LN3@MAXIMUM_UN:
	mov	edx, DWORD PTR _y$[ebp]
	mov	DWORD PTR tv65[ebp], edx
$LN4@MAXIMUM_UN:
	mov	eax, DWORD PTR tv65[ebp]

; 205  :     }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__MAXIMUM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC

; 182  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 183  :         *result_high = (_UINT32_T)(value >> 32);

	mov	eax, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR _value$[ebp+4]
	mov	cl, 32					; 00000020H
	call	__aullshr
	mov	ecx, DWORD PTR _result_high$[ebp]
	mov	DWORD PTR [ecx], eax

; 184  :         return ((_UINT32_T)value);

	mov	eax, DWORD PTR _value$[ebp]

; 185  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT PROC

; 66   :     {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 67   : #ifdef _M_IX86
; 68   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, DWORD PTR _d$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep movsd

; 69   : #elif defined(_M_X64)
; 70   :         __movsq(d, s, count);
; 71   : #else
; 72   : #error unknown platform
; 73   : #endif
; 74   :     }

	pop	edi
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c
_TEXT	SEGMENT
_nw_light_check_code$1 = -48				; size = 4
_w_bit_count$2 = -40					; size = 4
_v_bit_count$3 = -36					; size = 4
_u_bit_count$4 = -32					; size = 4
_t$5 = -28						; size = 4
_nw$ = -20						; size = 4
_result$ = -12						; size = 4
_nv$ = -8						; size = 4
_nu$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_BitwiseOr_X_X@12 PROC

; 399  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __3F1A8F43_pmc_bitwiseor@c
	call	@__CheckForDebuggerJustMyCode@4

; 400  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_Bitwis

; 401  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Bitwis
$LN2@PMC_Bitwis:

; 402  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Bitwis

; 403  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Bitwis
$LN3@PMC_Bitwis:

; 404  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Bitwis

; 405  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_Bitwis
$LN4@PMC_Bitwis:

; 406  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 407  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	ecx, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], ecx

; 408  :     PMC_STATUS_CODE result;
; 409  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nu$[ebp]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Bitwis

; 410  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Bitwis
$LN5@PMC_Bitwis:

; 411  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Bitwis

; 412  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Bitwis
$LN6@PMC_Bitwis:

; 413  :     NUMBER_HEADER* nw;
; 414  :     if (nu->IS_ZERO)

	mov	ecx, DWORD PTR _nu$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	shr	edx, 1
	and	edx, 1
	je	SHORT $LN7@PMC_Bitwis

; 415  :     {
; 416  :         if ((result = DuplicateNumber(nv, &nw)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN9@PMC_Bitwis

; 417  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Bitwis
$LN9@PMC_Bitwis:

; 418  :     }

	jmp	$LN8@PMC_Bitwis
$LN7@PMC_Bitwis:

; 419  :     else if (nv->IS_ZERO)

	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+24]
	shr	eax, 1
	and	eax, 1
	je	SHORT $LN10@PMC_Bitwis

; 420  :     {
; 421  :         if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	ecx, DWORD PTR _nw$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	push	edx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN12@PMC_Bitwis

; 422  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_Bitwis
$LN12@PMC_Bitwis:

; 423  :     }

	jmp	$LN8@PMC_Bitwis
$LN10@PMC_Bitwis:

; 424  :     else
; 425  :     {
; 426  :         if (nu->UNIT_WORD_COUNT < nv->UNIT_WORD_COUNT)

	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	jae	SHORT $LN13@PMC_Bitwis

; 427  :         {
; 428  :             NUMBER_HEADER* t = nu;

	mov	eax, DWORD PTR _nu$[ebp]
	mov	DWORD PTR _t$5[ebp], eax

; 429  :             nu = nv;

	mov	ecx, DWORD PTR _nv$[ebp]
	mov	DWORD PTR _nu$[ebp], ecx

; 430  :             nv = t;

	mov	edx, DWORD PTR _t$5[ebp]
	mov	DWORD PTR _nv$[ebp], edx
$LN13@PMC_Bitwis:

; 431  :         }
; 432  :         __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _u_bit_count$4[ebp], ecx

; 433  :         __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _v_bit_count$3[ebp], eax

; 434  :         __UNIT_TYPE w_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count);

	mov	ecx, DWORD PTR _v_bit_count$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_bit_count$4[ebp]
	push	edx
	call	__MAXIMUM_UNIT
	add	esp, 8
	mov	DWORD PTR _w_bit_count$2[ebp], eax

; 435  :         __UNIT_TYPE nw_light_check_code;
; 436  :         if ((result = AllocateNumber(&nw, w_bit_count, &nw_light_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nw_light_check_code$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _w_bit_count$2[ebp]
	push	ecx
	lea	edx, DWORD PTR _nw$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN14@PMC_Bitwis

; 437  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Bitwis
$LN14@PMC_Bitwis:

; 438  :         BitwiseOr_X_X(nu->BLOCK, nu->UNIT_WORD_COUNT, nv->BLOCK, nv->UNIT_WORD_COUNT, nw->BLOCK);

	mov	eax, DWORD PTR _nw$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_BitwiseOr_X_X
	add	esp, 20					; 00000014H

; 439  :         if ((result = CheckBlockLight(nw->BLOCK, nw_light_check_code)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _nw_light_check_code$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _nw$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN15@PMC_Bitwis

; 440  :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Bitwis
$LN15@PMC_Bitwis:

; 441  :         CommitNumber(nw);

	mov	ecx, DWORD PTR _nw$[ebp]
	push	ecx
	call	_CommitNumber
	add	esp, 4
$LN8@PMC_Bitwis:

; 442  :     }
; 443  :     *w = nw;

	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR _nw$[ebp]
	mov	DWORD PTR [edx], eax

; 444  : #ifdef _DEBUG
; 445  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _w$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN16@PMC_Bitwis

; 446  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Bitwis
$LN16@PMC_Bitwis:

; 447  : #endif
; 448  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Bitwis:

; 449  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@PMC_Bitwis
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN21@PMC_Bitwis:
	DD	2
	DD	$LN20@PMC_Bitwis
$LN20@PMC_Bitwis:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN18@PMC_Bitwis
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN19@PMC_Bitwis
$LN19@PMC_Bitwis:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN18@PMC_Bitwis:
	DB	110					; 0000006eH
	DB	119					; 00000077H
	DB	0
_PMC_BitwiseOr_X_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c
_TEXT	SEGMENT
_result$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_w$ = 20						; size = 4
_PMC_BitwiseOr_X_L@16 PROC

; 376  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __3F1A8F43_pmc_bitwiseor@c
	call	@__CheckForDebuggerJustMyCode@4

; 377  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(v) * 8)

	xor	eax, eax
	je	SHORT $LN2@PMC_Bitwis

; 378  :     {
; 379  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 380  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@PMC_Bitwis
$LN2@PMC_Bitwis:

; 381  :     }
; 382  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN3@PMC_Bitwis

; 383  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Bitwis
$LN3@PMC_Bitwis:

; 384  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Bitwis

; 385  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Bitwis
$LN4@PMC_Bitwis:

; 386  :     PMC_STATUS_CODE result;
; 387  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Bitwis

; 388  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Bitwis
$LN5@PMC_Bitwis:

; 389  :     if ((result = PMC_BitwiseOr_X_L_Imp((NUMBER_HEADER*)u, v, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	_PMC_BitwiseOr_X_L_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Bitwis

; 390  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Bitwis
$LN6@PMC_Bitwis:

; 391  : #ifdef _DEBUG
; 392  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN7@PMC_Bitwis

; 393  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Bitwis
$LN7@PMC_Bitwis:

; 394  : #endif
; 395  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Bitwis:

; 396  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_PMC_BitwiseOr_X_L@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c
_TEXT	SEGMENT
_result$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_BitwiseOr_X_I@12 PROC

; 252  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __3F1A8F43_pmc_bitwiseor@c
	call	@__CheckForDebuggerJustMyCode@4

; 253  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)

	xor	eax, eax
	je	SHORT $LN2@PMC_Bitwis

; 254  :     {
; 255  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 256  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@PMC_Bitwis
$LN2@PMC_Bitwis:

; 257  :     }
; 258  :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN3@PMC_Bitwis

; 259  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Bitwis
$LN3@PMC_Bitwis:

; 260  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Bitwis

; 261  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Bitwis
$LN4@PMC_Bitwis:

; 262  :     PMC_STATUS_CODE result;
; 263  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Bitwis

; 264  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Bitwis
$LN5@PMC_Bitwis:

; 265  :     if ((result = PMC_BitwiseOr_X_I_Imp((NUMBER_HEADER*)u, v, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	_PMC_BitwiseOr_X_I_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Bitwis

; 266  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Bitwis
$LN6@PMC_Bitwis:

; 267  : #ifdef _DEBUG
; 268  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN7@PMC_Bitwis

; 269  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Bitwis
$LN7@PMC_Bitwis:

; 270  : #endif
; 271  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Bitwis:

; 272  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_PMC_BitwiseOr_X_I@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c
_TEXT	SEGMENT
_result$ = -4						; size = 4
_u$ = 8							; size = 8
_v$ = 16						; size = 4
_w$ = 20						; size = 4
_PMC_BitwiseOr_L_X@16 PROC

; 353  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __3F1A8F43_pmc_bitwiseor@c
	call	@__CheckForDebuggerJustMyCode@4

; 354  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(u) * 8)

	xor	eax, eax
	je	SHORT $LN2@PMC_Bitwis

; 355  :     {
; 356  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 357  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@PMC_Bitwis
$LN2@PMC_Bitwis:

; 358  :     }
; 359  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Bitwis

; 360  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Bitwis
$LN3@PMC_Bitwis:

; 361  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Bitwis

; 362  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Bitwis
$LN4@PMC_Bitwis:

; 363  :     PMC_STATUS_CODE result;
; 364  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Bitwis

; 365  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Bitwis
$LN5@PMC_Bitwis:

; 366  :     if ((result = PMC_BitwiseOr_X_L_Imp((NUMBER_HEADER*)v, u, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	call	_PMC_BitwiseOr_X_L_Imp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Bitwis

; 367  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Bitwis
$LN6@PMC_Bitwis:

; 368  : #ifdef _DEBUG
; 369  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN7@PMC_Bitwis

; 370  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Bitwis
$LN7@PMC_Bitwis:

; 371  : #endif
; 372  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Bitwis:

; 373  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_PMC_BitwiseOr_L_X@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c
_TEXT	SEGMENT
_result$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w$ = 16						; size = 4
_PMC_BitwiseOr_I_X@12 PROC

; 229  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __3F1A8F43_pmc_bitwiseor@c
	call	@__CheckForDebuggerJustMyCode@4

; 230  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(u) * 8)

	xor	eax, eax
	je	SHORT $LN2@PMC_Bitwis

; 231  :     {
; 232  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 233  :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	SHORT $LN1@PMC_Bitwis
$LN2@PMC_Bitwis:

; 234  :     }
; 235  :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_Bitwis

; 236  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Bitwis
$LN3@PMC_Bitwis:

; 237  :     if (w == NULL)

	cmp	DWORD PTR _w$[ebp], 0
	jne	SHORT $LN4@PMC_Bitwis

; 238  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	SHORT $LN1@PMC_Bitwis
$LN4@PMC_Bitwis:

; 239  :     PMC_STATUS_CODE result;
; 240  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN5@PMC_Bitwis

; 241  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Bitwis
$LN5@PMC_Bitwis:

; 242  :     if ((result = PMC_BitwiseOr_X_I_Imp((NUMBER_HEADER*)v, u, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _w$[ebp]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	_PMC_BitwiseOr_X_I_Imp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_Bitwis

; 243  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Bitwis
$LN6@PMC_Bitwis:

; 244  : #ifdef _DEBUG
; 245  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _w$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN7@PMC_Bitwis

; 246  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_Bitwis
$LN7@PMC_Bitwis:

; 247  : #endif
; 248  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Bitwis:

; 249  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_PMC_BitwiseOr_I_X@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_BitwiseOr PROC

; 452  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __3F1A8F43_pmc_bitwiseor@c
	call	@__CheckForDebuggerJustMyCode@4

; 453  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 454  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_Initialize_BitwiseOr ENDP
_TEXT	ENDS
END
