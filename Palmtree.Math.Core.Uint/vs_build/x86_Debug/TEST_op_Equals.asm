; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\TEST_op_Equals.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__630249ED_pmc_uint_debug@h DB 01H
__ADBE1B8E_test_op_equals@c DB 01H
msvcjmc	ENDS
PUBLIC	_TEST_PMC_Equals_I_X
PUBLIC	_TEST_PMC_Equals_L_X
PUBLIC	_TEST_PMC_Equals_X_I
PUBLIC	_TEST_PMC_Equals_X_L
PUBLIC	_TEST_PMC_Equals_X_X
PUBLIC	__JustMyCode_Default
EXTRN	_TEST_Assert:PROC
EXTRN	_FormatTestLabel:PROC
EXTRN	_FormatTestMesssage:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
_DATA	SEGMENT
$SG94981 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A'
	DB	00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H
	DB	'0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG94982 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'E', 00H, 'q', 00H
	DB	'u', 00H, 'a', 00H, 'l', 00H, 's', 00H, '_', 00H, 'I', 00H, '_'
	DB	00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H, 'd', 00H, '.', 00H
	DB	'%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG94983 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'E', 00H, 'q', 00H
	DB	'u', 00H, 'a', 00H, 'l', 00H, 's', 00H, '_', 00H, 'I', 00H, '_'
	DB	00H, 'X', 00H, 'n0', 0a9H, '_0^', 0b3H, '0', 0fcH, '0', 0c9H, '0'
	DB	'L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH, '0g0o0j0D0(', 00H
	DB	'%', 00H, 'd', 00H, ')', 00H, 00H, 00H
$SG94984 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'E', 00H, 'q', 00H
	DB	'u', 00H, 'a', 00H, 'l', 00H, 's', 00H, '_', 00H, 'I', 00H, '_'
	DB	00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H, 'd', 00H, '.', 00H
	DB	'%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG94985 DB	0c7H, '0', 0fcH, '0', 0bfH, '0n0', 085H, 'Q', 0b9H, '[L0', 00H
	DB	'N', 0f4H, 081H, 'W0j0D0', 00H, 00H
	ORG $+2
$SG94986 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'E', 00H, 'q', 00H
	DB	'u', 00H, 'a', 00H, 'l', 00H, 's', 00H, '_', 00H, 'I', 00H, '_'
	DB	00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H, 'd', 00H, '.', 00H
	DB	'%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG95007 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A'
	DB	00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H
	DB	'0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG95008 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'E', 00H, 'q', 00H
	DB	'u', 00H, 'a', 00H, 'l', 00H, 's', 00H, '_', 00H, 'L', 00H, '_'
	DB	00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H, 'd', 00H, '.', 00H
	DB	'%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG95009 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'E', 00H, 'q', 00H
	DB	'u', 00H, 'a', 00H, 'l', 00H, 's', 00H, '_', 00H, 'L', 00H, '_'
	DB	00H, 'X', 00H, 'n0', 0a9H, '_0^', 0b3H, '0', 0fcH, '0', 0c9H, '0'
	DB	'L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH, '0g0o0j0D0(', 00H
	DB	'%', 00H, 'd', 00H, ')', 00H, 00H, 00H
$SG95010 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'E', 00H, 'q', 00H
	DB	'u', 00H, 'a', 00H, 'l', 00H, 's', 00H, '_', 00H, 'L', 00H, '_'
	DB	00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H, 'd', 00H, '.', 00H
	DB	'%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG95011 DB	0c7H, '0', 0fcH, '0', 0bfH, '0n0', 085H, 'Q', 0b9H, '[L0', 00H
	DB	'N', 0f4H, 081H, 'W0j0D0', 00H, 00H
	ORG $+2
$SG95012 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'E', 00H, 'q', 00H
	DB	'u', 00H, 'a', 00H, 'l', 00H, 's', 00H, '_', 00H, 'L', 00H, '_'
	DB	00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H, 'd', 00H, '.', 00H
	DB	'%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG95033 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A'
	DB	00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H
	DB	'0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG95034 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'E', 00H, 'q', 00H
	DB	'u', 00H, 'a', 00H, 'l', 00H, 's', 00H, '_', 00H, 'X', 00H, '_'
	DB	00H, 'I', 00H, ' ', 00H, '(', 00H, '%', 00H, 'd', 00H, '.', 00H
	DB	'%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG95035 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'E', 00H, 'q', 00H
	DB	'u', 00H, 'a', 00H, 'l', 00H, 's', 00H, '_', 00H, 'X', 00H, '_'
	DB	00H, 'I', 00H, 'n0', 0a9H, '_0^', 0b3H, '0', 0fcH, '0', 0c9H, '0'
	DB	'L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH, '0g0o0j0D0(', 00H
	DB	'%', 00H, 'd', 00H, ')', 00H, 00H, 00H
$SG95036 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'E', 00H, 'q', 00H
	DB	'u', 00H, 'a', 00H, 'l', 00H, 's', 00H, '_', 00H, 'X', 00H, '_'
	DB	00H, 'I', 00H, ' ', 00H, '(', 00H, '%', 00H, 'd', 00H, '.', 00H
	DB	'%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG95037 DB	0c7H, '0', 0fcH, '0', 0bfH, '0n0', 085H, 'Q', 0b9H, '[L0', 00H
	DB	'N', 0f4H, 081H, 'W0j0D0', 00H, 00H
	ORG $+2
$SG95038 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'E', 00H, 'q', 00H
	DB	'u', 00H, 'a', 00H, 'l', 00H, 's', 00H, '_', 00H, 'X', 00H, '_'
	DB	00H, 'I', 00H, ' ', 00H, '(', 00H, '%', 00H, 'd', 00H, '.', 00H
	DB	'%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG95059 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A'
	DB	00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H
	DB	'0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG95060 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'E', 00H, 'q', 00H
	DB	'u', 00H, 'a', 00H, 'l', 00H, 's', 00H, '_', 00H, 'X', 00H, '_'
	DB	00H, 'L', 00H, ' ', 00H, '(', 00H, '%', 00H, 'd', 00H, '.', 00H
	DB	'%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG95061 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'E', 00H, 'q', 00H
	DB	'u', 00H, 'a', 00H, 'l', 00H, 's', 00H, '_', 00H, 'X', 00H, '_'
	DB	00H, 'L', 00H, 'n0', 0a9H, '_0^', 0b3H, '0', 0fcH, '0', 0c9H, '0'
	DB	'L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH, '0g0o0j0D0(', 00H
	DB	'%', 00H, 'd', 00H, ')', 00H, 00H, 00H
$SG95062 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'E', 00H, 'q', 00H
	DB	'u', 00H, 'a', 00H, 'l', 00H, 's', 00H, '_', 00H, 'X', 00H, '_'
	DB	00H, 'L', 00H, ' ', 00H, '(', 00H, '%', 00H, 'd', 00H, '.', 00H
	DB	'%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG95063 DB	0c7H, '0', 0fcH, '0', 0bfH, '0n0', 085H, 'Q', 0b9H, '[L0', 00H
	DB	'N', 0f4H, 081H, 'W0j0D0', 00H, 00H
	ORG $+2
$SG95064 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'E', 00H, 'q', 00H
	DB	'u', 00H, 'a', 00H, 'l', 00H, 's', 00H, '_', 00H, 'X', 00H, '_'
	DB	00H, 'I', 00H, ' ', 00H, '(', 00H, '%', 00H, 'd', 00H, '.', 00H
	DB	'%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG95089 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A'
	DB	00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H
	DB	'0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG95090 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'E', 00H, 'q', 00H
	DB	'u', 00H, 'a', 00H, 'l', 00H, 's', 00H, '_', 00H, 'X', 00H, '_'
	DB	00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H, 'd', 00H, '.', 00H
	DB	'%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG95091 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'F', 00H, 'r', 00H
	DB	'o', 00H, 'm', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A'
	DB	00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, 'n0', 0a9H, '_0^', 0b3H
	DB	'0', 0fcH, '0', 0c9H, '0L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH
	DB	'0g0o0j0D0(', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG95092 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'E', 00H, 'q', 00H
	DB	'u', 00H, 'a', 00H, 'l', 00H, 's', 00H, '_', 00H, 'X', 00H, '_'
	DB	00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H, 'd', 00H, '.', 00H
	DB	'%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG95093 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'E', 00H, 'q', 00H
	DB	'u', 00H, 'a', 00H, 'l', 00H, 's', 00H, '_', 00H, 'X', 00H, '_'
	DB	00H, 'X', 00H, 'n0', 0a9H, '_0^', 0b3H, '0', 0fcH, '0', 0c9H, '0'
	DB	'L0', 01fH, 'g', 085H, '_', 01aH, 090H, 08aH, '0g0o0j0D0(', 00H
	DB	'%', 00H, 'd', 00H, ')', 00H, 00H, 00H
$SG95094 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'E', 00H, 'q', 00H
	DB	'u', 00H, 'a', 00H, 'l', 00H, 's', 00H, '_', 00H, 'X', 00H, '_'
	DB	00H, 'X', 00H, ' ', 00H, '(', 00H, '%', 00H, 'd', 00H, '.', 00H
	DB	'%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG95095 DB	0c7H, '0', 0fcH, '0', 0bfH, '0n0', 085H, 'Q', 0b9H, '[L0', 00H
	DB	'N', 0f4H, 081H, 'W0j0D0', 00H, 00H
	ORG $+2
$SG95096 DB	'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'E', 00H, 'q', 00H
	DB	'u', 00H, 'a', 00H, 'l', 00H, 's', 00H, '_', 00H, 'X', 00H, '_'
	DB	00H, 'I', 00H, ' ', 00H, '(', 00H, '%', 00H, 'd', 00H, '.', 00H
	DB	'%', 00H, 'd', 00H, ')', 00H, 00H, 00H
_DATA	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\test_op_equals.c
_TEXT	SEGMENT
tv152 = -64						; size = 4
tv142 = -60						; size = 4
tv92 = -56						; size = 4
tv74 = -52						; size = 4
_y_result$ = -48					; size = 4
_x_result$ = -44					; size = 4
_result$ = -40						; size = 4
_actual_z$ = -32					; size = 4
_y$ = -20						; size = 4
_x$ = -8						; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_x_buf$ = 20						; size = 4
_x_buf_size$ = 24					; size = 4
_y_buf$ = 28						; size = 4
_y_buf_size$ = 32					; size = 4
_desired_z$ = 36					; size = 4
_TEST_PMC_Equals_X_X PROC

; 85   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __ADBE1B8E_test_op_equals@c
	call	@__CheckForDebuggerJustMyCode@4

; 86   :     PMC_HANDLE_UINT x;
; 87   :     PMC_HANDLE_UINT y;
; 88   :     int actual_z;
; 89   :     PMC_STATUS_CODE result;
; 90   :     PMC_STATUS_CODE x_result;
; 91   :     PMC_STATUS_CODE y_result;
; 92   :     TEST_Assert(env, FormatTestLabel(L"PMC_Equals_X_X (%d.%d)", no, 1), (x_result = ep->FromByteArray(x_buf, x_buf_size, &x)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_FromByteArrayの復帰コードが期待通りではない(%d)", x_result));

	mov	esi, esp
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _x_result$[ebp], eax
	cmp	DWORD PTR _x_result$[ebp], 0
	jne	SHORT $LN5@TEST_PMC_E
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN6@TEST_PMC_E
$LN5@TEST_PMC_E:
	mov	DWORD PTR tv74[ebp], 0
$LN6@TEST_PMC_E:
	mov	edx, DWORD PTR _x_result$[ebp]
	push	edx
	push	OFFSET $SG95089
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG95090
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 93   :     TEST_Assert(env, FormatTestLabel(L"PMC_Equals_X_X (%d.%d)", no, 2), (y_result = ep->FromByteArray(y_buf, y_buf_size, &y)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_FromByteArrayの復帰コードが期待通りではない(%d)", y_result));

	mov	esi, esp
	lea	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _y_result$[ebp], eax
	cmp	DWORD PTR _y_result$[ebp], 0
	jne	SHORT $LN7@TEST_PMC_E
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN8@TEST_PMC_E
$LN7@TEST_PMC_E:
	mov	DWORD PTR tv92[ebp], 0
$LN8@TEST_PMC_E:
	mov	edx, DWORD PTR _y_result$[ebp]
	push	edx
	push	OFFSET $SG95091
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv92[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG95092
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 94   :     TEST_Assert(env, FormatTestLabel(L"PMC_Equals_X_X (%d.%d)", no, 3), (result = ep->Equals_X_X(x, y, &actual_z)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_Equals_X_Xの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	eax, DWORD PTR _actual_z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+240]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN9@TEST_PMC_E
	mov	DWORD PTR tv142[ebp], 1
	jmp	SHORT $LN10@TEST_PMC_E
$LN9@TEST_PMC_E:
	mov	DWORD PTR tv142[ebp], 0
$LN10@TEST_PMC_E:
	mov	edx, DWORD PTR _result$[ebp]
	push	edx
	push	OFFSET $SG95093
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv142[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG95094
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 95   :     TEST_Assert(env, FormatTestLabel(L"PMC_Equals_X_I (%d.%d)", no, 4), actual_z == desired_z, L"データの内容が一致しない");

	mov	eax, DWORD PTR _actual_z$[ebp]
	cmp	eax, DWORD PTR _desired_z$[ebp]
	jne	SHORT $LN11@TEST_PMC_E
	mov	DWORD PTR tv152[ebp], 1
	jmp	SHORT $LN12@TEST_PMC_E
$LN11@TEST_PMC_E:
	mov	DWORD PTR tv152[ebp], 0
$LN12@TEST_PMC_E:
	push	OFFSET $SG95095
	mov	ecx, DWORD PTR tv152[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET $SG95096
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 96   :     if (y_result == PMC_STATUS_OK)

	cmp	DWORD PTR _y_result$[ebp], 0
	jne	SHORT $LN2@TEST_PMC_E

; 97   :         ep->Dispose(y);

	mov	esi, esp
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@TEST_PMC_E:

; 98   :     if (x_result == PMC_STATUS_OK)

	cmp	DWORD PTR _x_result$[ebp], 0
	jne	SHORT $LN1@TEST_PMC_E

; 99   :         ep->Dispose(x);

	mov	esi, esp
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_PMC_E:

; 100  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@TEST_PMC_E
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN17@TEST_PMC_E:
	DD	3
	DD	$LN16@TEST_PMC_E
$LN16@TEST_PMC_E:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN13@TEST_PMC_E
	DD	-20					; ffffffecH
	DD	4
	DD	$LN14@TEST_PMC_E
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN15@TEST_PMC_E
$LN15@TEST_PMC_E:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	122					; 0000007aH
	DB	0
$LN14@TEST_PMC_E:
	DB	121					; 00000079H
	DB	0
$LN13@TEST_PMC_E:
	DB	120					; 00000078H
	DB	0
_TEST_PMC_Equals_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\test_op_equals.c
_TEXT	SEGMENT
tv134 = -44						; size = 4
tv92 = -40						; size = 4
tv74 = -36						; size = 4
_x_result$ = -32					; size = 4
_result$ = -28						; size = 4
_actual_z$ = -20					; size = 4
_x$ = -8						; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_x_buf$ = 20						; size = 4
_x_buf_size$ = 24					; size = 4
_y$ = 28						; size = 8
_desired_z$ = 36					; size = 4
_TEST_PMC_Equals_X_L PROC

; 72   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __ADBE1B8E_test_op_equals@c
	call	@__CheckForDebuggerJustMyCode@4

; 73   :     PMC_HANDLE_UINT x;
; 74   :     int actual_z;
; 75   :     PMC_STATUS_CODE result;
; 76   :     PMC_STATUS_CODE x_result;
; 77   :     TEST_Assert(env, FormatTestLabel(L"PMC_Equals_X_L (%d.%d)", no, 1), (x_result = ep->FromByteArray(x_buf, x_buf_size, &x)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_FromByteArrayの復帰コードが期待通りではない(%d)", x_result));

	mov	esi, esp
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _x_result$[ebp], eax
	cmp	DWORD PTR _x_result$[ebp], 0
	jne	SHORT $LN4@TEST_PMC_E
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN5@TEST_PMC_E
$LN4@TEST_PMC_E:
	mov	DWORD PTR tv74[ebp], 0
$LN5@TEST_PMC_E:
	mov	edx, DWORD PTR _x_result$[ebp]
	push	edx
	push	OFFSET $SG95059
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG95060
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 78   :     TEST_Assert(env, FormatTestLabel(L"PMC_Equals_X_L (%d.%d)", no, 2), (result = ep->Equals_X_L(x, y, &actual_z)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_Equals_X_Lの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	eax, DWORD PTR _actual_z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+236]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN6@TEST_PMC_E
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN7@TEST_PMC_E
$LN6@TEST_PMC_E:
	mov	DWORD PTR tv92[ebp], 0
$LN7@TEST_PMC_E:
	mov	eax, DWORD PTR _result$[ebp]
	push	eax
	push	OFFSET $SG95061
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR tv92[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET $SG95062
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 79   :     TEST_Assert(env, FormatTestLabel(L"PMC_Equals_X_I (%d.%d)", no, 3), actual_z == desired_z, L"データの内容が一致しない");

	mov	ecx, DWORD PTR _actual_z$[ebp]
	cmp	ecx, DWORD PTR _desired_z$[ebp]
	jne	SHORT $LN8@TEST_PMC_E
	mov	DWORD PTR tv134[ebp], 1
	jmp	SHORT $LN9@TEST_PMC_E
$LN8@TEST_PMC_E:
	mov	DWORD PTR tv134[ebp], 0
$LN9@TEST_PMC_E:
	push	OFFSET $SG95063
	mov	edx, DWORD PTR tv134[ebp]
	push	edx
	push	3
	mov	eax, DWORD PTR _no$[ebp]
	push	eax
	push	OFFSET $SG95064
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 80   :     if (x_result == PMC_STATUS_OK)

	cmp	DWORD PTR _x_result$[ebp], 0
	jne	SHORT $LN1@TEST_PMC_E

; 81   :         ep->Dispose(x);

	mov	esi, esp
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_PMC_E:

; 82   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@TEST_PMC_E
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN13@TEST_PMC_E:
	DD	2
	DD	$LN12@TEST_PMC_E
$LN12@TEST_PMC_E:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN10@TEST_PMC_E
	DD	-20					; ffffffecH
	DD	4
	DD	$LN11@TEST_PMC_E
$LN11@TEST_PMC_E:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	122					; 0000007aH
	DB	0
$LN10@TEST_PMC_E:
	DB	120					; 00000078H
	DB	0
_TEST_PMC_Equals_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\test_op_equals.c
_TEXT	SEGMENT
tv134 = -44						; size = 4
tv92 = -40						; size = 4
tv74 = -36						; size = 4
_x_result$ = -32					; size = 4
_result$ = -28						; size = 4
_actual_z$ = -20					; size = 4
_x$ = -8						; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_x_buf$ = 20						; size = 4
_x_buf_size$ = 24					; size = 4
_y$ = 28						; size = 4
_desired_z$ = 32					; size = 4
_TEST_PMC_Equals_X_I PROC

; 59   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __ADBE1B8E_test_op_equals@c
	call	@__CheckForDebuggerJustMyCode@4

; 60   :     PMC_HANDLE_UINT x;
; 61   :     int actual_z;
; 62   :     PMC_STATUS_CODE result;
; 63   :     PMC_STATUS_CODE x_result;
; 64   :     TEST_Assert(env, FormatTestLabel(L"PMC_Equals_X_I (%d.%d)", no, 1), (x_result = ep->FromByteArray(x_buf, x_buf_size, &x)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_FromByteArrayの復帰コードが期待通りではない(%d)", x_result));

	mov	esi, esp
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _x_result$[ebp], eax
	cmp	DWORD PTR _x_result$[ebp], 0
	jne	SHORT $LN4@TEST_PMC_E
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN5@TEST_PMC_E
$LN4@TEST_PMC_E:
	mov	DWORD PTR tv74[ebp], 0
$LN5@TEST_PMC_E:
	mov	edx, DWORD PTR _x_result$[ebp]
	push	edx
	push	OFFSET $SG95033
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG95034
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 65   :     TEST_Assert(env, FormatTestLabel(L"PMC_Equals_X_I (%d.%d)", no, 2), (result = ep->Equals_X_I(x, y, &actual_z)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_Equals_X_Iの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	eax, DWORD PTR _actual_z$[ebp]
	push	eax
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+232]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN6@TEST_PMC_E
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN7@TEST_PMC_E
$LN6@TEST_PMC_E:
	mov	DWORD PTR tv92[ebp], 0
$LN7@TEST_PMC_E:
	mov	edx, DWORD PTR _result$[ebp]
	push	edx
	push	OFFSET $SG95035
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv92[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG95036
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 66   :     TEST_Assert(env, FormatTestLabel(L"PMC_Equals_X_I (%d.%d)", no, 3), actual_z == desired_z, L"データの内容が一致しない");

	mov	eax, DWORD PTR _actual_z$[ebp]
	cmp	eax, DWORD PTR _desired_z$[ebp]
	jne	SHORT $LN8@TEST_PMC_E
	mov	DWORD PTR tv134[ebp], 1
	jmp	SHORT $LN9@TEST_PMC_E
$LN8@TEST_PMC_E:
	mov	DWORD PTR tv134[ebp], 0
$LN9@TEST_PMC_E:
	push	OFFSET $SG95037
	mov	ecx, DWORD PTR tv134[ebp]
	push	ecx
	push	3
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET $SG95038
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 67   :     if (x_result == PMC_STATUS_OK)

	cmp	DWORD PTR _x_result$[ebp], 0
	jne	SHORT $LN1@TEST_PMC_E

; 68   :         ep->Dispose(x);

	mov	esi, esp
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_PMC_E:

; 69   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@TEST_PMC_E
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN13@TEST_PMC_E:
	DD	2
	DD	$LN12@TEST_PMC_E
$LN12@TEST_PMC_E:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN10@TEST_PMC_E
	DD	-20					; ffffffecH
	DD	4
	DD	$LN11@TEST_PMC_E
$LN11@TEST_PMC_E:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	122					; 0000007aH
	DB	0
$LN10@TEST_PMC_E:
	DB	120					; 00000078H
	DB	0
_TEST_PMC_Equals_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\test_op_equals.c
_TEXT	SEGMENT
tv134 = -44						; size = 4
tv92 = -40						; size = 4
tv74 = -36						; size = 4
_v_result$ = -32					; size = 4
_result$ = -28						; size = 4
_actual_w$ = -20					; size = 4
_v$ = -8						; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_u$ = 20						; size = 8
_v_buf$ = 28						; size = 4
_v_buf_size$ = 32					; size = 4
_desired_w$ = 36					; size = 4
_TEST_PMC_Equals_L_X PROC

; 46   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __ADBE1B8E_test_op_equals@c
	call	@__CheckForDebuggerJustMyCode@4

; 47   :     PMC_HANDLE_UINT v;
; 48   :     int actual_w;
; 49   :     PMC_STATUS_CODE result;
; 50   :     PMC_STATUS_CODE v_result;
; 51   :     TEST_Assert(env, FormatTestLabel(L"PMC_Equals_L_X (%d.%d)", no, 1), (v_result = ep->FromByteArray(v_buf, v_buf_size, &v)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_FromByteArrayの復帰コードが期待通りではない(%d)", v_result));

	mov	esi, esp
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _v_result$[ebp], eax
	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN4@TEST_PMC_E
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN5@TEST_PMC_E
$LN4@TEST_PMC_E:
	mov	DWORD PTR tv74[ebp], 0
$LN5@TEST_PMC_E:
	mov	edx, DWORD PTR _v_result$[ebp]
	push	edx
	push	OFFSET $SG95007
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG95008
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 52   :     TEST_Assert(env, FormatTestLabel(L"PMC_Equals_L_X (%d.%d)", no, 2), (result = ep->Equals_L_X(u, v, &actual_w)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_Equals_L_Xの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	eax, DWORD PTR _actual_w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ep$[ebp]
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN6@TEST_PMC_E
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN7@TEST_PMC_E
$LN6@TEST_PMC_E:
	mov	DWORD PTR tv92[ebp], 0
$LN7@TEST_PMC_E:
	mov	eax, DWORD PTR _result$[ebp]
	push	eax
	push	OFFSET $SG95009
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR tv92[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET $SG95010
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 53   :     TEST_Assert(env, FormatTestLabel(L"PMC_Equals_L_X (%d.%d)", no, 3), actual_w == desired_w, L"データの内容が一致しない");

	mov	ecx, DWORD PTR _actual_w$[ebp]
	cmp	ecx, DWORD PTR _desired_w$[ebp]
	jne	SHORT $LN8@TEST_PMC_E
	mov	DWORD PTR tv134[ebp], 1
	jmp	SHORT $LN9@TEST_PMC_E
$LN8@TEST_PMC_E:
	mov	DWORD PTR tv134[ebp], 0
$LN9@TEST_PMC_E:
	push	OFFSET $SG95011
	mov	edx, DWORD PTR tv134[ebp]
	push	edx
	push	3
	mov	eax, DWORD PTR _no$[ebp]
	push	eax
	push	OFFSET $SG95012
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 54   :     if (v_result == PMC_STATUS_OK)

	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN1@TEST_PMC_E

; 55   :         ep->Dispose(v);

	mov	esi, esp
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_PMC_E:

; 56   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@TEST_PMC_E
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN13@TEST_PMC_E:
	DD	2
	DD	$LN12@TEST_PMC_E
$LN12@TEST_PMC_E:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN10@TEST_PMC_E
	DD	-20					; ffffffecH
	DD	4
	DD	$LN11@TEST_PMC_E
$LN11@TEST_PMC_E:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	0
$LN10@TEST_PMC_E:
	DB	118					; 00000076H
	DB	0
_TEST_PMC_Equals_L_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\test_op_equals.c
_TEXT	SEGMENT
tv134 = -44						; size = 4
tv92 = -40						; size = 4
tv74 = -36						; size = 4
_v_result$ = -32					; size = 4
_result$ = -28						; size = 4
_actual_w$ = -20					; size = 4
_v$ = -8						; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_u$ = 20						; size = 4
_v_buf$ = 24						; size = 4
_v_buf_size$ = 28					; size = 4
_desired_w$ = 32					; size = 4
_TEST_PMC_Equals_I_X PROC

; 33   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __ADBE1B8E_test_op_equals@c
	call	@__CheckForDebuggerJustMyCode@4

; 34   :     PMC_HANDLE_UINT v;
; 35   :     int actual_w;
; 36   :     PMC_STATUS_CODE result;
; 37   :     PMC_STATUS_CODE v_result;
; 38   :     TEST_Assert(env, FormatTestLabel(L"PMC_Equals_I_X (%d.%d)", no, 1), (v_result = ep->FromByteArray(v_buf, v_buf_size, &v)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_FromByteArrayの復帰コードが期待通りではない(%d)", v_result));

	mov	esi, esp
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _v_result$[ebp], eax
	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN4@TEST_PMC_E
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN5@TEST_PMC_E
$LN4@TEST_PMC_E:
	mov	DWORD PTR tv74[ebp], 0
$LN5@TEST_PMC_E:
	mov	edx, DWORD PTR _v_result$[ebp]
	push	edx
	push	OFFSET $SG94981
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG94982
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 39   :     TEST_Assert(env, FormatTestLabel(L"PMC_Equals_I_X (%d.%d)", no, 2), (result = ep->Equals_I_X(u, v, &actual_w)) == PMC_STATUS_OK, FormatTestMesssage(L"PMC_Equals_I_Xの復帰コードが期待通りではない(%d)", result));

	mov	esi, esp
	lea	eax, DWORD PTR _actual_w$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	mov	eax, DWORD PTR _ep$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN6@TEST_PMC_E
	mov	DWORD PTR tv92[ebp], 1
	jmp	SHORT $LN7@TEST_PMC_E
$LN6@TEST_PMC_E:
	mov	DWORD PTR tv92[ebp], 0
$LN7@TEST_PMC_E:
	mov	edx, DWORD PTR _result$[ebp]
	push	edx
	push	OFFSET $SG94983
	call	_FormatTestMesssage
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR tv92[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG94984
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 40   :     TEST_Assert(env, FormatTestLabel(L"PMC_Equals_I_X (%d.%d)", no, 3), actual_w == desired_w, L"データの内容が一致しない");

	mov	eax, DWORD PTR _actual_w$[ebp]
	cmp	eax, DWORD PTR _desired_w$[ebp]
	jne	SHORT $LN8@TEST_PMC_E
	mov	DWORD PTR tv134[ebp], 1
	jmp	SHORT $LN9@TEST_PMC_E
$LN8@TEST_PMC_E:
	mov	DWORD PTR tv134[ebp], 0
$LN9@TEST_PMC_E:
	push	OFFSET $SG94985
	mov	ecx, DWORD PTR tv134[ebp]
	push	ecx
	push	3
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET $SG94986
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 41   :     if (v_result == PMC_STATUS_OK)

	cmp	DWORD PTR _v_result$[ebp], 0
	jne	SHORT $LN1@TEST_PMC_E

; 42   :         ep->Dispose(v);

	mov	esi, esp
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ep$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@TEST_PMC_E:

; 43   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@TEST_PMC_E
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN13@TEST_PMC_E:
	DD	2
	DD	$LN12@TEST_PMC_E
$LN12@TEST_PMC_E:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN10@TEST_PMC_E
	DD	-20					; ffffffecH
	DD	4
	DD	$LN11@TEST_PMC_E
$LN11@TEST_PMC_E:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	0
$LN10@TEST_PMC_E:
	DB	118					; 00000076H
	DB	0
_TEST_PMC_Equals_I_X ENDP
_TEXT	ENDS
END
