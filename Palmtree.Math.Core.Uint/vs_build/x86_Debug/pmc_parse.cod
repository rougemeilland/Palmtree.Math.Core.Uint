; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_parse.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__2088847F_corecrt_memory@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__E9FFF232_guiddef@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__12AD47BB_winuser@h DB 01H
__B4B40122_winioctl@h DB 01H
__A73354DD_stdlib@h DB 01H
__25F3FB34_propidl@h DB 01H
__A40E48B8_oleauto@h DB 01H
__86261D59_stralign@h DB 01H
__2CC6E67D_corecrt_stdio_config@h DB 01H
__41381B41_corecrt_wconio@h DB 01H
__F0CC4AC4_corecrt_wio@h DB 01H
__05476D76_corecrt_wstdio@h DB 01H
__C0802A2B_corecrt_wtime@h DB 01H
__A40A425D_stat@h DB 01H
__5A74375D_wchar@h DB 01H
__6BC0FD35_vcruntime_new@h DB 01H
__77F53984_cstddef DB 01H
__188180DA_corecrt_math@h DB 01H
__D23EE329_cstdlib DB 01H
__5ECFF36E_type_traits DB 01H
__331E732B_malloc@h DB 01H
__9BB4E194_vcruntime_exception@h DB 01H
__7949CB39_exception DB 01H
__802FEEC0_pmc_exception@h DB 01H
__80E6779E_pmc_stringio@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__1AB12E38_pmc_resourceholder@h DB 01H
__746E1CEC_xmmintrin@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__F159A697_pmc_parse@cpp DB 01H
msvcjmc	ENDS
CONST	SEGMENT
$SG118525 DB	'p', 00H, 'm', 00H, 'c', 00H, '_', 00H, 'p', 00H, 'a', 00H
	DB	'r', 00H, 's', 00H, 'e', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p'
	DB	00H, ';', 00H, 'T', 00H, 'r', 00H, 'y', 00H, 'P', 00H, 'a', 00H
	DB	'r', 00H, 's', 00H, 'e', 00H, 'D', 00H, 'N', 00H, ';', 00H, '1'
	DB	00H, 00H, 00H
	ORG $+2
$SG118526 DB	085H, 'Q', 0e8H, 090H, 0a8H, '0', 0e9H, '0', 0fcH, '0L0zv'
	DB	01fH, 'uW0~0W0_0', 02H, '0', 00H, 00H
$SG118529 DB	'p', 00H, 'm', 00H, 'c', 00H, '_', 00H, 'p', 00H, 'a', 00H
	DB	'r', 00H, 's', 00H, 'e', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p'
	DB	00H, ';', 00H, 'T', 00H, 'r', 00H, 'y', 00H, 'P', 00H, 'a', 00H
	DB	'r', 00H, 's', 00H, 'e', 00H, 'D', 00H, 'N', 00H, ';', 00H, '2'
	DB	00H, 00H, 00H
	ORG $+2
$SG118530 DB	085H, 'Q', 0e8H, 090H, 0a8H, '0', 0e9H, '0', 0fcH, '0L0zv'
	DB	01fH, 'uW0~0W0_0', 02H, '0', 00H, 00H
$SG118533 DB	'p', 00H, 'm', 00H, 'c', 00H, '_', 00H, 'p', 00H, 'a', 00H
	DB	'r', 00H, 's', 00H, 'e', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p'
	DB	00H, ';', 00H, 'T', 00H, 'r', 00H, 'y', 00H, 'P', 00H, 'a', 00H
	DB	'r', 00H, 's', 00H, 'e', 00H, 'D', 00H, 'N', 00H, ';', 00H, '3'
	DB	00H, 00H, 00H
	ORG $+2
$SG118534 DB	085H, 'Q', 0e8H, 090H, 0a8H, '0', 0e9H, '0', 0fcH, '0L0zv'
	DB	01fH, 'uW0~0W0_0', 02H, '0', 00H, 00H
$SG118666 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
	ORG $+2
$SG118639 DB	015H, '_pen', 00H, 'u', 00H, 'm', 00H, 'b', 00H, 'e', 00H
	DB	'r', 00H, '_', 00H, 's', 00H, 't', 00H, 'y', 00H, 'l', 00H, 'e'
	DB	00H, 's', 00H, 'k01', 08aH, 0efH, 'SU0', 08cH, '0f0D0j0D0D}', 07fH
	DB	'0', 08H, 'T', 08fH, '0[0n0', 0d5H, '0', 0e9H, '0', 0b0H, '0L0'
	DB	07H, 'c', 09aH, '[U0', 08cH, '0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118665 DB	's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	00H, 00H
	ORG $+2
$SG118669 DB	'o', 00H, 00H, 00H
$SG118670 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
	ORG $+2
$SG118691 DB	's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	00H, 00H
	ORG $+2
$SG118692 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
	ORG $+2
$SG118695 DB	'o', 00H, '_', 00H, 's', 00H, 'i', 00H, 'g', 00H, 'n', 00H
	DB	00H, 00H
	ORG $+2
$SG118696 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
	ORG $+2
$SG118699 DB	'o', 00H, '_', 00H, 'a', 00H, 'b', 00H, 's', 00H, 00H, 00H
$SG118700 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
CONST	ENDS
PUBLIC	??0exception@std@@QAE@XZ			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z ; Palmtree::Math::Core::Internal::Exception::Exception
PUBLIC	??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ; Palmtree::Math::Core::Internal::Exception::Exception
PUBLIC	??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
PUBLIC	??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
PUBLIC	??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor'
PUBLIC	??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::ArgumentException::ArgumentException
PUBLIC	??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::ArgumentException::ArgumentException
PUBLIC	??1ArgumentException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ArgumentException::~ArgumentException
PUBLIC	??_GArgumentException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::ArgumentException::`scalar deleting destructor'
PUBLIC	??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
PUBLIC	??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
PUBLIC	??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
PUBLIC	??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor'
PUBLIC	??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException
PUBLIC	??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException
PUBLIC	??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::InsufficientBufferException::~InsufficientBufferException
PUBLIC	??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::InsufficientBufferException::`scalar deleting destructor'
PUBLIC	??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
PUBLIC	??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
PUBLIC	??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
PUBLIC	??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor'
PUBLIC	??0StringReader@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::StringReader::StringReader
PUBLIC	?PeekChar@StringReader@Internal@Core@Math@Palmtree@@UAE_WXZ ; Palmtree::Math::Core::Internal::StringReader::PeekChar
PUBLIC	?Progress@StringReader@Internal@Core@Math@Palmtree@@UAEXXZ ; Palmtree::Math::Core::Internal::StringReader::Progress
PUBLIC	?StartsWith@StringReader@Internal@Core@Math@Palmtree@@UAEHPB_W@Z ; Palmtree::Math::Core::Internal::StringReader::StartsWith
PUBLIC	?SkipSpace@StringReader@Internal@Core@Math@Palmtree@@QAEXXZ ; Palmtree::Math::Core::Internal::StringReader::SkipSpace
PUBLIC	?SkipString@StringReader@Internal@Core@Math@Palmtree@@UAEXPB_W@Z ; Palmtree::Math::Core::Internal::StringReader::SkipString
PUBLIC	?StartsWith@StringReader@Internal@Core@Math@Palmtree@@CAHPB_W0@Z ; Palmtree::Math::Core::Internal::StringReader::StartsWith
PUBLIC	??0StringWriter@Internal@Core@Math@Palmtree@@IAE@PA_W00@Z ; Palmtree::Math::Core::Internal::StringWriter::StringWriter
PUBLIC	??0StringWriter@Internal@Core@Math@Palmtree@@QAE@PA_WI@Z ; Palmtree::Math::Core::Internal::StringWriter::StringWriter
PUBLIC	?Write@StringWriter@Internal@Core@Math@Palmtree@@UAEX_W@Z ; Palmtree::Math::Core::Internal::StringWriter::Write
PUBLIC	?Write@StringWriter@Internal@Core@Math@Palmtree@@UAEXPB_W@Z ; Palmtree::Math::Core::Internal::StringWriter::Write
PUBLIC	?GetString@StringWriter@Internal@Core@Math@Palmtree@@UAEPA_WXZ ; Palmtree::Math::Core::Internal::StringWriter::GetString
PUBLIC	?Initialize_Parse@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ; Palmtree::Math::Core::Internal::Initialize_Parse
PUBLIC	?PMC_TryParse@Internal@Core@Math@Palmtree@@YGHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PAPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z ; Palmtree::Math::Core::Internal::PMC_TryParse
PUBLIC	?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YGHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z ; Palmtree::Math::Core::Internal::PMC_TryParseForSINT
PUBLIC	??0ParserState@Internal@Core@Math@Palmtree@@QAE@PB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPA_WI3I@Z ; Palmtree::Math::Core::Internal::ParserState::ParserState
PUBLIC	??1ParserState@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ParserState::~ParserState
PUBLIC	?ParseAsDecimalNumberString@ParserState@Internal@Core@Math@Palmtree@@QAEHXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsDecimalNumberString
PUBLIC	?ParseAsHexNumberString@ParserState@Internal@Core@Math@Palmtree@@QAEHXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsHexNumberString
PUBLIC	?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence
PUBLIC	?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence
PUBLIC	__JustMyCode_Default
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7Exception@Internal@Core@Math@Palmtree@@6B@	; Palmtree::Math::Core::Internal::Exception::`vftable'
PUBLIC	??_7ArgumentException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentException::`vftable'
PUBLIC	??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`vftable'
PUBLIC	??_7InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InsufficientBufferException::`vftable'
PUBLIC	??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`vftable'
PUBLIC	??_7StringReader@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::StringReader::`vftable'
PUBLIC	__TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
PUBLIC	__CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InternalErrorException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	??_R0?AVException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::Exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	??_C@_1FA@CNGEABBJ@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@ ; `string'
PUBLIC	??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@ ; `string'
PUBLIC	??_C@_1FE@KONPIGEM@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@ ; `string'
PUBLIC	??_7StringWriter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::StringWriter::`vftable'
PUBLIC	__TI2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@
PUBLIC	__CTA2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InsufficientBufferException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	??_C@_1CO@JABAMCFP@?$PP?x?$AAM?$PP?$LM?$AA?$HP?$AAH?$PP?P?$PP?C?$PP?U?$PP?$KB?$AAn?$PP?$LF?$PP?$KE?$PP?$LK?$AAL?$AA?$AN@ ; `string'
PUBLIC	??_C@_1EK@OBHKPMHI@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ ; `string'
PUBLIC	??_C@_1EK@PDMPFDJG@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ ; `string'
PUBLIC	??_C@_1EK@ELHDDEPD@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ ; `string'
PUBLIC	??_C@_1EK@NGKEAMEK@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ ; `string'
PUBLIC	??_C@_1EK@GOBIGLCP@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ ; `string'
PUBLIC	??_C@_1EK@HMKNMEMB@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ ; `string'
PUBLIC	??_C@_1EK@MEBBKDKE@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ ; `string'
PUBLIC	??_C@_13JDNADJOG@?$PP?$KA@			; `string'
PUBLIC	??_C@_13HOIJIPNN@?$AA?5@			; `string'
PUBLIC	??_C@_13LLDNKHDC@?$AA?$CI@			; `string'
PUBLIC	??_C@_13DIBMAFH@?$AA?$CJ@			; `string'
PUBLIC	__TI2?AVArgumentException@Internal@Core@Math@Palmtree@@
PUBLIC	__CTA2?AVArgumentException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVArgumentException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVArgumentException@Internal@Core@Math@Palmtree@@@8??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	__TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
PUBLIC	__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Exception@Internal@Core@Math@Palmtree@@6B@	; Palmtree::Math::Core::Internal::Exception::`RTTI Complete Object Locator'
PUBLIC	??_R3Exception@Internal@Core@Math@Palmtree@@8	; Palmtree::Math::Core::Internal::Exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Exception@Internal@Core@Math@Palmtree@@8	; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EN@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,77)'
PUBLIC	??_R4ArgumentException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentException::`RTTI Complete Object Locator'
PUBLIC	??_R3ArgumentException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ArgumentException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ArgumentException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Complete Object Locator'
PUBLIC	??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Complete Object Locator'
PUBLIC	??_R3InsufficientBufferException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InsufficientBufferException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InsufficientBufferException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Complete Object Locator'
PUBLIC	??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4StringReader@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::StringReader::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVStringReader@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::StringReader `RTTI Type Descriptor'
PUBLIC	??_R3StringReader@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringReader::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2StringReader@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringReader::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@StringReader@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringReader::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4StringWriter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVStringWriter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::StringWriter `RTTI Type Descriptor'
PUBLIC	??_R3StringWriter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2StringWriter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@StringWriter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__imp__lstrcmpW@8:PROC
EXTRN	__imp__lstrcpyW@8:PROC
EXTRN	__imp__lstrlenW@4:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_EException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::Exception::`vector deleting destructor'
EXTRN	??_EArgumentException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::ArgumentException::`vector deleting destructor'
EXTRN	??_EArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::`vector deleting destructor'
EXTRN	??_EInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::InsufficientBufferException::`vector deleting destructor'
EXTRN	??_EInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::InternalErrorException::`vector deleting destructor'
EXTRN	?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z:PROC ; Palmtree::Math::Core::Internal::CommitNumber
EXTRN	?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z:PROC ; Palmtree::Math::Core::Internal::CheckNumber
EXTRN	?InitializeNumberFormatoInfo@Internal@Core@Math@Palmtree@@YAXPAU__tag_PMC_NUMBER_FORMAT_INFO@1234@@Z:PROC ; Palmtree::Math::Core::Internal::InitializeNumberFormatoInfo
EXTRN	??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
EXTRN	??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
EXTRN	?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAII@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
EXTRN	?DeallocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateBlock
EXTRN	?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock
EXTRN	?AllocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPA_WI@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateString
EXTRN	?DeallocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPA_W@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateString
EXTRN	?CheckString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPA_W@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckString
EXTRN	?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
EXTRN	?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber
EXTRN	?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber
EXTRN	?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber
EXTRN	?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__aullshr:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A:BYTE ; Palmtree::Math::Core::Internal::number_zero
EXTRN	?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A:BYTE ; Palmtree::Math::Core::Internal::statistics_info
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
?default_number_format_option@Internal@Core@Math@Palmtree@@3U__tag_PMC_NUMBER_FORMAT_INFO@1234@A DB 01e4H DUP (?) ; Palmtree::Math::Core::Internal::default_number_format_option
?fp_MultiplyAndAdd@Internal@Core@Math@Palmtree@@3P6APAIPAIII@ZA DD 01H DUP (?) ; Palmtree::Math::Core::Internal::fp_MultiplyAndAdd
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@StringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@StringWriter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVStringWriter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3StringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2StringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2StringWriter@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@StringWriter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3StringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3StringWriter@Internal@Core@Math@Palmtree@@8 DD 00H	; Palmtree::Math::Core::Internal::StringWriter::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2StringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVStringWriter@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVStringWriter@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::StringWriter `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVStringWriter@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT ??_R4StringWriter@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4StringWriter@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVStringWriter@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3StringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@StringReader@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@StringReader@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVStringReader@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::StringReader::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3StringReader@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2StringReader@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2StringReader@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@StringReader@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringReader::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3StringReader@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3StringReader@Internal@Core@Math@Palmtree@@8 DD 00H	; Palmtree::Math::Core::Internal::StringReader::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2StringReader@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVStringReader@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVStringReader@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::StringReader `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVStringReader@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT ??_R4StringReader@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4StringReader@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::StringReader::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVStringReader@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3StringReader@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@InsufficientBufferException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InsufficientBufferException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InsufficientBufferException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2InsufficientBufferException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2InsufficientBufferException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@InsufficientBufferException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3InsufficientBufferException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3InsufficientBufferException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2InsufficientBufferException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3InsufficientBufferException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ArgumentException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ArgumentException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVArgumentException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ArgumentException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2ArgumentException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2ArgumentException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@ArgumentException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ArgumentException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3ArgumentException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::ArgumentException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ArgumentException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4ArgumentException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4ArgumentException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::ArgumentException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVArgumentException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3ArgumentException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EN@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EN@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,77)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	04dH
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2Exception@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3Exception@Internal@Core@Math@Palmtree@@8 DD 00H	; Palmtree::Math::Core::Internal::Exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4Exception@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4Exception@Internal@Core@Math@Palmtree@@6B@ DD 00H	; Palmtree::Math::Core::Internal::Exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVArgumentNullException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	FLAT:__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
	DD	FLAT:__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	ENDS
;	COMDAT __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	FLAT:??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVArgumentException@Internal@Core@Math@Palmtree@@@8??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVArgumentException@Internal@Core@Math@Palmtree@@@8??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVArgumentException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVArgumentException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVArgumentException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::ArgumentException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVArgumentException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVArgumentException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__CTA2?AVArgumentException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	FLAT:__CT??_R0?AVArgumentException@Internal@Core@Math@Palmtree@@@8??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
	DD	FLAT:__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	ENDS
;	COMDAT __TI2?AVArgumentException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__TI2?AVArgumentException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	FLAT:??1ArgumentException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVArgumentException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT ??_C@_13DIBMAFH@?$AA?$CJ@
CONST	SEGMENT
??_C@_13DIBMAFH@?$AA?$CJ@ DB ')', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_13LLDNKHDC@?$AA?$CI@
CONST	SEGMENT
??_C@_13LLDNKHDC@?$AA?$CI@ DB '(', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_13HOIJIPNN@?$AA?5@
CONST	SEGMENT
??_C@_13HOIJIPNN@?$AA?5@ DB ' ', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_13JDNADJOG@?$PP?$KA@
CONST	SEGMENT
??_C@_13JDNADJOG@?$PP?$KA@ DB 0a0H, 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@MEBBKDKE@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
CONST	SEGMENT
??_C@_1EK@MEBBKDKE@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'p', 00H, 'a', 00H, 'r', 00H
	DB	's', 00H, 'e', 00H, ';', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ':', 00H, ':', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ';', 00H, '7', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@HMKNMEMB@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
CONST	SEGMENT
??_C@_1EK@HMKNMEMB@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'p', 00H, 'a', 00H, 'r', 00H
	DB	's', 00H, 'e', 00H, ';', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ':', 00H, ':', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ';', 00H, '6', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@GOBIGLCP@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
CONST	SEGMENT
??_C@_1EK@GOBIGLCP@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'p', 00H, 'a', 00H, 'r', 00H
	DB	's', 00H, 'e', 00H, ';', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ':', 00H, ':', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ';', 00H, '5', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@NGKEAMEK@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
CONST	SEGMENT
??_C@_1EK@NGKEAMEK@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'p', 00H, 'a', 00H, 'r', 00H
	DB	's', 00H, 'e', 00H, ';', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ':', 00H, ':', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ';', 00H, '4', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@ELHDDEPD@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
CONST	SEGMENT
??_C@_1EK@ELHDDEPD@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'p', 00H, 'a', 00H, 'r', 00H
	DB	's', 00H, 'e', 00H, ';', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ':', 00H, ':', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ';', 00H, '3', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@PDMPFDJG@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
CONST	SEGMENT
??_C@_1EK@PDMPFDJG@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'p', 00H, 'a', 00H, 'r', 00H
	DB	's', 00H, 'e', 00H, ';', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ':', 00H, ':', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ';', 00H, '2', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@OBHKPMHI@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
CONST	SEGMENT
??_C@_1EK@OBHKPMHI@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'p', 00H, 'a', 00H, 'r', 00H
	DB	's', 00H, 'e', 00H, ';', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ':', 00H, ':', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ';', 00H, '1', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@JABAMCFP@?$PP?x?$AAM?$PP?$LM?$AA?$HP?$AAH?$PP?P?$PP?C?$PP?U?$PP?$KB?$AAn?$PP?$LF?$PP?$KE?$PP?$LK?$AAL?$AA?$AN@
CONST	SEGMENT
??_C@_1CO@JABAMCFP@?$PP?x?$AAM?$PP?$LM?$AA?$HP?$AAH?$PP?P?$PP?C?$PP?U?$PP?$KB?$AAn?$PP?$LF?$PP?$KE?$PP?$LK?$AAL?$AA?$AN@ DB 0f8H
	DB	'fM0', 0bcH, 08fH, 07fH, '0HQ', 0d0H, '0', 0c3H, '0', 0d5H, '0'
	DB	0a1H, '0n0', 0b5H, '0', 0a4H, '0', 0baH, '0L0', 0dH, 'N', 0b3H
	DB	08dH, 'W0f0D0~0Y0', 02H, '0', 00H, 00H	; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::InsufficientBufferException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVInsufficientBufferException@Internal@Core@Math@Palmt'
	DB	'ree@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__CTA2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	FLAT:__CT??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
	DD	FLAT:__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	ENDS
;	COMDAT __TI2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__TI2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	FLAT:??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT ??_7StringWriter@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7StringWriter@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4StringWriter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::StringWriter::`vftable'
	DD	FLAT:?Write@StringWriter@Internal@Core@Math@Palmtree@@UAEXPB_W@Z
	DD	FLAT:?Write@StringWriter@Internal@Core@Math@Palmtree@@UAEX_W@Z
	DD	FLAT:?GetString@StringWriter@Internal@Core@Math@Palmtree@@UAEPA_WXZ
CONST	ENDS
;	COMDAT ??_C@_1FE@KONPIGEM@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@
CONST	SEGMENT
??_C@_1FE@KONPIGEM@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, 'i', 00H, 'o', 00H, '.', 00H, 'h'
	DB	00H, ';', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, 'R', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r'
	DB	00H, ':', 00H, ':', 00H, 'S', 00H, 'k', 00H, 'i', 00H, 'p', 00H
	DB	'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ';'
	DB	00H, '1', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
CONST	SEGMENT
??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@ DB 085H
	DB	'Q', 0e8H, 090H, 0a8H, '0', 0e9H, '0', 0fcH, '0L0zv', 01fH, 'u'
	DB	'W0~0W0_0', 02H, '0', 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1FA@CNGEABBJ@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@
CONST	SEGMENT
??_C@_1FA@CNGEABBJ@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, 'i', 00H, 'o', 00H, '.', 00H, 'h'
	DB	00H, ';', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, 'R', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r'
	DB	00H, ':', 00H, ':', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'e', 00H, 's', 00H, 's', 00H, ';', 00H, '1', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::Exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVInternalErrorException@Internal@Core@Math@Palmtree@@'
	DB	00H
data$r	ENDS
;	COMDAT __CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	FLAT:__CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
	DD	FLAT:__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	ENDS
;	COMDAT __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	FLAT:??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT ??_7StringReader@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7StringReader@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4StringReader@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::StringReader::`vftable'
	DD	FLAT:?PeekChar@StringReader@Internal@Core@Math@Palmtree@@UAE_WXZ
	DD	FLAT:?Progress@StringReader@Internal@Core@Math@Palmtree@@UAEXXZ
	DD	FLAT:?StartsWith@StringReader@Internal@Core@Math@Palmtree@@UAEHPB_W@Z
	DD	FLAT:?SkipString@StringReader@Internal@Core@Math@Palmtree@@UAEXPB_W@Z
CONST	ENDS
;	COMDAT ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`vftable'
	DD	FLAT:??_EInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InsufficientBufferException::`vftable'
	DD	FLAT:??_EInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`vftable'
	DD	FLAT:??_EArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7ArgumentException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7ArgumentException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4ArgumentException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentException::`vftable'
	DD	FLAT:??_EArgumentException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7Exception@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7Exception@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4Exception@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::Exception::`vftable'
	DD	FLAT:??_EException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1ParserState@Internal@Core@Math@Palmtree@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z$0
__unwindtable$?TryParseX@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?TryParseX@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z$0
__unwindtable$?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PA_WI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PA_WI@Z$0
__unwindtable$?TryParseDN@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?TryParseDN@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z$0
__unwindtable$?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPAII0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPAII0@Z$0
__unwindtable$?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPA_WI3I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPA_WI3I@Z$0
__unwindtable$?PMC_TryParse@Internal@Core@Math@Palmtree@@YGHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PAPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_TryParse@Internal@Core@Math@Palmtree@@YGHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PAPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z$0
__ehfuncinfo$?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?TryParseX@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?TryParseX@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PA_WI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PA_WI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?TryParseDN@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?TryParseDN@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPAII0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPAII0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPA_WI3I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPA_WI3I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PMC_TryParse@Internal@Core@Math@Palmtree@@YGHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PAPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_TryParse@Internal@Core@Math@Palmtree@@YGHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PAPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0
__ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$0
__ehfuncinfo$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0
__ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ArgumentException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ArgumentException@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1ArgumentException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1ArgumentException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$0
__ehfuncinfo$??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z$0
__ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z$0
__ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1exception@std@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0exception@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
_TEXT	SEGMENT
$T2 = -84						; size = 4
$T3 = -80						; size = 4
$T4 = -76						; size = 4
$T5 = -72						; size = 24
_err$6 = -48						; size = 4
_err$7 = -44						; size = 4
_mask$8 = -40						; size = 4
_root$ = -32						; size = 16
__$EHRec$ = -12						; size = 12
_source$ = 8						; size = 4
_number_styles$ = 12					; size = 4
_format_option$ = 16					; size = 4
_o_sign$ = 20						; size = 4
_o_abs$ = 24						; size = 4
_result$ = 28						; size = 4
?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z PROC ; Palmtree::Math::Core::Internal::PMC_TryParse_Imp

; 1271 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	57		 push	 edi
  00015	8d 7d ac	 lea	 edi, DWORD PTR [ebp-84]
  00018	b9 12 00 00 00	 mov	 ecx, 18			; 00000012H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	50		 push	 eax
  0002c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET __F159A697_pmc_parse@cpp
  0003a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1272 :         ResourceHolderUINT root;

  0003f	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00042	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00047	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1273 :         if (number_styles & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER)

  0004e	8b 45 0c	 mov	 eax, DWORD PTR _number_styles$[ebp]
  00051	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00056	0f 84 8a 00 00
	00		 je	 $LN2@PMC_TryPar

; 1274 :         {
; 1275 :             // 16進数の場合
; 1276 : 
; 1277 :             // 許可されている組み合わせのフラグ
; 1278 :             _UINT32_T mask = PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER | PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE | PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE | PMC_NUMBER_STYLE_ALLOW_EXCEPTION_THROWING | PMC_NUMBER_STYLE_ALLOW_SIGNED_INTEGER;

  0005c	c7 45 d8 03 02
	00 03		 mov	 DWORD PTR _mask$8[ebp], 50332163 ; 03000203H

; 1279 : 
; 1280 :             // 許可されていないフラグが指定されていればエラー
; 1281 :             if (number_styles & ~mask)

  00063	8b 4d d8	 mov	 ecx, DWORD PTR _mask$8[ebp]
  00066	f7 d1		 not	 ecx
  00068	23 4d 0c	 and	 ecx, DWORD PTR _number_styles$[ebp]
  0006b	74 1b		 je	 SHORT $LN4@PMC_TryPar

; 1282 :                 throw ArgumentException(L"引数number_stylesに許可されていない組み合わせのフラグが指定されました。");

  0006d	68 00 00 00 00	 push	 OFFSET $SG118639
  00072	8d 4d b8	 lea	 ecx, DWORD PTR $T5[ebp]
  00075	e8 00 00 00 00	 call	 ??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::ArgumentException::ArgumentException
  0007a	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentException@Internal@Core@Math@Palmtree@@
  0007f	8d 55 b8	 lea	 edx, DWORD PTR $T5[ebp]
  00082	52		 push	 edx
  00083	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@PMC_TryPar:

; 1283 : 
; 1284 :             PMC_STATUS_CODE err = TryParseX(source, number_styles, format_option, o_sign, o_abs, result);

  00088	8b 45 1c	 mov	 eax, DWORD PTR _result$[ebp]
  0008b	50		 push	 eax
  0008c	8b 4d 18	 mov	 ecx, DWORD PTR _o_abs$[ebp]
  0008f	51		 push	 ecx
  00090	8b 55 14	 mov	 edx, DWORD PTR _o_sign$[ebp]
  00093	52		 push	 edx
  00094	8b 45 10	 mov	 eax, DWORD PTR _format_option$[ebp]
  00097	50		 push	 eax
  00098	8b 4d 0c	 mov	 ecx, DWORD PTR _number_styles$[ebp]
  0009b	51		 push	 ecx
  0009c	8b 55 08	 mov	 edx, DWORD PTR _source$[ebp]
  0009f	52		 push	 edx
  000a0	e8 00 00 00 00	 call	 ?TryParseX@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z ; Palmtree::Math::Core::Internal::TryParseX
  000a5	83 c4 18	 add	 esp, 24			; 00000018H
  000a8	89 45 d4	 mov	 DWORD PTR _err$7[ebp], eax

; 1285 :             if (err != PMC_STATUS_OK || !*result)

  000ab	83 7d d4 00	 cmp	 DWORD PTR _err$7[ebp], 0
  000af	75 08		 jne	 SHORT $LN6@PMC_TryPar
  000b1	8b 45 1c	 mov	 eax, DWORD PTR _result$[ebp]
  000b4	83 38 00	 cmp	 DWORD PTR [eax], 0
  000b7	75 1d		 jne	 SHORT $LN5@PMC_TryPar
$LN6@PMC_TryPar:

; 1286 :                 return (err);

  000b9	8b 4d d4	 mov	 ecx, DWORD PTR _err$7[ebp]
  000bc	89 4d b4	 mov	 DWORD PTR $T4[ebp], ecx
  000bf	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000c6	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  000c9	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  000ce	8b 45 b4	 mov	 eax, DWORD PTR $T4[ebp]
  000d1	e9 a7 00 00 00	 jmp	 $LN9@PMC_TryPar
$LN5@PMC_TryPar:

; 1287 :             root.HookNumber(*o_abs);

  000d6	8b 55 18	 mov	 edx, DWORD PTR _o_abs$[ebp]
  000d9	8b 02		 mov	 eax, DWORD PTR [edx]
  000db	50		 push	 eax
  000dc	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  000df	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 1288 :         }
; 1289 :         else

  000e4	eb 59		 jmp	 SHORT $LN3@PMC_TryPar
$LN2@PMC_TryPar:

; 1290 :         {
; 1291 :             // 10進数の場合
; 1292 :             PMC_STATUS_CODE err = TryParseDN(source, number_styles, format_option, o_sign, o_abs, result);

  000e6	8b 4d 1c	 mov	 ecx, DWORD PTR _result$[ebp]
  000e9	51		 push	 ecx
  000ea	8b 55 18	 mov	 edx, DWORD PTR _o_abs$[ebp]
  000ed	52		 push	 edx
  000ee	8b 45 14	 mov	 eax, DWORD PTR _o_sign$[ebp]
  000f1	50		 push	 eax
  000f2	8b 4d 10	 mov	 ecx, DWORD PTR _format_option$[ebp]
  000f5	51		 push	 ecx
  000f6	8b 55 0c	 mov	 edx, DWORD PTR _number_styles$[ebp]
  000f9	52		 push	 edx
  000fa	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  000fd	50		 push	 eax
  000fe	e8 00 00 00 00	 call	 ?TryParseDN@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z ; Palmtree::Math::Core::Internal::TryParseDN
  00103	83 c4 18	 add	 esp, 24			; 00000018H
  00106	89 45 d0	 mov	 DWORD PTR _err$6[ebp], eax

; 1293 :             if (err != PMC_STATUS_OK || !*result)

  00109	83 7d d0 00	 cmp	 DWORD PTR _err$6[ebp], 0
  0010d	75 08		 jne	 SHORT $LN8@PMC_TryPar
  0010f	8b 4d 1c	 mov	 ecx, DWORD PTR _result$[ebp]
  00112	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00115	75 1a		 jne	 SHORT $LN7@PMC_TryPar
$LN8@PMC_TryPar:

; 1294 :                 return (err);

  00117	8b 55 d0	 mov	 edx, DWORD PTR _err$6[ebp]
  0011a	89 55 b0	 mov	 DWORD PTR $T3[ebp], edx
  0011d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00124	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00127	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0012c	8b 45 b0	 mov	 eax, DWORD PTR $T3[ebp]
  0012f	eb 4c		 jmp	 SHORT $LN9@PMC_TryPar
$LN7@PMC_TryPar:

; 1295 :             root.HookNumber(*o_abs);

  00131	8b 45 18	 mov	 eax, DWORD PTR _o_abs$[ebp]
  00134	8b 08		 mov	 ecx, DWORD PTR [eax]
  00136	51		 push	 ecx
  00137	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  0013a	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber
$LN3@PMC_TryPar:

; 1296 :         }
; 1297 : #ifdef _DEBUG
; 1298 :         CheckNumber(*o_abs);

  0013f	8b 55 18	 mov	 edx, DWORD PTR _o_abs$[ebp]
  00142	8b 02		 mov	 eax, DWORD PTR [edx]
  00144	50		 push	 eax
  00145	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  0014a	83 c4 04	 add	 esp, 4

; 1299 : #endif
; 1300 :         root.UnlinkNumber(*o_abs);

  0014d	8b 4d 18	 mov	 ecx, DWORD PTR _o_abs$[ebp]
  00150	8b 11		 mov	 edx, DWORD PTR [ecx]
  00152	52		 push	 edx
  00153	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00156	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 1301 :         *result = 1;

  0015b	8b 45 1c	 mov	 eax, DWORD PTR _result$[ebp]
  0015e	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1

; 1302 :         return (PMC_STATUS_OK);

  00164	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  0016b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00172	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00175	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0017a	8b 45 ac	 mov	 eax, DWORD PTR $T2[ebp]
$LN9@PMC_TryPar:

; 1303 :     }

  0017d	52		 push	 edx
  0017e	8b cd		 mov	 ecx, ebp
  00180	50		 push	 eax
  00181	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN14@PMC_TryPar
  00187	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0018c	58		 pop	 eax
  0018d	5a		 pop	 edx
  0018e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00191	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00198	59		 pop	 ecx
  00199	5f		 pop	 edi
  0019a	83 c4 54	 add	 esp, 84			; 00000054H
  0019d	3b ec		 cmp	 ebp, esp
  0019f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a4	8b e5		 mov	 esp, ebp
  001a6	5d		 pop	 ebp
  001a7	c3		 ret	 0
$LN14@PMC_TryPar:
  001a8	01 00 00 00	 DD	 1
  001ac	00 00 00 00	 DD	 $LN13@PMC_TryPar
$LN13@PMC_TryPar:
  001b0	e0 ff ff ff	 DD	 -32			; ffffffe0H
  001b4	10 00 00 00	 DD	 16			; 00000010H
  001b8	00 00 00 00	 DD	 $LN11@PMC_TryPar
$LN11@PMC_TryPar:
  001bc	72		 DB	 114			; 00000072H
  001bd	6f		 DB	 111			; 0000006fH
  001be	6f		 DB	 111			; 0000006fH
  001bf	74		 DB	 116			; 00000074H
  001c0	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a b0	 mov	 ecx, DWORD PTR [edx-80]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z ENDP ; Palmtree::Math::Core::Internal::PMC_TryParse_Imp
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
_TEXT	SEGMENT
$T2 = -88						; size = 4
$T3 = -84						; size = 4
$T4 = -80						; size = 4
_count$5 = -76						; size = 4
_p$6 = -72						; size = 4
_carry$7 = -65						; size = 1
_padding$8 = -64					; size = 4
_lzcnt$9 = -60						; size = 4
_o_bit_count$ = -56					; size = 4
_result_parsing$ = -52					; size = 4
_int_part_buf$ = -48					; size = 4
_int_part_buf_size$ = -44				; size = 4
_source_len$ = -40					; size = 4
_root$ = -32						; size = 16
__$EHRec$ = -12						; size = 12
_source$ = 8						; size = 4
_number_styles$ = 12					; size = 4
_format_option$ = 16					; size = 4
_o_sign$ = 20						; size = 4
_o_abs$ = 24						; size = 4
_result$ = 28						; size = 4
?TryParseX@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z PROC ; Palmtree::Math::Core::Internal::TryParseX

; 1190 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?TryParseX@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8d 7d a8	 lea	 edi, DWORD PTR [ebp-88]
  00019	b9 13 00 00 00	 mov	 ecx, 19			; 00000013H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c5		 xor	 eax, ebp
  0002c	50		 push	 eax
  0002d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00030	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00036	b9 00 00 00 00	 mov	 ecx, OFFSET __F159A697_pmc_parse@cpp
  0003b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1191 :         ResourceHolderUINT root;

  00040	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00043	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1192 :         __UNIT_TYPE source_len = lstrlenW(source);

  0004f	8b f4		 mov	 esi, esp
  00051	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  00054	50		 push	 eax
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  0005b	3b f4		 cmp	 esi, esp
  0005d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00062	89 45 d8	 mov	 DWORD PTR _source_len$[ebp], eax

; 1193 :         size_t int_part_buf_size = source_len + 1;

  00065	8b 4d d8	 mov	 ecx, DWORD PTR _source_len$[ebp]
  00068	83 c1 01	 add	 ecx, 1
  0006b	89 4d d4	 mov	 DWORD PTR _int_part_buf_size$[ebp], ecx

; 1194 :         wchar_t* int_part_buf = root.AllocateString(source_len + 1);

  0006e	8b 55 d8	 mov	 edx, DWORD PTR _source_len$[ebp]
  00071	83 c2 01	 add	 edx, 1
  00074	52		 push	 edx
  00075	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00078	e8 00 00 00 00	 call	 ?AllocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPA_WI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateString
  0007d	89 45 d0	 mov	 DWORD PTR _int_part_buf$[ebp], eax

; 1195 :         int result_parsing = ParseAsHexNumberString(source, number_styles, format_option, int_part_buf, int_part_buf_size);

  00080	8b 45 d4	 mov	 eax, DWORD PTR _int_part_buf_size$[ebp]
  00083	50		 push	 eax
  00084	8b 4d d0	 mov	 ecx, DWORD PTR _int_part_buf$[ebp]
  00087	51		 push	 ecx
  00088	8b 55 10	 mov	 edx, DWORD PTR _format_option$[ebp]
  0008b	52		 push	 edx
  0008c	8b 45 0c	 mov	 eax, DWORD PTR _number_styles$[ebp]
  0008f	50		 push	 eax
  00090	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  00093	51		 push	 ecx
  00094	e8 00 00 00 00	 call	 ?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PA_WI@Z ; Palmtree::Math::Core::Internal::ParseAsHexNumberString
  00099	83 c4 14	 add	 esp, 20			; 00000014H
  0009c	89 45 cc	 mov	 DWORD PTR _result_parsing$[ebp], eax

; 1196 :         root.CheckString(int_part_buf);

  0009f	8b 55 d0	 mov	 edx, DWORD PTR _int_part_buf$[ebp]
  000a2	52		 push	 edx
  000a3	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  000a6	e8 00 00 00 00	 call	 ?CheckString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPA_W@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckString

; 1197 :         if (!result_parsing || int_part_buf[0] == L'\0')

  000ab	83 7d cc 00	 cmp	 DWORD PTR _result_parsing$[ebp], 0
  000af	74 13		 je	 SHORT $LN5@TryParseX
  000b1	b8 02 00 00 00	 mov	 eax, 2
  000b6	6b c8 00	 imul	 ecx, eax, 0
  000b9	8b 55 d0	 mov	 edx, DWORD PTR _int_part_buf$[ebp]
  000bc	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  000c0	85 c0		 test	 eax, eax
  000c2	75 50		 jne	 SHORT $LN4@TryParseX
$LN5@TryParseX:

; 1198 :         {
; 1199 :             *result = 0;

  000c4	8b 4d 1c	 mov	 ecx, DWORD PTR _result$[ebp]
  000c7	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 1200 :             if (number_styles & PMC_NUMBER_STYLE_ALLOW_EXCEPTION_THROWING)

  000cd	8b 55 0c	 mov	 edx, DWORD PTR _number_styles$[ebp]
  000d0	81 e2 00 00 00
	02		 and	 edx, 33554432		; 02000000H
  000d6	74 1e		 je	 SHORT $LN6@TryParseX

; 1201 :                 return (PMC_STATUS_FORMAT_ERROR);

  000d8	c7 45 b0 f9 ff
	ff ff		 mov	 DWORD PTR $T4[ebp], -7	; fffffff9H
  000df	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000e6	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  000e9	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  000ee	8b 45 b0	 mov	 eax, DWORD PTR $T4[ebp]
  000f1	e9 ca 01 00 00	 jmp	 $LN1@TryParseX
$LN6@TryParseX:

; 1202 :             return (PMC_STATUS_OK);

  000f6	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0
  000fd	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00104	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00107	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0010c	8b 45 ac	 mov	 eax, DWORD PTR $T3[ebp]
  0010f	e9 ac 01 00 00	 jmp	 $LN1@TryParseX
$LN4@TryParseX:

; 1203 :         }
; 1204 : 
; 1205 :         // 先頭 1 文字が 8～F であれば負数とみなす
; 1206 :         if (ParseHexDigit(int_part_buf[0]) >= 8)

  00114	b8 02 00 00 00	 mov	 eax, 2
  00119	6b c8 00	 imul	 ecx, eax, 0
  0011c	8b 55 d0	 mov	 edx, DWORD PTR _int_part_buf$[ebp]
  0011f	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  00123	50		 push	 eax
  00124	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  00129	83 c4 04	 add	 esp, 4
  0012c	83 f8 08	 cmp	 eax, 8
  0012f	7c 1b		 jl	 SHORT $LN7@TryParseX

; 1207 :         {
; 1208 :             // 先頭 1 文字が 8～F であれば負数とみなす
; 1209 :             if (!(number_styles & PMC_NUMBER_STYLE_ALLOW_SIGNED_INTEGER))

  00131	8b 4d 0c	 mov	 ecx, DWORD PTR _number_styles$[ebp]
  00134	81 e1 00 00 00
	01		 and	 ecx, 16777216		; 01000000H
  0013a	75 08		 jne	 SHORT $LN9@TryParseX

; 1210 :             {
; 1211 :                 // 負数が許可されていないにもかかわらず先頭文字が'8'～'F'である場合
; 1212 : 
; 1213 :                 // そのまま正数として扱う
; 1214 :                 *o_sign = 1;

  0013c	8b 55 14	 mov	 edx, DWORD PTR _o_sign$[ebp]
  0013f	c6 02 01	 mov	 BYTE PTR [edx], 1

; 1215 :             }
; 1216 :             else

  00142	eb 06		 jmp	 SHORT $LN10@TryParseX
$LN9@TryParseX:

; 1217 :             {
; 1218 :                 // 負数が許可されていて先頭文字が'8'～'F'である場合
; 1219 : 
; 1220 :                 // 負数として扱う
; 1221 :                 *o_sign = -1;

  00144	8b 45 14	 mov	 eax, DWORD PTR _o_sign$[ebp]
  00147	c6 00 ff	 mov	 BYTE PTR [eax], -1
$LN10@TryParseX:

; 1222 :             }
; 1223 :         }
; 1224 :         else

  0014a	eb 06		 jmp	 SHORT $LN8@TryParseX
$LN7@TryParseX:

; 1225 :         {
; 1226 :             // 先頭 1 文字が 0～7 であれば正数とみなす
; 1227 :             *o_sign = 1;

  0014c	8b 4d 14	 mov	 ecx, DWORD PTR _o_sign$[ebp]
  0014f	c6 01 01	 mov	 BYTE PTR [ecx], 1
$LN8@TryParseX:

; 1228 :         }
; 1229 : 
; 1230 :         __UNIT_TYPE o_bit_count = lstrlenW(int_part_buf) * 4;

  00152	8b f4		 mov	 esi, esp
  00154	8b 55 d0	 mov	 edx, DWORD PTR _int_part_buf$[ebp]
  00157	52		 push	 edx
  00158	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  0015e	3b f4		 cmp	 esi, esp
  00160	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00165	c1 e0 02	 shl	 eax, 2
  00168	89 45 c8	 mov	 DWORD PTR _o_bit_count$[ebp], eax

; 1231 :         *o_abs = root.AllocateNumber(o_bit_count);

  0016b	8b 45 c8	 mov	 eax, DWORD PTR _o_bit_count$[ebp]
  0016e	50		 push	 eax
  0016f	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00172	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  00177	8b 4d 18	 mov	 ecx, DWORD PTR _o_abs$[ebp]
  0017a	89 01		 mov	 DWORD PTR [ecx], eax

; 1232 :         BuildBinaryFromHexString(int_part_buf, (*o_abs)->BLOCK);

  0017c	8b 55 18	 mov	 edx, DWORD PTR _o_abs$[ebp]
  0017f	8b 02		 mov	 eax, DWORD PTR [edx]
  00181	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00184	51		 push	 ecx
  00185	8b 55 d0	 mov	 edx, DWORD PTR _int_part_buf$[ebp]
  00188	52		 push	 edx
  00189	e8 00 00 00 00	 call	 ?BuildBinaryFromHexString@Internal@Core@Math@Palmtree@@YAXPA_WPAI@Z ; Palmtree::Math::Core::Internal::BuildBinaryFromHexString
  0018e	83 c4 08	 add	 esp, 8

; 1233 :         root.CheckNumber(*o_abs);

  00191	8b 45 18	 mov	 eax, DWORD PTR _o_abs$[ebp]
  00194	8b 08		 mov	 ecx, DWORD PTR [eax]
  00196	51		 push	 ecx
  00197	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  0019a	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 1234 :         root.DeallocateString(int_part_buf);

  0019f	8b 55 d0	 mov	 edx, DWORD PTR _int_part_buf$[ebp]
  001a2	52		 push	 edx
  001a3	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  001a6	e8 00 00 00 00	 call	 ?DeallocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPA_W@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateString

; 1235 :         if (*o_sign < 0)

  001ab	8b 45 14	 mov	 eax, DWORD PTR _o_sign$[ebp]
  001ae	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  001b1	85 c9		 test	 ecx, ecx
  001b3	0f 8d 9d 00 00
	00		 jge	 $LN11@TryParseX

; 1236 :         {
; 1237 :             // 負数の場合
; 1238 : 
; 1239 :             int lzcnt = o_bit_count % __UNIT_TYPE_BIT_COUNT;

  001b9	8b 45 c8	 mov	 eax, DWORD PTR _o_bit_count$[ebp]
  001bc	33 d2		 xor	 edx, edx
  001be	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  001c3	f7 f1		 div	 ecx
  001c5	89 55 c4	 mov	 DWORD PTR _lzcnt$9[ebp], edx

; 1240 :             if (lzcnt != 0)

  001c8	83 7d c4 00	 cmp	 DWORD PTR _lzcnt$9[ebp], 0
  001cc	74 36		 je	 SHORT $LN12@TryParseX

; 1241 :             {
; 1242 :                 __UNIT_TYPE padding = (__UNIT_TYPE)-1 << lzcnt;

  001ce	83 ca ff	 or	 edx, -1
  001d1	8b 4d c4	 mov	 ecx, DWORD PTR _lzcnt$9[ebp]
  001d4	d3 e2		 shl	 edx, cl
  001d6	89 55 c0	 mov	 DWORD PTR _padding$8[ebp], edx

; 1243 :                 (*o_abs)->BLOCK[(*o_abs)->BLOCK_COUNT - 1] |= padding;

  001d9	8b 45 18	 mov	 eax, DWORD PTR _o_abs$[ebp]
  001dc	8b 08		 mov	 ecx, DWORD PTR [eax]
  001de	8b 55 18	 mov	 edx, DWORD PTR _o_abs$[ebp]
  001e1	8b 02		 mov	 eax, DWORD PTR [edx]
  001e3	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
  001e6	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  001e9	8b 4c 90 fc	 mov	 ecx, DWORD PTR [eax+edx*4-4]
  001ed	0b 4d c0	 or	 ecx, DWORD PTR _padding$8[ebp]
  001f0	8b 55 18	 mov	 edx, DWORD PTR _o_abs$[ebp]
  001f3	8b 02		 mov	 eax, DWORD PTR [edx]
  001f5	8b 55 18	 mov	 edx, DWORD PTR _o_abs$[ebp]
  001f8	8b 12		 mov	 edx, DWORD PTR [edx]
  001fa	8b 52 20	 mov	 edx, DWORD PTR [edx+32]
  001fd	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  00200	89 4c 90 fc	 mov	 DWORD PTR [eax+edx*4-4], ecx
$LN12@TryParseX:

; 1244 :             }
; 1245 : 
; 1246 :             // 配列 (*o_abs)->BLOCK の内容をビット反転してインクリメントする
; 1247 :             char carry = 1;

  00204	c6 45 bf 01	 mov	 BYTE PTR _carry$7[ebp], 1

; 1248 :             __UNIT_TYPE* p = (*o_abs)->BLOCK;

  00208	8b 4d 18	 mov	 ecx, DWORD PTR _o_abs$[ebp]
  0020b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0020d	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00210	89 45 b8	 mov	 DWORD PTR _p$6[ebp], eax

; 1249 :             __UNIT_TYPE count = (*o_abs)->BLOCK_COUNT;

  00213	8b 4d 18	 mov	 ecx, DWORD PTR _o_abs$[ebp]
  00216	8b 11		 mov	 edx, DWORD PTR [ecx]
  00218	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0021b	89 45 b4	 mov	 DWORD PTR _count$5[ebp], eax
$LN2@TryParseX:

; 1250 :             while (count > 0)

  0021e	83 7d b4 00	 cmp	 DWORD PTR _count$5[ebp], 0
  00222	76 32		 jbe	 SHORT $LN11@TryParseX

; 1251 :             {
; 1252 :                 carry = _ADD_UNIT(carry, ~*p, 0, p);

  00224	8b 4d b8	 mov	 ecx, DWORD PTR _p$6[ebp]
  00227	51		 push	 ecx
  00228	6a 00		 push	 0
  0022a	8b 55 b8	 mov	 edx, DWORD PTR _p$6[ebp]
  0022d	8b 02		 mov	 eax, DWORD PTR [edx]
  0022f	f7 d0		 not	 eax
  00231	50		 push	 eax
  00232	0f b6 4d bf	 movzx	 ecx, BYTE PTR _carry$7[ebp]
  00236	51		 push	 ecx
  00237	e8 00 00 00 00	 call	 __ADD_UNIT
  0023c	83 c4 10	 add	 esp, 16			; 00000010H
  0023f	88 45 bf	 mov	 BYTE PTR _carry$7[ebp], al

; 1253 :                 ++p;

  00242	8b 55 b8	 mov	 edx, DWORD PTR _p$6[ebp]
  00245	83 c2 04	 add	 edx, 4
  00248	89 55 b8	 mov	 DWORD PTR _p$6[ebp], edx

; 1254 :                 --count;

  0024b	8b 45 b4	 mov	 eax, DWORD PTR _count$5[ebp]
  0024e	83 e8 01	 sub	 eax, 1
  00251	89 45 b4	 mov	 DWORD PTR _count$5[ebp], eax

; 1255 :             }

  00254	eb c8		 jmp	 SHORT $LN2@TryParseX
$LN11@TryParseX:

; 1256 :         }
; 1257 :         CommitNumber(*o_abs);

  00256	8b 4d 18	 mov	 ecx, DWORD PTR _o_abs$[ebp]
  00259	8b 11		 mov	 edx, DWORD PTR [ecx]
  0025b	52		 push	 edx
  0025c	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  00261	83 c4 04	 add	 esp, 4

; 1258 :         if ((*o_abs)->IS_ZERO)

  00264	8b 45 18	 mov	 eax, DWORD PTR _o_abs$[ebp]
  00267	8b 08		 mov	 ecx, DWORD PTR [eax]
  00269	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0026c	83 e2 01	 and	 edx, 1
  0026f	74 1f		 je	 SHORT $LN13@TryParseX

; 1259 :         {
; 1260 :             root.DeallocateNumber(*o_abs);

  00271	8b 45 18	 mov	 eax, DWORD PTR _o_abs$[ebp]
  00274	8b 08		 mov	 ecx, DWORD PTR [eax]
  00276	51		 push	 ecx
  00277	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  0027a	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 1261 :             *o_sign = 0;

  0027f	8b 55 14	 mov	 edx, DWORD PTR _o_sign$[ebp]
  00282	c6 02 00	 mov	 BYTE PTR [edx], 0

; 1262 :             *o_abs = &number_zero;

  00285	8b 45 18	 mov	 eax, DWORD PTR _o_abs$[ebp]
  00288	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero

; 1263 :         }
; 1264 :         else

  0028e	eb 0e		 jmp	 SHORT $LN14@TryParseX
$LN13@TryParseX:

; 1265 :             root.UnlinkNumber(*o_abs);

  00290	8b 4d 18	 mov	 ecx, DWORD PTR _o_abs$[ebp]
  00293	8b 11		 mov	 edx, DWORD PTR [ecx]
  00295	52		 push	 edx
  00296	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00299	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN14@TryParseX:

; 1266 :         *result = 1;

  0029e	8b 45 1c	 mov	 eax, DWORD PTR _result$[ebp]
  002a1	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1

; 1267 :         return (PMC_STATUS_OK);

  002a7	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  002ae	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002b5	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  002b8	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  002bd	8b 45 a8	 mov	 eax, DWORD PTR $T2[ebp]
$LN1@TryParseX:

; 1268 :     }

  002c0	52		 push	 edx
  002c1	8b cd		 mov	 ecx, ebp
  002c3	50		 push	 eax
  002c4	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN20@TryParseX
  002ca	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  002cf	58		 pop	 eax
  002d0	5a		 pop	 edx
  002d1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002d4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002db	59		 pop	 ecx
  002dc	5f		 pop	 edi
  002dd	5e		 pop	 esi
  002de	83 c4 58	 add	 esp, 88			; 00000058H
  002e1	3b ec		 cmp	 ebp, esp
  002e3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002e8	8b e5		 mov	 esp, ebp
  002ea	5d		 pop	 ebp
  002eb	c3		 ret	 0
$LN20@TryParseX:
  002ec	01 00 00 00	 DD	 1
  002f0	00 00 00 00	 DD	 $LN19@TryParseX
$LN19@TryParseX:
  002f4	e0 ff ff ff	 DD	 -32			; ffffffe0H
  002f8	10 00 00 00	 DD	 16			; 00000010H
  002fc	00 00 00 00	 DD	 $LN17@TryParseX
$LN17@TryParseX:
  00300	72		 DB	 114			; 00000072H
  00301	6f		 DB	 111			; 0000006fH
  00302	6f		 DB	 111			; 0000006fH
  00303	74		 DB	 116			; 00000074H
  00304	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?TryParseX@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?TryParseX@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?TryParseX@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?TryParseX@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z ENDP ; Palmtree::Math::Core::Internal::TryParseX
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
_TEXT	SEGMENT
$T2 = -300						; size = 4
_state$ = -292						; size = 260
_dummy_sign$ = -21					; size = 1
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_in_ptr$ = 8						; size = 4
_number_styles$ = 12					; size = 4
_format_option$ = 16					; size = 4
_int_part_buf$ = 20					; size = 4
_int_part_buf_size$ = 24				; size = 4
?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PA_WI@Z PROC ; Palmtree::Math::Core::Internal::ParseAsHexNumberString

; 1183 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PA_WI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 20 01 00
	00		 sub	 esp, 288		; 00000120H
  00017	57		 push	 edi
  00018	8d bd d4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-300]
  0001e	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002f	33 c5		 xor	 eax, ebp
  00031	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00034	50		 push	 eax
  00035	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00038	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003e	b9 00 00 00 00	 mov	 ecx, OFFSET __F159A697_pmc_parse@cpp
  00043	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1184 :         char dummy_sign;
; 1185 :         ParserState state(in_ptr, number_styles, format_option, &dummy_sign, int_part_buf, int_part_buf_size, nullptr, 0);

  00048	6a 00		 push	 0
  0004a	6a 00		 push	 0
  0004c	8b 45 18	 mov	 eax, DWORD PTR _int_part_buf_size$[ebp]
  0004f	50		 push	 eax
  00050	8b 4d 14	 mov	 ecx, DWORD PTR _int_part_buf$[ebp]
  00053	51		 push	 ecx
  00054	8d 55 eb	 lea	 edx, DWORD PTR _dummy_sign$[ebp]
  00057	52		 push	 edx
  00058	8b 45 10	 mov	 eax, DWORD PTR _format_option$[ebp]
  0005b	50		 push	 eax
  0005c	8b 4d 0c	 mov	 ecx, DWORD PTR _number_styles$[ebp]
  0005f	51		 push	 ecx
  00060	8b 55 08	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  00063	52		 push	 edx
  00064	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR _state$[ebp]
  0006a	e8 00 00 00 00	 call	 ??0ParserState@Internal@Core@Math@Palmtree@@QAE@PB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPA_WI3I@Z ; Palmtree::Math::Core::Internal::ParserState::ParserState
  0006f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1186 :         return (state.ParseAsHexNumberString());

  00076	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR _state$[ebp]
  0007c	e8 00 00 00 00	 call	 ?ParseAsHexNumberString@ParserState@Internal@Core@Math@Palmtree@@QAEHXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsHexNumberString
  00081	89 85 d4 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00087	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008e	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR _state$[ebp]
  00094	e8 00 00 00 00	 call	 ??1ParserState@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ParserState::~ParserState
  00099	8b 85 d4 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 1187 :     }

  0009f	52		 push	 edx
  000a0	8b cd		 mov	 ecx, ebp
  000a2	50		 push	 eax
  000a3	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@ParseAsHex
  000a9	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000ae	58		 pop	 eax
  000af	5a		 pop	 edx
  000b0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ba	59		 pop	 ecx
  000bb	5f		 pop	 edi
  000bc	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000bf	33 cd		 xor	 ecx, ebp
  000c1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c6	81 c4 2c 01 00
	00		 add	 esp, 300		; 0000012cH
  000cc	3b ec		 cmp	 ebp, esp
  000ce	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d3	8b e5		 mov	 esp, ebp
  000d5	5d		 pop	 ebp
  000d6	c3		 ret	 0
  000d7	90		 npad	 1
$LN8@ParseAsHex:
  000d8	02 00 00 00	 DD	 2
  000dc	00 00 00 00	 DD	 $LN7@ParseAsHex
$LN7@ParseAsHex:
  000e0	eb ff ff ff	 DD	 -21			; ffffffebH
  000e4	01 00 00 00	 DD	 1
  000e8	00 00 00 00	 DD	 $LN4@ParseAsHex
  000ec	dc fe ff ff	 DD	 -292			; fffffedcH
  000f0	04 01 00 00	 DD	 260			; 00000104H
  000f4	00 00 00 00	 DD	 $LN5@ParseAsHex
$LN5@ParseAsHex:
  000f8	73		 DB	 115			; 00000073H
  000f9	74		 DB	 116			; 00000074H
  000fa	61		 DB	 97			; 00000061H
  000fb	74		 DB	 116			; 00000074H
  000fc	65		 DB	 101			; 00000065H
  000fd	00		 DB	 0
$LN4@ParseAsHex:
  000fe	64		 DB	 100			; 00000064H
  000ff	75		 DB	 117			; 00000075H
  00100	6d		 DB	 109			; 0000006dH
  00101	6d		 DB	 109			; 0000006dH
  00102	79		 DB	 121			; 00000079H
  00103	5f		 DB	 95			; 0000005fH
  00104	73		 DB	 115			; 00000073H
  00105	69		 DB	 105			; 00000069H
  00106	67		 DB	 103			; 00000067H
  00107	6e		 DB	 110			; 0000006eH
  00108	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PA_WI@Z$0:
  00000	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR _state$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1ParserState@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ParserState::~ParserState
__ehhandler$?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PA_WI@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a d8 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-296]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PA_WI@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PA_WI@Z ENDP ; Palmtree::Math::Core::Internal::ParseAsHexNumberString
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
_TEXT	SEGMENT
_r$ = -20						; size = 4
_out_ptr$ = -16						; size = 4
_in_ptr$ = -12						; size = 4
_source_count$ = -8					; size = 4
_word_digit_count$ = -4					; size = 4
_source$ = 8						; size = 4
_out_buf$ = 12						; size = 4
?BuildBinaryFromHexString@Internal@Core@Math@Palmtree@@YAXPA_WPAI@Z PROC ; Palmtree::Math::Core::Internal::BuildBinaryFromHexString

; 1162 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00012	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00015	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00018	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __F159A697_pmc_parse@cpp
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1163 :         int word_digit_count = __UNIT_TYPE_BIT_COUNT / 4;

  00025	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR _word_digit_count$[ebp], 8

; 1164 :         __UNIT_TYPE source_count = lstrlenW(source);

  0002c	8b f4		 mov	 esi, esp
  0002e	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  00031	50		 push	 eax
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  00038	3b f4		 cmp	 esi, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	89 45 f8	 mov	 DWORD PTR _source_count$[ebp], eax

; 1165 :         wchar_t* in_ptr = source;

  00042	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  00045	89 4d f4	 mov	 DWORD PTR _in_ptr$[ebp], ecx

; 1166 :         __UNIT_TYPE* out_ptr = out_buf + _DIVIDE_CEILING_UNIT(source_count, word_digit_count) - 1;

  00048	8b 55 fc	 mov	 edx, DWORD PTR _word_digit_count$[ebp]
  0004b	52		 push	 edx
  0004c	8b 45 f8	 mov	 eax, DWORD PTR _source_count$[ebp]
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 __DIVIDE_CEILING_UNIT
  00055	83 c4 08	 add	 esp, 8
  00058	8b 4d 0c	 mov	 ecx, DWORD PTR _out_buf$[ebp]
  0005b	8d 54 81 fc	 lea	 edx, DWORD PTR [ecx+eax*4-4]
  0005f	89 55 f0	 mov	 DWORD PTR _out_ptr$[ebp], edx

; 1167 :         int r = source_count % word_digit_count;

  00062	8b 45 f8	 mov	 eax, DWORD PTR _source_count$[ebp]
  00065	33 d2		 xor	 edx, edx
  00067	f7 75 fc	 div	 DWORD PTR _word_digit_count$[ebp]
  0006a	89 55 ec	 mov	 DWORD PTR _r$[ebp], edx

; 1168 :         if (r > 0)

  0006d	83 7d ec 00	 cmp	 DWORD PTR _r$[ebp], 0
  00071	7e 33		 jle	 SHORT $LN2@BuildBinar

; 1169 :         {
; 1170 :             *out_ptr-- = BuildLeading1WordFromHexString(in_ptr, r);

  00073	8b 45 ec	 mov	 eax, DWORD PTR _r$[ebp]
  00076	50		 push	 eax
  00077	8b 4d f4	 mov	 ecx, DWORD PTR _in_ptr$[ebp]
  0007a	51		 push	 ecx
  0007b	e8 00 00 00 00	 call	 ?BuildLeading1WordFromHexString@Internal@Core@Math@Palmtree@@YAIPA_WI@Z ; Palmtree::Math::Core::Internal::BuildLeading1WordFromHexString
  00080	83 c4 08	 add	 esp, 8
  00083	8b 55 f0	 mov	 edx, DWORD PTR _out_ptr$[ebp]
  00086	89 02		 mov	 DWORD PTR [edx], eax
  00088	8b 45 f0	 mov	 eax, DWORD PTR _out_ptr$[ebp]
  0008b	83 e8 04	 sub	 eax, 4
  0008e	89 45 f0	 mov	 DWORD PTR _out_ptr$[ebp], eax

; 1171 :             in_ptr += r;

  00091	8b 4d ec	 mov	 ecx, DWORD PTR _r$[ebp]
  00094	8b 55 f4	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  00097	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  0009a	89 45 f4	 mov	 DWORD PTR _in_ptr$[ebp], eax

; 1172 :             source_count -= r;

  0009d	8b 4d f8	 mov	 ecx, DWORD PTR _source_count$[ebp]
  000a0	2b 4d ec	 sub	 ecx, DWORD PTR _r$[ebp]
  000a3	89 4d f8	 mov	 DWORD PTR _source_count$[ebp], ecx
$LN2@BuildBinar:

; 1173 :         }
; 1174 :         while (source_count > 0)

  000a6	83 7d f8 00	 cmp	 DWORD PTR _source_count$[ebp], 0
  000aa	76 31		 jbe	 SHORT $LN1@BuildBinar

; 1175 :         {
; 1176 :             *out_ptr-- = Build1WordFromHexString(in_ptr);

  000ac	8b 55 f4	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  000af	52		 push	 edx
  000b0	e8 00 00 00 00	 call	 ?Build1WordFromHexString@Internal@Core@Math@Palmtree@@YAIPA_W@Z ; Palmtree::Math::Core::Internal::Build1WordFromHexString
  000b5	83 c4 04	 add	 esp, 4
  000b8	8b 4d f0	 mov	 ecx, DWORD PTR _out_ptr$[ebp]
  000bb	89 01		 mov	 DWORD PTR [ecx], eax
  000bd	8b 55 f0	 mov	 edx, DWORD PTR _out_ptr$[ebp]
  000c0	83 ea 04	 sub	 edx, 4
  000c3	89 55 f0	 mov	 DWORD PTR _out_ptr$[ebp], edx

; 1177 :             in_ptr += word_digit_count;

  000c6	8b 45 fc	 mov	 eax, DWORD PTR _word_digit_count$[ebp]
  000c9	8b 4d f4	 mov	 ecx, DWORD PTR _in_ptr$[ebp]
  000cc	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  000cf	89 55 f4	 mov	 DWORD PTR _in_ptr$[ebp], edx

; 1178 :             source_count -= word_digit_count;

  000d2	8b 45 f8	 mov	 eax, DWORD PTR _source_count$[ebp]
  000d5	2b 45 fc	 sub	 eax, DWORD PTR _word_digit_count$[ebp]
  000d8	89 45 f8	 mov	 DWORD PTR _source_count$[ebp], eax

; 1179 :         }

  000db	eb c9		 jmp	 SHORT $LN2@BuildBinar
$LN1@BuildBinar:

; 1180 :     }

  000dd	5e		 pop	 esi
  000de	83 c4 14	 add	 esp, 20			; 00000014H
  000e1	3b ec		 cmp	 ebp, esp
  000e3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e8	8b e5		 mov	 esp, ebp
  000ea	5d		 pop	 ebp
  000eb	c3		 ret	 0
?BuildBinaryFromHexString@Internal@Core@Math@Palmtree@@YAXPA_WPAI@Z ENDP ; Palmtree::Math::Core::Internal::BuildBinaryFromHexString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
_TEXT	SEGMENT
tv191 = -36						; size = 2
tv184 = -34						; size = 2
tv178 = -32						; size = 2
tv171 = -30						; size = 2
tv165 = -28						; size = 2
tv159 = -26						; size = 2
tv153 = -24						; size = 2
tv146 = -22						; size = 2
tv140 = -20						; size = 2
tv134 = -18						; size = 2
tv128 = -16						; size = 2
tv90 = -14						; size = 2
tv84 = -12						; size = 2
tv78 = -10						; size = 2
tv72 = -8						; size = 2
tv66 = -6						; size = 2
_x$ = -4						; size = 4
_in_ptr$ = 8						; size = 4
?Build1WordFromHexString@Internal@Core@Math@Palmtree@@YAIPA_W@Z PROC ; Palmtree::Math::Core::Internal::Build1WordFromHexString

; 1129 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0000e	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00011	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00014	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00017	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0001a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001d	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00020	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00023	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00026	b9 00 00 00 00	 mov	 ecx, OFFSET __F159A697_pmc_parse@cpp
  0002b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1130 :         __UNIT_TYPE x = ParseHexDigit(*in_ptr++);

  00030	8b 45 08	 mov	 eax, DWORD PTR _in_ptr$[ebp]
  00033	66 8b 08	 mov	 cx, WORD PTR [eax]
  00036	66 89 4d fa	 mov	 WORD PTR tv66[ebp], cx
  0003a	8b 55 08	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  0003d	83 c2 02	 add	 edx, 2
  00040	89 55 08	 mov	 DWORD PTR _in_ptr$[ebp], edx
  00043	0f b7 45 fa	 movzx	 eax, WORD PTR tv66[ebp]
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  0004d	83 c4 04	 add	 esp, 4
  00050	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 1131 :         if (sizeof(__UNIT_TYPE) >= sizeof(_UINT64_T))

  00053	33 c9		 xor	 ecx, ecx
  00055	0f 84 58 01 00
	00		 je	 $LN2@Build1Word

; 1132 :         {
; 1133 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  0005b	8b 55 08	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  0005e	66 8b 02	 mov	 ax, WORD PTR [edx]
  00061	66 89 45 f8	 mov	 WORD PTR tv72[ebp], ax
  00065	8b 4d 08	 mov	 ecx, DWORD PTR _in_ptr$[ebp]
  00068	83 c1 02	 add	 ecx, 2
  0006b	89 4d 08	 mov	 DWORD PTR _in_ptr$[ebp], ecx
  0006e	0f b7 55 f8	 movzx	 edx, WORD PTR tv72[ebp]
  00072	52		 push	 edx
  00073	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  00078	83 c4 04	 add	 esp, 4
  0007b	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  0007e	c1 e1 04	 shl	 ecx, 4
  00081	03 c8		 add	 ecx, eax
  00083	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 1134 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  00086	8b 55 08	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  00089	66 8b 02	 mov	 ax, WORD PTR [edx]
  0008c	66 89 45 f6	 mov	 WORD PTR tv78[ebp], ax
  00090	8b 4d 08	 mov	 ecx, DWORD PTR _in_ptr$[ebp]
  00093	83 c1 02	 add	 ecx, 2
  00096	89 4d 08	 mov	 DWORD PTR _in_ptr$[ebp], ecx
  00099	0f b7 55 f6	 movzx	 edx, WORD PTR tv78[ebp]
  0009d	52		 push	 edx
  0009e	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  000a3	83 c4 04	 add	 esp, 4
  000a6	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  000a9	c1 e1 04	 shl	 ecx, 4
  000ac	03 c8		 add	 ecx, eax
  000ae	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 1135 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  000b1	8b 55 08	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  000b4	66 8b 02	 mov	 ax, WORD PTR [edx]
  000b7	66 89 45 f4	 mov	 WORD PTR tv84[ebp], ax
  000bb	8b 4d 08	 mov	 ecx, DWORD PTR _in_ptr$[ebp]
  000be	83 c1 02	 add	 ecx, 2
  000c1	89 4d 08	 mov	 DWORD PTR _in_ptr$[ebp], ecx
  000c4	0f b7 55 f4	 movzx	 edx, WORD PTR tv84[ebp]
  000c8	52		 push	 edx
  000c9	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  000ce	83 c4 04	 add	 esp, 4
  000d1	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  000d4	c1 e1 04	 shl	 ecx, 4
  000d7	03 c8		 add	 ecx, eax
  000d9	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 1136 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  000dc	8b 55 08	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  000df	66 8b 02	 mov	 ax, WORD PTR [edx]
  000e2	66 89 45 f2	 mov	 WORD PTR tv90[ebp], ax
  000e6	8b 4d 08	 mov	 ecx, DWORD PTR _in_ptr$[ebp]
  000e9	83 c1 02	 add	 ecx, 2
  000ec	89 4d 08	 mov	 DWORD PTR _in_ptr$[ebp], ecx
  000ef	0f b7 55 f2	 movzx	 edx, WORD PTR tv90[ebp]
  000f3	52		 push	 edx
  000f4	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  000f9	83 c4 04	 add	 esp, 4
  000fc	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  000ff	c1 e1 04	 shl	 ecx, 4
  00102	03 c8		 add	 ecx, eax
  00104	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 1137 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  00107	8b 55 08	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  0010a	66 8b 02	 mov	 ax, WORD PTR [edx]
  0010d	66 89 45 f0	 mov	 WORD PTR tv128[ebp], ax
  00111	8b 4d 08	 mov	 ecx, DWORD PTR _in_ptr$[ebp]
  00114	83 c1 02	 add	 ecx, 2
  00117	89 4d 08	 mov	 DWORD PTR _in_ptr$[ebp], ecx
  0011a	0f b7 55 f0	 movzx	 edx, WORD PTR tv128[ebp]
  0011e	52		 push	 edx
  0011f	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  00124	83 c4 04	 add	 esp, 4
  00127	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  0012a	c1 e1 04	 shl	 ecx, 4
  0012d	03 c8		 add	 ecx, eax
  0012f	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 1138 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  00132	8b 55 08	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  00135	66 8b 02	 mov	 ax, WORD PTR [edx]
  00138	66 89 45 ee	 mov	 WORD PTR tv134[ebp], ax
  0013c	8b 4d 08	 mov	 ecx, DWORD PTR _in_ptr$[ebp]
  0013f	83 c1 02	 add	 ecx, 2
  00142	89 4d 08	 mov	 DWORD PTR _in_ptr$[ebp], ecx
  00145	0f b7 55 ee	 movzx	 edx, WORD PTR tv134[ebp]
  00149	52		 push	 edx
  0014a	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  0014f	83 c4 04	 add	 esp, 4
  00152	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  00155	c1 e1 04	 shl	 ecx, 4
  00158	03 c8		 add	 ecx, eax
  0015a	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 1139 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  0015d	8b 55 08	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  00160	66 8b 02	 mov	 ax, WORD PTR [edx]
  00163	66 89 45 ec	 mov	 WORD PTR tv140[ebp], ax
  00167	8b 4d 08	 mov	 ecx, DWORD PTR _in_ptr$[ebp]
  0016a	83 c1 02	 add	 ecx, 2
  0016d	89 4d 08	 mov	 DWORD PTR _in_ptr$[ebp], ecx
  00170	0f b7 55 ec	 movzx	 edx, WORD PTR tv140[ebp]
  00174	52		 push	 edx
  00175	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  0017a	83 c4 04	 add	 esp, 4
  0017d	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  00180	c1 e1 04	 shl	 ecx, 4
  00183	03 c8		 add	 ecx, eax
  00185	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 1140 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  00188	8b 55 08	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  0018b	66 8b 02	 mov	 ax, WORD PTR [edx]
  0018e	66 89 45 ea	 mov	 WORD PTR tv146[ebp], ax
  00192	8b 4d 08	 mov	 ecx, DWORD PTR _in_ptr$[ebp]
  00195	83 c1 02	 add	 ecx, 2
  00198	89 4d 08	 mov	 DWORD PTR _in_ptr$[ebp], ecx
  0019b	0f b7 55 ea	 movzx	 edx, WORD PTR tv146[ebp]
  0019f	52		 push	 edx
  001a0	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  001a5	83 c4 04	 add	 esp, 4
  001a8	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  001ab	c1 e1 04	 shl	 ecx, 4
  001ae	03 c8		 add	 ecx, eax
  001b0	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx
$LN2@Build1Word:

; 1141 :         }
; 1142 :         if (sizeof(__UNIT_TYPE) >= sizeof(_UINT32_T))

  001b3	ba 01 00 00 00	 mov	 edx, 1
  001b8	85 d2		 test	 edx, edx
  001ba	0f 84 ac 00 00
	00		 je	 $LN3@Build1Word

; 1143 :         {
; 1144 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  001c0	8b 45 08	 mov	 eax, DWORD PTR _in_ptr$[ebp]
  001c3	66 8b 08	 mov	 cx, WORD PTR [eax]
  001c6	66 89 4d e8	 mov	 WORD PTR tv153[ebp], cx
  001ca	8b 55 08	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  001cd	83 c2 02	 add	 edx, 2
  001d0	89 55 08	 mov	 DWORD PTR _in_ptr$[ebp], edx
  001d3	0f b7 45 e8	 movzx	 eax, WORD PTR tv153[ebp]
  001d7	50		 push	 eax
  001d8	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  001dd	83 c4 04	 add	 esp, 4
  001e0	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  001e3	c1 e1 04	 shl	 ecx, 4
  001e6	03 c8		 add	 ecx, eax
  001e8	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 1145 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  001eb	8b 55 08	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  001ee	66 8b 02	 mov	 ax, WORD PTR [edx]
  001f1	66 89 45 e6	 mov	 WORD PTR tv159[ebp], ax
  001f5	8b 4d 08	 mov	 ecx, DWORD PTR _in_ptr$[ebp]
  001f8	83 c1 02	 add	 ecx, 2
  001fb	89 4d 08	 mov	 DWORD PTR _in_ptr$[ebp], ecx
  001fe	0f b7 55 e6	 movzx	 edx, WORD PTR tv159[ebp]
  00202	52		 push	 edx
  00203	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  00208	83 c4 04	 add	 esp, 4
  0020b	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  0020e	c1 e1 04	 shl	 ecx, 4
  00211	03 c8		 add	 ecx, eax
  00213	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 1146 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  00216	8b 55 08	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  00219	66 8b 02	 mov	 ax, WORD PTR [edx]
  0021c	66 89 45 e4	 mov	 WORD PTR tv165[ebp], ax
  00220	8b 4d 08	 mov	 ecx, DWORD PTR _in_ptr$[ebp]
  00223	83 c1 02	 add	 ecx, 2
  00226	89 4d 08	 mov	 DWORD PTR _in_ptr$[ebp], ecx
  00229	0f b7 55 e4	 movzx	 edx, WORD PTR tv165[ebp]
  0022d	52		 push	 edx
  0022e	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  00233	83 c4 04	 add	 esp, 4
  00236	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  00239	c1 e1 04	 shl	 ecx, 4
  0023c	03 c8		 add	 ecx, eax
  0023e	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 1147 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  00241	8b 55 08	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  00244	66 8b 02	 mov	 ax, WORD PTR [edx]
  00247	66 89 45 e2	 mov	 WORD PTR tv171[ebp], ax
  0024b	8b 4d 08	 mov	 ecx, DWORD PTR _in_ptr$[ebp]
  0024e	83 c1 02	 add	 ecx, 2
  00251	89 4d 08	 mov	 DWORD PTR _in_ptr$[ebp], ecx
  00254	0f b7 55 e2	 movzx	 edx, WORD PTR tv171[ebp]
  00258	52		 push	 edx
  00259	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  0025e	83 c4 04	 add	 esp, 4
  00261	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  00264	c1 e1 04	 shl	 ecx, 4
  00267	03 c8		 add	 ecx, eax
  00269	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx
$LN3@Build1Word:

; 1148 :         }
; 1149 :         if (sizeof(__UNIT_TYPE) >= sizeof(_UINT16_T))

  0026c	ba 01 00 00 00	 mov	 edx, 1
  00271	85 d2		 test	 edx, edx
  00273	74 56		 je	 SHORT $LN4@Build1Word

; 1150 :         {
; 1151 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  00275	8b 45 08	 mov	 eax, DWORD PTR _in_ptr$[ebp]
  00278	66 8b 08	 mov	 cx, WORD PTR [eax]
  0027b	66 89 4d e0	 mov	 WORD PTR tv178[ebp], cx
  0027f	8b 55 08	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  00282	83 c2 02	 add	 edx, 2
  00285	89 55 08	 mov	 DWORD PTR _in_ptr$[ebp], edx
  00288	0f b7 45 e0	 movzx	 eax, WORD PTR tv178[ebp]
  0028c	50		 push	 eax
  0028d	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  00292	83 c4 04	 add	 esp, 4
  00295	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  00298	c1 e1 04	 shl	 ecx, 4
  0029b	03 c8		 add	 ecx, eax
  0029d	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 1152 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  002a0	8b 55 08	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  002a3	66 8b 02	 mov	 ax, WORD PTR [edx]
  002a6	66 89 45 de	 mov	 WORD PTR tv184[ebp], ax
  002aa	8b 4d 08	 mov	 ecx, DWORD PTR _in_ptr$[ebp]
  002ad	83 c1 02	 add	 ecx, 2
  002b0	89 4d 08	 mov	 DWORD PTR _in_ptr$[ebp], ecx
  002b3	0f b7 55 de	 movzx	 edx, WORD PTR tv184[ebp]
  002b7	52		 push	 edx
  002b8	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  002bd	83 c4 04	 add	 esp, 4
  002c0	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  002c3	c1 e1 04	 shl	 ecx, 4
  002c6	03 c8		 add	 ecx, eax
  002c8	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx
$LN4@Build1Word:

; 1153 :         }
; 1154 :         if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))

  002cb	ba 01 00 00 00	 mov	 edx, 1
  002d0	85 d2		 test	 edx, edx
  002d2	74 2b		 je	 SHORT $LN5@Build1Word

; 1155 :         {
; 1156 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  002d4	8b 45 08	 mov	 eax, DWORD PTR _in_ptr$[ebp]
  002d7	66 8b 08	 mov	 cx, WORD PTR [eax]
  002da	66 89 4d dc	 mov	 WORD PTR tv191[ebp], cx
  002de	8b 55 08	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  002e1	83 c2 02	 add	 edx, 2
  002e4	89 55 08	 mov	 DWORD PTR _in_ptr$[ebp], edx
  002e7	0f b7 45 dc	 movzx	 eax, WORD PTR tv191[ebp]
  002eb	50		 push	 eax
  002ec	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  002f1	83 c4 04	 add	 esp, 4
  002f4	8b 4d fc	 mov	 ecx, DWORD PTR _x$[ebp]
  002f7	c1 e1 04	 shl	 ecx, 4
  002fa	03 c8		 add	 ecx, eax
  002fc	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx
$LN5@Build1Word:

; 1157 :         }
; 1158 :         return (x);

  002ff	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]

; 1159 :     }

  00302	83 c4 24	 add	 esp, 36			; 00000024H
  00305	3b ec		 cmp	 ebp, esp
  00307	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0030c	8b e5		 mov	 esp, ebp
  0030e	5d		 pop	 ebp
  0030f	c3		 ret	 0
?Build1WordFromHexString@Internal@Core@Math@Palmtree@@YAIPA_W@Z ENDP ; Palmtree::Math::Core::Internal::Build1WordFromHexString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
_TEXT	SEGMENT
_x$ = -4						; size = 4
_in_ptr$ = 8						; size = 4
_count$ = 12						; size = 4
?BuildLeading1WordFromHexString@Internal@Core@Math@Palmtree@@YAIPA_WI@Z PROC ; Palmtree::Math::Core::Internal::BuildLeading1WordFromHexString

; 1115 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	b9 00 00 00 00	 mov	 ecx, OFFSET __F159A697_pmc_parse@cpp
  00011	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1116 :         __UNIT_TYPE x = ParseHexDigit(*in_ptr);

  00016	8b 45 08	 mov	 eax, DWORD PTR _in_ptr$[ebp]
  00019	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  00022	83 c4 04	 add	 esp, 4
  00025	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 1117 :         ++in_ptr;

  00028	8b 55 08	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  0002b	83 c2 02	 add	 edx, 2
  0002e	89 55 08	 mov	 DWORD PTR _in_ptr$[ebp], edx

; 1118 :         --count;

  00031	8b 45 0c	 mov	 eax, DWORD PTR _count$[ebp]
  00034	83 e8 01	 sub	 eax, 1
  00037	89 45 0c	 mov	 DWORD PTR _count$[ebp], eax
$LN2@BuildLeadi:

; 1119 :         while (count > 0)

  0003a	83 7d 0c 00	 cmp	 DWORD PTR _count$[ebp], 0
  0003e	76 2e		 jbe	 SHORT $LN3@BuildLeadi

; 1120 :         {
; 1121 :             x = x * 16 + ParseHexDigit(*in_ptr);

  00040	8b 75 fc	 mov	 esi, DWORD PTR _x$[ebp]
  00043	c1 e6 04	 shl	 esi, 4
  00046	8b 4d 08	 mov	 ecx, DWORD PTR _in_ptr$[ebp]
  00049	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  0004c	52		 push	 edx
  0004d	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  00052	83 c4 04	 add	 esp, 4
  00055	03 f0		 add	 esi, eax
  00057	89 75 fc	 mov	 DWORD PTR _x$[ebp], esi

; 1122 :             ++in_ptr;

  0005a	8b 45 08	 mov	 eax, DWORD PTR _in_ptr$[ebp]
  0005d	83 c0 02	 add	 eax, 2
  00060	89 45 08	 mov	 DWORD PTR _in_ptr$[ebp], eax

; 1123 :             --count;

  00063	8b 4d 0c	 mov	 ecx, DWORD PTR _count$[ebp]
  00066	83 e9 01	 sub	 ecx, 1
  00069	89 4d 0c	 mov	 DWORD PTR _count$[ebp], ecx

; 1124 :         }

  0006c	eb cc		 jmp	 SHORT $LN2@BuildLeadi
$LN3@BuildLeadi:

; 1125 :         return (x);

  0006e	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]

; 1126 :     }

  00071	5e		 pop	 esi
  00072	83 c4 04	 add	 esp, 4
  00075	3b ec		 cmp	 ebp, esp
  00077	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c3		 ret	 0
?BuildLeading1WordFromHexString@Internal@Core@Math@Palmtree@@YAIPA_WI@Z ENDP ; Palmtree::Math::Core::Internal::BuildLeading1WordFromHexString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
_TEXT	SEGMENT
tv87 = -213						; size = 1
$T2 = -212						; size = 4
$T3 = -208						; size = 24
$T4 = -184						; size = 24
$T5 = -160						; size = 24
$T6 = -136						; size = 4
$T7 = -132						; size = 4
$T8 = -128						; size = 4
$T9 = -124						; size = 4
$T10 = -120						; size = 4
$T11 = -116						; size = 4
$T12 = -112						; size = 4
$T13 = -108						; size = 4
$T14 = -104						; size = 4
$T15 = -100						; size = 4
_o_bit_count$ = -96					; size = 4
_bin_buf_count$ = -88					; size = 4
_bin_buf$ = -80						; size = 4
_frac_ptr$ = -76					; size = 4
_d_ptr$16 = -72						; size = 4
_s_ptr$17 = -68						; size = 4
_result_parsing$ = -61					; size = 1
_frac_part_buf$ = -60					; size = 4
_frac_part_buf_count$ = -56				; size = 4
_int_part_buf$ = -52					; size = 4
_int_part_buf_count$ = -48				; size = 4
_source_len$ = -44					; size = 4
_root$ = -36						; size = 16
_word_digit_count$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
_source$ = 8						; size = 4
_number_styles$ = 12					; size = 4
_format_option$ = 16					; size = 4
_o_sign$ = 20						; size = 4
_o_abs$ = 24						; size = 4
_result$ = 28						; size = 4
?TryParseDN@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z PROC ; Palmtree::Math::Core::Internal::TryParseDN

; 967  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?TryParseDN@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  0001f	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	b9 00 00 00 00	 mov	 ecx, OFFSET __F159A697_pmc_parse@cpp
  00041	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 968  : #ifdef _M_IX86
; 969  :         int word_digit_count = 9;

  00046	c7 45 f0 09 00
	00 00		 mov	 DWORD PTR _word_digit_count$[ebp], 9

; 970  : #elif defined(_M_X64)
; 971  :         int word_digit_count = 19;
; 972  : #else
; 973  : #error unknown platform
; 974  : #endif
; 975  : 
; 976  :         ResourceHolderUINT root;

  0004d	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00050	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00055	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 977  : 
; 978  :         __UNIT_TYPE source_len = lstrlenW(source);

  0005c	8b f4		 mov	 esi, esp
  0005e	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  00061	50		 push	 eax
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  00068	3b f4		 cmp	 esi, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	89 45 d4	 mov	 DWORD PTR _source_len$[ebp], eax

; 979  : 
; 980  :         size_t int_part_buf_count = source_len + 1;

  00072	8b 4d d4	 mov	 ecx, DWORD PTR _source_len$[ebp]
  00075	83 c1 01	 add	 ecx, 1
  00078	89 4d d0	 mov	 DWORD PTR _int_part_buf_count$[ebp], ecx

; 981  :         wchar_t* int_part_buf = root.AllocateString(int_part_buf_count);

  0007b	8b 55 d0	 mov	 edx, DWORD PTR _int_part_buf_count$[ebp]
  0007e	52		 push	 edx
  0007f	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00082	e8 00 00 00 00	 call	 ?AllocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPA_WI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateString
  00087	89 45 cc	 mov	 DWORD PTR _int_part_buf$[ebp], eax

; 982  :         size_t frac_part_buf_count = source_len + 1;

  0008a	8b 45 d4	 mov	 eax, DWORD PTR _source_len$[ebp]
  0008d	83 c0 01	 add	 eax, 1
  00090	89 45 c8	 mov	 DWORD PTR _frac_part_buf_count$[ebp], eax

; 983  :         wchar_t* frac_part_buf = root.AllocateString(frac_part_buf_count);

  00093	8b 4d c8	 mov	 ecx, DWORD PTR _frac_part_buf_count$[ebp]
  00096	51		 push	 ecx
  00097	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  0009a	e8 00 00 00 00	 call	 ?AllocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPA_WI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateString
  0009f	89 45 c4	 mov	 DWORD PTR _frac_part_buf$[ebp], eax

; 984  :         bool result_parsing = ParseAsDecimalNumberString(source, number_styles, format_option, o_sign, int_part_buf, int_part_buf_count, frac_part_buf, frac_part_buf_count);

  000a2	8b 55 c8	 mov	 edx, DWORD PTR _frac_part_buf_count$[ebp]
  000a5	52		 push	 edx
  000a6	8b 45 c4	 mov	 eax, DWORD PTR _frac_part_buf$[ebp]
  000a9	50		 push	 eax
  000aa	8b 4d d0	 mov	 ecx, DWORD PTR _int_part_buf_count$[ebp]
  000ad	51		 push	 ecx
  000ae	8b 55 cc	 mov	 edx, DWORD PTR _int_part_buf$[ebp]
  000b1	52		 push	 edx
  000b2	8b 45 14	 mov	 eax, DWORD PTR _o_sign$[ebp]
  000b5	50		 push	 eax
  000b6	8b 4d 10	 mov	 ecx, DWORD PTR _format_option$[ebp]
  000b9	51		 push	 ecx
  000ba	8b 55 0c	 mov	 edx, DWORD PTR _number_styles$[ebp]
  000bd	52		 push	 edx
  000be	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 ?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPA_WI3I@Z ; Palmtree::Math::Core::Internal::ParseAsDecimalNumberString
  000c7	83 c4 20	 add	 esp, 32			; 00000020H
  000ca	85 c0		 test	 eax, eax
  000cc	74 09		 je	 SHORT $LN32@TryParseDN
  000ce	c6 85 2b ff ff
	ff 01		 mov	 BYTE PTR tv87[ebp], 1
  000d5	eb 07		 jmp	 SHORT $LN33@TryParseDN
$LN32@TryParseDN:
  000d7	c6 85 2b ff ff
	ff 00		 mov	 BYTE PTR tv87[ebp], 0
$LN33@TryParseDN:
  000de	8a 8d 2b ff ff
	ff		 mov	 cl, BYTE PTR tv87[ebp]
  000e4	88 4d c3	 mov	 BYTE PTR _result_parsing$[ebp], cl

; 985  :         root.CheckString(int_part_buf);

  000e7	8b 55 cc	 mov	 edx, DWORD PTR _int_part_buf$[ebp]
  000ea	52		 push	 edx
  000eb	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  000ee	e8 00 00 00 00	 call	 ?CheckString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPA_W@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckString

; 986  :         root.CheckString(frac_part_buf);

  000f3	8b 45 c4	 mov	 eax, DWORD PTR _frac_part_buf$[ebp]
  000f6	50		 push	 eax
  000f7	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  000fa	e8 00 00 00 00	 call	 ?CheckString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPA_W@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckString

; 987  :         if (!result_parsing)

  000ff	0f b6 4d c3	 movzx	 ecx, BYTE PTR _result_parsing$[ebp]
  00103	85 c9		 test	 ecx, ecx
  00105	75 4f		 jne	 SHORT $LN9@TryParseDN

; 988  :         {
; 989  :             *result = 0;

  00107	8b 55 1c	 mov	 edx, DWORD PTR _result$[ebp]
  0010a	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 990  :             if (number_styles & PMC_NUMBER_STYLE_ALLOW_EXCEPTION_THROWING)

  00110	8b 45 0c	 mov	 eax, DWORD PTR _number_styles$[ebp]
  00113	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  00118	74 1e		 je	 SHORT $LN10@TryParseDN

; 991  :                 return (PMC_STATUS_FORMAT_ERROR);

  0011a	c7 45 9c f9 ff
	ff ff		 mov	 DWORD PTR $T15[ebp], -7	; fffffff9H
  00121	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00128	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  0012b	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00130	8b 45 9c	 mov	 eax, DWORD PTR $T15[ebp]
  00133	e9 f8 04 00 00	 jmp	 $LN31@TryParseDN
$LN10@TryParseDN:

; 992  :             return (PMC_STATUS_OK);

  00138	c7 45 98 00 00
	00 00		 mov	 DWORD PTR $T14[ebp], 0
  0013f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00146	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00149	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0014e	8b 45 98	 mov	 eax, DWORD PTR $T14[ebp]
  00151	e9 da 04 00 00	 jmp	 $LN31@TryParseDN
$LN9@TryParseDN:

; 993  :         }
; 994  :         if (int_part_buf[0] == L'\0' && (frac_part_buf[0] == L'\0' || frac_part_buf[0] == L'.' && frac_part_buf[1] == L'\0'))

  00156	b9 02 00 00 00	 mov	 ecx, 2
  0015b	6b d1 00	 imul	 edx, ecx, 0
  0015e	8b 45 cc	 mov	 eax, DWORD PTR _int_part_buf$[ebp]
  00161	0f b7 0c 10	 movzx	 ecx, WORD PTR [eax+edx]
  00165	85 c9		 test	 ecx, ecx
  00167	0f 85 8a 00 00
	00		 jne	 $LN11@TryParseDN
  0016d	ba 02 00 00 00	 mov	 edx, 2
  00172	6b c2 00	 imul	 eax, edx, 0
  00175	8b 4d c4	 mov	 ecx, DWORD PTR _frac_part_buf$[ebp]
  00178	0f b7 14 01	 movzx	 edx, WORD PTR [ecx+eax]
  0017c	85 d2		 test	 edx, edx
  0017e	74 27		 je	 SHORT $LN12@TryParseDN
  00180	b8 02 00 00 00	 mov	 eax, 2
  00185	6b c8 00	 imul	 ecx, eax, 0
  00188	8b 55 c4	 mov	 edx, DWORD PTR _frac_part_buf$[ebp]
  0018b	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  0018f	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  00192	75 63		 jne	 SHORT $LN11@TryParseDN
  00194	b9 02 00 00 00	 mov	 ecx, 2
  00199	c1 e1 00	 shl	 ecx, 0
  0019c	8b 55 c4	 mov	 edx, DWORD PTR _frac_part_buf$[ebp]
  0019f	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  001a3	85 c0		 test	 eax, eax
  001a5	75 50		 jne	 SHORT $LN11@TryParseDN
$LN12@TryParseDN:

; 995  :         {
; 996  :             // 整数部と小数部がともに空ならばエラーとする
; 997  :             *result = 0;

  001a7	8b 4d 1c	 mov	 ecx, DWORD PTR _result$[ebp]
  001aa	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 998  :             if (number_styles & PMC_NUMBER_STYLE_ALLOW_EXCEPTION_THROWING)

  001b0	8b 55 0c	 mov	 edx, DWORD PTR _number_styles$[ebp]
  001b3	81 e2 00 00 00
	02		 and	 edx, 33554432		; 02000000H
  001b9	74 1e		 je	 SHORT $LN13@TryParseDN

; 999  :                 return (PMC_STATUS_FORMAT_ERROR);

  001bb	c7 45 94 f9 ff
	ff ff		 mov	 DWORD PTR $T13[ebp], -7	; fffffff9H
  001c2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001c9	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  001cc	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  001d1	8b 45 94	 mov	 eax, DWORD PTR $T13[ebp]
  001d4	e9 57 04 00 00	 jmp	 $LN31@TryParseDN
$LN13@TryParseDN:

; 1000 :             return (PMC_STATUS_OK);

  001d9	c7 45 90 00 00
	00 00		 mov	 DWORD PTR $T12[ebp], 0
  001e0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001e7	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  001ea	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  001ef	8b 45 90	 mov	 eax, DWORD PTR $T12[ebp]
  001f2	e9 39 04 00 00	 jmp	 $LN31@TryParseDN
$LN11@TryParseDN:

; 1001 :         }
; 1002 : 
; 1003 :         if (*o_sign < 0 && frac_part_buf[0] != L'\0')

  001f7	8b 45 14	 mov	 eax, DWORD PTR _o_sign$[ebp]
  001fa	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  001fd	85 c9		 test	 ecx, ecx
  001ff	7d 6d		 jge	 SHORT $LN14@TryParseDN
  00201	ba 02 00 00 00	 mov	 edx, 2
  00206	6b c2 00	 imul	 eax, edx, 0
  00209	8b 4d c4	 mov	 ecx, DWORD PTR _frac_part_buf$[ebp]
  0020c	0f b7 14 01	 movzx	 edx, WORD PTR [ecx+eax]
  00210	85 d2		 test	 edx, edx
  00212	74 5a		 je	 SHORT $LN14@TryParseDN

; 1004 :         {
; 1005 :             // 負の符号が含まれていて、かつ小数部が存在する場合はエラー (OverflowException) とする。(小数点のみや小数部が '0' の連続のみでも存在するうちに入る)
; 1006 :             // ※エラーの条件がそうなっている根拠は不明だが実際問題として uint.Parse などではそうなっているため、それに合わせる。
; 1007 : 
; 1008 :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_SIGNED_INTEGER) == 0)

  00214	8b 45 0c	 mov	 eax, DWORD PTR _number_styles$[ebp]
  00217	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  0021c	75 50		 jne	 SHORT $LN14@TryParseDN

; 1009 :             {
; 1010 :                 // 負数が許可されていない場合
; 1011 : 
; 1012 :                 *result = 0;

  0021e	8b 4d 1c	 mov	 ecx, DWORD PTR _result$[ebp]
  00221	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 1013 :                 if (number_styles & PMC_NUMBER_STYLE_ALLOW_EXCEPTION_THROWING)

  00227	8b 55 0c	 mov	 edx, DWORD PTR _number_styles$[ebp]
  0022a	81 e2 00 00 00
	02		 and	 edx, 33554432		; 02000000H
  00230	74 1e		 je	 SHORT $LN16@TryParseDN

; 1014 :                     return (PMC_STATUS_OVERFLOW);

  00232	c7 45 8c fc ff
	ff ff		 mov	 DWORD PTR $T11[ebp], -4	; fffffffcH
  00239	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00240	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00243	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00248	8b 45 8c	 mov	 eax, DWORD PTR $T11[ebp]
  0024b	e9 e0 03 00 00	 jmp	 $LN31@TryParseDN
$LN16@TryParseDN:

; 1015 :                 return (PMC_STATUS_OK);

  00250	c7 45 88 00 00
	00 00		 mov	 DWORD PTR $T10[ebp], 0
  00257	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0025e	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00261	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00266	8b 45 88	 mov	 eax, DWORD PTR $T10[ebp]
  00269	e9 c2 03 00 00	 jmp	 $LN31@TryParseDN
$LN14@TryParseDN:

; 1016 :             }
; 1017 :         }
; 1018 : 
; 1019 :         if (int_part_buf[0] == L'0')

  0026e	b8 02 00 00 00	 mov	 eax, 2
  00273	6b c8 00	 imul	 ecx, eax, 0
  00276	8b 55 cc	 mov	 edx, DWORD PTR _int_part_buf$[ebp]
  00279	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  0027d	83 f8 30	 cmp	 eax, 48			; 00000030H
  00280	75 4e		 jne	 SHORT $LN17@TryParseDN

; 1020 :         {
; 1021 :             // 整数部の先行する 0 を削除する
; 1022 :             wchar_t* s_ptr = int_part_buf;

  00282	8b 4d cc	 mov	 ecx, DWORD PTR _int_part_buf$[ebp]
  00285	89 4d bc	 mov	 DWORD PTR _s_ptr$17[ebp], ecx

; 1023 :             wchar_t* d_ptr = int_part_buf;

  00288	8b 55 cc	 mov	 edx, DWORD PTR _int_part_buf$[ebp]
  0028b	89 55 b8	 mov	 DWORD PTR _d_ptr$16[ebp], edx
$LN2@TryParseDN:

; 1024 :             while (*s_ptr == L'0')

  0028e	8b 45 bc	 mov	 eax, DWORD PTR _s_ptr$17[ebp]
  00291	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00294	83 f9 30	 cmp	 ecx, 48			; 00000030H
  00297	75 0b		 jne	 SHORT $LN6@TryParseDN

; 1025 :                 ++s_ptr;

  00299	8b 55 bc	 mov	 edx, DWORD PTR _s_ptr$17[ebp]
  0029c	83 c2 02	 add	 edx, 2
  0029f	89 55 bc	 mov	 DWORD PTR _s_ptr$17[ebp], edx
  002a2	eb ea		 jmp	 SHORT $LN2@TryParseDN
$LN6@TryParseDN:

; 1026 :             for (;;)
; 1027 :             {
; 1028 :                 *d_ptr = *s_ptr;

  002a4	8b 45 b8	 mov	 eax, DWORD PTR _d_ptr$16[ebp]
  002a7	8b 4d bc	 mov	 ecx, DWORD PTR _s_ptr$17[ebp]
  002aa	66 8b 11	 mov	 dx, WORD PTR [ecx]
  002ad	66 89 10	 mov	 WORD PTR [eax], dx

; 1029 :                 if (*s_ptr == L'\0')

  002b0	8b 45 bc	 mov	 eax, DWORD PTR _s_ptr$17[ebp]
  002b3	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  002b6	85 c9		 test	 ecx, ecx
  002b8	75 02		 jne	 SHORT $LN18@TryParseDN

; 1030 :                     break;

  002ba	eb 14		 jmp	 SHORT $LN17@TryParseDN
$LN18@TryParseDN:

; 1031 :                 ++s_ptr;

  002bc	8b 55 bc	 mov	 edx, DWORD PTR _s_ptr$17[ebp]
  002bf	83 c2 02	 add	 edx, 2
  002c2	89 55 bc	 mov	 DWORD PTR _s_ptr$17[ebp], edx

; 1032 :                 ++d_ptr;

  002c5	8b 45 b8	 mov	 eax, DWORD PTR _d_ptr$16[ebp]
  002c8	83 c0 02	 add	 eax, 2
  002cb	89 45 b8	 mov	 DWORD PTR _d_ptr$16[ebp], eax

; 1033 :             }

  002ce	eb d4		 jmp	 SHORT $LN6@TryParseDN
$LN17@TryParseDN:

; 1034 :         }
; 1035 : 
; 1036 :         // 小数部の末尾の 0 を削除する
; 1037 :         wchar_t* frac_ptr = frac_part_buf + lstrlenW(frac_part_buf);

  002d0	8b f4		 mov	 esi, esp
  002d2	8b 4d c4	 mov	 ecx, DWORD PTR _frac_part_buf$[ebp]
  002d5	51		 push	 ecx
  002d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  002dc	3b f4		 cmp	 esi, esp
  002de	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002e3	8b 55 c4	 mov	 edx, DWORD PTR _frac_part_buf$[ebp]
  002e6	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]
  002e9	89 45 b4	 mov	 DWORD PTR _frac_ptr$[ebp], eax
$LN7@TryParseDN:

; 1038 :         while (frac_ptr > frac_part_buf && frac_ptr[-1] == L'0')

  002ec	8b 4d b4	 mov	 ecx, DWORD PTR _frac_ptr$[ebp]
  002ef	3b 4d c4	 cmp	 ecx, DWORD PTR _frac_part_buf$[ebp]
  002f2	76 1f		 jbe	 SHORT $LN8@TryParseDN
  002f4	ba 02 00 00 00	 mov	 edx, 2
  002f9	6b c2 ff	 imul	 eax, edx, -1
  002fc	8b 4d b4	 mov	 ecx, DWORD PTR _frac_ptr$[ebp]
  002ff	0f b7 14 01	 movzx	 edx, WORD PTR [ecx+eax]
  00303	83 fa 30	 cmp	 edx, 48			; 00000030H
  00306	75 0b		 jne	 SHORT $LN8@TryParseDN

; 1039 :             --frac_ptr;

  00308	8b 45 b4	 mov	 eax, DWORD PTR _frac_ptr$[ebp]
  0030b	83 e8 02	 sub	 eax, 2
  0030e	89 45 b4	 mov	 DWORD PTR _frac_ptr$[ebp], eax
  00311	eb d9		 jmp	 SHORT $LN7@TryParseDN
$LN8@TryParseDN:

; 1040 :         *frac_ptr = L'\0';

  00313	33 c9		 xor	 ecx, ecx
  00315	8b 55 b4	 mov	 edx, DWORD PTR _frac_ptr$[ebp]
  00318	66 89 0a	 mov	 WORD PTR [edx], cx

; 1041 : 
; 1042 :         // 小数部が 0 ではない場合、エラーとする
; 1043 :         if (!(frac_part_buf[0] == L'\0' || frac_part_buf[0] == L'.' && frac_part_buf[1] == L'\0'))

  0031b	b8 02 00 00 00	 mov	 eax, 2
  00320	6b c8 00	 imul	 ecx, eax, 0
  00323	8b 55 c4	 mov	 edx, DWORD PTR _frac_part_buf$[ebp]
  00326	0f b7 04 0a	 movzx	 eax, WORD PTR [edx+ecx]
  0032a	85 c0		 test	 eax, eax
  0032c	74 76		 je	 SHORT $LN19@TryParseDN
  0032e	b9 02 00 00 00	 mov	 ecx, 2
  00333	6b d1 00	 imul	 edx, ecx, 0
  00336	8b 45 c4	 mov	 eax, DWORD PTR _frac_part_buf$[ebp]
  00339	0f b7 0c 10	 movzx	 ecx, WORD PTR [eax+edx]
  0033d	83 f9 2e	 cmp	 ecx, 46			; 0000002eH
  00340	75 13		 jne	 SHORT $LN20@TryParseDN
  00342	ba 02 00 00 00	 mov	 edx, 2
  00347	c1 e2 00	 shl	 edx, 0
  0034a	8b 45 c4	 mov	 eax, DWORD PTR _frac_part_buf$[ebp]
  0034d	0f b7 0c 10	 movzx	 ecx, WORD PTR [eax+edx]
  00351	85 c9		 test	 ecx, ecx
  00353	74 4f		 je	 SHORT $LN19@TryParseDN
$LN20@TryParseDN:

; 1044 :         {
; 1045 :             *result = 0;

  00355	8b 55 1c	 mov	 edx, DWORD PTR _result$[ebp]
  00358	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 1046 :             if (number_styles & PMC_NUMBER_STYLE_ALLOW_EXCEPTION_THROWING)

  0035e	8b 45 0c	 mov	 eax, DWORD PTR _number_styles$[ebp]
  00361	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  00366	74 1e		 je	 SHORT $LN21@TryParseDN

; 1047 :                 return (PMC_STATUS_OVERFLOW);

  00368	c7 45 84 fc ff
	ff ff		 mov	 DWORD PTR $T9[ebp], -4	; fffffffcH
  0036f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00376	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00379	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0037e	8b 45 84	 mov	 eax, DWORD PTR $T9[ebp]
  00381	e9 aa 02 00 00	 jmp	 $LN31@TryParseDN
$LN21@TryParseDN:

; 1048 :             return (PMC_STATUS_OK);

  00386	c7 45 80 00 00
	00 00		 mov	 DWORD PTR $T8[ebp], 0
  0038d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00394	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00397	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0039c	8b 45 80	 mov	 eax, DWORD PTR $T8[ebp]
  0039f	e9 8c 02 00 00	 jmp	 $LN31@TryParseDN
$LN19@TryParseDN:

; 1049 :         }
; 1050 : 
; 1051 :         if (int_part_buf[0] == L'\0')

  003a4	b9 02 00 00 00	 mov	 ecx, 2
  003a9	6b d1 00	 imul	 edx, ecx, 0
  003ac	8b 45 cc	 mov	 eax, DWORD PTR _int_part_buf$[ebp]
  003af	0f b7 0c 10	 movzx	 ecx, WORD PTR [eax+edx]
  003b3	85 c9		 test	 ecx, ecx
  003b5	75 2b		 jne	 SHORT $LN22@TryParseDN

; 1052 :         {
; 1053 :             // 整数部が空である場合
; 1054 : 
; 1055 :             // 符号を 0 に 修正する
; 1056 :             *o_sign = 0;

  003b7	8b 55 14	 mov	 edx, DWORD PTR _o_sign$[ebp]
  003ba	c6 02 00	 mov	 BYTE PTR [edx], 0

; 1057 : 
; 1058 :             // 整数部に 0 を設定する
; 1059 :             int_part_buf[0] = L'0';

  003bd	b8 02 00 00 00	 mov	 eax, 2
  003c2	6b c8 00	 imul	 ecx, eax, 0
  003c5	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  003ca	8b 45 cc	 mov	 eax, DWORD PTR _int_part_buf$[ebp]
  003cd	66 89 14 08	 mov	 WORD PTR [eax+ecx], dx

; 1060 :             int_part_buf[1] = L'\0';

  003d1	b9 02 00 00 00	 mov	 ecx, 2
  003d6	c1 e1 00	 shl	 ecx, 0
  003d9	33 d2		 xor	 edx, edx
  003db	8b 45 cc	 mov	 eax, DWORD PTR _int_part_buf$[ebp]
  003de	66 89 14 08	 mov	 WORD PTR [eax+ecx], dx
$LN22@TryParseDN:

; 1061 :         }
; 1062 : 
; 1063 :         if (*o_sign < 0)

  003e2	8b 4d 14	 mov	 ecx, DWORD PTR _o_sign$[ebp]
  003e5	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  003e8	85 d2		 test	 edx, edx
  003ea	7d 66		 jge	 SHORT $LN23@TryParseDN

; 1064 :         {
; 1065 :             // 数値が負である場合
; 1066 : 
; 1067 :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_SIGNED_INTEGER) == 0)

  003ec	8b 45 0c	 mov	 eax, DWORD PTR _number_styles$[ebp]
  003ef	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  003f4	75 5c		 jne	 SHORT $LN23@TryParseDN

; 1068 :             {
; 1069 :                 // 負数が許可されていない場合
; 1070 : 
; 1071 :                 *result = 0;

  003f6	8b 4d 1c	 mov	 ecx, DWORD PTR _result$[ebp]
  003f9	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 1072 :                 if (number_styles & PMC_NUMBER_STYLE_ALLOW_EXCEPTION_THROWING)

  003ff	8b 55 0c	 mov	 edx, DWORD PTR _number_styles$[ebp]
  00402	81 e2 00 00 00
	02		 and	 edx, 33554432		; 02000000H
  00408	74 24		 je	 SHORT $LN25@TryParseDN

; 1073 :                     return (PMC_STATUS_OVERFLOW);

  0040a	c7 85 7c ff ff
	ff fc ff ff ff	 mov	 DWORD PTR $T7[ebp], -4	; fffffffcH
  00414	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0041b	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  0041e	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00423	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR $T7[ebp]
  00429	e9 02 02 00 00	 jmp	 $LN31@TryParseDN
$LN25@TryParseDN:

; 1074 :                 return (PMC_STATUS_OK);

  0042e	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T6[ebp], 0
  00438	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0043f	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00442	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00447	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR $T6[ebp]
  0044d	e9 de 01 00 00	 jmp	 $LN31@TryParseDN
$LN23@TryParseDN:

; 1075 :             }
; 1076 :         }
; 1077 : 
; 1078 :         // 小数部は捨てる
; 1079 :         root.DeallocateString(frac_part_buf);

  00452	8b 45 c4	 mov	 eax, DWORD PTR _frac_part_buf$[ebp]
  00455	50		 push	 eax
  00456	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00459	e8 00 00 00 00	 call	 ?DeallocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPA_W@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateString

; 1080 : 
; 1081 :         // 整数部を 10^word_digit_count を基数としたバイト列に変換する
; 1082 :         __UNIT_TYPE* bin_buf = root.AllocateBlock(_DIVIDE_CEILING_SIZE(lstrlenW(int_part_buf), word_digit_count) * __UNIT_TYPE_BIT_COUNT);

  0045e	8b 4d f0	 mov	 ecx, DWORD PTR _word_digit_count$[ebp]
  00461	51		 push	 ecx
  00462	8b f4		 mov	 esi, esp
  00464	8b 55 cc	 mov	 edx, DWORD PTR _int_part_buf$[ebp]
  00467	52		 push	 edx
  00468	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  0046e	3b f4		 cmp	 esi, esp
  00470	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00475	50		 push	 eax
  00476	e8 00 00 00 00	 call	 __DIVIDE_CEILING_SIZE
  0047b	83 c4 08	 add	 esp, 8
  0047e	c1 e0 05	 shl	 eax, 5
  00481	50		 push	 eax
  00482	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00485	e8 00 00 00 00	 call	 ?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAII@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
  0048a	89 45 b0	 mov	 DWORD PTR _bin_buf$[ebp], eax

; 1083 :         __UNIT_TYPE bin_buf_count;
; 1084 :         BuildBinaryFromDecimalString(int_part_buf, bin_buf, &bin_buf_count);

  0048d	8d 45 a8	 lea	 eax, DWORD PTR _bin_buf_count$[ebp]
  00490	50		 push	 eax
  00491	8b 4d b0	 mov	 ecx, DWORD PTR _bin_buf$[ebp]
  00494	51		 push	 ecx
  00495	8b 55 cc	 mov	 edx, DWORD PTR _int_part_buf$[ebp]
  00498	52		 push	 edx
  00499	e8 00 00 00 00	 call	 ?BuildBinaryFromDecimalString@Internal@Core@Math@Palmtree@@YAXPA_WPAI1@Z ; Palmtree::Math::Core::Internal::BuildBinaryFromDecimalString
  0049e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1085 :         root.CheckBlock(bin_buf);

  004a1	8b 45 b0	 mov	 eax, DWORD PTR _bin_buf$[ebp]
  004a4	50		 push	 eax
  004a5	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  004a8	e8 00 00 00 00	 call	 ?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock

; 1086 :         root.DeallocateString(int_part_buf);

  004ad	8b 4d cc	 mov	 ecx, DWORD PTR _int_part_buf$[ebp]
  004b0	51		 push	 ecx
  004b1	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  004b4	e8 00 00 00 00	 call	 ?DeallocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPA_W@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateString

; 1087 : 
; 1088 :         // 10^word_digit_count を基数としたバイト列を 10 を基数としたバイト列に変換する
; 1089 :         __UNIT_TYPE o_bit_count = bin_buf_count * __UNIT_TYPE_BIT_COUNT;

  004b9	8b 55 a8	 mov	 edx, DWORD PTR _bin_buf_count$[ebp]
  004bc	c1 e2 05	 shl	 edx, 5
  004bf	89 55 a0	 mov	 DWORD PTR _o_bit_count$[ebp], edx

; 1090 :         *o_abs = root.AllocateNumber(o_bit_count);

  004c2	8b 45 a0	 mov	 eax, DWORD PTR _o_bit_count$[ebp]
  004c5	50		 push	 eax
  004c6	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  004c9	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  004ce	8b 4d 18	 mov	 ecx, DWORD PTR _o_abs$[ebp]
  004d1	89 01		 mov	 DWORD PTR [ecx], eax

; 1091 :         ConvertCardinalNumber(bin_buf, bin_buf_count, (*o_abs)->BLOCK);

  004d3	8b 55 18	 mov	 edx, DWORD PTR _o_abs$[ebp]
  004d6	8b 02		 mov	 eax, DWORD PTR [edx]
  004d8	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  004db	51		 push	 ecx
  004dc	8b 55 a8	 mov	 edx, DWORD PTR _bin_buf_count$[ebp]
  004df	52		 push	 edx
  004e0	8b 45 b0	 mov	 eax, DWORD PTR _bin_buf$[ebp]
  004e3	50		 push	 eax
  004e4	e8 00 00 00 00	 call	 ?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPAII0@Z ; Palmtree::Math::Core::Internal::ConvertCardinalNumber
  004e9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1092 :         root.CheckNumber(*o_abs);

  004ec	8b 4d 18	 mov	 ecx, DWORD PTR _o_abs$[ebp]
  004ef	8b 11		 mov	 edx, DWORD PTR [ecx]
  004f1	52		 push	 edx
  004f2	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  004f5	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 1093 :         root.DeallocateBlock(bin_buf);

  004fa	8b 45 b0	 mov	 eax, DWORD PTR _bin_buf$[ebp]
  004fd	50		 push	 eax
  004fe	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00501	e8 00 00 00 00	 call	 ?DeallocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateBlock

; 1094 :         CommitNumber(*o_abs);

  00506	8b 4d 18	 mov	 ecx, DWORD PTR _o_abs$[ebp]
  00509	8b 11		 mov	 edx, DWORD PTR [ecx]
  0050b	52		 push	 edx
  0050c	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  00511	83 c4 04	 add	 esp, 4

; 1095 :         if ((*o_abs)->IS_ZERO)

  00514	8b 45 18	 mov	 eax, DWORD PTR _o_abs$[ebp]
  00517	8b 08		 mov	 ecx, DWORD PTR [eax]
  00519	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0051c	83 e2 01	 and	 edx, 1
  0051f	74 19		 je	 SHORT $LN26@TryParseDN

; 1096 :         {
; 1097 :             root.DeallocateNumber(*o_abs);

  00521	8b 45 18	 mov	 eax, DWORD PTR _o_abs$[ebp]
  00524	8b 08		 mov	 ecx, DWORD PTR [eax]
  00526	51		 push	 ecx
  00527	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  0052a	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 1098 :             *o_abs = &number_zero;

  0052f	8b 55 18	 mov	 edx, DWORD PTR _o_abs$[ebp]
  00532	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero

; 1099 :         }
; 1100 :         else

  00538	eb 0e		 jmp	 SHORT $LN27@TryParseDN
$LN26@TryParseDN:

; 1101 :             root.UnlinkNumber(*o_abs);

  0053a	8b 45 18	 mov	 eax, DWORD PTR _o_abs$[ebp]
  0053d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0053f	51		 push	 ecx
  00540	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00543	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN27@TryParseDN:

; 1102 : #ifdef _DEBUG
; 1103 :         if (*o_sign != 0 && *o_sign != 1 && *o_sign != -1)

  00548	8b 55 14	 mov	 edx, DWORD PTR _o_sign$[ebp]
  0054b	0f be 02	 movsx	 eax, BYTE PTR [edx]
  0054e	85 c0		 test	 eax, eax
  00550	74 3c		 je	 SHORT $LN28@TryParseDN
  00552	8b 4d 14	 mov	 ecx, DWORD PTR _o_sign$[ebp]
  00555	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00558	83 fa 01	 cmp	 edx, 1
  0055b	74 31		 je	 SHORT $LN28@TryParseDN
  0055d	8b 45 14	 mov	 eax, DWORD PTR _o_sign$[ebp]
  00560	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00563	83 f9 ff	 cmp	 ecx, -1
  00566	74 26		 je	 SHORT $LN28@TryParseDN

; 1104 :             throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_parse.cpp;TryParseDN;1");

  00568	68 00 00 00 00	 push	 OFFSET $SG118525
  0056d	68 00 00 00 00	 push	 OFFSET $SG118526
  00572	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00578	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  0057d	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00582	8d 95 60 ff ff
	ff		 lea	 edx, DWORD PTR $T5[ebp]
  00588	52		 push	 edx
  00589	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN28@TryParseDN:

; 1105 :         if (*o_sign == 0 && !(*o_abs)->IS_ZERO)

  0058e	8b 45 14	 mov	 eax, DWORD PTR _o_sign$[ebp]
  00591	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00594	85 c9		 test	 ecx, ecx
  00596	75 33		 jne	 SHORT $LN29@TryParseDN
  00598	8b 55 18	 mov	 edx, DWORD PTR _o_abs$[ebp]
  0059b	8b 02		 mov	 eax, DWORD PTR [edx]
  0059d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  005a0	83 e1 01	 and	 ecx, 1
  005a3	75 26		 jne	 SHORT $LN29@TryParseDN

; 1106 :             throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_parse.cpp;TryParseDN;2");

  005a5	68 00 00 00 00	 push	 OFFSET $SG118529
  005aa	68 00 00 00 00	 push	 OFFSET $SG118530
  005af	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  005b5	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  005ba	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  005bf	8d 95 48 ff ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  005c5	52		 push	 edx
  005c6	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN29@TryParseDN:

; 1107 :         if (*o_sign != 0 && (*o_abs)->IS_ZERO)

  005cb	8b 45 14	 mov	 eax, DWORD PTR _o_sign$[ebp]
  005ce	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  005d1	85 c9		 test	 ecx, ecx
  005d3	74 33		 je	 SHORT $LN30@TryParseDN
  005d5	8b 55 18	 mov	 edx, DWORD PTR _o_abs$[ebp]
  005d8	8b 02		 mov	 eax, DWORD PTR [edx]
  005da	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  005dd	83 e1 01	 and	 ecx, 1
  005e0	74 26		 je	 SHORT $LN30@TryParseDN

; 1108 :             throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_parse.cpp;TryParseDN;3");

  005e2	68 00 00 00 00	 push	 OFFSET $SG118533
  005e7	68 00 00 00 00	 push	 OFFSET $SG118534
  005ec	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  005f2	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  005f7	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  005fc	8d 95 30 ff ff
	ff		 lea	 edx, DWORD PTR $T3[ebp]
  00602	52		 push	 edx
  00603	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN30@TryParseDN:

; 1109 : #endif
; 1110 :         *result = 1;

  00608	8b 45 1c	 mov	 eax, DWORD PTR _result$[ebp]
  0060b	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1

; 1111 :         return (PMC_STATUS_OK);

  00611	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0
  0061b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00622	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00625	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0062a	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
$LN31@TryParseDN:

; 1112 :     }

  00630	52		 push	 edx
  00631	8b cd		 mov	 ecx, ebp
  00633	50		 push	 eax
  00634	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN39@TryParseDN
  0063a	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0063f	58		 pop	 eax
  00640	5a		 pop	 edx
  00641	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00644	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0064b	59		 pop	 ecx
  0064c	5f		 pop	 edi
  0064d	5e		 pop	 esi
  0064e	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00654	3b ec		 cmp	 ebp, esp
  00656	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0065b	8b e5		 mov	 esp, ebp
  0065d	5d		 pop	 ebp
  0065e	c3		 ret	 0
  0065f	90		 npad	 1
$LN39@TryParseDN:
  00660	02 00 00 00	 DD	 2
  00664	00 00 00 00	 DD	 $LN38@TryParseDN
$LN38@TryParseDN:
  00668	dc ff ff ff	 DD	 -36			; ffffffdcH
  0066c	10 00 00 00	 DD	 16			; 00000010H
  00670	00 00 00 00	 DD	 $LN35@TryParseDN
  00674	a8 ff ff ff	 DD	 -88			; ffffffa8H
  00678	04 00 00 00	 DD	 4
  0067c	00 00 00 00	 DD	 $LN36@TryParseDN
$LN36@TryParseDN:
  00680	62		 DB	 98			; 00000062H
  00681	69		 DB	 105			; 00000069H
  00682	6e		 DB	 110			; 0000006eH
  00683	5f		 DB	 95			; 0000005fH
  00684	62		 DB	 98			; 00000062H
  00685	75		 DB	 117			; 00000075H
  00686	66		 DB	 102			; 00000066H
  00687	5f		 DB	 95			; 0000005fH
  00688	63		 DB	 99			; 00000063H
  00689	6f		 DB	 111			; 0000006fH
  0068a	75		 DB	 117			; 00000075H
  0068b	6e		 DB	 110			; 0000006eH
  0068c	74		 DB	 116			; 00000074H
  0068d	00		 DB	 0
$LN35@TryParseDN:
  0068e	72		 DB	 114			; 00000072H
  0068f	6f		 DB	 111			; 0000006fH
  00690	6f		 DB	 111			; 0000006fH
  00691	74		 DB	 116			; 00000074H
  00692	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?TryParseDN@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?TryParseDN@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 28 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-216]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?TryParseDN@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?TryParseDN@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z ENDP ; Palmtree::Math::Core::Internal::TryParseDN
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
_TEXT	SEGMENT
tv84 = -52						; size = 4
_w_tail$2 = -48						; size = 4
_work_buf_count$ = -44					; size = 4
_work_buf$ = -40					; size = 4
_root$ = -32						; size = 16
__$EHRec$ = -12						; size = 12
_in_buf$ = 8						; size = 4
_in_buf_count$ = 12					; size = 4
_out_buf$ = 16						; size = 4
?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPAII0@Z PROC ; Palmtree::Math::Core::Internal::ConvertCardinalNumber

; 948  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPAII0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00019	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c5		 xor	 eax, ebp
  0002c	50		 push	 eax
  0002d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00030	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00036	b9 00 00 00 00	 mov	 ecx, OFFSET __F159A697_pmc_parse@cpp
  0003b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 949  :         ResourceHolderUINT root;

  00040	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00043	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 950  :         __UNIT_TYPE* work_buf = root.AllocateBlock(__UNIT_TYPE_BIT_COUNT * (in_buf_count + 1));

  0004f	8b 45 0c	 mov	 eax, DWORD PTR _in_buf_count$[ebp]
  00052	83 c0 01	 add	 eax, 1
  00055	c1 e0 05	 shl	 eax, 5
  00058	50		 push	 eax
  00059	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  0005c	e8 00 00 00 00	 call	 ?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAII@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
  00061	89 45 d8	 mov	 DWORD PTR _work_buf$[ebp], eax

; 951  :         __UNIT_TYPE work_buf_count = 1;

  00064	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR _work_buf_count$[ebp], 1

; 952  :         work_buf[0] = in_buf[0];

  0006b	b9 04 00 00 00	 mov	 ecx, 4
  00070	6b d1 00	 imul	 edx, ecx, 0
  00073	b8 04 00 00 00	 mov	 eax, 4
  00078	6b c8 00	 imul	 ecx, eax, 0
  0007b	8b 45 d8	 mov	 eax, DWORD PTR _work_buf$[ebp]
  0007e	8b 75 08	 mov	 esi, DWORD PTR _in_buf$[ebp]
  00081	8b 14 16	 mov	 edx, DWORD PTR [esi+edx]
  00084	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 953  :         ++in_buf;

  00087	8b 45 08	 mov	 eax, DWORD PTR _in_buf$[ebp]
  0008a	83 c0 04	 add	 eax, 4
  0008d	89 45 08	 mov	 DWORD PTR _in_buf$[ebp], eax

; 954  :         --in_buf_count;

  00090	8b 4d 0c	 mov	 ecx, DWORD PTR _in_buf_count$[ebp]
  00093	83 e9 01	 sub	 ecx, 1
  00096	89 4d 0c	 mov	 DWORD PTR _in_buf_count$[ebp], ecx
$LN2@ConvertCar:

; 955  :         while (in_buf_count > 0)

  00099	83 7d 0c 00	 cmp	 DWORD PTR _in_buf_count$[ebp], 0
  0009d	76 49		 jbe	 SHORT $LN3@ConvertCar

; 956  :         {
; 957  :             __UNIT_TYPE* w_tail = (*fp_MultiplyAndAdd)(work_buf, work_buf_count, *in_buf);

  0009f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?fp_MultiplyAndAdd@Internal@Core@Math@Palmtree@@3P6APAIPAIII@ZA
  000a5	89 55 cc	 mov	 DWORD PTR tv84[ebp], edx
  000a8	8b f4		 mov	 esi, esp
  000aa	8b 45 08	 mov	 eax, DWORD PTR _in_buf$[ebp]
  000ad	8b 08		 mov	 ecx, DWORD PTR [eax]
  000af	51		 push	 ecx
  000b0	8b 55 d4	 mov	 edx, DWORD PTR _work_buf_count$[ebp]
  000b3	52		 push	 edx
  000b4	8b 45 d8	 mov	 eax, DWORD PTR _work_buf$[ebp]
  000b7	50		 push	 eax
  000b8	ff 55 cc	 call	 DWORD PTR tv84[ebp]
  000bb	83 c4 0c	 add	 esp, 12			; 0000000cH
  000be	3b f4		 cmp	 esi, esp
  000c0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c5	89 45 d0	 mov	 DWORD PTR _w_tail$2[ebp], eax

; 958  :             work_buf_count = w_tail - work_buf;

  000c8	8b 4d d0	 mov	 ecx, DWORD PTR _w_tail$2[ebp]
  000cb	2b 4d d8	 sub	 ecx, DWORD PTR _work_buf$[ebp]
  000ce	c1 f9 02	 sar	 ecx, 2
  000d1	89 4d d4	 mov	 DWORD PTR _work_buf_count$[ebp], ecx

; 959  :             ++in_buf;

  000d4	8b 55 08	 mov	 edx, DWORD PTR _in_buf$[ebp]
  000d7	83 c2 04	 add	 edx, 4
  000da	89 55 08	 mov	 DWORD PTR _in_buf$[ebp], edx

; 960  :             --in_buf_count;

  000dd	8b 45 0c	 mov	 eax, DWORD PTR _in_buf_count$[ebp]
  000e0	83 e8 01	 sub	 eax, 1
  000e3	89 45 0c	 mov	 DWORD PTR _in_buf_count$[ebp], eax

; 961  :         }

  000e6	eb b1		 jmp	 SHORT $LN2@ConvertCar
$LN3@ConvertCar:

; 962  :         root.CheckBlock(work_buf);

  000e8	8b 4d d8	 mov	 ecx, DWORD PTR _work_buf$[ebp]
  000eb	51		 push	 ecx
  000ec	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  000ef	e8 00 00 00 00	 call	 ?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAI@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock

; 963  :         _COPY_MEMORY_UNIT(out_buf, work_buf, work_buf_count);

  000f4	8b 55 d4	 mov	 edx, DWORD PTR _work_buf_count$[ebp]
  000f7	52		 push	 edx
  000f8	8b 45 d8	 mov	 eax, DWORD PTR _work_buf$[ebp]
  000fb	50		 push	 eax
  000fc	8b 4d 10	 mov	 ecx, DWORD PTR _out_buf$[ebp]
  000ff	51		 push	 ecx
  00100	e8 00 00 00 00	 call	 __COPY_MEMORY_UNIT
  00105	83 c4 0c	 add	 esp, 12			; 0000000cH

; 964  :     }

  00108	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0010f	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00112	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00117	52		 push	 edx
  00118	8b cd		 mov	 ecx, ebp
  0011a	50		 push	 eax
  0011b	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@ConvertCar
  00121	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00126	58		 pop	 eax
  00127	5a		 pop	 edx
  00128	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0012b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00132	59		 pop	 ecx
  00133	5f		 pop	 edi
  00134	5e		 pop	 esi
  00135	83 c4 34	 add	 esp, 52			; 00000034H
  00138	3b ec		 cmp	 ebp, esp
  0013a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013f	8b e5		 mov	 esp, ebp
  00141	5d		 pop	 ebp
  00142	c3		 ret	 0
  00143	90		 npad	 1
$LN9@ConvertCar:
  00144	01 00 00 00	 DD	 1
  00148	00 00 00 00	 DD	 $LN8@ConvertCar
$LN8@ConvertCar:
  0014c	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00150	10 00 00 00	 DD	 16			; 00000010H
  00154	00 00 00 00	 DD	 $LN6@ConvertCar
$LN6@ConvertCar:
  00158	72		 DB	 114			; 00000072H
  00159	6f		 DB	 111			; 0000006fH
  0015a	6f		 DB	 111			; 0000006fH
  0015b	74		 DB	 116			; 00000074H
  0015c	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPAII0@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPAII0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPAII0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPAII0@Z ENDP ; Palmtree::Math::Core::Internal::ConvertCardinalNumber
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
_TEXT	SEGMENT
_count$ = -8						; size = 4
_k$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_x$ = 16						; size = 4
?MultiplyAndAdd_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAPAIPAIII@Z PROC ; Palmtree::Math::Core::Internal::MultiplyAndAdd_using_ADCX_MULX

; 805  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	b9 00 00 00 00	 mov	 ecx, OFFSET __F159A697_pmc_parse@cpp
  00019	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 806  :         __UNIT_TYPE k = x;

  0001e	8b 45 10	 mov	 eax, DWORD PTR _x$[ebp]
  00021	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 807  :         __UNIT_TYPE count = u_count >> 5;

  00024	8b 4d 0c	 mov	 ecx, DWORD PTR _u_count$[ebp]
  00027	c1 e9 05	 shr	 ecx, 5
  0002a	89 4d f8	 mov	 DWORD PTR _count$[ebp], ecx
$LN2@MultiplyAn:

; 808  :         while (count > 0)

  0002d	83 7d f8 00	 cmp	 DWORD PTR _count$[ebp], 0
  00031	0f 86 76 05 00
	00		 jbe	 $LN3@MultiplyAn

; 809  :         {
; 810  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

  00037	ba 04 00 00 00	 mov	 edx, 4
  0003c	6b c2 00	 imul	 eax, edx, 0
  0003f	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  00042	50		 push	 eax
  00043	b9 04 00 00 00	 mov	 ecx, 4
  00048	6b d1 00	 imul	 edx, ecx, 0
  0004b	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  0004e	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00051	51		 push	 ecx
  00052	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00055	52		 push	 edx
  00056	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005e	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 811  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

  00061	b8 04 00 00 00	 mov	 eax, 4
  00066	c1 e0 00	 shl	 eax, 0
  00069	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  0006c	50		 push	 eax
  0006d	b9 04 00 00 00	 mov	 ecx, 4
  00072	c1 e1 00	 shl	 ecx, 0
  00075	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  00078	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0007b	50		 push	 eax
  0007c	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  0007f	51		 push	 ecx
  00080	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00085	83 c4 0c	 add	 esp, 12			; 0000000cH
  00088	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 812  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[2], &u_buf[2]);

  0008b	ba 04 00 00 00	 mov	 edx, 4
  00090	d1 e2		 shl	 edx, 1
  00092	03 55 08	 add	 edx, DWORD PTR _u_buf$[ebp]
  00095	52		 push	 edx
  00096	b8 04 00 00 00	 mov	 eax, 4
  0009b	d1 e0		 shl	 eax, 1
  0009d	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  000a0	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  000a3	52		 push	 edx
  000a4	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  000a7	50		 push	 eax
  000a8	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  000ad	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b0	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 813  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[3], &u_buf[3]);

  000b3	b9 04 00 00 00	 mov	 ecx, 4
  000b8	6b d1 03	 imul	 edx, ecx, 3
  000bb	03 55 08	 add	 edx, DWORD PTR _u_buf$[ebp]
  000be	52		 push	 edx
  000bf	b8 04 00 00 00	 mov	 eax, 4
  000c4	6b c8 03	 imul	 ecx, eax, 3
  000c7	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  000ca	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  000cd	50		 push	 eax
  000ce	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  000d1	51		 push	 ecx
  000d2	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  000d7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000da	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 814  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[4], &u_buf[4]);

  000dd	ba 04 00 00 00	 mov	 edx, 4
  000e2	c1 e2 02	 shl	 edx, 2
  000e5	03 55 08	 add	 edx, DWORD PTR _u_buf$[ebp]
  000e8	52		 push	 edx
  000e9	b8 04 00 00 00	 mov	 eax, 4
  000ee	c1 e0 02	 shl	 eax, 2
  000f1	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  000f4	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  000f7	52		 push	 edx
  000f8	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  000fb	50		 push	 eax
  000fc	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00101	83 c4 0c	 add	 esp, 12			; 0000000cH
  00104	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 815  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[5], &u_buf[5]);

  00107	b9 04 00 00 00	 mov	 ecx, 4
  0010c	6b d1 05	 imul	 edx, ecx, 5
  0010f	03 55 08	 add	 edx, DWORD PTR _u_buf$[ebp]
  00112	52		 push	 edx
  00113	b8 04 00 00 00	 mov	 eax, 4
  00118	6b c8 05	 imul	 ecx, eax, 5
  0011b	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  0011e	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00121	50		 push	 eax
  00122	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  00125	51		 push	 ecx
  00126	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  0012b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0012e	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 816  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[6], &u_buf[6]);

  00131	ba 04 00 00 00	 mov	 edx, 4
  00136	6b c2 06	 imul	 eax, edx, 6
  00139	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  0013c	50		 push	 eax
  0013d	b9 04 00 00 00	 mov	 ecx, 4
  00142	6b d1 06	 imul	 edx, ecx, 6
  00145	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  00148	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0014b	51		 push	 ecx
  0014c	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  0014f	52		 push	 edx
  00150	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00155	83 c4 0c	 add	 esp, 12			; 0000000cH
  00158	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 817  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[7], &u_buf[7]);

  0015b	b8 04 00 00 00	 mov	 eax, 4
  00160	6b c8 07	 imul	 ecx, eax, 7
  00163	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  00166	51		 push	 ecx
  00167	ba 04 00 00 00	 mov	 edx, 4
  0016c	6b c2 07	 imul	 eax, edx, 7
  0016f	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  00172	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00175	52		 push	 edx
  00176	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  00179	50		 push	 eax
  0017a	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  0017f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00182	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 818  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[8], &u_buf[8]);

  00185	b9 04 00 00 00	 mov	 ecx, 4
  0018a	c1 e1 03	 shl	 ecx, 3
  0018d	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  00190	51		 push	 ecx
  00191	ba 04 00 00 00	 mov	 edx, 4
  00196	c1 e2 03	 shl	 edx, 3
  00199	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  0019c	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0019f	51		 push	 ecx
  001a0	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  001a3	52		 push	 edx
  001a4	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  001a9	83 c4 0c	 add	 esp, 12			; 0000000cH
  001ac	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 819  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[9], &u_buf[9]);

  001af	b8 04 00 00 00	 mov	 eax, 4
  001b4	6b c8 09	 imul	 ecx, eax, 9
  001b7	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  001ba	51		 push	 ecx
  001bb	ba 04 00 00 00	 mov	 edx, 4
  001c0	6b c2 09	 imul	 eax, edx, 9
  001c3	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  001c6	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  001c9	52		 push	 edx
  001ca	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  001cd	50		 push	 eax
  001ce	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  001d3	83 c4 0c	 add	 esp, 12			; 0000000cH
  001d6	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 820  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[10], &u_buf[10]);

  001d9	b9 04 00 00 00	 mov	 ecx, 4
  001de	6b d1 0a	 imul	 edx, ecx, 10
  001e1	03 55 08	 add	 edx, DWORD PTR _u_buf$[ebp]
  001e4	52		 push	 edx
  001e5	b8 04 00 00 00	 mov	 eax, 4
  001ea	6b c8 0a	 imul	 ecx, eax, 10
  001ed	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  001f0	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  001f3	50		 push	 eax
  001f4	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  001f7	51		 push	 ecx
  001f8	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  001fd	83 c4 0c	 add	 esp, 12			; 0000000cH
  00200	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 821  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[11], &u_buf[11]);

  00203	ba 04 00 00 00	 mov	 edx, 4
  00208	6b c2 0b	 imul	 eax, edx, 11
  0020b	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  0020e	50		 push	 eax
  0020f	b9 04 00 00 00	 mov	 ecx, 4
  00214	6b d1 0b	 imul	 edx, ecx, 11
  00217	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  0021a	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0021d	51		 push	 ecx
  0021e	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00221	52		 push	 edx
  00222	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00227	83 c4 0c	 add	 esp, 12			; 0000000cH
  0022a	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 822  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[12], &u_buf[12]);

  0022d	b8 04 00 00 00	 mov	 eax, 4
  00232	6b c8 0c	 imul	 ecx, eax, 12
  00235	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  00238	51		 push	 ecx
  00239	ba 04 00 00 00	 mov	 edx, 4
  0023e	6b c2 0c	 imul	 eax, edx, 12
  00241	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  00244	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00247	52		 push	 edx
  00248	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  0024b	50		 push	 eax
  0024c	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00251	83 c4 0c	 add	 esp, 12			; 0000000cH
  00254	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 823  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[13], &u_buf[13]);

  00257	b9 04 00 00 00	 mov	 ecx, 4
  0025c	6b d1 0d	 imul	 edx, ecx, 13
  0025f	03 55 08	 add	 edx, DWORD PTR _u_buf$[ebp]
  00262	52		 push	 edx
  00263	b8 04 00 00 00	 mov	 eax, 4
  00268	6b c8 0d	 imul	 ecx, eax, 13
  0026b	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  0026e	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00271	50		 push	 eax
  00272	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  00275	51		 push	 ecx
  00276	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  0027b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0027e	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 824  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[14], &u_buf[14]);

  00281	ba 04 00 00 00	 mov	 edx, 4
  00286	6b c2 0e	 imul	 eax, edx, 14
  00289	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  0028c	50		 push	 eax
  0028d	b9 04 00 00 00	 mov	 ecx, 4
  00292	6b d1 0e	 imul	 edx, ecx, 14
  00295	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  00298	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0029b	51		 push	 ecx
  0029c	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  0029f	52		 push	 edx
  002a0	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  002a5	83 c4 0c	 add	 esp, 12			; 0000000cH
  002a8	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 825  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[15], &u_buf[15]);

  002ab	b8 04 00 00 00	 mov	 eax, 4
  002b0	6b c8 0f	 imul	 ecx, eax, 15
  002b3	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  002b6	51		 push	 ecx
  002b7	ba 04 00 00 00	 mov	 edx, 4
  002bc	6b c2 0f	 imul	 eax, edx, 15
  002bf	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  002c2	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  002c5	52		 push	 edx
  002c6	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  002c9	50		 push	 eax
  002ca	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  002cf	83 c4 0c	 add	 esp, 12			; 0000000cH
  002d2	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 826  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[16], &u_buf[16]);

  002d5	b9 04 00 00 00	 mov	 ecx, 4
  002da	c1 e1 04	 shl	 ecx, 4
  002dd	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  002e0	51		 push	 ecx
  002e1	ba 04 00 00 00	 mov	 edx, 4
  002e6	c1 e2 04	 shl	 edx, 4
  002e9	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  002ec	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  002ef	51		 push	 ecx
  002f0	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  002f3	52		 push	 edx
  002f4	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  002f9	83 c4 0c	 add	 esp, 12			; 0000000cH
  002fc	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 827  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[17], &u_buf[17]);

  002ff	b8 04 00 00 00	 mov	 eax, 4
  00304	6b c8 11	 imul	 ecx, eax, 17
  00307	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  0030a	51		 push	 ecx
  0030b	ba 04 00 00 00	 mov	 edx, 4
  00310	6b c2 11	 imul	 eax, edx, 17
  00313	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  00316	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00319	52		 push	 edx
  0031a	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  0031d	50		 push	 eax
  0031e	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00323	83 c4 0c	 add	 esp, 12			; 0000000cH
  00326	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 828  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[18], &u_buf[18]);

  00329	b9 04 00 00 00	 mov	 ecx, 4
  0032e	6b d1 12	 imul	 edx, ecx, 18
  00331	03 55 08	 add	 edx, DWORD PTR _u_buf$[ebp]
  00334	52		 push	 edx
  00335	b8 04 00 00 00	 mov	 eax, 4
  0033a	6b c8 12	 imul	 ecx, eax, 18
  0033d	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  00340	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00343	50		 push	 eax
  00344	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  00347	51		 push	 ecx
  00348	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  0034d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00350	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 829  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[19], &u_buf[19]);

  00353	ba 04 00 00 00	 mov	 edx, 4
  00358	6b c2 13	 imul	 eax, edx, 19
  0035b	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  0035e	50		 push	 eax
  0035f	b9 04 00 00 00	 mov	 ecx, 4
  00364	6b d1 13	 imul	 edx, ecx, 19
  00367	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  0036a	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0036d	51		 push	 ecx
  0036e	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00371	52		 push	 edx
  00372	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00377	83 c4 0c	 add	 esp, 12			; 0000000cH
  0037a	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 830  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[20], &u_buf[20]);

  0037d	b8 04 00 00 00	 mov	 eax, 4
  00382	6b c8 14	 imul	 ecx, eax, 20
  00385	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  00388	51		 push	 ecx
  00389	ba 04 00 00 00	 mov	 edx, 4
  0038e	6b c2 14	 imul	 eax, edx, 20
  00391	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  00394	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00397	52		 push	 edx
  00398	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  0039b	50		 push	 eax
  0039c	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  003a1	83 c4 0c	 add	 esp, 12			; 0000000cH
  003a4	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 831  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[21], &u_buf[21]);

  003a7	b9 04 00 00 00	 mov	 ecx, 4
  003ac	6b d1 15	 imul	 edx, ecx, 21
  003af	03 55 08	 add	 edx, DWORD PTR _u_buf$[ebp]
  003b2	52		 push	 edx
  003b3	b8 04 00 00 00	 mov	 eax, 4
  003b8	6b c8 15	 imul	 ecx, eax, 21
  003bb	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  003be	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  003c1	50		 push	 eax
  003c2	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  003c5	51		 push	 ecx
  003c6	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  003cb	83 c4 0c	 add	 esp, 12			; 0000000cH
  003ce	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 832  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[22], &u_buf[22]);

  003d1	ba 04 00 00 00	 mov	 edx, 4
  003d6	6b c2 16	 imul	 eax, edx, 22
  003d9	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  003dc	50		 push	 eax
  003dd	b9 04 00 00 00	 mov	 ecx, 4
  003e2	6b d1 16	 imul	 edx, ecx, 22
  003e5	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  003e8	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  003eb	51		 push	 ecx
  003ec	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  003ef	52		 push	 edx
  003f0	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  003f5	83 c4 0c	 add	 esp, 12			; 0000000cH
  003f8	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 833  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[23], &u_buf[23]);

  003fb	b8 04 00 00 00	 mov	 eax, 4
  00400	6b c8 17	 imul	 ecx, eax, 23
  00403	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  00406	51		 push	 ecx
  00407	ba 04 00 00 00	 mov	 edx, 4
  0040c	6b c2 17	 imul	 eax, edx, 23
  0040f	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  00412	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00415	52		 push	 edx
  00416	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  00419	50		 push	 eax
  0041a	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  0041f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00422	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 834  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[24], &u_buf[24]);

  00425	b9 04 00 00 00	 mov	 ecx, 4
  0042a	6b d1 18	 imul	 edx, ecx, 24
  0042d	03 55 08	 add	 edx, DWORD PTR _u_buf$[ebp]
  00430	52		 push	 edx
  00431	b8 04 00 00 00	 mov	 eax, 4
  00436	6b c8 18	 imul	 ecx, eax, 24
  00439	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  0043c	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0043f	50		 push	 eax
  00440	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  00443	51		 push	 ecx
  00444	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00449	83 c4 0c	 add	 esp, 12			; 0000000cH
  0044c	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 835  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[25], &u_buf[25]);

  0044f	ba 04 00 00 00	 mov	 edx, 4
  00454	6b c2 19	 imul	 eax, edx, 25
  00457	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  0045a	50		 push	 eax
  0045b	b9 04 00 00 00	 mov	 ecx, 4
  00460	6b d1 19	 imul	 edx, ecx, 25
  00463	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  00466	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00469	51		 push	 ecx
  0046a	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  0046d	52		 push	 edx
  0046e	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00473	83 c4 0c	 add	 esp, 12			; 0000000cH
  00476	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 836  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[26], &u_buf[26]);

  00479	b8 04 00 00 00	 mov	 eax, 4
  0047e	6b c8 1a	 imul	 ecx, eax, 26
  00481	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  00484	51		 push	 ecx
  00485	ba 04 00 00 00	 mov	 edx, 4
  0048a	6b c2 1a	 imul	 eax, edx, 26
  0048d	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  00490	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00493	52		 push	 edx
  00494	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  00497	50		 push	 eax
  00498	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  0049d	83 c4 0c	 add	 esp, 12			; 0000000cH
  004a0	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 837  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[27], &u_buf[27]);

  004a3	b9 04 00 00 00	 mov	 ecx, 4
  004a8	6b d1 1b	 imul	 edx, ecx, 27
  004ab	03 55 08	 add	 edx, DWORD PTR _u_buf$[ebp]
  004ae	52		 push	 edx
  004af	b8 04 00 00 00	 mov	 eax, 4
  004b4	6b c8 1b	 imul	 ecx, eax, 27
  004b7	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  004ba	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  004bd	50		 push	 eax
  004be	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  004c1	51		 push	 ecx
  004c2	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  004c7	83 c4 0c	 add	 esp, 12			; 0000000cH
  004ca	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 838  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[28], &u_buf[28]);

  004cd	ba 04 00 00 00	 mov	 edx, 4
  004d2	6b c2 1c	 imul	 eax, edx, 28
  004d5	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  004d8	50		 push	 eax
  004d9	b9 04 00 00 00	 mov	 ecx, 4
  004de	6b d1 1c	 imul	 edx, ecx, 28
  004e1	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  004e4	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  004e7	51		 push	 ecx
  004e8	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  004eb	52		 push	 edx
  004ec	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  004f1	83 c4 0c	 add	 esp, 12			; 0000000cH
  004f4	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 839  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[29], &u_buf[29]);

  004f7	b8 04 00 00 00	 mov	 eax, 4
  004fc	6b c8 1d	 imul	 ecx, eax, 29
  004ff	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  00502	51		 push	 ecx
  00503	ba 04 00 00 00	 mov	 edx, 4
  00508	6b c2 1d	 imul	 eax, edx, 29
  0050b	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  0050e	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00511	52		 push	 edx
  00512	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  00515	50		 push	 eax
  00516	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  0051b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0051e	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 840  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[30], &u_buf[30]);

  00521	b9 04 00 00 00	 mov	 ecx, 4
  00526	6b d1 1e	 imul	 edx, ecx, 30
  00529	03 55 08	 add	 edx, DWORD PTR _u_buf$[ebp]
  0052c	52		 push	 edx
  0052d	b8 04 00 00 00	 mov	 eax, 4
  00532	6b c8 1e	 imul	 ecx, eax, 30
  00535	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  00538	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0053b	50		 push	 eax
  0053c	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  0053f	51		 push	 ecx
  00540	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00545	83 c4 0c	 add	 esp, 12			; 0000000cH
  00548	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 841  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[31], &u_buf[31]);

  0054b	ba 04 00 00 00	 mov	 edx, 4
  00550	6b c2 1f	 imul	 eax, edx, 31
  00553	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  00556	50		 push	 eax
  00557	b9 04 00 00 00	 mov	 ecx, 4
  0055c	6b d1 1f	 imul	 edx, ecx, 31
  0055f	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  00562	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00565	51		 push	 ecx
  00566	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00569	52		 push	 edx
  0056a	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  0056f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00572	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 842  :             u_buf += 32;

  00575	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  00578	05 80 00 00 00	 add	 eax, 128		; 00000080H
  0057d	89 45 08	 mov	 DWORD PTR _u_buf$[ebp], eax

; 843  :             --count;

  00580	8b 4d f8	 mov	 ecx, DWORD PTR _count$[ebp]
  00583	83 e9 01	 sub	 ecx, 1
  00586	89 4d f8	 mov	 DWORD PTR _count$[ebp], ecx

; 844  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 845  :             if (sizeof(k) == sizeof(_UINT32_T))

  00589	ba 01 00 00 00	 mov	 edx, 1
  0058e	85 d2		 test	 edx, edx
  00590	74 0c		 je	 SHORT $LN4@MultiplyAn

; 846  :                 AddToMULTI32Counter(32);

  00592	6a 20		 push	 32			; 00000020H
  00594	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
  00599	83 c4 04	 add	 esp, 4

; 847  :             else

  0059c	eb 0a		 jmp	 SHORT $LN5@MultiplyAn
$LN4@MultiplyAn:

; 848  :                 AddToMULTI64Counter(32);

  0059e	6a 20		 push	 32			; 00000020H
  005a0	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
  005a5	83 c4 04	 add	 esp, 4
$LN5@MultiplyAn:

; 849  : #endif
; 850  :         }

  005a8	e9 80 fa ff ff	 jmp	 $LN2@MultiplyAn
$LN3@MultiplyAn:

; 851  : 
; 852  :         if (u_count & 0x10)

  005ad	8b 45 0c	 mov	 eax, DWORD PTR _u_count$[ebp]
  005b0	83 e0 10	 and	 eax, 16			; 00000010H
  005b3	0f 84 c6 02 00
	00		 je	 $LN6@MultiplyAn

; 853  :         {
; 854  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

  005b9	b9 04 00 00 00	 mov	 ecx, 4
  005be	6b d1 00	 imul	 edx, ecx, 0
  005c1	03 55 08	 add	 edx, DWORD PTR _u_buf$[ebp]
  005c4	52		 push	 edx
  005c5	b8 04 00 00 00	 mov	 eax, 4
  005ca	6b c8 00	 imul	 ecx, eax, 0
  005cd	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  005d0	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  005d3	50		 push	 eax
  005d4	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  005d7	51		 push	 ecx
  005d8	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  005dd	83 c4 0c	 add	 esp, 12			; 0000000cH
  005e0	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 855  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

  005e3	ba 04 00 00 00	 mov	 edx, 4
  005e8	c1 e2 00	 shl	 edx, 0
  005eb	03 55 08	 add	 edx, DWORD PTR _u_buf$[ebp]
  005ee	52		 push	 edx
  005ef	b8 04 00 00 00	 mov	 eax, 4
  005f4	c1 e0 00	 shl	 eax, 0
  005f7	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  005fa	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  005fd	52		 push	 edx
  005fe	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  00601	50		 push	 eax
  00602	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00607	83 c4 0c	 add	 esp, 12			; 0000000cH
  0060a	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 856  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[2], &u_buf[2]);

  0060d	b9 04 00 00 00	 mov	 ecx, 4
  00612	d1 e1		 shl	 ecx, 1
  00614	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  00617	51		 push	 ecx
  00618	ba 04 00 00 00	 mov	 edx, 4
  0061d	d1 e2		 shl	 edx, 1
  0061f	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  00622	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00625	51		 push	 ecx
  00626	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00629	52		 push	 edx
  0062a	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  0062f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00632	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 857  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[3], &u_buf[3]);

  00635	b8 04 00 00 00	 mov	 eax, 4
  0063a	6b c8 03	 imul	 ecx, eax, 3
  0063d	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  00640	51		 push	 ecx
  00641	ba 04 00 00 00	 mov	 edx, 4
  00646	6b c2 03	 imul	 eax, edx, 3
  00649	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  0064c	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0064f	52		 push	 edx
  00650	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  00653	50		 push	 eax
  00654	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00659	83 c4 0c	 add	 esp, 12			; 0000000cH
  0065c	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 858  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[4], &u_buf[4]);

  0065f	b9 04 00 00 00	 mov	 ecx, 4
  00664	c1 e1 02	 shl	 ecx, 2
  00667	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  0066a	51		 push	 ecx
  0066b	ba 04 00 00 00	 mov	 edx, 4
  00670	c1 e2 02	 shl	 edx, 2
  00673	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  00676	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00679	51		 push	 ecx
  0067a	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  0067d	52		 push	 edx
  0067e	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00683	83 c4 0c	 add	 esp, 12			; 0000000cH
  00686	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 859  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[5], &u_buf[5]);

  00689	b8 04 00 00 00	 mov	 eax, 4
  0068e	6b c8 05	 imul	 ecx, eax, 5
  00691	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  00694	51		 push	 ecx
  00695	ba 04 00 00 00	 mov	 edx, 4
  0069a	6b c2 05	 imul	 eax, edx, 5
  0069d	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  006a0	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  006a3	52		 push	 edx
  006a4	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  006a7	50		 push	 eax
  006a8	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  006ad	83 c4 0c	 add	 esp, 12			; 0000000cH
  006b0	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 860  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[6], &u_buf[6]);

  006b3	b9 04 00 00 00	 mov	 ecx, 4
  006b8	6b d1 06	 imul	 edx, ecx, 6
  006bb	03 55 08	 add	 edx, DWORD PTR _u_buf$[ebp]
  006be	52		 push	 edx
  006bf	b8 04 00 00 00	 mov	 eax, 4
  006c4	6b c8 06	 imul	 ecx, eax, 6
  006c7	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  006ca	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  006cd	50		 push	 eax
  006ce	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  006d1	51		 push	 ecx
  006d2	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  006d7	83 c4 0c	 add	 esp, 12			; 0000000cH
  006da	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 861  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[7], &u_buf[7]);

  006dd	ba 04 00 00 00	 mov	 edx, 4
  006e2	6b c2 07	 imul	 eax, edx, 7
  006e5	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  006e8	50		 push	 eax
  006e9	b9 04 00 00 00	 mov	 ecx, 4
  006ee	6b d1 07	 imul	 edx, ecx, 7
  006f1	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  006f4	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  006f7	51		 push	 ecx
  006f8	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  006fb	52		 push	 edx
  006fc	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00701	83 c4 0c	 add	 esp, 12			; 0000000cH
  00704	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 862  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[8], &u_buf[8]);

  00707	b8 04 00 00 00	 mov	 eax, 4
  0070c	c1 e0 03	 shl	 eax, 3
  0070f	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  00712	50		 push	 eax
  00713	b9 04 00 00 00	 mov	 ecx, 4
  00718	c1 e1 03	 shl	 ecx, 3
  0071b	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  0071e	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00721	50		 push	 eax
  00722	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  00725	51		 push	 ecx
  00726	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  0072b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0072e	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 863  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[9], &u_buf[9]);

  00731	ba 04 00 00 00	 mov	 edx, 4
  00736	6b c2 09	 imul	 eax, edx, 9
  00739	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  0073c	50		 push	 eax
  0073d	b9 04 00 00 00	 mov	 ecx, 4
  00742	6b d1 09	 imul	 edx, ecx, 9
  00745	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  00748	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0074b	51		 push	 ecx
  0074c	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  0074f	52		 push	 edx
  00750	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00755	83 c4 0c	 add	 esp, 12			; 0000000cH
  00758	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 864  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[10], &u_buf[10]);

  0075b	b8 04 00 00 00	 mov	 eax, 4
  00760	6b c8 0a	 imul	 ecx, eax, 10
  00763	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  00766	51		 push	 ecx
  00767	ba 04 00 00 00	 mov	 edx, 4
  0076c	6b c2 0a	 imul	 eax, edx, 10
  0076f	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  00772	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00775	52		 push	 edx
  00776	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  00779	50		 push	 eax
  0077a	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  0077f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00782	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 865  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[11], &u_buf[11]);

  00785	b9 04 00 00 00	 mov	 ecx, 4
  0078a	6b d1 0b	 imul	 edx, ecx, 11
  0078d	03 55 08	 add	 edx, DWORD PTR _u_buf$[ebp]
  00790	52		 push	 edx
  00791	b8 04 00 00 00	 mov	 eax, 4
  00796	6b c8 0b	 imul	 ecx, eax, 11
  00799	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  0079c	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0079f	50		 push	 eax
  007a0	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  007a3	51		 push	 ecx
  007a4	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  007a9	83 c4 0c	 add	 esp, 12			; 0000000cH
  007ac	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 866  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[12], &u_buf[12]);

  007af	ba 04 00 00 00	 mov	 edx, 4
  007b4	6b c2 0c	 imul	 eax, edx, 12
  007b7	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  007ba	50		 push	 eax
  007bb	b9 04 00 00 00	 mov	 ecx, 4
  007c0	6b d1 0c	 imul	 edx, ecx, 12
  007c3	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  007c6	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  007c9	51		 push	 ecx
  007ca	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  007cd	52		 push	 edx
  007ce	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  007d3	83 c4 0c	 add	 esp, 12			; 0000000cH
  007d6	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 867  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[13], &u_buf[13]);

  007d9	b8 04 00 00 00	 mov	 eax, 4
  007de	6b c8 0d	 imul	 ecx, eax, 13
  007e1	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  007e4	51		 push	 ecx
  007e5	ba 04 00 00 00	 mov	 edx, 4
  007ea	6b c2 0d	 imul	 eax, edx, 13
  007ed	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  007f0	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  007f3	52		 push	 edx
  007f4	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  007f7	50		 push	 eax
  007f8	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  007fd	83 c4 0c	 add	 esp, 12			; 0000000cH
  00800	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 868  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[14], &u_buf[14]);

  00803	b9 04 00 00 00	 mov	 ecx, 4
  00808	6b d1 0e	 imul	 edx, ecx, 14
  0080b	03 55 08	 add	 edx, DWORD PTR _u_buf$[ebp]
  0080e	52		 push	 edx
  0080f	b8 04 00 00 00	 mov	 eax, 4
  00814	6b c8 0e	 imul	 ecx, eax, 14
  00817	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  0081a	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0081d	50		 push	 eax
  0081e	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  00821	51		 push	 ecx
  00822	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00827	83 c4 0c	 add	 esp, 12			; 0000000cH
  0082a	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 869  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[15], &u_buf[15]);

  0082d	ba 04 00 00 00	 mov	 edx, 4
  00832	6b c2 0f	 imul	 eax, edx, 15
  00835	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  00838	50		 push	 eax
  00839	b9 04 00 00 00	 mov	 ecx, 4
  0083e	6b d1 0f	 imul	 edx, ecx, 15
  00841	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  00844	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00847	51		 push	 ecx
  00848	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  0084b	52		 push	 edx
  0084c	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00851	83 c4 0c	 add	 esp, 12			; 0000000cH
  00854	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 870  :             u_buf += 16;

  00857	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  0085a	83 c0 40	 add	 eax, 64			; 00000040H
  0085d	89 45 08	 mov	 DWORD PTR _u_buf$[ebp], eax

; 871  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 872  :             if (sizeof(k) == sizeof(_UINT32_T))

  00860	b9 01 00 00 00	 mov	 ecx, 1
  00865	85 c9		 test	 ecx, ecx
  00867	74 0c		 je	 SHORT $LN7@MultiplyAn

; 873  :                 AddToMULTI32Counter(16);

  00869	6a 10		 push	 16			; 00000010H
  0086b	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
  00870	83 c4 04	 add	 esp, 4

; 874  :             else

  00873	eb 0a		 jmp	 SHORT $LN6@MultiplyAn
$LN7@MultiplyAn:

; 875  :                 AddToMULTI64Counter(16);

  00875	6a 10		 push	 16			; 00000010H
  00877	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
  0087c	83 c4 04	 add	 esp, 4
$LN6@MultiplyAn:

; 876  : #endif
; 877  :         }
; 878  : 
; 879  :         if (u_count & 0x8)

  0087f	8b 55 0c	 mov	 edx, DWORD PTR _u_count$[ebp]
  00882	83 e2 08	 and	 edx, 8
  00885	0f 84 76 01 00
	00		 je	 $LN9@MultiplyAn

; 880  :         {
; 881  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

  0088b	b8 04 00 00 00	 mov	 eax, 4
  00890	6b c8 00	 imul	 ecx, eax, 0
  00893	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  00896	51		 push	 ecx
  00897	ba 04 00 00 00	 mov	 edx, 4
  0089c	6b c2 00	 imul	 eax, edx, 0
  0089f	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  008a2	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  008a5	52		 push	 edx
  008a6	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  008a9	50		 push	 eax
  008aa	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  008af	83 c4 0c	 add	 esp, 12			; 0000000cH
  008b2	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 882  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

  008b5	b9 04 00 00 00	 mov	 ecx, 4
  008ba	c1 e1 00	 shl	 ecx, 0
  008bd	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  008c0	51		 push	 ecx
  008c1	ba 04 00 00 00	 mov	 edx, 4
  008c6	c1 e2 00	 shl	 edx, 0
  008c9	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  008cc	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  008cf	51		 push	 ecx
  008d0	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  008d3	52		 push	 edx
  008d4	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  008d9	83 c4 0c	 add	 esp, 12			; 0000000cH
  008dc	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 883  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[2], &u_buf[2]);

  008df	b8 04 00 00 00	 mov	 eax, 4
  008e4	d1 e0		 shl	 eax, 1
  008e6	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  008e9	50		 push	 eax
  008ea	b9 04 00 00 00	 mov	 ecx, 4
  008ef	d1 e1		 shl	 ecx, 1
  008f1	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  008f4	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  008f7	50		 push	 eax
  008f8	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  008fb	51		 push	 ecx
  008fc	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00901	83 c4 0c	 add	 esp, 12			; 0000000cH
  00904	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 884  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[3], &u_buf[3]);

  00907	ba 04 00 00 00	 mov	 edx, 4
  0090c	6b c2 03	 imul	 eax, edx, 3
  0090f	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  00912	50		 push	 eax
  00913	b9 04 00 00 00	 mov	 ecx, 4
  00918	6b d1 03	 imul	 edx, ecx, 3
  0091b	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  0091e	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00921	51		 push	 ecx
  00922	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00925	52		 push	 edx
  00926	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  0092b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0092e	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 885  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[4], &u_buf[4]);

  00931	b8 04 00 00 00	 mov	 eax, 4
  00936	c1 e0 02	 shl	 eax, 2
  00939	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  0093c	50		 push	 eax
  0093d	b9 04 00 00 00	 mov	 ecx, 4
  00942	c1 e1 02	 shl	 ecx, 2
  00945	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  00948	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0094b	50		 push	 eax
  0094c	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  0094f	51		 push	 ecx
  00950	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00955	83 c4 0c	 add	 esp, 12			; 0000000cH
  00958	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 886  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[5], &u_buf[5]);

  0095b	ba 04 00 00 00	 mov	 edx, 4
  00960	6b c2 05	 imul	 eax, edx, 5
  00963	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  00966	50		 push	 eax
  00967	b9 04 00 00 00	 mov	 ecx, 4
  0096c	6b d1 05	 imul	 edx, ecx, 5
  0096f	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  00972	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00975	51		 push	 ecx
  00976	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00979	52		 push	 edx
  0097a	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  0097f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00982	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 887  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[6], &u_buf[6]);

  00985	b8 04 00 00 00	 mov	 eax, 4
  0098a	6b c8 06	 imul	 ecx, eax, 6
  0098d	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  00990	51		 push	 ecx
  00991	ba 04 00 00 00	 mov	 edx, 4
  00996	6b c2 06	 imul	 eax, edx, 6
  00999	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  0099c	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0099f	52		 push	 edx
  009a0	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  009a3	50		 push	 eax
  009a4	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  009a9	83 c4 0c	 add	 esp, 12			; 0000000cH
  009ac	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 888  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[7], &u_buf[7]);

  009af	b9 04 00 00 00	 mov	 ecx, 4
  009b4	6b d1 07	 imul	 edx, ecx, 7
  009b7	03 55 08	 add	 edx, DWORD PTR _u_buf$[ebp]
  009ba	52		 push	 edx
  009bb	b8 04 00 00 00	 mov	 eax, 4
  009c0	6b c8 07	 imul	 ecx, eax, 7
  009c3	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  009c6	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  009c9	50		 push	 eax
  009ca	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  009cd	51		 push	 ecx
  009ce	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  009d3	83 c4 0c	 add	 esp, 12			; 0000000cH
  009d6	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 889  :             u_buf += 8;

  009d9	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  009dc	83 c2 20	 add	 edx, 32			; 00000020H
  009df	89 55 08	 mov	 DWORD PTR _u_buf$[ebp], edx

; 890  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 891  :             if (sizeof(k) == sizeof(_UINT32_T))

  009e2	b8 01 00 00 00	 mov	 eax, 1
  009e7	85 c0		 test	 eax, eax
  009e9	74 0c		 je	 SHORT $LN10@MultiplyAn

; 892  :                 AddToMULTI32Counter(8);

  009eb	6a 08		 push	 8
  009ed	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
  009f2	83 c4 04	 add	 esp, 4

; 893  :             else

  009f5	eb 0a		 jmp	 SHORT $LN9@MultiplyAn
$LN10@MultiplyAn:

; 894  :                 AddToMULTI64Counter(8);

  009f7	6a 08		 push	 8
  009f9	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
  009fe	83 c4 04	 add	 esp, 4
$LN9@MultiplyAn:

; 895  : #endif
; 896  :         }
; 897  : 
; 898  :         if (u_count & 0x4)

  00a01	8b 4d 0c	 mov	 ecx, DWORD PTR _u_count$[ebp]
  00a04	83 e1 04	 and	 ecx, 4
  00a07	0f 84 ce 00 00
	00		 je	 $LN12@MultiplyAn

; 899  :         {
; 900  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

  00a0d	ba 04 00 00 00	 mov	 edx, 4
  00a12	6b c2 00	 imul	 eax, edx, 0
  00a15	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  00a18	50		 push	 eax
  00a19	b9 04 00 00 00	 mov	 ecx, 4
  00a1e	6b d1 00	 imul	 edx, ecx, 0
  00a21	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  00a24	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00a27	51		 push	 ecx
  00a28	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00a2b	52		 push	 edx
  00a2c	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00a31	83 c4 0c	 add	 esp, 12			; 0000000cH
  00a34	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 901  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

  00a37	b8 04 00 00 00	 mov	 eax, 4
  00a3c	c1 e0 00	 shl	 eax, 0
  00a3f	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  00a42	50		 push	 eax
  00a43	b9 04 00 00 00	 mov	 ecx, 4
  00a48	c1 e1 00	 shl	 ecx, 0
  00a4b	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  00a4e	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00a51	50		 push	 eax
  00a52	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  00a55	51		 push	 ecx
  00a56	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00a5b	83 c4 0c	 add	 esp, 12			; 0000000cH
  00a5e	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 902  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[2], &u_buf[2]);

  00a61	ba 04 00 00 00	 mov	 edx, 4
  00a66	d1 e2		 shl	 edx, 1
  00a68	03 55 08	 add	 edx, DWORD PTR _u_buf$[ebp]
  00a6b	52		 push	 edx
  00a6c	b8 04 00 00 00	 mov	 eax, 4
  00a71	d1 e0		 shl	 eax, 1
  00a73	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  00a76	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00a79	52		 push	 edx
  00a7a	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  00a7d	50		 push	 eax
  00a7e	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00a83	83 c4 0c	 add	 esp, 12			; 0000000cH
  00a86	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 903  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[3], &u_buf[3]);

  00a89	b9 04 00 00 00	 mov	 ecx, 4
  00a8e	6b d1 03	 imul	 edx, ecx, 3
  00a91	03 55 08	 add	 edx, DWORD PTR _u_buf$[ebp]
  00a94	52		 push	 edx
  00a95	b8 04 00 00 00	 mov	 eax, 4
  00a9a	6b c8 03	 imul	 ecx, eax, 3
  00a9d	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  00aa0	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00aa3	50		 push	 eax
  00aa4	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  00aa7	51		 push	 ecx
  00aa8	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00aad	83 c4 0c	 add	 esp, 12			; 0000000cH
  00ab0	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 904  :             u_buf += 4;

  00ab3	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  00ab6	83 c2 10	 add	 edx, 16			; 00000010H
  00ab9	89 55 08	 mov	 DWORD PTR _u_buf$[ebp], edx

; 905  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 906  :             if (sizeof(k) == sizeof(_UINT32_T))

  00abc	b8 01 00 00 00	 mov	 eax, 1
  00ac1	85 c0		 test	 eax, eax
  00ac3	74 0c		 je	 SHORT $LN13@MultiplyAn

; 907  :                 AddToMULTI32Counter(4);

  00ac5	6a 04		 push	 4
  00ac7	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
  00acc	83 c4 04	 add	 esp, 4

; 908  :             else

  00acf	eb 0a		 jmp	 SHORT $LN12@MultiplyAn
$LN13@MultiplyAn:

; 909  :                 AddToMULTI64Counter(4);

  00ad1	6a 04		 push	 4
  00ad3	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
  00ad8	83 c4 04	 add	 esp, 4
$LN12@MultiplyAn:

; 910  : #endif
; 911  :         }
; 912  : 
; 913  :         if (u_count & 0x2)

  00adb	8b 4d 0c	 mov	 ecx, DWORD PTR _u_count$[ebp]
  00ade	83 e1 02	 and	 ecx, 2
  00ae1	74 7c		 je	 SHORT $LN15@MultiplyAn

; 914  :         {
; 915  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

  00ae3	ba 04 00 00 00	 mov	 edx, 4
  00ae8	6b c2 00	 imul	 eax, edx, 0
  00aeb	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  00aee	50		 push	 eax
  00aef	b9 04 00 00 00	 mov	 ecx, 4
  00af4	6b d1 00	 imul	 edx, ecx, 0
  00af7	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  00afa	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00afd	51		 push	 ecx
  00afe	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00b01	52		 push	 edx
  00b02	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00b07	83 c4 0c	 add	 esp, 12			; 0000000cH
  00b0a	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 916  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

  00b0d	b8 04 00 00 00	 mov	 eax, 4
  00b12	c1 e0 00	 shl	 eax, 0
  00b15	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  00b18	50		 push	 eax
  00b19	b9 04 00 00 00	 mov	 ecx, 4
  00b1e	c1 e1 00	 shl	 ecx, 0
  00b21	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  00b24	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00b27	50		 push	 eax
  00b28	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  00b2b	51		 push	 ecx
  00b2c	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00b31	83 c4 0c	 add	 esp, 12			; 0000000cH
  00b34	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 917  :             u_buf += 2;

  00b37	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  00b3a	83 c2 08	 add	 edx, 8
  00b3d	89 55 08	 mov	 DWORD PTR _u_buf$[ebp], edx

; 918  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 919  :             if (sizeof(k) == sizeof(_UINT32_T))

  00b40	b8 01 00 00 00	 mov	 eax, 1
  00b45	85 c0		 test	 eax, eax
  00b47	74 0c		 je	 SHORT $LN16@MultiplyAn

; 920  :                 AddToMULTI32Counter(2);

  00b49	6a 02		 push	 2
  00b4b	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
  00b50	83 c4 04	 add	 esp, 4

; 921  :             else

  00b53	eb 0a		 jmp	 SHORT $LN15@MultiplyAn
$LN16@MultiplyAn:

; 922  :                 AddToMULTI64Counter(2);

  00b55	6a 02		 push	 2
  00b57	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
  00b5c	83 c4 04	 add	 esp, 4
$LN15@MultiplyAn:

; 923  : #endif
; 924  :         }
; 925  : 
; 926  :         if (u_count & 0x1)

  00b5f	8b 4d 0c	 mov	 ecx, DWORD PTR _u_count$[ebp]
  00b62	83 e1 01	 and	 ecx, 1
  00b65	74 48		 je	 SHORT $LN18@MultiplyAn

; 927  :         {
; 928  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

  00b67	ba 04 00 00 00	 mov	 edx, 4
  00b6c	6b c2 00	 imul	 eax, edx, 0
  00b6f	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  00b72	50		 push	 eax
  00b73	b9 04 00 00 00	 mov	 ecx, 4
  00b78	6b d1 00	 imul	 edx, ecx, 0
  00b7b	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  00b7e	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00b81	51		 push	 ecx
  00b82	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00b85	52		 push	 edx
  00b86	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
  00b8b	83 c4 0c	 add	 esp, 12			; 0000000cH
  00b8e	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 929  :             u_buf += 1;

  00b91	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  00b94	83 c0 04	 add	 eax, 4
  00b97	89 45 08	 mov	 DWORD PTR _u_buf$[ebp], eax

; 930  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 931  :             if (sizeof(k) == sizeof(_UINT32_T))

  00b9a	b9 01 00 00 00	 mov	 ecx, 1
  00b9f	85 c9		 test	 ecx, ecx
  00ba1	74 07		 je	 SHORT $LN19@MultiplyAn

; 932  :                 IncrementMULTI32Counter();

  00ba3	e8 00 00 00 00	 call	 ?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementMULTI32Counter

; 933  :             else

  00ba8	eb 05		 jmp	 SHORT $LN18@MultiplyAn
$LN19@MultiplyAn:

; 934  :                 IncrementMULTI64Counter();

  00baa	e8 00 00 00 00	 call	 ?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementMULTI64Counter
$LN18@MultiplyAn:

; 935  : #endif
; 936  :         }
; 937  : 
; 938  :         if (k > 0)

  00baf	83 7d fc 00	 cmp	 DWORD PTR _k$[ebp], 0
  00bb3	76 1a		 jbe	 SHORT $LN21@MultiplyAn

; 939  :         {
; 940  :             u_buf[0] = k;

  00bb5	ba 04 00 00 00	 mov	 edx, 4
  00bba	6b c2 00	 imul	 eax, edx, 0
  00bbd	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  00bc0	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00bc3	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 941  :             u_buf += 1;

  00bc6	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  00bc9	83 c0 04	 add	 eax, 4
  00bcc	89 45 08	 mov	 DWORD PTR _u_buf$[ebp], eax
$LN21@MultiplyAn:

; 942  :         }
; 943  : 
; 944  :         return (u_buf);

  00bcf	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]

; 945  :     }

  00bd2	83 c4 08	 add	 esp, 8
  00bd5	3b ec		 cmp	 ebp, esp
  00bd7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00bdc	8b e5		 mov	 esp, ebp
  00bde	5d		 pop	 ebp
  00bdf	c3		 ret	 0
?MultiplyAndAdd_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAPAIPAIII@Z ENDP ; Palmtree::Math::Core::Internal::MultiplyAndAdd_using_ADCX_MULX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
_TEXT	SEGMENT
_count$ = -8						; size = 4
_k$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_x$ = 16						; size = 4
?MultiplyAndAdd_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAPAIPAIII@Z PROC ; Palmtree::Math::Core::Internal::MultiplyAndAdd_using_ADC_MUL

; 662  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	b9 00 00 00 00	 mov	 ecx, OFFSET __F159A697_pmc_parse@cpp
  00019	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 663  :         __UNIT_TYPE k = x;

  0001e	8b 45 10	 mov	 eax, DWORD PTR _x$[ebp]
  00021	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 664  :         __UNIT_TYPE count = u_count >> 5;

  00024	8b 4d 0c	 mov	 ecx, DWORD PTR _u_count$[ebp]
  00027	c1 e9 05	 shr	 ecx, 5
  0002a	89 4d f8	 mov	 DWORD PTR _count$[ebp], ecx
$LN2@MultiplyAn:

; 665  :         while (count > 0)

  0002d	83 7d f8 00	 cmp	 DWORD PTR _count$[ebp], 0
  00031	0f 86 76 05 00
	00		 jbe	 $LN3@MultiplyAn

; 666  :         {
; 667  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[0], &u_buf[0]);

  00037	ba 04 00 00 00	 mov	 edx, 4
  0003c	6b c2 00	 imul	 eax, edx, 0
  0003f	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  00042	50		 push	 eax
  00043	b9 04 00 00 00	 mov	 ecx, 4
  00048	6b d1 00	 imul	 edx, ecx, 0
  0004b	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  0004e	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00051	51		 push	 ecx
  00052	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00055	52		 push	 edx
  00056	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005e	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 668  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[1], &u_buf[1]);

  00061	b8 04 00 00 00	 mov	 eax, 4
  00066	c1 e0 00	 shl	 eax, 0
  00069	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  0006c	50		 push	 eax
  0006d	b9 04 00 00 00	 mov	 ecx, 4
  00072	c1 e1 00	 shl	 ecx, 0
  00075	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  00078	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0007b	50		 push	 eax
  0007c	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  0007f	51		 push	 ecx
  00080	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00085	83 c4 0c	 add	 esp, 12			; 0000000cH
  00088	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 669  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[2], &u_buf[2]);

  0008b	ba 04 00 00 00	 mov	 edx, 4
  00090	d1 e2		 shl	 edx, 1
  00092	03 55 08	 add	 edx, DWORD PTR _u_buf$[ebp]
  00095	52		 push	 edx
  00096	b8 04 00 00 00	 mov	 eax, 4
  0009b	d1 e0		 shl	 eax, 1
  0009d	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  000a0	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  000a3	52		 push	 edx
  000a4	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  000a7	50		 push	 eax
  000a8	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  000ad	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b0	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 670  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[3], &u_buf[3]);

  000b3	b9 04 00 00 00	 mov	 ecx, 4
  000b8	6b d1 03	 imul	 edx, ecx, 3
  000bb	03 55 08	 add	 edx, DWORD PTR _u_buf$[ebp]
  000be	52		 push	 edx
  000bf	b8 04 00 00 00	 mov	 eax, 4
  000c4	6b c8 03	 imul	 ecx, eax, 3
  000c7	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  000ca	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  000cd	50		 push	 eax
  000ce	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  000d1	51		 push	 ecx
  000d2	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  000d7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000da	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 671  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[4], &u_buf[4]);

  000dd	ba 04 00 00 00	 mov	 edx, 4
  000e2	c1 e2 02	 shl	 edx, 2
  000e5	03 55 08	 add	 edx, DWORD PTR _u_buf$[ebp]
  000e8	52		 push	 edx
  000e9	b8 04 00 00 00	 mov	 eax, 4
  000ee	c1 e0 02	 shl	 eax, 2
  000f1	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  000f4	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  000f7	52		 push	 edx
  000f8	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  000fb	50		 push	 eax
  000fc	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00101	83 c4 0c	 add	 esp, 12			; 0000000cH
  00104	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 672  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[5], &u_buf[5]);

  00107	b9 04 00 00 00	 mov	 ecx, 4
  0010c	6b d1 05	 imul	 edx, ecx, 5
  0010f	03 55 08	 add	 edx, DWORD PTR _u_buf$[ebp]
  00112	52		 push	 edx
  00113	b8 04 00 00 00	 mov	 eax, 4
  00118	6b c8 05	 imul	 ecx, eax, 5
  0011b	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  0011e	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00121	50		 push	 eax
  00122	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  00125	51		 push	 ecx
  00126	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  0012b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0012e	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 673  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[6], &u_buf[6]);

  00131	ba 04 00 00 00	 mov	 edx, 4
  00136	6b c2 06	 imul	 eax, edx, 6
  00139	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  0013c	50		 push	 eax
  0013d	b9 04 00 00 00	 mov	 ecx, 4
  00142	6b d1 06	 imul	 edx, ecx, 6
  00145	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  00148	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0014b	51		 push	 ecx
  0014c	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  0014f	52		 push	 edx
  00150	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00155	83 c4 0c	 add	 esp, 12			; 0000000cH
  00158	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 674  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[7], &u_buf[7]);

  0015b	b8 04 00 00 00	 mov	 eax, 4
  00160	6b c8 07	 imul	 ecx, eax, 7
  00163	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  00166	51		 push	 ecx
  00167	ba 04 00 00 00	 mov	 edx, 4
  0016c	6b c2 07	 imul	 eax, edx, 7
  0016f	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  00172	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00175	52		 push	 edx
  00176	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  00179	50		 push	 eax
  0017a	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  0017f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00182	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 675  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[8], &u_buf[8]);

  00185	b9 04 00 00 00	 mov	 ecx, 4
  0018a	c1 e1 03	 shl	 ecx, 3
  0018d	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  00190	51		 push	 ecx
  00191	ba 04 00 00 00	 mov	 edx, 4
  00196	c1 e2 03	 shl	 edx, 3
  00199	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  0019c	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0019f	51		 push	 ecx
  001a0	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  001a3	52		 push	 edx
  001a4	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  001a9	83 c4 0c	 add	 esp, 12			; 0000000cH
  001ac	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 676  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[9], &u_buf[9]);

  001af	b8 04 00 00 00	 mov	 eax, 4
  001b4	6b c8 09	 imul	 ecx, eax, 9
  001b7	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  001ba	51		 push	 ecx
  001bb	ba 04 00 00 00	 mov	 edx, 4
  001c0	6b c2 09	 imul	 eax, edx, 9
  001c3	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  001c6	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  001c9	52		 push	 edx
  001ca	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  001cd	50		 push	 eax
  001ce	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  001d3	83 c4 0c	 add	 esp, 12			; 0000000cH
  001d6	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 677  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[10], &u_buf[10]);

  001d9	b9 04 00 00 00	 mov	 ecx, 4
  001de	6b d1 0a	 imul	 edx, ecx, 10
  001e1	03 55 08	 add	 edx, DWORD PTR _u_buf$[ebp]
  001e4	52		 push	 edx
  001e5	b8 04 00 00 00	 mov	 eax, 4
  001ea	6b c8 0a	 imul	 ecx, eax, 10
  001ed	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  001f0	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  001f3	50		 push	 eax
  001f4	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  001f7	51		 push	 ecx
  001f8	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  001fd	83 c4 0c	 add	 esp, 12			; 0000000cH
  00200	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 678  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[11], &u_buf[11]);

  00203	ba 04 00 00 00	 mov	 edx, 4
  00208	6b c2 0b	 imul	 eax, edx, 11
  0020b	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  0020e	50		 push	 eax
  0020f	b9 04 00 00 00	 mov	 ecx, 4
  00214	6b d1 0b	 imul	 edx, ecx, 11
  00217	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  0021a	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0021d	51		 push	 ecx
  0021e	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00221	52		 push	 edx
  00222	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00227	83 c4 0c	 add	 esp, 12			; 0000000cH
  0022a	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 679  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[12], &u_buf[12]);

  0022d	b8 04 00 00 00	 mov	 eax, 4
  00232	6b c8 0c	 imul	 ecx, eax, 12
  00235	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  00238	51		 push	 ecx
  00239	ba 04 00 00 00	 mov	 edx, 4
  0023e	6b c2 0c	 imul	 eax, edx, 12
  00241	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  00244	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00247	52		 push	 edx
  00248	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  0024b	50		 push	 eax
  0024c	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00251	83 c4 0c	 add	 esp, 12			; 0000000cH
  00254	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 680  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[13], &u_buf[13]);

  00257	b9 04 00 00 00	 mov	 ecx, 4
  0025c	6b d1 0d	 imul	 edx, ecx, 13
  0025f	03 55 08	 add	 edx, DWORD PTR _u_buf$[ebp]
  00262	52		 push	 edx
  00263	b8 04 00 00 00	 mov	 eax, 4
  00268	6b c8 0d	 imul	 ecx, eax, 13
  0026b	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  0026e	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00271	50		 push	 eax
  00272	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  00275	51		 push	 ecx
  00276	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  0027b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0027e	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 681  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[14], &u_buf[14]);

  00281	ba 04 00 00 00	 mov	 edx, 4
  00286	6b c2 0e	 imul	 eax, edx, 14
  00289	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  0028c	50		 push	 eax
  0028d	b9 04 00 00 00	 mov	 ecx, 4
  00292	6b d1 0e	 imul	 edx, ecx, 14
  00295	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  00298	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0029b	51		 push	 ecx
  0029c	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  0029f	52		 push	 edx
  002a0	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  002a5	83 c4 0c	 add	 esp, 12			; 0000000cH
  002a8	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 682  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[15], &u_buf[15]);

  002ab	b8 04 00 00 00	 mov	 eax, 4
  002b0	6b c8 0f	 imul	 ecx, eax, 15
  002b3	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  002b6	51		 push	 ecx
  002b7	ba 04 00 00 00	 mov	 edx, 4
  002bc	6b c2 0f	 imul	 eax, edx, 15
  002bf	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  002c2	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  002c5	52		 push	 edx
  002c6	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  002c9	50		 push	 eax
  002ca	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  002cf	83 c4 0c	 add	 esp, 12			; 0000000cH
  002d2	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 683  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[16], &u_buf[16]);

  002d5	b9 04 00 00 00	 mov	 ecx, 4
  002da	c1 e1 04	 shl	 ecx, 4
  002dd	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  002e0	51		 push	 ecx
  002e1	ba 04 00 00 00	 mov	 edx, 4
  002e6	c1 e2 04	 shl	 edx, 4
  002e9	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  002ec	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  002ef	51		 push	 ecx
  002f0	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  002f3	52		 push	 edx
  002f4	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  002f9	83 c4 0c	 add	 esp, 12			; 0000000cH
  002fc	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 684  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[17], &u_buf[17]);

  002ff	b8 04 00 00 00	 mov	 eax, 4
  00304	6b c8 11	 imul	 ecx, eax, 17
  00307	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  0030a	51		 push	 ecx
  0030b	ba 04 00 00 00	 mov	 edx, 4
  00310	6b c2 11	 imul	 eax, edx, 17
  00313	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  00316	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00319	52		 push	 edx
  0031a	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  0031d	50		 push	 eax
  0031e	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00323	83 c4 0c	 add	 esp, 12			; 0000000cH
  00326	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 685  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[18], &u_buf[18]);

  00329	b9 04 00 00 00	 mov	 ecx, 4
  0032e	6b d1 12	 imul	 edx, ecx, 18
  00331	03 55 08	 add	 edx, DWORD PTR _u_buf$[ebp]
  00334	52		 push	 edx
  00335	b8 04 00 00 00	 mov	 eax, 4
  0033a	6b c8 12	 imul	 ecx, eax, 18
  0033d	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  00340	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00343	50		 push	 eax
  00344	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  00347	51		 push	 ecx
  00348	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  0034d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00350	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 686  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[19], &u_buf[19]);

  00353	ba 04 00 00 00	 mov	 edx, 4
  00358	6b c2 13	 imul	 eax, edx, 19
  0035b	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  0035e	50		 push	 eax
  0035f	b9 04 00 00 00	 mov	 ecx, 4
  00364	6b d1 13	 imul	 edx, ecx, 19
  00367	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  0036a	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0036d	51		 push	 ecx
  0036e	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00371	52		 push	 edx
  00372	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00377	83 c4 0c	 add	 esp, 12			; 0000000cH
  0037a	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 687  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[20], &u_buf[20]);

  0037d	b8 04 00 00 00	 mov	 eax, 4
  00382	6b c8 14	 imul	 ecx, eax, 20
  00385	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  00388	51		 push	 ecx
  00389	ba 04 00 00 00	 mov	 edx, 4
  0038e	6b c2 14	 imul	 eax, edx, 20
  00391	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  00394	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00397	52		 push	 edx
  00398	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  0039b	50		 push	 eax
  0039c	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  003a1	83 c4 0c	 add	 esp, 12			; 0000000cH
  003a4	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 688  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[21], &u_buf[21]);

  003a7	b9 04 00 00 00	 mov	 ecx, 4
  003ac	6b d1 15	 imul	 edx, ecx, 21
  003af	03 55 08	 add	 edx, DWORD PTR _u_buf$[ebp]
  003b2	52		 push	 edx
  003b3	b8 04 00 00 00	 mov	 eax, 4
  003b8	6b c8 15	 imul	 ecx, eax, 21
  003bb	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  003be	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  003c1	50		 push	 eax
  003c2	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  003c5	51		 push	 ecx
  003c6	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  003cb	83 c4 0c	 add	 esp, 12			; 0000000cH
  003ce	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 689  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[22], &u_buf[22]);

  003d1	ba 04 00 00 00	 mov	 edx, 4
  003d6	6b c2 16	 imul	 eax, edx, 22
  003d9	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  003dc	50		 push	 eax
  003dd	b9 04 00 00 00	 mov	 ecx, 4
  003e2	6b d1 16	 imul	 edx, ecx, 22
  003e5	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  003e8	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  003eb	51		 push	 ecx
  003ec	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  003ef	52		 push	 edx
  003f0	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  003f5	83 c4 0c	 add	 esp, 12			; 0000000cH
  003f8	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 690  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[23], &u_buf[23]);

  003fb	b8 04 00 00 00	 mov	 eax, 4
  00400	6b c8 17	 imul	 ecx, eax, 23
  00403	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  00406	51		 push	 ecx
  00407	ba 04 00 00 00	 mov	 edx, 4
  0040c	6b c2 17	 imul	 eax, edx, 23
  0040f	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  00412	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00415	52		 push	 edx
  00416	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  00419	50		 push	 eax
  0041a	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  0041f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00422	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 691  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[24], &u_buf[24]);

  00425	b9 04 00 00 00	 mov	 ecx, 4
  0042a	6b d1 18	 imul	 edx, ecx, 24
  0042d	03 55 08	 add	 edx, DWORD PTR _u_buf$[ebp]
  00430	52		 push	 edx
  00431	b8 04 00 00 00	 mov	 eax, 4
  00436	6b c8 18	 imul	 ecx, eax, 24
  00439	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  0043c	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0043f	50		 push	 eax
  00440	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  00443	51		 push	 ecx
  00444	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00449	83 c4 0c	 add	 esp, 12			; 0000000cH
  0044c	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 692  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[25], &u_buf[25]);

  0044f	ba 04 00 00 00	 mov	 edx, 4
  00454	6b c2 19	 imul	 eax, edx, 25
  00457	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  0045a	50		 push	 eax
  0045b	b9 04 00 00 00	 mov	 ecx, 4
  00460	6b d1 19	 imul	 edx, ecx, 25
  00463	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  00466	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00469	51		 push	 ecx
  0046a	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  0046d	52		 push	 edx
  0046e	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00473	83 c4 0c	 add	 esp, 12			; 0000000cH
  00476	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 693  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[26], &u_buf[26]);

  00479	b8 04 00 00 00	 mov	 eax, 4
  0047e	6b c8 1a	 imul	 ecx, eax, 26
  00481	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  00484	51		 push	 ecx
  00485	ba 04 00 00 00	 mov	 edx, 4
  0048a	6b c2 1a	 imul	 eax, edx, 26
  0048d	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  00490	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00493	52		 push	 edx
  00494	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  00497	50		 push	 eax
  00498	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  0049d	83 c4 0c	 add	 esp, 12			; 0000000cH
  004a0	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 694  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[27], &u_buf[27]);

  004a3	b9 04 00 00 00	 mov	 ecx, 4
  004a8	6b d1 1b	 imul	 edx, ecx, 27
  004ab	03 55 08	 add	 edx, DWORD PTR _u_buf$[ebp]
  004ae	52		 push	 edx
  004af	b8 04 00 00 00	 mov	 eax, 4
  004b4	6b c8 1b	 imul	 ecx, eax, 27
  004b7	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  004ba	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  004bd	50		 push	 eax
  004be	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  004c1	51		 push	 ecx
  004c2	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  004c7	83 c4 0c	 add	 esp, 12			; 0000000cH
  004ca	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 695  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[28], &u_buf[28]);

  004cd	ba 04 00 00 00	 mov	 edx, 4
  004d2	6b c2 1c	 imul	 eax, edx, 28
  004d5	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  004d8	50		 push	 eax
  004d9	b9 04 00 00 00	 mov	 ecx, 4
  004de	6b d1 1c	 imul	 edx, ecx, 28
  004e1	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  004e4	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  004e7	51		 push	 ecx
  004e8	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  004eb	52		 push	 edx
  004ec	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  004f1	83 c4 0c	 add	 esp, 12			; 0000000cH
  004f4	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 696  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[29], &u_buf[29]);

  004f7	b8 04 00 00 00	 mov	 eax, 4
  004fc	6b c8 1d	 imul	 ecx, eax, 29
  004ff	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  00502	51		 push	 ecx
  00503	ba 04 00 00 00	 mov	 edx, 4
  00508	6b c2 1d	 imul	 eax, edx, 29
  0050b	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  0050e	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00511	52		 push	 edx
  00512	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  00515	50		 push	 eax
  00516	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  0051b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0051e	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 697  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[30], &u_buf[30]);

  00521	b9 04 00 00 00	 mov	 ecx, 4
  00526	6b d1 1e	 imul	 edx, ecx, 30
  00529	03 55 08	 add	 edx, DWORD PTR _u_buf$[ebp]
  0052c	52		 push	 edx
  0052d	b8 04 00 00 00	 mov	 eax, 4
  00532	6b c8 1e	 imul	 ecx, eax, 30
  00535	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  00538	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0053b	50		 push	 eax
  0053c	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  0053f	51		 push	 ecx
  00540	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00545	83 c4 0c	 add	 esp, 12			; 0000000cH
  00548	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 698  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[31], &u_buf[31]);

  0054b	ba 04 00 00 00	 mov	 edx, 4
  00550	6b c2 1f	 imul	 eax, edx, 31
  00553	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  00556	50		 push	 eax
  00557	b9 04 00 00 00	 mov	 ecx, 4
  0055c	6b d1 1f	 imul	 edx, ecx, 31
  0055f	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  00562	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00565	51		 push	 ecx
  00566	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00569	52		 push	 edx
  0056a	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  0056f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00572	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 699  :             u_buf += 32;

  00575	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  00578	05 80 00 00 00	 add	 eax, 128		; 00000080H
  0057d	89 45 08	 mov	 DWORD PTR _u_buf$[ebp], eax

; 700  :             --count;

  00580	8b 4d f8	 mov	 ecx, DWORD PTR _count$[ebp]
  00583	83 e9 01	 sub	 ecx, 1
  00586	89 4d f8	 mov	 DWORD PTR _count$[ebp], ecx

; 701  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 702  :             if (sizeof(k) == sizeof(_UINT32_T))

  00589	ba 01 00 00 00	 mov	 edx, 1
  0058e	85 d2		 test	 edx, edx
  00590	74 0c		 je	 SHORT $LN4@MultiplyAn

; 703  :                 AddToMULTI32Counter(32);

  00592	6a 20		 push	 32			; 00000020H
  00594	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
  00599	83 c4 04	 add	 esp, 4

; 704  :             else

  0059c	eb 0a		 jmp	 SHORT $LN5@MultiplyAn
$LN4@MultiplyAn:

; 705  :                 AddToMULTI64Counter(32);

  0059e	6a 20		 push	 32			; 00000020H
  005a0	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
  005a5	83 c4 04	 add	 esp, 4
$LN5@MultiplyAn:

; 706  : #endif
; 707  :         }

  005a8	e9 80 fa ff ff	 jmp	 $LN2@MultiplyAn
$LN3@MultiplyAn:

; 708  : 
; 709  :         if (u_count & 0x10)

  005ad	8b 45 0c	 mov	 eax, DWORD PTR _u_count$[ebp]
  005b0	83 e0 10	 and	 eax, 16			; 00000010H
  005b3	0f 84 c6 02 00
	00		 je	 $LN6@MultiplyAn

; 710  :         {
; 711  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[0], &u_buf[0]);

  005b9	b9 04 00 00 00	 mov	 ecx, 4
  005be	6b d1 00	 imul	 edx, ecx, 0
  005c1	03 55 08	 add	 edx, DWORD PTR _u_buf$[ebp]
  005c4	52		 push	 edx
  005c5	b8 04 00 00 00	 mov	 eax, 4
  005ca	6b c8 00	 imul	 ecx, eax, 0
  005cd	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  005d0	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  005d3	50		 push	 eax
  005d4	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  005d7	51		 push	 ecx
  005d8	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  005dd	83 c4 0c	 add	 esp, 12			; 0000000cH
  005e0	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 712  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[1], &u_buf[1]);

  005e3	ba 04 00 00 00	 mov	 edx, 4
  005e8	c1 e2 00	 shl	 edx, 0
  005eb	03 55 08	 add	 edx, DWORD PTR _u_buf$[ebp]
  005ee	52		 push	 edx
  005ef	b8 04 00 00 00	 mov	 eax, 4
  005f4	c1 e0 00	 shl	 eax, 0
  005f7	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  005fa	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  005fd	52		 push	 edx
  005fe	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  00601	50		 push	 eax
  00602	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00607	83 c4 0c	 add	 esp, 12			; 0000000cH
  0060a	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 713  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[2], &u_buf[2]);

  0060d	b9 04 00 00 00	 mov	 ecx, 4
  00612	d1 e1		 shl	 ecx, 1
  00614	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  00617	51		 push	 ecx
  00618	ba 04 00 00 00	 mov	 edx, 4
  0061d	d1 e2		 shl	 edx, 1
  0061f	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  00622	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00625	51		 push	 ecx
  00626	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00629	52		 push	 edx
  0062a	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  0062f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00632	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 714  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[3], &u_buf[3]);

  00635	b8 04 00 00 00	 mov	 eax, 4
  0063a	6b c8 03	 imul	 ecx, eax, 3
  0063d	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  00640	51		 push	 ecx
  00641	ba 04 00 00 00	 mov	 edx, 4
  00646	6b c2 03	 imul	 eax, edx, 3
  00649	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  0064c	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0064f	52		 push	 edx
  00650	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  00653	50		 push	 eax
  00654	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00659	83 c4 0c	 add	 esp, 12			; 0000000cH
  0065c	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 715  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[4], &u_buf[4]);

  0065f	b9 04 00 00 00	 mov	 ecx, 4
  00664	c1 e1 02	 shl	 ecx, 2
  00667	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  0066a	51		 push	 ecx
  0066b	ba 04 00 00 00	 mov	 edx, 4
  00670	c1 e2 02	 shl	 edx, 2
  00673	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  00676	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00679	51		 push	 ecx
  0067a	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  0067d	52		 push	 edx
  0067e	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00683	83 c4 0c	 add	 esp, 12			; 0000000cH
  00686	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 716  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[5], &u_buf[5]);

  00689	b8 04 00 00 00	 mov	 eax, 4
  0068e	6b c8 05	 imul	 ecx, eax, 5
  00691	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  00694	51		 push	 ecx
  00695	ba 04 00 00 00	 mov	 edx, 4
  0069a	6b c2 05	 imul	 eax, edx, 5
  0069d	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  006a0	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  006a3	52		 push	 edx
  006a4	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  006a7	50		 push	 eax
  006a8	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  006ad	83 c4 0c	 add	 esp, 12			; 0000000cH
  006b0	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 717  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[6], &u_buf[6]);

  006b3	b9 04 00 00 00	 mov	 ecx, 4
  006b8	6b d1 06	 imul	 edx, ecx, 6
  006bb	03 55 08	 add	 edx, DWORD PTR _u_buf$[ebp]
  006be	52		 push	 edx
  006bf	b8 04 00 00 00	 mov	 eax, 4
  006c4	6b c8 06	 imul	 ecx, eax, 6
  006c7	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  006ca	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  006cd	50		 push	 eax
  006ce	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  006d1	51		 push	 ecx
  006d2	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  006d7	83 c4 0c	 add	 esp, 12			; 0000000cH
  006da	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 718  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[7], &u_buf[7]);

  006dd	ba 04 00 00 00	 mov	 edx, 4
  006e2	6b c2 07	 imul	 eax, edx, 7
  006e5	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  006e8	50		 push	 eax
  006e9	b9 04 00 00 00	 mov	 ecx, 4
  006ee	6b d1 07	 imul	 edx, ecx, 7
  006f1	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  006f4	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  006f7	51		 push	 ecx
  006f8	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  006fb	52		 push	 edx
  006fc	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00701	83 c4 0c	 add	 esp, 12			; 0000000cH
  00704	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 719  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[8], &u_buf[8]);

  00707	b8 04 00 00 00	 mov	 eax, 4
  0070c	c1 e0 03	 shl	 eax, 3
  0070f	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  00712	50		 push	 eax
  00713	b9 04 00 00 00	 mov	 ecx, 4
  00718	c1 e1 03	 shl	 ecx, 3
  0071b	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  0071e	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00721	50		 push	 eax
  00722	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  00725	51		 push	 ecx
  00726	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  0072b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0072e	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 720  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[9], &u_buf[9]);

  00731	ba 04 00 00 00	 mov	 edx, 4
  00736	6b c2 09	 imul	 eax, edx, 9
  00739	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  0073c	50		 push	 eax
  0073d	b9 04 00 00 00	 mov	 ecx, 4
  00742	6b d1 09	 imul	 edx, ecx, 9
  00745	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  00748	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  0074b	51		 push	 ecx
  0074c	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  0074f	52		 push	 edx
  00750	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00755	83 c4 0c	 add	 esp, 12			; 0000000cH
  00758	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 721  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[10], &u_buf[10]);

  0075b	b8 04 00 00 00	 mov	 eax, 4
  00760	6b c8 0a	 imul	 ecx, eax, 10
  00763	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  00766	51		 push	 ecx
  00767	ba 04 00 00 00	 mov	 edx, 4
  0076c	6b c2 0a	 imul	 eax, edx, 10
  0076f	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  00772	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00775	52		 push	 edx
  00776	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  00779	50		 push	 eax
  0077a	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  0077f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00782	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 722  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[11], &u_buf[11]);

  00785	b9 04 00 00 00	 mov	 ecx, 4
  0078a	6b d1 0b	 imul	 edx, ecx, 11
  0078d	03 55 08	 add	 edx, DWORD PTR _u_buf$[ebp]
  00790	52		 push	 edx
  00791	b8 04 00 00 00	 mov	 eax, 4
  00796	6b c8 0b	 imul	 ecx, eax, 11
  00799	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  0079c	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0079f	50		 push	 eax
  007a0	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  007a3	51		 push	 ecx
  007a4	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  007a9	83 c4 0c	 add	 esp, 12			; 0000000cH
  007ac	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 723  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[12], &u_buf[12]);

  007af	ba 04 00 00 00	 mov	 edx, 4
  007b4	6b c2 0c	 imul	 eax, edx, 12
  007b7	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  007ba	50		 push	 eax
  007bb	b9 04 00 00 00	 mov	 ecx, 4
  007c0	6b d1 0c	 imul	 edx, ecx, 12
  007c3	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  007c6	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  007c9	51		 push	 ecx
  007ca	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  007cd	52		 push	 edx
  007ce	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  007d3	83 c4 0c	 add	 esp, 12			; 0000000cH
  007d6	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 724  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[13], &u_buf[13]);

  007d9	b8 04 00 00 00	 mov	 eax, 4
  007de	6b c8 0d	 imul	 ecx, eax, 13
  007e1	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  007e4	51		 push	 ecx
  007e5	ba 04 00 00 00	 mov	 edx, 4
  007ea	6b c2 0d	 imul	 eax, edx, 13
  007ed	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  007f0	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  007f3	52		 push	 edx
  007f4	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  007f7	50		 push	 eax
  007f8	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  007fd	83 c4 0c	 add	 esp, 12			; 0000000cH
  00800	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 725  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[14], &u_buf[14]);

  00803	b9 04 00 00 00	 mov	 ecx, 4
  00808	6b d1 0e	 imul	 edx, ecx, 14
  0080b	03 55 08	 add	 edx, DWORD PTR _u_buf$[ebp]
  0080e	52		 push	 edx
  0080f	b8 04 00 00 00	 mov	 eax, 4
  00814	6b c8 0e	 imul	 ecx, eax, 14
  00817	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  0081a	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0081d	50		 push	 eax
  0081e	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  00821	51		 push	 ecx
  00822	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00827	83 c4 0c	 add	 esp, 12			; 0000000cH
  0082a	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 726  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[15], &u_buf[15]);

  0082d	ba 04 00 00 00	 mov	 edx, 4
  00832	6b c2 0f	 imul	 eax, edx, 15
  00835	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  00838	50		 push	 eax
  00839	b9 04 00 00 00	 mov	 ecx, 4
  0083e	6b d1 0f	 imul	 edx, ecx, 15
  00841	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  00844	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00847	51		 push	 ecx
  00848	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  0084b	52		 push	 edx
  0084c	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00851	83 c4 0c	 add	 esp, 12			; 0000000cH
  00854	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 727  :             u_buf += 16;

  00857	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  0085a	83 c0 40	 add	 eax, 64			; 00000040H
  0085d	89 45 08	 mov	 DWORD PTR _u_buf$[ebp], eax

; 728  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 729  :             if (sizeof(k) == sizeof(_UINT32_T))

  00860	b9 01 00 00 00	 mov	 ecx, 1
  00865	85 c9		 test	 ecx, ecx
  00867	74 0c		 je	 SHORT $LN7@MultiplyAn

; 730  :                 AddToMULTI32Counter(16);

  00869	6a 10		 push	 16			; 00000010H
  0086b	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
  00870	83 c4 04	 add	 esp, 4

; 731  :             else

  00873	eb 0a		 jmp	 SHORT $LN6@MultiplyAn
$LN7@MultiplyAn:

; 732  :                 AddToMULTI64Counter(16);

  00875	6a 10		 push	 16			; 00000010H
  00877	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
  0087c	83 c4 04	 add	 esp, 4
$LN6@MultiplyAn:

; 733  : #endif
; 734  :         }
; 735  : 
; 736  :         if (u_count & 0x8)

  0087f	8b 55 0c	 mov	 edx, DWORD PTR _u_count$[ebp]
  00882	83 e2 08	 and	 edx, 8
  00885	0f 84 76 01 00
	00		 je	 $LN9@MultiplyAn

; 737  :         {
; 738  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[0], &u_buf[0]);

  0088b	b8 04 00 00 00	 mov	 eax, 4
  00890	6b c8 00	 imul	 ecx, eax, 0
  00893	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  00896	51		 push	 ecx
  00897	ba 04 00 00 00	 mov	 edx, 4
  0089c	6b c2 00	 imul	 eax, edx, 0
  0089f	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  008a2	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  008a5	52		 push	 edx
  008a6	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  008a9	50		 push	 eax
  008aa	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  008af	83 c4 0c	 add	 esp, 12			; 0000000cH
  008b2	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 739  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[1], &u_buf[1]);

  008b5	b9 04 00 00 00	 mov	 ecx, 4
  008ba	c1 e1 00	 shl	 ecx, 0
  008bd	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  008c0	51		 push	 ecx
  008c1	ba 04 00 00 00	 mov	 edx, 4
  008c6	c1 e2 00	 shl	 edx, 0
  008c9	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  008cc	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  008cf	51		 push	 ecx
  008d0	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  008d3	52		 push	 edx
  008d4	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  008d9	83 c4 0c	 add	 esp, 12			; 0000000cH
  008dc	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 740  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[2], &u_buf[2]);

  008df	b8 04 00 00 00	 mov	 eax, 4
  008e4	d1 e0		 shl	 eax, 1
  008e6	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  008e9	50		 push	 eax
  008ea	b9 04 00 00 00	 mov	 ecx, 4
  008ef	d1 e1		 shl	 ecx, 1
  008f1	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  008f4	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  008f7	50		 push	 eax
  008f8	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  008fb	51		 push	 ecx
  008fc	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00901	83 c4 0c	 add	 esp, 12			; 0000000cH
  00904	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 741  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[3], &u_buf[3]);

  00907	ba 04 00 00 00	 mov	 edx, 4
  0090c	6b c2 03	 imul	 eax, edx, 3
  0090f	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  00912	50		 push	 eax
  00913	b9 04 00 00 00	 mov	 ecx, 4
  00918	6b d1 03	 imul	 edx, ecx, 3
  0091b	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  0091e	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00921	51		 push	 ecx
  00922	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00925	52		 push	 edx
  00926	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  0092b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0092e	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 742  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[4], &u_buf[4]);

  00931	b8 04 00 00 00	 mov	 eax, 4
  00936	c1 e0 02	 shl	 eax, 2
  00939	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  0093c	50		 push	 eax
  0093d	b9 04 00 00 00	 mov	 ecx, 4
  00942	c1 e1 02	 shl	 ecx, 2
  00945	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  00948	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0094b	50		 push	 eax
  0094c	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  0094f	51		 push	 ecx
  00950	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00955	83 c4 0c	 add	 esp, 12			; 0000000cH
  00958	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 743  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[5], &u_buf[5]);

  0095b	ba 04 00 00 00	 mov	 edx, 4
  00960	6b c2 05	 imul	 eax, edx, 5
  00963	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  00966	50		 push	 eax
  00967	b9 04 00 00 00	 mov	 ecx, 4
  0096c	6b d1 05	 imul	 edx, ecx, 5
  0096f	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  00972	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00975	51		 push	 ecx
  00976	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00979	52		 push	 edx
  0097a	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  0097f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00982	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 744  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[6], &u_buf[6]);

  00985	b8 04 00 00 00	 mov	 eax, 4
  0098a	6b c8 06	 imul	 ecx, eax, 6
  0098d	03 4d 08	 add	 ecx, DWORD PTR _u_buf$[ebp]
  00990	51		 push	 ecx
  00991	ba 04 00 00 00	 mov	 edx, 4
  00996	6b c2 06	 imul	 eax, edx, 6
  00999	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  0099c	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0099f	52		 push	 edx
  009a0	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  009a3	50		 push	 eax
  009a4	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  009a9	83 c4 0c	 add	 esp, 12			; 0000000cH
  009ac	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 745  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[7], &u_buf[7]);

  009af	b9 04 00 00 00	 mov	 ecx, 4
  009b4	6b d1 07	 imul	 edx, ecx, 7
  009b7	03 55 08	 add	 edx, DWORD PTR _u_buf$[ebp]
  009ba	52		 push	 edx
  009bb	b8 04 00 00 00	 mov	 eax, 4
  009c0	6b c8 07	 imul	 ecx, eax, 7
  009c3	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  009c6	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  009c9	50		 push	 eax
  009ca	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  009cd	51		 push	 ecx
  009ce	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  009d3	83 c4 0c	 add	 esp, 12			; 0000000cH
  009d6	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 746  :             u_buf += 8;

  009d9	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  009dc	83 c2 20	 add	 edx, 32			; 00000020H
  009df	89 55 08	 mov	 DWORD PTR _u_buf$[ebp], edx

; 747  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 748  :             if (sizeof(k) == sizeof(_UINT32_T))

  009e2	b8 01 00 00 00	 mov	 eax, 1
  009e7	85 c0		 test	 eax, eax
  009e9	74 0c		 je	 SHORT $LN10@MultiplyAn

; 749  :                 AddToMULTI32Counter(8);

  009eb	6a 08		 push	 8
  009ed	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
  009f2	83 c4 04	 add	 esp, 4

; 750  :             else

  009f5	eb 0a		 jmp	 SHORT $LN9@MultiplyAn
$LN10@MultiplyAn:

; 751  :                 AddToMULTI64Counter(8);

  009f7	6a 08		 push	 8
  009f9	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
  009fe	83 c4 04	 add	 esp, 4
$LN9@MultiplyAn:

; 752  : #endif
; 753  :         }
; 754  : 
; 755  :         if (u_count & 0x4)

  00a01	8b 4d 0c	 mov	 ecx, DWORD PTR _u_count$[ebp]
  00a04	83 e1 04	 and	 ecx, 4
  00a07	0f 84 ce 00 00
	00		 je	 $LN12@MultiplyAn

; 756  :         {
; 757  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[0], &u_buf[0]);

  00a0d	ba 04 00 00 00	 mov	 edx, 4
  00a12	6b c2 00	 imul	 eax, edx, 0
  00a15	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  00a18	50		 push	 eax
  00a19	b9 04 00 00 00	 mov	 ecx, 4
  00a1e	6b d1 00	 imul	 edx, ecx, 0
  00a21	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  00a24	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00a27	51		 push	 ecx
  00a28	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00a2b	52		 push	 edx
  00a2c	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00a31	83 c4 0c	 add	 esp, 12			; 0000000cH
  00a34	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 758  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[1], &u_buf[1]);

  00a37	b8 04 00 00 00	 mov	 eax, 4
  00a3c	c1 e0 00	 shl	 eax, 0
  00a3f	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  00a42	50		 push	 eax
  00a43	b9 04 00 00 00	 mov	 ecx, 4
  00a48	c1 e1 00	 shl	 ecx, 0
  00a4b	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  00a4e	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00a51	50		 push	 eax
  00a52	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  00a55	51		 push	 ecx
  00a56	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00a5b	83 c4 0c	 add	 esp, 12			; 0000000cH
  00a5e	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 759  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[2], &u_buf[2]);

  00a61	ba 04 00 00 00	 mov	 edx, 4
  00a66	d1 e2		 shl	 edx, 1
  00a68	03 55 08	 add	 edx, DWORD PTR _u_buf$[ebp]
  00a6b	52		 push	 edx
  00a6c	b8 04 00 00 00	 mov	 eax, 4
  00a71	d1 e0		 shl	 eax, 1
  00a73	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  00a76	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00a79	52		 push	 edx
  00a7a	8b 45 fc	 mov	 eax, DWORD PTR _k$[ebp]
  00a7d	50		 push	 eax
  00a7e	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00a83	83 c4 0c	 add	 esp, 12			; 0000000cH
  00a86	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 760  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[3], &u_buf[3]);

  00a89	b9 04 00 00 00	 mov	 ecx, 4
  00a8e	6b d1 03	 imul	 edx, ecx, 3
  00a91	03 55 08	 add	 edx, DWORD PTR _u_buf$[ebp]
  00a94	52		 push	 edx
  00a95	b8 04 00 00 00	 mov	 eax, 4
  00a9a	6b c8 03	 imul	 ecx, eax, 3
  00a9d	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  00aa0	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00aa3	50		 push	 eax
  00aa4	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  00aa7	51		 push	 ecx
  00aa8	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00aad	83 c4 0c	 add	 esp, 12			; 0000000cH
  00ab0	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 761  :             u_buf += 4;

  00ab3	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  00ab6	83 c2 10	 add	 edx, 16			; 00000010H
  00ab9	89 55 08	 mov	 DWORD PTR _u_buf$[ebp], edx

; 762  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 763  :             if (sizeof(k) == sizeof(_UINT32_T))

  00abc	b8 01 00 00 00	 mov	 eax, 1
  00ac1	85 c0		 test	 eax, eax
  00ac3	74 0c		 je	 SHORT $LN13@MultiplyAn

; 764  :                 AddToMULTI32Counter(4);

  00ac5	6a 04		 push	 4
  00ac7	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
  00acc	83 c4 04	 add	 esp, 4

; 765  :             else

  00acf	eb 0a		 jmp	 SHORT $LN12@MultiplyAn
$LN13@MultiplyAn:

; 766  :                 AddToMULTI64Counter(4);

  00ad1	6a 04		 push	 4
  00ad3	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
  00ad8	83 c4 04	 add	 esp, 4
$LN12@MultiplyAn:

; 767  : #endif
; 768  :         }
; 769  : 
; 770  :         if (u_count & 0x2)

  00adb	8b 4d 0c	 mov	 ecx, DWORD PTR _u_count$[ebp]
  00ade	83 e1 02	 and	 ecx, 2
  00ae1	74 7c		 je	 SHORT $LN15@MultiplyAn

; 771  :         {
; 772  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[0], &u_buf[0]);

  00ae3	ba 04 00 00 00	 mov	 edx, 4
  00ae8	6b c2 00	 imul	 eax, edx, 0
  00aeb	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  00aee	50		 push	 eax
  00aef	b9 04 00 00 00	 mov	 ecx, 4
  00af4	6b d1 00	 imul	 edx, ecx, 0
  00af7	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  00afa	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00afd	51		 push	 ecx
  00afe	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00b01	52		 push	 edx
  00b02	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00b07	83 c4 0c	 add	 esp, 12			; 0000000cH
  00b0a	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 773  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[1], &u_buf[1]);

  00b0d	b8 04 00 00 00	 mov	 eax, 4
  00b12	c1 e0 00	 shl	 eax, 0
  00b15	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  00b18	50		 push	 eax
  00b19	b9 04 00 00 00	 mov	 ecx, 4
  00b1e	c1 e1 00	 shl	 ecx, 0
  00b21	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  00b24	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00b27	50		 push	 eax
  00b28	8b 4d fc	 mov	 ecx, DWORD PTR _k$[ebp]
  00b2b	51		 push	 ecx
  00b2c	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00b31	83 c4 0c	 add	 esp, 12			; 0000000cH
  00b34	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 774  :             u_buf += 2;

  00b37	8b 55 08	 mov	 edx, DWORD PTR _u_buf$[ebp]
  00b3a	83 c2 08	 add	 edx, 8
  00b3d	89 55 08	 mov	 DWORD PTR _u_buf$[ebp], edx

; 775  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 776  :             if (sizeof(k) == sizeof(_UINT32_T))

  00b40	b8 01 00 00 00	 mov	 eax, 1
  00b45	85 c0		 test	 eax, eax
  00b47	74 0c		 je	 SHORT $LN16@MultiplyAn

; 777  :                 AddToMULTI32Counter(2);

  00b49	6a 02		 push	 2
  00b4b	e8 00 00 00 00	 call	 ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
  00b50	83 c4 04	 add	 esp, 4

; 778  :             else

  00b53	eb 0a		 jmp	 SHORT $LN15@MultiplyAn
$LN16@MultiplyAn:

; 779  :                 AddToMULTI64Counter(2);

  00b55	6a 02		 push	 2
  00b57	e8 00 00 00 00	 call	 ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
  00b5c	83 c4 04	 add	 esp, 4
$LN15@MultiplyAn:

; 780  : #endif
; 781  :         }
; 782  : 
; 783  :         if (u_count & 0x1)

  00b5f	8b 4d 0c	 mov	 ecx, DWORD PTR _u_count$[ebp]
  00b62	83 e1 01	 and	 ecx, 1
  00b65	74 48		 je	 SHORT $LN18@MultiplyAn

; 784  :         {
; 785  :             k = MultiplyAndAdd1Word_using_ADC_MUL(k, u_buf[0], &u_buf[0]);

  00b67	ba 04 00 00 00	 mov	 edx, 4
  00b6c	6b c2 00	 imul	 eax, edx, 0
  00b6f	03 45 08	 add	 eax, DWORD PTR _u_buf$[ebp]
  00b72	50		 push	 eax
  00b73	b9 04 00 00 00	 mov	 ecx, 4
  00b78	6b d1 00	 imul	 edx, ecx, 0
  00b7b	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  00b7e	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00b81	51		 push	 ecx
  00b82	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00b85	52		 push	 edx
  00b86	e8 00 00 00 00	 call	 ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
  00b8b	83 c4 0c	 add	 esp, 12			; 0000000cH
  00b8e	89 45 fc	 mov	 DWORD PTR _k$[ebp], eax

; 786  :             u_buf += 1;

  00b91	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  00b94	83 c0 04	 add	 eax, 4
  00b97	89 45 08	 mov	 DWORD PTR _u_buf$[ebp], eax

; 787  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 788  :             if (sizeof(k) == sizeof(_UINT32_T))

  00b9a	b9 01 00 00 00	 mov	 ecx, 1
  00b9f	85 c9		 test	 ecx, ecx
  00ba1	74 07		 je	 SHORT $LN19@MultiplyAn

; 789  :                 IncrementMULTI32Counter();

  00ba3	e8 00 00 00 00	 call	 ?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementMULTI32Counter

; 790  :             else

  00ba8	eb 05		 jmp	 SHORT $LN18@MultiplyAn
$LN19@MultiplyAn:

; 791  :                 IncrementMULTI64Counter();

  00baa	e8 00 00 00 00	 call	 ?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ ; Palmtree::Math::Core::Internal::IncrementMULTI64Counter
$LN18@MultiplyAn:

; 792  : #endif
; 793  :         }
; 794  : 
; 795  :         if (k > 0)

  00baf	83 7d fc 00	 cmp	 DWORD PTR _k$[ebp], 0
  00bb3	76 1a		 jbe	 SHORT $LN21@MultiplyAn

; 796  :         {
; 797  :             u_buf[0] = k;

  00bb5	ba 04 00 00 00	 mov	 edx, 4
  00bba	6b c2 00	 imul	 eax, edx, 0
  00bbd	8b 4d 08	 mov	 ecx, DWORD PTR _u_buf$[ebp]
  00bc0	8b 55 fc	 mov	 edx, DWORD PTR _k$[ebp]
  00bc3	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 798  :             u_buf += 1;

  00bc6	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]
  00bc9	83 c0 04	 add	 eax, 4
  00bcc	89 45 08	 mov	 DWORD PTR _u_buf$[ebp], eax
$LN21@MultiplyAn:

; 799  :         }
; 800  : 
; 801  :         return (u_buf);

  00bcf	8b 45 08	 mov	 eax, DWORD PTR _u_buf$[ebp]

; 802  :     }

  00bd2	83 c4 08	 add	 esp, 8
  00bd5	3b ec		 cmp	 ebp, esp
  00bd7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00bdc	8b e5		 mov	 esp, ebp
  00bde	5d		 pop	 ebp
  00bdf	c3		 ret	 0
?MultiplyAndAdd_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAPAIPAIII@Z ENDP ; Palmtree::Math::Core::Internal::MultiplyAndAdd_using_ADC_MUL
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
_TEXT	SEGMENT
tv79 = -25						; size = 1
tv81 = -24						; size = 4
_t_lo$ = -20						; size = 4
_t_hi$ = -12						; size = 4
_base_value$ = -4					; size = 4
_k$ = 8							; size = 4
_u$ = 12						; size = 4
_w_buf$ = 16						; size = 4
?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z PROC ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX

; 647  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000e	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00011	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00014	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00017	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001a	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001d	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __F159A697_pmc_parse@cpp
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 648  : #ifdef _M_IX86
; 649  :         __UNIT_TYPE base_value = 1000000000U; // 10^9

  0002a	c7 45 fc 00 ca
	9a 3b		 mov	 DWORD PTR _base_value$[ebp], 1000000000 ; 3b9aca00H

; 650  : #elif defined(_M_X64)
; 651  :         __UNIT_TYPE base_value = 10000000000000000000UL; // 10^19
; 652  : #else
; 653  : #error unknown platform
; 654  : #endif
; 655  :         __UNIT_TYPE t_hi;
; 656  :         __UNIT_TYPE t_lo = _MULTIPLYX_UNIT(u, base_value, &t_hi);

  00031	8d 45 f4	 lea	 eax, DWORD PTR _t_hi$[ebp]
  00034	50		 push	 eax
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _base_value$[ebp]
  00038	51		 push	 ecx
  00039	8b 55 0c	 mov	 edx, DWORD PTR _u$[ebp]
  0003c	52		 push	 edx
  0003d	e8 00 00 00 00	 call	 __MULTIPLYX_UNIT
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH
  00045	89 45 ec	 mov	 DWORD PTR _t_lo$[ebp], eax

; 657  :         _ADDX_UNIT(_ADDX_UNIT(0, t_lo, k, w_buf), t_hi, 0, &k);

  00048	8b 45 f4	 mov	 eax, DWORD PTR _t_hi$[ebp]
  0004b	89 45 e8	 mov	 DWORD PTR tv81[ebp], eax
  0004e	8b 4d 10	 mov	 ecx, DWORD PTR _w_buf$[ebp]
  00051	51		 push	 ecx
  00052	8b 55 08	 mov	 edx, DWORD PTR _k$[ebp]
  00055	52		 push	 edx
  00056	8b 45 ec	 mov	 eax, DWORD PTR _t_lo$[ebp]
  00059	50		 push	 eax
  0005a	6a 00		 push	 0
  0005c	e8 00 00 00 00	 call	 __ADDX_UNIT
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	88 45 e7	 mov	 BYTE PTR tv79[ebp], al
  00067	8d 4d 08	 lea	 ecx, DWORD PTR _k$[ebp]
  0006a	51		 push	 ecx
  0006b	6a 00		 push	 0
  0006d	8b 55 e8	 mov	 edx, DWORD PTR tv81[ebp]
  00070	52		 push	 edx
  00071	0f b6 45 e7	 movzx	 eax, BYTE PTR tv79[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 __ADDX_UNIT
  0007b	83 c4 10	 add	 esp, 16			; 00000010H

; 658  :         return (k);

  0007e	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 659  :     }

  00081	52		 push	 edx
  00082	8b cd		 mov	 ecx, ebp
  00084	50		 push	 eax
  00085	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@MultiplyAn
  0008b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00090	58		 pop	 eax
  00091	5a		 pop	 edx
  00092	83 c4 1c	 add	 esp, 28			; 0000001cH
  00095	3b ec		 cmp	 ebp, esp
  00097	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c3		 ret	 0
$LN5@MultiplyAn:
  000a0	01 00 00 00	 DD	 1
  000a4	00 00 00 00	 DD	 $LN4@MultiplyAn
$LN4@MultiplyAn:
  000a8	f4 ff ff ff	 DD	 -12			; fffffff4H
  000ac	04 00 00 00	 DD	 4
  000b0	00 00 00 00	 DD	 $LN3@MultiplyAn
$LN3@MultiplyAn:
  000b4	74		 DB	 116			; 00000074H
  000b5	5f		 DB	 95			; 0000005fH
  000b6	68		 DB	 104			; 00000068H
  000b7	69		 DB	 105			; 00000069H
  000b8	00		 DB	 0
?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ENDP ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
_TEXT	SEGMENT
tv79 = -25						; size = 1
tv81 = -24						; size = 4
_t_lo$ = -20						; size = 4
_t_hi$ = -12						; size = 4
_base_value$ = -4					; size = 4
_k$ = 8							; size = 4
_u$ = 12						; size = 4
_w_buf$ = 16						; size = 4
?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z PROC ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL

; 632  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000e	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00011	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00014	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00017	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001a	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001d	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET __F159A697_pmc_parse@cpp
  00025	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 633  : #ifdef _M_IX86
; 634  :         __UNIT_TYPE base_value = 1000000000U; // 10^9

  0002a	c7 45 fc 00 ca
	9a 3b		 mov	 DWORD PTR _base_value$[ebp], 1000000000 ; 3b9aca00H

; 635  : #elif defined(_M_X64)
; 636  :         __UNIT_TYPE base_value = 10000000000000000000UL; // 10^19
; 637  : #else
; 638  : #error unknown platform
; 639  : #endif
; 640  :         __UNIT_TYPE t_hi;
; 641  :         __UNIT_TYPE t_lo = _MULTIPLY_UNIT(u, base_value, &t_hi);

  00031	8d 45 f4	 lea	 eax, DWORD PTR _t_hi$[ebp]
  00034	50		 push	 eax
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _base_value$[ebp]
  00038	51		 push	 ecx
  00039	8b 55 0c	 mov	 edx, DWORD PTR _u$[ebp]
  0003c	52		 push	 edx
  0003d	e8 00 00 00 00	 call	 __MULTIPLY_UNIT
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH
  00045	89 45 ec	 mov	 DWORD PTR _t_lo$[ebp], eax

; 642  :         _ADD_UNIT(_ADD_UNIT(0, t_lo, k, w_buf), t_hi, 0, &k);

  00048	8b 45 f4	 mov	 eax, DWORD PTR _t_hi$[ebp]
  0004b	89 45 e8	 mov	 DWORD PTR tv81[ebp], eax
  0004e	8b 4d 10	 mov	 ecx, DWORD PTR _w_buf$[ebp]
  00051	51		 push	 ecx
  00052	8b 55 08	 mov	 edx, DWORD PTR _k$[ebp]
  00055	52		 push	 edx
  00056	8b 45 ec	 mov	 eax, DWORD PTR _t_lo$[ebp]
  00059	50		 push	 eax
  0005a	6a 00		 push	 0
  0005c	e8 00 00 00 00	 call	 __ADD_UNIT
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	88 45 e7	 mov	 BYTE PTR tv79[ebp], al
  00067	8d 4d 08	 lea	 ecx, DWORD PTR _k$[ebp]
  0006a	51		 push	 ecx
  0006b	6a 00		 push	 0
  0006d	8b 55 e8	 mov	 edx, DWORD PTR tv81[ebp]
  00070	52		 push	 edx
  00071	0f b6 45 e7	 movzx	 eax, BYTE PTR tv79[ebp]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 __ADD_UNIT
  0007b	83 c4 10	 add	 esp, 16			; 00000010H

; 643  :         return (k);

  0007e	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]

; 644  :     }

  00081	52		 push	 edx
  00082	8b cd		 mov	 ecx, ebp
  00084	50		 push	 eax
  00085	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@MultiplyAn
  0008b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00090	58		 pop	 eax
  00091	5a		 pop	 edx
  00092	83 c4 1c	 add	 esp, 28			; 0000001cH
  00095	3b ec		 cmp	 ebp, esp
  00097	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c3		 ret	 0
$LN5@MultiplyAn:
  000a0	01 00 00 00	 DD	 1
  000a4	00 00 00 00	 DD	 $LN4@MultiplyAn
$LN4@MultiplyAn:
  000a8	f4 ff ff ff	 DD	 -12			; fffffff4H
  000ac	04 00 00 00	 DD	 4
  000b0	00 00 00 00	 DD	 $LN3@MultiplyAn
$LN3@MultiplyAn:
  000b4	74		 DB	 116			; 00000074H
  000b5	5f		 DB	 95			; 0000005fH
  000b6	68		 DB	 104			; 00000068H
  000b7	69		 DB	 105			; 00000069H
  000b8	00		 DB	 0
?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAIIIPAI@Z ENDP ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
_TEXT	SEGMENT
_r$ = -20						; size = 4
_source_count$ = -16					; size = 4
_out_ptr$ = -12						; size = 4
_in_ptr$ = -8						; size = 4
_word_digit_count$ = -4					; size = 4
_source$ = 8						; size = 4
_out_buf$ = 12						; size = 4
_out_buf_count$ = 16					; size = 4
?BuildBinaryFromDecimalString@Internal@Core@Math@Palmtree@@YAXPA_WPAI1@Z PROC ; Palmtree::Math::Core::Internal::BuildBinaryFromDecimalString

; 604  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00012	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00015	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00018	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __F159A697_pmc_parse@cpp
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 605  : #ifdef _M_IX86
; 606  :         int word_digit_count = 9;

  00025	c7 45 fc 09 00
	00 00		 mov	 DWORD PTR _word_digit_count$[ebp], 9

; 607  : #elif defined(_M_X64)
; 608  :         int word_digit_count = 19;
; 609  : #else
; 610  : #error unknown platform
; 611  : #endif
; 612  :         wchar_t* in_ptr = source;

  0002c	8b 45 08	 mov	 eax, DWORD PTR _source$[ebp]
  0002f	89 45 f8	 mov	 DWORD PTR _in_ptr$[ebp], eax

; 613  :         __UNIT_TYPE* out_ptr = out_buf;

  00032	8b 4d 0c	 mov	 ecx, DWORD PTR _out_buf$[ebp]
  00035	89 4d f4	 mov	 DWORD PTR _out_ptr$[ebp], ecx

; 614  :         __UNIT_TYPE source_count = lstrlenW(source);

  00038	8b f4		 mov	 esi, esp
  0003a	8b 55 08	 mov	 edx, DWORD PTR _source$[ebp]
  0003d	52		 push	 edx
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  00044	3b f4		 cmp	 esi, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	89 45 f0	 mov	 DWORD PTR _source_count$[ebp], eax

; 615  :         int r = source_count % word_digit_count;

  0004e	8b 45 f0	 mov	 eax, DWORD PTR _source_count$[ebp]
  00051	33 d2		 xor	 edx, edx
  00053	f7 75 fc	 div	 DWORD PTR _word_digit_count$[ebp]
  00056	89 55 ec	 mov	 DWORD PTR _r$[ebp], edx

; 616  :         if (r > 0)

  00059	83 7d ec 00	 cmp	 DWORD PTR _r$[ebp], 0
  0005d	7e 33		 jle	 SHORT $LN2@BuildBinar

; 617  :         {
; 618  :             *out_ptr++ = BuildLeading1WordFromDecimalString(in_ptr, r);

  0005f	8b 45 ec	 mov	 eax, DWORD PTR _r$[ebp]
  00062	50		 push	 eax
  00063	8b 4d f8	 mov	 ecx, DWORD PTR _in_ptr$[ebp]
  00066	51		 push	 ecx
  00067	e8 00 00 00 00	 call	 ?BuildLeading1WordFromDecimalString@Internal@Core@Math@Palmtree@@YAIPA_WI@Z ; Palmtree::Math::Core::Internal::BuildLeading1WordFromDecimalString
  0006c	83 c4 08	 add	 esp, 8
  0006f	8b 55 f4	 mov	 edx, DWORD PTR _out_ptr$[ebp]
  00072	89 02		 mov	 DWORD PTR [edx], eax
  00074	8b 45 f4	 mov	 eax, DWORD PTR _out_ptr$[ebp]
  00077	83 c0 04	 add	 eax, 4
  0007a	89 45 f4	 mov	 DWORD PTR _out_ptr$[ebp], eax

; 619  :             in_ptr += r;

  0007d	8b 4d ec	 mov	 ecx, DWORD PTR _r$[ebp]
  00080	8b 55 f8	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  00083	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  00086	89 45 f8	 mov	 DWORD PTR _in_ptr$[ebp], eax

; 620  :             source_count -= r;

  00089	8b 4d f0	 mov	 ecx, DWORD PTR _source_count$[ebp]
  0008c	2b 4d ec	 sub	 ecx, DWORD PTR _r$[ebp]
  0008f	89 4d f0	 mov	 DWORD PTR _source_count$[ebp], ecx
$LN2@BuildBinar:

; 621  :         }
; 622  :         while (source_count > 0)

  00092	83 7d f0 00	 cmp	 DWORD PTR _source_count$[ebp], 0
  00096	76 31		 jbe	 SHORT $LN3@BuildBinar

; 623  :         {
; 624  :             *out_ptr++ = Build1WordFromDecimalString(in_ptr);

  00098	8b 55 f8	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  0009b	52		 push	 edx
  0009c	e8 00 00 00 00	 call	 ?Build1WordFromDecimalString@Internal@Core@Math@Palmtree@@YAIPA_W@Z ; Palmtree::Math::Core::Internal::Build1WordFromDecimalString
  000a1	83 c4 04	 add	 esp, 4
  000a4	8b 4d f4	 mov	 ecx, DWORD PTR _out_ptr$[ebp]
  000a7	89 01		 mov	 DWORD PTR [ecx], eax
  000a9	8b 55 f4	 mov	 edx, DWORD PTR _out_ptr$[ebp]
  000ac	83 c2 04	 add	 edx, 4
  000af	89 55 f4	 mov	 DWORD PTR _out_ptr$[ebp], edx

; 625  :             in_ptr += word_digit_count;

  000b2	8b 45 fc	 mov	 eax, DWORD PTR _word_digit_count$[ebp]
  000b5	8b 4d f8	 mov	 ecx, DWORD PTR _in_ptr$[ebp]
  000b8	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  000bb	89 55 f8	 mov	 DWORD PTR _in_ptr$[ebp], edx

; 626  :             source_count -= word_digit_count;

  000be	8b 45 f0	 mov	 eax, DWORD PTR _source_count$[ebp]
  000c1	2b 45 fc	 sub	 eax, DWORD PTR _word_digit_count$[ebp]
  000c4	89 45 f0	 mov	 DWORD PTR _source_count$[ebp], eax

; 627  :         }

  000c7	eb c9		 jmp	 SHORT $LN2@BuildBinar
$LN3@BuildBinar:

; 628  :         *out_buf_count = out_ptr - out_buf;

  000c9	8b 4d f4	 mov	 ecx, DWORD PTR _out_ptr$[ebp]
  000cc	2b 4d 0c	 sub	 ecx, DWORD PTR _out_buf$[ebp]
  000cf	c1 f9 02	 sar	 ecx, 2
  000d2	8b 55 10	 mov	 edx, DWORD PTR _out_buf_count$[ebp]
  000d5	89 0a		 mov	 DWORD PTR [edx], ecx

; 629  :     }

  000d7	5e		 pop	 esi
  000d8	83 c4 14	 add	 esp, 20			; 00000014H
  000db	3b ec		 cmp	 ebp, esp
  000dd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c3		 ret	 0
?BuildBinaryFromDecimalString@Internal@Core@Math@Palmtree@@YAXPA_WPAI1@Z ENDP ; Palmtree::Math::Core::Internal::BuildBinaryFromDecimalString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
_TEXT	SEGMENT
tv209 = -42						; size = 2
tv202 = -40						; size = 2
tv196 = -38						; size = 2
tv189 = -36						; size = 2
tv183 = -34						; size = 2
tv177 = -32						; size = 2
tv171 = -30						; size = 2
tv165 = -28						; size = 2
tv158 = -26						; size = 2
tv152 = -24						; size = 2
tv146 = -22						; size = 2
tv140 = -20						; size = 2
tv134 = -18						; size = 2
tv128 = -16						; size = 2
tv90 = -14						; size = 2
tv84 = -12						; size = 2
tv78 = -10						; size = 2
tv72 = -8						; size = 2
tv66 = -6						; size = 2
_x$ = -4						; size = 4
_in_ptr$ = 8						; size = 4
?Build1WordFromDecimalString@Internal@Core@Math@Palmtree@@YAIPA_W@Z PROC ; Palmtree::Math::Core::Internal::Build1WordFromDecimalString

; 566  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	57		 push	 edi
  00007	8d 7d d4	 lea	 edi, DWORD PTR [ebp-44]
  0000a	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET __F159A697_pmc_parse@cpp
  0001b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 567  :         __UNIT_TYPE x = ParseDecimalDigit(*in_ptr++);

  00020	8b 45 08	 mov	 eax, DWORD PTR _in_ptr$[ebp]
  00023	66 8b 08	 mov	 cx, WORD PTR [eax]
  00026	66 89 4d fa	 mov	 WORD PTR tv66[ebp], cx
  0002a	8b 55 08	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  0002d	83 c2 02	 add	 edx, 2
  00030	89 55 08	 mov	 DWORD PTR _in_ptr$[ebp], edx
  00033	0f b7 45 fa	 movzx	 eax, WORD PTR tv66[ebp]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  0003d	83 c4 04	 add	 esp, 4
  00040	89 45 fc	 mov	 DWORD PTR _x$[ebp], eax

; 568  :         if (sizeof(__UNIT_TYPE) >= sizeof(_UINT64_T))

  00043	33 c9		 xor	 ecx, ecx
  00045	0f 84 9a 01 00
	00		 je	 $LN2@Build1Word

; 569  :         {
; 570  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  0004b	8b 55 08	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  0004e	66 8b 02	 mov	 ax, WORD PTR [edx]
  00051	66 89 45 f8	 mov	 WORD PTR tv72[ebp], ax
  00055	8b 4d 08	 mov	 ecx, DWORD PTR _in_ptr$[ebp]
  00058	83 c1 02	 add	 ecx, 2
  0005b	89 4d 08	 mov	 DWORD PTR _in_ptr$[ebp], ecx
  0005e	0f b7 55 f8	 movzx	 edx, WORD PTR tv72[ebp]
  00062	52		 push	 edx
  00063	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  00068	83 c4 04	 add	 esp, 4
  0006b	6b 4d fc 0a	 imul	 ecx, DWORD PTR _x$[ebp], 10
  0006f	03 c8		 add	 ecx, eax
  00071	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 571  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00074	8b 55 08	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  00077	66 8b 02	 mov	 ax, WORD PTR [edx]
  0007a	66 89 45 f6	 mov	 WORD PTR tv78[ebp], ax
  0007e	8b 4d 08	 mov	 ecx, DWORD PTR _in_ptr$[ebp]
  00081	83 c1 02	 add	 ecx, 2
  00084	89 4d 08	 mov	 DWORD PTR _in_ptr$[ebp], ecx
  00087	0f b7 55 f6	 movzx	 edx, WORD PTR tv78[ebp]
  0008b	52		 push	 edx
  0008c	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  00091	83 c4 04	 add	 esp, 4
  00094	6b 4d fc 0a	 imul	 ecx, DWORD PTR _x$[ebp], 10
  00098	03 c8		 add	 ecx, eax
  0009a	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 572  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  0009d	8b 55 08	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  000a0	66 8b 02	 mov	 ax, WORD PTR [edx]
  000a3	66 89 45 f4	 mov	 WORD PTR tv84[ebp], ax
  000a7	8b 4d 08	 mov	 ecx, DWORD PTR _in_ptr$[ebp]
  000aa	83 c1 02	 add	 ecx, 2
  000ad	89 4d 08	 mov	 DWORD PTR _in_ptr$[ebp], ecx
  000b0	0f b7 55 f4	 movzx	 edx, WORD PTR tv84[ebp]
  000b4	52		 push	 edx
  000b5	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  000ba	83 c4 04	 add	 esp, 4
  000bd	6b 4d fc 0a	 imul	 ecx, DWORD PTR _x$[ebp], 10
  000c1	03 c8		 add	 ecx, eax
  000c3	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 573  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  000c6	8b 55 08	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  000c9	66 8b 02	 mov	 ax, WORD PTR [edx]
  000cc	66 89 45 f2	 mov	 WORD PTR tv90[ebp], ax
  000d0	8b 4d 08	 mov	 ecx, DWORD PTR _in_ptr$[ebp]
  000d3	83 c1 02	 add	 ecx, 2
  000d6	89 4d 08	 mov	 DWORD PTR _in_ptr$[ebp], ecx
  000d9	0f b7 55 f2	 movzx	 edx, WORD PTR tv90[ebp]
  000dd	52		 push	 edx
  000de	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  000e3	83 c4 04	 add	 esp, 4
  000e6	6b 4d fc 0a	 imul	 ecx, DWORD PTR _x$[ebp], 10
  000ea	03 c8		 add	 ecx, eax
  000ec	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 574  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  000ef	8b 55 08	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  000f2	66 8b 02	 mov	 ax, WORD PTR [edx]
  000f5	66 89 45 f0	 mov	 WORD PTR tv128[ebp], ax
  000f9	8b 4d 08	 mov	 ecx, DWORD PTR _in_ptr$[ebp]
  000fc	83 c1 02	 add	 ecx, 2
  000ff	89 4d 08	 mov	 DWORD PTR _in_ptr$[ebp], ecx
  00102	0f b7 55 f0	 movzx	 edx, WORD PTR tv128[ebp]
  00106	52		 push	 edx
  00107	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  0010c	83 c4 04	 add	 esp, 4
  0010f	6b 4d fc 0a	 imul	 ecx, DWORD PTR _x$[ebp], 10
  00113	03 c8		 add	 ecx, eax
  00115	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 575  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00118	8b 55 08	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  0011b	66 8b 02	 mov	 ax, WORD PTR [edx]
  0011e	66 89 45 ee	 mov	 WORD PTR tv134[ebp], ax
  00122	8b 4d 08	 mov	 ecx, DWORD PTR _in_ptr$[ebp]
  00125	83 c1 02	 add	 ecx, 2
  00128	89 4d 08	 mov	 DWORD PTR _in_ptr$[ebp], ecx
  0012b	0f b7 55 ee	 movzx	 edx, WORD PTR tv134[ebp]
  0012f	52		 push	 edx
  00130	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  00135	83 c4 04	 add	 esp, 4
  00138	6b 4d fc 0a	 imul	 ecx, DWORD PTR _x$[ebp], 10
  0013c	03 c8		 add	 ecx, eax
  0013e	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 576  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00141	8b 55 08	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  00144	66 8b 02	 mov	 ax, WORD PTR [edx]
  00147	66 89 45 ec	 mov	 WORD PTR tv140[ebp], ax
  0014b	8b 4d 08	 mov	 ecx, DWORD PTR _in_ptr$[ebp]
  0014e	83 c1 02	 add	 ecx, 2
  00151	89 4d 08	 mov	 DWORD PTR _in_ptr$[ebp], ecx
  00154	0f b7 55 ec	 movzx	 edx, WORD PTR tv140[ebp]
  00158	52		 push	 edx
  00159	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  0015e	83 c4 04	 add	 esp, 4
  00161	6b 4d fc 0a	 imul	 ecx, DWORD PTR _x$[ebp], 10
  00165	03 c8		 add	 ecx, eax
  00167	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 577  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  0016a	8b 55 08	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  0016d	66 8b 02	 mov	 ax, WORD PTR [edx]
  00170	66 89 45 ea	 mov	 WORD PTR tv146[ebp], ax
  00174	8b 4d 08	 mov	 ecx, DWORD PTR _in_ptr$[ebp]
  00177	83 c1 02	 add	 ecx, 2
  0017a	89 4d 08	 mov	 DWORD PTR _in_ptr$[ebp], ecx
  0017d	0f b7 55 ea	 movzx	 edx, WORD PTR tv146[ebp]
  00181	52		 push	 edx
  00182	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  00187	83 c4 04	 add	 esp, 4
  0018a	6b 4d fc 0a	 imul	 ecx, DWORD PTR _x$[ebp], 10
  0018e	03 c8		 add	 ecx, eax
  00190	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 578  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00193	8b 55 08	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  00196	66 8b 02	 mov	 ax, WORD PTR [edx]
  00199	66 89 45 e8	 mov	 WORD PTR tv152[ebp], ax
  0019d	8b 4d 08	 mov	 ecx, DWORD PTR _in_ptr$[ebp]
  001a0	83 c1 02	 add	 ecx, 2
  001a3	89 4d 08	 mov	 DWORD PTR _in_ptr$[ebp], ecx
  001a6	0f b7 55 e8	 movzx	 edx, WORD PTR tv152[ebp]
  001aa	52		 push	 edx
  001ab	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  001b0	83 c4 04	 add	 esp, 4
  001b3	6b 4d fc 0a	 imul	 ecx, DWORD PTR _x$[ebp], 10
  001b7	03 c8		 add	 ecx, eax
  001b9	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 579  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  001bc	8b 55 08	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  001bf	66 8b 02	 mov	 ax, WORD PTR [edx]
  001c2	66 89 45 e6	 mov	 WORD PTR tv158[ebp], ax
  001c6	8b 4d 08	 mov	 ecx, DWORD PTR _in_ptr$[ebp]
  001c9	83 c1 02	 add	 ecx, 2
  001cc	89 4d 08	 mov	 DWORD PTR _in_ptr$[ebp], ecx
  001cf	0f b7 55 e6	 movzx	 edx, WORD PTR tv158[ebp]
  001d3	52		 push	 edx
  001d4	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  001d9	83 c4 04	 add	 esp, 4
  001dc	6b 4d fc 0a	 imul	 ecx, DWORD PTR _x$[ebp], 10
  001e0	03 c8		 add	 ecx, eax
  001e2	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx
$LN2@Build1Word:

; 580  :         }
; 581  :         if (sizeof(__UNIT_TYPE) >= sizeof(_UINT32_T))

  001e5	ba 01 00 00 00	 mov	 edx, 1
  001ea	85 d2		 test	 edx, edx
  001ec	0f 84 cd 00 00
	00		 je	 $LN3@Build1Word

; 582  :         {
; 583  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  001f2	8b 45 08	 mov	 eax, DWORD PTR _in_ptr$[ebp]
  001f5	66 8b 08	 mov	 cx, WORD PTR [eax]
  001f8	66 89 4d e4	 mov	 WORD PTR tv165[ebp], cx
  001fc	8b 55 08	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  001ff	83 c2 02	 add	 edx, 2
  00202	89 55 08	 mov	 DWORD PTR _in_ptr$[ebp], edx
  00205	0f b7 45 e4	 movzx	 eax, WORD PTR tv165[ebp]
  00209	50		 push	 eax
  0020a	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  0020f	83 c4 04	 add	 esp, 4
  00212	6b 4d fc 0a	 imul	 ecx, DWORD PTR _x$[ebp], 10
  00216	03 c8		 add	 ecx, eax
  00218	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 584  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  0021b	8b 55 08	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  0021e	66 8b 02	 mov	 ax, WORD PTR [edx]
  00221	66 89 45 e2	 mov	 WORD PTR tv171[ebp], ax
  00225	8b 4d 08	 mov	 ecx, DWORD PTR _in_ptr$[ebp]
  00228	83 c1 02	 add	 ecx, 2
  0022b	89 4d 08	 mov	 DWORD PTR _in_ptr$[ebp], ecx
  0022e	0f b7 55 e2	 movzx	 edx, WORD PTR tv171[ebp]
  00232	52		 push	 edx
  00233	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  00238	83 c4 04	 add	 esp, 4
  0023b	6b 4d fc 0a	 imul	 ecx, DWORD PTR _x$[ebp], 10
  0023f	03 c8		 add	 ecx, eax
  00241	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 585  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00244	8b 55 08	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  00247	66 8b 02	 mov	 ax, WORD PTR [edx]
  0024a	66 89 45 e0	 mov	 WORD PTR tv177[ebp], ax
  0024e	8b 4d 08	 mov	 ecx, DWORD PTR _in_ptr$[ebp]
  00251	83 c1 02	 add	 ecx, 2
  00254	89 4d 08	 mov	 DWORD PTR _in_ptr$[ebp], ecx
  00257	0f b7 55 e0	 movzx	 edx, WORD PTR tv177[ebp]
  0025b	52		 push	 edx
  0025c	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  00261	83 c4 04	 add	 esp, 4
  00264	6b 4d fc 0a	 imul	 ecx, DWORD PTR _x$[ebp], 10
  00268	03 c8		 add	 ecx, eax
  0026a	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 586  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  0026d	8b 55 08	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  00270	66 8b 02	 mov	 ax, WORD PTR [edx]
  00273	66 89 45 de	 mov	 WORD PTR tv183[ebp], ax
  00277	8b 4d 08	 mov	 ecx, DWORD PTR _in_ptr$[ebp]
  0027a	83 c1 02	 add	 ecx, 2
  0027d	89 4d 08	 mov	 DWORD PTR _in_ptr$[ebp], ecx
  00280	0f b7 55 de	 movzx	 edx, WORD PTR tv183[ebp]
  00284	52		 push	 edx
  00285	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  0028a	83 c4 04	 add	 esp, 4
  0028d	6b 4d fc 0a	 imul	 ecx, DWORD PTR _x$[ebp], 10
  00291	03 c8		 add	 ecx, eax
  00293	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 587  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00296	8b 55 08	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  00299	66 8b 02	 mov	 ax, WORD PTR [edx]
  0029c	66 89 45 dc	 mov	 WORD PTR tv189[ebp], ax
  002a0	8b 4d 08	 mov	 ecx, DWORD PTR _in_ptr$[ebp]
  002a3	83 c1 02	 add	 ecx, 2
  002a6	89 4d 08	 mov	 DWORD PTR _in_ptr$[ebp], ecx
  002a9	0f b7 55 dc	 movzx	 edx, WORD PTR tv189[ebp]
  002ad	52		 push	 edx
  002ae	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  002b3	83 c4 04	 add	 esp, 4
  002b6	6b 4d fc 0a	 imul	 ecx, DWORD PTR _x$[ebp], 10
  002ba	03 c8		 add	 ecx, eax
  002bc	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx
$LN3@Build1Word:

; 588  :         }
; 589  :         if (sizeof(__UNIT_TYPE) >= sizeof(_UINT16_T))

  002bf	ba 01 00 00 00	 mov	 edx, 1
  002c4	85 d2		 test	 edx, edx
  002c6	74 52		 je	 SHORT $LN4@Build1Word

; 590  :         {
; 591  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  002c8	8b 45 08	 mov	 eax, DWORD PTR _in_ptr$[ebp]
  002cb	66 8b 08	 mov	 cx, WORD PTR [eax]
  002ce	66 89 4d da	 mov	 WORD PTR tv196[ebp], cx
  002d2	8b 55 08	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  002d5	83 c2 02	 add	 edx, 2
  002d8	89 55 08	 mov	 DWORD PTR _in_ptr$[ebp], edx
  002db	0f b7 45 da	 movzx	 eax, WORD PTR tv196[ebp]
  002df	50		 push	 eax
  002e0	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  002e5	83 c4 04	 add	 esp, 4
  002e8	6b 4d fc 0a	 imul	 ecx, DWORD PTR _x$[ebp], 10
  002ec	03 c8		 add	 ecx, eax
  002ee	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 592  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  002f1	8b 55 08	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  002f4	66 8b 02	 mov	 ax, WORD PTR [edx]
  002f7	66 89 45 d8	 mov	 WORD PTR tv202[ebp], ax
  002fb	8b 4d 08	 mov	 ecx, DWORD PTR _in_ptr$[ebp]
  002fe	83 c1 02	 add	 ecx, 2
  00301	89 4d 08	 mov	 DWORD PTR _in_ptr$[ebp], ecx
  00304	0f b7 55 d8	 movzx	 edx, WORD PTR tv202[ebp]
  00308	52		 push	 edx
  00309	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  0030e	83 c4 04	 add	 esp, 4
  00311	6b 4d fc 0a	 imul	 ecx, DWORD PTR _x$[ebp], 10
  00315	03 c8		 add	 ecx, eax
  00317	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx
$LN4@Build1Word:

; 593  :         }
; 594  :         if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))

  0031a	ba 01 00 00 00	 mov	 edx, 1
  0031f	85 d2		 test	 edx, edx
  00321	74 29		 je	 SHORT $LN5@Build1Word

; 595  :         {
; 596  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00323	8b 45 08	 mov	 eax, DWORD PTR _in_ptr$[ebp]
  00326	66 8b 08	 mov	 cx, WORD PTR [eax]
  00329	66 89 4d d6	 mov	 WORD PTR tv209[ebp], cx
  0032d	8b 55 08	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  00330	83 c2 02	 add	 edx, 2
  00333	89 55 08	 mov	 DWORD PTR _in_ptr$[ebp], edx
  00336	0f b7 45 d6	 movzx	 eax, WORD PTR tv209[ebp]
  0033a	50		 push	 eax
  0033b	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  00340	83 c4 04	 add	 esp, 4
  00343	6b 4d fc 0a	 imul	 ecx, DWORD PTR _x$[ebp], 10
  00347	03 c8		 add	 ecx, eax
  00349	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx
$LN5@Build1Word:

; 597  :         }
; 598  :         return (x);

  0034c	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]

; 599  :     }

  0034f	5f		 pop	 edi
  00350	83 c4 2c	 add	 esp, 44			; 0000002cH
  00353	3b ec		 cmp	 ebp, esp
  00355	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0035a	8b e5		 mov	 esp, ebp
  0035c	5d		 pop	 ebp
  0035d	c3		 ret	 0
?Build1WordFromDecimalString@Internal@Core@Math@Palmtree@@YAIPA_W@Z ENDP ; Palmtree::Math::Core::Internal::Build1WordFromDecimalString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
_TEXT	SEGMENT
tv68 = -6						; size = 2
_x$ = -4						; size = 4
_in_ptr$ = 8						; size = 4
_count$ = 12						; size = 4
?BuildLeading1WordFromDecimalString@Internal@Core@Math@Palmtree@@YAIPA_WI@Z PROC ; Palmtree::Math::Core::Internal::BuildLeading1WordFromDecimalString

; 555  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	b9 00 00 00 00	 mov	 ecx, OFFSET __F159A697_pmc_parse@cpp
  00019	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 556  :         __UNIT_TYPE x = 0;

  0001e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _x$[ebp], 0
$LN2@BuildLeadi:

; 557  :         while (count > 0)

  00025	83 7d 0c 00	 cmp	 DWORD PTR _count$[ebp], 0
  00029	76 34		 jbe	 SHORT $LN3@BuildLeadi

; 558  :         {
; 559  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  0002b	8b 45 08	 mov	 eax, DWORD PTR _in_ptr$[ebp]
  0002e	66 8b 08	 mov	 cx, WORD PTR [eax]
  00031	66 89 4d fa	 mov	 WORD PTR tv68[ebp], cx
  00035	8b 55 08	 mov	 edx, DWORD PTR _in_ptr$[ebp]
  00038	83 c2 02	 add	 edx, 2
  0003b	89 55 08	 mov	 DWORD PTR _in_ptr$[ebp], edx
  0003e	0f b7 45 fa	 movzx	 eax, WORD PTR tv68[ebp]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  00048	83 c4 04	 add	 esp, 4
  0004b	6b 4d fc 0a	 imul	 ecx, DWORD PTR _x$[ebp], 10
  0004f	03 c8		 add	 ecx, eax
  00051	89 4d fc	 mov	 DWORD PTR _x$[ebp], ecx

; 560  :             --count;

  00054	8b 55 0c	 mov	 edx, DWORD PTR _count$[ebp]
  00057	83 ea 01	 sub	 edx, 1
  0005a	89 55 0c	 mov	 DWORD PTR _count$[ebp], edx

; 561  :         }

  0005d	eb c6		 jmp	 SHORT $LN2@BuildLeadi
$LN3@BuildLeadi:

; 562  :         return (x);

  0005f	8b 45 fc	 mov	 eax, DWORD PTR _x$[ebp]

; 563  :     }

  00062	83 c4 08	 add	 esp, 8
  00065	3b ec		 cmp	 ebp, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
?BuildLeading1WordFromDecimalString@Internal@Core@Math@Palmtree@@YAIPA_WI@Z ENDP ; Palmtree::Math::Core::Internal::BuildLeading1WordFromDecimalString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
_TEXT	SEGMENT
$T2 = -288						; size = 4
_state$ = -280						; size = 260
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_in_ptr$ = 8						; size = 4
_number_styles$ = 12					; size = 4
_format_option$ = 16					; size = 4
_sign$ = 20						; size = 4
_int_part_buf$ = 24					; size = 4
_int_part_buf_size$ = 28				; size = 4
_frac_part_buf$ = 32					; size = 4
_frac_part_buf_size$ = 36				; size = 4
?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPA_WI3I@Z PROC ; Palmtree::Math::Core::Internal::ParseAsDecimalNumberString

; 549  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPA_WI3I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  00017	57		 push	 edi
  00018	8d bd e0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-288]
  0001e	b9 45 00 00 00	 mov	 ecx, 69			; 00000045H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002f	33 c5		 xor	 eax, ebp
  00031	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00034	50		 push	 eax
  00035	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00038	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003e	b9 00 00 00 00	 mov	 ecx, OFFSET __F159A697_pmc_parse@cpp
  00043	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 550  :         ParserState state(in_ptr, number_styles, format_option, sign, int_part_buf, int_part_buf_size, frac_part_buf, frac_part_buf_size);

  00048	8b 45 24	 mov	 eax, DWORD PTR _frac_part_buf_size$[ebp]
  0004b	50		 push	 eax
  0004c	8b 4d 20	 mov	 ecx, DWORD PTR _frac_part_buf$[ebp]
  0004f	51		 push	 ecx
  00050	8b 55 1c	 mov	 edx, DWORD PTR _int_part_buf_size$[ebp]
  00053	52		 push	 edx
  00054	8b 45 18	 mov	 eax, DWORD PTR _int_part_buf$[ebp]
  00057	50		 push	 eax
  00058	8b 4d 14	 mov	 ecx, DWORD PTR _sign$[ebp]
  0005b	51		 push	 ecx
  0005c	8b 55 10	 mov	 edx, DWORD PTR _format_option$[ebp]
  0005f	52		 push	 edx
  00060	8b 45 0c	 mov	 eax, DWORD PTR _number_styles$[ebp]
  00063	50		 push	 eax
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _in_ptr$[ebp]
  00067	51		 push	 ecx
  00068	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _state$[ebp]
  0006e	e8 00 00 00 00	 call	 ??0ParserState@Internal@Core@Math@Palmtree@@QAE@PB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPA_WI3I@Z ; Palmtree::Math::Core::Internal::ParserState::ParserState
  00073	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 551  :         return (state.ParseAsDecimalNumberString());

  0007a	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _state$[ebp]
  00080	e8 00 00 00 00	 call	 ?ParseAsDecimalNumberString@ParserState@Internal@Core@Math@Palmtree@@QAEHXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsDecimalNumberString
  00085	89 85 e0 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  0008b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00092	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _state$[ebp]
  00098	e8 00 00 00 00	 call	 ??1ParserState@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ParserState::~ParserState
  0009d	8b 85 e0 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 552  :     }

  000a3	52		 push	 edx
  000a4	8b cd		 mov	 ecx, ebp
  000a6	50		 push	 eax
  000a7	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@ParseAsDec
  000ad	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000b2	58		 pop	 eax
  000b3	5a		 pop	 edx
  000b4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000be	59		 pop	 ecx
  000bf	5f		 pop	 edi
  000c0	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c3	33 cd		 xor	 ecx, ebp
  000c5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ca	81 c4 20 01 00
	00		 add	 esp, 288		; 00000120H
  000d0	3b ec		 cmp	 ebp, esp
  000d2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c3		 ret	 0
  000db	90		 npad	 1
$LN7@ParseAsDec:
  000dc	01 00 00 00	 DD	 1
  000e0	00 00 00 00	 DD	 $LN6@ParseAsDec
$LN6@ParseAsDec:
  000e4	e8 fe ff ff	 DD	 -280			; fffffee8H
  000e8	04 01 00 00	 DD	 260			; 00000104H
  000ec	00 00 00 00	 DD	 $LN4@ParseAsDec
$LN4@ParseAsDec:
  000f0	73		 DB	 115			; 00000073H
  000f1	74		 DB	 116			; 00000074H
  000f2	61		 DB	 97			; 00000061H
  000f3	74		 DB	 116			; 00000074H
  000f4	65		 DB	 101			; 00000065H
  000f5	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPA_WI3I@Z$0:
  00000	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _state$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1ParserState@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ParserState::~ParserState
__ehhandler$?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPA_WI3I@Z:
  0000b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00012	8b 8a e4 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-284]
  00018	33 c8		 xor	 ecx, eax
  0001a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPA_WI3I@Z
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPA_WI3I@Z ENDP ; Palmtree::Math::Core::Internal::ParseAsDecimalNumberString
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ
_TEXT	SEGMENT
tv135 = -24						; size = 4
tv133 = -20						; size = 4
tv82 = -16						; size = 4
tv80 = -12						; size = 4
_c$1 = -8						; size = 2
_this$ = -4						; size = 4
?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ PROC ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence, COMDAT
; _this$ = ecx

; 527  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00012	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00015	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00018	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001b	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001e	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00021	b9 00 00 00 00	 mov	 ecx, OFFSET __F159A697_pmc_parse@cpp
  00026	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
$LN4@ParseAsFra:

; 528  :             for (;;)
; 529  :             {
; 530  :                 wchar_t c = _source.PeekChar();

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 10		 mov	 edx, DWORD PTR [eax]
  00030	8b f4		 mov	 esi, esp
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	8b 02		 mov	 eax, DWORD PTR [edx]
  00037	ff d0		 call	 eax
  00039	3b f4		 cmp	 esi, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	66 89 45 f8	 mov	 WORD PTR _c$1[ebp], ax

; 531  :                 if (ParseDecimalDigit(c) >= 0)

  00044	0f b7 4d f8	 movzx	 ecx, WORD PTR _c$1[ebp]
  00048	51		 push	 ecx
  00049	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  0004e	83 c4 04	 add	 esp, 4
  00051	85 c0		 test	 eax, eax
  00053	7c 41		 jl	 SHORT $LN5@ParseAsFra

; 532  :                 {
; 533  :                     _frac_part.Write(c);

  00055	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00058	83 c2 1c	 add	 edx, 28			; 0000001cH
  0005b	89 55 f4	 mov	 DWORD PTR tv80[ebp], edx
  0005e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00061	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00064	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00067	89 55 f0	 mov	 DWORD PTR tv82[ebp], edx
  0006a	8b f4		 mov	 esi, esp
  0006c	0f b7 45 f8	 movzx	 eax, WORD PTR _c$1[ebp]
  00070	50		 push	 eax
  00071	8b 4d f4	 mov	 ecx, DWORD PTR tv80[ebp]
  00074	ff 55 f0	 call	 DWORD PTR tv82[ebp]
  00077	3b f4		 cmp	 esi, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 534  :                     _source.Progress();

  0007e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00081	8b 11		 mov	 edx, DWORD PTR [ecx]
  00083	8b f4		 mov	 esi, esp
  00085	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0008b	ff d0		 call	 eax
  0008d	3b f4		 cmp	 esi, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00094	eb 62		 jmp	 SHORT $LN6@ParseAsFra
$LN5@ParseAsFra:

; 535  :                 }
; 536  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER) && ParseHexDigit(c) >= 0)

  00096	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0009c	81 e2 00 02 00
	00		 and	 edx, 512		; 00000200H
  000a2	74 52		 je	 SHORT $LN7@ParseAsFra
  000a4	0f b7 45 f8	 movzx	 eax, WORD PTR _c$1[ebp]
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  000ae	83 c4 04	 add	 esp, 4
  000b1	85 c0		 test	 eax, eax
  000b3	7c 41		 jl	 SHORT $LN7@ParseAsFra

; 537  :                 {
; 538  :                     _frac_part.Write(c);

  000b5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b8	83 c1 1c	 add	 ecx, 28			; 0000001cH
  000bb	89 4d ec	 mov	 DWORD PTR tv133[ebp], ecx
  000be	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000c1	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  000c4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c7	89 4d e8	 mov	 DWORD PTR tv135[ebp], ecx
  000ca	8b f4		 mov	 esi, esp
  000cc	0f b7 55 f8	 movzx	 edx, WORD PTR _c$1[ebp]
  000d0	52		 push	 edx
  000d1	8b 4d ec	 mov	 ecx, DWORD PTR tv133[ebp]
  000d4	ff 55 e8	 call	 DWORD PTR tv135[ebp]
  000d7	3b f4		 cmp	 esi, esp
  000d9	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 539  :                     _source.Progress();

  000de	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e1	8b 10		 mov	 edx, DWORD PTR [eax]
  000e3	8b f4		 mov	 esi, esp
  000e5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e8	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000eb	ff d0		 call	 eax
  000ed	3b f4		 cmp	 esi, esp
  000ef	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 540  :                 }
; 541  :                 else

  000f4	eb 02		 jmp	 SHORT $LN6@ParseAsFra
$LN7@ParseAsFra:

; 542  :                     break;

  000f6	eb 05		 jmp	 SHORT $LN1@ParseAsFra
$LN6@ParseAsFra:

; 543  :             }

  000f8	e9 2e ff ff ff	 jmp	 $LN4@ParseAsFra
$LN1@ParseAsFra:

; 544  :         }

  000fd	5e		 pop	 esi
  000fe	83 c4 18	 add	 esp, 24			; 00000018H
  00101	3b ec		 cmp	 ebp, esp
  00103	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00108	8b e5		 mov	 esp, ebp
  0010a	5d		 pop	 ebp
  0010b	c3		 ret	 0
?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ENDP ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ
_TEXT	SEGMENT
tv194 = -56						; size = 4
tv192 = -52						; size = 4
tv182 = -48						; size = 4
tv180 = -44						; size = 4
tv167 = -40						; size = 4
tv165 = -36						; size = 4
tv155 = -32						; size = 4
tv153 = -28						; size = 4
tv135 = -24						; size = 4
tv133 = -20						; size = 4
tv82 = -16						; size = 4
tv80 = -12						; size = 4
_c$1 = -8						; size = 2
_this$ = -4						; size = 4
?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ PROC ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence, COMDAT
; _this$ = ecx

; 503  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	51		 push	 ecx
  00009	8d 7d c8	 lea	 edi, DWORD PTR [ebp-56]
  0000c	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	59		 pop	 ecx
  00019	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001c	b9 00 00 00 00	 mov	 ecx, OFFSET __F159A697_pmc_parse@cpp
  00021	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
$LN4@ParseAsInt:

; 504  :             for (;;)
; 505  :             {
; 506  :                 wchar_t c = _source.PeekChar();

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	8b 10		 mov	 edx, DWORD PTR [eax]
  0002b	8b f4		 mov	 esi, esp
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	8b 02		 mov	 eax, DWORD PTR [edx]
  00032	ff d0		 call	 eax
  00034	3b f4		 cmp	 esi, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	66 89 45 f8	 mov	 WORD PTR _c$1[ebp], ax

; 507  :                 if (ParseDecimalDigit(c) >= 0)

  0003f	0f b7 4d f8	 movzx	 ecx, WORD PTR _c$1[ebp]
  00043	51		 push	 ecx
  00044	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  00049	83 c4 04	 add	 esp, 4
  0004c	85 c0		 test	 eax, eax
  0004e	7c 44		 jl	 SHORT $LN5@ParseAsInt

; 508  :                 {
; 509  :                     _int_part.Write(c);

  00050	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00053	83 c2 08	 add	 edx, 8
  00056	89 55 f4	 mov	 DWORD PTR tv80[ebp], edx
  00059	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0005f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00062	89 55 f0	 mov	 DWORD PTR tv82[ebp], edx
  00065	8b f4		 mov	 esi, esp
  00067	0f b7 45 f8	 movzx	 eax, WORD PTR _c$1[ebp]
  0006b	50		 push	 eax
  0006c	8b 4d f4	 mov	 ecx, DWORD PTR tv80[ebp]
  0006f	ff 55 f0	 call	 DWORD PTR tv82[ebp]
  00072	3b f4		 cmp	 esi, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 510  :                     _source.Progress();

  00079	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0007e	8b f4		 mov	 esi, esp
  00080	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00083	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00086	ff d0		 call	 eax
  00088	3b f4		 cmp	 esi, esp
  0008a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008f	e9 2d 01 00 00	 jmp	 $LN6@ParseAsInt
$LN5@ParseAsInt:

; 511  :                 }
; 512  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER) && ParseHexDigit(c) >= 0)

  00094	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00097	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0009a	81 e2 00 02 00
	00		 and	 edx, 512		; 00000200H
  000a0	74 55		 je	 SHORT $LN7@ParseAsInt
  000a2	0f b7 45 f8	 movzx	 eax, WORD PTR _c$1[ebp]
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseHexDigit
  000ac	83 c4 04	 add	 esp, 4
  000af	85 c0		 test	 eax, eax
  000b1	7c 44		 jl	 SHORT $LN7@ParseAsInt

; 513  :                 {
; 514  :                     _int_part.Write(c);

  000b3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b6	83 c1 08	 add	 ecx, 8
  000b9	89 4d ec	 mov	 DWORD PTR tv133[ebp], ecx
  000bc	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000bf	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	89 4d e8	 mov	 DWORD PTR tv135[ebp], ecx
  000c8	8b f4		 mov	 esi, esp
  000ca	0f b7 55 f8	 movzx	 edx, WORD PTR _c$1[ebp]
  000ce	52		 push	 edx
  000cf	8b 4d ec	 mov	 ecx, DWORD PTR tv133[ebp]
  000d2	ff 55 e8	 call	 DWORD PTR tv135[ebp]
  000d5	3b f4		 cmp	 esi, esp
  000d7	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 515  :                     _source.Progress();

  000dc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000df	8b 10		 mov	 edx, DWORD PTR [eax]
  000e1	8b f4		 mov	 esi, esp
  000e3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e6	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000e9	ff d0		 call	 eax
  000eb	3b f4		 cmp	 esi, esp
  000ed	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f2	e9 ca 00 00 00	 jmp	 $LN6@ParseAsInt
$LN7@ParseAsInt:

; 516  :                 }
; 517  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_THOUSANDS) && _source.StartsWith(_group_separator))

  000f7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000fa	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  000fd	83 e2 40	 and	 edx, 64			; 00000040H
  00100	74 59		 je	 SHORT $LN9@ParseAsInt
  00102	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00105	89 45 e4	 mov	 DWORD PTR tv153[ebp], eax
  00108	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0010b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0010d	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00110	89 45 e0	 mov	 DWORD PTR tv155[ebp], eax
  00113	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00116	81 c1 c0 00 00
	00		 add	 ecx, 192		; 000000c0H
  0011c	8b f4		 mov	 esi, esp
  0011e	51		 push	 ecx
  0011f	8b 4d e4	 mov	 ecx, DWORD PTR tv153[ebp]
  00122	ff 55 e0	 call	 DWORD PTR tv155[ebp]
  00125	3b f4		 cmp	 esi, esp
  00127	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012c	85 c0		 test	 eax, eax
  0012e	74 2b		 je	 SHORT $LN9@ParseAsInt

; 518  :                     _source.SkipString(_group_separator);

  00130	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00133	89 55 dc	 mov	 DWORD PTR tv165[ebp], edx
  00136	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00139	8b 08		 mov	 ecx, DWORD PTR [eax]
  0013b	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0013e	89 55 d8	 mov	 DWORD PTR tv167[ebp], edx
  00141	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00144	05 c0 00 00 00	 add	 eax, 192		; 000000c0H
  00149	8b f4		 mov	 esi, esp
  0014b	50		 push	 eax
  0014c	8b 4d dc	 mov	 ecx, DWORD PTR tv165[ebp]
  0014f	ff 55 d8	 call	 DWORD PTR tv167[ebp]
  00152	3b f4		 cmp	 esi, esp
  00154	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00159	eb 66		 jmp	 SHORT $LN6@ParseAsInt
$LN9@ParseAsInt:

; 519  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_THOUSANDS) && _source.StartsWith(_secondary_group_separator))

  0015b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0015e	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00161	83 e2 40	 and	 edx, 64			; 00000040H
  00164	74 59		 je	 SHORT $LN11@ParseAsInt
  00166	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00169	89 45 d4	 mov	 DWORD PTR tv180[ebp], eax
  0016c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0016f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00171	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00174	89 45 d0	 mov	 DWORD PTR tv182[ebp], eax
  00177	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0017a	81 c1 e2 00 00
	00		 add	 ecx, 226		; 000000e2H
  00180	8b f4		 mov	 esi, esp
  00182	51		 push	 ecx
  00183	8b 4d d4	 mov	 ecx, DWORD PTR tv180[ebp]
  00186	ff 55 d0	 call	 DWORD PTR tv182[ebp]
  00189	3b f4		 cmp	 esi, esp
  0018b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00190	85 c0		 test	 eax, eax
  00192	74 2b		 je	 SHORT $LN11@ParseAsInt

; 520  :                     _source.SkipString(_secondary_group_separator);

  00194	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00197	89 55 cc	 mov	 DWORD PTR tv192[ebp], edx
  0019a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0019d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0019f	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  001a2	89 55 c8	 mov	 DWORD PTR tv194[ebp], edx
  001a5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001a8	05 e2 00 00 00	 add	 eax, 226		; 000000e2H
  001ad	8b f4		 mov	 esi, esp
  001af	50		 push	 eax
  001b0	8b 4d cc	 mov	 ecx, DWORD PTR tv192[ebp]
  001b3	ff 55 c8	 call	 DWORD PTR tv194[ebp]
  001b6	3b f4		 cmp	 esi, esp
  001b8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 521  :                 else

  001bd	eb 02		 jmp	 SHORT $LN6@ParseAsInt
$LN11@ParseAsInt:

; 522  :                     break;

  001bf	eb 05		 jmp	 SHORT $LN1@ParseAsInt
$LN6@ParseAsInt:

; 523  :             }

  001c1	e9 60 fe ff ff	 jmp	 $LN4@ParseAsInt
$LN1@ParseAsInt:

; 524  :         }

  001c6	5f		 pop	 edi
  001c7	5e		 pop	 esi
  001c8	83 c4 38	 add	 esp, 56			; 00000038H
  001cb	3b ec		 cmp	 ebp, esp
  001cd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001d2	8b e5		 mov	 esp, ebp
  001d4	5d		 pop	 ebp
  001d5	c3		 ret	 0
?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ENDP ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?ParseAsHexNumberString@ParserState@Internal@Core@Math@Palmtree@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ParseAsHexNumberString@ParserState@Internal@Core@Math@Palmtree@@QAEHXZ PROC ; Palmtree::Math::Core::Internal::ParserState::ParseAsHexNumberString, COMDAT
; _this$ = ecx

; 479  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	b9 00 00 00 00	 mov	 ecx, OFFSET __F159A697_pmc_parse@cpp
  00014	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 480  :             if (_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE)

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0001f	83 e1 01	 and	 ecx, 1
  00022	74 08		 je	 SHORT $LN2@ParseAsHex

; 481  :                 _source.SkipSpace();

  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ?SkipSpace@StringReader@Internal@Core@Math@Palmtree@@QAEXXZ ; Palmtree::Math::Core::Internal::StringReader::SkipSpace
$LN2@ParseAsHex:

; 482  :             ParseAsIntegerPartNumberSequence();

  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence

; 483  :             if (_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

  00034	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00037	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0003a	83 e0 02	 and	 eax, 2
  0003d	74 08		 je	 SHORT $LN3@ParseAsHex

; 484  :                 _source.SkipSpace();

  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?SkipSpace@StringReader@Internal@Core@Math@Palmtree@@QAEXXZ ; Palmtree::Math::Core::Internal::StringReader::SkipSpace
$LN3@ParseAsHex:

; 485  :             if (_source.PeekChar() != L'\0')

  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004c	8b f4		 mov	 esi, esp
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	8b 02		 mov	 eax, DWORD PTR [edx]
  00053	ff d0		 call	 eax
  00055	3b f4		 cmp	 esi, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	0f b7 c8	 movzx	 ecx, ax
  0005f	85 c9		 test	 ecx, ecx
  00061	74 04		 je	 SHORT $LN4@ParseAsHex

; 486  :                 return (0);

  00063	33 c0		 xor	 eax, eax
  00065	eb 05		 jmp	 SHORT $LN1@ParseAsHex
$LN4@ParseAsHex:

; 487  :             return (1);

  00067	b8 01 00 00 00	 mov	 eax, 1
$LN1@ParseAsHex:

; 488  :         }

  0006c	5e		 pop	 esi
  0006d	83 c4 04	 add	 esp, 4
  00070	3b ec		 cmp	 ebp, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
?ParseAsHexNumberString@ParserState@Internal@Core@Math@Palmtree@@QAEHXZ ENDP ; Palmtree::Math::Core::Internal::ParserState::ParseAsHexNumberString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?ParseAsDecimalNumberString@ParserState@Internal@Core@Math@Palmtree@@QAEHXZ
_TEXT	SEGMENT
tv1989 = -1068						; size = 4
tv1987 = -1064						; size = 4
tv1977 = -1060						; size = 4
tv1975 = -1056						; size = 4
tv1962 = -1052						; size = 4
tv1960 = -1048						; size = 4
tv1948 = -1044						; size = 4
tv1946 = -1040						; size = 4
tv1933 = -1036						; size = 4
tv1931 = -1032						; size = 4
tv1921 = -1028						; size = 4
tv1919 = -1024						; size = 4
tv1906 = -1020						; size = 4
tv1904 = -1016						; size = 4
tv1892 = -1012						; size = 4
tv1890 = -1008						; size = 4
tv1877 = -1004						; size = 4
tv1875 = -1000						; size = 4
tv1863 = -996						; size = 4
tv1861 = -992						; size = 4
tv1848 = -988						; size = 4
tv1846 = -984						; size = 4
tv1834 = -980						; size = 4
tv1832 = -976						; size = 4
tv1819 = -972						; size = 4
tv1817 = -968						; size = 4
tv1807 = -964						; size = 4
tv1805 = -960						; size = 4
tv1792 = -956						; size = 4
tv1790 = -952						; size = 4
tv1778 = -948						; size = 4
tv1776 = -944						; size = 4
tv1763 = -940						; size = 4
tv1761 = -936						; size = 4
tv1749 = -932						; size = 4
tv1747 = -928						; size = 4
tv1734 = -924						; size = 4
tv1732 = -920						; size = 4
tv1720 = -916						; size = 4
tv1718 = -912						; size = 4
tv1705 = -908						; size = 4
tv1703 = -904						; size = 4
tv1691 = -900						; size = 4
tv1689 = -896						; size = 4
tv1676 = -892						; size = 4
tv1674 = -888						; size = 4
tv1664 = -884						; size = 4
tv1662 = -880						; size = 4
tv1649 = -876						; size = 4
tv1647 = -872						; size = 4
tv1638 = -868						; size = 4
tv1636 = -864						; size = 4
tv1623 = -860						; size = 4
tv1621 = -856						; size = 4
tv1613 = -852						; size = 4
tv1611 = -848						; size = 4
tv1601 = -844						; size = 4
tv1599 = -840						; size = 4
tv1586 = -836						; size = 4
tv1584 = -832						; size = 4
tv1574 = -828						; size = 4
tv1572 = -824						; size = 4
tv1559 = -820						; size = 4
tv1557 = -816						; size = 4
tv1545 = -812						; size = 4
tv1543 = -808						; size = 4
tv1530 = -804						; size = 4
tv1528 = -800						; size = 4
tv1518 = -796						; size = 4
tv1516 = -792						; size = 4
tv1503 = -788						; size = 4
tv1501 = -784						; size = 4
tv1489 = -780						; size = 4
tv1487 = -776						; size = 4
tv1474 = -772						; size = 4
tv1472 = -768						; size = 4
tv1460 = -764						; size = 4
tv1458 = -760						; size = 4
tv1445 = -756						; size = 4
tv1443 = -752						; size = 4
tv1431 = -748						; size = 4
tv1429 = -744						; size = 4
tv1416 = -740						; size = 4
tv1414 = -736						; size = 4
tv1404 = -732						; size = 4
tv1402 = -728						; size = 4
tv1389 = -724						; size = 4
tv1387 = -720						; size = 4
tv1375 = -716						; size = 4
tv1373 = -712						; size = 4
tv1360 = -708						; size = 4
tv1358 = -704						; size = 4
tv1346 = -700						; size = 4
tv1344 = -696						; size = 4
tv1331 = -692						; size = 4
tv1329 = -688						; size = 4
tv1317 = -684						; size = 4
tv1315 = -680						; size = 4
tv1302 = -676						; size = 4
tv1300 = -672						; size = 4
tv1288 = -668						; size = 4
tv1286 = -664						; size = 4
tv1273 = -660						; size = 4
tv1271 = -656						; size = 4
tv1261 = -652						; size = 4
tv1259 = -648						; size = 4
tv1246 = -644						; size = 4
tv1244 = -640						; size = 4
tv1235 = -636						; size = 4
tv1233 = -632						; size = 4
tv1220 = -628						; size = 4
tv1218 = -624						; size = 4
tv1210 = -620						; size = 4
tv1208 = -616						; size = 4
tv1198 = -612						; size = 4
tv1196 = -608						; size = 4
tv1173 = -604						; size = 4
tv1171 = -600						; size = 4
tv1161 = -596						; size = 4
tv1159 = -592						; size = 4
tv1146 = -588						; size = 4
tv1144 = -584						; size = 4
tv1134 = -580						; size = 4
tv1132 = -576						; size = 4
tv1119 = -572						; size = 4
tv1117 = -568						; size = 4
tv1108 = -564						; size = 4
tv1106 = -560						; size = 4
tv1093 = -556						; size = 4
tv1091 = -552						; size = 4
tv1083 = -548						; size = 4
tv1081 = -544						; size = 4
tv1071 = -540						; size = 4
tv1069 = -536						; size = 4
tv1045 = -532						; size = 4
tv1043 = -528						; size = 4
tv1035 = -524						; size = 4
tv1033 = -520						; size = 4
tv1023 = -516						; size = 4
tv1021 = -512						; size = 4
tv998 = -508						; size = 4
tv996 = -504						; size = 4
tv987 = -500						; size = 4
tv985 = -496						; size = 4
tv973 = -492						; size = 4
tv971 = -488						; size = 4
tv961 = -484						; size = 4
tv959 = -480						; size = 4
tv946 = -476						; size = 4
tv944 = -472						; size = 4
tv932 = -468						; size = 4
tv930 = -464						; size = 4
tv917 = -460						; size = 4
tv915 = -456						; size = 4
tv905 = -452						; size = 4
tv903 = -448						; size = 4
tv890 = -444						; size = 4
tv888 = -440						; size = 4
tv878 = -436						; size = 4
tv876 = -432						; size = 4
tv863 = -428						; size = 4
tv861 = -424						; size = 4
tv852 = -420						; size = 4
tv850 = -416						; size = 4
tv837 = -412						; size = 4
tv835 = -408						; size = 4
tv827 = -404						; size = 4
tv825 = -400						; size = 4
tv815 = -396						; size = 4
tv813 = -392						; size = 4
tv789 = -388						; size = 4
tv787 = -384						; size = 4
tv779 = -380						; size = 4
tv777 = -376						; size = 4
tv767 = -372						; size = 4
tv765 = -368						; size = 4
tv742 = -364						; size = 4
tv740 = -360						; size = 4
tv731 = -356						; size = 4
tv729 = -352						; size = 4
tv717 = -348						; size = 4
tv715 = -344						; size = 4
tv705 = -340						; size = 4
tv703 = -336						; size = 4
tv690 = -332						; size = 4
tv688 = -328						; size = 4
tv676 = -324						; size = 4
tv674 = -320						; size = 4
tv661 = -316						; size = 4
tv659 = -312						; size = 4
tv650 = -308						; size = 4
tv648 = -304						; size = 4
tv639 = -300						; size = 4
tv637 = -296						; size = 4
tv627 = -292						; size = 4
tv625 = -288						; size = 4
tv612 = -284						; size = 4
tv610 = -280						; size = 4
tv601 = -276						; size = 4
tv599 = -272						; size = 4
tv586 = -268						; size = 4
tv584 = -264						; size = 4
tv576 = -260						; size = 4
tv574 = -256						; size = 4
tv564 = -252						; size = 4
tv562 = -248						; size = 4
tv538 = -244						; size = 4
tv536 = -240						; size = 4
tv528 = -236						; size = 4
tv526 = -232						; size = 4
tv516 = -228						; size = 4
tv514 = -224						; size = 4
tv491 = -220						; size = 4
tv489 = -216						; size = 4
tv480 = -212						; size = 4
tv478 = -208						; size = 4
tv466 = -204						; size = 4
tv464 = -200						; size = 4
tv454 = -196						; size = 4
tv452 = -192						; size = 4
tv439 = -188						; size = 4
tv437 = -184						; size = 4
tv426 = -180						; size = 4
tv424 = -176						; size = 4
tv412 = -172						; size = 4
tv410 = -168						; size = 4
tv398 = -164						; size = 4
tv396 = -160						; size = 4
tv383 = -156						; size = 4
tv381 = -152						; size = 4
tv369 = -148						; size = 4
tv367 = -144						; size = 4
tv353 = -140						; size = 4
tv351 = -136						; size = 4
tv343 = -132						; size = 4
tv341 = -128						; size = 4
tv331 = -124						; size = 4
tv329 = -120						; size = 4
tv305 = -116						; size = 4
tv303 = -112						; size = 4
tv295 = -108						; size = 4
tv293 = -104						; size = 4
tv283 = -100						; size = 4
tv281 = -96						; size = 4
tv258 = -92						; size = 4
tv256 = -88						; size = 4
tv244 = -84						; size = 4
tv242 = -80						; size = 4
tv228 = -76						; size = 4
tv226 = -72						; size = 4
tv218 = -68						; size = 4
tv216 = -64						; size = 4
tv206 = -60						; size = 4
tv204 = -56						; size = 4
tv181 = -52						; size = 4
tv179 = -48						; size = 4
tv167 = -44						; size = 4
tv165 = -40						; size = 4
tv152 = -36						; size = 4
tv150 = -32						; size = 4
tv141 = -28						; size = 4
tv139 = -24						; size = 4
tv95 = -20						; size = 4
tv93 = -16						; size = 4
tv83 = -12						; size = 4
tv81 = -8						; size = 4
_this$ = -4						; size = 4
?ParseAsDecimalNumberString@ParserState@Internal@Core@Math@Palmtree@@QAEHXZ PROC ; Palmtree::Math::Core::Internal::ParserState::ParseAsDecimalNumberString, COMDAT
; _this$ = ecx

; 130  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 2c 04 00
	00		 sub	 esp, 1068		; 0000042cH
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	51		 push	 ecx
  0000c	8d bd d4 fb ff
	ff		 lea	 edi, DWORD PTR [ebp-1068]
  00012	b9 0b 01 00 00	 mov	 ecx, 267		; 0000010bH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	59		 pop	 ecx
  0001f	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00022	b9 00 00 00 00	 mov	 ecx, OFFSET __F159A697_pmc_parse@cpp
  00027	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 131  :             if (_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE)

  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00032	83 e1 01	 and	 ecx, 1
  00035	74 08		 je	 SHORT $LN2@ParseAsDec

; 132  :                 _source.SkipSpace();

  00037	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ?SkipSpace@StringReader@Internal@Core@Math@Palmtree@@QAEXXZ ; Palmtree::Math::Core::Internal::StringReader::SkipSpace
$LN2@ParseAsDec:

; 133  :             if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  0003f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00042	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00045	25 00 01 00 00	 and	 eax, 256		; 00000100H
  0004a	0f 84 ed 04 00
	00		 je	 $LN3@ParseAsDec
  00050	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	89 4d f8	 mov	 DWORD PTR tv81[ebp], ecx
  00056	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00059	8b 02		 mov	 eax, DWORD PTR [edx]
  0005b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0005e	89 4d f4	 mov	 DWORD PTR tv83[ebp], ecx
  00061	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00064	83 c2 38	 add	 edx, 56			; 00000038H
  00067	8b f4		 mov	 esi, esp
  00069	52		 push	 edx
  0006a	8b 4d f8	 mov	 ecx, DWORD PTR tv81[ebp]
  0006d	ff 55 f4	 call	 DWORD PTR tv83[ebp]
  00070	3b f4		 cmp	 esi, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00077	85 c0		 test	 eax, eax
  00079	0f 84 be 04 00
	00		 je	 $LN3@ParseAsDec

; 134  :             {
; 135  :                 _source.SkipString(_currency_symbol);

  0007f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00082	89 45 f0	 mov	 DWORD PTR tv93[ebp], eax
  00085	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008a	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0008d	89 45 ec	 mov	 DWORD PTR tv95[ebp], eax
  00090	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00093	83 c1 38	 add	 ecx, 56			; 00000038H
  00096	8b f4		 mov	 esi, esp
  00098	51		 push	 ecx
  00099	8b 4d f0	 mov	 ecx, DWORD PTR tv93[ebp]
  0009c	ff 55 ec	 call	 DWORD PTR tv95[ebp]
  0009f	3b f4		 cmp	 esi, esp
  000a1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 136  :                 if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE) && _source.StartsWith(L" "))

  000a6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a9	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  000ac	83 e0 01	 and	 eax, 1
  000af	74 4e		 je	 SHORT $LN5@ParseAsDec
  000b1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b4	89 4d e8	 mov	 DWORD PTR tv139[ebp], ecx
  000b7	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000ba	8b 02		 mov	 eax, DWORD PTR [edx]
  000bc	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000bf	89 4d e4	 mov	 DWORD PTR tv141[ebp], ecx
  000c2	8b f4		 mov	 esi, esp
  000c4	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5@
  000c9	8b 4d e8	 mov	 ecx, DWORD PTR tv139[ebp]
  000cc	ff 55 e4	 call	 DWORD PTR tv141[ebp]
  000cf	3b f4		 cmp	 esi, esp
  000d1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d6	85 c0		 test	 eax, eax
  000d8	74 25		 je	 SHORT $LN5@ParseAsDec

; 137  :                     _source.SkipString(L" ");

  000da	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000dd	89 55 e0	 mov	 DWORD PTR tv150[ebp], edx
  000e0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e5	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  000e8	89 55 dc	 mov	 DWORD PTR tv152[ebp], edx
  000eb	8b f4		 mov	 esi, esp
  000ed	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5@
  000f2	8b 4d e0	 mov	 ecx, DWORD PTR tv150[ebp]
  000f5	ff 55 dc	 call	 DWORD PTR tv152[ebp]
  000f8	3b f4		 cmp	 esi, esp
  000fa	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN5@ParseAsDec:

; 138  :                 if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_SIGN) && _source.StartsWith(_positive_sign))

  000ff	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00102	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00105	83 e1 04	 and	 ecx, 4
  00108	0f 84 25 01 00
	00		 je	 $LN6@ParseAsDec
  0010e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00111	89 55 d8	 mov	 DWORD PTR tv165[ebp], edx
  00114	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00117	8b 08		 mov	 ecx, DWORD PTR [eax]
  00119	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0011c	89 55 d4	 mov	 DWORD PTR tv167[ebp], edx
  0011f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00122	83 c0 5a	 add	 eax, 90			; 0000005aH
  00125	8b f4		 mov	 esi, esp
  00127	50		 push	 eax
  00128	8b 4d d8	 mov	 ecx, DWORD PTR tv165[ebp]
  0012b	ff 55 d4	 call	 DWORD PTR tv167[ebp]
  0012e	3b f4		 cmp	 esi, esp
  00130	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00135	85 c0		 test	 eax, eax
  00137	0f 84 f6 00 00
	00		 je	 $LN6@ParseAsDec

; 139  :                 {
; 140  :                     *_sign = 1;

  0013d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00140	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00143	c6 02 01	 mov	 BYTE PTR [edx], 1

; 141  :                     _source.SkipString(_positive_sign);

  00146	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00149	89 45 d0	 mov	 DWORD PTR tv179[ebp], eax
  0014c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0014f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00151	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00154	89 45 cc	 mov	 DWORD PTR tv181[ebp], eax
  00157	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0015a	83 c1 5a	 add	 ecx, 90			; 0000005aH
  0015d	8b f4		 mov	 esi, esp
  0015f	51		 push	 ecx
  00160	8b 4d d0	 mov	 ecx, DWORD PTR tv179[ebp]
  00163	ff 55 cc	 call	 DWORD PTR tv181[ebp]
  00166	3b f4		 cmp	 esi, esp
  00168	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 142  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  0016d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00170	8b 02		 mov	 eax, DWORD PTR [edx]
  00172	8b f4		 mov	 esi, esp
  00174	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00177	8b 10		 mov	 edx, DWORD PTR [eax]
  00179	ff d2		 call	 edx
  0017b	3b f4		 cmp	 esi, esp
  0017d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00182	0f b7 c0	 movzx	 eax, ax
  00185	50		 push	 eax
  00186	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  0018b	83 c4 04	 add	 esp, 4
  0018e	85 c0		 test	 eax, eax
  00190	7c 08		 jl	 SHORT $LN8@ParseAsDec

; 143  :                         ParseAsIntegerPartNumberSequence();

  00192	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00195	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence
$LN8@ParseAsDec:

; 144  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))

  0019a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0019d	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  001a0	83 e2 20	 and	 edx, 32			; 00000020H
  001a3	0f 84 85 00 00
	00		 je	 $LN9@ParseAsDec
  001a9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001ac	89 45 c8	 mov	 DWORD PTR tv204[ebp], eax
  001af	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001b2	8b 11		 mov	 edx, DWORD PTR [ecx]
  001b4	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001b7	89 45 c4	 mov	 DWORD PTR tv206[ebp], eax
  001ba	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001bd	81 c1 9e 00 00
	00		 add	 ecx, 158		; 0000009eH
  001c3	8b f4		 mov	 esi, esp
  001c5	51		 push	 ecx
  001c6	8b 4d c8	 mov	 ecx, DWORD PTR tv204[ebp]
  001c9	ff 55 c4	 call	 DWORD PTR tv206[ebp]
  001cc	3b f4		 cmp	 esi, esp
  001ce	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001d3	85 c0		 test	 eax, eax
  001d5	74 57		 je	 SHORT $LN9@ParseAsDec

; 145  :                     {
; 146  :                         _source.SkipString(_decimal_separator);

  001d7	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001da	89 55 c0	 mov	 DWORD PTR tv216[ebp], edx
  001dd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001e0	8b 08		 mov	 ecx, DWORD PTR [eax]
  001e2	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  001e5	89 55 bc	 mov	 DWORD PTR tv218[ebp], edx
  001e8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001eb	05 9e 00 00 00	 add	 eax, 158		; 0000009eH
  001f0	8b f4		 mov	 esi, esp
  001f2	50		 push	 eax
  001f3	8b 4d c0	 mov	 ecx, DWORD PTR tv216[ebp]
  001f6	ff 55 bc	 call	 DWORD PTR tv218[ebp]
  001f9	3b f4		 cmp	 esi, esp
  001fb	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 147  :                         _frac_part.Write(L'.');

  00200	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00203	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00206	89 4d b8	 mov	 DWORD PTR tv226[ebp], ecx
  00209	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0020c	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0020f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00212	89 4d b4	 mov	 DWORD PTR tv228[ebp], ecx
  00215	8b f4		 mov	 esi, esp
  00217	6a 2e		 push	 46			; 0000002eH
  00219	8b 4d b8	 mov	 ecx, DWORD PTR tv226[ebp]
  0021c	ff 55 b4	 call	 DWORD PTR tv228[ebp]
  0021f	3b f4		 cmp	 esi, esp
  00221	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 148  :                         ParseAsFractionPartNumberSequence();

  00226	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00229	e8 00 00 00 00	 call	 ?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence
$LN9@ParseAsDec:

; 149  :                     }
; 150  :                 }

  0022e	e9 05 03 00 00	 jmp	 $LN7@ParseAsDec
$LN6@ParseAsDec:

; 151  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)

  00233	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00236	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00239	83 e0 04	 and	 eax, 4
  0023c	0f 84 26 01 00
	00		 je	 $LN10@ParseAsDec
  00242	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00245	89 4d b0	 mov	 DWORD PTR tv242[ebp], ecx
  00248	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0024b	8b 02		 mov	 eax, DWORD PTR [edx]
  0024d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00250	89 4d ac	 mov	 DWORD PTR tv244[ebp], ecx
  00253	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00256	83 c2 7c	 add	 edx, 124		; 0000007cH
  00259	8b f4		 mov	 esi, esp
  0025b	52		 push	 edx
  0025c	8b 4d b0	 mov	 ecx, DWORD PTR tv242[ebp]
  0025f	ff 55 ac	 call	 DWORD PTR tv244[ebp]
  00262	3b f4		 cmp	 esi, esp
  00264	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00269	85 c0		 test	 eax, eax
  0026b	0f 84 f7 00 00
	00		 je	 $LN10@ParseAsDec

; 152  :                 {
; 153  :                     *_sign = -1;

  00271	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00274	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00277	c6 01 ff	 mov	 BYTE PTR [ecx], -1

; 154  :                     _source.SkipString(_negative_sign);

  0027a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0027d	89 55 a8	 mov	 DWORD PTR tv256[ebp], edx
  00280	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00283	8b 08		 mov	 ecx, DWORD PTR [eax]
  00285	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00288	89 55 a4	 mov	 DWORD PTR tv258[ebp], edx
  0028b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0028e	83 c0 7c	 add	 eax, 124		; 0000007cH
  00291	8b f4		 mov	 esi, esp
  00293	50		 push	 eax
  00294	8b 4d a8	 mov	 ecx, DWORD PTR tv256[ebp]
  00297	ff 55 a4	 call	 DWORD PTR tv258[ebp]
  0029a	3b f4		 cmp	 esi, esp
  0029c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 155  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  002a1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002a4	8b 11		 mov	 edx, DWORD PTR [ecx]
  002a6	8b f4		 mov	 esi, esp
  002a8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002ab	8b 02		 mov	 eax, DWORD PTR [edx]
  002ad	ff d0		 call	 eax
  002af	3b f4		 cmp	 esi, esp
  002b1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002b6	0f b7 c8	 movzx	 ecx, ax
  002b9	51		 push	 ecx
  002ba	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  002bf	83 c4 04	 add	 esp, 4
  002c2	85 c0		 test	 eax, eax
  002c4	7c 08		 jl	 SHORT $LN12@ParseAsDec

; 156  :                         ParseAsIntegerPartNumberSequence();

  002c6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002c9	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence
$LN12@ParseAsDec:

; 157  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))

  002ce	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002d1	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  002d4	83 e0 20	 and	 eax, 32			; 00000020H
  002d7	0f 84 86 00 00
	00		 je	 $LN13@ParseAsDec
  002dd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002e0	89 4d a0	 mov	 DWORD PTR tv281[ebp], ecx
  002e3	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002e6	8b 02		 mov	 eax, DWORD PTR [edx]
  002e8	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  002eb	89 4d 9c	 mov	 DWORD PTR tv283[ebp], ecx
  002ee	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002f1	81 c2 9e 00 00
	00		 add	 edx, 158		; 0000009eH
  002f7	8b f4		 mov	 esi, esp
  002f9	52		 push	 edx
  002fa	8b 4d a0	 mov	 ecx, DWORD PTR tv281[ebp]
  002fd	ff 55 9c	 call	 DWORD PTR tv283[ebp]
  00300	3b f4		 cmp	 esi, esp
  00302	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00307	85 c0		 test	 eax, eax
  00309	74 58		 je	 SHORT $LN13@ParseAsDec

; 158  :                     {
; 159  :                         _source.SkipString(_decimal_separator);

  0030b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0030e	89 45 98	 mov	 DWORD PTR tv293[ebp], eax
  00311	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00314	8b 11		 mov	 edx, DWORD PTR [ecx]
  00316	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00319	89 45 94	 mov	 DWORD PTR tv295[ebp], eax
  0031c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0031f	81 c1 9e 00 00
	00		 add	 ecx, 158		; 0000009eH
  00325	8b f4		 mov	 esi, esp
  00327	51		 push	 ecx
  00328	8b 4d 98	 mov	 ecx, DWORD PTR tv293[ebp]
  0032b	ff 55 94	 call	 DWORD PTR tv295[ebp]
  0032e	3b f4		 cmp	 esi, esp
  00330	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 160  :                         _frac_part.Write(L'.');

  00335	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00338	83 c2 1c	 add	 edx, 28			; 0000001cH
  0033b	89 55 90	 mov	 DWORD PTR tv303[ebp], edx
  0033e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00341	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00344	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00347	89 55 8c	 mov	 DWORD PTR tv305[ebp], edx
  0034a	8b f4		 mov	 esi, esp
  0034c	6a 2e		 push	 46			; 0000002eH
  0034e	8b 4d 90	 mov	 ecx, DWORD PTR tv303[ebp]
  00351	ff 55 8c	 call	 DWORD PTR tv305[ebp]
  00354	3b f4		 cmp	 esi, esp
  00356	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 161  :                         ParseAsFractionPartNumberSequence();

  0035b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0035e	e8 00 00 00 00	 call	 ?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence
$LN13@ParseAsDec:

; 162  :                     }
; 163  :                 }
; 164  :                 else

  00363	e9 d0 01 00 00	 jmp	 $LN7@ParseAsDec
$LN10@ParseAsDec:

; 165  :                 {
; 166  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  00368	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0036b	8b 10		 mov	 edx, DWORD PTR [eax]
  0036d	8b f4		 mov	 esi, esp
  0036f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00372	8b 02		 mov	 eax, DWORD PTR [edx]
  00374	ff d0		 call	 eax
  00376	3b f4		 cmp	 esi, esp
  00378	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0037d	0f b7 c8	 movzx	 ecx, ax
  00380	51		 push	 ecx
  00381	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  00386	83 c4 04	 add	 esp, 4
  00389	85 c0		 test	 eax, eax
  0038b	7c 08		 jl	 SHORT $LN14@ParseAsDec

; 167  :                         ParseAsIntegerPartNumberSequence();

  0038d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00390	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence
$LN14@ParseAsDec:

; 168  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))

  00395	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00398	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0039b	83 e0 20	 and	 eax, 32			; 00000020H
  0039e	0f 84 98 00 00
	00		 je	 $LN15@ParseAsDec
  003a4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003a7	89 4d 88	 mov	 DWORD PTR tv329[ebp], ecx
  003aa	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  003ad	8b 02		 mov	 eax, DWORD PTR [edx]
  003af	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  003b2	89 4d 84	 mov	 DWORD PTR tv331[ebp], ecx
  003b5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  003b8	81 c2 9e 00 00
	00		 add	 edx, 158		; 0000009eH
  003be	8b f4		 mov	 esi, esp
  003c0	52		 push	 edx
  003c1	8b 4d 88	 mov	 ecx, DWORD PTR tv329[ebp]
  003c4	ff 55 84	 call	 DWORD PTR tv331[ebp]
  003c7	3b f4		 cmp	 esi, esp
  003c9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003ce	85 c0		 test	 eax, eax
  003d0	74 6a		 je	 SHORT $LN15@ParseAsDec

; 169  :                     {
; 170  :                         _source.SkipString(_decimal_separator);

  003d2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003d5	89 45 80	 mov	 DWORD PTR tv341[ebp], eax
  003d8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003db	8b 11		 mov	 edx, DWORD PTR [ecx]
  003dd	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  003e0	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv343[ebp], eax
  003e6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003e9	81 c1 9e 00 00
	00		 add	 ecx, 158		; 0000009eH
  003ef	8b f4		 mov	 esi, esp
  003f1	51		 push	 ecx
  003f2	8b 4d 80	 mov	 ecx, DWORD PTR tv341[ebp]
  003f5	ff 95 7c ff ff
	ff		 call	 DWORD PTR tv343[ebp]
  003fb	3b f4		 cmp	 esi, esp
  003fd	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 171  :                         _frac_part.Write(L'.');

  00402	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00405	83 c2 1c	 add	 edx, 28			; 0000001cH
  00408	89 95 78 ff ff
	ff		 mov	 DWORD PTR tv351[ebp], edx
  0040e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00411	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00414	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00417	89 95 74 ff ff
	ff		 mov	 DWORD PTR tv353[ebp], edx
  0041d	8b f4		 mov	 esi, esp
  0041f	6a 2e		 push	 46			; 0000002eH
  00421	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR tv351[ebp]
  00427	ff 95 74 ff ff
	ff		 call	 DWORD PTR tv353[ebp]
  0042d	3b f4		 cmp	 esi, esp
  0042f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 172  :                         ParseAsFractionPartNumberSequence();

  00434	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00437	e8 00 00 00 00	 call	 ?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence
$LN15@ParseAsDec:

; 173  :                     }
; 174  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))

  0043c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0043f	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00442	83 e1 08	 and	 ecx, 8
  00445	74 73		 je	 SHORT $LN16@ParseAsDec
  00447	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0044a	89 95 70 ff ff
	ff		 mov	 DWORD PTR tv367[ebp], edx
  00450	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00453	8b 08		 mov	 ecx, DWORD PTR [eax]
  00455	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00458	89 95 6c ff ff
	ff		 mov	 DWORD PTR tv369[ebp], edx
  0045e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00461	83 c0 5a	 add	 eax, 90			; 0000005aH
  00464	8b f4		 mov	 esi, esp
  00466	50		 push	 eax
  00467	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR tv367[ebp]
  0046d	ff 95 6c ff ff
	ff		 call	 DWORD PTR tv369[ebp]
  00473	3b f4		 cmp	 esi, esp
  00475	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0047a	85 c0		 test	 eax, eax
  0047c	74 3c		 je	 SHORT $LN16@ParseAsDec

; 175  :                     {
; 176  :                         *_sign = 1;

  0047e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00481	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00484	c6 02 01	 mov	 BYTE PTR [edx], 1

; 177  :                         _source.SkipString(_positive_sign);

  00487	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0048a	89 85 68 ff ff
	ff		 mov	 DWORD PTR tv381[ebp], eax
  00490	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00493	8b 11		 mov	 edx, DWORD PTR [ecx]
  00495	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00498	89 85 64 ff ff
	ff		 mov	 DWORD PTR tv383[ebp], eax
  0049e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004a1	83 c1 5a	 add	 ecx, 90			; 0000005aH
  004a4	8b f4		 mov	 esi, esp
  004a6	51		 push	 ecx
  004a7	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR tv381[ebp]
  004ad	ff 95 64 ff ff
	ff		 call	 DWORD PTR tv383[ebp]
  004b3	3b f4		 cmp	 esi, esp
  004b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN16@ParseAsDec:

; 178  :                     }
; 179  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)

  004ba	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  004bd	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  004c0	83 e0 08	 and	 eax, 8
  004c3	74 73		 je	 SHORT $LN7@ParseAsDec
  004c5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004c8	89 8d 60 ff ff
	ff		 mov	 DWORD PTR tv396[ebp], ecx
  004ce	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  004d1	8b 02		 mov	 eax, DWORD PTR [edx]
  004d3	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  004d6	89 8d 5c ff ff
	ff		 mov	 DWORD PTR tv398[ebp], ecx
  004dc	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  004df	83 c2 7c	 add	 edx, 124		; 0000007cH
  004e2	8b f4		 mov	 esi, esp
  004e4	52		 push	 edx
  004e5	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR tv396[ebp]
  004eb	ff 95 5c ff ff
	ff		 call	 DWORD PTR tv398[ebp]
  004f1	3b f4		 cmp	 esi, esp
  004f3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004f8	85 c0		 test	 eax, eax
  004fa	74 3c		 je	 SHORT $LN7@ParseAsDec

; 180  :                     {
; 181  :                         *_sign = -1;

  004fc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004ff	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00502	c6 01 ff	 mov	 BYTE PTR [ecx], -1

; 182  :                         _source.SkipString(_negative_sign);

  00505	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00508	89 95 58 ff ff
	ff		 mov	 DWORD PTR tv410[ebp], edx
  0050e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00511	8b 08		 mov	 ecx, DWORD PTR [eax]
  00513	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00516	89 95 54 ff ff
	ff		 mov	 DWORD PTR tv412[ebp], edx
  0051c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0051f	83 c0 7c	 add	 eax, 124		; 0000007cH
  00522	8b f4		 mov	 esi, esp
  00524	50		 push	 eax
  00525	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR tv410[ebp]
  0052b	ff 95 54 ff ff
	ff		 call	 DWORD PTR tv412[ebp]
  00531	3b f4		 cmp	 esi, esp
  00533	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN7@ParseAsDec:

; 183  :                     }
; 184  :                     else
; 185  :                     {
; 186  :                     }
; 187  :                 }

  00538	e9 c8 1c 00 00	 jmp	 $LN4@ParseAsDec
$LN3@ParseAsDec:

; 188  :             }
; 189  :             else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_PARENTHESES) && _source.StartsWith(L"(") /*&& 負数のエラーチェック()*/)

  0053d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00540	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00543	83 e2 10	 and	 edx, 16			; 00000010H
  00546	0f 84 96 04 00
	00		 je	 $LN19@ParseAsDec
  0054c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0054f	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv424[ebp], eax
  00555	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00558	8b 11		 mov	 edx, DWORD PTR [ecx]
  0055a	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0055d	89 85 4c ff ff
	ff		 mov	 DWORD PTR tv426[ebp], eax
  00563	8b f4		 mov	 esi, esp
  00565	68 00 00 00 00	 push	 OFFSET ??_C@_13LLDNKHDC@?$AA?$CI@
  0056a	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv424[ebp]
  00570	ff 95 4c ff ff
	ff		 call	 DWORD PTR tv426[ebp]
  00576	3b f4		 cmp	 esi, esp
  00578	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0057d	85 c0		 test	 eax, eax
  0057f	0f 84 5d 04 00
	00		 je	 $LN19@ParseAsDec

; 190  :             {
; 191  :                 *_sign = -1;

  00585	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00588	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0058b	c6 02 ff	 mov	 BYTE PTR [edx], -1

; 192  :                 _source.SkipString(L"(");

  0058e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00591	89 85 48 ff ff
	ff		 mov	 DWORD PTR tv437[ebp], eax
  00597	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0059a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0059c	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0059f	89 85 44 ff ff
	ff		 mov	 DWORD PTR tv439[ebp], eax
  005a5	8b f4		 mov	 esi, esp
  005a7	68 00 00 00 00	 push	 OFFSET ??_C@_13LLDNKHDC@?$AA?$CI@
  005ac	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR tv437[ebp]
  005b2	ff 95 44 ff ff
	ff		 call	 DWORD PTR tv439[ebp]
  005b8	3b f4		 cmp	 esi, esp
  005ba	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 193  : 
; 194  :                 if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  005bf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005c2	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  005c5	81 e2 00 01 00
	00		 and	 edx, 256		; 00000100H
  005cb	0f 84 c9 01 00
	00		 je	 $LN21@ParseAsDec
  005d1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  005d4	89 85 40 ff ff
	ff		 mov	 DWORD PTR tv452[ebp], eax
  005da	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005dd	8b 11		 mov	 edx, DWORD PTR [ecx]
  005df	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  005e2	89 85 3c ff ff
	ff		 mov	 DWORD PTR tv454[ebp], eax
  005e8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005eb	83 c1 38	 add	 ecx, 56			; 00000038H
  005ee	8b f4		 mov	 esi, esp
  005f0	51		 push	 ecx
  005f1	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR tv452[ebp]
  005f7	ff 95 3c ff ff
	ff		 call	 DWORD PTR tv454[ebp]
  005fd	3b f4		 cmp	 esi, esp
  005ff	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00604	85 c0		 test	 eax, eax
  00606	0f 84 8e 01 00
	00		 je	 $LN21@ParseAsDec

; 195  :                 {
; 196  :                     _source.SkipString(_currency_symbol);

  0060c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0060f	89 95 38 ff ff
	ff		 mov	 DWORD PTR tv464[ebp], edx
  00615	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00618	8b 08		 mov	 ecx, DWORD PTR [eax]
  0061a	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0061d	89 95 34 ff ff
	ff		 mov	 DWORD PTR tv466[ebp], edx
  00623	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00626	83 c0 38	 add	 eax, 56			; 00000038H
  00629	8b f4		 mov	 esi, esp
  0062b	50		 push	 eax
  0062c	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR tv464[ebp]
  00632	ff 95 34 ff ff
	ff		 call	 DWORD PTR tv466[ebp]
  00638	3b f4		 cmp	 esi, esp
  0063a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 197  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE) && _source.StartsWith(L" "))

  0063f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00642	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00645	83 e2 01	 and	 edx, 1
  00648	74 66		 je	 SHORT $LN23@ParseAsDec
  0064a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0064d	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv478[ebp], eax
  00653	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00656	8b 11		 mov	 edx, DWORD PTR [ecx]
  00658	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0065b	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv480[ebp], eax
  00661	8b f4		 mov	 esi, esp
  00663	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5@
  00668	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv478[ebp]
  0066e	ff 95 2c ff ff
	ff		 call	 DWORD PTR tv480[ebp]
  00674	3b f4		 cmp	 esi, esp
  00676	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0067b	85 c0		 test	 eax, eax
  0067d	74 31		 je	 SHORT $LN23@ParseAsDec

; 198  :                         _source.SkipString(L" ");

  0067f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00682	89 8d 28 ff ff
	ff		 mov	 DWORD PTR tv489[ebp], ecx
  00688	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0068b	8b 02		 mov	 eax, DWORD PTR [edx]
  0068d	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00690	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv491[ebp], ecx
  00696	8b f4		 mov	 esi, esp
  00698	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5@
  0069d	8b 8d 28 ff ff
	ff		 mov	 ecx, DWORD PTR tv489[ebp]
  006a3	ff 95 24 ff ff
	ff		 call	 DWORD PTR tv491[ebp]
  006a9	3b f4		 cmp	 esi, esp
  006ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN23@ParseAsDec:

; 199  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  006b0	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  006b3	8b 02		 mov	 eax, DWORD PTR [edx]
  006b5	8b f4		 mov	 esi, esp
  006b7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006ba	8b 10		 mov	 edx, DWORD PTR [eax]
  006bc	ff d2		 call	 edx
  006be	3b f4		 cmp	 esi, esp
  006c0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  006c5	0f b7 c0	 movzx	 eax, ax
  006c8	50		 push	 eax
  006c9	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  006ce	83 c4 04	 add	 esp, 4
  006d1	85 c0		 test	 eax, eax
  006d3	7c 08		 jl	 SHORT $LN24@ParseAsDec

; 200  :                         ParseAsIntegerPartNumberSequence();

  006d5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006d8	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence
$LN24@ParseAsDec:

; 201  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))

  006dd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006e0	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  006e3	83 e2 20	 and	 edx, 32			; 00000020H
  006e6	0f 84 a9 00 00
	00		 je	 $LN25@ParseAsDec
  006ec	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  006ef	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv514[ebp], eax
  006f5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006f8	8b 11		 mov	 edx, DWORD PTR [ecx]
  006fa	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  006fd	89 85 1c ff ff
	ff		 mov	 DWORD PTR tv516[ebp], eax
  00703	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00706	81 c1 9e 00 00
	00		 add	 ecx, 158		; 0000009eH
  0070c	8b f4		 mov	 esi, esp
  0070e	51		 push	 ecx
  0070f	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv514[ebp]
  00715	ff 95 1c ff ff
	ff		 call	 DWORD PTR tv516[ebp]
  0071b	3b f4		 cmp	 esi, esp
  0071d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00722	85 c0		 test	 eax, eax
  00724	74 6f		 je	 SHORT $LN25@ParseAsDec

; 202  :                     {
; 203  :                         _source.SkipString(_decimal_separator);

  00726	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00729	89 95 18 ff ff
	ff		 mov	 DWORD PTR tv526[ebp], edx
  0072f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00732	8b 08		 mov	 ecx, DWORD PTR [eax]
  00734	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00737	89 95 14 ff ff
	ff		 mov	 DWORD PTR tv528[ebp], edx
  0073d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00740	05 9e 00 00 00	 add	 eax, 158		; 0000009eH
  00745	8b f4		 mov	 esi, esp
  00747	50		 push	 eax
  00748	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR tv526[ebp]
  0074e	ff 95 14 ff ff
	ff		 call	 DWORD PTR tv528[ebp]
  00754	3b f4		 cmp	 esi, esp
  00756	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 204  :                         _frac_part.Write(L'.');

  0075b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0075e	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00761	89 8d 10 ff ff
	ff		 mov	 DWORD PTR tv536[ebp], ecx
  00767	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0076a	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0076d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00770	89 8d 0c ff ff
	ff		 mov	 DWORD PTR tv538[ebp], ecx
  00776	8b f4		 mov	 esi, esp
  00778	6a 2e		 push	 46			; 0000002eH
  0077a	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR tv536[ebp]
  00780	ff 95 0c ff ff
	ff		 call	 DWORD PTR tv538[ebp]
  00786	3b f4		 cmp	 esi, esp
  00788	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 205  :                         ParseAsFractionPartNumberSequence();

  0078d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00790	e8 00 00 00 00	 call	 ?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence
$LN25@ParseAsDec:

; 206  :                     }
; 207  :                 }
; 208  :                 else

  00795	e9 d6 01 00 00	 jmp	 $LN22@ParseAsDec
$LN21@ParseAsDec:

; 209  :                 {
; 210  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  0079a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0079d	8b 02		 mov	 eax, DWORD PTR [edx]
  0079f	8b f4		 mov	 esi, esp
  007a1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007a4	8b 10		 mov	 edx, DWORD PTR [eax]
  007a6	ff d2		 call	 edx
  007a8	3b f4		 cmp	 esi, esp
  007aa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  007af	0f b7 c0	 movzx	 eax, ax
  007b2	50		 push	 eax
  007b3	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  007b8	83 c4 04	 add	 esp, 4
  007bb	85 c0		 test	 eax, eax
  007bd	7c 08		 jl	 SHORT $LN26@ParseAsDec

; 211  :                         ParseAsIntegerPartNumberSequence();

  007bf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007c2	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence
$LN26@ParseAsDec:

; 212  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))

  007c7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007ca	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  007cd	83 e2 20	 and	 edx, 32			; 00000020H
  007d0	0f 84 a9 00 00
	00		 je	 $LN27@ParseAsDec
  007d6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  007d9	89 85 08 ff ff
	ff		 mov	 DWORD PTR tv562[ebp], eax
  007df	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007e2	8b 11		 mov	 edx, DWORD PTR [ecx]
  007e4	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  007e7	89 85 04 ff ff
	ff		 mov	 DWORD PTR tv564[ebp], eax
  007ed	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007f0	81 c1 9e 00 00
	00		 add	 ecx, 158		; 0000009eH
  007f6	8b f4		 mov	 esi, esp
  007f8	51		 push	 ecx
  007f9	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR tv562[ebp]
  007ff	ff 95 04 ff ff
	ff		 call	 DWORD PTR tv564[ebp]
  00805	3b f4		 cmp	 esi, esp
  00807	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0080c	85 c0		 test	 eax, eax
  0080e	74 6f		 je	 SHORT $LN27@ParseAsDec

; 213  :                     {
; 214  :                         _source.SkipString(_decimal_separator);

  00810	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00813	89 95 00 ff ff
	ff		 mov	 DWORD PTR tv574[ebp], edx
  00819	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0081c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0081e	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00821	89 95 fc fe ff
	ff		 mov	 DWORD PTR tv576[ebp], edx
  00827	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0082a	05 9e 00 00 00	 add	 eax, 158		; 0000009eH
  0082f	8b f4		 mov	 esi, esp
  00831	50		 push	 eax
  00832	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR tv574[ebp]
  00838	ff 95 fc fe ff
	ff		 call	 DWORD PTR tv576[ebp]
  0083e	3b f4		 cmp	 esi, esp
  00840	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 215  :                         _frac_part.Write(L'.');

  00845	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00848	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0084b	89 8d f8 fe ff
	ff		 mov	 DWORD PTR tv584[ebp], ecx
  00851	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00854	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00857	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0085a	89 8d f4 fe ff
	ff		 mov	 DWORD PTR tv586[ebp], ecx
  00860	8b f4		 mov	 esi, esp
  00862	6a 2e		 push	 46			; 0000002eH
  00864	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR tv584[ebp]
  0086a	ff 95 f4 fe ff
	ff		 call	 DWORD PTR tv586[ebp]
  00870	3b f4		 cmp	 esi, esp
  00872	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 216  :                         ParseAsFractionPartNumberSequence();

  00877	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0087a	e8 00 00 00 00	 call	 ?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence
$LN27@ParseAsDec:

; 217  :                     }
; 218  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE) && _source.StartsWith(L" "))

  0087f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00882	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00885	83 e0 02	 and	 eax, 2
  00888	0f 84 e2 00 00
	00		 je	 $LN22@ParseAsDec
  0088e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00891	89 8d f0 fe ff
	ff		 mov	 DWORD PTR tv599[ebp], ecx
  00897	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0089a	8b 02		 mov	 eax, DWORD PTR [edx]
  0089c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0089f	89 8d ec fe ff
	ff		 mov	 DWORD PTR tv601[ebp], ecx
  008a5	8b f4		 mov	 esi, esp
  008a7	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5@
  008ac	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR tv599[ebp]
  008b2	ff 95 ec fe ff
	ff		 call	 DWORD PTR tv601[ebp]
  008b8	3b f4		 cmp	 esi, esp
  008ba	e8 00 00 00 00	 call	 __RTC_CheckEsp
  008bf	85 c0		 test	 eax, eax
  008c1	0f 84 a9 00 00
	00		 je	 $LN22@ParseAsDec

; 219  :                     {
; 220  :                         _source.SkipString(L" ");

  008c7	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  008ca	89 95 e8 fe ff
	ff		 mov	 DWORD PTR tv610[ebp], edx
  008d0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  008d3	8b 08		 mov	 ecx, DWORD PTR [eax]
  008d5	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  008d8	89 95 e4 fe ff
	ff		 mov	 DWORD PTR tv612[ebp], edx
  008de	8b f4		 mov	 esi, esp
  008e0	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5@
  008e5	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR tv610[ebp]
  008eb	ff 95 e4 fe ff
	ff		 call	 DWORD PTR tv612[ebp]
  008f1	3b f4		 cmp	 esi, esp
  008f3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 221  :                         if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  008f8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  008fb	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  008fe	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  00904	74 6a		 je	 SHORT $LN22@ParseAsDec
  00906	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00909	89 95 e0 fe ff
	ff		 mov	 DWORD PTR tv625[ebp], edx
  0090f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00912	8b 08		 mov	 ecx, DWORD PTR [eax]
  00914	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00917	89 95 dc fe ff
	ff		 mov	 DWORD PTR tv627[ebp], edx
  0091d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00920	83 c0 38	 add	 eax, 56			; 00000038H
  00923	8b f4		 mov	 esi, esp
  00925	50		 push	 eax
  00926	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR tv625[ebp]
  0092c	ff 95 dc fe ff
	ff		 call	 DWORD PTR tv627[ebp]
  00932	3b f4		 cmp	 esi, esp
  00934	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00939	85 c0		 test	 eax, eax
  0093b	74 33		 je	 SHORT $LN22@ParseAsDec

; 222  :                             _source.SkipString(_currency_symbol);

  0093d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00940	89 8d d8 fe ff
	ff		 mov	 DWORD PTR tv637[ebp], ecx
  00946	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00949	8b 02		 mov	 eax, DWORD PTR [edx]
  0094b	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0094e	89 8d d4 fe ff
	ff		 mov	 DWORD PTR tv639[ebp], ecx
  00954	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00957	83 c2 38	 add	 edx, 56			; 00000038H
  0095a	8b f4		 mov	 esi, esp
  0095c	52		 push	 edx
  0095d	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR tv637[ebp]
  00963	ff 95 d4 fe ff
	ff		 call	 DWORD PTR tv639[ebp]
  00969	3b f4		 cmp	 esi, esp
  0096b	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN22@ParseAsDec:

; 223  :                     }
; 224  :                 }
; 225  :                 if (!_source.StartsWith(L")"))

  00970	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00973	89 85 d0 fe ff
	ff		 mov	 DWORD PTR tv648[ebp], eax
  00979	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0097c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0097e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00981	89 85 cc fe ff
	ff		 mov	 DWORD PTR tv650[ebp], eax
  00987	8b f4		 mov	 esi, esp
  00989	68 00 00 00 00	 push	 OFFSET ??_C@_13DIBMAFH@?$AA?$CJ@
  0098e	8b 8d d0 fe ff
	ff		 mov	 ecx, DWORD PTR tv648[ebp]
  00994	ff 95 cc fe ff
	ff		 call	 DWORD PTR tv650[ebp]
  0099a	3b f4		 cmp	 esi, esp
  0099c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  009a1	85 c0		 test	 eax, eax
  009a3	75 07		 jne	 SHORT $LN30@ParseAsDec

; 226  :                     return (0);

  009a5	33 c0		 xor	 eax, eax
  009a7	e9 91 18 00 00	 jmp	 $LN1@ParseAsDec
$LN30@ParseAsDec:

; 227  :                 _source.SkipString(L")");

  009ac	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  009af	89 8d c8 fe ff
	ff		 mov	 DWORD PTR tv659[ebp], ecx
  009b5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  009b8	8b 02		 mov	 eax, DWORD PTR [edx]
  009ba	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  009bd	89 8d c4 fe ff
	ff		 mov	 DWORD PTR tv661[ebp], ecx
  009c3	8b f4		 mov	 esi, esp
  009c5	68 00 00 00 00	 push	 OFFSET ??_C@_13DIBMAFH@?$AA?$CJ@
  009ca	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR tv659[ebp]
  009d0	ff 95 c4 fe ff
	ff		 call	 DWORD PTR tv661[ebp]
  009d6	3b f4		 cmp	 esi, esp
  009d8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  009dd	e9 23 18 00 00	 jmp	 $LN4@ParseAsDec
$LN19@ParseAsDec:

; 228  :             }
; 229  :             else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_SIGN) && _source.StartsWith(_positive_sign))

  009e2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  009e5	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  009e8	83 e0 04	 and	 eax, 4
  009eb	0f 84 a7 04 00
	00		 je	 $LN31@ParseAsDec
  009f1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  009f4	89 8d c0 fe ff
	ff		 mov	 DWORD PTR tv674[ebp], ecx
  009fa	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  009fd	8b 02		 mov	 eax, DWORD PTR [edx]
  009ff	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00a02	89 8d bc fe ff
	ff		 mov	 DWORD PTR tv676[ebp], ecx
  00a08	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00a0b	83 c2 5a	 add	 edx, 90			; 0000005aH
  00a0e	8b f4		 mov	 esi, esp
  00a10	52		 push	 edx
  00a11	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR tv674[ebp]
  00a17	ff 95 bc fe ff
	ff		 call	 DWORD PTR tv676[ebp]
  00a1d	3b f4		 cmp	 esi, esp
  00a1f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00a24	85 c0		 test	 eax, eax
  00a26	0f 84 6c 04 00
	00		 je	 $LN31@ParseAsDec

; 230  :             {
; 231  :                 *_sign = 1;

  00a2c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00a2f	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00a32	c6 01 01	 mov	 BYTE PTR [ecx], 1

; 232  :                 _source.SkipString(_positive_sign);

  00a35	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00a38	89 95 b8 fe ff
	ff		 mov	 DWORD PTR tv688[ebp], edx
  00a3e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00a41	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a43	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00a46	89 95 b4 fe ff
	ff		 mov	 DWORD PTR tv690[ebp], edx
  00a4c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00a4f	83 c0 5a	 add	 eax, 90			; 0000005aH
  00a52	8b f4		 mov	 esi, esp
  00a54	50		 push	 eax
  00a55	8b 8d b8 fe ff
	ff		 mov	 ecx, DWORD PTR tv688[ebp]
  00a5b	ff 95 b4 fe ff
	ff		 call	 DWORD PTR tv690[ebp]
  00a61	3b f4		 cmp	 esi, esp
  00a63	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 233  :                 if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  00a68	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a6b	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00a6e	81 e2 00 01 00
	00		 and	 edx, 256		; 00000100H
  00a74	0f 84 c9 01 00
	00		 je	 $LN33@ParseAsDec
  00a7a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00a7d	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv703[ebp], eax
  00a83	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a86	8b 11		 mov	 edx, DWORD PTR [ecx]
  00a88	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00a8b	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv705[ebp], eax
  00a91	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a94	83 c1 38	 add	 ecx, 56			; 00000038H
  00a97	8b f4		 mov	 esi, esp
  00a99	51		 push	 ecx
  00a9a	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR tv703[ebp]
  00aa0	ff 95 ac fe ff
	ff		 call	 DWORD PTR tv705[ebp]
  00aa6	3b f4		 cmp	 esi, esp
  00aa8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00aad	85 c0		 test	 eax, eax
  00aaf	0f 84 8e 01 00
	00		 je	 $LN33@ParseAsDec

; 234  :                 {
; 235  :                     _source.SkipString(_currency_symbol);

  00ab5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00ab8	89 95 a8 fe ff
	ff		 mov	 DWORD PTR tv715[ebp], edx
  00abe	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00ac1	8b 08		 mov	 ecx, DWORD PTR [eax]
  00ac3	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00ac6	89 95 a4 fe ff
	ff		 mov	 DWORD PTR tv717[ebp], edx
  00acc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00acf	83 c0 38	 add	 eax, 56			; 00000038H
  00ad2	8b f4		 mov	 esi, esp
  00ad4	50		 push	 eax
  00ad5	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv715[ebp]
  00adb	ff 95 a4 fe ff
	ff		 call	 DWORD PTR tv717[ebp]
  00ae1	3b f4		 cmp	 esi, esp
  00ae3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 236  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE) && _source.StartsWith(L" "))

  00ae8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00aeb	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00aee	83 e2 01	 and	 edx, 1
  00af1	74 66		 je	 SHORT $LN35@ParseAsDec
  00af3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00af6	89 85 a0 fe ff
	ff		 mov	 DWORD PTR tv729[ebp], eax
  00afc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00aff	8b 11		 mov	 edx, DWORD PTR [ecx]
  00b01	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00b04	89 85 9c fe ff
	ff		 mov	 DWORD PTR tv731[ebp], eax
  00b0a	8b f4		 mov	 esi, esp
  00b0c	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5@
  00b11	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR tv729[ebp]
  00b17	ff 95 9c fe ff
	ff		 call	 DWORD PTR tv731[ebp]
  00b1d	3b f4		 cmp	 esi, esp
  00b1f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00b24	85 c0		 test	 eax, eax
  00b26	74 31		 je	 SHORT $LN35@ParseAsDec

; 237  :                         _source.SkipString(L" ");

  00b28	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b2b	89 8d 98 fe ff
	ff		 mov	 DWORD PTR tv740[ebp], ecx
  00b31	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00b34	8b 02		 mov	 eax, DWORD PTR [edx]
  00b36	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00b39	89 8d 94 fe ff
	ff		 mov	 DWORD PTR tv742[ebp], ecx
  00b3f	8b f4		 mov	 esi, esp
  00b41	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5@
  00b46	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR tv740[ebp]
  00b4c	ff 95 94 fe ff
	ff		 call	 DWORD PTR tv742[ebp]
  00b52	3b f4		 cmp	 esi, esp
  00b54	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN35@ParseAsDec:

; 238  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  00b59	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00b5c	8b 02		 mov	 eax, DWORD PTR [edx]
  00b5e	8b f4		 mov	 esi, esp
  00b60	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b63	8b 10		 mov	 edx, DWORD PTR [eax]
  00b65	ff d2		 call	 edx
  00b67	3b f4		 cmp	 esi, esp
  00b69	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00b6e	0f b7 c0	 movzx	 eax, ax
  00b71	50		 push	 eax
  00b72	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  00b77	83 c4 04	 add	 esp, 4
  00b7a	85 c0		 test	 eax, eax
  00b7c	7c 08		 jl	 SHORT $LN36@ParseAsDec

; 239  :                         ParseAsIntegerPartNumberSequence();

  00b7e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b81	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence
$LN36@ParseAsDec:

; 240  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))

  00b86	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b89	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00b8c	83 e2 20	 and	 edx, 32			; 00000020H
  00b8f	0f 84 a9 00 00
	00		 je	 $LN37@ParseAsDec
  00b95	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00b98	89 85 90 fe ff
	ff		 mov	 DWORD PTR tv765[ebp], eax
  00b9e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ba1	8b 11		 mov	 edx, DWORD PTR [ecx]
  00ba3	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00ba6	89 85 8c fe ff
	ff		 mov	 DWORD PTR tv767[ebp], eax
  00bac	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00baf	81 c1 9e 00 00
	00		 add	 ecx, 158		; 0000009eH
  00bb5	8b f4		 mov	 esi, esp
  00bb7	51		 push	 ecx
  00bb8	8b 8d 90 fe ff
	ff		 mov	 ecx, DWORD PTR tv765[ebp]
  00bbe	ff 95 8c fe ff
	ff		 call	 DWORD PTR tv767[ebp]
  00bc4	3b f4		 cmp	 esi, esp
  00bc6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00bcb	85 c0		 test	 eax, eax
  00bcd	74 6f		 je	 SHORT $LN37@ParseAsDec

; 241  :                     {
; 242  :                         _source.SkipString(_decimal_separator);

  00bcf	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00bd2	89 95 88 fe ff
	ff		 mov	 DWORD PTR tv777[ebp], edx
  00bd8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00bdb	8b 08		 mov	 ecx, DWORD PTR [eax]
  00bdd	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00be0	89 95 84 fe ff
	ff		 mov	 DWORD PTR tv779[ebp], edx
  00be6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00be9	05 9e 00 00 00	 add	 eax, 158		; 0000009eH
  00bee	8b f4		 mov	 esi, esp
  00bf0	50		 push	 eax
  00bf1	8b 8d 88 fe ff
	ff		 mov	 ecx, DWORD PTR tv777[ebp]
  00bf7	ff 95 84 fe ff
	ff		 call	 DWORD PTR tv779[ebp]
  00bfd	3b f4		 cmp	 esi, esp
  00bff	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 243  :                         _frac_part.Write(L'.');

  00c04	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c07	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00c0a	89 8d 80 fe ff
	ff		 mov	 DWORD PTR tv787[ebp], ecx
  00c10	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00c13	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00c16	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00c19	89 8d 7c fe ff
	ff		 mov	 DWORD PTR tv789[ebp], ecx
  00c1f	8b f4		 mov	 esi, esp
  00c21	6a 2e		 push	 46			; 0000002eH
  00c23	8b 8d 80 fe ff
	ff		 mov	 ecx, DWORD PTR tv787[ebp]
  00c29	ff 95 7c fe ff
	ff		 call	 DWORD PTR tv789[ebp]
  00c2f	3b f4		 cmp	 esi, esp
  00c31	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 244  :                         ParseAsFractionPartNumberSequence();

  00c36	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c39	e8 00 00 00 00	 call	 ?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence
$LN37@ParseAsDec:

; 245  :                     }
; 246  :                 }
; 247  :                 else

  00c3e	e9 50 02 00 00	 jmp	 $LN34@ParseAsDec
$LN33@ParseAsDec:

; 248  :                 {
; 249  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  00c43	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00c46	8b 02		 mov	 eax, DWORD PTR [edx]
  00c48	8b f4		 mov	 esi, esp
  00c4a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c4d	8b 10		 mov	 edx, DWORD PTR [eax]
  00c4f	ff d2		 call	 edx
  00c51	3b f4		 cmp	 esi, esp
  00c53	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00c58	0f b7 c0	 movzx	 eax, ax
  00c5b	50		 push	 eax
  00c5c	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  00c61	83 c4 04	 add	 esp, 4
  00c64	85 c0		 test	 eax, eax
  00c66	7c 08		 jl	 SHORT $LN38@ParseAsDec

; 250  :                         ParseAsIntegerPartNumberSequence();

  00c68	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c6b	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence
$LN38@ParseAsDec:

; 251  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))

  00c70	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c73	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00c76	83 e2 20	 and	 edx, 32			; 00000020H
  00c79	0f 84 a9 00 00
	00		 je	 $LN39@ParseAsDec
  00c7f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00c82	89 85 78 fe ff
	ff		 mov	 DWORD PTR tv813[ebp], eax
  00c88	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c8b	8b 11		 mov	 edx, DWORD PTR [ecx]
  00c8d	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00c90	89 85 74 fe ff
	ff		 mov	 DWORD PTR tv815[ebp], eax
  00c96	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c99	81 c1 9e 00 00
	00		 add	 ecx, 158		; 0000009eH
  00c9f	8b f4		 mov	 esi, esp
  00ca1	51		 push	 ecx
  00ca2	8b 8d 78 fe ff
	ff		 mov	 ecx, DWORD PTR tv813[ebp]
  00ca8	ff 95 74 fe ff
	ff		 call	 DWORD PTR tv815[ebp]
  00cae	3b f4		 cmp	 esi, esp
  00cb0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00cb5	85 c0		 test	 eax, eax
  00cb7	74 6f		 je	 SHORT $LN39@ParseAsDec

; 252  :                     {
; 253  :                         _source.SkipString(_decimal_separator);

  00cb9	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00cbc	89 95 70 fe ff
	ff		 mov	 DWORD PTR tv825[ebp], edx
  00cc2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00cc5	8b 08		 mov	 ecx, DWORD PTR [eax]
  00cc7	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00cca	89 95 6c fe ff
	ff		 mov	 DWORD PTR tv827[ebp], edx
  00cd0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00cd3	05 9e 00 00 00	 add	 eax, 158		; 0000009eH
  00cd8	8b f4		 mov	 esi, esp
  00cda	50		 push	 eax
  00cdb	8b 8d 70 fe ff
	ff		 mov	 ecx, DWORD PTR tv825[ebp]
  00ce1	ff 95 6c fe ff
	ff		 call	 DWORD PTR tv827[ebp]
  00ce7	3b f4		 cmp	 esi, esp
  00ce9	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 254  :                         _frac_part.Write(L'.');

  00cee	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00cf1	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00cf4	89 8d 68 fe ff
	ff		 mov	 DWORD PTR tv835[ebp], ecx
  00cfa	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00cfd	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00d00	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00d03	89 8d 64 fe ff
	ff		 mov	 DWORD PTR tv837[ebp], ecx
  00d09	8b f4		 mov	 esi, esp
  00d0b	6a 2e		 push	 46			; 0000002eH
  00d0d	8b 8d 68 fe ff
	ff		 mov	 ecx, DWORD PTR tv835[ebp]
  00d13	ff 95 64 fe ff
	ff		 call	 DWORD PTR tv837[ebp]
  00d19	3b f4		 cmp	 esi, esp
  00d1b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 255  :                         ParseAsFractionPartNumberSequence();

  00d20	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00d23	e8 00 00 00 00	 call	 ?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence
$LN39@ParseAsDec:

; 256  :                     }
; 257  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE) && _source.StartsWith(L" "))

  00d28	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00d2b	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00d2e	83 e0 02	 and	 eax, 2
  00d31	0f 84 e4 00 00
	00		 je	 $LN40@ParseAsDec
  00d37	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00d3a	89 8d 60 fe ff
	ff		 mov	 DWORD PTR tv850[ebp], ecx
  00d40	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00d43	8b 02		 mov	 eax, DWORD PTR [edx]
  00d45	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00d48	89 8d 5c fe ff
	ff		 mov	 DWORD PTR tv852[ebp], ecx
  00d4e	8b f4		 mov	 esi, esp
  00d50	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5@
  00d55	8b 8d 60 fe ff
	ff		 mov	 ecx, DWORD PTR tv850[ebp]
  00d5b	ff 95 5c fe ff
	ff		 call	 DWORD PTR tv852[ebp]
  00d61	3b f4		 cmp	 esi, esp
  00d63	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00d68	85 c0		 test	 eax, eax
  00d6a	0f 84 ab 00 00
	00		 je	 $LN40@ParseAsDec

; 258  :                     {
; 259  :                         _source.SkipString(L" ");

  00d70	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00d73	89 95 58 fe ff
	ff		 mov	 DWORD PTR tv861[ebp], edx
  00d79	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00d7c	8b 08		 mov	 ecx, DWORD PTR [eax]
  00d7e	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00d81	89 95 54 fe ff
	ff		 mov	 DWORD PTR tv863[ebp], edx
  00d87	8b f4		 mov	 esi, esp
  00d89	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5@
  00d8e	8b 8d 58 fe ff
	ff		 mov	 ecx, DWORD PTR tv861[ebp]
  00d94	ff 95 54 fe ff
	ff		 call	 DWORD PTR tv863[ebp]
  00d9a	3b f4		 cmp	 esi, esp
  00d9c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 260  :                         if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  00da1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00da4	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00da7	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  00dad	74 6a		 je	 SHORT $LN42@ParseAsDec
  00daf	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00db2	89 95 50 fe ff
	ff		 mov	 DWORD PTR tv876[ebp], edx
  00db8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00dbb	8b 08		 mov	 ecx, DWORD PTR [eax]
  00dbd	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00dc0	89 95 4c fe ff
	ff		 mov	 DWORD PTR tv878[ebp], edx
  00dc6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00dc9	83 c0 38	 add	 eax, 56			; 00000038H
  00dcc	8b f4		 mov	 esi, esp
  00dce	50		 push	 eax
  00dcf	8b 8d 50 fe ff
	ff		 mov	 ecx, DWORD PTR tv876[ebp]
  00dd5	ff 95 4c fe ff
	ff		 call	 DWORD PTR tv878[ebp]
  00ddb	3b f4		 cmp	 esi, esp
  00ddd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00de2	85 c0		 test	 eax, eax
  00de4	74 33		 je	 SHORT $LN42@ParseAsDec

; 261  :                             _source.SkipString(_currency_symbol);

  00de6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00de9	89 8d 48 fe ff
	ff		 mov	 DWORD PTR tv888[ebp], ecx
  00def	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00df2	8b 02		 mov	 eax, DWORD PTR [edx]
  00df4	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00df7	89 8d 44 fe ff
	ff		 mov	 DWORD PTR tv890[ebp], ecx
  00dfd	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00e00	83 c2 38	 add	 edx, 56			; 00000038H
  00e03	8b f4		 mov	 esi, esp
  00e05	52		 push	 edx
  00e06	8b 8d 48 fe ff
	ff		 mov	 ecx, DWORD PTR tv888[ebp]
  00e0c	ff 95 44 fe ff
	ff		 call	 DWORD PTR tv890[ebp]
  00e12	3b f4		 cmp	 esi, esp
  00e14	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN42@ParseAsDec:

; 262  :                     }

  00e19	eb 78		 jmp	 SHORT $LN34@ParseAsDec
$LN40@ParseAsDec:

; 263  :                     else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  00e1b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00e1e	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00e21	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  00e27	74 6a		 je	 SHORT $LN34@ParseAsDec
  00e29	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00e2c	89 95 40 fe ff
	ff		 mov	 DWORD PTR tv903[ebp], edx
  00e32	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00e35	8b 08		 mov	 ecx, DWORD PTR [eax]
  00e37	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00e3a	89 95 3c fe ff
	ff		 mov	 DWORD PTR tv905[ebp], edx
  00e40	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00e43	83 c0 38	 add	 eax, 56			; 00000038H
  00e46	8b f4		 mov	 esi, esp
  00e48	50		 push	 eax
  00e49	8b 8d 40 fe ff
	ff		 mov	 ecx, DWORD PTR tv903[ebp]
  00e4f	ff 95 3c fe ff
	ff		 call	 DWORD PTR tv905[ebp]
  00e55	3b f4		 cmp	 esi, esp
  00e57	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00e5c	85 c0		 test	 eax, eax
  00e5e	74 33		 je	 SHORT $LN34@ParseAsDec

; 264  :                         _source.SkipString(_currency_symbol);

  00e60	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00e63	89 8d 38 fe ff
	ff		 mov	 DWORD PTR tv915[ebp], ecx
  00e69	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00e6c	8b 02		 mov	 eax, DWORD PTR [edx]
  00e6e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00e71	89 8d 34 fe ff
	ff		 mov	 DWORD PTR tv917[ebp], ecx
  00e77	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00e7a	83 c2 38	 add	 edx, 56			; 00000038H
  00e7d	8b f4		 mov	 esi, esp
  00e7f	52		 push	 edx
  00e80	8b 8d 38 fe ff
	ff		 mov	 ecx, DWORD PTR tv915[ebp]
  00e86	ff 95 34 fe ff
	ff		 call	 DWORD PTR tv917[ebp]
  00e8c	3b f4		 cmp	 esi, esp
  00e8e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN34@ParseAsDec:

; 265  :                     else
; 266  :                     {
; 267  :                     }
; 268  :                 }

  00e93	e9 6d 13 00 00	 jmp	 $LN4@ParseAsDec
$LN31@ParseAsDec:

; 269  :             }
; 270  :             else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)

  00e98	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00e9b	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00e9e	83 e1 04	 and	 ecx, 4
  00ea1	0f 84 a8 04 00
	00		 je	 $LN45@ParseAsDec
  00ea7	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00eaa	89 95 30 fe ff
	ff		 mov	 DWORD PTR tv930[ebp], edx
  00eb0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00eb3	8b 08		 mov	 ecx, DWORD PTR [eax]
  00eb5	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00eb8	89 95 2c fe ff
	ff		 mov	 DWORD PTR tv932[ebp], edx
  00ebe	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00ec1	83 c0 7c	 add	 eax, 124		; 0000007cH
  00ec4	8b f4		 mov	 esi, esp
  00ec6	50		 push	 eax
  00ec7	8b 8d 30 fe ff
	ff		 mov	 ecx, DWORD PTR tv930[ebp]
  00ecd	ff 95 2c fe ff
	ff		 call	 DWORD PTR tv932[ebp]
  00ed3	3b f4		 cmp	 esi, esp
  00ed5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00eda	85 c0		 test	 eax, eax
  00edc	0f 84 6d 04 00
	00		 je	 $LN45@ParseAsDec

; 271  :             {
; 272  :                 *_sign = -1;

  00ee2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ee5	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00ee8	c6 02 ff	 mov	 BYTE PTR [edx], -1

; 273  :                 _source.SkipString(_negative_sign);

  00eeb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00eee	89 85 28 fe ff
	ff		 mov	 DWORD PTR tv944[ebp], eax
  00ef4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ef7	8b 11		 mov	 edx, DWORD PTR [ecx]
  00ef9	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00efc	89 85 24 fe ff
	ff		 mov	 DWORD PTR tv946[ebp], eax
  00f02	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00f05	83 c1 7c	 add	 ecx, 124		; 0000007cH
  00f08	8b f4		 mov	 esi, esp
  00f0a	51		 push	 ecx
  00f0b	8b 8d 28 fe ff
	ff		 mov	 ecx, DWORD PTR tv944[ebp]
  00f11	ff 95 24 fe ff
	ff		 call	 DWORD PTR tv946[ebp]
  00f17	3b f4		 cmp	 esi, esp
  00f19	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 274  :                 if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  00f1e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00f21	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00f24	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00f29	0f 84 ca 01 00
	00		 je	 $LN47@ParseAsDec
  00f2f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00f32	89 8d 20 fe ff
	ff		 mov	 DWORD PTR tv959[ebp], ecx
  00f38	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00f3b	8b 02		 mov	 eax, DWORD PTR [edx]
  00f3d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00f40	89 8d 1c fe ff
	ff		 mov	 DWORD PTR tv961[ebp], ecx
  00f46	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00f49	83 c2 38	 add	 edx, 56			; 00000038H
  00f4c	8b f4		 mov	 esi, esp
  00f4e	52		 push	 edx
  00f4f	8b 8d 20 fe ff
	ff		 mov	 ecx, DWORD PTR tv959[ebp]
  00f55	ff 95 1c fe ff
	ff		 call	 DWORD PTR tv961[ebp]
  00f5b	3b f4		 cmp	 esi, esp
  00f5d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00f62	85 c0		 test	 eax, eax
  00f64	0f 84 8f 01 00
	00		 je	 $LN47@ParseAsDec

; 275  :                 {
; 276  :                     _source.SkipString(_currency_symbol);

  00f6a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00f6d	89 85 18 fe ff
	ff		 mov	 DWORD PTR tv971[ebp], eax
  00f73	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00f76	8b 11		 mov	 edx, DWORD PTR [ecx]
  00f78	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00f7b	89 85 14 fe ff
	ff		 mov	 DWORD PTR tv973[ebp], eax
  00f81	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00f84	83 c1 38	 add	 ecx, 56			; 00000038H
  00f87	8b f4		 mov	 esi, esp
  00f89	51		 push	 ecx
  00f8a	8b 8d 18 fe ff
	ff		 mov	 ecx, DWORD PTR tv971[ebp]
  00f90	ff 95 14 fe ff
	ff		 call	 DWORD PTR tv973[ebp]
  00f96	3b f4		 cmp	 esi, esp
  00f98	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 277  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE) && _source.StartsWith(L" "))

  00f9d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00fa0	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00fa3	83 e0 01	 and	 eax, 1
  00fa6	74 66		 je	 SHORT $LN49@ParseAsDec
  00fa8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00fab	89 8d 10 fe ff
	ff		 mov	 DWORD PTR tv985[ebp], ecx
  00fb1	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00fb4	8b 02		 mov	 eax, DWORD PTR [edx]
  00fb6	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00fb9	89 8d 0c fe ff
	ff		 mov	 DWORD PTR tv987[ebp], ecx
  00fbf	8b f4		 mov	 esi, esp
  00fc1	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5@
  00fc6	8b 8d 10 fe ff
	ff		 mov	 ecx, DWORD PTR tv985[ebp]
  00fcc	ff 95 0c fe ff
	ff		 call	 DWORD PTR tv987[ebp]
  00fd2	3b f4		 cmp	 esi, esp
  00fd4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00fd9	85 c0		 test	 eax, eax
  00fdb	74 31		 je	 SHORT $LN49@ParseAsDec

; 278  :                         _source.SkipString(L" ");

  00fdd	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00fe0	89 95 08 fe ff
	ff		 mov	 DWORD PTR tv996[ebp], edx
  00fe6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00fe9	8b 08		 mov	 ecx, DWORD PTR [eax]
  00feb	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00fee	89 95 04 fe ff
	ff		 mov	 DWORD PTR tv998[ebp], edx
  00ff4	8b f4		 mov	 esi, esp
  00ff6	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5@
  00ffb	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR tv996[ebp]
  01001	ff 95 04 fe ff
	ff		 call	 DWORD PTR tv998[ebp]
  01007	3b f4		 cmp	 esi, esp
  01009	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN49@ParseAsDec:

; 279  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  0100e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01011	8b 10		 mov	 edx, DWORD PTR [eax]
  01013	8b f4		 mov	 esi, esp
  01015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01018	8b 02		 mov	 eax, DWORD PTR [edx]
  0101a	ff d0		 call	 eax
  0101c	3b f4		 cmp	 esi, esp
  0101e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01023	0f b7 c8	 movzx	 ecx, ax
  01026	51		 push	 ecx
  01027	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  0102c	83 c4 04	 add	 esp, 4
  0102f	85 c0		 test	 eax, eax
  01031	7c 08		 jl	 SHORT $LN50@ParseAsDec

; 280  :                         ParseAsIntegerPartNumberSequence();

  01033	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01036	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence
$LN50@ParseAsDec:

; 281  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))

  0103b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0103e	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  01041	83 e0 20	 and	 eax, 32			; 00000020H
  01044	0f 84 aa 00 00
	00		 je	 $LN51@ParseAsDec
  0104a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0104d	89 8d 00 fe ff
	ff		 mov	 DWORD PTR tv1021[ebp], ecx
  01053	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01056	8b 02		 mov	 eax, DWORD PTR [edx]
  01058	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0105b	89 8d fc fd ff
	ff		 mov	 DWORD PTR tv1023[ebp], ecx
  01061	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01064	81 c2 9e 00 00
	00		 add	 edx, 158		; 0000009eH
  0106a	8b f4		 mov	 esi, esp
  0106c	52		 push	 edx
  0106d	8b 8d 00 fe ff
	ff		 mov	 ecx, DWORD PTR tv1021[ebp]
  01073	ff 95 fc fd ff
	ff		 call	 DWORD PTR tv1023[ebp]
  01079	3b f4		 cmp	 esi, esp
  0107b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01080	85 c0		 test	 eax, eax
  01082	74 70		 je	 SHORT $LN51@ParseAsDec

; 282  :                     {
; 283  :                         _source.SkipString(_decimal_separator);

  01084	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01087	89 85 f8 fd ff
	ff		 mov	 DWORD PTR tv1033[ebp], eax
  0108d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01090	8b 11		 mov	 edx, DWORD PTR [ecx]
  01092	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  01095	89 85 f4 fd ff
	ff		 mov	 DWORD PTR tv1035[ebp], eax
  0109b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0109e	81 c1 9e 00 00
	00		 add	 ecx, 158		; 0000009eH
  010a4	8b f4		 mov	 esi, esp
  010a6	51		 push	 ecx
  010a7	8b 8d f8 fd ff
	ff		 mov	 ecx, DWORD PTR tv1033[ebp]
  010ad	ff 95 f4 fd ff
	ff		 call	 DWORD PTR tv1035[ebp]
  010b3	3b f4		 cmp	 esi, esp
  010b5	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 284  :                         _frac_part.Write(L'.');

  010ba	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  010bd	83 c2 1c	 add	 edx, 28			; 0000001cH
  010c0	89 95 f0 fd ff
	ff		 mov	 DWORD PTR tv1043[ebp], edx
  010c6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  010c9	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  010cc	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  010cf	89 95 ec fd ff
	ff		 mov	 DWORD PTR tv1045[ebp], edx
  010d5	8b f4		 mov	 esi, esp
  010d7	6a 2e		 push	 46			; 0000002eH
  010d9	8b 8d f0 fd ff
	ff		 mov	 ecx, DWORD PTR tv1043[ebp]
  010df	ff 95 ec fd ff
	ff		 call	 DWORD PTR tv1045[ebp]
  010e5	3b f4		 cmp	 esi, esp
  010e7	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 285  :                         ParseAsFractionPartNumberSequence();

  010ec	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  010ef	e8 00 00 00 00	 call	 ?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence
$LN51@ParseAsDec:

; 286  :                     }
; 287  :                 }
; 288  :                 else

  010f4	e9 51 02 00 00	 jmp	 $LN48@ParseAsDec
$LN47@ParseAsDec:

; 289  :                 {
; 290  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  010f9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  010fc	8b 10		 mov	 edx, DWORD PTR [eax]
  010fe	8b f4		 mov	 esi, esp
  01100	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01103	8b 02		 mov	 eax, DWORD PTR [edx]
  01105	ff d0		 call	 eax
  01107	3b f4		 cmp	 esi, esp
  01109	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0110e	0f b7 c8	 movzx	 ecx, ax
  01111	51		 push	 ecx
  01112	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  01117	83 c4 04	 add	 esp, 4
  0111a	85 c0		 test	 eax, eax
  0111c	7c 08		 jl	 SHORT $LN52@ParseAsDec

; 291  :                         ParseAsIntegerPartNumberSequence();

  0111e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01121	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence
$LN52@ParseAsDec:

; 292  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))

  01126	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01129	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0112c	83 e0 20	 and	 eax, 32			; 00000020H
  0112f	0f 84 aa 00 00
	00		 je	 $LN53@ParseAsDec
  01135	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01138	89 8d e8 fd ff
	ff		 mov	 DWORD PTR tv1069[ebp], ecx
  0113e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01141	8b 02		 mov	 eax, DWORD PTR [edx]
  01143	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  01146	89 8d e4 fd ff
	ff		 mov	 DWORD PTR tv1071[ebp], ecx
  0114c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0114f	81 c2 9e 00 00
	00		 add	 edx, 158		; 0000009eH
  01155	8b f4		 mov	 esi, esp
  01157	52		 push	 edx
  01158	8b 8d e8 fd ff
	ff		 mov	 ecx, DWORD PTR tv1069[ebp]
  0115e	ff 95 e4 fd ff
	ff		 call	 DWORD PTR tv1071[ebp]
  01164	3b f4		 cmp	 esi, esp
  01166	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0116b	85 c0		 test	 eax, eax
  0116d	74 70		 je	 SHORT $LN53@ParseAsDec

; 293  :                     {
; 294  :                         _source.SkipString(_decimal_separator);

  0116f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01172	89 85 e0 fd ff
	ff		 mov	 DWORD PTR tv1081[ebp], eax
  01178	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0117b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0117d	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  01180	89 85 dc fd ff
	ff		 mov	 DWORD PTR tv1083[ebp], eax
  01186	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01189	81 c1 9e 00 00
	00		 add	 ecx, 158		; 0000009eH
  0118f	8b f4		 mov	 esi, esp
  01191	51		 push	 ecx
  01192	8b 8d e0 fd ff
	ff		 mov	 ecx, DWORD PTR tv1081[ebp]
  01198	ff 95 dc fd ff
	ff		 call	 DWORD PTR tv1083[ebp]
  0119e	3b f4		 cmp	 esi, esp
  011a0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 295  :                         _frac_part.Write(L'.');

  011a5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  011a8	83 c2 1c	 add	 edx, 28			; 0000001cH
  011ab	89 95 d8 fd ff
	ff		 mov	 DWORD PTR tv1091[ebp], edx
  011b1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  011b4	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  011b7	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  011ba	89 95 d4 fd ff
	ff		 mov	 DWORD PTR tv1093[ebp], edx
  011c0	8b f4		 mov	 esi, esp
  011c2	6a 2e		 push	 46			; 0000002eH
  011c4	8b 8d d8 fd ff
	ff		 mov	 ecx, DWORD PTR tv1091[ebp]
  011ca	ff 95 d4 fd ff
	ff		 call	 DWORD PTR tv1093[ebp]
  011d0	3b f4		 cmp	 esi, esp
  011d2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 296  :                         ParseAsFractionPartNumberSequence();

  011d7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  011da	e8 00 00 00 00	 call	 ?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence
$LN53@ParseAsDec:

; 297  :                     }
; 298  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE) && _source.StartsWith(L" "))

  011df	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  011e2	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  011e5	83 e1 02	 and	 ecx, 2
  011e8	0f 84 e4 00 00
	00		 je	 $LN54@ParseAsDec
  011ee	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  011f1	89 95 d0 fd ff
	ff		 mov	 DWORD PTR tv1106[ebp], edx
  011f7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  011fa	8b 08		 mov	 ecx, DWORD PTR [eax]
  011fc	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  011ff	89 95 cc fd ff
	ff		 mov	 DWORD PTR tv1108[ebp], edx
  01205	8b f4		 mov	 esi, esp
  01207	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5@
  0120c	8b 8d d0 fd ff
	ff		 mov	 ecx, DWORD PTR tv1106[ebp]
  01212	ff 95 cc fd ff
	ff		 call	 DWORD PTR tv1108[ebp]
  01218	3b f4		 cmp	 esi, esp
  0121a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0121f	85 c0		 test	 eax, eax
  01221	0f 84 ab 00 00
	00		 je	 $LN54@ParseAsDec

; 299  :                     {
; 300  :                         _source.SkipString(L" ");

  01227	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0122a	89 85 c8 fd ff
	ff		 mov	 DWORD PTR tv1117[ebp], eax
  01230	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01233	8b 11		 mov	 edx, DWORD PTR [ecx]
  01235	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  01238	89 85 c4 fd ff
	ff		 mov	 DWORD PTR tv1119[ebp], eax
  0123e	8b f4		 mov	 esi, esp
  01240	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5@
  01245	8b 8d c8 fd ff
	ff		 mov	 ecx, DWORD PTR tv1117[ebp]
  0124b	ff 95 c4 fd ff
	ff		 call	 DWORD PTR tv1119[ebp]
  01251	3b f4		 cmp	 esi, esp
  01253	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 301  :                         if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  01258	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0125b	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0125e	81 e2 00 01 00
	00		 and	 edx, 256		; 00000100H
  01264	74 6a		 je	 SHORT $LN56@ParseAsDec
  01266	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01269	89 85 c0 fd ff
	ff		 mov	 DWORD PTR tv1132[ebp], eax
  0126f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01272	8b 11		 mov	 edx, DWORD PTR [ecx]
  01274	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  01277	89 85 bc fd ff
	ff		 mov	 DWORD PTR tv1134[ebp], eax
  0127d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01280	83 c1 38	 add	 ecx, 56			; 00000038H
  01283	8b f4		 mov	 esi, esp
  01285	51		 push	 ecx
  01286	8b 8d c0 fd ff
	ff		 mov	 ecx, DWORD PTR tv1132[ebp]
  0128c	ff 95 bc fd ff
	ff		 call	 DWORD PTR tv1134[ebp]
  01292	3b f4		 cmp	 esi, esp
  01294	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01299	85 c0		 test	 eax, eax
  0129b	74 33		 je	 SHORT $LN56@ParseAsDec

; 302  :                             _source.SkipString(_currency_symbol);

  0129d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  012a0	89 95 b8 fd ff
	ff		 mov	 DWORD PTR tv1144[ebp], edx
  012a6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  012a9	8b 08		 mov	 ecx, DWORD PTR [eax]
  012ab	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  012ae	89 95 b4 fd ff
	ff		 mov	 DWORD PTR tv1146[ebp], edx
  012b4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  012b7	83 c0 38	 add	 eax, 56			; 00000038H
  012ba	8b f4		 mov	 esi, esp
  012bc	50		 push	 eax
  012bd	8b 8d b8 fd ff
	ff		 mov	 ecx, DWORD PTR tv1144[ebp]
  012c3	ff 95 b4 fd ff
	ff		 call	 DWORD PTR tv1146[ebp]
  012c9	3b f4		 cmp	 esi, esp
  012cb	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN56@ParseAsDec:

; 303  :                     }

  012d0	eb 78		 jmp	 SHORT $LN48@ParseAsDec
$LN54@ParseAsDec:

; 304  :                     else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  012d2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  012d5	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  012d8	81 e2 00 01 00
	00		 and	 edx, 256		; 00000100H
  012de	74 6a		 je	 SHORT $LN48@ParseAsDec
  012e0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  012e3	89 85 b0 fd ff
	ff		 mov	 DWORD PTR tv1159[ebp], eax
  012e9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  012ec	8b 11		 mov	 edx, DWORD PTR [ecx]
  012ee	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  012f1	89 85 ac fd ff
	ff		 mov	 DWORD PTR tv1161[ebp], eax
  012f7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  012fa	83 c1 38	 add	 ecx, 56			; 00000038H
  012fd	8b f4		 mov	 esi, esp
  012ff	51		 push	 ecx
  01300	8b 8d b0 fd ff
	ff		 mov	 ecx, DWORD PTR tv1159[ebp]
  01306	ff 95 ac fd ff
	ff		 call	 DWORD PTR tv1161[ebp]
  0130c	3b f4		 cmp	 esi, esp
  0130e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01313	85 c0		 test	 eax, eax
  01315	74 33		 je	 SHORT $LN48@ParseAsDec

; 305  :                         _source.SkipString(_currency_symbol);

  01317	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0131a	89 95 a8 fd ff
	ff		 mov	 DWORD PTR tv1171[ebp], edx
  01320	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01323	8b 08		 mov	 ecx, DWORD PTR [eax]
  01325	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  01328	89 95 a4 fd ff
	ff		 mov	 DWORD PTR tv1173[ebp], edx
  0132e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01331	83 c0 38	 add	 eax, 56			; 00000038H
  01334	8b f4		 mov	 esi, esp
  01336	50		 push	 eax
  01337	8b 8d a8 fd ff
	ff		 mov	 ecx, DWORD PTR tv1171[ebp]
  0133d	ff 95 a4 fd ff
	ff		 call	 DWORD PTR tv1173[ebp]
  01343	3b f4		 cmp	 esi, esp
  01345	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN48@ParseAsDec:

; 306  :                     else
; 307  :                     {
; 308  :                     }
; 309  :                 }

  0134a	e9 b6 0e 00 00	 jmp	 $LN4@ParseAsDec
$LN45@ParseAsDec:

; 310  :             }
; 311  :             else if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  0134f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01352	8b 11		 mov	 edx, DWORD PTR [ecx]
  01354	8b f4		 mov	 esi, esp
  01356	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01359	8b 02		 mov	 eax, DWORD PTR [edx]
  0135b	ff d0		 call	 eax
  0135d	3b f4		 cmp	 esi, esp
  0135f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01364	0f b7 c8	 movzx	 ecx, ax
  01367	51		 push	 ecx
  01368	e8 00 00 00 00	 call	 ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ; Palmtree::Math::Core::Internal::ParseDecimalDigit
  0136d	83 c4 04	 add	 esp, 4
  01370	85 c0		 test	 eax, eax
  01372	0f 8c 48 07 00
	00		 jl	 $LN59@ParseAsDec

; 312  :             {
; 313  :                 ParseAsIntegerPartNumberSequence();

  01378	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0137b	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence

; 314  :                 if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))

  01380	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01383	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  01386	83 e0 20	 and	 eax, 32			; 00000020H
  01389	0f 84 aa 00 00
	00		 je	 $LN61@ParseAsDec
  0138f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01392	89 8d a0 fd ff
	ff		 mov	 DWORD PTR tv1196[ebp], ecx
  01398	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0139b	8b 02		 mov	 eax, DWORD PTR [edx]
  0139d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  013a0	89 8d 9c fd ff
	ff		 mov	 DWORD PTR tv1198[ebp], ecx
  013a6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  013a9	81 c2 9e 00 00
	00		 add	 edx, 158		; 0000009eH
  013af	8b f4		 mov	 esi, esp
  013b1	52		 push	 edx
  013b2	8b 8d a0 fd ff
	ff		 mov	 ecx, DWORD PTR tv1196[ebp]
  013b8	ff 95 9c fd ff
	ff		 call	 DWORD PTR tv1198[ebp]
  013be	3b f4		 cmp	 esi, esp
  013c0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  013c5	85 c0		 test	 eax, eax
  013c7	74 70		 je	 SHORT $LN61@ParseAsDec

; 315  :                 {
; 316  :                     _source.SkipString(_decimal_separator);

  013c9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  013cc	89 85 98 fd ff
	ff		 mov	 DWORD PTR tv1208[ebp], eax
  013d2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  013d5	8b 11		 mov	 edx, DWORD PTR [ecx]
  013d7	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  013da	89 85 94 fd ff
	ff		 mov	 DWORD PTR tv1210[ebp], eax
  013e0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  013e3	81 c1 9e 00 00
	00		 add	 ecx, 158		; 0000009eH
  013e9	8b f4		 mov	 esi, esp
  013eb	51		 push	 ecx
  013ec	8b 8d 98 fd ff
	ff		 mov	 ecx, DWORD PTR tv1208[ebp]
  013f2	ff 95 94 fd ff
	ff		 call	 DWORD PTR tv1210[ebp]
  013f8	3b f4		 cmp	 esi, esp
  013fa	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 317  :                     _frac_part.Write(L'.');

  013ff	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01402	83 c2 1c	 add	 edx, 28			; 0000001cH
  01405	89 95 90 fd ff
	ff		 mov	 DWORD PTR tv1218[ebp], edx
  0140b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0140e	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  01411	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  01414	89 95 8c fd ff
	ff		 mov	 DWORD PTR tv1220[ebp], edx
  0141a	8b f4		 mov	 esi, esp
  0141c	6a 2e		 push	 46			; 0000002eH
  0141e	8b 8d 90 fd ff
	ff		 mov	 ecx, DWORD PTR tv1218[ebp]
  01424	ff 95 8c fd ff
	ff		 call	 DWORD PTR tv1220[ebp]
  0142a	3b f4		 cmp	 esi, esp
  0142c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 318  :                     ParseAsFractionPartNumberSequence();

  01431	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01434	e8 00 00 00 00	 call	 ?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence
$LN61@ParseAsDec:

; 319  :                 }
; 320  :                 if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE) && _source.StartsWith(L" "))

  01439	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0143c	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0143f	83 e1 02	 and	 ecx, 2
  01442	0f 84 f0 02 00
	00		 je	 $LN62@ParseAsDec
  01448	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0144b	89 95 88 fd ff
	ff		 mov	 DWORD PTR tv1233[ebp], edx
  01451	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01454	8b 08		 mov	 ecx, DWORD PTR [eax]
  01456	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  01459	89 95 84 fd ff
	ff		 mov	 DWORD PTR tv1235[ebp], edx
  0145f	8b f4		 mov	 esi, esp
  01461	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5@
  01466	8b 8d 88 fd ff
	ff		 mov	 ecx, DWORD PTR tv1233[ebp]
  0146c	ff 95 84 fd ff
	ff		 call	 DWORD PTR tv1235[ebp]
  01472	3b f4		 cmp	 esi, esp
  01474	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01479	85 c0		 test	 eax, eax
  0147b	0f 84 b7 02 00
	00		 je	 $LN62@ParseAsDec

; 321  :                 {
; 322  :                     _source.SkipString(L" ");

  01481	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01484	89 85 80 fd ff
	ff		 mov	 DWORD PTR tv1244[ebp], eax
  0148a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0148d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0148f	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  01492	89 85 7c fd ff
	ff		 mov	 DWORD PTR tv1246[ebp], eax
  01498	8b f4		 mov	 esi, esp
  0149a	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5@
  0149f	8b 8d 80 fd ff
	ff		 mov	 ecx, DWORD PTR tv1244[ebp]
  014a5	ff 95 7c fd ff
	ff		 call	 DWORD PTR tv1246[ebp]
  014ab	3b f4		 cmp	 esi, esp
  014ad	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 323  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  014b2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  014b5	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  014b8	81 e2 00 01 00
	00		 and	 edx, 256		; 00000100H
  014be	0f 84 71 01 00
	00		 je	 $LN64@ParseAsDec
  014c4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  014c7	89 85 78 fd ff
	ff		 mov	 DWORD PTR tv1259[ebp], eax
  014cd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  014d0	8b 11		 mov	 edx, DWORD PTR [ecx]
  014d2	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  014d5	89 85 74 fd ff
	ff		 mov	 DWORD PTR tv1261[ebp], eax
  014db	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  014de	83 c1 38	 add	 ecx, 56			; 00000038H
  014e1	8b f4		 mov	 esi, esp
  014e3	51		 push	 ecx
  014e4	8b 8d 78 fd ff
	ff		 mov	 ecx, DWORD PTR tv1259[ebp]
  014ea	ff 95 74 fd ff
	ff		 call	 DWORD PTR tv1261[ebp]
  014f0	3b f4		 cmp	 esi, esp
  014f2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  014f7	85 c0		 test	 eax, eax
  014f9	0f 84 36 01 00
	00		 je	 $LN64@ParseAsDec

; 324  :                     {
; 325  :                         _source.SkipString(_currency_symbol);

  014ff	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01502	89 95 70 fd ff
	ff		 mov	 DWORD PTR tv1271[ebp], edx
  01508	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0150b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0150d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  01510	89 95 6c fd ff
	ff		 mov	 DWORD PTR tv1273[ebp], edx
  01516	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01519	83 c0 38	 add	 eax, 56			; 00000038H
  0151c	8b f4		 mov	 esi, esp
  0151e	50		 push	 eax
  0151f	8b 8d 70 fd ff
	ff		 mov	 ecx, DWORD PTR tv1271[ebp]
  01525	ff 95 6c fd ff
	ff		 call	 DWORD PTR tv1273[ebp]
  0152b	3b f4		 cmp	 esi, esp
  0152d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 326  :                         if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))

  01532	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01535	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  01538	83 e2 08	 and	 edx, 8
  0153b	74 75		 je	 SHORT $LN66@ParseAsDec
  0153d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01540	89 85 68 fd ff
	ff		 mov	 DWORD PTR tv1286[ebp], eax
  01546	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01549	8b 11		 mov	 edx, DWORD PTR [ecx]
  0154b	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0154e	89 85 64 fd ff
	ff		 mov	 DWORD PTR tv1288[ebp], eax
  01554	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01557	83 c1 5a	 add	 ecx, 90			; 0000005aH
  0155a	8b f4		 mov	 esi, esp
  0155c	51		 push	 ecx
  0155d	8b 8d 68 fd ff
	ff		 mov	 ecx, DWORD PTR tv1286[ebp]
  01563	ff 95 64 fd ff
	ff		 call	 DWORD PTR tv1288[ebp]
  01569	3b f4		 cmp	 esi, esp
  0156b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01570	85 c0		 test	 eax, eax
  01572	74 3e		 je	 SHORT $LN66@ParseAsDec

; 327  :                         {
; 328  :                             *_sign = 1;

  01574	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01577	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  0157a	c6 00 01	 mov	 BYTE PTR [eax], 1

; 329  :                             _source.SkipString(_positive_sign);

  0157d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01580	89 8d 60 fd ff
	ff		 mov	 DWORD PTR tv1300[ebp], ecx
  01586	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01589	8b 02		 mov	 eax, DWORD PTR [edx]
  0158b	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0158e	89 8d 5c fd ff
	ff		 mov	 DWORD PTR tv1302[ebp], ecx
  01594	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01597	83 c2 5a	 add	 edx, 90			; 0000005aH
  0159a	8b f4		 mov	 esi, esp
  0159c	52		 push	 edx
  0159d	8b 8d 60 fd ff
	ff		 mov	 ecx, DWORD PTR tv1300[ebp]
  015a3	ff 95 5c fd ff
	ff		 call	 DWORD PTR tv1302[ebp]
  015a9	3b f4		 cmp	 esi, esp
  015ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
  015b0	eb 7e		 jmp	 SHORT $LN67@ParseAsDec
$LN66@ParseAsDec:

; 330  :                         }
; 331  :                         else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)

  015b2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  015b5	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  015b8	83 e1 08	 and	 ecx, 8
  015bb	74 73		 je	 SHORT $LN67@ParseAsDec
  015bd	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  015c0	89 95 58 fd ff
	ff		 mov	 DWORD PTR tv1315[ebp], edx
  015c6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  015c9	8b 08		 mov	 ecx, DWORD PTR [eax]
  015cb	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  015ce	89 95 54 fd ff
	ff		 mov	 DWORD PTR tv1317[ebp], edx
  015d4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  015d7	83 c0 7c	 add	 eax, 124		; 0000007cH
  015da	8b f4		 mov	 esi, esp
  015dc	50		 push	 eax
  015dd	8b 8d 58 fd ff
	ff		 mov	 ecx, DWORD PTR tv1315[ebp]
  015e3	ff 95 54 fd ff
	ff		 call	 DWORD PTR tv1317[ebp]
  015e9	3b f4		 cmp	 esi, esp
  015eb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  015f0	85 c0		 test	 eax, eax
  015f2	74 3c		 je	 SHORT $LN67@ParseAsDec

; 332  :                         {
; 333  :                             *_sign = -1;

  015f4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  015f7	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  015fa	c6 02 ff	 mov	 BYTE PTR [edx], -1

; 334  :                             _source.SkipString(_negative_sign);

  015fd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01600	89 85 50 fd ff
	ff		 mov	 DWORD PTR tv1329[ebp], eax
  01606	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01609	8b 11		 mov	 edx, DWORD PTR [ecx]
  0160b	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0160e	89 85 4c fd ff
	ff		 mov	 DWORD PTR tv1331[ebp], eax
  01614	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01617	83 c1 7c	 add	 ecx, 124		; 0000007cH
  0161a	8b f4		 mov	 esi, esp
  0161c	51		 push	 ecx
  0161d	8b 8d 50 fd ff
	ff		 mov	 ecx, DWORD PTR tv1329[ebp]
  01623	ff 95 4c fd ff
	ff		 call	 DWORD PTR tv1331[ebp]
  01629	3b f4		 cmp	 esi, esp
  0162b	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN67@ParseAsDec:

; 335  :                         }
; 336  :                         else
; 337  :                         {
; 338  :                         }
; 339  :                     }
; 340  :                     else

  01630	e9 fe 00 00 00	 jmp	 $LN65@ParseAsDec
$LN64@ParseAsDec:

; 341  :                     {
; 342  :                         if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))

  01635	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01638	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0163b	83 e0 08	 and	 eax, 8
  0163e	74 75		 je	 SHORT $LN70@ParseAsDec
  01640	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01643	89 8d 48 fd ff
	ff		 mov	 DWORD PTR tv1344[ebp], ecx
  01649	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0164c	8b 02		 mov	 eax, DWORD PTR [edx]
  0164e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  01651	89 8d 44 fd ff
	ff		 mov	 DWORD PTR tv1346[ebp], ecx
  01657	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0165a	83 c2 5a	 add	 edx, 90			; 0000005aH
  0165d	8b f4		 mov	 esi, esp
  0165f	52		 push	 edx
  01660	8b 8d 48 fd ff
	ff		 mov	 ecx, DWORD PTR tv1344[ebp]
  01666	ff 95 44 fd ff
	ff		 call	 DWORD PTR tv1346[ebp]
  0166c	3b f4		 cmp	 esi, esp
  0166e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01673	85 c0		 test	 eax, eax
  01675	74 3e		 je	 SHORT $LN70@ParseAsDec

; 343  :                         {
; 344  :                             *_sign = 1;

  01677	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0167a	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0167d	c6 01 01	 mov	 BYTE PTR [ecx], 1

; 345  :                             _source.SkipString(_positive_sign);

  01680	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01683	89 95 40 fd ff
	ff		 mov	 DWORD PTR tv1358[ebp], edx
  01689	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0168c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0168e	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  01691	89 95 3c fd ff
	ff		 mov	 DWORD PTR tv1360[ebp], edx
  01697	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0169a	83 c0 5a	 add	 eax, 90			; 0000005aH
  0169d	8b f4		 mov	 esi, esp
  0169f	50		 push	 eax
  016a0	8b 8d 40 fd ff
	ff		 mov	 ecx, DWORD PTR tv1358[ebp]
  016a6	ff 95 3c fd ff
	ff		 call	 DWORD PTR tv1360[ebp]
  016ac	3b f4		 cmp	 esi, esp
  016ae	e8 00 00 00 00	 call	 __RTC_CheckEsp
  016b3	eb 7e		 jmp	 SHORT $LN65@ParseAsDec
$LN70@ParseAsDec:

; 346  :                         }
; 347  :                         else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)

  016b5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  016b8	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  016bb	83 e2 08	 and	 edx, 8
  016be	74 73		 je	 SHORT $LN65@ParseAsDec
  016c0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  016c3	89 85 38 fd ff
	ff		 mov	 DWORD PTR tv1373[ebp], eax
  016c9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  016cc	8b 11		 mov	 edx, DWORD PTR [ecx]
  016ce	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  016d1	89 85 34 fd ff
	ff		 mov	 DWORD PTR tv1375[ebp], eax
  016d7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  016da	83 c1 7c	 add	 ecx, 124		; 0000007cH
  016dd	8b f4		 mov	 esi, esp
  016df	51		 push	 ecx
  016e0	8b 8d 38 fd ff
	ff		 mov	 ecx, DWORD PTR tv1373[ebp]
  016e6	ff 95 34 fd ff
	ff		 call	 DWORD PTR tv1375[ebp]
  016ec	3b f4		 cmp	 esi, esp
  016ee	e8 00 00 00 00	 call	 __RTC_CheckEsp
  016f3	85 c0		 test	 eax, eax
  016f5	74 3c		 je	 SHORT $LN65@ParseAsDec

; 348  :                         {
; 349  :                             *_sign = -1;

  016f7	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  016fa	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  016fd	c6 00 ff	 mov	 BYTE PTR [eax], -1

; 350  :                             _source.SkipString(_negative_sign);

  01700	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01703	89 8d 30 fd ff
	ff		 mov	 DWORD PTR tv1387[ebp], ecx
  01709	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0170c	8b 02		 mov	 eax, DWORD PTR [edx]
  0170e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01711	89 8d 2c fd ff
	ff		 mov	 DWORD PTR tv1389[ebp], ecx
  01717	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0171a	83 c2 7c	 add	 edx, 124		; 0000007cH
  0171d	8b f4		 mov	 esi, esp
  0171f	52		 push	 edx
  01720	8b 8d 30 fd ff
	ff		 mov	 ecx, DWORD PTR tv1387[ebp]
  01726	ff 95 2c fd ff
	ff		 call	 DWORD PTR tv1389[ebp]
  0172c	3b f4		 cmp	 esi, esp
  0172e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN65@ParseAsDec:

; 351  :                         }
; 352  :                         else
; 353  :                         {
; 354  :                         }
; 355  :                     }

  01733	e9 83 03 00 00	 jmp	 $LN63@ParseAsDec
$LN62@ParseAsDec:

; 356  :                 }
; 357  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  01738	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0173b	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0173e	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  01744	0f 84 71 01 00
	00		 je	 $LN74@ParseAsDec
  0174a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0174d	89 95 28 fd ff
	ff		 mov	 DWORD PTR tv1402[ebp], edx
  01753	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01756	8b 08		 mov	 ecx, DWORD PTR [eax]
  01758	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0175b	89 95 24 fd ff
	ff		 mov	 DWORD PTR tv1404[ebp], edx
  01761	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01764	83 c0 38	 add	 eax, 56			; 00000038H
  01767	8b f4		 mov	 esi, esp
  01769	50		 push	 eax
  0176a	8b 8d 28 fd ff
	ff		 mov	 ecx, DWORD PTR tv1402[ebp]
  01770	ff 95 24 fd ff
	ff		 call	 DWORD PTR tv1404[ebp]
  01776	3b f4		 cmp	 esi, esp
  01778	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0177d	85 c0		 test	 eax, eax
  0177f	0f 84 36 01 00
	00		 je	 $LN74@ParseAsDec

; 358  :                 {
; 359  :                     _source.SkipString(_currency_symbol);

  01785	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01788	89 8d 20 fd ff
	ff		 mov	 DWORD PTR tv1414[ebp], ecx
  0178e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01791	8b 02		 mov	 eax, DWORD PTR [edx]
  01793	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01796	89 8d 1c fd ff
	ff		 mov	 DWORD PTR tv1416[ebp], ecx
  0179c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0179f	83 c2 38	 add	 edx, 56			; 00000038H
  017a2	8b f4		 mov	 esi, esp
  017a4	52		 push	 edx
  017a5	8b 8d 20 fd ff
	ff		 mov	 ecx, DWORD PTR tv1414[ebp]
  017ab	ff 95 1c fd ff
	ff		 call	 DWORD PTR tv1416[ebp]
  017b1	3b f4		 cmp	 esi, esp
  017b3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 360  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))

  017b8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  017bb	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  017be	83 e1 08	 and	 ecx, 8
  017c1	74 75		 je	 SHORT $LN76@ParseAsDec
  017c3	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  017c6	89 95 18 fd ff
	ff		 mov	 DWORD PTR tv1429[ebp], edx
  017cc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  017cf	8b 08		 mov	 ecx, DWORD PTR [eax]
  017d1	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  017d4	89 95 14 fd ff
	ff		 mov	 DWORD PTR tv1431[ebp], edx
  017da	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  017dd	83 c0 5a	 add	 eax, 90			; 0000005aH
  017e0	8b f4		 mov	 esi, esp
  017e2	50		 push	 eax
  017e3	8b 8d 18 fd ff
	ff		 mov	 ecx, DWORD PTR tv1429[ebp]
  017e9	ff 95 14 fd ff
	ff		 call	 DWORD PTR tv1431[ebp]
  017ef	3b f4		 cmp	 esi, esp
  017f1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  017f6	85 c0		 test	 eax, eax
  017f8	74 3e		 je	 SHORT $LN76@ParseAsDec

; 361  :                     {
; 362  :                         *_sign = 1;

  017fa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  017fd	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  01800	c6 02 01	 mov	 BYTE PTR [edx], 1

; 363  :                         _source.SkipString(_positive_sign);

  01803	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01806	89 85 10 fd ff
	ff		 mov	 DWORD PTR tv1443[ebp], eax
  0180c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0180f	8b 11		 mov	 edx, DWORD PTR [ecx]
  01811	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  01814	89 85 0c fd ff
	ff		 mov	 DWORD PTR tv1445[ebp], eax
  0181a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0181d	83 c1 5a	 add	 ecx, 90			; 0000005aH
  01820	8b f4		 mov	 esi, esp
  01822	51		 push	 ecx
  01823	8b 8d 10 fd ff
	ff		 mov	 ecx, DWORD PTR tv1443[ebp]
  01829	ff 95 0c fd ff
	ff		 call	 DWORD PTR tv1445[ebp]
  0182f	3b f4		 cmp	 esi, esp
  01831	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01836	eb 7e		 jmp	 SHORT $LN77@ParseAsDec
$LN76@ParseAsDec:

; 364  :                     }
; 365  :                     else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)

  01838	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0183b	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0183e	83 e0 08	 and	 eax, 8
  01841	74 73		 je	 SHORT $LN77@ParseAsDec
  01843	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01846	89 8d 08 fd ff
	ff		 mov	 DWORD PTR tv1458[ebp], ecx
  0184c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0184f	8b 02		 mov	 eax, DWORD PTR [edx]
  01851	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  01854	89 8d 04 fd ff
	ff		 mov	 DWORD PTR tv1460[ebp], ecx
  0185a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0185d	83 c2 7c	 add	 edx, 124		; 0000007cH
  01860	8b f4		 mov	 esi, esp
  01862	52		 push	 edx
  01863	8b 8d 08 fd ff
	ff		 mov	 ecx, DWORD PTR tv1458[ebp]
  01869	ff 95 04 fd ff
	ff		 call	 DWORD PTR tv1460[ebp]
  0186f	3b f4		 cmp	 esi, esp
  01871	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01876	85 c0		 test	 eax, eax
  01878	74 3c		 je	 SHORT $LN77@ParseAsDec

; 366  :                     {
; 367  :                         *_sign = -1;

  0187a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0187d	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  01880	c6 01 ff	 mov	 BYTE PTR [ecx], -1

; 368  :                         _source.SkipString(_negative_sign);

  01883	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01886	89 95 00 fd ff
	ff		 mov	 DWORD PTR tv1472[ebp], edx
  0188c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0188f	8b 08		 mov	 ecx, DWORD PTR [eax]
  01891	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  01894	89 95 fc fc ff
	ff		 mov	 DWORD PTR tv1474[ebp], edx
  0189a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0189d	83 c0 7c	 add	 eax, 124		; 0000007cH
  018a0	8b f4		 mov	 esi, esp
  018a2	50		 push	 eax
  018a3	8b 8d 00 fd ff
	ff		 mov	 ecx, DWORD PTR tv1472[ebp]
  018a9	ff 95 fc fc ff
	ff		 call	 DWORD PTR tv1474[ebp]
  018af	3b f4		 cmp	 esi, esp
  018b1	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN77@ParseAsDec:

; 369  :                     }
; 370  :                     else
; 371  :                     {
; 372  :                     }

  018b6	e9 00 02 00 00	 jmp	 $LN63@ParseAsDec
$LN74@ParseAsDec:

; 373  :                 }
; 374  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))

  018bb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  018be	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  018c1	83 e2 08	 and	 edx, 8
  018c4	0f 84 f4 00 00
	00		 je	 $LN80@ParseAsDec
  018ca	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  018cd	89 85 f8 fc ff
	ff		 mov	 DWORD PTR tv1487[ebp], eax
  018d3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  018d6	8b 11		 mov	 edx, DWORD PTR [ecx]
  018d8	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  018db	89 85 f4 fc ff
	ff		 mov	 DWORD PTR tv1489[ebp], eax
  018e1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  018e4	83 c1 5a	 add	 ecx, 90			; 0000005aH
  018e7	8b f4		 mov	 esi, esp
  018e9	51		 push	 ecx
  018ea	8b 8d f8 fc ff
	ff		 mov	 ecx, DWORD PTR tv1487[ebp]
  018f0	ff 95 f4 fc ff
	ff		 call	 DWORD PTR tv1489[ebp]
  018f6	3b f4		 cmp	 esi, esp
  018f8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  018fd	85 c0		 test	 eax, eax
  018ff	0f 84 b9 00 00
	00		 je	 $LN80@ParseAsDec

; 375  :                 {
; 376  :                     *_sign = 1;

  01905	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01908	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  0190b	c6 00 01	 mov	 BYTE PTR [eax], 1

; 377  :                     _source.SkipString(_positive_sign);

  0190e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01911	89 8d f0 fc ff
	ff		 mov	 DWORD PTR tv1501[ebp], ecx
  01917	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0191a	8b 02		 mov	 eax, DWORD PTR [edx]
  0191c	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0191f	89 8d ec fc ff
	ff		 mov	 DWORD PTR tv1503[ebp], ecx
  01925	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01928	83 c2 5a	 add	 edx, 90			; 0000005aH
  0192b	8b f4		 mov	 esi, esp
  0192d	52		 push	 edx
  0192e	8b 8d f0 fc ff
	ff		 mov	 ecx, DWORD PTR tv1501[ebp]
  01934	ff 95 ec fc ff
	ff		 call	 DWORD PTR tv1503[ebp]
  0193a	3b f4		 cmp	 esi, esp
  0193c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 378  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  01941	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01944	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  01947	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  0194d	74 6a		 je	 SHORT $LN82@ParseAsDec
  0194f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01952	89 95 e8 fc ff
	ff		 mov	 DWORD PTR tv1516[ebp], edx
  01958	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0195b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0195d	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  01960	89 95 e4 fc ff
	ff		 mov	 DWORD PTR tv1518[ebp], edx
  01966	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01969	83 c0 38	 add	 eax, 56			; 00000038H
  0196c	8b f4		 mov	 esi, esp
  0196e	50		 push	 eax
  0196f	8b 8d e8 fc ff
	ff		 mov	 ecx, DWORD PTR tv1516[ebp]
  01975	ff 95 e4 fc ff
	ff		 call	 DWORD PTR tv1518[ebp]
  0197b	3b f4		 cmp	 esi, esp
  0197d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01982	85 c0		 test	 eax, eax
  01984	74 33		 je	 SHORT $LN82@ParseAsDec

; 379  :                         _source.SkipString(_currency_symbol);

  01986	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01989	89 8d e0 fc ff
	ff		 mov	 DWORD PTR tv1528[ebp], ecx
  0198f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01992	8b 02		 mov	 eax, DWORD PTR [edx]
  01994	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01997	89 8d dc fc ff
	ff		 mov	 DWORD PTR tv1530[ebp], ecx
  0199d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  019a0	83 c2 38	 add	 edx, 56			; 00000038H
  019a3	8b f4		 mov	 esi, esp
  019a5	52		 push	 edx
  019a6	8b 8d e0 fc ff
	ff		 mov	 ecx, DWORD PTR tv1528[ebp]
  019ac	ff 95 dc fc ff
	ff		 call	 DWORD PTR tv1530[ebp]
  019b2	3b f4		 cmp	 esi, esp
  019b4	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN82@ParseAsDec:

; 380  :                 }

  019b9	e9 fd 00 00 00	 jmp	 $LN63@ParseAsDec
$LN80@ParseAsDec:

; 381  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)

  019be	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  019c1	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  019c4	83 e1 08	 and	 ecx, 8
  019c7	0f 84 ee 00 00
	00		 je	 $LN63@ParseAsDec
  019cd	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  019d0	89 95 d8 fc ff
	ff		 mov	 DWORD PTR tv1543[ebp], edx
  019d6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  019d9	8b 08		 mov	 ecx, DWORD PTR [eax]
  019db	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  019de	89 95 d4 fc ff
	ff		 mov	 DWORD PTR tv1545[ebp], edx
  019e4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  019e7	83 c0 7c	 add	 eax, 124		; 0000007cH
  019ea	8b f4		 mov	 esi, esp
  019ec	50		 push	 eax
  019ed	8b 8d d8 fc ff
	ff		 mov	 ecx, DWORD PTR tv1543[ebp]
  019f3	ff 95 d4 fc ff
	ff		 call	 DWORD PTR tv1545[ebp]
  019f9	3b f4		 cmp	 esi, esp
  019fb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01a00	85 c0		 test	 eax, eax
  01a02	0f 84 b3 00 00
	00		 je	 $LN63@ParseAsDec

; 382  :                 {
; 383  :                     *_sign = -1;

  01a08	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01a0b	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  01a0e	c6 02 ff	 mov	 BYTE PTR [edx], -1

; 384  :                     _source.SkipString(_negative_sign);

  01a11	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01a14	89 85 d0 fc ff
	ff		 mov	 DWORD PTR tv1557[ebp], eax
  01a1a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01a1d	8b 11		 mov	 edx, DWORD PTR [ecx]
  01a1f	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  01a22	89 85 cc fc ff
	ff		 mov	 DWORD PTR tv1559[ebp], eax
  01a28	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01a2b	83 c1 7c	 add	 ecx, 124		; 0000007cH
  01a2e	8b f4		 mov	 esi, esp
  01a30	51		 push	 ecx
  01a31	8b 8d d0 fc ff
	ff		 mov	 ecx, DWORD PTR tv1557[ebp]
  01a37	ff 95 cc fc ff
	ff		 call	 DWORD PTR tv1559[ebp]
  01a3d	3b f4		 cmp	 esi, esp
  01a3f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 385  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  01a44	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01a47	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  01a4a	25 00 01 00 00	 and	 eax, 256		; 00000100H
  01a4f	74 6a		 je	 SHORT $LN63@ParseAsDec
  01a51	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01a54	89 8d c8 fc ff
	ff		 mov	 DWORD PTR tv1572[ebp], ecx
  01a5a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01a5d	8b 02		 mov	 eax, DWORD PTR [edx]
  01a5f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  01a62	89 8d c4 fc ff
	ff		 mov	 DWORD PTR tv1574[ebp], ecx
  01a68	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01a6b	83 c2 38	 add	 edx, 56			; 00000038H
  01a6e	8b f4		 mov	 esi, esp
  01a70	52		 push	 edx
  01a71	8b 8d c8 fc ff
	ff		 mov	 ecx, DWORD PTR tv1572[ebp]
  01a77	ff 95 c4 fc ff
	ff		 call	 DWORD PTR tv1574[ebp]
  01a7d	3b f4		 cmp	 esi, esp
  01a7f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01a84	85 c0		 test	 eax, eax
  01a86	74 33		 je	 SHORT $LN63@ParseAsDec

; 386  :                         _source.SkipString(_currency_symbol);

  01a88	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01a8b	89 85 c0 fc ff
	ff		 mov	 DWORD PTR tv1584[ebp], eax
  01a91	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01a94	8b 11		 mov	 edx, DWORD PTR [ecx]
  01a96	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  01a99	89 85 bc fc ff
	ff		 mov	 DWORD PTR tv1586[ebp], eax
  01a9f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01aa2	83 c1 38	 add	 ecx, 56			; 00000038H
  01aa5	8b f4		 mov	 esi, esp
  01aa7	51		 push	 ecx
  01aa8	8b 8d c0 fc ff
	ff		 mov	 ecx, DWORD PTR tv1584[ebp]
  01aae	ff 95 bc fc ff
	ff		 call	 DWORD PTR tv1586[ebp]
  01ab4	3b f4		 cmp	 esi, esp
  01ab6	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN63@ParseAsDec:

; 387  :                 }
; 388  :                 else
; 389  :                 {
; 390  :                 }

  01abb	e9 45 07 00 00	 jmp	 $LN4@ParseAsDec
$LN59@ParseAsDec:

; 391  :             }
; 392  :             else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))

  01ac0	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01ac3	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  01ac6	83 e0 20	 and	 eax, 32			; 00000020H
  01ac9	0f 84 32 07 00
	00		 je	 $LN86@ParseAsDec
  01acf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01ad2	89 8d b8 fc ff
	ff		 mov	 DWORD PTR tv1599[ebp], ecx
  01ad8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01adb	8b 02		 mov	 eax, DWORD PTR [edx]
  01add	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  01ae0	89 8d b4 fc ff
	ff		 mov	 DWORD PTR tv1601[ebp], ecx
  01ae6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01ae9	81 c2 9e 00 00
	00		 add	 edx, 158		; 0000009eH
  01aef	8b f4		 mov	 esi, esp
  01af1	52		 push	 edx
  01af2	8b 8d b8 fc ff
	ff		 mov	 ecx, DWORD PTR tv1599[ebp]
  01af8	ff 95 b4 fc ff
	ff		 call	 DWORD PTR tv1601[ebp]
  01afe	3b f4		 cmp	 esi, esp
  01b00	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01b05	85 c0		 test	 eax, eax
  01b07	0f 84 f4 06 00
	00		 je	 $LN86@ParseAsDec

; 393  :             {
; 394  :                 _source.SkipString(_decimal_separator);

  01b0d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01b10	89 85 b0 fc ff
	ff		 mov	 DWORD PTR tv1611[ebp], eax
  01b16	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01b19	8b 11		 mov	 edx, DWORD PTR [ecx]
  01b1b	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  01b1e	89 85 ac fc ff
	ff		 mov	 DWORD PTR tv1613[ebp], eax
  01b24	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01b27	81 c1 9e 00 00
	00		 add	 ecx, 158		; 0000009eH
  01b2d	8b f4		 mov	 esi, esp
  01b2f	51		 push	 ecx
  01b30	8b 8d b0 fc ff
	ff		 mov	 ecx, DWORD PTR tv1611[ebp]
  01b36	ff 95 ac fc ff
	ff		 call	 DWORD PTR tv1613[ebp]
  01b3c	3b f4		 cmp	 esi, esp
  01b3e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 395  :                 _frac_part.Write(L'.');

  01b43	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01b46	83 c2 1c	 add	 edx, 28			; 0000001cH
  01b49	89 95 a8 fc ff
	ff		 mov	 DWORD PTR tv1621[ebp], edx
  01b4f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01b52	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  01b55	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  01b58	89 95 a4 fc ff
	ff		 mov	 DWORD PTR tv1623[ebp], edx
  01b5e	8b f4		 mov	 esi, esp
  01b60	6a 2e		 push	 46			; 0000002eH
  01b62	8b 8d a8 fc ff
	ff		 mov	 ecx, DWORD PTR tv1621[ebp]
  01b68	ff 95 a4 fc ff
	ff		 call	 DWORD PTR tv1623[ebp]
  01b6e	3b f4		 cmp	 esi, esp
  01b70	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 396  :                 ParseAsFractionPartNumberSequence();

  01b75	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01b78	e8 00 00 00 00	 call	 ?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AAEXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence

; 397  :                 if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE) && _source.StartsWith(L" "))

  01b7d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01b80	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  01b83	83 e1 02	 and	 ecx, 2
  01b86	0f 84 f0 02 00
	00		 je	 $LN88@ParseAsDec
  01b8c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01b8f	89 95 a0 fc ff
	ff		 mov	 DWORD PTR tv1636[ebp], edx
  01b95	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01b98	8b 08		 mov	 ecx, DWORD PTR [eax]
  01b9a	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  01b9d	89 95 9c fc ff
	ff		 mov	 DWORD PTR tv1638[ebp], edx
  01ba3	8b f4		 mov	 esi, esp
  01ba5	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5@
  01baa	8b 8d a0 fc ff
	ff		 mov	 ecx, DWORD PTR tv1636[ebp]
  01bb0	ff 95 9c fc ff
	ff		 call	 DWORD PTR tv1638[ebp]
  01bb6	3b f4		 cmp	 esi, esp
  01bb8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01bbd	85 c0		 test	 eax, eax
  01bbf	0f 84 b7 02 00
	00		 je	 $LN88@ParseAsDec

; 398  :                 {
; 399  :                     _source.SkipString(L" ");

  01bc5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01bc8	89 85 98 fc ff
	ff		 mov	 DWORD PTR tv1647[ebp], eax
  01bce	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01bd1	8b 11		 mov	 edx, DWORD PTR [ecx]
  01bd3	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  01bd6	89 85 94 fc ff
	ff		 mov	 DWORD PTR tv1649[ebp], eax
  01bdc	8b f4		 mov	 esi, esp
  01bde	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5@
  01be3	8b 8d 98 fc ff
	ff		 mov	 ecx, DWORD PTR tv1647[ebp]
  01be9	ff 95 94 fc ff
	ff		 call	 DWORD PTR tv1649[ebp]
  01bef	3b f4		 cmp	 esi, esp
  01bf1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 400  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  01bf6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01bf9	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  01bfc	81 e2 00 01 00
	00		 and	 edx, 256		; 00000100H
  01c02	0f 84 71 01 00
	00		 je	 $LN90@ParseAsDec
  01c08	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01c0b	89 85 90 fc ff
	ff		 mov	 DWORD PTR tv1662[ebp], eax
  01c11	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01c14	8b 11		 mov	 edx, DWORD PTR [ecx]
  01c16	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  01c19	89 85 8c fc ff
	ff		 mov	 DWORD PTR tv1664[ebp], eax
  01c1f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01c22	83 c1 38	 add	 ecx, 56			; 00000038H
  01c25	8b f4		 mov	 esi, esp
  01c27	51		 push	 ecx
  01c28	8b 8d 90 fc ff
	ff		 mov	 ecx, DWORD PTR tv1662[ebp]
  01c2e	ff 95 8c fc ff
	ff		 call	 DWORD PTR tv1664[ebp]
  01c34	3b f4		 cmp	 esi, esp
  01c36	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01c3b	85 c0		 test	 eax, eax
  01c3d	0f 84 36 01 00
	00		 je	 $LN90@ParseAsDec

; 401  :                     {
; 402  :                         _source.SkipString(_currency_symbol);

  01c43	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01c46	89 95 88 fc ff
	ff		 mov	 DWORD PTR tv1674[ebp], edx
  01c4c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01c4f	8b 08		 mov	 ecx, DWORD PTR [eax]
  01c51	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  01c54	89 95 84 fc ff
	ff		 mov	 DWORD PTR tv1676[ebp], edx
  01c5a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01c5d	83 c0 38	 add	 eax, 56			; 00000038H
  01c60	8b f4		 mov	 esi, esp
  01c62	50		 push	 eax
  01c63	8b 8d 88 fc ff
	ff		 mov	 ecx, DWORD PTR tv1674[ebp]
  01c69	ff 95 84 fc ff
	ff		 call	 DWORD PTR tv1676[ebp]
  01c6f	3b f4		 cmp	 esi, esp
  01c71	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 403  :                         if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))

  01c76	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01c79	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  01c7c	83 e2 08	 and	 edx, 8
  01c7f	74 75		 je	 SHORT $LN92@ParseAsDec
  01c81	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01c84	89 85 80 fc ff
	ff		 mov	 DWORD PTR tv1689[ebp], eax
  01c8a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01c8d	8b 11		 mov	 edx, DWORD PTR [ecx]
  01c8f	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  01c92	89 85 7c fc ff
	ff		 mov	 DWORD PTR tv1691[ebp], eax
  01c98	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01c9b	83 c1 5a	 add	 ecx, 90			; 0000005aH
  01c9e	8b f4		 mov	 esi, esp
  01ca0	51		 push	 ecx
  01ca1	8b 8d 80 fc ff
	ff		 mov	 ecx, DWORD PTR tv1689[ebp]
  01ca7	ff 95 7c fc ff
	ff		 call	 DWORD PTR tv1691[ebp]
  01cad	3b f4		 cmp	 esi, esp
  01caf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01cb4	85 c0		 test	 eax, eax
  01cb6	74 3e		 je	 SHORT $LN92@ParseAsDec

; 404  :                         {
; 405  :                             *_sign = 1;

  01cb8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01cbb	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  01cbe	c6 00 01	 mov	 BYTE PTR [eax], 1

; 406  :                             _source.SkipString(_positive_sign);

  01cc1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01cc4	89 8d 78 fc ff
	ff		 mov	 DWORD PTR tv1703[ebp], ecx
  01cca	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01ccd	8b 02		 mov	 eax, DWORD PTR [edx]
  01ccf	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01cd2	89 8d 74 fc ff
	ff		 mov	 DWORD PTR tv1705[ebp], ecx
  01cd8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01cdb	83 c2 5a	 add	 edx, 90			; 0000005aH
  01cde	8b f4		 mov	 esi, esp
  01ce0	52		 push	 edx
  01ce1	8b 8d 78 fc ff
	ff		 mov	 ecx, DWORD PTR tv1703[ebp]
  01ce7	ff 95 74 fc ff
	ff		 call	 DWORD PTR tv1705[ebp]
  01ced	3b f4		 cmp	 esi, esp
  01cef	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01cf4	eb 7e		 jmp	 SHORT $LN93@ParseAsDec
$LN92@ParseAsDec:

; 407  :                         }
; 408  :                         else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)

  01cf6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01cf9	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  01cfc	83 e1 08	 and	 ecx, 8
  01cff	74 73		 je	 SHORT $LN93@ParseAsDec
  01d01	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01d04	89 95 70 fc ff
	ff		 mov	 DWORD PTR tv1718[ebp], edx
  01d0a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01d0d	8b 08		 mov	 ecx, DWORD PTR [eax]
  01d0f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  01d12	89 95 6c fc ff
	ff		 mov	 DWORD PTR tv1720[ebp], edx
  01d18	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01d1b	83 c0 7c	 add	 eax, 124		; 0000007cH
  01d1e	8b f4		 mov	 esi, esp
  01d20	50		 push	 eax
  01d21	8b 8d 70 fc ff
	ff		 mov	 ecx, DWORD PTR tv1718[ebp]
  01d27	ff 95 6c fc ff
	ff		 call	 DWORD PTR tv1720[ebp]
  01d2d	3b f4		 cmp	 esi, esp
  01d2f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01d34	85 c0		 test	 eax, eax
  01d36	74 3c		 je	 SHORT $LN93@ParseAsDec

; 409  :                         {
; 410  :                             *_sign = -1;

  01d38	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01d3b	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  01d3e	c6 02 ff	 mov	 BYTE PTR [edx], -1

; 411  :                             _source.SkipString(_negative_sign);

  01d41	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01d44	89 85 68 fc ff
	ff		 mov	 DWORD PTR tv1732[ebp], eax
  01d4a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01d4d	8b 11		 mov	 edx, DWORD PTR [ecx]
  01d4f	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  01d52	89 85 64 fc ff
	ff		 mov	 DWORD PTR tv1734[ebp], eax
  01d58	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01d5b	83 c1 7c	 add	 ecx, 124		; 0000007cH
  01d5e	8b f4		 mov	 esi, esp
  01d60	51		 push	 ecx
  01d61	8b 8d 68 fc ff
	ff		 mov	 ecx, DWORD PTR tv1732[ebp]
  01d67	ff 95 64 fc ff
	ff		 call	 DWORD PTR tv1734[ebp]
  01d6d	3b f4		 cmp	 esi, esp
  01d6f	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN93@ParseAsDec:

; 412  :                         }
; 413  :                         else
; 414  :                         {
; 415  :                         }
; 416  :                     }
; 417  :                     else

  01d74	e9 fe 00 00 00	 jmp	 $LN91@ParseAsDec
$LN90@ParseAsDec:

; 418  :                     {
; 419  :                         if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))

  01d79	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01d7c	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  01d7f	83 e0 08	 and	 eax, 8
  01d82	74 75		 je	 SHORT $LN96@ParseAsDec
  01d84	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01d87	89 8d 60 fc ff
	ff		 mov	 DWORD PTR tv1747[ebp], ecx
  01d8d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01d90	8b 02		 mov	 eax, DWORD PTR [edx]
  01d92	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  01d95	89 8d 5c fc ff
	ff		 mov	 DWORD PTR tv1749[ebp], ecx
  01d9b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01d9e	83 c2 5a	 add	 edx, 90			; 0000005aH
  01da1	8b f4		 mov	 esi, esp
  01da3	52		 push	 edx
  01da4	8b 8d 60 fc ff
	ff		 mov	 ecx, DWORD PTR tv1747[ebp]
  01daa	ff 95 5c fc ff
	ff		 call	 DWORD PTR tv1749[ebp]
  01db0	3b f4		 cmp	 esi, esp
  01db2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01db7	85 c0		 test	 eax, eax
  01db9	74 3e		 je	 SHORT $LN96@ParseAsDec

; 420  :                         {
; 421  :                             *_sign = 1;

  01dbb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01dbe	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  01dc1	c6 01 01	 mov	 BYTE PTR [ecx], 1

; 422  :                             _source.SkipString(_positive_sign);

  01dc4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01dc7	89 95 58 fc ff
	ff		 mov	 DWORD PTR tv1761[ebp], edx
  01dcd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01dd0	8b 08		 mov	 ecx, DWORD PTR [eax]
  01dd2	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  01dd5	89 95 54 fc ff
	ff		 mov	 DWORD PTR tv1763[ebp], edx
  01ddb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01dde	83 c0 5a	 add	 eax, 90			; 0000005aH
  01de1	8b f4		 mov	 esi, esp
  01de3	50		 push	 eax
  01de4	8b 8d 58 fc ff
	ff		 mov	 ecx, DWORD PTR tv1761[ebp]
  01dea	ff 95 54 fc ff
	ff		 call	 DWORD PTR tv1763[ebp]
  01df0	3b f4		 cmp	 esi, esp
  01df2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01df7	eb 7e		 jmp	 SHORT $LN91@ParseAsDec
$LN96@ParseAsDec:

; 423  :                         }
; 424  :                         else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)

  01df9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01dfc	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  01dff	83 e2 08	 and	 edx, 8
  01e02	74 73		 je	 SHORT $LN91@ParseAsDec
  01e04	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01e07	89 85 50 fc ff
	ff		 mov	 DWORD PTR tv1776[ebp], eax
  01e0d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01e10	8b 11		 mov	 edx, DWORD PTR [ecx]
  01e12	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  01e15	89 85 4c fc ff
	ff		 mov	 DWORD PTR tv1778[ebp], eax
  01e1b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01e1e	83 c1 7c	 add	 ecx, 124		; 0000007cH
  01e21	8b f4		 mov	 esi, esp
  01e23	51		 push	 ecx
  01e24	8b 8d 50 fc ff
	ff		 mov	 ecx, DWORD PTR tv1776[ebp]
  01e2a	ff 95 4c fc ff
	ff		 call	 DWORD PTR tv1778[ebp]
  01e30	3b f4		 cmp	 esi, esp
  01e32	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01e37	85 c0		 test	 eax, eax
  01e39	74 3c		 je	 SHORT $LN91@ParseAsDec

; 425  :                         {
; 426  :                             *_sign = -1;

  01e3b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01e3e	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  01e41	c6 00 ff	 mov	 BYTE PTR [eax], -1

; 427  :                             _source.SkipString(_negative_sign);

  01e44	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01e47	89 8d 48 fc ff
	ff		 mov	 DWORD PTR tv1790[ebp], ecx
  01e4d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01e50	8b 02		 mov	 eax, DWORD PTR [edx]
  01e52	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01e55	89 8d 44 fc ff
	ff		 mov	 DWORD PTR tv1792[ebp], ecx
  01e5b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01e5e	83 c2 7c	 add	 edx, 124		; 0000007cH
  01e61	8b f4		 mov	 esi, esp
  01e63	52		 push	 edx
  01e64	8b 8d 48 fc ff
	ff		 mov	 ecx, DWORD PTR tv1790[ebp]
  01e6a	ff 95 44 fc ff
	ff		 call	 DWORD PTR tv1792[ebp]
  01e70	3b f4		 cmp	 esi, esp
  01e72	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN91@ParseAsDec:

; 428  :                         }
; 429  :                         else
; 430  :                         {
; 431  :                         }
; 432  :                     }

  01e77	e9 83 03 00 00	 jmp	 $LN89@ParseAsDec
$LN88@ParseAsDec:

; 433  :                 }
; 434  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  01e7c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01e7f	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  01e82	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  01e88	0f 84 71 01 00
	00		 je	 $LN100@ParseAsDec
  01e8e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01e91	89 95 40 fc ff
	ff		 mov	 DWORD PTR tv1805[ebp], edx
  01e97	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01e9a	8b 08		 mov	 ecx, DWORD PTR [eax]
  01e9c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  01e9f	89 95 3c fc ff
	ff		 mov	 DWORD PTR tv1807[ebp], edx
  01ea5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01ea8	83 c0 38	 add	 eax, 56			; 00000038H
  01eab	8b f4		 mov	 esi, esp
  01ead	50		 push	 eax
  01eae	8b 8d 40 fc ff
	ff		 mov	 ecx, DWORD PTR tv1805[ebp]
  01eb4	ff 95 3c fc ff
	ff		 call	 DWORD PTR tv1807[ebp]
  01eba	3b f4		 cmp	 esi, esp
  01ebc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01ec1	85 c0		 test	 eax, eax
  01ec3	0f 84 36 01 00
	00		 je	 $LN100@ParseAsDec

; 435  :                 {
; 436  :                     _source.SkipString(_currency_symbol);

  01ec9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01ecc	89 8d 38 fc ff
	ff		 mov	 DWORD PTR tv1817[ebp], ecx
  01ed2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01ed5	8b 02		 mov	 eax, DWORD PTR [edx]
  01ed7	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  01eda	89 8d 34 fc ff
	ff		 mov	 DWORD PTR tv1819[ebp], ecx
  01ee0	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01ee3	83 c2 38	 add	 edx, 56			; 00000038H
  01ee6	8b f4		 mov	 esi, esp
  01ee8	52		 push	 edx
  01ee9	8b 8d 38 fc ff
	ff		 mov	 ecx, DWORD PTR tv1817[ebp]
  01eef	ff 95 34 fc ff
	ff		 call	 DWORD PTR tv1819[ebp]
  01ef5	3b f4		 cmp	 esi, esp
  01ef7	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 437  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))

  01efc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01eff	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  01f02	83 e1 08	 and	 ecx, 8
  01f05	74 75		 je	 SHORT $LN102@ParseAsDec
  01f07	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01f0a	89 95 30 fc ff
	ff		 mov	 DWORD PTR tv1832[ebp], edx
  01f10	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01f13	8b 08		 mov	 ecx, DWORD PTR [eax]
  01f15	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  01f18	89 95 2c fc ff
	ff		 mov	 DWORD PTR tv1834[ebp], edx
  01f1e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01f21	83 c0 5a	 add	 eax, 90			; 0000005aH
  01f24	8b f4		 mov	 esi, esp
  01f26	50		 push	 eax
  01f27	8b 8d 30 fc ff
	ff		 mov	 ecx, DWORD PTR tv1832[ebp]
  01f2d	ff 95 2c fc ff
	ff		 call	 DWORD PTR tv1834[ebp]
  01f33	3b f4		 cmp	 esi, esp
  01f35	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01f3a	85 c0		 test	 eax, eax
  01f3c	74 3e		 je	 SHORT $LN102@ParseAsDec

; 438  :                     {
; 439  :                         *_sign = 1;

  01f3e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01f41	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  01f44	c6 02 01	 mov	 BYTE PTR [edx], 1

; 440  :                         _source.SkipString(_positive_sign);

  01f47	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01f4a	89 85 28 fc ff
	ff		 mov	 DWORD PTR tv1846[ebp], eax
  01f50	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01f53	8b 11		 mov	 edx, DWORD PTR [ecx]
  01f55	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  01f58	89 85 24 fc ff
	ff		 mov	 DWORD PTR tv1848[ebp], eax
  01f5e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01f61	83 c1 5a	 add	 ecx, 90			; 0000005aH
  01f64	8b f4		 mov	 esi, esp
  01f66	51		 push	 ecx
  01f67	8b 8d 28 fc ff
	ff		 mov	 ecx, DWORD PTR tv1846[ebp]
  01f6d	ff 95 24 fc ff
	ff		 call	 DWORD PTR tv1848[ebp]
  01f73	3b f4		 cmp	 esi, esp
  01f75	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01f7a	eb 7e		 jmp	 SHORT $LN103@ParseAsDec
$LN102@ParseAsDec:

; 441  :                     }
; 442  :                     else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)

  01f7c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01f7f	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  01f82	83 e0 08	 and	 eax, 8
  01f85	74 73		 je	 SHORT $LN103@ParseAsDec
  01f87	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01f8a	89 8d 20 fc ff
	ff		 mov	 DWORD PTR tv1861[ebp], ecx
  01f90	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01f93	8b 02		 mov	 eax, DWORD PTR [edx]
  01f95	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  01f98	89 8d 1c fc ff
	ff		 mov	 DWORD PTR tv1863[ebp], ecx
  01f9e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01fa1	83 c2 7c	 add	 edx, 124		; 0000007cH
  01fa4	8b f4		 mov	 esi, esp
  01fa6	52		 push	 edx
  01fa7	8b 8d 20 fc ff
	ff		 mov	 ecx, DWORD PTR tv1861[ebp]
  01fad	ff 95 1c fc ff
	ff		 call	 DWORD PTR tv1863[ebp]
  01fb3	3b f4		 cmp	 esi, esp
  01fb5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01fba	85 c0		 test	 eax, eax
  01fbc	74 3c		 je	 SHORT $LN103@ParseAsDec

; 443  :                     {
; 444  :                         *_sign = -1;

  01fbe	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01fc1	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  01fc4	c6 01 ff	 mov	 BYTE PTR [ecx], -1

; 445  :                         _source.SkipString(_negative_sign);

  01fc7	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  01fca	89 95 18 fc ff
	ff		 mov	 DWORD PTR tv1875[ebp], edx
  01fd0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01fd3	8b 08		 mov	 ecx, DWORD PTR [eax]
  01fd5	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  01fd8	89 95 14 fc ff
	ff		 mov	 DWORD PTR tv1877[ebp], edx
  01fde	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  01fe1	83 c0 7c	 add	 eax, 124		; 0000007cH
  01fe4	8b f4		 mov	 esi, esp
  01fe6	50		 push	 eax
  01fe7	8b 8d 18 fc ff
	ff		 mov	 ecx, DWORD PTR tv1875[ebp]
  01fed	ff 95 14 fc ff
	ff		 call	 DWORD PTR tv1877[ebp]
  01ff3	3b f4		 cmp	 esi, esp
  01ff5	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN103@ParseAsDec:

; 446  :                     }
; 447  :                     else
; 448  :                     {
; 449  :                     }

  01ffa	e9 00 02 00 00	 jmp	 $LN89@ParseAsDec
$LN100@ParseAsDec:

; 450  :                 }
; 451  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))

  01fff	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02002	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  02005	83 e2 08	 and	 edx, 8
  02008	0f 84 f4 00 00
	00		 je	 $LN106@ParseAsDec
  0200e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  02011	89 85 10 fc ff
	ff		 mov	 DWORD PTR tv1890[ebp], eax
  02017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0201a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0201c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0201f	89 85 0c fc ff
	ff		 mov	 DWORD PTR tv1892[ebp], eax
  02025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02028	83 c1 5a	 add	 ecx, 90			; 0000005aH
  0202b	8b f4		 mov	 esi, esp
  0202d	51		 push	 ecx
  0202e	8b 8d 10 fc ff
	ff		 mov	 ecx, DWORD PTR tv1890[ebp]
  02034	ff 95 0c fc ff
	ff		 call	 DWORD PTR tv1892[ebp]
  0203a	3b f4		 cmp	 esi, esp
  0203c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  02041	85 c0		 test	 eax, eax
  02043	0f 84 b9 00 00
	00		 je	 $LN106@ParseAsDec

; 452  :                 {
; 453  :                     *_sign = 1;

  02049	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0204c	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  0204f	c6 00 01	 mov	 BYTE PTR [eax], 1

; 454  :                     _source.SkipString(_positive_sign);

  02052	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02055	89 8d 08 fc ff
	ff		 mov	 DWORD PTR tv1904[ebp], ecx
  0205b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0205e	8b 02		 mov	 eax, DWORD PTR [edx]
  02060	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  02063	89 8d 04 fc ff
	ff		 mov	 DWORD PTR tv1906[ebp], ecx
  02069	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0206c	83 c2 5a	 add	 edx, 90			; 0000005aH
  0206f	8b f4		 mov	 esi, esp
  02071	52		 push	 edx
  02072	8b 8d 08 fc ff
	ff		 mov	 ecx, DWORD PTR tv1904[ebp]
  02078	ff 95 04 fc ff
	ff		 call	 DWORD PTR tv1906[ebp]
  0207e	3b f4		 cmp	 esi, esp
  02080	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 455  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  02085	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  02088	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0208b	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  02091	74 6a		 je	 SHORT $LN108@ParseAsDec
  02093	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  02096	89 95 00 fc ff
	ff		 mov	 DWORD PTR tv1919[ebp], edx
  0209c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0209f	8b 08		 mov	 ecx, DWORD PTR [eax]
  020a1	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  020a4	89 95 fc fb ff
	ff		 mov	 DWORD PTR tv1921[ebp], edx
  020aa	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  020ad	83 c0 38	 add	 eax, 56			; 00000038H
  020b0	8b f4		 mov	 esi, esp
  020b2	50		 push	 eax
  020b3	8b 8d 00 fc ff
	ff		 mov	 ecx, DWORD PTR tv1919[ebp]
  020b9	ff 95 fc fb ff
	ff		 call	 DWORD PTR tv1921[ebp]
  020bf	3b f4		 cmp	 esi, esp
  020c1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  020c6	85 c0		 test	 eax, eax
  020c8	74 33		 je	 SHORT $LN108@ParseAsDec

; 456  :                         _source.SkipString(_currency_symbol);

  020ca	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  020cd	89 8d f8 fb ff
	ff		 mov	 DWORD PTR tv1931[ebp], ecx
  020d3	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  020d6	8b 02		 mov	 eax, DWORD PTR [edx]
  020d8	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  020db	89 8d f4 fb ff
	ff		 mov	 DWORD PTR tv1933[ebp], ecx
  020e1	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  020e4	83 c2 38	 add	 edx, 56			; 00000038H
  020e7	8b f4		 mov	 esi, esp
  020e9	52		 push	 edx
  020ea	8b 8d f8 fb ff
	ff		 mov	 ecx, DWORD PTR tv1931[ebp]
  020f0	ff 95 f4 fb ff
	ff		 call	 DWORD PTR tv1933[ebp]
  020f6	3b f4		 cmp	 esi, esp
  020f8	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN108@ParseAsDec:

; 457  :                 }

  020fd	e9 fd 00 00 00	 jmp	 $LN89@ParseAsDec
$LN106@ParseAsDec:

; 458  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)

  02102	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  02105	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  02108	83 e1 08	 and	 ecx, 8
  0210b	0f 84 ee 00 00
	00		 je	 $LN89@ParseAsDec
  02111	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  02114	89 95 f0 fb ff
	ff		 mov	 DWORD PTR tv1946[ebp], edx
  0211a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0211d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0211f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  02122	89 95 ec fb ff
	ff		 mov	 DWORD PTR tv1948[ebp], edx
  02128	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0212b	83 c0 7c	 add	 eax, 124		; 0000007cH
  0212e	8b f4		 mov	 esi, esp
  02130	50		 push	 eax
  02131	8b 8d f0 fb ff
	ff		 mov	 ecx, DWORD PTR tv1946[ebp]
  02137	ff 95 ec fb ff
	ff		 call	 DWORD PTR tv1948[ebp]
  0213d	3b f4		 cmp	 esi, esp
  0213f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  02144	85 c0		 test	 eax, eax
  02146	0f 84 b3 00 00
	00		 je	 $LN89@ParseAsDec

; 459  :                 {
; 460  :                     *_sign = -1;

  0214c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0214f	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  02152	c6 02 ff	 mov	 BYTE PTR [edx], -1

; 461  :                     _source.SkipString(_negative_sign);

  02155	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  02158	89 85 e8 fb ff
	ff		 mov	 DWORD PTR tv1960[ebp], eax
  0215e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02161	8b 11		 mov	 edx, DWORD PTR [ecx]
  02163	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  02166	89 85 e4 fb ff
	ff		 mov	 DWORD PTR tv1962[ebp], eax
  0216c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0216f	83 c1 7c	 add	 ecx, 124		; 0000007cH
  02172	8b f4		 mov	 esi, esp
  02174	51		 push	 ecx
  02175	8b 8d e8 fb ff
	ff		 mov	 ecx, DWORD PTR tv1960[ebp]
  0217b	ff 95 e4 fb ff
	ff		 call	 DWORD PTR tv1962[ebp]
  02181	3b f4		 cmp	 esi, esp
  02183	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 462  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  02188	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0218b	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0218e	25 00 01 00 00	 and	 eax, 256		; 00000100H
  02193	74 6a		 je	 SHORT $LN89@ParseAsDec
  02195	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02198	89 8d e0 fb ff
	ff		 mov	 DWORD PTR tv1975[ebp], ecx
  0219e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  021a1	8b 02		 mov	 eax, DWORD PTR [edx]
  021a3	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  021a6	89 8d dc fb ff
	ff		 mov	 DWORD PTR tv1977[ebp], ecx
  021ac	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  021af	83 c2 38	 add	 edx, 56			; 00000038H
  021b2	8b f4		 mov	 esi, esp
  021b4	52		 push	 edx
  021b5	8b 8d e0 fb ff
	ff		 mov	 ecx, DWORD PTR tv1975[ebp]
  021bb	ff 95 dc fb ff
	ff		 call	 DWORD PTR tv1977[ebp]
  021c1	3b f4		 cmp	 esi, esp
  021c3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  021c8	85 c0		 test	 eax, eax
  021ca	74 33		 je	 SHORT $LN89@ParseAsDec

; 463  :                         _source.SkipString(_currency_symbol);

  021cc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  021cf	89 85 d8 fb ff
	ff		 mov	 DWORD PTR tv1987[ebp], eax
  021d5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  021d8	8b 11		 mov	 edx, DWORD PTR [ecx]
  021da	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  021dd	89 85 d4 fb ff
	ff		 mov	 DWORD PTR tv1989[ebp], eax
  021e3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  021e6	83 c1 38	 add	 ecx, 56			; 00000038H
  021e9	8b f4		 mov	 esi, esp
  021eb	51		 push	 ecx
  021ec	8b 8d d8 fb ff
	ff		 mov	 ecx, DWORD PTR tv1987[ebp]
  021f2	ff 95 d4 fb ff
	ff		 call	 DWORD PTR tv1989[ebp]
  021f8	3b f4		 cmp	 esi, esp
  021fa	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN89@ParseAsDec:

; 464  :                 }
; 465  :                 else
; 466  :                 {
; 467  :                 }
; 468  :             }
; 469  :             else

  021ff	eb 04		 jmp	 SHORT $LN4@ParseAsDec
$LN86@ParseAsDec:

; 470  :                 return (0);

  02201	33 c0		 xor	 eax, eax
  02203	eb 38		 jmp	 SHORT $LN1@ParseAsDec
$LN4@ParseAsDec:

; 471  :             if (_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

  02205	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  02208	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0220b	83 e0 02	 and	 eax, 2
  0220e	74 08		 je	 SHORT $LN112@ParseAsDec

; 472  :                 _source.SkipSpace();

  02210	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02213	e8 00 00 00 00	 call	 ?SkipSpace@StringReader@Internal@Core@Math@Palmtree@@QAEXXZ ; Palmtree::Math::Core::Internal::StringReader::SkipSpace
$LN112@ParseAsDec:

; 473  :             if (_source.PeekChar() != L'\0')

  02218	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0221b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0221d	8b f4		 mov	 esi, esp
  0221f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  02222	8b 02		 mov	 eax, DWORD PTR [edx]
  02224	ff d0		 call	 eax
  02226	3b f4		 cmp	 esi, esp
  02228	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0222d	0f b7 c8	 movzx	 ecx, ax
  02230	85 c9		 test	 ecx, ecx
  02232	74 04		 je	 SHORT $LN113@ParseAsDec

; 474  :                 return (0);

  02234	33 c0		 xor	 eax, eax
  02236	eb 05		 jmp	 SHORT $LN1@ParseAsDec
$LN113@ParseAsDec:

; 475  :             return (1);

  02238	b8 01 00 00 00	 mov	 eax, 1
$LN1@ParseAsDec:

; 476  :         }

  0223d	5f		 pop	 edi
  0223e	5e		 pop	 esi
  0223f	81 c4 2c 04 00
	00		 add	 esp, 1068		; 0000042cH
  02245	3b ec		 cmp	 ebp, esp
  02247	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0224c	8b e5		 mov	 esp, ebp
  0224e	5d		 pop	 ebp
  0224f	c3		 ret	 0
?ParseAsDecimalNumberString@ParserState@Internal@Core@Math@Palmtree@@QAEHXZ ENDP ; Palmtree::Math::Core::Internal::ParserState::ParseAsDecimalNumberString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ??1ParserState@Internal@Core@Math@Palmtree@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ParserState@Internal@Core@Math@Palmtree@@QAE@XZ PROC	; Palmtree::Math::Core::Internal::ParserState::~ParserState, COMDAT
; _this$ = ecx

; 126  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1ParserState@Internal@Core@Math@Palmtree@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __F159A697_pmc_parse@cpp
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 127  :         }

  00037	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00041	59		 pop	 ecx
  00042	83 c4 10	 add	 esp, 16			; 00000010H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1ParserState@Internal@Core@Math@Palmtree@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ParserState@Internal@Core@Math@Palmtree@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ParserState@Internal@Core@Math@Palmtree@@QAE@XZ ENDP	; Palmtree::Math::Core::Internal::ParserState::~ParserState
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ??0ParserState@Internal@Core@Math@Palmtree@@QAE@PB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPA_WI3I@Z
_TEXT	SEGMENT
tv81 = -184						; size = 4
tv75 = -180						; size = 4
tv69 = -176						; size = 4
$T1 = -172						; size = 24
$T2 = -148						; size = 24
$T3 = -124						; size = 24
$T4 = -100						; size = 24
$T5 = -76						; size = 24
$T6 = -52						; size = 24
$T7 = -28						; size = 24
_this$ = -4						; size = 4
_in_ptr$ = 8						; size = 4
_number_styles$ = 12					; size = 4
_format_option$ = 16					; size = 4
_sign$ = 20						; size = 4
_int_part_buf$ = 24					; size = 4
_int_part_buf_size$ = 28				; size = 4
_frac_part_buf$ = 32					; size = 4
_frac_part_buf_size$ = 36				; size = 4
??0ParserState@Internal@Core@Math@Palmtree@@QAE@PB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPA_WI3I@Z PROC ; Palmtree::Math::Core::Internal::ParserState::ParserState, COMDAT
; _this$ = ecx

; 80   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b8 00 00
	00		 sub	 esp, 184		; 000000b8H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	51		 push	 ecx
  0000c	8d bd 48 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-184]
  00012	b9 2e 00 00 00	 mov	 ecx, 46			; 0000002eH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	59		 pop	 ecx
  0001f	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00022	b9 00 00 00 00	 mov	 ecx, OFFSET __F159A697_pmc_parse@cpp
  00027	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 79   :             : _source(in_ptr), _int_part(int_part_buf, int_part_buf_size), _frac_part(frac_part_buf, frac_part_buf_size)

  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	89 85 50 ff ff
	ff		 mov	 DWORD PTR tv69[ebp], eax
  00035	8b 4d 08	 mov	 ecx, DWORD PTR _in_ptr$[ebp]
  00038	51		 push	 ecx
  00039	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR tv69[ebp]
  0003f	e8 00 00 00 00	 call	 ??0StringReader@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::StringReader::StringReader
  00044	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00047	83 c2 08	 add	 edx, 8
  0004a	89 95 4c ff ff
	ff		 mov	 DWORD PTR tv75[ebp], edx
  00050	8b 45 1c	 mov	 eax, DWORD PTR _int_part_buf_size$[ebp]
  00053	50		 push	 eax
  00054	8b 4d 18	 mov	 ecx, DWORD PTR _int_part_buf$[ebp]
  00057	51		 push	 ecx
  00058	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv75[ebp]
  0005e	e8 00 00 00 00	 call	 ??0StringWriter@Internal@Core@Math@Palmtree@@QAE@PA_WI@Z ; Palmtree::Math::Core::Internal::StringWriter::StringWriter
  00063	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00066	83 c2 1c	 add	 edx, 28			; 0000001cH
  00069	89 95 48 ff ff
	ff		 mov	 DWORD PTR tv81[ebp], edx
  0006f	8b 45 24	 mov	 eax, DWORD PTR _frac_part_buf_size$[ebp]
  00072	50		 push	 eax
  00073	8b 4d 20	 mov	 ecx, DWORD PTR _frac_part_buf$[ebp]
  00076	51		 push	 ecx
  00077	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR tv81[ebp]
  0007d	e8 00 00 00 00	 call	 ??0StringWriter@Internal@Core@Math@Palmtree@@QAE@PA_WI@Z ; Palmtree::Math::Core::Internal::StringWriter::StringWriter

; 81   :             _sign = sign;

  00082	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00085	8b 45 14	 mov	 eax, DWORD PTR _sign$[ebp]
  00088	89 42 34	 mov	 DWORD PTR [edx+52], eax

; 82   :             _number_styles = number_styles;

  0008b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008e	8b 55 0c	 mov	 edx, DWORD PTR _number_styles$[ebp]
  00091	89 51 30	 mov	 DWORD PTR [ecx+48], edx

; 83   :             //_エラーを例外で通知する = (_number_styles & PMC_NUMBER_STYLE_ALLOW_EXCEPTION_THROWING) != 0;
; 84   :             //_負数を許可する = (_number_styles & PMC_NUMBER_STYLE_ALLOW_SIGNED_INTEGER) != 0;
; 85   :             *_sign = 1;

  00094	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00097	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0009a	c6 01 01	 mov	 BYTE PTR [ecx], 1

; 86   : 
; 87   :             // 通貨単位の設定
; 88   :             if (countof(_currency_symbol) < lstrlenW(format_option->CurrencySymbol) + 1)

  0009d	8b 55 10	 mov	 edx, DWORD PTR _format_option$[ebp]
  000a0	81 c2 38 01 00
	00		 add	 edx, 312		; 00000138H
  000a6	8b f4		 mov	 esi, esp
  000a8	52		 push	 edx
  000a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  000af	3b f4		 cmp	 esi, esp
  000b1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b6	83 c0 01	 add	 eax, 1
  000b9	83 f8 11	 cmp	 eax, 17			; 00000011H
  000bc	76 20		 jbe	 SHORT $LN2@ParserStat

; 89   :                 throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_parse;ParserState::ParserState;1");

  000be	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@OBHKPMHI@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
  000c3	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  000c8	8d 4d e4	 lea	 ecx, DWORD PTR $T7[ebp]
  000cb	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  000d0	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  000d5	8d 45 e4	 lea	 eax, DWORD PTR $T7[ebp]
  000d8	50		 push	 eax
  000d9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@ParserStat:

; 90   :             lstrcpyW(_currency_symbol, format_option->CurrencySymbol);

  000de	8b 4d 10	 mov	 ecx, DWORD PTR _format_option$[ebp]
  000e1	81 c1 38 01 00
	00		 add	 ecx, 312		; 00000138H
  000e7	8b f4		 mov	 esi, esp
  000e9	51		 push	 ecx
  000ea	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000ed	83 c2 38	 add	 edx, 56			; 00000038H
  000f0	52		 push	 edx
  000f1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpyW@8
  000f7	3b f4		 cmp	 esi, esp
  000f9	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 91   : 
; 92   :             // 符号文字の設定
; 93   :             if (countof(_positive_sign) < lstrlenW(format_option->PositiveSign) + 1)

  000fe	8b 45 10	 mov	 eax, DWORD PTR _format_option$[ebp]
  00101	05 7c 01 00 00	 add	 eax, 380		; 0000017cH
  00106	8b f4		 mov	 esi, esp
  00108	50		 push	 eax
  00109	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  0010f	3b f4		 cmp	 esi, esp
  00111	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00116	83 c0 01	 add	 eax, 1
  00119	83 f8 11	 cmp	 eax, 17			; 00000011H
  0011c	76 20		 jbe	 SHORT $LN3@ParserStat

; 94   :                 throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_parse;ParserState::ParserState;2");

  0011e	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@PDMPFDJG@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
  00123	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  00128	8d 4d cc	 lea	 ecx, DWORD PTR $T6[ebp]
  0012b	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00130	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00135	8d 4d cc	 lea	 ecx, DWORD PTR $T6[ebp]
  00138	51		 push	 ecx
  00139	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@ParserStat:

; 95   :             lstrcpyW(_positive_sign, format_option->PositiveSign);

  0013e	8b 55 10	 mov	 edx, DWORD PTR _format_option$[ebp]
  00141	81 c2 7c 01 00
	00		 add	 edx, 380		; 0000017cH
  00147	8b f4		 mov	 esi, esp
  00149	52		 push	 edx
  0014a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0014d	83 c0 5a	 add	 eax, 90			; 0000005aH
  00150	50		 push	 eax
  00151	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpyW@8
  00157	3b f4		 cmp	 esi, esp
  00159	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 96   :             if (countof(_negative_sign) < lstrlenW(format_option->NegativeSign) + 1)

  0015e	8b 4d 10	 mov	 ecx, DWORD PTR _format_option$[ebp]
  00161	81 c1 5a 01 00
	00		 add	 ecx, 346		; 0000015aH
  00167	8b f4		 mov	 esi, esp
  00169	51		 push	 ecx
  0016a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  00170	3b f4		 cmp	 esi, esp
  00172	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00177	83 c0 01	 add	 eax, 1
  0017a	83 f8 11	 cmp	 eax, 17			; 00000011H
  0017d	76 20		 jbe	 SHORT $LN4@ParserStat

; 97   :                 throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_parse;ParserState::ParserState;3");

  0017f	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@ELHDDEPD@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
  00184	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  00189	8d 4d b4	 lea	 ecx, DWORD PTR $T5[ebp]
  0018c	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00191	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00196	8d 55 b4	 lea	 edx, DWORD PTR $T5[ebp]
  00199	52		 push	 edx
  0019a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@ParserStat:

; 98   :             lstrcpyW(_negative_sign, format_option->NegativeSign);

  0019f	8b 45 10	 mov	 eax, DWORD PTR _format_option$[ebp]
  001a2	05 5a 01 00 00	 add	 eax, 346		; 0000015aH
  001a7	8b f4		 mov	 esi, esp
  001a9	50		 push	 eax
  001aa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001ad	83 c1 7c	 add	 ecx, 124		; 0000007cH
  001b0	51		 push	 ecx
  001b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpyW@8
  001b7	3b f4		 cmp	 esi, esp
  001b9	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 99   : 
; 100  :             // 小数点/3桁区切り文字の設定
; 101  :             if (number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL)

  001be	8b 55 0c	 mov	 edx, DWORD PTR _number_styles$[ebp]
  001c1	81 e2 00 01 00
	00		 and	 edx, 256		; 00000100H
  001c7	0f 84 c0 00 00
	00		 je	 $LN5@ParserStat

; 102  :             {
; 103  :                 if (countof(_decimal_separator) < lstrlenW(format_option->Currency.DecimalSeparator) + 1)

  001cd	8b 45 10	 mov	 eax, DWORD PTR _format_option$[ebp]
  001d0	83 c0 04	 add	 eax, 4
  001d3	8b f4		 mov	 esi, esp
  001d5	50		 push	 eax
  001d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  001dc	3b f4		 cmp	 esi, esp
  001de	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001e3	83 c0 01	 add	 eax, 1
  001e6	83 f8 11	 cmp	 eax, 17			; 00000011H
  001e9	76 20		 jbe	 SHORT $LN7@ParserStat

; 104  :                     throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_parse;ParserState::ParserState;4");

  001eb	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@NGKEAMEK@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
  001f0	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  001f5	8d 4d 9c	 lea	 ecx, DWORD PTR $T4[ebp]
  001f8	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  001fd	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00202	8d 4d 9c	 lea	 ecx, DWORD PTR $T4[ebp]
  00205	51		 push	 ecx
  00206	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN7@ParserStat:

; 105  :                 lstrcpyW(_decimal_separator, format_option->Currency.DecimalSeparator);

  0020b	8b 55 10	 mov	 edx, DWORD PTR _format_option$[ebp]
  0020e	83 c2 04	 add	 edx, 4
  00211	8b f4		 mov	 esi, esp
  00213	52		 push	 edx
  00214	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00217	05 9e 00 00 00	 add	 eax, 158		; 0000009eH
  0021c	50		 push	 eax
  0021d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpyW@8
  00223	3b f4		 cmp	 esi, esp
  00225	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 106  :                 if (countof(_group_separator) < lstrlenW(format_option->Currency.GroupSeparator) + 1)

  0022a	8b 4d 10	 mov	 ecx, DWORD PTR _format_option$[ebp]
  0022d	83 c1 26	 add	 ecx, 38			; 00000026H
  00230	8b f4		 mov	 esi, esp
  00232	51		 push	 ecx
  00233	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  00239	3b f4		 cmp	 esi, esp
  0023b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00240	83 c0 01	 add	 eax, 1
  00243	83 f8 11	 cmp	 eax, 17			; 00000011H
  00246	76 20		 jbe	 SHORT $LN8@ParserStat

; 107  :                     throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_parse;ParserState::ParserState;5");

  00248	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@GOBIGLCP@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
  0024d	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  00252	8d 4d 84	 lea	 ecx, DWORD PTR $T3[ebp]
  00255	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  0025a	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0025f	8d 55 84	 lea	 edx, DWORD PTR $T3[ebp]
  00262	52		 push	 edx
  00263	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN8@ParserStat:

; 108  :                 lstrcpyW(_group_separator, format_option->Currency.GroupSeparator);

  00268	8b 45 10	 mov	 eax, DWORD PTR _format_option$[ebp]
  0026b	83 c0 26	 add	 eax, 38			; 00000026H
  0026e	8b f4		 mov	 esi, esp
  00270	50		 push	 eax
  00271	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00274	81 c1 c0 00 00
	00		 add	 ecx, 192		; 000000c0H
  0027a	51		 push	 ecx
  0027b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpyW@8
  00281	3b f4		 cmp	 esi, esp
  00283	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 109  :             }
; 110  :             else

  00288	e9 cc 00 00 00	 jmp	 $LN6@ParserStat
$LN5@ParserStat:

; 111  :             {
; 112  :                 if (countof(_decimal_separator) < lstrlenW(format_option->Number.DecimalSeparator) + 1)

  0028d	8b 55 10	 mov	 edx, DWORD PTR _format_option$[ebp]
  00290	83 c2 6c	 add	 edx, 108		; 0000006cH
  00293	8b f4		 mov	 esi, esp
  00295	52		 push	 edx
  00296	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  0029c	3b f4		 cmp	 esi, esp
  0029e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002a3	83 c0 01	 add	 eax, 1
  002a6	83 f8 11	 cmp	 eax, 17			; 00000011H
  002a9	76 26		 jbe	 SHORT $LN9@ParserStat

; 113  :                     throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_parse;ParserState::ParserState;6");

  002ab	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@HMKNMEMB@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
  002b0	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  002b5	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  002bb	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  002c0	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  002c5	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  002cb	50		 push	 eax
  002cc	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN9@ParserStat:

; 114  :                 lstrcpyW(_decimal_separator, format_option->Number.DecimalSeparator);

  002d1	8b 4d 10	 mov	 ecx, DWORD PTR _format_option$[ebp]
  002d4	83 c1 6c	 add	 ecx, 108		; 0000006cH
  002d7	8b f4		 mov	 esi, esp
  002d9	51		 push	 ecx
  002da	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002dd	81 c2 9e 00 00
	00		 add	 edx, 158		; 0000009eH
  002e3	52		 push	 edx
  002e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpyW@8
  002ea	3b f4		 cmp	 esi, esp
  002ec	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 115  :                 if (countof(_group_separator) < lstrlenW(format_option->Number.GroupSeparator) + 1)

  002f1	8b 45 10	 mov	 eax, DWORD PTR _format_option$[ebp]
  002f4	05 8e 00 00 00	 add	 eax, 142		; 0000008eH
  002f9	8b f4		 mov	 esi, esp
  002fb	50		 push	 eax
  002fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  00302	3b f4		 cmp	 esi, esp
  00304	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00309	83 c0 01	 add	 eax, 1
  0030c	83 f8 11	 cmp	 eax, 17			; 00000011H
  0030f	76 26		 jbe	 SHORT $LN10@ParserStat

; 116  :                     throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_parse;ParserState::ParserState;7");

  00311	68 00 00 00 00	 push	 OFFSET ??_C@_1EK@MEBBKDKE@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
  00316	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  0031b	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  00321	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00326	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0032b	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  00331	51		 push	 ecx
  00332	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN10@ParserStat:

; 117  :                 lstrcpyW(_group_separator, format_option->Number.GroupSeparator);

  00337	8b 55 10	 mov	 edx, DWORD PTR _format_option$[ebp]
  0033a	81 c2 8e 00 00
	00		 add	 edx, 142		; 0000008eH
  00340	8b f4		 mov	 esi, esp
  00342	52		 push	 edx
  00343	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00346	05 c0 00 00 00	 add	 eax, 192		; 000000c0H
  0034b	50		 push	 eax
  0034c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpyW@8
  00352	3b f4		 cmp	 esi, esp
  00354	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN6@ParserStat:

; 118  :             }
; 119  :             if (lstrcmpW(_group_separator, L"\xa0") == 0)

  00359	8b f4		 mov	 esi, esp
  0035b	68 00 00 00 00	 push	 OFFSET ??_C@_13JDNADJOG@?$PP?$KA@
  00360	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00363	81 c1 c0 00 00
	00		 add	 ecx, 192		; 000000c0H
  00369	51		 push	 ecx
  0036a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcmpW@8
  00370	3b f4		 cmp	 esi, esp
  00372	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00377	85 c0		 test	 eax, eax
  00379	75 20		 jne	 SHORT $LN11@ParserStat

; 120  :                 lstrcpyW(_secondary_group_separator, L"\x20");

  0037b	8b f4		 mov	 esi, esp
  0037d	68 00 00 00 00	 push	 OFFSET ??_C@_13HOIJIPNN@?$AA?5@
  00382	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00385	81 c2 e2 00 00
	00		 add	 edx, 226		; 000000e2H
  0038b	52		 push	 edx
  0038c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpyW@8
  00392	3b f4		 cmp	 esi, esp
  00394	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 121  :             else

  00399	eb 22		 jmp	 SHORT $LN1@ParserStat
$LN11@ParserStat:

; 122  :                 lstrcpyW(_secondary_group_separator, _group_separator);

  0039b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0039e	05 c0 00 00 00	 add	 eax, 192		; 000000c0H
  003a3	8b f4		 mov	 esi, esp
  003a5	50		 push	 eax
  003a6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003a9	81 c1 e2 00 00
	00		 add	 ecx, 226		; 000000e2H
  003af	51		 push	 ecx
  003b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpyW@8
  003b6	3b f4		 cmp	 esi, esp
  003b8	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@ParserStat:

; 123  :         }

  003bd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
$LN13@ParserStat:
  003c0	5f		 pop	 edi
  003c1	5e		 pop	 esi
  003c2	81 c4 b8 00 00
	00		 add	 esp, 184		; 000000b8H
  003c8	3b ec		 cmp	 ebp, esp
  003ca	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003cf	8b e5		 mov	 esp, ebp
  003d1	5d		 pop	 ebp
  003d2	c2 20 00	 ret	 32			; 00000020H
??0ParserState@Internal@Core@Math@Palmtree@@QAE@PB_WIPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPA_WI3I@Z ENDP ; Palmtree::Math::Core::Internal::ParserState::ParserState
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
_TEXT	SEGMENT
_c$ = 8							; size = 2
?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z PROC ; Palmtree::Math::Core::Internal::ParseHexDigit

; 48   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __F159A697_pmc_parse@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 49   :         if (c >= L'0' && c <= L'9')

  0000d	0f b7 45 08	 movzx	 eax, WORD PTR _c$[ebp]
  00011	83 f8 30	 cmp	 eax, 48			; 00000030H
  00014	7c 12		 jl	 SHORT $LN2@ParseHexDi
  00016	0f b7 4d 08	 movzx	 ecx, WORD PTR _c$[ebp]
  0001a	83 f9 39	 cmp	 ecx, 57			; 00000039H
  0001d	7f 09		 jg	 SHORT $LN2@ParseHexDi

; 50   :             return (c - L'0');

  0001f	0f b7 45 08	 movzx	 eax, WORD PTR _c$[ebp]
  00023	83 e8 30	 sub	 eax, 48			; 00000030H
  00026	eb 39		 jmp	 SHORT $LN1@ParseHexDi
$LN2@ParseHexDi:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  00028	0f b7 55 08	 movzx	 edx, WORD PTR _c$[ebp]
  0002c	83 fa 61	 cmp	 edx, 97			; 00000061H
  0002f	7c 12		 jl	 SHORT $LN3@ParseHexDi
  00031	0f b7 45 08	 movzx	 eax, WORD PTR _c$[ebp]
  00035	83 f8 66	 cmp	 eax, 102		; 00000066H
  00038	7f 09		 jg	 SHORT $LN3@ParseHexDi

; 53   :             return (c - L'a' + 10);

  0003a	0f b7 45 08	 movzx	 eax, WORD PTR _c$[ebp]
  0003e	83 e8 57	 sub	 eax, 87			; 00000057H
  00041	eb 1e		 jmp	 SHORT $LN1@ParseHexDi
$LN3@ParseHexDi:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  00043	0f b7 4d 08	 movzx	 ecx, WORD PTR _c$[ebp]
  00047	83 f9 41	 cmp	 ecx, 65			; 00000041H
  0004a	7c 12		 jl	 SHORT $LN4@ParseHexDi
  0004c	0f b7 55 08	 movzx	 edx, WORD PTR _c$[ebp]
  00050	83 fa 46	 cmp	 edx, 70			; 00000046H
  00053	7f 09		 jg	 SHORT $LN4@ParseHexDi

; 56   :             return (c - L'A' + 10);

  00055	0f b7 45 08	 movzx	 eax, WORD PTR _c$[ebp]
  00059	83 e8 37	 sub	 eax, 55			; 00000037H
  0005c	eb 03		 jmp	 SHORT $LN1@ParseHexDi
$LN4@ParseHexDi:

; 57   :         return (-1);

  0005e	83 c8 ff	 or	 eax, -1
$LN1@ParseHexDi:

; 58   :     }

  00061	3b ec		 cmp	 ebp, esp
  00063	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ENDP ; Palmtree::Math::Core::Internal::ParseHexDigit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
_TEXT	SEGMENT
_c$ = 8							; size = 2
?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z PROC ; Palmtree::Math::Core::Internal::ParseDecimalDigit

; 41   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __F159A697_pmc_parse@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 42   :         if (c >= L'0' && c <= L'9')

  0000d	0f b7 45 08	 movzx	 eax, WORD PTR _c$[ebp]
  00011	83 f8 30	 cmp	 eax, 48			; 00000030H
  00014	7c 12		 jl	 SHORT $LN2@ParseDecim
  00016	0f b7 4d 08	 movzx	 ecx, WORD PTR _c$[ebp]
  0001a	83 f9 39	 cmp	 ecx, 57			; 00000039H
  0001d	7f 09		 jg	 SHORT $LN2@ParseDecim

; 43   :             return (c - L'0');

  0001f	0f b7 45 08	 movzx	 eax, WORD PTR _c$[ebp]
  00023	83 e8 30	 sub	 eax, 48			; 00000030H
  00026	eb 03		 jmp	 SHORT $LN1@ParseDecim
$LN2@ParseDecim:

; 44   :         return (-1);

  00028	83 c8 ff	 or	 eax, -1
$LN1@ParseDecim:

; 45   :     }

  0002b	3b ec		 cmp	 ebp, esp
  0002d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ENDP ; Palmtree::Math::Core::Internal::ParseDecimalDigit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w_hi$ = 16						; size = 4
__MULTIPLYX_UNIT PROC

; 228  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 229  : #ifdef _MSC_VER
; 230  : #ifdef _M_IX86
; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0000d	8b 45 10	 mov	 eax, DWORD PTR _w_hi$[ebp]
  00010	50		 push	 eax
  00011	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00014	f7 65 0c	 mul	 DWORD PTR _v$[ebp]
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 __FROMDWORDTOWORD
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 232  : #elif defined(_M_X64)
; 233  :             return (_mulx_u64(u, v, w_hi));
; 234  : #else
; 235  : #error unknown platform
; 236  : #endif
; 237  : #elif defined(__GNUC__)
; 238  : #ifdef _M_IX86
; 239  :             _UINT32_T w_lo;
; 240  :             __asm__("mulxl %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 241  :             return (w_lo);
; 242  : #elif defined(_M_X64)
; 243  :             _UINT64_T w_lo;
; 244  :             __asm__("mulxq %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 245  :             return (w_lo);
; 246  : #else
; 247  : #error unknown platform
; 248  : #endif
; 249  : #else
; 250  : #error unknown compiler
; 251  : #endif
; 252  :         }

  00021	3b ec		 cmp	 ebp, esp
  00023	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__MULTIPLYX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w_hi$ = 16						; size = 4
__MULTIPLY_UNIT PROC

; 209  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 210  : #ifdef _M_IX86
; 211  : #ifdef _MSC_VER
; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

  0000d	8b 45 10	 mov	 eax, DWORD PTR _w_hi$[ebp]
  00010	50		 push	 eax
  00011	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00014	f7 65 0c	 mul	 DWORD PTR _v$[ebp]
  00017	52		 push	 edx
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 __FROMDWORDTOWORD
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 213  : #elif defined(__GNUC__)
; 214  :             _UINT32_T w_lo;
; 215  :             __asm__("mull %3": "=a"(w_lo), "=d"(*w_hi) : "0"(u), "rm"(v));
; 216  :             return (w_lo);
; 217  : #else
; 218  : #error unknown compiler
; 219  : #endif
; 220  : #elif defined(_M_X64)
; 221  :             return (_umul128(u, v, w_hi));
; 222  : #else
; 223  : #error unknown platform
; 224  : #endif
; 225  :         }

  00021	3b ec		 cmp	 ebp, esp
  00023	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__MULTIPLY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADDX_UNIT PROC

; 187  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00009	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 188  : #ifdef _M_IX86
; 189  :             return (_addcarryx_u32(carry, u, v, w));

  0000e	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  00011	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00014	8b 55 0c	 mov	 edx, DWORD PTR _u$[ebp]
  00017	8a 5d 08	 mov	 bl, BYTE PTR _carry$[ebp]
  0001a	80 c3 ff	 add	 bl, 255			; 000000ffH
  0001d	66 0f 38 f6 d1	 adcx	 edx, ecx
  00022	0f 92 c1	 setb	 cl
  00025	89 10		 mov	 DWORD PTR [eax], edx
  00027	8a c1		 mov	 al, cl

; 190  : #elif defined(_M_X64)
; 191  :             return (_addcarryx_u64(carry, u, v, w));
; 192  : #else
; 193  : #error unknown platform
; 194  : #endif
; 195  :         }

  00029	5b		 pop	 ebx
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
__ADDX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADD_UNIT PROC

; 176  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00009	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 177  : #ifdef _M_IX86
; 178  :             return (_addcarry_u32(carry, u, v, w));

  0000e	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  00011	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00014	8b 55 0c	 mov	 edx, DWORD PTR _u$[ebp]
  00017	8a 5d 08	 mov	 bl, BYTE PTR _carry$[ebp]
  0001a	80 c3 ff	 add	 bl, 255			; 000000ffH
  0001d	13 d1		 adc	 edx, ecx
  0001f	0f 92 c1	 setb	 cl
  00022	89 10		 mov	 DWORD PTR [eax], edx
  00024	8a c1		 mov	 al, cl

; 179  : #elif defined(_M_X64)
; 180  :             return (_addcarry_u64(carry, u, v, w));
; 181  : #else
; 182  : #error unknown platform
; 183  : #endif
; 184  :         }

  00026	5b		 pop	 ebx
  00027	3b ec		 cmp	 ebp, esp
  00029	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
__ADD_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
__DIVIDE_CEILING_SIZE PROC

; 161  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 162  :             return ((u + v - 1) / v);

  0000d	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  00013	8d 44 01 ff	 lea	 eax, DWORD PTR [ecx+eax-1]
  00017	33 d2		 xor	 edx, edx
  00019	f7 75 0c	 div	 DWORD PTR _v$[ebp]

; 163  :         }

  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
__DIVIDE_CEILING_SIZE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
__DIVIDE_CEILING_UNIT PROC

; 156  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 157  :             return ((u + v - 1) / v);

  0000d	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  00013	8d 44 01 ff	 lea	 eax, DWORD PTR [ecx+eax-1]
  00017	33 d2		 xor	 edx, edx
  00019	f7 75 0c	 div	 DWORD PTR _v$[ebp]

; 158  :         }

  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
__DIVIDE_CEILING_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC

; 145  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 146  :             *result_high = (_UINT32_T)(value >> 32);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  00010	8b 55 0c	 mov	 edx, DWORD PTR _value$[ebp+4]
  00013	b1 20		 mov	 cl, 32			; 00000020H
  00015	e8 00 00 00 00	 call	 __aullshr
  0001a	8b 4d 10	 mov	 ecx, DWORD PTR _result_high$[ebp]
  0001d	89 01		 mov	 DWORD PTR [ecx], eax

; 147  :             return ((_UINT32_T)value);

  0001f	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]

; 148  :         }

  00022	3b ec		 cmp	 ebp, esp
  00024	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT PROC

; 63   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  0000a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 64   : #ifdef _M_IX86
; 65   :             __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

  0000f	8b 7d 08	 mov	 edi, DWORD PTR _d$[ebp]
  00012	8b 75 0c	 mov	 esi, DWORD PTR _s$[ebp]
  00015	8b 4d 10	 mov	 ecx, DWORD PTR _count$[ebp]
  00018	f3 a5		 rep movsd

; 66   : #elif defined(_M_X64)
; 67   :             __movsq(d, s, count);
; 68   : #else
; 69   : #error unknown platform
; 70   : #endif
; 71   :         }

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
__COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
_TEXT	SEGMENT
_value$ = 8						; size = 4
?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z PROC ; Palmtree::Math::Core::Internal::AddToMULTI64Counter

; 359  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __BB6D3116_pmc_uint_internal@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 360  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  00010	b9 00 00 00 00	 mov	 ecx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A ; Palmtree::Math::Core::Internal::statistics_info
  00015	f0 0f c1 01	 lock	  xadd	 DWORD PTR [ecx], eax

; 361  :     }

  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ENDP ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
_TEXT	SEGMENT
_value$ = 8						; size = 4
?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z PROC ; Palmtree::Math::Core::Internal::AddToMULTI32Counter

; 353  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __BB6D3116_pmc_uint_internal@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  00010	b9 04 00 00 00	 mov	 ecx, OFFSET ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4
  00015	f0 0f c1 01	 lock	  xadd	 DWORD PTR [ecx], eax

; 355  :     }

  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ENDP ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
_TEXT	SEGMENT
?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ PROC ; Palmtree::Math::Core::Internal::IncrementMULTI64Counter

; 336  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __BB6D3116_pmc_uint_internal@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 337  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI64);

  0000d	f0 ff 05 00 00
	00 00		 lock	  inc	 (null) PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A

; 338  :     }

  00014	3b ec		 cmp	 ebp, esp
  00016	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ ENDP ; Palmtree::Math::Core::Internal::IncrementMULTI64Counter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
_TEXT	SEGMENT
?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ PROC ; Palmtree::Math::Core::Internal::IncrementMULTI32Counter

; 330  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __BB6D3116_pmc_uint_internal@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 331  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

  0000d	f0 ff 05 04 00
	00 00		 lock	  inc	 (null) PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4

; 332  :     }

  00014	3b ec		 cmp	 ebp, esp
  00016	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ ENDP ; Palmtree::Math::Core::Internal::IncrementMULTI32Counter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
_TEXT	SEGMENT
$T1 = -88						; size = 24
$T2 = -64						; size = 24
$T3 = -40						; size = 24
_err$ = -16						; size = 4
_no_abs$ = -8						; size = 4
_source$ = 8						; size = 4
_number_styles$ = 12					; size = 4
_format_option$ = 16					; size = 4
_o_sign$ = 20						; size = 4
_o_abs$ = 24						; size = 4
_result$ = 28						; size = 4
?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YGHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z PROC ; Palmtree::Math::Core::Internal::PMC_TryParseForSINT

; 1336 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 58	 sub	 esp, 88			; 00000058H
  00006	57		 push	 edi
  00007	8d 7d a8	 lea	 edi, DWORD PTR [ebp-88]
  0000a	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET __F159A697_pmc_parse@cpp
  0001b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1337 :         if (source == nullptr)

  00020	83 7d 08 00	 cmp	 DWORD PTR _source$[ebp], 0
  00024	75 20		 jne	 SHORT $LN2@PMC_TryPar

; 1338 :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"source");

  00026	68 00 00 00 00	 push	 OFFSET $SG118691
  0002b	68 00 00 00 00	 push	 OFFSET $SG118692
  00030	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00033	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  00038	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  0003d	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@PMC_TryPar:

; 1339 :         if (o_sign == nullptr)

  00046	83 7d 14 00	 cmp	 DWORD PTR _o_sign$[ebp], 0
  0004a	75 20		 jne	 SHORT $LN3@PMC_TryPar

; 1340 :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"o_sign");

  0004c	68 00 00 00 00	 push	 OFFSET $SG118695
  00051	68 00 00 00 00	 push	 OFFSET $SG118696
  00056	8d 4d c0	 lea	 ecx, DWORD PTR $T2[ebp]
  00059	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0005e	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  00063	8d 4d c0	 lea	 ecx, DWORD PTR $T2[ebp]
  00066	51		 push	 ecx
  00067	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@PMC_TryPar:

; 1341 :         if (o_abs == nullptr)

  0006c	83 7d 18 00	 cmp	 DWORD PTR _o_abs$[ebp], 0
  00070	75 20		 jne	 SHORT $LN4@PMC_TryPar

; 1342 :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"o_abs");

  00072	68 00 00 00 00	 push	 OFFSET $SG118699
  00077	68 00 00 00 00	 push	 OFFSET $SG118700
  0007c	8d 4d a8	 lea	 ecx, DWORD PTR $T1[ebp]
  0007f	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  00084	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  00089	8d 55 a8	 lea	 edx, DWORD PTR $T1[ebp]
  0008c	52		 push	 edx
  0008d	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN4@PMC_TryPar:

; 1343 :         if (format_option == nullptr)

  00092	83 7d 10 00	 cmp	 DWORD PTR _format_option$[ebp], 0
  00096	75 07		 jne	 SHORT $LN5@PMC_TryPar

; 1344 :             format_option = &default_number_format_option;

  00098	c7 45 10 00 00
	00 00		 mov	 DWORD PTR _format_option$[ebp], OFFSET ?default_number_format_option@Internal@Core@Math@Palmtree@@3U__tag_PMC_NUMBER_FORMAT_INFO@1234@A
$LN5@PMC_TryPar:

; 1345 :         NUMBER_HEADER* no_abs;
; 1346 :         PMC_STATUS_CODE err = PMC_TryParse_Imp(source, number_styles, format_option, o_sign, &no_abs, result);

  0009f	8b 45 1c	 mov	 eax, DWORD PTR _result$[ebp]
  000a2	50		 push	 eax
  000a3	8d 4d f8	 lea	 ecx, DWORD PTR _no_abs$[ebp]
  000a6	51		 push	 ecx
  000a7	8b 55 14	 mov	 edx, DWORD PTR _o_sign$[ebp]
  000aa	52		 push	 edx
  000ab	8b 45 10	 mov	 eax, DWORD PTR _format_option$[ebp]
  000ae	50		 push	 eax
  000af	8b 4d 0c	 mov	 ecx, DWORD PTR _number_styles$[ebp]
  000b2	51		 push	 ecx
  000b3	8b 55 08	 mov	 edx, DWORD PTR _source$[ebp]
  000b6	52		 push	 edx
  000b7	e8 00 00 00 00	 call	 ?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z ; Palmtree::Math::Core::Internal::PMC_TryParse_Imp
  000bc	83 c4 18	 add	 esp, 24			; 00000018H
  000bf	89 45 f0	 mov	 DWORD PTR _err$[ebp], eax

; 1347 :         if (err != PMC_STATUS_OK)

  000c2	83 7d f0 00	 cmp	 DWORD PTR _err$[ebp], 0
  000c6	74 0e		 je	 SHORT $LN6@PMC_TryPar

; 1348 :         {
; 1349 :             *result = 0;

  000c8	8b 45 1c	 mov	 eax, DWORD PTR _result$[ebp]
  000cb	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1350 :             return (err);

  000d1	8b 45 f0	 mov	 eax, DWORD PTR _err$[ebp]
  000d4	eb 13		 jmp	 SHORT $LN7@PMC_TryPar
$LN6@PMC_TryPar:

; 1351 :         }
; 1352 :         *o_abs = (PMC_HANDLE_UINT)no_abs;

  000d6	8b 4d 18	 mov	 ecx, DWORD PTR _o_abs$[ebp]
  000d9	8b 55 f8	 mov	 edx, DWORD PTR _no_abs$[ebp]
  000dc	89 11		 mov	 DWORD PTR [ecx], edx

; 1353 :         *result = 1;

  000de	8b 45 1c	 mov	 eax, DWORD PTR _result$[ebp]
  000e1	c7 00 01 00 00
	00		 mov	 DWORD PTR [eax], 1

; 1354 :         return (PMC_STATUS_OK);

  000e7	33 c0		 xor	 eax, eax
$LN7@PMC_TryPar:

; 1355 :     }

  000e9	52		 push	 edx
  000ea	8b cd		 mov	 ecx, ebp
  000ec	50		 push	 eax
  000ed	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@PMC_TryPar
  000f3	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000f8	58		 pop	 eax
  000f9	5a		 pop	 edx
  000fa	5f		 pop	 edi
  000fb	83 c4 58	 add	 esp, 88			; 00000058H
  000fe	3b ec		 cmp	 ebp, esp
  00100	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00105	8b e5		 mov	 esp, ebp
  00107	5d		 pop	 ebp
  00108	c2 18 00	 ret	 24			; 00000018H
  0010b	90		 npad	 1
$LN10@PMC_TryPar:
  0010c	01 00 00 00	 DD	 1
  00110	00 00 00 00	 DD	 $LN9@PMC_TryPar
$LN9@PMC_TryPar:
  00114	f8 ff ff ff	 DD	 -8			; fffffff8H
  00118	04 00 00 00	 DD	 4
  0011c	00 00 00 00	 DD	 $LN8@PMC_TryPar
$LN8@PMC_TryPar:
  00120	6e		 DB	 110			; 0000006eH
  00121	6f		 DB	 111			; 0000006fH
  00122	5f		 DB	 95			; 0000005fH
  00123	61		 DB	 97			; 00000061H
  00124	62		 DB	 98			; 00000062H
  00125	73		 DB	 115			; 00000073H
  00126	00		 DB	 0
?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YGHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z ENDP ; Palmtree::Math::Core::Internal::PMC_TryParseForSINT
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
_TEXT	SEGMENT
$T2 = -124						; size = 4
$T3 = -120						; size = 4
$T4 = -116						; size = 4
$T5 = -112						; size = 24
$T6 = -88						; size = 24
_err$ = -64						; size = 4
_o_abs$ = -56						; size = 4
_o_sign$ = -41						; size = 1
_root$ = -32						; size = 16
__$EHRec$ = -12						; size = 12
_source$ = 8						; size = 4
_number_styles$ = 12					; size = 4
_format_option$ = 16					; size = 4
_o$ = 20						; size = 4
_result$ = 24						; size = 4
?PMC_TryParse@Internal@Core@Math@Palmtree@@YGHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PAPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z PROC ; Palmtree::Math::Core::Internal::PMC_TryParse

; 1306 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_TryParse@Internal@Core@Math@Palmtree@@YGHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PAPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 70	 sub	 esp, 112		; 00000070H
  00014	57		 push	 edi
  00015	8d 7d 84	 lea	 edi, DWORD PTR [ebp-124]
  00018	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	50		 push	 eax
  0002c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET __F159A697_pmc_parse@cpp
  0003a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1307 :         if (source == nullptr)

  0003f	83 7d 08 00	 cmp	 DWORD PTR _source$[ebp], 0
  00043	75 20		 jne	 SHORT $LN2@PMC_TryPar

; 1308 :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"source");

  00045	68 00 00 00 00	 push	 OFFSET $SG118665
  0004a	68 00 00 00 00	 push	 OFFSET $SG118666
  0004f	8d 4d a8	 lea	 ecx, DWORD PTR $T6[ebp]
  00052	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  00057	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  0005c	8d 45 a8	 lea	 eax, DWORD PTR $T6[ebp]
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@PMC_TryPar:

; 1309 :         if (o == nullptr)

  00065	83 7d 14 00	 cmp	 DWORD PTR _o$[ebp], 0
  00069	75 20		 jne	 SHORT $LN3@PMC_TryPar

; 1310 :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"o");

  0006b	68 00 00 00 00	 push	 OFFSET $SG118669
  00070	68 00 00 00 00	 push	 OFFSET $SG118670
  00075	8d 4d 90	 lea	 ecx, DWORD PTR $T5[ebp]
  00078	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0007d	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  00082	8d 4d 90	 lea	 ecx, DWORD PTR $T5[ebp]
  00085	51		 push	 ecx
  00086	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@PMC_TryPar:

; 1311 :         if (format_option == nullptr)

  0008b	83 7d 10 00	 cmp	 DWORD PTR _format_option$[ebp], 0
  0008f	75 07		 jne	 SHORT $LN4@PMC_TryPar

; 1312 :             format_option = &default_number_format_option;

  00091	c7 45 10 00 00
	00 00		 mov	 DWORD PTR _format_option$[ebp], OFFSET ?default_number_format_option@Internal@Core@Math@Palmtree@@3U__tag_PMC_NUMBER_FORMAT_INFO@1234@A
$LN4@PMC_TryPar:

; 1313 :         ResourceHolderUINT root;

  00098	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  0009b	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000a0	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1314 :         char o_sign;
; 1315 :         NUMBER_HEADER* o_abs;
; 1316 :         PMC_STATUS_CODE err = PMC_TryParse_Imp(source, number_styles, format_option, &o_sign, &o_abs, result);

  000a7	8b 55 18	 mov	 edx, DWORD PTR _result$[ebp]
  000aa	52		 push	 edx
  000ab	8d 45 c8	 lea	 eax, DWORD PTR _o_abs$[ebp]
  000ae	50		 push	 eax
  000af	8d 4d d7	 lea	 ecx, DWORD PTR _o_sign$[ebp]
  000b2	51		 push	 ecx
  000b3	8b 55 10	 mov	 edx, DWORD PTR _format_option$[ebp]
  000b6	52		 push	 edx
  000b7	8b 45 0c	 mov	 eax, DWORD PTR _number_styles$[ebp]
  000ba	50		 push	 eax
  000bb	8b 4d 08	 mov	 ecx, DWORD PTR _source$[ebp]
  000be	51		 push	 ecx
  000bf	e8 00 00 00 00	 call	 ?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_NUMBER_HEADER@1234@PAI@Z ; Palmtree::Math::Core::Internal::PMC_TryParse_Imp
  000c4	83 c4 18	 add	 esp, 24			; 00000018H
  000c7	89 45 c0	 mov	 DWORD PTR _err$[ebp], eax

; 1317 :         if (err != PMC_STATUS_OK || !*result)

  000ca	83 7d c0 00	 cmp	 DWORD PTR _err$[ebp], 0
  000ce	75 08		 jne	 SHORT $LN6@PMC_TryPar
  000d0	8b 55 18	 mov	 edx, DWORD PTR _result$[ebp]
  000d3	83 3a 00	 cmp	 DWORD PTR [edx], 0
  000d6	75 23		 jne	 SHORT $LN5@PMC_TryPar
$LN6@PMC_TryPar:

; 1318 :         {
; 1319 :             *result = 0;

  000d8	8b 45 18	 mov	 eax, DWORD PTR _result$[ebp]
  000db	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1320 :             return (err);

  000e1	8b 4d c0	 mov	 ecx, DWORD PTR _err$[ebp]
  000e4	89 4d 8c	 mov	 DWORD PTR $T4[ebp], ecx
  000e7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000ee	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  000f1	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  000f6	8b 45 8c	 mov	 eax, DWORD PTR $T4[ebp]
  000f9	eb 6e		 jmp	 SHORT $LN8@PMC_TryPar
$LN5@PMC_TryPar:

; 1321 :         }
; 1322 :         root.HookNumber(o_abs);

  000fb	8b 55 c8	 mov	 edx, DWORD PTR _o_abs$[ebp]
  000fe	52		 push	 edx
  000ff	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00102	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 1323 :         if (o_sign < 0)

  00107	0f be 45 d7	 movsx	 eax, BYTE PTR _o_sign$[ebp]
  0010b	85 c0		 test	 eax, eax
  0010d	7d 24		 jge	 SHORT $LN7@PMC_TryPar

; 1324 :         {
; 1325 :             // 負数は表現できないのでエラーとする
; 1326 :             *result = 0;

  0010f	8b 4d 18	 mov	 ecx, DWORD PTR _result$[ebp]
  00112	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 1327 :             return (PMC_STATUS_OVERFLOW);

  00118	c7 45 88 fc ff
	ff ff		 mov	 DWORD PTR $T3[ebp], -4	; fffffffcH
  0011f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00126	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00129	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0012e	8b 45 88	 mov	 eax, DWORD PTR $T3[ebp]
  00131	eb 36		 jmp	 SHORT $LN8@PMC_TryPar
$LN7@PMC_TryPar:

; 1328 :         }
; 1329 :         *o = (PMC_HANDLE_UINT)o_abs;

  00133	8b 55 14	 mov	 edx, DWORD PTR _o$[ebp]
  00136	8b 45 c8	 mov	 eax, DWORD PTR _o_abs$[ebp]
  00139	89 02		 mov	 DWORD PTR [edx], eax

; 1330 :         root.UnlinkNumber(o_abs);

  0013b	8b 4d c8	 mov	 ecx, DWORD PTR _o_abs$[ebp]
  0013e	51		 push	 ecx
  0013f	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00142	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 1331 :         *result = 1;

  00147	8b 55 18	 mov	 edx, DWORD PTR _result$[ebp]
  0014a	c7 02 01 00 00
	00		 mov	 DWORD PTR [edx], 1

; 1332 :         return (PMC_STATUS_OK);

  00150	c7 45 84 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
  00157	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0015e	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00161	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00166	8b 45 84	 mov	 eax, DWORD PTR $T2[ebp]
$LN8@PMC_TryPar:

; 1333 :     }

  00169	52		 push	 edx
  0016a	8b cd		 mov	 ecx, ebp
  0016c	50		 push	 eax
  0016d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN15@PMC_TryPar
  00173	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00178	58		 pop	 eax
  00179	5a		 pop	 edx
  0017a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0017d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00184	59		 pop	 ecx
  00185	5f		 pop	 edi
  00186	83 c4 7c	 add	 esp, 124		; 0000007cH
  00189	3b ec		 cmp	 ebp, esp
  0018b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00190	8b e5		 mov	 esp, ebp
  00192	5d		 pop	 ebp
  00193	c2 14 00	 ret	 20			; 00000014H
  00196	66 90		 npad	 2
$LN15@PMC_TryPar:
  00198	03 00 00 00	 DD	 3
  0019c	00 00 00 00	 DD	 $LN14@PMC_TryPar
$LN14@PMC_TryPar:
  001a0	e0 ff ff ff	 DD	 -32			; ffffffe0H
  001a4	10 00 00 00	 DD	 16			; 00000010H
  001a8	00 00 00 00	 DD	 $LN10@PMC_TryPar
  001ac	d7 ff ff ff	 DD	 -41			; ffffffd7H
  001b0	01 00 00 00	 DD	 1
  001b4	00 00 00 00	 DD	 $LN11@PMC_TryPar
  001b8	c8 ff ff ff	 DD	 -56			; ffffffc8H
  001bc	04 00 00 00	 DD	 4
  001c0	00 00 00 00	 DD	 $LN12@PMC_TryPar
$LN12@PMC_TryPar:
  001c4	6f		 DB	 111			; 0000006fH
  001c5	5f		 DB	 95			; 0000005fH
  001c6	61		 DB	 97			; 00000061H
  001c7	62		 DB	 98			; 00000062H
  001c8	73		 DB	 115			; 00000073H
  001c9	00		 DB	 0
$LN11@PMC_TryPar:
  001ca	6f		 DB	 111			; 0000006fH
  001cb	5f		 DB	 95			; 0000005fH
  001cc	73		 DB	 115			; 00000073H
  001cd	69		 DB	 105			; 00000069H
  001ce	67		 DB	 103			; 00000067H
  001cf	6e		 DB	 110			; 0000006eH
  001d0	00		 DB	 0
$LN10@PMC_TryPar:
  001d1	72		 DB	 114			; 00000072H
  001d2	6f		 DB	 111			; 0000006fH
  001d3	6f		 DB	 111			; 0000006fH
  001d4	74		 DB	 116			; 00000074H
  001d5	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_TryParse@Internal@Core@Math@Palmtree@@YGHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PAPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_TryParse@Internal@Core@Math@Palmtree@@YGHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PAPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_TryParse@Internal@Core@Math@Palmtree@@YGHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PAPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_TryParse@Internal@Core@Math@Palmtree@@YGHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PAPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z ENDP ; Palmtree::Math::Core::Internal::PMC_TryParse
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
_TEXT	SEGMENT
_feature$ = 8						; size = 4
?Initialize_Parse@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z PROC ; Palmtree::Math::Core::Internal::Initialize_Parse

; 1358 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __F159A697_pmc_parse@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1359 :         InitializeNumberFormatoInfo(&default_number_format_option);

  0000d	68 00 00 00 00	 push	 OFFSET ?default_number_format_option@Internal@Core@Math@Palmtree@@3U__tag_PMC_NUMBER_FORMAT_INFO@1234@A
  00012	e8 00 00 00 00	 call	 ?InitializeNumberFormatoInfo@Internal@Core@Math@Palmtree@@YAXPAU__tag_PMC_NUMBER_FORMAT_INFO@1234@@Z ; Palmtree::Math::Core::Internal::InitializeNumberFormatoInfo
  00017	83 c4 04	 add	 esp, 4

; 1360 : 
; 1361 :         if (feature->PROCESSOR_FEATURE_ADX && feature->PROCESSOR_FEATURE_BMI2)

  0001a	8b 45 08	 mov	 eax, DWORD PTR _feature$[ebp]
  0001d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001f	d1 e9		 shr	 ecx, 1
  00021	83 e1 01	 and	 ecx, 1
  00024	74 19		 je	 SHORT $LN2@Initialize
  00026	8b 55 08	 mov	 edx, DWORD PTR _feature$[ebp]
  00029	8b 02		 mov	 eax, DWORD PTR [edx]
  0002b	c1 e8 03	 shr	 eax, 3
  0002e	83 e0 01	 and	 eax, 1
  00031	74 0c		 je	 SHORT $LN2@Initialize

; 1362 :             fp_MultiplyAndAdd = MultiplyAndAdd_using_ADCX_MULX;

  00033	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?fp_MultiplyAndAdd@Internal@Core@Math@Palmtree@@3P6APAIPAIII@ZA, OFFSET ?MultiplyAndAdd_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAPAIPAIII@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd_using_ADCX_MULX

; 1363 :         else

  0003d	eb 0a		 jmp	 SHORT $LN3@Initialize
$LN2@Initialize:

; 1364 :             fp_MultiplyAndAdd = MultiplyAndAdd_using_ADC_MUL;

  0003f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?fp_MultiplyAndAdd@Internal@Core@Math@Palmtree@@3P6APAIPAIII@ZA, OFFSET ?MultiplyAndAdd_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAPAIPAIII@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd_using_ADC_MUL
$LN3@Initialize:

; 1365 : 
; 1366 :         return (PMC_STATUS_OK);

  00049	33 c0		 xor	 eax, eax

; 1367 :     }

  0004b	3b ec		 cmp	 ebp, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
?Initialize_Parse@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ENDP ; Palmtree::Math::Core::Internal::Initialize_Parse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?GetString@StringWriter@Internal@Core@Math@Palmtree@@UAEPA_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetString@StringWriter@Internal@Core@Math@Palmtree@@UAEPA_WXZ PROC ; Palmtree::Math::Core::Internal::StringWriter::GetString, COMDAT
; _this$ = ecx

; 244  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __80E6779E_pmc_stringio@h
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 245  :             return (_sob);

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 246  :         }

  0001e	83 c4 04	 add	 esp, 4
  00021	3b ec		 cmp	 ebp, esp
  00023	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
?GetString@StringWriter@Internal@Core@Math@Palmtree@@UAEPA_WXZ ENDP ; Palmtree::Math::Core::Internal::StringWriter::GetString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?Write@StringWriter@Internal@Core@Math@Palmtree@@UAEXPB_W@Z
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
_str$ = 8						; size = 4
?Write@StringWriter@Internal@Core@Math@Palmtree@@UAEXPB_W@Z PROC ; Palmtree::Math::Core::Internal::StringWriter::Write, COMDAT
; _this$ = ecx

; 235  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00018	b9 00 00 00 00	 mov	 ecx, OFFSET __80E6779E_pmc_stringio@h
  0001d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
$LN2@Write:

; 236  :             while (*str != L'\0')

  00022	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  00025	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00028	85 c9		 test	 ecx, ecx
  0002a	74 2c		 je	 SHORT $LN1@Write

; 237  :             {
; 238  :                 Write(*str);

  0002c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002f	8b 02		 mov	 eax, DWORD PTR [edx]
  00031	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00034	89 4d f8	 mov	 DWORD PTR tv71[ebp], ecx
  00037	8b f4		 mov	 esi, esp
  00039	8b 55 08	 mov	 edx, DWORD PTR _str$[ebp]
  0003c	0f b7 02	 movzx	 eax, WORD PTR [edx]
  0003f	50		 push	 eax
  00040	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	ff 55 f8	 call	 DWORD PTR tv71[ebp]
  00046	3b f4		 cmp	 esi, esp
  00048	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 239  :                 ++str;

  0004d	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  00050	83 c1 02	 add	 ecx, 2
  00053	89 4d 08	 mov	 DWORD PTR _str$[ebp], ecx

; 240  :             }

  00056	eb ca		 jmp	 SHORT $LN2@Write
$LN1@Write:

; 241  :         }

  00058	5e		 pop	 esi
  00059	83 c4 08	 add	 esp, 8
  0005c	3b ec		 cmp	 ebp, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c2 04 00	 ret	 4
?Write@StringWriter@Internal@Core@Math@Palmtree@@UAEXPB_W@Z ENDP ; Palmtree::Math::Core::Internal::StringWriter::Write
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?Write@StringWriter@Internal@Core@Math@Palmtree@@UAEX_W@Z
_TEXT	SEGMENT
$T1 = -28						; size = 24
_this$ = -4						; size = 4
_c$ = 8							; size = 2
?Write@StringWriter@Internal@Core@Math@Palmtree@@UAEX_W@Z PROC ; Palmtree::Math::Core::Internal::StringWriter::Write, COMDAT
; _this$ = ecx

; 214  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000e	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00011	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00014	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00017	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001a	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001d	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00020	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __80E6779E_pmc_stringio@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 215  :             if (_p != nullptr)

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00034	74 53		 je	 SHORT $LN2@Write

; 216  :             {
; 217  :                 if (_p + 1 >= _eob)

  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0003c	83 c2 02	 add	 edx, 2
  0003f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00042	3b 50 0c	 cmp	 edx, DWORD PTR [eax+12]
  00045	72 1b		 jb	 SHORT $LN3@Write

; 218  :                     throw InsufficientBufferException(L"書き込み先バッファのサイズが不足しています。");

  00047	68 00 00 00 00	 push	 OFFSET ??_C@_1CO@JABAMCFP@?$PP?x?$AAM?$PP?$LM?$AA?$HP?$AAH?$PP?P?$PP?C?$PP?U?$PP?$KB?$AAn?$PP?$LF?$PP?$KE?$PP?$LK?$AAL?$AA?$AN@
  0004c	8d 4d e4	 lea	 ecx, DWORD PTR $T1[ebp]
  0004f	e8 00 00 00 00	 call	 ??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException
  00054	68 00 00 00 00	 push	 OFFSET __TI2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@
  00059	8d 4d e4	 lea	 ecx, DWORD PTR $T1[ebp]
  0005c	51		 push	 ecx
  0005d	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Write:

; 219  :                 *_p++ = c;

  00062	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00065	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00068	66 8b 4d 08	 mov	 cx, WORD PTR _c$[ebp]
  0006c	66 89 08	 mov	 WORD PTR [eax], cx
  0006f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00072	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00075	83 c0 02	 add	 eax, 2
  00078	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 220  :                 *_p = L'\0';

  0007e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00081	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00084	33 c9		 xor	 ecx, ecx
  00086	66 89 08	 mov	 WORD PTR [eax], cx
$LN2@Write:

; 221  :             }
; 222  :             ++_written;

  00089	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0008c	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0008f	83 c0 01	 add	 eax, 1
  00092	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00095	89 41 10	 mov	 DWORD PTR [ecx+16], eax
$LN4@Write:

; 223  :         }

  00098	83 c4 1c	 add	 esp, 28			; 0000001cH
  0009b	3b ec		 cmp	 ebp, esp
  0009d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c2 04 00	 ret	 4
?Write@StringWriter@Internal@Core@Math@Palmtree@@UAEX_W@Z ENDP ; Palmtree::Math::Core::Internal::StringWriter::Write
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ??0StringWriter@Internal@Core@Math@Palmtree@@QAE@PA_WI@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
??0StringWriter@Internal@Core@Math@Palmtree@@QAE@PA_WI@Z PROC ; Palmtree::Math::Core::Internal::StringWriter::StringWriter, COMDAT
; _this$ = ecx

; 210  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __80E6779E_pmc_stringio@h
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 209  :             : StringWriter(buffer, buffer, buffer != nullptr ? buffer + size : nullptr)

  00021	83 7d 08 00	 cmp	 DWORD PTR _buffer$[ebp], 0
  00025	74 0e		 je	 SHORT $LN3@StringWrit
  00027	8b 45 0c	 mov	 eax, DWORD PTR _size$[ebp]
  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _buffer$[ebp]
  0002d	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  00030	89 55 f8	 mov	 DWORD PTR tv69[ebp], edx
  00033	eb 07		 jmp	 SHORT $LN4@StringWrit
$LN3@StringWrit:
  00035	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], 0
$LN4@StringWrit:
  0003c	8b 45 f8	 mov	 eax, DWORD PTR tv69[ebp]
  0003f	50		 push	 eax
  00040	8b 4d 08	 mov	 ecx, DWORD PTR _buffer$[ebp]
  00043	51		 push	 ecx
  00044	8b 55 08	 mov	 edx, DWORD PTR _buffer$[ebp]
  00047	52		 push	 edx
  00048	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	e8 00 00 00 00	 call	 ??0StringWriter@Internal@Core@Math@Palmtree@@IAE@PA_W00@Z ; Palmtree::Math::Core::Internal::StringWriter::StringWriter

; 210  :         {

  00050	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00053	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7StringWriter@Internal@Core@Math@Palmtree@@6B@

; 211  :         }

  00059	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	83 c4 08	 add	 esp, 8
  0005f	3b ec		 cmp	 ebp, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c2 08 00	 ret	 8
??0StringWriter@Internal@Core@Math@Palmtree@@QAE@PA_WI@Z ENDP ; Palmtree::Math::Core::Internal::StringWriter::StringWriter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ??0StringWriter@Internal@Core@Math@Palmtree@@IAE@PA_W00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
_sob$ = 12						; size = 4
_eob$ = 16						; size = 4
??0StringWriter@Internal@Core@Math@Palmtree@@IAE@PA_W00@Z PROC ; Palmtree::Math::Core::Internal::StringWriter::StringWriter, COMDAT
; _this$ = ecx

; 199  :         StringWriter(wchar_t* p, wchar_t* sob, wchar_t* eob)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __80E6779E_pmc_stringio@h
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7StringWriter@Internal@Core@Math@Palmtree@@6B@

; 200  :         {
; 201  :             _p = p;

  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00027	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 202  :             _sob = sob;

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 4d 0c	 mov	 ecx, DWORD PTR _sob$[ebp]
  00030	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 203  :             _eob = eob;

  00033	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00036	8b 45 10	 mov	 eax, DWORD PTR _eob$[ebp]
  00039	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 204  :             _written = 0;

  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 205  :         }

  00046	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00049	83 c4 04	 add	 esp, 4
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 0c 00	 ret	 12			; 0000000cH
??0StringWriter@Internal@Core@Math@Palmtree@@IAE@PA_W00@Z ENDP ; Palmtree::Math::Core::Internal::StringWriter::StringWriter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?StartsWith@StringReader@Internal@Core@Math@Palmtree@@CAHPB_W0@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?StartsWith@StringReader@Internal@Core@Math@Palmtree@@CAHPB_W0@Z PROC ; Palmtree::Math::Core::Internal::StringReader::StartsWith, COMDAT

; 120  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __80E6779E_pmc_stringio@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
$LN2@StartsWith:

; 121  :             while (*b != L'\0')

  0000d	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  00010	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00013	85 c9		 test	 ecx, ecx
  00015	74 28		 je	 SHORT $LN3@StartsWith

; 122  :             {
; 123  :                 if (*a != *b)

  00017	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  0001a	0f b7 02	 movzx	 eax, WORD PTR [edx]
  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  00020	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  00023	3b c2		 cmp	 eax, edx
  00025	74 04		 je	 SHORT $LN4@StartsWith

; 124  :                     return (0);

  00027	33 c0		 xor	 eax, eax
  00029	eb 19		 jmp	 SHORT $LN1@StartsWith
$LN4@StartsWith:

; 125  :                 ++a;

  0002b	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0002e	83 c0 02	 add	 eax, 2
  00031	89 45 08	 mov	 DWORD PTR _a$[ebp], eax

; 126  :                 ++b;

  00034	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  00037	83 c1 02	 add	 ecx, 2
  0003a	89 4d 0c	 mov	 DWORD PTR _b$[ebp], ecx

; 127  :             }

  0003d	eb ce		 jmp	 SHORT $LN2@StartsWith
$LN3@StartsWith:

; 128  :             return (1);

  0003f	b8 01 00 00 00	 mov	 eax, 1
$LN1@StartsWith:

; 129  :         }

  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
?StartsWith@StringReader@Internal@Core@Math@Palmtree@@CAHPB_W0@Z ENDP ; Palmtree::Math::Core::Internal::StringReader::StartsWith
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?SkipString@StringReader@Internal@Core@Math@Palmtree@@UAEXPB_W@Z
_TEXT	SEGMENT
tv80 = -36						; size = 4
tv82 = -32						; size = 4
$T1 = -28						; size = 24
_this$ = -4						; size = 4
_str$ = 8						; size = 4
?SkipString@StringReader@Internal@Core@Math@Palmtree@@UAEXPB_W@Z PROC ; Palmtree::Math::Core::Internal::StringReader::SkipString, COMDAT
; _this$ = ecx

; 109  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0000f	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00012	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00015	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00018	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0001b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00021	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00024	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00027	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0002a	b9 00 00 00 00	 mov	 ecx, OFFSET __80E6779E_pmc_stringio@h
  0002f	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 110  :             if (!StartsWith(_p, str))

  00034	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  00037	50		 push	 eax
  00038	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0003e	52		 push	 edx
  0003f	e8 00 00 00 00	 call	 ?StartsWith@StringReader@Internal@Core@Math@Palmtree@@CAHPB_W0@Z ; Palmtree::Math::Core::Internal::StringReader::StartsWith
  00044	83 c4 08	 add	 esp, 8
  00047	85 c0		 test	 eax, eax
  00049	75 20		 jne	 SHORT $LN2@SkipString

; 111  :             {
; 112  :                 // str で始まっていないにもかかわらず、strをスキップしようとした。
; 113  :                 throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_stringio.h;StringReader::SkipString;1");

  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_1FE@KONPIGEM@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  00055	8d 4d e4	 lea	 ecx, DWORD PTR $T1[ebp]
  00058	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  0005d	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00062	8d 45 e4	 lea	 eax, DWORD PTR $T1[ebp]
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@SkipString:

; 114  :             }
; 115  :             _p += lstrlenW(str);

  0006b	8b f4		 mov	 esi, esp
  0006d	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  00070	51		 push	 ecx
  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenW@4
  00077	3b f4		 cmp	 esi, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007e	d1 e0		 shl	 eax, 1
  00080	89 45 e0	 mov	 DWORD PTR tv82[ebp], eax
  00083	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00086	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00089	89 45 dc	 mov	 DWORD PTR tv80[ebp], eax
  0008c	8b 4d dc	 mov	 ecx, DWORD PTR tv80[ebp]
  0008f	03 4d e0	 add	 ecx, DWORD PTR tv82[ebp]
  00092	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00095	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$LN3@SkipString:

; 116  :         }

  00098	5e		 pop	 esi
  00099	83 c4 24	 add	 esp, 36			; 00000024H
  0009c	3b ec		 cmp	 ebp, esp
  0009e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a3	8b e5		 mov	 esp, ebp
  000a5	5d		 pop	 ebp
  000a6	c2 04 00	 ret	 4
?SkipString@StringReader@Internal@Core@Math@Palmtree@@UAEXPB_W@Z ENDP ; Palmtree::Math::Core::Internal::StringReader::SkipString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?SkipSpace@StringReader@Internal@Core@Math@Palmtree@@QAEXXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?SkipSpace@StringReader@Internal@Core@Math@Palmtree@@QAEXXZ PROC ; Palmtree::Math::Core::Internal::StringReader::SkipSpace, COMDAT
; _this$ = ecx

; 89   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00018	b9 00 00 00 00	 mov	 ecx, OFFSET __80E6779E_pmc_stringio@h
  0001d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
$LN4@SkipSpace:

; 90   :             for (;;)
; 91   :             {
; 92   :                 switch (PeekChar())

  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b 10		 mov	 edx, DWORD PTR [eax]
  00027	8b f4		 mov	 esi, esp
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	8b 02		 mov	 eax, DWORD PTR [edx]
  0002e	ff d0		 call	 eax
  00030	3b f4		 cmp	 esi, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	0f b7 c8	 movzx	 ecx, ax
  0003a	89 4d f8	 mov	 DWORD PTR tv69[ebp], ecx
  0003d	83 7d f8 09	 cmp	 DWORD PTR tv69[ebp], 9
  00041	7c 10		 jl	 SHORT $LN8@SkipSpace
  00043	83 7d f8 0d	 cmp	 DWORD PTR tv69[ebp], 13	; 0000000dH
  00047	7e 08		 jle	 SHORT $LN7@SkipSpace
  00049	83 7d f8 20	 cmp	 DWORD PTR tv69[ebp], 32	; 00000020H
  0004d	74 02		 je	 SHORT $LN7@SkipSpace
  0004f	eb 02		 jmp	 SHORT $LN8@SkipSpace
$LN7@SkipSpace:

; 93   :                 {
; 94   :                 case L' ':
; 95   :                 case L'\t':
; 96   :                 case L'\n':
; 97   :                 case L'\r':
; 98   :                 case L'\f':
; 99   :                 case L'\v':
; 100  :                     break;

  00051	eb 02		 jmp	 SHORT $LN5@SkipSpace
$LN8@SkipSpace:

; 101  :                 default:
; 102  :                     return;

  00053	eb 18		 jmp	 SHORT $LN1@SkipSpace
$LN5@SkipSpace:

; 103  :                 }
; 104  :                 Progress();

  00055	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00058	8b 02		 mov	 eax, DWORD PTR [edx]
  0005a	8b f4		 mov	 esi, esp
  0005c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00062	ff d2		 call	 edx
  00064	3b f4		 cmp	 esi, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 105  :             }

  0006b	eb b5		 jmp	 SHORT $LN4@SkipSpace
$LN1@SkipSpace:

; 106  :         }

  0006d	5e		 pop	 esi
  0006e	83 c4 08	 add	 esp, 8
  00071	3b ec		 cmp	 ebp, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
?SkipSpace@StringReader@Internal@Core@Math@Palmtree@@QAEXXZ ENDP ; Palmtree::Math::Core::Internal::StringReader::SkipSpace
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?StartsWith@StringReader@Internal@Core@Math@Palmtree@@UAEHPB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_str$ = 8						; size = 4
?StartsWith@StringReader@Internal@Core@Math@Palmtree@@UAEHPB_W@Z PROC ; Palmtree::Math::Core::Internal::StringReader::StartsWith, COMDAT
; _this$ = ecx

; 84   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __80E6779E_pmc_stringio@h
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 85   :             return (StartsWith(_p, str));

  00018	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  0001b	50		 push	 eax
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00022	52		 push	 edx
  00023	e8 00 00 00 00	 call	 ?StartsWith@StringReader@Internal@Core@Math@Palmtree@@CAHPB_W0@Z ; Palmtree::Math::Core::Internal::StringReader::StartsWith
  00028	83 c4 08	 add	 esp, 8

; 86   :         }

  0002b	83 c4 04	 add	 esp, 4
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?StartsWith@StringReader@Internal@Core@Math@Palmtree@@UAEHPB_W@Z ENDP ; Palmtree::Math::Core::Internal::StringReader::StartsWith
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?Progress@StringReader@Internal@Core@Math@Palmtree@@UAEXXZ
_TEXT	SEGMENT
$T1 = -28						; size = 24
_this$ = -4						; size = 4
?Progress@StringReader@Internal@Core@Math@Palmtree@@UAEXXZ PROC ; Palmtree::Math::Core::Internal::StringReader::Progress, COMDAT
; _this$ = ecx

; 77   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000e	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00011	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00014	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00017	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001a	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001d	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00020	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __80E6779E_pmc_stringio@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 78   :             if (*_p == L'\0')

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00033	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  00036	85 d2		 test	 edx, edx
  00038	75 20		 jne	 SHORT $LN2@Progress

; 79   :                 throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_stringio.h;StringReader::Progress;1");

  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_1FA@CNGEABBJ@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  00044	8d 4d e4	 lea	 ecx, DWORD PTR $T1[ebp]
  00047	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  0004c	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00051	8d 45 e4	 lea	 eax, DWORD PTR $T1[ebp]
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@Progress:

; 80   :             ++_p;

  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00060	83 c2 02	 add	 edx, 2
  00063	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00066	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN3@Progress:

; 81   :         }

  00069	83 c4 1c	 add	 esp, 28			; 0000001cH
  0006c	3b ec		 cmp	 ebp, esp
  0006e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c3		 ret	 0
?Progress@StringReader@Internal@Core@Math@Palmtree@@UAEXXZ ENDP ; Palmtree::Math::Core::Internal::StringReader::Progress
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?PeekChar@StringReader@Internal@Core@Math@Palmtree@@UAE_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?PeekChar@StringReader@Internal@Core@Math@Palmtree@@UAE_WXZ PROC ; Palmtree::Math::Core::Internal::StringReader::PeekChar, COMDAT
; _this$ = ecx

; 72   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __80E6779E_pmc_stringio@h
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 73   :             return (*_p);

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001e	66 8b 01	 mov	 ax, WORD PTR [ecx]

; 74   :         }

  00021	83 c4 04	 add	 esp, 4
  00024	3b ec		 cmp	 ebp, esp
  00026	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
?PeekChar@StringReader@Internal@Core@Math@Palmtree@@UAE_WXZ ENDP ; Palmtree::Math::Core::Internal::StringReader::PeekChar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ??0StringReader@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0StringReader@Internal@Core@Math@Palmtree@@QAE@PB_W@Z PROC ; Palmtree::Math::Core::Internal::StringReader::StringReader, COMDAT
; _this$ = ecx

; 50   :         StringReader(const wchar_t* p)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	b9 00 00 00 00	 mov	 ecx, OFFSET __80E6779E_pmc_stringio@h
  00013	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7StringReader@Internal@Core@Math@Palmtree@@6B@

; 51   :         {
; 52   :             _p = p;

  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00027	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 53   :         }

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 c4 04	 add	 esp, 4
  00030	3b ec		 cmp	 ebp, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
??0StringReader@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ENDP ; Palmtree::Math::Core::Internal::StringReader::StringReader
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 18		 push	 24			; 00000018H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException, COMDAT
; _this$ = ecx

; 295  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 296  :         }

  00047	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException, COMDAT
; _this$ = ecx

; 291  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 290  :             : Exception(p)

  00037	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 291  :         {

  0004a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@

; 292  :         }

  00053	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00060	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00067	59		 pop	 ecx
  00068	83 c4 10	 add	 esp, 16			; 00000010H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
_data$ = 12						; size = 4
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException, COMDAT
; _this$ = ecx

; 286  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 285  :             : Exception(PMC_STATUS_INTERNAL_ERROR, message, data)

  00037	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _message$[ebp]
  0003e	51		 push	 ecx
  0003f	68 00 ff ff ff	 push	 -256			; ffffff00H
  00044	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 286  :         {

  00053	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00056	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@

; 287  :         }

  0005c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00063	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00066	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00069	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00070	59		 pop	 ecx
  00071	83 c4 10	 add	 esp, 16			; 00000010H
  00074	3b ec		 cmp	 ebp, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::InsufficientBufferException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::InsufficientBufferException::~InsufficientBufferException
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 18		 push	 24			; 00000018H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::InsufficientBufferException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::InsufficientBufferException::~InsufficientBufferException, COMDAT
; _this$ = ecx

; 238  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 239  :         }

  00047	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::InsufficientBufferException::~InsufficientBufferException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException, COMDAT
; _this$ = ecx

; 234  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 233  :             : Exception(p)

  00037	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 234  :         {

  0004a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@

; 235  :         }

  00053	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00060	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00067	59		 pop	 ecx
  00068	83 c4 10	 add	 esp, 16			; 00000010H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z PROC ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException, COMDAT
; _this$ = ecx

; 229  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 228  :             : Exception(PMC_STATUS_INSUFFICIENT_BUFFER, message)

  00037	8b 45 08	 mov	 eax, DWORD PTR _message$[ebp]
  0003a	50		 push	 eax
  0003b	6a f8		 push	 -8			; fffffff8H
  0003d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 229  :         {

  0004c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@

; 230  :         }

  00055	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	83 c4 10	 add	 esp, 16			; 00000010H
  0006d	3b ec		 cmp	 ebp, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ENDP ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 18		 push	 24			; 00000018H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException, COMDAT
; _this$ = ecx

; 124  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 125  :         }

  00047	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException, COMDAT
; _this$ = ecx

; 120  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 119  :             : Exception(p)

  00037	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 120  :         {

  0004a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@

; 121  :         }

  00053	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00060	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00067	59		 pop	 ecx
  00068	83 c4 10	 add	 esp, 16			; 00000010H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
_param_name$ = 12					; size = 4
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException, COMDAT
; _this$ = ecx

; 115  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 114  :             : Exception(PMC_STATUS_ARGUMENT_NULL_ERROR, message, param_name)

  00037	8b 45 0c	 mov	 eax, DWORD PTR _param_name$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _message$[ebp]
  0003e	51		 push	 ecx
  0003f	6a fe		 push	 -2			; fffffffeH
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00049	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 115  :         {

  00050	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00053	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@

; 116  :         }

  00059	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00060	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00063	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00066	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006d	59		 pop	 ecx
  0006e	83 c4 10	 add	 esp, 16			; 00000010H
  00071	3b ec		 cmp	 ebp, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GArgumentException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GArgumentException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::ArgumentException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1ArgumentException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ArgumentException::~ArgumentException
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 18		 push	 24			; 00000018H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GArgumentException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1ArgumentException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ArgumentException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::ArgumentException::~ArgumentException, COMDAT
; _this$ = ecx

; 105  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1ArgumentException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ArgumentException@Internal@Core@Math@Palmtree@@6B@
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 106  :         }

  00047	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ArgumentException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??1ArgumentException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ArgumentException@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ArgumentException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::ArgumentException::~ArgumentException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::ArgumentException::ArgumentException, COMDAT
; _this$ = ecx

; 101  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 100  :             : Exception(p)

  00037	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 101  :         {

  0004a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ArgumentException@Internal@Core@Math@Palmtree@@6B@

; 102  :         }

  00053	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00060	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00067	59		 pop	 ecx
  00068	83 c4 10	 add	 esp, 16			; 00000010H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentException::ArgumentException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z PROC ; Palmtree::Math::Core::Internal::ArgumentException::ArgumentException, COMDAT
; _this$ = ecx

; 96   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 95   :             : Exception(PMC_STATUS_ARGUMENT_ERROR, message)

  00037	8b 45 08	 mov	 eax, DWORD PTR _message$[ebp]
  0003a	50		 push	 eax
  0003b	6a ff		 push	 -1
  0003d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 96   :         {

  0004c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ArgumentException@Internal@Core@Math@Palmtree@@6B@

; 97   :         }

  00055	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	83 c4 10	 add	 esp, 16			; 00000010H
  0006d	3b ec		 cmp	 ebp, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ArgumentException@Internal@Core@Math@Palmtree@@QAE@PB_W@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentException::ArgumentException
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 18		 push	 24			; 00000018H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ PROC	; Palmtree::Math::Core::Internal::Exception::~Exception, COMDAT
; _this$ = ecx

; 70   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 71   :         }

  00047	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ENDP	; Palmtree::Math::Core::Internal::Exception::~Exception
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT
; _this$ = ecx

; 62   :         Exception(const Exception& p) noexcept(true)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00049	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 63   :         {
; 64   :             _code = p._code;

  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00055	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00058	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 65   :             _message = p._message;

  0005b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00061	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00064	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 66   :             _data = p._data;

  00067	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  0006d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00070	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 67   :         }

  00073	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0007a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0007d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00080	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00087	59		 pop	 ecx
  00088	83 c4 10	 add	 esp, 16			; 00000010H
  0008b	3b ec		 cmp	 ebp, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_code$ = 8						; size = 4
_message$ = 12						; size = 4
_data$ = 16						; size = 4
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT
; _this$ = ecx

; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00049	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 55   :         {
; 56   :             _code = code;

  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	8b 55 08	 mov	 edx, DWORD PTR _code$[ebp]
  00055	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 57   :             _message = message;

  00058	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	8b 4d 0c	 mov	 ecx, DWORD PTR _message$[ebp]
  0005e	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 58   :             _data = data;

  00061	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00064	8b 45 10	 mov	 eax, DWORD PTR _data$[ebp]
  00067	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 59   :         }

  0006a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00071	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00077	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007e	59		 pop	 ecx
  0007f	83 c4 10	 add	 esp, 16			; 00000010H
  00082	3b ec		 cmp	 ebp, esp
  00084	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_code$ = 8						; size = 4
_message$ = 12						; size = 4
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT
; _this$ = ecx

; 47   :         Exception(PMC_STATUS_CODE code, const wchar_t* message) noexcept(true)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00049	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 48   :         {
; 49   :             _code = code;

  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	8b 55 08	 mov	 edx, DWORD PTR _code$[ebp]
  00055	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 50   :             _message = message;

  00058	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	8b 4d 0c	 mov	 ecx, DWORD PTR _message$[ebp]
  0005e	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 51   :             _data = nullptr;

  00061	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00064	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0

; 52   :         }

  0006b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00072	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00075	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00078	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007f	59		 pop	 ecx
  00080	83 c4 10	 add	 esp, 16			; 00000010H
  00083	3b ec		 cmp	 ebp, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 90   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __9BB4E194_vcruntime_exception@h
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 91   :         return _Data._What ? _Data._What : "Unknown exception";

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00028	74 0b		 je	 SHORT $LN3@what
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00030	89 55 f8	 mov	 DWORD PTR tv69[ebp], edx
  00033	eb 07		 jmp	 SHORT $LN4@what
$LN3@what:
  00035	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
$LN4@what:
  0003c	8b 45 f8	 mov	 eax, DWORD PTR tv69[ebp]

; 92   :     }

  0003f	83 c4 08	 add	 esp, 8
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 85   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1exception@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __9BB4E194_vcruntime_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 86   :         __std_exception_destroy(&_Data);

  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	83 c1 04	 add	 ecx, 4
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 ___std_exception_destroy
  0004c	83 c4 04	 add	 esp, 4

; 87   :     }

  0004f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00052	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00059	59		 pop	 ecx
  0005a	83 c4 10	 add	 esp, 16			; 00000010H
  0005d	3b ec		 cmp	 ebp, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1exception@std@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1exception@std@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0exception@std@@QAE@XZ PROC				; std::exception::exception, COMDAT
; _this$ = ecx

; 50   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0exception@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __9BB4E194_vcruntime_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 49   :         : _Data()

  00040	33 c9		 xor	 ecx, ecx
  00042	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00045	83 c2 04	 add	 edx, 4
  00048	89 0a		 mov	 DWORD PTR [edx], ecx
  0004a	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 51   :     }

  0004d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	83 c4 10	 add	 esp, 16			; 00000010H
  0005e	3b ec		 cmp	 ebp, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0exception@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0exception@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0exception@std@@QAE@XZ ENDP				; std::exception::exception
END
