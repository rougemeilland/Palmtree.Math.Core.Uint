; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_initialize.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_configuration_info:DWORD
_DATA	ENDS
msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__331E732B_malloc@h DB 01H
__746E1CEC_xmmintrin@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__2C87EF5E_pmc_initialize@c DB 01H
msvcjmc	ENDS
PUBLIC	_PMC_UINT_Initialize@4
PUBLIC	__JustMyCode_Default
EXTRN	_GetCPUInfo:PROC
EXTRN	_Initialize_Memory:PROC
EXTRN	_Initialize_From:PROC
EXTRN	_Initialize_Clone:PROC
EXTRN	_Initialize_To:PROC
EXTRN	_Initialize_GetPropertyValue:PROC
EXTRN	_Initialize_Add:PROC
EXTRN	_Initialize_Subtruct:PROC
EXTRN	_Initialize_Multiply:PROC
EXTRN	_Initialize_DivRem:PROC
EXTRN	_Initialize_Shift:PROC
EXTRN	_Initialize_BitwiseAnd:PROC
EXTRN	_Initialize_BitwiseOr:PROC
EXTRN	_Initialize_ExclusiveOr:PROC
EXTRN	_Initialize_Compare:PROC
EXTRN	_Initialize_Equals:PROC
EXTRN	_Initialize_ToString:PROC
EXTRN	_Initialize_Parse:PROC
EXTRN	_Initialize_GreatestCommonDivisor:PROC
EXTRN	_Initialize_Pow:PROC
EXTRN	_Initialize_ModPow:PROC
EXTRN	_PMC_GetStatisticsInfo@4:PROC
EXTRN	_PMC_From_I@8:PROC
EXTRN	_PMC_From_L@12:PROC
EXTRN	_PMC_Dispose@4:PROC
EXTRN	_PMC_GetPropertyValue_X_I@12:PROC
EXTRN	_PMC_FromByteArray@12:PROC
EXTRN	_PMC_ToByteArray@16:PROC
EXTRN	_PMC_Clone_X@8:PROC
EXTRN	_PMC_To_X_I@8:PROC
EXTRN	_PMC_To_X_L@8:PROC
EXTRN	_PMC_ToString@24:PROC
EXTRN	_PMC_TryParse@16:PROC
EXTRN	_PMC_Add_I_X@12:PROC
EXTRN	_PMC_Add_L_X@16:PROC
EXTRN	_PMC_Add_X_I@12:PROC
EXTRN	_PMC_Add_X_L@16:PROC
EXTRN	_PMC_Add_X_X@12:PROC
EXTRN	_PMC_Subtruct_I_X@12:PROC
EXTRN	_PMC_Subtruct_L_X@16:PROC
EXTRN	_PMC_Subtruct_X_I@12:PROC
EXTRN	_PMC_Subtruct_X_L@16:PROC
EXTRN	_PMC_Subtruct_X_X@12:PROC
EXTRN	_PMC_Multiply_I_X@12:PROC
EXTRN	_PMC_Multiply_L_X@16:PROC
EXTRN	_PMC_Multiply_X_I@12:PROC
EXTRN	_PMC_Multiply_X_L@16:PROC
EXTRN	_PMC_Multiply_X_X@12:PROC
EXTRN	_PMC_DivRem_I_X@16:PROC
EXTRN	_PMC_DivRem_L_X@20:PROC
EXTRN	_PMC_DivRem_X_I@16:PROC
EXTRN	_PMC_DivRem_X_L@20:PROC
EXTRN	_PMC_DivRem_X_X@16:PROC
EXTRN	_PMC_RightShift_X_I@12:PROC
EXTRN	_PMC_LeftShift_X_I@12:PROC
EXTRN	_PMC_BitwiseAnd_I_X@12:PROC
EXTRN	_PMC_BitwiseAnd_L_X@16:PROC
EXTRN	_PMC_BitwiseAnd_X_I@12:PROC
EXTRN	_PMC_BitwiseAnd_X_L@16:PROC
EXTRN	_PMC_BitwiseAnd_X_X@12:PROC
EXTRN	_PMC_BitwiseOr_I_X@12:PROC
EXTRN	_PMC_BitwiseOr_L_X@16:PROC
EXTRN	_PMC_BitwiseOr_X_I@12:PROC
EXTRN	_PMC_BitwiseOr_X_L@16:PROC
EXTRN	_PMC_BitwiseOr_X_X@12:PROC
EXTRN	_PMC_ExclusiveOr_I_X@12:PROC
EXTRN	_PMC_ExclusiveOr_L_X@16:PROC
EXTRN	_PMC_ExclusiveOr_X_I@12:PROC
EXTRN	_PMC_ExclusiveOr_X_L@16:PROC
EXTRN	_PMC_ExclusiveOr_X_X@12:PROC
EXTRN	_PMC_Compare_I_X@12:PROC
EXTRN	_PMC_Compare_L_X@16:PROC
EXTRN	_PMC_Compare_X_I@12:PROC
EXTRN	_PMC_Compare_X_L@16:PROC
EXTRN	_PMC_Compare_X_X@12:PROC
EXTRN	_PMC_Equals_I_X@12:PROC
EXTRN	_PMC_Equals_L_X@16:PROC
EXTRN	_PMC_Equals_X_I@12:PROC
EXTRN	_PMC_Equals_X_L@16:PROC
EXTRN	_PMC_Equals_X_X@12:PROC
EXTRN	_PMC_GreatestCommonDivisor_I_X@12:PROC
EXTRN	_PMC_GreatestCommonDivisor_L_X@16:PROC
EXTRN	_PMC_GreatestCommonDivisor_X_I@12:PROC
EXTRN	_PMC_GreatestCommonDivisor_X_L@16:PROC
EXTRN	_PMC_GreatestCommonDivisor_X_X@12:PROC
EXTRN	_PMC_Pow_X_I@12:PROC
EXTRN	_PMC_ModPow_X_X_X@16:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
_BSS	SEGMENT
_entry_points DB 010cH DUP (?)
_initialized DB	01H DUP (?)
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_initialize.c
_TEXT	SEGMENT
_feature$ = -8						; size = 4
_config$ = 8						; size = 4
_PMC_UINT_Initialize@4 PROC

; 41   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __2C87EF5E_pmc_initialize@c
	call	@__CheckForDebuggerJustMyCode@4

; 42   :     PROCESSOR_FEATURES feature;
; 43   :     GetCPUInfo(&feature);

	lea	eax, DWORD PTR _feature$[ebp]
	push	eax
	call	_GetCPUInfo
	add	esp, 4

; 44   : 
; 45   :     if (!initialized)

	movsx	ecx, BYTE PTR _initialized
	test	ecx, ecx
	jne	$LN2@PMC_UINT_I

; 46   :     {
; 47   :         configuration_info = *config;

	mov	edx, DWORD PTR _config$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _configuration_info, eax

; 48   :         if (Initialize_Memory(&feature) != PMC_STATUS_OK)

	lea	ecx, DWORD PTR _feature$[ebp]
	push	ecx
	call	_Initialize_Memory
	add	esp, 4
	test	eax, eax
	je	SHORT $LN3@PMC_UINT_I

; 49   :             return (NULL);

	xor	eax, eax
	jmp	$LN1@PMC_UINT_I
$LN3@PMC_UINT_I:

; 50   :         if (Initialize_From(&feature) != PMC_STATUS_OK)

	lea	edx, DWORD PTR _feature$[ebp]
	push	edx
	call	_Initialize_From
	add	esp, 4
	test	eax, eax
	je	SHORT $LN4@PMC_UINT_I

; 51   :             return (NULL);

	xor	eax, eax
	jmp	$LN1@PMC_UINT_I
$LN4@PMC_UINT_I:

; 52   :         if (Initialize_To(&feature) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _feature$[ebp]
	push	eax
	call	_Initialize_To
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@PMC_UINT_I

; 53   :             return (NULL);

	xor	eax, eax
	jmp	$LN1@PMC_UINT_I
$LN5@PMC_UINT_I:

; 54   :         if (Initialize_Add(&feature) != PMC_STATUS_OK)

	lea	ecx, DWORD PTR _feature$[ebp]
	push	ecx
	call	_Initialize_Add
	add	esp, 4
	test	eax, eax
	je	SHORT $LN6@PMC_UINT_I

; 55   :             return (NULL);

	xor	eax, eax
	jmp	$LN1@PMC_UINT_I
$LN6@PMC_UINT_I:

; 56   :         if (Initialize_Subtruct(&feature) != PMC_STATUS_OK)

	lea	edx, DWORD PTR _feature$[ebp]
	push	edx
	call	_Initialize_Subtruct
	add	esp, 4
	test	eax, eax
	je	SHORT $LN7@PMC_UINT_I

; 57   :             return (NULL);

	xor	eax, eax
	jmp	$LN1@PMC_UINT_I
$LN7@PMC_UINT_I:

; 58   :         if (Initialize_Multiply(&feature) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _feature$[ebp]
	push	eax
	call	_Initialize_Multiply
	add	esp, 4
	test	eax, eax
	je	SHORT $LN8@PMC_UINT_I

; 59   :             return (NULL);

	xor	eax, eax
	jmp	$LN1@PMC_UINT_I
$LN8@PMC_UINT_I:

; 60   :         if (Initialize_DivRem(&feature) != PMC_STATUS_OK)

	lea	ecx, DWORD PTR _feature$[ebp]
	push	ecx
	call	_Initialize_DivRem
	add	esp, 4
	test	eax, eax
	je	SHORT $LN9@PMC_UINT_I

; 61   :             return (NULL);

	xor	eax, eax
	jmp	$LN1@PMC_UINT_I
$LN9@PMC_UINT_I:

; 62   :         if (Initialize_Shift(&feature) != PMC_STATUS_OK)

	lea	edx, DWORD PTR _feature$[ebp]
	push	edx
	call	_Initialize_Shift
	add	esp, 4
	test	eax, eax
	je	SHORT $LN10@PMC_UINT_I

; 63   :             return (NULL);

	xor	eax, eax
	jmp	$LN1@PMC_UINT_I
$LN10@PMC_UINT_I:

; 64   :         if (Initialize_BitwiseAnd(&feature) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _feature$[ebp]
	push	eax
	call	_Initialize_BitwiseAnd
	add	esp, 4
	test	eax, eax
	je	SHORT $LN11@PMC_UINT_I

; 65   :             return (NULL);

	xor	eax, eax
	jmp	$LN1@PMC_UINT_I
$LN11@PMC_UINT_I:

; 66   :         if (Initialize_BitwiseOr(&feature) != PMC_STATUS_OK)

	lea	ecx, DWORD PTR _feature$[ebp]
	push	ecx
	call	_Initialize_BitwiseOr
	add	esp, 4
	test	eax, eax
	je	SHORT $LN12@PMC_UINT_I

; 67   :             return (NULL);

	xor	eax, eax
	jmp	$LN1@PMC_UINT_I
$LN12@PMC_UINT_I:

; 68   :         if (Initialize_ExclusiveOr(&feature) != PMC_STATUS_OK)

	lea	edx, DWORD PTR _feature$[ebp]
	push	edx
	call	_Initialize_ExclusiveOr
	add	esp, 4
	test	eax, eax
	je	SHORT $LN13@PMC_UINT_I

; 69   :             return (NULL);

	xor	eax, eax
	jmp	$LN1@PMC_UINT_I
$LN13@PMC_UINT_I:

; 70   :         if (Initialize_Compare(&feature) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _feature$[ebp]
	push	eax
	call	_Initialize_Compare
	add	esp, 4
	test	eax, eax
	je	SHORT $LN14@PMC_UINT_I

; 71   :             return (NULL);

	xor	eax, eax
	jmp	$LN1@PMC_UINT_I
$LN14@PMC_UINT_I:

; 72   :         if (Initialize_Equals(&feature) != PMC_STATUS_OK)

	lea	ecx, DWORD PTR _feature$[ebp]
	push	ecx
	call	_Initialize_Equals
	add	esp, 4
	test	eax, eax
	je	SHORT $LN15@PMC_UINT_I

; 73   :             return (NULL);

	xor	eax, eax
	jmp	$LN1@PMC_UINT_I
$LN15@PMC_UINT_I:

; 74   :         if (Initialize_ToString(&feature) != PMC_STATUS_OK)

	lea	edx, DWORD PTR _feature$[ebp]
	push	edx
	call	_Initialize_ToString
	add	esp, 4
	test	eax, eax
	je	SHORT $LN16@PMC_UINT_I

; 75   :             return (NULL);

	xor	eax, eax
	jmp	$LN1@PMC_UINT_I
$LN16@PMC_UINT_I:

; 76   :         if (Initialize_Parse(&feature) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _feature$[ebp]
	push	eax
	call	_Initialize_Parse
	add	esp, 4
	test	eax, eax
	je	SHORT $LN17@PMC_UINT_I

; 77   :             return (NULL);

	xor	eax, eax
	jmp	$LN1@PMC_UINT_I
$LN17@PMC_UINT_I:

; 78   :         if (Initialize_GreatestCommonDivisor(&feature) != PMC_STATUS_OK)

	lea	ecx, DWORD PTR _feature$[ebp]
	push	ecx
	call	_Initialize_GreatestCommonDivisor
	add	esp, 4
	test	eax, eax
	je	SHORT $LN18@PMC_UINT_I

; 79   :             return (NULL);

	xor	eax, eax
	jmp	$LN1@PMC_UINT_I
$LN18@PMC_UINT_I:

; 80   :         if (Initialize_Pow(&feature) != PMC_STATUS_OK)

	lea	edx, DWORD PTR _feature$[ebp]
	push	edx
	call	_Initialize_Pow
	add	esp, 4
	test	eax, eax
	je	SHORT $LN19@PMC_UINT_I

; 81   :             return (NULL);

	xor	eax, eax
	jmp	$LN1@PMC_UINT_I
$LN19@PMC_UINT_I:

; 82   :         if (Initialize_ModPow(&feature) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _feature$[ebp]
	push	eax
	call	_Initialize_ModPow
	add	esp, 4
	test	eax, eax
	je	SHORT $LN20@PMC_UINT_I

; 83   :             return (NULL);

	xor	eax, eax
	jmp	$LN1@PMC_UINT_I
$LN20@PMC_UINT_I:

; 84   :         if (Initialize_GetPropertyValue(&feature) != PMC_STATUS_OK)

	lea	ecx, DWORD PTR _feature$[ebp]
	push	ecx
	call	_Initialize_GetPropertyValue
	add	esp, 4
	test	eax, eax
	je	SHORT $LN21@PMC_UINT_I

; 85   :             return (NULL);

	xor	eax, eax
	jmp	$LN1@PMC_UINT_I
$LN21@PMC_UINT_I:

; 86   :         if (Initialize_Clone(&feature) != PMC_STATUS_OK)

	lea	edx, DWORD PTR _feature$[ebp]
	push	edx
	call	_Initialize_Clone
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@PMC_UINT_I

; 87   :             return (NULL);

	xor	eax, eax
	jmp	$LN1@PMC_UINT_I
$LN2@PMC_UINT_I:

; 88   :     }
; 89   : 
; 90   :     entry_points.PROCESSOR_FEATURE_POPCNT = feature.PROCESSOR_FEATURE_POPCNT;

	mov	eax, DWORD PTR _feature$[ebp]
	and	eax, 1
	and	eax, 1
	mov	ecx, DWORD PTR _entry_points
	and	ecx, -2					; fffffffeH
	or	ecx, eax
	mov	DWORD PTR _entry_points, ecx

; 91   :     entry_points.PROCESSOR_FEATURE_ADX = feature.PROCESSOR_FEATURE_ADX;

	mov	edx, DWORD PTR _feature$[ebp]
	shr	edx, 1
	and	edx, 1
	and	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _entry_points
	and	eax, -3					; fffffffdH
	or	eax, edx
	mov	DWORD PTR _entry_points, eax

; 92   : 	entry_points.PROCESSOR_FEATURE_BMI1 = feature.PROCESSOR_FEATURE_BMI1;

	mov	ecx, DWORD PTR _feature$[ebp]
	shr	ecx, 2
	and	ecx, 1
	and	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _entry_points
	and	edx, -5					; fffffffbH
	or	edx, ecx
	mov	DWORD PTR _entry_points, edx

; 93   :     entry_points.PROCESSOR_FEATURE_BMI2 = feature.PROCESSOR_FEATURE_BMI2;

	mov	eax, DWORD PTR _feature$[ebp]
	shr	eax, 3
	and	eax, 1
	and	eax, 1
	shl	eax, 3
	mov	ecx, DWORD PTR _entry_points
	and	ecx, -9					; fffffff7H
	or	ecx, eax
	mov	DWORD PTR _entry_points, ecx

; 94   :     entry_points.PROCESSOR_FEATURE_ABM = feature.PROCESSOR_FEATURE_ABM;

	mov	edx, DWORD PTR _feature$[ebp]
	shr	edx, 4
	and	edx, 1
	and	edx, 1
	shl	edx, 4
	mov	eax, DWORD PTR _entry_points
	and	eax, -17				; ffffffefH
	or	eax, edx
	mov	DWORD PTR _entry_points, eax

; 95   : 	entry_points.GetStatisticsInfo = PMC_GetStatisticsInfo;

	mov	DWORD PTR _entry_points+4, OFFSET _PMC_GetStatisticsInfo@4

; 96   : 	entry_points.From_I = PMC_From_I;

	mov	DWORD PTR _entry_points+8, OFFSET _PMC_From_I@8

; 97   : 	entry_points.From_L = PMC_From_L;

	mov	DWORD PTR _entry_points+12, OFFSET _PMC_From_L@12

; 98   :     entry_points.FromByteArray = PMC_FromByteArray;

	mov	DWORD PTR _entry_points+24, OFFSET _PMC_FromByteArray@12

; 99   :     entry_points.Dispose = PMC_Dispose;

	mov	DWORD PTR _entry_points+16, OFFSET _PMC_Dispose@4

; 100  :     entry_points.To_X_I = PMC_To_X_I;

	mov	DWORD PTR _entry_points+36, OFFSET _PMC_To_X_I@8

; 101  : 	entry_points.To_X_L = PMC_To_X_L;

	mov	DWORD PTR _entry_points+40, OFFSET _PMC_To_X_L@8

; 102  :     entry_points.ToByteArray = PMC_ToByteArray;

	mov	DWORD PTR _entry_points+28, OFFSET _PMC_ToByteArray@16

; 103  :     entry_points.ToString = PMC_ToString;

	mov	DWORD PTR _entry_points+44, OFFSET _PMC_ToString@24

; 104  :     entry_points.TryParse = PMC_TryParse;

	mov	DWORD PTR _entry_points+48, OFFSET _PMC_TryParse@16

; 105  :     entry_points.Add_I_X = PMC_Add_I_X;

	mov	DWORD PTR _entry_points+52, OFFSET _PMC_Add_I_X@12

; 106  : 	entry_points.Add_L_X = PMC_Add_L_X;

	mov	DWORD PTR _entry_points+56, OFFSET _PMC_Add_L_X@16

; 107  :     entry_points.Add_X_I = PMC_Add_X_I;

	mov	DWORD PTR _entry_points+60, OFFSET _PMC_Add_X_I@12

; 108  :     entry_points.Add_X_L = PMC_Add_X_L;

	mov	DWORD PTR _entry_points+64, OFFSET _PMC_Add_X_L@16

; 109  :     entry_points.Add_X_X = PMC_Add_X_X;

	mov	DWORD PTR _entry_points+68, OFFSET _PMC_Add_X_X@12

; 110  :     entry_points.Subtruct_I_X = PMC_Subtruct_I_X;

	mov	DWORD PTR _entry_points+72, OFFSET _PMC_Subtruct_I_X@12

; 111  :     entry_points.Subtruct_L_X = PMC_Subtruct_L_X;

	mov	DWORD PTR _entry_points+76, OFFSET _PMC_Subtruct_L_X@16

; 112  :     entry_points.Subtruct_X_I = PMC_Subtruct_X_I;

	mov	DWORD PTR _entry_points+80, OFFSET _PMC_Subtruct_X_I@12

; 113  :     entry_points.Subtruct_X_L = PMC_Subtruct_X_L;

	mov	DWORD PTR _entry_points+84, OFFSET _PMC_Subtruct_X_L@16

; 114  :     entry_points.Subtruct_X_X = PMC_Subtruct_X_X;

	mov	DWORD PTR _entry_points+88, OFFSET _PMC_Subtruct_X_X@12

; 115  :     entry_points.Multiply_I_X = PMC_Multiply_I_X;

	mov	DWORD PTR _entry_points+92, OFFSET _PMC_Multiply_I_X@12

; 116  :     entry_points.Multiply_L_X = PMC_Multiply_L_X;

	mov	DWORD PTR _entry_points+96, OFFSET _PMC_Multiply_L_X@16

; 117  :     entry_points.Multiply_X_I = PMC_Multiply_X_I;

	mov	DWORD PTR _entry_points+100, OFFSET _PMC_Multiply_X_I@12

; 118  :     entry_points.Multiply_X_L = PMC_Multiply_X_L;

	mov	DWORD PTR _entry_points+104, OFFSET _PMC_Multiply_X_L@16

; 119  :     entry_points.Multiply_X_X = PMC_Multiply_X_X;

	mov	DWORD PTR _entry_points+108, OFFSET _PMC_Multiply_X_X@12

; 120  :     entry_points.DivRem_I_X = PMC_DivRem_I_X;

	mov	DWORD PTR _entry_points+112, OFFSET _PMC_DivRem_I_X@16

; 121  :     entry_points.DivRem_L_X = PMC_DivRem_L_X;

	mov	DWORD PTR _entry_points+116, OFFSET _PMC_DivRem_L_X@20

; 122  :     entry_points.DivRem_X_I = PMC_DivRem_X_I;

	mov	DWORD PTR _entry_points+120, OFFSET _PMC_DivRem_X_I@16

; 123  :     entry_points.DivRem_X_L = PMC_DivRem_X_L;

	mov	DWORD PTR _entry_points+124, OFFSET _PMC_DivRem_X_L@20

; 124  :     entry_points.DivRem_X_X = PMC_DivRem_X_X;

	mov	DWORD PTR _entry_points+128, OFFSET _PMC_DivRem_X_X@16

; 125  :     entry_points.RightShift_X_I = PMC_RightShift_X_I;

	mov	DWORD PTR _entry_points+136, OFFSET _PMC_RightShift_X_I@12

; 126  :     entry_points.LeftShift_X_I = PMC_LeftShift_X_I;

	mov	DWORD PTR _entry_points+132, OFFSET _PMC_LeftShift_X_I@12

; 127  :     entry_points.BitwiseAnd_I_X = PMC_BitwiseAnd_I_X;

	mov	DWORD PTR _entry_points+140, OFFSET _PMC_BitwiseAnd_I_X@12

; 128  :     entry_points.BitwiseAnd_L_X = PMC_BitwiseAnd_L_X;

	mov	DWORD PTR _entry_points+144, OFFSET _PMC_BitwiseAnd_L_X@16

; 129  :     entry_points.BitwiseAnd_X_I = PMC_BitwiseAnd_X_I;

	mov	DWORD PTR _entry_points+148, OFFSET _PMC_BitwiseAnd_X_I@12

; 130  :     entry_points.BitwiseAnd_X_L = PMC_BitwiseAnd_X_L;

	mov	DWORD PTR _entry_points+152, OFFSET _PMC_BitwiseAnd_X_L@16

; 131  :     entry_points.BitwiseAnd_X_X = PMC_BitwiseAnd_X_X;

	mov	DWORD PTR _entry_points+156, OFFSET _PMC_BitwiseAnd_X_X@12

; 132  :     entry_points.BitwiseOr_I_X = PMC_BitwiseOr_I_X;

	mov	DWORD PTR _entry_points+160, OFFSET _PMC_BitwiseOr_I_X@12

; 133  :     entry_points.BitwiseOr_L_X = PMC_BitwiseOr_L_X;

	mov	DWORD PTR _entry_points+164, OFFSET _PMC_BitwiseOr_L_X@16

; 134  :     entry_points.BitwiseOr_X_I = PMC_BitwiseOr_X_I;

	mov	DWORD PTR _entry_points+168, OFFSET _PMC_BitwiseOr_X_I@12

; 135  :     entry_points.BitwiseOr_X_L = PMC_BitwiseOr_X_L;

	mov	DWORD PTR _entry_points+172, OFFSET _PMC_BitwiseOr_X_L@16

; 136  :     entry_points.BitwiseOr_X_X = PMC_BitwiseOr_X_X;

	mov	DWORD PTR _entry_points+176, OFFSET _PMC_BitwiseOr_X_X@12

; 137  :     entry_points.ExclusiveOr_I_X = PMC_ExclusiveOr_I_X;

	mov	DWORD PTR _entry_points+180, OFFSET _PMC_ExclusiveOr_I_X@12

; 138  :     entry_points.ExclusiveOr_L_X = PMC_ExclusiveOr_L_X;

	mov	DWORD PTR _entry_points+184, OFFSET _PMC_ExclusiveOr_L_X@16

; 139  :     entry_points.ExclusiveOr_X_I = PMC_ExclusiveOr_X_I;

	mov	DWORD PTR _entry_points+188, OFFSET _PMC_ExclusiveOr_X_I@12

; 140  :     entry_points.ExclusiveOr_X_L = PMC_ExclusiveOr_X_L;

	mov	DWORD PTR _entry_points+192, OFFSET _PMC_ExclusiveOr_X_L@16

; 141  :     entry_points.ExclusiveOr_X_X = PMC_ExclusiveOr_X_X;

	mov	DWORD PTR _entry_points+196, OFFSET _PMC_ExclusiveOr_X_X@12

; 142  :     entry_points.Compare_I_X = PMC_Compare_I_X;

	mov	DWORD PTR _entry_points+200, OFFSET _PMC_Compare_I_X@12

; 143  :     entry_points.Compare_L_X = PMC_Compare_L_X;

	mov	DWORD PTR _entry_points+204, OFFSET _PMC_Compare_L_X@16

; 144  :     entry_points.Compare_X_I = PMC_Compare_X_I;

	mov	DWORD PTR _entry_points+208, OFFSET _PMC_Compare_X_I@12

; 145  :     entry_points.Compare_X_L = PMC_Compare_X_L;

	mov	DWORD PTR _entry_points+212, OFFSET _PMC_Compare_X_L@16

; 146  :     entry_points.Compare_X_X = PMC_Compare_X_X;

	mov	DWORD PTR _entry_points+216, OFFSET _PMC_Compare_X_X@12

; 147  :     entry_points.Equals_I_X = PMC_Equals_I_X;

	mov	DWORD PTR _entry_points+220, OFFSET _PMC_Equals_I_X@12

; 148  :     entry_points.Equals_L_X = PMC_Equals_L_X;

	mov	DWORD PTR _entry_points+224, OFFSET _PMC_Equals_L_X@16

; 149  :     entry_points.Equals_X_I = PMC_Equals_X_I;

	mov	DWORD PTR _entry_points+228, OFFSET _PMC_Equals_X_I@12

; 150  :     entry_points.Equals_X_L = PMC_Equals_X_L;

	mov	DWORD PTR _entry_points+232, OFFSET _PMC_Equals_X_L@16

; 151  :     entry_points.Equals_X_X = PMC_Equals_X_X;

	mov	DWORD PTR _entry_points+236, OFFSET _PMC_Equals_X_X@12

; 152  :     entry_points.GreatestCommonDivisor_I_X = PMC_GreatestCommonDivisor_I_X;

	mov	DWORD PTR _entry_points+240, OFFSET _PMC_GreatestCommonDivisor_I_X@12

; 153  :     entry_points.GreatestCommonDivisor_L_X = PMC_GreatestCommonDivisor_L_X;

	mov	DWORD PTR _entry_points+244, OFFSET _PMC_GreatestCommonDivisor_L_X@16

; 154  :     entry_points.GreatestCommonDivisor_X_I = PMC_GreatestCommonDivisor_X_I;

	mov	DWORD PTR _entry_points+248, OFFSET _PMC_GreatestCommonDivisor_X_I@12

; 155  :     entry_points.GreatestCommonDivisor_X_L = PMC_GreatestCommonDivisor_X_L;

	mov	DWORD PTR _entry_points+252, OFFSET _PMC_GreatestCommonDivisor_X_L@16

; 156  :     entry_points.GreatestCommonDivisor_X_X = PMC_GreatestCommonDivisor_X_X;

	mov	DWORD PTR _entry_points+256, OFFSET _PMC_GreatestCommonDivisor_X_X@12

; 157  :     entry_points.Pow_X_I = PMC_Pow_X_I;

	mov	DWORD PTR _entry_points+260, OFFSET _PMC_Pow_X_I@12

; 158  :     entry_points.ModPow_X_X_X = PMC_ModPow_X_X_X;

	mov	DWORD PTR _entry_points+264, OFFSET _PMC_ModPow_X_X_X@16

; 159  :     entry_points.GetPropertyValue_X_I = PMC_GetPropertyValue_X_I;

	mov	DWORD PTR _entry_points+20, OFFSET _PMC_GetPropertyValue_X_I@12

; 160  :     entry_points.Clone_X = PMC_Clone_X;

	mov	DWORD PTR _entry_points+32, OFFSET _PMC_Clone_X@8

; 161  : 
; 162  :     initialized = 1;

	mov	BYTE PTR _initialized, 1

; 163  :     return (&entry_points);

	mov	eax, OFFSET _entry_points
$LN1@PMC_UINT_I:

; 164  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN26@PMC_UINT_I
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN26@PMC_UINT_I:
	DD	1
	DD	$LN25@PMC_UINT_I
$LN25@PMC_UINT_I:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN24@PMC_UINT_I
$LN24@PMC_UINT_I:
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	0
_PMC_UINT_Initialize@4 ENDP
_TEXT	ENDS
END
