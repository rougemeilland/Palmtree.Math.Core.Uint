; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_initialize.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?configuration_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_CONFIGURATION_INFO@1234@A ; Palmtree::Math::Core::Internal::configuration_info
_BSS	SEGMENT
?configuration_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_CONFIGURATION_INFO@1234@A DB 01H DUP (?) ; Palmtree::Math::Core::Internal::configuration_info
_BSS	ENDS
msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__2088847F_corecrt_memory@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__E9FFF232_guiddef@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__12AD47BB_winuser@h DB 01H
__B4B40122_winioctl@h DB 01H
__A73354DD_stdlib@h DB 01H
__25F3FB34_propidl@h DB 01H
__A40E48B8_oleauto@h DB 01H
__86261D59_stralign@h DB 01H
__331E732B_malloc@h DB 01H
__746E1CEC_xmmintrin@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__6BB7AB7E_pmc_initialize@cpp DB 01H
msvcjmc	ENDS
CONST	SEGMENT
$SG108885 DB	'C', 00H, 'O', 00H, 'M', 00H, 'P', 00H, 'I', 00H, 'L', 00H
	DB	'E', 00H, 'R', 00H, 00H, 00H
	ORG $+2
$SG108886 DB	'M', 00H, 'S', 00H, 'C', 00H, 00H, 00H
$SG108891 DB	'P', 00H, 'L', 00H, 'A', 00H, 'T', 00H, 'F', 00H, 'O', 00H
	DB	'R', 00H, 'M', 00H, 00H, 00H
	ORG $+2
$SG108892 DB	'x', 00H, '8', 00H, '6', 00H, 00H, 00H
CONST	ENDS
PUBLIC	_PMC_UINT_Initialize@4
PUBLIC	?PMC_GetConfigurationSettings@Internal@Core@Math@Palmtree@@YGHPB_WPA_WHPAH@Z ; Palmtree::Math::Core::Internal::PMC_GetConfigurationSettings
PUBLIC	__JustMyCode_Default
EXTRN	__imp__lstrcmpW@8:PROC
EXTRN	__imp__lstrcpyW@8:PROC
EXTRN	?GetCPUInfo@Internal@Core@Math@Palmtree@@YAXPAU_tag_PROCESSOR_FEATURES@1234@@Z:PROC ; Palmtree::Math::Core::Internal::GetCPUInfo
EXTRN	?Initialize_Memory@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z:PROC ; Palmtree::Math::Core::Internal::Initialize_Memory
EXTRN	?Initialize_From@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z:PROC ; Palmtree::Math::Core::Internal::Initialize_From
EXTRN	?Initialize_To@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z:PROC ; Palmtree::Math::Core::Internal::Initialize_To
EXTRN	?Initialize_Add@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z:PROC ; Palmtree::Math::Core::Internal::Initialize_Add
EXTRN	?Initialize_Subtruct@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z:PROC ; Palmtree::Math::Core::Internal::Initialize_Subtruct
EXTRN	?Initialize_Multiply@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z:PROC ; Palmtree::Math::Core::Internal::Initialize_Multiply
EXTRN	?Initialize_DivRem@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z:PROC ; Palmtree::Math::Core::Internal::Initialize_DivRem
EXTRN	?Initialize_Shift@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z:PROC ; Palmtree::Math::Core::Internal::Initialize_Shift
EXTRN	?Initialize_BitwiseAnd@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z:PROC ; Palmtree::Math::Core::Internal::Initialize_BitwiseAnd
EXTRN	?Initialize_BitwiseOr@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z:PROC ; Palmtree::Math::Core::Internal::Initialize_BitwiseOr
EXTRN	?Initialize_ExclusiveOr@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z:PROC ; Palmtree::Math::Core::Internal::Initialize_ExclusiveOr
EXTRN	?Initialize_Compare@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z:PROC ; Palmtree::Math::Core::Internal::Initialize_Compare
EXTRN	?Initialize_Equals@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z:PROC ; Palmtree::Math::Core::Internal::Initialize_Equals
EXTRN	?Initialize_ToString@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z:PROC ; Palmtree::Math::Core::Internal::Initialize_ToString
EXTRN	?Initialize_Parse@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z:PROC ; Palmtree::Math::Core::Internal::Initialize_Parse
EXTRN	?Initialize_GreatestCommonDivisor@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z:PROC ; Palmtree::Math::Core::Internal::Initialize_GreatestCommonDivisor
EXTRN	?Initialize_Pow@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z:PROC ; Palmtree::Math::Core::Internal::Initialize_Pow
EXTRN	?Initialize_ModPow@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z:PROC ; Palmtree::Math::Core::Internal::Initialize_ModPow
EXTRN	?PMC_GetStatisticsInfo@Internal@Core@Math@Palmtree@@YGXPAU__tag_PMC_STATISTICS_INFO@1234@@Z:PROC ; Palmtree::Math::Core::Internal::PMC_GetStatisticsInfo
EXTRN	?PMC_From_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@I@Z:PROC ; Palmtree::Math::Core::Internal::PMC_From_I
EXTRN	?PMC_From_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_K@Z:PROC ; Palmtree::Math::Core::Internal::PMC_From_L
EXTRN	?PMC_Dispose@Internal@Core@Math@Palmtree@@YGXPAU__tag_PMC_HANDLE_UINT@1234@@Z:PROC ; Palmtree::Math::Core::Internal::PMC_Dispose
EXTRN	?PMC_GetConstantValue_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@H@Z:PROC ; Palmtree::Math::Core::Internal::PMC_GetConstantValue_I
EXTRN	?PMC_FromByteArray@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PBEI@Z:PROC ; Palmtree::Math::Core::Internal::PMC_FromByteArray
EXTRN	?PMC_ToByteArray@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@PAEI@Z:PROC ; Palmtree::Math::Core::Internal::PMC_ToByteArray
EXTRN	?PMC_Clone_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@@Z:PROC ; Palmtree::Math::Core::Internal::PMC_Clone_X
EXTRN	?PMC_GetAllocatedMemorySize@Internal@Core@Math@Palmtree@@YG_KXZ:PROC ; Palmtree::Math::Core::Internal::PMC_GetAllocatedMemorySize
EXTRN	?PMC_To_X_I@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@@Z:PROC ; Palmtree::Math::Core::Internal::PMC_To_X_I
EXTRN	?PMC_To_X_L@Internal@Core@Math@Palmtree@@YG_KPAU__tag_PMC_HANDLE_UINT@1234@@Z:PROC ; Palmtree::Math::Core::Internal::PMC_To_X_L
EXTRN	?PMC_InitializeNumberFormatInfo@Internal@Core@Math@Palmtree@@YGXPAU__tag_PMC_NUMBER_FORMAT_INFO@1234@@Z:PROC ; Palmtree::Math::Core::Internal::PMC_InitializeNumberFormatInfo
EXTRN	?PMC_ToString@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@PB_WPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PA_WI@Z:PROC ; Palmtree::Math::Core::Internal::PMC_ToString
EXTRN	?PMC_TryParse@Internal@Core@Math@Palmtree@@YGHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PAPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z:PROC ; Palmtree::Math::Core::Internal::PMC_TryParse
EXTRN	?PMC_Add_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z:PROC ; Palmtree::Math::Core::Internal::PMC_Add_I_X
EXTRN	?PMC_Add_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z:PROC ; Palmtree::Math::Core::Internal::PMC_Add_L_X
EXTRN	?PMC_Add_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z:PROC ; Palmtree::Math::Core::Internal::PMC_Add_X_I
EXTRN	?PMC_Add_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z:PROC ; Palmtree::Math::Core::Internal::PMC_Add_X_L
EXTRN	?PMC_Add_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z:PROC ; Palmtree::Math::Core::Internal::PMC_Add_X_X
EXTRN	?PMC_Subtruct_I_X@Internal@Core@Math@Palmtree@@YGIIPAU__tag_PMC_HANDLE_UINT@1234@@Z:PROC ; Palmtree::Math::Core::Internal::PMC_Subtruct_I_X
EXTRN	?PMC_Subtruct_L_X@Internal@Core@Math@Palmtree@@YG_K_KPAU__tag_PMC_HANDLE_UINT@1234@@Z:PROC ; Palmtree::Math::Core::Internal::PMC_Subtruct_L_X
EXTRN	?PMC_Subtruct_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z:PROC ; Palmtree::Math::Core::Internal::PMC_Subtruct_X_I
EXTRN	?PMC_Subtruct_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z:PROC ; Palmtree::Math::Core::Internal::PMC_Subtruct_X_L
EXTRN	?PMC_Subtruct_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z:PROC ; Palmtree::Math::Core::Internal::PMC_Subtruct_X_X
EXTRN	?PMC_Multiply_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z:PROC ; Palmtree::Math::Core::Internal::PMC_Multiply_I_X
EXTRN	?PMC_Multiply_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z:PROC ; Palmtree::Math::Core::Internal::PMC_Multiply_L_X
EXTRN	?PMC_Multiply_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z:PROC ; Palmtree::Math::Core::Internal::PMC_Multiply_X_I
EXTRN	?PMC_Multiply_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z:PROC ; Palmtree::Math::Core::Internal::PMC_Multiply_X_L
EXTRN	?PMC_Multiply_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z:PROC ; Palmtree::Math::Core::Internal::PMC_Multiply_X_X
EXTRN	?PMC_DivRem_I_X@Internal@Core@Math@Palmtree@@YGIIPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z:PROC ; Palmtree::Math::Core::Internal::PMC_DivRem_I_X
EXTRN	?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YG_K_KPAU__tag_PMC_HANDLE_UINT@1234@PA_K@Z:PROC ; Palmtree::Math::Core::Internal::PMC_DivRem_L_X
EXTRN	?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@IPAPAU51234@@Z:PROC ; Palmtree::Math::Core::Internal::PMC_DivRem_X_I
EXTRN	?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YG_KPAU__tag_PMC_HANDLE_UINT@1234@_KPAPAU51234@@Z:PROC ; Palmtree::Math::Core::Internal::PMC_DivRem_X_L
EXTRN	?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0PAPAU51234@@Z:PROC ; Palmtree::Math::Core::Internal::PMC_DivRem_X_X
EXTRN	?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z:PROC ; Palmtree::Math::Core::Internal::PMC_RightShift_X_I
EXTRN	?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z:PROC ; Palmtree::Math::Core::Internal::PMC_LeftShift_X_I
EXTRN	?PMC_BitwiseAnd_I_X@Internal@Core@Math@Palmtree@@YGIIPAU__tag_PMC_HANDLE_UINT@1234@@Z:PROC ; Palmtree::Math::Core::Internal::PMC_BitwiseAnd_I_X
EXTRN	?PMC_BitwiseAnd_L_X@Internal@Core@Math@Palmtree@@YG_K_KPAU__tag_PMC_HANDLE_UINT@1234@@Z:PROC ; Palmtree::Math::Core::Internal::PMC_BitwiseAnd_L_X
EXTRN	?PMC_BitwiseAnd_X_I@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@I@Z:PROC ; Palmtree::Math::Core::Internal::PMC_BitwiseAnd_X_I
EXTRN	?PMC_BitwiseAnd_X_L@Internal@Core@Math@Palmtree@@YG_KPAU__tag_PMC_HANDLE_UINT@1234@_K@Z:PROC ; Palmtree::Math::Core::Internal::PMC_BitwiseAnd_X_L
EXTRN	?PMC_BitwiseAnd_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z:PROC ; Palmtree::Math::Core::Internal::PMC_BitwiseAnd_X_X
EXTRN	?PMC_BitwiseOr_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z:PROC ; Palmtree::Math::Core::Internal::PMC_BitwiseOr_I_X
EXTRN	?PMC_BitwiseOr_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z:PROC ; Palmtree::Math::Core::Internal::PMC_BitwiseOr_L_X
EXTRN	?PMC_BitwiseOr_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z:PROC ; Palmtree::Math::Core::Internal::PMC_BitwiseOr_X_I
EXTRN	?PMC_BitwiseOr_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z:PROC ; Palmtree::Math::Core::Internal::PMC_BitwiseOr_X_L
EXTRN	?PMC_BitwiseOr_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z:PROC ; Palmtree::Math::Core::Internal::PMC_BitwiseOr_X_X
EXTRN	?PMC_ExclusiveOr_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z:PROC ; Palmtree::Math::Core::Internal::PMC_ExclusiveOr_I_X
EXTRN	?PMC_ExclusiveOr_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z:PROC ; Palmtree::Math::Core::Internal::PMC_ExclusiveOr_L_X
EXTRN	?PMC_ExclusiveOr_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z:PROC ; Palmtree::Math::Core::Internal::PMC_ExclusiveOr_X_I
EXTRN	?PMC_ExclusiveOr_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z:PROC ; Palmtree::Math::Core::Internal::PMC_ExclusiveOr_X_L
EXTRN	?PMC_ExclusiveOr_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z:PROC ; Palmtree::Math::Core::Internal::PMC_ExclusiveOr_X_X
EXTRN	?PMC_Compare_I_X@Internal@Core@Math@Palmtree@@YGHIPAU__tag_PMC_HANDLE_UINT@1234@@Z:PROC ; Palmtree::Math::Core::Internal::PMC_Compare_I_X
EXTRN	?PMC_Compare_L_X@Internal@Core@Math@Palmtree@@YGH_KPAU__tag_PMC_HANDLE_UINT@1234@@Z:PROC ; Palmtree::Math::Core::Internal::PMC_Compare_L_X
EXTRN	?PMC_Compare_X_I@Internal@Core@Math@Palmtree@@YGHPAU__tag_PMC_HANDLE_UINT@1234@I@Z:PROC ; Palmtree::Math::Core::Internal::PMC_Compare_X_I
EXTRN	?PMC_Compare_X_L@Internal@Core@Math@Palmtree@@YGHPAU__tag_PMC_HANDLE_UINT@1234@_K@Z:PROC ; Palmtree::Math::Core::Internal::PMC_Compare_X_L
EXTRN	?PMC_Compare_X_X@Internal@Core@Math@Palmtree@@YGHPAU__tag_PMC_HANDLE_UINT@1234@0@Z:PROC ; Palmtree::Math::Core::Internal::PMC_Compare_X_X
EXTRN	?PMC_Equals_I_X@Internal@Core@Math@Palmtree@@YGIIPAU__tag_PMC_HANDLE_UINT@1234@@Z:PROC ; Palmtree::Math::Core::Internal::PMC_Equals_I_X
EXTRN	?PMC_Equals_L_X@Internal@Core@Math@Palmtree@@YGI_KPAU__tag_PMC_HANDLE_UINT@1234@@Z:PROC ; Palmtree::Math::Core::Internal::PMC_Equals_L_X
EXTRN	?PMC_Equals_X_I@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@I@Z:PROC ; Palmtree::Math::Core::Internal::PMC_Equals_X_I
EXTRN	?PMC_Equals_X_L@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@_K@Z:PROC ; Palmtree::Math::Core::Internal::PMC_Equals_X_L
EXTRN	?PMC_Equals_X_X@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@0@Z:PROC ; Palmtree::Math::Core::Internal::PMC_Equals_X_X
EXTRN	?PMC_GreatestCommonDivisor_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z:PROC ; Palmtree::Math::Core::Internal::PMC_GreatestCommonDivisor_I_X
EXTRN	?PMC_GreatestCommonDivisor_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z:PROC ; Palmtree::Math::Core::Internal::PMC_GreatestCommonDivisor_L_X
EXTRN	?PMC_GreatestCommonDivisor_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z:PROC ; Palmtree::Math::Core::Internal::PMC_GreatestCommonDivisor_X_I
EXTRN	?PMC_GreatestCommonDivisor_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z:PROC ; Palmtree::Math::Core::Internal::PMC_GreatestCommonDivisor_X_L
EXTRN	?PMC_GreatestCommonDivisor_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z:PROC ; Palmtree::Math::Core::Internal::PMC_GreatestCommonDivisor_X_X
EXTRN	?PMC_Pow_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z:PROC ; Palmtree::Math::Core::Internal::PMC_Pow_X_I
EXTRN	?PMC_Pow_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z:PROC ; Palmtree::Math::Core::Internal::PMC_Pow_X_L
EXTRN	?PMC_ModPow_X_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@00@Z:PROC ; Palmtree::Math::Core::Internal::PMC_ModPow_X_X_X
EXTRN	?PMC_FromByteArrayForSINT@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAEIPAD@Z:PROC ; Palmtree::Math::Core::Internal::PMC_FromByteArrayForSINT
EXTRN	?PMC_ToByteArrayForSINT@Internal@Core@Math@Palmtree@@YGIDPAU__tag_PMC_HANDLE_UINT@1234@PAEI@Z:PROC ; Palmtree::Math::Core::Internal::PMC_ToByteArrayForSINT
EXTRN	?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YGHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z:PROC ; Palmtree::Math::Core::Internal::PMC_TryParseForSINT
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
	ALIGN	4

?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A DB 0128H DUP (?) ; Palmtree::Math::Core::Internal::entry_points
?initialized@Internal@Core@Math@Palmtree@@3DA DB 01H DUP (?) ; Palmtree::Math::Core::Internal::initialized
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_initialize.cpp
_TEXT	SEGMENT
_handle$ = -56						; size = 4
_nh$ = -48						; size = 44
?SelfCheck@Internal@Core@Math@Palmtree@@YAHXZ PROC	; Palmtree::Math::Core::Internal::SelfCheck

; 90   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	57		 push	 edi
  00007	8d 7d c8	 lea	 edi, DWORD PTR [ebp-56]
  0000a	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET __6BB7AB7E_pmc_initialize@cpp
  0001b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 91   :         NUMBER_HEADER nh;
; 92   :         PMC_HANDLE_UINT handle = (PMC_HANDLE_UINT)&nh;

  00020	8d 45 d0	 lea	 eax, DWORD PTR _nh$[ebp]
  00023	89 45 c8	 mov	 DWORD PTR _handle$[ebp], eax

; 93   : 
; 94   :         _ZERO_MEMORY_BYTE(&nh, sizeof(nh));

  00026	6a 2c		 push	 44			; 0000002cH
  00028	8d 4d d0	 lea	 ecx, DWORD PTR _nh$[ebp]
  0002b	51		 push	 ecx
  0002c	e8 00 00 00 00	 call	 __ZERO_MEMORY_BYTE
  00031	83 c4 08	 add	 esp, 8

; 95   :         nh.HASH_CODE = 0x12345678;

  00034	c7 45 d0 78 56
	34 12		 mov	 DWORD PTR _nh$[ebp], 305419896 ; 12345678H

; 96   :         if (handle->HASH_CODE != 0x12345678)

  0003b	8b 55 c8	 mov	 edx, DWORD PTR _handle$[ebp]
  0003e	81 3a 78 56 34
	12		 cmp	 DWORD PTR [edx], 305419896 ; 12345678H
  00044	74 07		 je	 SHORT $LN2@SelfCheck

; 97   :             return (FALSE);

  00046	33 c0		 xor	 eax, eax
  00048	e9 a5 00 00 00	 jmp	 $LN1@SelfCheck
$LN2@SelfCheck:

; 98   : 
; 99   :         _ZERO_MEMORY_BYTE(&nh, sizeof(nh));

  0004d	6a 2c		 push	 44			; 0000002cH
  0004f	8d 45 d0	 lea	 eax, DWORD PTR _nh$[ebp]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 __ZERO_MEMORY_BYTE
  00058	83 c4 08	 add	 esp, 8

; 100  :         nh.IS_EVEN = TRUE;

  0005b	8b 4d d4	 mov	 ecx, DWORD PTR _nh$[ebp+4]
  0005e	83 c9 04	 or	 ecx, 4
  00061	89 4d d4	 mov	 DWORD PTR _nh$[ebp+4], ecx

; 101  :         if (!handle->FLAGS.IS_EVEN)

  00064	8b 55 c8	 mov	 edx, DWORD PTR _handle$[ebp]
  00067	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0006a	c1 e8 02	 shr	 eax, 2
  0006d	83 e0 01	 and	 eax, 1
  00070	75 04		 jne	 SHORT $LN3@SelfCheck

; 102  :             return (FALSE);

  00072	33 c0		 xor	 eax, eax
  00074	eb 7c		 jmp	 SHORT $LN1@SelfCheck
$LN3@SelfCheck:

; 103  : 
; 104  :         _ZERO_MEMORY_BYTE(&nh, sizeof(nh));

  00076	6a 2c		 push	 44			; 0000002cH
  00078	8d 4d d0	 lea	 ecx, DWORD PTR _nh$[ebp]
  0007b	51		 push	 ecx
  0007c	e8 00 00 00 00	 call	 __ZERO_MEMORY_BYTE
  00081	83 c4 08	 add	 esp, 8

; 105  :         nh.IS_ONE = TRUE;

  00084	8b 55 d4	 mov	 edx, DWORD PTR _nh$[ebp+4]
  00087	83 ca 02	 or	 edx, 2
  0008a	89 55 d4	 mov	 DWORD PTR _nh$[ebp+4], edx

; 106  :         if (!handle->FLAGS.IS_ONE)

  0008d	8b 45 c8	 mov	 eax, DWORD PTR _handle$[ebp]
  00090	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00093	d1 e9		 shr	 ecx, 1
  00095	83 e1 01	 and	 ecx, 1
  00098	75 04		 jne	 SHORT $LN4@SelfCheck

; 107  :             return (FALSE);

  0009a	33 c0		 xor	 eax, eax
  0009c	eb 54		 jmp	 SHORT $LN1@SelfCheck
$LN4@SelfCheck:

; 108  : 
; 109  :         _ZERO_MEMORY_BYTE(&nh, sizeof(nh));

  0009e	6a 2c		 push	 44			; 0000002cH
  000a0	8d 55 d0	 lea	 edx, DWORD PTR _nh$[ebp]
  000a3	52		 push	 edx
  000a4	e8 00 00 00 00	 call	 __ZERO_MEMORY_BYTE
  000a9	83 c4 08	 add	 esp, 8

; 110  :         nh.IS_POWER_OF_TWO = TRUE;

  000ac	8b 45 d4	 mov	 eax, DWORD PTR _nh$[ebp+4]
  000af	83 c8 08	 or	 eax, 8
  000b2	89 45 d4	 mov	 DWORD PTR _nh$[ebp+4], eax

; 111  :         if (!handle->FLAGS.IS_POWER_OF_TWO)

  000b5	8b 4d c8	 mov	 ecx, DWORD PTR _handle$[ebp]
  000b8	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000bb	c1 ea 03	 shr	 edx, 3
  000be	83 e2 01	 and	 edx, 1
  000c1	75 04		 jne	 SHORT $LN5@SelfCheck

; 112  :             return (FALSE);

  000c3	33 c0		 xor	 eax, eax
  000c5	eb 2b		 jmp	 SHORT $LN1@SelfCheck
$LN5@SelfCheck:

; 113  : 
; 114  :         _ZERO_MEMORY_BYTE(&nh, sizeof(nh));

  000c7	6a 2c		 push	 44			; 0000002cH
  000c9	8d 45 d0	 lea	 eax, DWORD PTR _nh$[ebp]
  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 __ZERO_MEMORY_BYTE
  000d2	83 c4 08	 add	 esp, 8

; 115  :         nh.IS_ZERO = TRUE;

  000d5	8b 4d d4	 mov	 ecx, DWORD PTR _nh$[ebp+4]
  000d8	83 c9 01	 or	 ecx, 1
  000db	89 4d d4	 mov	 DWORD PTR _nh$[ebp+4], ecx

; 116  :         if (!handle->FLAGS.IS_ZERO)

  000de	8b 55 c8	 mov	 edx, DWORD PTR _handle$[ebp]
  000e1	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000e4	83 e0 01	 and	 eax, 1
  000e7	75 04		 jne	 SHORT $LN6@SelfCheck

; 117  :             return (FALSE);

  000e9	33 c0		 xor	 eax, eax
  000eb	eb 05		 jmp	 SHORT $LN1@SelfCheck
$LN6@SelfCheck:

; 118  : 
; 119  :         return(TRUE);

  000ed	b8 01 00 00 00	 mov	 eax, 1
$LN1@SelfCheck:

; 120  :     }

  000f2	52		 push	 edx
  000f3	8b cd		 mov	 ecx, ebp
  000f5	50		 push	 eax
  000f6	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@SelfCheck
  000fc	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00101	58		 pop	 eax
  00102	5a		 pop	 edx
  00103	5f		 pop	 edi
  00104	83 c4 38	 add	 esp, 56			; 00000038H
  00107	3b ec		 cmp	 ebp, esp
  00109	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010e	8b e5		 mov	 esp, ebp
  00110	5d		 pop	 ebp
  00111	c3		 ret	 0
  00112	66 90		 npad	 2
$LN10@SelfCheck:
  00114	01 00 00 00	 DD	 1
  00118	00 00 00 00	 DD	 $LN9@SelfCheck
$LN9@SelfCheck:
  0011c	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00120	2c 00 00 00	 DD	 44			; 0000002cH
  00124	00 00 00 00	 DD	 $LN8@SelfCheck
$LN8@SelfCheck:
  00128	6e		 DB	 110			; 0000006eH
  00129	68		 DB	 104			; 00000068H
  0012a	00		 DB	 0
?SelfCheck@Internal@Core@Math@Palmtree@@YAHXZ ENDP	; Palmtree::Math::Core::Internal::SelfCheck
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_count$ = 12						; size = 4
__ZERO_MEMORY_BYTE PROC

; 74   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00009	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 75   :             __stosb((unsigned char*)d, 0, count);

  0000e	8b 7d 08	 mov	 edi, DWORD PTR _d$[ebp]
  00011	32 c0		 xor	 al, al
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR _count$[ebp]
  00016	f3 aa		 rep stosb

; 76   :         }

  00018	5f		 pop	 edi
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
__ZERO_MEMORY_BYTE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_initialize.cpp
_TEXT	SEGMENT
_value$1 = -32						; size = 8
_value$2 = -16						; size = 8
__$ArrayPad$ = -4					; size = 4
_key$ = 8						; size = 4
_value_buffer$ = 12					; size = 4
_value_buffer_size$ = 16				; size = 4
_count$ = 20						; size = 4
?PMC_GetConfigurationSettings@Internal@Core@Math@Palmtree@@YGHPB_WPA_WHPAH@Z PROC ; Palmtree::Math::Core::Internal::PMC_GetConfigurationSettings

; 44   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0000f	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00012	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00015	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00018	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0001b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00021	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00024	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002c	33 c5		 xor	 eax, ebp
  0002e	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00031	b9 00 00 00 00	 mov	 ecx, OFFSET __6BB7AB7E_pmc_initialize@cpp
  00036	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 45   :         if (lstrcmpW(key, L"COMPILER") == 0)

  0003b	8b f4		 mov	 esi, esp
  0003d	68 00 00 00 00	 push	 OFFSET $SG108885
  00042	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  00045	50		 push	 eax
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcmpW@8
  0004c	3b f4		 cmp	 esi, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	85 c0		 test	 eax, eax
  00055	75 4e		 jne	 SHORT $LN2@PMC_GetCon

; 46   :         {
; 47   : #ifdef _MSC_VER
; 48   :             const wchar_t value[] = L"MSC";

  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR $SG108886
  0005d	89 4d f0	 mov	 DWORD PTR _value$2[ebp], ecx
  00060	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR $SG108886+4
  00066	89 55 f4	 mov	 DWORD PTR _value$2[ebp+4], edx

; 49   : #elif defined(__GNUC__)
; 50   :             const wchar_t value[] = L"GNUC";
; 51   : #else
; 52   : #error unknwon compiler
; 53   : #endif
; 54   :             if (value_buffer != nullptr)

  00069	83 7d 0c 00	 cmp	 DWORD PTR _value_buffer$[ebp], 0
  0006d	74 27		 je	 SHORT $LN4@PMC_GetCon

; 55   :             {
; 56   :                 if (value_buffer_size < countof(value))

  0006f	83 7d 10 04	 cmp	 DWORD PTR _value_buffer_size$[ebp], 4
  00073	73 0a		 jae	 SHORT $LN5@PMC_GetCon

; 57   :                     return (PMC_STATUS_INSUFFICIENT_BUFFER);

  00075	b8 f8 ff ff ff	 mov	 eax, -8			; fffffff8H
  0007a	e9 99 00 00 00	 jmp	 $LN1@PMC_GetCon
$LN5@PMC_GetCon:

; 58   :                 lstrcpyW(value_buffer, value);

  0007f	8b f4		 mov	 esi, esp
  00081	8d 45 f0	 lea	 eax, DWORD PTR _value$2[ebp]
  00084	50		 push	 eax
  00085	8b 4d 0c	 mov	 ecx, DWORD PTR _value_buffer$[ebp]
  00088	51		 push	 ecx
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpyW@8
  0008f	3b f4		 cmp	 esi, esp
  00091	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN4@PMC_GetCon:

; 59   :             }
; 60   :             *count = countof(value);

  00096	8b 55 14	 mov	 edx, DWORD PTR _count$[ebp]
  00099	c7 02 04 00 00
	00		 mov	 DWORD PTR [edx], 4

; 61   :             return (PMC_STATUS_OK);

  0009f	33 c0		 xor	 eax, eax
  000a1	eb 75		 jmp	 SHORT $LN1@PMC_GetCon
  000a3	eb 73		 jmp	 SHORT $LN1@PMC_GetCon
$LN2@PMC_GetCon:

; 62   :         }
; 63   :         else if (lstrcmpW(key, L"PLATFORM") == 0)

  000a5	8b f4		 mov	 esi, esp
  000a7	68 00 00 00 00	 push	 OFFSET $SG108891
  000ac	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  000af	50		 push	 eax
  000b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcmpW@8
  000b6	3b f4		 cmp	 esi, esp
  000b8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bd	85 c0		 test	 eax, eax
  000bf	75 4b		 jne	 SHORT $LN6@PMC_GetCon

; 64   :         {
; 65   : #ifdef _M_IX86
; 66   :             const wchar_t value[] = L"x86";

  000c1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR $SG108892
  000c7	89 4d e0	 mov	 DWORD PTR _value$1[ebp], ecx
  000ca	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR $SG108892+4
  000d0	89 55 e4	 mov	 DWORD PTR _value$1[ebp+4], edx

; 67   : #elif defined(_M_X64)
; 68   :             const wchar_t value[] = L"x64";
; 69   : #else
; 70   : #error unknwon compiler
; 71   : #endif
; 72   :             if (value_buffer != nullptr)

  000d3	83 7d 0c 00	 cmp	 DWORD PTR _value_buffer$[ebp], 0
  000d7	74 24		 je	 SHORT $LN8@PMC_GetCon

; 73   :             {
; 74   :                 if (value_buffer_size < countof(value))

  000d9	83 7d 10 04	 cmp	 DWORD PTR _value_buffer_size$[ebp], 4
  000dd	73 07		 jae	 SHORT $LN9@PMC_GetCon

; 75   :                     return (PMC_STATUS_INSUFFICIENT_BUFFER);

  000df	b8 f8 ff ff ff	 mov	 eax, -8			; fffffff8H
  000e4	eb 32		 jmp	 SHORT $LN1@PMC_GetCon
$LN9@PMC_GetCon:

; 76   :                 lstrcpyW(value_buffer, value);

  000e6	8b f4		 mov	 esi, esp
  000e8	8d 45 e0	 lea	 eax, DWORD PTR _value$1[ebp]
  000eb	50		 push	 eax
  000ec	8b 4d 0c	 mov	 ecx, DWORD PTR _value_buffer$[ebp]
  000ef	51		 push	 ecx
  000f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpyW@8
  000f6	3b f4		 cmp	 esi, esp
  000f8	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN8@PMC_GetCon:

; 77   :             }
; 78   :             *count = countof(value);

  000fd	8b 55 14	 mov	 edx, DWORD PTR _count$[ebp]
  00100	c7 02 04 00 00
	00		 mov	 DWORD PTR [edx], 4

; 79   :             return (PMC_STATUS_OK);

  00106	33 c0		 xor	 eax, eax
  00108	eb 0e		 jmp	 SHORT $LN1@PMC_GetCon

; 80   :         }
; 81   :         else

  0010a	eb 0c		 jmp	 SHORT $LN1@PMC_GetCon
$LN6@PMC_GetCon:

; 82   :         {
; 83   :             *count = -1;

  0010c	8b 45 14	 mov	 eax, DWORD PTR _count$[ebp]
  0010f	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1

; 84   :             return (PMC_STATUS_ARGUMENT_ERROR);

  00115	83 c8 ff	 or	 eax, -1
$LN1@PMC_GetCon:

; 85   :         }
; 86   :     }

  00118	52		 push	 edx
  00119	8b cd		 mov	 ecx, ebp
  0011b	50		 push	 eax
  0011c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN14@PMC_GetCon
  00122	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00127	58		 pop	 eax
  00128	5a		 pop	 edx
  00129	5e		 pop	 esi
  0012a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012d	33 cd		 xor	 ecx, ebp
  0012f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00134	83 c4 24	 add	 esp, 36			; 00000024H
  00137	3b ec		 cmp	 ebp, esp
  00139	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013e	8b e5		 mov	 esp, ebp
  00140	5d		 pop	 ebp
  00141	c2 10 00	 ret	 16			; 00000010H
$LN14@PMC_GetCon:
  00144	02 00 00 00	 DD	 2
  00148	00 00 00 00	 DD	 $LN13@PMC_GetCon
$LN13@PMC_GetCon:
  0014c	f0 ff ff ff	 DD	 -16			; fffffff0H
  00150	08 00 00 00	 DD	 8
  00154	00 00 00 00	 DD	 $LN11@PMC_GetCon
  00158	e0 ff ff ff	 DD	 -32			; ffffffe0H
  0015c	08 00 00 00	 DD	 8
  00160	00 00 00 00	 DD	 $LN12@PMC_GetCon
$LN12@PMC_GetCon:
  00164	76		 DB	 118			; 00000076H
  00165	61		 DB	 97			; 00000061H
  00166	6c		 DB	 108			; 0000006cH
  00167	75		 DB	 117			; 00000075H
  00168	65		 DB	 101			; 00000065H
  00169	00		 DB	 0
$LN11@PMC_GetCon:
  0016a	76		 DB	 118			; 00000076H
  0016b	61		 DB	 97			; 00000061H
  0016c	6c		 DB	 108			; 0000006cH
  0016d	75		 DB	 117			; 00000075H
  0016e	65		 DB	 101			; 00000065H
  0016f	00		 DB	 0
?PMC_GetConfigurationSettings@Internal@Core@Math@Palmtree@@YGHPB_WPA_WHPAH@Z ENDP ; Palmtree::Math::Core::Internal::PMC_GetConfigurationSettings
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_initialize.cpp
_TEXT	SEGMENT
_feature$1 = -8						; size = 4
_config$ = 8						; size = 4
_PMC_UINT_Initialize@4 PROC

; 123  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __6BB7AB7E_pmc_initialize@cpp
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 124  :         if (!initialized)

  00025	0f be 05 00 00
	00 00		 movsx	 eax, BYTE PTR ?initialized@Internal@Core@Math@Palmtree@@3DA
  0002c	85 c0		 test	 eax, eax
  0002e	0f 85 3b 05 00
	00		 jne	 $LN2@PMC_UINT_I

; 125  :         {
; 126  :             if (!SelfCheck())

  00034	e8 00 00 00 00	 call	 ?SelfCheck@Internal@Core@Math@Palmtree@@YAHXZ ; Palmtree::Math::Core::Internal::SelfCheck
  00039	85 c0		 test	 eax, eax
  0003b	75 07		 jne	 SHORT $LN3@PMC_UINT_I

; 127  :                 return (nullptr);

  0003d	33 c0		 xor	 eax, eax
  0003f	e9 30 05 00 00	 jmp	 $LN1@PMC_UINT_I
$LN3@PMC_UINT_I:

; 128  : 
; 129  :             PROCESSOR_FEATURES feature;
; 130  :             GetCPUInfo(&feature);

  00044	8d 4d f8	 lea	 ecx, DWORD PTR _feature$1[ebp]
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 ?GetCPUInfo@Internal@Core@Math@Palmtree@@YAXPAU_tag_PROCESSOR_FEATURES@1234@@Z ; Palmtree::Math::Core::Internal::GetCPUInfo
  0004d	83 c4 04	 add	 esp, 4

; 131  :             configuration_info = *config;

  00050	8b 55 08	 mov	 edx, DWORD PTR _config$[ebp]
  00053	8a 02		 mov	 al, BYTE PTR [edx]
  00055	a2 00 00 00 00	 mov	 BYTE PTR ?configuration_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_CONFIGURATION_INFO@1234@A, al ; Palmtree::Math::Core::Internal::configuration_info

; 132  :             if (Initialize_Memory(&feature) != PMC_STATUS_OK)

  0005a	8d 4d f8	 lea	 ecx, DWORD PTR _feature$1[ebp]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 ?Initialize_Memory@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ; Palmtree::Math::Core::Internal::Initialize_Memory
  00063	83 c4 04	 add	 esp, 4
  00066	85 c0		 test	 eax, eax
  00068	74 07		 je	 SHORT $LN4@PMC_UINT_I

; 133  :                 return (nullptr);

  0006a	33 c0		 xor	 eax, eax
  0006c	e9 03 05 00 00	 jmp	 $LN1@PMC_UINT_I
$LN4@PMC_UINT_I:

; 134  :             if (Initialize_From(&feature) != PMC_STATUS_OK)

  00071	8d 55 f8	 lea	 edx, DWORD PTR _feature$1[ebp]
  00074	52		 push	 edx
  00075	e8 00 00 00 00	 call	 ?Initialize_From@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ; Palmtree::Math::Core::Internal::Initialize_From
  0007a	83 c4 04	 add	 esp, 4
  0007d	85 c0		 test	 eax, eax
  0007f	74 07		 je	 SHORT $LN5@PMC_UINT_I

; 135  :                 return (nullptr);

  00081	33 c0		 xor	 eax, eax
  00083	e9 ec 04 00 00	 jmp	 $LN1@PMC_UINT_I
$LN5@PMC_UINT_I:

; 136  :             if (Initialize_To(&feature) != PMC_STATUS_OK)

  00088	8d 45 f8	 lea	 eax, DWORD PTR _feature$1[ebp]
  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 ?Initialize_To@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ; Palmtree::Math::Core::Internal::Initialize_To
  00091	83 c4 04	 add	 esp, 4
  00094	85 c0		 test	 eax, eax
  00096	74 07		 je	 SHORT $LN6@PMC_UINT_I

; 137  :                 return (nullptr);

  00098	33 c0		 xor	 eax, eax
  0009a	e9 d5 04 00 00	 jmp	 $LN1@PMC_UINT_I
$LN6@PMC_UINT_I:

; 138  :             if (Initialize_Add(&feature) != PMC_STATUS_OK)

  0009f	8d 4d f8	 lea	 ecx, DWORD PTR _feature$1[ebp]
  000a2	51		 push	 ecx
  000a3	e8 00 00 00 00	 call	 ?Initialize_Add@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ; Palmtree::Math::Core::Internal::Initialize_Add
  000a8	83 c4 04	 add	 esp, 4
  000ab	85 c0		 test	 eax, eax
  000ad	74 07		 je	 SHORT $LN7@PMC_UINT_I

; 139  :                 return (nullptr);

  000af	33 c0		 xor	 eax, eax
  000b1	e9 be 04 00 00	 jmp	 $LN1@PMC_UINT_I
$LN7@PMC_UINT_I:

; 140  :             if (Initialize_Subtruct(&feature) != PMC_STATUS_OK)

  000b6	8d 55 f8	 lea	 edx, DWORD PTR _feature$1[ebp]
  000b9	52		 push	 edx
  000ba	e8 00 00 00 00	 call	 ?Initialize_Subtruct@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ; Palmtree::Math::Core::Internal::Initialize_Subtruct
  000bf	83 c4 04	 add	 esp, 4
  000c2	85 c0		 test	 eax, eax
  000c4	74 07		 je	 SHORT $LN8@PMC_UINT_I

; 141  :                 return (nullptr);

  000c6	33 c0		 xor	 eax, eax
  000c8	e9 a7 04 00 00	 jmp	 $LN1@PMC_UINT_I
$LN8@PMC_UINT_I:

; 142  :             if (Initialize_Multiply(&feature) != PMC_STATUS_OK)

  000cd	8d 45 f8	 lea	 eax, DWORD PTR _feature$1[ebp]
  000d0	50		 push	 eax
  000d1	e8 00 00 00 00	 call	 ?Initialize_Multiply@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ; Palmtree::Math::Core::Internal::Initialize_Multiply
  000d6	83 c4 04	 add	 esp, 4
  000d9	85 c0		 test	 eax, eax
  000db	74 07		 je	 SHORT $LN9@PMC_UINT_I

; 143  :                 return (nullptr);

  000dd	33 c0		 xor	 eax, eax
  000df	e9 90 04 00 00	 jmp	 $LN1@PMC_UINT_I
$LN9@PMC_UINT_I:

; 144  :             if (Initialize_DivRem(&feature) != PMC_STATUS_OK)

  000e4	8d 4d f8	 lea	 ecx, DWORD PTR _feature$1[ebp]
  000e7	51		 push	 ecx
  000e8	e8 00 00 00 00	 call	 ?Initialize_DivRem@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ; Palmtree::Math::Core::Internal::Initialize_DivRem
  000ed	83 c4 04	 add	 esp, 4
  000f0	85 c0		 test	 eax, eax
  000f2	74 07		 je	 SHORT $LN10@PMC_UINT_I

; 145  :                 return (nullptr);

  000f4	33 c0		 xor	 eax, eax
  000f6	e9 79 04 00 00	 jmp	 $LN1@PMC_UINT_I
$LN10@PMC_UINT_I:

; 146  :             if (Initialize_Shift(&feature) != PMC_STATUS_OK)

  000fb	8d 55 f8	 lea	 edx, DWORD PTR _feature$1[ebp]
  000fe	52		 push	 edx
  000ff	e8 00 00 00 00	 call	 ?Initialize_Shift@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ; Palmtree::Math::Core::Internal::Initialize_Shift
  00104	83 c4 04	 add	 esp, 4
  00107	85 c0		 test	 eax, eax
  00109	74 07		 je	 SHORT $LN11@PMC_UINT_I

; 147  :                 return (nullptr);

  0010b	33 c0		 xor	 eax, eax
  0010d	e9 62 04 00 00	 jmp	 $LN1@PMC_UINT_I
$LN11@PMC_UINT_I:

; 148  :             if (Initialize_BitwiseAnd(&feature) != PMC_STATUS_OK)

  00112	8d 45 f8	 lea	 eax, DWORD PTR _feature$1[ebp]
  00115	50		 push	 eax
  00116	e8 00 00 00 00	 call	 ?Initialize_BitwiseAnd@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ; Palmtree::Math::Core::Internal::Initialize_BitwiseAnd
  0011b	83 c4 04	 add	 esp, 4
  0011e	85 c0		 test	 eax, eax
  00120	74 07		 je	 SHORT $LN12@PMC_UINT_I

; 149  :                 return (nullptr);

  00122	33 c0		 xor	 eax, eax
  00124	e9 4b 04 00 00	 jmp	 $LN1@PMC_UINT_I
$LN12@PMC_UINT_I:

; 150  :             if (Initialize_BitwiseOr(&feature) != PMC_STATUS_OK)

  00129	8d 4d f8	 lea	 ecx, DWORD PTR _feature$1[ebp]
  0012c	51		 push	 ecx
  0012d	e8 00 00 00 00	 call	 ?Initialize_BitwiseOr@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ; Palmtree::Math::Core::Internal::Initialize_BitwiseOr
  00132	83 c4 04	 add	 esp, 4
  00135	85 c0		 test	 eax, eax
  00137	74 07		 je	 SHORT $LN13@PMC_UINT_I

; 151  :                 return (nullptr);

  00139	33 c0		 xor	 eax, eax
  0013b	e9 34 04 00 00	 jmp	 $LN1@PMC_UINT_I
$LN13@PMC_UINT_I:

; 152  :             if (Initialize_ExclusiveOr(&feature) != PMC_STATUS_OK)

  00140	8d 55 f8	 lea	 edx, DWORD PTR _feature$1[ebp]
  00143	52		 push	 edx
  00144	e8 00 00 00 00	 call	 ?Initialize_ExclusiveOr@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ; Palmtree::Math::Core::Internal::Initialize_ExclusiveOr
  00149	83 c4 04	 add	 esp, 4
  0014c	85 c0		 test	 eax, eax
  0014e	74 07		 je	 SHORT $LN14@PMC_UINT_I

; 153  :                 return (nullptr);

  00150	33 c0		 xor	 eax, eax
  00152	e9 1d 04 00 00	 jmp	 $LN1@PMC_UINT_I
$LN14@PMC_UINT_I:

; 154  :             if (Initialize_Compare(&feature) != PMC_STATUS_OK)

  00157	8d 45 f8	 lea	 eax, DWORD PTR _feature$1[ebp]
  0015a	50		 push	 eax
  0015b	e8 00 00 00 00	 call	 ?Initialize_Compare@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ; Palmtree::Math::Core::Internal::Initialize_Compare
  00160	83 c4 04	 add	 esp, 4
  00163	85 c0		 test	 eax, eax
  00165	74 07		 je	 SHORT $LN15@PMC_UINT_I

; 155  :                 return (nullptr);

  00167	33 c0		 xor	 eax, eax
  00169	e9 06 04 00 00	 jmp	 $LN1@PMC_UINT_I
$LN15@PMC_UINT_I:

; 156  :             if (Initialize_Equals(&feature) != PMC_STATUS_OK)

  0016e	8d 4d f8	 lea	 ecx, DWORD PTR _feature$1[ebp]
  00171	51		 push	 ecx
  00172	e8 00 00 00 00	 call	 ?Initialize_Equals@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ; Palmtree::Math::Core::Internal::Initialize_Equals
  00177	83 c4 04	 add	 esp, 4
  0017a	85 c0		 test	 eax, eax
  0017c	74 07		 je	 SHORT $LN16@PMC_UINT_I

; 157  :                 return (nullptr);

  0017e	33 c0		 xor	 eax, eax
  00180	e9 ef 03 00 00	 jmp	 $LN1@PMC_UINT_I
$LN16@PMC_UINT_I:

; 158  :             if (Initialize_ToString(&feature) != PMC_STATUS_OK)

  00185	8d 55 f8	 lea	 edx, DWORD PTR _feature$1[ebp]
  00188	52		 push	 edx
  00189	e8 00 00 00 00	 call	 ?Initialize_ToString@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ; Palmtree::Math::Core::Internal::Initialize_ToString
  0018e	83 c4 04	 add	 esp, 4
  00191	85 c0		 test	 eax, eax
  00193	74 07		 je	 SHORT $LN17@PMC_UINT_I

; 159  :                 return (nullptr);

  00195	33 c0		 xor	 eax, eax
  00197	e9 d8 03 00 00	 jmp	 $LN1@PMC_UINT_I
$LN17@PMC_UINT_I:

; 160  :             if (Initialize_Parse(&feature) != PMC_STATUS_OK)

  0019c	8d 45 f8	 lea	 eax, DWORD PTR _feature$1[ebp]
  0019f	50		 push	 eax
  001a0	e8 00 00 00 00	 call	 ?Initialize_Parse@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ; Palmtree::Math::Core::Internal::Initialize_Parse
  001a5	83 c4 04	 add	 esp, 4
  001a8	85 c0		 test	 eax, eax
  001aa	74 07		 je	 SHORT $LN18@PMC_UINT_I

; 161  :                 return (nullptr);

  001ac	33 c0		 xor	 eax, eax
  001ae	e9 c1 03 00 00	 jmp	 $LN1@PMC_UINT_I
$LN18@PMC_UINT_I:

; 162  :             if (Initialize_GreatestCommonDivisor(&feature) != PMC_STATUS_OK)

  001b3	8d 4d f8	 lea	 ecx, DWORD PTR _feature$1[ebp]
  001b6	51		 push	 ecx
  001b7	e8 00 00 00 00	 call	 ?Initialize_GreatestCommonDivisor@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ; Palmtree::Math::Core::Internal::Initialize_GreatestCommonDivisor
  001bc	83 c4 04	 add	 esp, 4
  001bf	85 c0		 test	 eax, eax
  001c1	74 07		 je	 SHORT $LN19@PMC_UINT_I

; 163  :                 return (nullptr);

  001c3	33 c0		 xor	 eax, eax
  001c5	e9 aa 03 00 00	 jmp	 $LN1@PMC_UINT_I
$LN19@PMC_UINT_I:

; 164  :             if (Initialize_Pow(&feature) != PMC_STATUS_OK)

  001ca	8d 55 f8	 lea	 edx, DWORD PTR _feature$1[ebp]
  001cd	52		 push	 edx
  001ce	e8 00 00 00 00	 call	 ?Initialize_Pow@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ; Palmtree::Math::Core::Internal::Initialize_Pow
  001d3	83 c4 04	 add	 esp, 4
  001d6	85 c0		 test	 eax, eax
  001d8	74 07		 je	 SHORT $LN20@PMC_UINT_I

; 165  :                 return (nullptr);

  001da	33 c0		 xor	 eax, eax
  001dc	e9 93 03 00 00	 jmp	 $LN1@PMC_UINT_I
$LN20@PMC_UINT_I:

; 166  :             if (Initialize_ModPow(&feature) != PMC_STATUS_OK)

  001e1	8d 45 f8	 lea	 eax, DWORD PTR _feature$1[ebp]
  001e4	50		 push	 eax
  001e5	e8 00 00 00 00	 call	 ?Initialize_ModPow@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ; Palmtree::Math::Core::Internal::Initialize_ModPow
  001ea	83 c4 04	 add	 esp, 4
  001ed	85 c0		 test	 eax, eax
  001ef	74 07		 je	 SHORT $LN21@PMC_UINT_I

; 167  :                 return (nullptr);

  001f1	33 c0		 xor	 eax, eax
  001f3	e9 7c 03 00 00	 jmp	 $LN1@PMC_UINT_I
$LN21@PMC_UINT_I:

; 168  : 
; 169  :             entry_points.PROCESSOR_FEATURE_POPCNT = feature.PROCESSOR_FEATURE_POPCNT;

  001f8	8b 4d f8	 mov	 ecx, DWORD PTR _feature$1[ebp]
  001fb	83 e1 01	 and	 ecx, 1
  001fe	83 e1 01	 and	 ecx, 1
  00201	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A
  00207	83 e2 fe	 and	 edx, -2			; fffffffeH
  0020a	0b d1		 or	 edx, ecx
  0020c	89 15 00 00 00
	00		 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A, edx

; 170  :             entry_points.PROCESSOR_FEATURE_ADX = feature.PROCESSOR_FEATURE_ADX;

  00212	8b 45 f8	 mov	 eax, DWORD PTR _feature$1[ebp]
  00215	d1 e8		 shr	 eax, 1
  00217	83 e0 01	 and	 eax, 1
  0021a	83 e0 01	 and	 eax, 1
  0021d	d1 e0		 shl	 eax, 1
  0021f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A
  00225	83 e1 fd	 and	 ecx, -3			; fffffffdH
  00228	0b c8		 or	 ecx, eax
  0022a	89 0d 00 00 00
	00		 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A, ecx

; 171  :             entry_points.PROCESSOR_FEATURE_BMI1 = feature.PROCESSOR_FEATURE_BMI1;

  00230	8b 55 f8	 mov	 edx, DWORD PTR _feature$1[ebp]
  00233	c1 ea 02	 shr	 edx, 2
  00236	83 e2 01	 and	 edx, 1
  00239	83 e2 01	 and	 edx, 1
  0023c	c1 e2 02	 shl	 edx, 2
  0023f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A
  00244	83 e0 fb	 and	 eax, -5			; fffffffbH
  00247	0b c2		 or	 eax, edx
  00249	a3 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A, eax

; 172  :             entry_points.PROCESSOR_FEATURE_BMI2 = feature.PROCESSOR_FEATURE_BMI2;

  0024e	8b 4d f8	 mov	 ecx, DWORD PTR _feature$1[ebp]
  00251	c1 e9 03	 shr	 ecx, 3
  00254	83 e1 01	 and	 ecx, 1
  00257	83 e1 01	 and	 ecx, 1
  0025a	c1 e1 03	 shl	 ecx, 3
  0025d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A
  00263	83 e2 f7	 and	 edx, -9			; fffffff7H
  00266	0b d1		 or	 edx, ecx
  00268	89 15 00 00 00
	00		 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A, edx

; 173  :             entry_points.PROCESSOR_FEATURE_ABM = feature.PROCESSOR_FEATURE_ABM;

  0026e	8b 45 f8	 mov	 eax, DWORD PTR _feature$1[ebp]
  00271	c1 e8 04	 shr	 eax, 4
  00274	83 e0 01	 and	 eax, 1
  00277	83 e0 01	 and	 eax, 1
  0027a	c1 e0 04	 shl	 eax, 4
  0027d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A
  00283	83 e1 ef	 and	 ecx, -17		; ffffffefH
  00286	0b c8		 or	 ecx, eax
  00288	89 0d 00 00 00
	00		 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A, ecx

; 174  :             entry_points.GetConfigurationSettings = PMC_GetConfigurationSettings;

  0028e	c7 05 04 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+4, OFFSET ?PMC_GetConfigurationSettings@Internal@Core@Math@Palmtree@@YGHPB_WPA_WHPAH@Z ; Palmtree::Math::Core::Internal::PMC_GetConfigurationSettings

; 175  :             entry_points.GetStatisticsInfo = PMC_GetStatisticsInfo;

  00298	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+8, OFFSET ?PMC_GetStatisticsInfo@Internal@Core@Math@Palmtree@@YGXPAU__tag_PMC_STATISTICS_INFO@1234@@Z ; Palmtree::Math::Core::Internal::PMC_GetStatisticsInfo

; 176  :             entry_points.From_I = PMC_From_I;

  002a2	c7 05 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+12, OFFSET ?PMC_From_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@I@Z ; Palmtree::Math::Core::Internal::PMC_From_I

; 177  :             entry_points.From_L = PMC_From_L;

  002ac	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+16, OFFSET ?PMC_From_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_K@Z ; Palmtree::Math::Core::Internal::PMC_From_L

; 178  :             entry_points.Dispose = PMC_Dispose;

  002b6	c7 05 14 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+20, OFFSET ?PMC_Dispose@Internal@Core@Math@Palmtree@@YGXPAU__tag_PMC_HANDLE_UINT@1234@@Z ; Palmtree::Math::Core::Internal::PMC_Dispose

; 179  :             entry_points.To_X_I = PMC_To_X_I;

  002c0	c7 05 2c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+44, OFFSET ?PMC_To_X_I@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@@Z ; Palmtree::Math::Core::Internal::PMC_To_X_I

; 180  :             entry_points.To_X_L = PMC_To_X_L;

  002ca	c7 05 30 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+48, OFFSET ?PMC_To_X_L@Internal@Core@Math@Palmtree@@YG_KPAU__tag_PMC_HANDLE_UINT@1234@@Z ; Palmtree::Math::Core::Internal::PMC_To_X_L

; 181  :             entry_points.FromByteArray = PMC_FromByteArray;

  002d4	c7 05 1c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+28, OFFSET ?PMC_FromByteArray@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PBEI@Z ; Palmtree::Math::Core::Internal::PMC_FromByteArray

; 182  :             entry_points.ToByteArray = PMC_ToByteArray;

  002de	c7 05 20 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+32, OFFSET ?PMC_ToByteArray@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@PAEI@Z ; Palmtree::Math::Core::Internal::PMC_ToByteArray

; 183  :             entry_points.InitializeNumberFormatInfo = PMC_InitializeNumberFormatInfo;

  002e8	c7 05 34 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+52, OFFSET ?PMC_InitializeNumberFormatInfo@Internal@Core@Math@Palmtree@@YGXPAU__tag_PMC_NUMBER_FORMAT_INFO@1234@@Z ; Palmtree::Math::Core::Internal::PMC_InitializeNumberFormatInfo

; 184  :             entry_points.ToString = PMC_ToString;

  002f2	c7 05 38 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+56, OFFSET ?PMC_ToString@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@PB_WPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PA_WI@Z ; Palmtree::Math::Core::Internal::PMC_ToString

; 185  :             entry_points.TryParse = PMC_TryParse;

  002fc	c7 05 3c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+60, OFFSET ?PMC_TryParse@Internal@Core@Math@Palmtree@@YGHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PAPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z ; Palmtree::Math::Core::Internal::PMC_TryParse

; 186  :             entry_points.Add_I_X = PMC_Add_I_X;

  00306	c7 05 40 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+64, OFFSET ?PMC_Add_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_Add_I_X

; 187  :             entry_points.Add_L_X = PMC_Add_L_X;

  00310	c7 05 44 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+68, OFFSET ?PMC_Add_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_Add_L_X

; 188  :             entry_points.Add_X_I = PMC_Add_X_I;

  0031a	c7 05 48 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+72, OFFSET ?PMC_Add_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_Add_X_I

; 189  :             entry_points.Add_X_L = PMC_Add_X_L;

  00324	c7 05 4c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+76, OFFSET ?PMC_Add_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z ; Palmtree::Math::Core::Internal::PMC_Add_X_L

; 190  :             entry_points.Add_X_X = PMC_Add_X_X;

  0032e	c7 05 50 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+80, OFFSET ?PMC_Add_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z ; Palmtree::Math::Core::Internal::PMC_Add_X_X

; 191  :             entry_points.Subtruct_I_X = PMC_Subtruct_I_X;

  00338	c7 05 54 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+84, OFFSET ?PMC_Subtruct_I_X@Internal@Core@Math@Palmtree@@YGIIPAU__tag_PMC_HANDLE_UINT@1234@@Z ; Palmtree::Math::Core::Internal::PMC_Subtruct_I_X

; 192  :             entry_points.Subtruct_L_X = PMC_Subtruct_L_X;

  00342	c7 05 58 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+88, OFFSET ?PMC_Subtruct_L_X@Internal@Core@Math@Palmtree@@YG_K_KPAU__tag_PMC_HANDLE_UINT@1234@@Z ; Palmtree::Math::Core::Internal::PMC_Subtruct_L_X

; 193  :             entry_points.Subtruct_X_I = PMC_Subtruct_X_I;

  0034c	c7 05 5c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+92, OFFSET ?PMC_Subtruct_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_Subtruct_X_I

; 194  :             entry_points.Subtruct_X_L = PMC_Subtruct_X_L;

  00356	c7 05 60 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+96, OFFSET ?PMC_Subtruct_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z ; Palmtree::Math::Core::Internal::PMC_Subtruct_X_L

; 195  :             entry_points.Subtruct_X_X = PMC_Subtruct_X_X;

  00360	c7 05 64 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+100, OFFSET ?PMC_Subtruct_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z ; Palmtree::Math::Core::Internal::PMC_Subtruct_X_X

; 196  :             entry_points.Multiply_I_X = PMC_Multiply_I_X;

  0036a	c7 05 68 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+104, OFFSET ?PMC_Multiply_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_Multiply_I_X

; 197  :             entry_points.Multiply_L_X = PMC_Multiply_L_X;

  00374	c7 05 6c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+108, OFFSET ?PMC_Multiply_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_Multiply_L_X

; 198  :             entry_points.Multiply_X_I = PMC_Multiply_X_I;

  0037e	c7 05 70 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+112, OFFSET ?PMC_Multiply_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_Multiply_X_I

; 199  :             entry_points.Multiply_X_L = PMC_Multiply_X_L;

  00388	c7 05 74 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+116, OFFSET ?PMC_Multiply_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z ; Palmtree::Math::Core::Internal::PMC_Multiply_X_L

; 200  :             entry_points.Multiply_X_X = PMC_Multiply_X_X;

  00392	c7 05 78 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+120, OFFSET ?PMC_Multiply_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z ; Palmtree::Math::Core::Internal::PMC_Multiply_X_X

; 201  :             entry_points.DivRem_I_X = PMC_DivRem_I_X;

  0039c	c7 05 7c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+124, OFFSET ?PMC_DivRem_I_X@Internal@Core@Math@Palmtree@@YGIIPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z ; Palmtree::Math::Core::Internal::PMC_DivRem_I_X

; 202  :             entry_points.DivRem_L_X = PMC_DivRem_L_X;

  003a6	c7 05 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+128, OFFSET ?PMC_DivRem_L_X@Internal@Core@Math@Palmtree@@YG_K_KPAU__tag_PMC_HANDLE_UINT@1234@PA_K@Z ; Palmtree::Math::Core::Internal::PMC_DivRem_L_X

; 203  :             entry_points.DivRem_X_I = PMC_DivRem_X_I;

  003b0	c7 05 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+132, OFFSET ?PMC_DivRem_X_I@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@IPAPAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_DivRem_X_I

; 204  :             entry_points.DivRem_X_L = PMC_DivRem_X_L;

  003ba	c7 05 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+136, OFFSET ?PMC_DivRem_X_L@Internal@Core@Math@Palmtree@@YG_KPAU__tag_PMC_HANDLE_UINT@1234@_KPAPAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_DivRem_X_L

; 205  :             entry_points.DivRem_X_X = PMC_DivRem_X_X;

  003c4	c7 05 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+140, OFFSET ?PMC_DivRem_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0PAPAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_DivRem_X_X

; 206  :             entry_points.RightShift_X_I = PMC_RightShift_X_I;

  003ce	c7 05 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+148, OFFSET ?PMC_RightShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z ; Palmtree::Math::Core::Internal::PMC_RightShift_X_I

; 207  :             entry_points.LeftShift_X_I = PMC_LeftShift_X_I;

  003d8	c7 05 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+144, OFFSET ?PMC_LeftShift_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@H@Z ; Palmtree::Math::Core::Internal::PMC_LeftShift_X_I

; 208  :             entry_points.BitwiseAnd_I_X = PMC_BitwiseAnd_I_X;

  003e2	c7 05 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+152, OFFSET ?PMC_BitwiseAnd_I_X@Internal@Core@Math@Palmtree@@YGIIPAU__tag_PMC_HANDLE_UINT@1234@@Z ; Palmtree::Math::Core::Internal::PMC_BitwiseAnd_I_X

; 209  :             entry_points.BitwiseAnd_L_X = PMC_BitwiseAnd_L_X;

  003ec	c7 05 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+156, OFFSET ?PMC_BitwiseAnd_L_X@Internal@Core@Math@Palmtree@@YG_K_KPAU__tag_PMC_HANDLE_UINT@1234@@Z ; Palmtree::Math::Core::Internal::PMC_BitwiseAnd_L_X

; 210  :             entry_points.BitwiseAnd_X_I = PMC_BitwiseAnd_X_I;

  003f6	c7 05 a0 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+160, OFFSET ?PMC_BitwiseAnd_X_I@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@I@Z ; Palmtree::Math::Core::Internal::PMC_BitwiseAnd_X_I

; 211  :             entry_points.BitwiseAnd_X_L = PMC_BitwiseAnd_X_L;

  00400	c7 05 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+164, OFFSET ?PMC_BitwiseAnd_X_L@Internal@Core@Math@Palmtree@@YG_KPAU__tag_PMC_HANDLE_UINT@1234@_K@Z ; Palmtree::Math::Core::Internal::PMC_BitwiseAnd_X_L

; 212  :             entry_points.BitwiseAnd_X_X = PMC_BitwiseAnd_X_X;

  0040a	c7 05 a8 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+168, OFFSET ?PMC_BitwiseAnd_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z ; Palmtree::Math::Core::Internal::PMC_BitwiseAnd_X_X

; 213  :             entry_points.BitwiseOr_I_X = PMC_BitwiseOr_I_X;

  00414	c7 05 ac 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+172, OFFSET ?PMC_BitwiseOr_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_BitwiseOr_I_X

; 214  :             entry_points.BitwiseOr_L_X = PMC_BitwiseOr_L_X;

  0041e	c7 05 b0 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+176, OFFSET ?PMC_BitwiseOr_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_BitwiseOr_L_X

; 215  :             entry_points.BitwiseOr_X_I = PMC_BitwiseOr_X_I;

  00428	c7 05 b4 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+180, OFFSET ?PMC_BitwiseOr_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_BitwiseOr_X_I

; 216  :             entry_points.BitwiseOr_X_L = PMC_BitwiseOr_X_L;

  00432	c7 05 b8 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+184, OFFSET ?PMC_BitwiseOr_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z ; Palmtree::Math::Core::Internal::PMC_BitwiseOr_X_L

; 217  :             entry_points.BitwiseOr_X_X = PMC_BitwiseOr_X_X;

  0043c	c7 05 bc 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+188, OFFSET ?PMC_BitwiseOr_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z ; Palmtree::Math::Core::Internal::PMC_BitwiseOr_X_X

; 218  :             entry_points.ExclusiveOr_I_X = PMC_ExclusiveOr_I_X;

  00446	c7 05 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+192, OFFSET ?PMC_ExclusiveOr_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_ExclusiveOr_I_X

; 219  :             entry_points.ExclusiveOr_L_X = PMC_ExclusiveOr_L_X;

  00450	c7 05 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+196, OFFSET ?PMC_ExclusiveOr_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_ExclusiveOr_L_X

; 220  :             entry_points.ExclusiveOr_X_I = PMC_ExclusiveOr_X_I;

  0045a	c7 05 c8 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+200, OFFSET ?PMC_ExclusiveOr_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_ExclusiveOr_X_I

; 221  :             entry_points.ExclusiveOr_X_L = PMC_ExclusiveOr_X_L;

  00464	c7 05 cc 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+204, OFFSET ?PMC_ExclusiveOr_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z ; Palmtree::Math::Core::Internal::PMC_ExclusiveOr_X_L

; 222  :             entry_points.ExclusiveOr_X_X = PMC_ExclusiveOr_X_X;

  0046e	c7 05 d0 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+208, OFFSET ?PMC_ExclusiveOr_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z ; Palmtree::Math::Core::Internal::PMC_ExclusiveOr_X_X

; 223  :             entry_points.Compare_I_X = PMC_Compare_I_X;

  00478	c7 05 d4 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+212, OFFSET ?PMC_Compare_I_X@Internal@Core@Math@Palmtree@@YGHIPAU__tag_PMC_HANDLE_UINT@1234@@Z ; Palmtree::Math::Core::Internal::PMC_Compare_I_X

; 224  :             entry_points.Compare_L_X = PMC_Compare_L_X;

  00482	c7 05 d8 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+216, OFFSET ?PMC_Compare_L_X@Internal@Core@Math@Palmtree@@YGH_KPAU__tag_PMC_HANDLE_UINT@1234@@Z ; Palmtree::Math::Core::Internal::PMC_Compare_L_X

; 225  :             entry_points.Compare_X_I = PMC_Compare_X_I;

  0048c	c7 05 dc 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+220, OFFSET ?PMC_Compare_X_I@Internal@Core@Math@Palmtree@@YGHPAU__tag_PMC_HANDLE_UINT@1234@I@Z ; Palmtree::Math::Core::Internal::PMC_Compare_X_I

; 226  :             entry_points.Compare_X_L = PMC_Compare_X_L;

  00496	c7 05 e0 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+224, OFFSET ?PMC_Compare_X_L@Internal@Core@Math@Palmtree@@YGHPAU__tag_PMC_HANDLE_UINT@1234@_K@Z ; Palmtree::Math::Core::Internal::PMC_Compare_X_L

; 227  :             entry_points.Compare_X_X = PMC_Compare_X_X;

  004a0	c7 05 e4 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+228, OFFSET ?PMC_Compare_X_X@Internal@Core@Math@Palmtree@@YGHPAU__tag_PMC_HANDLE_UINT@1234@0@Z ; Palmtree::Math::Core::Internal::PMC_Compare_X_X

; 228  :             entry_points.Equals_I_X = PMC_Equals_I_X;

  004aa	c7 05 e8 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+232, OFFSET ?PMC_Equals_I_X@Internal@Core@Math@Palmtree@@YGIIPAU__tag_PMC_HANDLE_UINT@1234@@Z ; Palmtree::Math::Core::Internal::PMC_Equals_I_X

; 229  :             entry_points.Equals_L_X = PMC_Equals_L_X;

  004b4	c7 05 ec 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+236, OFFSET ?PMC_Equals_L_X@Internal@Core@Math@Palmtree@@YGI_KPAU__tag_PMC_HANDLE_UINT@1234@@Z ; Palmtree::Math::Core::Internal::PMC_Equals_L_X

; 230  :             entry_points.Equals_X_I = PMC_Equals_X_I;

  004be	c7 05 f0 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+240, OFFSET ?PMC_Equals_X_I@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@I@Z ; Palmtree::Math::Core::Internal::PMC_Equals_X_I

; 231  :             entry_points.Equals_X_L = PMC_Equals_X_L;

  004c8	c7 05 f4 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+244, OFFSET ?PMC_Equals_X_L@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@_K@Z ; Palmtree::Math::Core::Internal::PMC_Equals_X_L

; 232  :             entry_points.Equals_X_X = PMC_Equals_X_X;

  004d2	c7 05 f8 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+248, OFFSET ?PMC_Equals_X_X@Internal@Core@Math@Palmtree@@YGIPAU__tag_PMC_HANDLE_UINT@1234@0@Z ; Palmtree::Math::Core::Internal::PMC_Equals_X_X

; 233  :             entry_points.GreatestCommonDivisor_I_X = PMC_GreatestCommonDivisor_I_X;

  004dc	c7 05 fc 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+252, OFFSET ?PMC_GreatestCommonDivisor_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_GreatestCommonDivisor_I_X

; 234  :             entry_points.GreatestCommonDivisor_L_X = PMC_GreatestCommonDivisor_L_X;

  004e6	c7 05 00 01 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+256, OFFSET ?PMC_GreatestCommonDivisor_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_GreatestCommonDivisor_L_X

; 235  :             entry_points.GreatestCommonDivisor_X_I = PMC_GreatestCommonDivisor_X_I;

  004f0	c7 05 04 01 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+260, OFFSET ?PMC_GreatestCommonDivisor_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_GreatestCommonDivisor_X_I

; 236  :             entry_points.GreatestCommonDivisor_X_L = PMC_GreatestCommonDivisor_X_L;

  004fa	c7 05 08 01 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+264, OFFSET ?PMC_GreatestCommonDivisor_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z ; Palmtree::Math::Core::Internal::PMC_GreatestCommonDivisor_X_L

; 237  :             entry_points.GreatestCommonDivisor_X_X = PMC_GreatestCommonDivisor_X_X;

  00504	c7 05 0c 01 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+268, OFFSET ?PMC_GreatestCommonDivisor_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z ; Palmtree::Math::Core::Internal::PMC_GreatestCommonDivisor_X_X

; 238  :             entry_points.Pow_X_I = PMC_Pow_X_I;

  0050e	c7 05 10 01 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+272, OFFSET ?PMC_Pow_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_Pow_X_I

; 239  :             entry_points.Pow_X_L = PMC_Pow_X_L;

  00518	c7 05 14 01 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+276, OFFSET ?PMC_Pow_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z ; Palmtree::Math::Core::Internal::PMC_Pow_X_L

; 240  :             entry_points.ModPow_X_X_X = PMC_ModPow_X_X_X;

  00522	c7 05 18 01 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+280, OFFSET ?PMC_ModPow_X_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@00@Z ; Palmtree::Math::Core::Internal::PMC_ModPow_X_X_X

; 241  :             entry_points.GetConstantValue_I = PMC_GetConstantValue_I;

  0052c	c7 05 18 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+24, OFFSET ?PMC_GetConstantValue_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@H@Z ; Palmtree::Math::Core::Internal::PMC_GetConstantValue_I

; 242  :             entry_points.Clone_X = PMC_Clone_X;

  00536	c7 05 24 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+36, OFFSET ?PMC_Clone_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_Clone_X

; 243  :             entry_points.GetAllocatedMemorySize = PMC_GetAllocatedMemorySize;

  00540	c7 05 28 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+40, OFFSET ?PMC_GetAllocatedMemorySize@Internal@Core@Math@Palmtree@@YG_KXZ ; Palmtree::Math::Core::Internal::PMC_GetAllocatedMemorySize

; 244  : 
; 245  :             entry_points.FromByteArrayForSINT = PMC_FromByteArrayForSINT;

  0054a	c7 05 1c 01 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+284, OFFSET ?PMC_FromByteArrayForSINT@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAEIPAD@Z ; Palmtree::Math::Core::Internal::PMC_FromByteArrayForSINT

; 246  :             entry_points.ToByteArrayForSINT = PMC_ToByteArrayForSINT;

  00554	c7 05 20 01 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+288, OFFSET ?PMC_ToByteArrayForSINT@Internal@Core@Math@Palmtree@@YGIDPAU__tag_PMC_HANDLE_UINT@1234@PAEI@Z ; Palmtree::Math::Core::Internal::PMC_ToByteArrayForSINT

; 247  :             entry_points.TryParseForSINT = PMC_TryParseForSINT;

  0055e	c7 05 24 01 00
	00 00 00 00 00	 mov	 DWORD PTR ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A+292, OFFSET ?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YGHPB_WHPBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PADPAPAU__tag_PMC_HANDLE_UINT@1234@PAI@Z ; Palmtree::Math::Core::Internal::PMC_TryParseForSINT

; 248  : 
; 249  :             initialized = 1;

  00568	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?initialized@Internal@Core@Math@Palmtree@@3DA, 1
$LN2@PMC_UINT_I:

; 250  :         }
; 251  : 
; 252  :         return (&entry_points);

  0056f	b8 00 00 00 00	 mov	 eax, OFFSET ?entry_points@Internal@Core@Math@Palmtree@@3U__tag_PMC_UINT_ENTRY_POINTS@1234@A
$LN1@PMC_UINT_I:

; 253  :     }

  00574	52		 push	 edx
  00575	8b cd		 mov	 ecx, ebp
  00577	50		 push	 eax
  00578	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN25@PMC_UINT_I
  0057e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00583	58		 pop	 eax
  00584	5a		 pop	 edx
  00585	83 c4 0c	 add	 esp, 12			; 0000000cH
  00588	3b ec		 cmp	 ebp, esp
  0058a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0058f	8b e5		 mov	 esp, ebp
  00591	5d		 pop	 ebp
  00592	c2 04 00	 ret	 4
  00595	0f 1f 00	 npad	 3
$LN25@PMC_UINT_I:
  00598	01 00 00 00	 DD	 1
  0059c	00 00 00 00	 DD	 $LN24@PMC_UINT_I
$LN24@PMC_UINT_I:
  005a0	f8 ff ff ff	 DD	 -8			; fffffff8H
  005a4	04 00 00 00	 DD	 4
  005a8	00 00 00 00	 DD	 $LN23@PMC_UINT_I
$LN23@PMC_UINT_I:
  005ac	66		 DB	 102			; 00000066H
  005ad	65		 DB	 101			; 00000065H
  005ae	61		 DB	 97			; 00000061H
  005af	74		 DB	 116			; 00000074H
  005b0	75		 DB	 117			; 00000075H
  005b1	72		 DB	 114			; 00000072H
  005b2	65		 DB	 101			; 00000065H
  005b3	00		 DB	 0
_PMC_UINT_Initialize@4 ENDP
_TEXT	ENDS
END
