; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_divrem.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__E05E7037_autogenerated_inline_func@h DB 01H
__531E8CBE_pmc_divrem@c DB 01H
msvcjmc	ENDS
PUBLIC	_DivRem_X_1W
PUBLIC	_DivRem_X_X
PUBLIC	_Initialize_DivRem
PUBLIC	_PMC_DivRem_I_X@16
PUBLIC	_PMC_DivRem_L_X@20
PUBLIC	_PMC_DivRem_X_I@16
PUBLIC	_PMC_DivRem_X_L@20
PUBLIC	_PMC_DivRem_X_X@16
PUBLIC	__JustMyCode_Default
EXTRN	_AllocateBlock:PROC
EXTRN	_DeallocateBlock:PROC
EXTRN	_CheckBlockLight:PROC
EXTRN	_AllocateNumber:PROC
EXTRN	_DeallocateNumber:PROC
EXTRN	_CommitNumber:PROC
EXTRN	_CheckNumber:PROC
EXTRN	_DuplicateNumber:PROC
EXTRN	_RightShift_Imp_DIV:PROC
EXTRN	_LeftShift_Imp_DIV:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__allshl:PROC
EXTRN	__aulldiv:PROC
EXTRN	__aullrem:PROC
EXTRN	__aullshr:PROC
EXTRN	_number_zero:BYTE
EXTRN	_statistics_info:BYTE
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
_fp_DivRem_X_X DD 01H DUP (?)
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
_TEXT	SEGMENT
_q_$1 = -16						; size = 4
_q_index$ = -12						; size = 4
_work_u_buf$ = -8					; size = 4
_d_factor$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_v_buf$ = 16						; size = 4
_v_buf_len$ = 20					; size = 4
_work_v_buf$ = 24					; size = 4
_q_buf$ = 28						; size = 4
_r_buf$ = 32						; size = 4
_DivRem_X_X_using_ADX_MULX PROC

; 965  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __531E8CBE_pmc_divrem@c
	call	@__CheckForDebuggerJustMyCode@4

; 966  :     // u および v の最上位ワードは 0 でありうることに注意すること。
; 967  :     if (sizeof(__UNIT_TYPE) != sizeof(__UNIT_TYPE_DIV))

	xor	eax, eax
	je	SHORT $LN10@DivRem_X_X
$LN2@DivRem_X_X:

; 968  :     {
; 969  :         while (u_buf[u_buf_len - 1] == 0)

	mov	ecx, DWORD PTR _u_buf_len$[ebp]
	mov	edx, DWORD PTR _u_buf$[ebp]
	cmp	DWORD PTR [edx+ecx*4-4], 0
	jne	SHORT $LN4@DivRem_X_X

; 970  :             --u_buf_len;

	mov	eax, DWORD PTR _u_buf_len$[ebp]
	sub	eax, 1
	mov	DWORD PTR _u_buf_len$[ebp], eax
	jmp	SHORT $LN2@DivRem_X_X
$LN4@DivRem_X_X:

; 971  :         while (v_buf[v_buf_len - 1] == 0)

	mov	ecx, DWORD PTR _v_buf_len$[ebp]
	mov	edx, DWORD PTR _v_buf$[ebp]
	cmp	DWORD PTR [edx+ecx*4-4], 0
	jne	SHORT $LN10@DivRem_X_X

; 972  :             --v_buf_len;

	mov	eax, DWORD PTR _v_buf_len$[ebp]
	sub	eax, 1
	mov	DWORD PTR _v_buf_len$[ebp], eax
	jmp	SHORT $LN4@DivRem_X_X
$LN10@DivRem_X_X:

; 973  :     }
; 974  : 
; 975  : #ifdef _DEBUG
; 976  :     if (v_buf[v_buf_len - 1] == 0)
; 977  :     {
; 978  :         ; // このルートには到達しないはず。デバッグ用。
; 979  :     }
; 980  : #endif
; 981  : 
; 982  : #ifdef DO_TRACE
; 983  :     ReportLabel("uとvのシフト");
; 984  :     ReportDump("u", (__UNIT_TYPE*)u_buf, _DIVIDE_CEILING_UNIT(u_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 985  :     ReportDump("v", (__UNIT_TYPE*)v_buf, _DIVIDE_CEILING_UNIT(v_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 986  : #endif
; 987  : 
; 988  :     __UNIT_TYPE_DIV d_factor = _LZCNT_ALT_UNIT_DIV(v_buf[v_buf_len - 1]);

	mov	eax, DWORD PTR _v_buf_len$[ebp]
	mov	ecx, DWORD PTR _v_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4-4]
	push	edx
	call	__LZCNT_ALT_UNIT_DIV
	add	esp, 4
	mov	DWORD PTR _d_factor$[ebp], eax

; 989  :     if (d_factor == 0)

	cmp	DWORD PTR _d_factor$[ebp], 0
	jne	SHORT $LN11@DivRem_X_X

; 990  :     {
; 991  :         _COPY_MEMORY_UNIT_DIV(r_buf, u_buf, u_buf_len);

	mov	eax, DWORD PTR _u_buf_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _r_buf$[ebp]
	push	edx
	call	__COPY_MEMORY_UNIT_DIV
	add	esp, 12					; 0000000cH

; 992  :         _COPY_MEMORY_UNIT_DIV(work_v_buf, v_buf, v_buf_len);

	mov	eax, DWORD PTR _v_buf_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_v_buf$[ebp]
	push	edx
	call	__COPY_MEMORY_UNIT_DIV
	add	esp, 12					; 0000000cH

; 993  :         r_buf[u_buf_len] = 0;

	mov	eax, DWORD PTR _u_buf_len$[ebp]
	mov	ecx, DWORD PTR _r_buf$[ebp]
	mov	DWORD PTR [ecx+eax*4], 0

; 994  :     }

	jmp	SHORT $LN12@DivRem_X_X
$LN11@DivRem_X_X:

; 995  :     else
; 996  :     {
; 997  :         LeftShift_Imp_DIV(u_buf, u_buf_len, d_factor, r_buf, FALSE);

	push	0
	mov	edx, DWORD PTR _r_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _d_factor$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_buf_len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	call	_LeftShift_Imp_DIV
	add	esp, 20					; 00000014H

; 998  :         LeftShift_Imp_DIV(v_buf, v_buf_len, d_factor, work_v_buf, FALSE);

	push	0
	mov	eax, DWORD PTR _work_v_buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _d_factor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_buf_len$[ebp]
	push	edx
	mov	eax, DWORD PTR _v_buf$[ebp]
	push	eax
	call	_LeftShift_Imp_DIV
	add	esp, 20					; 00000014H
$LN12@DivRem_X_X:

; 999  :     }
; 1000 : #ifdef DO_TRACE
; 1001 :     ReportDump("⇒u", (__UNIT_TYPE*)r_buf, _DIVIDE_CEILING_UNIT((u_buf_len + 1) * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1002 :     ReportDump("⇒v", (__UNIT_TYPE*)work_v_buf, _DIVIDE_CEILING_UNIT(v_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1003 : #endif
; 1004 : 
; 1005 :     __UNIT_TYPE_DIV* work_u_buf = r_buf;

	mov	ecx, DWORD PTR _r_buf$[ebp]
	mov	DWORD PTR _work_u_buf$[ebp], ecx

; 1006 :     __UNIT_TYPE q_index = u_buf_len - v_buf_len;

	mov	edx, DWORD PTR _u_buf_len$[ebp]
	sub	edx, DWORD PTR _v_buf_len$[ebp]
	mov	DWORD PTR _q_index$[ebp], edx
$LN8@DivRem_X_X:

; 1007 : 
; 1008 :     for (;;)
; 1009 :     {
; 1010 :         __UNIT_TYPE_DIV q_ = CalculateQ_X(work_u_buf, work_v_buf, v_buf_len, q_index);

	mov	eax, DWORD PTR _q_index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_buf_len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_v_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _work_u_buf$[ebp]
	push	eax
	call	_CalculateQ_X
	add	esp, 16					; 00000010H
	mov	DWORD PTR _q_$1[ebp], eax

; 1011 : 
; 1012 : #ifdef DO_TRACE
; 1013 :         ReportLabel("uの減算");
; 1014 :         ReportDump("u", (__UNIT_TYPE*)work_u_buf, _DIVIDE_CEILING_UNIT(u_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1015 :         ReportDump("v", (__UNIT_TYPE*)work_v_buf, _DIVIDE_CEILING_UNIT(v_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1016 :         ReportVar("q_", q_);
; 1017 : #endif
; 1018 :         if (SubtructOneLineX(work_u_buf, u_buf_len, work_v_buf, v_buf_len, q_index, q_))

	mov	ecx, DWORD PTR _q_$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_index$[ebp]
	push	edx
	mov	eax, DWORD PTR _v_buf_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_v_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_buf_len$[ebp]
	push	edx
	mov	eax, DWORD PTR _work_u_buf$[ebp]
	push	eax
	call	_SubtructOneLineX
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN14@DivRem_X_X

; 1019 :         {
; 1020 : #ifdef DO_TRACE
; 1021 :             ReportDump("⇒u", (__UNIT_TYPE*)work_u_buf, _DIVIDE_CEILING_UNIT(u_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1022 : #endif
; 1023 :             // 桁借りが発生した場合
; 1024 : 
; 1025 : #ifdef DO_TRACE
; 1026 :             ReportLabel("uの加え戻しとq_の更新");
; 1027 :             ReportDump("u", (__UNIT_TYPE*)work_u_buf, _DIVIDE_CEILING_UNIT(u_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1028 : #endif
; 1029 :             --q_;

	mov	ecx, DWORD PTR _q_$1[ebp]
	sub	ecx, 1
	mov	DWORD PTR _q_$1[ebp], ecx

; 1030 :             AddOneLineX(work_u_buf, u_buf_len, work_v_buf, v_buf_len, q_index);

	mov	edx, DWORD PTR _q_index$[ebp]
	push	edx
	mov	eax, DWORD PTR _v_buf_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_v_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_buf_len$[ebp]
	push	edx
	mov	eax, DWORD PTR _work_u_buf$[ebp]
	push	eax
	call	_AddOneLineX
	add	esp, 20					; 00000014H
$LN14@DivRem_X_X:

; 1031 : #ifdef DO_TRACE
; 1032 :             ReportVar("q_", q_);
; 1033 :             ReportDump("⇒u", (__UNIT_TYPE*)work_u_buf, _DIVIDE_CEILING_UNIT(u_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1034 : #endif
; 1035 :         }
; 1036 :         else
; 1037 :         {
; 1038 : #ifdef DO_TRACE
; 1039 :             ReportDump("⇒u", (__UNIT_TYPE*)work_u_buf, _DIVIDE_CEILING_UNIT(u_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1040 : #endif
; 1041 :         }
; 1042 : 
; 1043 :         q_buf[q_index] = q_;

	mov	ecx, DWORD PTR _q_index$[ebp]
	mov	edx, DWORD PTR _q_buf$[ebp]
	mov	eax, DWORD PTR _q_$1[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 1044 : 
; 1045 : #ifdef DO_TRACE
; 1046 :         ReportLabel("qの現在値");
; 1047 :         ReportDump("q", (__UNIT_TYPE*)q_buf, _DIVIDE_CEILING_UNIT((u_buf_len - v_buf_len) * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1048 : #endif
; 1049 : 
; 1050 :         if (q_index == 0)

	cmp	DWORD PTR _q_index$[ebp], 0
	jne	SHORT $LN15@DivRem_X_X

; 1051 :             break;

	jmp	SHORT $LN7@DivRem_X_X
$LN15@DivRem_X_X:

; 1052 :         --q_index;

	mov	ecx, DWORD PTR _q_index$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _q_index$[ebp], ecx

; 1053 :     }

	jmp	$LN8@DivRem_X_X
$LN7@DivRem_X_X:

; 1054 : 
; 1055 :     if (d_factor > 0)

	cmp	DWORD PTR _d_factor$[ebp], 0
	jbe	SHORT $LN1@DivRem_X_X

; 1056 :         RightShift_Imp_DIV(work_u_buf, u_buf_len + 1, d_factor, work_u_buf, FALSE);

	push	0
	mov	edx, DWORD PTR _work_u_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _d_factor$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_buf_len$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _work_u_buf$[ebp]
	push	edx
	call	_RightShift_Imp_DIV
	add	esp, 20					; 00000014H
$LN1@DivRem_X_X:

; 1057 : 
; 1058 : #ifdef DO_TRACE
; 1059 :     ReportLabel("計算終了");
; 1060 :     ReportDump("q", (__UNIT_TYPE*)q_buf, _DIVIDE_CEILING_UNIT((u_buf_len - v_buf_len) * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1061 :     ReportDump("r", (__UNIT_TYPE*)work_u_buf, _DIVIDE_CEILING_UNIT((u_buf_len + 1) * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1062 : #endif
; 1063 : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DivRem_X_X_using_ADX_MULX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
_TEXT	SEGMENT
_q_$1 = -16						; size = 4
_q_index$ = -12						; size = 4
_work_u_buf$ = -8					; size = 4
_d_factor$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_v_buf$ = 16						; size = 4
_v_buf_len$ = 20					; size = 4
_work_v_buf$ = 24					; size = 4
_q_buf$ = 28						; size = 4
_r_buf$ = 32						; size = 4
_DivRem_X_X_using_ADC_MUL PROC

; 909  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __531E8CBE_pmc_divrem@c
	call	@__CheckForDebuggerJustMyCode@4

; 910  :     // u および v の最上位ワードは 0 でありうることに注意すること。
; 911  :     if (sizeof(__UNIT_TYPE) != sizeof(__UNIT_TYPE_DIV))

	xor	eax, eax
	je	SHORT $LN10@DivRem_X_X
$LN2@DivRem_X_X:

; 912  :     {
; 913  :         while (u_buf[u_buf_len - 1] == 0)

	mov	ecx, DWORD PTR _u_buf_len$[ebp]
	mov	edx, DWORD PTR _u_buf$[ebp]
	cmp	DWORD PTR [edx+ecx*4-4], 0
	jne	SHORT $LN4@DivRem_X_X

; 914  :             --u_buf_len;

	mov	eax, DWORD PTR _u_buf_len$[ebp]
	sub	eax, 1
	mov	DWORD PTR _u_buf_len$[ebp], eax
	jmp	SHORT $LN2@DivRem_X_X
$LN4@DivRem_X_X:

; 915  :         while (v_buf[v_buf_len - 1] == 0)

	mov	ecx, DWORD PTR _v_buf_len$[ebp]
	mov	edx, DWORD PTR _v_buf$[ebp]
	cmp	DWORD PTR [edx+ecx*4-4], 0
	jne	SHORT $LN10@DivRem_X_X

; 916  :             --v_buf_len;

	mov	eax, DWORD PTR _v_buf_len$[ebp]
	sub	eax, 1
	mov	DWORD PTR _v_buf_len$[ebp], eax
	jmp	SHORT $LN4@DivRem_X_X
$LN10@DivRem_X_X:

; 917  :     }
; 918  : 
; 919  : #ifdef _DEBUG
; 920  :     if (v_buf[v_buf_len - 1] == 0)
; 921  :     {
; 922  :         ; // このルートには到達しないはず。デバッグ用。
; 923  :     }
; 924  : #endif
; 925  : 
; 926  :     __UNIT_TYPE_DIV d_factor = _LZCNT_ALT_UNIT_DIV(v_buf[v_buf_len - 1]);

	mov	eax, DWORD PTR _v_buf_len$[ebp]
	mov	ecx, DWORD PTR _v_buf$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4-4]
	push	edx
	call	__LZCNT_ALT_UNIT_DIV
	add	esp, 4
	mov	DWORD PTR _d_factor$[ebp], eax

; 927  :     if (d_factor == 0)

	cmp	DWORD PTR _d_factor$[ebp], 0
	jne	SHORT $LN11@DivRem_X_X

; 928  :     {
; 929  :         _COPY_MEMORY_UNIT_DIV(r_buf, u_buf, u_buf_len);

	mov	eax, DWORD PTR _u_buf_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _r_buf$[ebp]
	push	edx
	call	__COPY_MEMORY_UNIT_DIV
	add	esp, 12					; 0000000cH

; 930  :         _COPY_MEMORY_UNIT_DIV(work_v_buf, v_buf, v_buf_len);

	mov	eax, DWORD PTR _v_buf_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_v_buf$[ebp]
	push	edx
	call	__COPY_MEMORY_UNIT_DIV
	add	esp, 12					; 0000000cH

; 931  :         r_buf[u_buf_len] = 0;

	mov	eax, DWORD PTR _u_buf_len$[ebp]
	mov	ecx, DWORD PTR _r_buf$[ebp]
	mov	DWORD PTR [ecx+eax*4], 0

; 932  :     }

	jmp	SHORT $LN12@DivRem_X_X
$LN11@DivRem_X_X:

; 933  :     else
; 934  :     {
; 935  :         LeftShift_Imp_DIV(u_buf, u_buf_len, d_factor, r_buf, FALSE);

	push	0
	mov	edx, DWORD PTR _r_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _d_factor$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_buf_len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	call	_LeftShift_Imp_DIV
	add	esp, 20					; 00000014H

; 936  :         LeftShift_Imp_DIV(v_buf, v_buf_len, d_factor, work_v_buf, FALSE);

	push	0
	mov	eax, DWORD PTR _work_v_buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _d_factor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_buf_len$[ebp]
	push	edx
	mov	eax, DWORD PTR _v_buf$[ebp]
	push	eax
	call	_LeftShift_Imp_DIV
	add	esp, 20					; 00000014H
$LN12@DivRem_X_X:

; 937  :     }
; 938  : 
; 939  :     __UNIT_TYPE_DIV* work_u_buf = r_buf;

	mov	ecx, DWORD PTR _r_buf$[ebp]
	mov	DWORD PTR _work_u_buf$[ebp], ecx

; 940  :     __UNIT_TYPE q_index = u_buf_len - v_buf_len;

	mov	edx, DWORD PTR _u_buf_len$[ebp]
	sub	edx, DWORD PTR _v_buf_len$[ebp]
	mov	DWORD PTR _q_index$[ebp], edx
$LN8@DivRem_X_X:

; 941  : 
; 942  :     for (;;)
; 943  :     {
; 944  :         __UNIT_TYPE_DIV q_ = CalculateQ_(work_u_buf, work_v_buf, v_buf_len, q_index);

	mov	eax, DWORD PTR _q_index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_buf_len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_v_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _work_u_buf$[ebp]
	push	eax
	call	_CalculateQ_
	add	esp, 16					; 00000010H
	mov	DWORD PTR _q_$1[ebp], eax

; 945  : 
; 946  : 
; 947  :         if (SubtructOneLine(work_u_buf, u_buf_len, work_v_buf, v_buf_len, q_index, q_))

	mov	ecx, DWORD PTR _q_$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_index$[ebp]
	push	edx
	mov	eax, DWORD PTR _v_buf_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_v_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_buf_len$[ebp]
	push	edx
	mov	eax, DWORD PTR _work_u_buf$[ebp]
	push	eax
	call	_SubtructOneLine
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN13@DivRem_X_X

; 948  :         {
; 949  :             // 桁借りが発生した場合
; 950  :             --q_;

	mov	ecx, DWORD PTR _q_$1[ebp]
	sub	ecx, 1
	mov	DWORD PTR _q_$1[ebp], ecx

; 951  :             AddOneLine(work_u_buf, u_buf_len, work_v_buf, v_buf_len, q_index);

	mov	edx, DWORD PTR _q_index$[ebp]
	push	edx
	mov	eax, DWORD PTR _v_buf_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_v_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_buf_len$[ebp]
	push	edx
	mov	eax, DWORD PTR _work_u_buf$[ebp]
	push	eax
	call	_AddOneLine
	add	esp, 20					; 00000014H
$LN13@DivRem_X_X:

; 952  :         }
; 953  : 
; 954  :         q_buf[q_index] = q_;

	mov	ecx, DWORD PTR _q_index$[ebp]
	mov	edx, DWORD PTR _q_buf$[ebp]
	mov	eax, DWORD PTR _q_$1[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 955  :         if (q_index == 0)

	cmp	DWORD PTR _q_index$[ebp], 0
	jne	SHORT $LN14@DivRem_X_X

; 956  :             break;

	jmp	SHORT $LN7@DivRem_X_X
$LN14@DivRem_X_X:

; 957  :         --q_index;

	mov	ecx, DWORD PTR _q_index$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _q_index$[ebp], ecx

; 958  :     }

	jmp	$LN8@DivRem_X_X
$LN7@DivRem_X_X:

; 959  : 
; 960  :     if (d_factor > 0)

	cmp	DWORD PTR _d_factor$[ebp], 0
	jbe	SHORT $LN1@DivRem_X_X

; 961  :         RightShift_Imp_DIV(work_u_buf, u_buf_len + 1, d_factor, work_u_buf, FALSE);

	push	0
	mov	edx, DWORD PTR _work_u_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _d_factor$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_buf_len$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _work_u_buf$[ebp]
	push	edx
	call	_RightShift_Imp_DIV
	add	esp, 20					; 00000014H
$LN1@DivRem_X_X:

; 962  : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DivRem_X_X_using_ADC_MUL ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
_TEXT	SEGMENT
_count$ = -20						; size = 4
_c$ = -13						; size = 1
_v_count$ = -12						; size = 4
_v_ptr$ = -8						; size = 4
_u_ptr$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_v_buf$ = 16						; size = 4
_v_buf_len$ = 20					; size = 4
_q_index$ = 24						; size = 4
_AddOneLineX PROC

; 843  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __531E8CBE_pmc_divrem@c
	call	@__CheckForDebuggerJustMyCode@4

; 844  :     __UNIT_TYPE_DIV* u_ptr = &u_buf[q_index];

	mov	eax, DWORD PTR _q_index$[ebp]
	mov	ecx, DWORD PTR _u_buf$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _u_ptr$[ebp], edx

; 845  :     __UNIT_TYPE_DIV* v_ptr = &v_buf[0];

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _v_buf$[ebp]
	mov	DWORD PTR _v_ptr$[ebp], ecx

; 846  :     __UNIT_TYPE v_count = v_buf_len;

	mov	edx, DWORD PTR _v_buf_len$[ebp]
	mov	DWORD PTR _v_count$[ebp], edx

; 847  :     char c = 0;

	mov	BYTE PTR _c$[ebp], 0

; 848  : 
; 849  :     // まず 32 ワードずつ加算をする。
; 850  :     __UNIT_TYPE count = v_count >> 5;

	mov	eax, DWORD PTR _v_count$[ebp]
	shr	eax, 5
	mov	DWORD PTR _count$[ebp], eax
$LN2@AddOneLine:

; 851  :     while (count != 0)

	cmp	DWORD PTR _count$[ebp], 0
	je	SHORT $LN3@AddOneLine

; 852  :     {
; 853  :         c = _ADD_32WORDS_ADCX_DIV(c, u_ptr, v_ptr, u_ptr);

	mov	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_32WORDS_ADCX_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 854  :         u_ptr += 32;

	mov	edx, DWORD PTR _u_ptr$[ebp]
	add	edx, 128				; 00000080H
	mov	DWORD PTR _u_ptr$[ebp], edx

; 855  :         v_ptr += 32;

	mov	eax, DWORD PTR _v_ptr$[ebp]
	add	eax, 128				; 00000080H
	mov	DWORD PTR _v_ptr$[ebp], eax

; 856  :         --count;

	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx

; 857  :     }

	jmp	SHORT $LN2@AddOneLine
$LN3@AddOneLine:

; 858  :     // この時点で未処理の桁は 32 ワード未満のはず
; 859  : 
; 860  :     // 未処理の桁が 16 ワード以上あるなら 16 ワード加算を行う。
; 861  :     if (v_count & 0x10)

	mov	edx, DWORD PTR _v_count$[ebp]
	and	edx, 16					; 00000010H
	je	SHORT $LN4@AddOneLine

; 862  :     {
; 863  :         c = _ADD_16WORDS_ADCX_DIV(c, u_ptr, v_ptr, u_ptr);

	mov	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_16WORDS_ADCX_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 864  :         u_ptr += 16;

	mov	ecx, DWORD PTR _u_ptr$[ebp]
	add	ecx, 64					; 00000040H
	mov	DWORD PTR _u_ptr$[ebp], ecx

; 865  :         v_ptr += 16;

	mov	edx, DWORD PTR _v_ptr$[ebp]
	add	edx, 64					; 00000040H
	mov	DWORD PTR _v_ptr$[ebp], edx
$LN4@AddOneLine:

; 866  :     }
; 867  :     // この時点で未処理の桁は 16 ワード未満のはず
; 868  : 
; 869  :     // 未処理の桁が 8 ワード以上あるなら 8 ワード加算を行う。
; 870  :     if (v_count & 0x8)

	mov	eax, DWORD PTR _v_count$[ebp]
	and	eax, 8
	je	SHORT $LN5@AddOneLine

; 871  :     {
; 872  :         c = _ADD_8WORDS_ADCX_DIV(c, u_ptr, v_ptr, u_ptr);

	mov	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_8WORDS_ADCX_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 873  :         u_ptr += 8;

	mov	edx, DWORD PTR _u_ptr$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _u_ptr$[ebp], edx

; 874  :         v_ptr += 8;

	mov	eax, DWORD PTR _v_ptr$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _v_ptr$[ebp], eax
$LN5@AddOneLine:

; 875  :     }
; 876  :     // この時点で未処理の桁は 8 ワード未満のはず
; 877  : 
; 878  :     // 未処理の桁が 4 ワード以上あるなら 4 ワード加算を行う。
; 879  :     if (v_count & 0x4)

	mov	ecx, DWORD PTR _v_count$[ebp]
	and	ecx, 4
	je	SHORT $LN6@AddOneLine

; 880  :     {
; 881  :         c = _ADD_4WORDS_ADCX_DIV(c, u_ptr, v_ptr, u_ptr);

	mov	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_4WORDS_ADCX_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 882  :         u_ptr += 4;

	mov	eax, DWORD PTR _u_ptr$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _u_ptr$[ebp], eax

; 883  :         v_ptr += 4;

	mov	ecx, DWORD PTR _v_ptr$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _v_ptr$[ebp], ecx
$LN6@AddOneLine:

; 884  :     }
; 885  :     // この時点で未処理の桁は 4 ワード未満のはず
; 886  : 
; 887  :     // 未処理の桁が 2 ワード以上あるなら 2 ワード加算を行う。
; 888  :     if (v_count & 0x2)

	mov	edx, DWORD PTR _v_count$[ebp]
	and	edx, 2
	je	SHORT $LN7@AddOneLine

; 889  :     {
; 890  :         c = _ADD_2WORDS_ADCX_DIV(c, u_ptr, v_ptr, u_ptr);

	mov	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_2WORDS_ADCX_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 891  :         u_ptr += 2;

	mov	ecx, DWORD PTR _u_ptr$[ebp]
	add	ecx, 8
	mov	DWORD PTR _u_ptr$[ebp], ecx

; 892  :         v_ptr += 2;

	mov	edx, DWORD PTR _v_ptr$[ebp]
	add	edx, 8
	mov	DWORD PTR _v_ptr$[ebp], edx
$LN7@AddOneLine:

; 893  :     }
; 894  :     // この時点で未処理の桁は 2 ワード未満のはず
; 895  : 
; 896  :     // 未処理の桁が 1 ワード以上あるなら 1 ワード加算を行う。
; 897  :     if (v_count & 0x1)

	mov	eax, DWORD PTR _v_count$[ebp]
	and	eax, 1
	je	SHORT $LN8@AddOneLine

; 898  :     {
; 899  :         c = _ADD_UNIT_DIV(c, *u_ptr, *v_ptr, u_ptr);

	mov	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_ptr$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _u_ptr$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 900  :         ++u_ptr;

	mov	ecx, DWORD PTR _u_ptr$[ebp]
	add	ecx, 4
	mov	DWORD PTR _u_ptr$[ebp], ecx

; 901  :         ++v_ptr;

	mov	edx, DWORD PTR _v_ptr$[ebp]
	add	edx, 4
	mov	DWORD PTR _v_ptr$[ebp], edx
$LN8@AddOneLine:

; 902  :     }
; 903  : 
; 904  :     // 残りの桁の繰り上がりを計算する。
; 905  :     DoCarry(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr);

	mov	eax, DWORD PTR _u_buf_len$[ebp]
	mov	ecx, DWORD PTR _u_buf$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+4]
	sub	edx, DWORD PTR _u_ptr$[ebp]
	sar	edx, 2
	push	edx
	mov	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	_DoCarry
	add	esp, 12					; 0000000cH

; 906  : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_AddOneLineX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
_TEXT	SEGMENT
_count$ = -20						; size = 4
_c$ = -13						; size = 1
_v_count$ = -12						; size = 4
_v_ptr$ = -8						; size = 4
_u_ptr$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_v_buf$ = 16						; size = 4
_v_buf_len$ = 20					; size = 4
_q_index$ = 24						; size = 4
_AddOneLine PROC

; 777  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __531E8CBE_pmc_divrem@c
	call	@__CheckForDebuggerJustMyCode@4

; 778  :     __UNIT_TYPE_DIV* u_ptr = &u_buf[q_index];

	mov	eax, DWORD PTR _q_index$[ebp]
	mov	ecx, DWORD PTR _u_buf$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _u_ptr$[ebp], edx

; 779  :     __UNIT_TYPE_DIV* v_ptr = &v_buf[0];

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _v_buf$[ebp]
	mov	DWORD PTR _v_ptr$[ebp], ecx

; 780  :     __UNIT_TYPE v_count = v_buf_len;

	mov	edx, DWORD PTR _v_buf_len$[ebp]
	mov	DWORD PTR _v_count$[ebp], edx

; 781  :     char c = 0;

	mov	BYTE PTR _c$[ebp], 0

; 782  : 
; 783  :     // まず 32 ワードずつ加算をする。
; 784  :     __UNIT_TYPE count = v_count >> 5;

	mov	eax, DWORD PTR _v_count$[ebp]
	shr	eax, 5
	mov	DWORD PTR _count$[ebp], eax
$LN2@AddOneLine:

; 785  :     while (count != 0)

	cmp	DWORD PTR _count$[ebp], 0
	je	SHORT $LN3@AddOneLine

; 786  :     {
; 787  :         c = _ADD_32WORDS_ADC_DIV(c, u_ptr, v_ptr, u_ptr);

	mov	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_32WORDS_ADC_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 788  :         u_ptr += 32;

	mov	edx, DWORD PTR _u_ptr$[ebp]
	add	edx, 128				; 00000080H
	mov	DWORD PTR _u_ptr$[ebp], edx

; 789  :         v_ptr += 32;

	mov	eax, DWORD PTR _v_ptr$[ebp]
	add	eax, 128				; 00000080H
	mov	DWORD PTR _v_ptr$[ebp], eax

; 790  :         --count;

	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx

; 791  :     }

	jmp	SHORT $LN2@AddOneLine
$LN3@AddOneLine:

; 792  :     // この時点で未処理の桁は 32 ワード未満のはず
; 793  : 
; 794  :     // 未処理の桁が 16 ワード以上あるなら 16 ワード加算を行う。
; 795  :     if (v_count & 0x10)

	mov	edx, DWORD PTR _v_count$[ebp]
	and	edx, 16					; 00000010H
	je	SHORT $LN4@AddOneLine

; 796  :     {
; 797  :         c = _ADD_16WORDS_ADC_DIV(c, u_ptr, v_ptr, u_ptr);

	mov	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_16WORDS_ADC_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 798  :         u_ptr += 16;

	mov	ecx, DWORD PTR _u_ptr$[ebp]
	add	ecx, 64					; 00000040H
	mov	DWORD PTR _u_ptr$[ebp], ecx

; 799  :         v_ptr += 16;

	mov	edx, DWORD PTR _v_ptr$[ebp]
	add	edx, 64					; 00000040H
	mov	DWORD PTR _v_ptr$[ebp], edx
$LN4@AddOneLine:

; 800  :     }
; 801  :     // この時点で未処理の桁は 16 ワード未満のはず
; 802  : 
; 803  :     // 未処理の桁が 8 ワード以上あるなら 8 ワード加算を行う。
; 804  :     if (v_count & 0x8)

	mov	eax, DWORD PTR _v_count$[ebp]
	and	eax, 8
	je	SHORT $LN5@AddOneLine

; 805  :     {
; 806  :         c = _ADD_8WORDS_ADC_DIV(c, u_ptr, v_ptr, u_ptr);

	mov	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_8WORDS_ADC_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 807  :         u_ptr += 8;

	mov	edx, DWORD PTR _u_ptr$[ebp]
	add	edx, 32					; 00000020H
	mov	DWORD PTR _u_ptr$[ebp], edx

; 808  :         v_ptr += 8;

	mov	eax, DWORD PTR _v_ptr$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _v_ptr$[ebp], eax
$LN5@AddOneLine:

; 809  :     }
; 810  :     // この時点で未処理の桁は 8 ワード未満のはず
; 811  : 
; 812  :     // 未処理の桁が 4 ワード以上あるなら 4 ワード加算を行う。
; 813  :     if (v_count & 0x4)

	mov	ecx, DWORD PTR _v_count$[ebp]
	and	ecx, 4
	je	SHORT $LN6@AddOneLine

; 814  :     {
; 815  :         c = _ADD_4WORDS_ADC_DIV(c, u_ptr, v_ptr, u_ptr);

	mov	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_4WORDS_ADC_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 816  :         u_ptr += 4;

	mov	eax, DWORD PTR _u_ptr$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _u_ptr$[ebp], eax

; 817  :         v_ptr += 4;

	mov	ecx, DWORD PTR _v_ptr$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _v_ptr$[ebp], ecx
$LN6@AddOneLine:

; 818  :     }
; 819  :     // この時点で未処理の桁は 4 ワード未満のはず
; 820  : 
; 821  :     // 未処理の桁が 2 ワード以上あるなら 2 ワード加算を行う。
; 822  :     if (v_count & 0x2)

	mov	edx, DWORD PTR _v_count$[ebp]
	and	edx, 2
	je	SHORT $LN7@AddOneLine

; 823  :     {
; 824  :         c = _ADD_2WORDS_ADC_DIV(c, u_ptr, v_ptr, u_ptr);

	mov	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_2WORDS_ADC_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 825  :         u_ptr += 2;

	mov	ecx, DWORD PTR _u_ptr$[ebp]
	add	ecx, 8
	mov	DWORD PTR _u_ptr$[ebp], ecx

; 826  :         v_ptr += 2;

	mov	edx, DWORD PTR _v_ptr$[ebp]
	add	edx, 8
	mov	DWORD PTR _v_ptr$[ebp], edx
$LN7@AddOneLine:

; 827  :     }
; 828  :     // この時点で未処理の桁は 2 ワード未満のはず
; 829  : 
; 830  :     // 未処理の桁が 1 ワード以上あるなら 1 ワード加算を行う。
; 831  :     if (v_count & 0x1)

	mov	eax, DWORD PTR _v_count$[ebp]
	and	eax, 1
	je	SHORT $LN8@AddOneLine

; 832  :     {
; 833  :         c = _ADD_UNIT_DIV(c, *u_ptr, *v_ptr, u_ptr);

	mov	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_ptr$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _u_ptr$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 834  :         ++u_ptr;

	mov	ecx, DWORD PTR _u_ptr$[ebp]
	add	ecx, 4
	mov	DWORD PTR _u_ptr$[ebp], ecx

; 835  :         ++v_ptr;

	mov	edx, DWORD PTR _v_ptr$[ebp]
	add	edx, 4
	mov	DWORD PTR _v_ptr$[ebp], edx
$LN8@AddOneLine:

; 836  :     }
; 837  : 
; 838  :     // 残りの桁の繰り上がりを計算する。
; 839  :     DoCarry(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr);

	mov	eax, DWORD PTR _u_buf_len$[ebp]
	mov	ecx, DWORD PTR _u_buf$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+4]
	sub	edx, DWORD PTR _u_ptr$[ebp]
	sar	edx, 2
	push	edx
	mov	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	_DoCarry
	add	esp, 12					; 0000000cH

; 840  : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_AddOneLine ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
_TEXT	SEGMENT
_c$ = 8							; size = 1
_u_ptr$ = 12						; size = 4
_u_count$ = 16						; size = 4
_DoCarry PROC

; 748  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __531E8CBE_pmc_divrem@c
	call	@__CheckForDebuggerJustMyCode@4
$LN4@DoCarry:

; 749  :     // 繰り上がりを続く限り行う
; 750  :     for (;;)
; 751  :     {
; 752  :         if (u_count <= 0)

	cmp	DWORD PTR _u_count$[ebp], 0
	ja	SHORT $LN5@DoCarry

; 753  :         {
; 754  :             // u の最上位まで達してしまった場合
; 755  :             return;

	jmp	SHORT $LN1@DoCarry

; 756  :         }

	jmp	SHORT $LN6@DoCarry
$LN5@DoCarry:

; 757  :         else if (c)

	movsx	eax, BYTE PTR _c$[ebp]
	test	eax, eax
	je	SHORT $LN7@DoCarry

; 758  :         {
; 759  :             // u の最上位に達しておらず、かつキャリーが立っている場合
; 760  : 
; 761  :             // 繰り上がりを継続する
; 762  :             c = _ADD_UNIT_DIV(c, *u_ptr, 0, u_ptr);

	mov	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _u_ptr$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 763  :             ++u_ptr;

	mov	edx, DWORD PTR _u_ptr$[ebp]
	add	edx, 4
	mov	DWORD PTR _u_ptr$[ebp], edx

; 764  :             --u_count;

	mov	eax, DWORD PTR _u_count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _u_count$[ebp], eax

; 765  :         }

	jmp	SHORT $LN6@DoCarry
$LN7@DoCarry:

; 766  :         else
; 767  :         {
; 768  :             // u の最上位に達しておらず、かつキャリーが立っていない場合
; 769  : 
; 770  :             // 繰り上がりを中断し、復帰する。
; 771  :             return;

	jmp	SHORT $LN1@DoCarry
$LN6@DoCarry:

; 772  :         }
; 773  :     }

	jmp	SHORT $LN4@DoCarry
$LN1@DoCarry:

; 774  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_DoCarry ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
_TEXT	SEGMENT
_count$ = -32						; size = 4
_c$ = -25						; size = 1
_k$ = -20						; size = 4
_v_count$ = -12						; size = 4
_v_ptr$ = -8						; size = 4
_u_ptr$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_v_buf$ = 16						; size = 4
_v_buf_len$ = 20					; size = 4
_q_index$ = 24						; size = 4
_q_$ = 28						; size = 4
_SubtructOneLineX PROC

; 597  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __531E8CBE_pmc_divrem@c
	call	@__CheckForDebuggerJustMyCode@4

; 598  :     __UNIT_TYPE_DIV* u_ptr = &u_buf[q_index];

	mov	eax, DWORD PTR _q_index$[ebp]
	mov	ecx, DWORD PTR _u_buf$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _u_ptr$[ebp], edx

; 599  :     __UNIT_TYPE_DIV* v_ptr = &v_buf[0];

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _v_buf$[ebp]
	mov	DWORD PTR _v_ptr$[ebp], ecx

; 600  :     __UNIT_TYPE v_count = v_buf_len;

	mov	edx, DWORD PTR _v_buf_len$[ebp]
	mov	DWORD PTR _v_count$[ebp], edx

; 601  :     __UNIT_TYPE_DIV k = 0;

	mov	DWORD PTR _k$[ebp], 0

; 602  :     char c = 0;

	mov	BYTE PTR _c$[ebp], 0

; 603  : 
; 604  :     __UNIT_TYPE count = v_count >> 5;

	mov	eax, DWORD PTR _v_count$[ebp]
	shr	eax, 5
	mov	DWORD PTR _count$[ebp], eax
$LN2@SubtructOn:

; 605  :     while (count != 0)

	cmp	DWORD PTR _count$[ebp], 0
	je	$LN3@SubtructOn

; 606  :     {
; 607  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[0], q_, &u_ptr[0]);

	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 608  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[1], q_, &u_ptr[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 609  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[2], q_, &u_ptr[2]);

	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 1
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 610  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[3], q_, &u_ptr[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 611  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[4], q_, &u_ptr[4]);

	mov	ecx, 4
	shl	ecx, 2
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 2
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 612  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[5], q_, &u_ptr[5]);

	mov	eax, 4
	imul	ecx, eax, 5
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 5
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 613  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[6], q_, &u_ptr[6]);

	mov	ecx, 4
	imul	edx, ecx, 6
	add	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 6
	add	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 614  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[7], q_, &u_ptr[7]);

	mov	edx, 4
	imul	eax, edx, 7
	add	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 7
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 615  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[8], q_, &u_ptr[8]);

	mov	eax, 4
	shl	eax, 3
	add	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 3
	add	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 616  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[9], q_, &u_ptr[9]);

	mov	edx, 4
	imul	eax, edx, 9
	add	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 9
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 617  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[10], q_, &u_ptr[10]);

	mov	eax, 4
	imul	ecx, eax, 10
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 10
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 618  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[11], q_, &u_ptr[11]);

	mov	ecx, 4
	imul	edx, ecx, 11
	add	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 11
	add	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 619  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[12], q_, &u_ptr[12]);

	mov	edx, 4
	imul	eax, edx, 12
	add	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 12
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 620  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[13], q_, &u_ptr[13]);

	mov	eax, 4
	imul	ecx, eax, 13
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 13
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 621  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[14], q_, &u_ptr[14]);

	mov	ecx, 4
	imul	edx, ecx, 14
	add	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 14
	add	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 622  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[15], q_, &u_ptr[15]);

	mov	edx, 4
	imul	eax, edx, 15
	add	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 15
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 623  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[16], q_, &u_ptr[16]);

	mov	eax, 4
	shl	eax, 4
	add	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 4
	add	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 624  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[17], q_, &u_ptr[17]);

	mov	edx, 4
	imul	eax, edx, 17
	add	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 17
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 625  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[18], q_, &u_ptr[18]);

	mov	eax, 4
	imul	ecx, eax, 18
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 18
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 626  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[19], q_, &u_ptr[19]);

	mov	ecx, 4
	imul	edx, ecx, 19
	add	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 19
	add	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 627  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[20], q_, &u_ptr[20]);

	mov	edx, 4
	imul	eax, edx, 20
	add	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 20
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 628  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[21], q_, &u_ptr[21]);

	mov	eax, 4
	imul	ecx, eax, 21
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 21
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 629  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[22], q_, &u_ptr[22]);

	mov	ecx, 4
	imul	edx, ecx, 22
	add	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 22
	add	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 630  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[23], q_, &u_ptr[23]);

	mov	edx, 4
	imul	eax, edx, 23
	add	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 23
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 631  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[24], q_, &u_ptr[24]);

	mov	eax, 4
	imul	ecx, eax, 24
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 24
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 632  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[25], q_, &u_ptr[25]);

	mov	ecx, 4
	imul	edx, ecx, 25
	add	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 25
	add	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 633  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[26], q_, &u_ptr[26]);

	mov	edx, 4
	imul	eax, edx, 26
	add	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 26
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 634  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[27], q_, &u_ptr[27]);

	mov	eax, 4
	imul	ecx, eax, 27
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 27
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 635  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[28], q_, &u_ptr[28]);

	mov	ecx, 4
	imul	edx, ecx, 28
	add	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 28
	add	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 636  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[29], q_, &u_ptr[29]);

	mov	edx, 4
	imul	eax, edx, 29
	add	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 29
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 637  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[30], q_, &u_ptr[30]);

	mov	eax, 4
	imul	ecx, eax, 30
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 30
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 638  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[31], q_, &u_ptr[31]);

	mov	ecx, 4
	imul	edx, ecx, 31
	add	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 31
	add	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 639  :         u_ptr += 32;

	mov	edx, DWORD PTR _u_ptr$[ebp]
	add	edx, 128				; 00000080H
	mov	DWORD PTR _u_ptr$[ebp], edx

; 640  :         v_ptr += 32;

	mov	eax, DWORD PTR _v_ptr$[ebp]
	add	eax, 128				; 00000080H
	mov	DWORD PTR _v_ptr$[ebp], eax

; 641  :         --count;

	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx

; 642  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 643  :         if (sizeof(k) == sizeof(_UINT64_T))

	xor	edx, edx
	je	SHORT $LN4@SubtructOn

; 644  :             AddToMULTI64Counter(32);

	push	32					; 00000020H
	call	_AddToMULTI64Counter
	add	esp, 4
	jmp	SHORT $LN5@SubtructOn
$LN4@SubtructOn:

; 645  :         else
; 646  :             AddToMULTI32Counter(32);

	push	32					; 00000020H
	call	_AddToMULTI32Counter
	add	esp, 4
$LN5@SubtructOn:

; 647  : #endif
; 648  :     }

	jmp	$LN2@SubtructOn
$LN3@SubtructOn:

; 649  : 
; 650  :     if (v_count & 0x10)

	mov	eax, DWORD PTR _v_count$[ebp]
	and	eax, 16					; 00000010H
	je	$LN6@SubtructOn

; 651  :     {
; 652  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[0], q_, &u_ptr[0]);

	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 653  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[1], q_, &u_ptr[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 654  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[2], q_, &u_ptr[2]);

	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 1
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 655  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[3], q_, &u_ptr[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 656  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[4], q_, &u_ptr[4]);

	mov	ecx, 4
	shl	ecx, 2
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 2
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 657  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[5], q_, &u_ptr[5]);

	mov	eax, 4
	imul	ecx, eax, 5
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 5
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 658  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[6], q_, &u_ptr[6]);

	mov	ecx, 4
	imul	edx, ecx, 6
	add	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 6
	add	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 659  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[7], q_, &u_ptr[7]);

	mov	edx, 4
	imul	eax, edx, 7
	add	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 7
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 660  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[8], q_, &u_ptr[8]);

	mov	eax, 4
	shl	eax, 3
	add	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 3
	add	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 661  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[9], q_, &u_ptr[9]);

	mov	edx, 4
	imul	eax, edx, 9
	add	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 9
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 662  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[10], q_, &u_ptr[10]);

	mov	eax, 4
	imul	ecx, eax, 10
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 10
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 663  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[11], q_, &u_ptr[11]);

	mov	ecx, 4
	imul	edx, ecx, 11
	add	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 11
	add	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 664  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[12], q_, &u_ptr[12]);

	mov	edx, 4
	imul	eax, edx, 12
	add	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 12
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 665  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[13], q_, &u_ptr[13]);

	mov	eax, 4
	imul	ecx, eax, 13
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 13
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 666  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[14], q_, &u_ptr[14]);

	mov	ecx, 4
	imul	edx, ecx, 14
	add	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 14
	add	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 667  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[15], q_, &u_ptr[15]);

	mov	edx, 4
	imul	eax, edx, 15
	add	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 15
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 668  :         u_ptr += 16;

	mov	eax, DWORD PTR _u_ptr$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _u_ptr$[ebp], eax

; 669  :         v_ptr += 16;

	mov	ecx, DWORD PTR _v_ptr$[ebp]
	add	ecx, 64					; 00000040H
	mov	DWORD PTR _v_ptr$[ebp], ecx

; 670  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 671  :         if (sizeof(k) == sizeof(_UINT64_T))

	xor	edx, edx
	je	SHORT $LN7@SubtructOn

; 672  :             AddToMULTI64Counter(16);

	push	16					; 00000010H
	call	_AddToMULTI64Counter
	add	esp, 4
	jmp	SHORT $LN6@SubtructOn
$LN7@SubtructOn:

; 673  :         else
; 674  :             AddToMULTI32Counter(16);

	push	16					; 00000010H
	call	_AddToMULTI32Counter
	add	esp, 4
$LN6@SubtructOn:

; 675  : #endif
; 676  :     }
; 677  : 
; 678  :     if (v_count & 0x8)

	mov	eax, DWORD PTR _v_count$[ebp]
	and	eax, 8
	je	$LN9@SubtructOn

; 679  :     {
; 680  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[0], q_, &u_ptr[0]);

	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 681  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[1], q_, &u_ptr[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 682  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[2], q_, &u_ptr[2]);

	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 1
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 683  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[3], q_, &u_ptr[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 684  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[4], q_, &u_ptr[4]);

	mov	ecx, 4
	shl	ecx, 2
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 2
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 685  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[5], q_, &u_ptr[5]);

	mov	eax, 4
	imul	ecx, eax, 5
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 5
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 686  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[6], q_, &u_ptr[6]);

	mov	ecx, 4
	imul	edx, ecx, 6
	add	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 6
	add	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 687  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[7], q_, &u_ptr[7]);

	mov	edx, 4
	imul	eax, edx, 7
	add	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 7
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 688  :         u_ptr += 8;

	mov	eax, DWORD PTR _u_ptr$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _u_ptr$[ebp], eax

; 689  :         v_ptr += 8;

	mov	ecx, DWORD PTR _v_ptr$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _v_ptr$[ebp], ecx

; 690  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 691  :         if (sizeof(k) == sizeof(_UINT64_T))

	xor	edx, edx
	je	SHORT $LN10@SubtructOn

; 692  :             AddToMULTI64Counter(8);

	push	8
	call	_AddToMULTI64Counter
	add	esp, 4
	jmp	SHORT $LN9@SubtructOn
$LN10@SubtructOn:

; 693  :         else
; 694  :             AddToMULTI32Counter(8);

	push	8
	call	_AddToMULTI32Counter
	add	esp, 4
$LN9@SubtructOn:

; 695  : #endif
; 696  :     }
; 697  : 
; 698  :     if (v_count & 0x4)

	mov	eax, DWORD PTR _v_count$[ebp]
	and	eax, 4
	je	$LN12@SubtructOn

; 699  :     {
; 700  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[0], q_, &u_ptr[0]);

	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 701  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[1], q_, &u_ptr[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 702  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[2], q_, &u_ptr[2]);

	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 1
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 703  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[3], q_, &u_ptr[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 704  :         u_ptr += 4;

	mov	ecx, DWORD PTR _u_ptr$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _u_ptr$[ebp], ecx

; 705  :         v_ptr += 4;

	mov	edx, DWORD PTR _v_ptr$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _v_ptr$[ebp], edx

; 706  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 707  :         if (sizeof(k) == sizeof(_UINT64_T))

	xor	eax, eax
	je	SHORT $LN13@SubtructOn

; 708  :             AddToMULTI64Counter(4);

	push	4
	call	_AddToMULTI64Counter
	add	esp, 4
	jmp	SHORT $LN12@SubtructOn
$LN13@SubtructOn:

; 709  :         else
; 710  :             AddToMULTI32Counter(4);

	push	4
	call	_AddToMULTI32Counter
	add	esp, 4
$LN12@SubtructOn:

; 711  : #endif
; 712  :     }
; 713  : 
; 714  :     if (v_count & 0x2)

	mov	ecx, DWORD PTR _v_count$[ebp]
	and	ecx, 2
	je	$LN15@SubtructOn

; 715  :     {
; 716  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[0], q_, &u_ptr[0]);

	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 717  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[1], q_, &u_ptr[1]);

	mov	eax, 4
	shl	eax, 0
	add	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 718  :         u_ptr += 2;

	mov	edx, DWORD PTR _u_ptr$[ebp]
	add	edx, 8
	mov	DWORD PTR _u_ptr$[ebp], edx

; 719  :         v_ptr += 2;

	mov	eax, DWORD PTR _v_ptr$[ebp]
	add	eax, 8
	mov	DWORD PTR _v_ptr$[ebp], eax

; 720  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 721  :         if (sizeof(k) == sizeof(_UINT64_T))

	xor	ecx, ecx
	je	SHORT $LN16@SubtructOn

; 722  :             AddToMULTI64Counter(2);

	push	2
	call	_AddToMULTI64Counter
	add	esp, 4
	jmp	SHORT $LN15@SubtructOn
$LN16@SubtructOn:

; 723  :         else
; 724  :             AddToMULTI32Counter(2);

	push	2
	call	_AddToMULTI32Counter
	add	esp, 4
$LN15@SubtructOn:

; 725  : #endif
; 726  :     }
; 727  : 
; 728  :     if (v_count & 0x1)

	mov	edx, DWORD PTR _v_count$[ebp]
	and	edx, 1
	je	SHORT $LN18@SubtructOn

; 729  :     {
; 730  :         c = _MULTIPLYX_DIGIT_UNIT_DIV(c, &k, &v_ptr[0], q_, &u_ptr[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLYX_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 731  :         u_ptr += 1;

	mov	ecx, DWORD PTR _u_ptr$[ebp]
	add	ecx, 4
	mov	DWORD PTR _u_ptr$[ebp], ecx

; 732  :         v_ptr += 1;

	mov	edx, DWORD PTR _v_ptr$[ebp]
	add	edx, 4
	mov	DWORD PTR _v_ptr$[ebp], edx

; 733  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 734  :         if (sizeof(k) == sizeof(_UINT64_T))

	xor	eax, eax
	je	SHORT $LN19@SubtructOn

; 735  :             IncrementMULTI64Counter();

	call	_IncrementMULTI64Counter
	jmp	SHORT $LN18@SubtructOn
$LN19@SubtructOn:

; 736  :         else
; 737  :             IncrementMULTI32Counter();

	call	_IncrementMULTI32Counter
$LN18@SubtructOn:

; 738  : #endif
; 739  :     }
; 740  : 
; 741  :     c = _SUBTRUCT_UNIT_DIV(c, *u_ptr, k, u_ptr);

	mov	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	mov	eax, DWORD PTR _u_ptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 742  :     u_ptr += 1;

	mov	eax, DWORD PTR _u_ptr$[ebp]
	add	eax, 4
	mov	DWORD PTR _u_ptr$[ebp], eax

; 743  : 
; 744  :     return (DoBorrow(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr));

	mov	ecx, DWORD PTR _u_buf_len$[ebp]
	mov	edx, DWORD PTR _u_buf$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+4]
	sub	eax, DWORD PTR _u_ptr$[ebp]
	sar	eax, 2
	push	eax
	mov	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	_DoBorrow
	add	esp, 12					; 0000000cH

; 745  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@SubtructOn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN24@SubtructOn:
	DD	1
	DD	$LN23@SubtructOn
$LN23@SubtructOn:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN22@SubtructOn
$LN22@SubtructOn:
	DB	107					; 0000006bH
	DB	0
_SubtructOneLineX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
_TEXT	SEGMENT
_count$ = -32						; size = 4
_c$ = -25						; size = 1
_k$ = -20						; size = 4
_v_count$ = -12						; size = 4
_v_ptr$ = -8						; size = 4
_u_ptr$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_v_buf$ = 16						; size = 4
_v_buf_len$ = 20					; size = 4
_q_index$ = 24						; size = 4
_q_$ = 28						; size = 4
_SubtructOneLine PROC

; 446  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __531E8CBE_pmc_divrem@c
	call	@__CheckForDebuggerJustMyCode@4

; 447  :     __UNIT_TYPE_DIV* u_ptr = &u_buf[q_index];

	mov	eax, DWORD PTR _q_index$[ebp]
	mov	ecx, DWORD PTR _u_buf$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _u_ptr$[ebp], edx

; 448  :     __UNIT_TYPE_DIV* v_ptr = &v_buf[0];

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _v_buf$[ebp]
	mov	DWORD PTR _v_ptr$[ebp], ecx

; 449  :     __UNIT_TYPE v_count = v_buf_len;

	mov	edx, DWORD PTR _v_buf_len$[ebp]
	mov	DWORD PTR _v_count$[ebp], edx

; 450  :     __UNIT_TYPE_DIV k = 0;

	mov	DWORD PTR _k$[ebp], 0

; 451  :     char c = 0;

	mov	BYTE PTR _c$[ebp], 0

; 452  : 
; 453  :     __UNIT_TYPE count = v_count >> 5;

	mov	eax, DWORD PTR _v_count$[ebp]
	shr	eax, 5
	mov	DWORD PTR _count$[ebp], eax
$LN2@SubtructOn:

; 454  :     while (count != 0)

	cmp	DWORD PTR _count$[ebp], 0
	je	$LN3@SubtructOn

; 455  :     {
; 456  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[0], q_, &u_ptr[0]);

	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 457  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[1], q_, &u_ptr[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 458  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[2], q_, &u_ptr[2]);

	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 1
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 459  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[3], q_, &u_ptr[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 460  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[4], q_, &u_ptr[4]);

	mov	ecx, 4
	shl	ecx, 2
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 2
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 461  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[5], q_, &u_ptr[5]);

	mov	eax, 4
	imul	ecx, eax, 5
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 5
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 462  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[6], q_, &u_ptr[6]);

	mov	ecx, 4
	imul	edx, ecx, 6
	add	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 6
	add	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 463  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[7], q_, &u_ptr[7]);

	mov	edx, 4
	imul	eax, edx, 7
	add	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 7
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 464  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[8], q_, &u_ptr[8]);

	mov	eax, 4
	shl	eax, 3
	add	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 3
	add	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 465  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[9], q_, &u_ptr[9]);

	mov	edx, 4
	imul	eax, edx, 9
	add	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 9
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 466  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[10], q_, &u_ptr[10]);

	mov	eax, 4
	imul	ecx, eax, 10
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 10
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 467  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[11], q_, &u_ptr[11]);

	mov	ecx, 4
	imul	edx, ecx, 11
	add	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 11
	add	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 468  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[12], q_, &u_ptr[12]);

	mov	edx, 4
	imul	eax, edx, 12
	add	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 12
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 469  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[13], q_, &u_ptr[13]);

	mov	eax, 4
	imul	ecx, eax, 13
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 13
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 470  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[14], q_, &u_ptr[14]);

	mov	ecx, 4
	imul	edx, ecx, 14
	add	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 14
	add	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 471  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[15], q_, &u_ptr[15]);

	mov	edx, 4
	imul	eax, edx, 15
	add	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 15
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 472  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[16], q_, &u_ptr[16]);

	mov	eax, 4
	shl	eax, 4
	add	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 4
	add	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 473  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[17], q_, &u_ptr[17]);

	mov	edx, 4
	imul	eax, edx, 17
	add	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 17
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 474  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[18], q_, &u_ptr[18]);

	mov	eax, 4
	imul	ecx, eax, 18
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 18
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 475  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[19], q_, &u_ptr[19]);

	mov	ecx, 4
	imul	edx, ecx, 19
	add	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 19
	add	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 476  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[20], q_, &u_ptr[20]);

	mov	edx, 4
	imul	eax, edx, 20
	add	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 20
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 477  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[21], q_, &u_ptr[21]);

	mov	eax, 4
	imul	ecx, eax, 21
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 21
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 478  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[22], q_, &u_ptr[22]);

	mov	ecx, 4
	imul	edx, ecx, 22
	add	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 22
	add	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 479  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[23], q_, &u_ptr[23]);

	mov	edx, 4
	imul	eax, edx, 23
	add	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 23
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 480  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[24], q_, &u_ptr[24]);

	mov	eax, 4
	imul	ecx, eax, 24
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 24
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 481  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[25], q_, &u_ptr[25]);

	mov	ecx, 4
	imul	edx, ecx, 25
	add	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 25
	add	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 482  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[26], q_, &u_ptr[26]);

	mov	edx, 4
	imul	eax, edx, 26
	add	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 26
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 483  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[27], q_, &u_ptr[27]);

	mov	eax, 4
	imul	ecx, eax, 27
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 27
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 484  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[28], q_, &u_ptr[28]);

	mov	ecx, 4
	imul	edx, ecx, 28
	add	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 28
	add	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 485  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[29], q_, &u_ptr[29]);

	mov	edx, 4
	imul	eax, edx, 29
	add	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 29
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 486  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[30], q_, &u_ptr[30]);

	mov	eax, 4
	imul	ecx, eax, 30
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 30
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 487  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[31], q_, &u_ptr[31]);

	mov	ecx, 4
	imul	edx, ecx, 31
	add	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 31
	add	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 488  :         u_ptr += 32;

	mov	edx, DWORD PTR _u_ptr$[ebp]
	add	edx, 128				; 00000080H
	mov	DWORD PTR _u_ptr$[ebp], edx

; 489  :         v_ptr += 32;

	mov	eax, DWORD PTR _v_ptr$[ebp]
	add	eax, 128				; 00000080H
	mov	DWORD PTR _v_ptr$[ebp], eax

; 490  :         --count;

	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx

; 491  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 492  :         if (sizeof(k) == sizeof(_UINT64_T))

	xor	edx, edx
	je	SHORT $LN4@SubtructOn

; 493  :             AddToMULTI64Counter(32);

	push	32					; 00000020H
	call	_AddToMULTI64Counter
	add	esp, 4
	jmp	SHORT $LN5@SubtructOn
$LN4@SubtructOn:

; 494  :         else
; 495  :             AddToMULTI32Counter(32);

	push	32					; 00000020H
	call	_AddToMULTI32Counter
	add	esp, 4
$LN5@SubtructOn:

; 496  : #endif
; 497  :     }

	jmp	$LN2@SubtructOn
$LN3@SubtructOn:

; 498  : 
; 499  :     if (v_count & 0x10)

	mov	eax, DWORD PTR _v_count$[ebp]
	and	eax, 16					; 00000010H
	je	$LN6@SubtructOn

; 500  :     {
; 501  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[0], q_, &u_ptr[0]);

	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 502  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[1], q_, &u_ptr[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 503  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[2], q_, &u_ptr[2]);

	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 1
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 504  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[3], q_, &u_ptr[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 505  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[4], q_, &u_ptr[4]);

	mov	ecx, 4
	shl	ecx, 2
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 2
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 506  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[5], q_, &u_ptr[5]);

	mov	eax, 4
	imul	ecx, eax, 5
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 5
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 507  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[6], q_, &u_ptr[6]);

	mov	ecx, 4
	imul	edx, ecx, 6
	add	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 6
	add	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 508  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[7], q_, &u_ptr[7]);

	mov	edx, 4
	imul	eax, edx, 7
	add	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 7
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 509  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[8], q_, &u_ptr[8]);

	mov	eax, 4
	shl	eax, 3
	add	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 3
	add	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 510  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[9], q_, &u_ptr[9]);

	mov	edx, 4
	imul	eax, edx, 9
	add	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 9
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 511  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[10], q_, &u_ptr[10]);

	mov	eax, 4
	imul	ecx, eax, 10
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 10
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 512  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[11], q_, &u_ptr[11]);

	mov	ecx, 4
	imul	edx, ecx, 11
	add	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 11
	add	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 513  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[12], q_, &u_ptr[12]);

	mov	edx, 4
	imul	eax, edx, 12
	add	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 12
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 514  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[13], q_, &u_ptr[13]);

	mov	eax, 4
	imul	ecx, eax, 13
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 13
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 515  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[14], q_, &u_ptr[14]);

	mov	ecx, 4
	imul	edx, ecx, 14
	add	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 14
	add	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 516  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[15], q_, &u_ptr[15]);

	mov	edx, 4
	imul	eax, edx, 15
	add	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 15
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 517  :         u_ptr += 16;

	mov	eax, DWORD PTR _u_ptr$[ebp]
	add	eax, 64					; 00000040H
	mov	DWORD PTR _u_ptr$[ebp], eax

; 518  :         v_ptr += 16;

	mov	ecx, DWORD PTR _v_ptr$[ebp]
	add	ecx, 64					; 00000040H
	mov	DWORD PTR _v_ptr$[ebp], ecx

; 519  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 520  :         if (sizeof(k) == sizeof(_UINT64_T))

	xor	edx, edx
	je	SHORT $LN7@SubtructOn

; 521  :             AddToMULTI64Counter(16);

	push	16					; 00000010H
	call	_AddToMULTI64Counter
	add	esp, 4
	jmp	SHORT $LN6@SubtructOn
$LN7@SubtructOn:

; 522  :         else
; 523  :             AddToMULTI32Counter(16);

	push	16					; 00000010H
	call	_AddToMULTI32Counter
	add	esp, 4
$LN6@SubtructOn:

; 524  : #endif
; 525  :     }
; 526  : 
; 527  :     if (v_count & 0x8)

	mov	eax, DWORD PTR _v_count$[ebp]
	and	eax, 8
	je	$LN9@SubtructOn

; 528  :     {
; 529  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[0], q_, &u_ptr[0]);

	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 530  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[1], q_, &u_ptr[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 531  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[2], q_, &u_ptr[2]);

	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 1
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 532  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[3], q_, &u_ptr[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 533  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[4], q_, &u_ptr[4]);

	mov	ecx, 4
	shl	ecx, 2
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 2
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 534  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[5], q_, &u_ptr[5]);

	mov	eax, 4
	imul	ecx, eax, 5
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 5
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 535  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[6], q_, &u_ptr[6]);

	mov	ecx, 4
	imul	edx, ecx, 6
	add	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 6
	add	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 536  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[7], q_, &u_ptr[7]);

	mov	edx, 4
	imul	eax, edx, 7
	add	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 7
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 537  :         u_ptr += 8;

	mov	eax, DWORD PTR _u_ptr$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _u_ptr$[ebp], eax

; 538  :         v_ptr += 8;

	mov	ecx, DWORD PTR _v_ptr$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _v_ptr$[ebp], ecx

; 539  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 540  :         if (sizeof(k) == sizeof(_UINT64_T))

	xor	edx, edx
	je	SHORT $LN10@SubtructOn

; 541  :             AddToMULTI64Counter(8);

	push	8
	call	_AddToMULTI64Counter
	add	esp, 4
	jmp	SHORT $LN9@SubtructOn
$LN10@SubtructOn:

; 542  :         else
; 543  :             AddToMULTI32Counter(8);

	push	8
	call	_AddToMULTI32Counter
	add	esp, 4
$LN9@SubtructOn:

; 544  : #endif
; 545  :     }
; 546  : 
; 547  :     if (v_count & 0x4)

	mov	eax, DWORD PTR _v_count$[ebp]
	and	eax, 4
	je	$LN12@SubtructOn

; 548  :     {
; 549  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[0], q_, &u_ptr[0]);

	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 550  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[1], q_, &u_ptr[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _u_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	mov	ecx, 4
	shl	ecx, 0
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 551  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[2], q_, &u_ptr[2]);

	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 1
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 552  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[3], q_, &u_ptr[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 553  :         u_ptr += 4;

	mov	ecx, DWORD PTR _u_ptr$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _u_ptr$[ebp], ecx

; 554  :         v_ptr += 4;

	mov	edx, DWORD PTR _v_ptr$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _v_ptr$[ebp], edx

; 555  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 556  :         if (sizeof(k) == sizeof(_UINT64_T))

	xor	eax, eax
	je	SHORT $LN13@SubtructOn

; 557  :             AddToMULTI64Counter(4);

	push	4
	call	_AddToMULTI64Counter
	add	esp, 4
	jmp	SHORT $LN12@SubtructOn
$LN13@SubtructOn:

; 558  :         else
; 559  :             AddToMULTI32Counter(4);

	push	4
	call	_AddToMULTI32Counter
	add	esp, 4
$LN12@SubtructOn:

; 560  : #endif
; 561  :     }
; 562  : 
; 563  :     if (v_count & 0x2)

	mov	ecx, DWORD PTR _v_count$[ebp]
	and	ecx, 2
	je	$LN15@SubtructOn

; 564  :     {
; 565  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[0], q_, &u_ptr[0]);

	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _v_ptr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _k$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 566  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[1], q_, &u_ptr[1]);

	mov	eax, 4
	shl	eax, 0
	add	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _v_ptr$[ebp]
	push	edx
	lea	eax, DWORD PTR _k$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 567  :         u_ptr += 2;

	mov	edx, DWORD PTR _u_ptr$[ebp]
	add	edx, 8
	mov	DWORD PTR _u_ptr$[ebp], edx

; 568  :         v_ptr += 2;

	mov	eax, DWORD PTR _v_ptr$[ebp]
	add	eax, 8
	mov	DWORD PTR _v_ptr$[ebp], eax

; 569  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 570  :         if (sizeof(k) == sizeof(_UINT64_T))

	xor	ecx, ecx
	je	SHORT $LN16@SubtructOn

; 571  :             AddToMULTI64Counter(2);

	push	2
	call	_AddToMULTI64Counter
	add	esp, 4
	jmp	SHORT $LN15@SubtructOn
$LN16@SubtructOn:

; 572  :         else
; 573  :             AddToMULTI32Counter(2);

	push	2
	call	_AddToMULTI32Counter
	add	esp, 4
$LN15@SubtructOn:

; 574  : #endif
; 575  :     }
; 576  : 
; 577  :     if (v_count & 0x1)

	mov	edx, DWORD PTR _v_count$[ebp]
	and	edx, 1
	je	SHORT $LN18@SubtructOn

; 578  :     {
; 579  :         c = _MULTIPLY_DIGIT_UNIT_DIV(c, &k, &v_ptr[0], q_, &u_ptr[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _v_ptr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebp]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__MULTIPLY_DIGIT_UNIT_DIV
	add	esp, 20					; 00000014H
	mov	BYTE PTR _c$[ebp], al

; 580  :         u_ptr += 1;

	mov	ecx, DWORD PTR _u_ptr$[ebp]
	add	ecx, 4
	mov	DWORD PTR _u_ptr$[ebp], ecx

; 581  :         v_ptr += 1;

	mov	edx, DWORD PTR _v_ptr$[ebp]
	add	edx, 4
	mov	DWORD PTR _v_ptr$[ebp], edx

; 582  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 583  :         if (sizeof(k) == sizeof(_UINT64_T))

	xor	eax, eax
	je	SHORT $LN19@SubtructOn

; 584  :             IncrementMULTI64Counter();

	call	_IncrementMULTI64Counter
	jmp	SHORT $LN18@SubtructOn
$LN19@SubtructOn:

; 585  :         else
; 586  :             IncrementMULTI32Counter();

	call	_IncrementMULTI32Counter
$LN18@SubtructOn:

; 587  : #endif
; 588  :     }
; 589  : 
; 590  :     c = _SUBTRUCT_UNIT_DIV(c, *u_ptr, k, u_ptr);

	mov	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	push	edx
	mov	eax, DWORD PTR _u_ptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 591  :     u_ptr += 1;

	mov	eax, DWORD PTR _u_ptr$[ebp]
	add	eax, 4
	mov	DWORD PTR _u_ptr$[ebp], eax

; 592  : 
; 593  :     return (DoBorrow(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr));

	mov	ecx, DWORD PTR _u_buf_len$[ebp]
	mov	edx, DWORD PTR _u_buf$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+4]
	sub	eax, DWORD PTR _u_ptr$[ebp]
	sar	eax, 2
	push	eax
	mov	ecx, DWORD PTR _u_ptr$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	_DoBorrow
	add	esp, 12					; 0000000cH

; 594  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@SubtructOn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN24@SubtructOn:
	DD	1
	DD	$LN23@SubtructOn
$LN23@SubtructOn:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN22@SubtructOn
$LN22@SubtructOn:
	DB	107					; 0000006bH
	DB	0
_SubtructOneLine ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
_TEXT	SEGMENT
_t_lo$ = -20						; size = 4
_t_hi$ = -8						; size = 4
_c$ = 8							; size = 1
_k$ = 12						; size = 4
_vp$ = 16						; size = 4
_q_$ = 20						; size = 4
_up$ = 24						; size = 4
__MULTIPLYX_DIGIT_UNIT_DIV PROC

; 435  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __531E8CBE_pmc_divrem@c
	call	@__CheckForDebuggerJustMyCode@4

; 436  :     __UNIT_TYPE_DIV t_hi;
; 437  :     __UNIT_TYPE_DIV t_lo;
; 438  :     t_lo = _MULTIPLYX_UNIT_DIV(*vp, q_, &t_hi);

	lea	eax, DWORD PTR _t_hi$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vp$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	__MULTIPLYX_UNIT_DIV
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _t_lo$[ebp], eax

; 439  :     _ADDX_UNIT_DIV(_ADDX_UNIT_DIV(0, t_lo, *k, &t_lo), t_hi, 0, &t_hi);

	lea	ecx, DWORD PTR _t_hi$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _t_hi$[ebp]
	push	edx
	lea	eax, DWORD PTR _t_lo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _t_lo$[ebp]
	push	eax
	push	0
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	movzx	ecx, al
	push	ecx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	edx, DWORD PTR _up$[ebp]
	push	edx
	mov	eax, DWORD PTR _t_lo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _up$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 441  :     *k = t_hi;

	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _t_hi$[ebp]
	mov	DWORD PTR [ecx], edx

; 442  :     return (c);

	mov	al, BYTE PTR _c$[ebp]

; 443  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@MULTIPLYX_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN6@MULTIPLYX_:
	DD	2
	DD	$LN5@MULTIPLYX_
$LN5@MULTIPLYX_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@MULTIPLYX_
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@MULTIPLYX_
$LN4@MULTIPLYX_:
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	0
$LN3@MULTIPLYX_:
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	0
__MULTIPLYX_DIGIT_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
_TEXT	SEGMENT
_t_lo$ = -20						; size = 4
_t_hi$ = -8						; size = 4
_c$ = 8							; size = 1
_k$ = 12						; size = 4
_vp$ = 16						; size = 4
_q_$ = 20						; size = 4
_up$ = 24						; size = 4
__MULTIPLY_DIGIT_UNIT_DIV PROC

; 424  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __531E8CBE_pmc_divrem@c
	call	@__CheckForDebuggerJustMyCode@4

; 425  :     __UNIT_TYPE_DIV t_hi;
; 426  :     __UNIT_TYPE_DIV t_lo;
; 427  :     t_lo = _MULTIPLY_UNIT_DIV(*vp, q_, &t_hi);

	lea	eax, DWORD PTR _t_hi$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vp$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	__MULTIPLY_UNIT_DIV
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _t_lo$[ebp], eax

; 428  :     _ADD_UNIT_DIV(_ADD_UNIT_DIV(0, t_lo, *k, &t_lo), t_hi, 0, &t_hi);

	lea	ecx, DWORD PTR _t_hi$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _t_hi$[ebp]
	push	edx
	lea	eax, DWORD PTR _t_lo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _t_lo$[ebp]
	push	eax
	push	0
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	movzx	ecx, al
	push	ecx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	edx, DWORD PTR _up$[ebp]
	push	edx
	mov	eax, DWORD PTR _t_lo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _up$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__SUBTRUCT_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 430  :     *k = t_hi;

	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _t_hi$[ebp]
	mov	DWORD PTR [ecx], edx

; 431  :     return (c);

	mov	al, BYTE PTR _c$[ebp]

; 432  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@MULTIPLY_D
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN6@MULTIPLY_D:
	DD	2
	DD	$LN5@MULTIPLY_D
$LN5@MULTIPLY_D:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@MULTIPLY_D
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@MULTIPLY_D
$LN4@MULTIPLY_D:
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	0
$LN3@MULTIPLY_D:
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	0
__MULTIPLY_DIGIT_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
_TEXT	SEGMENT
_c$ = 8							; size = 1
_up$ = 12						; size = 4
_u_count$ = 16						; size = 4
_DoBorrow PROC

; 384  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __531E8CBE_pmc_divrem@c
	call	@__CheckForDebuggerJustMyCode@4
$LN4@DoBorrow:

; 385  :     // 桁借りを続く限り行う
; 386  :     for (;;)
; 387  :     {
; 388  :         if (u_count <= 0)

	cmp	DWORD PTR _u_count$[ebp], 0
	ja	SHORT $LN5@DoBorrow

; 389  :         {
; 390  :             // u の最上位まで達してしまった場合
; 391  : 
; 392  :             if (c)

	movsx	eax, BYTE PTR _c$[ebp]
	test	eax, eax
	je	SHORT $LN7@DoBorrow

; 393  :             {
; 394  :                 // かつそれでも桁借りを行う必要がある場合
; 395  : 
; 396  :                 // 減算結果が負になってしまったので呼び出し元に通知する。
; 397  :                 return (TRUE);

	mov	eax, 1
	jmp	SHORT $LN1@DoBorrow
$LN7@DoBorrow:

; 398  :             }
; 399  : 
; 400  :             // u の最上位に達してしまった場合はいずれにしろループを中断して正常復帰する。
; 401  : 
; 402  :             return (FALSE);

	xor	eax, eax
	jmp	SHORT $LN1@DoBorrow

; 403  :         }

	jmp	SHORT $LN6@DoBorrow
$LN5@DoBorrow:

; 404  :         else if (c)

	movsx	ecx, BYTE PTR _c$[ebp]
	test	ecx, ecx
	je	SHORT $LN8@DoBorrow

; 405  :         {
; 406  :             // u の最上位に達しておらず、かつボローが立っている場合
; 407  : 
; 408  :             // 桁借りを継続する
; 409  :             c = _SUBTRUCT_UNIT_DIV(c, *up, 0, up);

	mov	edx, DWORD PTR _up$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _up$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__SUBTRUCT_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 410  :             ++up;

	mov	eax, DWORD PTR _up$[ebp]
	add	eax, 4
	mov	DWORD PTR _up$[ebp], eax

; 411  :             --u_count;

	mov	ecx, DWORD PTR _u_count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _u_count$[ebp], ecx

; 412  :         }

	jmp	SHORT $LN6@DoBorrow
$LN8@DoBorrow:

; 413  :         else
; 414  :         {
; 415  :             // u の最上位に達しておらず、かつボローが立っていない場合
; 416  : 
; 417  :             // 桁借りを中断し復帰する。
; 418  :             return (FALSE);

	xor	eax, eax
	jmp	SHORT $LN1@DoBorrow
$LN6@DoBorrow:

; 419  :         }
; 420  :     }

	jmp	SHORT $LN4@DoBorrow
$LN1@DoBorrow:

; 421  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_DoBorrow ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
_TEXT	SEGMENT
_q_$ = -28						; size = 4
_v2$ = -24						; size = 4
_v1$ = -20						; size = 4
_uj_2$ = -16						; size = 4
_uj_1$ = -12						; size = 4
_uj$ = -8						; size = 4
_u_index$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_v_buf$ = 12						; size = 4
_v_buf_len$ = 16					; size = 4
_q_index$ = 20						; size = 4
_CalculateQ_X PROC

; 359  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __531E8CBE_pmc_divrem@c
	call	@__CheckForDebuggerJustMyCode@4

; 360  :     __UNIT_TYPE u_index = q_index + v_buf_len;

	mov	eax, DWORD PTR _q_index$[ebp]
	add	eax, DWORD PTR _v_buf_len$[ebp]
	mov	DWORD PTR _u_index$[ebp], eax

; 361  :     __UNIT_TYPE_DIV uj = u_buf[u_index];

	mov	ecx, DWORD PTR _u_index$[ebp]
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _uj$[ebp], eax

; 362  :     __UNIT_TYPE_DIV uj_1 = u_buf[u_index - 1];

	mov	ecx, DWORD PTR _u_index$[ebp]
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4-4]
	mov	DWORD PTR _uj_1$[ebp], eax

; 363  :     __UNIT_TYPE_DIV uj_2 = u_buf[u_index - 2];

	mov	ecx, DWORD PTR _u_index$[ebp]
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4-8]
	mov	DWORD PTR _uj_2$[ebp], eax

; 364  :     __UNIT_TYPE_DIV v1 = v_buf[v_buf_len - 1];

	mov	ecx, DWORD PTR _v_buf_len$[ebp]
	mov	edx, DWORD PTR _v_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4-4]
	mov	DWORD PTR _v1$[ebp], eax

; 365  :     __UNIT_TYPE_DIV v2 = v_buf[v_buf_len - 2];

	mov	ecx, DWORD PTR _v_buf_len$[ebp]
	mov	edx, DWORD PTR _v_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4-8]
	mov	DWORD PTR _v2$[ebp], eax

; 366  :     __UNIT_TYPE_DIV q_ = AsumeQ_(uj, uj_1, v1);

	mov	ecx, DWORD PTR _v1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _uj_1$[ebp]
	push	edx
	mov	eax, DWORD PTR _uj$[ebp]
	push	eax
	call	_AsumeQ_
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _q_$[ebp], eax

; 367  : #ifdef DO_TRACE
; 368  :     ReportLabel("q_ の計算");
; 369  :     ReportVar("uj", uj);
; 370  :     ReportVar("uj1", uj_1);
; 371  :     ReportVar("v1", v1);
; 372  :     ReportVar("q_", q_);
; 373  : #endif
; 374  :     if (!CheckQ_X(q_, uj, uj_1, uj_2, v1, v2))

	mov	ecx, DWORD PTR _v2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v1$[ebp]
	push	edx
	mov	eax, DWORD PTR _uj_2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _uj_1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _uj$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	call	_CheckQ_X
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN2@CalculateQ

; 375  :         return (q_);

	mov	eax, DWORD PTR _q_$[ebp]
	jmp	SHORT $LN1@CalculateQ
$LN2@CalculateQ:

; 376  :     --q_;

	mov	ecx, DWORD PTR _q_$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _q_$[ebp], ecx

; 377  :     if (!CheckQ_X(q_, uj, uj_1, uj_2, v1, v2))

	mov	edx, DWORD PTR _v2$[ebp]
	push	edx
	mov	eax, DWORD PTR _v1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _uj_2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _uj_1$[ebp]
	push	edx
	mov	eax, DWORD PTR _uj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	call	_CheckQ_X
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN3@CalculateQ

; 378  :         return (q_);

	mov	eax, DWORD PTR _q_$[ebp]
	jmp	SHORT $LN1@CalculateQ
$LN3@CalculateQ:

; 379  :     --q_;

	mov	edx, DWORD PTR _q_$[ebp]
	sub	edx, 1
	mov	DWORD PTR _q_$[ebp], edx

; 380  :     return (q_);

	mov	eax, DWORD PTR _q_$[ebp]
$LN1@CalculateQ:

; 381  : }

	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CalculateQ_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
_TEXT	SEGMENT
_q_$ = -28						; size = 4
_v2$ = -24						; size = 4
_v1$ = -20						; size = 4
_uj_2$ = -16						; size = 4
_uj_1$ = -12						; size = 4
_uj$ = -8						; size = 4
_u_index$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_v_buf$ = 12						; size = 4
_v_buf_len$ = 16					; size = 4
_q_index$ = 20						; size = 4
_CalculateQ_ PROC

; 341  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __531E8CBE_pmc_divrem@c
	call	@__CheckForDebuggerJustMyCode@4

; 342  :     __UNIT_TYPE u_index = q_index + v_buf_len;

	mov	eax, DWORD PTR _q_index$[ebp]
	add	eax, DWORD PTR _v_buf_len$[ebp]
	mov	DWORD PTR _u_index$[ebp], eax

; 343  :     __UNIT_TYPE_DIV uj = u_buf[u_index];

	mov	ecx, DWORD PTR _u_index$[ebp]
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _uj$[ebp], eax

; 344  :     __UNIT_TYPE_DIV uj_1 = u_buf[u_index - 1];

	mov	ecx, DWORD PTR _u_index$[ebp]
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4-4]
	mov	DWORD PTR _uj_1$[ebp], eax

; 345  :     __UNIT_TYPE_DIV uj_2 = u_buf[u_index - 2];

	mov	ecx, DWORD PTR _u_index$[ebp]
	mov	edx, DWORD PTR _u_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4-8]
	mov	DWORD PTR _uj_2$[ebp], eax

; 346  :     __UNIT_TYPE_DIV v1 = v_buf[v_buf_len - 1];

	mov	ecx, DWORD PTR _v_buf_len$[ebp]
	mov	edx, DWORD PTR _v_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4-4]
	mov	DWORD PTR _v1$[ebp], eax

; 347  :     __UNIT_TYPE_DIV v2 = v_buf[v_buf_len - 2];

	mov	ecx, DWORD PTR _v_buf_len$[ebp]
	mov	edx, DWORD PTR _v_buf$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4-8]
	mov	DWORD PTR _v2$[ebp], eax

; 348  :     __UNIT_TYPE_DIV q_ = AsumeQ_(uj, uj_1, v1);

	mov	ecx, DWORD PTR _v1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _uj_1$[ebp]
	push	edx
	mov	eax, DWORD PTR _uj$[ebp]
	push	eax
	call	_AsumeQ_
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _q_$[ebp], eax

; 349  :     if (!CheckQ_(q_, uj, uj_1, uj_2, v1, v2))

	mov	ecx, DWORD PTR _v2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v1$[ebp]
	push	edx
	mov	eax, DWORD PTR _uj_2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _uj_1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _uj$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	call	_CheckQ_
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN2@CalculateQ

; 350  :         return (q_);

	mov	eax, DWORD PTR _q_$[ebp]
	jmp	SHORT $LN1@CalculateQ
$LN2@CalculateQ:

; 351  :     --q_;

	mov	ecx, DWORD PTR _q_$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _q_$[ebp], ecx

; 352  :     if (!CheckQ_(q_, uj, uj_1, uj_2, v1, v2))

	mov	edx, DWORD PTR _v2$[ebp]
	push	edx
	mov	eax, DWORD PTR _v1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _uj_2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _uj_1$[ebp]
	push	edx
	mov	eax, DWORD PTR _uj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	call	_CheckQ_
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	SHORT $LN3@CalculateQ

; 353  :         return (q_);

	mov	eax, DWORD PTR _q_$[ebp]
	jmp	SHORT $LN1@CalculateQ
$LN3@CalculateQ:

; 354  :     --q_;

	mov	edx, DWORD PTR _q_$[ebp]
	sub	edx, 1
	mov	DWORD PTR _q_$[ebp], edx

; 355  :     return (q_);

	mov	eax, DWORD PTR _q_$[ebp]
$LN1@CalculateQ:

; 356  : }

	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CalculateQ_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
_TEXT	SEGMENT
tv88 = -64						; size = 4
_t_mi$ = -60						; size = 4
_t_hi$ = -52						; size = 4
_rh_lo$ = -44						; size = 4
_rh_mi$ = -36						; size = 4
_rh_hi$ = -24						; size = 4
_lh_lo$ = -16						; size = 4
_lh_mi$ = -8						; size = 4
_q_$ = 8						; size = 4
_uj$ = 12						; size = 4
_uj_1$ = 16						; size = 4
_uj_2$ = 20						; size = 4
_v1$ = 24						; size = 4
_v2$ = 28						; size = 4
_CheckQ_X PROC

; 284  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __531E8CBE_pmc_divrem@c
	call	@__CheckForDebuggerJustMyCode@4

; 285  : #ifdef DO_TRACE
; 286  :     ReportLabel("q_ の検査");
; 287  :     ReportVar("q_", q_);
; 288  :     ReportVar("uj", uj);
; 289  :     ReportVar("uj1", uj_1);
; 290  :     ReportVar("uj2", uj_2);
; 291  :     ReportVar("v1", v1);
; 292  :     ReportVar("v2", v2);
; 293  : #endif
; 294  :     __UNIT_TYPE_DIV lh_mi;
; 295  :     __UNIT_TYPE_DIV lh_lo = _MULTIPLYX_UNIT_DIV(v2, q_, &lh_mi);

	lea	eax, DWORD PTR _lh_mi$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v2$[ebp]
	push	edx
	call	__MULTIPLYX_UNIT_DIV
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _lh_lo$[ebp], eax

; 296  :     __UNIT_TYPE_DIV rh_hi;
; 297  :     __UNIT_TYPE_DIV rh_mi;
; 298  :     __UNIT_TYPE_DIV rh_lo = uj_2;

	mov	eax, DWORD PTR _uj_2$[ebp]
	mov	DWORD PTR _rh_lo$[ebp], eax

; 299  :     __UNIT_TYPE_DIV t_hi;
; 300  :     __UNIT_TYPE_DIV t_mi = _MULTIPLYX_UNIT_DIV(q_, v1, &t_hi);

	lea	ecx, DWORD PTR _t_hi$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v1$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	call	__MULTIPLYX_UNIT_DIV
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _t_mi$[ebp], eax

; 301  : 
; 302  :     _SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(0, uj_1, t_mi, &rh_mi), uj, t_hi, &rh_hi);

	lea	ecx, DWORD PTR _rh_hi$[ebp]
	push	ecx
	mov	edx, DWORD PTR _t_hi$[ebp]
	push	edx
	mov	eax, DWORD PTR _uj$[ebp]
	push	eax
	lea	ecx, DWORD PTR _rh_mi$[ebp]
	push	ecx
	mov	edx, DWORD PTR _t_mi$[ebp]
	push	edx
	mov	eax, DWORD PTR _uj_1$[ebp]
	push	eax
	push	0
	call	__SUBTRUCT_UNIT_DIV
	add	esp, 16					; 00000010H
	movzx	ecx, al
	push	ecx
	call	__SUBTRUCT_UNIT_DIV
	add	esp, 16					; 00000010H

; 303  : 
; 304  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 305  :     if (sizeof(q_) == sizeof(_UINT64_T))

	xor	edx, edx
	je	SHORT $LN2@CheckQ_X

; 306  :         AddToMULTI64Counter(2);

	push	2
	call	_AddToMULTI64Counter
	add	esp, 4
	jmp	SHORT $LN3@CheckQ_X
$LN2@CheckQ_X:

; 307  :     else
; 308  :         AddToMULTI32Counter(2);

	push	2
	call	_AddToMULTI32Counter
	add	esp, 4
$LN3@CheckQ_X:

; 309  : #endif
; 310  :     if (rh_hi > 0)

	cmp	DWORD PTR _rh_hi$[ebp], 0
	jbe	SHORT $LN4@CheckQ_X

; 311  :     {
; 312  : #ifdef DO_TRACE
; 313  :         ReportVar("result", 0);
; 314  : #endif
; 315  :         return (FALSE);

	xor	eax, eax
	jmp	SHORT $LN1@CheckQ_X

; 316  :     }

	jmp	SHORT $LN1@CheckQ_X
$LN4@CheckQ_X:

; 317  :     else if (lh_mi > rh_mi)

	mov	eax, DWORD PTR _lh_mi$[ebp]
	cmp	eax, DWORD PTR _rh_mi$[ebp]
	jbe	SHORT $LN6@CheckQ_X

; 318  :     {
; 319  : #ifdef DO_TRACE
; 320  :         ReportVar("result", 1);
; 321  : #endif
; 322  :         return (TRUE);

	mov	eax, 1
	jmp	SHORT $LN1@CheckQ_X

; 323  :     }

	jmp	SHORT $LN1@CheckQ_X
$LN6@CheckQ_X:

; 324  :     else if (lh_mi < rh_mi)

	mov	ecx, DWORD PTR _lh_mi$[ebp]
	cmp	ecx, DWORD PTR _rh_mi$[ebp]
	jae	SHORT $LN8@CheckQ_X

; 325  :     {
; 326  : #ifdef DO_TRACE
; 327  :         ReportVar("result", 0);
; 328  : #endif
; 329  :         return (FALSE);

	xor	eax, eax
	jmp	SHORT $LN1@CheckQ_X

; 330  :     }

	jmp	SHORT $LN1@CheckQ_X
$LN8@CheckQ_X:

; 331  :     else
; 332  :     {
; 333  : #ifdef DO_TRACE
; 334  :         ReportVar("result", lh_lo > rh_lo);
; 335  : #endif
; 336  :         return (lh_lo > rh_lo);

	mov	edx, DWORD PTR _lh_lo$[ebp]
	cmp	edx, DWORD PTR _rh_lo$[ebp]
	jbe	SHORT $LN11@CheckQ_X
	mov	DWORD PTR tv88[ebp], 1
	jmp	SHORT $LN12@CheckQ_X
$LN11@CheckQ_X:
	mov	DWORD PTR tv88[ebp], 0
$LN12@CheckQ_X:
	mov	eax, DWORD PTR tv88[ebp]
$LN1@CheckQ_X:

; 337  :     }
; 338  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@CheckQ_X
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN18@CheckQ_X:
	DD	4
	DD	$LN17@CheckQ_X
$LN17@CheckQ_X:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN13@CheckQ_X
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN14@CheckQ_X
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN15@CheckQ_X
	DD	-52					; ffffffccH
	DD	4
	DD	$LN16@CheckQ_X
$LN16@CheckQ_X:
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	0
$LN15@CheckQ_X:
	DB	114					; 00000072H
	DB	104					; 00000068H
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	0
$LN14@CheckQ_X:
	DB	114					; 00000072H
	DB	104					; 00000068H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	0
$LN13@CheckQ_X:
	DB	108					; 0000006cH
	DB	104					; 00000068H
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	0
_CheckQ_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
_TEXT	SEGMENT
tv88 = -64						; size = 4
_t_mi$ = -60						; size = 4
_t_hi$ = -52						; size = 4
_rh_lo$ = -44						; size = 4
_rh_mi$ = -36						; size = 4
_rh_hi$ = -24						; size = 4
_lh_lo$ = -16						; size = 4
_lh_mi$ = -8						; size = 4
_q_$ = 8						; size = 4
_uj$ = 12						; size = 4
_uj_1$ = 16						; size = 4
_uj_2$ = 20						; size = 4
_v1$ = 24						; size = 4
_v2$ = 28						; size = 4
_CheckQ_ PROC

; 257  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __531E8CBE_pmc_divrem@c
	call	@__CheckForDebuggerJustMyCode@4

; 258  :     __UNIT_TYPE_DIV lh_mi;
; 259  :     __UNIT_TYPE_DIV lh_lo = _MULTIPLY_UNIT_DIV(v2, q_, &lh_mi);

	lea	eax, DWORD PTR _lh_mi$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v2$[ebp]
	push	edx
	call	__MULTIPLY_UNIT_DIV
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _lh_lo$[ebp], eax

; 260  :     __UNIT_TYPE_DIV rh_hi;
; 261  :     __UNIT_TYPE_DIV rh_mi;
; 262  :     __UNIT_TYPE_DIV rh_lo = uj_2;

	mov	eax, DWORD PTR _uj_2$[ebp]
	mov	DWORD PTR _rh_lo$[ebp], eax

; 263  :     __UNIT_TYPE_DIV t_hi;
; 264  :     __UNIT_TYPE_DIV t_mi = _MULTIPLY_UNIT_DIV(q_, v1, &t_hi);

	lea	ecx, DWORD PTR _t_hi$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v1$[ebp]
	push	edx
	mov	eax, DWORD PTR _q_$[ebp]
	push	eax
	call	__MULTIPLY_UNIT_DIV
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _t_mi$[ebp], eax

; 265  :     _SUBTRUCT_UNIT_DIV(_SUBTRUCT_UNIT_DIV(0, uj_1, t_mi, &rh_mi), uj, t_hi, &rh_hi);

	lea	ecx, DWORD PTR _rh_hi$[ebp]
	push	ecx
	mov	edx, DWORD PTR _t_hi$[ebp]
	push	edx
	mov	eax, DWORD PTR _uj$[ebp]
	push	eax
	lea	ecx, DWORD PTR _rh_mi$[ebp]
	push	ecx
	mov	edx, DWORD PTR _t_mi$[ebp]
	push	edx
	mov	eax, DWORD PTR _uj_1$[ebp]
	push	eax
	push	0
	call	__SUBTRUCT_UNIT_DIV
	add	esp, 16					; 00000010H
	movzx	ecx, al
	push	ecx
	call	__SUBTRUCT_UNIT_DIV
	add	esp, 16					; 00000010H

; 266  : 
; 267  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 268  :     if (sizeof(q_) == sizeof(_UINT64_T))

	xor	edx, edx
	je	SHORT $LN2@CheckQ_

; 269  :         AddToMULTI64Counter(2);

	push	2
	call	_AddToMULTI64Counter
	add	esp, 4
	jmp	SHORT $LN3@CheckQ_
$LN2@CheckQ_:

; 270  :     else
; 271  :         AddToMULTI32Counter(2);

	push	2
	call	_AddToMULTI32Counter
	add	esp, 4
$LN3@CheckQ_:

; 272  : #endif
; 273  :     if (rh_hi > 0)

	cmp	DWORD PTR _rh_hi$[ebp], 0
	jbe	SHORT $LN4@CheckQ_

; 274  :         return (FALSE);

	xor	eax, eax
	jmp	SHORT $LN1@CheckQ_
	jmp	SHORT $LN1@CheckQ_
$LN4@CheckQ_:

; 275  :     else if (lh_mi > rh_mi)

	mov	eax, DWORD PTR _lh_mi$[ebp]
	cmp	eax, DWORD PTR _rh_mi$[ebp]
	jbe	SHORT $LN6@CheckQ_

; 276  :         return (TRUE);

	mov	eax, 1
	jmp	SHORT $LN1@CheckQ_
	jmp	SHORT $LN1@CheckQ_
$LN6@CheckQ_:

; 277  :     else if (lh_mi < rh_mi)

	mov	ecx, DWORD PTR _lh_mi$[ebp]
	cmp	ecx, DWORD PTR _rh_mi$[ebp]
	jae	SHORT $LN8@CheckQ_

; 278  :         return (FALSE);

	xor	eax, eax
	jmp	SHORT $LN1@CheckQ_
	jmp	SHORT $LN1@CheckQ_
$LN8@CheckQ_:

; 279  :     else
; 280  :         return (lh_lo > rh_lo);

	mov	edx, DWORD PTR _lh_lo$[ebp]
	cmp	edx, DWORD PTR _rh_lo$[ebp]
	jbe	SHORT $LN11@CheckQ_
	mov	DWORD PTR tv88[ebp], 1
	jmp	SHORT $LN12@CheckQ_
$LN11@CheckQ_:
	mov	DWORD PTR tv88[ebp], 0
$LN12@CheckQ_:
	mov	eax, DWORD PTR tv88[ebp]
$LN1@CheckQ_:

; 281  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@CheckQ_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN18@CheckQ_:
	DD	4
	DD	$LN17@CheckQ_
$LN17@CheckQ_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN13@CheckQ_
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN14@CheckQ_
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN15@CheckQ_
	DD	-52					; ffffffccH
	DD	4
	DD	$LN16@CheckQ_
$LN16@CheckQ_:
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	0
$LN15@CheckQ_:
	DB	114					; 00000072H
	DB	104					; 00000068H
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	0
$LN14@CheckQ_:
	DB	114					; 00000072H
	DB	104					; 00000068H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	0
$LN13@CheckQ_:
	DB	108					; 0000006cH
	DB	104					; 00000068H
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	0
_CheckQ_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
_TEXT	SEGMENT
_q$ = -16						; size = 4
_r$ = -8						; size = 4
_uj$ = 8						; size = 4
_uj_1$ = 12						; size = 4
_v1$ = 16						; size = 4
_AsumeQ_ PROC

; 242  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __531E8CBE_pmc_divrem@c
	call	@__CheckForDebuggerJustMyCode@4

; 243  :     if (uj == v1)

	mov	eax, DWORD PTR _uj$[ebp]
	cmp	eax, DWORD PTR _v1$[ebp]
	jne	SHORT $LN2@AsumeQ_

; 244  :         return (-1);

	or	eax, -1
	jmp	SHORT $LN1@AsumeQ_
$LN2@AsumeQ_:

; 245  :     __UNIT_TYPE_DIV r;
; 246  :     __UNIT_TYPE_DIV q = _DIVREM_UNIT(uj, uj_1, v1, &r);

	lea	ecx, DWORD PTR _r$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v1$[ebp]
	push	edx
	mov	eax, DWORD PTR _uj_1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _uj$[ebp]
	push	ecx
	call	__DIVREM_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _q$[ebp], eax

; 247  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 248  :     if (sizeof(v1) == sizeof(_UINT64_T))

	xor	edx, edx
	je	SHORT $LN3@AsumeQ_

; 249  :         IncrementDIV64Counter();

	call	_IncrementDIV64Counter
	jmp	SHORT $LN4@AsumeQ_
$LN3@AsumeQ_:

; 250  :     else
; 251  :         IncrementDIV32Counter();

	call	_IncrementDIV32Counter
$LN4@AsumeQ_:

; 252  : #endif
; 253  :     return (q);

	mov	eax, DWORD PTR _q$[ebp]
$LN1@AsumeQ_:

; 254  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@AsumeQ_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN8@AsumeQ_:
	DD	1
	DD	$LN7@AsumeQ_
$LN7@AsumeQ_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN6@AsumeQ_
$LN6@AsumeQ_:
	DB	114					; 00000072H
	DB	0
_AsumeQ_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_2WORDS_ADCX_DIV PROC

; 4543 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __E05E7037_autogenerated_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 4544 : #ifdef _MSC_VER
; 4545 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 4546 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 4547 : #elif defined(__GNUC__)
; 4548 : #ifdef _M_IX86
; 4549 :     __asm__ volatile (
; 4550 :         "addb\t$-1, %0\n\t"
; 4551 :         "movl\t(%1), %%ecx\n\t"
; 4552 :         "adcxl\t(%2), %%ecx\n\t"
; 4553 :         "movl\t%%ecx, (%3)\n\t"
; 4554 :         "movl\t4(%1), %%ecx\n\t"
; 4555 :         "adcxl\t4(%2), %%ecx\n\t"
; 4556 :         "movl\t%%ecx, 4(%3)\n\t"
; 4557 :         "setc\t%0"
; 4558 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 4559 :         :
; 4560 :         : "cc", "memory", "%ecx"
; 4561 : );
; 4562 : #elif defined(_M_IX64)
; 4563 :     __asm__ volatile (
; 4564 :         "addb\t$-1, %0\n\t"
; 4565 :         "movq\t(%1), %%rcx\n\t"
; 4566 :         "adcxq\t(%2), %%rcx\n\t"
; 4567 :         "movq\t%%rcx, (%3)\n\t"
; 4568 :         "movq\t8(%1), %%rcx\n\t"
; 4569 :         "adcxq\t8(%2), %%rcx\n\t"
; 4570 :         "movq\t%%rcx, 8(%3)\n\t"
; 4571 :         "setc\t%0"
; 4572 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 4573 :         :
; 4574 :         : "cc", "memory", "%rcx"
; 4575 : );
; 4576 : #else
; 4577 : #error unknown platform
; 4578 : #endif
; 4579 : #else
; 4580 : #error unknown compiler
; 4581 : #endif
; 4582 :     return (c);

	mov	al, BYTE PTR _c$[ebp]

; 4583 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ADD_2WORDS_ADCX_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_2WORDS_ADC_DIV PROC

; 4500 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __E05E7037_autogenerated_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 4501 : #ifdef _MSC_VER
; 4502 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 4503 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 4504 : #elif defined(__GNUC__)
; 4505 : #ifdef _M_IX86
; 4506 :     __asm__ volatile (
; 4507 :         "addb\t$-1, %0\n\t"
; 4508 :         "movl\t(%1), %%ecx\n\t"
; 4509 :         "adcl\t(%2), %%ecx\n\t"
; 4510 :         "movl\t%%ecx, (%3)\n\t"
; 4511 :         "movl\t4(%1), %%ecx\n\t"
; 4512 :         "adcl\t4(%2), %%ecx\n\t"
; 4513 :         "movl\t%%ecx, 4(%3)\n\t"
; 4514 :         "setc\t%0"
; 4515 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 4516 :         :
; 4517 :         : "cc", "memory", "%ecx"
; 4518 : );
; 4519 : #elif defined(_M_IX64)
; 4520 :     __asm__ volatile (
; 4521 :         "addb\t$-1, %0\n\t"
; 4522 :         "movq\t(%1), %%rcx\n\t"
; 4523 :         "adcq\t(%2), %%rcx\n\t"
; 4524 :         "movq\t%%rcx, (%3)\n\t"
; 4525 :         "movq\t8(%1), %%rcx\n\t"
; 4526 :         "adcq\t8(%2), %%rcx\n\t"
; 4527 :         "movq\t%%rcx, 8(%3)\n\t"
; 4528 :         "setc\t%0"
; 4529 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 4530 :         :
; 4531 :         : "cc", "memory", "%rcx"
; 4532 : );
; 4533 : #else
; 4534 : #error unknown platform
; 4535 : #endif
; 4536 : #else
; 4537 : #error unknown compiler
; 4538 : #endif
; 4539 :     return (c);

	mov	al, BYTE PTR _c$[ebp]

; 4540 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ADD_2WORDS_ADC_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_4WORDS_ADCX_DIV PROC

; 4157 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __E05E7037_autogenerated_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 4158 : #ifdef _MSC_VER
; 4159 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 4160 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 4161 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 4162 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 4163 : #elif defined(__GNUC__)
; 4164 : #ifdef _M_IX86
; 4165 :     __asm__ volatile (
; 4166 :         "addb\t$-1, %0\n\t"
; 4167 :         "movl\t(%1), %%ecx\n\t"
; 4168 :         "adcxl\t(%2), %%ecx\n\t"
; 4169 :         "movl\t%%ecx, (%3)\n\t"
; 4170 :         "movl\t4(%1), %%ecx\n\t"
; 4171 :         "adcxl\t4(%2), %%ecx\n\t"
; 4172 :         "movl\t%%ecx, 4(%3)\n\t"
; 4173 :         "movl\t8(%1), %%ecx\n\t"
; 4174 :         "adcxl\t8(%2), %%ecx\n\t"
; 4175 :         "movl\t%%ecx, 8(%3)\n\t"
; 4176 :         "movl\t12(%1), %%ecx\n\t"
; 4177 :         "adcxl\t12(%2), %%ecx\n\t"
; 4178 :         "movl\t%%ecx, 12(%3)\n\t"
; 4179 :         "setc\t%0"
; 4180 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 4181 :         :
; 4182 :         : "cc", "memory", "%ecx"
; 4183 : );
; 4184 : #elif defined(_M_IX64)
; 4185 :     __asm__ volatile (
; 4186 :         "addb\t$-1, %0\n\t"
; 4187 :         "movq\t(%1), %%rcx\n\t"
; 4188 :         "adcxq\t(%2), %%rcx\n\t"
; 4189 :         "movq\t%%rcx, (%3)\n\t"
; 4190 :         "movq\t8(%1), %%rcx\n\t"
; 4191 :         "adcxq\t8(%2), %%rcx\n\t"
; 4192 :         "movq\t%%rcx, 8(%3)\n\t"
; 4193 :         "movq\t16(%1), %%rcx\n\t"
; 4194 :         "adcxq\t16(%2), %%rcx\n\t"
; 4195 :         "movq\t%%rcx, 16(%3)\n\t"
; 4196 :         "movq\t24(%1), %%rcx\n\t"
; 4197 :         "adcxq\t24(%2), %%rcx\n\t"
; 4198 :         "movq\t%%rcx, 24(%3)\n\t"
; 4199 :         "setc\t%0"
; 4200 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 4201 :         :
; 4202 :         : "cc", "memory", "%rcx"
; 4203 : );
; 4204 : #else
; 4205 : #error unknown platform
; 4206 : #endif
; 4207 : #else
; 4208 : #error unknown compiler
; 4209 : #endif
; 4210 :     return (c);

	mov	al, BYTE PTR _c$[ebp]

; 4211 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ADD_4WORDS_ADCX_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_4WORDS_ADC_DIV PROC

; 4100 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __E05E7037_autogenerated_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 4101 : #ifdef _MSC_VER
; 4102 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 4103 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 4104 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 4105 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 4106 : #elif defined(__GNUC__)
; 4107 : #ifdef _M_IX86
; 4108 :     __asm__ volatile (
; 4109 :         "addb\t$-1, %0\n\t"
; 4110 :         "movl\t(%1), %%ecx\n\t"
; 4111 :         "adcl\t(%2), %%ecx\n\t"
; 4112 :         "movl\t%%ecx, (%3)\n\t"
; 4113 :         "movl\t4(%1), %%ecx\n\t"
; 4114 :         "adcl\t4(%2), %%ecx\n\t"
; 4115 :         "movl\t%%ecx, 4(%3)\n\t"
; 4116 :         "movl\t8(%1), %%ecx\n\t"
; 4117 :         "adcl\t8(%2), %%ecx\n\t"
; 4118 :         "movl\t%%ecx, 8(%3)\n\t"
; 4119 :         "movl\t12(%1), %%ecx\n\t"
; 4120 :         "adcl\t12(%2), %%ecx\n\t"
; 4121 :         "movl\t%%ecx, 12(%3)\n\t"
; 4122 :         "setc\t%0"
; 4123 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 4124 :         :
; 4125 :         : "cc", "memory", "%ecx"
; 4126 : );
; 4127 : #elif defined(_M_IX64)
; 4128 :     __asm__ volatile (
; 4129 :         "addb\t$-1, %0\n\t"
; 4130 :         "movq\t(%1), %%rcx\n\t"
; 4131 :         "adcq\t(%2), %%rcx\n\t"
; 4132 :         "movq\t%%rcx, (%3)\n\t"
; 4133 :         "movq\t8(%1), %%rcx\n\t"
; 4134 :         "adcq\t8(%2), %%rcx\n\t"
; 4135 :         "movq\t%%rcx, 8(%3)\n\t"
; 4136 :         "movq\t16(%1), %%rcx\n\t"
; 4137 :         "adcq\t16(%2), %%rcx\n\t"
; 4138 :         "movq\t%%rcx, 16(%3)\n\t"
; 4139 :         "movq\t24(%1), %%rcx\n\t"
; 4140 :         "adcq\t24(%2), %%rcx\n\t"
; 4141 :         "movq\t%%rcx, 24(%3)\n\t"
; 4142 :         "setc\t%0"
; 4143 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 4144 :         :
; 4145 :         : "cc", "memory", "%rcx"
; 4146 : );
; 4147 : #else
; 4148 : #error unknown platform
; 4149 : #endif
; 4150 : #else
; 4151 : #error unknown compiler
; 4152 : #endif
; 4153 :     return (c);

	mov	al, BYTE PTR _c$[ebp]

; 4154 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ADD_4WORDS_ADC_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_8WORDS_ADCX_DIV PROC

; 3617 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __E05E7037_autogenerated_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 3618 : #ifdef _MSC_VER
; 3619 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3620 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3621 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3622 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3623 :     c = _ADDX_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	edx, 4
	shl	edx, 2
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3624 :     c = _ADDX_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	ecx, 4
	imul	edx, ecx, 5
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3625 :     c = _ADDX_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, 4
	imul	ecx, eax, 6
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3626 :     c = _ADDX_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	edx, 4
	imul	eax, edx, 7
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3627 : #elif defined(__GNUC__)
; 3628 : #ifdef _M_IX86
; 3629 :     __asm__ volatile (
; 3630 :         "addb\t$-1, %0\n\t"
; 3631 :         "movl\t(%1), %%ecx\n\t"
; 3632 :         "adcxl\t(%2), %%ecx\n\t"
; 3633 :         "movl\t%%ecx, (%3)\n\t"
; 3634 :         "movl\t4(%1), %%ecx\n\t"
; 3635 :         "adcxl\t4(%2), %%ecx\n\t"
; 3636 :         "movl\t%%ecx, 4(%3)\n\t"
; 3637 :         "movl\t8(%1), %%ecx\n\t"
; 3638 :         "adcxl\t8(%2), %%ecx\n\t"
; 3639 :         "movl\t%%ecx, 8(%3)\n\t"
; 3640 :         "movl\t12(%1), %%ecx\n\t"
; 3641 :         "adcxl\t12(%2), %%ecx\n\t"
; 3642 :         "movl\t%%ecx, 12(%3)\n\t"
; 3643 :         "movl\t16(%1), %%ecx\n\t"
; 3644 :         "adcxl\t16(%2), %%ecx\n\t"
; 3645 :         "movl\t%%ecx, 16(%3)\n\t"
; 3646 :         "movl\t20(%1), %%ecx\n\t"
; 3647 :         "adcxl\t20(%2), %%ecx\n\t"
; 3648 :         "movl\t%%ecx, 20(%3)\n\t"
; 3649 :         "movl\t24(%1), %%ecx\n\t"
; 3650 :         "adcxl\t24(%2), %%ecx\n\t"
; 3651 :         "movl\t%%ecx, 24(%3)\n\t"
; 3652 :         "movl\t28(%1), %%ecx\n\t"
; 3653 :         "adcxl\t28(%2), %%ecx\n\t"
; 3654 :         "movl\t%%ecx, 28(%3)\n\t"
; 3655 :         "setc\t%0"
; 3656 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 3657 :         :
; 3658 :         : "cc", "memory", "%ecx"
; 3659 : );
; 3660 : #elif defined(_M_IX64)
; 3661 :     __asm__ volatile (
; 3662 :         "addb\t$-1, %0\n\t"
; 3663 :         "movq\t(%1), %%rcx\n\t"
; 3664 :         "adcxq\t(%2), %%rcx\n\t"
; 3665 :         "movq\t%%rcx, (%3)\n\t"
; 3666 :         "movq\t8(%1), %%rcx\n\t"
; 3667 :         "adcxq\t8(%2), %%rcx\n\t"
; 3668 :         "movq\t%%rcx, 8(%3)\n\t"
; 3669 :         "movq\t16(%1), %%rcx\n\t"
; 3670 :         "adcxq\t16(%2), %%rcx\n\t"
; 3671 :         "movq\t%%rcx, 16(%3)\n\t"
; 3672 :         "movq\t24(%1), %%rcx\n\t"
; 3673 :         "adcxq\t24(%2), %%rcx\n\t"
; 3674 :         "movq\t%%rcx, 24(%3)\n\t"
; 3675 :         "movq\t32(%1), %%rcx\n\t"
; 3676 :         "adcxq\t32(%2), %%rcx\n\t"
; 3677 :         "movq\t%%rcx, 32(%3)\n\t"
; 3678 :         "movq\t40(%1), %%rcx\n\t"
; 3679 :         "adcxq\t40(%2), %%rcx\n\t"
; 3680 :         "movq\t%%rcx, 40(%3)\n\t"
; 3681 :         "movq\t48(%1), %%rcx\n\t"
; 3682 :         "adcxq\t48(%2), %%rcx\n\t"
; 3683 :         "movq\t%%rcx, 48(%3)\n\t"
; 3684 :         "movq\t56(%1), %%rcx\n\t"
; 3685 :         "adcxq\t56(%2), %%rcx\n\t"
; 3686 :         "movq\t%%rcx, 56(%3)\n\t"
; 3687 :         "setc\t%0"
; 3688 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 3689 :         :
; 3690 :         : "cc", "memory", "%rcx"
; 3691 : );
; 3692 : #else
; 3693 : #error unknown platform
; 3694 : #endif
; 3695 : #else
; 3696 : #error unknown compiler
; 3697 : #endif
; 3698 :     return (c);

	mov	al, BYTE PTR _c$[ebp]

; 3699 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ADD_8WORDS_ADCX_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_8WORDS_ADC_DIV PROC

; 3532 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __E05E7037_autogenerated_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 3533 : #ifdef _MSC_VER
; 3534 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3535 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3536 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3537 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3538 :     c = _ADD_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	edx, 4
	shl	edx, 2
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3539 :     c = _ADD_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	ecx, 4
	imul	edx, ecx, 5
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3540 :     c = _ADD_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, 4
	imul	ecx, eax, 6
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3541 :     c = _ADD_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	edx, 4
	imul	eax, edx, 7
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 3542 : #elif defined(__GNUC__)
; 3543 : #ifdef _M_IX86
; 3544 :     __asm__ volatile (
; 3545 :         "addb\t$-1, %0\n\t"
; 3546 :         "movl\t(%1), %%ecx\n\t"
; 3547 :         "adcl\t(%2), %%ecx\n\t"
; 3548 :         "movl\t%%ecx, (%3)\n\t"
; 3549 :         "movl\t4(%1), %%ecx\n\t"
; 3550 :         "adcl\t4(%2), %%ecx\n\t"
; 3551 :         "movl\t%%ecx, 4(%3)\n\t"
; 3552 :         "movl\t8(%1), %%ecx\n\t"
; 3553 :         "adcl\t8(%2), %%ecx\n\t"
; 3554 :         "movl\t%%ecx, 8(%3)\n\t"
; 3555 :         "movl\t12(%1), %%ecx\n\t"
; 3556 :         "adcl\t12(%2), %%ecx\n\t"
; 3557 :         "movl\t%%ecx, 12(%3)\n\t"
; 3558 :         "movl\t16(%1), %%ecx\n\t"
; 3559 :         "adcl\t16(%2), %%ecx\n\t"
; 3560 :         "movl\t%%ecx, 16(%3)\n\t"
; 3561 :         "movl\t20(%1), %%ecx\n\t"
; 3562 :         "adcl\t20(%2), %%ecx\n\t"
; 3563 :         "movl\t%%ecx, 20(%3)\n\t"
; 3564 :         "movl\t24(%1), %%ecx\n\t"
; 3565 :         "adcl\t24(%2), %%ecx\n\t"
; 3566 :         "movl\t%%ecx, 24(%3)\n\t"
; 3567 :         "movl\t28(%1), %%ecx\n\t"
; 3568 :         "adcl\t28(%2), %%ecx\n\t"
; 3569 :         "movl\t%%ecx, 28(%3)\n\t"
; 3570 :         "setc\t%0"
; 3571 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 3572 :         :
; 3573 :         : "cc", "memory", "%ecx"
; 3574 : );
; 3575 : #elif defined(_M_IX64)
; 3576 :     __asm__ volatile (
; 3577 :         "addb\t$-1, %0\n\t"
; 3578 :         "movq\t(%1), %%rcx\n\t"
; 3579 :         "adcq\t(%2), %%rcx\n\t"
; 3580 :         "movq\t%%rcx, (%3)\n\t"
; 3581 :         "movq\t8(%1), %%rcx\n\t"
; 3582 :         "adcq\t8(%2), %%rcx\n\t"
; 3583 :         "movq\t%%rcx, 8(%3)\n\t"
; 3584 :         "movq\t16(%1), %%rcx\n\t"
; 3585 :         "adcq\t16(%2), %%rcx\n\t"
; 3586 :         "movq\t%%rcx, 16(%3)\n\t"
; 3587 :         "movq\t24(%1), %%rcx\n\t"
; 3588 :         "adcq\t24(%2), %%rcx\n\t"
; 3589 :         "movq\t%%rcx, 24(%3)\n\t"
; 3590 :         "movq\t32(%1), %%rcx\n\t"
; 3591 :         "adcq\t32(%2), %%rcx\n\t"
; 3592 :         "movq\t%%rcx, 32(%3)\n\t"
; 3593 :         "movq\t40(%1), %%rcx\n\t"
; 3594 :         "adcq\t40(%2), %%rcx\n\t"
; 3595 :         "movq\t%%rcx, 40(%3)\n\t"
; 3596 :         "movq\t48(%1), %%rcx\n\t"
; 3597 :         "adcq\t48(%2), %%rcx\n\t"
; 3598 :         "movq\t%%rcx, 48(%3)\n\t"
; 3599 :         "movq\t56(%1), %%rcx\n\t"
; 3600 :         "adcq\t56(%2), %%rcx\n\t"
; 3601 :         "movq\t%%rcx, 56(%3)\n\t"
; 3602 :         "setc\t%0"
; 3603 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 3604 :         :
; 3605 :         : "cc", "memory", "%rcx"
; 3606 : );
; 3607 : #else
; 3608 : #error unknown platform
; 3609 : #endif
; 3610 : #else
; 3611 : #error unknown compiler
; 3612 : #endif
; 3613 :     return (c);

	mov	al, BYTE PTR _c$[ebp]

; 3614 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ADD_8WORDS_ADC_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_16WORDS_ADCX_DIV PROC

; 2769 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __E05E7037_autogenerated_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 2770 : #ifdef _MSC_VER
; 2771 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2772 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2773 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2774 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2775 :     c = _ADDX_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	edx, 4
	shl	edx, 2
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2776 :     c = _ADDX_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	ecx, 4
	imul	edx, ecx, 5
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2777 :     c = _ADDX_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, 4
	imul	ecx, eax, 6
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2778 :     c = _ADDX_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	edx, 4
	imul	eax, edx, 7
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2779 :     c = _ADDX_UNIT_DIV(c, xp[8], yp[8], &zp[8]);

	mov	ecx, 4
	shl	ecx, 3
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2780 :     c = _ADDX_UNIT_DIV(c, xp[9], yp[9], &zp[9]);

	mov	eax, 4
	imul	ecx, eax, 9
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 9
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2781 :     c = _ADDX_UNIT_DIV(c, xp[10], yp[10], &zp[10]);

	mov	edx, 4
	imul	eax, edx, 10
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 10
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 10
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2782 :     c = _ADDX_UNIT_DIV(c, xp[11], yp[11], &zp[11]);

	mov	ecx, 4
	imul	edx, ecx, 11
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 11
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2783 :     c = _ADDX_UNIT_DIV(c, xp[12], yp[12], &zp[12]);

	mov	eax, 4
	imul	ecx, eax, 12
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 12
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2784 :     c = _ADDX_UNIT_DIV(c, xp[13], yp[13], &zp[13]);

	mov	edx, 4
	imul	eax, edx, 13
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 13
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2785 :     c = _ADDX_UNIT_DIV(c, xp[14], yp[14], &zp[14]);

	mov	ecx, 4
	imul	edx, ecx, 14
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 14
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2786 :     c = _ADDX_UNIT_DIV(c, xp[15], yp[15], &zp[15]);

	mov	eax, 4
	imul	ecx, eax, 15
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 15
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 15
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2787 : #elif defined(__GNUC__)
; 2788 : #ifdef _M_IX86
; 2789 :     __asm__ volatile (
; 2790 :         "addb\t$-1, %0\n\t"
; 2791 :         "movl\t(%1), %%ecx\n\t"
; 2792 :         "adcxl\t(%2), %%ecx\n\t"
; 2793 :         "movl\t%%ecx, (%3)\n\t"
; 2794 :         "movl\t4(%1), %%ecx\n\t"
; 2795 :         "adcxl\t4(%2), %%ecx\n\t"
; 2796 :         "movl\t%%ecx, 4(%3)\n\t"
; 2797 :         "movl\t8(%1), %%ecx\n\t"
; 2798 :         "adcxl\t8(%2), %%ecx\n\t"
; 2799 :         "movl\t%%ecx, 8(%3)\n\t"
; 2800 :         "movl\t12(%1), %%ecx\n\t"
; 2801 :         "adcxl\t12(%2), %%ecx\n\t"
; 2802 :         "movl\t%%ecx, 12(%3)\n\t"
; 2803 :         "movl\t16(%1), %%ecx\n\t"
; 2804 :         "adcxl\t16(%2), %%ecx\n\t"
; 2805 :         "movl\t%%ecx, 16(%3)\n\t"
; 2806 :         "movl\t20(%1), %%ecx\n\t"
; 2807 :         "adcxl\t20(%2), %%ecx\n\t"
; 2808 :         "movl\t%%ecx, 20(%3)\n\t"
; 2809 :         "movl\t24(%1), %%ecx\n\t"
; 2810 :         "adcxl\t24(%2), %%ecx\n\t"
; 2811 :         "movl\t%%ecx, 24(%3)\n\t"
; 2812 :         "movl\t28(%1), %%ecx\n\t"
; 2813 :         "adcxl\t28(%2), %%ecx\n\t"
; 2814 :         "movl\t%%ecx, 28(%3)\n\t"
; 2815 :         "movl\t32(%1), %%ecx\n\t"
; 2816 :         "adcxl\t32(%2), %%ecx\n\t"
; 2817 :         "movl\t%%ecx, 32(%3)\n\t"
; 2818 :         "movl\t36(%1), %%ecx\n\t"
; 2819 :         "adcxl\t36(%2), %%ecx\n\t"
; 2820 :         "movl\t%%ecx, 36(%3)\n\t"
; 2821 :         "movl\t40(%1), %%ecx\n\t"
; 2822 :         "adcxl\t40(%2), %%ecx\n\t"
; 2823 :         "movl\t%%ecx, 40(%3)\n\t"
; 2824 :         "movl\t44(%1), %%ecx\n\t"
; 2825 :         "adcxl\t44(%2), %%ecx\n\t"
; 2826 :         "movl\t%%ecx, 44(%3)\n\t"
; 2827 :         "movl\t48(%1), %%ecx\n\t"
; 2828 :         "adcxl\t48(%2), %%ecx\n\t"
; 2829 :         "movl\t%%ecx, 48(%3)\n\t"
; 2830 :         "movl\t52(%1), %%ecx\n\t"
; 2831 :         "adcxl\t52(%2), %%ecx\n\t"
; 2832 :         "movl\t%%ecx, 52(%3)\n\t"
; 2833 :         "movl\t56(%1), %%ecx\n\t"
; 2834 :         "adcxl\t56(%2), %%ecx\n\t"
; 2835 :         "movl\t%%ecx, 56(%3)\n\t"
; 2836 :         "movl\t60(%1), %%ecx\n\t"
; 2837 :         "adcxl\t60(%2), %%ecx\n\t"
; 2838 :         "movl\t%%ecx, 60(%3)\n\t"
; 2839 :         "setc\t%0"
; 2840 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2841 :         :
; 2842 :         : "cc", "memory", "%ecx"
; 2843 : );
; 2844 : #elif defined(_M_IX64)
; 2845 :     __asm__ volatile (
; 2846 :         "addb\t$-1, %0\n\t"
; 2847 :         "movq\t(%1), %%rcx\n\t"
; 2848 :         "adcxq\t(%2), %%rcx\n\t"
; 2849 :         "movq\t%%rcx, (%3)\n\t"
; 2850 :         "movq\t8(%1), %%rcx\n\t"
; 2851 :         "adcxq\t8(%2), %%rcx\n\t"
; 2852 :         "movq\t%%rcx, 8(%3)\n\t"
; 2853 :         "movq\t16(%1), %%rcx\n\t"
; 2854 :         "adcxq\t16(%2), %%rcx\n\t"
; 2855 :         "movq\t%%rcx, 16(%3)\n\t"
; 2856 :         "movq\t24(%1), %%rcx\n\t"
; 2857 :         "adcxq\t24(%2), %%rcx\n\t"
; 2858 :         "movq\t%%rcx, 24(%3)\n\t"
; 2859 :         "movq\t32(%1), %%rcx\n\t"
; 2860 :         "adcxq\t32(%2), %%rcx\n\t"
; 2861 :         "movq\t%%rcx, 32(%3)\n\t"
; 2862 :         "movq\t40(%1), %%rcx\n\t"
; 2863 :         "adcxq\t40(%2), %%rcx\n\t"
; 2864 :         "movq\t%%rcx, 40(%3)\n\t"
; 2865 :         "movq\t48(%1), %%rcx\n\t"
; 2866 :         "adcxq\t48(%2), %%rcx\n\t"
; 2867 :         "movq\t%%rcx, 48(%3)\n\t"
; 2868 :         "movq\t56(%1), %%rcx\n\t"
; 2869 :         "adcxq\t56(%2), %%rcx\n\t"
; 2870 :         "movq\t%%rcx, 56(%3)\n\t"
; 2871 :         "movq\t64(%1), %%rcx\n\t"
; 2872 :         "adcxq\t64(%2), %%rcx\n\t"
; 2873 :         "movq\t%%rcx, 64(%3)\n\t"
; 2874 :         "movq\t72(%1), %%rcx\n\t"
; 2875 :         "adcxq\t72(%2), %%rcx\n\t"
; 2876 :         "movq\t%%rcx, 72(%3)\n\t"
; 2877 :         "movq\t80(%1), %%rcx\n\t"
; 2878 :         "adcxq\t80(%2), %%rcx\n\t"
; 2879 :         "movq\t%%rcx, 80(%3)\n\t"
; 2880 :         "movq\t88(%1), %%rcx\n\t"
; 2881 :         "adcxq\t88(%2), %%rcx\n\t"
; 2882 :         "movq\t%%rcx, 88(%3)\n\t"
; 2883 :         "movq\t96(%1), %%rcx\n\t"
; 2884 :         "adcxq\t96(%2), %%rcx\n\t"
; 2885 :         "movq\t%%rcx, 96(%3)\n\t"
; 2886 :         "movq\t104(%1), %%rcx\n\t"
; 2887 :         "adcxq\t104(%2), %%rcx\n\t"
; 2888 :         "movq\t%%rcx, 104(%3)\n\t"
; 2889 :         "movq\t112(%1), %%rcx\n\t"
; 2890 :         "adcxq\t112(%2), %%rcx\n\t"
; 2891 :         "movq\t%%rcx, 112(%3)\n\t"
; 2892 :         "movq\t120(%1), %%rcx\n\t"
; 2893 :         "adcxq\t120(%2), %%rcx\n\t"
; 2894 :         "movq\t%%rcx, 120(%3)\n\t"
; 2895 :         "setc\t%0"
; 2896 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2897 :         :
; 2898 :         : "cc", "memory", "%rcx"
; 2899 : );
; 2900 : #else
; 2901 : #error unknown platform
; 2902 : #endif
; 2903 : #else
; 2904 : #error unknown compiler
; 2905 : #endif
; 2906 :     return (c);

	mov	al, BYTE PTR _c$[ebp]

; 2907 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ADD_16WORDS_ADCX_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_16WORDS_ADC_DIV PROC

; 2628 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __E05E7037_autogenerated_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 2629 : #ifdef _MSC_VER
; 2630 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2631 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2632 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2633 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2634 :     c = _ADD_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	edx, 4
	shl	edx, 2
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2635 :     c = _ADD_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	ecx, 4
	imul	edx, ecx, 5
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2636 :     c = _ADD_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, 4
	imul	ecx, eax, 6
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2637 :     c = _ADD_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	edx, 4
	imul	eax, edx, 7
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2638 :     c = _ADD_UNIT_DIV(c, xp[8], yp[8], &zp[8]);

	mov	ecx, 4
	shl	ecx, 3
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2639 :     c = _ADD_UNIT_DIV(c, xp[9], yp[9], &zp[9]);

	mov	eax, 4
	imul	ecx, eax, 9
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 9
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2640 :     c = _ADD_UNIT_DIV(c, xp[10], yp[10], &zp[10]);

	mov	edx, 4
	imul	eax, edx, 10
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 10
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 10
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2641 :     c = _ADD_UNIT_DIV(c, xp[11], yp[11], &zp[11]);

	mov	ecx, 4
	imul	edx, ecx, 11
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 11
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2642 :     c = _ADD_UNIT_DIV(c, xp[12], yp[12], &zp[12]);

	mov	eax, 4
	imul	ecx, eax, 12
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 12
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2643 :     c = _ADD_UNIT_DIV(c, xp[13], yp[13], &zp[13]);

	mov	edx, 4
	imul	eax, edx, 13
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 13
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2644 :     c = _ADD_UNIT_DIV(c, xp[14], yp[14], &zp[14]);

	mov	ecx, 4
	imul	edx, ecx, 14
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 14
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2645 :     c = _ADD_UNIT_DIV(c, xp[15], yp[15], &zp[15]);

	mov	eax, 4
	imul	ecx, eax, 15
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 15
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 15
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 2646 : #elif defined(__GNUC__)
; 2647 : #ifdef _M_IX86
; 2648 :     __asm__ volatile (
; 2649 :         "addb\t$-1, %0\n\t"
; 2650 :         "movl\t(%1), %%ecx\n\t"
; 2651 :         "adcl\t(%2), %%ecx\n\t"
; 2652 :         "movl\t%%ecx, (%3)\n\t"
; 2653 :         "movl\t4(%1), %%ecx\n\t"
; 2654 :         "adcl\t4(%2), %%ecx\n\t"
; 2655 :         "movl\t%%ecx, 4(%3)\n\t"
; 2656 :         "movl\t8(%1), %%ecx\n\t"
; 2657 :         "adcl\t8(%2), %%ecx\n\t"
; 2658 :         "movl\t%%ecx, 8(%3)\n\t"
; 2659 :         "movl\t12(%1), %%ecx\n\t"
; 2660 :         "adcl\t12(%2), %%ecx\n\t"
; 2661 :         "movl\t%%ecx, 12(%3)\n\t"
; 2662 :         "movl\t16(%1), %%ecx\n\t"
; 2663 :         "adcl\t16(%2), %%ecx\n\t"
; 2664 :         "movl\t%%ecx, 16(%3)\n\t"
; 2665 :         "movl\t20(%1), %%ecx\n\t"
; 2666 :         "adcl\t20(%2), %%ecx\n\t"
; 2667 :         "movl\t%%ecx, 20(%3)\n\t"
; 2668 :         "movl\t24(%1), %%ecx\n\t"
; 2669 :         "adcl\t24(%2), %%ecx\n\t"
; 2670 :         "movl\t%%ecx, 24(%3)\n\t"
; 2671 :         "movl\t28(%1), %%ecx\n\t"
; 2672 :         "adcl\t28(%2), %%ecx\n\t"
; 2673 :         "movl\t%%ecx, 28(%3)\n\t"
; 2674 :         "movl\t32(%1), %%ecx\n\t"
; 2675 :         "adcl\t32(%2), %%ecx\n\t"
; 2676 :         "movl\t%%ecx, 32(%3)\n\t"
; 2677 :         "movl\t36(%1), %%ecx\n\t"
; 2678 :         "adcl\t36(%2), %%ecx\n\t"
; 2679 :         "movl\t%%ecx, 36(%3)\n\t"
; 2680 :         "movl\t40(%1), %%ecx\n\t"
; 2681 :         "adcl\t40(%2), %%ecx\n\t"
; 2682 :         "movl\t%%ecx, 40(%3)\n\t"
; 2683 :         "movl\t44(%1), %%ecx\n\t"
; 2684 :         "adcl\t44(%2), %%ecx\n\t"
; 2685 :         "movl\t%%ecx, 44(%3)\n\t"
; 2686 :         "movl\t48(%1), %%ecx\n\t"
; 2687 :         "adcl\t48(%2), %%ecx\n\t"
; 2688 :         "movl\t%%ecx, 48(%3)\n\t"
; 2689 :         "movl\t52(%1), %%ecx\n\t"
; 2690 :         "adcl\t52(%2), %%ecx\n\t"
; 2691 :         "movl\t%%ecx, 52(%3)\n\t"
; 2692 :         "movl\t56(%1), %%ecx\n\t"
; 2693 :         "adcl\t56(%2), %%ecx\n\t"
; 2694 :         "movl\t%%ecx, 56(%3)\n\t"
; 2695 :         "movl\t60(%1), %%ecx\n\t"
; 2696 :         "adcl\t60(%2), %%ecx\n\t"
; 2697 :         "movl\t%%ecx, 60(%3)\n\t"
; 2698 :         "setc\t%0"
; 2699 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2700 :         :
; 2701 :         : "cc", "memory", "%ecx"
; 2702 : );
; 2703 : #elif defined(_M_IX64)
; 2704 :     __asm__ volatile (
; 2705 :         "addb\t$-1, %0\n\t"
; 2706 :         "movq\t(%1), %%rcx\n\t"
; 2707 :         "adcq\t(%2), %%rcx\n\t"
; 2708 :         "movq\t%%rcx, (%3)\n\t"
; 2709 :         "movq\t8(%1), %%rcx\n\t"
; 2710 :         "adcq\t8(%2), %%rcx\n\t"
; 2711 :         "movq\t%%rcx, 8(%3)\n\t"
; 2712 :         "movq\t16(%1), %%rcx\n\t"
; 2713 :         "adcq\t16(%2), %%rcx\n\t"
; 2714 :         "movq\t%%rcx, 16(%3)\n\t"
; 2715 :         "movq\t24(%1), %%rcx\n\t"
; 2716 :         "adcq\t24(%2), %%rcx\n\t"
; 2717 :         "movq\t%%rcx, 24(%3)\n\t"
; 2718 :         "movq\t32(%1), %%rcx\n\t"
; 2719 :         "adcq\t32(%2), %%rcx\n\t"
; 2720 :         "movq\t%%rcx, 32(%3)\n\t"
; 2721 :         "movq\t40(%1), %%rcx\n\t"
; 2722 :         "adcq\t40(%2), %%rcx\n\t"
; 2723 :         "movq\t%%rcx, 40(%3)\n\t"
; 2724 :         "movq\t48(%1), %%rcx\n\t"
; 2725 :         "adcq\t48(%2), %%rcx\n\t"
; 2726 :         "movq\t%%rcx, 48(%3)\n\t"
; 2727 :         "movq\t56(%1), %%rcx\n\t"
; 2728 :         "adcq\t56(%2), %%rcx\n\t"
; 2729 :         "movq\t%%rcx, 56(%3)\n\t"
; 2730 :         "movq\t64(%1), %%rcx\n\t"
; 2731 :         "adcq\t64(%2), %%rcx\n\t"
; 2732 :         "movq\t%%rcx, 64(%3)\n\t"
; 2733 :         "movq\t72(%1), %%rcx\n\t"
; 2734 :         "adcq\t72(%2), %%rcx\n\t"
; 2735 :         "movq\t%%rcx, 72(%3)\n\t"
; 2736 :         "movq\t80(%1), %%rcx\n\t"
; 2737 :         "adcq\t80(%2), %%rcx\n\t"
; 2738 :         "movq\t%%rcx, 80(%3)\n\t"
; 2739 :         "movq\t88(%1), %%rcx\n\t"
; 2740 :         "adcq\t88(%2), %%rcx\n\t"
; 2741 :         "movq\t%%rcx, 88(%3)\n\t"
; 2742 :         "movq\t96(%1), %%rcx\n\t"
; 2743 :         "adcq\t96(%2), %%rcx\n\t"
; 2744 :         "movq\t%%rcx, 96(%3)\n\t"
; 2745 :         "movq\t104(%1), %%rcx\n\t"
; 2746 :         "adcq\t104(%2), %%rcx\n\t"
; 2747 :         "movq\t%%rcx, 104(%3)\n\t"
; 2748 :         "movq\t112(%1), %%rcx\n\t"
; 2749 :         "adcq\t112(%2), %%rcx\n\t"
; 2750 :         "movq\t%%rcx, 112(%3)\n\t"
; 2751 :         "movq\t120(%1), %%rcx\n\t"
; 2752 :         "adcq\t120(%2), %%rcx\n\t"
; 2753 :         "movq\t%%rcx, 120(%3)\n\t"
; 2754 :         "setc\t%0"
; 2755 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 2756 :         :
; 2757 :         : "cc", "memory", "%rcx"
; 2758 : );
; 2759 : #else
; 2760 : #error unknown platform
; 2761 : #endif
; 2762 : #else
; 2763 : #error unknown compiler
; 2764 : #endif
; 2765 :     return (c);

	mov	al, BYTE PTR _c$[ebp]

; 2766 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ADD_16WORDS_ADC_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_32WORDS_ADCX_DIV PROC

; 1305 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __E05E7037_autogenerated_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 1306 : #ifdef _MSC_VER
; 1307 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1308 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1309 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1310 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1311 :     c = _ADDX_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	edx, 4
	shl	edx, 2
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1312 :     c = _ADDX_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	ecx, 4
	imul	edx, ecx, 5
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1313 :     c = _ADDX_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, 4
	imul	ecx, eax, 6
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1314 :     c = _ADDX_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	edx, 4
	imul	eax, edx, 7
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1315 :     c = _ADDX_UNIT_DIV(c, xp[8], yp[8], &zp[8]);

	mov	ecx, 4
	shl	ecx, 3
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1316 :     c = _ADDX_UNIT_DIV(c, xp[9], yp[9], &zp[9]);

	mov	eax, 4
	imul	ecx, eax, 9
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 9
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1317 :     c = _ADDX_UNIT_DIV(c, xp[10], yp[10], &zp[10]);

	mov	edx, 4
	imul	eax, edx, 10
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 10
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 10
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1318 :     c = _ADDX_UNIT_DIV(c, xp[11], yp[11], &zp[11]);

	mov	ecx, 4
	imul	edx, ecx, 11
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 11
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1319 :     c = _ADDX_UNIT_DIV(c, xp[12], yp[12], &zp[12]);

	mov	eax, 4
	imul	ecx, eax, 12
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 12
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1320 :     c = _ADDX_UNIT_DIV(c, xp[13], yp[13], &zp[13]);

	mov	edx, 4
	imul	eax, edx, 13
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 13
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1321 :     c = _ADDX_UNIT_DIV(c, xp[14], yp[14], &zp[14]);

	mov	ecx, 4
	imul	edx, ecx, 14
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 14
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1322 :     c = _ADDX_UNIT_DIV(c, xp[15], yp[15], &zp[15]);

	mov	eax, 4
	imul	ecx, eax, 15
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 15
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 15
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1323 :     c = _ADDX_UNIT_DIV(c, xp[16], yp[16], &zp[16]);

	mov	edx, 4
	shl	edx, 4
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 4
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 4
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1324 :     c = _ADDX_UNIT_DIV(c, xp[17], yp[17], &zp[17]);

	mov	ecx, 4
	imul	edx, ecx, 17
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 17
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 17
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1325 :     c = _ADDX_UNIT_DIV(c, xp[18], yp[18], &zp[18]);

	mov	eax, 4
	imul	ecx, eax, 18
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 18
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 18
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1326 :     c = _ADDX_UNIT_DIV(c, xp[19], yp[19], &zp[19]);

	mov	edx, 4
	imul	eax, edx, 19
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 19
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 19
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1327 :     c = _ADDX_UNIT_DIV(c, xp[20], yp[20], &zp[20]);

	mov	ecx, 4
	imul	edx, ecx, 20
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 20
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1328 :     c = _ADDX_UNIT_DIV(c, xp[21], yp[21], &zp[21]);

	mov	eax, 4
	imul	ecx, eax, 21
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 21
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 21
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1329 :     c = _ADDX_UNIT_DIV(c, xp[22], yp[22], &zp[22]);

	mov	edx, 4
	imul	eax, edx, 22
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 22
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 22
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1330 :     c = _ADDX_UNIT_DIV(c, xp[23], yp[23], &zp[23]);

	mov	ecx, 4
	imul	edx, ecx, 23
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 23
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 23
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1331 :     c = _ADDX_UNIT_DIV(c, xp[24], yp[24], &zp[24]);

	mov	eax, 4
	imul	ecx, eax, 24
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 24
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 24
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1332 :     c = _ADDX_UNIT_DIV(c, xp[25], yp[25], &zp[25]);

	mov	edx, 4
	imul	eax, edx, 25
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 25
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 25
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1333 :     c = _ADDX_UNIT_DIV(c, xp[26], yp[26], &zp[26]);

	mov	ecx, 4
	imul	edx, ecx, 26
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 26
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 26
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1334 :     c = _ADDX_UNIT_DIV(c, xp[27], yp[27], &zp[27]);

	mov	eax, 4
	imul	ecx, eax, 27
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 27
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 27
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1335 :     c = _ADDX_UNIT_DIV(c, xp[28], yp[28], &zp[28]);

	mov	edx, 4
	imul	eax, edx, 28
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 28
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 28
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1336 :     c = _ADDX_UNIT_DIV(c, xp[29], yp[29], &zp[29]);

	mov	ecx, 4
	imul	edx, ecx, 29
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 29
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 29
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1337 :     c = _ADDX_UNIT_DIV(c, xp[30], yp[30], &zp[30]);

	mov	eax, 4
	imul	ecx, eax, 30
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 30
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 30
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1338 :     c = _ADDX_UNIT_DIV(c, xp[31], yp[31], &zp[31]);

	mov	edx, 4
	imul	eax, edx, 31
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 31
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 31
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADDX_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1339 : #elif defined(__GNUC__)
; 1340 : #ifdef _M_IX86
; 1341 :     __asm__ volatile (
; 1342 :         "addb\t$-1, %0\n\t"
; 1343 :         "movl\t(%1), %%ecx\n\t"
; 1344 :         "adcxl\t(%2), %%ecx\n\t"
; 1345 :         "movl\t%%ecx, (%3)\n\t"
; 1346 :         "movl\t4(%1), %%ecx\n\t"
; 1347 :         "adcxl\t4(%2), %%ecx\n\t"
; 1348 :         "movl\t%%ecx, 4(%3)\n\t"
; 1349 :         "movl\t8(%1), %%ecx\n\t"
; 1350 :         "adcxl\t8(%2), %%ecx\n\t"
; 1351 :         "movl\t%%ecx, 8(%3)\n\t"
; 1352 :         "movl\t12(%1), %%ecx\n\t"
; 1353 :         "adcxl\t12(%2), %%ecx\n\t"
; 1354 :         "movl\t%%ecx, 12(%3)\n\t"
; 1355 :         "movl\t16(%1), %%ecx\n\t"
; 1356 :         "adcxl\t16(%2), %%ecx\n\t"
; 1357 :         "movl\t%%ecx, 16(%3)\n\t"
; 1358 :         "movl\t20(%1), %%ecx\n\t"
; 1359 :         "adcxl\t20(%2), %%ecx\n\t"
; 1360 :         "movl\t%%ecx, 20(%3)\n\t"
; 1361 :         "movl\t24(%1), %%ecx\n\t"
; 1362 :         "adcxl\t24(%2), %%ecx\n\t"
; 1363 :         "movl\t%%ecx, 24(%3)\n\t"
; 1364 :         "movl\t28(%1), %%ecx\n\t"
; 1365 :         "adcxl\t28(%2), %%ecx\n\t"
; 1366 :         "movl\t%%ecx, 28(%3)\n\t"
; 1367 :         "movl\t32(%1), %%ecx\n\t"
; 1368 :         "adcxl\t32(%2), %%ecx\n\t"
; 1369 :         "movl\t%%ecx, 32(%3)\n\t"
; 1370 :         "movl\t36(%1), %%ecx\n\t"
; 1371 :         "adcxl\t36(%2), %%ecx\n\t"
; 1372 :         "movl\t%%ecx, 36(%3)\n\t"
; 1373 :         "movl\t40(%1), %%ecx\n\t"
; 1374 :         "adcxl\t40(%2), %%ecx\n\t"
; 1375 :         "movl\t%%ecx, 40(%3)\n\t"
; 1376 :         "movl\t44(%1), %%ecx\n\t"
; 1377 :         "adcxl\t44(%2), %%ecx\n\t"
; 1378 :         "movl\t%%ecx, 44(%3)\n\t"
; 1379 :         "movl\t48(%1), %%ecx\n\t"
; 1380 :         "adcxl\t48(%2), %%ecx\n\t"
; 1381 :         "movl\t%%ecx, 48(%3)\n\t"
; 1382 :         "movl\t52(%1), %%ecx\n\t"
; 1383 :         "adcxl\t52(%2), %%ecx\n\t"
; 1384 :         "movl\t%%ecx, 52(%3)\n\t"
; 1385 :         "movl\t56(%1), %%ecx\n\t"
; 1386 :         "adcxl\t56(%2), %%ecx\n\t"
; 1387 :         "movl\t%%ecx, 56(%3)\n\t"
; 1388 :         "movl\t60(%1), %%ecx\n\t"
; 1389 :         "adcxl\t60(%2), %%ecx\n\t"
; 1390 :         "movl\t%%ecx, 60(%3)\n\t"
; 1391 :         "movl\t64(%1), %%ecx\n\t"
; 1392 :         "adcxl\t64(%2), %%ecx\n\t"
; 1393 :         "movl\t%%ecx, 64(%3)\n\t"
; 1394 :         "movl\t68(%1), %%ecx\n\t"
; 1395 :         "adcxl\t68(%2), %%ecx\n\t"
; 1396 :         "movl\t%%ecx, 68(%3)\n\t"
; 1397 :         "movl\t72(%1), %%ecx\n\t"
; 1398 :         "adcxl\t72(%2), %%ecx\n\t"
; 1399 :         "movl\t%%ecx, 72(%3)\n\t"
; 1400 :         "movl\t76(%1), %%ecx\n\t"
; 1401 :         "adcxl\t76(%2), %%ecx\n\t"
; 1402 :         "movl\t%%ecx, 76(%3)\n\t"
; 1403 :         "movl\t80(%1), %%ecx\n\t"
; 1404 :         "adcxl\t80(%2), %%ecx\n\t"
; 1405 :         "movl\t%%ecx, 80(%3)\n\t"
; 1406 :         "movl\t84(%1), %%ecx\n\t"
; 1407 :         "adcxl\t84(%2), %%ecx\n\t"
; 1408 :         "movl\t%%ecx, 84(%3)\n\t"
; 1409 :         "movl\t88(%1), %%ecx\n\t"
; 1410 :         "adcxl\t88(%2), %%ecx\n\t"
; 1411 :         "movl\t%%ecx, 88(%3)\n\t"
; 1412 :         "movl\t92(%1), %%ecx\n\t"
; 1413 :         "adcxl\t92(%2), %%ecx\n\t"
; 1414 :         "movl\t%%ecx, 92(%3)\n\t"
; 1415 :         "movl\t96(%1), %%ecx\n\t"
; 1416 :         "adcxl\t96(%2), %%ecx\n\t"
; 1417 :         "movl\t%%ecx, 96(%3)\n\t"
; 1418 :         "movl\t100(%1), %%ecx\n\t"
; 1419 :         "adcxl\t100(%2), %%ecx\n\t"
; 1420 :         "movl\t%%ecx, 100(%3)\n\t"
; 1421 :         "movl\t104(%1), %%ecx\n\t"
; 1422 :         "adcxl\t104(%2), %%ecx\n\t"
; 1423 :         "movl\t%%ecx, 104(%3)\n\t"
; 1424 :         "movl\t108(%1), %%ecx\n\t"
; 1425 :         "adcxl\t108(%2), %%ecx\n\t"
; 1426 :         "movl\t%%ecx, 108(%3)\n\t"
; 1427 :         "movl\t112(%1), %%ecx\n\t"
; 1428 :         "adcxl\t112(%2), %%ecx\n\t"
; 1429 :         "movl\t%%ecx, 112(%3)\n\t"
; 1430 :         "movl\t116(%1), %%ecx\n\t"
; 1431 :         "adcxl\t116(%2), %%ecx\n\t"
; 1432 :         "movl\t%%ecx, 116(%3)\n\t"
; 1433 :         "movl\t120(%1), %%ecx\n\t"
; 1434 :         "adcxl\t120(%2), %%ecx\n\t"
; 1435 :         "movl\t%%ecx, 120(%3)\n\t"
; 1436 :         "movl\t124(%1), %%ecx\n\t"
; 1437 :         "adcxl\t124(%2), %%ecx\n\t"
; 1438 :         "movl\t%%ecx, 124(%3)\n\t"
; 1439 :         "setc\t%0"
; 1440 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1441 :         :
; 1442 :         : "cc", "memory", "%ecx"
; 1443 : );
; 1444 : #elif defined(_M_IX64)
; 1445 :     __asm__ volatile (
; 1446 :         "addb\t$-1, %0\n\t"
; 1447 :         "movq\t(%1), %%rcx\n\t"
; 1448 :         "adcxq\t(%2), %%rcx\n\t"
; 1449 :         "movq\t%%rcx, (%3)\n\t"
; 1450 :         "movq\t8(%1), %%rcx\n\t"
; 1451 :         "adcxq\t8(%2), %%rcx\n\t"
; 1452 :         "movq\t%%rcx, 8(%3)\n\t"
; 1453 :         "movq\t16(%1), %%rcx\n\t"
; 1454 :         "adcxq\t16(%2), %%rcx\n\t"
; 1455 :         "movq\t%%rcx, 16(%3)\n\t"
; 1456 :         "movq\t24(%1), %%rcx\n\t"
; 1457 :         "adcxq\t24(%2), %%rcx\n\t"
; 1458 :         "movq\t%%rcx, 24(%3)\n\t"
; 1459 :         "movq\t32(%1), %%rcx\n\t"
; 1460 :         "adcxq\t32(%2), %%rcx\n\t"
; 1461 :         "movq\t%%rcx, 32(%3)\n\t"
; 1462 :         "movq\t40(%1), %%rcx\n\t"
; 1463 :         "adcxq\t40(%2), %%rcx\n\t"
; 1464 :         "movq\t%%rcx, 40(%3)\n\t"
; 1465 :         "movq\t48(%1), %%rcx\n\t"
; 1466 :         "adcxq\t48(%2), %%rcx\n\t"
; 1467 :         "movq\t%%rcx, 48(%3)\n\t"
; 1468 :         "movq\t56(%1), %%rcx\n\t"
; 1469 :         "adcxq\t56(%2), %%rcx\n\t"
; 1470 :         "movq\t%%rcx, 56(%3)\n\t"
; 1471 :         "movq\t64(%1), %%rcx\n\t"
; 1472 :         "adcxq\t64(%2), %%rcx\n\t"
; 1473 :         "movq\t%%rcx, 64(%3)\n\t"
; 1474 :         "movq\t72(%1), %%rcx\n\t"
; 1475 :         "adcxq\t72(%2), %%rcx\n\t"
; 1476 :         "movq\t%%rcx, 72(%3)\n\t"
; 1477 :         "movq\t80(%1), %%rcx\n\t"
; 1478 :         "adcxq\t80(%2), %%rcx\n\t"
; 1479 :         "movq\t%%rcx, 80(%3)\n\t"
; 1480 :         "movq\t88(%1), %%rcx\n\t"
; 1481 :         "adcxq\t88(%2), %%rcx\n\t"
; 1482 :         "movq\t%%rcx, 88(%3)\n\t"
; 1483 :         "movq\t96(%1), %%rcx\n\t"
; 1484 :         "adcxq\t96(%2), %%rcx\n\t"
; 1485 :         "movq\t%%rcx, 96(%3)\n\t"
; 1486 :         "movq\t104(%1), %%rcx\n\t"
; 1487 :         "adcxq\t104(%2), %%rcx\n\t"
; 1488 :         "movq\t%%rcx, 104(%3)\n\t"
; 1489 :         "movq\t112(%1), %%rcx\n\t"
; 1490 :         "adcxq\t112(%2), %%rcx\n\t"
; 1491 :         "movq\t%%rcx, 112(%3)\n\t"
; 1492 :         "movq\t120(%1), %%rcx\n\t"
; 1493 :         "adcxq\t120(%2), %%rcx\n\t"
; 1494 :         "movq\t%%rcx, 120(%3)\n\t"
; 1495 :         "movq\t128(%1), %%rcx\n\t"
; 1496 :         "adcxq\t128(%2), %%rcx\n\t"
; 1497 :         "movq\t%%rcx, 128(%3)\n\t"
; 1498 :         "movq\t136(%1), %%rcx\n\t"
; 1499 :         "adcxq\t136(%2), %%rcx\n\t"
; 1500 :         "movq\t%%rcx, 136(%3)\n\t"
; 1501 :         "movq\t144(%1), %%rcx\n\t"
; 1502 :         "adcxq\t144(%2), %%rcx\n\t"
; 1503 :         "movq\t%%rcx, 144(%3)\n\t"
; 1504 :         "movq\t152(%1), %%rcx\n\t"
; 1505 :         "adcxq\t152(%2), %%rcx\n\t"
; 1506 :         "movq\t%%rcx, 152(%3)\n\t"
; 1507 :         "movq\t160(%1), %%rcx\n\t"
; 1508 :         "adcxq\t160(%2), %%rcx\n\t"
; 1509 :         "movq\t%%rcx, 160(%3)\n\t"
; 1510 :         "movq\t168(%1), %%rcx\n\t"
; 1511 :         "adcxq\t168(%2), %%rcx\n\t"
; 1512 :         "movq\t%%rcx, 168(%3)\n\t"
; 1513 :         "movq\t176(%1), %%rcx\n\t"
; 1514 :         "adcxq\t176(%2), %%rcx\n\t"
; 1515 :         "movq\t%%rcx, 176(%3)\n\t"
; 1516 :         "movq\t184(%1), %%rcx\n\t"
; 1517 :         "adcxq\t184(%2), %%rcx\n\t"
; 1518 :         "movq\t%%rcx, 184(%3)\n\t"
; 1519 :         "movq\t192(%1), %%rcx\n\t"
; 1520 :         "adcxq\t192(%2), %%rcx\n\t"
; 1521 :         "movq\t%%rcx, 192(%3)\n\t"
; 1522 :         "movq\t200(%1), %%rcx\n\t"
; 1523 :         "adcxq\t200(%2), %%rcx\n\t"
; 1524 :         "movq\t%%rcx, 200(%3)\n\t"
; 1525 :         "movq\t208(%1), %%rcx\n\t"
; 1526 :         "adcxq\t208(%2), %%rcx\n\t"
; 1527 :         "movq\t%%rcx, 208(%3)\n\t"
; 1528 :         "movq\t216(%1), %%rcx\n\t"
; 1529 :         "adcxq\t216(%2), %%rcx\n\t"
; 1530 :         "movq\t%%rcx, 216(%3)\n\t"
; 1531 :         "movq\t224(%1), %%rcx\n\t"
; 1532 :         "adcxq\t224(%2), %%rcx\n\t"
; 1533 :         "movq\t%%rcx, 224(%3)\n\t"
; 1534 :         "movq\t232(%1), %%rcx\n\t"
; 1535 :         "adcxq\t232(%2), %%rcx\n\t"
; 1536 :         "movq\t%%rcx, 232(%3)\n\t"
; 1537 :         "movq\t240(%1), %%rcx\n\t"
; 1538 :         "adcxq\t240(%2), %%rcx\n\t"
; 1539 :         "movq\t%%rcx, 240(%3)\n\t"
; 1540 :         "movq\t248(%1), %%rcx\n\t"
; 1541 :         "adcxq\t248(%2), %%rcx\n\t"
; 1542 :         "movq\t%%rcx, 248(%3)\n\t"
; 1543 :         "setc\t%0"
; 1544 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1545 :         :
; 1546 :         : "cc", "memory", "%rcx"
; 1547 : );
; 1548 : #else
; 1549 : #error unknown platform
; 1550 : #endif
; 1551 : #else
; 1552 : #error unknown compiler
; 1553 : #endif
; 1554 :     return (c);

	mov	al, BYTE PTR _c$[ebp]

; 1555 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ADD_32WORDS_ADCX_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
_TEXT	SEGMENT
_c$ = 8							; size = 1
_xp$ = 12						; size = 4
_yp$ = 16						; size = 4
_zp$ = 20						; size = 4
__ADD_32WORDS_ADC_DIV PROC

; 1052 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __E05E7037_autogenerated_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 1053 : #ifdef _MSC_VER
; 1054 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1055 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	edx, 4
	shl	edx, 0
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1056 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	ecx, 4
	shl	ecx, 1
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1057 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, 4
	imul	ecx, eax, 3
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1058 :     c = _ADD_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	edx, 4
	shl	edx, 2
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1059 :     c = _ADD_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	ecx, 4
	imul	edx, ecx, 5
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1060 :     c = _ADD_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, 4
	imul	ecx, eax, 6
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 6
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1061 :     c = _ADD_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	edx, 4
	imul	eax, edx, 7
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 7
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 7
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1062 :     c = _ADD_UNIT_DIV(c, xp[8], yp[8], &zp[8]);

	mov	ecx, 4
	shl	ecx, 3
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	shl	edx, 3
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1063 :     c = _ADD_UNIT_DIV(c, xp[9], yp[9], &zp[9]);

	mov	eax, 4
	imul	ecx, eax, 9
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 9
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1064 :     c = _ADD_UNIT_DIV(c, xp[10], yp[10], &zp[10]);

	mov	edx, 4
	imul	eax, edx, 10
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 10
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 10
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1065 :     c = _ADD_UNIT_DIV(c, xp[11], yp[11], &zp[11]);

	mov	ecx, 4
	imul	edx, ecx, 11
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 11
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1066 :     c = _ADD_UNIT_DIV(c, xp[12], yp[12], &zp[12]);

	mov	eax, 4
	imul	ecx, eax, 12
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 12
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 12
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1067 :     c = _ADD_UNIT_DIV(c, xp[13], yp[13], &zp[13]);

	mov	edx, 4
	imul	eax, edx, 13
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 13
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 13
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1068 :     c = _ADD_UNIT_DIV(c, xp[14], yp[14], &zp[14]);

	mov	ecx, 4
	imul	edx, ecx, 14
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 14
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 14
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1069 :     c = _ADD_UNIT_DIV(c, xp[15], yp[15], &zp[15]);

	mov	eax, 4
	imul	ecx, eax, 15
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 15
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 15
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1070 :     c = _ADD_UNIT_DIV(c, xp[16], yp[16], &zp[16]);

	mov	edx, 4
	shl	edx, 4
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	shl	eax, 4
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	shl	eax, 4
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1071 :     c = _ADD_UNIT_DIV(c, xp[17], yp[17], &zp[17]);

	mov	ecx, 4
	imul	edx, ecx, 17
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 17
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 17
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1072 :     c = _ADD_UNIT_DIV(c, xp[18], yp[18], &zp[18]);

	mov	eax, 4
	imul	ecx, eax, 18
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 18
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 18
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1073 :     c = _ADD_UNIT_DIV(c, xp[19], yp[19], &zp[19]);

	mov	edx, 4
	imul	eax, edx, 19
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 19
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 19
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1074 :     c = _ADD_UNIT_DIV(c, xp[20], yp[20], &zp[20]);

	mov	ecx, 4
	imul	edx, ecx, 20
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 20
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1075 :     c = _ADD_UNIT_DIV(c, xp[21], yp[21], &zp[21]);

	mov	eax, 4
	imul	ecx, eax, 21
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 21
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 21
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1076 :     c = _ADD_UNIT_DIV(c, xp[22], yp[22], &zp[22]);

	mov	edx, 4
	imul	eax, edx, 22
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 22
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 22
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1077 :     c = _ADD_UNIT_DIV(c, xp[23], yp[23], &zp[23]);

	mov	ecx, 4
	imul	edx, ecx, 23
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 23
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 23
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1078 :     c = _ADD_UNIT_DIV(c, xp[24], yp[24], &zp[24]);

	mov	eax, 4
	imul	ecx, eax, 24
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 24
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 24
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1079 :     c = _ADD_UNIT_DIV(c, xp[25], yp[25], &zp[25]);

	mov	edx, 4
	imul	eax, edx, 25
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 25
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 25
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1080 :     c = _ADD_UNIT_DIV(c, xp[26], yp[26], &zp[26]);

	mov	ecx, 4
	imul	edx, ecx, 26
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 26
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 26
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1081 :     c = _ADD_UNIT_DIV(c, xp[27], yp[27], &zp[27]);

	mov	eax, 4
	imul	ecx, eax, 27
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 27
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 27
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1082 :     c = _ADD_UNIT_DIV(c, xp[28], yp[28], &zp[28]);

	mov	edx, 4
	imul	eax, edx, 28
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 28
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 28
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1083 :     c = _ADD_UNIT_DIV(c, xp[29], yp[29], &zp[29]);

	mov	ecx, 4
	imul	edx, ecx, 29
	add	edx, DWORD PTR _zp$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 29
	mov	edx, DWORD PTR _yp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 29
	mov	eax, DWORD PTR _xp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	movzx	edx, BYTE PTR _c$[ebp]
	push	edx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1084 :     c = _ADD_UNIT_DIV(c, xp[30], yp[30], &zp[30]);

	mov	eax, 4
	imul	ecx, eax, 30
	add	ecx, DWORD PTR _zp$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 30
	mov	ecx, DWORD PTR _yp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 30
	mov	edx, DWORD PTR _xp$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	movzx	ecx, BYTE PTR _c$[ebp]
	push	ecx
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1085 :     c = _ADD_UNIT_DIV(c, xp[31], yp[31], &zp[31]);

	mov	edx, 4
	imul	eax, edx, 31
	add	eax, DWORD PTR _zp$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 31
	mov	eax, DWORD PTR _yp$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 31
	mov	ecx, DWORD PTR _xp$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	__ADD_UNIT_DIV
	add	esp, 16					; 00000010H
	mov	BYTE PTR _c$[ebp], al

; 1086 : #elif defined(__GNUC__)
; 1087 : #ifdef _M_IX86
; 1088 :     __asm__ volatile (
; 1089 :         "addb\t$-1, %0\n\t"
; 1090 :         "movl\t(%1), %%ecx\n\t"
; 1091 :         "adcl\t(%2), %%ecx\n\t"
; 1092 :         "movl\t%%ecx, (%3)\n\t"
; 1093 :         "movl\t4(%1), %%ecx\n\t"
; 1094 :         "adcl\t4(%2), %%ecx\n\t"
; 1095 :         "movl\t%%ecx, 4(%3)\n\t"
; 1096 :         "movl\t8(%1), %%ecx\n\t"
; 1097 :         "adcl\t8(%2), %%ecx\n\t"
; 1098 :         "movl\t%%ecx, 8(%3)\n\t"
; 1099 :         "movl\t12(%1), %%ecx\n\t"
; 1100 :         "adcl\t12(%2), %%ecx\n\t"
; 1101 :         "movl\t%%ecx, 12(%3)\n\t"
; 1102 :         "movl\t16(%1), %%ecx\n\t"
; 1103 :         "adcl\t16(%2), %%ecx\n\t"
; 1104 :         "movl\t%%ecx, 16(%3)\n\t"
; 1105 :         "movl\t20(%1), %%ecx\n\t"
; 1106 :         "adcl\t20(%2), %%ecx\n\t"
; 1107 :         "movl\t%%ecx, 20(%3)\n\t"
; 1108 :         "movl\t24(%1), %%ecx\n\t"
; 1109 :         "adcl\t24(%2), %%ecx\n\t"
; 1110 :         "movl\t%%ecx, 24(%3)\n\t"
; 1111 :         "movl\t28(%1), %%ecx\n\t"
; 1112 :         "adcl\t28(%2), %%ecx\n\t"
; 1113 :         "movl\t%%ecx, 28(%3)\n\t"
; 1114 :         "movl\t32(%1), %%ecx\n\t"
; 1115 :         "adcl\t32(%2), %%ecx\n\t"
; 1116 :         "movl\t%%ecx, 32(%3)\n\t"
; 1117 :         "movl\t36(%1), %%ecx\n\t"
; 1118 :         "adcl\t36(%2), %%ecx\n\t"
; 1119 :         "movl\t%%ecx, 36(%3)\n\t"
; 1120 :         "movl\t40(%1), %%ecx\n\t"
; 1121 :         "adcl\t40(%2), %%ecx\n\t"
; 1122 :         "movl\t%%ecx, 40(%3)\n\t"
; 1123 :         "movl\t44(%1), %%ecx\n\t"
; 1124 :         "adcl\t44(%2), %%ecx\n\t"
; 1125 :         "movl\t%%ecx, 44(%3)\n\t"
; 1126 :         "movl\t48(%1), %%ecx\n\t"
; 1127 :         "adcl\t48(%2), %%ecx\n\t"
; 1128 :         "movl\t%%ecx, 48(%3)\n\t"
; 1129 :         "movl\t52(%1), %%ecx\n\t"
; 1130 :         "adcl\t52(%2), %%ecx\n\t"
; 1131 :         "movl\t%%ecx, 52(%3)\n\t"
; 1132 :         "movl\t56(%1), %%ecx\n\t"
; 1133 :         "adcl\t56(%2), %%ecx\n\t"
; 1134 :         "movl\t%%ecx, 56(%3)\n\t"
; 1135 :         "movl\t60(%1), %%ecx\n\t"
; 1136 :         "adcl\t60(%2), %%ecx\n\t"
; 1137 :         "movl\t%%ecx, 60(%3)\n\t"
; 1138 :         "movl\t64(%1), %%ecx\n\t"
; 1139 :         "adcl\t64(%2), %%ecx\n\t"
; 1140 :         "movl\t%%ecx, 64(%3)\n\t"
; 1141 :         "movl\t68(%1), %%ecx\n\t"
; 1142 :         "adcl\t68(%2), %%ecx\n\t"
; 1143 :         "movl\t%%ecx, 68(%3)\n\t"
; 1144 :         "movl\t72(%1), %%ecx\n\t"
; 1145 :         "adcl\t72(%2), %%ecx\n\t"
; 1146 :         "movl\t%%ecx, 72(%3)\n\t"
; 1147 :         "movl\t76(%1), %%ecx\n\t"
; 1148 :         "adcl\t76(%2), %%ecx\n\t"
; 1149 :         "movl\t%%ecx, 76(%3)\n\t"
; 1150 :         "movl\t80(%1), %%ecx\n\t"
; 1151 :         "adcl\t80(%2), %%ecx\n\t"
; 1152 :         "movl\t%%ecx, 80(%3)\n\t"
; 1153 :         "movl\t84(%1), %%ecx\n\t"
; 1154 :         "adcl\t84(%2), %%ecx\n\t"
; 1155 :         "movl\t%%ecx, 84(%3)\n\t"
; 1156 :         "movl\t88(%1), %%ecx\n\t"
; 1157 :         "adcl\t88(%2), %%ecx\n\t"
; 1158 :         "movl\t%%ecx, 88(%3)\n\t"
; 1159 :         "movl\t92(%1), %%ecx\n\t"
; 1160 :         "adcl\t92(%2), %%ecx\n\t"
; 1161 :         "movl\t%%ecx, 92(%3)\n\t"
; 1162 :         "movl\t96(%1), %%ecx\n\t"
; 1163 :         "adcl\t96(%2), %%ecx\n\t"
; 1164 :         "movl\t%%ecx, 96(%3)\n\t"
; 1165 :         "movl\t100(%1), %%ecx\n\t"
; 1166 :         "adcl\t100(%2), %%ecx\n\t"
; 1167 :         "movl\t%%ecx, 100(%3)\n\t"
; 1168 :         "movl\t104(%1), %%ecx\n\t"
; 1169 :         "adcl\t104(%2), %%ecx\n\t"
; 1170 :         "movl\t%%ecx, 104(%3)\n\t"
; 1171 :         "movl\t108(%1), %%ecx\n\t"
; 1172 :         "adcl\t108(%2), %%ecx\n\t"
; 1173 :         "movl\t%%ecx, 108(%3)\n\t"
; 1174 :         "movl\t112(%1), %%ecx\n\t"
; 1175 :         "adcl\t112(%2), %%ecx\n\t"
; 1176 :         "movl\t%%ecx, 112(%3)\n\t"
; 1177 :         "movl\t116(%1), %%ecx\n\t"
; 1178 :         "adcl\t116(%2), %%ecx\n\t"
; 1179 :         "movl\t%%ecx, 116(%3)\n\t"
; 1180 :         "movl\t120(%1), %%ecx\n\t"
; 1181 :         "adcl\t120(%2), %%ecx\n\t"
; 1182 :         "movl\t%%ecx, 120(%3)\n\t"
; 1183 :         "movl\t124(%1), %%ecx\n\t"
; 1184 :         "adcl\t124(%2), %%ecx\n\t"
; 1185 :         "movl\t%%ecx, 124(%3)\n\t"
; 1186 :         "setc\t%0"
; 1187 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1188 :         :
; 1189 :         : "cc", "memory", "%ecx"
; 1190 : );
; 1191 : #elif defined(_M_IX64)
; 1192 :     __asm__ volatile (
; 1193 :         "addb\t$-1, %0\n\t"
; 1194 :         "movq\t(%1), %%rcx\n\t"
; 1195 :         "adcq\t(%2), %%rcx\n\t"
; 1196 :         "movq\t%%rcx, (%3)\n\t"
; 1197 :         "movq\t8(%1), %%rcx\n\t"
; 1198 :         "adcq\t8(%2), %%rcx\n\t"
; 1199 :         "movq\t%%rcx, 8(%3)\n\t"
; 1200 :         "movq\t16(%1), %%rcx\n\t"
; 1201 :         "adcq\t16(%2), %%rcx\n\t"
; 1202 :         "movq\t%%rcx, 16(%3)\n\t"
; 1203 :         "movq\t24(%1), %%rcx\n\t"
; 1204 :         "adcq\t24(%2), %%rcx\n\t"
; 1205 :         "movq\t%%rcx, 24(%3)\n\t"
; 1206 :         "movq\t32(%1), %%rcx\n\t"
; 1207 :         "adcq\t32(%2), %%rcx\n\t"
; 1208 :         "movq\t%%rcx, 32(%3)\n\t"
; 1209 :         "movq\t40(%1), %%rcx\n\t"
; 1210 :         "adcq\t40(%2), %%rcx\n\t"
; 1211 :         "movq\t%%rcx, 40(%3)\n\t"
; 1212 :         "movq\t48(%1), %%rcx\n\t"
; 1213 :         "adcq\t48(%2), %%rcx\n\t"
; 1214 :         "movq\t%%rcx, 48(%3)\n\t"
; 1215 :         "movq\t56(%1), %%rcx\n\t"
; 1216 :         "adcq\t56(%2), %%rcx\n\t"
; 1217 :         "movq\t%%rcx, 56(%3)\n\t"
; 1218 :         "movq\t64(%1), %%rcx\n\t"
; 1219 :         "adcq\t64(%2), %%rcx\n\t"
; 1220 :         "movq\t%%rcx, 64(%3)\n\t"
; 1221 :         "movq\t72(%1), %%rcx\n\t"
; 1222 :         "adcq\t72(%2), %%rcx\n\t"
; 1223 :         "movq\t%%rcx, 72(%3)\n\t"
; 1224 :         "movq\t80(%1), %%rcx\n\t"
; 1225 :         "adcq\t80(%2), %%rcx\n\t"
; 1226 :         "movq\t%%rcx, 80(%3)\n\t"
; 1227 :         "movq\t88(%1), %%rcx\n\t"
; 1228 :         "adcq\t88(%2), %%rcx\n\t"
; 1229 :         "movq\t%%rcx, 88(%3)\n\t"
; 1230 :         "movq\t96(%1), %%rcx\n\t"
; 1231 :         "adcq\t96(%2), %%rcx\n\t"
; 1232 :         "movq\t%%rcx, 96(%3)\n\t"
; 1233 :         "movq\t104(%1), %%rcx\n\t"
; 1234 :         "adcq\t104(%2), %%rcx\n\t"
; 1235 :         "movq\t%%rcx, 104(%3)\n\t"
; 1236 :         "movq\t112(%1), %%rcx\n\t"
; 1237 :         "adcq\t112(%2), %%rcx\n\t"
; 1238 :         "movq\t%%rcx, 112(%3)\n\t"
; 1239 :         "movq\t120(%1), %%rcx\n\t"
; 1240 :         "adcq\t120(%2), %%rcx\n\t"
; 1241 :         "movq\t%%rcx, 120(%3)\n\t"
; 1242 :         "movq\t128(%1), %%rcx\n\t"
; 1243 :         "adcq\t128(%2), %%rcx\n\t"
; 1244 :         "movq\t%%rcx, 128(%3)\n\t"
; 1245 :         "movq\t136(%1), %%rcx\n\t"
; 1246 :         "adcq\t136(%2), %%rcx\n\t"
; 1247 :         "movq\t%%rcx, 136(%3)\n\t"
; 1248 :         "movq\t144(%1), %%rcx\n\t"
; 1249 :         "adcq\t144(%2), %%rcx\n\t"
; 1250 :         "movq\t%%rcx, 144(%3)\n\t"
; 1251 :         "movq\t152(%1), %%rcx\n\t"
; 1252 :         "adcq\t152(%2), %%rcx\n\t"
; 1253 :         "movq\t%%rcx, 152(%3)\n\t"
; 1254 :         "movq\t160(%1), %%rcx\n\t"
; 1255 :         "adcq\t160(%2), %%rcx\n\t"
; 1256 :         "movq\t%%rcx, 160(%3)\n\t"
; 1257 :         "movq\t168(%1), %%rcx\n\t"
; 1258 :         "adcq\t168(%2), %%rcx\n\t"
; 1259 :         "movq\t%%rcx, 168(%3)\n\t"
; 1260 :         "movq\t176(%1), %%rcx\n\t"
; 1261 :         "adcq\t176(%2), %%rcx\n\t"
; 1262 :         "movq\t%%rcx, 176(%3)\n\t"
; 1263 :         "movq\t184(%1), %%rcx\n\t"
; 1264 :         "adcq\t184(%2), %%rcx\n\t"
; 1265 :         "movq\t%%rcx, 184(%3)\n\t"
; 1266 :         "movq\t192(%1), %%rcx\n\t"
; 1267 :         "adcq\t192(%2), %%rcx\n\t"
; 1268 :         "movq\t%%rcx, 192(%3)\n\t"
; 1269 :         "movq\t200(%1), %%rcx\n\t"
; 1270 :         "adcq\t200(%2), %%rcx\n\t"
; 1271 :         "movq\t%%rcx, 200(%3)\n\t"
; 1272 :         "movq\t208(%1), %%rcx\n\t"
; 1273 :         "adcq\t208(%2), %%rcx\n\t"
; 1274 :         "movq\t%%rcx, 208(%3)\n\t"
; 1275 :         "movq\t216(%1), %%rcx\n\t"
; 1276 :         "adcq\t216(%2), %%rcx\n\t"
; 1277 :         "movq\t%%rcx, 216(%3)\n\t"
; 1278 :         "movq\t224(%1), %%rcx\n\t"
; 1279 :         "adcq\t224(%2), %%rcx\n\t"
; 1280 :         "movq\t%%rcx, 224(%3)\n\t"
; 1281 :         "movq\t232(%1), %%rcx\n\t"
; 1282 :         "adcq\t232(%2), %%rcx\n\t"
; 1283 :         "movq\t%%rcx, 232(%3)\n\t"
; 1284 :         "movq\t240(%1), %%rcx\n\t"
; 1285 :         "adcq\t240(%2), %%rcx\n\t"
; 1286 :         "movq\t%%rcx, 240(%3)\n\t"
; 1287 :         "movq\t248(%1), %%rcx\n\t"
; 1288 :         "adcq\t248(%2), %%rcx\n\t"
; 1289 :         "movq\t%%rcx, 248(%3)\n\t"
; 1290 :         "setc\t%0"
; 1291 :         : "+r"(c), "+r"(xp), "+r"(yp), "+r"(zp)
; 1292 :         :
; 1293 :         : "cc", "memory", "%rcx"
; 1294 : );
; 1295 : #else
; 1296 : #error unknown platform
; 1297 : #endif
; 1298 : #else
; 1299 : #error unknown compiler
; 1300 : #endif
; 1301 :     return (c);

	mov	al, BYTE PTR _c$[ebp]

; 1302 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ADD_32WORDS_ADC_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT_DIV PROC

; 652  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 653  :         if (x == 0)

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 654  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 655  : #ifdef _M_IX86
; 656  :         _UINT32_T pos;
; 657  : #ifdef _MSC_VER
; 658  :         _BitScanReverse(&pos, x);

	bsr	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _pos$[ebp], eax

; 659  : #elif defined(__GNUC__)
; 660  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 661  : #else
; 662  : #error unknown compiler
; 663  : #endif
; 664  : #elif defined(_M_X64)
; 665  : #ifdef _MSC_VER
; 666  :         _UINT32_T pos;
; 667  :         _BitScanReverse(&pos, x);
; 668  : #elif defined(__GNUC__)
; 669  :         _UINT64_T pos;
; 670  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 671  : #else
; 672  : #error unknown compiler
; 673  : #endif
; 674  : #else
; 675  : #error unknown platform
; 676  : #endif
; 677  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, DWORD PTR _pos$[ebp]
$LN1@LZCNT_ALT_:

; 678  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@LZCNT_ALT_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@LZCNT_ALT_:
	DD	1
	DD	$LN5@LZCNT_ALT_
$LN5@LZCNT_ALT_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@LZCNT_ALT_
$LN4@LZCNT_ALT_:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
__LZCNT_ALT_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT PROC

; 623  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 624  :         if (x == 0)

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 625  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 626  : #ifdef _M_IX86
; 627  :         _UINT32_T pos;
; 628  : #ifdef _MSC_VER
; 629  :         _BitScanReverse(&pos, x);

	bsr	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _pos$[ebp], eax

; 630  : #elif defined(__GNUC__)
; 631  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 632  : #else
; 633  : #error unknown compiler
; 634  : #endif
; 635  : #elif defined(_M_X64)
; 636  : #ifdef _MSC_VER
; 637  :         _UINT32_T pos;
; 638  :         _BitScanReverse64(&pos, x);
; 639  : #elif defined(__GNUC__)
; 640  :         _UINT64_T pos;
; 641  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 642  : #else
; 643  : #error unknown compiler
; 644  : #endif
; 645  : #else
; 646  : #error unknown platform
; 647  : #endif
; 648  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, DWORD PTR _pos$[ebp]
$LN1@LZCNT_ALT_:

; 649  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@LZCNT_ALT_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@LZCNT_ALT_:
	DD	1
	DD	$LN5@LZCNT_ALT_
$LN5@LZCNT_ALT_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@LZCNT_ALT_
$LN4@LZCNT_ALT_:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
__LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 4
__LZCNT_ALT_32 PROC

; 590  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 591  :         if (x == 0)

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN2@LZCNT_ALT_

; 592  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H
	jmp	SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 593  :         _UINT32_T pos;
; 594  : #ifdef _MSC_VER
; 595  :         _BitScanReverse(&pos, x);

	bsr	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _pos$[ebp], eax

; 596  : #elif defined(__GNUC__)
; 597  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 598  : #else
; 599  : #error unknown compiler
; 600  : #endif
; 601  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31					; 0000001fH
	sub	eax, DWORD PTR _pos$[ebp]
$LN1@LZCNT_ALT_:

; 602  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@LZCNT_ALT_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@LZCNT_ALT_:
	DD	1
	DD	$LN5@LZCNT_ALT_
$LN5@LZCNT_ALT_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@LZCNT_ALT_
$LN4@LZCNT_ALT_:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
__LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_t$1 = -8						; size = 8
_r$ = 8							; size = 4
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_q$ = 20						; size = 4
__DIVREM_SINGLE_UNIT PROC

; 422  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 423  : #ifdef _MSC_VER
; 424  :         if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@DIVREM_SIN

; 425  :         {
; 426  :             // 64bit/32bitの除算を行う組み込み関数は実装されていない。
; 427  :             _UINT64_T t = _FROMWORDTODWORD(r, u);

	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	call	__FROMWORDTODWORD
	add	esp, 8
	mov	DWORD PTR _t$1[ebp], eax
	mov	DWORD PTR _t$1[ebp+4], edx

; 428  :             *q = (_UINT32_T)(t / v);

	mov	eax, DWORD PTR _v$[ebp]
	xor	ecx, ecx
	push	ecx
	push	eax
	mov	edx, DWORD PTR _t$1[ebp+4]
	push	edx
	mov	eax, DWORD PTR _t$1[ebp]
	push	eax
	call	__aulldiv
	mov	ecx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [ecx], eax

; 429  :             return ((_UINT32_T)(t % v));

	mov	edx, DWORD PTR _v$[ebp]
	xor	eax, eax
	push	eax
	push	edx
	mov	ecx, DWORD PTR _t$1[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _t$1[ebp]
	push	edx
	call	__aullrem
	jmp	SHORT $LN1@DIVREM_SIN

; 430  :         }

	jmp	SHORT $LN1@DIVREM_SIN
$LN2@DIVREM_SIN:

; 431  :         else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))

	xor	eax, eax
	je	SHORT $LN4@DIVREM_SIN

; 432  :         {
; 433  :             // 以下の理由のため、MSVCでは 128bit/64bit の除算を実装できない。運用で回避すること。
; 434  :             // ・(x64 に限らず) 除算の組み込み関数が用意されていない。
; 435  :             // ・128bit 整数のデータ型が用意されていない。
; 436  :             // ・x64 ではインラインアセンブラがサポートされていない。
; 437  :             *q = 0;

	mov	ecx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [ecx], 0

; 438  :             return (0);

	xor	eax, eax
	jmp	SHORT $LN1@DIVREM_SIN

; 439  :         }

	jmp	SHORT $LN1@DIVREM_SIN
$LN4@DIVREM_SIN:

; 440  :         else
; 441  :         {
; 442  :             // 未知のプラットフォームの場合はとりあえず適当なものを返す。
; 443  :             *q = 0;

	mov	edx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [edx], 0

; 444  :             return (0);

	xor	eax, eax
$LN1@DIVREM_SIN:

; 445  :         }
; 446  : #elif defined(__GNUC__)
; 447  :         if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))
; 448  :             __asm__("divl %4": "=a"(*q), "=d"(r) : "0"(u), "1"(r), "rm"(v));
; 449  :         else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))
; 450  :             __asm__("divq %4": "=a"(*q), "=d"(r) : "0"(u), "1"(r), "rm"(v));
; 451  :         else
; 452  :         {
; 453  :             // 未知のプラットフォームの場合はとりあえず適当なものを返す。
; 454  :             *q = 0;
; 455  :             r = 0;
; 456  :         }
; 457  :         return (r);
; 458  : #else
; 459  : #error unknown compiler
; 460  : #endif
; 461  :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DIVREM_SINGLE_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_t$1 = -8						; size = 8
_u_high$ = 8						; size = 4
_u_low$ = 12						; size = 4
_v$ = 16						; size = 4
_r$ = 20						; size = 4
__DIVREM_UNIT PROC

; 378  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 379  : #ifdef _MSC_VER
; 380  :         if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@DIVREM_UNI

; 381  :         {
; 382  :             // 64bit/32bitの除算を行う組み込み関数は実装されていない。
; 383  :             _UINT64_T t = _FROMWORDTODWORD(u_high, u_low);

	mov	ecx, DWORD PTR _u_low$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_high$[ebp]
	push	edx
	call	__FROMWORDTODWORD
	add	esp, 8
	mov	DWORD PTR _t$1[ebp], eax
	mov	DWORD PTR _t$1[ebp+4], edx

; 384  :             *r = (_UINT32_T)(t % v);

	mov	eax, DWORD PTR _v$[ebp]
	xor	ecx, ecx
	push	ecx
	push	eax
	mov	edx, DWORD PTR _t$1[ebp+4]
	push	edx
	mov	eax, DWORD PTR _t$1[ebp]
	push	eax
	call	__aullrem
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [ecx], eax

; 385  :             return ((_UINT32_T)(t / v));

	mov	edx, DWORD PTR _v$[ebp]
	xor	eax, eax
	push	eax
	push	edx
	mov	ecx, DWORD PTR _t$1[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _t$1[ebp]
	push	edx
	call	__aulldiv
	jmp	SHORT $LN1@DIVREM_UNI

; 386  :         }

	jmp	SHORT $LN1@DIVREM_UNI
$LN2@DIVREM_UNI:

; 387  :         else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))

	xor	eax, eax
	je	SHORT $LN4@DIVREM_UNI

; 388  :         {
; 389  :             // 以下の理由のため、MSVCでは 128bit/64bit の除算を実装できない。運用で回避すること。
; 390  :             // ・(x64 に限らず) 除算の組み込み関数が用意されていない。
; 391  :             // ・128bit 整数のデータ型が用意されていない。
; 392  :             // ・x64 ではインラインアセンブラがサポートされていない。
; 393  :             *r = 0;

	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [ecx], 0

; 394  :             return (0);

	xor	eax, eax
	jmp	SHORT $LN1@DIVREM_UNI

; 395  :         }

	jmp	SHORT $LN1@DIVREM_UNI
$LN4@DIVREM_UNI:

; 396  :         else
; 397  :         {
; 398  :             // 未知のプラットフォームの場合はとりあえず適当なものを返す。
; 399  :             *r = 0;

	mov	edx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [edx], 0

; 400  :             return (0);

	xor	eax, eax
$LN1@DIVREM_UNI:

; 401  :         }
; 402  : #elif defined(__GNUC__)
; 403  :         __UNIT_TYPE q;
; 404  :         if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))
; 405  :             __asm__("divl %4": "=a"(q), "=d"(*r) : "0"(u_low), "1"(u_high), "rm"(v));
; 406  :         else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))
; 407  :             __asm__("divq %4": "=a"(q), "=d"(*r) : "0"(u_low), "1"(u_high), "rm"(v));
; 408  :         else
; 409  :         {
; 410  :             // 未知のプラットフォームの場合はとりあえず適当なものを返す。
; 411  :             *r = 0;
; 412  :             q = 0;
; 413  :         }
; 414  :         return (q);
; 415  : #else
; 416  : #error unknown compiler
; 417  : #endif
; 418  :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DIVREM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w_hi$ = 16						; size = 4
__MULTIPLYX_UNIT_DIV PROC

; 356  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 357  : #ifdef _MSC_VER
; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _w_hi$[ebp]
	push	eax
	mov	eax, DWORD PTR _u$[ebp]
	mul	DWORD PTR _v$[ebp]
	push	edx
	push	eax
	call	__FROMDWORDTOWORD
	add	esp, 12					; 0000000cH

; 359  : #elif defined(__GNUC__)
; 360  : #ifdef _M_IX86
; 361  :         _UINT32_T w_lo;
; 362  :         __asm__("mulxl %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 363  :         return (w_lo);
; 364  : #elif defined(_M_X64)
; 365  :         _UINT64_T w_lo;
; 366  :         __asm__("mulxq %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 367  :         return (w_lo);
; 368  : #else
; 369  : #error unknown platform
; 370  : #endif
; 371  : #else
; 372  : #error unknown compiler
; 373  : #endif
; 374  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__MULTIPLYX_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_w_hi$ = 16						; size = 4
__MULTIPLY_UNIT_DIV PROC

; 310  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 311  : #ifdef _MSC_VER
; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, DWORD PTR _w_hi$[ebp]
	push	eax
	mov	eax, DWORD PTR _u$[ebp]
	mul	DWORD PTR _v$[ebp]
	push	edx
	push	eax
	call	__FROMDWORDTOWORD
	add	esp, 12					; 0000000cH

; 313  : #elif defined(__GNUC__)
; 314  : #ifdef _M_IX86
; 315  :         _UINT32_T w_lo;
; 316  :         __asm__("mull %3": "=a"(w_lo), "=d"(*w_hi) : "0"(u), "rm"(v));
; 317  :         return (w_lo);
; 318  : #elif defined(_M_X64)
; 319  :         return (_umul128(u, v, w_hi));
; 320  : #else
; 321  : #error unknown platform
; 322  : #endif
; 323  : #else
; 324  : #error unknown compiler
; 325  : #endif
; 326  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__MULTIPLY_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_borrow$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__SUBTRUCT_UNIT_DIV PROC

; 274  :     {

	push	ebp
	mov	ebp, esp
	push	ebx
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 275  : #ifdef _MSC_VER
; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _u$[ebp]
	mov	bl, BYTE PTR _borrow$[ebp]
	add	bl, 255					; 000000ffH
	sbb	edx, ecx
	setb	cl
	mov	DWORD PTR [eax], edx
	mov	al, cl

; 277  : #elif defined(__GNUC__)
; 278  : #ifdef _M_IX86
; 279  :         return (_subborrow_u32(borrow, u, v, w));
; 280  : #elif defined(_M_X64)
; 281  :         return (_subborrow_u64(borrow, u, v, w));
; 282  : #else
; 283  : #error unknown platform
; 284  : #endif
; 285  : #else
; 286  : #error unknown compiler
; 287  : #endif
; 288  :     }

	pop	ebx
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__SUBTRUCT_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADDX_UNIT_DIV PROC

; 246  :     {

	push	ebp
	mov	ebp, esp
	push	ebx
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 247  : #ifdef _MSC_VER
; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _u$[ebp]
	mov	bl, BYTE PTR _carry$[ebp]
	add	bl, 255					; 000000ffH
	adcx	edx, ecx
	setb	cl
	mov	DWORD PTR [eax], edx
	mov	al, cl

; 249  : #elif defined(__GNUC__)
; 250  : #ifdef _M_IX86
; 251  :         return (_addcarryx_u32(carry, u, v, w));
; 252  : #elif defined(_M_X64)
; 253  :         return (_addcarryx_u64(carry, u, v, w));
; 254  : #else
; 255  : #error unknown platform
; 256  : #endif
; 257  : #else
; 258  : #error unknown compiler
; 259  : #endif
; 260  :     }

	pop	ebx
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ADDX_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_carry$ = 8						; size = 1
_u$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
__ADD_UNIT_DIV PROC

; 218  :     {

	push	ebp
	mov	ebp, esp
	push	ebx
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 219  : #ifdef _MSC_VER
; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	eax, DWORD PTR _w$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _u$[ebp]
	mov	bl, BYTE PTR _carry$[ebp]
	add	bl, 255					; 000000ffH
	adc	edx, ecx
	setb	cl
	mov	DWORD PTR [eax], edx
	mov	al, cl

; 221  : #elif defined(__GNUC__)
; 222  : #ifdef _M_IX86
; 223  :         return (_addcarry_u32(carry, u, v, w));
; 224  : #elif defined(_M_X64)
; 225  :         return (_addcarry_u64(carry, u, v, w));
; 226  : #else
; 227  : #error unknown platform
; 228  : #endif
; 229  : #else
; 230  : #error unknown compiler
; 231  : #endif
; 232  :     }

	pop	ebx
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ADD_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC

; 176  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	eax, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR _value$[ebp+4]
	mov	cl, 32					; 00000020H
	call	__aullshr
	mov	ecx, DWORD PTR _result_high$[ebp]
	mov	DWORD PTR [ecx], eax

; 178  :         return ((_UINT32_T)value);

	mov	eax, DWORD PTR _value$[ebp]

; 179  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_value_high$ = 8					; size = 4
_value_low$ = 12					; size = 4
__FROMWORDTODWORD PROC

; 171  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	edx, edx
	mov	eax, DWORD PTR _value_high$[ebp]
	mov	cl, 32					; 00000020H
	call	__allshl
	xor	ecx, ecx
	or	eax, DWORD PTR _value_low$[ebp]
	or	edx, ecx

; 173  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__FROMWORDTODWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT_DIV PROC

; 71   :     {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 72   : #ifdef _M_IX86
; 73   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, DWORD PTR _d$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep movsd

; 74   : #elif defined(_M_X64)
; 75   : #ifdef _MSC_VER
; 76   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);
; 77   : #elif defined(__GNUC__)
; 78   :         __movsq(d, s, count);
; 79   : #else
; 80   : #error unknown compiler
; 81   : #endif
; 82   : #else
; 83   : #error unknown platform
; 84   : #endif
; 85   :     }

	pop	edi
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__COPY_MEMORY_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT PROC

; 60   :     {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 61   : #ifdef _M_IX86
; 62   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, DWORD PTR _d$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep movsd

; 63   : #elif defined(_M_X64)
; 64   :         __movsq(d, s, count);
; 65   : #else
; 66   : #error unknown platform
; 67   : #endif
; 68   :     }

	pop	edi
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
_TEXT	SEGMENT
_value$ = 8						; size = 4
_AddToMULTI64Counter PROC

; 353  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BB6D3116_pmc_uint_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, OFFSET _statistics_info
	lock	 xadd	 DWORD PTR [ecx], eax

; 355  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_AddToMULTI64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
_TEXT	SEGMENT
_value$ = 8						; size = 4
_AddToMULTI32Counter PROC

; 347  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BB6D3116_pmc_uint_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, OFFSET _statistics_info+4
	lock	 xadd	 DWORD PTR [ecx], eax

; 349  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_AddToMULTI32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
_TEXT	SEGMENT
_value$ = 8						; size = 4
_AddToDIV64Counter PROC

; 341  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BB6D3116_pmc_uint_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 342  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV64, value);

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, OFFSET _statistics_info+8
	lock	 xadd	 DWORD PTR [ecx], eax

; 343  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_AddToDIV64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
_TEXT	SEGMENT
_value$ = 8						; size = 4
_AddToDIV32Counter PROC

; 335  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BB6D3116_pmc_uint_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 336  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, OFFSET _statistics_info+12
	lock	 xadd	 DWORD PTR [ecx], eax

; 337  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_AddToDIV32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
_TEXT	SEGMENT
_IncrementMULTI64Counter PROC

; 330  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BB6D3116_pmc_uint_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 331  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI64);

	lock	 inc	 (null) PTR _statistics_info

; 332  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_IncrementMULTI64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
_TEXT	SEGMENT
_IncrementMULTI32Counter PROC

; 324  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BB6D3116_pmc_uint_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 325  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

	lock	 inc	 (null) PTR _statistics_info+4

; 326  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_IncrementMULTI32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
_TEXT	SEGMENT
_IncrementDIV64Counter PROC

; 318  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BB6D3116_pmc_uint_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 319  :         _InterlockedIncrement(&statistics_info.COUNT_DIV64);

	lock	 inc	 (null) PTR _statistics_info+8

; 320  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_IncrementDIV64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
_TEXT	SEGMENT
_IncrementDIV32Counter PROC

; 312  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BB6D3116_pmc_uint_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 313  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock	 inc	 (null) PTR _statistics_info+12

; 314  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_IncrementDIV32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
_TEXT	SEGMENT
_work_v_buf$1 = -136					; size = 4
_work_v_buf_words$2 = -128				; size = 4
_work_v_buf_code$3 = -116				; size = 4
_nr_light_check_code$4 = -104				; size = 4
_nq_light_check_code$5 = -92				; size = 4
_r_bit_count$6 = -84					; size = 4
_q_bit_count$7 = -80					; size = 4
_nr_light_check_code$8 = -72				; size = 4
_r_bit_count$9 = -64					; size = 4
_nq_light_check_code$10 = -56				; size = 4
_q_bit_count$11 = -48					; size = 4
_v_bit_count$12 = -44					; size = 4
_u_bit_count$13 = -40					; size = 4
_nr$ = -32						; size = 4
_nq$ = -20						; size = 4
_result$ = -12						; size = 4
_nv$ = -8						; size = 4
_nu$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_q$ = 16						; size = 4
_r$ = 20						; size = 4
_PMC_DivRem_X_X@16 PROC

; 1585 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 136				; 00000088H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-136]
	mov	ecx, 34					; 00000022H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __531E8CBE_pmc_divrem@c
	call	@__CheckForDebuggerJustMyCode@4

; 1586 :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN2@PMC_DivRem

; 1587 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_DivRem
$LN2@PMC_DivRem:

; 1588 :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_DivRem

; 1589 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_DivRem
$LN3@PMC_DivRem:

; 1590 :     if (q == NULL)

	cmp	DWORD PTR _q$[ebp], 0
	jne	SHORT $LN4@PMC_DivRem

; 1591 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_DivRem
$LN4@PMC_DivRem:

; 1592 :     if (r == NULL)

	cmp	DWORD PTR _r$[ebp], 0
	jne	SHORT $LN5@PMC_DivRem

; 1593 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_DivRem
$LN5@PMC_DivRem:

; 1594 :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	eax, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], eax

; 1595 :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	ecx, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], ecx

; 1596 :     PMC_STATUS_CODE result;
; 1597 :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nu$[ebp]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_DivRem

; 1598 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN6@PMC_DivRem:

; 1599 :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nv$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN7@PMC_DivRem

; 1600 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN7@PMC_DivRem:

; 1601 :     if (nv->IS_ZERO)

	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	shr	edx, 1
	and	edx, 1
	je	SHORT $LN8@PMC_DivRem

; 1602 :     {
; 1603 :         // v が 0 である場合
; 1604 : 
; 1605 :         // 0 による除算はエラーで返す
; 1606 :         return (PMC_STATUS_DIVISION_BY_ZERO);

	mov	eax, -3					; fffffffdH
	jmp	$LN1@PMC_DivRem
$LN8@PMC_DivRem:

; 1607 :     }
; 1608 :     NUMBER_HEADER* nq;
; 1609 :     NUMBER_HEADER* nr;
; 1610 :     if (nu->IS_ZERO)

	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN9@PMC_DivRem

; 1611 :     {
; 1612 :         // u が 0 である場合
; 1613 : 
; 1614 :         // q = 0, r = 0 を返す
; 1615 :         nq = &number_zero;

	mov	DWORD PTR _nq$[ebp], OFFSET _number_zero

; 1616 :         nr = &number_zero;

	mov	DWORD PTR _nr$[ebp], OFFSET _number_zero

; 1617 :     }

	jmp	$LN10@PMC_DivRem
$LN9@PMC_DivRem:

; 1618 :     else
; 1619 :     {
; 1620 :         // u が 0 ではない場合
; 1621 : 
; 1622 :         if (nv->IS_ONE)

	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+24]
	shr	eax, 2
	and	eax, 1
	je	SHORT $LN11@PMC_DivRem

; 1623 :         {
; 1624 :             // v が 1 である場合
; 1625 : 
; 1626 :             // q = u, r = 0 を返す
; 1627 :             if ((result = DuplicateNumber(nu, &nq)) != PMC_STATUS_OK)

	lea	ecx, DWORD PTR _nq$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	push	edx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN13@PMC_DivRem

; 1628 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN13@PMC_DivRem:

; 1629 :             nr = &number_zero;

	mov	DWORD PTR _nr$[ebp], OFFSET _number_zero

; 1630 :         }

	jmp	$LN10@PMC_DivRem
$LN11@PMC_DivRem:

; 1631 :         else
; 1632 :         {
; 1633 :             // u > 0 かつ v > 1 である場合
; 1634 : 
; 1635 :             // x と y の商・剰余を計算する
; 1636 :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _u_bit_count$13[ebp], ecx

; 1637 :             __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _v_bit_count$12[ebp], eax

; 1638 :             if (u_bit_count < v_bit_count)

	mov	ecx, DWORD PTR _u_bit_count$13[ebp]
	cmp	ecx, DWORD PTR _v_bit_count$12[ebp]
	jae	SHORT $LN14@PMC_DivRem

; 1639 :             {
; 1640 :                 // 明らかに u < v である場合
; 1641 : 
; 1642 :                 // q = 0, r = u を返す。
; 1643 :                 nq = &number_zero;

	mov	DWORD PTR _nq$[ebp], OFFSET _number_zero

; 1644 :                 if ((result = DuplicateNumber(nu, &nr)) != PMC_STATUS_OK)

	lea	edx, DWORD PTR _nr$[ebp]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	push	eax
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN16@PMC_DivRem

; 1645 :                     return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN16@PMC_DivRem:

; 1646 :             }

	jmp	$LN10@PMC_DivRem
$LN14@PMC_DivRem:

; 1647 :             else if (v_bit_count <= sizeof(__UNIT_TYPE_DIV) * 8)

	cmp	DWORD PTR _v_bit_count$12[ebp], 32	; 00000020H
	ja	$LN17@PMC_DivRem

; 1648 :             {
; 1649 :                 // 除数が 1 ワードで表現できる場合
; 1650 : 
; 1651 :                 __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

	mov	ecx, DWORD PTR _u_bit_count$13[ebp]
	sub	ecx, DWORD PTR _v_bit_count$12[ebp]
	add	ecx, 33					; 00000021H
	mov	DWORD PTR _q_bit_count$11[ebp], ecx

; 1652 :                 __UNIT_TYPE nq_light_check_code;
; 1653 :                 if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)

	lea	edx, DWORD PTR _nq_light_check_code$10[ebp]
	push	edx
	mov	eax, DWORD PTR _q_bit_count$11[ebp]
	push	eax
	lea	ecx, DWORD PTR _nq$[ebp]
	push	ecx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN19@PMC_DivRem

; 1654 :                     return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN19@PMC_DivRem:

; 1655 :                 __UNIT_TYPE r_bit_count = sizeof(__UNIT_TYPE_DIV) * 8;

	mov	DWORD PTR _r_bit_count$9[ebp], 32	; 00000020H

; 1656 :                 __UNIT_TYPE nr_light_check_code;
; 1657 :                 if ((result = AllocateNumber(&nr, r_bit_count, &nr_light_check_code)) != PMC_STATUS_OK)

	lea	edx, DWORD PTR _nr_light_check_code$8[ebp]
	push	edx
	mov	eax, DWORD PTR _r_bit_count$9[ebp]
	push	eax
	lea	ecx, DWORD PTR _nr$[ebp]
	push	ecx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN20@PMC_DivRem

; 1658 :                 {
; 1659 :                     DeallocateNumber(nq);

	mov	edx, DWORD PTR _nq$[ebp]
	push	edx
	call	_DeallocateNumber
	add	esp, 4

; 1660 :                     return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN20@PMC_DivRem:

; 1661 :                 }
; 1662 :                 DivRem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV)nv->BLOCK[0], (__UNIT_TYPE_DIV*)nq->BLOCK, (__UNIT_TYPE_DIV*)nr->BLOCK);

	mov	eax, DWORD PTR _nr$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _nq$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+edx]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 2
	shr	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_DivRem_X_1W
	add	esp, 20					; 00000014H

; 1663 :                 if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _nq_light_check_code$10[ebp]
	push	ecx
	mov	edx, DWORD PTR _nq$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN21@PMC_DivRem

; 1664 :                     return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN21@PMC_DivRem:

; 1665 :                 if ((result = CheckBlockLight(nr->BLOCK, nr_light_check_code)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _nr_light_check_code$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _nr$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN22@PMC_DivRem

; 1666 :                     return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN22@PMC_DivRem:

; 1667 :                 CommitNumber(nq);

	mov	ecx, DWORD PTR _nq$[ebp]
	push	ecx
	call	_CommitNumber
	add	esp, 4

; 1668 :                 CommitNumber(nr);

	mov	edx, DWORD PTR _nr$[ebp]
	push	edx
	call	_CommitNumber
	add	esp, 4

; 1669 :                 if (nq->IS_ZERO)

	mov	eax, DWORD PTR _nq$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN23@PMC_DivRem

; 1670 :                 {
; 1671 :                     DeallocateNumber(nq);

	mov	edx, DWORD PTR _nq$[ebp]
	push	edx
	call	_DeallocateNumber
	add	esp, 4

; 1672 :                     nq = &number_zero;

	mov	DWORD PTR _nq$[ebp], OFFSET _number_zero
$LN23@PMC_DivRem:

; 1673 :                 }
; 1674 :                 if (nr->IS_ZERO)

	mov	eax, DWORD PTR _nr$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN24@PMC_DivRem

; 1675 :                 {
; 1676 :                     DeallocateNumber(nr);

	mov	edx, DWORD PTR _nr$[ebp]
	push	edx
	call	_DeallocateNumber
	add	esp, 4

; 1677 :                     nr = &number_zero;

	mov	DWORD PTR _nr$[ebp], OFFSET _number_zero
$LN24@PMC_DivRem:

; 1678 :                 }
; 1679 :             }

	jmp	$LN10@PMC_DivRem
$LN17@PMC_DivRem:

; 1680 :             else
; 1681 :             {
; 1682 :                 // 除数を表現するのに 2 ワード以上必要な場合
; 1683 :                 __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

	mov	eax, DWORD PTR _u_bit_count$13[ebp]
	sub	eax, DWORD PTR _v_bit_count$12[ebp]
	add	eax, 33					; 00000021H
	mov	DWORD PTR _q_bit_count$7[ebp], eax

; 1684 :                 __UNIT_TYPE r_bit_count = u_bit_count + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには v_bit_count だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

	mov	ecx, DWORD PTR _u_bit_count$13[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _r_bit_count$6[ebp], ecx

; 1685 :                 __UNIT_TYPE nq_light_check_code;
; 1686 :                 if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)

	lea	edx, DWORD PTR _nq_light_check_code$5[ebp]
	push	edx
	mov	eax, DWORD PTR _q_bit_count$7[ebp]
	push	eax
	lea	ecx, DWORD PTR _nq$[ebp]
	push	ecx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN25@PMC_DivRem

; 1687 :                     return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN25@PMC_DivRem:

; 1688 :                 __UNIT_TYPE nr_light_check_code;
; 1689 :                 if ((result = AllocateNumber(&nr, r_bit_count, &nr_light_check_code)) != PMC_STATUS_OK)

	lea	edx, DWORD PTR _nr_light_check_code$4[ebp]
	push	edx
	mov	eax, DWORD PTR _r_bit_count$6[ebp]
	push	eax
	lea	ecx, DWORD PTR _nr$[ebp]
	push	ecx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN26@PMC_DivRem

; 1690 :                 {
; 1691 :                     DeallocateNumber(nq);

	mov	edx, DWORD PTR _nq$[ebp]
	push	edx
	call	_DeallocateNumber
	add	esp, 4

; 1692 :                     return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN26@PMC_DivRem:

; 1693 :                 }
; 1694 :                 __UNIT_TYPE work_v_buf_code;
; 1695 :                 __UNIT_TYPE work_v_buf_words;
; 1696 :                 __UNIT_TYPE_DIV* work_v_buf = (__UNIT_TYPE_DIV*)AllocateBlock(nv->UNIT_WORD_COUNT * __UNIT_TYPE_BIT_COUNT, &work_v_buf_words, &work_v_buf_code);

	lea	eax, DWORD PTR _work_v_buf_code$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _work_v_buf_words$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+8]
	shl	eax, 5
	push	eax
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_v_buf$1[ebp], eax

; 1697 :                 if (work_v_buf == NULL)

	cmp	DWORD PTR _work_v_buf$1[ebp], 0
	jne	SHORT $LN27@PMC_DivRem

; 1698 :                 {
; 1699 :                     DeallocateNumber(nq);

	mov	ecx, DWORD PTR _nq$[ebp]
	push	ecx
	call	_DeallocateNumber
	add	esp, 4

; 1700 :                     return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@PMC_DivRem
$LN27@PMC_DivRem:

; 1701 :                 }
; 1702 : 
; 1703 :                 (*fp_DivRem_X_X)((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV*)nv->BLOCK, nv->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), work_v_buf, (__UNIT_TYPE_DIV*)nq->BLOCK, (__UNIT_TYPE_DIV*)nr->BLOCK);

	mov	esi, esp
	mov	edx, DWORD PTR _nr$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _nq$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR _work_v_buf$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	shl	edx, 2
	shr	edx, 2
	push	edx
	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+8]
	shl	eax, 2
	shr	eax, 2
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	DWORD PTR _fp_DivRem_X_X
	add	esp, 28					; 0000001cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1704 :                 if ((result = CheckBlockLight((__UNIT_TYPE*)work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _work_v_buf_code$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_v_buf$1[ebp]
	push	ecx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN28@PMC_DivRem

; 1705 :                     return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN28@PMC_DivRem:

; 1706 :                 if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nq_light_check_code$5[ebp]
	push	edx
	mov	eax, DWORD PTR _nq$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN29@PMC_DivRem

; 1707 :                     return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN29@PMC_DivRem:

; 1708 :                 if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nq_light_check_code$5[ebp]
	push	edx
	mov	eax, DWORD PTR _nq$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN30@PMC_DivRem

; 1709 :                     return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN30@PMC_DivRem:

; 1710 :                 DeallocateBlock((__UNIT_TYPE*)work_v_buf, work_v_buf_words);

	mov	edx, DWORD PTR _work_v_buf_words$2[ebp]
	push	edx
	mov	eax, DWORD PTR _work_v_buf$1[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 1711 :                 CommitNumber(nq);

	mov	ecx, DWORD PTR _nq$[ebp]
	push	ecx
	call	_CommitNumber
	add	esp, 4

; 1712 :                 CommitNumber(nr);

	mov	edx, DWORD PTR _nr$[ebp]
	push	edx
	call	_CommitNumber
	add	esp, 4

; 1713 :                 if (nq->IS_ZERO)

	mov	eax, DWORD PTR _nq$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN31@PMC_DivRem

; 1714 :                 {
; 1715 :                     DeallocateNumber(nq);

	mov	edx, DWORD PTR _nq$[ebp]
	push	edx
	call	_DeallocateNumber
	add	esp, 4

; 1716 :                     nq = &number_zero;

	mov	DWORD PTR _nq$[ebp], OFFSET _number_zero
$LN31@PMC_DivRem:

; 1717 :                 }
; 1718 :                 if (nr->IS_ZERO)

	mov	eax, DWORD PTR _nr$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN10@PMC_DivRem

; 1719 :                 {
; 1720 :                     DeallocateNumber(nr);

	mov	edx, DWORD PTR _nr$[ebp]
	push	edx
	call	_DeallocateNumber
	add	esp, 4

; 1721 :                     nr = &number_zero;

	mov	DWORD PTR _nr$[ebp], OFFSET _number_zero
$LN10@PMC_DivRem:

; 1722 :                 }
; 1723 :             }
; 1724 :         }
; 1725 :     }
; 1726 :     *q = (PMC_HANDLE_UINT)nq;

	mov	eax, DWORD PTR _q$[ebp]
	mov	ecx, DWORD PTR _nq$[ebp]
	mov	DWORD PTR [eax], ecx

; 1727 :     *r = (PMC_HANDLE_UINT)nr;

	mov	edx, DWORD PTR _r$[ebp]
	mov	eax, DWORD PTR _nr$[ebp]
	mov	DWORD PTR [edx], eax

; 1728 : #ifdef _DEBUG
; 1729 :     if ((result = CheckNumber((NUMBER_HEADER*)*q)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _q$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN33@PMC_DivRem

; 1730 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_DivRem
$LN33@PMC_DivRem:

; 1731 :     if ((result = CheckNumber((NUMBER_HEADER*)*r)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN34@PMC_DivRem

; 1732 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_DivRem
$LN34@PMC_DivRem:

; 1733 : #endif
; 1734 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_DivRem:

; 1735 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN45@PMC_DivRem
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 136				; 00000088H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	2
$LN45@PMC_DivRem:
	DD	8
	DD	$LN44@PMC_DivRem
$LN44@PMC_DivRem:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN36@PMC_DivRem
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN37@PMC_DivRem
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN38@PMC_DivRem
	DD	-72					; ffffffb8H
	DD	4
	DD	$LN39@PMC_DivRem
	DD	-92					; ffffffa4H
	DD	4
	DD	$LN40@PMC_DivRem
	DD	-104					; ffffff98H
	DD	4
	DD	$LN41@PMC_DivRem
	DD	-116					; ffffff8cH
	DD	4
	DD	$LN42@PMC_DivRem
	DD	-128					; ffffff80H
	DD	4
	DD	$LN43@PMC_DivRem
$LN43@PMC_DivRem:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN42@PMC_DivRem:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN41@PMC_DivRem:
	DB	110					; 0000006eH
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN40@PMC_DivRem:
	DB	110					; 0000006eH
	DB	113					; 00000071H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN39@PMC_DivRem:
	DB	110					; 0000006eH
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN38@PMC_DivRem:
	DB	110					; 0000006eH
	DB	113					; 00000071H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN37@PMC_DivRem:
	DB	110					; 0000006eH
	DB	114					; 00000072H
	DB	0
$LN36@PMC_DivRem:
	DB	110					; 0000006eH
	DB	113					; 00000071H
	DB	0
_PMC_DivRem_X_X@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
_TEXT	SEGMENT
tv174 = -204						; size = 4
_r_buf$1 = -196						; size = 4
_nq_light_check_code$2 = -184				; size = 4
_q_bit_count$3 = -176					; size = 4
_v_bit_count$4 = -172					; size = 4
_u_bit_count$5 = -168					; size = 4
_r_buf$6 = -164						; size = 4
_r_buf_words$7 = -156					; size = 4
_r_buf_code$8 = -144					; size = 4
_work_v_buf$9 = -132					; size = 8
_v_buf$10 = -116					; size = 8
_nq_light_check_code$11 = -100				; size = 4
_r_bit_count$12 = -92					; size = 4
_q_bit_count$13 = -88					; size = 4
_r_hi$14 = -84						; size = 4
_r_lo$15 = -80						; size = 4
_v_bit_count$16 = -76					; size = 4
_r_buf$17 = -68						; size = 4
_nq_light_check_code$18 = -56				; size = 4
_q_bit_count$19 = -48					; size = 4
_v_bit_count$20 = -44					; size = 4
_v_lo$21 = -40						; size = 4
_v_hi$22 = -32						; size = 4
_u_bit_count$23 = -24					; size = 4
_nq$ = -16						; size = 4
_result$ = -8						; size = 4
_nu$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 8
_q$ = 20						; size = 4
_r$ = 24						; size = 4
_PMC_DivRem_X_L@20 PROC

; 1400 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __531E8CBE_pmc_divrem@c
	call	@__CheckForDebuggerJustMyCode@4

; 1401 :     if (sizeof(__UNIT_TYPE_DIV) * 2 < sizeof(v))

	xor	eax, eax
	je	SHORT $LN2@PMC_DivRem

; 1402 :     {
; 1403 :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 1404 :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	$LN1@PMC_DivRem
$LN2@PMC_DivRem:

; 1405 :     }
; 1406 :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN3@PMC_DivRem

; 1407 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_DivRem
$LN3@PMC_DivRem:

; 1408 :     if (q == NULL)

	cmp	DWORD PTR _q$[ebp], 0
	jne	SHORT $LN4@PMC_DivRem

; 1409 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_DivRem
$LN4@PMC_DivRem:

; 1410 :     if (r == NULL)

	cmp	DWORD PTR _r$[ebp], 0
	jne	SHORT $LN5@PMC_DivRem

; 1411 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_DivRem
$LN5@PMC_DivRem:

; 1412 :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	ecx, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], ecx

; 1413 :     PMC_STATUS_CODE result;
; 1414 :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nu$[ebp]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_DivRem

; 1415 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN6@PMC_DivRem:

; 1416 :     if (v == 0)

	mov	eax, DWORD PTR _v$[ebp]
	or	eax, DWORD PTR _v$[ebp+4]
	jne	SHORT $LN7@PMC_DivRem

; 1417 :     {
; 1418 :         // v が 0 である場合
; 1419 : 
; 1420 :         // 0 による除算はエラーで返す
; 1421 :         return (PMC_STATUS_DIVISION_BY_ZERO);

	mov	eax, -3					; fffffffdH
	jmp	$LN1@PMC_DivRem
$LN7@PMC_DivRem:

; 1422 :     }
; 1423 :     NUMBER_HEADER* nq;
; 1424 :     if (nu->IS_ZERO)

	mov	ecx, DWORD PTR _nu$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	shr	edx, 1
	and	edx, 1
	je	SHORT $LN8@PMC_DivRem

; 1425 :     {
; 1426 :         // x が 0 である場合
; 1427 : 
; 1428 :         // q = 0, r = 0 を返す
; 1429 :         nq = &number_zero;

	mov	DWORD PTR _nq$[ebp], OFFSET _number_zero

; 1430 :         *r = 0;

	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0

; 1431 :     }

	jmp	$LN9@PMC_DivRem
$LN8@PMC_DivRem:

; 1432 :     else
; 1433 :     {
; 1434 :         // u が 0 ではない場合
; 1435 : 
; 1436 :         if (v == 1)

	cmp	DWORD PTR _v$[ebp], 1
	jne	SHORT $LN10@PMC_DivRem
	cmp	DWORD PTR _v$[ebp+4], 0
	jne	SHORT $LN10@PMC_DivRem

; 1437 :         {
; 1438 :             // v が 1 である場合
; 1439 : 
; 1440 :             // q = u, r = 0 を返す
; 1441 :             if ((result = DuplicateNumber(nu, &nq)) != PMC_STATUS_OK)

	lea	ecx, DWORD PTR _nq$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	push	edx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN12@PMC_DivRem

; 1442 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN12@PMC_DivRem:

; 1443 :             *r = 0;

	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0

; 1444 :         }

	jmp	$LN9@PMC_DivRem
$LN10@PMC_DivRem:

; 1445 :         else
; 1446 :         {
; 1447 :             // u > 0 かつ v > 1 である場合
; 1448 : 
; 1449 :             // u と v の商・剰余を計算する
; 1450 :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	ecx, DWORD PTR _nu$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _u_bit_count$23[ebp], edx

; 1451 :             if (sizeof(__UNIT_TYPE_DIV) < sizeof(v))

	mov	eax, 1
	test	eax, eax
	je	$LN13@PMC_DivRem

; 1452 :             {
; 1453 :                 // _UINT64_T が 1 ワードで表現しきれない場合
; 1454 :                 _UINT32_T v_hi;
; 1455 :                 _UINT32_T v_lo = _FROMDWORDTOWORD(v, &v_hi);

	lea	ecx, DWORD PTR _v_hi$22[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	call	__FROMDWORDTOWORD
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _v_lo$21[ebp], eax

; 1456 :                 if (v_hi == 0)

	cmp	DWORD PTR _v_hi$22[ebp], 0
	jne	$LN15@PMC_DivRem

; 1457 :                 {
; 1458 :                     // v の値が 32bit で表現可能な場合
; 1459 :                     __UNIT_TYPE v_bit_count = sizeof(v_lo) * 8 - _LZCNT_ALT_32(v_lo);

	mov	ecx, DWORD PTR _v_lo$21[ebp]
	push	ecx
	call	__LZCNT_ALT_32
	add	esp, 4
	mov	edx, 32					; 00000020H
	sub	edx, eax
	mov	DWORD PTR _v_bit_count$20[ebp], edx

; 1460 :                     if (u_bit_count < v_bit_count)

	mov	eax, DWORD PTR _u_bit_count$23[ebp]
	cmp	eax, DWORD PTR _v_bit_count$20[ebp]
	jae	SHORT $LN17@PMC_DivRem

; 1461 :                     {
; 1462 :                         // 明らかに u < v である場合
; 1463 : 
; 1464 :                         // q = 0, r = u を返す。
; 1465 :                         nq = &number_zero;

	mov	DWORD PTR _nq$[ebp], OFFSET _number_zero

; 1466 :                         *r = nu->BLOCK[0];

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+edx]
	xor	eax, eax
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 1467 :                     }

	jmp	$LN18@PMC_DivRem
$LN17@PMC_DivRem:

; 1468 :                     else
; 1469 :                     {
; 1470 :                         __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

	mov	edx, DWORD PTR _u_bit_count$23[ebp]
	sub	edx, DWORD PTR _v_bit_count$20[ebp]
	add	edx, 33					; 00000021H
	mov	DWORD PTR _q_bit_count$19[ebp], edx

; 1471 :                         __UNIT_TYPE nq_light_check_code;
; 1472 :                         if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nq_light_check_code$18[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_bit_count$19[ebp]
	push	ecx
	lea	edx, DWORD PTR _nq$[ebp]
	push	edx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN19@PMC_DivRem

; 1473 :                             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN19@PMC_DivRem:

; 1474 :                         __UNIT_TYPE_DIV r_buf = 0;

	mov	DWORD PTR _r_buf$17[ebp], 0

; 1475 :                         DivRem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), v_lo, (__UNIT_TYPE_DIV*)nq->BLOCK, &r_buf);

	lea	eax, DWORD PTR _r_buf$17[ebp]
	push	eax
	mov	ecx, DWORD PTR _nq$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR _v_lo$21[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	shl	edx, 2
	shr	edx, 2
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_DivRem_X_1W
	add	esp, 20					; 00000014H

; 1476 :                         if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nq_light_check_code$18[ebp]
	push	edx
	mov	eax, DWORD PTR _nq$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN20@PMC_DivRem

; 1477 :                             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN20@PMC_DivRem:

; 1478 :                         CommitNumber(nq);

	mov	edx, DWORD PTR _nq$[ebp]
	push	edx
	call	_CommitNumber
	add	esp, 4

; 1479 :                         *r = r_buf;

	mov	eax, DWORD PTR _r_buf$17[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx

; 1480 :                         if (nq->IS_ZERO)

	mov	eax, DWORD PTR _nq$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN18@PMC_DivRem

; 1481 :                         {
; 1482 :                             DeallocateNumber(nq);

	mov	edx, DWORD PTR _nq$[ebp]
	push	edx
	call	_DeallocateNumber
	add	esp, 4

; 1483 :                             nq = &number_zero;

	mov	DWORD PTR _nq$[ebp], OFFSET _number_zero
$LN18@PMC_DivRem:

; 1484 :                         }
; 1485 :                     }
; 1486 :                 }

	jmp	$LN16@PMC_DivRem
$LN15@PMC_DivRem:

; 1487 :                 else
; 1488 :                 {
; 1489 :                     // v の値が 32bit では表現できない場合
; 1490 :                     __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v_hi);

	mov	eax, DWORD PTR _v_hi$22[ebp]
	push	eax
	call	__LZCNT_ALT_32
	add	esp, 4
	mov	ecx, 64					; 00000040H
	sub	ecx, eax
	mov	DWORD PTR _v_bit_count$16[ebp], ecx

; 1491 :                     if (u_bit_count < v_bit_count)

	mov	edx, DWORD PTR _u_bit_count$23[ebp]
	cmp	edx, DWORD PTR _v_bit_count$16[ebp]
	jae	$LN22@PMC_DivRem

; 1492 :                     {
; 1493 :                         // 明らかに u < v である場合
; 1494 : 
; 1495 :                         // q = 0, r = u を返す。
; 1496 :                         nq = &number_zero;

	mov	DWORD PTR _nq$[ebp], OFFSET _number_zero

; 1497 :                         if (sizeof(v) == sizeof(__UNIT_TYPE))

	xor	eax, eax
	je	SHORT $LN24@PMC_DivRem

; 1498 :                             *r = nu->BLOCK[0];

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+edx]
	xor	eax, eax
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN25@PMC_DivRem
$LN24@PMC_DivRem:

; 1499 :                         else
; 1500 :                         {
; 1501 :                             __UNIT_TYPE r_lo = nu->BLOCK[0];

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _nu$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [eax+edx]
	mov	DWORD PTR _r_lo$15[ebp], eax

; 1502 :                             __UNIT_TYPE r_hi = nu->UNIT_WORD_COUNT > 1 ? nu->BLOCK[1] : 0;

	mov	ecx, DWORD PTR _nu$[ebp]
	cmp	DWORD PTR [ecx+8], 1
	jbe	SHORT $LN38@PMC_DivRem
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [edx+ecx]
	mov	DWORD PTR tv174[ebp], edx
	jmp	SHORT $LN39@PMC_DivRem
$LN38@PMC_DivRem:
	mov	DWORD PTR tv174[ebp], 0
$LN39@PMC_DivRem:
	mov	eax, DWORD PTR tv174[ebp]
	mov	DWORD PTR _r_hi$14[ebp], eax

; 1503 :                             *r = _FROMWORDTODWORD((_UINT32_T)r_hi, (_UINT32_T)r_lo);

	mov	ecx, DWORD PTR _r_lo$15[ebp]
	push	ecx
	mov	edx, DWORD PTR _r_hi$14[ebp]
	push	edx
	call	__FROMWORDTODWORD
	add	esp, 8
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
$LN25@PMC_DivRem:

; 1504 :                         }
; 1505 :                     }

	jmp	$LN16@PMC_DivRem
$LN22@PMC_DivRem:

; 1506 :                     else
; 1507 :                     {
; 1508 :                         __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

	mov	edx, DWORD PTR _u_bit_count$23[ebp]
	sub	edx, DWORD PTR _v_bit_count$16[ebp]
	add	edx, 33					; 00000021H
	mov	DWORD PTR _q_bit_count$13[ebp], edx

; 1509 :                         __UNIT_TYPE r_bit_count = u_bit_count + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには v_bit_count だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

	mov	eax, DWORD PTR _u_bit_count$23[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _r_bit_count$12[ebp], eax

; 1510 :                         __UNIT_TYPE nq_light_check_code;
; 1511 :                         if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)

	lea	ecx, DWORD PTR _nq_light_check_code$11[ebp]
	push	ecx
	mov	edx, DWORD PTR _q_bit_count$13[ebp]
	push	edx
	lea	eax, DWORD PTR _nq$[ebp]
	push	eax
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN26@PMC_DivRem

; 1512 :                             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN26@PMC_DivRem:

; 1513 :                         __UNIT_TYPE_DIV v_buf[] = { v_lo, v_hi };

	mov	ecx, DWORD PTR _v_lo$21[ebp]
	mov	DWORD PTR _v_buf$10[ebp], ecx
	mov	edx, DWORD PTR _v_hi$22[ebp]
	mov	DWORD PTR _v_buf$10[ebp+4], edx

; 1514 :                         __UNIT_TYPE_DIV work_v_buf[] = { 0, 0 };

	mov	DWORD PTR _work_v_buf$9[ebp], 0
	mov	DWORD PTR _work_v_buf$9[ebp+4], 0

; 1515 :                         __UNIT_TYPE r_buf_code;
; 1516 :                         __UNIT_TYPE r_buf_words;
; 1517 :                         __UNIT_TYPE_DIV* r_buf = (__UNIT_TYPE_DIV*)AllocateBlock(r_bit_count, &r_buf_words, &r_buf_code);

	lea	eax, DWORD PTR _r_buf_code$8[ebp]
	push	eax
	lea	ecx, DWORD PTR _r_buf_words$7[ebp]
	push	ecx
	mov	edx, DWORD PTR _r_bit_count$12[ebp]
	push	edx
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _r_buf$6[ebp], eax

; 1518 :                         if (r_buf == NULL)

	cmp	DWORD PTR _r_buf$6[ebp], 0
	jne	SHORT $LN27@PMC_DivRem

; 1519 :                         {
; 1520 :                             DeallocateNumber(nq);

	mov	eax, DWORD PTR _nq$[ebp]
	push	eax
	call	_DeallocateNumber
	add	esp, 4

; 1521 :                             return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@PMC_DivRem
$LN27@PMC_DivRem:

; 1522 :                         }
; 1523 :                         (*fp_DivRem_X_X)((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), v_buf, sizeof(v_buf) / sizeof(v_buf[0]), work_v_buf, (__UNIT_TYPE_DIV*)nq->BLOCK, r_buf);

	mov	esi, esp
	mov	ecx, DWORD PTR _r_buf$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _nq$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	lea	ecx, DWORD PTR _work_v_buf$9[ebp]
	push	ecx
	push	2
	lea	edx, DWORD PTR _v_buf$10[ebp]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 2
	shr	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	DWORD PTR _fp_DivRem_X_X
	add	esp, 28					; 0000001cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1524 :                         if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _nq_light_check_code$11[ebp]
	push	ecx
	mov	edx, DWORD PTR _nq$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN28@PMC_DivRem

; 1525 :                             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN28@PMC_DivRem:

; 1526 :                         if ((result = CheckBlockLight((__UNIT_TYPE*)r_buf, r_buf_code)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _r_buf_code$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _r_buf$6[ebp]
	push	edx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN29@PMC_DivRem

; 1527 :                             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN29@PMC_DivRem:

; 1528 :                         CommitNumber(nq);

	mov	eax, DWORD PTR _nq$[ebp]
	push	eax
	call	_CommitNumber
	add	esp, 4

; 1529 :                         *r = _FROMWORDTODWORD((_UINT32_T)r_buf[1], (_UINT32_T)r_buf[0]);

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _r_buf$6[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _r_buf$6[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	call	__FROMWORDTODWORD
	add	esp, 8
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx

; 1530 :                         DeallocateBlock((__UNIT_TYPE*)r_buf, r_buf_words);

	mov	edx, DWORD PTR _r_buf_words$7[ebp]
	push	edx
	mov	eax, DWORD PTR _r_buf$6[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 1531 :                         if (nq->IS_ZERO)

	mov	ecx, DWORD PTR _nq$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	shr	edx, 1
	and	edx, 1
	je	SHORT $LN16@PMC_DivRem

; 1532 :                         {
; 1533 :                             DeallocateNumber(nq);

	mov	eax, DWORD PTR _nq$[ebp]
	push	eax
	call	_DeallocateNumber
	add	esp, 4

; 1534 :                             nq = &number_zero;

	mov	DWORD PTR _nq$[ebp], OFFSET _number_zero
$LN16@PMC_DivRem:

; 1535 :                         }
; 1536 :                     }
; 1537 :                 }
; 1538 :             }

	jmp	$LN9@PMC_DivRem
$LN13@PMC_DivRem:

; 1539 :             else
; 1540 :             {
; 1541 :                 // _UINT64_T が 1 ワードで表現できる場合
; 1542 : 
; 1543 :                 // x と y の商・剰余を計算する
; 1544 :                 __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	ecx, DWORD PTR _nu$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _u_bit_count$5[ebp], edx

; 1545 :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);

	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	call	__LZCNT_ALT_UNIT
	add	esp, 4
	mov	ecx, 64					; 00000040H
	sub	ecx, eax
	mov	DWORD PTR _v_bit_count$4[ebp], ecx

; 1546 :                 if (u_bit_count < v_bit_count)

	mov	edx, DWORD PTR _u_bit_count$5[ebp]
	cmp	edx, DWORD PTR _v_bit_count$4[ebp]
	jae	SHORT $LN31@PMC_DivRem

; 1547 :                 {
; 1548 :                     // 明らかに u < v である場合
; 1549 : 
; 1550 :                     // q = 0, r = u を返す。
; 1551 :                     nq = &number_zero;

	mov	DWORD PTR _nq$[ebp], OFFSET _number_zero

; 1552 :                     *r = nu->BLOCK[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax+ecx]
	xor	edx, edx
	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx

; 1553 :                 }

	jmp	$LN9@PMC_DivRem
$LN31@PMC_DivRem:

; 1554 :                 else
; 1555 :                 {
; 1556 :                     __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

	mov	ecx, DWORD PTR _u_bit_count$5[ebp]
	sub	ecx, DWORD PTR _v_bit_count$4[ebp]
	add	ecx, 33					; 00000021H
	mov	DWORD PTR _q_bit_count$3[ebp], ecx

; 1557 :                     __UNIT_TYPE nq_light_check_code;
; 1558 :                     if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)

	lea	edx, DWORD PTR _nq_light_check_code$2[ebp]
	push	edx
	mov	eax, DWORD PTR _q_bit_count$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _nq$[ebp]
	push	ecx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN33@PMC_DivRem

; 1559 :                         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN33@PMC_DivRem:

; 1560 :                     __UNIT_TYPE_DIV r_buf = 0;

	mov	DWORD PTR _r_buf$1[ebp], 0

; 1561 :                     DivRem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV)v, (__UNIT_TYPE_DIV*)nq->BLOCK, &r_buf);

	lea	edx, DWORD PTR _r_buf$1[ebp]
	push	edx
	mov	eax, DWORD PTR _nq$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 2
	shr	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_DivRem_X_1W
	add	esp, 20					; 00000014H

; 1562 :                     if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _nq_light_check_code$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _nq$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN34@PMC_DivRem

; 1563 :                         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_DivRem
$LN34@PMC_DivRem:

; 1564 :                     CommitNumber(nq);

	mov	ecx, DWORD PTR _nq$[ebp]
	push	ecx
	call	_CommitNumber
	add	esp, 4

; 1565 :                     *r = r_buf;

	mov	edx, DWORD PTR _r_buf$1[ebp]
	xor	eax, eax
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 1566 :                     if (nq->IS_ZERO)

	mov	edx, DWORD PTR _nq$[ebp]
	mov	eax, DWORD PTR [edx+24]
	shr	eax, 1
	and	eax, 1
	je	SHORT $LN9@PMC_DivRem

; 1567 :                     {
; 1568 :                         DeallocateNumber(nq);

	mov	ecx, DWORD PTR _nq$[ebp]
	push	ecx
	call	_DeallocateNumber
	add	esp, 4

; 1569 :                         nq = &number_zero;

	mov	DWORD PTR _nq$[ebp], OFFSET _number_zero
$LN9@PMC_DivRem:

; 1570 :                     }
; 1571 :                 }
; 1572 :             }
; 1573 : 
; 1574 :         }
; 1575 :     }
; 1576 :     *q = (PMC_HANDLE_UINT)nq;

	mov	edx, DWORD PTR _q$[ebp]
	mov	eax, DWORD PTR _nq$[ebp]
	mov	DWORD PTR [edx], eax

; 1577 : #ifdef _DEBUG
; 1578 :     if ((result = CheckNumber(nq)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _nq$[ebp]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN36@PMC_DivRem

; 1579 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_DivRem
$LN36@PMC_DivRem:

; 1580 : #endif
; 1581 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_DivRem:

; 1582 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN52@PMC_DivRem
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	3
$LN52@PMC_DivRem:
	DD	11					; 0000000bH
	DD	$LN51@PMC_DivRem
$LN51@PMC_DivRem:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN40@PMC_DivRem
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN41@PMC_DivRem
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN42@PMC_DivRem
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN43@PMC_DivRem
	DD	-100					; ffffff9cH
	DD	4
	DD	$LN44@PMC_DivRem
	DD	-116					; ffffff8cH
	DD	8
	DD	$LN45@PMC_DivRem
	DD	-132					; ffffff7cH
	DD	8
	DD	$LN46@PMC_DivRem
	DD	-144					; ffffff70H
	DD	4
	DD	$LN47@PMC_DivRem
	DD	-156					; ffffff64H
	DD	4
	DD	$LN48@PMC_DivRem
	DD	-184					; ffffff48H
	DD	4
	DD	$LN49@PMC_DivRem
	DD	-196					; ffffff3cH
	DD	4
	DD	$LN50@PMC_DivRem
$LN50@PMC_DivRem:
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN49@PMC_DivRem:
	DB	110					; 0000006eH
	DB	113					; 00000071H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN48@PMC_DivRem:
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN47@PMC_DivRem:
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN46@PMC_DivRem:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN45@PMC_DivRem:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN44@PMC_DivRem:
	DB	110					; 0000006eH
	DB	113					; 00000071H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN43@PMC_DivRem:
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN42@PMC_DivRem:
	DB	110					; 0000006eH
	DB	113					; 00000071H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN41@PMC_DivRem:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	0
$LN40@PMC_DivRem:
	DB	110					; 0000006eH
	DB	113					; 00000071H
	DB	0
_PMC_DivRem_X_L@20 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
_TEXT	SEGMENT
_r_buf$1 = -52						; size = 4
_nq_light_check_code$2 = -40				; size = 4
_q_bit_count$3 = -32					; size = 4
_v_bit_count$4 = -28					; size = 4
_u_bit_count$5 = -24					; size = 4
_nq$ = -16						; size = 4
_result$ = -8						; size = 4
_nu$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_q$ = 16						; size = 4
_r$ = 20						; size = 4
_PMC_DivRem_X_I@16 PROC

; 1145 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __531E8CBE_pmc_divrem@c
	call	@__CheckForDebuggerJustMyCode@4

; 1146 :     if (sizeof(__UNIT_TYPE_DIV) < sizeof(v))

	xor	eax, eax
	je	SHORT $LN2@PMC_DivRem

; 1147 :     {
; 1148 :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 1149 :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	$LN1@PMC_DivRem
$LN2@PMC_DivRem:

; 1150 :     }
; 1151 :     if (u == NULL)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN3@PMC_DivRem

; 1152 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_DivRem
$LN3@PMC_DivRem:

; 1153 :     if (q == NULL)

	cmp	DWORD PTR _q$[ebp], 0
	jne	SHORT $LN4@PMC_DivRem

; 1154 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_DivRem
$LN4@PMC_DivRem:

; 1155 :     if (r == NULL)

	cmp	DWORD PTR _r$[ebp], 0
	jne	SHORT $LN5@PMC_DivRem

; 1156 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_DivRem
$LN5@PMC_DivRem:

; 1157 :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

	mov	ecx, DWORD PTR _u$[ebp]
	mov	DWORD PTR _nu$[ebp], ecx

; 1158 :     PMC_STATUS_CODE result;
; 1159 :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nu$[ebp]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_DivRem

; 1160 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN6@PMC_DivRem:

; 1161 :     if (v == 0)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN7@PMC_DivRem

; 1162 :     {
; 1163 :         // v が 0 である場合
; 1164 : 
; 1165 :         // 0 による除算はエラーで返す
; 1166 :         return (PMC_STATUS_DIVISION_BY_ZERO);

	mov	eax, -3					; fffffffdH
	jmp	$LN1@PMC_DivRem
$LN7@PMC_DivRem:

; 1167 :     }
; 1168 :     NUMBER_HEADER* nq;
; 1169 :     if (nu->IS_ZERO)

	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN8@PMC_DivRem

; 1170 :     {
; 1171 :         // u が 0 である場合
; 1172 : 
; 1173 :         // q = 0, r = 0 を返す
; 1174 :         nq = &number_zero;

	mov	DWORD PTR _nq$[ebp], OFFSET _number_zero

; 1175 :         *r = 0;

	mov	edx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [edx], 0

; 1176 :     }

	jmp	$LN9@PMC_DivRem
$LN8@PMC_DivRem:

; 1177 :     else
; 1178 :     {
; 1179 :         // u が 0 ではない場合
; 1180 : 
; 1181 :         if (v == 1)

	cmp	DWORD PTR _v$[ebp], 1
	jne	SHORT $LN10@PMC_DivRem

; 1182 :         {
; 1183 :             // v が 1 である場合
; 1184 : 
; 1185 :             // q = u, r = 0 を返す
; 1186 :             if ((result = DuplicateNumber(nu, &nq)) != PMC_STATUS_OK)

	lea	eax, DWORD PTR _nq$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nu$[ebp]
	push	ecx
	call	_DuplicateNumber
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN12@PMC_DivRem

; 1187 :                 return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN12@PMC_DivRem:

; 1188 :             *r = 0;

	mov	edx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [edx], 0

; 1189 :         }

	jmp	$LN9@PMC_DivRem
$LN10@PMC_DivRem:

; 1190 :         else
; 1191 :         {
; 1192 :             // u と v がともに 0 ではない場合
; 1193 : 
; 1194 :             // x と y の商・剰余を計算する
; 1195 :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _u_bit_count$5[ebp], ecx

; 1196 :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	call	__LZCNT_ALT_32
	add	esp, 4
	mov	ecx, 32					; 00000020H
	sub	ecx, eax
	mov	DWORD PTR _v_bit_count$4[ebp], ecx

; 1197 :             if (u_bit_count < v_bit_count)

	mov	edx, DWORD PTR _u_bit_count$5[ebp]
	cmp	edx, DWORD PTR _v_bit_count$4[ebp]
	jae	SHORT $LN13@PMC_DivRem

; 1198 :             {
; 1199 :                 // 明らかに u < v である場合
; 1200 : 
; 1201 :                 // q = 0, r = u を返す。
; 1202 :                 nq = &number_zero;

	mov	DWORD PTR _nq$[ebp], OFFSET _number_zero

; 1203 :                 *r = (_UINT32_T)nu->BLOCK[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	edx, DWORD PTR _r$[ebp]
	mov	eax, DWORD PTR [ecx+eax]
	mov	DWORD PTR [edx], eax

; 1204 :             }

	jmp	$LN9@PMC_DivRem
$LN13@PMC_DivRem:

; 1205 :             else
; 1206 :             {
; 1207 :                 __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

	mov	ecx, DWORD PTR _u_bit_count$5[ebp]
	sub	ecx, DWORD PTR _v_bit_count$4[ebp]
	add	ecx, 33					; 00000021H
	mov	DWORD PTR _q_bit_count$3[ebp], ecx

; 1208 :                 __UNIT_TYPE nq_light_check_code;
; 1209 :                 if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)

	lea	edx, DWORD PTR _nq_light_check_code$2[ebp]
	push	edx
	mov	eax, DWORD PTR _q_bit_count$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _nq$[ebp]
	push	ecx
	call	_AllocateNumber
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN15@PMC_DivRem

; 1210 :                     return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN15@PMC_DivRem:

; 1211 :                 __UNIT_TYPE_DIV r_buf = 0;

	mov	DWORD PTR _r_buf$1[ebp], 0

; 1212 :                 DivRem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), v, (__UNIT_TYPE_DIV*)nq->BLOCK, &r_buf);

	lea	edx, DWORD PTR _r_buf$1[ebp]
	push	edx
	mov	eax, DWORD PTR _nq$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, DWORD PTR _nu$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 2
	shr	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _nu$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_DivRem_X_1W
	add	esp, 20					; 00000014H

; 1213 :                 if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _nq_light_check_code$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _nq$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN16@PMC_DivRem

; 1214 :                     return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_DivRem
$LN16@PMC_DivRem:

; 1215 :                 CommitNumber(nq);

	mov	ecx, DWORD PTR _nq$[ebp]
	push	ecx
	call	_CommitNumber
	add	esp, 4

; 1216 :                 *r = (_UINT32_T)r_buf;

	mov	edx, DWORD PTR _r$[ebp]
	mov	eax, DWORD PTR _r_buf$1[ebp]
	mov	DWORD PTR [edx], eax

; 1217 :                 if (nq->IS_ZERO)

	mov	ecx, DWORD PTR _nq$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	shr	edx, 1
	and	edx, 1
	je	SHORT $LN9@PMC_DivRem

; 1218 :                 {
; 1219 :                     DeallocateNumber(nq);

	mov	eax, DWORD PTR _nq$[ebp]
	push	eax
	call	_DeallocateNumber
	add	esp, 4

; 1220 :                     nq = &number_zero;

	mov	DWORD PTR _nq$[ebp], OFFSET _number_zero
$LN9@PMC_DivRem:

; 1221 :                 }
; 1222 :             }
; 1223 :         }
; 1224 :     }
; 1225 :     *q = (PMC_HANDLE_UINT)nq;

	mov	ecx, DWORD PTR _q$[ebp]
	mov	edx, DWORD PTR _nq$[ebp]
	mov	DWORD PTR [ecx], edx

; 1226 : #ifdef _DEBUG
; 1227 :     if ((result = CheckNumber(nq)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _nq$[ebp]
	push	eax
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN18@PMC_DivRem

; 1228 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_DivRem
$LN18@PMC_DivRem:

; 1229 : #endif
; 1230 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_DivRem:

; 1231 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@PMC_DivRem
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN24@PMC_DivRem:
	DD	3
	DD	$LN23@PMC_DivRem
$LN23@PMC_DivRem:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN20@PMC_DivRem
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN21@PMC_DivRem
	DD	-52					; ffffffccH
	DD	4
	DD	$LN22@PMC_DivRem
$LN22@PMC_DivRem:
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN21@PMC_DivRem:
	DB	110					; 0000006eH
	DB	113					; 00000071H
	DB	95					; 0000005fH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN20@PMC_DivRem:
	DB	110					; 0000006eH
	DB	113					; 00000071H
	DB	0
_PMC_DivRem_X_I@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
_TEXT	SEGMENT
_temp_r$1 = -192					; size = 4
_v_bit_count$2 = -184					; size = 4
_u_bit_count$3 = -180					; size = 4
_work_v_buf$4 = -172					; size = 8
_r_buf$5 = -156						; size = 12
_q_buf$6 = -136						; size = 12
_u_buf$7 = -116						; size = 8
_r_buf$8 = -100						; size = 4
_q_buf$9 = -88						; size = 12
_u_buf$10 = -68						; size = 8
_v_bit_count$11 = -56					; size = 4
_u_bit_count$12 = -52					; size = 4
_temp_r$13 = -44					; size = 4
_v_bit_count$14 = -36					; size = 4
_u_bit_count$15 = -32					; size = 4
_u_lo$16 = -28						; size = 4
_u_hi$17 = -20						; size = 4
_result$ = -12						; size = 4
_nv$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_u$ = 8							; size = 8
_v$ = 16						; size = 4
_q$ = 20						; size = 4
_r$ = 24						; size = 4
_PMC_DivRem_L_X@20 PROC

; 1234 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __531E8CBE_pmc_divrem@c
	call	@__CheckForDebuggerJustMyCode@4

; 1235 :     if (sizeof(__UNIT_TYPE_DIV) * 2 < sizeof(u))

	xor	eax, eax
	je	SHORT $LN2@PMC_DivRem

; 1236 :     {
; 1237 :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 1238 :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	$LN1@PMC_DivRem
$LN2@PMC_DivRem:

; 1239 :     }
; 1240 :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_DivRem

; 1241 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_DivRem
$LN3@PMC_DivRem:

; 1242 :     if (q == NULL)

	cmp	DWORD PTR _q$[ebp], 0
	jne	SHORT $LN4@PMC_DivRem

; 1243 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_DivRem
$LN4@PMC_DivRem:

; 1244 :     if (r == NULL)

	cmp	DWORD PTR _r$[ebp], 0
	jne	SHORT $LN5@PMC_DivRem

; 1245 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_DivRem
$LN5@PMC_DivRem:

; 1246 :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	ecx, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], ecx

; 1247 :     PMC_STATUS_CODE result;
; 1248 :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nv$[ebp]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_DivRem

; 1249 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN6@PMC_DivRem:

; 1250 :     if (nv->IS_ZERO)

	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN7@PMC_DivRem

; 1251 :     {
; 1252 :         // v が 0 である場合
; 1253 : 
; 1254 :         // 0 による除算はエラーで返す
; 1255 :         return (PMC_STATUS_DIVISION_BY_ZERO);

	mov	eax, -3					; fffffffdH
	jmp	$LN1@PMC_DivRem
$LN7@PMC_DivRem:

; 1256 :     }
; 1257 :     if (u == 0)

	mov	edx, DWORD PTR _u$[ebp]
	or	edx, DWORD PTR _u$[ebp+4]
	jne	SHORT $LN8@PMC_DivRem

; 1258 :     {
; 1259 :         // x が 0 である場合
; 1260 : 
; 1261 :         // q = 0, r = 0 を返す
; 1262 :         *q = 0;

	mov	eax, DWORD PTR _q$[ebp]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0

; 1263 :         *r = 0;

	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0

; 1264 :     }

	jmp	$LN9@PMC_DivRem
$LN8@PMC_DivRem:

; 1265 :     else
; 1266 :     {
; 1267 :         // u が 0 ではない場合
; 1268 : 
; 1269 :         if (nv->IS_ONE)

	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+24]
	shr	eax, 2
	and	eax, 1
	je	SHORT $LN10@PMC_DivRem

; 1270 :         {
; 1271 :             // v が 1 である場合
; 1272 : 
; 1273 :             // q = u, r = 0 を返す
; 1274 :             *q = u;

	mov	ecx, DWORD PTR _q$[ebp]
	mov	edx, DWORD PTR _u$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _u$[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 1275 :             *r = 0;

	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0

; 1276 :         }

	jmp	$LN9@PMC_DivRem
$LN10@PMC_DivRem:

; 1277 :         else
; 1278 :         {
; 1279 :             // u > 0 かつ v > 1 である場合
; 1280 : 
; 1281 :             // u と v の商・剰余を計算する
; 1282 :             if (sizeof(__UNIT_TYPE_DIV) < sizeof(u))

	mov	edx, 1
	test	edx, edx
	je	$LN12@PMC_DivRem

; 1283 :             {
; 1284 :                 // _UINT64_T が 1 ワードで表現しきれない場合
; 1285 :                 _UINT32_T u_hi;
; 1286 :                 _UINT32_T u_lo = _FROMDWORDTOWORD(u, &u_hi);

	lea	eax, DWORD PTR _u_hi$17[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	__FROMDWORDTOWORD
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _u_lo$16[ebp], eax

; 1287 :                 if (u_hi == 0)

	cmp	DWORD PTR _u_hi$17[ebp], 0
	jne	$LN14@PMC_DivRem

; 1288 :                 {
; 1289 :                     // u の値が 32bit で表現可能な場合
; 1290 :                     __UNIT_TYPE u_bit_count = sizeof(u_lo) * 8 - _LZCNT_ALT_32(u_lo);

	mov	eax, DWORD PTR _u_lo$16[ebp]
	push	eax
	call	__LZCNT_ALT_32
	add	esp, 4
	mov	ecx, 32					; 00000020H
	sub	ecx, eax
	mov	DWORD PTR _u_bit_count$15[ebp], ecx

; 1291 :                     __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _v_bit_count$14[ebp], eax

; 1292 :                     if (u_bit_count < v_bit_count)

	mov	ecx, DWORD PTR _u_bit_count$15[ebp]
	cmp	ecx, DWORD PTR _v_bit_count$14[ebp]
	jae	SHORT $LN16@PMC_DivRem

; 1293 :                     {
; 1294 :                         // 明らかに u < v である場合
; 1295 : 
; 1296 :                         // q = 0, r = u を返す。
; 1297 :                         *q = 0;

	mov	edx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0

; 1298 :                         *r = u_lo;

	mov	eax, DWORD PTR _u_lo$16[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx

; 1299 :                     }

	jmp	SHORT $LN17@PMC_DivRem
$LN16@PMC_DivRem:

; 1300 :                     else
; 1301 :                     {
; 1302 :                         // u のビット数が v のビット数以上である場合
; 1303 : 
; 1304 :                         // u は 32bit で表現できるので、v も 32bit で表現できる。
; 1305 :                         __UNIT_TYPE_DIV temp_r;
; 1306 :                         *q = _DIVREM_UNIT(0, u_lo, (__UNIT_TYPE_DIV)nv->BLOCK[0], &temp_r);

	lea	eax, DWORD PTR _temp_r$13[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+edx]
	push	edx
	mov	eax, DWORD PTR _u_lo$16[ebp]
	push	eax
	push	0
	call	__DIVREM_UNIT
	add	esp, 16					; 00000010H
	xor	ecx, ecx
	mov	edx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx

; 1307 :                         *r = temp_r;

	mov	eax, DWORD PTR _temp_r$13[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx

; 1308 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1309 :                         if (sizeof(r) == sizeof(_UINT64_T))

	xor	eax, eax
	je	SHORT $LN18@PMC_DivRem

; 1310 :                             IncrementDIV64Counter();

	call	_IncrementDIV64Counter
	jmp	SHORT $LN17@PMC_DivRem
$LN18@PMC_DivRem:

; 1311 :                         else
; 1312 :                             IncrementDIV32Counter();

	call	_IncrementDIV32Counter
$LN17@PMC_DivRem:

; 1313 : #endif
; 1314 :                     }
; 1315 :                 }

	jmp	$LN15@PMC_DivRem
$LN14@PMC_DivRem:

; 1316 :                 else
; 1317 :                 {
; 1318 :                     // v の値が 32bit では表現できない場合
; 1319 :                     __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_32(u_hi);

	mov	ecx, DWORD PTR _u_hi$17[ebp]
	push	ecx
	call	__LZCNT_ALT_32
	add	esp, 4
	mov	edx, 64					; 00000040H
	sub	edx, eax
	mov	DWORD PTR _u_bit_count$12[ebp], edx

; 1320 :                     __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _v_bit_count$11[ebp], ecx

; 1321 :                     if (u_bit_count < v_bit_count)

	mov	edx, DWORD PTR _u_bit_count$12[ebp]
	cmp	edx, DWORD PTR _v_bit_count$11[ebp]
	jae	SHORT $LN20@PMC_DivRem

; 1322 :                     {
; 1323 :                         // 明らかに u < v である場合
; 1324 : 
; 1325 :                         // q = 0, r = u を返す。
; 1326 :                         *q = 0;

	mov	eax, DWORD PTR _q$[ebp]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0

; 1327 :                         *r = u;

	mov	ecx, DWORD PTR _r$[ebp]
	mov	edx, DWORD PTR _u$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _u$[ebp+4]
	mov	DWORD PTR [ecx+4], eax

; 1328 :                     }

	jmp	$LN15@PMC_DivRem
$LN20@PMC_DivRem:

; 1329 :                     else
; 1330 :                     {
; 1331 :                         // u のビット長が 33 以上 64 以下であり、かつ、u のビット長が v のビット長以上(v のビット長は多くとも64以下)である場合
; 1332 : 
; 1333 :                         if (nv->UNIT_BIT_COUNT <= sizeof(__UNIT_TYPE_DIV) * 8)

	mov	ecx, DWORD PTR _nv$[ebp]
	cmp	DWORD PTR [ecx+12], 32			; 00000020H
	ja	$LN22@PMC_DivRem

; 1334 :                         {
; 1335 :                             // v が 32bit で表現できる場合
; 1336 : 
; 1337 :                             __UNIT_TYPE_DIV u_buf[] = { u_lo, u_hi };

	mov	edx, DWORD PTR _u_lo$16[ebp]
	mov	DWORD PTR _u_buf$10[ebp], edx
	mov	eax, DWORD PTR _u_hi$17[ebp]
	mov	DWORD PTR _u_buf$10[ebp+4], eax

; 1338 :                             __UNIT_TYPE_DIV q_buf[] = { 0, 0, 0 };

	mov	DWORD PTR _q_buf$9[ebp], 0
	mov	DWORD PTR _q_buf$9[ebp+4], 0
	mov	DWORD PTR _q_buf$9[ebp+8], 0

; 1339 :                             __UNIT_TYPE_DIV r_buf;
; 1340 : 
; 1341 :                             DivRem_X_1W(u_buf, countof(u_buf), (__UNIT_TYPE_DIV)nv->BLOCK[0], q_buf, &r_buf);

	lea	ecx, DWORD PTR _r_buf$8[ebp]
	push	ecx
	lea	edx, DWORD PTR _q_buf$9[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax+ecx]
	push	ecx
	push	2
	lea	edx, DWORD PTR _u_buf$10[ebp]
	push	edx
	call	_DivRem_X_1W
	add	esp, 20					; 00000014H

; 1342 : 
; 1343 :                             *q = _FROMWORDTODWORD(q_buf[1], q_buf[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _q_buf$9[ebp+ecx]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _q_buf$9[ebp+eax]
	push	ecx
	call	__FROMWORDTODWORD
	add	esp, 8
	mov	ecx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx

; 1344 :                             *r = r_buf;

	mov	edx, DWORD PTR _r_buf$8[ebp]
	xor	eax, eax
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 1345 :                         }

	jmp	$LN15@PMC_DivRem
$LN22@PMC_DivRem:

; 1346 :                         else
; 1347 :                         {
; 1348 :                             // v が 32bit では表現できない場合
; 1349 : 
; 1350 :                             // この場合、2 ワード / 2 ワード の除算となるため、_DIVREM_UNIT 単発では計算できない。
; 1351 :                             __UNIT_TYPE_DIV u_buf[] = { u_lo, u_hi };

	mov	edx, DWORD PTR _u_lo$16[ebp]
	mov	DWORD PTR _u_buf$7[ebp], edx
	mov	eax, DWORD PTR _u_hi$17[ebp]
	mov	DWORD PTR _u_buf$7[ebp+4], eax

; 1352 :                             __UNIT_TYPE_DIV q_buf[] = { 0, 0, 0 };// 演算結果を格納するためには u のビット数 - v のビット数 + 1 ビットだけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

	mov	DWORD PTR _q_buf$6[ebp], 0
	mov	DWORD PTR _q_buf$6[ebp+4], 0
	mov	DWORD PTR _q_buf$6[ebp+8], 0

; 1353 :                             __UNIT_TYPE_DIV r_buf[] = { 0, 0, 0 }; // 演算結果を格納するためには v と同じ大きさだけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

	mov	DWORD PTR _r_buf$5[ebp], 0
	mov	DWORD PTR _r_buf$5[ebp+4], 0
	mov	DWORD PTR _r_buf$5[ebp+8], 0

; 1354 :                             __UNIT_TYPE_DIV work_v_buf[] = { 0, 0 };

	mov	DWORD PTR _work_v_buf$4[ebp], 0
	mov	DWORD PTR _work_v_buf$4[ebp+4], 0

; 1355 :                             (*fp_DivRem_X_X)(u_buf, countof(u_buf), (__UNIT_TYPE_DIV*)nv->BLOCK, nv->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), work_v_buf, q_buf, r_buf);

	mov	esi, esp
	lea	ecx, DWORD PTR _r_buf$5[ebp]
	push	ecx
	lea	edx, DWORD PTR _q_buf$6[ebp]
	push	edx
	lea	eax, DWORD PTR _work_v_buf$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	shl	edx, 2
	shr	edx, 2
	push	edx
	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	push	2
	lea	edx, DWORD PTR _u_buf$7[ebp]
	push	edx
	call	DWORD PTR _fp_DivRem_X_X
	add	esp, 28					; 0000001cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1356 :                             *q = _FROMWORDTODWORD((_UINT32_T)q_buf[1], (_UINT32_T)q_buf[0]);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _q_buf$6[ebp+ecx]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _q_buf$6[ebp+eax]
	push	ecx
	call	__FROMWORDTODWORD
	add	esp, 8
	mov	ecx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx

; 1357 :                             *r = _FROMWORDTODWORD((_UINT32_T)r_buf[1], (_UINT32_T)r_buf[0]);

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _r_buf$5[ebp+eax]
	push	ecx
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _r_buf$5[ebp+edx]
	push	eax
	call	__FROMWORDTODWORD
	add	esp, 8
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
$LN15@PMC_DivRem:

; 1358 :                         }
; 1359 :                     }
; 1360 :                 }
; 1361 :             }

	jmp	$LN9@PMC_DivRem
$LN12@PMC_DivRem:

; 1362 :             else
; 1363 :             {
; 1364 :                 // _UINT64_T が 1 ワードで表現できる場合
; 1365 : 
; 1366 :                 // x と y の商・剰余を計算する
; 1367 :                 __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)u);

	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	call	__LZCNT_ALT_UNIT
	add	esp, 4
	mov	ecx, 64					; 00000040H
	sub	ecx, eax
	mov	DWORD PTR _u_bit_count$3[ebp], ecx

; 1368 :                 __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _v_bit_count$2[ebp], eax

; 1369 :                 if (u_bit_count < v_bit_count)

	mov	ecx, DWORD PTR _u_bit_count$3[ebp]
	cmp	ecx, DWORD PTR _v_bit_count$2[ebp]
	jae	SHORT $LN24@PMC_DivRem

; 1370 :                 {
; 1371 :                     // 明らかに u < v である場合
; 1372 : 
; 1373 :                     // q = 0, r = u を返す。
; 1374 :                     *q = 0;

	mov	edx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [edx], 0
	mov	DWORD PTR [edx+4], 0

; 1375 :                     *r = u;

	mov	eax, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _u$[ebp+4]
	mov	DWORD PTR [eax+4], edx

; 1376 :                 }

	jmp	SHORT $LN9@PMC_DivRem
$LN24@PMC_DivRem:

; 1377 :                 else
; 1378 :                 {
; 1379 :                     // u のビット数が v のビット数以上である場合
; 1380 : 
; 1381 :                     // u は 1 ワードで表現できるので、v も 1 ワードで表現できる。
; 1382 :                     __UNIT_TYPE_DIV temp_r;
; 1383 :                     *q = _DIVREM_UNIT(0, (__UNIT_TYPE_DIV)u, (__UNIT_TYPE_DIV)nv->BLOCK[0], &temp_r);

	lea	eax, DWORD PTR _temp_r$1[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+edx]
	push	edx
	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	push	0
	call	__DIVREM_UNIT
	add	esp, 16					; 00000010H
	xor	ecx, ecx
	mov	edx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx

; 1384 :                     *r = temp_r;

	mov	eax, DWORD PTR _temp_r$1[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx

; 1385 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1386 :                     if (sizeof(r) == sizeof(_UINT64_T))

	xor	eax, eax
	je	SHORT $LN26@PMC_DivRem

; 1387 :                         IncrementDIV64Counter();

	call	_IncrementDIV64Counter
	jmp	SHORT $LN9@PMC_DivRem
$LN26@PMC_DivRem:

; 1388 :                     else
; 1389 :                         IncrementDIV32Counter();

	call	_IncrementDIV32Counter
$LN9@PMC_DivRem:

; 1390 : #endif
; 1391 :                 }
; 1392 :             }
; 1393 : 
; 1394 :         }
; 1395 :     }
; 1396 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_DivRem:

; 1397 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN40@PMC_DivRem
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	2
$LN40@PMC_DivRem:
	DD	10					; 0000000aH
	DD	$LN39@PMC_DivRem
$LN39@PMC_DivRem:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN29@PMC_DivRem
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN30@PMC_DivRem
	DD	-68					; ffffffbcH
	DD	8
	DD	$LN31@PMC_DivRem
	DD	-88					; ffffffa8H
	DD	12					; 0000000cH
	DD	$LN32@PMC_DivRem
	DD	-100					; ffffff9cH
	DD	4
	DD	$LN33@PMC_DivRem
	DD	-116					; ffffff8cH
	DD	8
	DD	$LN34@PMC_DivRem
	DD	-136					; ffffff78H
	DD	12					; 0000000cH
	DD	$LN35@PMC_DivRem
	DD	-156					; ffffff64H
	DD	12					; 0000000cH
	DD	$LN36@PMC_DivRem
	DD	-172					; ffffff54H
	DD	8
	DD	$LN37@PMC_DivRem
	DD	-192					; ffffff40H
	DD	4
	DD	$LN38@PMC_DivRem
$LN38@PMC_DivRem:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	0
$LN37@PMC_DivRem:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN36@PMC_DivRem:
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN35@PMC_DivRem:
	DB	113					; 00000071H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN34@PMC_DivRem:
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN33@PMC_DivRem:
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN32@PMC_DivRem:
	DB	113					; 00000071H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN31@PMC_DivRem:
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN30@PMC_DivRem:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	0
$LN29@PMC_DivRem:
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	0
_PMC_DivRem_L_X@20 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
_TEXT	SEGMENT
_temp_r$1 = -24						; size = 4
_v_bit_count$2 = -16					; size = 4
_u_bit_count$3 = -12					; size = 4
_result$ = -8						; size = 4
_nv$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_q$ = 16						; size = 4
_r$ = 20						; size = 4
_PMC_DivRem_I_X@16 PROC

; 1066 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __531E8CBE_pmc_divrem@c
	call	@__CheckForDebuggerJustMyCode@4

; 1067 :     if (sizeof(__UNIT_TYPE_DIV) < sizeof(u))

	xor	eax, eax
	je	SHORT $LN2@PMC_DivRem

; 1068 :     {
; 1069 :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 1070 :         return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffff00H
	jmp	$LN1@PMC_DivRem
$LN2@PMC_DivRem:

; 1071 :     }
; 1072 :     if (v == NULL)

	cmp	DWORD PTR _v$[ebp], 0
	jne	SHORT $LN3@PMC_DivRem

; 1073 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_DivRem
$LN3@PMC_DivRem:

; 1074 :     if (q == NULL)

	cmp	DWORD PTR _q$[ebp], 0
	jne	SHORT $LN4@PMC_DivRem

; 1075 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_DivRem
$LN4@PMC_DivRem:

; 1076 :     if (r == NULL)

	cmp	DWORD PTR _r$[ebp], 0
	jne	SHORT $LN5@PMC_DivRem

; 1077 :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_DivRem
$LN5@PMC_DivRem:

; 1078 :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

	mov	ecx, DWORD PTR _v$[ebp]
	mov	DWORD PTR _nv$[ebp], ecx

; 1079 :     PMC_STATUS_CODE result;
; 1080 :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _nv$[ebp]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN6@PMC_DivRem

; 1081 :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_DivRem
$LN6@PMC_DivRem:

; 1082 :     if (nv->IS_ZERO)

	mov	eax, DWORD PTR _nv$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN7@PMC_DivRem

; 1083 :     {
; 1084 :         // v が 0 である場合
; 1085 : 
; 1086 :         // 0 による除算はエラーで返す
; 1087 :         return (PMC_STATUS_DIVISION_BY_ZERO);

	mov	eax, -3					; fffffffdH
	jmp	$LN1@PMC_DivRem
$LN7@PMC_DivRem:

; 1088 :     }
; 1089 :     if (u == 0)

	cmp	DWORD PTR _u$[ebp], 0
	jne	SHORT $LN8@PMC_DivRem

; 1090 :     {
; 1091 :         // u が 0 である場合
; 1092 : 
; 1093 :         // q = 0, r = 0 を返す
; 1094 :         *q = 0;

	mov	edx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [edx], 0

; 1095 :         *r = 0;

	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR [eax], 0

; 1096 :     }

	jmp	$LN9@PMC_DivRem
$LN8@PMC_DivRem:

; 1097 :     else
; 1098 :     {
; 1099 :         // u が 0 ではない場合
; 1100 : 
; 1101 :         if (nv->IS_ONE)

	mov	ecx, DWORD PTR _nv$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	shr	edx, 2
	and	edx, 1
	je	SHORT $LN10@PMC_DivRem

; 1102 :         {
; 1103 :             // v が 1 である場合
; 1104 : 
; 1105 :             // q = u, r = 0 を返す
; 1106 :             *q = u;

	mov	eax, DWORD PTR _q$[ebp]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	DWORD PTR [eax], ecx

; 1107 :             *r = 0;

	mov	edx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [edx], 0

; 1108 :         }

	jmp	SHORT $LN9@PMC_DivRem
$LN10@PMC_DivRem:

; 1109 :         else
; 1110 :         {
; 1111 :             // u と v がともに 0 ではない場合
; 1112 : 
; 1113 :             // x と y の商・剰余を計算する
; 1114 :             __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_32(u);

	mov	eax, DWORD PTR _u$[ebp]
	push	eax
	call	__LZCNT_ALT_32
	add	esp, 4
	mov	ecx, 32					; 00000020H
	sub	ecx, eax
	mov	DWORD PTR _u_bit_count$3[ebp], ecx

; 1115 :             __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _v_bit_count$2[ebp], eax

; 1116 :             if (u_bit_count < v_bit_count)

	mov	ecx, DWORD PTR _u_bit_count$3[ebp]
	cmp	ecx, DWORD PTR _v_bit_count$2[ebp]
	jae	SHORT $LN12@PMC_DivRem

; 1117 :             {
; 1118 :                 // 明らかに u < v である場合
; 1119 : 
; 1120 :                 // q = 0, r = u を返す。
; 1121 :                 *q = 0;

	mov	edx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [edx], 0

; 1122 :                 *r = u;

	mov	eax, DWORD PTR _r$[ebp]
	mov	ecx, DWORD PTR _u$[ebp]
	mov	DWORD PTR [eax], ecx

; 1123 :             }

	jmp	SHORT $LN9@PMC_DivRem
$LN12@PMC_DivRem:

; 1124 :             else
; 1125 :             {
; 1126 :                 // u のビット数が v のビット数以上である場合
; 1127 :                 
; 1128 :                 // u は 1 ワードで表現できるので、v も 1 ワードで表現できる。
; 1129 :                 __UNIT_TYPE_DIV temp_r;
; 1130 :                 *q = _DIVREM_UNIT(0, u, (__UNIT_TYPE_DIV)nv->BLOCK[0], &temp_r);

	lea	edx, DWORD PTR _temp_r$1[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _nv$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax+ecx]
	push	ecx
	mov	edx, DWORD PTR _u$[ebp]
	push	edx
	push	0
	call	__DIVREM_UNIT
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _q$[ebp]
	mov	DWORD PTR [ecx], eax

; 1131 :                 *r = temp_r;

	mov	edx, DWORD PTR _r$[ebp]
	mov	eax, DWORD PTR _temp_r$1[ebp]
	mov	DWORD PTR [edx], eax

; 1132 : #ifdef ENABLED_PERFORMANCE_COUNTER
; 1133 :                 if (sizeof(r) == sizeof(_UINT64_T))

	xor	ecx, ecx
	je	SHORT $LN14@PMC_DivRem

; 1134 :                     IncrementDIV64Counter();

	call	_IncrementDIV64Counter
	jmp	SHORT $LN9@PMC_DivRem
$LN14@PMC_DivRem:

; 1135 :                 else
; 1136 :                     IncrementDIV32Counter();

	call	_IncrementDIV32Counter
$LN9@PMC_DivRem:

; 1137 : #endif
; 1138 :             }
; 1139 :         }
; 1140 :     }
; 1141 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_DivRem:

; 1142 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@PMC_DivRem
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN19@PMC_DivRem:
	DD	1
	DD	$LN18@PMC_DivRem
$LN18@PMC_DivRem:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN17@PMC_DivRem
$LN17@PMC_DivRem:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	0
_PMC_DivRem_I_X@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
_TEXT	SEGMENT
tv72 = -4						; size = 4
_feature$ = 8						; size = 4
_Initialize_DivRem PROC

; 1738 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __531E8CBE_pmc_divrem@c
	call	@__CheckForDebuggerJustMyCode@4

; 1739 :     fp_DivRem_X_X = feature->PROCESSOR_FEATURE_ADX && feature->PROCESSOR_FEATURE_BMI2 ? DivRem_X_X_using_ADX_MULX : DivRem_X_X_using_ADC_MUL;

	mov	eax, DWORD PTR _feature$[ebp]
	mov	ecx, DWORD PTR [eax]
	shr	ecx, 1
	and	ecx, 1
	je	SHORT $LN3@Initialize
	mov	edx, DWORD PTR _feature$[ebp]
	mov	eax, DWORD PTR [edx]
	shr	eax, 3
	and	eax, 1
	je	SHORT $LN3@Initialize
	mov	DWORD PTR tv72[ebp], OFFSET _DivRem_X_X_using_ADX_MULX
	jmp	SHORT $LN4@Initialize
$LN3@Initialize:
	mov	DWORD PTR tv72[ebp], OFFSET _DivRem_X_X_using_ADC_MUL
$LN4@Initialize:
	mov	ecx, DWORD PTR tv72[ebp]
	mov	DWORD PTR _fp_DivRem_X_X, ecx

; 1740 :     return (PMC_STATUS_OK);

	xor	eax, eax

; 1741 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_Initialize_DivRem ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
_TEXT	SEGMENT
_r$1 = -40						; size = 4
_q$2 = -32						; size = 4
_r$3 = -24						; size = 4
_v_count_2$ = -16					; size = 4
_v_buf_2$ = -12						; size = 4
_u_count_2$ = -8					; size = 4
_u_buf_2$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_count$ = 12						; size = 4
_v_buf$ = 16						; size = 4
_v_count$ = 20						; size = 4
_work_v_buf$ = 24					; size = 4
_q_buf$ = 28						; size = 4
_r_buf$ = 32						; size = 4
_DivRem_X_X PROC

; 39   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __531E8CBE_pmc_divrem@c
	call	@__CheckForDebuggerJustMyCode@4

; 40   :     __UNIT_TYPE_DIV* u_buf_2 = (__UNIT_TYPE_DIV*)u_buf;

	mov	eax, DWORD PTR _u_buf$[ebp]
	mov	DWORD PTR _u_buf_2$[ebp], eax

; 41   :     __UNIT_TYPE u_count_2 = u_count * (sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV));

	mov	ecx, DWORD PTR _u_count$[ebp]
	mov	DWORD PTR _u_count_2$[ebp], ecx

; 42   :     __UNIT_TYPE_DIV* v_buf_2 = (__UNIT_TYPE_DIV*)v_buf;

	mov	edx, DWORD PTR _v_buf$[ebp]
	mov	DWORD PTR _v_buf_2$[ebp], edx

; 43   :     __UNIT_TYPE v_count_2 = v_count * (sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV));

	mov	eax, DWORD PTR _v_count$[ebp]
	mov	DWORD PTR _v_count_2$[ebp], eax

; 44   :     if (sizeof(__UNIT_TYPE) != sizeof(__UNIT_TYPE_DIV))

	xor	ecx, ecx
	je	SHORT $LN2@DivRem_X_X

; 45   :     {
; 46   :         if (u_buf_2[u_count_2 - 1] == 0)

	mov	edx, DWORD PTR _u_count_2$[ebp]
	mov	eax, DWORD PTR _u_buf_2$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], 0
	jne	SHORT $LN3@DivRem_X_X

; 47   :             --u_count_2;

	mov	ecx, DWORD PTR _u_count_2$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _u_count_2$[ebp], ecx
$LN3@DivRem_X_X:

; 48   :         if (v_buf_2[v_count_2 - 1] == 0)

	mov	edx, DWORD PTR _v_count_2$[ebp]
	mov	eax, DWORD PTR _v_buf_2$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], 0
	jne	SHORT $LN2@DivRem_X_X

; 49   :             --v_count_2;

	mov	ecx, DWORD PTR _v_count_2$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _v_count_2$[ebp], ecx
$LN2@DivRem_X_X:

; 50   :     }
; 51   :     if (v_count_2 == 1)

	cmp	DWORD PTR _v_count_2$[ebp], 1
	jne	$LN5@DivRem_X_X

; 52   :     {
; 53   :         if (u_count_2 == 1)

	cmp	DWORD PTR _u_count_2$[ebp], 1
	jne	SHORT $LN7@DivRem_X_X

; 54   :         {
; 55   :             __UNIT_TYPE_DIV r;
; 56   :             __UNIT_TYPE_DIV q = _DIVREM_UNIT(0, u_buf_2[0], v_buf_2[0], &r);

	lea	edx, DWORD PTR _r$3[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _v_buf_2$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _u_buf_2$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	push	0
	call	__DIVREM_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _q$2[ebp], eax

; 57   :             q_buf[0] = q;

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _q_buf$[ebp]
	mov	edx, DWORD PTR _q$2[ebp]
	mov	DWORD PTR [ecx+eax], edx

; 58   :             r_buf[0] = r;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _r_buf$[ebp]
	mov	eax, DWORD PTR _r$3[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 59   : #ifdef ENABLED_PERFORMANCE_COUNTER
; 60   :             if (sizeof(r) == sizeof(_UINT64_T))

	xor	ecx, ecx
	je	SHORT $LN9@DivRem_X_X

; 61   :                 IncrementDIV64Counter();

	call	_IncrementDIV64Counter
	jmp	SHORT $LN10@DivRem_X_X
$LN9@DivRem_X_X:

; 62   :             else
; 63   :                 IncrementDIV32Counter();

	call	_IncrementDIV32Counter
$LN10@DivRem_X_X:

; 64   : #endif
; 65   :         }

	jmp	SHORT $LN8@DivRem_X_X
$LN7@DivRem_X_X:

; 66   :         else
; 67   :         {
; 68   :             __UNIT_TYPE_DIV r;
; 69   :             DivRem_X_1W(u_buf_2, u_count_2, v_buf_2[0], (__UNIT_TYPE_DIV*)q_buf, &r);

	lea	edx, DWORD PTR _r$1[ebp]
	push	edx
	mov	eax, DWORD PTR _q_buf$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _v_buf_2$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _u_count_2$[ebp]
	push	edx
	mov	eax, DWORD PTR _u_buf_2$[ebp]
	push	eax
	call	_DivRem_X_1W
	add	esp, 20					; 00000014H

; 70   :             r_buf[0] = r;

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _r_buf$[ebp]
	mov	ecx, DWORD PTR _r$1[ebp]
	mov	DWORD PTR [eax+edx], ecx
$LN8@DivRem_X_X:

; 71   :         }
; 72   :     }

	jmp	SHORT $LN1@DivRem_X_X
$LN5@DivRem_X_X:

; 73   :     else
; 74   :     {
; 75   :         if (u_count_2 < v_count_2)

	mov	edx, DWORD PTR _u_count_2$[ebp]
	cmp	edx, DWORD PTR _v_count_2$[ebp]
	jae	SHORT $LN11@DivRem_X_X

; 76   :         {
; 77   :             q_buf[0] = 0;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _q_buf$[ebp]
	mov	DWORD PTR [edx+ecx], 0

; 78   :             _COPY_MEMORY_UNIT(r_buf, u_buf, u_count);

	mov	eax, DWORD PTR _u_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _r_buf$[ebp]
	push	edx
	call	__COPY_MEMORY_UNIT
	add	esp, 12					; 0000000cH

; 79   :         }

	jmp	SHORT $LN1@DivRem_X_X
$LN11@DivRem_X_X:

; 80   :         else
; 81   :             (*fp_DivRem_X_X)(u_buf_2, u_count_2, v_buf_2, v_count_2, (__UNIT_TYPE_DIV*)work_v_buf, (__UNIT_TYPE_DIV*)q_buf, (__UNIT_TYPE_DIV*)r_buf);

	mov	esi, esp
	mov	eax, DWORD PTR _r_buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_v_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _v_count_2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_buf_2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_count_2$[ebp]
	push	edx
	mov	eax, DWORD PTR _u_buf_2$[ebp]
	push	eax
	call	DWORD PTR _fp_DivRem_X_X
	add	esp, 28					; 0000001cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@DivRem_X_X:

; 82   :     }
; 83   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@DivRem_X_X
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN17@DivRem_X_X:
	DD	2
	DD	$LN16@DivRem_X_X
$LN16@DivRem_X_X:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN14@DivRem_X_X
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN15@DivRem_X_X
$LN15@DivRem_X_X:
	DB	114					; 00000072H
	DB	0
$LN14@DivRem_X_X:
	DB	114					; 00000072H
	DB	0
_DivRem_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
_TEXT	SEGMENT
_count$ = -20						; size = 4
_r$ = -16						; size = 4
_u_count$ = -12						; size = 4
_qp$ = -8						; size = 4
_up$ = -4						; size = 4
_u_buf$ = 8						; size = 4
_u_buf_len$ = 12					; size = 4
_v$ = 16						; size = 4
_q_buf$ = 20						; size = 4
_r_buf$ = 24						; size = 4
_DivRem_X_1W PROC

; 86   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __531E8CBE_pmc_divrem@c
	call	@__CheckForDebuggerJustMyCode@4

; 87   :     // u の最上位ワードは 0 でありうることに注意すること。
; 88   :     __UNIT_TYPE_DIV* up = u_buf + u_buf_len - 1;

	mov	eax, DWORD PTR _u_buf_len$[ebp]
	mov	ecx, DWORD PTR _u_buf$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4-4]
	mov	DWORD PTR _up$[ebp], edx

; 89   :     __UNIT_TYPE_DIV* qp = q_buf + u_buf_len - 1;

	mov	eax, DWORD PTR _u_buf_len$[ebp]
	mov	ecx, DWORD PTR _q_buf$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4-4]
	mov	DWORD PTR _qp$[ebp], edx

; 90   :     __UNIT_TYPE u_count = u_buf_len;

	mov	eax, DWORD PTR _u_buf_len$[ebp]
	mov	DWORD PTR _u_count$[ebp], eax

; 91   :     if (sizeof(__UNIT_TYPE) != sizeof(__UNIT_TYPE_DIV))

	xor	ecx, ecx
	je	SHORT $LN6@DivRem_X_1
$LN2@DivRem_X_1:

; 92   :     {
; 93   :         while (*up == 0)

	mov	edx, DWORD PTR _up$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN6@DivRem_X_1

; 94   :         {
; 95   :             --up;

	mov	eax, DWORD PTR _up$[ebp]
	sub	eax, 4
	mov	DWORD PTR _up$[ebp], eax

; 96   :             --qp;

	mov	ecx, DWORD PTR _qp$[ebp]
	sub	ecx, 4
	mov	DWORD PTR _qp$[ebp], ecx

; 97   :             --u_count;

	mov	edx, DWORD PTR _u_count$[ebp]
	sub	edx, 1
	mov	DWORD PTR _u_count$[ebp], edx

; 98   :         }

	jmp	SHORT $LN2@DivRem_X_1
$LN6@DivRem_X_1:

; 99   :     }
; 100  :     __UNIT_TYPE_DIV r = 0;

	mov	DWORD PTR _r$[ebp], 0

; 101  :     __UNIT_TYPE count = u_count >> 5;

	mov	eax, DWORD PTR _u_count$[ebp]
	shr	eax, 5
	mov	DWORD PTR _count$[ebp], eax
$LN4@DivRem_X_1:

; 102  :     while (count != 0)

	cmp	DWORD PTR _count$[ebp], 0
	je	$LN5@DivRem_X_1

; 103  :     {
; 104  :         r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &qp[-0]);

	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _qp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _up$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 105  :         r = _DIVREM_SINGLE_UNIT(r, up[-1], v, &qp[-1]);

	mov	eax, 4
	imul	ecx, eax, -1
	add	ecx, DWORD PTR _qp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, -1
	mov	edx, DWORD PTR _up$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 106  :         r = _DIVREM_SINGLE_UNIT(r, up[-2], v, &qp[-2]);

	mov	edx, 4
	imul	eax, edx, -2
	add	eax, DWORD PTR _qp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, -2
	mov	ecx, DWORD PTR _up$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 107  :         r = _DIVREM_SINGLE_UNIT(r, up[-3], v, &qp[-3]);

	mov	ecx, 4
	imul	edx, ecx, -3
	add	edx, DWORD PTR _qp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, -3
	mov	eax, DWORD PTR _up$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 108  :         r = _DIVREM_SINGLE_UNIT(r, up[-4], v, &qp[-4]);

	mov	eax, 4
	imul	ecx, eax, -4
	add	ecx, DWORD PTR _qp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, -4
	mov	edx, DWORD PTR _up$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 109  :         r = _DIVREM_SINGLE_UNIT(r, up[-5], v, &qp[-5]);

	mov	edx, 4
	imul	eax, edx, -5
	add	eax, DWORD PTR _qp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, -5
	mov	ecx, DWORD PTR _up$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 110  :         r = _DIVREM_SINGLE_UNIT(r, up[-6], v, &qp[-6]);

	mov	ecx, 4
	imul	edx, ecx, -6
	add	edx, DWORD PTR _qp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, -6
	mov	eax, DWORD PTR _up$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 111  :         r = _DIVREM_SINGLE_UNIT(r, up[-7], v, &qp[-7]);

	mov	eax, 4
	imul	ecx, eax, -7
	add	ecx, DWORD PTR _qp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, -7
	mov	edx, DWORD PTR _up$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 112  :         r = _DIVREM_SINGLE_UNIT(r, up[-8], v, &qp[-8]);

	mov	edx, 4
	imul	eax, edx, -8
	add	eax, DWORD PTR _qp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, -8
	mov	ecx, DWORD PTR _up$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 113  :         r = _DIVREM_SINGLE_UNIT(r, up[-9], v, &qp[-9]);

	mov	ecx, 4
	imul	edx, ecx, -9
	add	edx, DWORD PTR _qp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, -9
	mov	eax, DWORD PTR _up$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 114  :         r = _DIVREM_SINGLE_UNIT(r, up[-10], v, &qp[-10]);

	mov	eax, 4
	imul	ecx, eax, -10
	add	ecx, DWORD PTR _qp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, -10
	mov	edx, DWORD PTR _up$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 115  :         r = _DIVREM_SINGLE_UNIT(r, up[-11], v, &qp[-11]);

	mov	edx, 4
	imul	eax, edx, -11
	add	eax, DWORD PTR _qp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, -11
	mov	ecx, DWORD PTR _up$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 116  :         r = _DIVREM_SINGLE_UNIT(r, up[-12], v, &qp[-12]);

	mov	ecx, 4
	imul	edx, ecx, -12
	add	edx, DWORD PTR _qp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, -12
	mov	eax, DWORD PTR _up$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 117  :         r = _DIVREM_SINGLE_UNIT(r, up[-13], v, &qp[-13]);

	mov	eax, 4
	imul	ecx, eax, -13
	add	ecx, DWORD PTR _qp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, -13
	mov	edx, DWORD PTR _up$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 118  :         r = _DIVREM_SINGLE_UNIT(r, up[-14], v, &qp[-14]);

	mov	edx, 4
	imul	eax, edx, -14
	add	eax, DWORD PTR _qp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, -14
	mov	ecx, DWORD PTR _up$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 119  :         r = _DIVREM_SINGLE_UNIT(r, up[-15], v, &qp[-15]);

	mov	ecx, 4
	imul	edx, ecx, -15
	add	edx, DWORD PTR _qp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, -15
	mov	eax, DWORD PTR _up$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 120  :         r = _DIVREM_SINGLE_UNIT(r, up[-16], v, &qp[-16]);

	mov	eax, 4
	imul	ecx, eax, -16
	add	ecx, DWORD PTR _qp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, -16
	mov	edx, DWORD PTR _up$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 121  :         r = _DIVREM_SINGLE_UNIT(r, up[-17], v, &qp[-17]);

	mov	edx, 4
	imul	eax, edx, -17
	add	eax, DWORD PTR _qp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, -17
	mov	ecx, DWORD PTR _up$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 122  :         r = _DIVREM_SINGLE_UNIT(r, up[-18], v, &qp[-18]);

	mov	ecx, 4
	imul	edx, ecx, -18
	add	edx, DWORD PTR _qp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, -18
	mov	eax, DWORD PTR _up$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 123  :         r = _DIVREM_SINGLE_UNIT(r, up[-19], v, &qp[-19]);

	mov	eax, 4
	imul	ecx, eax, -19
	add	ecx, DWORD PTR _qp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, -19
	mov	edx, DWORD PTR _up$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 124  :         r = _DIVREM_SINGLE_UNIT(r, up[-20], v, &qp[-20]);

	mov	edx, 4
	imul	eax, edx, -20
	add	eax, DWORD PTR _qp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, -20
	mov	ecx, DWORD PTR _up$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 125  :         r = _DIVREM_SINGLE_UNIT(r, up[-21], v, &qp[-21]);

	mov	ecx, 4
	imul	edx, ecx, -21
	add	edx, DWORD PTR _qp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, -21
	mov	eax, DWORD PTR _up$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 126  :         r = _DIVREM_SINGLE_UNIT(r, up[-22], v, &qp[-22]);

	mov	eax, 4
	imul	ecx, eax, -22
	add	ecx, DWORD PTR _qp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, -22
	mov	edx, DWORD PTR _up$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 127  :         r = _DIVREM_SINGLE_UNIT(r, up[-23], v, &qp[-23]);

	mov	edx, 4
	imul	eax, edx, -23
	add	eax, DWORD PTR _qp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, -23
	mov	ecx, DWORD PTR _up$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 128  :         r = _DIVREM_SINGLE_UNIT(r, up[-24], v, &qp[-24]);

	mov	ecx, 4
	imul	edx, ecx, -24
	add	edx, DWORD PTR _qp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, -24
	mov	eax, DWORD PTR _up$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 129  :         r = _DIVREM_SINGLE_UNIT(r, up[-25], v, &qp[-25]);

	mov	eax, 4
	imul	ecx, eax, -25
	add	ecx, DWORD PTR _qp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, -25
	mov	edx, DWORD PTR _up$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 130  :         r = _DIVREM_SINGLE_UNIT(r, up[-26], v, &qp[-26]);

	mov	edx, 4
	imul	eax, edx, -26
	add	eax, DWORD PTR _qp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, -26
	mov	ecx, DWORD PTR _up$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 131  :         r = _DIVREM_SINGLE_UNIT(r, up[-27], v, &qp[-27]);

	mov	ecx, 4
	imul	edx, ecx, -27
	add	edx, DWORD PTR _qp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, -27
	mov	eax, DWORD PTR _up$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 132  :         r = _DIVREM_SINGLE_UNIT(r, up[-28], v, &qp[-28]);

	mov	eax, 4
	imul	ecx, eax, -28
	add	ecx, DWORD PTR _qp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, -28
	mov	edx, DWORD PTR _up$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 133  :         r = _DIVREM_SINGLE_UNIT(r, up[-29], v, &qp[-29]);

	mov	edx, 4
	imul	eax, edx, -29
	add	eax, DWORD PTR _qp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, -29
	mov	ecx, DWORD PTR _up$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 134  :         r = _DIVREM_SINGLE_UNIT(r, up[-30], v, &qp[-30]);

	mov	ecx, 4
	imul	edx, ecx, -30
	add	edx, DWORD PTR _qp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, -30
	mov	eax, DWORD PTR _up$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 135  :         r = _DIVREM_SINGLE_UNIT(r, up[-31], v, &qp[-31]);

	mov	eax, 4
	imul	ecx, eax, -31
	add	ecx, DWORD PTR _qp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, -31
	mov	edx, DWORD PTR _up$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 136  :         up -= 32;

	mov	edx, DWORD PTR _up$[ebp]
	sub	edx, 128				; 00000080H
	mov	DWORD PTR _up$[ebp], edx

; 137  :         qp -= 32;

	mov	eax, DWORD PTR _qp$[ebp]
	sub	eax, 128				; 00000080H
	mov	DWORD PTR _qp$[ebp], eax

; 138  :         --count;

	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx

; 139  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 140  :         if (sizeof(r) == sizeof(_UINT64_T))

	xor	edx, edx
	je	SHORT $LN7@DivRem_X_1

; 141  :             AddToDIV64Counter(32);

	push	32					; 00000020H
	call	_AddToDIV64Counter
	add	esp, 4
	jmp	SHORT $LN8@DivRem_X_1
$LN7@DivRem_X_1:

; 142  :         else
; 143  :             AddToDIV32Counter(32);

	push	32					; 00000020H
	call	_AddToDIV32Counter
	add	esp, 4
$LN8@DivRem_X_1:

; 144  : #endif
; 145  :     }

	jmp	$LN4@DivRem_X_1
$LN5@DivRem_X_1:

; 146  : 
; 147  :     if (u_count & 0x10)

	mov	eax, DWORD PTR _u_count$[ebp]
	and	eax, 16					; 00000010H
	je	$LN9@DivRem_X_1

; 148  :     {
; 149  :         r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &qp[-0]);

	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _qp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _up$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 150  :         r = _DIVREM_SINGLE_UNIT(r, up[-1], v, &qp[-1]);

	mov	eax, 4
	imul	ecx, eax, -1
	add	ecx, DWORD PTR _qp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, -1
	mov	edx, DWORD PTR _up$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 151  :         r = _DIVREM_SINGLE_UNIT(r, up[-2], v, &qp[-2]);

	mov	edx, 4
	imul	eax, edx, -2
	add	eax, DWORD PTR _qp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, -2
	mov	ecx, DWORD PTR _up$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 152  :         r = _DIVREM_SINGLE_UNIT(r, up[-3], v, &qp[-3]);

	mov	ecx, 4
	imul	edx, ecx, -3
	add	edx, DWORD PTR _qp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, -3
	mov	eax, DWORD PTR _up$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 153  :         r = _DIVREM_SINGLE_UNIT(r, up[-4], v, &qp[-4]);

	mov	eax, 4
	imul	ecx, eax, -4
	add	ecx, DWORD PTR _qp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, -4
	mov	edx, DWORD PTR _up$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 154  :         r = _DIVREM_SINGLE_UNIT(r, up[-5], v, &qp[-5]);

	mov	edx, 4
	imul	eax, edx, -5
	add	eax, DWORD PTR _qp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, -5
	mov	ecx, DWORD PTR _up$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 155  :         r = _DIVREM_SINGLE_UNIT(r, up[-6], v, &qp[-6]);

	mov	ecx, 4
	imul	edx, ecx, -6
	add	edx, DWORD PTR _qp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, -6
	mov	eax, DWORD PTR _up$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 156  :         r = _DIVREM_SINGLE_UNIT(r, up[-7], v, &qp[-7]);

	mov	eax, 4
	imul	ecx, eax, -7
	add	ecx, DWORD PTR _qp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, -7
	mov	edx, DWORD PTR _up$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 157  :         r = _DIVREM_SINGLE_UNIT(r, up[-8], v, &qp[-8]);

	mov	edx, 4
	imul	eax, edx, -8
	add	eax, DWORD PTR _qp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, -8
	mov	ecx, DWORD PTR _up$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 158  :         r = _DIVREM_SINGLE_UNIT(r, up[-9], v, &qp[-9]);

	mov	ecx, 4
	imul	edx, ecx, -9
	add	edx, DWORD PTR _qp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, -9
	mov	eax, DWORD PTR _up$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 159  :         r = _DIVREM_SINGLE_UNIT(r, up[-10], v, &qp[-10]);

	mov	eax, 4
	imul	ecx, eax, -10
	add	ecx, DWORD PTR _qp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, -10
	mov	edx, DWORD PTR _up$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 160  :         r = _DIVREM_SINGLE_UNIT(r, up[-11], v, &qp[-11]);

	mov	edx, 4
	imul	eax, edx, -11
	add	eax, DWORD PTR _qp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, -11
	mov	ecx, DWORD PTR _up$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 161  :         r = _DIVREM_SINGLE_UNIT(r, up[-12], v, &qp[-12]);

	mov	ecx, 4
	imul	edx, ecx, -12
	add	edx, DWORD PTR _qp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, -12
	mov	eax, DWORD PTR _up$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 162  :         r = _DIVREM_SINGLE_UNIT(r, up[-13], v, &qp[-13]);

	mov	eax, 4
	imul	ecx, eax, -13
	add	ecx, DWORD PTR _qp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, -13
	mov	edx, DWORD PTR _up$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 163  :         r = _DIVREM_SINGLE_UNIT(r, up[-14], v, &qp[-14]);

	mov	edx, 4
	imul	eax, edx, -14
	add	eax, DWORD PTR _qp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, -14
	mov	ecx, DWORD PTR _up$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 164  :         r = _DIVREM_SINGLE_UNIT(r, up[-15], v, &qp[-15]);

	mov	ecx, 4
	imul	edx, ecx, -15
	add	edx, DWORD PTR _qp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, -15
	mov	eax, DWORD PTR _up$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 165  :         up -= 16;

	mov	eax, DWORD PTR _up$[ebp]
	sub	eax, 64					; 00000040H
	mov	DWORD PTR _up$[ebp], eax

; 166  :         qp -= 16;

	mov	ecx, DWORD PTR _qp$[ebp]
	sub	ecx, 64					; 00000040H
	mov	DWORD PTR _qp$[ebp], ecx

; 167  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 168  :         if (sizeof(r) == sizeof(_UINT64_T))

	xor	edx, edx
	je	SHORT $LN10@DivRem_X_1

; 169  :             AddToDIV64Counter(16);

	push	16					; 00000010H
	call	_AddToDIV64Counter
	add	esp, 4
	jmp	SHORT $LN9@DivRem_X_1
$LN10@DivRem_X_1:

; 170  :         else
; 171  :             AddToDIV32Counter(16);

	push	16					; 00000010H
	call	_AddToDIV32Counter
	add	esp, 4
$LN9@DivRem_X_1:

; 172  : #endif
; 173  :     }
; 174  : 
; 175  :     if (u_count & 0x8)

	mov	eax, DWORD PTR _u_count$[ebp]
	and	eax, 8
	je	$LN12@DivRem_X_1

; 176  :     {
; 177  :         r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &qp[-0]);

	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _qp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _up$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 178  :         r = _DIVREM_SINGLE_UNIT(r, up[-1], v, &qp[-1]);

	mov	eax, 4
	imul	ecx, eax, -1
	add	ecx, DWORD PTR _qp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, -1
	mov	edx, DWORD PTR _up$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 179  :         r = _DIVREM_SINGLE_UNIT(r, up[-2], v, &qp[-2]);

	mov	edx, 4
	imul	eax, edx, -2
	add	eax, DWORD PTR _qp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, -2
	mov	ecx, DWORD PTR _up$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 180  :         r = _DIVREM_SINGLE_UNIT(r, up[-3], v, &qp[-3]);

	mov	ecx, 4
	imul	edx, ecx, -3
	add	edx, DWORD PTR _qp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, -3
	mov	eax, DWORD PTR _up$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 181  :         r = _DIVREM_SINGLE_UNIT(r, up[-4], v, &qp[-4]);

	mov	eax, 4
	imul	ecx, eax, -4
	add	ecx, DWORD PTR _qp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, -4
	mov	edx, DWORD PTR _up$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 182  :         r = _DIVREM_SINGLE_UNIT(r, up[-5], v, &qp[-5]);

	mov	edx, 4
	imul	eax, edx, -5
	add	eax, DWORD PTR _qp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, -5
	mov	ecx, DWORD PTR _up$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 183  :         r = _DIVREM_SINGLE_UNIT(r, up[-6], v, &qp[-6]);

	mov	ecx, 4
	imul	edx, ecx, -6
	add	edx, DWORD PTR _qp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, -6
	mov	eax, DWORD PTR _up$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 184  :         r = _DIVREM_SINGLE_UNIT(r, up[-7], v, &qp[-7]);

	mov	eax, 4
	imul	ecx, eax, -7
	add	ecx, DWORD PTR _qp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, -7
	mov	edx, DWORD PTR _up$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 185  :         up -= 8;

	mov	edx, DWORD PTR _up$[ebp]
	sub	edx, 32					; 00000020H
	mov	DWORD PTR _up$[ebp], edx

; 186  :         qp -= 8;

	mov	eax, DWORD PTR _qp$[ebp]
	sub	eax, 32					; 00000020H
	mov	DWORD PTR _qp$[ebp], eax

; 187  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 188  :         if (sizeof(r) == sizeof(_UINT64_T))

	xor	ecx, ecx
	je	SHORT $LN13@DivRem_X_1

; 189  :             AddToDIV64Counter(8);

	push	8
	call	_AddToDIV64Counter
	add	esp, 4
	jmp	SHORT $LN12@DivRem_X_1
$LN13@DivRem_X_1:

; 190  :         else
; 191  :             AddToDIV32Counter(8);

	push	8
	call	_AddToDIV32Counter
	add	esp, 4
$LN12@DivRem_X_1:

; 192  : #endif
; 193  :     }
; 194  : 
; 195  :     if (u_count & 0x4)

	mov	edx, DWORD PTR _u_count$[ebp]
	and	edx, 4
	je	$LN15@DivRem_X_1

; 196  :     {
; 197  :         r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &qp[-0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _qp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _up$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 198  :         r = _DIVREM_SINGLE_UNIT(r, up[-1], v, &qp[-1]);

	mov	edx, 4
	imul	eax, edx, -1
	add	eax, DWORD PTR _qp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, -1
	mov	ecx, DWORD PTR _up$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 199  :         r = _DIVREM_SINGLE_UNIT(r, up[-2], v, &qp[-2]);

	mov	ecx, 4
	imul	edx, ecx, -2
	add	edx, DWORD PTR _qp$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, 4
	imul	edx, ecx, -2
	mov	eax, DWORD PTR _up$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	push	ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 200  :         r = _DIVREM_SINGLE_UNIT(r, up[-3], v, &qp[-3]);

	mov	eax, 4
	imul	ecx, eax, -3
	add	ecx, DWORD PTR _qp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, -3
	mov	edx, DWORD PTR _up$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 201  :         up -= 4;

	mov	edx, DWORD PTR _up$[ebp]
	sub	edx, 16					; 00000010H
	mov	DWORD PTR _up$[ebp], edx

; 202  :         qp -= 4;

	mov	eax, DWORD PTR _qp$[ebp]
	sub	eax, 16					; 00000010H
	mov	DWORD PTR _qp$[ebp], eax

; 203  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 204  :         if (sizeof(r) == sizeof(_UINT64_T))

	xor	ecx, ecx
	je	SHORT $LN16@DivRem_X_1

; 205  :             AddToDIV64Counter(4);

	push	4
	call	_AddToDIV64Counter
	add	esp, 4
	jmp	SHORT $LN15@DivRem_X_1
$LN16@DivRem_X_1:

; 206  :         else
; 207  :             AddToDIV32Counter(4);

	push	4
	call	_AddToDIV32Counter
	add	esp, 4
$LN15@DivRem_X_1:

; 208  : #endif
; 209  :     }
; 210  : 
; 211  :     if (u_count & 0x2)

	mov	edx, DWORD PTR _u_count$[ebp]
	and	edx, 2
	je	$LN18@DivRem_X_1

; 212  :     {
; 213  :         r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &qp[-0]);

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _qp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _up$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	push	eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 214  :         r = _DIVREM_SINGLE_UNIT(r, up[-1], v, &qp[-1]);

	mov	edx, 4
	imul	eax, edx, -1
	add	eax, DWORD PTR _qp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, -1
	mov	ecx, DWORD PTR _up$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 215  :         up -= 2;

	mov	ecx, DWORD PTR _up$[ebp]
	sub	ecx, 8
	mov	DWORD PTR _up$[ebp], ecx

; 216  :         qp -= 2;

	mov	edx, DWORD PTR _qp$[ebp]
	sub	edx, 8
	mov	DWORD PTR _qp$[ebp], edx

; 217  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 218  :         if (sizeof(r) == sizeof(_UINT64_T))

	xor	eax, eax
	je	SHORT $LN19@DivRem_X_1

; 219  :             AddToDIV64Counter(2);

	push	2
	call	_AddToDIV64Counter
	add	esp, 4
	jmp	SHORT $LN18@DivRem_X_1
$LN19@DivRem_X_1:

; 220  :         else
; 221  :             AddToDIV32Counter(2);

	push	2
	call	_AddToDIV32Counter
	add	esp, 4
$LN18@DivRem_X_1:

; 222  : #endif
; 223  :     }
; 224  : 
; 225  :     if (u_count & 0x1)

	mov	ecx, DWORD PTR _u_count$[ebp]
	and	ecx, 1
	je	SHORT $LN21@DivRem_X_1

; 226  :     {
; 227  :         r = _DIVREM_SINGLE_UNIT(r, up[-0], v, &qp[-0]);

	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _qp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _up$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	call	__DIVREM_SINGLE_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 228  :         up -= 1;

	mov	ecx, DWORD PTR _up$[ebp]
	sub	ecx, 4
	mov	DWORD PTR _up$[ebp], ecx

; 229  :         qp -= 1;

	mov	edx, DWORD PTR _qp$[ebp]
	sub	edx, 4
	mov	DWORD PTR _qp$[ebp], edx

; 230  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 231  :         if (sizeof(r) == sizeof(_UINT64_T))

	xor	eax, eax
	je	SHORT $LN22@DivRem_X_1

; 232  :             IncrementDIV64Counter();

	call	_IncrementDIV64Counter
	jmp	SHORT $LN21@DivRem_X_1
$LN22@DivRem_X_1:

; 233  :         else
; 234  :             IncrementDIV32Counter();

	call	_IncrementDIV32Counter
$LN21@DivRem_X_1:

; 235  : #endif
; 236  :     }
; 237  : 
; 238  :     *r_buf = r;

	mov	ecx, DWORD PTR _r_buf$[ebp]
	mov	edx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [ecx], edx

; 239  : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_DivRem_X_1W ENDP
_TEXT	ENDS
END
