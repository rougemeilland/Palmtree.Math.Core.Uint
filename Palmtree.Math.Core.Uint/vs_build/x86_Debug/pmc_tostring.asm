; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_tostring.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__493E81D3_pmc_tostring@c DB 01H
msvcjmc	ENDS
PUBLIC	_InitializeNumberFormatoInfo
PUBLIC	_Initialize_ToString
PUBLIC	_PMC_InitializeNumberFormatInfo@4
PUBLIC	_PMC_ToString@24
PUBLIC	__JustMyCode_Default
EXTRN	__imp__lstrcpyW@8:PROC
EXTRN	__imp__lstrlenW@4:PROC
EXTRN	_AllocateBlock:PROC
EXTRN	_DeallocateBlock:PROC
EXTRN	_CheckBlockLight:PROC
EXTRN	_CheckNumber:PROC
EXTRN	_DivRem_X_1W:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__allshl:PROC
EXTRN	__aulldiv:PROC
EXTRN	__aullrem:PROC
EXTRN	_statistics_info:BYTE
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
_default_number_format_option DB 0c0H DUP (?)
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
_DATA	SEGMENT
_decimal_digits DB '0', 00H, '1', 00H, '2', 00H, '3', 00H, '4', 00H, '5', 00H
	DB	'6', 00H, '7', 00H, '8', 00H, '9', 00H, 00H, 00H
	ORG $+2
_hexadecimal_lower_digits DB '0', 00H, '1', 00H, '2', 00H, '3', 00H, '4', 00H
	DB	'5', 00H, '6', 00H, '7', 00H, '8', 00H, '9', 00H, 'a', 00H, 'b'
	DB	00H, 'c', 00H, 'd', 00H, 'e', 00H, 'f', 00H, 00H, 00H
	ORG $+2
_hexadecimal_upper_digits DB '0', 00H, '1', 00H, '2', 00H, '3', 00H, '4', 00H
	DB	'5', 00H, '6', 00H, '7', 00H, '8', 00H, '9', 00H, 'A', 00H, 'B'
	DB	00H, 'C', 00H, 'D', 00H, 'E', 00H, 'F', 00H, 00H, 00H
	ORG $+2
$SG94881 DB	'.', 00H, 00H, 00H
$SG94882 DB	',', 00H, 00H, 00H
$SG94883 DB	'3', 00H, 00H, 00H
$SG94884 DB	0a4H, 00H, 00H, 00H
$SG94885 DB	'0', 00H, '1', 00H, '2', 00H, '3', 00H, '4', 00H, '5', 00H
	DB	'6', 00H, '7', 00H, '8', 00H, '9', 00H, 00H, 00H
	ORG $+2
$SG94886 DB	'-', 00H, 00H, 00H
$SG94887 DB	'.', 00H, 00H, 00H
$SG94888 DB	',', 00H, 00H, 00H
$SG94889 DB	'3', 00H, 00H, 00H
$SG94890 DB	'.', 00H, 00H, 00H
$SG94891 DB	',', 00H, 00H, 00H
$SG94892 DB	'3', 00H, 00H, 00H
$SG94893 DB	'%', 00H, 00H, 00H
$SG94894 DB	'0 ', 00H, 00H
$SG94895 DB	'+', 00H, 00H, 00H
_DATA	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.c
_TEXT	SEGMENT
tv95 = -36						; size = 4
_w_count$1 = -32					; size = 4
_digit_table$2 = -28					; size = 4
_d_ptr$3 = -24						; size = 4
_s_ptr$4 = -20						; size = 4
_filling_digit_count$5 = -16				; size = 4
_total_length$6 = -12					; size = 4
_filling_digit_len$7 = -8				; size = 4
_output_len$8 = -4					; size = 4
_x$ = 8							; size = 4
_buffer$ = 12						; size = 4
_buffer_size$ = 16					; size = 4
_width$ = 20						; size = 4
_format_option$ = 24					; size = 4
_using_upper_letter$ = 28				; size = 4
_ToStringX PROC

; 473  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __493E81D3_pmc_tostring@c
	call	@__CheckForDebuggerJustMyCode@4

; 474  :     if (x->IS_ZERO)

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	SHORT $LN4@ToStringX

; 475  :     {
; 476  :         // x が 0 である場合
; 477  :         // 最低で 1 桁、最高で format_option->MinimumWidth 桁だけ '0' を出力する。
; 478  : 
; 479  :         if (width < 1)

	cmp	DWORD PTR _width$[ebp], 1
	jae	SHORT $LN6@ToStringX

; 480  :             width = 1;

	mov	DWORD PTR _width$[ebp], 1
$LN6@ToStringX:

; 481  :         if (buffer_size < width + 1)

	mov	edx, DWORD PTR _width$[ebp]
	add	edx, 1
	cmp	DWORD PTR _buffer_size$[ebp], edx
	jae	SHORT $LN7@ToStringX

; 482  :             return (PMC_STATUS_INSUFFICIENT_BUFFER);

	mov	eax, -4					; fffffffcH
	jmp	$LN1@ToStringX
$LN7@ToStringX:

; 483  :         _FILL_MEMORY_16(buffer, L'0', width);

	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	push	48					; 00000030H
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	__FILL_MEMORY_16
	add	esp, 12					; 0000000cH

; 484  :         buffer[width] = L'\0';

	xor	edx, edx
	mov	eax, DWORD PTR _width$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	WORD PTR [ecx+eax*2], dx

; 485  :     }

	jmp	$LN5@ToStringX
$LN4@ToStringX:

; 486  :     else
; 487  :     {
; 488  :         // x が 0 ではない場合
; 489  :         __UNIT_TYPE output_len = _DIVIDE_CEILING_UNIT(x->UNIT_BIT_COUNT, 4);

	push	4
	mov	edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	__DIVIDE_CEILING_UNIT
	add	esp, 8
	mov	DWORD PTR _output_len$8[ebp], eax

; 490  :         __UNIT_TYPE filling_digit_len;
; 491  :         __UNIT_TYPE total_length;
; 492  :         if (output_len < width)

	mov	ecx, DWORD PTR _output_len$8[ebp]
	cmp	ecx, DWORD PTR _width$[ebp]
	jae	SHORT $LN8@ToStringX

; 493  :         {
; 494  :             filling_digit_len = width - output_len;

	mov	edx, DWORD PTR _width$[ebp]
	sub	edx, DWORD PTR _output_len$8[ebp]
	mov	DWORD PTR _filling_digit_len$7[ebp], edx

; 495  :             total_length = width;

	mov	eax, DWORD PTR _width$[ebp]
	mov	DWORD PTR _total_length$6[ebp], eax

; 496  :         }

	jmp	SHORT $LN9@ToStringX
$LN8@ToStringX:

; 497  :         else
; 498  :         {
; 499  :             filling_digit_len = 0;

	mov	DWORD PTR _filling_digit_len$7[ebp], 0

; 500  :             total_length = output_len;

	mov	ecx, DWORD PTR _output_len$8[ebp]
	mov	DWORD PTR _total_length$6[ebp], ecx
$LN9@ToStringX:

; 501  :         }
; 502  :         if (buffer_size < total_length + 1)

	mov	edx, DWORD PTR _total_length$6[ebp]
	add	edx, 1
	cmp	DWORD PTR _buffer_size$[ebp], edx
	jae	SHORT $LN10@ToStringX

; 503  :             return (PMC_STATUS_INSUFFICIENT_BUFFER);

	mov	eax, -4					; fffffffcH
	jmp	$LN1@ToStringX
$LN10@ToStringX:

; 504  :         __UNIT_TYPE filling_digit_count = filling_digit_len;

	mov	eax, DWORD PTR _filling_digit_len$7[ebp]
	mov	DWORD PTR _filling_digit_count$5[ebp], eax

; 505  :         if (filling_digit_len > 0)

	cmp	DWORD PTR _filling_digit_len$7[ebp], 0
	jbe	SHORT $LN11@ToStringX

; 506  :             _FILL_MEMORY_16(buffer, L'0', filling_digit_len);

	mov	ecx, DWORD PTR _filling_digit_len$7[ebp]
	push	ecx
	push	48					; 00000030H
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	__FILL_MEMORY_16
	add	esp, 12					; 0000000cH
$LN11@ToStringX:

; 507  :         __UNIT_TYPE* s_ptr = x->BLOCK + x->UNIT_WORD_COUNT - 1;

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR [edx+36]
	lea	ecx, DWORD PTR [eax+ecx*4-4]
	mov	DWORD PTR _s_ptr$4[ebp], ecx

; 508  :         wchar_t* d_ptr = buffer + filling_digit_len;

	mov	edx, DWORD PTR _filling_digit_len$7[ebp]
	mov	eax, DWORD PTR _buffer$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	mov	DWORD PTR _d_ptr$3[ebp], ecx

; 509  :         wchar_t* digit_table = using_upper_letter ? hexadecimal_upper_digits : hexadecimal_lower_digits;

	cmp	DWORD PTR _using_upper_letter$[ebp], 0
	je	SHORT $LN13@ToStringX
	mov	DWORD PTR tv95[ebp], OFFSET _hexadecimal_upper_digits
	jmp	SHORT $LN14@ToStringX
$LN13@ToStringX:
	mov	DWORD PTR tv95[ebp], OFFSET _hexadecimal_lower_digits
$LN14@ToStringX:
	mov	edx, DWORD PTR tv95[ebp]
	mov	DWORD PTR _digit_table$2[ebp], edx

; 510  :         __UNIT_TYPE w_count = x->UNIT_WORD_COUNT;

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _w_count$1[ebp], ecx

; 511  :         d_ptr = ToStringX_1WORD(*s_ptr, (int)(x->UNIT_WORD_COUNT * (__UNIT_TYPE_BIT_COUNT / 4) - output_len), digit_table, d_ptr);

	mov	edx, DWORD PTR _d_ptr$3[ebp]
	push	edx
	mov	eax, DWORD PTR _digit_table$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	shl	edx, 3
	sub	edx, DWORD PTR _output_len$8[ebp]
	push	edx
	mov	eax, DWORD PTR _s_ptr$4[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_ToStringX_1WORD
	add	esp, 16					; 00000010H
	mov	DWORD PTR _d_ptr$3[ebp], eax

; 512  :         --s_ptr;

	mov	edx, DWORD PTR _s_ptr$4[ebp]
	sub	edx, 4
	mov	DWORD PTR _s_ptr$4[ebp], edx

; 513  :         --w_count;

	mov	eax, DWORD PTR _w_count$1[ebp]
	sub	eax, 1
	mov	DWORD PTR _w_count$1[ebp], eax
$LN2@ToStringX:

; 514  :         while (w_count > 0)

	cmp	DWORD PTR _w_count$1[ebp], 0
	jbe	SHORT $LN3@ToStringX

; 515  :         {
; 516  :             d_ptr = ToStringX_1WORD(*s_ptr, 0, digit_table, d_ptr);

	mov	ecx, DWORD PTR _d_ptr$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _digit_table$2[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _s_ptr$4[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_ToStringX_1WORD
	add	esp, 16					; 00000010H
	mov	DWORD PTR _d_ptr$3[ebp], eax

; 517  :             --s_ptr;

	mov	edx, DWORD PTR _s_ptr$4[ebp]
	sub	edx, 4
	mov	DWORD PTR _s_ptr$4[ebp], edx

; 518  :             --w_count;

	mov	eax, DWORD PTR _w_count$1[ebp]
	sub	eax, 1
	mov	DWORD PTR _w_count$1[ebp], eax

; 519  :         }

	jmp	SHORT $LN2@ToStringX
$LN3@ToStringX:

; 520  :         *d_ptr = '\0';

	xor	ecx, ecx
	mov	edx, DWORD PTR _d_ptr$3[ebp]
	mov	WORD PTR [edx], cx
$LN5@ToStringX:

; 521  :     }
; 522  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@ToStringX:

; 523  : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ToStringX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.c
_TEXT	SEGMENT
_count$ = -4						; size = 4
_x$ = 8							; size = 4
_skip_digit_len$ = 12					; size = 4
_digit_table$ = 16					; size = 4
_ptr$ = 20						; size = 4
_ToStringX_1WORD PROC

; 405  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __493E81D3_pmc_tostring@c
	call	@__CheckForDebuggerJustMyCode@4

; 406  :     if (sizeof(__UNIT_TYPE) > sizeof(_UINT64_T))

	xor	eax, eax
	je	SHORT $LN2@ToStringX_

; 407  :     {
; 408  :         // 64bit を超える __UNIT_TYPE には未対応
; 409  :         // 対応するには以降のコーディングを見直す必要がある
; 410  :         return (NULL);

	xor	eax, eax
	jmp	$LN1@ToStringX_
$LN2@ToStringX_:

; 411  :     }
; 412  :     int count = __UNIT_TYPE_BIT_COUNT / 4;

	mov	DWORD PTR _count$[ebp], 8

; 413  :     if (skip_digit_len > 0)

	cmp	DWORD PTR _skip_digit_len$[ebp], 0
	jle	SHORT $LN3@ToStringX_

; 414  :     {
; 415  :         x = _ROTATE_L_UNIT(x, 4 * skip_digit_len);

	mov	ecx, DWORD PTR _skip_digit_len$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax

; 416  :         count -= skip_digit_len;

	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, DWORD PTR _skip_digit_len$[ebp]
	mov	DWORD PTR _count$[ebp], eax
$LN3@ToStringX_:

; 417  :     }
; 418  :     if (count & 0x10)

	mov	ecx, DWORD PTR _count$[ebp]
	and	ecx, 16					; 00000010H
	je	$LN4@ToStringX_

; 419  :     {
; 420  :         x = _ROTATE_L_UNIT(x, 4); ptr[0] = digit_table[x & 0x0f];

	push	4
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax
	mov	eax, DWORD PTR _x$[ebp]
	and	eax, 15					; 0000000fH
	mov	ecx, 2
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	esi, DWORD PTR _digit_table$[ebp]
	mov	ax, WORD PTR [esi+eax*2]
	mov	WORD PTR [ecx+edx], ax

; 421  :         x = _ROTATE_L_UNIT(x, 4); ptr[1] = digit_table[x & 0x0f];

	push	4
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax
	mov	edx, DWORD PTR _x$[ebp]
	and	edx, 15					; 0000000fH
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	esi, DWORD PTR _digit_table$[ebp]
	mov	dx, WORD PTR [esi+edx*2]
	mov	WORD PTR [ecx+eax], dx

; 422  :         x = _ROTATE_L_UNIT(x, 4); ptr[2] = digit_table[x & 0x0f];

	push	4
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	and	ecx, 15					; 0000000fH
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _ptr$[ebp]
	mov	esi, DWORD PTR _digit_table$[ebp]
	mov	cx, WORD PTR [esi+ecx*2]
	mov	WORD PTR [eax+edx], cx

; 423  :         x = _ROTATE_L_UNIT(x, 4); ptr[3] = digit_table[x & 0x0f];

	push	4
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax
	mov	eax, DWORD PTR _x$[ebp]
	and	eax, 15					; 0000000fH
	mov	ecx, 2
	imul	edx, ecx, 3
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	esi, DWORD PTR _digit_table$[ebp]
	mov	ax, WORD PTR [esi+eax*2]
	mov	WORD PTR [ecx+edx], ax

; 424  :         x = _ROTATE_L_UNIT(x, 4); ptr[4] = digit_table[x & 0x0f];

	push	4
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax
	mov	edx, DWORD PTR _x$[ebp]
	and	edx, 15					; 0000000fH
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	esi, DWORD PTR _digit_table$[ebp]
	mov	dx, WORD PTR [esi+edx*2]
	mov	WORD PTR [ecx+eax], dx

; 425  :         x = _ROTATE_L_UNIT(x, 4); ptr[5] = digit_table[x & 0x0f];

	push	4
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	and	ecx, 15					; 0000000fH
	mov	edx, 2
	imul	eax, edx, 5
	mov	edx, DWORD PTR _ptr$[ebp]
	mov	esi, DWORD PTR _digit_table$[ebp]
	mov	cx, WORD PTR [esi+ecx*2]
	mov	WORD PTR [edx+eax], cx

; 426  :         x = _ROTATE_L_UNIT(x, 4); ptr[6] = digit_table[x & 0x0f];

	push	4
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax
	mov	eax, DWORD PTR _x$[ebp]
	and	eax, 15					; 0000000fH
	mov	ecx, 2
	imul	edx, ecx, 6
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	esi, DWORD PTR _digit_table$[ebp]
	mov	ax, WORD PTR [esi+eax*2]
	mov	WORD PTR [ecx+edx], ax

; 427  :         x = _ROTATE_L_UNIT(x, 4); ptr[7] = digit_table[x & 0x0f];

	push	4
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax
	mov	edx, DWORD PTR _x$[ebp]
	and	edx, 15					; 0000000fH
	mov	eax, 2
	imul	ecx, eax, 7
	mov	eax, DWORD PTR _ptr$[ebp]
	mov	esi, DWORD PTR _digit_table$[ebp]
	mov	dx, WORD PTR [esi+edx*2]
	mov	WORD PTR [eax+ecx], dx

; 428  :         x = _ROTATE_L_UNIT(x, 4); ptr[8] = digit_table[x & 0x0f];

	push	4
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	and	ecx, 15					; 0000000fH
	mov	edx, 2
	shl	edx, 3
	mov	eax, DWORD PTR _ptr$[ebp]
	mov	esi, DWORD PTR _digit_table$[ebp]
	mov	cx, WORD PTR [esi+ecx*2]
	mov	WORD PTR [eax+edx], cx

; 429  :         x = _ROTATE_L_UNIT(x, 4); ptr[9] = digit_table[x & 0x0f];

	push	4
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax
	mov	eax, DWORD PTR _x$[ebp]
	and	eax, 15					; 0000000fH
	mov	ecx, 2
	imul	edx, ecx, 9
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	esi, DWORD PTR _digit_table$[ebp]
	mov	ax, WORD PTR [esi+eax*2]
	mov	WORD PTR [ecx+edx], ax

; 430  :         x = _ROTATE_L_UNIT(x, 4); ptr[10] = digit_table[x & 0x0f];

	push	4
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax
	mov	edx, DWORD PTR _x$[ebp]
	and	edx, 15					; 0000000fH
	mov	eax, 2
	imul	ecx, eax, 10
	mov	eax, DWORD PTR _ptr$[ebp]
	mov	esi, DWORD PTR _digit_table$[ebp]
	mov	dx, WORD PTR [esi+edx*2]
	mov	WORD PTR [eax+ecx], dx

; 431  :         x = _ROTATE_L_UNIT(x, 4); ptr[11] = digit_table[x & 0x0f];

	push	4
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	and	ecx, 15					; 0000000fH
	mov	edx, 2
	imul	eax, edx, 11
	mov	edx, DWORD PTR _ptr$[ebp]
	mov	esi, DWORD PTR _digit_table$[ebp]
	mov	cx, WORD PTR [esi+ecx*2]
	mov	WORD PTR [edx+eax], cx

; 432  :         x = _ROTATE_L_UNIT(x, 4); ptr[12] = digit_table[x & 0x0f];

	push	4
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax
	mov	eax, DWORD PTR _x$[ebp]
	and	eax, 15					; 0000000fH
	mov	ecx, 2
	imul	edx, ecx, 12
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	esi, DWORD PTR _digit_table$[ebp]
	mov	ax, WORD PTR [esi+eax*2]
	mov	WORD PTR [ecx+edx], ax

; 433  :         x = _ROTATE_L_UNIT(x, 4); ptr[13] = digit_table[x & 0x0f];

	push	4
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax
	mov	edx, DWORD PTR _x$[ebp]
	and	edx, 15					; 0000000fH
	mov	eax, 2
	imul	ecx, eax, 13
	mov	eax, DWORD PTR _ptr$[ebp]
	mov	esi, DWORD PTR _digit_table$[ebp]
	mov	dx, WORD PTR [esi+edx*2]
	mov	WORD PTR [eax+ecx], dx

; 434  :         x = _ROTATE_L_UNIT(x, 4); ptr[14] = digit_table[x & 0x0f];

	push	4
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	and	ecx, 15					; 0000000fH
	mov	edx, 2
	imul	eax, edx, 14
	mov	edx, DWORD PTR _ptr$[ebp]
	mov	esi, DWORD PTR _digit_table$[ebp]
	mov	cx, WORD PTR [esi+ecx*2]
	mov	WORD PTR [edx+eax], cx

; 435  :         x = _ROTATE_L_UNIT(x, 4); ptr[15] = digit_table[x & 0x0f];

	push	4
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax
	mov	eax, DWORD PTR _x$[ebp]
	and	eax, 15					; 0000000fH
	mov	ecx, 2
	imul	edx, ecx, 15
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	esi, DWORD PTR _digit_table$[ebp]
	mov	ax, WORD PTR [esi+eax*2]
	mov	WORD PTR [ecx+edx], ax

; 436  :         ptr += 16;

	mov	ecx, DWORD PTR _ptr$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _ptr$[ebp], ecx
$LN4@ToStringX_:

; 437  :     }
; 438  :     if (count & 0x8)

	mov	edx, DWORD PTR _count$[ebp]
	and	edx, 8
	je	$LN5@ToStringX_

; 439  :     {
; 440  :         x = _ROTATE_L_UNIT(x, 4); ptr[0] = digit_table[x & 0x0f];

	push	4
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	and	ecx, 15					; 0000000fH
	mov	edx, 2
	imul	eax, edx, 0
	mov	edx, DWORD PTR _ptr$[ebp]
	mov	esi, DWORD PTR _digit_table$[ebp]
	mov	cx, WORD PTR [esi+ecx*2]
	mov	WORD PTR [edx+eax], cx

; 441  :         x = _ROTATE_L_UNIT(x, 4); ptr[1] = digit_table[x & 0x0f];

	push	4
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax
	mov	eax, DWORD PTR _x$[ebp]
	and	eax, 15					; 0000000fH
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _ptr$[ebp]
	mov	esi, DWORD PTR _digit_table$[ebp]
	mov	ax, WORD PTR [esi+eax*2]
	mov	WORD PTR [edx+ecx], ax

; 442  :         x = _ROTATE_L_UNIT(x, 4); ptr[2] = digit_table[x & 0x0f];

	push	4
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax
	mov	edx, DWORD PTR _x$[ebp]
	and	edx, 15					; 0000000fH
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	esi, DWORD PTR _digit_table$[ebp]
	mov	dx, WORD PTR [esi+edx*2]
	mov	WORD PTR [ecx+eax], dx

; 443  :         x = _ROTATE_L_UNIT(x, 4); ptr[3] = digit_table[x & 0x0f];

	push	4
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	and	ecx, 15					; 0000000fH
	mov	edx, 2
	imul	eax, edx, 3
	mov	edx, DWORD PTR _ptr$[ebp]
	mov	esi, DWORD PTR _digit_table$[ebp]
	mov	cx, WORD PTR [esi+ecx*2]
	mov	WORD PTR [edx+eax], cx

; 444  :         x = _ROTATE_L_UNIT(x, 4); ptr[4] = digit_table[x & 0x0f];

	push	4
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax
	mov	eax, DWORD PTR _x$[ebp]
	and	eax, 15					; 0000000fH
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _ptr$[ebp]
	mov	esi, DWORD PTR _digit_table$[ebp]
	mov	ax, WORD PTR [esi+eax*2]
	mov	WORD PTR [edx+ecx], ax

; 445  :         x = _ROTATE_L_UNIT(x, 4); ptr[5] = digit_table[x & 0x0f];

	push	4
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax
	mov	edx, DWORD PTR _x$[ebp]
	and	edx, 15					; 0000000fH
	mov	eax, 2
	imul	ecx, eax, 5
	mov	eax, DWORD PTR _ptr$[ebp]
	mov	esi, DWORD PTR _digit_table$[ebp]
	mov	dx, WORD PTR [esi+edx*2]
	mov	WORD PTR [eax+ecx], dx

; 446  :         x = _ROTATE_L_UNIT(x, 4); ptr[6] = digit_table[x & 0x0f];

	push	4
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	and	ecx, 15					; 0000000fH
	mov	edx, 2
	imul	eax, edx, 6
	mov	edx, DWORD PTR _ptr$[ebp]
	mov	esi, DWORD PTR _digit_table$[ebp]
	mov	cx, WORD PTR [esi+ecx*2]
	mov	WORD PTR [edx+eax], cx

; 447  :         x = _ROTATE_L_UNIT(x, 4); ptr[7] = digit_table[x & 0x0f];

	push	4
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax
	mov	eax, DWORD PTR _x$[ebp]
	and	eax, 15					; 0000000fH
	mov	ecx, 2
	imul	edx, ecx, 7
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	esi, DWORD PTR _digit_table$[ebp]
	mov	ax, WORD PTR [esi+eax*2]
	mov	WORD PTR [ecx+edx], ax

; 448  :         ptr+=8;

	mov	ecx, DWORD PTR _ptr$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _ptr$[ebp], ecx
$LN5@ToStringX_:

; 449  :     }
; 450  :     if (count & 0x4)

	mov	edx, DWORD PTR _count$[ebp]
	and	edx, 4
	je	$LN6@ToStringX_

; 451  :     {
; 452  :         x = _ROTATE_L_UNIT(x, 4); ptr[0] = digit_table[x & 0x0f];

	push	4
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	and	ecx, 15					; 0000000fH
	mov	edx, 2
	imul	eax, edx, 0
	mov	edx, DWORD PTR _ptr$[ebp]
	mov	esi, DWORD PTR _digit_table$[ebp]
	mov	cx, WORD PTR [esi+ecx*2]
	mov	WORD PTR [edx+eax], cx

; 453  :         x = _ROTATE_L_UNIT(x, 4); ptr[1] = digit_table[x & 0x0f];

	push	4
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax
	mov	eax, DWORD PTR _x$[ebp]
	and	eax, 15					; 0000000fH
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _ptr$[ebp]
	mov	esi, DWORD PTR _digit_table$[ebp]
	mov	ax, WORD PTR [esi+eax*2]
	mov	WORD PTR [edx+ecx], ax

; 454  :         x = _ROTATE_L_UNIT(x, 4); ptr[2] = digit_table[x & 0x0f];

	push	4
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax
	mov	edx, DWORD PTR _x$[ebp]
	and	edx, 15					; 0000000fH
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	esi, DWORD PTR _digit_table$[ebp]
	mov	dx, WORD PTR [esi+edx*2]
	mov	WORD PTR [ecx+eax], dx

; 455  :         x = _ROTATE_L_UNIT(x, 4); ptr[3] = digit_table[x & 0x0f];

	push	4
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	and	ecx, 15					; 0000000fH
	mov	edx, 2
	imul	eax, edx, 3
	mov	edx, DWORD PTR _ptr$[ebp]
	mov	esi, DWORD PTR _digit_table$[ebp]
	mov	cx, WORD PTR [esi+ecx*2]
	mov	WORD PTR [edx+eax], cx

; 456  :         ptr += 4;

	mov	edx, DWORD PTR _ptr$[ebp]
	add	edx, 8
	mov	DWORD PTR _ptr$[ebp], edx
$LN6@ToStringX_:

; 457  :     }
; 458  :     if (count & 0x2)

	mov	eax, DWORD PTR _count$[ebp]
	and	eax, 2
	je	SHORT $LN7@ToStringX_

; 459  :     {
; 460  :         x = _ROTATE_L_UNIT(x, 4); ptr[0] = digit_table[x & 0x0f];

	push	4
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax
	mov	edx, DWORD PTR _x$[ebp]
	and	edx, 15					; 0000000fH
	mov	eax, 2
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _ptr$[ebp]
	mov	esi, DWORD PTR _digit_table$[ebp]
	mov	dx, WORD PTR [esi+edx*2]
	mov	WORD PTR [eax+ecx], dx

; 461  :         x = _ROTATE_L_UNIT(x, 4); ptr[1] = digit_table[x & 0x0f];

	push	4
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax
	mov	ecx, DWORD PTR _x$[ebp]
	and	ecx, 15					; 0000000fH
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _ptr$[ebp]
	mov	esi, DWORD PTR _digit_table$[ebp]
	mov	cx, WORD PTR [esi+ecx*2]
	mov	WORD PTR [eax+edx], cx

; 462  :         ptr += 2;

	mov	edx, DWORD PTR _ptr$[ebp]
	add	edx, 4
	mov	DWORD PTR _ptr$[ebp], edx
$LN7@ToStringX_:

; 463  :     }
; 464  :     if (count & 0x1)

	mov	eax, DWORD PTR _count$[ebp]
	and	eax, 1
	je	SHORT $LN8@ToStringX_

; 465  :     {
; 466  :         x = _ROTATE_L_UNIT(x, 4); ptr[0] = digit_table[x & 0x0f];

	push	4
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	__ROTATE_L_UNIT
	add	esp, 8
	mov	DWORD PTR _x$[ebp], eax
	mov	edx, DWORD PTR _x$[ebp]
	and	edx, 15					; 0000000fH
	mov	eax, 2
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _ptr$[ebp]
	mov	esi, DWORD PTR _digit_table$[ebp]
	mov	dx, WORD PTR [esi+edx*2]
	mov	WORD PTR [eax+ecx], dx

; 467  :         ptr += 1;

	mov	eax, DWORD PTR _ptr$[ebp]
	add	eax, 2
	mov	DWORD PTR _ptr$[ebp], eax
$LN8@ToStringX_:

; 468  :     }
; 469  :     return (ptr);

	mov	eax, DWORD PTR _ptr$[ebp]
$LN1@ToStringX_:

; 470  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ToStringX_1WORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.c
_TEXT	SEGMENT
tv169 = -100						; size = 4
_rev_str_buf_count$1 = -92				; size = 4
_rev_str_buf$2 = -84					; size = 4
_rev_str_buf_words$3 = -76				; size = 4
_rev_str_buf_code$4 = -64				; size = 4
_r_buf_count$5 = -52					; size = 4
_r_buf$6 = -44						; size = 4
_r_buf_words$7 = -36					; size = 4
_r_buf_code$8 = -24					; size = 4
_result$9 = -16						; size = 4
_decimal_separator_len$10 = -12				; size = 4
_word_digit_count$ = -8					; size = 4
_base_value$ = -4					; size = 4
_x$ = 8							; size = 4
_buffer$ = 12						; size = 4
_buffer_size$ = 16					; size = 4
_format$ = 20						; size = 1
_width$ = 24						; size = 4
_format_option$ = 28					; size = 4
_ToStringDN PROC

; 312  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-100]
	mov	ecx, 25					; 00000019H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __493E81D3_pmc_tostring@c
	call	@__CheckForDebuggerJustMyCode@4

; 313  :     __UNIT_TYPE_DIV base_value;
; 314  :     int word_digit_count;
; 315  :     if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@ToStringDN

; 316  :     {
; 317  :         base_value = 1000000000U; // 10^9

	mov	DWORD PTR _base_value$[ebp], 1000000000	; 3b9aca00H

; 318  :         word_digit_count = 9;

	mov	DWORD PTR _word_digit_count$[ebp], 9

; 319  :     }

	jmp	SHORT $LN3@ToStringDN
$LN2@ToStringDN:

; 320  :     else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))

	xor	ecx, ecx
	je	SHORT $LN4@ToStringDN

; 321  :     {
; 322  :         base_value = (__UNIT_TYPE_DIV)10000000000000000000UL; // 10^19

	mov	DWORD PTR _base_value$[ebp], -1981284352 ; 89e80000H

; 323  :         word_digit_count = 19;

	mov	DWORD PTR _word_digit_count$[ebp], 19	; 00000013H

; 324  :     }

	jmp	SHORT $LN3@ToStringDN
$LN4@ToStringDN:

; 325  :     else
; 326  :         return (PMC_STATUS_NOT_SUPPORTED);

	mov	eax, -6					; fffffffaH
	jmp	$LN1@ToStringDN
$LN3@ToStringDN:

; 327  : 
; 328  :     if (x->IS_ZERO)

	mov	edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR [edx]
	and	eax, 1
	je	$LN6@ToStringDN

; 329  :     {
; 330  :         // x が 0 である場合
; 331  :         if (format == 'N')

	movsx	ecx, BYTE PTR _format$[ebp]
	cmp	ecx, 78					; 0000004eH
	jne	$LN8@ToStringDN

; 332  :         {
; 333  :             // format が 'N' である場合
; 334  : 
; 335  :             // 整数部が 1 桁の 0、小数部が width 桁の 0 である文字列を出力する。
; 336  :             buffer[0] = '0';

	mov	edx, 2
	imul	eax, edx, 0
	mov	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _buffer$[ebp]
	mov	WORD PTR [edx+eax], cx

; 337  :             if (width == 0)

	cmp	DWORD PTR _width$[ebp], 0
	jne	SHORT $LN10@ToStringDN

; 338  :                 buffer[1] = L'\0';

	mov	eax, 2
	shl	eax, 0
	xor	ecx, ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	mov	WORD PTR [edx+eax], cx
	jmp	SHORT $LN11@ToStringDN
$LN10@ToStringDN:

; 339  :             else
; 340  :             {
; 341  :                 lstrcpyW(&buffer[1], format_option->Number.DecimalSeparator);

	mov	eax, DWORD PTR _format_option$[ebp]
	add	eax, 58					; 0000003aH
	mov	esi, esp
	push	eax
	mov	ecx, 2
	shl	ecx, 0
	add	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 342  :                 int decimal_separator_len = lstrlenW(format_option->Number.DecimalSeparator);

	mov	edx, DWORD PTR _format_option$[ebp]
	add	edx, 58					; 0000003aH
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _decimal_separator_len$10[ebp], eax

; 343  :                 _FILL_MEMORY_16(buffer + 1 + decimal_separator_len, L'0', width);

	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	push	48					; 00000030H
	mov	ecx, DWORD PTR _decimal_separator_len$10[ebp]
	mov	edx, DWORD PTR _buffer$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2+2]
	push	eax
	call	__FILL_MEMORY_16
	add	esp, 12					; 0000000cH

; 344  :                 buffer[1 + decimal_separator_len + width] = L'\0';

	mov	ecx, DWORD PTR _width$[ebp]
	mov	edx, DWORD PTR _decimal_separator_len$10[ebp]
	lea	eax, DWORD PTR [edx+ecx+1]
	xor	ecx, ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	mov	WORD PTR [edx+eax*2], cx
$LN11@ToStringDN:

; 345  :             }
; 346  :         }

	jmp	SHORT $LN9@ToStringDN
$LN8@ToStringDN:

; 347  :         else
; 348  :         {
; 349  :             // format が 'D' である場合
; 350  : 
; 351  :             // 最低で 1 桁、最高で width 桁だけ '0' を出力する。
; 352  :             if (width < 1)

	cmp	DWORD PTR _width$[ebp], 1
	jae	SHORT $LN12@ToStringDN

; 353  :                 width = 1;

	mov	DWORD PTR _width$[ebp], 1
$LN12@ToStringDN:

; 354  :             if (buffer_size < width + 1)

	mov	eax, DWORD PTR _width$[ebp]
	add	eax, 1
	cmp	DWORD PTR _buffer_size$[ebp], eax
	jae	SHORT $LN13@ToStringDN

; 355  :                 return (PMC_STATUS_INSUFFICIENT_BUFFER);

	mov	eax, -4					; fffffffcH
	jmp	$LN1@ToStringDN
$LN13@ToStringDN:

; 356  :             _FILL_MEMORY_16(buffer, L'0', width);

	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	push	48					; 00000030H
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	__FILL_MEMORY_16
	add	esp, 12					; 0000000cH

; 357  :             buffer[width] = L'\0';

	xor	eax, eax
	mov	ecx, DWORD PTR _width$[ebp]
	mov	edx, DWORD PTR _buffer$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
$LN9@ToStringDN:

; 358  :         }
; 359  :     }

	jmp	$LN7@ToStringDN
$LN6@ToStringDN:

; 360  :     else
; 361  :     {
; 362  :         // x が 0 ではない場合
; 363  :         PMC_STATUS_CODE result;
; 364  :         __UNIT_TYPE r_buf_code;
; 365  :         __UNIT_TYPE r_buf_words;
; 366  :         // xを base_value 基数として変換した数値が r に格納される。約 7% ほど余分に領域が必要な計算になるが、余裕を見て 12.5% 程度の領域を獲得している。
; 367  :         __UNIT_TYPE_DIV* r_buf = (__UNIT_TYPE_DIV*)AllocateBlock(x->UNIT_BIT_COUNT + (x->UNIT_BIT_COUNT >> 3) + __UNIT_TYPE_BIT_COUNT, &r_buf_words, &r_buf_code);

	lea	eax, DWORD PTR _r_buf_code$8[ebp]
	push	eax
	lea	ecx, DWORD PTR _r_buf_words$7[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR [edx+16]
	shr	eax, 3
	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	lea	eax, DWORD PTR [edx+eax+32]
	push	eax
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _r_buf$6[ebp], eax

; 368  :         if (r_buf == NULL)

	cmp	DWORD PTR _r_buf$6[ebp], 0
	jne	SHORT $LN14@ToStringDN

; 369  :             return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@ToStringDN
$LN14@ToStringDN:

; 370  :         __UNIT_TYPE r_buf_count;
; 371  :         if ((result = ConvertCardinalNumber((__UNIT_TYPE_DIV*)x->BLOCK, x->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), x->UNIT_BIT_COUNT, base_value, r_buf, &r_buf_count)) != PMC_STATUS_OK)

	lea	ecx, DWORD PTR _r_buf_count$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _r_buf$6[ebp]
	push	edx
	mov	eax, DWORD PTR _base_value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shl	ecx, 2
	shr	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	call	_ConvertCardinalNumber
	add	esp, 24					; 00000018H
	mov	DWORD PTR _result$9[ebp], eax
	cmp	DWORD PTR _result$9[ebp], 0
	je	SHORT $LN15@ToStringDN

; 372  :         {
; 373  :             DeallocateBlock((__UNIT_TYPE*)r_buf, r_buf_words);

	mov	ecx, DWORD PTR _r_buf_words$7[ebp]
	push	ecx
	mov	edx, DWORD PTR _r_buf$6[ebp]
	push	edx
	call	_DeallocateBlock
	add	esp, 8

; 374  :             return (result);

	mov	eax, DWORD PTR _result$9[ebp]
	jmp	$LN1@ToStringDN
$LN15@ToStringDN:

; 375  :         }
; 376  :         if ((result = CheckBlockLight((__UNIT_TYPE*)r_buf, r_buf_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _r_buf_code$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _r_buf$6[ebp]
	push	ecx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$9[ebp], eax
	cmp	DWORD PTR _result$9[ebp], 0
	je	SHORT $LN16@ToStringDN

; 377  :             return (result);

	mov	eax, DWORD PTR _result$9[ebp]
	jmp	$LN1@ToStringDN
$LN16@ToStringDN:

; 378  : 
; 379  :         __UNIT_TYPE rev_str_buf_code;
; 380  :         __UNIT_TYPE rev_str_buf_words;
; 381  :         // 獲得領域長の * 2 は、桁区切りのワーストケースにより文字列が膨らんだ場合を考慮したもの。
; 382  :         wchar_t* rev_str_buf = (wchar_t*)AllocateBlock((max(r_buf_count * word_digit_count, width) * 2 + width + 2) * sizeof(wchar_t) * 8, &rev_str_buf_words, &rev_str_buf_code);

	mov	edx, DWORD PTR _r_buf_count$5[ebp]
	imul	edx, DWORD PTR _word_digit_count$[ebp]
	cmp	edx, DWORD PTR _width$[ebp]
	jbe	SHORT $LN21@ToStringDN
	mov	eax, DWORD PTR _r_buf_count$5[ebp]
	imul	eax, DWORD PTR _word_digit_count$[ebp]
	mov	DWORD PTR tv169[ebp], eax
	jmp	SHORT $LN22@ToStringDN
$LN21@ToStringDN:
	mov	ecx, DWORD PTR _width$[ebp]
	mov	DWORD PTR tv169[ebp], ecx
$LN22@ToStringDN:
	lea	edx, DWORD PTR _rev_str_buf_code$4[ebp]
	push	edx
	lea	eax, DWORD PTR _rev_str_buf_words$3[ebp]
	push	eax
	mov	ecx, DWORD PTR tv169[ebp]
	mov	edx, DWORD PTR _width$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	lea	ecx, DWORD PTR [eax+eax+4]
	shl	ecx, 3
	push	ecx
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _rev_str_buf$2[ebp], eax

; 383  :         if (r_buf == NULL)

	cmp	DWORD PTR _r_buf$6[ebp], 0
	jne	SHORT $LN17@ToStringDN

; 384  :         {
; 385  :             DeallocateBlock((__UNIT_TYPE*)r_buf, r_buf_words);

	mov	edx, DWORD PTR _r_buf_words$7[ebp]
	push	edx
	mov	eax, DWORD PTR _r_buf$6[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 386  :             return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@ToStringDN
$LN17@ToStringDN:

; 387  :         }
; 388  :         __UNIT_TYPE rev_str_buf_count;
; 389  :         PrintDecimal(r_buf, r_buf_count, rev_str_buf, &rev_str_buf_count, format, width, format_option);

	mov	ecx, DWORD PTR _format_option$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	movzx	eax, BYTE PTR _format$[ebp]
	push	eax
	lea	ecx, DWORD PTR _rev_str_buf_count$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _rev_str_buf$2[ebp]
	push	edx
	mov	eax, DWORD PTR _r_buf_count$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _r_buf$6[ebp]
	push	ecx
	call	_PrintDecimal
	add	esp, 28					; 0000001cH

; 390  :         if ((result = CheckBlockLight((__UNIT_TYPE*)rev_str_buf, rev_str_buf_code)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _rev_str_buf_code$4[ebp]
	push	edx
	mov	eax, DWORD PTR _rev_str_buf$2[ebp]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$9[ebp], eax
	cmp	DWORD PTR _result$9[ebp], 0
	je	SHORT $LN18@ToStringDN

; 391  :             return (result);

	mov	eax, DWORD PTR _result$9[ebp]
	jmp	SHORT $LN1@ToStringDN
$LN18@ToStringDN:

; 392  :         DeallocateBlock((__UNIT_TYPE*)r_buf, r_buf_words);

	mov	ecx, DWORD PTR _r_buf_words$7[ebp]
	push	ecx
	mov	edx, DWORD PTR _r_buf$6[ebp]
	push	edx
	call	_DeallocateBlock
	add	esp, 8

; 393  :         if (rev_str_buf_count + 1 > buffer_size)

	mov	eax, DWORD PTR _rev_str_buf_count$1[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _buffer_size$[ebp]
	jbe	SHORT $LN19@ToStringDN

; 394  :         {
; 395  :             DeallocateBlock((__UNIT_TYPE*)rev_str_buf, rev_str_buf_words);

	mov	ecx, DWORD PTR _rev_str_buf_words$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _rev_str_buf$2[ebp]
	push	edx
	call	_DeallocateBlock
	add	esp, 8

; 396  :             return (PMC_STATUS_INSUFFICIENT_BUFFER);

	mov	eax, -4					; fffffffcH
	jmp	SHORT $LN1@ToStringDN
$LN19@ToStringDN:

; 397  :         }
; 398  :         ToStringDN_Finalize(rev_str_buf, rev_str_buf_count, buffer, buffer_size);

	mov	eax, DWORD PTR _buffer_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rev_str_buf_count$1[ebp]
	push	edx
	mov	eax, DWORD PTR _rev_str_buf$2[ebp]
	push	eax
	call	_ToStringDN_Finalize
	add	esp, 16					; 00000010H

; 399  :         DeallocateBlock((__UNIT_TYPE*)rev_str_buf, rev_str_buf_words);

	mov	ecx, DWORD PTR _rev_str_buf_words$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _rev_str_buf$2[ebp]
	push	edx
	call	_DeallocateBlock
	add	esp, 8
$LN7@ToStringDN:

; 400  :     }
; 401  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@ToStringDN:

; 402  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@ToStringDN
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 100				; 00000064H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN30@ToStringDN:
	DD	6
	DD	$LN29@ToStringDN
$LN29@ToStringDN:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN23@ToStringDN
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN24@ToStringDN
	DD	-52					; ffffffccH
	DD	4
	DD	$LN25@ToStringDN
	DD	-64					; ffffffc0H
	DD	4
	DD	$LN26@ToStringDN
	DD	-76					; ffffffb4H
	DD	4
	DD	$LN27@ToStringDN
	DD	-92					; ffffffa4H
	DD	4
	DD	$LN28@ToStringDN
$LN28@ToStringDN:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN27@ToStringDN:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN26@ToStringDN:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN25@ToStringDN:
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN24@ToStringDN:
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN23@ToStringDN:
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_ToStringDN ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.c
_TEXT	SEGMENT
_count$ = -12						; size = 4
_out_ptr$ = -8						; size = 4
_in_ptr$ = -4						; size = 4
_in_buf$ = 8						; size = 4
_in_buf_count$ = 12					; size = 4
_out_buf$ = 16						; size = 4
_out_buf_count$ = 20					; size = 4
_ToStringDN_Finalize PROC

; 299  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __493E81D3_pmc_tostring@c
	call	@__CheckForDebuggerJustMyCode@4

; 300  :     wchar_t* in_ptr = in_buf + in_buf_count - 1;

	mov	eax, DWORD PTR _in_buf_count$[ebp]
	mov	ecx, DWORD PTR _in_buf$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2-2]
	mov	DWORD PTR _in_ptr$[ebp], edx

; 301  :     wchar_t* out_ptr = out_buf;

	mov	eax, DWORD PTR _out_buf$[ebp]
	mov	DWORD PTR _out_ptr$[ebp], eax

; 302  :     __UNIT_TYPE count = in_buf_count;

	mov	ecx, DWORD PTR _in_buf_count$[ebp]
	mov	DWORD PTR _count$[ebp], ecx
$LN2@ToStringDN:

; 303  :     while (count > 0)

	cmp	DWORD PTR _count$[ebp], 0
	jbe	SHORT $LN3@ToStringDN

; 304  :     {
; 305  :         *out_ptr++ = *in_ptr--;

	mov	edx, DWORD PTR _out_ptr$[ebp]
	mov	eax, DWORD PTR _in_ptr$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR [edx], cx
	mov	edx, DWORD PTR _out_ptr$[ebp]
	add	edx, 2
	mov	DWORD PTR _out_ptr$[ebp], edx
	mov	eax, DWORD PTR _in_ptr$[ebp]
	sub	eax, 2
	mov	DWORD PTR _in_ptr$[ebp], eax

; 306  :         --count;

	mov	ecx, DWORD PTR _count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx

; 307  :     }

	jmp	SHORT $LN2@ToStringDN
$LN3@ToStringDN:

; 308  :     *out_ptr = L'\0';

	xor	edx, edx
	mov	eax, DWORD PTR _out_ptr$[ebp]
	mov	WORD PTR [eax], dx

; 309  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ToStringDN_Finalize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.c
_TEXT	SEGMENT
_count$1 = -76						; size = 4
_in_count$ = -72					; size = 4
_in_ptr$ = -68						; size = 4
_count$2 = -64						; size = 4
_state$ = -56						; size = 48
__$ArrayPad$ = -4					; size = 4
_in_buf$ = 8						; size = 4
_in_buf_count$ = 12					; size = 4
_out_buf$ = 16						; size = 4
_out_buf_count$ = 20					; size = 4
_format$ = 24						; size = 1
_width$ = 28						; size = 4
_format_option$ = 32					; size = 4
_PrintDecimal PROC

; 257  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	edi
	lea	edi, DWORD PTR [ebp-76]
	mov	ecx, 19					; 00000013H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, OFFSET __493E81D3_pmc_tostring@c
	call	@__CheckForDebuggerJustMyCode@4

; 258  :     struct TOSTRINGN_OUTPUT_STATE state;
; 259  :     InitializeOutputState(&state, out_buf, format, format_option);

	mov	eax, DWORD PTR _format_option$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _format$[ebp]
	push	ecx
	mov	edx, DWORD PTR _out_buf$[ebp]
	push	edx
	lea	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_InitializeOutputState
	add	esp, 16					; 00000010H

; 260  :     if (format == 'N' && width > 0)

	movsx	ecx, BYTE PTR _format$[ebp]
	cmp	ecx, 78					; 0000004eH
	jne	SHORT $LN8@PrintDecim
	cmp	DWORD PTR _width$[ebp], 0
	jbe	SHORT $LN8@PrintDecim

; 261  :     {
; 262  :         _UINT32_T count = width;

	mov	edx, DWORD PTR _width$[ebp]
	mov	DWORD PTR _count$2[ebp], edx
$LN2@PrintDecim:

; 263  :         while (count > 0)

	cmp	DWORD PTR _count$2[ebp], 0
	jbe	SHORT $LN3@PrintDecim

; 264  :         {
; 265  :             OutputUngroupedOneChar(&state, 0);

	push	0
	lea	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_OutputUngroupedOneChar
	add	esp, 8

; 266  :             --count;

	mov	ecx, DWORD PTR _count$2[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$2[ebp], ecx

; 267  :         }

	jmp	SHORT $LN2@PrintDecim
$LN3@PrintDecim:

; 268  :         OutputDecimalSeparator(&state);

	lea	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_OutputDecimalSeparator
	add	esp, 4
$LN8@PrintDecim:

; 269  :     }
; 270  :     __UNIT_TYPE_DIV* in_ptr = in_buf;

	mov	eax, DWORD PTR _in_buf$[ebp]
	mov	DWORD PTR _in_ptr$[ebp], eax

; 271  :     __UNIT_TYPE in_count = in_buf_count - 1;

	mov	ecx, DWORD PTR _in_buf_count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _in_count$[ebp], ecx
$LN4@PrintDecim:

; 272  :     while (in_count != 0)

	cmp	DWORD PTR _in_count$[ebp], 0
	je	SHORT $LN5@PrintDecim

; 273  :     {
; 274  :         ToStringDN_1WORD(&state, *in_ptr);

	mov	edx, DWORD PTR _in_ptr$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_ToStringDN_1WORD
	add	esp, 8

; 275  :         ++in_ptr;

	mov	edx, DWORD PTR _in_ptr$[ebp]
	add	edx, 4
	mov	DWORD PTR _in_ptr$[ebp], edx

; 276  :         --in_count;

	mov	eax, DWORD PTR _in_count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _in_count$[ebp], eax

; 277  :     }

	jmp	SHORT $LN4@PrintDecim
$LN5@PrintDecim:

; 278  :     ToStringDN_LEADING_1WORD(&state, *in_ptr);

	mov	ecx, DWORD PTR _in_ptr$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	lea	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_ToStringDN_LEADING_1WORD
	add	esp, 8

; 279  :     ++in_ptr;

	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 4
	mov	DWORD PTR _in_ptr$[ebp], ecx

; 280  :     --in_count;

	mov	edx, DWORD PTR _in_count$[ebp]
	sub	edx, 1
	mov	DWORD PTR _in_count$[ebp], edx

; 281  :     if (format == 'D')

	movsx	eax, BYTE PTR _format$[ebp]
	cmp	eax, 68					; 00000044H
	jne	SHORT $LN9@PrintDecim

; 282  :     {
; 283  :         if (state.OUT_PTR < out_buf + width)

	mov	ecx, DWORD PTR _width$[ebp]
	mov	edx, DWORD PTR _out_buf$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	cmp	DWORD PTR _state$[ebp+44], eax
	jae	SHORT $LN9@PrintDecim

; 284  :         {
; 285  :             int count = width - (int)(state.OUT_PTR - out_buf);

	mov	ecx, DWORD PTR _state$[ebp+44]
	sub	ecx, DWORD PTR _out_buf$[ebp]
	sar	ecx, 1
	mov	edx, DWORD PTR _width$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _count$1[ebp], edx
$LN6@PrintDecim:

; 286  :             while (count > 0)

	cmp	DWORD PTR _count$1[ebp], 0
	jle	SHORT $LN9@PrintDecim

; 287  :             {
; 288  :                 OutputOneChar(&state, 0);

	push	0
	lea	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_OutputOneChar
	add	esp, 8

; 289  :                 --count;

	mov	ecx, DWORD PTR _count$1[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count$1[ebp], ecx

; 290  :             }

	jmp	SHORT $LN6@PrintDecim
$LN9@PrintDecim:

; 291  :         }
; 292  :     }
; 293  :     *out_buf_count = state.OUT_PTR - out_buf;

	mov	edx, DWORD PTR _state$[ebp+44]
	sub	edx, DWORD PTR _out_buf$[ebp]
	sar	edx, 1
	mov	eax, DWORD PTR _out_buf_count$[ebp]
	mov	DWORD PTR [eax], edx

; 294  :     *state.OUT_PTR = '\0';

	xor	ecx, ecx
	mov	edx, DWORD PTR _state$[ebp+44]
	mov	WORD PTR [edx], cx

; 295  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@PrintDecim
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 76					; 0000004cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN14@PrintDecim:
	DD	1
	DD	$LN13@PrintDecim
$LN13@PrintDecim:
	DD	-56					; ffffffc8H
	DD	48					; 00000030H
	DD	$LN12@PrintDecim
$LN12@PrintDecim:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
_PrintDecimal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.c
_TEXT	SEGMENT
_r$ = -8						; size = 4
_state$ = 8						; size = 4
_x$ = 12						; size = 4
_ToStringDN_1WORD PROC

; 197  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __493E81D3_pmc_tostring@c
	call	@__CheckForDebuggerJustMyCode@4

; 198  :     __UNIT_TYPE_DIV r;
; 199  :     if (sizeof(__UNIT_TYPE_DIV) >= sizeof(_UINT64_T))

	xor	eax, eax
	je	$LN2@ToStringDN

; 200  :     {
; 201  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	lea	ecx, DWORD PTR _r$[ebp]
	push	ecx
	push	10					; 0000000aH
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	push	0
	call	__DIVREM_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _x$[ebp], eax
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_OutputOneChar
	add	esp, 8

; 202  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	lea	edx, DWORD PTR _r$[ebp]
	push	edx
	push	10					; 0000000aH
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	push	0
	call	__DIVREM_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _x$[ebp], eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_OutputOneChar
	add	esp, 8

; 203  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	push	0
	call	__DIVREM_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _x$[ebp], eax
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_OutputOneChar
	add	esp, 8

; 204  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	lea	ecx, DWORD PTR _r$[ebp]
	push	ecx
	push	10					; 0000000aH
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	push	0
	call	__DIVREM_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _x$[ebp], eax
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_OutputOneChar
	add	esp, 8

; 205  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	lea	edx, DWORD PTR _r$[ebp]
	push	edx
	push	10					; 0000000aH
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	push	0
	call	__DIVREM_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _x$[ebp], eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_OutputOneChar
	add	esp, 8

; 206  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	push	0
	call	__DIVREM_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _x$[ebp], eax
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_OutputOneChar
	add	esp, 8

; 207  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	lea	ecx, DWORD PTR _r$[ebp]
	push	ecx
	push	10					; 0000000aH
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	push	0
	call	__DIVREM_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _x$[ebp], eax
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_OutputOneChar
	add	esp, 8

; 208  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	lea	edx, DWORD PTR _r$[ebp]
	push	edx
	push	10					; 0000000aH
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	push	0
	call	__DIVREM_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _x$[ebp], eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_OutputOneChar
	add	esp, 8

; 209  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	push	0
	call	__DIVREM_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _x$[ebp], eax
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_OutputOneChar
	add	esp, 8

; 210  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	lea	ecx, DWORD PTR _r$[ebp]
	push	ecx
	push	10					; 0000000aH
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	push	0
	call	__DIVREM_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _x$[ebp], eax
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_OutputOneChar
	add	esp, 8

; 211  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 212  :         if (sizeof(r) == sizeof(_UINT64_T))

	xor	edx, edx
	je	SHORT $LN3@ToStringDN

; 213  :             AddToDIV64Counter(10);

	push	10					; 0000000aH
	call	_AddToDIV64Counter
	add	esp, 4
	jmp	SHORT $LN2@ToStringDN
$LN3@ToStringDN:

; 214  :         else
; 215  :             AddToDIV32Counter(10);

	push	10					; 0000000aH
	call	_AddToDIV32Counter
	add	esp, 4
$LN2@ToStringDN:

; 216  : #endif
; 217  :     }
; 218  :     if (sizeof(__UNIT_TYPE_DIV) >= sizeof(_UINT32_T))

	mov	eax, 1
	test	eax, eax
	je	$LN5@ToStringDN

; 219  :     {
; 220  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	lea	ecx, DWORD PTR _r$[ebp]
	push	ecx
	push	10					; 0000000aH
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	push	0
	call	__DIVREM_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _x$[ebp], eax
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_OutputOneChar
	add	esp, 8

; 221  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	lea	edx, DWORD PTR _r$[ebp]
	push	edx
	push	10					; 0000000aH
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	push	0
	call	__DIVREM_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _x$[ebp], eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_OutputOneChar
	add	esp, 8

; 222  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	push	0
	call	__DIVREM_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _x$[ebp], eax
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_OutputOneChar
	add	esp, 8

; 223  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	lea	ecx, DWORD PTR _r$[ebp]
	push	ecx
	push	10					; 0000000aH
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	push	0
	call	__DIVREM_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _x$[ebp], eax
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	push	ecx
	call	_OutputOneChar
	add	esp, 8

; 224  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	lea	edx, DWORD PTR _r$[ebp]
	push	edx
	push	10					; 0000000aH
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	push	0
	call	__DIVREM_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _x$[ebp], eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_OutputOneChar
	add	esp, 8

; 225  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 226  :         if (sizeof(r) == sizeof(_UINT64_T))

	xor	eax, eax
	je	SHORT $LN6@ToStringDN

; 227  :             AddToDIV64Counter(5);

	push	5
	call	_AddToDIV64Counter
	add	esp, 4
	jmp	SHORT $LN5@ToStringDN
$LN6@ToStringDN:

; 228  :         else
; 229  :             AddToDIV32Counter(5);

	push	5
	call	_AddToDIV32Counter
	add	esp, 4
$LN5@ToStringDN:

; 230  : #endif
; 231  :     }
; 232  :     if (sizeof(__UNIT_TYPE_DIV) >= sizeof(_UINT16_T))

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN8@ToStringDN

; 233  :     {
; 234  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	lea	edx, DWORD PTR _r$[ebp]
	push	edx
	push	10					; 0000000aH
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	push	0
	call	__DIVREM_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _x$[ebp], eax
	mov	ecx, DWORD PTR _r$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_OutputOneChar
	add	esp, 8

; 235  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	push	0
	call	__DIVREM_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _x$[ebp], eax
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_OutputOneChar
	add	esp, 8

; 236  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 237  :         if (sizeof(r) == sizeof(_UINT64_T))

	xor	ecx, ecx
	je	SHORT $LN9@ToStringDN

; 238  :             AddToDIV64Counter(2);

	push	2
	call	_AddToDIV64Counter
	add	esp, 4
	jmp	SHORT $LN8@ToStringDN
$LN9@ToStringDN:

; 239  :         else
; 240  :             AddToDIV32Counter(2);

	push	2
	call	_AddToDIV32Counter
	add	esp, 4
$LN8@ToStringDN:

; 241  : #endif
; 242  :     }
; 243  :     if (sizeof(__UNIT_TYPE_DIV) >= sizeof(_BYTE_T))

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN1@ToStringDN

; 244  :     {
; 245  :         x = _DIVREM_UNIT(0, x, 10, &r); OutputOneChar(state, r);

	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	push	0
	call	__DIVREM_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _x$[ebp], eax
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_OutputOneChar
	add	esp, 8

; 246  :         OutputOneChar(state, x);

	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$[ebp]
	push	edx
	call	_OutputOneChar
	add	esp, 8

; 247  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 248  :         if (sizeof(r) == sizeof(_UINT64_T))

	xor	eax, eax
	je	SHORT $LN12@ToStringDN

; 249  :             IncrementDIV64Counter();

	call	_IncrementDIV64Counter
	jmp	SHORT $LN1@ToStringDN
$LN12@ToStringDN:

; 250  :         else
; 251  :             IncrementDIV32Counter();

	call	_IncrementDIV32Counter
$LN1@ToStringDN:

; 252  : #endif
; 253  :     }
; 254  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@ToStringDN
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN17@ToStringDN:
	DD	1
	DD	$LN16@ToStringDN
$LN16@ToStringDN:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN15@ToStringDN
$LN15@ToStringDN:
	DB	114					; 00000072H
	DB	0
_ToStringDN_1WORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.c
_TEXT	SEGMENT
_r$ = -8						; size = 4
_state$ = 8						; size = 4
_x$ = 12						; size = 4
_ToStringDN_LEADING_1WORD PROC

; 180  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __493E81D3_pmc_tostring@c
	call	@__CheckForDebuggerJustMyCode@4
$LN4@ToStringDN:

; 181  :     __UNIT_TYPE_DIV r;
; 182  :     do
; 183  :     {
; 184  :         x = _DIVREM_UNIT(0, x, 10, &r);

	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	push	0
	call	__DIVREM_UNIT
	add	esp, 16					; 00000010H
	mov	DWORD PTR _x$[ebp], eax

; 185  :         OutputOneChar(state, r);

	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	mov	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_OutputOneChar
	add	esp, 8

; 186  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 187  :         if (sizeof(r) == sizeof(_UINT64_T))

	xor	ecx, ecx
	je	SHORT $LN5@ToStringDN

; 188  :             IncrementDIV64Counter();

	call	_IncrementDIV64Counter
	jmp	SHORT $LN2@ToStringDN
$LN5@ToStringDN:

; 189  :         else
; 190  :             IncrementDIV32Counter();

	call	_IncrementDIV32Counter
$LN2@ToStringDN:

; 191  : #endif
; 192  :     } while (x != 0);

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN4@ToStringDN

; 193  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@ToStringDN
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN10@ToStringDN:
	DD	1
	DD	$LN9@ToStringDN
$LN9@ToStringDN:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN8@ToStringDN
$LN8@ToStringDN:
	DB	114					; 00000072H
	DB	0
_ToStringDN_LEADING_1WORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.c
_TEXT	SEGMENT
_state$ = 8						; size = 4
_x$ = 12						; size = 4
_OutputOneChar PROC

; 139  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __493E81D3_pmc_tostring@c
	call	@__CheckForDebuggerJustMyCode@4

; 140  :     if (state->FORMAT == 'N')

	mov	eax, DWORD PTR _state$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 78					; 0000004eH
	jne	$LN2@OutputOneC

; 141  :     {
; 142  :         // 書式が N である場合
; 143  :         if (state->CURRENT_GROUP_SIZE > 0 && state->CURRENT_GROUP_INDEX >= state->CURRENT_GROUP_SIZE)

	mov	edx, DWORD PTR _state$[ebp]
	cmp	DWORD PTR [edx+36], 0
	jle	$LN4@OutputOneC
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [eax+40]
	cmp	edx, DWORD PTR [ecx+36]
	jl	$LN4@OutputOneC

; 144  :         {
; 145  :             // 現在のグループ幅が 0 ではなく、かつ既に出力した文字数がグループ幅に達した場合
; 146  : 
; 147  :             // グループ区切り文字を出力してから与えられた文字を出力する
; 148  :             lstrcpyW(state->OUT_PTR, state->GROUP_SEPARATOR);

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 2
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 149  :             state->OUT_PTR += state->GROUP_SEPARATOR_LENGTH;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+44]
	lea	ecx, DWORD PTR [eax+ecx*2]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+44], ecx

; 150  :             *state->OUT_PTR = decimal_digits[x];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _x$[ebp]
	mov	ax, WORD PTR _decimal_digits[edx*2]
	mov	WORD PTR [ecx], ax

; 151  :             state->OUT_PTR += 1;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	add	edx, 2
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+44], edx

; 152  :             state->CURRENT_GROUP_INDEX = 1;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+40], 1

; 153  : 
; 154  :             // 次のグループが存在すればそのグループに移行する
; 155  :             if (state->CURRENT_GROUP[1] != L'\0')

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movzx	edx, WORD PTR [ecx+edx]
	test	edx, edx
	je	SHORT $LN6@OutputOneC

; 156  :             {
; 157  :                 state->CURRENT_GROUP += 1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	add	ecx, 2
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+32], ecx

; 158  :                 state->CURRENT_GROUP_SIZE = *state->CURRENT_GROUP - L'0';

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movzx	edx, WORD PTR [ecx]
	sub	edx, 48					; 00000030H
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+36], edx
$LN6@OutputOneC:

; 159  :             }
; 160  :         }

	jmp	SHORT $LN5@OutputOneC
$LN4@OutputOneC:

; 161  :         else
; 162  :         {
; 163  :             // 現在のグループの幅が 0 であるかあるいは出力した文字数がグループ幅に達していない場合
; 164  :             *state->OUT_PTR = decimal_digits[x];

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR _x$[ebp]
	mov	cx, WORD PTR _decimal_digits[eax*2]
	mov	WORD PTR [edx], cx

; 165  :             state->OUT_PTR += 1;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+44]
	add	eax, 2
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+44], eax

; 166  :             state->CURRENT_GROUP_INDEX += 1;

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+40]
	add	eax, 1
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+40], eax
$LN5@OutputOneC:

; 167  :         }
; 168  :     }

	jmp	SHORT $LN1@OutputOneC
$LN2@OutputOneC:

; 169  :     else
; 170  :     {
; 171  :         // 書式が N ではない (つまり D である) 場合
; 172  :         
; 173  :         *state->OUT_PTR = decimal_digits[x];

	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	dx, WORD PTR _decimal_digits[ecx*2]
	mov	WORD PTR [eax], dx

; 174  :         state->OUT_PTR += 1;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	add	ecx, 2
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+44], ecx
$LN1@OutputOneC:

; 175  :     }
; 176  : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_OutputOneChar ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.c
_TEXT	SEGMENT
_state$ = 8						; size = 4
_x$ = 12						; size = 4
_OutputUngroupedOneChar PROC

; 133  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __493E81D3_pmc_tostring@c
	call	@__CheckForDebuggerJustMyCode@4

; 134  :     *state->OUT_PTR = decimal_digits[x];

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _x$[ebp]
	mov	ax, WORD PTR _decimal_digits[edx*2]
	mov	WORD PTR [ecx], ax

; 135  :     state->OUT_PTR += 1;

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	add	edx, 2
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+44], edx

; 136  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_OutputUngroupedOneChar ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.c
_TEXT	SEGMENT
_state$ = 8						; size = 4
_OutputDecimalSeparator PROC

; 127  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __493E81D3_pmc_tostring@c
	call	@__CheckForDebuggerJustMyCode@4

; 128  :     lstrcpyW(state->OUT_PTR, state->DECIMAL_SEPARATOR);

	mov	eax, DWORD PTR _state$[ebp]
	add	eax, 12					; 0000000cH
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 129  :     state->OUT_PTR += state->DECIMAL_SEPARATOR_LENGTH;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [edx+44]
	lea	ecx, DWORD PTR [eax+ecx*2]
	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+44], ecx

; 130  : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_OutputDecimalSeparator ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.c
_TEXT	SEGMENT
_out_ptr$ = -8						; size = 4
_in_ptr$ = -4						; size = 4
_state$ = 8						; size = 4
_out_buf$ = 12						; size = 4
_format$ = 16						; size = 1
_format_option$ = 20					; size = 4
_InitializeOutputState PROC

; 95   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __493E81D3_pmc_tostring@c
	call	@__CheckForDebuggerJustMyCode@4

; 96   :     state->FORMAT = format;

	mov	eax, DWORD PTR _state$[ebp]
	mov	cl, BYTE PTR _format$[ebp]
	mov	BYTE PTR [eax], cl

; 97   : 
; 98   :     state->GROUP_SEPARATOR_LENGTH = lstrlenW(format_option->Number.GroupSeparator);

	mov	edx, DWORD PTR _format_option$[ebp]
	add	edx, 52					; 00000034H
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+24], eax

; 99   :     wchar_t* in_ptr = format_option->Number.GroupSeparator;

	mov	edx, DWORD PTR _format_option$[ebp]
	add	edx, 52					; 00000034H
	mov	DWORD PTR _in_ptr$[ebp], edx

; 100  :     wchar_t* out_ptr = state->GROUP_SEPARATOR + state->GROUP_SEPARATOR_LENGTH;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _state$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2+2]
	mov	DWORD PTR _out_ptr$[ebp], eax

; 101  :     *out_ptr-- = '\0';

	xor	ecx, ecx
	mov	edx, DWORD PTR _out_ptr$[ebp]
	mov	WORD PTR [edx], cx
	mov	eax, DWORD PTR _out_ptr$[ebp]
	sub	eax, 2
	mov	DWORD PTR _out_ptr$[ebp], eax
$LN2@Initialize:

; 102  :     while (*in_ptr != L'\0')

	mov	ecx, DWORD PTR _in_ptr$[ebp]
	movzx	edx, WORD PTR [ecx]
	test	edx, edx
	je	SHORT $LN3@Initialize

; 103  :     {
; 104  :         *out_ptr = *in_ptr;

	mov	eax, DWORD PTR _out_ptr$[ebp]
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx

; 105  :         --out_ptr;

	mov	eax, DWORD PTR _out_ptr$[ebp]
	sub	eax, 2
	mov	DWORD PTR _out_ptr$[ebp], eax

; 106  :         ++in_ptr;

	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx

; 107  :     }

	jmp	SHORT $LN2@Initialize
$LN3@Initialize:

; 108  : 
; 109  :     state->DECIMAL_SEPARATOR_LENGTH = lstrlenW(format_option->Number.DecimalSeparator);

	mov	edx, DWORD PTR _format_option$[ebp]
	add	edx, 58					; 0000003aH
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+28], eax

; 110  :     in_ptr = format_option->Number.DecimalSeparator;

	mov	edx, DWORD PTR _format_option$[ebp]
	add	edx, 58					; 0000003aH
	mov	DWORD PTR _in_ptr$[ebp], edx

; 111  :     out_ptr = state->DECIMAL_SEPARATOR + state->DECIMAL_SEPARATOR_LENGTH;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _state$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2+12]
	mov	DWORD PTR _out_ptr$[ebp], eax

; 112  :     *out_ptr-- = '\0';

	xor	ecx, ecx
	mov	edx, DWORD PTR _out_ptr$[ebp]
	mov	WORD PTR [edx], cx
	mov	eax, DWORD PTR _out_ptr$[ebp]
	sub	eax, 2
	mov	DWORD PTR _out_ptr$[ebp], eax
$LN4@Initialize:

; 113  :     while (*in_ptr != L'\0')

	mov	ecx, DWORD PTR _in_ptr$[ebp]
	movzx	edx, WORD PTR [ecx]
	test	edx, edx
	je	SHORT $LN5@Initialize

; 114  :     {
; 115  :         *out_ptr = *in_ptr;

	mov	eax, DWORD PTR _out_ptr$[ebp]
	mov	ecx, DWORD PTR _in_ptr$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx

; 116  :         --out_ptr;

	mov	eax, DWORD PTR _out_ptr$[ebp]
	sub	eax, 2
	mov	DWORD PTR _out_ptr$[ebp], eax

; 117  :         ++in_ptr;

	mov	ecx, DWORD PTR _in_ptr$[ebp]
	add	ecx, 2
	mov	DWORD PTR _in_ptr$[ebp], ecx

; 118  :     }

	jmp	SHORT $LN4@Initialize
$LN5@Initialize:

; 119  : 
; 120  :     state->CURRENT_GROUP = &format_option->Number.GroupSizes[0];

	mov	edx, 2
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _format_option$[ebp]
	lea	edx, DWORD PTR [ecx+eax+64]
	mov	eax, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+32], edx

; 121  :     state->CURRENT_GROUP_SIZE = *state->CURRENT_GROUP - L'0';

	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	movzx	eax, WORD PTR [edx]
	sub	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [ecx+36], eax

; 122  :     state->CURRENT_GROUP_INDEX = 0;

	mov	edx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [edx+40], 0

; 123  :     state->OUT_PTR = out_buf;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _out_buf$[ebp]
	mov	DWORD PTR [eax+44], ecx

; 124  : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_InitializeOutputState ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.c
_TEXT	SEGMENT
_temp$1 = -92						; size = 4
_r_value$2 = -84					; size = 4
_work_u_count$ = -76					; size = 4
_r_ptr$ = -72						; size = 4
_q_ptr$ = -68						; size = 4
_u_ptr$ = -64						; size = 4
_work_buf_2$ = -60					; size = 4
_work_buf_2_words$ = -52				; size = 4
_work_buf_2_code$ = -40					; size = 4
_work_buf_1$ = -32					; size = 4
_work_buf_1_words$ = -24				; size = 4
_work_buf_1_code$ = -12					; size = 4
_result$ = -4						; size = 4
_x_buf$ = 8						; size = 4
_x_buf_size$ = 12					; size = 4
_x_bit_count$ = 16					; size = 4
_base_value$ = 20					; size = 4
_r_buf$ = 24						; size = 4
_r_buf_count$ = 28					; size = 4
_ConvertCardinalNumber PROC

; 52   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	edi
	lea	edi, DWORD PTR [ebp-92]
	mov	ecx, 23					; 00000017H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __493E81D3_pmc_tostring@c
	call	@__CheckForDebuggerJustMyCode@4

; 53   :     PMC_STATUS_CODE result;
; 54   :     __UNIT_TYPE work_buf_1_code;
; 55   :     __UNIT_TYPE work_buf_1_words;
; 56   :     __UNIT_TYPE_DIV* work_buf_1 = (__UNIT_TYPE_DIV*)AllocateBlock(x_bit_count + __UNIT_TYPE_BIT_COUNT, &work_buf_1_words, &work_buf_1_code);

	lea	eax, DWORD PTR _work_buf_1_code$[ebp]
	push	eax
	lea	ecx, DWORD PTR _work_buf_1_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x_bit_count$[ebp]
	add	edx, 32					; 00000020H
	push	edx
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_buf_1$[ebp], eax

; 57   :     if (work_buf_1 == NULL)

	cmp	DWORD PTR _work_buf_1$[ebp], 0
	jne	SHORT $LN6@ConvertCar

; 58   :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@ConvertCar
$LN6@ConvertCar:

; 59   :     __UNIT_TYPE work_buf_2_code;
; 60   :     __UNIT_TYPE work_buf_2_words;
; 61   :     __UNIT_TYPE_DIV* work_buf_2 = (__UNIT_TYPE_DIV*)AllocateBlock(x_bit_count + __UNIT_TYPE_BIT_COUNT, &work_buf_2_words, &work_buf_2_code);

	lea	eax, DWORD PTR _work_buf_2_code$[ebp]
	push	eax
	lea	ecx, DWORD PTR _work_buf_2_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x_bit_count$[ebp]
	add	edx, 32					; 00000020H
	push	edx
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_buf_2$[ebp], eax

; 62   :     if (work_buf_2 == NULL)

	cmp	DWORD PTR _work_buf_2$[ebp], 0
	jne	SHORT $LN7@ConvertCar

; 63   :     {
; 64   :         DeallocateBlock((__UNIT_TYPE*)work_buf_1, work_buf_1_words);

	mov	eax, DWORD PTR _work_buf_1_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_buf_1$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 65   :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5					; fffffffbH
	jmp	$LN1@ConvertCar
$LN7@ConvertCar:

; 66   :     }
; 67   :     __UNIT_TYPE_DIV* u_ptr = work_buf_1;

	mov	edx, DWORD PTR _work_buf_1$[ebp]
	mov	DWORD PTR _u_ptr$[ebp], edx

; 68   :     __UNIT_TYPE_DIV* q_ptr = work_buf_2;

	mov	eax, DWORD PTR _work_buf_2$[ebp]
	mov	DWORD PTR _q_ptr$[ebp], eax

; 69   :     _COPY_MEMORY_UNIT_DIV(u_ptr, x_buf, x_buf_size);

	mov	ecx, DWORD PTR _x_buf_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	call	__COPY_MEMORY_UNIT_DIV
	add	esp, 12					; 0000000cH

; 70   :     __UNIT_TYPE_DIV* r_ptr = r_buf;

	mov	ecx, DWORD PTR _r_buf$[ebp]
	mov	DWORD PTR _r_ptr$[ebp], ecx

; 71   :     __UNIT_TYPE work_u_count = work_buf_1_words * (sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV));

	mov	edx, DWORD PTR _work_buf_1_words$[ebp]
	mov	DWORD PTR _work_u_count$[ebp], edx
$LN2@ConvertCar:

; 72   :     while (work_u_count > 0)

	cmp	DWORD PTR _work_u_count$[ebp], 0
	jbe	$LN3@ConvertCar

; 73   :     {
; 74   :         _ZERO_MEMORY_UNIT_DIV(q_ptr, work_u_count);

	mov	eax, DWORD PTR _work_u_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q_ptr$[ebp]
	push	ecx
	call	__ZERO_MEMORY_UNIT_DIV
	add	esp, 8

; 75   :         __UNIT_TYPE_DIV r_value;
; 76   :         DivRem_X_1W(u_ptr, work_u_count, base_value, q_ptr, &r_value);

	lea	edx, DWORD PTR _r_value$2[ebp]
	push	edx
	mov	eax, DWORD PTR _q_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base_value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_u_count$[ebp]
	push	edx
	mov	eax, DWORD PTR _u_ptr$[ebp]
	push	eax
	call	_DivRem_X_1W
	add	esp, 20					; 00000014H

; 77   :         if ((result = CheckBlockLight((__UNIT_TYPE*)work_buf_2, work_buf_2_code)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _work_buf_2_code$[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_buf_2$[ebp]
	push	edx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN8@ConvertCar

; 78   :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@ConvertCar
$LN8@ConvertCar:

; 79   :         if ((result = CheckBlockLight((__UNIT_TYPE*)work_buf_1, work_buf_1_code)) != PMC_STATUS_OK)

	mov	eax, DWORD PTR _work_buf_1_code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_buf_1$[ebp]
	push	ecx
	call	_CheckBlockLight
	add	esp, 8
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN9@ConvertCar

; 80   :             return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@ConvertCar
$LN9@ConvertCar:

; 81   :         *r_ptr++ = r_value;

	mov	edx, DWORD PTR _r_ptr$[ebp]
	mov	eax, DWORD PTR _r_value$2[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _r_ptr$[ebp]
	add	ecx, 4
	mov	DWORD PTR _r_ptr$[ebp], ecx

; 82   :         __UNIT_TYPE_DIV* temp = u_ptr;

	mov	edx, DWORD PTR _u_ptr$[ebp]
	mov	DWORD PTR _temp$1[ebp], edx

; 83   :         u_ptr = q_ptr;

	mov	eax, DWORD PTR _q_ptr$[ebp]
	mov	DWORD PTR _u_ptr$[ebp], eax

; 84   :         q_ptr = temp;

	mov	ecx, DWORD PTR _temp$1[ebp]
	mov	DWORD PTR _q_ptr$[ebp], ecx
$LN4@ConvertCar:

; 85   :         while (work_u_count > 0 && u_ptr[work_u_count - 1] == 0)

	cmp	DWORD PTR _work_u_count$[ebp], 0
	jbe	SHORT $LN5@ConvertCar
	mov	edx, DWORD PTR _work_u_count$[ebp]
	mov	eax, DWORD PTR _u_ptr$[ebp]
	cmp	DWORD PTR [eax+edx*4-4], 0
	jne	SHORT $LN5@ConvertCar

; 86   :             --work_u_count;

	mov	ecx, DWORD PTR _work_u_count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _work_u_count$[ebp], ecx
	jmp	SHORT $LN4@ConvertCar
$LN5@ConvertCar:

; 87   :     }

	jmp	$LN2@ConvertCar
$LN3@ConvertCar:

; 88   :     *r_buf_count = r_ptr - r_buf;

	mov	edx, DWORD PTR _r_ptr$[ebp]
	sub	edx, DWORD PTR _r_buf$[ebp]
	sar	edx, 2
	mov	eax, DWORD PTR _r_buf_count$[ebp]
	mov	DWORD PTR [eax], edx

; 89   :     DeallocateBlock((__UNIT_TYPE*)work_buf_2, work_buf_2_words);

	mov	ecx, DWORD PTR _work_buf_2_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _work_buf_2$[ebp]
	push	edx
	call	_DeallocateBlock
	add	esp, 8

; 90   :     DeallocateBlock((__UNIT_TYPE*)work_buf_1, work_buf_1_words);

	mov	eax, DWORD PTR _work_buf_1_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_buf_1$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 91   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@ConvertCar:

; 92   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@ConvertCar
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 92					; 0000005cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN17@ConvertCar:
	DD	5
	DD	$LN16@ConvertCar
$LN16@ConvertCar:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN11@ConvertCar
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN12@ConvertCar
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN13@ConvertCar
	DD	-52					; ffffffccH
	DD	4
	DD	$LN14@ConvertCar
	DD	-84					; ffffffacH
	DD	4
	DD	$LN15@ConvertCar
$LN15@ConvertCar:
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
$LN14@ConvertCar:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	50					; 00000032H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN13@ConvertCar:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	50					; 00000032H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN12@ConvertCar:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	49					; 00000031H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN11@ConvertCar:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	49					; 00000031H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_ConvertCardinalNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_x$ = 8							; size = 4
_count$ = 12						; size = 4
__ROTATE_L_UNIT PROC

; 475  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 476  : #ifdef _M_IX86
; 477  :         return (_rotl(x, count));

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rol	eax, cl

; 478  : #elif defined(_M_X64)
; 479  :         return (_rotl64(x, count));
; 480  : #else
; 481  : #error unknown platform
; 482  : #endif
; 483  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ROTATE_L_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_t$1 = -8						; size = 8
_u_high$ = 8						; size = 4
_u_low$ = 12						; size = 4
_v$ = 16						; size = 4
_r$ = 20						; size = 4
__DIVREM_UNIT PROC

; 378  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 379  : #ifdef _MSC_VER
; 380  :         if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@DIVREM_UNI

; 381  :         {
; 382  :             // 64bit/32bitの除算を行う組み込み関数は実装されていない。
; 383  :             _UINT64_T t = _FROMWORDTODWORD(u_high, u_low);

	mov	ecx, DWORD PTR _u_low$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_high$[ebp]
	push	edx
	call	__FROMWORDTODWORD
	add	esp, 8
	mov	DWORD PTR _t$1[ebp], eax
	mov	DWORD PTR _t$1[ebp+4], edx

; 384  :             *r = (_UINT32_T)(t % v);

	mov	eax, DWORD PTR _v$[ebp]
	xor	ecx, ecx
	push	ecx
	push	eax
	mov	edx, DWORD PTR _t$1[ebp+4]
	push	edx
	mov	eax, DWORD PTR _t$1[ebp]
	push	eax
	call	__aullrem
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [ecx], eax

; 385  :             return ((_UINT32_T)(t / v));

	mov	edx, DWORD PTR _v$[ebp]
	xor	eax, eax
	push	eax
	push	edx
	mov	ecx, DWORD PTR _t$1[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _t$1[ebp]
	push	edx
	call	__aulldiv
	jmp	SHORT $LN1@DIVREM_UNI

; 386  :         }

	jmp	SHORT $LN1@DIVREM_UNI
$LN2@DIVREM_UNI:

; 387  :         else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))

	xor	eax, eax
	je	SHORT $LN4@DIVREM_UNI

; 388  :         {
; 389  :             // 以下の理由のため、MSVCでは 128bit/64bit の除算を実装できない。運用で回避すること。
; 390  :             // ・(x64 に限らず) 除算の組み込み関数が用意されていない。
; 391  :             // ・128bit 整数のデータ型が用意されていない。
; 392  :             // ・x64 ではインラインアセンブラがサポートされていない。
; 393  :             *r = 0;

	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [ecx], 0

; 394  :             return (0);

	xor	eax, eax
	jmp	SHORT $LN1@DIVREM_UNI

; 395  :         }

	jmp	SHORT $LN1@DIVREM_UNI
$LN4@DIVREM_UNI:

; 396  :         else
; 397  :         {
; 398  :             // 未知のプラットフォームの場合はとりあえず適当なものを返す。
; 399  :             *r = 0;

	mov	edx, DWORD PTR _r$[ebp]
	mov	DWORD PTR [edx], 0

; 400  :             return (0);

	xor	eax, eax
$LN1@DIVREM_UNI:

; 401  :         }
; 402  : #elif defined(__GNUC__)
; 403  :         __UNIT_TYPE q;
; 404  :         if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))
; 405  :             __asm__("divl %4": "=a"(q), "=d"(*r) : "0"(u_low), "1"(u_high), "rm"(v));
; 406  :         else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))
; 407  :             __asm__("divq %4": "=a"(q), "=d"(*r) : "0"(u_low), "1"(u_high), "rm"(v));
; 408  :         else
; 409  :         {
; 410  :             // 未知のプラットフォームの場合はとりあえず適当なものを返す。
; 411  :             *r = 0;
; 412  :             q = 0;
; 413  :         }
; 414  :         return (q);
; 415  : #else
; 416  : #error unknown compiler
; 417  : #endif
; 418  :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__DIVREM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_u$ = 8							; size = 4
_v$ = 12						; size = 4
__DIVIDE_CEILING_UNIT PROC

; 187  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 188  :         return ((u + v - 1) / v);

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _u$[ebp]
	lea	eax, DWORD PTR [ecx+eax-1]
	xor	edx, edx
	div	DWORD PTR _v$[ebp]

; 189  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__DIVIDE_CEILING_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_value_high$ = 8					; size = 4
_value_low$ = 12					; size = 4
__FROMWORDTODWORD PROC

; 171  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	edx, edx
	mov	eax, DWORD PTR _value_high$[ebp]
	mov	cl, 32					; 00000020H
	call	__allshl
	xor	ecx, ecx
	or	eax, DWORD PTR _value_low$[ebp]
	or	edx, ecx

; 173  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__FROMWORDTODWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_x$ = 12						; size = 2
_count$ = 16						; size = 4
__FILL_MEMORY_16 PROC

; 143  :     {

	push	ebp
	mov	ebp, esp
	push	edi
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 144  :         __stosw(d, x, count);

	mov	edi, DWORD PTR _d$[ebp]
	mov	ax, WORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep stosw

; 145  :     }

	pop	edi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__FILL_MEMORY_16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_count$ = 12						; size = 4
__ZERO_MEMORY_UNIT_DIV PROC

; 121  :     {

	push	ebp
	mov	ebp, esp
	push	edi
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 122  : #ifdef _M_IX86
; 123  :         __stosd((unsigned long*)d, 0, (unsigned long)count);

	mov	edi, DWORD PTR _d$[ebp]
	xor	eax, eax
	mov	ecx, DWORD PTR _count$[ebp]
	rep stosd

; 124  : #elif defined(_M_X64)
; 125  : #ifdef _MSC_VER
; 126  :         __stosd((unsigned long*)d, 0, (unsigned long)count);
; 127  : #elif defined(__GNUC__)
; 128  :         __stosq(d, 0, count);
; 129  : #else
; 130  : #error unknown compiler
; 131  : #endif
; 132  : #else
; 133  : #error unknown platform
; 134  : #endif
; 135  :     }

	pop	edi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__ZERO_MEMORY_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT_DIV PROC

; 71   :     {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 72   : #ifdef _M_IX86
; 73   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	edi, DWORD PTR _d$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep movsd

; 74   : #elif defined(_M_X64)
; 75   : #ifdef _MSC_VER
; 76   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);
; 77   : #elif defined(__GNUC__)
; 78   :         __movsq(d, s, count);
; 79   : #else
; 80   : #error unknown compiler
; 81   : #endif
; 82   : #else
; 83   : #error unknown platform
; 84   : #endif
; 85   :     }

	pop	edi
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__COPY_MEMORY_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
_TEXT	SEGMENT
_value$ = 8						; size = 4
_AddToDIV64Counter PROC

; 347  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BB6D3116_pmc_uint_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV64, value);

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, OFFSET _statistics_info+8
	lock	 xadd	 DWORD PTR [ecx], eax

; 349  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_AddToDIV64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
_TEXT	SEGMENT
_value$ = 8						; size = 4
_AddToDIV32Counter PROC

; 341  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BB6D3116_pmc_uint_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 342  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, OFFSET _statistics_info+12
	lock	 xadd	 DWORD PTR [ecx], eax

; 343  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_AddToDIV32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
_TEXT	SEGMENT
_IncrementDIV64Counter PROC

; 324  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BB6D3116_pmc_uint_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 325  :         _InterlockedIncrement(&statistics_info.COUNT_DIV64);

	lock	 inc	 (null) PTR _statistics_info+8

; 326  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_IncrementDIV64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
_TEXT	SEGMENT
_IncrementDIV32Counter PROC

; 318  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BB6D3116_pmc_uint_internal@h
	call	@__CheckForDebuggerJustMyCode@4

; 319  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock	 inc	 (null) PTR _statistics_info+12

; 320  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_IncrementDIV32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.c
_TEXT	SEGMENT
tv135 = -28						; size = 4
tv95 = -24						; size = 4
tv86 = -20						; size = 4
tv76 = -16						; size = 4
tv71 = -12						; size = 4
_result$ = -8						; size = 4
_nx$ = -4						; size = 4
_x$ = 8							; size = 4
_buffer$ = 12						; size = 4
_buffer_size$ = 16					; size = 4
_format$ = 20						; size = 1
_width$ = 24						; size = 4
_format_option$ = 28					; size = 4
_PMC_ToString@24 PROC

; 526  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __493E81D3_pmc_tostring@c
	call	@__CheckForDebuggerJustMyCode@4

; 527  :     if (x == NULL)

	cmp	DWORD PTR _x$[ebp], 0
	jne	SHORT $LN4@PMC_ToStri

; 528  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_ToStri
$LN4@PMC_ToStri:

; 529  :     if (buffer == NULL)

	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN5@PMC_ToStri

; 530  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
	jmp	$LN1@PMC_ToStri
$LN5@PMC_ToStri:

; 531  :     if (format_option == NULL)

	cmp	DWORD PTR _format_option$[ebp], 0
	jne	SHORT $LN6@PMC_ToStri

; 532  :         format_option = &default_number_format_option;

	mov	DWORD PTR _format_option$[ebp], OFFSET _default_number_format_option
$LN6@PMC_ToStri:

; 533  :     NUMBER_HEADER* nx = (NUMBER_HEADER*)x;

	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _nx$[ebp], eax

; 534  :     PMC_STATUS_CODE result;
; 535  :     if ((result = CheckNumber(nx)) != PMC_STATUS_OK)

	mov	ecx, DWORD PTR _nx$[ebp]
	push	ecx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN7@PMC_ToStri

; 536  :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_ToStri
$LN7@PMC_ToStri:

; 537  :     switch (format)

	movsx	edx, BYTE PTR _format$[ebp]
	mov	DWORD PTR tv71[ebp], edx
	mov	eax, DWORD PTR tv71[ebp]
	sub	eax, 68					; 00000044H
	mov	DWORD PTR tv71[ebp], eax
	cmp	DWORD PTR tv71[ebp], 52			; 00000034H
	ja	$LN12@PMC_ToStri
	mov	ecx, DWORD PTR tv71[ebp]
	movzx	edx, BYTE PTR $LN22@PMC_ToStri[ecx]
	jmp	DWORD PTR $LN23@PMC_ToStri[edx*4]
$LN8@PMC_ToStri:

; 538  :     {
; 539  :     case 'n':
; 540  :     case 'N':
; 541  :         return (ToStringDN(nx, buffer, buffer_size, 'N', width >= 0 ? width : format_option->Number.DecimalDigits, format_option));

	cmp	DWORD PTR _width$[ebp], 0
	jl	SHORT $LN14@PMC_ToStri
	mov	eax, DWORD PTR _width$[ebp]
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN15@PMC_ToStri
$LN14@PMC_ToStri:
	mov	ecx, DWORD PTR _format_option$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR tv76[ebp], edx
$LN15@PMC_ToStri:
	mov	eax, DWORD PTR _format_option$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv76[ebp]
	push	ecx
	push	78					; 0000004eH
	mov	edx, DWORD PTR _buffer_size$[ebp]
	push	edx
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nx$[ebp]
	push	ecx
	call	_ToStringDN
	add	esp, 24					; 00000018H
	jmp	$LN1@PMC_ToStri
$LN9@PMC_ToStri:

; 542  :     case 'x':
; 543  :         return (ToStringX(nx, buffer, buffer_size, width >= 0 ? width : 0, format_option, 0));

	cmp	DWORD PTR _width$[ebp], 0
	jl	SHORT $LN16@PMC_ToStri
	mov	edx, DWORD PTR _width$[ebp]
	mov	DWORD PTR tv86[ebp], edx
	jmp	SHORT $LN17@PMC_ToStri
$LN16@PMC_ToStri:
	mov	DWORD PTR tv86[ebp], 0
$LN17@PMC_ToStri:
	push	0
	mov	eax, DWORD PTR _format_option$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv86[ebp]
	push	ecx
	mov	edx, DWORD PTR _buffer_size$[ebp]
	push	edx
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nx$[ebp]
	push	ecx
	call	_ToStringX
	add	esp, 24					; 00000018H
	jmp	SHORT $LN1@PMC_ToStri
$LN10@PMC_ToStri:

; 544  :     case 'X':
; 545  :         return (ToStringX(nx, buffer, buffer_size, width >= 0 ? width : 0, format_option, 1));

	cmp	DWORD PTR _width$[ebp], 0
	jl	SHORT $LN18@PMC_ToStri
	mov	edx, DWORD PTR _width$[ebp]
	mov	DWORD PTR tv95[ebp], edx
	jmp	SHORT $LN19@PMC_ToStri
$LN18@PMC_ToStri:
	mov	DWORD PTR tv95[ebp], 0
$LN19@PMC_ToStri:
	push	1
	mov	eax, DWORD PTR _format_option$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv95[ebp]
	push	ecx
	mov	edx, DWORD PTR _buffer_size$[ebp]
	push	edx
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nx$[ebp]
	push	ecx
	call	_ToStringX
	add	esp, 24					; 00000018H
	jmp	SHORT $LN1@PMC_ToStri
$LN11@PMC_ToStri:

; 546  :     case 'd':
; 547  :     case 'D':
; 548  :         return (ToStringDN(nx, buffer, buffer_size, 'D', width >= 0 ? width : 0, format_option));

	cmp	DWORD PTR _width$[ebp], 0
	jl	SHORT $LN20@PMC_ToStri
	mov	edx, DWORD PTR _width$[ebp]
	mov	DWORD PTR tv135[ebp], edx
	jmp	SHORT $LN21@PMC_ToStri
$LN20@PMC_ToStri:
	mov	DWORD PTR tv135[ebp], 0
$LN21@PMC_ToStri:
	mov	eax, DWORD PTR _format_option$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv135[ebp]
	push	ecx
	push	68					; 00000044H
	mov	edx, DWORD PTR _buffer_size$[ebp]
	push	edx
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nx$[ebp]
	push	ecx
	call	_ToStringDN
	add	esp, 24					; 00000018H
	jmp	SHORT $LN1@PMC_ToStri
$LN12@PMC_ToStri:

; 549  :     default:
; 550  :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN1@PMC_ToStri:

; 551  :     }
; 552  : }

	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
	npad	3
$LN23@PMC_ToStri:
	DD	$LN11@PMC_ToStri
	DD	$LN8@PMC_ToStri
	DD	$LN10@PMC_ToStri
	DD	$LN9@PMC_ToStri
	DD	$LN12@PMC_ToStri
$LN22@PMC_ToStri:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
_PMC_ToString@24 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.c
_TEXT	SEGMENT
_info$ = 8						; size = 4
_PMC_InitializeNumberFormatInfo@4 PROC

; 586  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __493E81D3_pmc_tostring@c
	call	@__CheckForDebuggerJustMyCode@4

; 587  :     InitializeNumberFormatoInfo(info);

	mov	eax, DWORD PTR _info$[ebp]
	push	eax
	call	_InitializeNumberFormatoInfo
	add	esp, 4

; 588  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
_PMC_InitializeNumberFormatInfo@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.c
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_ToString PROC

; 591  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __493E81D3_pmc_tostring@c
	call	@__CheckForDebuggerJustMyCode@4

; 592  :     InitializeNumberFormatoInfo(&default_number_format_option);

	push	OFFSET _default_number_format_option
	call	_InitializeNumberFormatoInfo
	add	esp, 4

; 593  : 
; 594  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 595  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_Initialize_ToString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_tostring.c
_TEXT	SEGMENT
_info$ = 8						; size = 4
_InitializeNumberFormatoInfo PROC

; 555  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __493E81D3_pmc_tostring@c
	call	@__CheckForDebuggerJustMyCode@4

; 556  :     info->Currency.DecimalDigits = 2;

	mov	eax, DWORD PTR _info$[ebp]
	mov	DWORD PTR [eax], 2

; 557  :     lstrcpyW(info->Currency.DecimalSeparator, L".");

	mov	esi, esp
	push	OFFSET $SG94881
	mov	ecx, DWORD PTR _info$[ebp]
	add	ecx, 4
	push	ecx
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 558  :     lstrcpyW(info->Currency.GroupSeparator, L",");

	mov	esi, esp
	push	OFFSET $SG94882
	mov	edx, DWORD PTR _info$[ebp]
	add	edx, 10					; 0000000aH
	push	edx
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 559  :     lstrcpyW(info->Currency.GroupSizes, L"3");

	mov	esi, esp
	push	OFFSET $SG94883
	mov	eax, DWORD PTR _info$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 560  :     info->Currency.NegativePattern = 0;

	mov	ecx, DWORD PTR _info$[ebp]
	mov	DWORD PTR [ecx+40], 0

; 561  :     info->Currency.PositivePattern = 0;

	mov	edx, DWORD PTR _info$[ebp]
	mov	DWORD PTR [edx+44], 0

; 562  : 
; 563  :     lstrcpyW(info->CurrencySymbol, L"\u00a4");

	mov	esi, esp
	push	OFFSET $SG94884
	mov	eax, DWORD PTR _info$[ebp]
	add	eax, 140				; 0000008cH
	push	eax
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 564  :     lstrcpyW(info->NativeDigits, L"0123456789");

	mov	esi, esp
	push	OFFSET $SG94885
	mov	ecx, DWORD PTR _info$[ebp]
	add	ecx, 146				; 00000092H
	push	ecx
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 565  :     lstrcpyW(info->NegativeSign, L"-");

	mov	esi, esp
	push	OFFSET $SG94886
	mov	edx, DWORD PTR _info$[ebp]
	add	edx, 168				; 000000a8H
	push	edx
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 566  : 
; 567  :     info->Number.DecimalDigits = 2;

	mov	eax, DWORD PTR _info$[ebp]
	mov	DWORD PTR [eax+48], 2

; 568  :     lstrcpyW(info->Number.DecimalSeparator, L".");

	mov	esi, esp
	push	OFFSET $SG94887
	mov	ecx, DWORD PTR _info$[ebp]
	add	ecx, 58					; 0000003aH
	push	ecx
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 569  :     lstrcpyW(info->Number.GroupSeparator, L",");

	mov	esi, esp
	push	OFFSET $SG94888
	mov	edx, DWORD PTR _info$[ebp]
	add	edx, 52					; 00000034H
	push	edx
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 570  :     lstrcpyW(info->Number.GroupSizes, L"3");

	mov	esi, esp
	push	OFFSET $SG94889
	mov	eax, DWORD PTR _info$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 571  :     info->Number.NegativePattern = 1;

	mov	ecx, DWORD PTR _info$[ebp]
	mov	DWORD PTR [ecx+88], 1

; 572  : 
; 573  :     info->Percent.DecimalDigits = 2;

	mov	edx, DWORD PTR _info$[ebp]
	mov	DWORD PTR [edx+92], 2

; 574  :     lstrcpyW(info->Percent.DecimalSeparator, L".");

	mov	esi, esp
	push	OFFSET $SG94890
	mov	eax, DWORD PTR _info$[ebp]
	add	eax, 102				; 00000066H
	push	eax
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 575  :     lstrcpyW(info->Percent.GroupSeparator, L",");

	mov	esi, esp
	push	OFFSET $SG94891
	mov	ecx, DWORD PTR _info$[ebp]
	add	ecx, 96					; 00000060H
	push	ecx
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 576  :     lstrcpyW(info->Percent.GroupSizes, L"3");

	mov	esi, esp
	push	OFFSET $SG94892
	mov	edx, DWORD PTR _info$[ebp]
	add	edx, 108				; 0000006cH
	push	edx
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 577  :     info->Percent.NegativePattern = 0;

	mov	eax, DWORD PTR _info$[ebp]
	mov	DWORD PTR [eax+132], 0

; 578  :     info->Percent.PositivePattern = 0;

	mov	ecx, DWORD PTR _info$[ebp]
	mov	DWORD PTR [ecx+136], 0

; 579  : 
; 580  :     lstrcpyW(info->PercentSymbol, L"%");

	mov	esi, esp
	push	OFFSET $SG94893
	mov	edx, DWORD PTR _info$[ebp]
	add	edx, 180				; 000000b4H
	push	edx
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 581  :     lstrcpyW(info->PerMilleSymbol, L"\u2030");

	mov	esi, esp
	push	OFFSET $SG94894
	mov	eax, DWORD PTR _info$[ebp]
	add	eax, 186				; 000000baH
	push	eax
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 582  :     lstrcpyW(info->PositiveSign, L"+");

	mov	esi, esp
	push	OFFSET $SG94895
	mov	ecx, DWORD PTR _info$[ebp]
	add	ecx, 174				; 000000aeH
	push	ecx
	call	DWORD PTR __imp__lstrcpyW@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 583  : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_InitializeNumberFormatoInfo ENDP
_TEXT	ENDS
END
