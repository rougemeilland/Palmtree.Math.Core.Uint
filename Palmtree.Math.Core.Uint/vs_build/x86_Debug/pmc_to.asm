; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_to.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__89D1FFA7_pmc_to@c DB 01H
msvcjmc	ENDS
PUBLIC	_Initialize_To
PUBLIC	_PMC_To_X_I@8
PUBLIC	_PMC_To_X_L@8
PUBLIC	__JustMyCode_Default
EXTRN	_CheckNumber:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__allshl:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_value_high$ = 8					; size = 4
_value_low$ = 12					; size = 4
__FROMWORDTODWORD PROC

; 170  :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	xor	edx, edx
	mov	eax, DWORD PTR _value_high$[ebp]
	mov	cl, 32					; 00000020H
	call	__allshl
	xor	ecx, ecx
	or	eax, DWORD PTR _value_low$[ebp]
	or	edx, ecx

; 172  :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__FROMWORDTODWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_to.c
_TEXT	SEGMENT
_result$ = -8						; size = 4
_np$ = -4						; size = 4
_p$ = 8							; size = 4
_o$ = 12						; size = 4
_PMC_To_X_L@8 PROC

; 52   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __89D1FFA7_pmc_to@c
	call	@__CheckForDebuggerJustMyCode@4

; 53   :     if (sizeof(__UNIT_TYPE) * 2 < sizeof(*o))

	xor	eax, eax
	je	SHORT $LN2@PMC_To_X_L

; 54   :     {
; 55   :         // 32bit未満のCPUは未対応
; 56   :         return (PMC_STATUS_NOT_SUPPORTED);

	mov	eax, -6					; fffffffaH
	jmp	$LN1@PMC_To_X_L
$LN2@PMC_To_X_L:

; 57   :     }
; 58   :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR _np$[ebp], ecx

; 59   :     PMC_STATUS_CODE result;
; 60   :     if ((result = CheckNumber(np)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _np$[ebp]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN3@PMC_To_X_L

; 61   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	$LN1@PMC_To_X_L
$LN3@PMC_To_X_L:

; 62   :     if (np->UNIT_BIT_COUNT > sizeof(*o) * 8)

	mov	eax, DWORD PTR _np$[ebp]
	cmp	DWORD PTR [eax+12], 64			; 00000040H
	jbe	SHORT $LN4@PMC_To_X_L

; 63   :         return (PMC_STATUS_OVERFLOW);

	mov	eax, -2					; fffffffeH
	jmp	$LN1@PMC_To_X_L
$LN4@PMC_To_X_L:

; 64   :     if (np->IS_ZERO)

	mov	ecx, DWORD PTR _np$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	shr	edx, 1
	and	edx, 1
	je	SHORT $LN5@PMC_To_X_L

; 65   :     {
; 66   :         *o = 0;

	mov	eax, DWORD PTR _o$[ebp]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0

; 67   :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@PMC_To_X_L
$LN5@PMC_To_X_L:

; 68   :     }
; 69   :     if (np->UNIT_BIT_COUNT <= __UNIT_TYPE_BIT_COUNT)

	mov	ecx, DWORD PTR _np$[ebp]
	cmp	DWORD PTR [ecx+12], 32			; 00000020H
	ja	SHORT $LN6@PMC_To_X_L

; 70   :     {
; 71   :         // 値が 1 ワードで表現できる場合
; 72   :         *o = np->BLOCK[0];

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _np$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+eax]
	xor	ecx, ecx
	mov	edx, DWORD PTR _o$[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx

; 73   :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@PMC_To_X_L

; 74   :     }

	jmp	SHORT $LN1@PMC_To_X_L
$LN6@PMC_To_X_L:

; 75   :     else if (np->UNIT_BIT_COUNT <= __UNIT_TYPE_BIT_COUNT * 2)

	mov	eax, DWORD PTR _np$[ebp]
	cmp	DWORD PTR [eax+12], 64			; 00000040H
	ja	SHORT $LN8@PMC_To_X_L

; 76   :     {
; 77   :         // 値が 2 ワードで表現できる場合
; 78   :         *o = _FROMWORDTODWORD((_UINT32_T)np->BLOCK[1], (_UINT32_T)np->BLOCK[0]);

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _np$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+edx]
	push	edx
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _np$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+eax]
	push	eax
	call	__FROMWORDTODWORD
	add	esp, 8
	mov	ecx, DWORD PTR _o$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx

; 79   :         return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@PMC_To_X_L

; 80   :     }

	jmp	SHORT $LN1@PMC_To_X_L
$LN8@PMC_To_X_L:

; 81   :     else
; 82   :         return (PMC_STATUS_ARGUMENT_ERROR);

	or	eax, -1
$LN1@PMC_To_X_L:

; 83   : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_PMC_To_X_L@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_to.c
_TEXT	SEGMENT
_result$ = -8						; size = 4
_np$ = -4						; size = 4
_p$ = 8							; size = 4
_o$ = 12						; size = 4
_PMC_To_X_I@8 PROC

; 32   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __89D1FFA7_pmc_to@c
	call	@__CheckForDebuggerJustMyCode@4

; 33   :     if (sizeof(__UNIT_TYPE) < sizeof(*o))

	xor	eax, eax
	je	SHORT $LN2@PMC_To_X_I

; 34   :     {
; 35   :         // 32bit未満のCPUは未対応
; 36   :         return (PMC_STATUS_NOT_SUPPORTED);

	mov	eax, -6					; fffffffaH
	jmp	SHORT $LN1@PMC_To_X_I
$LN2@PMC_To_X_I:

; 37   :     }
; 38   :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;

	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR _np$[ebp], ecx

; 39   :     PMC_STATUS_CODE result;
; 40   :     if ((result = CheckNumber(np)) != PMC_STATUS_OK)

	mov	edx, DWORD PTR _np$[ebp]
	push	edx
	call	_CheckNumber
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN3@PMC_To_X_I

; 41   :         return (result);

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN1@PMC_To_X_I
$LN3@PMC_To_X_I:

; 42   :     if (np->UNIT_BIT_COUNT > sizeof(*o) * 8)

	mov	eax, DWORD PTR _np$[ebp]
	cmp	DWORD PTR [eax+12], 32			; 00000020H
	jbe	SHORT $LN4@PMC_To_X_I

; 43   :         return (PMC_STATUS_OVERFLOW);

	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN1@PMC_To_X_I
$LN4@PMC_To_X_I:

; 44   :     if (np->IS_ZERO)

	mov	ecx, DWORD PTR _np$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	shr	edx, 1
	and	edx, 1
	je	SHORT $LN5@PMC_To_X_I

; 45   :         *o = 0;

	mov	eax, DWORD PTR _o$[ebp]
	mov	DWORD PTR [eax], 0
	jmp	SHORT $LN6@PMC_To_X_I
$LN5@PMC_To_X_I:

; 46   :     else
; 47   :         *o = (_UINT32_T)np->BLOCK[0];

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _np$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	eax, DWORD PTR _o$[ebp]
	mov	ecx, DWORD PTR [edx+ecx]
	mov	DWORD PTR [eax], ecx
$LN6@PMC_To_X_I:

; 48   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_To_X_I:

; 49   : }   

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_PMC_To_X_I@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_to.c
_TEXT	SEGMENT
_feature$ = 8						; size = 4
_Initialize_To PROC

; 86   : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __89D1FFA7_pmc_to@c
	call	@__CheckForDebuggerJustMyCode@4

; 87   :     return (PMC_STATUS_OK);

	xor	eax, eax

; 88   : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_Initialize_To ENDP
_TEXT	ENDS
END
