; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\pmc_exclusiveor.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__2088847F_corecrt_memory@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__E9FFF232_guiddef@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__12AD47BB_winuser@h DB 01H
__B4B40122_winioctl@h DB 01H
__A73354DD_stdlib@h DB 01H
__25F3FB34_propidl@h DB 01H
__A40E48B8_oleauto@h DB 01H
__86261D59_stralign@h DB 01H
__2CC6E67D_corecrt_stdio_config@h DB 01H
__41381B41_corecrt_wconio@h DB 01H
__F0CC4AC4_corecrt_wio@h DB 01H
__05476D76_corecrt_wstdio@h DB 01H
__C0802A2B_corecrt_wtime@h DB 01H
__A40A425D_stat@h DB 01H
__5A74375D_wchar@h DB 01H
__6BC0FD35_vcruntime_new@h DB 01H
__77F53984_cstddef DB 01H
__188180DA_corecrt_math@h DB 01H
__D23EE329_cstdlib DB 01H
__5ECFF36E_type_traits DB 01H
__331E732B_malloc@h DB 01H
__9BB4E194_vcruntime_exception@h DB 01H
__7949CB39_exception DB 01H
__802FEEC0_pmc_exception@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__1AB12E38_pmc_resourceholder@h DB 01H
__746E1CEC_xmmintrin@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__DE56A8E5_pmc_exclusiveor@cpp DB 01H
msvcjmc	ENDS
CONST	SEGMENT
$SG117930 DB	'p', 00H, 'm', 00H, 'c', 00H, '_', 00H, 'e', 00H, 'x', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 's', 00H, 'i', 00H, 'v', 00H, 'e'
	DB	00H, 'o', 00H, 'r', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	';', 00H, 'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'E', 00H, 'x'
	DB	00H, 'c', 00H, 'l', 00H, 'u', 00H, 's', 00H, 'i', 00H, 'v', 00H
	DB	'e', 00H, 'O', 00H, 'r', 00H, '_', 00H, 'I', 00H, '_', 00H, 'X'
	DB	00H, ';', 00H, '1', 00H, 00H, 00H
$SG117931 DB	088H, 'N', 01fH, 'gW0f0D0j0D0', 0b3H, '0', 0fcH, '0', 0c9H
	DB	'0k00RT', 090H, 'W0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG117938 DB	'v', 00H, 00H, 00H
$SG117939 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
	ORG $+2
$SG117957 DB	'u', 00H, 00H, 00H
$SG117953 DB	'p', 00H, 'm', 00H, 'c', 00H, '_', 00H, 'e', 00H, 'x', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 's', 00H, 'i', 00H, 'v', 00H, 'e'
	DB	00H, 'o', 00H, 'r', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	';', 00H, 'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'E', 00H, 'x'
	DB	00H, 'c', 00H, 'l', 00H, 'u', 00H, 's', 00H, 'i', 00H, 'v', 00H
	DB	'e', 00H, 'O', 00H, 'r', 00H, '_', 00H, 'X', 00H, '_', 00H, 'I'
	DB	00H, ';', 00H, '1', 00H, 00H, 00H
$SG117954 DB	088H, 'N', 01fH, 'gW0f0D0j0D0', 0b3H, '0', 0fcH, '0', 0c9H
	DB	'0k00RT', 090H, 'W0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG117958 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
	ORG $+2
$SG118014 DB	'p', 00H, 'm', 00H, 'c', 00H, '_', 00H, 'e', 00H, 'x', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 's', 00H, 'i', 00H, 'v', 00H, 'e'
	DB	00H, 'o', 00H, 'r', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	';', 00H, 'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'E', 00H, 'x'
	DB	00H, 'c', 00H, 'l', 00H, 'u', 00H, 's', 00H, 'i', 00H, 'v', 00H
	DB	'e', 00H, 'O', 00H, 'r', 00H, '_', 00H, 'L', 00H, '_', 00H, 'X'
	DB	00H, ';', 00H, '1', 00H, 00H, 00H
$SG118015 DB	088H, 'N', 01fH, 'gW0f0D0j0D0', 0b3H, '0', 0fcH, '0', 0c9H
	DB	'0k00RT', 090H, 'W0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118018 DB	'v', 00H, 00H, 00H
$SG118019 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
	ORG $+2
$SG118037 DB	'u', 00H, 00H, 00H
$SG118033 DB	'p', 00H, 'm', 00H, 'c', 00H, '_', 00H, 'e', 00H, 'x', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 's', 00H, 'i', 00H, 'v', 00H, 'e'
	DB	00H, 'o', 00H, 'r', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	';', 00H, 'P', 00H, 'M', 00H, 'C', 00H, '_', 00H, 'E', 00H, 'x'
	DB	00H, 'c', 00H, 'l', 00H, 'u', 00H, 's', 00H, 'i', 00H, 'v', 00H
	DB	'e', 00H, 'O', 00H, 'r', 00H, '_', 00H, 'X', 00H, '_', 00H, 'L'
	DB	00H, ';', 00H, '1', 00H, 00H, 00H
$SG118034 DB	088H, 'N', 01fH, 'gW0f0D0j0D0', 0b3H, '0', 0fcH, '0', 0c9H
	DB	'0k00RT', 090H, 'W0~0W0_0', 02H, '0', 00H, 00H
	ORG $+2
$SG118038 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
	ORG $+2
$SG118071 DB	'u', 00H, 00H, 00H
$SG118072 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
	ORG $+2
$SG118075 DB	'v', 00H, 00H, 00H
$SG118076 DB	015H, '_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H
	DB	't', 00H, 'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~'
	DB	'0Y0', 02H, '0', 00H, 00H
CONST	ENDS
PUBLIC	??0exception@std@@QAE@XZ			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ; Palmtree::Math::Core::Internal::Exception::Exception
PUBLIC	??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
PUBLIC	??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
PUBLIC	??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor'
PUBLIC	??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
PUBLIC	??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
PUBLIC	??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
PUBLIC	??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor'
PUBLIC	??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
PUBLIC	??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
PUBLIC	??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
PUBLIC	??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor'
PUBLIC	?Initialize_ExclusiveOr@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ; Palmtree::Math::Core::Internal::Initialize_ExclusiveOr
PUBLIC	?PMC_ExclusiveOr_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_ExclusiveOr_I_X
PUBLIC	?PMC_ExclusiveOr_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z ; Palmtree::Math::Core::Internal::PMC_ExclusiveOr_L_X
PUBLIC	?PMC_ExclusiveOr_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_ExclusiveOr_X_I
PUBLIC	?PMC_ExclusiveOr_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z ; Palmtree::Math::Core::Internal::PMC_ExclusiveOr_X_L
PUBLIC	?PMC_ExclusiveOr_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z ; Palmtree::Math::Core::Internal::PMC_ExclusiveOr_X_X
PUBLIC	__JustMyCode_Default
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7Exception@Internal@Core@Math@Palmtree@@6B@	; Palmtree::Math::Core::Internal::Exception::`vftable'
PUBLIC	??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`vftable'
PUBLIC	??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`vftable'
PUBLIC	__TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
PUBLIC	__CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InternalErrorException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	??_R0?AVException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::Exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	__TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
PUBLIC	__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Exception@Internal@Core@Math@Palmtree@@6B@	; Palmtree::Math::Core::Internal::Exception::`RTTI Complete Object Locator'
PUBLIC	??_R3Exception@Internal@Core@Math@Palmtree@@8	; Palmtree::Math::Core::Internal::Exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Exception@Internal@Core@Math@Palmtree@@8	; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EN@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,77)'
PUBLIC	??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Complete Object Locator'
PUBLIC	??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Complete Object Locator'
PUBLIC	??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_EException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::Exception::`vector deleting destructor'
EXTRN	??_EArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::`vector deleting destructor'
EXTRN	??_EInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z:PROC ; Palmtree::Math::Core::Internal::InternalErrorException::`vector deleting destructor'
EXTRN	?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z:PROC ; Palmtree::Math::Core::Internal::CommitNumber
EXTRN	?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z:PROC ; Palmtree::Math::Core::Internal::CheckNumber
EXTRN	?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z:PROC ; Palmtree::Math::Core::Internal::DuplicateNumber
EXTRN	?From_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@I@Z:PROC ; Palmtree::Math::Core::Internal::From_I_Imp
EXTRN	?From_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@_K@Z:PROC ; Palmtree::Math::Core::Internal::From_L_Imp
EXTRN	??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
EXTRN	??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
EXTRN	?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
EXTRN	?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber
EXTRN	?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber
EXTRN	?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber
EXTRN	?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__aullshr:PROC
EXTRN	?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A:BYTE ; Palmtree::Math::Core::Internal::number_zero
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ DD 00H ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EN@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EN@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,77)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	04dH
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2Exception@Internal@Core@Math@Palmtree@@8 DD FLAT:??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EN@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3Exception@Internal@Core@Math@Palmtree@@8 DD 00H	; Palmtree::Math::Core::Internal::Exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4Exception@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4Exception@Internal@Core@Math@Palmtree@@6B@ DD 00H	; Palmtree::Math::Core::Internal::Exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8
	DD	FLAT:??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVArgumentNullException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	FLAT:__CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
	DD	FLAT:__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	ENDS
;	COMDAT __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	FLAT:??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::Exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	SEGMENT
__CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24 DD 00H
	DD	FLAT:??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	FLAT:??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 DD FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVInternalErrorException@Internal@Core@Math@Palmtree@@'
	DB	00H
data$r	ENDS
;	COMDAT __CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	FLAT:__CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
	DD	FLAT:__CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z24
xdata$x	ENDS
;	COMDAT __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
__TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	FLAT:??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`vftable'
	DD	FLAT:??_EInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`vftable'
	DD	FLAT:??_EArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7Exception@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7Exception@Internal@Core@Math@Palmtree@@6B@ DD FLAT:??_R4Exception@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::Exception::`vftable'
	DD	FLAT:??_EException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$?PMC_ExclusiveOr_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_ExclusiveOr_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z$0
__unwindtable$?PMC_ExclusiveOr_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_ExclusiveOr_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z$0
__unwindtable$?PMC_ExclusiveOr_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_ExclusiveOr_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z$0
__unwindtable$?PMC_ExclusiveOr_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_ExclusiveOr_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z$0
__unwindtable$?PMC_ExclusiveOr_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_ExclusiveOr_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z$0
__unwindtable$?PMC_ExclusiveOr_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_ExclusiveOr_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z$0
__unwindtable$?PMC_ExclusiveOr_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_ExclusiveOr_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z$0
__unwindtable$?PMC_ExclusiveOr_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_ExclusiveOr_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_ExclusiveOr_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?PMC_ExclusiveOr_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z$2
__ehfuncinfo$?PMC_ExclusiveOr_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_ExclusiveOr_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PMC_ExclusiveOr_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?PMC_ExclusiveOr_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PMC_ExclusiveOr_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_ExclusiveOr_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PMC_ExclusiveOr_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_ExclusiveOr_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PMC_ExclusiveOr_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_ExclusiveOr_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PMC_ExclusiveOr_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_ExclusiveOr_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PMC_ExclusiveOr_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_ExclusiveOr_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
__ehfuncinfo$?PMC_ExclusiveOr_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PMC_ExclusiveOr_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0
__ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0
__ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ$0
__ehfuncinfo$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0
__ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z$0
__ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1exception@std@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0exception@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	04H
xdata$x	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.cpp
_TEXT	SEGMENT
$T2 = -60						; size = 4
_w$3 = -56						; size = 4
_w_bit_count$4 = -52					; size = 4
_v_bit_count$5 = -48					; size = 4
_u_bit_count$6 = -44					; size = 4
_t$7 = -40						; size = 4
_root$8 = -32						; size = 16
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 4
?PMC_ExclusiveOr_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z PROC ; Palmtree::Math::Core::Internal::PMC_ExclusiveOr_X_X_Imp

; 405  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_ExclusiveOr_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 30	 sub	 esp, 48			; 00000030H
  00014	57		 push	 edi
  00015	8d 7d c4	 lea	 edi, DWORD PTR [ebp-60]
  00018	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	50		 push	 eax
  0002c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET __DE56A8E5_pmc_exclusiveor@cpp
  0003a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 406  :         if (u->IS_ZERO)

  0003f	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00042	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00045	83 e1 01	 and	 ecx, 1
  00048	74 16		 je	 SHORT $LN2@PMC_Exclus

; 407  :             return (DuplicateNumber(v));

  0004a	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  0004d	52		 push	 edx
  0004e	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  00053	83 c4 04	 add	 esp, 4
  00056	e9 10 01 00 00	 jmp	 $LN1@PMC_Exclus
  0005b	e9 0b 01 00 00	 jmp	 $LN1@PMC_Exclus
$LN2@PMC_Exclus:

; 408  :         else if (v->IS_ZERO)

  00060	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  00063	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00066	83 e1 01	 and	 ecx, 1
  00069	74 16		 je	 SHORT $LN4@PMC_Exclus

; 409  :             return (DuplicateNumber(u));

  0006b	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  0006e	52		 push	 edx
  0006f	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  00074	83 c4 04	 add	 esp, 4
  00077	e9 ef 00 00 00	 jmp	 $LN1@PMC_Exclus

; 410  :         else

  0007c	e9 ea 00 00 00	 jmp	 $LN1@PMC_Exclus
$LN4@PMC_Exclus:

; 411  :         {
; 412  :             ResourceHolderUINT root;

  00081	8d 4d e0	 lea	 ecx, DWORD PTR _root$8[ebp]
  00084	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00089	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 413  :             if (u->UNIT_WORD_COUNT < v->UNIT_WORD_COUNT)

  00090	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00093	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  00096	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00099	3b 51 10	 cmp	 edx, DWORD PTR [ecx+16]
  0009c	73 12		 jae	 SHORT $LN6@PMC_Exclus

; 414  :             {
; 415  :                 NUMBER_HEADER* t = u;

  0009e	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  000a1	89 45 d8	 mov	 DWORD PTR _t$7[ebp], eax

; 416  :                 u = v;

  000a4	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  000a7	89 4d 08	 mov	 DWORD PTR _u$[ebp], ecx

; 417  :                 v = t;

  000aa	8b 55 d8	 mov	 edx, DWORD PTR _t$7[ebp]
  000ad	89 55 0c	 mov	 DWORD PTR _v$[ebp], edx
$LN6@PMC_Exclus:

; 418  :             }
; 419  :             __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

  000b0	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  000b3	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000b6	89 4d d4	 mov	 DWORD PTR _u_bit_count$6[ebp], ecx

; 420  :             __UNIT_TYPE v_bit_count = v->UNIT_BIT_COUNT;

  000b9	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  000bc	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000bf	89 45 d0	 mov	 DWORD PTR _v_bit_count$5[ebp], eax

; 421  :             __UNIT_TYPE w_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count);

  000c2	8b 4d d0	 mov	 ecx, DWORD PTR _v_bit_count$5[ebp]
  000c5	51		 push	 ecx
  000c6	8b 55 d4	 mov	 edx, DWORD PTR _u_bit_count$6[ebp]
  000c9	52		 push	 edx
  000ca	e8 00 00 00 00	 call	 __MAXIMUM_UNIT
  000cf	83 c4 08	 add	 esp, 8
  000d2	89 45 cc	 mov	 DWORD PTR _w_bit_count$4[ebp], eax

; 422  :             NUMBER_HEADER* w = root.AllocateNumber(w_bit_count);

  000d5	8b 45 cc	 mov	 eax, DWORD PTR _w_bit_count$4[ebp]
  000d8	50		 push	 eax
  000d9	8d 4d e0	 lea	 ecx, DWORD PTR _root$8[ebp]
  000dc	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  000e1	89 45 c8	 mov	 DWORD PTR _w$3[ebp], eax

; 423  :             ExclusiveOr_X_X(u->BLOCK, u->UNIT_WORD_COUNT, v->BLOCK, v->UNIT_WORD_COUNT, w->BLOCK);

  000e4	8b 4d c8	 mov	 ecx, DWORD PTR _w$3[ebp]
  000e7	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  000ea	52		 push	 edx
  000eb	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  000ee	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000f1	51		 push	 ecx
  000f2	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  000f5	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  000f8	50		 push	 eax
  000f9	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  000fc	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000ff	52		 push	 edx
  00100	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00103	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00106	51		 push	 ecx
  00107	e8 00 00 00 00	 call	 ?ExclusiveOr_X_X@Internal@Core@Math@Palmtree@@YAXPAII0I0@Z ; Palmtree::Math::Core::Internal::ExclusiveOr_X_X
  0010c	83 c4 14	 add	 esp, 20			; 00000014H

; 424  :             root.CheckNumber(w);

  0010f	8b 55 c8	 mov	 edx, DWORD PTR _w$3[ebp]
  00112	52		 push	 edx
  00113	8d 4d e0	 lea	 ecx, DWORD PTR _root$8[ebp]
  00116	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 425  :             CommitNumber(w);

  0011b	8b 45 c8	 mov	 eax, DWORD PTR _w$3[ebp]
  0011e	50		 push	 eax
  0011f	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  00124	83 c4 04	 add	 esp, 4

; 426  :             if (w->IS_ZERO)

  00127	8b 4d c8	 mov	 ecx, DWORD PTR _w$3[ebp]
  0012a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0012d	83 e2 01	 and	 edx, 1
  00130	74 15		 je	 SHORT $LN7@PMC_Exclus

; 427  :             {
; 428  :                 root.DeallocateNumber(w);

  00132	8b 45 c8	 mov	 eax, DWORD PTR _w$3[ebp]
  00135	50		 push	 eax
  00136	8d 4d e0	 lea	 ecx, DWORD PTR _root$8[ebp]
  00139	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 429  :                 w = &number_zero;

  0013e	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _w$3[ebp], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero

; 430  :             }
; 431  :             else

  00145	eb 0c		 jmp	 SHORT $LN8@PMC_Exclus
$LN7@PMC_Exclus:

; 432  :                 root.UnlinkNumber(w);

  00147	8b 4d c8	 mov	 ecx, DWORD PTR _w$3[ebp]
  0014a	51		 push	 ecx
  0014b	8d 4d e0	 lea	 ecx, DWORD PTR _root$8[ebp]
  0014e	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN8@PMC_Exclus:

; 433  :             return (w);

  00153	8b 55 c8	 mov	 edx, DWORD PTR _w$3[ebp]
  00156	89 55 c4	 mov	 DWORD PTR $T2[ebp], edx
  00159	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00160	8d 4d e0	 lea	 ecx, DWORD PTR _root$8[ebp]
  00163	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00168	8b 45 c4	 mov	 eax, DWORD PTR $T2[ebp]
$LN1@PMC_Exclus:

; 434  :         }
; 435  :     }

  0016b	52		 push	 edx
  0016c	8b cd		 mov	 ecx, ebp
  0016e	50		 push	 eax
  0016f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN14@PMC_Exclus
  00175	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0017a	58		 pop	 eax
  0017b	5a		 pop	 edx
  0017c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0017f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00186	59		 pop	 ecx
  00187	5f		 pop	 edi
  00188	83 c4 3c	 add	 esp, 60			; 0000003cH
  0018b	3b ec		 cmp	 ebp, esp
  0018d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00192	8b e5		 mov	 esp, ebp
  00194	5d		 pop	 ebp
  00195	c3		 ret	 0
  00196	66 90		 npad	 2
$LN14@PMC_Exclus:
  00198	01 00 00 00	 DD	 1
  0019c	00 00 00 00	 DD	 $LN13@PMC_Exclus
$LN13@PMC_Exclus:
  001a0	e0 ff ff ff	 DD	 -32			; ffffffe0H
  001a4	10 00 00 00	 DD	 16			; 00000010H
  001a8	00 00 00 00	 DD	 $LN11@PMC_Exclus
$LN11@PMC_Exclus:
  001ac	72		 DB	 114			; 00000072H
  001ad	6f		 DB	 111			; 0000006fH
  001ae	6f		 DB	 111			; 0000006fH
  001af	74		 DB	 116			; 00000074H
  001b0	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_ExclusiveOr_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _root$8[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_ExclusiveOr_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_ExclusiveOr_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_ExclusiveOr_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z ENDP ; Palmtree::Math::Core::Internal::PMC_ExclusiveOr_X_X_Imp
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.cpp
_TEXT	SEGMENT
$T2 = -156						; size = 4
$T3 = -152						; size = 4
$T4 = -148						; size = 4
_w$5 = -144						; size = 4
_w_bit_count$6 = -140					; size = 4
_v_bit_count$7 = -136					; size = 4
_u_bit_count$8 = -132					; size = 4
_root$9 = -124						; size = 16
_w$10 = -104						; size = 4
_w_bit_count$11 = -100					; size = 4
_v_bit_count$12 = -96					; size = 4
_root$13 = -88						; size = 16
_w$14 = -68						; size = 4
_w_bit_count$15 = -64					; size = 4
_v_bit_count$16 = -60					; size = 4
_root$17 = -52						; size = 16
_v_lo$18 = -32						; size = 4
_v_hi$19 = -24						; size = 4
_u_bit_count$20 = -16					; size = 4
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 8
?PMC_ExclusiveOr_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z PROC ; Palmtree::Math::Core::Internal::PMC_ExclusiveOr_X_L_Imp

; 271  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_ExclusiveOr_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  00017	57		 push	 edi
  00018	8d bd 64 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-156]
  0001e	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002f	33 c5		 xor	 eax, ebp
  00031	50		 push	 eax
  00032	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00035	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003b	b9 00 00 00 00	 mov	 ecx, OFFSET __DE56A8E5_pmc_exclusiveor@cpp
  00040	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 272  :         if (u->IS_ZERO)

  00045	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00048	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004b	83 e1 01	 and	 ecx, 1
  0004e	74 2e		 je	 SHORT $LN2@PMC_Exclus

; 273  :         {
; 274  :             // x が 0 である場合
; 275  :             if (v == 0)

  00050	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  00053	0b 55 10	 or	 edx, DWORD PTR _v$[ebp+4]
  00056	75 0c		 jne	 SHORT $LN4@PMC_Exclus

; 276  :             {
; 277  :                 // v が 0 である場合
; 278  :                 return (&number_zero);

  00058	b8 00 00 00 00	 mov	 eax, OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  0005d	e9 20 03 00 00	 jmp	 $LN1@PMC_Exclus

; 279  :             }
; 280  :             else

  00062	eb 15		 jmp	 SHORT $LN5@PMC_Exclus
$LN4@PMC_Exclus:

; 281  :             {
; 282  :                 // v が 0 でない場合
; 283  :                 return (From_L_Imp(v));

  00064	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp+4]
  00067	50		 push	 eax
  00068	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  0006b	51		 push	 ecx
  0006c	e8 00 00 00 00	 call	 ?From_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@_K@Z ; Palmtree::Math::Core::Internal::From_L_Imp
  00071	83 c4 08	 add	 esp, 8
  00074	e9 09 03 00 00	 jmp	 $LN1@PMC_Exclus
$LN5@PMC_Exclus:

; 284  :             }

  00079	e9 04 03 00 00	 jmp	 $LN1@PMC_Exclus
$LN2@PMC_Exclus:

; 285  :         }
; 286  :         else if (v == 0)

  0007e	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  00081	0b 55 10	 or	 edx, DWORD PTR _v$[ebp+4]
  00084	75 16		 jne	 SHORT $LN6@PMC_Exclus

; 287  :         {
; 288  :             // y が 0 である場合
; 289  :             return (DuplicateNumber(u));

  00086	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  0008f	83 c4 04	 add	 esp, 4
  00092	e9 eb 02 00 00	 jmp	 $LN1@PMC_Exclus

; 290  :         }
; 291  :         else

  00097	e9 e6 02 00 00	 jmp	 $LN1@PMC_Exclus
$LN6@PMC_Exclus:

; 292  :         {
; 293  :             // u と v がともに 0 ではない場合
; 294  :             if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)

  0009c	b9 01 00 00 00	 mov	 ecx, 1
  000a1	85 c9		 test	 ecx, ecx
  000a3	0f 84 d6 01 00
	00		 je	 $LN8@PMC_Exclus

; 295  :             {
; 296  :                 // _UINT64_T が 1 ワードで表現しきれない場合
; 297  :                 __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

  000a9	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  000ac	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000af	89 45 f0	 mov	 DWORD PTR _u_bit_count$20[ebp], eax

; 298  :                 _UINT32_T v_hi;
; 299  :                 _UINT32_T v_lo = _FROMDWORDTOWORD(v, &v_hi);

  000b2	8d 4d e8	 lea	 ecx, DWORD PTR _v_hi$19[ebp]
  000b5	51		 push	 ecx
  000b6	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp+4]
  000b9	52		 push	 edx
  000ba	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 __FROMDWORDTOWORD
  000c3	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c6	89 45 e0	 mov	 DWORD PTR _v_lo$18[ebp], eax

; 300  :                 if (v_hi == 0)

  000c9	83 7d e8 00	 cmp	 DWORD PTR _v_hi$19[ebp], 0
  000cd	0f 85 d4 00 00
	00		 jne	 $LN10@PMC_Exclus

; 301  :                 {
; 302  :                     // v の値が 32bit で表現可能な場合
; 303  :                     ResourceHolderUINT root;

  000d3	8d 4d cc	 lea	 ecx, DWORD PTR _root$17[ebp]
  000d6	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000db	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 304  :                     __UNIT_TYPE v_bit_count = sizeof(v_lo) * 8 - _LZCNT_ALT_32(v_lo);

  000e2	8b 4d e0	 mov	 ecx, DWORD PTR _v_lo$18[ebp]
  000e5	51		 push	 ecx
  000e6	e8 00 00 00 00	 call	 __LZCNT_ALT_32
  000eb	83 c4 04	 add	 esp, 4
  000ee	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  000f3	2b d0		 sub	 edx, eax
  000f5	89 55 c4	 mov	 DWORD PTR _v_bit_count$16[ebp], edx

; 305  :                     __UNIT_TYPE w_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count);

  000f8	8b 45 c4	 mov	 eax, DWORD PTR _v_bit_count$16[ebp]
  000fb	50		 push	 eax
  000fc	8b 4d f0	 mov	 ecx, DWORD PTR _u_bit_count$20[ebp]
  000ff	51		 push	 ecx
  00100	e8 00 00 00 00	 call	 __MAXIMUM_UNIT
  00105	83 c4 08	 add	 esp, 8
  00108	89 45 c0	 mov	 DWORD PTR _w_bit_count$15[ebp], eax

; 306  :                     NUMBER_HEADER* w = root.AllocateNumber(w_bit_count);

  0010b	8b 55 c0	 mov	 edx, DWORD PTR _w_bit_count$15[ebp]
  0010e	52		 push	 edx
  0010f	8d 4d cc	 lea	 ecx, DWORD PTR _root$17[ebp]
  00112	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  00117	89 45 bc	 mov	 DWORD PTR _w$14[ebp], eax

; 307  :                     ExclusiveOr_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, v_lo, w->BLOCK);

  0011a	8b 45 bc	 mov	 eax, DWORD PTR _w$14[ebp]
  0011d	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00120	51		 push	 ecx
  00121	8b 55 e0	 mov	 edx, DWORD PTR _v_lo$18[ebp]
  00124	52		 push	 edx
  00125	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00128	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0012b	51		 push	 ecx
  0012c	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  0012f	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00132	50		 push	 eax
  00133	e8 00 00 00 00	 call	 ?ExclusiveOr_X_1W@Internal@Core@Math@Palmtree@@YAXPAIII0@Z ; Palmtree::Math::Core::Internal::ExclusiveOr_X_1W
  00138	83 c4 10	 add	 esp, 16			; 00000010H

; 308  :                     root.CheckNumber(w);

  0013b	8b 4d bc	 mov	 ecx, DWORD PTR _w$14[ebp]
  0013e	51		 push	 ecx
  0013f	8d 4d cc	 lea	 ecx, DWORD PTR _root$17[ebp]
  00142	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 309  :                     CommitNumber(w);

  00147	8b 55 bc	 mov	 edx, DWORD PTR _w$14[ebp]
  0014a	52		 push	 edx
  0014b	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  00150	83 c4 04	 add	 esp, 4

; 310  :                     if (w->IS_ZERO)

  00153	8b 45 bc	 mov	 eax, DWORD PTR _w$14[ebp]
  00156	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00159	83 e1 01	 and	 ecx, 1
  0015c	74 15		 je	 SHORT $LN12@PMC_Exclus

; 311  :                     {
; 312  :                         root.DeallocateNumber(w);

  0015e	8b 55 bc	 mov	 edx, DWORD PTR _w$14[ebp]
  00161	52		 push	 edx
  00162	8d 4d cc	 lea	 ecx, DWORD PTR _root$17[ebp]
  00165	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 313  :                         w = &number_zero;

  0016a	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _w$14[ebp], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero

; 314  :                     }
; 315  :                     else

  00171	eb 0c		 jmp	 SHORT $LN13@PMC_Exclus
$LN12@PMC_Exclus:

; 316  :                         root.UnlinkNumber(w);

  00173	8b 45 bc	 mov	 eax, DWORD PTR _w$14[ebp]
  00176	50		 push	 eax
  00177	8d 4d cc	 lea	 ecx, DWORD PTR _root$17[ebp]
  0017a	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN13@PMC_Exclus:

; 317  :                     return (w);

  0017f	8b 4d bc	 mov	 ecx, DWORD PTR _w$14[ebp]
  00182	89 8d 6c ff ff
	ff		 mov	 DWORD PTR $T4[ebp], ecx
  00188	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0018f	8d 4d cc	 lea	 ecx, DWORD PTR _root$17[ebp]
  00192	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00197	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR $T4[ebp]
  0019d	e9 e0 01 00 00	 jmp	 $LN1@PMC_Exclus

; 318  :                 }
; 319  :                 else

  001a2	e9 d3 00 00 00	 jmp	 $LN11@PMC_Exclus
$LN10@PMC_Exclus:

; 320  :                 {
; 321  :                     // y の値が 32bit では表現できない場合
; 322  :                     ResourceHolderUINT root;

  001a7	8d 4d a8	 lea	 ecx, DWORD PTR _root$13[ebp]
  001aa	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  001af	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 323  :                     __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v_hi);

  001b6	8b 55 e8	 mov	 edx, DWORD PTR _v_hi$19[ebp]
  001b9	52		 push	 edx
  001ba	e8 00 00 00 00	 call	 __LZCNT_ALT_32
  001bf	83 c4 04	 add	 esp, 4
  001c2	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  001c7	2b c8		 sub	 ecx, eax
  001c9	89 4d a0	 mov	 DWORD PTR _v_bit_count$12[ebp], ecx

; 324  :                     __UNIT_TYPE w_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count);

  001cc	8b 55 a0	 mov	 edx, DWORD PTR _v_bit_count$12[ebp]
  001cf	52		 push	 edx
  001d0	8b 45 f0	 mov	 eax, DWORD PTR _u_bit_count$20[ebp]
  001d3	50		 push	 eax
  001d4	e8 00 00 00 00	 call	 __MAXIMUM_UNIT
  001d9	83 c4 08	 add	 esp, 8
  001dc	89 45 9c	 mov	 DWORD PTR _w_bit_count$11[ebp], eax

; 325  :                     NUMBER_HEADER* w = root.AllocateNumber(w_bit_count);

  001df	8b 4d 9c	 mov	 ecx, DWORD PTR _w_bit_count$11[ebp]
  001e2	51		 push	 ecx
  001e3	8d 4d a8	 lea	 ecx, DWORD PTR _root$13[ebp]
  001e6	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  001eb	89 45 98	 mov	 DWORD PTR _w$10[ebp], eax

; 326  :                     ExclusiveOr_X_2W(u->BLOCK, u->UNIT_WORD_COUNT, v_hi, v_lo, w->BLOCK);

  001ee	8b 55 98	 mov	 edx, DWORD PTR _w$10[ebp]
  001f1	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  001f4	50		 push	 eax
  001f5	8b 4d e0	 mov	 ecx, DWORD PTR _v_lo$18[ebp]
  001f8	51		 push	 ecx
  001f9	8b 55 e8	 mov	 edx, DWORD PTR _v_hi$19[ebp]
  001fc	52		 push	 edx
  001fd	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00200	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00203	51		 push	 ecx
  00204	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00207	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0020a	50		 push	 eax
  0020b	e8 00 00 00 00	 call	 ?ExclusiveOr_X_2W@Internal@Core@Math@Palmtree@@YAXPAIIII0@Z ; Palmtree::Math::Core::Internal::ExclusiveOr_X_2W
  00210	83 c4 14	 add	 esp, 20			; 00000014H

; 327  :                     root.CheckNumber(w);

  00213	8b 4d 98	 mov	 ecx, DWORD PTR _w$10[ebp]
  00216	51		 push	 ecx
  00217	8d 4d a8	 lea	 ecx, DWORD PTR _root$13[ebp]
  0021a	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 328  :                     CommitNumber(w);

  0021f	8b 55 98	 mov	 edx, DWORD PTR _w$10[ebp]
  00222	52		 push	 edx
  00223	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  00228	83 c4 04	 add	 esp, 4

; 329  :                     if (w->IS_ZERO)

  0022b	8b 45 98	 mov	 eax, DWORD PTR _w$10[ebp]
  0022e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00231	83 e1 01	 and	 ecx, 1
  00234	74 15		 je	 SHORT $LN14@PMC_Exclus

; 330  :                     {
; 331  :                         root.DeallocateNumber(w);

  00236	8b 55 98	 mov	 edx, DWORD PTR _w$10[ebp]
  00239	52		 push	 edx
  0023a	8d 4d a8	 lea	 ecx, DWORD PTR _root$13[ebp]
  0023d	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 332  :                         w = &number_zero;

  00242	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _w$10[ebp], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero

; 333  :                     }
; 334  :                     else

  00249	eb 0c		 jmp	 SHORT $LN15@PMC_Exclus
$LN14@PMC_Exclus:

; 335  :                         root.UnlinkNumber(w);

  0024b	8b 45 98	 mov	 eax, DWORD PTR _w$10[ebp]
  0024e	50		 push	 eax
  0024f	8d 4d a8	 lea	 ecx, DWORD PTR _root$13[ebp]
  00252	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN15@PMC_Exclus:

; 336  :                     return (w);

  00257	8b 4d 98	 mov	 ecx, DWORD PTR _w$10[ebp]
  0025a	89 8d 68 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], ecx
  00260	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00267	8d 4d a8	 lea	 ecx, DWORD PTR _root$13[ebp]
  0026a	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0026f	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR $T3[ebp]
  00275	e9 08 01 00 00	 jmp	 $LN1@PMC_Exclus
$LN11@PMC_Exclus:

; 337  :                 }
; 338  :             }
; 339  :             else

  0027a	e9 03 01 00 00	 jmp	 $LN1@PMC_Exclus
$LN8@PMC_Exclus:

; 340  :             {
; 341  :                 // _UINT64_T が 1 ワードで表現できる場合
; 342  :                 ResourceHolderUINT root;

  0027f	8d 4d 84	 lea	 ecx, DWORD PTR _root$9[ebp]
  00282	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00287	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2

; 343  :                 __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

  0028e	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00291	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00294	89 85 7c ff ff
	ff		 mov	 DWORD PTR _u_bit_count$8[ebp], eax

; 344  :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);

  0029a	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  0029d	51		 push	 ecx
  0029e	e8 00 00 00 00	 call	 __LZCNT_ALT_UNIT
  002a3	83 c4 04	 add	 esp, 4
  002a6	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  002ab	2b d0		 sub	 edx, eax
  002ad	89 95 78 ff ff
	ff		 mov	 DWORD PTR _v_bit_count$7[ebp], edx

; 345  :                 __UNIT_TYPE w_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count) + 1;

  002b3	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _v_bit_count$7[ebp]
  002b9	50		 push	 eax
  002ba	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _u_bit_count$8[ebp]
  002c0	51		 push	 ecx
  002c1	e8 00 00 00 00	 call	 __MAXIMUM_UNIT
  002c6	83 c4 08	 add	 esp, 8
  002c9	83 c0 01	 add	 eax, 1
  002cc	89 85 74 ff ff
	ff		 mov	 DWORD PTR _w_bit_count$6[ebp], eax

; 346  :                 NUMBER_HEADER* w = root.AllocateNumber(w_bit_count);

  002d2	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR _w_bit_count$6[ebp]
  002d8	52		 push	 edx
  002d9	8d 4d 84	 lea	 ecx, DWORD PTR _root$9[ebp]
  002dc	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  002e1	89 85 70 ff ff
	ff		 mov	 DWORD PTR _w$5[ebp], eax

; 347  :                 ExclusiveOr_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, (__UNIT_TYPE)v, w->BLOCK);

  002e7	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _w$5[ebp]
  002ed	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  002f0	51		 push	 ecx
  002f1	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  002f4	52		 push	 edx
  002f5	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  002f8	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  002fb	51		 push	 ecx
  002fc	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  002ff	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00302	50		 push	 eax
  00303	e8 00 00 00 00	 call	 ?ExclusiveOr_X_1W@Internal@Core@Math@Palmtree@@YAXPAIII0@Z ; Palmtree::Math::Core::Internal::ExclusiveOr_X_1W
  00308	83 c4 10	 add	 esp, 16			; 00000010H

; 348  :                 root.CheckNumber(w);

  0030b	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _w$5[ebp]
  00311	51		 push	 ecx
  00312	8d 4d 84	 lea	 ecx, DWORD PTR _root$9[ebp]
  00315	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 349  :                 CommitNumber(w);

  0031a	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _w$5[ebp]
  00320	52		 push	 edx
  00321	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  00326	83 c4 04	 add	 esp, 4

; 350  :                 if (w->IS_ZERO)

  00329	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _w$5[ebp]
  0032f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00332	83 e1 01	 and	 ecx, 1
  00335	74 1b		 je	 SHORT $LN16@PMC_Exclus

; 351  :                 {
; 352  :                     root.DeallocateNumber(w);

  00337	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _w$5[ebp]
  0033d	52		 push	 edx
  0033e	8d 4d 84	 lea	 ecx, DWORD PTR _root$9[ebp]
  00341	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 353  :                     w = &number_zero;

  00346	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _w$5[ebp], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero

; 354  :                 }
; 355  :                 else

  00350	eb 0f		 jmp	 SHORT $LN17@PMC_Exclus
$LN16@PMC_Exclus:

; 356  :                     root.UnlinkNumber(w);

  00352	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _w$5[ebp]
  00358	50		 push	 eax
  00359	8d 4d 84	 lea	 ecx, DWORD PTR _root$9[ebp]
  0035c	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN17@PMC_Exclus:

; 357  :                 return (w);

  00361	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _w$5[ebp]
  00367	89 8d 64 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  0036d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00374	8d 4d 84	 lea	 ecx, DWORD PTR _root$9[ebp]
  00377	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0037c	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
$LN1@PMC_Exclus:

; 358  :             }
; 359  :         }
; 360  :     }

  00382	52		 push	 edx
  00383	8b cd		 mov	 ecx, ebp
  00385	50		 push	 eax
  00386	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN28@PMC_Exclus
  0038c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00391	58		 pop	 eax
  00392	5a		 pop	 edx
  00393	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00396	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0039d	59		 pop	 ecx
  0039e	5f		 pop	 edi
  0039f	81 c4 9c 00 00
	00		 add	 esp, 156		; 0000009cH
  003a5	3b ec		 cmp	 ebp, esp
  003a7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003ac	8b e5		 mov	 esp, ebp
  003ae	5d		 pop	 ebp
  003af	c3		 ret	 0
$LN28@PMC_Exclus:
  003b0	04 00 00 00	 DD	 4
  003b4	00 00 00 00	 DD	 $LN27@PMC_Exclus
$LN27@PMC_Exclus:
  003b8	e8 ff ff ff	 DD	 -24			; ffffffe8H
  003bc	04 00 00 00	 DD	 4
  003c0	00 00 00 00	 DD	 $LN22@PMC_Exclus
  003c4	cc ff ff ff	 DD	 -52			; ffffffccH
  003c8	10 00 00 00	 DD	 16			; 00000010H
  003cc	00 00 00 00	 DD	 $LN23@PMC_Exclus
  003d0	a8 ff ff ff	 DD	 -88			; ffffffa8H
  003d4	10 00 00 00	 DD	 16			; 00000010H
  003d8	00 00 00 00	 DD	 $LN24@PMC_Exclus
  003dc	84 ff ff ff	 DD	 -124			; ffffff84H
  003e0	10 00 00 00	 DD	 16			; 00000010H
  003e4	00 00 00 00	 DD	 $LN25@PMC_Exclus
$LN25@PMC_Exclus:
  003e8	72		 DB	 114			; 00000072H
  003e9	6f		 DB	 111			; 0000006fH
  003ea	6f		 DB	 111			; 0000006fH
  003eb	74		 DB	 116			; 00000074H
  003ec	00		 DB	 0
$LN24@PMC_Exclus:
  003ed	72		 DB	 114			; 00000072H
  003ee	6f		 DB	 111			; 0000006fH
  003ef	6f		 DB	 111			; 0000006fH
  003f0	74		 DB	 116			; 00000074H
  003f1	00		 DB	 0
$LN23@PMC_Exclus:
  003f2	72		 DB	 114			; 00000072H
  003f3	6f		 DB	 111			; 0000006fH
  003f4	6f		 DB	 111			; 0000006fH
  003f5	74		 DB	 116			; 00000074H
  003f6	00		 DB	 0
$LN22@PMC_Exclus:
  003f7	76		 DB	 118			; 00000076H
  003f8	5f		 DB	 95			; 0000005fH
  003f9	68		 DB	 104			; 00000068H
  003fa	69		 DB	 105			; 00000069H
  003fb	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_ExclusiveOr_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z$0:
  00000	8d 4d cc	 lea	 ecx, DWORD PTR _root$17[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__unwindfunclet$?PMC_ExclusiveOr_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z$1:
  00008	8d 4d a8	 lea	 ecx, DWORD PTR _root$13[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__unwindfunclet$?PMC_ExclusiveOr_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z$2:
  00010	8d 4d 84	 lea	 ecx, DWORD PTR _root$9[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_ExclusiveOr_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 8a 68 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-152]
  00025	33 c8		 xor	 ecx, eax
  00027	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_ExclusiveOr_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z
  00031	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_ExclusiveOr_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z ENDP ; Palmtree::Math::Core::Internal::PMC_ExclusiveOr_X_L_Imp
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.cpp
_TEXT	SEGMENT
$T2 = -56						; size = 4
_w$3 = -52						; size = 4
_w_bit_count$4 = -48					; size = 4
_v_bit_count$5 = -44					; size = 4
_u_bit_count$6 = -40					; size = 4
_root$7 = -32						; size = 16
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 4
?PMC_ExclusiveOr_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z PROC ; Palmtree::Math::Core::Internal::PMC_ExclusiveOr_X_I_Imp

; 186  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_ExclusiveOr_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00014	57		 push	 edi
  00015	8d 7d c8	 lea	 edi, DWORD PTR [ebp-56]
  00018	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	50		 push	 eax
  0002c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET __DE56A8E5_pmc_exclusiveor@cpp
  0003a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 187  :         if (u->IS_ZERO)

  0003f	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00042	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00045	83 e1 01	 and	 ecx, 1
  00048	74 28		 je	 SHORT $LN2@PMC_Exclus

; 188  :         {
; 189  :             // u が 0 である場合
; 190  :             if (v == 0)

  0004a	83 7d 0c 00	 cmp	 DWORD PTR _v$[ebp], 0
  0004e	75 0c		 jne	 SHORT $LN4@PMC_Exclus

; 191  :             {
; 192  :                 // v が 0 である場合
; 193  :                 return (&number_zero);

  00050	b8 00 00 00 00	 mov	 eax, OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  00055	e9 04 01 00 00	 jmp	 $LN1@PMC_Exclus

; 194  :             }
; 195  :             else

  0005a	eb 11		 jmp	 SHORT $LN5@PMC_Exclus
$LN4@PMC_Exclus:

; 196  :             {
; 197  :                 // v が 0 でない場合
; 198  :                 return (From_I_Imp(v));

  0005c	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  0005f	52		 push	 edx
  00060	e8 00 00 00 00	 call	 ?From_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@I@Z ; Palmtree::Math::Core::Internal::From_I_Imp
  00065	83 c4 04	 add	 esp, 4
  00068	e9 f1 00 00 00	 jmp	 $LN1@PMC_Exclus
$LN5@PMC_Exclus:

; 199  :             }

  0006d	e9 ec 00 00 00	 jmp	 $LN1@PMC_Exclus
$LN2@PMC_Exclus:

; 200  :         }
; 201  :         else if (v == 0)

  00072	83 7d 0c 00	 cmp	 DWORD PTR _v$[ebp], 0
  00076	75 16		 jne	 SHORT $LN6@PMC_Exclus

; 202  :         {
; 203  :             // v が 0 である場合
; 204  :             return (DuplicateNumber(u));

  00078	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ?DuplicateNumber@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@@Z ; Palmtree::Math::Core::Internal::DuplicateNumber
  00081	83 c4 04	 add	 esp, 4
  00084	e9 d5 00 00 00	 jmp	 $LN1@PMC_Exclus

; 205  :         }
; 206  :         else

  00089	e9 d0 00 00 00	 jmp	 $LN1@PMC_Exclus
$LN6@PMC_Exclus:

; 207  :         {
; 208  :             // x と y がともに 0 ではない場合
; 209  :             ResourceHolderUINT root;

  0008e	8d 4d e0	 lea	 ecx, DWORD PTR _root$7[ebp]
  00091	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00096	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 210  :             __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

  0009d	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  000a0	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000a3	89 55 d8	 mov	 DWORD PTR _u_bit_count$6[ebp], edx

; 211  :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

  000a6	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  000a9	50		 push	 eax
  000aa	e8 00 00 00 00	 call	 __LZCNT_ALT_32
  000af	83 c4 04	 add	 esp, 4
  000b2	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  000b7	2b c8		 sub	 ecx, eax
  000b9	89 4d d4	 mov	 DWORD PTR _v_bit_count$5[ebp], ecx

; 212  :             __UNIT_TYPE w_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count) + 1;

  000bc	8b 55 d4	 mov	 edx, DWORD PTR _v_bit_count$5[ebp]
  000bf	52		 push	 edx
  000c0	8b 45 d8	 mov	 eax, DWORD PTR _u_bit_count$6[ebp]
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 __MAXIMUM_UNIT
  000c9	83 c4 08	 add	 esp, 8
  000cc	83 c0 01	 add	 eax, 1
  000cf	89 45 d0	 mov	 DWORD PTR _w_bit_count$4[ebp], eax

; 213  :             NUMBER_HEADER* w = root.AllocateNumber(w_bit_count);

  000d2	8b 4d d0	 mov	 ecx, DWORD PTR _w_bit_count$4[ebp]
  000d5	51		 push	 ecx
  000d6	8d 4d e0	 lea	 ecx, DWORD PTR _root$7[ebp]
  000d9	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEPAU__tag_NUMBER_HEADER@2345@I@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  000de	89 45 cc	 mov	 DWORD PTR _w$3[ebp], eax

; 214  :             ExclusiveOr_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, v, w->BLOCK);

  000e1	8b 55 cc	 mov	 edx, DWORD PTR _w$3[ebp]
  000e4	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  000e7	50		 push	 eax
  000e8	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  000eb	51		 push	 ecx
  000ec	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  000ef	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000f2	50		 push	 eax
  000f3	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  000f6	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  000f9	52		 push	 edx
  000fa	e8 00 00 00 00	 call	 ?ExclusiveOr_X_1W@Internal@Core@Math@Palmtree@@YAXPAIII0@Z ; Palmtree::Math::Core::Internal::ExclusiveOr_X_1W
  000ff	83 c4 10	 add	 esp, 16			; 00000010H

; 215  :             root.CheckNumber(w);

  00102	8b 45 cc	 mov	 eax, DWORD PTR _w$3[ebp]
  00105	50		 push	 eax
  00106	8d 4d e0	 lea	 ecx, DWORD PTR _root$7[ebp]
  00109	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 216  :             CommitNumber(w);

  0010e	8b 4d cc	 mov	 ecx, DWORD PTR _w$3[ebp]
  00111	51		 push	 ecx
  00112	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber
  00117	83 c4 04	 add	 esp, 4

; 217  :             if (w->IS_ZERO)

  0011a	8b 55 cc	 mov	 edx, DWORD PTR _w$3[ebp]
  0011d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00120	83 e0 01	 and	 eax, 1
  00123	74 15		 je	 SHORT $LN8@PMC_Exclus

; 218  :             {
; 219  :                 root.DeallocateNumber(w);

  00125	8b 4d cc	 mov	 ecx, DWORD PTR _w$3[ebp]
  00128	51		 push	 ecx
  00129	8d 4d e0	 lea	 ecx, DWORD PTR _root$7[ebp]
  0012c	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 220  :                 w = &number_zero;

  00131	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _w$3[ebp], OFFSET ?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero

; 221  :             }
; 222  :             else

  00138	eb 0c		 jmp	 SHORT $LN9@PMC_Exclus
$LN8@PMC_Exclus:

; 223  :                 root.UnlinkNumber(w);

  0013a	8b 55 cc	 mov	 edx, DWORD PTR _w$3[ebp]
  0013d	52		 push	 edx
  0013e	8d 4d e0	 lea	 ecx, DWORD PTR _root$7[ebp]
  00141	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN9@PMC_Exclus:

; 224  :             return (w);

  00146	8b 45 cc	 mov	 eax, DWORD PTR _w$3[ebp]
  00149	89 45 c8	 mov	 DWORD PTR $T2[ebp], eax
  0014c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00153	8d 4d e0	 lea	 ecx, DWORD PTR _root$7[ebp]
  00156	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0015b	8b 45 c8	 mov	 eax, DWORD PTR $T2[ebp]
$LN1@PMC_Exclus:

; 225  :         }
; 226  :     }

  0015e	52		 push	 edx
  0015f	8b cd		 mov	 ecx, ebp
  00161	50		 push	 eax
  00162	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN15@PMC_Exclus
  00168	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0016d	58		 pop	 eax
  0016e	5a		 pop	 edx
  0016f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00172	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00179	59		 pop	 ecx
  0017a	5f		 pop	 edi
  0017b	83 c4 38	 add	 esp, 56			; 00000038H
  0017e	3b ec		 cmp	 ebp, esp
  00180	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00185	8b e5		 mov	 esp, ebp
  00187	5d		 pop	 ebp
  00188	c3		 ret	 0
  00189	0f 1f 00	 npad	 3
$LN15@PMC_Exclus:
  0018c	01 00 00 00	 DD	 1
  00190	00 00 00 00	 DD	 $LN14@PMC_Exclus
$LN14@PMC_Exclus:
  00194	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00198	10 00 00 00	 DD	 16			; 00000010H
  0019c	00 00 00 00	 DD	 $LN12@PMC_Exclus
$LN12@PMC_Exclus:
  001a0	72		 DB	 114			; 00000072H
  001a1	6f		 DB	 111			; 0000006fH
  001a2	6f		 DB	 111			; 0000006fH
  001a3	74		 DB	 116			; 00000074H
  001a4	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_ExclusiveOr_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR _root$7[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_ExclusiveOr_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_ExclusiveOr_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_ExclusiveOr_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z ENDP ; Palmtree::Math::Core::Internal::PMC_ExclusiveOr_X_I_Imp
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.cpp
_TEXT	SEGMENT
_count$ = -12						; size = 4
_cp_count$ = -8						; size = 4
_or_count$ = -4						; size = 4
_u$ = 8							; size = 4
_u_count$ = 12						; size = 4
_v$ = 16						; size = 4
_v_count$ = 20						; size = 4
_w$ = 24						; size = 4
?ExclusiveOr_X_X@Internal@Core@Math@Palmtree@@YAXPAII0I0@Z PROC ; Palmtree::Math::Core::Internal::ExclusiveOr_X_X

; 71   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	b9 00 00 00 00	 mov	 ecx, OFFSET __DE56A8E5_pmc_exclusiveor@cpp
  00021	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 72   :         __UNIT_TYPE or_count = v_count;

  00026	8b 45 14	 mov	 eax, DWORD PTR _v_count$[ebp]
  00029	89 45 fc	 mov	 DWORD PTR _or_count$[ebp], eax

; 73   :         __UNIT_TYPE cp_count = u_count - v_count;

  0002c	8b 4d 0c	 mov	 ecx, DWORD PTR _u_count$[ebp]
  0002f	2b 4d 14	 sub	 ecx, DWORD PTR _v_count$[ebp]
  00032	89 4d f8	 mov	 DWORD PTR _cp_count$[ebp], ecx

; 74   : 
; 75   :         __UNIT_TYPE count = or_count >> 5;

  00035	8b 55 fc	 mov	 edx, DWORD PTR _or_count$[ebp]
  00038	c1 ea 05	 shr	 edx, 5
  0003b	89 55 f4	 mov	 DWORD PTR _count$[ebp], edx
$LN2@ExclusiveO:

; 76   :         while (count > 0)

  0003e	83 7d f4 00	 cmp	 DWORD PTR _count$[ebp], 0
  00042	0f 86 6e 05 00
	00		 jbe	 $LN3@ExclusiveO

; 77   :         {
; 78   :             w[0] = u[0] ^ v[0];

  00048	b8 04 00 00 00	 mov	 eax, 4
  0004d	6b c8 00	 imul	 ecx, eax, 0
  00050	ba 04 00 00 00	 mov	 edx, 4
  00055	6b c2 00	 imul	 eax, edx, 0
  00058	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  0005b	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  0005e	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  00061	33 0c 06	 xor	 ecx, DWORD PTR [esi+eax]
  00064	ba 04 00 00 00	 mov	 edx, 4
  00069	6b c2 00	 imul	 eax, edx, 0
  0006c	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  0006f	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 79   :             w[1] = u[1] ^ v[1];

  00072	b8 04 00 00 00	 mov	 eax, 4
  00077	c1 e0 00	 shl	 eax, 0
  0007a	b9 04 00 00 00	 mov	 ecx, 4
  0007f	c1 e1 00	 shl	 ecx, 0
  00082	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00085	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  00088	8b 04 02	 mov	 eax, DWORD PTR [edx+eax]
  0008b	33 04 0e	 xor	 eax, DWORD PTR [esi+ecx]
  0008e	b9 04 00 00 00	 mov	 ecx, 4
  00093	c1 e1 00	 shl	 ecx, 0
  00096	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  00099	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 80   :             w[2] = u[2] ^ v[2];

  0009c	b8 04 00 00 00	 mov	 eax, 4
  000a1	d1 e0		 shl	 eax, 1
  000a3	b9 04 00 00 00	 mov	 ecx, 4
  000a8	d1 e1		 shl	 ecx, 1
  000aa	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  000ad	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  000b0	8b 04 02	 mov	 eax, DWORD PTR [edx+eax]
  000b3	33 04 0e	 xor	 eax, DWORD PTR [esi+ecx]
  000b6	b9 04 00 00 00	 mov	 ecx, 4
  000bb	d1 e1		 shl	 ecx, 1
  000bd	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  000c0	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 81   :             w[3] = u[3] ^ v[3];

  000c3	b8 04 00 00 00	 mov	 eax, 4
  000c8	6b c8 03	 imul	 ecx, eax, 3
  000cb	ba 04 00 00 00	 mov	 edx, 4
  000d0	6b c2 03	 imul	 eax, edx, 3
  000d3	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  000d6	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  000d9	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  000dc	33 0c 06	 xor	 ecx, DWORD PTR [esi+eax]
  000df	ba 04 00 00 00	 mov	 edx, 4
  000e4	6b c2 03	 imul	 eax, edx, 3
  000e7	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  000ea	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 82   :             w[4] = u[4] ^ v[4];

  000ed	b8 04 00 00 00	 mov	 eax, 4
  000f2	c1 e0 02	 shl	 eax, 2
  000f5	b9 04 00 00 00	 mov	 ecx, 4
  000fa	c1 e1 02	 shl	 ecx, 2
  000fd	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00100	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  00103	8b 04 02	 mov	 eax, DWORD PTR [edx+eax]
  00106	33 04 0e	 xor	 eax, DWORD PTR [esi+ecx]
  00109	b9 04 00 00 00	 mov	 ecx, 4
  0010e	c1 e1 02	 shl	 ecx, 2
  00111	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  00114	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 83   :             w[5] = u[5] ^ v[5];

  00117	b8 04 00 00 00	 mov	 eax, 4
  0011c	6b c8 05	 imul	 ecx, eax, 5
  0011f	ba 04 00 00 00	 mov	 edx, 4
  00124	6b c2 05	 imul	 eax, edx, 5
  00127	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  0012a	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  0012d	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  00130	33 0c 06	 xor	 ecx, DWORD PTR [esi+eax]
  00133	ba 04 00 00 00	 mov	 edx, 4
  00138	6b c2 05	 imul	 eax, edx, 5
  0013b	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  0013e	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 84   :             w[6] = u[6] ^ v[6];

  00141	b8 04 00 00 00	 mov	 eax, 4
  00146	6b c8 06	 imul	 ecx, eax, 6
  00149	ba 04 00 00 00	 mov	 edx, 4
  0014e	6b c2 06	 imul	 eax, edx, 6
  00151	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00154	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  00157	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  0015a	33 0c 06	 xor	 ecx, DWORD PTR [esi+eax]
  0015d	ba 04 00 00 00	 mov	 edx, 4
  00162	6b c2 06	 imul	 eax, edx, 6
  00165	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  00168	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 85   :             w[7] = u[7] ^ v[7];

  0016b	b8 04 00 00 00	 mov	 eax, 4
  00170	6b c8 07	 imul	 ecx, eax, 7
  00173	ba 04 00 00 00	 mov	 edx, 4
  00178	6b c2 07	 imul	 eax, edx, 7
  0017b	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  0017e	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  00181	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  00184	33 0c 06	 xor	 ecx, DWORD PTR [esi+eax]
  00187	ba 04 00 00 00	 mov	 edx, 4
  0018c	6b c2 07	 imul	 eax, edx, 7
  0018f	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  00192	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 86   :             w[8] = u[8] ^ v[8];

  00195	b8 04 00 00 00	 mov	 eax, 4
  0019a	c1 e0 03	 shl	 eax, 3
  0019d	b9 04 00 00 00	 mov	 ecx, 4
  001a2	c1 e1 03	 shl	 ecx, 3
  001a5	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  001a8	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  001ab	8b 04 02	 mov	 eax, DWORD PTR [edx+eax]
  001ae	33 04 0e	 xor	 eax, DWORD PTR [esi+ecx]
  001b1	b9 04 00 00 00	 mov	 ecx, 4
  001b6	c1 e1 03	 shl	 ecx, 3
  001b9	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  001bc	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 87   :             w[9] = u[9] ^ v[9];

  001bf	b8 04 00 00 00	 mov	 eax, 4
  001c4	6b c8 09	 imul	 ecx, eax, 9
  001c7	ba 04 00 00 00	 mov	 edx, 4
  001cc	6b c2 09	 imul	 eax, edx, 9
  001cf	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  001d2	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  001d5	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  001d8	33 0c 06	 xor	 ecx, DWORD PTR [esi+eax]
  001db	ba 04 00 00 00	 mov	 edx, 4
  001e0	6b c2 09	 imul	 eax, edx, 9
  001e3	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  001e6	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 88   :             w[10] = u[10] ^ v[10];

  001e9	b8 04 00 00 00	 mov	 eax, 4
  001ee	6b c8 0a	 imul	 ecx, eax, 10
  001f1	ba 04 00 00 00	 mov	 edx, 4
  001f6	6b c2 0a	 imul	 eax, edx, 10
  001f9	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  001fc	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  001ff	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  00202	33 0c 06	 xor	 ecx, DWORD PTR [esi+eax]
  00205	ba 04 00 00 00	 mov	 edx, 4
  0020a	6b c2 0a	 imul	 eax, edx, 10
  0020d	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  00210	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 89   :             w[11] = u[11] ^ v[11];

  00213	b8 04 00 00 00	 mov	 eax, 4
  00218	6b c8 0b	 imul	 ecx, eax, 11
  0021b	ba 04 00 00 00	 mov	 edx, 4
  00220	6b c2 0b	 imul	 eax, edx, 11
  00223	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00226	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  00229	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  0022c	33 0c 06	 xor	 ecx, DWORD PTR [esi+eax]
  0022f	ba 04 00 00 00	 mov	 edx, 4
  00234	6b c2 0b	 imul	 eax, edx, 11
  00237	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  0023a	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 90   :             w[12] = u[12] ^ v[12];

  0023d	b8 04 00 00 00	 mov	 eax, 4
  00242	6b c8 0c	 imul	 ecx, eax, 12
  00245	ba 04 00 00 00	 mov	 edx, 4
  0024a	6b c2 0c	 imul	 eax, edx, 12
  0024d	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00250	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  00253	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  00256	33 0c 06	 xor	 ecx, DWORD PTR [esi+eax]
  00259	ba 04 00 00 00	 mov	 edx, 4
  0025e	6b c2 0c	 imul	 eax, edx, 12
  00261	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  00264	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 91   :             w[13] = u[13] ^ v[13];

  00267	b8 04 00 00 00	 mov	 eax, 4
  0026c	6b c8 0d	 imul	 ecx, eax, 13
  0026f	ba 04 00 00 00	 mov	 edx, 4
  00274	6b c2 0d	 imul	 eax, edx, 13
  00277	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  0027a	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  0027d	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  00280	33 0c 06	 xor	 ecx, DWORD PTR [esi+eax]
  00283	ba 04 00 00 00	 mov	 edx, 4
  00288	6b c2 0d	 imul	 eax, edx, 13
  0028b	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  0028e	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 92   :             w[14] = u[14] ^ v[14];

  00291	b8 04 00 00 00	 mov	 eax, 4
  00296	6b c8 0e	 imul	 ecx, eax, 14
  00299	ba 04 00 00 00	 mov	 edx, 4
  0029e	6b c2 0e	 imul	 eax, edx, 14
  002a1	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  002a4	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  002a7	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  002aa	33 0c 06	 xor	 ecx, DWORD PTR [esi+eax]
  002ad	ba 04 00 00 00	 mov	 edx, 4
  002b2	6b c2 0e	 imul	 eax, edx, 14
  002b5	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  002b8	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 93   :             w[15] = u[15] ^ v[15];

  002bb	b8 04 00 00 00	 mov	 eax, 4
  002c0	6b c8 0f	 imul	 ecx, eax, 15
  002c3	ba 04 00 00 00	 mov	 edx, 4
  002c8	6b c2 0f	 imul	 eax, edx, 15
  002cb	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  002ce	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  002d1	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  002d4	33 0c 06	 xor	 ecx, DWORD PTR [esi+eax]
  002d7	ba 04 00 00 00	 mov	 edx, 4
  002dc	6b c2 0f	 imul	 eax, edx, 15
  002df	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  002e2	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 94   :             w[16] = u[16] ^ v[16];

  002e5	b8 04 00 00 00	 mov	 eax, 4
  002ea	c1 e0 04	 shl	 eax, 4
  002ed	b9 04 00 00 00	 mov	 ecx, 4
  002f2	c1 e1 04	 shl	 ecx, 4
  002f5	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  002f8	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  002fb	8b 04 02	 mov	 eax, DWORD PTR [edx+eax]
  002fe	33 04 0e	 xor	 eax, DWORD PTR [esi+ecx]
  00301	b9 04 00 00 00	 mov	 ecx, 4
  00306	c1 e1 04	 shl	 ecx, 4
  00309	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  0030c	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 95   :             w[17] = u[17] ^ v[17];

  0030f	b8 04 00 00 00	 mov	 eax, 4
  00314	6b c8 11	 imul	 ecx, eax, 17
  00317	ba 04 00 00 00	 mov	 edx, 4
  0031c	6b c2 11	 imul	 eax, edx, 17
  0031f	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00322	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  00325	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  00328	33 0c 06	 xor	 ecx, DWORD PTR [esi+eax]
  0032b	ba 04 00 00 00	 mov	 edx, 4
  00330	6b c2 11	 imul	 eax, edx, 17
  00333	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  00336	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 96   :             w[18] = u[18] ^ v[18];

  00339	b8 04 00 00 00	 mov	 eax, 4
  0033e	6b c8 12	 imul	 ecx, eax, 18
  00341	ba 04 00 00 00	 mov	 edx, 4
  00346	6b c2 12	 imul	 eax, edx, 18
  00349	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  0034c	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  0034f	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  00352	33 0c 06	 xor	 ecx, DWORD PTR [esi+eax]
  00355	ba 04 00 00 00	 mov	 edx, 4
  0035a	6b c2 12	 imul	 eax, edx, 18
  0035d	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  00360	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 97   :             w[19] = u[19] ^ v[19];

  00363	b8 04 00 00 00	 mov	 eax, 4
  00368	6b c8 13	 imul	 ecx, eax, 19
  0036b	ba 04 00 00 00	 mov	 edx, 4
  00370	6b c2 13	 imul	 eax, edx, 19
  00373	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00376	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  00379	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  0037c	33 0c 06	 xor	 ecx, DWORD PTR [esi+eax]
  0037f	ba 04 00 00 00	 mov	 edx, 4
  00384	6b c2 13	 imul	 eax, edx, 19
  00387	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  0038a	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 98   :             w[20] = u[20] ^ v[20];

  0038d	b8 04 00 00 00	 mov	 eax, 4
  00392	6b c8 14	 imul	 ecx, eax, 20
  00395	ba 04 00 00 00	 mov	 edx, 4
  0039a	6b c2 14	 imul	 eax, edx, 20
  0039d	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  003a0	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  003a3	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  003a6	33 0c 06	 xor	 ecx, DWORD PTR [esi+eax]
  003a9	ba 04 00 00 00	 mov	 edx, 4
  003ae	6b c2 14	 imul	 eax, edx, 20
  003b1	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  003b4	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 99   :             w[21] = u[21] ^ v[21];

  003b7	b8 04 00 00 00	 mov	 eax, 4
  003bc	6b c8 15	 imul	 ecx, eax, 21
  003bf	ba 04 00 00 00	 mov	 edx, 4
  003c4	6b c2 15	 imul	 eax, edx, 21
  003c7	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  003ca	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  003cd	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  003d0	33 0c 06	 xor	 ecx, DWORD PTR [esi+eax]
  003d3	ba 04 00 00 00	 mov	 edx, 4
  003d8	6b c2 15	 imul	 eax, edx, 21
  003db	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  003de	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 100  :             w[22] = u[22] ^ v[22];

  003e1	b8 04 00 00 00	 mov	 eax, 4
  003e6	6b c8 16	 imul	 ecx, eax, 22
  003e9	ba 04 00 00 00	 mov	 edx, 4
  003ee	6b c2 16	 imul	 eax, edx, 22
  003f1	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  003f4	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  003f7	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  003fa	33 0c 06	 xor	 ecx, DWORD PTR [esi+eax]
  003fd	ba 04 00 00 00	 mov	 edx, 4
  00402	6b c2 16	 imul	 eax, edx, 22
  00405	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  00408	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 101  :             w[23] = u[23] ^ v[23];

  0040b	b8 04 00 00 00	 mov	 eax, 4
  00410	6b c8 17	 imul	 ecx, eax, 23
  00413	ba 04 00 00 00	 mov	 edx, 4
  00418	6b c2 17	 imul	 eax, edx, 23
  0041b	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  0041e	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  00421	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  00424	33 0c 06	 xor	 ecx, DWORD PTR [esi+eax]
  00427	ba 04 00 00 00	 mov	 edx, 4
  0042c	6b c2 17	 imul	 eax, edx, 23
  0042f	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  00432	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 102  :             w[24] = u[24] ^ v[24];

  00435	b8 04 00 00 00	 mov	 eax, 4
  0043a	6b c8 18	 imul	 ecx, eax, 24
  0043d	ba 04 00 00 00	 mov	 edx, 4
  00442	6b c2 18	 imul	 eax, edx, 24
  00445	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00448	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  0044b	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  0044e	33 0c 06	 xor	 ecx, DWORD PTR [esi+eax]
  00451	ba 04 00 00 00	 mov	 edx, 4
  00456	6b c2 18	 imul	 eax, edx, 24
  00459	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  0045c	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 103  :             w[25] = u[25] ^ v[25];

  0045f	b8 04 00 00 00	 mov	 eax, 4
  00464	6b c8 19	 imul	 ecx, eax, 25
  00467	ba 04 00 00 00	 mov	 edx, 4
  0046c	6b c2 19	 imul	 eax, edx, 25
  0046f	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00472	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  00475	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  00478	33 0c 06	 xor	 ecx, DWORD PTR [esi+eax]
  0047b	ba 04 00 00 00	 mov	 edx, 4
  00480	6b c2 19	 imul	 eax, edx, 25
  00483	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  00486	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 104  :             w[26] = u[26] ^ v[26];

  00489	b8 04 00 00 00	 mov	 eax, 4
  0048e	6b c8 1a	 imul	 ecx, eax, 26
  00491	ba 04 00 00 00	 mov	 edx, 4
  00496	6b c2 1a	 imul	 eax, edx, 26
  00499	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  0049c	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  0049f	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  004a2	33 0c 06	 xor	 ecx, DWORD PTR [esi+eax]
  004a5	ba 04 00 00 00	 mov	 edx, 4
  004aa	6b c2 1a	 imul	 eax, edx, 26
  004ad	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  004b0	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 105  :             w[27] = u[27] ^ v[27];

  004b3	b8 04 00 00 00	 mov	 eax, 4
  004b8	6b c8 1b	 imul	 ecx, eax, 27
  004bb	ba 04 00 00 00	 mov	 edx, 4
  004c0	6b c2 1b	 imul	 eax, edx, 27
  004c3	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  004c6	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  004c9	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  004cc	33 0c 06	 xor	 ecx, DWORD PTR [esi+eax]
  004cf	ba 04 00 00 00	 mov	 edx, 4
  004d4	6b c2 1b	 imul	 eax, edx, 27
  004d7	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  004da	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 106  :             w[28] = u[28] ^ v[28];

  004dd	b8 04 00 00 00	 mov	 eax, 4
  004e2	6b c8 1c	 imul	 ecx, eax, 28
  004e5	ba 04 00 00 00	 mov	 edx, 4
  004ea	6b c2 1c	 imul	 eax, edx, 28
  004ed	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  004f0	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  004f3	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  004f6	33 0c 06	 xor	 ecx, DWORD PTR [esi+eax]
  004f9	ba 04 00 00 00	 mov	 edx, 4
  004fe	6b c2 1c	 imul	 eax, edx, 28
  00501	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  00504	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 107  :             w[29] = u[29] ^ v[29];

  00507	b8 04 00 00 00	 mov	 eax, 4
  0050c	6b c8 1d	 imul	 ecx, eax, 29
  0050f	ba 04 00 00 00	 mov	 edx, 4
  00514	6b c2 1d	 imul	 eax, edx, 29
  00517	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  0051a	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  0051d	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  00520	33 0c 06	 xor	 ecx, DWORD PTR [esi+eax]
  00523	ba 04 00 00 00	 mov	 edx, 4
  00528	6b c2 1d	 imul	 eax, edx, 29
  0052b	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  0052e	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 108  :             w[30] = u[30] ^ v[30];

  00531	b8 04 00 00 00	 mov	 eax, 4
  00536	6b c8 1e	 imul	 ecx, eax, 30
  00539	ba 04 00 00 00	 mov	 edx, 4
  0053e	6b c2 1e	 imul	 eax, edx, 30
  00541	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00544	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  00547	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  0054a	33 0c 06	 xor	 ecx, DWORD PTR [esi+eax]
  0054d	ba 04 00 00 00	 mov	 edx, 4
  00552	6b c2 1e	 imul	 eax, edx, 30
  00555	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  00558	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 109  :             w[31] = u[31] ^ v[31];

  0055b	b8 04 00 00 00	 mov	 eax, 4
  00560	6b c8 1f	 imul	 ecx, eax, 31
  00563	ba 04 00 00 00	 mov	 edx, 4
  00568	6b c2 1f	 imul	 eax, edx, 31
  0056b	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  0056e	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  00571	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  00574	33 0c 06	 xor	 ecx, DWORD PTR [esi+eax]
  00577	ba 04 00 00 00	 mov	 edx, 4
  0057c	6b c2 1f	 imul	 eax, edx, 31
  0057f	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  00582	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 110  :             u += 32;

  00585	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00588	05 80 00 00 00	 add	 eax, 128		; 00000080H
  0058d	89 45 08	 mov	 DWORD PTR _u$[ebp], eax

; 111  :             v += 32;

  00590	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00593	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  00599	89 4d 10	 mov	 DWORD PTR _v$[ebp], ecx

; 112  :             w += 32;

  0059c	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  0059f	81 c2 80 00 00
	00		 add	 edx, 128		; 00000080H
  005a5	89 55 18	 mov	 DWORD PTR _w$[ebp], edx

; 113  :             --count;

  005a8	8b 45 f4	 mov	 eax, DWORD PTR _count$[ebp]
  005ab	83 e8 01	 sub	 eax, 1
  005ae	89 45 f4	 mov	 DWORD PTR _count$[ebp], eax

; 114  :         }

  005b1	e9 88 fa ff ff	 jmp	 $LN2@ExclusiveO
$LN3@ExclusiveO:

; 115  : 
; 116  :         if (or_count & 0x10)

  005b6	8b 4d fc	 mov	 ecx, DWORD PTR _or_count$[ebp]
  005b9	83 e1 10	 and	 ecx, 16			; 00000010H
  005bc	0f 84 b8 02 00
	00		 je	 $LN4@ExclusiveO

; 117  :         {
; 118  :             w[0] = u[0] ^ v[0];

  005c2	ba 04 00 00 00	 mov	 edx, 4
  005c7	6b c2 00	 imul	 eax, edx, 0
  005ca	b9 04 00 00 00	 mov	 ecx, 4
  005cf	6b d1 00	 imul	 edx, ecx, 0
  005d2	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  005d5	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  005d8	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  005db	33 04 16	 xor	 eax, DWORD PTR [esi+edx]
  005de	b9 04 00 00 00	 mov	 ecx, 4
  005e3	6b d1 00	 imul	 edx, ecx, 0
  005e6	8b 4d 18	 mov	 ecx, DWORD PTR _w$[ebp]
  005e9	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 119  :             w[1] = u[1] ^ v[1];

  005ec	ba 04 00 00 00	 mov	 edx, 4
  005f1	c1 e2 00	 shl	 edx, 0
  005f4	b8 04 00 00 00	 mov	 eax, 4
  005f9	c1 e0 00	 shl	 eax, 0
  005fc	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  005ff	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  00602	8b 14 11	 mov	 edx, DWORD PTR [ecx+edx]
  00605	33 14 06	 xor	 edx, DWORD PTR [esi+eax]
  00608	b8 04 00 00 00	 mov	 eax, 4
  0060d	c1 e0 00	 shl	 eax, 0
  00610	8b 4d 18	 mov	 ecx, DWORD PTR _w$[ebp]
  00613	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 120  :             w[2] = u[2] ^ v[2];

  00616	ba 04 00 00 00	 mov	 edx, 4
  0061b	d1 e2		 shl	 edx, 1
  0061d	b8 04 00 00 00	 mov	 eax, 4
  00622	d1 e0		 shl	 eax, 1
  00624	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  00627	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  0062a	8b 14 11	 mov	 edx, DWORD PTR [ecx+edx]
  0062d	33 14 06	 xor	 edx, DWORD PTR [esi+eax]
  00630	b8 04 00 00 00	 mov	 eax, 4
  00635	d1 e0		 shl	 eax, 1
  00637	8b 4d 18	 mov	 ecx, DWORD PTR _w$[ebp]
  0063a	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 121  :             w[3] = u[3] ^ v[3];

  0063d	ba 04 00 00 00	 mov	 edx, 4
  00642	6b c2 03	 imul	 eax, edx, 3
  00645	b9 04 00 00 00	 mov	 ecx, 4
  0064a	6b d1 03	 imul	 edx, ecx, 3
  0064d	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  00650	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  00653	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  00656	33 04 16	 xor	 eax, DWORD PTR [esi+edx]
  00659	b9 04 00 00 00	 mov	 ecx, 4
  0065e	6b d1 03	 imul	 edx, ecx, 3
  00661	8b 4d 18	 mov	 ecx, DWORD PTR _w$[ebp]
  00664	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 122  :             w[4] = u[4] ^ v[4];

  00667	ba 04 00 00 00	 mov	 edx, 4
  0066c	c1 e2 02	 shl	 edx, 2
  0066f	b8 04 00 00 00	 mov	 eax, 4
  00674	c1 e0 02	 shl	 eax, 2
  00677	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  0067a	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  0067d	8b 14 11	 mov	 edx, DWORD PTR [ecx+edx]
  00680	33 14 06	 xor	 edx, DWORD PTR [esi+eax]
  00683	b8 04 00 00 00	 mov	 eax, 4
  00688	c1 e0 02	 shl	 eax, 2
  0068b	8b 4d 18	 mov	 ecx, DWORD PTR _w$[ebp]
  0068e	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 123  :             w[5] = u[5] ^ v[5];

  00691	ba 04 00 00 00	 mov	 edx, 4
  00696	6b c2 05	 imul	 eax, edx, 5
  00699	b9 04 00 00 00	 mov	 ecx, 4
  0069e	6b d1 05	 imul	 edx, ecx, 5
  006a1	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  006a4	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  006a7	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  006aa	33 04 16	 xor	 eax, DWORD PTR [esi+edx]
  006ad	b9 04 00 00 00	 mov	 ecx, 4
  006b2	6b d1 05	 imul	 edx, ecx, 5
  006b5	8b 4d 18	 mov	 ecx, DWORD PTR _w$[ebp]
  006b8	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 124  :             w[6] = u[6] ^ v[6];

  006bb	ba 04 00 00 00	 mov	 edx, 4
  006c0	6b c2 06	 imul	 eax, edx, 6
  006c3	b9 04 00 00 00	 mov	 ecx, 4
  006c8	6b d1 06	 imul	 edx, ecx, 6
  006cb	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  006ce	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  006d1	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  006d4	33 04 16	 xor	 eax, DWORD PTR [esi+edx]
  006d7	b9 04 00 00 00	 mov	 ecx, 4
  006dc	6b d1 06	 imul	 edx, ecx, 6
  006df	8b 4d 18	 mov	 ecx, DWORD PTR _w$[ebp]
  006e2	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 125  :             w[7] = u[7] ^ v[7];

  006e5	ba 04 00 00 00	 mov	 edx, 4
  006ea	6b c2 07	 imul	 eax, edx, 7
  006ed	b9 04 00 00 00	 mov	 ecx, 4
  006f2	6b d1 07	 imul	 edx, ecx, 7
  006f5	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  006f8	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  006fb	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  006fe	33 04 16	 xor	 eax, DWORD PTR [esi+edx]
  00701	b9 04 00 00 00	 mov	 ecx, 4
  00706	6b d1 07	 imul	 edx, ecx, 7
  00709	8b 4d 18	 mov	 ecx, DWORD PTR _w$[ebp]
  0070c	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 126  :             w[8] = u[8] ^ v[8];

  0070f	ba 04 00 00 00	 mov	 edx, 4
  00714	c1 e2 03	 shl	 edx, 3
  00717	b8 04 00 00 00	 mov	 eax, 4
  0071c	c1 e0 03	 shl	 eax, 3
  0071f	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  00722	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  00725	8b 14 11	 mov	 edx, DWORD PTR [ecx+edx]
  00728	33 14 06	 xor	 edx, DWORD PTR [esi+eax]
  0072b	b8 04 00 00 00	 mov	 eax, 4
  00730	c1 e0 03	 shl	 eax, 3
  00733	8b 4d 18	 mov	 ecx, DWORD PTR _w$[ebp]
  00736	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 127  :             w[9] = u[9] ^ v[9];

  00739	ba 04 00 00 00	 mov	 edx, 4
  0073e	6b c2 09	 imul	 eax, edx, 9
  00741	b9 04 00 00 00	 mov	 ecx, 4
  00746	6b d1 09	 imul	 edx, ecx, 9
  00749	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  0074c	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  0074f	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  00752	33 04 16	 xor	 eax, DWORD PTR [esi+edx]
  00755	b9 04 00 00 00	 mov	 ecx, 4
  0075a	6b d1 09	 imul	 edx, ecx, 9
  0075d	8b 4d 18	 mov	 ecx, DWORD PTR _w$[ebp]
  00760	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 128  :             w[10] = u[10] ^ v[10];

  00763	ba 04 00 00 00	 mov	 edx, 4
  00768	6b c2 0a	 imul	 eax, edx, 10
  0076b	b9 04 00 00 00	 mov	 ecx, 4
  00770	6b d1 0a	 imul	 edx, ecx, 10
  00773	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  00776	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  00779	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  0077c	33 04 16	 xor	 eax, DWORD PTR [esi+edx]
  0077f	b9 04 00 00 00	 mov	 ecx, 4
  00784	6b d1 0a	 imul	 edx, ecx, 10
  00787	8b 4d 18	 mov	 ecx, DWORD PTR _w$[ebp]
  0078a	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 129  :             w[11] = u[11] ^ v[11];

  0078d	ba 04 00 00 00	 mov	 edx, 4
  00792	6b c2 0b	 imul	 eax, edx, 11
  00795	b9 04 00 00 00	 mov	 ecx, 4
  0079a	6b d1 0b	 imul	 edx, ecx, 11
  0079d	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  007a0	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  007a3	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  007a6	33 04 16	 xor	 eax, DWORD PTR [esi+edx]
  007a9	b9 04 00 00 00	 mov	 ecx, 4
  007ae	6b d1 0b	 imul	 edx, ecx, 11
  007b1	8b 4d 18	 mov	 ecx, DWORD PTR _w$[ebp]
  007b4	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 130  :             w[12] = u[12] ^ v[12];

  007b7	ba 04 00 00 00	 mov	 edx, 4
  007bc	6b c2 0c	 imul	 eax, edx, 12
  007bf	b9 04 00 00 00	 mov	 ecx, 4
  007c4	6b d1 0c	 imul	 edx, ecx, 12
  007c7	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  007ca	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  007cd	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  007d0	33 04 16	 xor	 eax, DWORD PTR [esi+edx]
  007d3	b9 04 00 00 00	 mov	 ecx, 4
  007d8	6b d1 0c	 imul	 edx, ecx, 12
  007db	8b 4d 18	 mov	 ecx, DWORD PTR _w$[ebp]
  007de	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 131  :             w[13] = u[13] ^ v[13];

  007e1	ba 04 00 00 00	 mov	 edx, 4
  007e6	6b c2 0d	 imul	 eax, edx, 13
  007e9	b9 04 00 00 00	 mov	 ecx, 4
  007ee	6b d1 0d	 imul	 edx, ecx, 13
  007f1	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  007f4	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  007f7	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  007fa	33 04 16	 xor	 eax, DWORD PTR [esi+edx]
  007fd	b9 04 00 00 00	 mov	 ecx, 4
  00802	6b d1 0d	 imul	 edx, ecx, 13
  00805	8b 4d 18	 mov	 ecx, DWORD PTR _w$[ebp]
  00808	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 132  :             w[14] = u[14] ^ v[14];

  0080b	ba 04 00 00 00	 mov	 edx, 4
  00810	6b c2 0e	 imul	 eax, edx, 14
  00813	b9 04 00 00 00	 mov	 ecx, 4
  00818	6b d1 0e	 imul	 edx, ecx, 14
  0081b	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  0081e	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  00821	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  00824	33 04 16	 xor	 eax, DWORD PTR [esi+edx]
  00827	b9 04 00 00 00	 mov	 ecx, 4
  0082c	6b d1 0e	 imul	 edx, ecx, 14
  0082f	8b 4d 18	 mov	 ecx, DWORD PTR _w$[ebp]
  00832	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 133  :             w[15] = u[15] ^ v[15];

  00835	ba 04 00 00 00	 mov	 edx, 4
  0083a	6b c2 0f	 imul	 eax, edx, 15
  0083d	b9 04 00 00 00	 mov	 ecx, 4
  00842	6b d1 0f	 imul	 edx, ecx, 15
  00845	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  00848	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  0084b	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  0084e	33 04 16	 xor	 eax, DWORD PTR [esi+edx]
  00851	b9 04 00 00 00	 mov	 ecx, 4
  00856	6b d1 0f	 imul	 edx, ecx, 15
  00859	8b 4d 18	 mov	 ecx, DWORD PTR _w$[ebp]
  0085c	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 134  :             u += 16;

  0085f	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00862	83 c2 40	 add	 edx, 64			; 00000040H
  00865	89 55 08	 mov	 DWORD PTR _u$[ebp], edx

; 135  :             v += 16;

  00868	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0086b	83 c0 40	 add	 eax, 64			; 00000040H
  0086e	89 45 10	 mov	 DWORD PTR _v$[ebp], eax

; 136  :             w += 16;

  00871	8b 4d 18	 mov	 ecx, DWORD PTR _w$[ebp]
  00874	83 c1 40	 add	 ecx, 64			; 00000040H
  00877	89 4d 18	 mov	 DWORD PTR _w$[ebp], ecx
$LN4@ExclusiveO:

; 137  :         }
; 138  : 
; 139  :         if (or_count & 0x8)

  0087a	8b 55 fc	 mov	 edx, DWORD PTR _or_count$[ebp]
  0087d	83 e2 08	 and	 edx, 8
  00880	0f 84 68 01 00
	00		 je	 $LN5@ExclusiveO

; 140  :         {
; 141  :             w[0] = u[0] ^ v[0];

  00886	b8 04 00 00 00	 mov	 eax, 4
  0088b	6b c8 00	 imul	 ecx, eax, 0
  0088e	ba 04 00 00 00	 mov	 edx, 4
  00893	6b c2 00	 imul	 eax, edx, 0
  00896	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00899	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  0089c	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  0089f	33 0c 06	 xor	 ecx, DWORD PTR [esi+eax]
  008a2	ba 04 00 00 00	 mov	 edx, 4
  008a7	6b c2 00	 imul	 eax, edx, 0
  008aa	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  008ad	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 142  :             w[1] = u[1] ^ v[1];

  008b0	b8 04 00 00 00	 mov	 eax, 4
  008b5	c1 e0 00	 shl	 eax, 0
  008b8	b9 04 00 00 00	 mov	 ecx, 4
  008bd	c1 e1 00	 shl	 ecx, 0
  008c0	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  008c3	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  008c6	8b 04 02	 mov	 eax, DWORD PTR [edx+eax]
  008c9	33 04 0e	 xor	 eax, DWORD PTR [esi+ecx]
  008cc	b9 04 00 00 00	 mov	 ecx, 4
  008d1	c1 e1 00	 shl	 ecx, 0
  008d4	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  008d7	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 143  :             w[2] = u[2] ^ v[2];

  008da	b8 04 00 00 00	 mov	 eax, 4
  008df	d1 e0		 shl	 eax, 1
  008e1	b9 04 00 00 00	 mov	 ecx, 4
  008e6	d1 e1		 shl	 ecx, 1
  008e8	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  008eb	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  008ee	8b 04 02	 mov	 eax, DWORD PTR [edx+eax]
  008f1	33 04 0e	 xor	 eax, DWORD PTR [esi+ecx]
  008f4	b9 04 00 00 00	 mov	 ecx, 4
  008f9	d1 e1		 shl	 ecx, 1
  008fb	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  008fe	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 144  :             w[3] = u[3] ^ v[3];

  00901	b8 04 00 00 00	 mov	 eax, 4
  00906	6b c8 03	 imul	 ecx, eax, 3
  00909	ba 04 00 00 00	 mov	 edx, 4
  0090e	6b c2 03	 imul	 eax, edx, 3
  00911	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00914	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  00917	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  0091a	33 0c 06	 xor	 ecx, DWORD PTR [esi+eax]
  0091d	ba 04 00 00 00	 mov	 edx, 4
  00922	6b c2 03	 imul	 eax, edx, 3
  00925	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  00928	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 145  :             w[4] = u[4] ^ v[4];

  0092b	b8 04 00 00 00	 mov	 eax, 4
  00930	c1 e0 02	 shl	 eax, 2
  00933	b9 04 00 00 00	 mov	 ecx, 4
  00938	c1 e1 02	 shl	 ecx, 2
  0093b	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  0093e	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  00941	8b 04 02	 mov	 eax, DWORD PTR [edx+eax]
  00944	33 04 0e	 xor	 eax, DWORD PTR [esi+ecx]
  00947	b9 04 00 00 00	 mov	 ecx, 4
  0094c	c1 e1 02	 shl	 ecx, 2
  0094f	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  00952	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 146  :             w[5] = u[5] ^ v[5];

  00955	b8 04 00 00 00	 mov	 eax, 4
  0095a	6b c8 05	 imul	 ecx, eax, 5
  0095d	ba 04 00 00 00	 mov	 edx, 4
  00962	6b c2 05	 imul	 eax, edx, 5
  00965	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00968	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  0096b	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  0096e	33 0c 06	 xor	 ecx, DWORD PTR [esi+eax]
  00971	ba 04 00 00 00	 mov	 edx, 4
  00976	6b c2 05	 imul	 eax, edx, 5
  00979	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  0097c	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 147  :             w[6] = u[6] ^ v[6];

  0097f	b8 04 00 00 00	 mov	 eax, 4
  00984	6b c8 06	 imul	 ecx, eax, 6
  00987	ba 04 00 00 00	 mov	 edx, 4
  0098c	6b c2 06	 imul	 eax, edx, 6
  0098f	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00992	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  00995	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  00998	33 0c 06	 xor	 ecx, DWORD PTR [esi+eax]
  0099b	ba 04 00 00 00	 mov	 edx, 4
  009a0	6b c2 06	 imul	 eax, edx, 6
  009a3	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  009a6	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 148  :             w[7] = u[7] ^ v[7];

  009a9	b8 04 00 00 00	 mov	 eax, 4
  009ae	6b c8 07	 imul	 ecx, eax, 7
  009b1	ba 04 00 00 00	 mov	 edx, 4
  009b6	6b c2 07	 imul	 eax, edx, 7
  009b9	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  009bc	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  009bf	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  009c2	33 0c 06	 xor	 ecx, DWORD PTR [esi+eax]
  009c5	ba 04 00 00 00	 mov	 edx, 4
  009ca	6b c2 07	 imul	 eax, edx, 7
  009cd	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  009d0	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 149  :             u += 8;

  009d3	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  009d6	83 c0 20	 add	 eax, 32			; 00000020H
  009d9	89 45 08	 mov	 DWORD PTR _u$[ebp], eax

; 150  :             v += 8;

  009dc	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  009df	83 c1 20	 add	 ecx, 32			; 00000020H
  009e2	89 4d 10	 mov	 DWORD PTR _v$[ebp], ecx

; 151  :             w += 8;

  009e5	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  009e8	83 c2 20	 add	 edx, 32			; 00000020H
  009eb	89 55 18	 mov	 DWORD PTR _w$[ebp], edx
$LN5@ExclusiveO:

; 152  :         }
; 153  : 
; 154  :         if (or_count & 0x4)

  009ee	8b 45 fc	 mov	 eax, DWORD PTR _or_count$[ebp]
  009f1	83 e0 04	 and	 eax, 4
  009f4	0f 84 c0 00 00
	00		 je	 $LN6@ExclusiveO

; 155  :         {
; 156  :             w[0] = u[0] ^ v[0];

  009fa	b9 04 00 00 00	 mov	 ecx, 4
  009ff	6b d1 00	 imul	 edx, ecx, 0
  00a02	b8 04 00 00 00	 mov	 eax, 4
  00a07	6b c8 00	 imul	 ecx, eax, 0
  00a0a	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00a0d	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  00a10	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  00a13	33 14 0e	 xor	 edx, DWORD PTR [esi+ecx]
  00a16	b8 04 00 00 00	 mov	 eax, 4
  00a1b	6b c8 00	 imul	 ecx, eax, 0
  00a1e	8b 45 18	 mov	 eax, DWORD PTR _w$[ebp]
  00a21	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 157  :             w[1] = u[1] ^ v[1];

  00a24	b9 04 00 00 00	 mov	 ecx, 4
  00a29	c1 e1 00	 shl	 ecx, 0
  00a2c	ba 04 00 00 00	 mov	 edx, 4
  00a31	c1 e2 00	 shl	 edx, 0
  00a34	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00a37	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  00a3a	8b 0c 08	 mov	 ecx, DWORD PTR [eax+ecx]
  00a3d	33 0c 16	 xor	 ecx, DWORD PTR [esi+edx]
  00a40	ba 04 00 00 00	 mov	 edx, 4
  00a45	c1 e2 00	 shl	 edx, 0
  00a48	8b 45 18	 mov	 eax, DWORD PTR _w$[ebp]
  00a4b	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx

; 158  :             w[2] = u[2] ^ v[2];

  00a4e	b9 04 00 00 00	 mov	 ecx, 4
  00a53	d1 e1		 shl	 ecx, 1
  00a55	ba 04 00 00 00	 mov	 edx, 4
  00a5a	d1 e2		 shl	 edx, 1
  00a5c	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00a5f	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  00a62	8b 0c 08	 mov	 ecx, DWORD PTR [eax+ecx]
  00a65	33 0c 16	 xor	 ecx, DWORD PTR [esi+edx]
  00a68	ba 04 00 00 00	 mov	 edx, 4
  00a6d	d1 e2		 shl	 edx, 1
  00a6f	8b 45 18	 mov	 eax, DWORD PTR _w$[ebp]
  00a72	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx

; 159  :             w[3] = u[3] ^ v[3];

  00a75	b9 04 00 00 00	 mov	 ecx, 4
  00a7a	6b d1 03	 imul	 edx, ecx, 3
  00a7d	b8 04 00 00 00	 mov	 eax, 4
  00a82	6b c8 03	 imul	 ecx, eax, 3
  00a85	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00a88	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  00a8b	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  00a8e	33 14 0e	 xor	 edx, DWORD PTR [esi+ecx]
  00a91	b8 04 00 00 00	 mov	 eax, 4
  00a96	6b c8 03	 imul	 ecx, eax, 3
  00a99	8b 45 18	 mov	 eax, DWORD PTR _w$[ebp]
  00a9c	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 160  :             u += 4;

  00a9f	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  00aa2	83 c1 10	 add	 ecx, 16			; 00000010H
  00aa5	89 4d 08	 mov	 DWORD PTR _u$[ebp], ecx

; 161  :             v += 4;

  00aa8	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp]
  00aab	83 c2 10	 add	 edx, 16			; 00000010H
  00aae	89 55 10	 mov	 DWORD PTR _v$[ebp], edx

; 162  :             w += 4;

  00ab1	8b 45 18	 mov	 eax, DWORD PTR _w$[ebp]
  00ab4	83 c0 10	 add	 eax, 16			; 00000010H
  00ab7	89 45 18	 mov	 DWORD PTR _w$[ebp], eax
$LN6@ExclusiveO:

; 163  :         }
; 164  : 
; 165  :         if (or_count & 0x2)

  00aba	8b 4d fc	 mov	 ecx, DWORD PTR _or_count$[ebp]
  00abd	83 e1 02	 and	 ecx, 2
  00ac0	74 6f		 je	 SHORT $LN7@ExclusiveO

; 166  :         {
; 167  :             w[0] = u[0] ^ v[0];

  00ac2	ba 04 00 00 00	 mov	 edx, 4
  00ac7	6b c2 00	 imul	 eax, edx, 0
  00aca	b9 04 00 00 00	 mov	 ecx, 4
  00acf	6b d1 00	 imul	 edx, ecx, 0
  00ad2	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  00ad5	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  00ad8	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  00adb	33 04 16	 xor	 eax, DWORD PTR [esi+edx]
  00ade	b9 04 00 00 00	 mov	 ecx, 4
  00ae3	6b d1 00	 imul	 edx, ecx, 0
  00ae6	8b 4d 18	 mov	 ecx, DWORD PTR _w$[ebp]
  00ae9	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 168  :             w[1] = u[1] ^ v[1];

  00aec	ba 04 00 00 00	 mov	 edx, 4
  00af1	c1 e2 00	 shl	 edx, 0
  00af4	b8 04 00 00 00	 mov	 eax, 4
  00af9	c1 e0 00	 shl	 eax, 0
  00afc	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  00aff	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  00b02	8b 14 11	 mov	 edx, DWORD PTR [ecx+edx]
  00b05	33 14 06	 xor	 edx, DWORD PTR [esi+eax]
  00b08	b8 04 00 00 00	 mov	 eax, 4
  00b0d	c1 e0 00	 shl	 eax, 0
  00b10	8b 4d 18	 mov	 ecx, DWORD PTR _w$[ebp]
  00b13	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 169  :             u += 2;

  00b16	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00b19	83 c2 08	 add	 edx, 8
  00b1c	89 55 08	 mov	 DWORD PTR _u$[ebp], edx

; 170  :             v += 2;

  00b1f	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  00b22	83 c0 08	 add	 eax, 8
  00b25	89 45 10	 mov	 DWORD PTR _v$[ebp], eax

; 171  :             w += 2;

  00b28	8b 4d 18	 mov	 ecx, DWORD PTR _w$[ebp]
  00b2b	83 c1 08	 add	 ecx, 8
  00b2e	89 4d 18	 mov	 DWORD PTR _w$[ebp], ecx
$LN7@ExclusiveO:

; 172  :         }
; 173  : 
; 174  :         if (or_count & 0x1)

  00b31	8b 55 fc	 mov	 edx, DWORD PTR _or_count$[ebp]
  00b34	83 e2 01	 and	 edx, 1
  00b37	74 45		 je	 SHORT $LN8@ExclusiveO

; 175  :         {
; 176  :             w[0] = u[0] ^ v[0];

  00b39	b8 04 00 00 00	 mov	 eax, 4
  00b3e	6b c8 00	 imul	 ecx, eax, 0
  00b41	ba 04 00 00 00	 mov	 edx, 4
  00b46	6b c2 00	 imul	 eax, edx, 0
  00b49	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00b4c	8b 75 10	 mov	 esi, DWORD PTR _v$[ebp]
  00b4f	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  00b52	33 0c 06	 xor	 ecx, DWORD PTR [esi+eax]
  00b55	ba 04 00 00 00	 mov	 edx, 4
  00b5a	6b c2 00	 imul	 eax, edx, 0
  00b5d	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  00b60	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 177  :             u += 1;

  00b63	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  00b66	83 c0 04	 add	 eax, 4
  00b69	89 45 08	 mov	 DWORD PTR _u$[ebp], eax

; 178  :             v += 1;

  00b6c	8b 4d 10	 mov	 ecx, DWORD PTR _v$[ebp]
  00b6f	83 c1 04	 add	 ecx, 4
  00b72	89 4d 10	 mov	 DWORD PTR _v$[ebp], ecx

; 179  :             w += 1;

  00b75	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  00b78	83 c2 04	 add	 edx, 4
  00b7b	89 55 18	 mov	 DWORD PTR _w$[ebp], edx
$LN8@ExclusiveO:

; 180  :         }
; 181  : 
; 182  :         _COPY_MEMORY_UNIT(w, u, cp_count);

  00b7e	8b 45 f8	 mov	 eax, DWORD PTR _cp_count$[ebp]
  00b81	50		 push	 eax
  00b82	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  00b85	51		 push	 ecx
  00b86	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  00b89	52		 push	 edx
  00b8a	e8 00 00 00 00	 call	 __COPY_MEMORY_UNIT
  00b8f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 183  :     }

  00b92	5e		 pop	 esi
  00b93	83 c4 0c	 add	 esp, 12			; 0000000cH
  00b96	3b ec		 cmp	 ebp, esp
  00b98	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00b9d	8b e5		 mov	 esp, ebp
  00b9f	5d		 pop	 ebp
  00ba0	c3		 ret	 0
?ExclusiveOr_X_X@Internal@Core@Math@Palmtree@@YAXPAII0I0@Z ENDP ; Palmtree::Math::Core::Internal::ExclusiveOr_X_X
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.cpp
_TEXT	SEGMENT
_u$ = 8							; size = 4
_u_count$ = 12						; size = 4
_v_hi$ = 16						; size = 4
_v_lo$ = 20						; size = 4
_w$ = 24						; size = 4
?ExclusiveOr_X_2W@Internal@Core@Math@Palmtree@@YAXPAIIII0@Z PROC ; Palmtree::Math::Core::Internal::ExclusiveOr_X_2W

; 50   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __DE56A8E5_pmc_exclusiveor@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 51   :         if (u_count == 1)

  0000d	83 7d 0c 01	 cmp	 DWORD PTR _u_count$[ebp], 1
  00011	75 35		 jne	 SHORT $LN2@ExclusiveO

; 52   :         {
; 53   :             w[0] = u[0] ^ v_lo;

  00013	b8 04 00 00 00	 mov	 eax, 4
  00018	6b c8 00	 imul	 ecx, eax, 0
  0001b	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  0001e	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00021	33 45 14	 xor	 eax, DWORD PTR _v_lo$[ebp]
  00024	b9 04 00 00 00	 mov	 ecx, 4
  00029	6b d1 00	 imul	 edx, ecx, 0
  0002c	8b 4d 18	 mov	 ecx, DWORD PTR _w$[ebp]
  0002f	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 54   :             w[1] = v_hi;

  00032	ba 04 00 00 00	 mov	 edx, 4
  00037	c1 e2 00	 shl	 edx, 0
  0003a	8b 45 18	 mov	 eax, DWORD PTR _w$[ebp]
  0003d	8b 4d 10	 mov	 ecx, DWORD PTR _v_hi$[ebp]
  00040	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx
  00043	e9 a1 00 00 00	 jmp	 $LN1@ExclusiveO
$LN2@ExclusiveO:

; 55   :         }
; 56   :         else if (u_count == 2)

  00048	83 7d 0c 02	 cmp	 DWORD PTR _u_count$[ebp], 2
  0004c	75 40		 jne	 SHORT $LN4@ExclusiveO

; 57   :         {
; 58   :             w[0] = u[0] ^ v_lo;

  0004e	ba 04 00 00 00	 mov	 edx, 4
  00053	6b c2 00	 imul	 eax, edx, 0
  00056	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  00059	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  0005c	33 55 14	 xor	 edx, DWORD PTR _v_lo$[ebp]
  0005f	b8 04 00 00 00	 mov	 eax, 4
  00064	6b c8 00	 imul	 ecx, eax, 0
  00067	8b 45 18	 mov	 eax, DWORD PTR _w$[ebp]
  0006a	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 59   :             w[1] = u[1] ^ v_hi;

  0006d	b9 04 00 00 00	 mov	 ecx, 4
  00072	c1 e1 00	 shl	 ecx, 0
  00075	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00078	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0007b	33 45 10	 xor	 eax, DWORD PTR _v_hi$[ebp]
  0007e	b9 04 00 00 00	 mov	 ecx, 4
  00083	c1 e1 00	 shl	 ecx, 0
  00086	8b 55 18	 mov	 edx, DWORD PTR _w$[ebp]
  00089	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 60   :         }
; 61   :         else

  0008c	eb 5b		 jmp	 SHORT $LN1@ExclusiveO
$LN4@ExclusiveO:

; 62   :         {
; 63   :             w[0] = u[0] ^ v_lo;

  0008e	b8 04 00 00 00	 mov	 eax, 4
  00093	6b c8 00	 imul	 ecx, eax, 0
  00096	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  00099	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0009c	33 45 14	 xor	 eax, DWORD PTR _v_lo$[ebp]
  0009f	b9 04 00 00 00	 mov	 ecx, 4
  000a4	6b d1 00	 imul	 edx, ecx, 0
  000a7	8b 4d 18	 mov	 ecx, DWORD PTR _w$[ebp]
  000aa	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 64   :             w[1] = u[1] ^ v_hi;

  000ad	ba 04 00 00 00	 mov	 edx, 4
  000b2	c1 e2 00	 shl	 edx, 0
  000b5	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  000b8	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  000bb	33 4d 10	 xor	 ecx, DWORD PTR _v_hi$[ebp]
  000be	ba 04 00 00 00	 mov	 edx, 4
  000c3	c1 e2 00	 shl	 edx, 0
  000c6	8b 45 18	 mov	 eax, DWORD PTR _w$[ebp]
  000c9	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx

; 65   :             _COPY_MEMORY_UNIT(w + 2, u + 2, u_count - 2);

  000cc	8b 4d 0c	 mov	 ecx, DWORD PTR _u_count$[ebp]
  000cf	83 e9 02	 sub	 ecx, 2
  000d2	51		 push	 ecx
  000d3	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  000d6	83 c2 08	 add	 edx, 8
  000d9	52		 push	 edx
  000da	8b 45 18	 mov	 eax, DWORD PTR _w$[ebp]
  000dd	83 c0 08	 add	 eax, 8
  000e0	50		 push	 eax
  000e1	e8 00 00 00 00	 call	 __COPY_MEMORY_UNIT
  000e6	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@ExclusiveO:

; 66   :         }
; 67   :     }

  000e9	3b ec		 cmp	 ebp, esp
  000eb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f0	5d		 pop	 ebp
  000f1	c3		 ret	 0
?ExclusiveOr_X_2W@Internal@Core@Math@Palmtree@@YAXPAIIII0@Z ENDP ; Palmtree::Math::Core::Internal::ExclusiveOr_X_2W
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.cpp
_TEXT	SEGMENT
_u$ = 8							; size = 4
_u_count$ = 12						; size = 4
_v$ = 16						; size = 4
_w$ = 20						; size = 4
?ExclusiveOr_X_1W@Internal@Core@Math@Palmtree@@YAXPAIII0@Z PROC ; Palmtree::Math::Core::Internal::ExclusiveOr_X_1W

; 38   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __DE56A8E5_pmc_exclusiveor@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 39   :         if (u_count == 1)

  0000d	83 7d 0c 01	 cmp	 DWORD PTR _u_count$[ebp], 1
  00011	75 21		 jne	 SHORT $LN2@ExclusiveO

; 40   :             w[0] = u[0] ^ v;

  00013	b8 04 00 00 00	 mov	 eax, 4
  00018	6b c8 00	 imul	 ecx, eax, 0
  0001b	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  0001e	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00021	33 45 10	 xor	 eax, DWORD PTR _v$[ebp]
  00024	b9 04 00 00 00	 mov	 ecx, 4
  00029	6b d1 00	 imul	 edx, ecx, 0
  0002c	8b 4d 14	 mov	 ecx, DWORD PTR _w$[ebp]
  0002f	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 41   :         else

  00032	eb 3c		 jmp	 SHORT $LN1@ExclusiveO
$LN2@ExclusiveO:

; 42   :         {
; 43   :             w[0] = u[0] ^ v;

  00034	ba 04 00 00 00	 mov	 edx, 4
  00039	6b c2 00	 imul	 eax, edx, 0
  0003c	8b 4d 08	 mov	 ecx, DWORD PTR _u$[ebp]
  0003f	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00042	33 55 10	 xor	 edx, DWORD PTR _v$[ebp]
  00045	b8 04 00 00 00	 mov	 eax, 4
  0004a	6b c8 00	 imul	 ecx, eax, 0
  0004d	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  00050	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 44   :             _COPY_MEMORY_UNIT(w + 1, u + 1, u_count - 1);

  00053	8b 4d 0c	 mov	 ecx, DWORD PTR _u_count$[ebp]
  00056	83 e9 01	 sub	 ecx, 1
  00059	51		 push	 ecx
  0005a	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  0005d	83 c2 04	 add	 edx, 4
  00060	52		 push	 edx
  00061	8b 45 14	 mov	 eax, DWORD PTR _w$[ebp]
  00064	83 c0 04	 add	 eax, 4
  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 __COPY_MEMORY_UNIT
  0006d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@ExclusiveO:

; 45   :         }
; 46   :     }

  00070	3b ec		 cmp	 ebp, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
?ExclusiveOr_X_1W@Internal@Core@Math@Palmtree@@YAXPAIII0@Z ENDP ; Palmtree::Math::Core::Internal::ExclusiveOr_X_1W
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 4
__LZCNT_ALT_UNIT PROC

; 454  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 455  :             if (x == 0)

  00025	83 7d 08 00	 cmp	 DWORD PTR _x$[ebp], 0
  00029	75 07		 jne	 SHORT $LN2@LZCNT_ALT_

; 456  :                 return (sizeof(x) * 8);

  0002b	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00030	eb 0f		 jmp	 SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 457  : #ifdef _M_IX86
; 458  :             DWORD pos;
; 459  : #ifdef _MSC_VER
; 460  :             _BitScanReverse(&pos, x);

  00032	0f bd 45 08	 bsr	 eax, DWORD PTR _x$[ebp]
  00036	89 45 f8	 mov	 DWORD PTR _pos$[ebp], eax

; 461  : #elif defined(__GNUC__)
; 462  :             __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 463  : #else
; 464  : #error unknown compiler
; 465  : #endif
; 466  : #elif defined(_M_X64)
; 467  : #ifdef _MSC_VER
; 468  :             DWORD pos;
; 469  :             _BitScanReverse64(&pos, x);
; 470  : #elif defined(__GNUC__)
; 471  :             _UINT64_T pos;
; 472  :             __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 473  : #else
; 474  : #error unknown compiler
; 475  : #endif
; 476  : #else
; 477  : #error unknown platform
; 478  : #endif
; 479  :             return (sizeof(x) * 8 - 1 - pos);

  00039	b8 1f 00 00 00	 mov	 eax, 31			; 0000001fH
  0003e	2b 45 f8	 sub	 eax, DWORD PTR _pos$[ebp]
$LN1@LZCNT_ALT_:

; 480  :         }

  00041	52		 push	 edx
  00042	8b cd		 mov	 ecx, ebp
  00044	50		 push	 eax
  00045	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@LZCNT_ALT_
  0004b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00050	58		 pop	 eax
  00051	5a		 pop	 edx
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH
  00055	3b ec		 cmp	 ebp, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
$LN6@LZCNT_ALT_:
  00060	01 00 00 00	 DD	 1
  00064	00 00 00 00	 DD	 $LN5@LZCNT_ALT_
$LN5@LZCNT_ALT_:
  00068	f8 ff ff ff	 DD	 -8			; fffffff8H
  0006c	04 00 00 00	 DD	 4
  00070	00 00 00 00	 DD	 $LN4@LZCNT_ALT_
$LN4@LZCNT_ALT_:
  00074	70		 DB	 112			; 00000070H
  00075	6f		 DB	 111			; 0000006fH
  00076	73		 DB	 115			; 00000073H
  00077	00		 DB	 0
__LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_x$ = 8							; size = 4
__LZCNT_ALT_32 PROC

; 421  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 422  :             if (x == 0)

  00025	83 7d 08 00	 cmp	 DWORD PTR _x$[ebp], 0
  00029	75 07		 jne	 SHORT $LN2@LZCNT_ALT_

; 423  :                 return (sizeof(x) * 8);

  0002b	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00030	eb 0f		 jmp	 SHORT $LN1@LZCNT_ALT_
$LN2@LZCNT_ALT_:

; 424  :             DWORD pos;
; 425  : #ifdef _MSC_VER
; 426  :             _BitScanReverse(&pos, x);

  00032	0f bd 45 08	 bsr	 eax, DWORD PTR _x$[ebp]
  00036	89 45 f8	 mov	 DWORD PTR _pos$[ebp], eax

; 427  : #elif defined(__GNUC__)
; 428  :             __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 429  : #else
; 430  : #error unknown compiler
; 431  : #endif
; 432  :             return (sizeof(x) * 8 - 1 - pos);

  00039	b8 1f 00 00 00	 mov	 eax, 31			; 0000001fH
  0003e	2b 45 f8	 sub	 eax, DWORD PTR _pos$[ebp]
$LN1@LZCNT_ALT_:

; 433  :         }

  00041	52		 push	 edx
  00042	8b cd		 mov	 ecx, ebp
  00044	50		 push	 eax
  00045	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@LZCNT_ALT_
  0004b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00050	58		 pop	 eax
  00051	5a		 pop	 edx
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH
  00055	3b ec		 cmp	 ebp, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
$LN6@LZCNT_ALT_:
  00060	01 00 00 00	 DD	 1
  00064	00 00 00 00	 DD	 $LN5@LZCNT_ALT_
$LN5@LZCNT_ALT_:
  00068	f8 ff ff ff	 DD	 -8			; fffffff8H
  0006c	04 00 00 00	 DD	 4
  00070	00 00 00 00	 DD	 $LN4@LZCNT_ALT_
$LN4@LZCNT_ALT_:
  00074	70		 DB	 112			; 00000070H
  00075	6f		 DB	 111			; 0000006fH
  00076	73		 DB	 115			; 00000073H
  00077	00		 DB	 0
__LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
tv65 = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
__MAXIMUM_UNIT PROC

; 166  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00010	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 167  :             return (x >= y ? x : y);

  00015	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00018	3b 45 0c	 cmp	 eax, DWORD PTR _y$[ebp]
  0001b	72 08		 jb	 SHORT $LN3@MAXIMUM_UN
  0001d	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00020	89 4d fc	 mov	 DWORD PTR tv65[ebp], ecx
  00023	eb 06		 jmp	 SHORT $LN4@MAXIMUM_UN
$LN3@MAXIMUM_UN:
  00025	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  00028	89 55 fc	 mov	 DWORD PTR tv65[ebp], edx
$LN4@MAXIMUM_UN:
  0002b	8b 45 fc	 mov	 eax, DWORD PTR tv65[ebp]

; 168  :         }

  0002e	83 c4 04	 add	 esp, 4
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
__MAXIMUM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_value$ = 8						; size = 8
_result_high$ = 16					; size = 4
__FROMDWORDTOWORD PROC

; 145  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 146  :             *result_high = (_UINT32_T)(value >> 32);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]
  00010	8b 55 0c	 mov	 edx, DWORD PTR _value$[ebp+4]
  00013	b1 20		 mov	 cl, 32			; 00000020H
  00015	e8 00 00 00 00	 call	 __aullshr
  0001a	8b 4d 10	 mov	 ecx, DWORD PTR _result_high$[ebp]
  0001d	89 01		 mov	 DWORD PTR [ecx], eax

; 147  :             return ((_UINT32_T)value);

  0001f	8b 45 08	 mov	 eax, DWORD PTR _value$[ebp]

; 148  :         }

  00022	3b ec		 cmp	 ebp, esp
  00024	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
__FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_UNIT PROC

; 63   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  0000a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 64   : #ifdef _M_IX86
; 65   :             __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

  0000f	8b 7d 08	 mov	 edi, DWORD PTR _d$[ebp]
  00012	8b 75 0c	 mov	 esi, DWORD PTR _s$[ebp]
  00015	8b 4d 10	 mov	 ecx, DWORD PTR _count$[ebp]
  00018	f3 a5		 rep movsd

; 66   : #elif defined(_M_X64)
; 67   :             __movsq(d, s, count);
; 68   : #else
; 69   : #error unknown platform
; 70   : #endif
; 71   :         }

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
__COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.cpp
_TEXT	SEGMENT
$T2 = -100						; size = 4
$T3 = -96						; size = 24
$T4 = -72						; size = 24
_w$ = -48						; size = 4
_root$ = -40						; size = 16
_nv$ = -20						; size = 4
_nu$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 4
?PMC_ExclusiveOr_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z PROC ; Palmtree::Math::Core::Internal::PMC_ExclusiveOr_X_X

; 438  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_ExclusiveOr_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 58	 sub	 esp, 88			; 00000058H
  00014	57		 push	 edi
  00015	8d 7d 9c	 lea	 edi, DWORD PTR [ebp-100]
  00018	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	50		 push	 eax
  0002c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET __DE56A8E5_pmc_exclusiveor@cpp
  0003a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 439  :         if (u == nullptr)

  0003f	83 7d 08 00	 cmp	 DWORD PTR _u$[ebp], 0
  00043	75 20		 jne	 SHORT $LN2@PMC_Exclus

; 440  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"u");

  00045	68 00 00 00 00	 push	 OFFSET $SG118071
  0004a	68 00 00 00 00	 push	 OFFSET $SG118072
  0004f	8d 4d b8	 lea	 ecx, DWORD PTR $T4[ebp]
  00052	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  00057	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  0005c	8d 45 b8	 lea	 eax, DWORD PTR $T4[ebp]
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@PMC_Exclus:

; 441  :         if (v == nullptr)

  00065	83 7d 0c 00	 cmp	 DWORD PTR _v$[ebp], 0
  00069	75 20		 jne	 SHORT $LN3@PMC_Exclus

; 442  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"v");

  0006b	68 00 00 00 00	 push	 OFFSET $SG118075
  00070	68 00 00 00 00	 push	 OFFSET $SG118076
  00075	8d 4d a0	 lea	 ecx, DWORD PTR $T3[ebp]
  00078	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0007d	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  00082	8d 4d a0	 lea	 ecx, DWORD PTR $T3[ebp]
  00085	51		 push	 ecx
  00086	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@PMC_Exclus:

; 443  :         NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

  0008b	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  0008e	89 55 f0	 mov	 DWORD PTR _nu$[ebp], edx

; 444  :         NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

  00091	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  00094	89 45 ec	 mov	 DWORD PTR _nv$[ebp], eax

; 445  :         CheckNumber(nu);

  00097	8b 4d f0	 mov	 ecx, DWORD PTR _nu$[ebp]
  0009a	51		 push	 ecx
  0009b	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  000a0	83 c4 04	 add	 esp, 4

; 446  :         CheckNumber(nv);

  000a3	8b 55 ec	 mov	 edx, DWORD PTR _nv$[ebp]
  000a6	52		 push	 edx
  000a7	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  000ac	83 c4 04	 add	 esp, 4

; 447  :         ResourceHolderUINT root;

  000af	8d 4d d8	 lea	 ecx, DWORD PTR _root$[ebp]
  000b2	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000b7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 448  :         NUMBER_HEADER* w = PMC_ExclusiveOr_X_X_Imp(nu, nv);

  000be	8b 45 ec	 mov	 eax, DWORD PTR _nv$[ebp]
  000c1	50		 push	 eax
  000c2	8b 4d f0	 mov	 ecx, DWORD PTR _nu$[ebp]
  000c5	51		 push	 ecx
  000c6	e8 00 00 00 00	 call	 ?PMC_ExclusiveOr_X_X_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@0@Z ; Palmtree::Math::Core::Internal::PMC_ExclusiveOr_X_X_Imp
  000cb	83 c4 08	 add	 esp, 8
  000ce	89 45 d0	 mov	 DWORD PTR _w$[ebp], eax

; 449  :         root.HookNumber(w);

  000d1	8b 55 d0	 mov	 edx, DWORD PTR _w$[ebp]
  000d4	52		 push	 edx
  000d5	8d 4d d8	 lea	 ecx, DWORD PTR _root$[ebp]
  000d8	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 450  : #ifdef _DEBUG
; 451  :         CheckNumber(w);

  000dd	8b 45 d0	 mov	 eax, DWORD PTR _w$[ebp]
  000e0	50		 push	 eax
  000e1	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  000e6	83 c4 04	 add	 esp, 4

; 452  : #endif
; 453  :         root.UnlinkNumber(w);

  000e9	8b 4d d0	 mov	 ecx, DWORD PTR _w$[ebp]
  000ec	51		 push	 ecx
  000ed	8d 4d d8	 lea	 ecx, DWORD PTR _root$[ebp]
  000f0	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 454  :         return ((PMC_HANDLE_UINT)w);

  000f5	8b 55 d0	 mov	 edx, DWORD PTR _w$[ebp]
  000f8	89 55 9c	 mov	 DWORD PTR $T2[ebp], edx
  000fb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00102	8d 4d d8	 lea	 ecx, DWORD PTR _root$[ebp]
  00105	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0010a	8b 45 9c	 mov	 eax, DWORD PTR $T2[ebp]
$LN4@PMC_Exclus:

; 455  :     }

  0010d	52		 push	 edx
  0010e	8b cd		 mov	 ecx, ebp
  00110	50		 push	 eax
  00111	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@PMC_Exclus
  00117	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0011c	58		 pop	 eax
  0011d	5a		 pop	 edx
  0011e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00121	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00128	59		 pop	 ecx
  00129	5f		 pop	 edi
  0012a	83 c4 64	 add	 esp, 100		; 00000064H
  0012d	3b ec		 cmp	 ebp, esp
  0012f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00134	8b e5		 mov	 esp, ebp
  00136	5d		 pop	 ebp
  00137	c2 08 00	 ret	 8
  0013a	66 90		 npad	 2
$LN9@PMC_Exclus:
  0013c	01 00 00 00	 DD	 1
  00140	00 00 00 00	 DD	 $LN8@PMC_Exclus
$LN8@PMC_Exclus:
  00144	d8 ff ff ff	 DD	 -40			; ffffffd8H
  00148	10 00 00 00	 DD	 16			; 00000010H
  0014c	00 00 00 00	 DD	 $LN6@PMC_Exclus
$LN6@PMC_Exclus:
  00150	72		 DB	 114			; 00000072H
  00151	6f		 DB	 111			; 0000006fH
  00152	6f		 DB	 111			; 0000006fH
  00153	74		 DB	 116			; 00000074H
  00154	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_ExclusiveOr_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_ExclusiveOr_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_ExclusiveOr_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_ExclusiveOr_X_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@0@Z ENDP ; Palmtree::Math::Core::Internal::PMC_ExclusiveOr_X_X
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.cpp
_TEXT	SEGMENT
$T2 = -96						; size = 4
$T3 = -92						; size = 24
$T4 = -68						; size = 24
_w$ = -44						; size = 4
_root$ = -36						; size = 16
_nu$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 8
?PMC_ExclusiveOr_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z PROC ; Palmtree::Math::Core::Internal::PMC_ExclusiveOr_X_L

; 384  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_ExclusiveOr_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 54	 sub	 esp, 84			; 00000054H
  00014	57		 push	 edi
  00015	8d 7d a0	 lea	 edi, DWORD PTR [ebp-96]
  00018	b9 15 00 00 00	 mov	 ecx, 21			; 00000015H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	50		 push	 eax
  0002c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET __DE56A8E5_pmc_exclusiveor@cpp
  0003a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 385  :         if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(v) * 8)

  0003f	33 c0		 xor	 eax, eax
  00041	74 20		 je	 SHORT $LN2@PMC_Exclus

; 386  :         {
; 387  :             // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 388  :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_exclusiveor.cpp;PMC_ExclusiveOr_X_L;1");

  00043	68 00 00 00 00	 push	 OFFSET $SG118033
  00048	68 00 00 00 00	 push	 OFFSET $SG118034
  0004d	8d 4d bc	 lea	 ecx, DWORD PTR $T4[ebp]
  00050	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00055	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0005a	8d 4d bc	 lea	 ecx, DWORD PTR $T4[ebp]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@PMC_Exclus:

; 389  :         }
; 390  :         if (u == nullptr)

  00063	83 7d 08 00	 cmp	 DWORD PTR _u$[ebp], 0
  00067	75 20		 jne	 SHORT $LN3@PMC_Exclus

; 391  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"u");

  00069	68 00 00 00 00	 push	 OFFSET $SG118037
  0006e	68 00 00 00 00	 push	 OFFSET $SG118038
  00073	8d 4d a4	 lea	 ecx, DWORD PTR $T3[ebp]
  00076	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0007b	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  00080	8d 55 a4	 lea	 edx, DWORD PTR $T3[ebp]
  00083	52		 push	 edx
  00084	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@PMC_Exclus:

; 392  :         NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

  00089	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  0008c	89 45 f0	 mov	 DWORD PTR _nu$[ebp], eax

; 393  :         CheckNumber(nu);

  0008f	8b 4d f0	 mov	 ecx, DWORD PTR _nu$[ebp]
  00092	51		 push	 ecx
  00093	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  00098	83 c4 04	 add	 esp, 4

; 394  :         ResourceHolderUINT root;

  0009b	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  0009e	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000a3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 395  :         NUMBER_HEADER* w = PMC_ExclusiveOr_X_L_Imp(nu, v);

  000aa	8b 55 10	 mov	 edx, DWORD PTR _v$[ebp+4]
  000ad	52		 push	 edx
  000ae	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  000b1	50		 push	 eax
  000b2	8b 4d f0	 mov	 ecx, DWORD PTR _nu$[ebp]
  000b5	51		 push	 ecx
  000b6	e8 00 00 00 00	 call	 ?PMC_ExclusiveOr_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z ; Palmtree::Math::Core::Internal::PMC_ExclusiveOr_X_L_Imp
  000bb	83 c4 0c	 add	 esp, 12			; 0000000cH
  000be	89 45 d4	 mov	 DWORD PTR _w$[ebp], eax

; 396  :         root.HookNumber(w);

  000c1	8b 55 d4	 mov	 edx, DWORD PTR _w$[ebp]
  000c4	52		 push	 edx
  000c5	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  000c8	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 397  : #ifdef _DEBUG
; 398  :         CheckNumber(w);

  000cd	8b 45 d4	 mov	 eax, DWORD PTR _w$[ebp]
  000d0	50		 push	 eax
  000d1	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  000d6	83 c4 04	 add	 esp, 4

; 399  : #endif
; 400  :         root.UnlinkNumber(w);

  000d9	8b 4d d4	 mov	 ecx, DWORD PTR _w$[ebp]
  000dc	51		 push	 ecx
  000dd	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  000e0	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 401  :         return ((PMC_HANDLE_UINT)w);

  000e5	8b 55 d4	 mov	 edx, DWORD PTR _w$[ebp]
  000e8	89 55 a0	 mov	 DWORD PTR $T2[ebp], edx
  000eb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f2	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  000f5	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  000fa	8b 45 a0	 mov	 eax, DWORD PTR $T2[ebp]
$LN4@PMC_Exclus:

; 402  :     }

  000fd	52		 push	 edx
  000fe	8b cd		 mov	 ecx, ebp
  00100	50		 push	 eax
  00101	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@PMC_Exclus
  00107	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0010c	58		 pop	 eax
  0010d	5a		 pop	 edx
  0010e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00111	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00118	59		 pop	 ecx
  00119	5f		 pop	 edi
  0011a	83 c4 60	 add	 esp, 96			; 00000060H
  0011d	3b ec		 cmp	 ebp, esp
  0011f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00124	8b e5		 mov	 esp, ebp
  00126	5d		 pop	 ebp
  00127	c2 0c 00	 ret	 12			; 0000000cH
  0012a	66 90		 npad	 2
$LN9@PMC_Exclus:
  0012c	01 00 00 00	 DD	 1
  00130	00 00 00 00	 DD	 $LN8@PMC_Exclus
$LN8@PMC_Exclus:
  00134	dc ff ff ff	 DD	 -36			; ffffffdcH
  00138	10 00 00 00	 DD	 16			; 00000010H
  0013c	00 00 00 00	 DD	 $LN6@PMC_Exclus
$LN6@PMC_Exclus:
  00140	72		 DB	 114			; 00000072H
  00141	6f		 DB	 111			; 0000006fH
  00142	6f		 DB	 111			; 0000006fH
  00143	74		 DB	 116			; 00000074H
  00144	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_ExclusiveOr_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_ExclusiveOr_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_ExclusiveOr_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_ExclusiveOr_X_L@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@_K@Z ENDP ; Palmtree::Math::Core::Internal::PMC_ExclusiveOr_X_L
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.cpp
_TEXT	SEGMENT
$T2 = -96						; size = 4
$T3 = -92						; size = 24
$T4 = -68						; size = 24
_w$ = -44						; size = 4
_root$ = -36						; size = 16
_nu$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 4
?PMC_ExclusiveOr_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z PROC ; Palmtree::Math::Core::Internal::PMC_ExclusiveOr_X_I

; 250  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_ExclusiveOr_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 54	 sub	 esp, 84			; 00000054H
  00014	57		 push	 edi
  00015	8d 7d a0	 lea	 edi, DWORD PTR [ebp-96]
  00018	b9 15 00 00 00	 mov	 ecx, 21			; 00000015H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	50		 push	 eax
  0002c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET __DE56A8E5_pmc_exclusiveor@cpp
  0003a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 251  :         if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)

  0003f	33 c0		 xor	 eax, eax
  00041	74 20		 je	 SHORT $LN2@PMC_Exclus

; 252  :         {
; 253  :             // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 254  :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_exclusiveor.cpp;PMC_ExclusiveOr_X_I;1");

  00043	68 00 00 00 00	 push	 OFFSET $SG117953
  00048	68 00 00 00 00	 push	 OFFSET $SG117954
  0004d	8d 4d bc	 lea	 ecx, DWORD PTR $T4[ebp]
  00050	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00055	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0005a	8d 4d bc	 lea	 ecx, DWORD PTR $T4[ebp]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@PMC_Exclus:

; 255  :         }
; 256  :         if (u == nullptr)

  00063	83 7d 08 00	 cmp	 DWORD PTR _u$[ebp], 0
  00067	75 20		 jne	 SHORT $LN3@PMC_Exclus

; 257  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"u");

  00069	68 00 00 00 00	 push	 OFFSET $SG117957
  0006e	68 00 00 00 00	 push	 OFFSET $SG117958
  00073	8d 4d a4	 lea	 ecx, DWORD PTR $T3[ebp]
  00076	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0007b	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  00080	8d 55 a4	 lea	 edx, DWORD PTR $T3[ebp]
  00083	52		 push	 edx
  00084	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@PMC_Exclus:

; 258  :         NUMBER_HEADER* nu = (NUMBER_HEADER*)u;

  00089	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  0008c	89 45 f0	 mov	 DWORD PTR _nu$[ebp], eax

; 259  :         CheckNumber(nu);

  0008f	8b 4d f0	 mov	 ecx, DWORD PTR _nu$[ebp]
  00092	51		 push	 ecx
  00093	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  00098	83 c4 04	 add	 esp, 4

; 260  :         ResourceHolderUINT root;

  0009b	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  0009e	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000a3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 261  :         NUMBER_HEADER* w = PMC_ExclusiveOr_X_I_Imp(nu, v);

  000aa	8b 55 0c	 mov	 edx, DWORD PTR _v$[ebp]
  000ad	52		 push	 edx
  000ae	8b 45 f0	 mov	 eax, DWORD PTR _nu$[ebp]
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ?PMC_ExclusiveOr_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_ExclusiveOr_X_I_Imp
  000b7	83 c4 08	 add	 esp, 8
  000ba	89 45 d4	 mov	 DWORD PTR _w$[ebp], eax

; 262  :         root.HookNumber(w);

  000bd	8b 4d d4	 mov	 ecx, DWORD PTR _w$[ebp]
  000c0	51		 push	 ecx
  000c1	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  000c4	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 263  : #ifdef _DEBUG
; 264  :         CheckNumber(w);

  000c9	8b 55 d4	 mov	 edx, DWORD PTR _w$[ebp]
  000cc	52		 push	 edx
  000cd	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  000d2	83 c4 04	 add	 esp, 4

; 265  : #endif
; 266  :         root.UnlinkNumber(w);

  000d5	8b 45 d4	 mov	 eax, DWORD PTR _w$[ebp]
  000d8	50		 push	 eax
  000d9	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  000dc	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 267  :         return ((PMC_HANDLE_UINT)w);

  000e1	8b 4d d4	 mov	 ecx, DWORD PTR _w$[ebp]
  000e4	89 4d a0	 mov	 DWORD PTR $T2[ebp], ecx
  000e7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000ee	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  000f1	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  000f6	8b 45 a0	 mov	 eax, DWORD PTR $T2[ebp]
$LN4@PMC_Exclus:

; 268  :     }

  000f9	52		 push	 edx
  000fa	8b cd		 mov	 ecx, ebp
  000fc	50		 push	 eax
  000fd	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@PMC_Exclus
  00103	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00108	58		 pop	 eax
  00109	5a		 pop	 edx
  0010a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0010d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00114	59		 pop	 ecx
  00115	5f		 pop	 edi
  00116	83 c4 60	 add	 esp, 96			; 00000060H
  00119	3b ec		 cmp	 ebp, esp
  0011b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00120	8b e5		 mov	 esp, ebp
  00122	5d		 pop	 ebp
  00123	c2 08 00	 ret	 8
  00126	66 90		 npad	 2
$LN9@PMC_Exclus:
  00128	01 00 00 00	 DD	 1
  0012c	00 00 00 00	 DD	 $LN8@PMC_Exclus
$LN8@PMC_Exclus:
  00130	dc ff ff ff	 DD	 -36			; ffffffdcH
  00134	10 00 00 00	 DD	 16			; 00000010H
  00138	00 00 00 00	 DD	 $LN6@PMC_Exclus
$LN6@PMC_Exclus:
  0013c	72		 DB	 114			; 00000072H
  0013d	6f		 DB	 111			; 0000006fH
  0013e	6f		 DB	 111			; 0000006fH
  0013f	74		 DB	 116			; 00000074H
  00140	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_ExclusiveOr_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_ExclusiveOr_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_ExclusiveOr_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_ExclusiveOr_X_I@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@PAU51234@I@Z ENDP ; Palmtree::Math::Core::Internal::PMC_ExclusiveOr_X_I
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.cpp
_TEXT	SEGMENT
$T2 = -96						; size = 4
$T3 = -92						; size = 24
$T4 = -68						; size = 24
_w$ = -44						; size = 4
_root$ = -36						; size = 16
_nv$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 8
_v$ = 16						; size = 4
?PMC_ExclusiveOr_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z PROC ; Palmtree::Math::Core::Internal::PMC_ExclusiveOr_L_X

; 363  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_ExclusiveOr_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 54	 sub	 esp, 84			; 00000054H
  00014	57		 push	 edi
  00015	8d 7d a0	 lea	 edi, DWORD PTR [ebp-96]
  00018	b9 15 00 00 00	 mov	 ecx, 21			; 00000015H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	50		 push	 eax
  0002c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET __DE56A8E5_pmc_exclusiveor@cpp
  0003a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 364  :         if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(u) * 8)

  0003f	33 c0		 xor	 eax, eax
  00041	74 20		 je	 SHORT $LN2@PMC_Exclus

; 365  :         {
; 366  :             // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 367  :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_exclusiveor.cpp;PMC_ExclusiveOr_L_X;1");

  00043	68 00 00 00 00	 push	 OFFSET $SG118014
  00048	68 00 00 00 00	 push	 OFFSET $SG118015
  0004d	8d 4d bc	 lea	 ecx, DWORD PTR $T4[ebp]
  00050	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00055	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0005a	8d 4d bc	 lea	 ecx, DWORD PTR $T4[ebp]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@PMC_Exclus:

; 368  :         }
; 369  :         if (v == nullptr)

  00063	83 7d 10 00	 cmp	 DWORD PTR _v$[ebp], 0
  00067	75 20		 jne	 SHORT $LN3@PMC_Exclus

; 370  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"v");

  00069	68 00 00 00 00	 push	 OFFSET $SG118018
  0006e	68 00 00 00 00	 push	 OFFSET $SG118019
  00073	8d 4d a4	 lea	 ecx, DWORD PTR $T3[ebp]
  00076	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0007b	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  00080	8d 55 a4	 lea	 edx, DWORD PTR $T3[ebp]
  00083	52		 push	 edx
  00084	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@PMC_Exclus:

; 371  :         NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

  00089	8b 45 10	 mov	 eax, DWORD PTR _v$[ebp]
  0008c	89 45 f0	 mov	 DWORD PTR _nv$[ebp], eax

; 372  :         CheckNumber(nv);

  0008f	8b 4d f0	 mov	 ecx, DWORD PTR _nv$[ebp]
  00092	51		 push	 ecx
  00093	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  00098	83 c4 04	 add	 esp, 4

; 373  :         ResourceHolderUINT root;

  0009b	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  0009e	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000a3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 374  :         NUMBER_HEADER* w = PMC_ExclusiveOr_X_L_Imp(nv, u);

  000aa	8b 55 0c	 mov	 edx, DWORD PTR _u$[ebp+4]
  000ad	52		 push	 edx
  000ae	8b 45 08	 mov	 eax, DWORD PTR _u$[ebp]
  000b1	50		 push	 eax
  000b2	8b 4d f0	 mov	 ecx, DWORD PTR _nv$[ebp]
  000b5	51		 push	 ecx
  000b6	e8 00 00 00 00	 call	 ?PMC_ExclusiveOr_X_L_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@_K@Z ; Palmtree::Math::Core::Internal::PMC_ExclusiveOr_X_L_Imp
  000bb	83 c4 0c	 add	 esp, 12			; 0000000cH
  000be	89 45 d4	 mov	 DWORD PTR _w$[ebp], eax

; 375  :         root.HookNumber(w);

  000c1	8b 55 d4	 mov	 edx, DWORD PTR _w$[ebp]
  000c4	52		 push	 edx
  000c5	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  000c8	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 376  : #ifdef _DEBUG
; 377  :         CheckNumber(w);

  000cd	8b 45 d4	 mov	 eax, DWORD PTR _w$[ebp]
  000d0	50		 push	 eax
  000d1	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  000d6	83 c4 04	 add	 esp, 4

; 378  : #endif
; 379  :         root.UnlinkNumber(w);

  000d9	8b 4d d4	 mov	 ecx, DWORD PTR _w$[ebp]
  000dc	51		 push	 ecx
  000dd	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  000e0	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 380  :         return ((PMC_HANDLE_UINT)w);

  000e5	8b 55 d4	 mov	 edx, DWORD PTR _w$[ebp]
  000e8	89 55 a0	 mov	 DWORD PTR $T2[ebp], edx
  000eb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f2	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  000f5	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  000fa	8b 45 a0	 mov	 eax, DWORD PTR $T2[ebp]
$LN4@PMC_Exclus:

; 381  :     }

  000fd	52		 push	 edx
  000fe	8b cd		 mov	 ecx, ebp
  00100	50		 push	 eax
  00101	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@PMC_Exclus
  00107	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0010c	58		 pop	 eax
  0010d	5a		 pop	 edx
  0010e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00111	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00118	59		 pop	 ecx
  00119	5f		 pop	 edi
  0011a	83 c4 60	 add	 esp, 96			; 00000060H
  0011d	3b ec		 cmp	 ebp, esp
  0011f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00124	8b e5		 mov	 esp, ebp
  00126	5d		 pop	 ebp
  00127	c2 0c 00	 ret	 12			; 0000000cH
  0012a	66 90		 npad	 2
$LN9@PMC_Exclus:
  0012c	01 00 00 00	 DD	 1
  00130	00 00 00 00	 DD	 $LN8@PMC_Exclus
$LN8@PMC_Exclus:
  00134	dc ff ff ff	 DD	 -36			; ffffffdcH
  00138	10 00 00 00	 DD	 16			; 00000010H
  0013c	00 00 00 00	 DD	 $LN6@PMC_Exclus
$LN6@PMC_Exclus:
  00140	72		 DB	 114			; 00000072H
  00141	6f		 DB	 111			; 0000006fH
  00142	6f		 DB	 111			; 0000006fH
  00143	74		 DB	 116			; 00000074H
  00144	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_ExclusiveOr_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_ExclusiveOr_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_ExclusiveOr_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_ExclusiveOr_L_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@_KPAU51234@@Z ENDP ; Palmtree::Math::Core::Internal::PMC_ExclusiveOr_L_X
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.cpp
_TEXT	SEGMENT
$T2 = -96						; size = 4
$T3 = -92						; size = 24
$T4 = -68						; size = 24
_w$ = -44						; size = 4
_root$ = -36						; size = 16
_nv$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_u$ = 8							; size = 4
_v$ = 12						; size = 4
?PMC_ExclusiveOr_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z PROC ; Palmtree::Math::Core::Internal::PMC_ExclusiveOr_I_X

; 229  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PMC_ExclusiveOr_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 54	 sub	 esp, 84			; 00000054H
  00014	57		 push	 edi
  00015	8d 7d a0	 lea	 edi, DWORD PTR [ebp-96]
  00018	b9 15 00 00 00	 mov	 ecx, 21			; 00000015H
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	50		 push	 eax
  0002c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00035	b9 00 00 00 00	 mov	 ecx, OFFSET __DE56A8E5_pmc_exclusiveor@cpp
  0003a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 230  :         if (__UNIT_TYPE_BIT_COUNT < sizeof(u) * 8)

  0003f	33 c0		 xor	 eax, eax
  00041	74 20		 je	 SHORT $LN2@PMC_Exclus

; 231  :         {
; 232  :             // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 233  :             throw InternalErrorException(L"予期していないコードに到達しました。", L"pmc_exclusiveor.cpp;PMC_ExclusiveOr_I_X;1");

  00043	68 00 00 00 00	 push	 OFFSET $SG117930
  00048	68 00 00 00 00	 push	 OFFSET $SG117931
  0004d	8d 4d bc	 lea	 ecx, DWORD PTR $T4[ebp]
  00050	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00055	68 00 00 00 00	 push	 OFFSET __TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0005a	8d 4d bc	 lea	 ecx, DWORD PTR $T4[ebp]
  0005d	51		 push	 ecx
  0005e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@PMC_Exclus:

; 234  :         }
; 235  :         if (v == nullptr)

  00063	83 7d 0c 00	 cmp	 DWORD PTR _v$[ebp], 0
  00067	75 20		 jne	 SHORT $LN3@PMC_Exclus

; 236  :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"v");

  00069	68 00 00 00 00	 push	 OFFSET $SG117938
  0006e	68 00 00 00 00	 push	 OFFSET $SG117939
  00073	8d 4d a4	 lea	 ecx, DWORD PTR $T3[ebp]
  00076	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0007b	68 00 00 00 00	 push	 OFFSET __TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  00080	8d 55 a4	 lea	 edx, DWORD PTR $T3[ebp]
  00083	52		 push	 edx
  00084	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@PMC_Exclus:

; 237  :         NUMBER_HEADER* nv = (NUMBER_HEADER*)v;

  00089	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  0008c	89 45 f0	 mov	 DWORD PTR _nv$[ebp], eax

; 238  :         CheckNumber(nv);

  0008f	8b 4d f0	 mov	 ecx, DWORD PTR _nv$[ebp]
  00092	51		 push	 ecx
  00093	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  00098	83 c4 04	 add	 esp, 4

; 239  :         ResourceHolderUINT root;

  0009b	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  0009e	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  000a3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 240  :         NUMBER_HEADER* w = PMC_ExclusiveOr_X_I_Imp(nv, u);

  000aa	8b 55 08	 mov	 edx, DWORD PTR _u$[ebp]
  000ad	52		 push	 edx
  000ae	8b 45 f0	 mov	 eax, DWORD PTR _nv$[ebp]
  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ?PMC_ExclusiveOr_X_I_Imp@Internal@Core@Math@Palmtree@@YAPAU__tag_NUMBER_HEADER@1234@PAU51234@I@Z ; Palmtree::Math::Core::Internal::PMC_ExclusiveOr_X_I_Imp
  000b7	83 c4 08	 add	 esp, 8
  000ba	89 45 d4	 mov	 DWORD PTR _w$[ebp], eax

; 241  :         root.HookNumber(w);

  000bd	8b 4d d4	 mov	 ecx, DWORD PTR _w$[ebp]
  000c0	51		 push	 ecx
  000c1	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  000c4	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 242  : #ifdef _DEBUG
; 243  :         CheckNumber(w);

  000c9	8b 55 d4	 mov	 edx, DWORD PTR _w$[ebp]
  000cc	52		 push	 edx
  000cd	e8 00 00 00 00	 call	 ?CheckNumber@Internal@Core@Math@Palmtree@@YAXPAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CheckNumber
  000d2	83 c4 04	 add	 esp, 4

; 244  : #endif
; 245  :         root.UnlinkNumber(w);

  000d5	8b 45 d4	 mov	 eax, DWORD PTR _w$[ebp]
  000d8	50		 push	 eax
  000d9	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  000dc	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QAEXPAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 246  :         return ((PMC_HANDLE_UINT)w);

  000e1	8b 4d d4	 mov	 ecx, DWORD PTR _w$[ebp]
  000e4	89 4d a0	 mov	 DWORD PTR $T2[ebp], ecx
  000e7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000ee	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  000f1	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  000f6	8b 45 a0	 mov	 eax, DWORD PTR $T2[ebp]
$LN4@PMC_Exclus:

; 247  :     }

  000f9	52		 push	 edx
  000fa	8b cd		 mov	 ecx, ebp
  000fc	50		 push	 eax
  000fd	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@PMC_Exclus
  00103	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00108	58		 pop	 eax
  00109	5a		 pop	 edx
  0010a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0010d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00114	59		 pop	 ecx
  00115	5f		 pop	 edi
  00116	83 c4 60	 add	 esp, 96			; 00000060H
  00119	3b ec		 cmp	 ebp, esp
  0011b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00120	8b e5		 mov	 esp, ebp
  00122	5d		 pop	 ebp
  00123	c2 08 00	 ret	 8
  00126	66 90		 npad	 2
$LN9@PMC_Exclus:
  00128	01 00 00 00	 DD	 1
  0012c	00 00 00 00	 DD	 $LN8@PMC_Exclus
$LN8@PMC_Exclus:
  00130	dc ff ff ff	 DD	 -36			; ffffffdcH
  00134	10 00 00 00	 DD	 16			; 00000010H
  00138	00 00 00 00	 DD	 $LN6@PMC_Exclus
$LN6@PMC_Exclus:
  0013c	72		 DB	 114			; 00000072H
  0013d	6f		 DB	 111			; 0000006fH
  0013e	6f		 DB	 111			; 0000006fH
  0013f	74		 DB	 116			; 00000074H
  00140	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PMC_ExclusiveOr_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _root$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
__ehhandler$?PMC_ExclusiveOr_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PMC_ExclusiveOr_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PMC_ExclusiveOr_I_X@Internal@Core@Math@Palmtree@@YGPAU__tag_PMC_HANDLE_UINT@1234@IPAU51234@@Z ENDP ; Palmtree::Math::Core::Internal::PMC_ExclusiveOr_I_X
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exclusiveor.cpp
_TEXT	SEGMENT
_feature$ = 8						; size = 4
?Initialize_ExclusiveOr@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z PROC ; Palmtree::Math::Core::Internal::Initialize_ExclusiveOr

; 458  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __DE56A8E5_pmc_exclusiveor@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 459  :         return (PMC_STATUS_OK);

  0000d	33 c0		 xor	 eax, eax

; 460  :     }

  0000f	3b ec		 cmp	 ebp, esp
  00011	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?Initialize_ExclusiveOr@Internal@Core@Math@Palmtree@@YAHPAU_tag_PROCESSOR_FEATURES@1234@@Z ENDP ; Palmtree::Math::Core::Internal::Initialize_ExclusiveOr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 18		 push	 24			; 00000018H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GInternalErrorException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException, COMDAT
; _this$ = ecx

; 295  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 296  :         }

  00047	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1InternalErrorException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException, COMDAT
; _this$ = ecx

; 291  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 290  :             : Exception(p)

  00037	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 291  :         {

  0004a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@

; 292  :         }

  00053	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00060	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00067	59		 pop	 ecx
  00068	83 c4 10	 add	 esp, 16			; 00000010H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
_data$ = 12						; size = 4
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException, COMDAT
; _this$ = ecx

; 286  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 285  :             : Exception(PMC_STATUS_INTERNAL_ERROR, message, data)

  00037	8b 45 0c	 mov	 eax, DWORD PTR _data$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _message$[ebp]
  0003e	51		 push	 ecx
  0003f	68 00 ff ff ff	 push	 -256			; ffffff00H
  00044	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 286  :         {

  00053	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00056	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@

; 287  :         }

  0005c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00063	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00066	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00069	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00070	59		 pop	 ecx
  00071	83 c4 10	 add	 esp, 16			; 00000010H
  00074	3b ec		 cmp	 ebp, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InternalErrorException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 18		 push	 24			; 00000018H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GArgumentNullException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException, COMDAT
; _this$ = ecx

; 124  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 125  :         }

  00047	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ArgumentNullException@Internal@Core@Math@Palmtree@@UAE@XZ ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException, COMDAT
; _this$ = ecx

; 120  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 119  :             : Exception(p)

  00037	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 120  :         {

  0004a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@

; 121  :         }

  00053	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00060	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00067	59		 pop	 ecx
  00068	83 c4 10	 add	 esp, 16			; 00000010H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
_param_name$ = 12					; size = 4
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException, COMDAT
; _this$ = ecx

; 115  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 114  :             : Exception(PMC_STATUS_ARGUMENT_NULL_ERROR, message, param_name)

  00037	8b 45 0c	 mov	 eax, DWORD PTR _param_name$[ebp]
  0003a	50		 push	 eax
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _message$[ebp]
  0003e	51		 push	 ecx
  0003f	6a fe		 push	 -2			; fffffffeH
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ; Palmtree::Math::Core::Internal::Exception::Exception
  00049	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 115  :         {

  00050	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00053	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], OFFSET ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@

; 116  :         }

  00059	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00060	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00063	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00066	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006d	59		 pop	 ecx
  0006e	83 c4 10	 add	 esp, 16			; 00000010H
  00071	3b ec		 cmp	 ebp, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
__ehhandler$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QAE@PB_W0@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z PROC ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 18		 push	 24			; 00000018H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GException@Internal@Core@Math@Palmtree@@UAEPAXI@Z ENDP ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ PROC	; Palmtree::Math::Core::Internal::Exception::~Exception, COMDAT
; _this$ = ecx

; 70   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 71   :         }

  00047	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00056	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00059	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00060	59		 pop	 ecx
  00061	83 c4 10	 add	 esp, 16			; 00000010H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1Exception@Internal@Core@Math@Palmtree@@UAE@XZ ENDP	; Palmtree::Math::Core::Internal::Exception::~Exception
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT
; _this$ = ecx

; 62   :         Exception(const Exception& p) noexcept(true)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00049	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 63   :         {
; 64   :             _code = p._code;

  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00055	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00058	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 65   :             _message = p._message;

  0005b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00061	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00064	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 66   :             _data = p._data;

  00067	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  0006d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00070	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 67   :         }

  00073	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0007a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0007d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00080	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00087	59		 pop	 ecx
  00088	83 c4 10	 add	 esp, 16			; 00000010H
  0008b	3b ec		 cmp	 ebp, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@Internal@Core@Math@Palmtree@@QAE@ABV01234@@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_code$ = 8						; size = 4
_message$ = 12						; size = 4
_data$ = 16						; size = 4
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT
; _this$ = ecx

; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __802FEEC0_pmc_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ??0exception@std@@QAE@XZ ; std::exception::exception
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00049	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@Internal@Core@Math@Palmtree@@6B@

; 55   :         {
; 56   :             _code = code;

  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	8b 55 08	 mov	 edx, DWORD PTR _code$[ebp]
  00055	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 57   :             _message = message;

  00058	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	8b 4d 0c	 mov	 ecx, DWORD PTR _message$[ebp]
  0005e	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 58   :             _data = data;

  00061	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00064	8b 45 10	 mov	 eax, DWORD PTR _data$[ebp]
  00067	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 59   :         }

  0006a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00071	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00077	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007e	59		 pop	 ecx
  0007f	83 c4 10	 add	 esp, 16			; 00000010H
  00082	3b ec		 cmp	 ebp, esp
  00084	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
__ehhandler$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@Internal@Core@Math@Palmtree@@IAE@HPB_W0@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 90   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __9BB4E194_vcruntime_exception@h
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 91   :         return _Data._What ? _Data._What : "Unknown exception";

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00028	74 0b		 je	 SHORT $LN3@what
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00030	89 55 f8	 mov	 DWORD PTR tv69[ebp], edx
  00033	eb 07		 jmp	 SHORT $LN4@what
$LN3@what:
  00035	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
$LN4@what:
  0003c	8b 45 f8	 mov	 eax, DWORD PTR tv69[ebp]

; 92   :     }

  0003f	83 c4 08	 add	 esp, 8
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 85   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1exception@std@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __9BB4E194_vcruntime_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 86   :         __std_exception_destroy(&_Data);

  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	83 c1 04	 add	 ecx, 4
  00046	51		 push	 ecx
  00047	e8 00 00 00 00	 call	 ___std_exception_destroy
  0004c	83 c4 04	 add	 esp, 4

; 87   :     }

  0004f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00052	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00059	59		 pop	 ecx
  0005a	83 c4 10	 add	 esp, 16			; 00000010H
  0005d	3b ec		 cmp	 ebp, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1exception@std@@UAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1exception@std@@UAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0exception@std@@QAE@XZ PROC				; std::exception::exception, COMDAT
; _this$ = ecx

; 50   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0exception@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __9BB4E194_vcruntime_exception@h
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 49   :         : _Data()

  00040	33 c9		 xor	 ecx, ecx
  00042	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00045	83 c2 04	 add	 edx, 4
  00048	89 0a		 mov	 DWORD PTR [edx], ecx
  0004a	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 51   :     }

  0004d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	83 c4 10	 add	 esp, 16			; 00000010H
  0005e	3b ec		 cmp	 ebp, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0exception@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0exception@std@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0exception@std@@QAE@XZ ENDP				; std::exception::exception
END
