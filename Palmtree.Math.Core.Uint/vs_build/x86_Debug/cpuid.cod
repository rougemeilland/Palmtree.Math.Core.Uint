; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\cpuid.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__331E732B_malloc@h DB 01H
__746E1CEC_xmmintrin@h DB 01H
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__2088847F_corecrt_memory@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__E9FFF232_guiddef@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__12AD47BB_winuser@h DB 01H
__B4B40122_winioctl@h DB 01H
__A73354DD_stdlib@h DB 01H
__25F3FB34_propidl@h DB 01H
__A40E48B8_oleauto@h DB 01H
__86261D59_stralign@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__E6057659_cpuid@cpp DB 01H
msvcjmc	ENDS
PUBLIC	?GetCPUInfo@Internal@Core@Math@Palmtree@@YAXPAU_tag_PROCESSOR_FEATURES@1234@@Z ; Palmtree::Math::Core::Internal::GetCPUInfo
PUBLIC	__JustMyCode_Default
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\cpuid.cpp
_TEXT	SEGMENT
_regbuf$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_op$ = 8						; size = 4
_subop$ = 12						; size = 4
_reg_eax$ = 16						; size = 4
_reg_ebx$ = 20						; size = 4
_reg_ecx$ = 24						; size = 4
_reg_edx$ = 28						; size = 4
?cpuidex@Internal@Core@Math@Palmtree@@YAXIIPAI000@Z PROC ; Palmtree::Math::Core::Internal::cpuidex

; 46   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000d	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00010	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00013	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00016	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00019	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001c	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001f	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002c	b9 00 00 00 00	 mov	 ecx, OFFSET __E6057659_cpuid@cpp
  00031	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 47   :         _INT32_T regbuf[4];
; 48   :         __cpuidex(regbuf, op, subop);

  00036	8d 75 e8	 lea	 esi, DWORD PTR _regbuf$[ebp]
  00039	8b 45 08	 mov	 eax, DWORD PTR _op$[ebp]
  0003c	8b 4d 0c	 mov	 ecx, DWORD PTR _subop$[ebp]
  0003f	0f a2		 cpuid
  00041	89 06		 mov	 DWORD PTR [esi], eax
  00043	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  00046	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00049	89 56 0c	 mov	 DWORD PTR [esi+12], edx

; 49   :         *reg_eax = regbuf[0];

  0004c	b8 04 00 00 00	 mov	 eax, 4
  00051	6b c8 00	 imul	 ecx, eax, 0
  00054	8b 55 10	 mov	 edx, DWORD PTR _reg_eax$[ebp]
  00057	8b 44 0d e8	 mov	 eax, DWORD PTR _regbuf$[ebp+ecx]
  0005b	89 02		 mov	 DWORD PTR [edx], eax

; 50   :         *reg_ebx = regbuf[1];

  0005d	b9 04 00 00 00	 mov	 ecx, 4
  00062	c1 e1 00	 shl	 ecx, 0
  00065	8b 55 14	 mov	 edx, DWORD PTR _reg_ebx$[ebp]
  00068	8b 44 0d e8	 mov	 eax, DWORD PTR _regbuf$[ebp+ecx]
  0006c	89 02		 mov	 DWORD PTR [edx], eax

; 51   :         *reg_ecx = regbuf[2];

  0006e	b9 04 00 00 00	 mov	 ecx, 4
  00073	d1 e1		 shl	 ecx, 1
  00075	8b 55 18	 mov	 edx, DWORD PTR _reg_ecx$[ebp]
  00078	8b 44 0d e8	 mov	 eax, DWORD PTR _regbuf$[ebp+ecx]
  0007c	89 02		 mov	 DWORD PTR [edx], eax

; 52   :         *reg_edx = regbuf[3];

  0007e	b9 04 00 00 00	 mov	 ecx, 4
  00083	6b d1 03	 imul	 edx, ecx, 3
  00086	8b 45 1c	 mov	 eax, DWORD PTR _reg_edx$[ebp]
  00089	8b 4c 15 e8	 mov	 ecx, DWORD PTR _regbuf$[ebp+edx]
  0008d	89 08		 mov	 DWORD PTR [eax], ecx

; 53   :     }

  0008f	52		 push	 edx
  00090	8b cd		 mov	 ecx, ebp
  00092	50		 push	 eax
  00093	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@cpuidex
  00099	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0009e	58		 pop	 eax
  0009f	5a		 pop	 edx
  000a0	5e		 pop	 esi
  000a1	5b		 pop	 ebx
  000a2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a5	33 cd		 xor	 ecx, ebp
  000a7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ac	83 c4 1c	 add	 esp, 28			; 0000001cH
  000af	3b ec		 cmp	 ebp, esp
  000b1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b6	8b e5		 mov	 esp, ebp
  000b8	5d		 pop	 ebp
  000b9	c3		 ret	 0
  000ba	66 90		 npad	 2
$LN5@cpuidex:
  000bc	01 00 00 00	 DD	 1
  000c0	00 00 00 00	 DD	 $LN4@cpuidex
$LN4@cpuidex:
  000c4	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000c8	10 00 00 00	 DD	 16			; 00000010H
  000cc	00 00 00 00	 DD	 $LN3@cpuidex
$LN3@cpuidex:
  000d0	72		 DB	 114			; 00000072H
  000d1	65		 DB	 101			; 00000065H
  000d2	67		 DB	 103			; 00000067H
  000d3	62		 DB	 98			; 00000062H
  000d4	75		 DB	 117			; 00000075H
  000d5	66		 DB	 102			; 00000066H
  000d6	00		 DB	 0
?cpuidex@Internal@Core@Math@Palmtree@@YAXIIPAI000@Z ENDP ; Palmtree::Math::Core::Internal::cpuidex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\cpuid.cpp
_TEXT	SEGMENT
_regbuf$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_op$ = 8						; size = 4
_reg_eax$ = 12						; size = 4
_reg_ebx$ = 16						; size = 4
_reg_ecx$ = 20						; size = 4
_reg_edx$ = 24						; size = 4
?cpuid@Internal@Core@Math@Palmtree@@YAXIPAI000@Z PROC	; Palmtree::Math::Core::Internal::cpuid

; 36   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000d	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00010	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00013	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00016	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00019	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001c	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001f	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00027	33 c5		 xor	 eax, ebp
  00029	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002c	b9 00 00 00 00	 mov	 ecx, OFFSET __E6057659_cpuid@cpp
  00031	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 37   :         _INT32_T regbuf[4];
; 38   :         __cpuid(regbuf, op);

  00036	8d 75 e8	 lea	 esi, DWORD PTR _regbuf$[ebp]
  00039	8b 45 08	 mov	 eax, DWORD PTR _op$[ebp]
  0003c	33 c9		 xor	 ecx, ecx
  0003e	0f a2		 cpuid
  00040	89 06		 mov	 DWORD PTR [esi], eax
  00042	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  00045	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00048	89 56 0c	 mov	 DWORD PTR [esi+12], edx

; 39   :         *reg_eax = regbuf[0];

  0004b	b8 04 00 00 00	 mov	 eax, 4
  00050	6b c8 00	 imul	 ecx, eax, 0
  00053	8b 55 0c	 mov	 edx, DWORD PTR _reg_eax$[ebp]
  00056	8b 44 0d e8	 mov	 eax, DWORD PTR _regbuf$[ebp+ecx]
  0005a	89 02		 mov	 DWORD PTR [edx], eax

; 40   :         *reg_ebx = regbuf[1];

  0005c	b9 04 00 00 00	 mov	 ecx, 4
  00061	c1 e1 00	 shl	 ecx, 0
  00064	8b 55 10	 mov	 edx, DWORD PTR _reg_ebx$[ebp]
  00067	8b 44 0d e8	 mov	 eax, DWORD PTR _regbuf$[ebp+ecx]
  0006b	89 02		 mov	 DWORD PTR [edx], eax

; 41   :         *reg_ecx = regbuf[2];

  0006d	b9 04 00 00 00	 mov	 ecx, 4
  00072	d1 e1		 shl	 ecx, 1
  00074	8b 55 14	 mov	 edx, DWORD PTR _reg_ecx$[ebp]
  00077	8b 44 0d e8	 mov	 eax, DWORD PTR _regbuf$[ebp+ecx]
  0007b	89 02		 mov	 DWORD PTR [edx], eax

; 42   :         *reg_edx = regbuf[3];

  0007d	b9 04 00 00 00	 mov	 ecx, 4
  00082	6b d1 03	 imul	 edx, ecx, 3
  00085	8b 45 18	 mov	 eax, DWORD PTR _reg_edx$[ebp]
  00088	8b 4c 15 e8	 mov	 ecx, DWORD PTR _regbuf$[ebp+edx]
  0008c	89 08		 mov	 DWORD PTR [eax], ecx

; 43   :     }

  0008e	52		 push	 edx
  0008f	8b cd		 mov	 ecx, ebp
  00091	50		 push	 eax
  00092	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@cpuid
  00098	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0009d	58		 pop	 eax
  0009e	5a		 pop	 edx
  0009f	5e		 pop	 esi
  000a0	5b		 pop	 ebx
  000a1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a4	33 cd		 xor	 ecx, ebp
  000a6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ab	83 c4 1c	 add	 esp, 28			; 0000001cH
  000ae	3b ec		 cmp	 ebp, esp
  000b0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c3		 ret	 0
  000b9	0f 1f 00	 npad	 3
$LN5@cpuid:
  000bc	01 00 00 00	 DD	 1
  000c0	00 00 00 00	 DD	 $LN4@cpuid
$LN4@cpuid:
  000c4	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000c8	10 00 00 00	 DD	 16			; 00000010H
  000cc	00 00 00 00	 DD	 $LN3@cpuid
$LN3@cpuid:
  000d0	72		 DB	 114			; 00000072H
  000d1	65		 DB	 101			; 00000065H
  000d2	67		 DB	 103			; 00000067H
  000d3	62		 DB	 98			; 00000062H
  000d4	75		 DB	 117			; 00000075H
  000d5	66		 DB	 102			; 00000066H
  000d6	00		 DB	 0
?cpuid@Internal@Core@Math@Palmtree@@YAXIPAI000@Z ENDP	; Palmtree::Math::Core::Internal::cpuid
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_count$ = 12						; size = 4
__ZERO_MEMORY_BYTE PROC

; 74   :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	b9 00 00 00 00	 mov	 ecx, OFFSET __8CA3E54E_pmc_inline_func@h
  00009	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 75   :             __stosb((unsigned char*)d, 0, count);

  0000e	8b 7d 08	 mov	 edi, DWORD PTR _d$[ebp]
  00011	32 c0		 xor	 al, al
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR _count$[ebp]
  00016	f3 aa		 rep stosb

; 76   :         }

  00018	5f		 pop	 edi
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
__ZERO_MEMORY_BYTE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\cpuid.cpp
_TEXT	SEGMENT
_max_ex_function_no$ = -60				; size = 4
_max_subleaf_no$ = -56					; size = 4
_max_function_no$ = -52					; size = 4
_reg_edx$ = -44						; size = 4
_reg_ecx$ = -32						; size = 4
_reg_ebx$ = -20						; size = 4
_reg_eax$ = -8						; size = 4
_feature$ = 8						; size = 4
?GetCPUInfo@Internal@Core@Math@Palmtree@@YAXPAU_tag_PROCESSOR_FEATURES@1234@@Z PROC ; Palmtree::Math::Core::Internal::GetCPUInfo

; 56   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	57		 push	 edi
  00007	8d 7d c4	 lea	 edi, DWORD PTR [ebp-60]
  0000a	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  0000f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00014	f3 ab		 rep stosd
  00016	b9 00 00 00 00	 mov	 ecx, OFFSET __E6057659_cpuid@cpp
  0001b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 57   :         _UINT32_T reg_eax;
; 58   :         _UINT32_T reg_ebx;
; 59   :         _UINT32_T reg_ecx;
; 60   :         _UINT32_T reg_edx;
; 61   :         _UINT32_T max_function_no = 0;

  00020	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _max_function_no$[ebp], 0

; 62   :         _UINT32_T max_subleaf_no = 0;

  00027	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _max_subleaf_no$[ebp], 0

; 63   :         _UINT32_T max_ex_function_no = 0;

  0002e	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _max_ex_function_no$[ebp], 0

; 64   :         cpuid(0, &reg_eax, &reg_ebx, &reg_ecx, &reg_edx);

  00035	8d 45 d4	 lea	 eax, DWORD PTR _reg_edx$[ebp]
  00038	50		 push	 eax
  00039	8d 4d e0	 lea	 ecx, DWORD PTR _reg_ecx$[ebp]
  0003c	51		 push	 ecx
  0003d	8d 55 ec	 lea	 edx, DWORD PTR _reg_ebx$[ebp]
  00040	52		 push	 edx
  00041	8d 45 f8	 lea	 eax, DWORD PTR _reg_eax$[ebp]
  00044	50		 push	 eax
  00045	6a 00		 push	 0
  00047	e8 00 00 00 00	 call	 ?cpuid@Internal@Core@Math@Palmtree@@YAXIPAI000@Z ; Palmtree::Math::Core::Internal::cpuid
  0004c	83 c4 14	 add	 esp, 20			; 00000014H

; 65   :         max_function_no = reg_eax;

  0004f	8b 4d f8	 mov	 ecx, DWORD PTR _reg_eax$[ebp]
  00052	89 4d cc	 mov	 DWORD PTR _max_function_no$[ebp], ecx

; 66   :         _ZERO_MEMORY_BYTE(feature, sizeof(*feature));

  00055	6a 04		 push	 4
  00057	8b 55 08	 mov	 edx, DWORD PTR _feature$[ebp]
  0005a	52		 push	 edx
  0005b	e8 00 00 00 00	 call	 __ZERO_MEMORY_BYTE
  00060	83 c4 08	 add	 esp, 8

; 67   :         if (max_function_no >= 1)

  00063	83 7d cc 01	 cmp	 DWORD PTR _max_function_no$[ebp], 1
  00067	72 35		 jb	 SHORT $LN2@GetCPUInfo

; 68   :         {
; 69   :             cpuid(1, &reg_eax, &reg_ebx, &reg_ecx, &reg_edx);

  00069	8d 45 d4	 lea	 eax, DWORD PTR _reg_edx$[ebp]
  0006c	50		 push	 eax
  0006d	8d 4d e0	 lea	 ecx, DWORD PTR _reg_ecx$[ebp]
  00070	51		 push	 ecx
  00071	8d 55 ec	 lea	 edx, DWORD PTR _reg_ebx$[ebp]
  00074	52		 push	 edx
  00075	8d 45 f8	 lea	 eax, DWORD PTR _reg_eax$[ebp]
  00078	50		 push	 eax
  00079	6a 01		 push	 1
  0007b	e8 00 00 00 00	 call	 ?cpuid@Internal@Core@Math@Palmtree@@YAXIPAI000@Z ; Palmtree::Math::Core::Internal::cpuid
  00080	83 c4 14	 add	 esp, 20			; 00000014H

; 70   :             feature->PROCESSOR_FEATURE_POPCNT = (reg_ecx >> 23) & 1;

  00083	8b 4d e0	 mov	 ecx, DWORD PTR _reg_ecx$[ebp]
  00086	c1 e9 17	 shr	 ecx, 23			; 00000017H
  00089	83 e1 01	 and	 ecx, 1
  0008c	83 e1 01	 and	 ecx, 1
  0008f	8b 55 08	 mov	 edx, DWORD PTR _feature$[ebp]
  00092	8b 02		 mov	 eax, DWORD PTR [edx]
  00094	83 e0 fe	 and	 eax, -2			; fffffffeH
  00097	0b c1		 or	 eax, ecx
  00099	8b 4d 08	 mov	 ecx, DWORD PTR _feature$[ebp]
  0009c	89 01		 mov	 DWORD PTR [ecx], eax
$LN2@GetCPUInfo:

; 71   :         }
; 72   :         if (max_function_no >= 7)

  0009e	83 7d cc 07	 cmp	 DWORD PTR _max_function_no$[ebp], 7
  000a2	72 7b		 jb	 SHORT $LN3@GetCPUInfo

; 73   :         {
; 74   :             cpuidex(7, 0, &reg_eax, &reg_ebx, &reg_ecx, &reg_edx);

  000a4	8d 55 d4	 lea	 edx, DWORD PTR _reg_edx$[ebp]
  000a7	52		 push	 edx
  000a8	8d 45 e0	 lea	 eax, DWORD PTR _reg_ecx$[ebp]
  000ab	50		 push	 eax
  000ac	8d 4d ec	 lea	 ecx, DWORD PTR _reg_ebx$[ebp]
  000af	51		 push	 ecx
  000b0	8d 55 f8	 lea	 edx, DWORD PTR _reg_eax$[ebp]
  000b3	52		 push	 edx
  000b4	6a 00		 push	 0
  000b6	6a 07		 push	 7
  000b8	e8 00 00 00 00	 call	 ?cpuidex@Internal@Core@Math@Palmtree@@YAXIIPAI000@Z ; Palmtree::Math::Core::Internal::cpuidex
  000bd	83 c4 18	 add	 esp, 24			; 00000018H

; 75   :             max_subleaf_no = reg_eax;

  000c0	8b 45 f8	 mov	 eax, DWORD PTR _reg_eax$[ebp]
  000c3	89 45 c8	 mov	 DWORD PTR _max_subleaf_no$[ebp], eax

; 76   :             feature->PROCESSOR_FEATURE_BMI1 = (reg_ebx >> 3) & 1;

  000c6	8b 4d ec	 mov	 ecx, DWORD PTR _reg_ebx$[ebp]
  000c9	c1 e9 03	 shr	 ecx, 3
  000cc	83 e1 01	 and	 ecx, 1
  000cf	83 e1 01	 and	 ecx, 1
  000d2	c1 e1 02	 shl	 ecx, 2
  000d5	8b 55 08	 mov	 edx, DWORD PTR _feature$[ebp]
  000d8	8b 02		 mov	 eax, DWORD PTR [edx]
  000da	83 e0 fb	 and	 eax, -5			; fffffffbH
  000dd	0b c1		 or	 eax, ecx
  000df	8b 4d 08	 mov	 ecx, DWORD PTR _feature$[ebp]
  000e2	89 01		 mov	 DWORD PTR [ecx], eax

; 77   :             feature->PROCESSOR_FEATURE_ADX = (reg_ebx >> 8) & 1;

  000e4	8b 55 ec	 mov	 edx, DWORD PTR _reg_ebx$[ebp]
  000e7	c1 ea 08	 shr	 edx, 8
  000ea	83 e2 01	 and	 edx, 1
  000ed	83 e2 01	 and	 edx, 1
  000f0	d1 e2		 shl	 edx, 1
  000f2	8b 45 08	 mov	 eax, DWORD PTR _feature$[ebp]
  000f5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f7	83 e1 fd	 and	 ecx, -3			; fffffffdH
  000fa	0b ca		 or	 ecx, edx
  000fc	8b 55 08	 mov	 edx, DWORD PTR _feature$[ebp]
  000ff	89 0a		 mov	 DWORD PTR [edx], ecx

; 78   :             feature->PROCESSOR_FEATURE_BMI2 = (reg_ebx >> 19) & 1;

  00101	8b 45 ec	 mov	 eax, DWORD PTR _reg_ebx$[ebp]
  00104	c1 e8 13	 shr	 eax, 19			; 00000013H
  00107	83 e0 01	 and	 eax, 1
  0010a	83 e0 01	 and	 eax, 1
  0010d	c1 e0 03	 shl	 eax, 3
  00110	8b 4d 08	 mov	 ecx, DWORD PTR _feature$[ebp]
  00113	8b 11		 mov	 edx, DWORD PTR [ecx]
  00115	83 e2 f7	 and	 edx, -9			; fffffff7H
  00118	0b d0		 or	 edx, eax
  0011a	8b 45 08	 mov	 eax, DWORD PTR _feature$[ebp]
  0011d	89 10		 mov	 DWORD PTR [eax], edx
$LN3@GetCPUInfo:

; 79   :         }
; 80   :         cpuid(0x80000000, &reg_eax, &reg_ebx, &reg_ecx, &reg_edx);

  0011f	8d 4d d4	 lea	 ecx, DWORD PTR _reg_edx$[ebp]
  00122	51		 push	 ecx
  00123	8d 55 e0	 lea	 edx, DWORD PTR _reg_ecx$[ebp]
  00126	52		 push	 edx
  00127	8d 45 ec	 lea	 eax, DWORD PTR _reg_ebx$[ebp]
  0012a	50		 push	 eax
  0012b	8d 4d f8	 lea	 ecx, DWORD PTR _reg_eax$[ebp]
  0012e	51		 push	 ecx
  0012f	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00134	e8 00 00 00 00	 call	 ?cpuid@Internal@Core@Math@Palmtree@@YAXIPAI000@Z ; Palmtree::Math::Core::Internal::cpuid
  00139	83 c4 14	 add	 esp, 20			; 00000014H

; 81   :         max_ex_function_no = reg_eax;

  0013c	8b 55 f8	 mov	 edx, DWORD PTR _reg_eax$[ebp]
  0013f	89 55 c4	 mov	 DWORD PTR _max_ex_function_no$[ebp], edx

; 82   :         if (max_ex_function_no >= 0x80000001)

  00142	81 7d c4 01 00
	00 80		 cmp	 DWORD PTR _max_ex_function_no$[ebp], -2147483647 ; 80000001H
  00149	72 3b		 jb	 SHORT $LN1@GetCPUInfo

; 83   :         {
; 84   :             cpuid(0x80000001, &reg_eax, &reg_ebx, &reg_ecx, &reg_edx);

  0014b	8d 45 d4	 lea	 eax, DWORD PTR _reg_edx$[ebp]
  0014e	50		 push	 eax
  0014f	8d 4d e0	 lea	 ecx, DWORD PTR _reg_ecx$[ebp]
  00152	51		 push	 ecx
  00153	8d 55 ec	 lea	 edx, DWORD PTR _reg_ebx$[ebp]
  00156	52		 push	 edx
  00157	8d 45 f8	 lea	 eax, DWORD PTR _reg_eax$[ebp]
  0015a	50		 push	 eax
  0015b	68 01 00 00 80	 push	 -2147483647		; 80000001H
  00160	e8 00 00 00 00	 call	 ?cpuid@Internal@Core@Math@Palmtree@@YAXIPAI000@Z ; Palmtree::Math::Core::Internal::cpuid
  00165	83 c4 14	 add	 esp, 20			; 00000014H

; 85   :             feature->PROCESSOR_FEATURE_ABM = (reg_ecx >> 5) & 1;

  00168	8b 4d e0	 mov	 ecx, DWORD PTR _reg_ecx$[ebp]
  0016b	c1 e9 05	 shr	 ecx, 5
  0016e	83 e1 01	 and	 ecx, 1
  00171	83 e1 01	 and	 ecx, 1
  00174	c1 e1 04	 shl	 ecx, 4
  00177	8b 55 08	 mov	 edx, DWORD PTR _feature$[ebp]
  0017a	8b 02		 mov	 eax, DWORD PTR [edx]
  0017c	83 e0 ef	 and	 eax, -17		; ffffffefH
  0017f	0b c1		 or	 eax, ecx
  00181	8b 4d 08	 mov	 ecx, DWORD PTR _feature$[ebp]
  00184	89 01		 mov	 DWORD PTR [ecx], eax
$LN1@GetCPUInfo:

; 86   :         }
; 87   :     }

  00186	52		 push	 edx
  00187	8b cd		 mov	 ecx, ebp
  00189	50		 push	 eax
  0018a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@GetCPUInfo
  00190	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00195	58		 pop	 eax
  00196	5a		 pop	 edx
  00197	5f		 pop	 edi
  00198	83 c4 3c	 add	 esp, 60			; 0000003cH
  0019b	3b ec		 cmp	 ebp, esp
  0019d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a2	8b e5		 mov	 esp, ebp
  001a4	5d		 pop	 ebp
  001a5	c3		 ret	 0
  001a6	66 90		 npad	 2
$LN11@GetCPUInfo:
  001a8	04 00 00 00	 DD	 4
  001ac	00 00 00 00	 DD	 $LN10@GetCPUInfo
$LN10@GetCPUInfo:
  001b0	f8 ff ff ff	 DD	 -8			; fffffff8H
  001b4	04 00 00 00	 DD	 4
  001b8	00 00 00 00	 DD	 $LN6@GetCPUInfo
  001bc	ec ff ff ff	 DD	 -20			; ffffffecH
  001c0	04 00 00 00	 DD	 4
  001c4	00 00 00 00	 DD	 $LN7@GetCPUInfo
  001c8	e0 ff ff ff	 DD	 -32			; ffffffe0H
  001cc	04 00 00 00	 DD	 4
  001d0	00 00 00 00	 DD	 $LN8@GetCPUInfo
  001d4	d4 ff ff ff	 DD	 -44			; ffffffd4H
  001d8	04 00 00 00	 DD	 4
  001dc	00 00 00 00	 DD	 $LN9@GetCPUInfo
$LN9@GetCPUInfo:
  001e0	72		 DB	 114			; 00000072H
  001e1	65		 DB	 101			; 00000065H
  001e2	67		 DB	 103			; 00000067H
  001e3	5f		 DB	 95			; 0000005fH
  001e4	65		 DB	 101			; 00000065H
  001e5	64		 DB	 100			; 00000064H
  001e6	78		 DB	 120			; 00000078H
  001e7	00		 DB	 0
$LN8@GetCPUInfo:
  001e8	72		 DB	 114			; 00000072H
  001e9	65		 DB	 101			; 00000065H
  001ea	67		 DB	 103			; 00000067H
  001eb	5f		 DB	 95			; 0000005fH
  001ec	65		 DB	 101			; 00000065H
  001ed	63		 DB	 99			; 00000063H
  001ee	78		 DB	 120			; 00000078H
  001ef	00		 DB	 0
$LN7@GetCPUInfo:
  001f0	72		 DB	 114			; 00000072H
  001f1	65		 DB	 101			; 00000065H
  001f2	67		 DB	 103			; 00000067H
  001f3	5f		 DB	 95			; 0000005fH
  001f4	65		 DB	 101			; 00000065H
  001f5	62		 DB	 98			; 00000062H
  001f6	78		 DB	 120			; 00000078H
  001f7	00		 DB	 0
$LN6@GetCPUInfo:
  001f8	72		 DB	 114			; 00000072H
  001f9	65		 DB	 101			; 00000065H
  001fa	67		 DB	 103			; 00000067H
  001fb	5f		 DB	 95			; 0000005fH
  001fc	65		 DB	 101			; 00000065H
  001fd	61		 DB	 97			; 00000061H
  001fe	78		 DB	 120			; 00000078H
  001ff	00		 DB	 0
?GetCPUInfo@Internal@Core@Math@Palmtree@@YAXPAU_tag_PROCESSOR_FEATURES@1234@@Z ENDP ; Palmtree::Math::Core::Internal::GetCPUInfo
_TEXT	ENDS
END
