; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	Z:\Sources\Lunor\Repos\rougemeilland\Palmtree.Math.Core.Uint\Palmtree.Math.Core.Uint\INTERNALTEST_op_DivRem.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__BB6D3116_pmc_uint_internal@h DB 01H
__8CA3E54E_pmc_inline_func@h DB 01H
__95056B1C_pmc_debug@h DB 01H
__21A27739_internaltest_op_divrem@c DB 01H
msvcjmc	ENDS
PUBLIC	_INTERNALTEST_DivRem_X_X
PUBLIC	__JustMyCode_Default
EXTRN	_AllocateBlock:PROC
EXTRN	_DeallocateBlock:PROC
EXTRN	_CheckBlockLight:PROC
EXTRN	_DivRem_X_X:PROC
EXTRN	_TEST_Assert:PROC
EXTRN	_FormatTestLabel:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
_DATA	SEGMENT
$SG95775 DB	'w', 00H, 'o', 00H, 'r', 00H, 'k', 00H, '_', 00H, 'v', 00H
	DB	'_', 00H, 'b', 00H, 'u', 00H, 'f', 00H, 'n0', 085H, 'Q', 0b9H, '['
	DB	'L04x', 0dH, 'dW0f0D0', 08bH, '0', 00H, 00H
	ORG $+2
$SG95776 DB	'D', 00H, 'i', 00H, 'v', 00H, 'R', 00H, 'e', 00H, 'm', 00H
	DB	'_', 00H, 'X', 00H, '_', 00H, 'X', 00H, ' ', 00H, '(', 00H, '%'
	DB	00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG95777 DB	'a', 00H, 'c', 00H, 't', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	'_', 00H, 'q', 00H, '_', 00H, 'b', 00H, 'u', 00H, 'f', 00H, 'n'
	DB	'0', 085H, 'Q', 0b9H, '[L04x', 0dH, 'dW0f0D0', 08bH, '0', 00H, 00H
	ORG $+2
$SG95778 DB	'D', 00H, 'i', 00H, 'v', 00H, 'R', 00H, 'e', 00H, 'm', 00H
	DB	'_', 00H, 'X', 00H, '_', 00H, 'X', 00H, ' ', 00H, '(', 00H, '%'
	DB	00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG95779 DB	'a', 00H, 'c', 00H, 't', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	'_', 00H, 'r', 00H, '_', 00H, 'b', 00H, 'u', 00H, 'f', 00H, 'n'
	DB	'0', 085H, 'Q', 0b9H, '[L04x', 0dH, 'dW0f0D0', 08bH, '0', 00H, 00H
	ORG $+2
$SG95780 DB	'D', 00H, 'i', 00H, 'v', 00H, 'R', 00H, 'e', 00H, 'm', 00H
	DB	'_', 00H, 'X', 00H, '_', 00H, 'X', 00H, ' ', 00H, '(', 00H, '%'
	DB	00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG95781 DB	'FUn0', 0c7H, '0', 0fcH, '0', 0bfH, '0n0', 085H, 'Q', 0b9H
	DB	'[L0', 00H, 'N', 0f4H, 081H, 'W0j0D0', 00H, 00H
	ORG $+2
$SG95782 DB	'D', 00H, 'i', 00H, 'v', 00H, 'R', 00H, 'e', 00H, 'm', 00H
	DB	'_', 00H, 'X', 00H, '_', 00H, 'X', 00H, ' ', 00H, '(', 00H, '%'
	DB	00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG95783 DB	'pRYOn0', 0c7H, '0', 0fcH, '0', 0bfH, '0n0', 085H, 'Q', 0b9H
	DB	'[L0', 00H, 'N', 0f4H, 081H, 'W0j0D0', 00H, 00H
$SG95784 DB	'D', 00H, 'i', 00H, 'v', 00H, 'R', 00H, 'e', 00H, 'm', 00H
	DB	'_', 00H, 'X', 00H, '_', 00H, 'X', 00H, ' ', 00H, '(', 00H, '%'
	DB	00H, 'd', 00H, '.', 00H, '%', 00H, 'd', 00H, ')', 00H, 00H, 00H
_DATA	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_debug.h
_TEXT	SEGMENT
_buffer1$ = 8						; size = 4
_count1$ = 12						; size = 4
_buffer2$ = 16						; size = 4
_count2$ = 20						; size = 4
__EQUALS_MEMORY PROC

; 155  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __95056B1C_pmc_debug@h
	call	@__CheckForDebuggerJustMyCode@4

; 156  :     if (count1 != count2)

	mov	eax, DWORD PTR _count1$[ebp]
	cmp	eax, DWORD PTR _count2$[ebp]
	je	SHORT $LN2@EQUALS_MEM

; 157  :         return (-1);

	or	eax, -1
	jmp	SHORT $LN1@EQUALS_MEM
$LN2@EQUALS_MEM:

; 158  :     while (count1 > 0)

	cmp	DWORD PTR _count1$[ebp], 0
	jbe	SHORT $LN3@EQUALS_MEM

; 159  :     {
; 160  :         if (*buffer1 != *buffer2)

	mov	ecx, DWORD PTR _buffer1$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _buffer2$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	edx, ecx
	je	SHORT $LN5@EQUALS_MEM

; 161  :             return (-1);

	or	eax, -1
	jmp	SHORT $LN1@EQUALS_MEM
$LN5@EQUALS_MEM:

; 162  :         ++buffer1;

	mov	edx, DWORD PTR _buffer1$[ebp]
	add	edx, 1
	mov	DWORD PTR _buffer1$[ebp], edx

; 163  :         ++buffer2;

	mov	eax, DWORD PTR _buffer2$[ebp]
	add	eax, 1
	mov	DWORD PTR _buffer2$[ebp], eax

; 164  :         --count1;

	mov	ecx, DWORD PTR _count1$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _count1$[ebp], ecx

; 165  :     }

	jmp	SHORT $LN2@EQUALS_MEM
$LN3@EQUALS_MEM:

; 166  :     return (0);

	xor	eax, eax
$LN1@EQUALS_MEM:

; 167  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__EQUALS_MEMORY ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\internaltest_op_divrem.c
_TEXT	SEGMENT
tv267 = -236						; size = 4
tv252 = -232						; size = 4
tv237 = -228						; size = 4
tv224 = -224						; size = 4
tv211 = -220						; size = 4
tv141 = -216						; size = 4
_actual_r$ = -212					; size = 4
_actual_r_count$ = -208					; size = 4
_actual_q$ = -204					; size = 4
_actual_q_count$ = -200					; size = 4
_actual_r_buf$ = -196					; size = 4
_actual_r_buf_code$ = -188				; size = 4
_actual_r_buf_words$ = -176				; size = 4
_actual_q_buf$ = -168					; size = 4
_actual_q_buf_code$ = -160				; size = 4
_actual_q_buf_words$ = -148				; size = 4
_work_v_buf$ = -140					; size = 4
_work_v_buf_code$ = -132				; size = 4
_work_v_buf_words$ = -120				; size = 4
_desired_r_buf$ = -112					; size = 4
_desired_r_buf_code$ = -104				; size = 4
_desired_r_buf_words$ = -92				; size = 4
_desired_q_buf$ = -84					; size = 4
_desired_q_buf_code$ = -76				; size = 4
_desired_q_buf_words$ = -64				; size = 4
_v_buf$ = -56						; size = 4
_v_buf_code$ = -48					; size = 4
_v_buf_words$ = -36					; size = 4
_u_buf$ = -28						; size = 4
_u_buf_code$ = -20					; size = 4
_u_buf_words$ = -8					; size = 4
_env$ = 8						; size = 4
_ep$ = 12						; size = 4
_no$ = 16						; size = 4
_u$ = 20						; size = 4
_u_count$ = 24						; size = 4
_v$ = 28						; size = 4
_v_count$ = 32						; size = 4
_desired_q$ = 36					; size = 4
_desired_q_count$ = 40					; size = 4
_desired_r$ = 44					; size = 4
_desired_r_count$ = 48					; size = 4
_INTERNALTEST_DivRem_X_X PROC

; 41   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	edi
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __21A27739_internaltest_op_divrem@c
	call	@__CheckForDebuggerJustMyCode@4

; 42   :     __UNIT_TYPE u_buf_words;
; 43   :     __UNIT_TYPE u_buf_code;
; 44   :     __UNIT_TYPE* u_buf = AllocateBlock(u_count * 8, &u_buf_words, &u_buf_code);

	lea	eax, DWORD PTR _u_buf_code$[ebp]
	push	eax
	lea	ecx, DWORD PTR _u_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_count$[ebp]
	shl	edx, 3
	push	edx
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _u_buf$[ebp], eax

; 45   :     _COPY_MEMORY_BYTE(u_buf, u, u_count);

	mov	eax, DWORD PTR _u_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_buf$[ebp]
	push	edx
	call	__COPY_MEMORY_BYTE
	add	esp, 12					; 0000000cH

; 46   : 
; 47   :     __UNIT_TYPE v_buf_words;
; 48   :     __UNIT_TYPE v_buf_code;
; 49   :     __UNIT_TYPE* v_buf = AllocateBlock(v_count * 8, &v_buf_words, &v_buf_code);

	lea	eax, DWORD PTR _v_buf_code$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_count$[ebp]
	shl	edx, 3
	push	edx
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _v_buf$[ebp], eax

; 50   :     _COPY_MEMORY_BYTE(v_buf, v, v_count);

	mov	eax, DWORD PTR _v_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_buf$[ebp]
	push	edx
	call	__COPY_MEMORY_BYTE
	add	esp, 12					; 0000000cH

; 51   : 
; 52   :     __UNIT_TYPE desired_q_buf_words;
; 53   :     __UNIT_TYPE desired_q_buf_code;
; 54   :     __UNIT_TYPE* desired_q_buf = AllocateBlock(desired_q_count * 8, &desired_q_buf_words, &desired_q_buf_code);

	lea	eax, DWORD PTR _desired_q_buf_code$[ebp]
	push	eax
	lea	ecx, DWORD PTR _desired_q_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _desired_q_count$[ebp]
	shl	edx, 3
	push	edx
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _desired_q_buf$[ebp], eax

; 55   :     _COPY_MEMORY_BYTE(desired_q_buf, desired_q, desired_q_count);

	mov	eax, DWORD PTR _desired_q_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _desired_q$[ebp]
	push	ecx
	mov	edx, DWORD PTR _desired_q_buf$[ebp]
	push	edx
	call	__COPY_MEMORY_BYTE
	add	esp, 12					; 0000000cH

; 56   : 
; 57   :     __UNIT_TYPE desired_r_buf_words;
; 58   :     __UNIT_TYPE desired_r_buf_code;
; 59   :     __UNIT_TYPE* desired_r_buf = AllocateBlock(desired_r_count * 8, &desired_r_buf_words, &desired_r_buf_code);

	lea	eax, DWORD PTR _desired_r_buf_code$[ebp]
	push	eax
	lea	ecx, DWORD PTR _desired_r_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _desired_r_count$[ebp]
	shl	edx, 3
	push	edx
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _desired_r_buf$[ebp], eax

; 60   :     _COPY_MEMORY_BYTE(desired_r_buf, desired_r, desired_r_count);

	mov	eax, DWORD PTR _desired_r_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _desired_r$[ebp]
	push	ecx
	mov	edx, DWORD PTR _desired_r_buf$[ebp]
	push	edx
	call	__COPY_MEMORY_BYTE
	add	esp, 12					; 0000000cH

; 61   : 
; 62   :     __UNIT_TYPE work_v_buf_words;
; 63   :     __UNIT_TYPE work_v_buf_code;
; 64   :     __UNIT_TYPE* work_v_buf = AllocateBlock(v_count * 8, &work_v_buf_words, &work_v_buf_code);

	lea	eax, DWORD PTR _work_v_buf_code$[ebp]
	push	eax
	lea	ecx, DWORD PTR _work_v_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_count$[ebp]
	shl	edx, 3
	push	edx
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _work_v_buf$[ebp], eax

; 65   : 
; 66   :     __UNIT_TYPE actual_q_buf_words;
; 67   :     __UNIT_TYPE actual_q_buf_code;
; 68   :     __UNIT_TYPE* actual_q_buf = AllocateBlock(u_count > v_count ? (u_count - v_count + 1) * 8 + __UNIT_TYPE_BIT_COUNT : __UNIT_TYPE_BIT_COUNT, &actual_q_buf_words, &actual_q_buf_code);

	mov	eax, DWORD PTR _u_count$[ebp]
	cmp	eax, DWORD PTR _v_count$[ebp]
	jbe	SHORT $LN9@INTERNALTE
	mov	ecx, DWORD PTR _u_count$[ebp]
	sub	ecx, DWORD PTR _v_count$[ebp]
	lea	edx, DWORD PTR [ecx*8+40]
	mov	DWORD PTR tv141[ebp], edx
	jmp	SHORT $LN10@INTERNALTE
$LN9@INTERNALTE:
	mov	DWORD PTR tv141[ebp], 32		; 00000020H
$LN10@INTERNALTE:
	lea	eax, DWORD PTR _actual_q_buf_code$[ebp]
	push	eax
	lea	ecx, DWORD PTR _actual_q_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv141[ebp]
	push	edx
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _actual_q_buf$[ebp], eax

; 69   : 
; 70   :     __UNIT_TYPE actual_r_buf_words;
; 71   :     __UNIT_TYPE actual_r_buf_code;
; 72   :     __UNIT_TYPE* actual_r_buf = AllocateBlock(u_count * 8 + __UNIT_TYPE_BIT_COUNT, &actual_r_buf_words, &actual_r_buf_code);

	lea	eax, DWORD PTR _actual_r_buf_code$[ebp]
	push	eax
	lea	ecx, DWORD PTR _actual_r_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u_count$[ebp]
	lea	eax, DWORD PTR [edx*8+32]
	push	eax
	call	_AllocateBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _actual_r_buf$[ebp], eax

; 73   : 
; 74   :     DivRem_X_X(u_buf, u_buf_words, v_buf, v_buf_words, work_v_buf, actual_q_buf, actual_r_buf);

	mov	ecx, DWORD PTR _actual_r_buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _actual_q_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _work_v_buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _v_buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _u_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u_buf$[ebp]
	push	ecx
	call	_DivRem_X_X
	add	esp, 28					; 0000001cH

; 75   : 
; 76   :     size_t actual_q_count = actual_q_buf_words * __UNIT_TYPE_BYTE_COUNT;

	mov	edx, DWORD PTR _actual_q_buf_words$[ebp]
	shl	edx, 2
	mov	DWORD PTR _actual_q_count$[ebp], edx

; 77   :     unsigned char* actual_q = (unsigned char*)actual_q_buf;

	mov	eax, DWORD PTR _actual_q_buf$[ebp]
	mov	DWORD PTR _actual_q$[ebp], eax
$LN2@INTERNALTE:

; 78   :     while (actual_q_count > 0 && actual_q[actual_q_count - 1] == 0)

	cmp	DWORD PTR _actual_q_count$[ebp], 0
	jbe	SHORT $LN3@INTERNALTE
	mov	ecx, DWORD PTR _actual_q$[ebp]
	add	ecx, DWORD PTR _actual_q_count$[ebp]
	movzx	edx, BYTE PTR [ecx-1]
	test	edx, edx
	jne	SHORT $LN3@INTERNALTE

; 79   :         --actual_q_count;

	mov	eax, DWORD PTR _actual_q_count$[ebp]
	sub	eax, 1
	mov	DWORD PTR _actual_q_count$[ebp], eax
	jmp	SHORT $LN2@INTERNALTE
$LN3@INTERNALTE:

; 80   :     if (actual_q_count == 0)

	cmp	DWORD PTR _actual_q_count$[ebp], 0
	jne	SHORT $LN6@INTERNALTE

; 81   :         actual_q_count = 1;

	mov	DWORD PTR _actual_q_count$[ebp], 1
$LN6@INTERNALTE:

; 82   : 
; 83   :     size_t actual_r_count = actual_r_buf_words * __UNIT_TYPE_BYTE_COUNT;

	mov	ecx, DWORD PTR _actual_r_buf_words$[ebp]
	shl	ecx, 2
	mov	DWORD PTR _actual_r_count$[ebp], ecx

; 84   :     unsigned char* actual_r = (unsigned char*)actual_r_buf;

	mov	edx, DWORD PTR _actual_r_buf$[ebp]
	mov	DWORD PTR _actual_r$[ebp], edx
$LN4@INTERNALTE:

; 85   :     while (actual_r_count > 0 && actual_r[actual_r_count - 1] == 0)

	cmp	DWORD PTR _actual_r_count$[ebp], 0
	jbe	SHORT $LN5@INTERNALTE
	mov	eax, DWORD PTR _actual_r$[ebp]
	add	eax, DWORD PTR _actual_r_count$[ebp]
	movzx	ecx, BYTE PTR [eax-1]
	test	ecx, ecx
	jne	SHORT $LN5@INTERNALTE

; 86   :         --actual_r_count;

	mov	edx, DWORD PTR _actual_r_count$[ebp]
	sub	edx, 1
	mov	DWORD PTR _actual_r_count$[ebp], edx
	jmp	SHORT $LN4@INTERNALTE
$LN5@INTERNALTE:

; 87   :     if (actual_r_count == 0)

	cmp	DWORD PTR _actual_r_count$[ebp], 0
	jne	SHORT $LN7@INTERNALTE

; 88   :         actual_r_count = 1;

	mov	DWORD PTR _actual_r_count$[ebp], 1
$LN7@INTERNALTE:

; 89   : 
; 90   :     TEST_Assert(env, FormatTestLabel(L"DivRem_X_X (%d.%d)", no, 1), CheckBlockLight(work_v_buf, work_v_buf_code) == PMC_STATUS_OK, L"work_v_bufの内容が破損している");

	mov	eax, DWORD PTR _work_v_buf_code$[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_v_buf$[ebp]
	push	ecx
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN11@INTERNALTE
	mov	DWORD PTR tv211[ebp], 1
	jmp	SHORT $LN12@INTERNALTE
$LN11@INTERNALTE:
	mov	DWORD PTR tv211[ebp], 0
$LN12@INTERNALTE:
	push	OFFSET $SG95775
	mov	edx, DWORD PTR tv211[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _no$[ebp]
	push	eax
	push	OFFSET $SG95776
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 91   :     TEST_Assert(env, FormatTestLabel(L"DivRem_X_X (%d.%d)", no, 2), CheckBlockLight(actual_q_buf, actual_q_buf_code) == PMC_STATUS_OK, L"actual_q_bufの内容が破損している");

	mov	edx, DWORD PTR _actual_q_buf_code$[ebp]
	push	edx
	mov	eax, DWORD PTR _actual_q_buf$[ebp]
	push	eax
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN13@INTERNALTE
	mov	DWORD PTR tv224[ebp], 1
	jmp	SHORT $LN14@INTERNALTE
$LN13@INTERNALTE:
	mov	DWORD PTR tv224[ebp], 0
$LN14@INTERNALTE:
	push	OFFSET $SG95777
	mov	ecx, DWORD PTR tv224[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET $SG95778
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 92   :     TEST_Assert(env, FormatTestLabel(L"DivRem_X_X (%d.%d)", no, 3), CheckBlockLight(actual_r_buf, actual_r_buf_code) == PMC_STATUS_OK, L"actual_r_bufの内容が破損している");

	mov	ecx, DWORD PTR _actual_r_buf_code$[ebp]
	push	ecx
	mov	edx, DWORD PTR _actual_r_buf$[ebp]
	push	edx
	call	_CheckBlockLight
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN15@INTERNALTE
	mov	DWORD PTR tv237[ebp], 1
	jmp	SHORT $LN16@INTERNALTE
$LN15@INTERNALTE:
	mov	DWORD PTR tv237[ebp], 0
$LN16@INTERNALTE:
	push	OFFSET $SG95779
	mov	eax, DWORD PTR tv237[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _no$[ebp]
	push	ecx
	push	OFFSET $SG95780
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _env$[ebp]
	push	edx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 93   :     TEST_Assert(env, FormatTestLabel(L"DivRem_X_X (%d.%d)", no, 4), _EQUALS_MEMORY(actual_q, actual_q_count, desired_q, desired_q_count) == 0, L"商のデータの内容が一致しない");

	mov	eax, DWORD PTR _desired_q_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _desired_q$[ebp]
	push	ecx
	mov	edx, DWORD PTR _actual_q_count$[ebp]
	push	edx
	mov	eax, DWORD PTR _actual_q$[ebp]
	push	eax
	call	__EQUALS_MEMORY
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN17@INTERNALTE
	mov	DWORD PTR tv252[ebp], 1
	jmp	SHORT $LN18@INTERNALTE
$LN17@INTERNALTE:
	mov	DWORD PTR tv252[ebp], 0
$LN18@INTERNALTE:
	push	OFFSET $SG95781
	mov	ecx, DWORD PTR tv252[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _no$[ebp]
	push	edx
	push	OFFSET $SG95782
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _env$[ebp]
	push	eax
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 94   :     TEST_Assert(env, FormatTestLabel(L"DivRem_X_X (%d.%d)", no, 5), _EQUALS_MEMORY(actual_r, actual_r_count, desired_r, desired_r_count) == 0, L"剰余のデータの内容が一致しない");

	mov	ecx, DWORD PTR _desired_r_count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _desired_r$[ebp]
	push	edx
	mov	eax, DWORD PTR _actual_r_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _actual_r$[ebp]
	push	ecx
	call	__EQUALS_MEMORY
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN19@INTERNALTE
	mov	DWORD PTR tv267[ebp], 1
	jmp	SHORT $LN20@INTERNALTE
$LN19@INTERNALTE:
	mov	DWORD PTR tv267[ebp], 0
$LN20@INTERNALTE:
	push	OFFSET $SG95783
	mov	edx, DWORD PTR tv267[ebp]
	push	edx
	push	5
	mov	eax, DWORD PTR _no$[ebp]
	push	eax
	push	OFFSET $SG95784
	call	_FormatTestLabel
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _env$[ebp]
	push	ecx
	call	_TEST_Assert
	add	esp, 16					; 00000010H

; 95   : 
; 96   :     DeallocateBlock(actual_r_buf, actual_r_buf_words);

	mov	edx, DWORD PTR _actual_r_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _actual_r_buf$[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 97   :     DeallocateBlock(actual_q_buf, actual_q_buf_words);

	mov	ecx, DWORD PTR _actual_q_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _actual_q_buf$[ebp]
	push	edx
	call	_DeallocateBlock
	add	esp, 8

; 98   :     DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	eax, DWORD PTR _work_v_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _work_v_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 99   :     DeallocateBlock(desired_r_buf, desired_r_buf_words);

	mov	edx, DWORD PTR _desired_r_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _desired_r_buf$[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 100  :     DeallocateBlock(desired_q_buf, desired_q_buf_words);

	mov	ecx, DWORD PTR _desired_q_buf_words$[ebp]
	push	ecx
	mov	edx, DWORD PTR _desired_q_buf$[ebp]
	push	edx
	call	_DeallocateBlock
	add	esp, 8

; 101  :     DeallocateBlock(v_buf, v_buf_words);

	mov	eax, DWORD PTR _v_buf_words$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v_buf$[ebp]
	push	ecx
	call	_DeallocateBlock
	add	esp, 8

; 102  :     DeallocateBlock(u_buf, u_buf_words);

	mov	edx, DWORD PTR _u_buf_words$[ebp]
	push	edx
	mov	eax, DWORD PTR _u_buf$[ebp]
	push	eax
	call	_DeallocateBlock
	add	esp, 8

; 103  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN36@INTERNALTE
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN36@INTERNALTE:
	DD	14					; 0000000eH
	DD	$LN35@INTERNALTE
$LN35@INTERNALTE:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN21@INTERNALTE
	DD	-20					; ffffffecH
	DD	4
	DD	$LN22@INTERNALTE
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN23@INTERNALTE
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN24@INTERNALTE
	DD	-64					; ffffffc0H
	DD	4
	DD	$LN25@INTERNALTE
	DD	-76					; ffffffb4H
	DD	4
	DD	$LN26@INTERNALTE
	DD	-92					; ffffffa4H
	DD	4
	DD	$LN27@INTERNALTE
	DD	-104					; ffffff98H
	DD	4
	DD	$LN28@INTERNALTE
	DD	-120					; ffffff88H
	DD	4
	DD	$LN29@INTERNALTE
	DD	-132					; ffffff7cH
	DD	4
	DD	$LN30@INTERNALTE
	DD	-148					; ffffff6cH
	DD	4
	DD	$LN31@INTERNALTE
	DD	-160					; ffffff60H
	DD	4
	DD	$LN32@INTERNALTE
	DD	-176					; ffffff50H
	DD	4
	DD	$LN33@INTERNALTE
	DD	-188					; ffffff44H
	DD	4
	DD	$LN34@INTERNALTE
$LN34@INTERNALTE:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN33@INTERNALTE:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN32@INTERNALTE:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	113					; 00000071H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN31@INTERNALTE:
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	113					; 00000071H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN30@INTERNALTE:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN29@INTERNALTE:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN28@INTERNALTE:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN27@INTERNALTE:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN26@INTERNALTE:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	113					; 00000071H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN25@INTERNALTE:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	113					; 00000071H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN24@INTERNALTE:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN23@INTERNALTE:
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN22@INTERNALTE:
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN21@INTERNALTE:
	DB	117					; 00000075H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
_INTERNALTEST_DivRem_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
_TEXT	SEGMENT
_d$ = 8							; size = 4
_s$ = 12						; size = 4
_count$ = 16						; size = 4
__COPY_MEMORY_BYTE PROC

; 49   :     {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __8CA3E54E_pmc_inline_func@h
	call	@__CheckForDebuggerJustMyCode@4

; 50   :         __movsb(d, s, count);

	mov	edi, DWORD PTR _d$[ebp]
	mov	esi, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	rep movsb

; 51   :     }

	pop	edi
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
__COPY_MEMORY_BYTE ENDP
_TEXT	ENDS
END
