; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	Initialize_Parse
PUBLIC	PMC_TryParse
PUBLIC	??_C@_13DEFPDAGF@?$AA?0@			; `string'
PUBLIC	??_C@_13JOFGPIOO@?$AA?4@			; `string'
PUBLIC	??_C@_01EKENIIDA@3@				; `string'
PUBLIC	??_C@_13KJIIAINM@?$AA?$CL@			; `string'
PUBLIC	??_C@_13IMODFHAA@?$AA?9@			; `string'
EXTRN	__imp_lstrcpyA:PROC
EXTRN	__imp_lstrcpyW:PROC
EXTRN	__imp_lstrlenW:PROC
EXTRN	AllocateBlock:PROC
EXTRN	DeallocateBlock:PROC
EXTRN	CheckBlockLight:PROC
EXTRN	AllocateNumber:PROC
EXTRN	DeallocateNumber:PROC
EXTRN	CommitNumber:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	number_zero:BYTE
EXTRN	statistics_info:BYTE
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
_BSS	SEGMENT
default_number_format_option DB 028H DUP (?)
fp_MultiplyAndAdd DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Initialize_Parse DD imagerel $LN6
	DD	imagerel $LN6+159
	DD	imagerel $unwind$Initialize_Parse
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_TryParse DD imagerel $LN13
	DD	imagerel $LN13+111
	DD	imagerel $unwind$PMC_TryParse
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_COPY_MEMORY_UNIT DD imagerel _COPY_MEMORY_UNIT
	DD	imagerel _COPY_MEMORY_UNIT+33
	DD	imagerel $unwind$_COPY_MEMORY_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$InitializeParserState DD imagerel InitializeParserState
	DD	imagerel InitializeParserState+226
	DD	imagerel $unwind$InitializeParserState
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ParseAsDecimalNumberString DD imagerel ParseAsDecimalNumberString
	DD	imagerel ParseAsDecimalNumberString+1872
	DD	imagerel $unwind$ParseAsDecimalNumberString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ParseAsHexNumberString DD imagerel ParseAsHexNumberString
	DD	imagerel ParseAsHexNumberString+247
	DD	imagerel $unwind$ParseAsHexNumberString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Build1WordFromDecimalString DD imagerel Build1WordFromDecimalString
	DD	imagerel Build1WordFromDecimalString+356
	DD	imagerel $unwind$Build1WordFromDecimalString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$BuildBinaryFromDecimalString DD imagerel BuildBinaryFromDecimalString
	DD	imagerel BuildBinaryFromDecimalString+140
	DD	imagerel $unwind$BuildBinaryFromDecimalString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$BuildBinaryFromDecimalString DD imagerel BuildBinaryFromDecimalString+140
	DD	imagerel BuildBinaryFromDecimalString+195
	DD	imagerel $chain$0$BuildBinaryFromDecimalString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$BuildBinaryFromDecimalString DD imagerel BuildBinaryFromDecimalString+195
	DD	imagerel BuildBinaryFromDecimalString+227
	DD	imagerel $chain$1$BuildBinaryFromDecimalString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$MultiplyAndAdd_using_ADC_MUL DD imagerel MultiplyAndAdd_using_ADC_MUL
	DD	imagerel MultiplyAndAdd_using_ADC_MUL+2410
	DD	imagerel $unwind$MultiplyAndAdd_using_ADC_MUL
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$MultiplyAndAdd_using_ADCX_MULX DD imagerel MultiplyAndAdd_using_ADCX_MULX
	DD	imagerel MultiplyAndAdd_using_ADCX_MULX+2467
	DD	imagerel $unwind$MultiplyAndAdd_using_ADCX_MULX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ConvertCardinalNumber DD imagerel ConvertCardinalNumber
	DD	imagerel ConvertCardinalNumber+194
	DD	imagerel $unwind$ConvertCardinalNumber
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TryParseDN DD imagerel TryParseDN
	DD	imagerel TryParseDN+453
	DD	imagerel $unwind$TryParseDN
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$TryParseDN DD imagerel TryParseDN+453
	DD	imagerel TryParseDN+1030
	DD	imagerel $chain$0$TryParseDN
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$TryParseDN DD imagerel TryParseDN+1030
	DD	imagerel TryParseDN+1058
	DD	imagerel $chain$1$TryParseDN
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$BuildLeading1WordFromHexString DD imagerel BuildLeading1WordFromHexString
	DD	imagerel BuildLeading1WordFromHexString+207
	DD	imagerel $unwind$BuildLeading1WordFromHexString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Build1WordFromHexString DD imagerel Build1WordFromHexString
	DD	imagerel Build1WordFromHexString+460
	DD	imagerel $unwind$Build1WordFromHexString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$BuildBinaryFromHexString DD imagerel BuildBinaryFromHexString
	DD	imagerel BuildBinaryFromHexString+54
	DD	imagerel $unwind$BuildBinaryFromHexString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$BuildBinaryFromHexString DD imagerel BuildBinaryFromHexString+54
	DD	imagerel BuildBinaryFromHexString+82
	DD	imagerel $chain$0$BuildBinaryFromHexString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$BuildBinaryFromHexString DD imagerel BuildBinaryFromHexString+82
	DD	imagerel BuildBinaryFromHexString+198
	DD	imagerel $chain$2$BuildBinaryFromHexString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$BuildBinaryFromHexString DD imagerel BuildBinaryFromHexString+198
	DD	imagerel BuildBinaryFromHexString+217
	DD	imagerel $chain$3$BuildBinaryFromHexString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$BuildBinaryFromHexString DD imagerel BuildBinaryFromHexString+217
	DD	imagerel BuildBinaryFromHexString+347
	DD	imagerel $chain$4$BuildBinaryFromHexString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TryParseX DD imagerel TryParseX
	DD	imagerel TryParseX+92
	DD	imagerel $unwind$TryParseX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$TryParseX DD imagerel TryParseX+92
	DD	imagerel TryParseX+443
	DD	imagerel $chain$0$TryParseX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$TryParseX DD imagerel TryParseX+443
	DD	imagerel TryParseX+546
	DD	imagerel $chain$1$TryParseX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$TryParseX DD imagerel TryParseX+546
	DD	imagerel TryParseX+673
	DD	imagerel $chain$2$TryParseX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$TryParseX DD imagerel TryParseX+673
	DD	imagerel TryParseX+775
	DD	imagerel $chain$3$TryParseX
pdata	ENDS
;	COMDAT ??_C@_13IMODFHAA@?$AA?9@
CONST	SEGMENT
??_C@_13IMODFHAA@?$AA?9@ DB '-', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_13KJIIAINM@?$AA?$CL@
CONST	SEGMENT
??_C@_13KJIIAINM@?$AA?$CL@ DB '+', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01EKENIIDA@3@
CONST	SEGMENT
??_C@_01EKENIIDA@3@ DB '3', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_13JOFGPIOO@?$AA?4@
CONST	SEGMENT
??_C@_13JOFGPIOO@?$AA?4@ DB '.', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_13DEFPDAGF@?$AA?0@
CONST	SEGMENT
??_C@_13DEFPDAGF@?$AA?0@ DB ',', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$TryParseX DD 021H
	DD	imagerel TryParseX
	DD	imagerel TryParseX+92
	DD	imagerel $unwind$TryParseX
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$TryParseX DD 021H
	DD	imagerel TryParseX+92
	DD	imagerel TryParseX+443
	DD	imagerel $chain$0$TryParseX
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$TryParseX DD 020821H
	DD	018c408H
	DD	imagerel TryParseX+92
	DD	imagerel TryParseX+443
	DD	imagerel $chain$0$TryParseX
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$TryParseX DD 020821H
	DD	0193408H
	DD	imagerel TryParseX
	DD	imagerel TryParseX+92
	DD	imagerel $unwind$TryParseX
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TryParseX DD 072119H
	DD	01a010fH
	DD	0e006f008H
	DD	060037004H
	DD	05002H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$BuildBinaryFromHexString DD 021H
	DD	imagerel BuildBinaryFromHexString
	DD	imagerel BuildBinaryFromHexString+54
	DD	imagerel $unwind$BuildBinaryFromHexString
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$BuildBinaryFromHexString DD 021H
	DD	imagerel BuildBinaryFromHexString+54
	DD	imagerel BuildBinaryFromHexString+82
	DD	imagerel $chain$0$BuildBinaryFromHexString
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$BuildBinaryFromHexString DD 041121H
	DD	0af411H
	DD	09e405H
	DD	imagerel BuildBinaryFromHexString+54
	DD	imagerel BuildBinaryFromHexString+82
	DD	imagerel $chain$0$BuildBinaryFromHexString
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$BuildBinaryFromHexString DD 020521H
	DD	085405H
	DD	imagerel BuildBinaryFromHexString
	DD	imagerel BuildBinaryFromHexString+54
	DD	imagerel $unwind$BuildBinaryFromHexString
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$BuildBinaryFromHexString DD 040801H
	DD	070043208H
	DD	030026003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Build1WordFromHexString DD 091101H
	DD	0f00d6211H
	DD	0d009e00bH
	DD	07005c007H
	DD	050036004H
	DD	03002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$BuildLeading1WordFromHexString DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$TryParseDN DD 021H
	DD	imagerel TryParseDN
	DD	imagerel TryParseDN+453
	DD	imagerel $unwind$TryParseDN
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$TryParseDN DD 020821H
	DD	016d408H
	DD	imagerel TryParseDN
	DD	imagerel TryParseDN+453
	DD	imagerel $unwind$TryParseDN
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TryParseDN DD 0a1c01H
	DD	018641cH
	DD	017341cH
	DD	0f012f21cH
	DD	0c00ee010H
	DD	0500b700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ConvertCardinalNumber DD 085301H
	DD	083453H
	DD	0a540dH
	DD	0e009320dH
	DD	060067007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$MultiplyAndAdd_using_ADCX_MULX DD 051301H
	DD	07a0113H
	DD	030037004H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$MultiplyAndAdd_using_ADC_MUL DD 041201H
	DD	07b0112H
	DD	050023003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$BuildBinaryFromDecimalString DD 021H
	DD	imagerel BuildBinaryFromDecimalString
	DD	imagerel BuildBinaryFromDecimalString+140
	DD	imagerel $unwind$BuildBinaryFromDecimalString
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$BuildBinaryFromDecimalString DD 020521H
	DD	066405H
	DD	imagerel BuildBinaryFromDecimalString
	DD	imagerel BuildBinaryFromDecimalString+140
	DD	imagerel $unwind$BuildBinaryFromDecimalString
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$BuildBinaryFromDecimalString DD 081501H
	DD	09e415H
	DD	087415H
	DD	073415H
	DD	0f0113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Build1WordFromDecimalString DD 080d01H
	DD	0e00bf00dH
	DD	0c007d009H
	DD	060047005H
	DD	030025003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ParseAsHexNumberString DD 051f19H
	DD	016340dH
	DD	014010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	090H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ParseAsDecimalNumberString DD 072519H
	DD	0177417H
	DD	0163417H
	DD	0140117H
	DD	0500bH
	DD	imagerel __GSHandlerCheck
	DD	090H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$InitializeParserState DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_COPY_MEMORY_UNIT DD 040a01H
	DD	02740aH
	DD	016405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_TryParse DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Initialize_Parse DD 020601H
	DD	030023206H
xdata	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT TryParseX
_TEXT	SEGMENT
int_part_buf_words$ = 48
int_part_buf_code$ = 56
o_light_check_code$ = 64
state$1 = 80
__$ArrayPad$ = 176
source$ = 256
number_styles$ = 264
format_option$ = 272
o$ = 280
TryParseX PROC						; COMDAT

; 968  : {

	push	rbp
	push	rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 208				; 000000d0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	r15, r9
	mov	rbp, r8
	mov	edi, edx
	mov	rsi, rcx

; 969  :     PMC_STATUS_CODE result;
; 970  :     __UNIT_TYPE source_len = lstrlenW(source);

	call	QWORD PTR __imp_lstrlenW
	movsxd	rcx, eax

; 971  :     __UNIT_TYPE int_part_buf_code;
; 972  :     __UNIT_TYPE int_part_buf_words;
; 973  :     wchar_t* int_part_buf = (wchar_t*)AllocateBlock((source_len + 1) * sizeof(wchar_t) * 8, &int_part_buf_words, &int_part_buf_code);

	lea	r8, QWORD PTR int_part_buf_code$[rsp]
	inc	rcx
	lea	rdx, QWORD PTR int_part_buf_words$[rsp]
	shl	rcx, 4
	call	AllocateBlock
	mov	r14, rax

; 974  :     if (int_part_buf == NULL)

	test	rax, rax
	jne	SHORT $LN2@TryParseX

; 975  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	lea	eax, QWORD PTR [r14-5]
	jmp	$LN1@TryParseX
$LN2@TryParseX:
	mov	QWORD PTR [rsp+200], rbx

; 289  :     InitializeParserState(&state, in_ptr, number_styles, format_option, int_part_buf, NULL);

	lea	rcx, QWORD PTR state$1[rsp]
	xor	ebx, ebx
	mov	r9, rbp
	mov	QWORD PTR [rsp+40], rbx
	mov	r8d, edi
	mov	rdx, rsi
	mov	QWORD PTR [rsp+32], r14
	call	InitializeParserState

; 290  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE)

	test	dil, 1
	je	SHORT $LN75@TryParseX

; 113  :         switch (*state->IN_PTR)

	mov	rcx, QWORD PTR state$1[rsp]
	movzx	eax, WORD PTR [rcx]
	cmp	eax, 9
	jb	SHORT $LN75@TryParseX
$LL15@TryParseX:
	cmp	eax, 13
	jbe	SHORT $LN20@TryParseX
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN75@TryParseX
$LN20@TryParseX:

; 114  :         {
; 115  :         case L' ':
; 116  :         case L'\t':
; 117  :         case L'\n':
; 118  :         case L'\r':
; 119  :         case L'\f':
; 120  :         case L'\v':
; 121  :             break;
; 122  : 
; 123  :         default:
; 124  :             return;
; 125  :         }
; 126  :         state->IN_PTR += 1;

	add	rcx, 2
	mov	QWORD PTR state$1[rsp], rcx
	movzx	eax, WORD PTR [rcx]
	cmp	eax, 9
	jae	SHORT $LL15@TryParseX
$LN75@TryParseX:

; 292  :     ParseAsIntegerPartNumberSequence(&state);

	lea	rcx, QWORD PTR state$1[rsp]
	call	ParseAsIntegerPartNumberSequence

; 293  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

	mov	rax, QWORD PTR state$1[rsp]
	test	dil, 2
	je	SHORT $LN59@TryParseX

; 113  :         switch (*state->IN_PTR)

	movzx	ecx, WORD PTR [rax]
	cmp	ecx, 9
	jb	SHORT $LN59@TryParseX
	npad	2
$LL24@TryParseX:
	cmp	ecx, 13
	jbe	SHORT $LN29@TryParseX
	cmp	ecx, 32					; 00000020H
	jne	SHORT $LN59@TryParseX
$LN29@TryParseX:

; 114  :         {
; 115  :         case L' ':
; 116  :         case L'\t':
; 117  :         case L'\n':
; 118  :         case L'\r':
; 119  :         case L'\f':
; 120  :         case L'\v':
; 121  :             break;
; 122  : 
; 123  :         default:
; 124  :             return;
; 125  :         }
; 126  :         state->IN_PTR += 1;

	add	rax, 2
	mov	QWORD PTR state$1[rsp], rax
	movzx	ecx, WORD PTR [rax]
	cmp	ecx, 9
	jae	SHORT $LL24@TryParseX
$LN59@TryParseX:

; 295  :     if (*state.IN_PTR != L'\0')

	cmp	WORD PTR [rax], bx
	jne	SHORT $LN9@TryParseX

; 103  :     *state->INT_PART_PTR = L'\0';

	mov	rax, QWORD PTR state$1[rsp+80]
	mov	WORD PTR [rax], bx

; 104  :     if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT)

	test	BYTE PTR state$1[rsp+8], 32		; 00000020H
	je	SHORT $LN33@TryParseX

; 105  :         *state->FRAC_PART_PTR = L'\0';

	mov	rax, QWORD PTR state$1[rsp+88]
	mov	WORD PTR [rax], bx
$LN33@TryParseX:

; 298  :     return (1);

	mov	ebx, 1
$LN9@TryParseX:

; 976  :     int result_parsing = ParseAsHexNumberString(source, number_styles, format_option, int_part_buf);
; 977  :     if ((result = CheckBlockLight((__UNIT_TYPE*)int_part_buf, int_part_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR int_part_buf_code$[rsp]
	mov	rcx, r14
	call	CheckBlockLight
	test	eax, eax
	jne	$LN76@TryParseX

; 978  :         return (result);
; 979  :     if (!result_parsing || int_part_buf[0] == L'\0')

	test	ebx, ebx
	je	$LN5@TryParseX
	cmp	WORD PTR [r14], ax
	je	$LN5@TryParseX

; 983  :     }
; 984  :     __UNIT_TYPE o_bit_count = lstrlenW(int_part_buf) * 4;

	mov	rcx, r14
	call	QWORD PTR __imp_lstrlenW
	shl	eax, 2

; 985  :     __UNIT_TYPE o_light_check_code;
; 986  :     if ((result = AllocateNumber(o, o_bit_count, &o_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR o_light_check_code$[rsp]
	movsxd	rdx, eax
	mov	rcx, r15
	call	AllocateNumber
	mov	ebx, eax
	mov	rcx, r14
	test	eax, eax
	je	SHORT $LN6@TryParseX

; 987  :     {
; 988  :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	rdx, QWORD PTR int_part_buf_words$[rsp]
	call	DeallocateBlock

; 989  :         return (result);

	mov	eax, ebx
	jmp	$LN76@TryParseX
$LN6@TryParseX:

; 990  :     }
; 991  :     BuildBinaryFromHexString(int_part_buf, (*o)->BLOCK);

	mov	rax, QWORD PTR [r15]
	mov	rbx, QWORD PTR [rax+56]

; 949  :     __UNIT_TYPE source_count = lstrlenW(source);

	call	QWORD PTR __imp_lstrlenW
	movsxd	rsi, eax

; 950  :     wchar_t* in_ptr = source;

	mov	rdi, r14

; 952  :     int r = source_count % word_digit_count;

	mov	r11, rsi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 194  :         return ((u + v - 1) / v);

	lea	rax, QWORD PTR [rsi+15]
	shr	rax, 4
	lea	rbx, QWORD PTR [rbx+rax*8]
	add	rbx, -8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 952  :     int r = source_count % word_digit_count;

	and	r11d, 15

; 953  :     if (r > 0)

	jbe	$LN57@TryParseX

; 901  :     __UNIT_TYPE x = Parse1DigitFromHexChar(*in_ptr);

	movzx	ecx, WORD PTR [r14]
	call	Parse1DigitFromHexChar

; 903  :     --count;

	lea	r9, QWORD PTR [r11-1]
	mov	r10d, eax

; 955  :         *out_ptr-- = BuildLeading1WordFromHexString(in_ptr, r);

	mov	ebp, r11d

; 902  :     ++in_ptr;

	lea	r8, QWORD PTR [r14+2]

; 904  :     while (count > 0)

	test	r9, r9
	je	SHORT $LN44@TryParseX
	mov	QWORD PTR [rsp+192], r12
	lea	rdi, OFFSET FLAT:__ImageBase
	mov	r12d, -1				; ffffffffH
$LL43@TryParseX:

; 905  :     {
; 906  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr);

	movzx	edx, WORD PTR [r8]

; 867  :     switch (c)

	lea	eax, DWORD PTR [rdx-48]
	cmp	eax, 54					; 00000036H
	ja	SHORT $LN52@TryParseX
	cdqe
	movzx	eax, BYTE PTR $LN72@TryParseX[rdi+rax]
	mov	ecx, DWORD PTR $LN73@TryParseX[rdi+rax*4]
	add	rcx, rdi
	jmp	rcx
$LN49@TryParseX:

; 868  :     {
; 869  :     case L'0':
; 870  :     case L'1':
; 871  :     case L'2':
; 872  :     case L'3':
; 873  :     case L'4':
; 874  :     case L'5':
; 875  :     case L'6':
; 876  :     case L'7':
; 877  :     case L'8':
; 878  :     case L'9':
; 879  :         return (c - L'0');

	lea	rax, QWORD PTR [rdx-48]
	jmp	SHORT $LN46@TryParseX
$LN50@TryParseX:

; 880  :     case L'a':
; 881  :     case L'b':
; 882  :     case L'c':
; 883  :     case L'd':
; 884  :     case L'e':
; 885  :     case L'f':
; 886  :         return (c - L'a' + 10);

	lea	rax, QWORD PTR [rdx-87]
	jmp	SHORT $LN46@TryParseX
$LN51@TryParseX:

; 887  :     case L'A':
; 888  :     case L'B':
; 889  :     case L'C':
; 890  :     case L'D':
; 891  :     case L'E':
; 892  :     case L'F':
; 893  :         return (c - L'A' + 10);

	lea	rax, QWORD PTR [rdx-55]
	jmp	SHORT $LN46@TryParseX
$LN52@TryParseX:

; 894  :     default:
; 895  :         return ((_UINT32_T)-1);

	mov	rax, r12
$LN46@TryParseX:

; 906  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr);

	shl	r10, 4

; 907  :         ++in_ptr;

	add	r8, 2
	mov	eax, eax
	add	r10, rax

; 908  :         --count;

	sub	r9, 1
	jne	SHORT $LL43@TryParseX

; 904  :     while (count > 0)

	mov	r12, QWORD PTR [rsp+192]
$LN44@TryParseX:

; 955  :         *out_ptr-- = BuildLeading1WordFromHexString(in_ptr, r);

	mov	QWORD PTR [rbx], r10

; 956  :         in_ptr += r;

	lea	rdi, QWORD PTR [r14+r11*2]
	sub	rbx, 8

; 957  :         source_count -= r;

	sub	rsi, rbp
$LN57@TryParseX:

; 958  :     }
; 959  :     while (source_count > 0)

	test	rsi, rsi
	je	SHORT $LN37@TryParseX
	dec	rsi
	shr	rsi, 4
	inc	rsi
	npad	1
$LL36@TryParseX:

; 960  :     {
; 961  :         *out_ptr-- = Build1WordFromHexString(in_ptr);

	mov	rcx, rdi
	call	Build1WordFromHexString

; 962  :         in_ptr += word_digit_count;

	add	rdi, 32					; 00000020H
	mov	QWORD PTR [rbx], rax
	lea	rbx, QWORD PTR [rbx-8]
	sub	rsi, 1
	jne	SHORT $LL36@TryParseX
$LN37@TryParseX:

; 992  :     if ((result = CheckBlockLight((*o)->BLOCK, o_light_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR [r15]
	mov	rdx, QWORD PTR o_light_check_code$[rsp]
	mov	rcx, QWORD PTR [rcx+56]
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN76@TryParseX

; 993  :         return (result);
; 994  :     DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	rdx, QWORD PTR int_part_buf_words$[rsp]
	mov	rcx, r14
	call	DeallocateBlock

; 995  :     CommitNumber(*o);

	mov	rcx, QWORD PTR [r15]
	call	CommitNumber

; 996  :     return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN76@TryParseX
$LN5@TryParseX:

; 980  :     {
; 981  :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	rdx, QWORD PTR int_part_buf_words$[rsp]
	mov	rcx, r14
	call	DeallocateBlock

; 982  :         return (PMC_STATUS_PARSING_ERROR);

	mov	eax, 1
$LN76@TryParseX:
	mov	rbx, QWORD PTR [rsp+200]
$LN1@TryParseX:

; 997  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 208				; 000000d0H
	pop	r15
	pop	r14
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
$LN73@TryParseX:
	DD	$LN49@TryParseX
	DD	$LN51@TryParseX
	DD	$LN50@TryParseX
	DD	$LN52@TryParseX
$LN72@TryParseX:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
TryParseX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT BuildBinaryFromHexString
_TEXT	SEGMENT
source$ = 64
out_buf$ = 72
BuildBinaryFromHexString PROC				; COMDAT

; 947  : {

	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx
	mov	rdi, rcx

; 949  :     __UNIT_TYPE source_count = lstrlenW(source);

	call	QWORD PTR __imp_lstrlenW
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 194  :         return ((u + v - 1) / v);

	sub	rbx, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 949  :     __UNIT_TYPE source_count = lstrlenW(source);

	movsxd	r11, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 194  :         return ((u + v - 1) / v);

	lea	rsi, QWORD PTR [r11+15]
	shr	rsi, 4
	lea	rsi, QWORD PTR [rbx+rsi*8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 952  :     int r = source_count % word_digit_count;

	mov	rbx, r11
	and	ebx, 15

; 953  :     if (r > 0)

	jbe	$LN21@BuildBinar

; 901  :     __UNIT_TYPE x = Parse1DigitFromHexChar(*in_ptr);

	movzx	ecx, WORD PTR [rdi]
	mov	QWORD PTR [rsp+64], rbp
	call	Parse1DigitFromHexChar

; 903  :     --count;

	lea	r9, QWORD PTR [rbx-1]
	mov	r10d, eax

; 954  :     {
; 955  :         *out_ptr-- = BuildLeading1WordFromHexString(in_ptr, r);

	mov	ebp, ebx

; 902  :     ++in_ptr;

	lea	r8, QWORD PTR [rdi+2]

; 904  :     while (count > 0)

	test	r9, r9
	je	SHORT $LN10@BuildBinar
	mov	QWORD PTR [rsp+72], r14
	lea	r14, OFFSET FLAT:__ImageBase
	mov	QWORD PTR [rsp+80], r15
	mov	r15d, -1				; ffffffffH
	npad	7
$LL9@BuildBinar:

; 905  :     {
; 906  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr);

	movzx	edx, WORD PTR [r8]

; 867  :     switch (c)

	lea	eax, DWORD PTR [rdx-48]
	cmp	eax, 54					; 00000036H
	ja	SHORT $LN18@BuildBinar
	cdqe
	movzx	eax, BYTE PTR $LN28@BuildBinar[r14+rax]
	mov	ecx, DWORD PTR $LN29@BuildBinar[r14+rax*4]
	add	rcx, r14
	jmp	rcx
$LN15@BuildBinar:

; 868  :     {
; 869  :     case L'0':
; 870  :     case L'1':
; 871  :     case L'2':
; 872  :     case L'3':
; 873  :     case L'4':
; 874  :     case L'5':
; 875  :     case L'6':
; 876  :     case L'7':
; 877  :     case L'8':
; 878  :     case L'9':
; 879  :         return (c - L'0');

	lea	rax, QWORD PTR [rdx-48]
	jmp	SHORT $LN12@BuildBinar
$LN16@BuildBinar:

; 880  :     case L'a':
; 881  :     case L'b':
; 882  :     case L'c':
; 883  :     case L'd':
; 884  :     case L'e':
; 885  :     case L'f':
; 886  :         return (c - L'a' + 10);

	lea	rax, QWORD PTR [rdx-87]
	jmp	SHORT $LN12@BuildBinar
$LN17@BuildBinar:

; 887  :     case L'A':
; 888  :     case L'B':
; 889  :     case L'C':
; 890  :     case L'D':
; 891  :     case L'E':
; 892  :     case L'F':
; 893  :         return (c - L'A' + 10);

	lea	rax, QWORD PTR [rdx-55]
	jmp	SHORT $LN12@BuildBinar
$LN18@BuildBinar:

; 894  :     default:
; 895  :         return ((_UINT32_T)-1);

	mov	rax, r15
$LN12@BuildBinar:

; 906  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr);

	shl	r10, 4

; 907  :         ++in_ptr;

	add	r8, 2
	mov	eax, eax
	add	r10, rax

; 908  :         --count;

	sub	r9, 1
	jne	SHORT $LL9@BuildBinar

; 904  :     while (count > 0)

	mov	r15, QWORD PTR [rsp+80]
	mov	r14, QWORD PTR [rsp+72]
$LN10@BuildBinar:

; 954  :     {
; 955  :         *out_ptr-- = BuildLeading1WordFromHexString(in_ptr, r);

	mov	QWORD PTR [rsi], r10

; 956  :         in_ptr += r;

	lea	rdi, QWORD PTR [rdi+rbx*2]
	sub	rsi, 8

; 957  :         source_count -= r;

	sub	r11, rbp
	mov	rbp, QWORD PTR [rsp+64]
$LN21@BuildBinar:

; 958  :     }
; 959  :     while (source_count > 0)

	test	r11, r11
	je	SHORT $LN3@BuildBinar
	lea	rbx, QWORD PTR [r11-1]
	shr	rbx, 4
	inc	rbx
	npad	7
$LL2@BuildBinar:

; 960  :     {
; 961  :         *out_ptr-- = Build1WordFromHexString(in_ptr);

	mov	rcx, rdi
	call	Build1WordFromHexString

; 962  :         in_ptr += word_digit_count;

	add	rdi, 32					; 00000020H
	mov	QWORD PTR [rsi], rax
	lea	rsi, QWORD PTR [rsi-8]
	sub	rbx, 1
	jne	SHORT $LL2@BuildBinar
$LN3@BuildBinar:

; 963  :         source_count -= word_digit_count;
; 964  :     }
; 965  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
	npad	3
$LN29@BuildBinar:
	DD	$LN15@BuildBinar
	DD	$LN17@BuildBinar
	DD	$LN16@BuildBinar
	DD	$LN18@BuildBinar
$LN28@BuildBinar:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
BuildBinaryFromHexString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT Build1WordFromHexString
_TEXT	SEGMENT
tv264 = 32
in_ptr$ = 128
tv458 = 136
tv429 = 144
tv428 = 152
Build1WordFromHexString PROC				; COMDAT

; 914  : {

	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 56					; 00000038H
	mov	rdx, rcx

; 915  :     __UNIT_TYPE x = Parse1DigitFromHexChar(*in_ptr++);

	movzx	ecx, WORD PTR [rcx]

; 916  :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT64_T))
; 917  :     {
; 918  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);
; 919  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);
; 920  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);
; 921  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);
; 922  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);
; 923  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);
; 924  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);
; 925  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);
; 926  :     }
; 927  :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT32_T))
; 928  :     {
; 929  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);
; 930  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);
; 931  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	movzx	eax, WORD PTR [rdx+22]
	movzx	r10d, WORD PTR [rdx+2]
	movzx	r11d, WORD PTR [rdx+4]
	movzx	ebx, WORD PTR [rdx+6]
	movzx	edi, WORD PTR [rdx+8]
	movzx	esi, WORD PTR [rdx+10]
	movzx	ebp, WORD PTR [rdx+12]
	movzx	r14d, WORD PTR [rdx+14]
	movzx	r15d, WORD PTR [rdx+16]
	movzx	r12d, WORD PTR [rdx+18]
	movzx	r13d, WORD PTR [rdx+20]
	mov	WORD PTR tv458[rsp], ax

; 932  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	movzx	eax, WORD PTR [rdx+24]
	mov	WORD PTR tv429[rsp], ax

; 933  :     }
; 934  :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT16_T))
; 935  :     {
; 936  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	movzx	eax, WORD PTR [rdx+26]
	add	rdx, 28
	mov	QWORD PTR in_ptr$[rsp], rdx
	mov	WORD PTR tv428[rsp], ax
	call	Parse1DigitFromHexChar
	mov	eax, eax
	movzx	ecx, r10w

; 937  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);
; 938  :     }
; 939  :     if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))
; 940  :     {
; 941  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr++);

	shl	rax, 4
	mov	QWORD PTR tv264[rsp], rax
	call	Parse1DigitFromHexChar
	mov	r10d, eax
	movzx	ecx, r11w
	mov	rax, QWORD PTR tv264[rsp]
	add	rax, r10
	shl	rax, 4
	mov	QWORD PTR tv264[rsp], rax
	call	Parse1DigitFromHexChar
	mov	r11, QWORD PTR tv264[rsp]
	movzx	ecx, bx
	mov	r10d, eax
	add	r11, r10
	shl	r11, 4
	call	Parse1DigitFromHexChar
	mov	r10d, eax
	movzx	ecx, di
	add	r11, r10
	shl	r11, 4
	call	Parse1DigitFromHexChar
	mov	r10d, eax
	movzx	ecx, si
	add	r11, r10
	shl	r11, 4
	call	Parse1DigitFromHexChar
	mov	r10d, eax
	movzx	ecx, bp
	add	r11, r10
	shl	r11, 4
	call	Parse1DigitFromHexChar
	mov	r10d, eax
	movzx	ecx, r14w
	add	r11, r10
	shl	r11, 4
	call	Parse1DigitFromHexChar
	mov	r10d, eax
	movzx	ecx, r15w
	add	r11, r10
	shl	r11, 4
	call	Parse1DigitFromHexChar
	mov	r10d, eax
	movzx	ecx, r12w
	add	r11, r10
	shl	r11, 4
	call	Parse1DigitFromHexChar
	mov	r10d, eax
	movzx	ecx, r13w
	add	r11, r10
	shl	r11, 4
	call	Parse1DigitFromHexChar
	movzx	ecx, WORD PTR tv458[rsp]
	mov	r10d, eax
	add	r11, r10
	shl	r11, 4
	call	Parse1DigitFromHexChar
	mov	r10d, eax
	add	r11, r10
	movzx	ecx, WORD PTR tv429[rsp]
	shl	r11, 4
	call	Parse1DigitFromHexChar
	movzx	ecx, WORD PTR tv428[rsp]
	mov	r10d, eax
	add	r11, r10
	shl	r11, 4
	call	Parse1DigitFromHexChar
	mov	rbx, QWORD PTR in_ptr$[rsp]
	mov	r10d, eax
	add	r11, r10
	shl	r11, 4
	movzx	ecx, WORD PTR [rbx]
	call	Parse1DigitFromHexChar
	movzx	ecx, WORD PTR [rbx+2]
	mov	r10d, eax
	add	r11, r10
	shl	r11, 4
	call	Parse1DigitFromHexChar
	mov	eax, eax
	add	rax, r11

; 942  :     }
; 943  :     return (x);
; 944  : }

	add	rsp, 56					; 00000038H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
Build1WordFromHexString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT BuildLeading1WordFromHexString
_TEXT	SEGMENT
in_ptr$ = 48
count$ = 56
BuildLeading1WordFromHexString PROC			; COMDAT

; 900  : {

	push	rbx
	sub	rsp, 32					; 00000020H
	mov	r11, rcx
	mov	rbx, rdx

; 901  :     __UNIT_TYPE x = Parse1DigitFromHexChar(*in_ptr);

	movzx	ecx, WORD PTR [rcx]
	call	Parse1DigitFromHexChar

; 902  :     ++in_ptr;

	add	r11, 2
	mov	r10d, eax

; 903  :     --count;

	sub	rbx, 1

; 904  :     while (count > 0)

	je	SHORT $LN19@BuildLeadi
	lea	r8, OFFSET FLAT:__ImageBase
	mov	r9d, -1					; ffffffffH
	npad	2
$LL2@BuildLeadi:

; 905  :     {
; 906  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr);

	movzx	edx, WORD PTR [r11]

; 867  :     switch (c)

	lea	eax, DWORD PTR [rdx-48]
	cmp	eax, 54					; 00000036H
	ja	SHORT $LN11@BuildLeadi
	cdqe
	movzx	eax, BYTE PTR $LN17@BuildLeadi[r8+rax]
	mov	ecx, DWORD PTR $LN18@BuildLeadi[r8+rax*4]
	add	rcx, r8
	jmp	rcx
$LN8@BuildLeadi:

; 868  :     {
; 869  :     case L'0':
; 870  :     case L'1':
; 871  :     case L'2':
; 872  :     case L'3':
; 873  :     case L'4':
; 874  :     case L'5':
; 875  :     case L'6':
; 876  :     case L'7':
; 877  :     case L'8':
; 878  :     case L'9':
; 879  :         return (c - L'0');

	lea	rax, QWORD PTR [rdx-48]
	jmp	SHORT $LN5@BuildLeadi
$LN9@BuildLeadi:

; 880  :     case L'a':
; 881  :     case L'b':
; 882  :     case L'c':
; 883  :     case L'd':
; 884  :     case L'e':
; 885  :     case L'f':
; 886  :         return (c - L'a' + 10);

	lea	rax, QWORD PTR [rdx-87]
	jmp	SHORT $LN5@BuildLeadi
$LN10@BuildLeadi:

; 887  :     case L'A':
; 888  :     case L'B':
; 889  :     case L'C':
; 890  :     case L'D':
; 891  :     case L'E':
; 892  :     case L'F':
; 893  :         return (c - L'A' + 10);

	lea	rax, QWORD PTR [rdx-55]
	jmp	SHORT $LN5@BuildLeadi
$LN11@BuildLeadi:

; 894  :     default:
; 895  :         return ((_UINT32_T)-1);

	mov	rax, r9
$LN5@BuildLeadi:

; 905  :     {
; 906  :         x = x * 16 + Parse1DigitFromHexChar(*in_ptr);

	shl	r10, 4

; 907  :         ++in_ptr;

	add	r11, 2
	mov	ecx, eax
	add	r10, rcx

; 908  :         --count;

	sub	rbx, 1
	jne	SHORT $LL2@BuildLeadi
$LN19@BuildLeadi:

; 909  :     }
; 910  :     return (x);
; 911  : }

	mov	rax, r10
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
	npad	3
$LN18@BuildLeadi:
	DD	$LN8@BuildLeadi
	DD	$LN10@BuildLeadi
	DD	$LN9@BuildLeadi
	DD	$LN11@BuildLeadi
$LN17@BuildLeadi:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
BuildLeading1WordFromHexString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT Parse1DigitFromHexChar
_TEXT	SEGMENT
c$ = 8
Parse1DigitFromHexChar PROC				; COMDAT

; 867  :     switch (c)

	movzx	eax, cx
	lea	r8d, DWORD PTR [rax-48]
	cmp	r8d, 54					; 00000036H
	ja	SHORT $LN7@Parse1Digi
	lea	r9, OFFSET FLAT:__ImageBase
	movsxd	rcx, r8d
	movzx	ecx, BYTE PTR $LN9@Parse1Digi[r9+rcx]
	mov	edx, DWORD PTR $LN10@Parse1Digi[r9+rcx*4]
	add	rdx, r9
	jmp	rdx
$LN4@Parse1Digi:

; 868  :     {
; 869  :     case L'0':
; 870  :     case L'1':
; 871  :     case L'2':
; 872  :     case L'3':
; 873  :     case L'4':
; 874  :     case L'5':
; 875  :     case L'6':
; 876  :     case L'7':
; 877  :     case L'8':
; 878  :     case L'9':
; 879  :         return (c - L'0');

	mov	eax, r8d

; 896  :     }
; 897  : }

	ret	0
$LN5@Parse1Digi:

; 880  :     case L'a':
; 881  :     case L'b':
; 882  :     case L'c':
; 883  :     case L'd':
; 884  :     case L'e':
; 885  :     case L'f':
; 886  :         return (c - L'a' + 10);

	add	eax, -87				; ffffffffffffffa9H

; 896  :     }
; 897  : }

	ret	0
$LN6@Parse1Digi:

; 887  :     case L'A':
; 888  :     case L'B':
; 889  :     case L'C':
; 890  :     case L'D':
; 891  :     case L'E':
; 892  :     case L'F':
; 893  :         return (c - L'A' + 10);

	add	eax, -55				; ffffffffffffffc9H

; 896  :     }
; 897  : }

	ret	0
$LN7@Parse1Digi:

; 894  :     default:
; 895  :         return ((_UINT32_T)-1);

	mov	eax, -1					; ffffffffH

; 896  :     }
; 897  : }

	ret	0
	npad	1
$LN10@Parse1Digi:
	DD	$LN4@Parse1Digi
	DD	$LN6@Parse1Digi
	DD	$LN5@Parse1Digi
	DD	$LN7@Parse1Digi
$LN9@Parse1Digi:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
Parse1DigitFromHexChar ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT TryParseDN
_TEXT	SEGMENT
int_part_buf_words$ = 48
frac_part_buf_words$ = 56
work_buf_code$1 = 64
sign$ = 64
bin_buf_words$ = 72
int_part_buf_code$ = 80
frac_part_buf_code$ = 88
bin_buf_code$ = 96
work_buf_words$2 = 104
no_light_check_code$ = 112
source$ = 176
number_styles$ = 184
format_option$ = 192
o$ = 200
TryParseDN PROC						; COMDAT

; 722  : {

	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	push	rbp
	push	rdi
	push	r12
	push	r14
	push	r15
	mov	rbp, rsp
	sub	rsp, 128				; 00000080H
	mov	r12, r9
	mov	r14, r8
	mov	r15d, edx
	mov	rbx, rcx

; 723  :     PMC_STATUS_CODE result;
; 724  : #ifdef _M_IX86
; 725  :     int word_digit_count = 9;
; 726  : #elif defined(_M_IX64)
; 727  :     int word_digit_count = 19;
; 728  : #else
; 729  : #error unknown platform
; 730  : #endif
; 731  :     __UNIT_TYPE source_len = lstrlenW(source);

	call	QWORD PTR __imp_lstrlenW
	movsxd	rsi, eax

; 732  : 
; 733  :     __UNIT_TYPE int_part_buf_code;
; 734  :     __UNIT_TYPE int_part_buf_words;
; 735  :     wchar_t* int_part_buf = (wchar_t*)AllocateBlock((source_len + 1) * sizeof(wchar_t) * 8, &int_part_buf_words, &int_part_buf_code);

	lea	r8, QWORD PTR int_part_buf_code$[rbp-128]
	inc	rsi
	lea	rdx, QWORD PTR int_part_buf_words$[rbp-128]
	shl	rsi, 4
	mov	rcx, rsi
	call	AllocateBlock
	mov	rdi, rax

; 736  :     if (int_part_buf == NULL)

	test	rax, rax
	je	SHORT $LN80@TryParseDN

; 737  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 738  : 
; 739  :     __UNIT_TYPE frac_part_buf_code;
; 740  :     __UNIT_TYPE frac_part_buf_words;
; 741  :     wchar_t* frac_part_buf = (wchar_t*)AllocateBlock((source_len + 1) * sizeof(wchar_t) * 8, &frac_part_buf_words, &frac_part_buf_code);

	lea	r8, QWORD PTR frac_part_buf_code$[rbp-128]
	mov	rcx, rsi
	lea	rdx, QWORD PTR frac_part_buf_words$[rbp-128]
	call	AllocateBlock
	mov	rsi, rax

; 742  :     if (frac_part_buf == NULL)

	test	rax, rax
	jne	SHORT $LN10@TryParseDN

; 743  :     {
; 744  :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	rdx, QWORD PTR int_part_buf_words$[rbp-128]
	mov	rcx, rdi
	call	DeallocateBlock
$LN80@TryParseDN:

; 862  : }

	mov	eax, -5
	jmp	$LN1@TryParseDN
$LN10@TryParseDN:

; 745  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 746  :     }
; 747  :     int sign;
; 748  :     int result_parsing = ParseAsDecimalNumberString(source, number_styles, format_option, &sign, int_part_buf, frac_part_buf);

	mov	QWORD PTR [rsp+40], rsi
	lea	r9, QWORD PTR sign$[rbp-128]
	mov	r8, r14
	mov	QWORD PTR [rsp+32], rdi
	mov	edx, r15d
	mov	rcx, rbx
	call	ParseAsDecimalNumberString

; 749  :     if ((result = CheckBlockLight((__UNIT_TYPE*)int_part_buf, int_part_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR int_part_buf_code$[rbp-128]
	mov	rcx, rdi
	mov	ebx, eax
	call	CheckBlockLight
	test	eax, eax
	jne	$LN1@TryParseDN

; 750  :         return (result);
; 751  :     if ((result = CheckBlockLight((__UNIT_TYPE*)frac_part_buf, frac_part_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR frac_part_buf_code$[rbp-128]
	mov	rcx, rsi
	call	CheckBlockLight
	test	eax, eax
	jne	$LN1@TryParseDN

; 752  :         return (result);
; 753  :     if (!result_parsing)

	test	ebx, ebx
	je	SHORT $LN81@TryParseDN

; 754  :     {
; 755  :         DeallocateBlock((__UNIT_TYPE*)frac_part_buf, frac_part_buf_words);
; 756  :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);
; 757  :         return (PMC_STATUS_PARSING_ERROR);
; 758  :     }
; 759  :     // 整数部と小数部がともに空ならばエラーとする
; 760  :     if (int_part_buf[0] == L'\0' && frac_part_buf[0] == L'\0')

	movzx	eax, WORD PTR [rdi]
	test	ax, ax
	jne	SHORT $LN67@TryParseDN
	cmp	WORD PTR [rsi], ax
	jne	SHORT $LN54@TryParseDN
$LN81@TryParseDN:

; 862  : }

	mov	rdx, QWORD PTR frac_part_buf_words$[rbp-128]
	mov	rcx, rsi
	call	DeallocateBlock
	mov	rdx, QWORD PTR int_part_buf_words$[rbp-128]
	mov	rcx, rdi
	call	DeallocateBlock
	mov	eax, 1
	jmp	$LN1@TryParseDN
$LN67@TryParseDN:

; 761  :     {
; 762  :         DeallocateBlock((__UNIT_TYPE*)frac_part_buf, frac_part_buf_words);
; 763  :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);
; 764  :         return (PMC_STATUS_PARSING_ERROR);
; 765  :     }
; 766  : 
; 767  :     if (int_part_buf[0] == L'0')

	cmp	ax, 48					; 00000030H
	jne	SHORT $LN54@TryParseDN

; 768  :     {
; 769  :         // 整数部の先行する 0 を削除する
; 770  :         wchar_t* s_ptr = int_part_buf;

	mov	rcx, rdi

; 771  :         wchar_t* d_ptr = int_part_buf;

	mov	rdx, rdi
	npad	13
$LL2@TryParseDN:

; 772  :         while (*s_ptr == L'0')

	movzx	eax, WORD PTR [rcx+2]

; 773  :             ++s_ptr;

	add	rcx, 2
	cmp	ax, 48					; 00000030H
	je	SHORT $LL2@TryParseDN

; 774  :         for (;;)
; 775  :         {
; 776  :             *d_ptr = *s_ptr;

	mov	WORD PTR [rdi], ax

; 777  :             if (*s_ptr == L'\0')

	cmp	WORD PTR [rcx], 0
	je	SHORT $LN54@TryParseDN
	npad	9
$LL4@TryParseDN:

; 774  :         for (;;)
; 775  :         {
; 776  :             *d_ptr = *s_ptr;

	movzx	eax, WORD PTR [rcx+2]

; 778  :                 break;
; 779  :             ++s_ptr;

	lea	rcx, QWORD PTR [rcx+2]

; 780  :             ++d_ptr;

	lea	rdx, QWORD PTR [rdx+2]
	mov	WORD PTR [rdx], ax
	cmp	WORD PTR [rcx], 0
	jne	SHORT $LL4@TryParseDN
$LN54@TryParseDN:

; 781  :         }
; 782  :     }
; 783  : 
; 784  :     // 小数部の末尾の 0 を削除する
; 785  :     wchar_t* frac_ptr = frac_part_buf + lstrlenW(frac_part_buf);

	mov	rcx, rsi
	call	QWORD PTR __imp_lstrlenW
	movsxd	rcx, eax
	lea	rax, QWORD PTR [rsi+rcx*2]

; 786  :     while (frac_ptr > frac_part_buf && frac_ptr[-1] == L'0')

	cmp	rax, rsi
	jbe	SHORT $LN78@TryParseDN
	npad	6
$LL7@TryParseDN:
	cmp	WORD PTR [rax-2], 48			; 00000030H
	lea	rcx, QWORD PTR [rax-2]
	jne	SHORT $LN78@TryParseDN

; 787  :         --frac_ptr;

	mov	rax, rcx
	cmp	rcx, rsi
	ja	SHORT $LL7@TryParseDN
$LN78@TryParseDN:

; 788  :     *frac_ptr = L'\0';

	xor	r14d, r14d
	mov	WORD PTR [rax], r14w

; 789  : 
; 790  :     // 小数部が 0 ではない場合、エラーとする
; 791  :     if (frac_part_buf[0] != L'\0')

	cmp	WORD PTR [rsi], r14w
	jne	$LN81@TryParseDN

; 792  :     {
; 793  :         DeallocateBlock((__UNIT_TYPE*)frac_part_buf, frac_part_buf_words);
; 794  :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);
; 795  :         return (PMC_STATUS_PARSING_ERROR);
; 796  :     }
; 797  : 
; 798  :     if (sign < 0)

	movzx	eax, WORD PTR [rdi]
	cmp	DWORD PTR sign$[rbp-128], r14d
	jge	SHORT $LN68@TryParseDN

; 799  :     {
; 800  :         if (int_part_buf[0] == L'\0')

	test	ax, ax
	je	SHORT $LN76@TryParseDN

; 801  :         {
; 802  :             // - 符号が与えられていてかつ整数部が 0 であるなら符号を修正する
; 803  :             sign = 0;
; 804  :         }
; 805  :         else
; 806  :         {
; 807  :             // - 符号が与えられていてかつ整数部が 0 ではないなら、エラーとする
; 808  :             DeallocateBlock((__UNIT_TYPE*)frac_part_buf, frac_part_buf_words);

	mov	rdx, QWORD PTR frac_part_buf_words$[rbp-128]
	mov	rcx, rsi
	call	DeallocateBlock

; 809  :             DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	rdx, QWORD PTR int_part_buf_words$[rbp-128]
	mov	rcx, rdi
	call	DeallocateBlock

; 810  :             return (PMC_STATUS_OVERFLOW);

	lea	eax, QWORD PTR [r14-2]
	jmp	$LN1@TryParseDN
$LN68@TryParseDN:

; 811  :         }
; 812  :     }
; 813  : 
; 814  :     // 整数部が空である場合、1桁の 0 を設定する
; 815  :     if (int_part_buf[0] == L'\0')

	test	ax, ax
	jne	SHORT $LN21@TryParseDN
$LN76@TryParseDN:

; 816  :     {
; 817  :         int_part_buf[0] = L'0';

	mov	DWORD PTR [rdi], 48			; 00000030H
$LN21@TryParseDN:

; 818  :         int_part_buf[1] = L'\0';
; 819  :     }
; 820  : 
; 821  :     // 小数部は捨てる
; 822  :     DeallocateBlock((__UNIT_TYPE*)frac_part_buf, frac_part_buf_words);

	mov	rdx, QWORD PTR frac_part_buf_words$[rbp-128]
	mov	rcx, rsi
	mov	QWORD PTR [rsp+176], r13
	call	DeallocateBlock

; 826  :     __UNIT_TYPE* bin_buf = AllocateBlock(_DIVIDE_CEILING_SIZE(lstrlenW(int_part_buf), word_digit_count) * __UNIT_TYPE_BIT_COUNT, &bin_buf_words, &bin_buf_code);

	mov	rcx, rdi
	call	QWORD PTR __imp_lstrlenW
	movsxd	rcx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 199  :         return ((u + v - 1) / v);

	mov	r13, -2912643801112034465		; d79435e50d79435fH
	add	rcx, 18
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 826  :     __UNIT_TYPE* bin_buf = AllocateBlock(_DIVIDE_CEILING_SIZE(lstrlenW(int_part_buf), word_digit_count) * __UNIT_TYPE_BIT_COUNT, &bin_buf_words, &bin_buf_code);

	lea	r8, QWORD PTR bin_buf_code$[rbp-128]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 199  :         return ((u + v - 1) / v);

	mov	rax, r13
	mul	rcx
	mov	rcx, rdx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 826  :     __UNIT_TYPE* bin_buf = AllocateBlock(_DIVIDE_CEILING_SIZE(lstrlenW(int_part_buf), word_digit_count) * __UNIT_TYPE_BIT_COUNT, &bin_buf_words, &bin_buf_code);

	lea	rdx, QWORD PTR bin_buf_words$[rbp-128]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 199  :         return ((u + v - 1) / v);

	shr	rcx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 826  :     __UNIT_TYPE* bin_buf = AllocateBlock(_DIVIDE_CEILING_SIZE(lstrlenW(int_part_buf), word_digit_count) * __UNIT_TYPE_BIT_COUNT, &bin_buf_words, &bin_buf_code);

	shl	rcx, 6
	call	AllocateBlock
	mov	r15, rax

; 827  :     if (bin_buf == NULL)

	mov	rcx, rdi
	test	rax, rax
	jne	SHORT $LN22@TryParseDN

; 828  :     {
; 829  :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	rdx, QWORD PTR int_part_buf_words$[rbp-128]
	call	DeallocateBlock

; 830  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	lea	eax, QWORD PTR [r15-5]
	jmp	$LN79@TryParseDN
$LN22@TryParseDN:

; 358  :     wchar_t* in_ptr = source;

	mov	rbx, rdi

; 359  :     __UNIT_TYPE* out_ptr = out_buf;

	mov	rsi, r15

; 360  :     __UNIT_TYPE source_count = lstrlenW(source);

	call	QWORD PTR __imp_lstrlenW
	movsxd	r8, eax

; 361  :     int r = source_count % word_digit_count;

	mov	rax, r13
	mul	r8
	mov	rcx, r8
	shr	rdx, 4
	imul	rax, rdx, 19
	sub	rcx, rax

; 362  :     if (r > 0)

	test	ecx, ecx
	jle	SHORT $LN77@TryParseDN

; 363  :     {
; 364  :         *out_ptr++ = BuildLeading1WordFromDecimalString(in_ptr, r);

	movsxd	r9, ecx
	mov	rdx, rdi
	mov	rsi, r9

; 303  :     __UNIT_TYPE x = 0;

	mov	rax, r14
	npad	6
$LL37@TryParseDN:

; 304  :     while (count > 0)
; 305  :     {
; 306  :         x = x * 10 + (*in_ptr++ - L'0');

	lea	rcx, QWORD PTR [rax+rax*4]
	movzx	eax, WORD PTR [rdx]
	lea	rdx, QWORD PTR [rdx+2]
	lea	rax, QWORD PTR [rax+rcx*2]
	add	rax, -48				; ffffffffffffffd0H

; 307  :         --count;

	sub	rsi, 1
	jne	SHORT $LL37@TryParseDN

; 364  :         *out_ptr++ = BuildLeading1WordFromDecimalString(in_ptr, r);

	mov	QWORD PTR [r15], rax
	lea	rsi, QWORD PTR [r15+8]

; 365  :         in_ptr += r;

	lea	rbx, QWORD PTR [rdi+r9*2]

; 366  :         source_count -= r;

	sub	r8, r9
$LN77@TryParseDN:

; 367  :     }
; 368  :     while (source_count > 0)

	test	r8, r8
	je	SHORT $LN33@TryParseDN
	lea	rcx, QWORD PTR [r8-1]
	mov	rax, r13
	mul	rcx
	mov	r14, rdx
	shr	r14, 4
	inc	r14
$LL32@TryParseDN:

; 369  :     {
; 370  :         *out_ptr++ = Build1WordFromDecimalString(in_ptr);

	mov	rcx, rbx
	call	Build1WordFromDecimalString
	mov	QWORD PTR [rsi], rax

; 371  :         in_ptr += word_digit_count;

	add	rbx, 38					; 00000026H
	add	rsi, 8
	sub	r14, 1
	jne	SHORT $LL32@TryParseDN
$LN33@TryParseDN:

; 831  :     }
; 832  :     __UNIT_TYPE bin_buf_count;
; 833  :     BuildBinaryFromDecimalString(int_part_buf, bin_buf, &bin_buf_count);
; 834  :     if ((result = CheckBlockLight(bin_buf, bin_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR bin_buf_code$[rbp-128]

; 374  :     *out_buf_count = out_ptr - out_buf;

	sub	rsi, r15

; 831  :     }
; 832  :     __UNIT_TYPE bin_buf_count;
; 833  :     BuildBinaryFromDecimalString(int_part_buf, bin_buf, &bin_buf_count);
; 834  :     if ((result = CheckBlockLight(bin_buf, bin_buf_code)) != PMC_STATUS_OK)

	mov	rcx, r15

; 374  :     *out_buf_count = out_ptr - out_buf;

	sar	rsi, 3

; 831  :     }
; 832  :     __UNIT_TYPE bin_buf_count;
; 833  :     BuildBinaryFromDecimalString(int_part_buf, bin_buf, &bin_buf_count);
; 834  :     if ((result = CheckBlockLight(bin_buf, bin_buf_code)) != PMC_STATUS_OK)

	call	CheckBlockLight
	test	eax, eax
	jne	$LN79@TryParseDN

; 835  :         return (result);
; 836  :     DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	rdx, QWORD PTR int_part_buf_words$[rbp-128]
	mov	rcx, rdi
	call	DeallocateBlock

; 837  : 
; 838  :     __UNIT_TYPE o_bit_count = bin_buf_count * __UNIT_TYPE_BIT_COUNT;

	mov	rdi, rsi

; 839  :     __UNIT_TYPE no_light_check_code;
; 840  :     if ((result = AllocateNumber(o, o_bit_count, &no_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR no_light_check_code$[rbp-128]
	shl	rdi, 6
	mov	rcx, r12
	mov	rdx, rdi
	call	AllocateNumber
	mov	ebx, eax
	test	eax, eax
	je	SHORT $LN24@TryParseDN

; 841  :     {
; 842  :         DeallocateBlock(bin_buf, bin_buf_words);

	mov	rdx, QWORD PTR bin_buf_words$[rbp-128]
	mov	rcx, r15
	call	DeallocateBlock

; 843  :         return (result);

	mov	eax, ebx
	jmp	$LN79@TryParseDN
$LN24@TryParseDN:

; 844  :     }
; 845  : 
; 846  :     if ((result = ConvertCardinalNumber(bin_buf, bin_buf_count, (*o)->BLOCK)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR [r12]

; 698  :     __UNIT_TYPE* work_buf = AllocateBlock(__UNIT_TYPE_BIT_COUNT * (in_buf_count + 1), &work_buf_words, &work_buf_code);

	lea	rcx, QWORD PTR [rdi+64]
	lea	r8, QWORD PTR work_buf_code$1[rbp-128]
	lea	rdx, QWORD PTR work_buf_words$2[rbp-128]

; 844  :     }
; 845  : 
; 846  :     if ((result = ConvertCardinalNumber(bin_buf, bin_buf_count, (*o)->BLOCK)) != PMC_STATUS_OK)

	mov	r13, QWORD PTR [rax+56]

; 698  :     __UNIT_TYPE* work_buf = AllocateBlock(__UNIT_TYPE_BIT_COUNT * (in_buf_count + 1), &work_buf_words, &work_buf_code);

	call	AllocateBlock
	mov	r14, rax

; 699  :     if (work_buf == NULL)

	test	rax, rax
	jne	SHORT $LN43@TryParseDN

; 700  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	lea	edi, QWORD PTR [rax-5]
	jmp	SHORT $LN40@TryParseDN
$LN43@TryParseDN:

; 701  : 
; 702  :     __UNIT_TYPE work_buf_count = 1;
; 703  :     work_buf[0] = in_buf[0];

	mov	rax, QWORD PTR [r15]

; 704  :     ++in_buf;

	lea	rdi, QWORD PTR [r15+8]
	mov	ebx, 1
	mov	QWORD PTR [r14], rax

; 705  :     --in_buf_count;

	sub	rsi, rbx

; 706  : 
; 707  :     while (in_buf_count > 0)

	je	SHORT $LN42@TryParseDN
	npad	7
$LL41@TryParseDN:

; 708  :     {
; 709  :         __UNIT_TYPE* w_tail = (*fp_MultiplyAndAdd)(work_buf, work_buf_count, *in_buf);

	mov	r8, QWORD PTR [rdi]
	mov	rdx, rbx
	mov	rcx, r14
	call	QWORD PTR fp_MultiplyAndAdd
	mov	rbx, rax

; 710  :         work_buf_count = w_tail - work_buf;
; 711  :         ++in_buf;

	lea	rdi, QWORD PTR [rdi+8]
	sub	rbx, r14
	sar	rbx, 3

; 712  :         --in_buf_count;

	sub	rsi, 1
	jne	SHORT $LL41@TryParseDN
$LN42@TryParseDN:

; 713  :     }
; 714  :     if ((result = CheckBlockLight(work_buf, work_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR work_buf_code$1[rbp-128]
	mov	rcx, r14
	call	CheckBlockLight
	mov	edi, eax
	test	eax, eax
	jne	SHORT $LN40@TryParseDN

; 717  :     DeallocateBlock(work_buf, work_buf_words);

	mov	rdx, QWORD PTR work_buf_words$2[rbp-128]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 70   :         __movsq(d, s, count);

	mov	rdi, r13
	mov	rsi, r14
	mov	rcx, rbx
	rep movsq
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 717  :     DeallocateBlock(work_buf, work_buf_words);

	mov	rcx, r14
	call	DeallocateBlock

; 718  :     return (PMC_STATUS_OK);

	xor	edi, edi
$LN40@TryParseDN:

; 844  :     }
; 845  : 
; 846  :     if ((result = ConvertCardinalNumber(bin_buf, bin_buf_count, (*o)->BLOCK)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR [r12]
	test	edi, edi
	je	SHORT $LN25@TryParseDN

; 847  :     {
; 848  :         DeallocateNumber(*o);

	call	DeallocateNumber

; 849  :         DeallocateBlock(bin_buf, bin_buf_words);

	mov	rdx, QWORD PTR bin_buf_words$[rbp-128]
	mov	rcx, r15
	call	DeallocateBlock

; 850  :         return (result);

	mov	eax, edi
	jmp	SHORT $LN79@TryParseDN
$LN25@TryParseDN:

; 851  :     }
; 852  :     if ((result = CheckBlockLight((*o)->BLOCK, no_light_check_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR no_light_check_code$[rbp-128]
	mov	rcx, QWORD PTR [rcx+56]
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN79@TryParseDN

; 853  :         return (result);
; 854  :     DeallocateBlock(bin_buf, bin_buf_words);

	mov	rdx, QWORD PTR bin_buf_words$[rbp-128]
	mov	rcx, r15
	call	DeallocateBlock

; 855  :     CommitNumber(*o);

	mov	rcx, QWORD PTR [r12]
	call	CommitNumber

; 856  :     if ((*o)->IS_ZERO)

	mov	rcx, QWORD PTR [r12]
	test	BYTE PTR [rcx+40], 2
	je	SHORT $LN27@TryParseDN

; 857  :     {
; 858  :         DeallocateNumber(*o);

	call	DeallocateNumber

; 859  :         *o = &number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR [r12], rax
$LN27@TryParseDN:

; 860  :     }
; 861  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN79@TryParseDN:
	mov	r13, QWORD PTR [rsp+176]
$LN1@TryParseDN:

; 862  : }

	lea	r11, QWORD PTR [rsp+128]
	mov	rbx, QWORD PTR [r11+56]
	mov	rsi, QWORD PTR [r11+64]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r12
	pop	rdi
	pop	rbp
	ret	0
TryParseDN ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT ConvertCardinalNumber
_TEXT	SEGMENT
in_buf$ = 64
work_buf_code$ = 72
in_buf_count$ = 72
out_buf$ = 80
work_buf_words$ = 88
ConvertCardinalNumber PROC				; COMDAT

; 694  : {

	mov	QWORD PTR [rsp+24], rbp
	push	rsi
	push	rdi
	push	r14
	sub	rsp, 32					; 00000020H
	mov	rdi, rcx
	mov	rbp, r8

; 695  :     PMC_STATUS_CODE result;
; 696  :     __UNIT_TYPE work_buf_code;
; 697  :     __UNIT_TYPE work_buf_words;
; 698  :     __UNIT_TYPE* work_buf = AllocateBlock(__UNIT_TYPE_BIT_COUNT * (in_buf_count + 1), &work_buf_words, &work_buf_code);

	lea	rcx, QWORD PTR [rdx+1]
	mov	rsi, rdx
	shl	rcx, 6
	lea	r8, QWORD PTR work_buf_code$[rsp]
	lea	rdx, QWORD PTR work_buf_words$[rsp]
	call	AllocateBlock
	mov	r14, rax

; 699  :     if (work_buf == NULL)

	test	rax, rax
	jne	SHORT $LN4@ConvertCar

; 700  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	lea	eax, QWORD PTR [r14-5]

; 719  : }

	mov	rbp, QWORD PTR [rsp+80]
	add	rsp, 32					; 00000020H
	pop	r14
	pop	rdi
	pop	rsi
	ret	0
$LN4@ConvertCar:

; 701  : 
; 702  :     __UNIT_TYPE work_buf_count = 1;
; 703  :     work_buf[0] = in_buf[0];

	mov	rax, QWORD PTR [rdi]

; 704  :     ++in_buf;

	add	rdi, 8
	mov	QWORD PTR [rsp+64], rbx
	mov	ebx, 1
	mov	QWORD PTR [r14], rax
	sub	rsi, rbx

; 705  :     --in_buf_count;
; 706  : 
; 707  :     while (in_buf_count > 0)

	je	SHORT $LN3@ConvertCar
$LL2@ConvertCar:

; 708  :     {
; 709  :         __UNIT_TYPE* w_tail = (*fp_MultiplyAndAdd)(work_buf, work_buf_count, *in_buf);

	mov	r8, QWORD PTR [rdi]
	mov	rdx, rbx
	mov	rcx, r14
	call	QWORD PTR fp_MultiplyAndAdd
	mov	rbx, rax

; 710  :         work_buf_count = w_tail - work_buf;
; 711  :         ++in_buf;

	lea	rdi, QWORD PTR [rdi+8]
	sub	rbx, r14
	sar	rbx, 3

; 712  :         --in_buf_count;

	sub	rsi, 1
	jne	SHORT $LL2@ConvertCar
$LN3@ConvertCar:

; 713  :     }
; 714  :     if ((result = CheckBlockLight(work_buf, work_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR work_buf_code$[rsp]
	mov	rcx, r14
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN13@ConvertCar

; 717  :     DeallocateBlock(work_buf, work_buf_words);

	mov	rdx, QWORD PTR work_buf_words$[rsp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 70   :         __movsq(d, s, count);

	mov	rdi, rbp
	mov	rsi, r14
	mov	rcx, rbx
	rep movsq
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 717  :     DeallocateBlock(work_buf, work_buf_words);

	mov	rcx, r14
	call	DeallocateBlock

; 718  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN13@ConvertCar:

; 719  : }

	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+80]
	add	rsp, 32					; 00000020H
	pop	r14
	pop	rdi
	pop	rsi
	ret	0
ConvertCardinalNumber ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT MultiplyAndAdd_using_ADCX_MULX
_TEXT	SEGMENT
k$ = 0
k$ = 8
k$ = 16
k$ = 24
k$ = 32
k$ = 40
k$ = 48
k$ = 56
k$ = 64
k$ = 72
k$ = 80
k$ = 88
k$ = 96
k$ = 104
k$ = 112
k$ = 120
k$ = 128
k$ = 136
k$ = 144
k$ = 152
k$ = 160
k$ = 168
k$ = 176
k$ = 184
k$ = 192
k$ = 200
k$ = 208
k$ = 216
k$ = 224
k$ = 232
k$ = 240
k$ = 248
k$ = 256
k$ = 264
k$ = 272
k$ = 280
k$ = 288
k$ = 296
k$ = 304
k$ = 312
k$ = 320
k$ = 328
k$ = 336
k$ = 344
k$ = 352
k$ = 360
k$ = 368
k$ = 376
k$ = 384
k$ = 392
k$ = 400
k$ = 408
k$ = 416
k$ = 424
k$ = 432
k$ = 440
k$ = 448
k$ = 456
k$ = 464
t_hi$1 = 472
t_hi$2 = 480
t_hi$3 = 488
t_hi$4 = 496
t_hi$5 = 504
t_hi$6 = 512
t_hi$7 = 520
t_hi$8 = 528
t_hi$9 = 536
t_hi$10 = 544
t_hi$11 = 552
t_hi$12 = 560
t_hi$13 = 568
t_hi$14 = 576
t_hi$15 = 584
t_hi$16 = 592
t_hi$17 = 600
t_hi$18 = 608
t_hi$19 = 616
t_hi$20 = 624
t_hi$21 = 632
t_hi$22 = 640
t_hi$23 = 648
t_hi$24 = 656
t_hi$25 = 664
t_hi$26 = 672
t_hi$27 = 680
t_hi$28 = 688
t_hi$29 = 696
t_hi$30 = 704
t_hi$31 = 712
t_hi$32 = 720
t_hi$33 = 728
t_hi$34 = 736
t_hi$35 = 744
t_hi$36 = 752
t_hi$37 = 760
t_hi$38 = 768
t_hi$39 = 776
t_hi$40 = 784
t_hi$41 = 792
t_hi$42 = 800
t_hi$43 = 808
t_hi$44 = 816
t_hi$45 = 824
t_hi$46 = 832
t_hi$47 = 840
t_hi$48 = 848
t_hi$49 = 856
t_hi$50 = 864
t_hi$51 = 872
t_hi$52 = 880
t_hi$53 = 888
t_hi$54 = 896
t_hi$55 = 904
t_hi$56 = 912
t_hi$57 = 920
t_hi$58 = 928
t_hi$59 = 936
t_hi$60 = 944
t_hi$61 = 952
t_hi$62 = 960
t_hi$63 = 968
k$ = 1008
u_buf$ = 1008
k$ = 1016
u_count$ = 1016
k$ = 1024
x$ = 1024
k$ = 1032
MultiplyAndAdd_using_ADCX_MULX PROC			; COMDAT

; 551  : {

	push	rbp
	push	rbx
	push	rdi
	lea	rbp, QWORD PTR [rsp-720]
	sub	rsp, 976				; 000003d0H

; 552  :     __UNIT_TYPE k = x;
; 553  :     __UNIT_TYPE count = u_count >> 5;

	mov	rbx, rdx

; 554  :     while (count > 0)

	xor	edi, edi
	shr	rbx, 5
	mov	r11, rdx
	mov	r10, r8
	mov	rdx, -8446744073709551616		; 8ac7230489e80000H
	test	rbx, rbx
	je	$LN3@MultiplyAn
$LL2@MultiplyAn:

; 555  :     {
; 556  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

	mov	rax, QWORD PTR [rcx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r10

; 340  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$1[rbp-256], r9

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 557  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

	mov	rax, QWORD PTR [rcx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r9
	mov	QWORD PTR k$[rbp-256], r9
	mov	QWORD PTR [rcx+8], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 558  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[2], &u_buf[2]);

	mov	rax, QWORD PTR [rcx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax
	mov	QWORD PTR t_hi$2[rbp-256], r10

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	add	r8, r10
	mov	QWORD PTR k$[rbp-256], r10
	mov	QWORD PTR [rcx+16], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 559  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[3], &u_buf[3]);

	mov	rax, QWORD PTR [rcx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax
	mov	QWORD PTR t_hi$3[rbp-256], r9

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	add	r8, r9
	mov	QWORD PTR k$[rbp-256], r9
	mov	QWORD PTR [rcx+24], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 560  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[4], &u_buf[4]);

	mov	rax, QWORD PTR [rcx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax
	mov	QWORD PTR t_hi$4[rbp-256], r10

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	add	r8, r10
	mov	QWORD PTR k$[rbp-256], r10
	mov	QWORD PTR [rcx+32], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 561  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[5], &u_buf[5]);

	mov	rax, QWORD PTR [rcx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax
	mov	QWORD PTR t_hi$5[rbp-256], r9

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	add	r8, r9
	mov	QWORD PTR k$[rsp], r9
	mov	QWORD PTR [rcx+40], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 562  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[6], &u_buf[6]);

	mov	rax, QWORD PTR [rcx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax
	mov	QWORD PTR t_hi$6[rbp-256], r10

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	add	r8, r10
	mov	QWORD PTR k$[rsp], r10
	mov	QWORD PTR [rcx+48], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 563  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[7], &u_buf[7]);

	mov	rax, QWORD PTR [rcx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax
	mov	QWORD PTR t_hi$7[rbp-256], r9

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	add	r8, r9
	mov	QWORD PTR k$[rsp], r9
	mov	QWORD PTR [rcx+56], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 564  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[8], &u_buf[8]);

	mov	rax, QWORD PTR [rcx+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax
	mov	QWORD PTR t_hi$8[rbp-256], r10

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	add	r8, r10
	mov	QWORD PTR k$[rsp], r10
	mov	QWORD PTR [rcx+64], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 565  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[9], &u_buf[9]);

	mov	rax, QWORD PTR [rcx+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax
	mov	QWORD PTR t_hi$9[rbp-256], r9

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	add	r8, r9
	mov	QWORD PTR k$[rsp], r9
	mov	QWORD PTR [rcx+72], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 566  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[10], &u_buf[10]);

	mov	rax, QWORD PTR [rcx+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax
	mov	QWORD PTR t_hi$10[rbp-256], r10

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	add	r8, r10
	mov	QWORD PTR k$[rsp], r10
	mov	QWORD PTR [rcx+80], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 567  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[11], &u_buf[11]);

	mov	rax, QWORD PTR [rcx+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax
	mov	QWORD PTR t_hi$11[rbp-256], r9

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi

; 340  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$12[rbp-256], r10

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r9
	mov	QWORD PTR k$[rsp], r9
	mov	QWORD PTR [rcx+88], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 568  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[12], &u_buf[12]);

	mov	rax, QWORD PTR [rcx+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r10

; 340  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$13[rbp-256], r9

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+96], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 569  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[13], &u_buf[13]);

	mov	rax, QWORD PTR [rcx+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	mov	QWORD PTR k$[rsp], r10

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r9
	mov	QWORD PTR k$[rsp], r9
	mov	QWORD PTR [rcx+104], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 570  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[14], &u_buf[14]);

	mov	rax, QWORD PTR [rcx+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax
	mov	QWORD PTR t_hi$14[rbp-256], r10

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	add	r8, r10

; 340  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$15[rbp-256], r9

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+112], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 571  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[15], &u_buf[15]);

	mov	rax, QWORD PTR [rcx+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	mov	QWORD PTR k$[rsp], r10

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r9
	mov	QWORD PTR k$[rsp], r9
	mov	QWORD PTR [rcx+120], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 572  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[16], &u_buf[16]);

	mov	rax, QWORD PTR [rcx+128]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax
	mov	QWORD PTR t_hi$16[rbp-256], r10

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	add	r8, r10

; 340  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$17[rbp-256], r9

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+128], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 573  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[17], &u_buf[17]);

	mov	rax, QWORD PTR [rcx+136]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	mov	QWORD PTR k$[rsp], r10

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r9
	mov	QWORD PTR k$[rsp], r9
	mov	QWORD PTR [rcx+136], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 574  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[18], &u_buf[18]);

	mov	rax, QWORD PTR [rcx+144]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax
	mov	QWORD PTR t_hi$18[rbp-256], r10

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	add	r8, r10

; 340  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$19[rbp-256], r9

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+144], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 575  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[19], &u_buf[19]);

	mov	rax, QWORD PTR [rcx+152]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	mov	QWORD PTR k$[rsp], r10

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r9
	mov	QWORD PTR k$[rsp], r9
	mov	QWORD PTR [rcx+152], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 576  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[20], &u_buf[20]);

	mov	rax, QWORD PTR [rcx+160]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax
	mov	QWORD PTR t_hi$20[rbp-256], r10

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	add	r8, r10

; 340  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$21[rbp-256], r9

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+160], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 577  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[21], &u_buf[21]);

	mov	rax, QWORD PTR [rcx+168]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	mov	QWORD PTR k$[rsp], r10

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r9
	mov	QWORD PTR k$[rbp-256], r9
	mov	QWORD PTR [rcx+168], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 578  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[22], &u_buf[22]);

	mov	rax, QWORD PTR [rcx+176]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax
	mov	QWORD PTR t_hi$22[rbp-256], r10

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	add	r8, r10

; 340  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$23[rbp-256], r9

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+176], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 579  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[23], &u_buf[23]);

	mov	rax, QWORD PTR [rcx+184]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	mov	QWORD PTR k$[rbp-256], r9
	mov	QWORD PTR k$[rbp-256], r10

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r9

; 340  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$24[rbp-256], r10

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+184], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 580  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[24], &u_buf[24]);

	mov	rax, QWORD PTR [rcx+192]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r10
	mov	QWORD PTR k$[rbp-256], r10
	mov	QWORD PTR [rcx+192], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 581  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[25], &u_buf[25]);

	mov	rax, QWORD PTR [rcx+200]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax
	mov	QWORD PTR t_hi$25[rbp-256], r9

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	add	r8, r9

; 340  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$26[rbp-256], r10

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+200], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 582  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[26], &u_buf[26]);

	mov	rax, QWORD PTR [rcx+208]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	mov	QWORD PTR k$[rbp-256], r9

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r10
	mov	QWORD PTR k$[rbp-256], r10
	mov	QWORD PTR [rcx+208], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 583  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[27], &u_buf[27]);

	mov	rax, QWORD PTR [rcx+216]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax
	mov	QWORD PTR t_hi$27[rbp-256], r9

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	add	r8, r9

; 340  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$28[rbp-256], r10

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+216], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 584  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[28], &u_buf[28]);

	mov	rax, QWORD PTR [rcx+224]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	mov	QWORD PTR k$[rbp-256], r9

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r10
	mov	QWORD PTR k$[rbp-256], r10
	mov	QWORD PTR [rcx+224], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 585  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[29], &u_buf[29]);

	mov	rax, QWORD PTR [rcx+232]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax
	mov	QWORD PTR t_hi$29[rbp-256], r9

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	add	r8, r9

; 340  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$30[rbp-256], r10

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+232], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 586  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[30], &u_buf[30]);

	mov	rax, QWORD PTR [rcx+240]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	mov	QWORD PTR k$[rbp-256], r9

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r10
	mov	QWORD PTR k$[rbp-256], r10
	mov	QWORD PTR [rcx+240], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 587  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[31], &u_buf[31]);

	mov	rax, QWORD PTR [rcx+248]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax
	mov	QWORD PTR t_hi$31[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 358  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	add	r8, r9

; 340  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$32[rbp-256], r10

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+248], r8
	adcx	r10, rdi
	mov	QWORD PTR k$[rbp-256], r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 588  :         u_buf += 32;

	add	rcx, 256				; 00000100H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 358  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	lock xadd DWORD PTR statistics_info, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 554  :     while (count > 0)

	sub	rbx, 1
	jne	$LL2@MultiplyAn
$LN3@MultiplyAn:

; 589  :         --count;
; 590  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 591  :         if (sizeof(k) == sizeof(_UINT32_T))
; 592  :             AddToMULTI32Counter(32);
; 593  :         else
; 594  :             AddToMULTI64Counter(32);
; 595  : #endif
; 596  :     }
; 597  : 
; 598  :     if (u_count & 0x10)

	test	r11b, 16
	je	$LN413@MultiplyAn

; 599  :     {
; 600  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

	mov	rax, QWORD PTR [rcx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r10

; 340  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$33[rbp-256], r9

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 601  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

	mov	rax, QWORD PTR [rcx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r9
	mov	QWORD PTR k$[rbp-256], r9
	mov	QWORD PTR [rcx+8], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 602  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[2], &u_buf[2]);

	mov	rax, QWORD PTR [rcx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax
	mov	QWORD PTR t_hi$34[rbp-256], r10

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	add	r8, r10
	mov	QWORD PTR k$[rbp-256], r10
	mov	QWORD PTR [rcx+16], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 603  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[3], &u_buf[3]);

	mov	rax, QWORD PTR [rcx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax
	mov	QWORD PTR t_hi$35[rbp-256], r9

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	add	r8, r9
	mov	QWORD PTR k$[rbp-256], r9
	mov	QWORD PTR [rcx+24], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 604  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[4], &u_buf[4]);

	mov	rax, QWORD PTR [rcx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax
	mov	QWORD PTR t_hi$36[rbp-256], r10

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	add	r8, r10
	mov	QWORD PTR k$[rbp-256], r10
	mov	QWORD PTR [rcx+32], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 605  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[5], &u_buf[5]);

	mov	rax, QWORD PTR [rcx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax
	mov	QWORD PTR t_hi$37[rbp-256], r9

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	add	r8, r9
	mov	QWORD PTR k$[rbp-256], r9
	mov	QWORD PTR [rcx+40], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 606  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[6], &u_buf[6]);

	mov	rax, QWORD PTR [rcx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax
	mov	QWORD PTR t_hi$38[rbp-256], r10

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	add	r8, r10
	mov	QWORD PTR k$[rbp-256], r10
	mov	QWORD PTR [rcx+48], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 607  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[7], &u_buf[7]);

	mov	rax, QWORD PTR [rcx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax
	mov	QWORD PTR t_hi$39[rbp-256], r9

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	add	r8, r9
	mov	QWORD PTR k$[rbp-256], r9
	mov	QWORD PTR [rcx+56], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 608  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[8], &u_buf[8]);

	mov	rax, QWORD PTR [rcx+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax
	mov	QWORD PTR t_hi$40[rbp-256], r10

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	add	r8, r10
	mov	QWORD PTR k$[rbp-256], r10
	mov	QWORD PTR [rcx+64], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 609  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[9], &u_buf[9]);

	mov	rax, QWORD PTR [rcx+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax
	mov	QWORD PTR t_hi$41[rbp-256], r9

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	add	r8, r9
	mov	QWORD PTR k$[rbp-256], r9
	mov	QWORD PTR [rcx+72], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 610  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[10], &u_buf[10]);

	mov	rax, QWORD PTR [rcx+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax
	mov	QWORD PTR t_hi$42[rbp-256], r10

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	add	r8, r10
	mov	QWORD PTR k$[rbp-256], r10
	mov	QWORD PTR [rcx+80], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 611  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[11], &u_buf[11]);

	mov	rax, QWORD PTR [rcx+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax
	mov	QWORD PTR t_hi$43[rbp-256], r9

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi

; 340  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$44[rbp-256], r10

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r9
	mov	QWORD PTR k$[rbp-256], r9
	mov	QWORD PTR [rcx+88], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 612  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[12], &u_buf[12]);

	mov	rax, QWORD PTR [rcx+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r10
	mov	QWORD PTR k$[rbp-256], r10
	mov	QWORD PTR [rcx+96], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 613  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[13], &u_buf[13]);

	mov	rax, QWORD PTR [rcx+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax
	mov	QWORD PTR t_hi$45[rbp-256], r9

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	add	r8, r9

; 340  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$46[rbp-256], r10

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+104], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 614  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[14], &u_buf[14]);

	mov	rax, QWORD PTR [rcx+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	mov	QWORD PTR k$[rbp-256], r9

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r10
	mov	QWORD PTR k$[rbp-256], r10
	mov	QWORD PTR [rcx+112], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 615  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[15], &u_buf[15]);

	mov	rax, QWORD PTR [rcx+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax
	mov	QWORD PTR t_hi$47[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 358  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, 16
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	add	r8, r9

; 340  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$48[rbp-256], r10

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+120], r8
	adcx	r10, rdi
	mov	QWORD PTR k$[rbp-256], r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 616  :         u_buf += 16;

	sub	rcx, -128				; ffffffffffffff80H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 358  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	lock xadd DWORD PTR statistics_info, eax
$LN413@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 625  :     if (u_count & 0x8)

	test	r11b, 8
	je	$LN481@MultiplyAn

; 626  :     {
; 627  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

	mov	rax, QWORD PTR [rcx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r10

; 340  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$49[rbp-256], r9

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 628  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

	mov	rax, QWORD PTR [rcx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r9

; 340  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$50[rbp-256], r10

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+8], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 629  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[2], &u_buf[2]);

	mov	rax, QWORD PTR [rcx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	mov	QWORD PTR k$[rbp-256], r9

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r10
	mov	QWORD PTR k$[rbp-256], r10
	mov	QWORD PTR [rcx+16], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 630  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[3], &u_buf[3]);

	mov	rax, QWORD PTR [rcx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax
	mov	QWORD PTR t_hi$51[rbp-256], r9

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	add	r8, r9

; 340  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$52[rbp-256], r10

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+24], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 631  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[4], &u_buf[4]);

	mov	rax, QWORD PTR [rcx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	mov	QWORD PTR k$[rbp-256], r9

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r10
	mov	QWORD PTR k$[rbp-256], r10
	mov	QWORD PTR [rcx+32], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 632  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[5], &u_buf[5]);

	mov	rax, QWORD PTR [rcx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax
	mov	QWORD PTR t_hi$53[rbp-256], r9

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	add	r8, r9

; 340  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$54[rbp-256], r10

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+40], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 633  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[6], &u_buf[6]);

	mov	rax, QWORD PTR [rcx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	mov	QWORD PTR k$[rbp-256], r9

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r10
	mov	QWORD PTR k$[rbp-256], r10
	mov	QWORD PTR [rcx+48], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 634  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[7], &u_buf[7]);

	mov	rax, QWORD PTR [rcx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax
	mov	QWORD PTR t_hi$55[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 358  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	add	r8, r9

; 340  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$56[rbp-256], r10

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+56], r8
	adcx	r10, rdi
	mov	QWORD PTR k$[rbp-256], r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 635  :         u_buf += 8;

	add	rcx, 64					; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 358  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	lock xadd DWORD PTR statistics_info, eax
$LN481@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 644  :     if (u_count & 0x4)

	test	r11b, 4
	je	$LN517@MultiplyAn

; 645  :     {
; 646  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

	mov	rax, QWORD PTR [rcx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r10

; 340  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$57[rbp-256], r9

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 647  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

	mov	rax, QWORD PTR [rcx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r9

; 340  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$58[rbp-256], r10

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+8], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 648  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[2], &u_buf[2]);

	mov	rax, QWORD PTR [rcx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	mov	QWORD PTR k$[rbp-256], r9

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r10
	mov	QWORD PTR k$[rbp-256], r10
	mov	QWORD PTR [rcx+16], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 649  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[3], &u_buf[3]);

	mov	rax, QWORD PTR [rcx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax
	mov	QWORD PTR t_hi$59[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 358  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	add	r8, r9

; 340  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$60[rbp-256], r10

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+24], r8
	adcx	r10, rdi
	mov	QWORD PTR k$[rbp-256], r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 650  :         u_buf += 4;

	add	rcx, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 358  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	lock xadd DWORD PTR statistics_info, eax
$LN517@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 659  :     if (u_count & 0x2)

	test	r11b, 2
	je	SHORT $LN537@MultiplyAn

; 660  :     {
; 661  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

	mov	rax, QWORD PTR [rcx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r10

; 340  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$61[rbp-256], r9

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 662  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

	mov	rax, QWORD PTR [rcx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	add	r8, r9

; 340  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$62[rbp-256], r10

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+8], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 358  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	mov	QWORD PTR k$[rbp-256], r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 663  :         u_buf += 2;

	add	rcx, 16
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 358  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	lock xadd DWORD PTR statistics_info, eax
$LN537@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 672  :     if (u_count & 0x1)

	test	r11b, 1
	je	SHORT $LN549@MultiplyAn

; 673  :     {
; 674  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

	mov	rax, QWORD PTR [rcx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r10

; 340  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$63[rbp-256], r9

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	r10, r9
	mov	QWORD PTR [rcx], r8
	adcx	r10, rdi
	mov	QWORD PTR k$[rbp-256], r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 675  :         u_buf += 1;

	add	rcx, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 335  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI64);

	lock inc DWORD PTR statistics_info
$LN549@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 684  :     if (k > 0)

	test	r10, r10
	je	SHORT $LN554@MultiplyAn

; 685  :     {
; 686  :         u_buf[0] = k;

	mov	QWORD PTR [rcx], r10

; 687  :         u_buf += 1;

	lea	rax, QWORD PTR [rcx+8]

; 691  : }

	add	rsp, 976				; 000003d0H
	pop	rdi
	pop	rbx
	pop	rbp
	ret	0
$LN554@MultiplyAn:

; 688  :     }
; 689  : 
; 690  :     return (u_buf);

	mov	rax, rcx

; 691  : }

	add	rsp, 976				; 000003d0H
	pop	rdi
	pop	rbx
	pop	rbp
	ret	0
MultiplyAndAdd_using_ADCX_MULX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT MultiplyAndAdd_using_ADC_MUL
_TEXT	SEGMENT
k$ = 0
k$ = 8
k$ = 16
k$ = 24
k$ = 32
k$ = 40
k$ = 48
k$ = 56
k$ = 64
k$ = 72
k$ = 80
k$ = 88
k$ = 96
k$ = 104
k$ = 112
k$ = 120
k$ = 128
k$ = 136
k$ = 144
k$ = 152
k$ = 160
k$ = 168
k$ = 176
k$ = 184
k$ = 192
k$ = 200
k$ = 208
k$ = 216
k$ = 224
k$ = 232
k$ = 240
k$ = 248
k$ = 256
k$ = 264
k$ = 272
k$ = 280
k$ = 288
k$ = 296
k$ = 304
k$ = 312
k$ = 320
k$ = 328
k$ = 336
k$ = 344
k$ = 352
k$ = 360
k$ = 368
k$ = 376
k$ = 384
k$ = 392
k$ = 400
k$ = 408
k$ = 416
k$ = 424
k$ = 432
k$ = 440
k$ = 448
k$ = 456
k$ = 464
t_hi$1 = 472
t_hi$2 = 480
t_hi$3 = 488
t_hi$4 = 496
t_hi$5 = 504
t_hi$6 = 512
t_hi$7 = 520
t_hi$8 = 528
t_hi$9 = 536
t_hi$10 = 544
t_hi$11 = 552
t_hi$12 = 560
t_hi$13 = 568
t_hi$14 = 576
t_hi$15 = 584
t_hi$16 = 592
t_hi$17 = 600
t_hi$18 = 608
t_hi$19 = 616
t_hi$20 = 624
t_hi$21 = 632
t_hi$22 = 640
t_hi$23 = 648
t_hi$24 = 656
t_hi$25 = 664
t_hi$26 = 672
t_hi$27 = 680
t_hi$28 = 688
t_hi$29 = 696
t_hi$30 = 704
t_hi$31 = 712
t_hi$32 = 720
t_hi$33 = 728
t_hi$34 = 736
t_hi$35 = 744
t_hi$36 = 752
t_hi$37 = 760
t_hi$38 = 768
t_hi$39 = 776
t_hi$40 = 784
t_hi$41 = 792
t_hi$42 = 800
t_hi$43 = 808
t_hi$44 = 816
t_hi$45 = 824
t_hi$46 = 832
t_hi$47 = 840
t_hi$48 = 848
t_hi$49 = 856
t_hi$50 = 864
t_hi$51 = 872
t_hi$52 = 880
t_hi$53 = 888
t_hi$54 = 896
t_hi$55 = 904
t_hi$56 = 912
t_hi$57 = 920
t_hi$58 = 928
t_hi$59 = 936
t_hi$60 = 944
t_hi$61 = 952
t_hi$62 = 960
t_hi$63 = 968
k$ = 1008
u_buf$ = 1008
k$ = 1016
u_count$ = 1016
k$ = 1024
x$ = 1024
k$ = 1032
MultiplyAndAdd_using_ADC_MUL PROC			; COMDAT

; 408  : {

	push	rbp
	push	rbx
	lea	rbp, QWORD PTR [rsp-728]
	sub	rsp, 984				; 000003d8H

; 409  :     __UNIT_TYPE k = x;
; 410  :     __UNIT_TYPE count = u_count >> 5;

	mov	r11, rdx
	mov	r9, r8
	shr	r11, 5
	mov	r10, rdx

; 411  :     while (count > 0)

	mov	rbx, -8446744073709551616		; 8ac7230489e80000H
	test	r11, r11
	je	$LN3@MultiplyAn
	npad	14
$LL2@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, r9

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$1[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+8]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$2[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+8], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+16]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
	add	rax, r9

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$3[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+16], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+24]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$4[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+24], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+32]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
	add	rax, r9

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$5[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+32], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+40]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rsp], r8
	add	rax, r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$6[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+40], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+48]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rsp], r9
	add	rax, r9

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$7[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+48], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+56]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rsp], r8
	add	rax, r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$8[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+56], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+64]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rsp], r9
	add	rax, r9

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$9[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+64], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+72]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rsp], r8
	add	rax, r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$10[rbp-256], rdx
	mov	r9, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+72], rax
	adc	r9, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rsp], r9

; 309  :         return (_umul128(u, v, w_hi));

	mul	QWORD PTR [rcx+80]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, r9

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$11[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+80], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+88]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rsp], r8
	add	rax, r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$12[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+88], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+96]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rsp], r9
	add	rax, r9

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$13[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+96], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+104]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rsp], r8
	add	rax, r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$14[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+104], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+112]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rsp], r9
	add	rax, r9

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$15[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+112], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+120]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rsp], r8
	add	rax, r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$16[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+120], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+128]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rsp], r9
	add	rax, r9

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$17[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+128], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+136]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rsp], r8
	add	rax, r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$18[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+136], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+144]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rsp], r9
	add	rax, r9

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$19[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+144], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+152]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rsp], r8
	add	rax, r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$20[rbp-256], rdx
	mov	r9, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+152], rax
	adc	r9, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+160]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rsp], r9
	add	rax, r9

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$21[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+160], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+168]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$22[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+168], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+176]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
	add	rax, r9

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$23[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+176], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+184]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$24[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+184], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+192]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
	add	rax, r9

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$25[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+192], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+200]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$26[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+200], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+208]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
	add	rax, r9

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$27[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+208], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+216]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$28[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+216], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+224]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
	add	rax, r9

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$29[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+224], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+232]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$30[rbp-256], rdx
	mov	r9, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+232], rax
	adc	r9, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+240]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, r9

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$31[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+240], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 309  :         return (_umul128(u, v, w_hi));

	mul	QWORD PTR [rcx+248]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$32[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+248], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 358  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 445  :         u_buf += 32;

	add	rcx, 256				; 00000100H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 358  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	lock xadd DWORD PTR statistics_info, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 411  :     while (count > 0)

	sub	r11, 1
	jne	$LL2@MultiplyAn
$LN3@MultiplyAn:

; 446  :         --count;
; 447  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 448  :         if (sizeof(k) == sizeof(_UINT32_T))
; 449  :             AddToMULTI32Counter(32);
; 450  :         else
; 451  :             AddToMULTI64Counter(32);
; 452  : #endif
; 453  :     }
; 454  : 
; 455  :     if (u_count & 0x10)

	test	r10b, 16
	je	$LN413@MultiplyAn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, r9

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$33[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+8]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$34[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+8], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+16]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
	add	rax, r9

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$35[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+16], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+24]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$36[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+24], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+32]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
	add	rax, r9

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$37[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+32], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+40]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$38[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+40], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+48]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
	add	rax, r9

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$39[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+48], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+56]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$40[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+56], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+64]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
	add	rax, r9

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$41[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+64], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+72]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$42[rbp-256], rdx
	mov	r9, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+72], rax
	adc	r9, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9

; 309  :         return (_umul128(u, v, w_hi));

	mul	QWORD PTR [rcx+80]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, r9

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$43[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+80], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+88]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$44[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+88], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+96]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
	add	rax, r9

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$45[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+96], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+104]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$46[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+104], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+112]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
	add	rax, r9

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$47[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+112], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+120]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$48[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+120], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 358  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, 16
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 473  :         u_buf += 16;

	sub	rcx, -128				; ffffffffffffff80H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 358  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	lock xadd DWORD PTR statistics_info, eax
$LN413@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 482  :     if (u_count & 0x8)

	test	r10b, 8
	je	$LN481@MultiplyAn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, r9

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$49[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+8]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$50[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+8], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+16]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
	add	rax, r9

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$51[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+16], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+24]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$52[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+24], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+32]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
	add	rax, r9

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$53[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+32], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+40]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$54[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+40], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+48]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
	add	rax, r9

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$55[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+48], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+56]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$56[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+56], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 358  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 492  :         u_buf += 8;

	add	rcx, 64					; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 358  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	lock xadd DWORD PTR statistics_info, eax
$LN481@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 501  :     if (u_count & 0x4)

	test	r10b, 4
	je	$LN517@MultiplyAn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, r9

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$57[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+8]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$58[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+8], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+16]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
	add	rax, r9

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$59[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+16], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+24]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$60[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+24], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 358  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 507  :         u_buf += 4;

	add	rcx, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 358  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	lock xadd DWORD PTR statistics_info, eax
$LN517@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 516  :     if (u_count & 0x2)

	test	r10b, 2
	je	SHORT $LN537@MultiplyAn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, r9

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$61[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+8]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$62[rbp-256], rdx
	mov	r9, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+8], rax
	adc	r9, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 358  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	edx, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 520  :         u_buf += 2;

	add	rcx, 16
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 358  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	lock xadd DWORD PTR statistics_info, edx
$LN537@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 529  :     if (u_count & 0x1)

	test	r10b, 1
	je	SHORT $LN549@MultiplyAn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, r9

; 309  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$63[rbp-256], rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	r9, rdx
	mov	QWORD PTR [rcx], rax
	adc	r9, 0
	mov	QWORD PTR k$[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 532  :         u_buf += 1;

	add	rcx, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 335  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI64);

	lock inc DWORD PTR statistics_info
$LN549@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 541  :     if (k > 0)

	test	r9, r9
	je	SHORT $LN554@MultiplyAn

; 542  :     {
; 543  :         u_buf[0] = k;

	mov	QWORD PTR [rcx], r9

; 544  :         u_buf += 1;

	lea	rax, QWORD PTR [rcx+8]

; 548  : }

	add	rsp, 984				; 000003d8H
	pop	rbx
	pop	rbp
	ret	0
$LN554@MultiplyAn:

; 545  :     }
; 546  : 
; 547  :     return (u_buf);

	mov	rax, rcx

; 548  : }

	add	rsp, 984				; 000003d8H
	pop	rbx
	pop	rbp
	ret	0
MultiplyAndAdd_using_ADC_MUL ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT MultiplyAndAdd1Word_using_ADCX_MULX
_TEXT	SEGMENT
k$ = 8
u$ = 16
w_buf$ = 24
MultiplyAndAdd1Word_using_ADCX_MULX PROC		; COMDAT

; 393  : {

	mov	rax, rdx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mov	rdx, -8446744073709551616		; 8ac7230489e80000H
	mulx	rax, r9, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	r9, rcx
	mov	ecx, 0
	mov	QWORD PTR [r8], r9
	adcx	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 405  : }

	ret	0
MultiplyAndAdd1Word_using_ADCX_MULX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT MultiplyAndAdd1Word_using_ADC_MUL
_TEXT	SEGMENT
k$ = 8
u$ = 16
w_buf$ = 24
MultiplyAndAdd1Word_using_ADC_MUL PROC			; COMDAT
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, -8446744073709551616		; 8ac7230489e80000H
	mul	rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, rcx
	mov	QWORD PTR [r8], rax
	adc	rdx, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 389  :     return (k);

	mov	rax, rdx

; 390  : }

	ret	0
MultiplyAndAdd1Word_using_ADC_MUL ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT BuildBinaryFromDecimalString
_TEXT	SEGMENT
source$ = 48
out_buf$ = 56
out_buf_count$ = 64
BuildBinaryFromDecimalString PROC			; COMDAT

; 350  : {

	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	r15, r8
	mov	r14, rdx
	mov	rdi, rcx

; 351  : #ifdef _M_IX86
; 352  :     int word_digit_count = 9;
; 353  : #elif defined(_M_IX64)
; 354  :     int word_digit_count = 19;
; 355  : #else
; 356  : #error unknown platform
; 357  : #endif
; 358  :     wchar_t* in_ptr = source;
; 359  :     __UNIT_TYPE* out_ptr = out_buf;

	mov	rbx, rdx

; 360  :     __UNIT_TYPE source_count = lstrlenW(source);

	call	QWORD PTR __imp_lstrlenW
	movsxd	r9, eax

; 361  :     int r = source_count % word_digit_count;

	mov	r11, -2912643801112034465		; d79435e50d79435fH
	mov	rax, r11
	mov	rcx, r9
	mul	r9
	shr	rdx, 4
	imul	rax, rdx, 19
	sub	rcx, rax

; 362  :     if (r > 0)

	test	ecx, ecx
	jle	SHORT $LN11@BuildBinar

; 303  :     __UNIT_TYPE x = 0;

	xor	eax, eax

; 363  :     {
; 364  :         *out_ptr++ = BuildLeading1WordFromDecimalString(in_ptr, r);

	movsxd	r10, ecx
	mov	rdx, rdi
	mov	r8, r10

; 304  :     while (count > 0)

	test	ecx, ecx
	je	SHORT $LN8@BuildBinar
	npad	5
$LL7@BuildBinar:

; 305  :     {
; 306  :         x = x * 10 + (*in_ptr++ - L'0');

	lea	rcx, QWORD PTR [rax+rax*4]
	movzx	eax, WORD PTR [rdx]
	lea	rdx, QWORD PTR [rdx+2]
	lea	rax, QWORD PTR [rax+rcx*2]
	add	rax, -48				; ffffffffffffffd0H

; 307  :         --count;

	sub	r8, 1
	jne	SHORT $LL7@BuildBinar
$LN8@BuildBinar:

; 363  :     {
; 364  :         *out_ptr++ = BuildLeading1WordFromDecimalString(in_ptr, r);

	mov	QWORD PTR [r14], rax
	lea	rbx, QWORD PTR [r14+8]

; 365  :         in_ptr += r;

	lea	rdi, QWORD PTR [rdi+r10*2]

; 366  :         source_count -= r;

	sub	r9, r10
$LN11@BuildBinar:

; 367  :     }
; 368  :     while (source_count > 0)

	test	r9, r9
	je	SHORT $LN3@BuildBinar
	mov	QWORD PTR [rsp+48], rsi
	lea	rcx, QWORD PTR [r9-1]
	mov	rax, r11
	mul	rcx
	mov	rsi, rdx
	shr	rsi, 4
	inc	rsi
$LL2@BuildBinar:

; 369  :     {
; 370  :         *out_ptr++ = Build1WordFromDecimalString(in_ptr);

	mov	rcx, rdi
	call	Build1WordFromDecimalString
	mov	QWORD PTR [rbx], rax

; 371  :         in_ptr += word_digit_count;

	add	rdi, 38					; 00000026H
	add	rbx, 8
	sub	rsi, 1
	jne	SHORT $LL2@BuildBinar

; 367  :     }
; 368  :     while (source_count > 0)

	mov	rsi, QWORD PTR [rsp+48]
$LN3@BuildBinar:

; 372  :         source_count -= word_digit_count;
; 373  :     }
; 374  :     *out_buf_count = out_ptr - out_buf;
; 375  : }

	mov	rdi, QWORD PTR [rsp+64]
	sub	rbx, r14
	mov	r14, QWORD PTR [rsp+72]
	sar	rbx, 3
	mov	QWORD PTR [r15], rbx
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	r15
	ret	0
BuildBinaryFromDecimalString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT Build1WordFromDecimalString
_TEXT	SEGMENT
in_ptr$ = 72
tv839 = 80
tv832 = 88
tv163 = 96
Build1WordFromDecimalString PROC			; COMDAT

; 313  : {

	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15

; 314  :     __UNIT_TYPE x = (*in_ptr++ - L'0');
; 315  :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT64_T))
; 316  :     {
; 317  :         x = x * 10 + (*in_ptr++ - L'0');

	movzx	edx, WORD PTR [rcx+2]

; 318  :         x = x * 10 + (*in_ptr++ - L'0');

	movzx	r8d, WORD PTR [rcx+4]
	movzx	eax, WORD PTR [rcx]

; 319  :         x = x * 10 + (*in_ptr++ - L'0');

	movzx	r9d, WORD PTR [rcx+6]

; 320  :         x = x * 10 + (*in_ptr++ - L'0');

	movzx	r10d, WORD PTR [rcx+8]

; 321  :         x = x * 10 + (*in_ptr++ - L'0');

	movzx	r11d, WORD PTR [rcx+10]

; 322  :         x = x * 10 + (*in_ptr++ - L'0');

	movzx	ebx, WORD PTR [rcx+12]

; 323  :         x = x * 10 + (*in_ptr++ - L'0');
; 324  :         x = x * 10 + (*in_ptr++ - L'0');
; 325  :         x = x * 10 + (*in_ptr++ - L'0');
; 326  :         x = x * 10 + (*in_ptr++ - L'0');
; 327  :     }
; 328  :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT32_T))
; 329  :     {
; 330  :         x = x * 10 + (*in_ptr++ - L'0');
; 331  :         x = x * 10 + (*in_ptr++ - L'0');
; 332  :         x = x * 10 + (*in_ptr++ - L'0');
; 333  :         x = x * 10 + (*in_ptr++ - L'0');
; 334  :         x = x * 10 + (*in_ptr++ - L'0');
; 335  :     }
; 336  :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT16_T))
; 337  :     {
; 338  :         x = x * 10 + (*in_ptr++ - L'0');
; 339  :         x = x * 10 + (*in_ptr++ - L'0');

	lea	rax, QWORD PTR [rax+rax*4]
	movzx	edi, WORD PTR [rcx+14]

; 340  :     }
; 341  :     if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))
; 342  :     {
; 343  :         x = x * 10 + (*in_ptr++ - L'0');

	lea	rax, QWORD PTR [rdx+rax*2]
	movzx	esi, WORD PTR [rcx+16]
	mov	rdx, 200689888779532152			; 02c8fe63fab77778H
	movzx	r14d, WORD PTR [rcx+18]
	movzx	r15d, WORD PTR [rcx+20]
	movzx	r12d, WORD PTR [rcx+22]
	movzx	ebp, WORD PTR [rcx+24]
	movzx	r13d, WORD PTR [rcx+26]
	add	rcx, 28
	mov	QWORD PTR in_ptr$[rsp], rcx
	movzx	ecx, WORD PTR [rcx]
	mov	QWORD PTR tv839[rsp], rcx
	mov	rcx, QWORD PTR in_ptr$[rsp]
	add	rcx, 2
	mov	QWORD PTR in_ptr$[rsp], rcx
	movzx	ecx, WORD PTR [rcx]
	mov	QWORD PTR tv832[rsp], rcx
	mov	rcx, QWORD PTR in_ptr$[rsp]
	add	rcx, 2
	mov	QWORD PTR in_ptr$[rsp], rcx
	add	QWORD PTR in_ptr$[rsp], 2
	movzx	ecx, WORD PTR [rcx]
	mov	QWORD PTR tv163[rsp], rcx
	lea	rcx, QWORD PTR [rax+rax*4]
	lea	rax, QWORD PTR [r8+rcx*2]
	mov	r8, QWORD PTR in_ptr$[rsp]
	lea	rcx, QWORD PTR [rax+rax*4]
	lea	rax, QWORD PTR [r9+rcx*2]
	lea	rcx, QWORD PTR [rax+rax*4]
	lea	rax, QWORD PTR [r10+rcx*2]
	lea	rcx, QWORD PTR [rax+rax*4]
	lea	rax, QWORD PTR [r11+rcx*2]
	lea	rcx, QWORD PTR [rax+rax*4]
	lea	rax, QWORD PTR [rbx+rcx*2]
	lea	rcx, QWORD PTR [rax+rax*4]
	lea	rax, QWORD PTR [rdi+rcx*2]
	lea	rcx, QWORD PTR [rax+rax*4]
	lea	rax, QWORD PTR [rsi+rcx*2]
	lea	rcx, QWORD PTR [rax+rax*4]
	lea	rax, QWORD PTR [r14+rcx*2]
	lea	rcx, QWORD PTR [rax+rax*4]
	lea	rax, QWORD PTR [r15+rcx*2]
	lea	rcx, QWORD PTR [rax+rax*4]
	lea	rax, QWORD PTR [r12+rcx*2]
	lea	rcx, QWORD PTR [rax+rax*4]
	lea	rax, QWORD PTR [rcx*2]
	add	rax, rbp
	lea	rcx, QWORD PTR [rax+rax*4]
	lea	rax, QWORD PTR [rcx*2]
	add	rax, r13
	lea	rcx, QWORD PTR [rax+rax*4]
	mov	rax, QWORD PTR tv839[rsp]
	lea	rax, QWORD PTR [rax+rcx*2]
	lea	rcx, QWORD PTR [rax+rax*4]
	mov	rax, QWORD PTR tv832[rsp]
	lea	rax, QWORD PTR [rax+rcx*2]
	lea	rcx, QWORD PTR [rax+rax*4]
	mov	rax, QWORD PTR tv163[rsp]
	lea	rax, QWORD PTR [rax+rcx*2]
	lea	rcx, QWORD PTR [rax+rax*4]
	movzx	eax, WORD PTR [r8]
	add	rax, rdx
	lea	rcx, QWORD PTR [rax+rcx*2]
	movzx	eax, WORD PTR [r8+2]
	lea	rdx, QWORD PTR [rcx+rcx*4]
	lea	rax, QWORD PTR [rax+rdx*2]

; 344  :     }
; 345  :     return (x);
; 346  : }

	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
Build1WordFromDecimalString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT BuildLeading1WordFromDecimalString
_TEXT	SEGMENT
in_ptr$ = 8
count$ = 16
BuildLeading1WordFromDecimalString PROC			; COMDAT

; 303  :     __UNIT_TYPE x = 0;

	xor	eax, eax

; 304  :     while (count > 0)

	test	rdx, rdx
	je	SHORT $LN9@BuildLeadi
	npad	9
$LL2@BuildLeadi:

; 305  :     {
; 306  :         x = x * 10 + (*in_ptr++ - L'0');

	lea	r8, QWORD PTR [rax+rax*4]
	movzx	eax, WORD PTR [rcx]
	lea	rcx, QWORD PTR [rcx+2]
	lea	rax, QWORD PTR [rax+r8*2]
	add	rax, -48				; ffffffffffffffd0H

; 307  :         --count;

	sub	rdx, 1
	jne	SHORT $LL2@BuildLeadi
$LN9@BuildLeadi:

; 308  :     }
; 309  :     return (x);
; 310  : }

	ret	0
BuildLeading1WordFromDecimalString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT ParseAsHexNumberString
_TEXT	SEGMENT
state$ = 48
__$ArrayPad$ = 144
in_ptr$ = 176
number_styles$ = 184
format_option$ = 192
int_part_buf$ = 200
ParseAsHexNumberString PROC				; COMDAT

; 287  : {

	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 160				; 000000a0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	ebx, edx

; 288  :     struct __tag_PARSER_STATE state;
; 289  :     InitializeParserState(&state, in_ptr, number_styles, format_option, int_part_buf, NULL);

	xor	edi, edi
	mov	QWORD PTR [rsp+40], rdi
	mov	QWORD PTR [rsp+32], r9
	mov	r9, r8
	mov	r8d, edx
	mov	rdx, rcx
	lea	rcx, QWORD PTR state$[rsp]
	call	InitializeParserState

; 290  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE)

	test	bl, 1
	je	SHORT $LN38@ParseAsHex

; 113  :         switch (*state->IN_PTR)

	mov	rcx, QWORD PTR state$[rsp]
	movzx	eax, WORD PTR [rcx]
	cmp	eax, 9
	jb	SHORT $LN38@ParseAsHex
$LL7@ParseAsHex:
	cmp	eax, 13
	jbe	SHORT $LN12@ParseAsHex
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN38@ParseAsHex
$LN12@ParseAsHex:

; 114  :         {
; 115  :         case L' ':
; 116  :         case L'\t':
; 117  :         case L'\n':
; 118  :         case L'\r':
; 119  :         case L'\f':
; 120  :         case L'\v':
; 121  :             break;
; 122  : 
; 123  :         default:
; 124  :             return;
; 125  :         }
; 126  :         state->IN_PTR += 1;

	add	rcx, 2
	mov	QWORD PTR state$[rsp], rcx
	movzx	eax, WORD PTR [rcx]
	cmp	eax, 9
	jae	SHORT $LL7@ParseAsHex
$LN38@ParseAsHex:

; 291  :         SkipSpace(&state);
; 292  :     ParseAsIntegerPartNumberSequence(&state);

	lea	rcx, QWORD PTR state$[rsp]
	call	ParseAsIntegerPartNumberSequence

; 293  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

	mov	rcx, QWORD PTR state$[rsp]
	test	bl, 2
	je	SHORT $LN30@ParseAsHex

; 113  :         switch (*state->IN_PTR)

	movzx	eax, WORD PTR [rcx]
	cmp	eax, 9
	jb	SHORT $LN30@ParseAsHex
	npad	7
$LL16@ParseAsHex:
	cmp	eax, 13
	jbe	SHORT $LN21@ParseAsHex
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN30@ParseAsHex
$LN21@ParseAsHex:

; 114  :         {
; 115  :         case L' ':
; 116  :         case L'\t':
; 117  :         case L'\n':
; 118  :         case L'\r':
; 119  :         case L'\f':
; 120  :         case L'\v':
; 121  :             break;
; 122  : 
; 123  :         default:
; 124  :             return;
; 125  :         }
; 126  :         state->IN_PTR += 1;

	add	rcx, 2
	mov	QWORD PTR state$[rsp], rcx
	movzx	eax, WORD PTR [rcx]
	cmp	eax, 9
	jae	SHORT $LL16@ParseAsHex
$LN30@ParseAsHex:

; 294  :         SkipSpace(&state);
; 295  :     if (*state.IN_PTR != L'\0')

	cmp	WORD PTR [rcx], di
	je	SHORT $LN4@ParseAsHex

; 296  :         return (0);

	xor	eax, eax
	jmp	SHORT $LN1@ParseAsHex
$LN4@ParseAsHex:

; 103  :     *state->INT_PART_PTR = L'\0';

	mov	rax, QWORD PTR state$[rsp+80]
	mov	WORD PTR [rax], di

; 104  :     if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT)

	test	BYTE PTR state$[rsp+8], 32		; 00000020H
	je	SHORT $LN25@ParseAsHex

; 105  :         *state->FRAC_PART_PTR = L'\0';

	mov	rax, QWORD PTR state$[rsp+88]
	mov	WORD PTR [rax], di
$LN25@ParseAsHex:

; 297  :     FinalizeParserState(&state);
; 298  :     return (1);

	mov	eax, 1
$LN1@ParseAsHex:

; 299  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	rbx, QWORD PTR [rsp+176]
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
ParseAsHexNumberString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT ParseAsDecimalNumberString
_TEXT	SEGMENT
state$ = 48
__$ArrayPad$ = 144
in_ptr$ = 176
number_styles$ = 184
format_option$ = 192
sign$ = 200
int_part_buf$ = 208
frac_part_buf$ = 216
ParseAsDecimalNumberString PROC				; COMDAT

; 190  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rdi
	push	rbp
	lea	rbp, QWORD PTR [rsp-71]
	sub	rsp, 160				; 000000a0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rbp-89], rax

; 191  :     struct __tag_PARSER_STATE state;
; 192  :     InitializeParserState(&state, in_ptr, number_styles, format_option, int_part_buf, frac_part_buf);

	mov	rax, QWORD PTR frac_part_buf$[rbp-89]
	mov	rdi, r9
	mov	QWORD PTR [rsp+40], rax
	mov	r9, r8
	mov	rax, QWORD PTR int_part_buf$[rbp-89]
	mov	r8d, edx
	mov	ebx, edx
	mov	QWORD PTR [rsp+32], rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR state$[rbp-89]
	call	InitializeParserState

; 193  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE)

	mov	rcx, QWORD PTR state$[rbp-89]
	test	bl, 1
	je	SHORT $LN181@ParseAsDec

; 113  :         switch (*state->IN_PTR)

	movzx	eax, WORD PTR [rcx]
	cmp	eax, 9
	jb	SHORT $LN181@ParseAsDec
	npad	1
$LL33@ParseAsDec:
	cmp	eax, 13
	jbe	SHORT $LN38@ParseAsDec
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN181@ParseAsDec
$LN38@ParseAsDec:

; 114  :         {
; 115  :         case L' ':
; 116  :         case L'\t':
; 117  :         case L'\n':
; 118  :         case L'\r':
; 119  :         case L'\f':
; 120  :         case L'\v':
; 121  :             break;
; 122  : 
; 123  :         default:
; 124  :             return;
; 125  :         }
; 126  :         state->IN_PTR += 1;

	add	rcx, 2
	mov	QWORD PTR state$[rbp-89], rcx
	movzx	eax, WORD PTR [rcx]
	cmp	eax, 9
	jae	SHORT $LL33@ParseAsDec
$LN181@ParseAsDec:

; 194  :         SkipSpace(&state);
; 195  :     if ((number_styles & PMC_NUMBER_STYLE_ALLOW_PARENTHESES) && *state.IN_PTR == L'(')

	test	bl, 16
	je	$LN3@ParseAsDec
	cmp	WORD PTR [rcx], 40			; 00000028H
	jne	$LN3@ParseAsDec

; 196  :     {
; 197  :         state.SIGN = -1;
; 198  :         state.IN_PTR += 1;

	add	rcx, 2
	mov	DWORD PTR state$[rbp-77], -1
	mov	QWORD PTR state$[rbp-89], rcx

; 199  :         if (*state.IN_PTR >= L'0' && *state.IN_PTR <= L'9')

	movzx	eax, WORD PTR [rcx]
	sub	ax, 48					; 00000030H
	cmp	ax, 9
	ja	SHORT $LN5@ParseAsDec

; 200  :             ParseAsIntegerPartNumberSequence(&state);

	lea	rcx, QWORD PTR state$[rbp-89]
	call	ParseAsIntegerPartNumberSequence
	mov	rcx, QWORD PTR state$[rbp-89]
$LN5@ParseAsDec:

; 201  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	test	bl, 32					; 00000020H
	je	$LN275@ParseAsDec

; 63   :     while (*b != L'\0')

	movzx	edx, WORD PTR state$[rbp-49]

; 201  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	lea	rax, QWORD PTR state$[rbp-49]

; 63   :     while (*b != L'\0')

	test	dx, dx
	je	SHORT $LN43@ParseAsDec
	lea	r9, QWORD PTR state$[rbp-49]
	mov	r8, rcx
	sub	r8, r9
	npad	10
$LL42@ParseAsDec:

; 64   :     {
; 65   :         if (*a != *b)

	cmp	WORD PTR [r8+rax], dx
	jne	$LN275@ParseAsDec

; 66   :             return (0);
; 67   :         ++a;
; 68   :         ++b;

	movzx	edx, WORD PTR [rax+2]
	add	rax, 2
	test	dx, dx
	jne	SHORT $LL42@ParseAsDec
$LN43@ParseAsDec:

; 202  :         {
; 203  :             state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp-41]
	mov	rdx, QWORD PTR state$[rbp-1]
	lea	rcx, QWORD PTR [rcx+rax*2]
$LN277@ParseAsDec:

; 165  :         if (*state->IN_PTR >= L'0' && *state->IN_PTR <= L'9')

	mov	QWORD PTR state$[rbp-89], rcx
	movzx	r8d, WORD PTR [rcx]
	lea	eax, DWORD PTR [r8-48]
	cmp	ax, 9
	ja	SHORT $LN50@ParseAsDec

; 166  :         {
; 167  :             *state->FRAC_PART_PTR = *state->IN_PTR;

	mov	WORD PTR [rdx], r8w

; 168  :             state->FRAC_PART_PTR += 1;

	mov	rdx, QWORD PTR state$[rbp-1]

; 169  :             state->IN_PTR += 1;

	mov	rcx, QWORD PTR state$[rbp-89]
	add	rdx, 2
	mov	QWORD PTR state$[rbp-1], rdx
	add	rcx, 2

; 170  :         }

	jmp	SHORT $LN277@ParseAsDec
$LN50@ParseAsDec:

; 171  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER && *state->IN_PTR >= L'a' && *state->IN_PTR <= L'f')

	mov	r9d, DWORD PTR state$[rbp-81]
	and	r9d, 512				; 00000200H
	je	SHORT $LN52@ParseAsDec
	lea	eax, DWORD PTR [r8-97]
	cmp	ax, 5
	ja	SHORT $LN52@ParseAsDec

; 172  :         {
; 173  :             *state->FRAC_PART_PTR = *state->IN_PTR;

	mov	WORD PTR [rdx], r8w

; 174  :             state->FRAC_PART_PTR += 1;

	mov	rdx, QWORD PTR state$[rbp-1]

; 175  :             state->IN_PTR += 1;

	mov	rcx, QWORD PTR state$[rbp-89]
	add	rdx, 2
	mov	QWORD PTR state$[rbp-1], rdx
	add	rcx, 2

; 176  :         }

	jmp	SHORT $LN277@ParseAsDec
$LN52@ParseAsDec:

; 177  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER && *state->IN_PTR >= L'A' && *state->IN_PTR <= L'F')

	test	r9d, r9d
	je	SHORT $LN275@ParseAsDec
	lea	eax, DWORD PTR [r8-65]
	cmp	ax, 5
	ja	SHORT $LN275@ParseAsDec

; 178  :         {
; 179  :             *state->FRAC_PART_PTR = *state->IN_PTR;

	mov	WORD PTR [rdx], r8w

; 180  :             state->FRAC_PART_PTR += 1;

	mov	rdx, QWORD PTR state$[rbp-1]

; 181  :             state->IN_PTR += 1;

	mov	rcx, QWORD PTR state$[rbp-89]
	add	rdx, 2
	mov	QWORD PTR state$[rbp-1], rdx
	add	rcx, 2

; 182  :         }
; 183  :         else
; 184  :             break;
; 185  :     }

	jmp	$LN277@ParseAsDec
$LN275@ParseAsDec:

; 204  :             ParseAsFractionPartNumberSequence(&state);
; 205  :         }
; 206  :         if (*state.IN_PTR != L')')

	cmp	WORD PTR [rcx], 41			; 00000029H
	jne	$LN23@ParseAsDec

; 207  :             return (0);
; 208  :         state.IN_PTR += 1;

	add	rcx, 2

; 209  :     }

	jmp	$LN278@ParseAsDec
$LN3@ParseAsDec:

; 210  :     else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	test	bl, 4
	je	$LN12@ParseAsDec

; 63   :     while (*b != L'\0')

	movzx	edx, WORD PTR state$[rbp-73]

; 210  :     else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	lea	rax, QWORD PTR state$[rbp-73]

; 63   :     while (*b != L'\0')

	test	dx, dx
	je	SHORT $LN59@ParseAsDec
	lea	r9, QWORD PTR state$[rbp-73]
	mov	r8, rcx
	sub	r8, r9
$LL58@ParseAsDec:

; 64   :     {
; 65   :         if (*a != *b)

	cmp	WORD PTR [r8+rax], dx
	jne	$LN8@ParseAsDec

; 66   :             return (0);
; 67   :         ++a;
; 68   :         ++b;

	movzx	edx, WORD PTR [rax+2]
	add	rax, 2
	test	dx, dx
	jne	SHORT $LL58@ParseAsDec
$LN59@ParseAsDec:

; 211  :     {
; 212  :         state.SIGN = 1;
; 213  :         state.IN_PTR += state.POSITIVE_SIGN_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp-65]
	mov	DWORD PTR state$[rbp-77], 1
	lea	rcx, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR state$[rbp-89], rcx

; 214  :         if (*state.IN_PTR >= L'0' && *state.IN_PTR <= L'9')

	movzx	eax, WORD PTR [rcx]
	sub	ax, 48					; 00000030H
	cmp	ax, 9
	ja	SHORT $LN10@ParseAsDec

; 215  :             ParseAsIntegerPartNumberSequence(&state);

	lea	rcx, QWORD PTR state$[rbp-89]
	call	ParseAsIntegerPartNumberSequence
	mov	rcx, QWORD PTR state$[rbp-89]
$LN10@ParseAsDec:

; 216  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	test	bl, 32					; 00000020H
	je	$LN27@ParseAsDec

; 63   :     while (*b != L'\0')

	movzx	edx, WORD PTR state$[rbp-49]

; 216  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	lea	rax, QWORD PTR state$[rbp-49]

; 63   :     while (*b != L'\0')

	test	dx, dx
	je	SHORT $LN64@ParseAsDec
	lea	r9, QWORD PTR state$[rbp-49]
	mov	r8, rcx
	sub	r8, r9
$LL63@ParseAsDec:

; 64   :     {
; 65   :         if (*a != *b)

	cmp	WORD PTR [r8+rax], dx
	jne	$LN27@ParseAsDec

; 66   :             return (0);
; 67   :         ++a;
; 68   :         ++b;

	movzx	edx, WORD PTR [rax+2]
	add	rax, 2
	test	dx, dx
	jne	SHORT $LL63@ParseAsDec
$LN64@ParseAsDec:

; 217  :         {
; 218  :             state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp-41]
	mov	rdx, QWORD PTR state$[rbp-1]
	lea	rcx, QWORD PTR [rcx+rax*2]
$LN280@ParseAsDec:

; 165  :         if (*state->IN_PTR >= L'0' && *state->IN_PTR <= L'9')

	mov	QWORD PTR state$[rbp-89], rcx
	movzx	r8d, WORD PTR [rcx]
	lea	eax, DWORD PTR [r8-48]
	cmp	ax, 9
	ja	$LN71@ParseAsDec

; 166  :         {
; 167  :             *state->FRAC_PART_PTR = *state->IN_PTR;

	mov	WORD PTR [rdx], r8w

; 168  :             state->FRAC_PART_PTR += 1;

	mov	rdx, QWORD PTR state$[rbp-1]

; 169  :             state->IN_PTR += 1;

	mov	rcx, QWORD PTR state$[rbp-89]
	add	rdx, 2
	mov	QWORD PTR state$[rbp-1], rdx
	add	rcx, 2

; 170  :         }

	jmp	SHORT $LN280@ParseAsDec
$LN8@ParseAsDec:

; 63   :     while (*b != L'\0')

	movzx	edx, WORD PTR state$[rbp-61]

; 219  :             ParseAsFractionPartNumberSequence(&state);
; 220  :         }
; 221  :     }
; 222  :     else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))

	lea	rax, QWORD PTR state$[rbp-61]

; 63   :     while (*b != L'\0')

	test	dx, dx
	je	SHORT $LN80@ParseAsDec
	lea	r9, QWORD PTR state$[rbp-61]
	mov	r8, rcx
	sub	r8, r9
$LL79@ParseAsDec:

; 64   :     {
; 65   :         if (*a != *b)

	cmp	WORD PTR [r8+rax], dx
	jne	$LN12@ParseAsDec

; 66   :             return (0);
; 67   :         ++a;
; 68   :         ++b;

	movzx	edx, WORD PTR [rax+2]
	add	rax, 2
	test	dx, dx
	jne	SHORT $LL79@ParseAsDec
$LN80@ParseAsDec:

; 223  :     {
; 224  :         state.SIGN = -1;
; 225  :         state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp-53]
	mov	DWORD PTR state$[rbp-77], -1
	lea	rcx, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR state$[rbp-89], rcx

; 226  :         if (*state.IN_PTR >= L'0' && *state.IN_PTR <= L'9')

	movzx	eax, WORD PTR [rcx]
	sub	ax, 48					; 00000030H
	cmp	ax, 9
	ja	SHORT $LN14@ParseAsDec

; 227  :             ParseAsIntegerPartNumberSequence(&state);

	lea	rcx, QWORD PTR state$[rbp-89]
	call	ParseAsIntegerPartNumberSequence
	mov	rcx, QWORD PTR state$[rbp-89]
$LN14@ParseAsDec:

; 228  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	test	bl, 32					; 00000020H
	je	$LN27@ParseAsDec

; 63   :     while (*b != L'\0')

	movzx	edx, WORD PTR state$[rbp-49]

; 228  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	lea	rax, QWORD PTR state$[rbp-49]

; 63   :     while (*b != L'\0')

	test	dx, dx
	je	SHORT $LN85@ParseAsDec
	lea	r9, QWORD PTR state$[rbp-49]
	mov	r8, rcx
	sub	r8, r9
$LL84@ParseAsDec:

; 64   :     {
; 65   :         if (*a != *b)

	cmp	WORD PTR [r8+rax], dx
	jne	$LN27@ParseAsDec

; 66   :             return (0);
; 67   :         ++a;
; 68   :         ++b;

	movzx	edx, WORD PTR [rax+2]
	add	rax, 2
	test	dx, dx
	jne	SHORT $LL84@ParseAsDec
$LN85@ParseAsDec:

; 229  :         {
; 230  :             state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp-41]
	mov	rdx, QWORD PTR state$[rbp-1]
	lea	rcx, QWORD PTR [rcx+rax*2]
$LN279@ParseAsDec:

; 165  :         if (*state->IN_PTR >= L'0' && *state->IN_PTR <= L'9')

	mov	QWORD PTR state$[rbp-89], rcx
	movzx	r8d, WORD PTR [rcx]
	lea	eax, DWORD PTR [r8-48]
	cmp	ax, 9
	ja	SHORT $LN92@ParseAsDec

; 166  :         {
; 167  :             *state->FRAC_PART_PTR = *state->IN_PTR;

	mov	WORD PTR [rdx], r8w

; 168  :             state->FRAC_PART_PTR += 1;

	mov	rdx, QWORD PTR state$[rbp-1]

; 169  :             state->IN_PTR += 1;

	mov	rcx, QWORD PTR state$[rbp-89]
	add	rdx, 2
	mov	QWORD PTR state$[rbp-1], rdx
	add	rcx, 2

; 170  :         }

	jmp	SHORT $LN279@ParseAsDec
$LN92@ParseAsDec:

; 171  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER && *state->IN_PTR >= L'a' && *state->IN_PTR <= L'f')

	mov	r9d, DWORD PTR state$[rbp-81]
	and	r9d, 512				; 00000200H
	je	SHORT $LN94@ParseAsDec
	lea	eax, DWORD PTR [r8-97]
	cmp	ax, 5
	ja	SHORT $LN94@ParseAsDec

; 172  :         {
; 173  :             *state->FRAC_PART_PTR = *state->IN_PTR;

	mov	WORD PTR [rdx], r8w

; 174  :             state->FRAC_PART_PTR += 1;

	mov	rdx, QWORD PTR state$[rbp-1]

; 175  :             state->IN_PTR += 1;

	mov	rcx, QWORD PTR state$[rbp-89]
	add	rdx, 2
	mov	QWORD PTR state$[rbp-1], rdx
	add	rcx, 2

; 176  :         }

	jmp	SHORT $LN279@ParseAsDec
$LN94@ParseAsDec:

; 177  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER && *state->IN_PTR >= L'A' && *state->IN_PTR <= L'F')

	test	r9d, r9d
	je	$LN27@ParseAsDec
	lea	eax, DWORD PTR [r8-65]
	cmp	ax, 5
	ja	$LN27@ParseAsDec

; 178  :         {
; 179  :             *state->FRAC_PART_PTR = *state->IN_PTR;

	mov	WORD PTR [rdx], r8w

; 180  :             state->FRAC_PART_PTR += 1;

	mov	rdx, QWORD PTR state$[rbp-1]

; 181  :             state->IN_PTR += 1;

	mov	rcx, QWORD PTR state$[rbp-89]
	add	rdx, 2
	mov	QWORD PTR state$[rbp-1], rdx
	add	rcx, 2

; 182  :         }
; 183  :         else
; 184  :             break;
; 185  :     }

	jmp	$LN279@ParseAsDec
$LN71@ParseAsDec:

; 171  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER && *state->IN_PTR >= L'a' && *state->IN_PTR <= L'f')

	mov	r9d, DWORD PTR state$[rbp-81]
	and	r9d, 512				; 00000200H
	je	SHORT $LN73@ParseAsDec
	lea	eax, DWORD PTR [r8-97]
	cmp	ax, 5
	ja	SHORT $LN73@ParseAsDec

; 172  :         {
; 173  :             *state->FRAC_PART_PTR = *state->IN_PTR;

	mov	WORD PTR [rdx], r8w

; 174  :             state->FRAC_PART_PTR += 1;

	mov	rdx, QWORD PTR state$[rbp-1]

; 175  :             state->IN_PTR += 1;

	mov	rcx, QWORD PTR state$[rbp-89]
	add	rdx, 2
	mov	QWORD PTR state$[rbp-1], rdx
	add	rcx, 2

; 176  :         }

	jmp	$LN280@ParseAsDec
$LN73@ParseAsDec:

; 177  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER && *state->IN_PTR >= L'A' && *state->IN_PTR <= L'F')

	test	r9d, r9d
	je	$LN27@ParseAsDec
	lea	eax, DWORD PTR [r8-65]
	cmp	ax, 5
	ja	$LN27@ParseAsDec

; 178  :         {
; 179  :             *state->FRAC_PART_PTR = *state->IN_PTR;

	mov	WORD PTR [rdx], r8w

; 180  :             state->FRAC_PART_PTR += 1;

	mov	rdx, QWORD PTR state$[rbp-1]

; 181  :             state->IN_PTR += 1;

	mov	rcx, QWORD PTR state$[rbp-89]
	add	rdx, 2
	mov	QWORD PTR state$[rbp-1], rdx
	add	rcx, 2

; 182  :         }
; 183  :         else
; 184  :             break;
; 185  :     }

	jmp	$LN280@ParseAsDec
$LN12@ParseAsDec:

; 231  :             ParseAsFractionPartNumberSequence(&state);
; 232  :         }
; 233  :     }
; 234  :     else if (*state.IN_PTR >= L'0' && *state.IN_PTR <= L'9')

	movzx	eax, WORD PTR [rcx]
	sub	ax, 48					; 00000030H
	cmp	ax, 9
	ja	$LN16@ParseAsDec

; 235  :     {
; 236  :         ParseAsIntegerPartNumberSequence(&state);

	lea	rcx, QWORD PTR state$[rbp-89]
	call	ParseAsIntegerPartNumberSequence

; 237  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	mov	rcx, QWORD PTR state$[rbp-89]
	test	bl, 32					; 00000020H
	je	$LN112@ParseAsDec

; 63   :     while (*b != L'\0')

	movzx	edx, WORD PTR state$[rbp-49]

; 237  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	lea	rax, QWORD PTR state$[rbp-49]

; 63   :     while (*b != L'\0')

	test	dx, dx
	je	SHORT $LN101@ParseAsDec
	lea	r9, QWORD PTR state$[rbp-49]
	mov	r8, rcx
	sub	r8, r9
$LL100@ParseAsDec:

; 64   :     {
; 65   :         if (*a != *b)

	cmp	WORD PTR [r8+rax], dx
	jne	$LN112@ParseAsDec

; 66   :             return (0);
; 67   :         ++a;
; 68   :         ++b;

	movzx	edx, WORD PTR [rax+2]
	add	rax, 2
	test	dx, dx
	jne	SHORT $LL100@ParseAsDec
$LN101@ParseAsDec:

; 238  :         {
; 239  :             state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp-41]
	mov	rdx, QWORD PTR state$[rbp-1]
	lea	rcx, QWORD PTR [rcx+rax*2]
$LN281@ParseAsDec:

; 165  :         if (*state->IN_PTR >= L'0' && *state->IN_PTR <= L'9')

	mov	QWORD PTR state$[rbp-89], rcx
	movzx	r8d, WORD PTR [rcx]
	lea	eax, DWORD PTR [r8-48]
	cmp	ax, 9
	ja	SHORT $LN108@ParseAsDec

; 166  :         {
; 167  :             *state->FRAC_PART_PTR = *state->IN_PTR;

	mov	WORD PTR [rdx], r8w

; 168  :             state->FRAC_PART_PTR += 1;

	mov	rdx, QWORD PTR state$[rbp-1]

; 169  :             state->IN_PTR += 1;

	mov	rcx, QWORD PTR state$[rbp-89]
	add	rdx, 2
	mov	QWORD PTR state$[rbp-1], rdx
	add	rcx, 2

; 170  :         }

	jmp	SHORT $LN281@ParseAsDec
$LN108@ParseAsDec:

; 171  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER && *state->IN_PTR >= L'a' && *state->IN_PTR <= L'f')

	mov	r9d, DWORD PTR state$[rbp-81]
	and	r9d, 512				; 00000200H
	je	SHORT $LN110@ParseAsDec
	lea	eax, DWORD PTR [r8-97]
	cmp	ax, 5
	ja	SHORT $LN110@ParseAsDec

; 172  :         {
; 173  :             *state->FRAC_PART_PTR = *state->IN_PTR;

	mov	WORD PTR [rdx], r8w

; 174  :             state->FRAC_PART_PTR += 1;

	mov	rdx, QWORD PTR state$[rbp-1]

; 175  :             state->IN_PTR += 1;

	mov	rcx, QWORD PTR state$[rbp-89]
	add	rdx, 2
	mov	QWORD PTR state$[rbp-1], rdx
	add	rcx, 2

; 176  :         }

	jmp	SHORT $LN281@ParseAsDec
$LN110@ParseAsDec:

; 177  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER && *state->IN_PTR >= L'A' && *state->IN_PTR <= L'F')

	test	r9d, r9d
	je	SHORT $LN112@ParseAsDec
	lea	eax, DWORD PTR [r8-65]
	cmp	ax, 5
	ja	SHORT $LN112@ParseAsDec

; 178  :         {
; 179  :             *state->FRAC_PART_PTR = *state->IN_PTR;

	mov	WORD PTR [rdx], r8w

; 180  :             state->FRAC_PART_PTR += 1;

	mov	rdx, QWORD PTR state$[rbp-1]

; 181  :             state->IN_PTR += 1;

	mov	rcx, QWORD PTR state$[rbp-89]
	add	rdx, 2
	mov	QWORD PTR state$[rbp-1], rdx
	add	rcx, 2

; 182  :         }
; 183  :         else
; 184  :             break;
; 185  :     }

	jmp	$LN281@ParseAsDec
$LN112@ParseAsDec:

; 240  :             ParseAsFractionPartNumberSequence(&state);
; 241  :         }
; 242  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	test	bl, 8
	je	SHORT $LN27@ParseAsDec

; 63   :     while (*b != L'\0')

	movzx	edx, WORD PTR state$[rbp-73]

; 240  :             ParseAsFractionPartNumberSequence(&state);
; 241  :         }
; 242  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	lea	rax, QWORD PTR state$[rbp-73]

; 63   :     while (*b != L'\0')

	test	dx, dx
	je	SHORT $LN143@ParseAsDec
	lea	r9, QWORD PTR state$[rbp-73]
	mov	r8, rcx
	sub	r8, r9
	npad	7
$LL116@ParseAsDec:

; 64   :     {
; 65   :         if (*a != *b)

	cmp	WORD PTR [r8+rax], dx
	jne	SHORT $LN19@ParseAsDec

; 66   :             return (0);
; 67   :         ++a;
; 68   :         ++b;

	movzx	edx, WORD PTR [rax+2]
	add	rax, 2
	test	dx, dx
	jne	SHORT $LL116@ParseAsDec
$LN143@ParseAsDec:

; 276  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

	movsxd	rax, DWORD PTR state$[rbp-65]
	mov	DWORD PTR state$[rbp-77], 1
$LN282@ParseAsDec:
	lea	rcx, QWORD PTR [rcx+rax*2]
$LN278@ParseAsDec:
	mov	QWORD PTR state$[rbp-89], rcx
$LN27@ParseAsDec:
	test	bl, 2
	je	SHORT $LN276@ParseAsDec

; 113  :         switch (*state->IN_PTR)

	movzx	eax, WORD PTR [rcx]
	cmp	eax, 9
	jb	SHORT $LN276@ParseAsDec
$LL152@ParseAsDec:
	cmp	eax, 13
	jbe	SHORT $LN157@ParseAsDec
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN276@ParseAsDec
$LN157@ParseAsDec:

; 114  :         {
; 115  :         case L' ':
; 116  :         case L'\t':
; 117  :         case L'\n':
; 118  :         case L'\r':
; 119  :         case L'\f':
; 120  :         case L'\v':
; 121  :             break;
; 122  : 
; 123  :         default:
; 124  :             return;
; 125  :         }
; 126  :         state->IN_PTR += 1;

	add	rcx, 2
	mov	QWORD PTR state$[rbp-89], rcx
	movzx	eax, WORD PTR [rcx]
	cmp	eax, 9
	jae	SHORT $LL152@ParseAsDec
$LN276@ParseAsDec:

; 277  :         SkipSpace(&state);
; 278  :     if (*state.IN_PTR != L'\0')

	cmp	WORD PTR [rcx], 0
	jne	$LN23@ParseAsDec

; 103  :     *state->INT_PART_PTR = L'\0';

	mov	rcx, QWORD PTR state$[rbp-9]
	xor	edx, edx
	mov	WORD PTR [rcx], dx

; 104  :     if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT)

	test	BYTE PTR state$[rbp-81], 32		; 00000020H
	je	SHORT $LN161@ParseAsDec

; 105  :         *state->FRAC_PART_PTR = L'\0';

	mov	rcx, QWORD PTR state$[rbp-1]
	mov	WORD PTR [rcx], dx
$LN161@ParseAsDec:

; 279  :         return (0);
; 280  :     FinalizeParserState(&state);
; 281  :     *sign = state.SIGN;

	mov	ecx, DWORD PTR state$[rbp-77]

; 282  :     return (1);

	mov	eax, 1
	mov	DWORD PTR [rdi], ecx
	jmp	$LN1@ParseAsDec
$LN19@ParseAsDec:

; 63   :     while (*b != L'\0')

	movzx	edx, WORD PTR state$[rbp-61]

; 243  :         {
; 244  :             state.SIGN = 1;
; 245  :             state.IN_PTR += state.POSITIVE_SIGN_LENGTH;
; 246  :         }
; 247  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))

	lea	rax, QWORD PTR state$[rbp-61]

; 63   :     while (*b != L'\0')

	test	dx, dx
	je	SHORT $LN122@ParseAsDec
	lea	r9, QWORD PTR state$[rbp-61]
	mov	r8, rcx
	sub	r8, r9
$LL121@ParseAsDec:

; 64   :     {
; 65   :         if (*a != *b)

	cmp	WORD PTR [r8+rax], dx
	jne	SHORT $LN27@ParseAsDec

; 66   :             return (0);
; 67   :         ++a;
; 68   :         ++b;

	movzx	edx, WORD PTR [rax+2]
	add	rax, 2
	test	dx, dx
	jne	SHORT $LL121@ParseAsDec
$LN122@ParseAsDec:

; 248  :         {
; 249  :             state.SIGN = -1;
; 250  :             state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp-53]
	mov	DWORD PTR state$[rbp-77], -1

; 251  :         }
; 252  :         else
; 253  :         {
; 254  :         }
; 255  :     }

	jmp	$LN282@ParseAsDec
$LN16@ParseAsDec:

; 256  :     else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	test	bl, 32					; 00000020H
	je	$LN23@ParseAsDec

; 63   :     while (*b != L'\0')

	movzx	edx, WORD PTR state$[rbp-49]

; 256  :     else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	lea	rax, QWORD PTR state$[rbp-49]

; 63   :     while (*b != L'\0')

	test	dx, dx
	je	SHORT $LN127@ParseAsDec
	lea	r9, QWORD PTR state$[rbp-49]
	mov	r8, rcx
	sub	r8, r9
	npad	8
$LL126@ParseAsDec:

; 64   :     {
; 65   :         if (*a != *b)

	cmp	WORD PTR [r8+rax], dx
	jne	$LN23@ParseAsDec

; 66   :             return (0);
; 67   :         ++a;
; 68   :         ++b;

	movzx	edx, WORD PTR [rax+2]
	add	rax, 2
	test	dx, dx
	jne	SHORT $LL126@ParseAsDec
$LN127@ParseAsDec:

; 257  :     {
; 258  :         state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp-41]
	mov	rdx, QWORD PTR state$[rbp-1]
	lea	rcx, QWORD PTR [rcx+rax*2]
$LN283@ParseAsDec:

; 165  :         if (*state->IN_PTR >= L'0' && *state->IN_PTR <= L'9')

	mov	QWORD PTR state$[rbp-89], rcx
	movzx	r8d, WORD PTR [rcx]
	lea	eax, DWORD PTR [r8-48]
	cmp	ax, 9
	ja	SHORT $LN134@ParseAsDec

; 166  :         {
; 167  :             *state->FRAC_PART_PTR = *state->IN_PTR;

	mov	WORD PTR [rdx], r8w

; 168  :             state->FRAC_PART_PTR += 1;

	mov	rdx, QWORD PTR state$[rbp-1]

; 169  :             state->IN_PTR += 1;

	mov	rcx, QWORD PTR state$[rbp-89]
	add	rdx, 2
	mov	QWORD PTR state$[rbp-1], rdx
	add	rcx, 2

; 170  :         }

	jmp	SHORT $LN283@ParseAsDec
$LN134@ParseAsDec:

; 171  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER && *state->IN_PTR >= L'a' && *state->IN_PTR <= L'f')

	mov	r9d, DWORD PTR state$[rbp-81]
	and	r9d, 512				; 00000200H
	je	SHORT $LN136@ParseAsDec
	lea	eax, DWORD PTR [r8-97]
	cmp	ax, 5
	ja	SHORT $LN136@ParseAsDec

; 172  :         {
; 173  :             *state->FRAC_PART_PTR = *state->IN_PTR;

	mov	WORD PTR [rdx], r8w

; 174  :             state->FRAC_PART_PTR += 1;

	mov	rdx, QWORD PTR state$[rbp-1]

; 175  :             state->IN_PTR += 1;

	mov	rcx, QWORD PTR state$[rbp-89]
	add	rdx, 2
	mov	QWORD PTR state$[rbp-1], rdx
	add	rcx, 2

; 176  :         }

	jmp	SHORT $LN283@ParseAsDec
$LN136@ParseAsDec:

; 177  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER && *state->IN_PTR >= L'A' && *state->IN_PTR <= L'F')

	test	r9d, r9d
	je	SHORT $LN138@ParseAsDec
	lea	eax, DWORD PTR [r8-65]
	cmp	ax, 5
	ja	SHORT $LN138@ParseAsDec

; 178  :         {
; 179  :             *state->FRAC_PART_PTR = *state->IN_PTR;

	mov	WORD PTR [rdx], r8w

; 180  :             state->FRAC_PART_PTR += 1;

	mov	rdx, QWORD PTR state$[rbp-1]

; 181  :             state->IN_PTR += 1;

	mov	rcx, QWORD PTR state$[rbp-89]
	add	rdx, 2
	mov	QWORD PTR state$[rbp-1], rdx
	add	rcx, 2

; 182  :         }
; 183  :         else
; 184  :             break;
; 185  :     }

	jmp	$LN283@ParseAsDec
$LN138@ParseAsDec:

; 259  :         ParseAsFractionPartNumberSequence(&state);
; 260  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	test	bl, 8
	je	$LN27@ParseAsDec

; 63   :     while (*b != L'\0')

	movzx	edx, WORD PTR state$[rbp-73]

; 259  :         ParseAsFractionPartNumberSequence(&state);
; 260  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	lea	rax, QWORD PTR state$[rbp-73]

; 63   :     while (*b != L'\0')

	test	dx, dx
	je	$LN143@ParseAsDec
	lea	r9, QWORD PTR state$[rbp-73]
	mov	r8, rcx
	sub	r8, r9
$LL142@ParseAsDec:

; 64   :     {
; 65   :         if (*a != *b)

	cmp	WORD PTR [r8+rax], dx
	jne	SHORT $LN25@ParseAsDec

; 66   :             return (0);
; 67   :         ++a;
; 68   :         ++b;

	movzx	edx, WORD PTR [rax+2]
	add	rax, 2
	test	dx, dx
	jne	SHORT $LL142@ParseAsDec

; 63   :     while (*b != L'\0')

	jmp	$LN143@ParseAsDec
$LN25@ParseAsDec:
	movzx	edx, WORD PTR state$[rbp-61]

; 261  :         {
; 262  :             state.SIGN = 1;
; 263  :             state.IN_PTR += state.POSITIVE_SIGN_LENGTH;
; 264  :         }
; 265  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))

	lea	rax, QWORD PTR state$[rbp-61]

; 63   :     while (*b != L'\0')

	test	dx, dx
	je	$LN122@ParseAsDec
	lea	r9, QWORD PTR state$[rbp-61]
	mov	r8, rcx
	sub	r8, r9
$LL147@ParseAsDec:

; 64   :     {
; 65   :         if (*a != *b)

	cmp	WORD PTR [r8+rax], dx
	jne	$LN27@ParseAsDec

; 66   :             return (0);
; 67   :         ++a;
; 68   :         ++b;

	movzx	edx, WORD PTR [rax+2]
	add	rax, 2
	test	dx, dx
	jne	SHORT $LL147@ParseAsDec

; 266  :         {
; 267  :             state.SIGN = -1;

	movsxd	rax, DWORD PTR state$[rbp-53]
	mov	DWORD PTR state$[rbp-77], -1

; 268  :             state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;

	jmp	$LN282@ParseAsDec
$LN23@ParseAsDec:

; 269  :         }
; 270  :         else
; 271  :         {
; 272  :         }
; 273  :     }
; 274  :     else
; 275  :         return (0);

	xor	eax, eax
$LN1@ParseAsDec:

; 283  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rbp-89]
	xor	rcx, rsp
	call	__security_check_cookie
	lea	r11, QWORD PTR [rsp+160]
	mov	rbx, QWORD PTR [r11+16]
	mov	rdi, QWORD PTR [r11+24]
	mov	rsp, r11
	pop	rbp
	ret	0
ParseAsDecimalNumberString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT ParseAsFractionPartNumberSequence
_TEXT	SEGMENT
state$ = 8
ParseAsFractionPartNumberSequence PROC			; COMDAT

; 162  : {

	npad	2
$LN19@ParseAsFra:

; 163  :     for (;;)
; 164  :     {
; 165  :         if (*state->IN_PTR >= L'0' && *state->IN_PTR <= L'9')

	mov	rax, QWORD PTR [rcx]
	movzx	edx, WORD PTR [rax]
	lea	eax, DWORD PTR [rdx-48]
	cmp	ax, 9
	jbe	SHORT $LN18@ParseAsFra

; 166  :         {
; 167  :             *state->FRAC_PART_PTR = *state->IN_PTR;
; 168  :             state->FRAC_PART_PTR += 1;
; 169  :             state->IN_PTR += 1;
; 170  :         }
; 171  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER && *state->IN_PTR >= L'a' && *state->IN_PTR <= L'f')

	test	DWORD PTR [rcx+8], 512			; 00000200H
	je	SHORT $LN9@ParseAsFra
	lea	eax, DWORD PTR [rdx-97]
	cmp	ax, 5
	jbe	SHORT $LN18@ParseAsFra

; 172  :         {
; 173  :             *state->FRAC_PART_PTR = *state->IN_PTR;
; 174  :             state->FRAC_PART_PTR += 1;
; 175  :             state->IN_PTR += 1;
; 176  :         }
; 177  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER && *state->IN_PTR >= L'A' && *state->IN_PTR <= L'F')

	lea	eax, DWORD PTR [rdx-65]
	cmp	ax, 5
	ja	SHORT $LN9@ParseAsFra
$LN18@ParseAsFra:

; 163  :     for (;;)
; 164  :     {
; 165  :         if (*state->IN_PTR >= L'0' && *state->IN_PTR <= L'9')

	mov	rax, QWORD PTR [rcx+88]
	mov	WORD PTR [rax], dx
	add	QWORD PTR [rcx+88], 2
	add	QWORD PTR [rcx], 2
	jmp	SHORT $LN19@ParseAsFra
$LN9@ParseAsFra:

; 178  :         {
; 179  :             *state->FRAC_PART_PTR = *state->IN_PTR;
; 180  :             state->FRAC_PART_PTR += 1;
; 181  :             state->IN_PTR += 1;
; 182  :         }
; 183  :         else
; 184  :             break;
; 185  :     }
; 186  : }

	ret	0
ParseAsFractionPartNumberSequence ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT ParseAsIntegerPartNumberSequence
_TEXT	SEGMENT
state$ = 8
ParseAsIntegerPartNumberSequence PROC			; COMDAT

; 131  : {

	npad	2
$LN47@ParseAsInt:

; 132  :     for (;;)
; 133  :     {
; 134  :         if (*state->IN_PTR >= L'0' && *state->IN_PTR <= L'9')

	mov	r8, QWORD PTR [rcx]
	movzx	edx, WORD PTR [r8]
	lea	eax, DWORD PTR [rdx-48]
	cmp	ax, 9
	jbe	SHORT $LN45@ParseAsInt

; 135  :         {
; 136  :             *state->INT_PART_PTR = *state->IN_PTR;
; 137  :             state->INT_PART_PTR += 1;
; 138  :             state->IN_PTR += 1;
; 139  :         }
; 140  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER && *state->IN_PTR >= L'a' && *state->IN_PTR <= L'f')

	mov	r9d, DWORD PTR [rcx+8]
	bt	r9d, 9
	jae	SHORT $LN9@ParseAsInt
	lea	eax, DWORD PTR [rdx-97]
	cmp	ax, 5
	jbe	SHORT $LN45@ParseAsInt

; 141  :         {
; 142  :             *state->INT_PART_PTR = *state->IN_PTR;
; 143  :             state->INT_PART_PTR += 1;
; 144  :             state->IN_PTR += 1;
; 145  :         }
; 146  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER && *state->IN_PTR >= L'A' && *state->IN_PTR <= L'F')

	lea	eax, DWORD PTR [rdx-65]
	cmp	ax, 5
	ja	SHORT $LN9@ParseAsInt
$LN45@ParseAsInt:

; 132  :     for (;;)
; 133  :     {
; 134  :         if (*state->IN_PTR >= L'0' && *state->IN_PTR <= L'9')

	mov	rax, QWORD PTR [rcx+80]
	mov	WORD PTR [rax], dx
	add	QWORD PTR [rcx+80], 2
	add	QWORD PTR [rcx], 2
	jmp	SHORT $LN47@ParseAsInt
$LN9@ParseAsInt:

; 147  :         {
; 148  :             *state->INT_PART_PTR = *state->IN_PTR;
; 149  :             state->INT_PART_PTR += 1;
; 150  :             state->IN_PTR += 1;
; 151  :         }
; 152  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_THOUSANDS && StartsWith(state->IN_PTR, state->GROUP_SEPARATOR))

	test	r9b, 64					; 00000040H
	je	SHORT $LN30@ParseAsInt

; 63   :     while (*b != L'\0')

	movzx	edx, WORD PTR [rcx+52]

; 147  :         {
; 148  :             *state->INT_PART_PTR = *state->IN_PTR;
; 149  :             state->INT_PART_PTR += 1;
; 150  :             state->IN_PTR += 1;
; 151  :         }
; 152  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_THOUSANDS && StartsWith(state->IN_PTR, state->GROUP_SEPARATOR))

	lea	rax, QWORD PTR [rcx+52]

; 63   :     while (*b != L'\0')

	test	dx, dx
	je	SHORT $LN18@ParseAsInt
	sub	r8, rax
$LL17@ParseAsInt:

; 64   :     {
; 65   :         if (*a != *b)

	cmp	WORD PTR [r8+rax], dx
	jne	SHORT $LN36@ParseAsInt

; 66   :             return (0);
; 67   :         ++a;
; 68   :         ++b;

	movzx	edx, WORD PTR [rax+2]
	add	rax, 2
	test	dx, dx
	jne	SHORT $LL17@ParseAsInt
$LN18@ParseAsInt:

; 153  :             state->IN_PTR += state->GROUP_SEPARATOR_LENGTH;

	movsxd	rax, DWORD PTR [rcx+60]
	add	rax, rax
	add	QWORD PTR [rcx], rax

; 156  :         else
; 157  :             break;
; 158  :     }

	jmp	SHORT $LN47@ParseAsInt
$LN36@ParseAsInt:

; 154  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_THOUSANDS && state->SECONDARY_GROUP_SEPARATOR_LENGTH > 0 && StartsWith(state->IN_PTR, state->SECONDARY_GROUP_SEPARATOR))

	movsxd	r9, DWORD PTR [rcx+72]
	test	r9d, r9d
	jle	SHORT $LN30@ParseAsInt

; 63   :     while (*b != L'\0')

	movzx	edx, WORD PTR [rcx+64]

; 154  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_THOUSANDS && state->SECONDARY_GROUP_SEPARATOR_LENGTH > 0 && StartsWith(state->IN_PTR, state->SECONDARY_GROUP_SEPARATOR))

	lea	rax, QWORD PTR [rcx+64]

; 63   :     while (*b != L'\0')

	test	dx, dx
	je	SHORT $LN23@ParseAsInt
	mov	r8, QWORD PTR [rcx]
	sub	r8, rax
$LL22@ParseAsInt:

; 64   :     {
; 65   :         if (*a != *b)

	cmp	WORD PTR [r8+rax], dx
	jne	SHORT $LN30@ParseAsInt

; 66   :             return (0);
; 67   :         ++a;
; 68   :         ++b;

	movzx	edx, WORD PTR [rax+2]
	add	rax, 2
	test	dx, dx
	jne	SHORT $LL22@ParseAsInt
$LN23@ParseAsInt:

; 155  :             state->IN_PTR += state->SECONDARY_GROUP_SEPARATOR_LENGTH;

	mov	rax, r9
	add	rax, rax
	add	QWORD PTR [rcx], rax
	jmp	$LN47@ParseAsInt
$LN30@ParseAsInt:

; 159  : }

	ret	0
ParseAsIntegerPartNumberSequence ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT SkipSpace
_TEXT	SEGMENT
state$ = 8
SkipSpace PROC						; COMDAT

; 111  :     for (;;)
; 112  :     {
; 113  :         switch (*state->IN_PTR)

	mov	rax, QWORD PTR [rcx]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 9
	jb	SHORT $LN11@SkipSpace
	npad	5
$LL2@SkipSpace:
	cmp	eax, 13
	jbe	SHORT $LN7@SkipSpace
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN11@SkipSpace
$LN7@SkipSpace:

; 114  :         {
; 115  :         case L' ':
; 116  :         case L'\t':
; 117  :         case L'\n':
; 118  :         case L'\r':
; 119  :         case L'\f':
; 120  :         case L'\v':
; 121  :             break;
; 122  : 
; 123  :         default:
; 124  :             return;
; 125  :         }
; 126  :         state->IN_PTR += 1;

	add	QWORD PTR [rcx], 2
	mov	rax, QWORD PTR [rcx]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 9
	jae	SHORT $LL2@SkipSpace
$LN11@SkipSpace:

; 127  :     }
; 128  : }

	ret	0
SkipSpace ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT FinalizeParserState
_TEXT	SEGMENT
state$ = 8
FinalizeParserState PROC				; COMDAT

; 103  :     *state->INT_PART_PTR = L'\0';

	mov	rax, QWORD PTR [rcx+80]
	xor	edx, edx
	mov	WORD PTR [rax], dx

; 104  :     if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT)

	test	BYTE PTR [rcx+8], 32			; 00000020H
	je	SHORT $LN2@FinalizePa

; 105  :         *state->FRAC_PART_PTR = L'\0';

	mov	rax, QWORD PTR [rcx+88]
	mov	WORD PTR [rax], dx
$LN2@FinalizePa:

; 106  : }

	ret	0
FinalizeParserState ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT InitializeParserState
_TEXT	SEGMENT
state$ = 48
in_ptr$ = 56
number_styles$ = 64
format_option$ = 72
int_part_buf$ = 80
frac_part_buf$ = 88
InitializeParserState PROC				; COMDAT

; 74   : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 75   :     state->IN_PTR = in_ptr;

	mov	QWORD PTR [rcx], rdx
	mov	rsi, rcx

; 76   :     state->NUMBER_STYLES = number_styles;

	mov	DWORD PTR [rcx+8], r8d

; 77   :     state->SIGN = 0;
; 78   :     lstrcpyW(state->POSITIVE_SIGN, format_option->PositiveSign);

	lea	rdx, QWORD PTR [r9+16]
	xor	ebp, ebp
	mov	rdi, r9
	mov	DWORD PTR [rcx+12], ebp
	add	rcx, 16
	call	QWORD PTR __imp_lstrcpyW

; 79   :     state->POSITIVE_SIGN_LENGTH = lstrlenW(state->POSITIVE_SIGN);

	lea	rcx, QWORD PTR [rsi+16]
	call	QWORD PTR __imp_lstrlenW

; 80   :     lstrcpyW(state->NEGATIVE_SIGN, format_option->NegativeSign);

	lea	rdx, QWORD PTR [rdi+22]
	mov	DWORD PTR [rsi+24], eax
	lea	rcx, QWORD PTR [rsi+28]
	call	QWORD PTR __imp_lstrcpyW

; 81   :     state->NEGATIVE_SIGN_LENGTH = lstrlenW(state->NEGATIVE_SIGN);

	lea	rcx, QWORD PTR [rsi+28]
	call	QWORD PTR __imp_lstrlenW

; 82   :     lstrcpyW(state->DECIMAL_SEPARATOR, format_option->DecimalSeparator);

	lea	rdx, QWORD PTR [rdi+10]
	mov	DWORD PTR [rsi+36], eax
	lea	rcx, QWORD PTR [rsi+40]
	call	QWORD PTR __imp_lstrcpyW

; 83   :     state->DECIMAL_SEPARATOR_LENGTH = lstrlenW(state->DECIMAL_SEPARATOR);

	lea	rcx, QWORD PTR [rsi+40]
	call	QWORD PTR __imp_lstrlenW

; 84   :     lstrcpyW(state->GROUP_SEPARATOR, format_option->GroupSeparator);

	lea	rdx, QWORD PTR [rdi+4]
	mov	DWORD PTR [rsi+48], eax
	lea	rcx, QWORD PTR [rsi+52]
	call	QWORD PTR __imp_lstrcpyW

; 85   :     state->GROUP_SEPARATOR_LENGTH = lstrlenW(state->GROUP_SEPARATOR);

	lea	rcx, QWORD PTR [rsi+52]
	call	QWORD PTR __imp_lstrlenW
	mov	DWORD PTR [rsi+60], eax

; 86   :     if (state->GROUP_SEPARATOR[0] == L'\xa0' && state->GROUP_SEPARATOR[1] == L'\0')

	mov	eax, 160				; 000000a0H
	cmp	WORD PTR [rsi+52], ax
	jne	SHORT $LN2@Initialize
	cmp	WORD PTR [rsi+54], bp
	jne	SHORT $LN2@Initialize

; 87   :     {
; 88   :         state->SECONDARY_GROUP_SEPARATOR[0] = L'\x20';
; 89   :         state->SECONDARY_GROUP_SEPARATOR[1] = L'\0';

	mov	WORD PTR [rsi+66], bp

; 90   :         state->SECONDARY_GROUP_SEPARATOR_LENGTH = 1;

	mov	ebp, 1
	lea	eax, QWORD PTR [rbp+31]

; 91   :     }

	jmp	SHORT $LN3@Initialize
$LN2@Initialize:

; 92   :     else
; 93   :     {
; 94   :         state->SECONDARY_GROUP_SEPARATOR[0] = L'\0';
; 95   :         state->SECONDARY_GROUP_SEPARATOR_LENGTH = 0;

	movzx	eax, bp
$LN3@Initialize:

; 96   :     }
; 97   :     state->INT_PART_PTR = int_part_buf;

	mov	WORD PTR [rsi+64], ax
	mov	rax, QWORD PTR int_part_buf$[rsp]
	mov	DWORD PTR [rsi+72], ebp

; 98   :     state->FRAC_PART_PTR = frac_part_buf;
; 99   : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	QWORD PTR [rsi+80], rax
	mov	rax, QWORD PTR frac_part_buf$[rsp]
	mov	QWORD PTR [rsi+88], rax
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
InitializeParserState ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT StartsWith
_TEXT	SEGMENT
a$ = 8
b$ = 16
StartsWith PROC						; COMDAT

; 63   :     while (*b != L'\0')

	movzx	eax, WORD PTR [rdx]
	test	ax, ax
	je	SHORT $LN3@StartsWith
	sub	rcx, rdx
	npad	5
$LL2@StartsWith:

; 64   :     {
; 65   :         if (*a != *b)

	cmp	WORD PTR [rcx+rdx], ax
	jne	SHORT $LN7@StartsWith

; 67   :         ++a;
; 68   :         ++b;

	movzx	eax, WORD PTR [rdx+2]
	add	rdx, 2
	test	ax, ax
	jne	SHORT $LL2@StartsWith
$LN3@StartsWith:

; 69   :     }
; 70   :     return (1);

	mov	eax, 1

; 71   : }

	ret	0
$LN7@StartsWith:

; 66   :             return (0);

	xor	eax, eax

; 71   : }

	ret	0
StartsWith ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _MULTIPLYX_UNIT
_TEXT	SEGMENT
u$ = 8
v$ = 16
w_hi$ = 24
_MULTIPLYX_UNIT PROC					; COMDAT

; 336  : #ifdef _MSC_VER
; 337  : #ifdef _M_IX86
; 338  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));
; 339  : #elif defined(_M_X64)
; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	rcx, rax, rcx
	mov	QWORD PTR [r8], rcx

; 341  : #else
; 342  : #error unknown platform
; 343  : #endif
; 344  : #elif defined(__GNUC__)
; 345  : #ifdef _M_IX86
; 346  :         _UINT32_T w_lo;
; 347  :         __asm__("mulxl %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 348  :         return (w_lo);
; 349  : #elif defined(_M_X64)
; 350  :         _UINT64_T w_lo;
; 351  :         __asm__("mulxq %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 352  :         return (w_lo);
; 353  : #else
; 354  : #error unknown platform
; 355  : #endif
; 356  : #else
; 357  : #error unknown compiler
; 358  : #endif
; 359  :     }

	ret	0
_MULTIPLYX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _MULTIPLY_UNIT
_TEXT	SEGMENT
u$ = 8
v$ = 16
w_hi$ = 24
_MULTIPLY_UNIT PROC					; COMDAT

; 298  : #ifdef _M_IX86
; 299  : #ifdef _MSC_VER
; 300  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));
; 301  : #elif defined(__GNUC__)
; 302  :         _UINT32_T w_lo;
; 303  :         __asm__("mull %3": "=a"(w_lo), "=d"(*w_hi) : "0"(u), "rm"(v));
; 304  :         return (w_lo);
; 305  : #else
; 306  : #error unknown compiler
; 307  : #endif
; 308  : #elif defined(_M_X64)
; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rdx
	mul	rcx
	mov	QWORD PTR [r8], rdx

; 310  : #else
; 311  : #error unknown platform
; 312  : #endif
; 313  :     }

	ret	0
_MULTIPLY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ADDX_UNIT
_TEXT	SEGMENT
carry$ = 8
u$ = 16
v$ = 24
w$ = 32
_ADDX_UNIT PROC						; COMDAT

; 242  : #ifdef _M_IX86
; 243  :         return (_addcarryx_u32(carry, u, v, w));
; 244  : #elif defined(_M_X64)
; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	cl, -1
	adcx	rdx, r8
	mov	QWORD PTR [r9], rdx
	setb	al

; 246  : #else
; 247  : #error unknown platform
; 248  : #endif
; 249  :     }

	ret	0
_ADDX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ADD_UNIT
_TEXT	SEGMENT
carry$ = 8
u$ = 16
v$ = 24
w$ = 32
_ADD_UNIT PROC						; COMDAT

; 214  : #ifdef _M_IX86
; 215  :         return (_addcarry_u32(carry, u, v, w));
; 216  : #elif defined(_M_X64)
; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	cl, -1
	adc	rdx, r8
	mov	QWORD PTR [r9], rdx
	setb	al

; 218  : #else
; 219  : #error unknown platform
; 220  : #endif
; 221  :     }

	ret	0
_ADD_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _DIVIDE_CEILING_SIZE
_TEXT	SEGMENT
u$ = 8
v$ = 16
_DIVIDE_CEILING_SIZE PROC				; COMDAT

; 199  :         return ((u + v - 1) / v);

	lea	rax, QWORD PTR [rdx-1]
	mov	r8, rdx
	add	rax, rcx
	xor	edx, edx
	div	r8

; 200  :     }

	ret	0
_DIVIDE_CEILING_SIZE ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _DIVIDE_CEILING_UNIT
_TEXT	SEGMENT
u$ = 8
v$ = 16
_DIVIDE_CEILING_UNIT PROC				; COMDAT

; 194  :         return ((u + v - 1) / v);

	lea	rax, QWORD PTR [rdx-1]
	mov	r8, rdx
	add	rax, rcx
	xor	edx, edx
	div	r8

; 195  :     }

	ret	0
_DIVIDE_CEILING_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _COPY_MEMORY_UNIT
_TEXT	SEGMENT
d$ = 8
s$ = 16
count$ = 24
_COPY_MEMORY_UNIT PROC					; COMDAT

; 66   :     {

	mov	QWORD PTR [rsp+8], rsi
	mov	QWORD PTR [rsp+16], rdi

; 67   : #ifdef _M_IX86
; 68   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);
; 69   : #elif defined(_M_X64)
; 70   :         __movsq(d, s, count);

	mov	rdi, rcx
	mov	rsi, rdx
	mov	rcx, r8
	rep movsq

; 71   : #else
; 72   : #error unknown platform
; 73   : #endif
; 74   :     }

	mov	rsi, QWORD PTR [rsp+8]
	mov	rdi, QWORD PTR [rsp+16]
	ret	0
_COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT AddToMULTI64Counter
_TEXT	SEGMENT
value$ = 8
AddToMULTI64Counter PROC				; COMDAT

; 358  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	lock xadd DWORD PTR statistics_info, ecx

; 359  :     }

	ret	0
AddToMULTI64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT AddToMULTI32Counter
_TEXT	SEGMENT
value$ = 8
AddToMULTI32Counter PROC				; COMDAT

; 352  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock xadd DWORD PTR statistics_info+4, ecx

; 353  :     }

	ret	0
AddToMULTI32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT IncrementMULTI64Counter
_TEXT	SEGMENT
IncrementMULTI64Counter PROC				; COMDAT

; 335  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI64);

	lock inc DWORD PTR statistics_info

; 336  :     }

	ret	0
IncrementMULTI64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT IncrementMULTI32Counter
_TEXT	SEGMENT
IncrementMULTI32Counter PROC				; COMDAT

; 329  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

	lock inc DWORD PTR statistics_info+4

; 330  :     }

	ret	0
IncrementMULTI32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT PMC_TryParse
_TEXT	SEGMENT
no$ = 48
source$ = 48
number_styles$ = 56
format_option$ = 64
o$ = 72
PMC_TryParse PROC					; COMDAT

; 1000 : {

$LN13:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, r9
	mov	rax, r8

; 1001 :     PMC_STATUS_CODE result;
; 1002 :     if (source == NULL)

	test	rcx, rcx
	je	SHORT $LN11@PMC_TryPar

; 1003 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1004 :     if (o == NULL)

	test	rbx, rbx
	je	SHORT $LN11@PMC_TryPar

; 1005 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1006 :     if (format_option == NULL)
; 1007 :         format_option = &default_number_format_option;
; 1008 :     NUMBER_HEADER* no;
; 1009 :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER)

	test	rax, rax
	lea	r8, OFFSET FLAT:default_number_format_option
	cmovne	r8, rax
	bt	edx, 9
	jae	SHORT $LN5@PMC_TryPar

; 1010 :     {
; 1011 :         // 許可されている組み合わせのフラグ
; 1012 :         _UINT32_T mask = PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER | PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE | PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE;
; 1013 : 
; 1014 :         // 許可されていないフラグが指定されていればエラー
; 1015 :         if (number_styles & ~mask)

	test	edx, -516				; fffffdfcH
	jne	SHORT $LN11@PMC_TryPar

; 1017 : 
; 1018 :         if ((result = TryParseX(source, number_styles, format_option, &no)) != PMC_STATUS_OK)

	lea	r9, QWORD PTR no$[rsp]
	call	TryParseX
	test	eax, eax
	je	SHORT $LN9@PMC_TryPar

; 1032 : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN5@PMC_TryPar:

; 1019 :             return (result);
; 1020 :     }
; 1021 :     else
; 1022 :     {
; 1023 :         if ((result = TryParseDN(source, number_styles, format_option, &no)) != PMC_STATUS_OK)

	lea	r9, QWORD PTR no$[rsp]
	call	TryParseDN
	test	eax, eax
	jne	SHORT $LN1@PMC_TryPar
$LN9@PMC_TryPar:

; 1024 :             return (result);
; 1025 :     }
; 1026 :     *o = no;

	mov	rax, QWORD PTR no$[rsp]
	mov	QWORD PTR [rbx], rax

; 1027 : #ifdef _DEBUG
; 1028 :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 1029 :         return (result);
; 1030 : #endif
; 1031 :     return (PMC_STATUS_OK);

	xor	eax, eax

; 1032 : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN11@PMC_TryPar:

; 1016 :             return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN1@PMC_TryPar:

; 1032 : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
PMC_TryParse ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT Initialize_Parse
_TEXT	SEGMENT
feature$ = 48
Initialize_Parse PROC					; COMDAT

; 1035 : {

$LN6:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 1036 :     default_number_format_option.DecimalDigits = 2;

	mov	DWORD PTR default_number_format_option, 2

; 1037 :     lstrcpyW(default_number_format_option.GroupSeparator, L",");

	lea	rcx, OFFSET FLAT:default_number_format_option+4
	lea	rdx, OFFSET FLAT:??_C@_13DEFPDAGF@?$AA?0@
	call	QWORD PTR __imp_lstrcpyW

; 1038 :     lstrcpyW(default_number_format_option.DecimalSeparator, L".");

	lea	rdx, OFFSET FLAT:??_C@_13JOFGPIOO@?$AA?4@
	lea	rcx, OFFSET FLAT:default_number_format_option+10
	call	QWORD PTR __imp_lstrcpyW

; 1039 :     lstrcpy(default_number_format_option.GroupSizes, "3");

	lea	rdx, OFFSET FLAT:??_C@_01EKENIIDA@3@
	lea	rcx, OFFSET FLAT:default_number_format_option+28
	call	QWORD PTR __imp_lstrcpyA

; 1040 :     lstrcpyW(default_number_format_option.PositiveSign, L"+");

	lea	rdx, OFFSET FLAT:??_C@_13KJIIAINM@?$AA?$CL@
	lea	rcx, OFFSET FLAT:default_number_format_option+16
	call	QWORD PTR __imp_lstrcpyW

; 1041 :     lstrcpyW(default_number_format_option.NegativeSign, L"-");

	lea	rdx, OFFSET FLAT:??_C@_13IMODFHAA@?$AA?9@
	lea	rcx, OFFSET FLAT:default_number_format_option+22
	call	QWORD PTR __imp_lstrcpyW
	mov	eax, DWORD PTR [rbx]

; 1042 : 
; 1043 :     if (feature->PROCESSOR_FEATURE_ADX && feature->PROCESSOR_FEATURE_BMI2)
; 1044 :         fp_MultiplyAndAdd = MultiplyAndAdd_using_ADCX_MULX;
; 1045 :     else
; 1046 :         fp_MultiplyAndAdd = MultiplyAndAdd_using_ADC_MUL;
; 1047 : 
; 1048 :     return (PMC_STATUS_OK);

	lea	rcx, OFFSET FLAT:MultiplyAndAdd_using_ADCX_MULX
	and	eax, 10
	lea	rdx, OFFSET FLAT:MultiplyAndAdd_using_ADC_MUL
	cmp	al, 10
	cmovne	rcx, rdx
	xor	eax, eax
	mov	QWORD PTR fp_MultiplyAndAdd, rcx

; 1049 : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
Initialize_Parse ENDP
_TEXT	ENDS
END
