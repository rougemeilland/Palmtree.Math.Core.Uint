; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	Initialize_Parse
PUBLIC	PMC_TryParse
PUBLIC	PMC_TryParseForSINT
EXTRN	__imp_lstrcpyW:PROC
EXTRN	__imp_lstrlenW:PROC
EXTRN	AllocateBlock:PROC
EXTRN	DeallocateBlock:PROC
EXTRN	CheckBlockLight:PROC
EXTRN	AllocateNumber:PROC
EXTRN	DeallocateNumber:PROC
EXTRN	CommitNumber:PROC
EXTRN	InitializeNumberFormatoInfo:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	number_zero:BYTE
EXTRN	statistics_info:BYTE
EXTRN	__security_cookie:QWORD
_BSS	SEGMENT
default_number_format_option DB 0c0H DUP (?)
fp_MultiplyAndAdd DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Initialize_Parse DD imagerel $LN6
	DD	imagerel $LN6+61
	DD	imagerel $unwind$Initialize_Parse
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_TryParse DD imagerel $LN20
	DD	imagerel $LN20+150
	DD	imagerel $unwind$PMC_TryParse
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_TryParseForSINT DD imagerel $LN20
	DD	imagerel $LN20+120
	DD	imagerel $unwind$PMC_TryParseForSINT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_COPY_MEMORY_UNIT DD imagerel _COPY_MEMORY_UNIT
	DD	imagerel _COPY_MEMORY_UNIT+33
	DD	imagerel $unwind$_COPY_MEMORY_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$InitializeParserState DD imagerel InitializeParserState
	DD	imagerel InitializeParserState+330
	DD	imagerel $unwind$InitializeParserState
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ParseAsDecimalNumberString DD imagerel ParseAsDecimalNumberString
	DD	imagerel ParseAsDecimalNumberString+4421
	DD	imagerel $unwind$ParseAsDecimalNumberString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ParseAsHexNumberString DD imagerel ParseAsHexNumberString
	DD	imagerel ParseAsHexNumberString+247
	DD	imagerel $unwind$ParseAsHexNumberString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$BuildLeading1WordFromDecimalString DD imagerel BuildLeading1WordFromDecimalString
	DD	imagerel BuildLeading1WordFromDecimalString+22
	DD	imagerel $unwind$BuildLeading1WordFromDecimalString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$BuildLeading1WordFromDecimalString DD imagerel BuildLeading1WordFromDecimalString+22
	DD	imagerel BuildLeading1WordFromDecimalString+219
	DD	imagerel $chain$0$BuildLeading1WordFromDecimalString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$BuildLeading1WordFromDecimalString DD imagerel BuildLeading1WordFromDecimalString+219
	DD	imagerel BuildLeading1WordFromDecimalString+227
	DD	imagerel $chain$1$BuildLeading1WordFromDecimalString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Build1WordFromDecimalString DD imagerel Build1WordFromDecimalString
	DD	imagerel Build1WordFromDecimalString+401
	DD	imagerel $unwind$Build1WordFromDecimalString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$BuildBinaryFromDecimalString DD imagerel BuildBinaryFromDecimalString
	DD	imagerel BuildBinaryFromDecimalString+383
	DD	imagerel $unwind$BuildBinaryFromDecimalString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$MultiplyAndAdd_using_ADC_MUL DD imagerel MultiplyAndAdd_using_ADC_MUL
	DD	imagerel MultiplyAndAdd_using_ADC_MUL+2410
	DD	imagerel $unwind$MultiplyAndAdd_using_ADC_MUL
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$MultiplyAndAdd_using_ADCX_MULX DD imagerel MultiplyAndAdd_using_ADCX_MULX
	DD	imagerel MultiplyAndAdd_using_ADCX_MULX+2467
	DD	imagerel $unwind$MultiplyAndAdd_using_ADCX_MULX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ConvertCardinalNumber DD imagerel ConvertCardinalNumber
	DD	imagerel ConvertCardinalNumber+194
	DD	imagerel $unwind$ConvertCardinalNumber
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TryParseDN DD imagerel TryParseDN
	DD	imagerel TryParseDN+523
	DD	imagerel $unwind$TryParseDN
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$TryParseDN DD imagerel TryParseDN+523
	DD	imagerel TryParseDN+839
	DD	imagerel $chain$0$TryParseDN
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$TryParseDN DD imagerel TryParseDN+839
	DD	imagerel TryParseDN+867
	DD	imagerel $chain$1$TryParseDN
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$BuildBinaryFromHexString DD imagerel BuildBinaryFromHexString
	DD	imagerel BuildBinaryFromHexString+57
	DD	imagerel $unwind$BuildBinaryFromHexString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$BuildBinaryFromHexString DD imagerel BuildBinaryFromHexString+57
	DD	imagerel BuildBinaryFromHexString+260
	DD	imagerel $chain$0$BuildBinaryFromHexString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$BuildBinaryFromHexString DD imagerel BuildBinaryFromHexString+260
	DD	imagerel BuildBinaryFromHexString+311
	DD	imagerel $chain$1$BuildBinaryFromHexString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$TryParseX DD imagerel TryParseX
	DD	imagerel TryParseX+101
	DD	imagerel $unwind$TryParseX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$TryParseX DD imagerel TryParseX+101
	DD	imagerel TryParseX+605
	DD	imagerel $chain$0$TryParseX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$TryParseX DD imagerel TryParseX+605
	DD	imagerel TryParseX+638
	DD	imagerel $chain$1$TryParseX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_TryParse_Imp DD imagerel PMC_TryParse_Imp
	DD	imagerel PMC_TryParse_Imp+78
	DD	imagerel $unwind$PMC_TryParse_Imp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_TryParse_Imp DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$TryParseX DD 021H
	DD	imagerel TryParseX
	DD	imagerel TryParseX+101
	DD	imagerel $unwind$TryParseX
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$TryParseX DD 020821H
	DD	01c5408H
	DD	imagerel TryParseX
	DD	imagerel TryParseX+101
	DD	imagerel $unwind$TryParseX
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TryParseX DD 082319H
	DD	01d0111H
	DD	0e008f00aH
	DD	07004c006H
	DD	030026003H
	DD	imagerel __GSHandlerCheck
	DD	0d0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$BuildBinaryFromHexString DD 021H
	DD	imagerel BuildBinaryFromHexString
	DD	imagerel BuildBinaryFromHexString+57
	DD	imagerel $unwind$BuildBinaryFromHexString
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$BuildBinaryFromHexString DD 020521H
	DD	066405H
	DD	imagerel BuildBinaryFromHexString
	DD	imagerel BuildBinaryFromHexString+57
	DD	imagerel $unwind$BuildBinaryFromHexString
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$BuildBinaryFromHexString DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$TryParseDN DD 021H
	DD	imagerel TryParseDN
	DD	imagerel TryParseDN+523
	DD	imagerel $unwind$TryParseDN
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$TryParseDN DD 020821H
	DD	016c408H
	DD	imagerel TryParseDN
	DD	imagerel TryParseDN+523
	DD	imagerel $unwind$TryParseDN
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$TryParseDN DD 0a1c01H
	DD	018641cH
	DD	017341cH
	DD	0f012f21cH
	DD	0d00ee010H
	DD	0500b700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ConvertCardinalNumber DD 085301H
	DD	083453H
	DD	0a540dH
	DD	0e009320dH
	DD	060067007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$MultiplyAndAdd_using_ADCX_MULX DD 051301H
	DD	07a0113H
	DD	030037004H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$MultiplyAndAdd_using_ADC_MUL DD 041201H
	DD	07b0112H
	DD	050023003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$BuildBinaryFromDecimalString DD 0a1801H
	DD	0a6418H
	DD	095418H
	DD	083418H
	DD	0f0143218H
	DD	07010e012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Build1WordFromDecimalString DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$BuildLeading1WordFromDecimalString DD 021H
	DD	imagerel BuildLeading1WordFromDecimalString
	DD	imagerel BuildLeading1WordFromDecimalString+22
	DD	imagerel $unwind$BuildLeading1WordFromDecimalString
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$BuildLeading1WordFromDecimalString DD 020421H
	DD	03404H
	DD	imagerel BuildLeading1WordFromDecimalString
	DD	imagerel BuildLeading1WordFromDecimalString+22
	DD	imagerel $unwind$BuildLeading1WordFromDecimalString
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$BuildLeading1WordFromDecimalString DD 010401H
	DD	0204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ParseAsHexNumberString DD 051f19H
	DD	01a340dH
	DD	018010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ParseAsDecimalNumberString DD 072219H
	DD	01c3414H
	DD	0180114H
	DD	060077008H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$InitializeParserState DD 081501H
	DD	087415H
	DD	076415H
	DD	063415H
	DD	0e0113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_COPY_MEMORY_UNIT DD 040a01H
	DD	02740aH
	DD	016405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_TryParseForSINT DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_TryParse DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Initialize_Parse DD 020601H
	DD	030023206H
xdata	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT PMC_TryParse_Imp
_TEXT	SEGMENT
source$ = 64
number_styles$ = 72
format_option$ = 80
o_sign$ = 88
o_abs$ = 96
PMC_TryParse_Imp PROC					; COMDAT

; 1292 : {

	sub	rsp, 56					; 00000038H

; 1293 :     PMC_STATUS_CODE result;
; 1294 :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER)

	bt	edx, 9
	jae	SHORT $LN2@PMC_TryPar

; 1295 :     {
; 1296 :         // 16進数の場合
; 1297 : 
; 1298 :         // 許可されている組み合わせのフラグ
; 1299 :         _UINT32_T mask = PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER | PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE | PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE;
; 1300 : 
; 1301 :         // 許可されていないフラグが指定されていればエラー
; 1302 :         if (number_styles & ~mask)

	test	edx, -516				; fffffdfcH
	je	SHORT $LN4@PMC_TryPar

; 1303 :             return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1

; 1319 : }

	add	rsp, 56					; 00000038H
	ret	0
$LN4@PMC_TryPar:

; 1304 : 
; 1305 :         if ((result = TryParseX(source, number_styles, format_option, o_sign, o_abs)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR o_abs$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	TryParseX
	test	eax, eax
	je	SHORT $LN6@PMC_TryPar

; 1319 : }

	add	rsp, 56					; 00000038H
	ret	0
$LN2@PMC_TryPar:

; 1306 :             return (result);
; 1307 :     }
; 1308 :     else
; 1309 :     {
; 1310 :         // 10進数の場合
; 1311 :         if ((result = TryParseDN(source, number_styles, format_option, o_sign, o_abs)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR o_abs$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	TryParseDN
	test	eax, eax
	jne	SHORT $LN1@PMC_TryPar
$LN6@PMC_TryPar:

; 1312 :             return (result);
; 1313 :     }
; 1314 : #ifdef _DEBUG
; 1315 :     if ((result = CheckNumber(*o_abs)) != PMC_STATUS_OK)
; 1316 :         return (result);
; 1317 : #endif
; 1318 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_TryPar:

; 1319 : }

	add	rsp, 56					; 00000038H
	ret	0
PMC_TryParse_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT TryParseX
_TEXT	SEGMENT
int_part_buf_words$ = 48
int_part_buf_code$ = 56
o_light_check_code$ = 64
state$1 = 80
__$ArrayPad$ = 208
source$ = 288
number_styles$ = 296
format_option$ = 304
o_sign$ = 312
o_abs$ = 320
TryParseX PROC						; COMDAT

; 1228 : {

	push	rbx
	push	rsi
	push	rdi
	push	r12
	push	r14
	push	r15
	sub	rsp, 232				; 000000e8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rdi, QWORD PTR o_abs$[rsp]
	mov	r12, r9
	mov	r15, r8
	mov	esi, edx
	mov	r14, rcx

; 1229 :     PMC_STATUS_CODE result;
; 1230 :     __UNIT_TYPE source_len = lstrlenW(source);

	call	QWORD PTR __imp_lstrlenW
	movsxd	rcx, eax

; 1231 :     __UNIT_TYPE int_part_buf_code;
; 1232 :     __UNIT_TYPE int_part_buf_words;
; 1233 :     wchar_t* int_part_buf = (wchar_t*)AllocateBlock((source_len + 1) * sizeof(wchar_t) * 8, &int_part_buf_words, &int_part_buf_code);

	lea	r8, QWORD PTR int_part_buf_code$[rsp]
	inc	rcx
	lea	rdx, QWORD PTR int_part_buf_words$[rsp]
	shl	rcx, 4
	call	AllocateBlock
	mov	rbx, rax

; 1234 :     if (int_part_buf == NULL)

	test	rax, rax
	jne	SHORT $LN4@TryParseX

; 1235 :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	lea	eax, QWORD PTR [rbx-5]
	jmp	$LN1@TryParseX
$LN4@TryParseX:
	mov	QWORD PTR [rsp+224], rbp

; 588  :     InitializeParserState(&state, in_ptr, number_styles, format_option, int_part_buf, NULL);

	lea	rcx, QWORD PTR state$1[rsp]
	xor	ebp, ebp
	mov	r9, r15
	mov	QWORD PTR [rsp+40], rbp
	mov	r8d, esi
	mov	rdx, r14
	mov	QWORD PTR [rsp+32], rbx
	call	InitializeParserState

; 589  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE)

	test	sil, 1
	je	SHORT $LN57@TryParseX

; 112  :         switch (*state->IN_PTR)

	mov	rcx, QWORD PTR state$1[rsp]
	movzx	eax, WORD PTR [rcx]
	cmp	eax, 9
	jb	SHORT $LN57@TryParseX
	npad	1
$LL20@TryParseX:
	cmp	eax, 13
	jbe	SHORT $LN25@TryParseX
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN57@TryParseX
$LN25@TryParseX:

; 113  :         {
; 114  :         case L' ':
; 115  :         case L'\t':
; 116  :         case L'\n':
; 117  :         case L'\r':
; 118  :         case L'\f':
; 119  :         case L'\v':
; 120  :             break;
; 121  : 
; 122  :         default:
; 123  :             return;
; 124  :         }
; 125  :         state->IN_PTR += 1;

	add	rcx, 2
	mov	QWORD PTR state$1[rsp], rcx
	movzx	eax, WORD PTR [rcx]
	cmp	eax, 9
	jae	SHORT $LL20@TryParseX
$LN57@TryParseX:

; 591  :     ParseAsIntegerPartNumberSequence(&state);

	lea	rcx, QWORD PTR state$1[rsp]
	call	ParseAsIntegerPartNumberSequence

; 592  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

	mov	rax, QWORD PTR state$1[rsp]
	test	sil, 2
	je	SHORT $LN46@TryParseX

; 112  :         switch (*state->IN_PTR)

	movzx	ecx, WORD PTR [rax]
	cmp	ecx, 9
	jb	SHORT $LN46@TryParseX
$LL29@TryParseX:
	cmp	ecx, 13
	jbe	SHORT $LN34@TryParseX
	cmp	ecx, 32					; 00000020H
	jne	SHORT $LN46@TryParseX
$LN34@TryParseX:

; 113  :         {
; 114  :         case L' ':
; 115  :         case L'\t':
; 116  :         case L'\n':
; 117  :         case L'\r':
; 118  :         case L'\f':
; 119  :         case L'\v':
; 120  :             break;
; 121  : 
; 122  :         default:
; 123  :             return;
; 124  :         }
; 125  :         state->IN_PTR += 1;

	add	rax, 2
	mov	QWORD PTR state$1[rsp], rax
	movzx	ecx, WORD PTR [rax]
	cmp	ecx, 9
	jae	SHORT $LL29@TryParseX
$LN46@TryParseX:

; 594  :     if (*state.IN_PTR != L'\0')

	mov	esi, 1
	cmp	WORD PTR [rax], bp
	jne	SHORT $LN14@TryParseX

; 102  :     *state->INT_PART_PTR = L'\0';

	mov	rax, QWORD PTR state$1[rsp+104]
	mov	WORD PTR [rax], bp

; 103  :     if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT)

	test	BYTE PTR state$1[rsp+8], 32		; 00000020H
	je	SHORT $LN38@TryParseX

; 104  :         *state->FRAC_PART_PTR = L'\0';

	mov	rax, QWORD PTR state$1[rsp+112]
	mov	WORD PTR [rax], bp
$LN38@TryParseX:

; 597  :     return (1);

	mov	ebp, esi
$LN14@TryParseX:

; 1236 :     int result_parsing = ParseAsHexNumberString(source, number_styles, format_option, int_part_buf);
; 1237 :     if ((result = CheckBlockLight((__UNIT_TYPE*)int_part_buf, int_part_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR int_part_buf_code$[rsp]
	mov	rcx, rbx
	call	CheckBlockLight
	test	eax, eax
	jne	$LN58@TryParseX

; 1238 :         return (result);
; 1239 :     if (!result_parsing || int_part_buf[0] == L'\0')

	test	ebp, ebp
	je	$LN7@TryParseX
	movzx	ecx, WORD PTR [rbx]
	test	cx, cx
	je	$LN7@TryParseX

; 1243 :     }
; 1244 : 
; 1245 :     // 先頭 1 文字が 8～F であれば負数とみなす
; 1246 :     *o_sign = ParseHexDigit(int_part_buf[0]) >= 8 ? -1 : 1;

	call	ParseHexDigit
	cmp	eax, 8
	mov	ecx, -1					; ffffffffH
	cmovge	esi, ecx

; 1247 : 
; 1248 :     __UNIT_TYPE o_bit_count = lstrlenW(int_part_buf) * 4;

	mov	rcx, rbx
	mov	BYTE PTR [r12], sil
	call	QWORD PTR __imp_lstrlenW

; 1249 :     __UNIT_TYPE o_light_check_code;
; 1250 :     if ((result = AllocateNumber(o_abs, o_bit_count, &o_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR o_light_check_code$[rsp]
	mov	rcx, rdi
	mov	esi, eax
	shl	esi, 2
	movsxd	rdx, esi
	call	AllocateNumber
	mov	ebp, eax
	mov	rcx, rbx
	test	eax, eax
	je	SHORT $LN8@TryParseX

; 1251 :     {
; 1252 :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	rdx, QWORD PTR int_part_buf_words$[rsp]
	call	DeallocateBlock

; 1253 :         return (result);

	mov	eax, ebp
	jmp	$LN58@TryParseX
$LN8@TryParseX:

; 1254 :     }
; 1255 :     BuildBinaryFromHexString(int_part_buf, (*o_abs)->BLOCK);

	mov	rdx, QWORD PTR [rdi]
	mov	rdx, QWORD PTR [rdx+64]
	call	BuildBinaryFromHexString

; 1256 :     if ((result = CheckBlockLight((*o_abs)->BLOCK, o_light_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR [rdi]
	mov	rdx, QWORD PTR o_light_check_code$[rsp]
	mov	rcx, QWORD PTR [rcx+64]
	call	CheckBlockLight
	test	eax, eax
	jne	$LN58@TryParseX

; 1257 :         return (result);
; 1258 :     DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	rdx, QWORD PTR int_part_buf_words$[rsp]
	mov	rcx, rbx
	call	DeallocateBlock

; 1259 :     if (*o_sign < 0)

	cmp	BYTE PTR [r12], 0
	jge	SHORT $LN3@TryParseX

; 1260 :     {
; 1261 :         // 負数の場合
; 1262 : 
; 1263 :         int lzcnt = o_bit_count % __UNIT_TYPE_BIT_COUNT;

	and	esi, 63					; 0000003fH

; 1264 :         if (lzcnt != 0)

	je	SHORT $LN11@TryParseX

; 1265 :         {
; 1266 :             __UNIT_TYPE padding = (__UNIT_TYPE)-1 << lzcnt;
; 1267 :             (*o_abs)->BLOCK[(*o_abs)->BLOCK_COUNT - 1] |= padding;

	mov	rax, QWORD PTR [rdi]
	mov	ecx, esi
	mov	rdx, QWORD PTR [rax+56]
	mov	rax, QWORD PTR [rax+64]
	lea	r8, QWORD PTR [rax+rdx*8]
	mov	rax, -1
	shl	rax, cl
	or	QWORD PTR [r8-8], rax
$LN11@TryParseX:

; 1268 :         }
; 1269 : 
; 1270 :         // 配列 (*o_abs)->BLOCK の内容をビット反転してインクリメントする
; 1271 :         char carry = 1;
; 1272 :         __UNIT_TYPE* p = (*o_abs)->BLOCK;

	mov	rax, QWORD PTR [rdi]
	mov	dl, 1
	mov	r8, QWORD PTR [rax+56]
	mov	rcx, QWORD PTR [rax+64]

; 1273 :         __UNIT_TYPE count = (*o_abs)->BLOCK_COUNT;
; 1274 :         while (count > 0)

	test	r8, r8
	je	SHORT $LN3@TryParseX
$LL2@TryParseX:

; 1276 :             carry = _ADD_UNIT(carry, ~*p, 0, p);

	mov	rax, QWORD PTR [rcx]

; 1277 :             ++p;

	lea	rcx, QWORD PTR [rcx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 211  :         return (_addcarry_u64(carry, u, v, w));

	add	dl, -1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 1276 :             carry = _ADD_UNIT(carry, ~*p, 0, p);

	not	rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	rax, 0
	mov	QWORD PTR [rcx-8], rax
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 1278 :             --count;

	sub	r8, 1
	jne	SHORT $LL2@TryParseX
$LN3@TryParseX:

; 1279 :         }
; 1280 :     }
; 1281 :     CommitNumber(*o_abs);

	mov	rcx, QWORD PTR [rdi]
	call	CommitNumber

; 1282 :     if ((*o_abs)->IS_ZERO)

	mov	rcx, QWORD PTR [rdi]
	test	BYTE PTR [rcx], 1
	je	SHORT $LN12@TryParseX

; 1283 :     {
; 1284 :         DeallocateNumber(*o_abs);

	call	DeallocateNumber

; 1285 :         *o_sign = 0;
; 1286 :         *o_abs = &number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	BYTE PTR [r12], 0
	mov	QWORD PTR [rdi], rax
$LN12@TryParseX:

; 1287 :     }
; 1288 :     return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN58@TryParseX
$LN7@TryParseX:

; 1240 :     {
; 1241 :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	rdx, QWORD PTR int_part_buf_words$[rsp]
	mov	rcx, rbx
	call	DeallocateBlock

; 1242 :         return (PMC_STATUS_PARSING_ERROR);

	mov	eax, esi
$LN58@TryParseX:
	mov	rbp, QWORD PTR [rsp+224]
$LN1@TryParseX:

; 1289 : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 232				; 000000e8H
	pop	r15
	pop	r14
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
TryParseX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT BuildBinaryFromHexString
_TEXT	SEGMENT
source$ = 48
out_buf$ = 56
BuildBinaryFromHexString PROC				; COMDAT

; 1207 : {

	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx
	mov	rdi, rcx

; 1208 :     int word_digit_count = __UNIT_TYPE_BIT_COUNT / 4;
; 1209 :     __UNIT_TYPE source_count = lstrlenW(source);

	call	QWORD PTR __imp_lstrlenW
	movsxd	r11, eax

; 1212 :     int r = source_count % word_digit_count;

	mov	r10, r11
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 188  :         return ((u + v - 1) / v);

	lea	rax, QWORD PTR [r11+15]
	shr	rax, 4
	lea	rbx, QWORD PTR [rbx+rax*8]
	add	rbx, -8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 1212 :     int r = source_count % word_digit_count;

	and	r10d, 15

; 1213 :     if (r > 0)

	jbe	$LN23@BuildBinar

; 1161 :     __UNIT_TYPE x = ParseHexDigit(*in_ptr);

	movzx	ecx, WORD PTR [rdi]

; 1214 :     {
; 1215 :         *out_ptr-- = BuildLeading1WordFromHexString(in_ptr, r);

	mov	QWORD PTR [rsp+48], rsi
	mov	esi, r10d
	mov	r9d, r10d

; 158  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [rcx-48]
	cmp	ax, 9
	ja	SHORT $LN13@BuildBinar

; 159  :         return (c - L'0');

	movzx	edx, cx
	sub	rdx, 48					; 00000030H
	jmp	SHORT $LN12@BuildBinar
$LN13@BuildBinar:

; 160  : 
; 161  :     if (c >= L'a' && c <= L'f')

	lea	eax, DWORD PTR [rcx-97]
	cmp	ax, 5
	ja	SHORT $LN14@BuildBinar

; 162  :         return (c - L'a' + 10);

	movzx	edx, cx
	sub	rdx, 87					; 00000057H
	jmp	SHORT $LN12@BuildBinar
$LN14@BuildBinar:

; 163  : 
; 164  :     if (c >= L'A' && c <= L'F')

	lea	eax, DWORD PTR [rcx-65]
	cmp	ax, 5
	ja	SHORT $LN15@BuildBinar

; 165  :         return (c - L'A' + 10);

	movzx	edx, cx
	sub	rdx, 55					; 00000037H
	jmp	SHORT $LN12@BuildBinar
$LN15@BuildBinar:

; 166  :     return (-1);

	mov	rdx, -1
$LN12@BuildBinar:

; 1161 :     __UNIT_TYPE x = ParseHexDigit(*in_ptr);

	shl	rdx, 32					; 00000020H

; 1162 :     ++in_ptr;

	lea	r8, QWORD PTR [rdi+2]
	sar	rdx, 32					; 00000020H
	sub	r9, 1

; 1163 :     --count;
; 1164 :     while (count > 0)

	je	SHORT $LN10@BuildBinar
$LL9@BuildBinar:

; 1165 :     {
; 1166 :         x = x * 16 + ParseHexDigit(*in_ptr);

	movzx	ecx, WORD PTR [r8]

; 158  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [rcx-48]
	cmp	ax, 9
	ja	SHORT $LN18@BuildBinar

; 159  :         return (c - L'0');

	movzx	eax, cx
	sub	rax, 48					; 00000030H
	jmp	SHORT $LN17@BuildBinar
$LN18@BuildBinar:

; 160  : 
; 161  :     if (c >= L'a' && c <= L'f')

	lea	eax, DWORD PTR [rcx-97]
	cmp	ax, 5
	ja	SHORT $LN19@BuildBinar

; 162  :         return (c - L'a' + 10);

	movzx	eax, cx
	sub	rax, 87					; 00000057H
	jmp	SHORT $LN17@BuildBinar
$LN19@BuildBinar:

; 163  : 
; 164  :     if (c >= L'A' && c <= L'F')

	lea	eax, DWORD PTR [rcx-65]
	cmp	ax, 5
	ja	SHORT $LN20@BuildBinar

; 165  :         return (c - L'A' + 10);

	movzx	eax, cx
	sub	rax, 55					; 00000037H
	jmp	SHORT $LN17@BuildBinar
$LN20@BuildBinar:

; 166  :     return (-1);

	mov	rax, -1
$LN17@BuildBinar:

; 1166 :         x = x * 16 + ParseHexDigit(*in_ptr);

	shl	rax, 32					; 00000020H
	mov	rcx, rdx
	sar	rax, 32					; 00000020H

; 1167 :         ++in_ptr;

	add	r8, 2
	shl	rcx, 4
	lea	rdx, QWORD PTR [rcx+rax]

; 1168 :         --count;

	sub	r9, 1
	jne	SHORT $LL9@BuildBinar
$LN10@BuildBinar:

; 1214 :     {
; 1215 :         *out_ptr-- = BuildLeading1WordFromHexString(in_ptr, r);

	mov	QWORD PTR [rbx], rdx

; 1216 :         in_ptr += r;

	lea	rdi, QWORD PTR [rdi+r10*2]
	sub	rbx, 8

; 1217 :         source_count -= r;

	sub	r11, rsi
	mov	rsi, QWORD PTR [rsp+48]
$LN23@BuildBinar:

; 1218 :     }
; 1219 :     while (source_count > 0)

	test	r11, r11
	je	SHORT $LN3@BuildBinar
	dec	r11
	shr	r11, 4
	inc	r11
$LL2@BuildBinar:

; 1220 :     {
; 1221 :         *out_ptr-- = Build1WordFromHexString(in_ptr);

	mov	rcx, rdi
	call	Build1WordFromHexString

; 1222 :         in_ptr += word_digit_count;

	add	rdi, 32					; 00000020H
	mov	QWORD PTR [rbx], rax
	lea	rbx, QWORD PTR [rbx-8]
	sub	r11, 1
	jne	SHORT $LL2@BuildBinar
$LN3@BuildBinar:

; 1223 :         source_count -= word_digit_count;
; 1224 :     }
; 1225 : }

	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
BuildBinaryFromHexString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT Build1WordFromHexString
_TEXT	SEGMENT
in_ptr$ = 8
Build1WordFromHexString PROC				; COMDAT

; 1174 : {

	mov	r9, rcx

; 158  :     if (c >= L'0' && c <= L'9')

	mov	rdx, -1

; 1175 :     __UNIT_TYPE x = ParseHexDigit(*in_ptr++);

	movzx	ecx, WORD PTR [rcx]

; 158  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [rcx-48]
	cmp	ax, 9
	ja	SHORT $LN8@Build1Word

; 159  :         return (c - L'0');

	movzx	r8d, cx
	sub	r8, 48					; 00000030H
	jmp	SHORT $LN7@Build1Word
$LN8@Build1Word:

; 160  : 
; 161  :     if (c >= L'a' && c <= L'f')

	lea	eax, DWORD PTR [rcx-97]
	cmp	ax, 5
	ja	SHORT $LN9@Build1Word

; 162  :         return (c - L'a' + 10);

	movzx	r8d, cx
	sub	r8, 87					; 00000057H
	jmp	SHORT $LN7@Build1Word
$LN9@Build1Word:

; 163  : 
; 164  :     if (c >= L'A' && c <= L'F')

	lea	eax, DWORD PTR [rcx-65]
	cmp	ax, 5
	ja	SHORT $LN10@Build1Word

; 165  :         return (c - L'A' + 10);

	movzx	r8d, cx
	sub	r8, 55					; 00000037H
	jmp	SHORT $LN7@Build1Word
$LN10@Build1Word:

; 166  :     return (-1);

	mov	r8, rdx
$LN7@Build1Word:

; 1176 :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT64_T))
; 1177 :     {
; 1178 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	movzx	ecx, WORD PTR [r9+2]
	shl	r8, 32					; 00000020H
	sar	r8, 32					; 00000020H

; 158  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [rcx-48]
	cmp	ax, 9
	ja	SHORT $LN13@Build1Word

; 159  :         return (c - L'0');

	movzx	ecx, cx
	sub	rcx, 48					; 00000030H
	jmp	SHORT $LN12@Build1Word
$LN13@Build1Word:

; 160  : 
; 161  :     if (c >= L'a' && c <= L'f')

	lea	eax, DWORD PTR [rcx-97]
	cmp	ax, 5
	ja	SHORT $LN14@Build1Word

; 162  :         return (c - L'a' + 10);

	movzx	ecx, cx
	sub	rcx, 87					; 00000057H
	jmp	SHORT $LN12@Build1Word
$LN14@Build1Word:

; 163  : 
; 164  :     if (c >= L'A' && c <= L'F')

	lea	eax, DWORD PTR [rcx-65]
	cmp	ax, 5
	ja	SHORT $LN15@Build1Word

; 165  :         return (c - L'A' + 10);

	movzx	ecx, cx
	sub	rcx, 55					; 00000037H
	jmp	SHORT $LN12@Build1Word
$LN15@Build1Word:

; 166  :     return (-1);

	mov	rcx, rdx
$LN12@Build1Word:

; 1176 :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT64_T))
; 1177 :     {
; 1178 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	shl	r8, 4
	shl	rcx, 32					; 00000020H
	sar	rcx, 32					; 00000020H
	add	rcx, r8

; 1179 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	movzx	r8d, WORD PTR [r9+4]

; 158  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [r8-48]
	cmp	ax, 9
	ja	SHORT $LN18@Build1Word

; 159  :         return (c - L'0');

	movzx	r8d, r8w
	sub	r8, 48					; 00000030H
	jmp	SHORT $LN17@Build1Word
$LN18@Build1Word:

; 160  : 
; 161  :     if (c >= L'a' && c <= L'f')

	lea	eax, DWORD PTR [r8-97]
	cmp	ax, 5
	ja	SHORT $LN19@Build1Word

; 162  :         return (c - L'a' + 10);

	movzx	r8d, r8w
	sub	r8, 87					; 00000057H
	jmp	SHORT $LN17@Build1Word
$LN19@Build1Word:

; 163  : 
; 164  :     if (c >= L'A' && c <= L'F')

	lea	eax, DWORD PTR [r8-65]
	cmp	ax, 5
	ja	SHORT $LN20@Build1Word

; 165  :         return (c - L'A' + 10);

	movzx	r8d, r8w
	sub	r8, 55					; 00000037H
	jmp	SHORT $LN17@Build1Word
$LN20@Build1Word:

; 166  :     return (-1);

	mov	r8, rdx
$LN17@Build1Word:

; 1179 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	shl	rcx, 4
	shl	r8, 32					; 00000020H
	sar	r8, 32					; 00000020H
	add	r8, rcx

; 1180 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	movzx	ecx, WORD PTR [r9+6]

; 158  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [rcx-48]
	cmp	ax, 9
	ja	SHORT $LN23@Build1Word

; 159  :         return (c - L'0');

	movzx	ecx, cx
	sub	rcx, 48					; 00000030H
	jmp	SHORT $LN22@Build1Word
$LN23@Build1Word:

; 160  : 
; 161  :     if (c >= L'a' && c <= L'f')

	lea	eax, DWORD PTR [rcx-97]
	cmp	ax, 5
	ja	SHORT $LN24@Build1Word

; 162  :         return (c - L'a' + 10);

	movzx	ecx, cx
	sub	rcx, 87					; 00000057H
	jmp	SHORT $LN22@Build1Word
$LN24@Build1Word:

; 163  : 
; 164  :     if (c >= L'A' && c <= L'F')

	lea	eax, DWORD PTR [rcx-65]
	cmp	ax, 5
	ja	SHORT $LN25@Build1Word

; 165  :         return (c - L'A' + 10);

	movzx	ecx, cx
	sub	rcx, 55					; 00000037H
	jmp	SHORT $LN22@Build1Word
$LN25@Build1Word:

; 166  :     return (-1);

	mov	rcx, rdx
$LN22@Build1Word:

; 1180 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	shl	r8, 4
	shl	rcx, 32					; 00000020H
	sar	rcx, 32					; 00000020H
	add	rcx, r8

; 1181 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	movzx	r8d, WORD PTR [r9+8]

; 158  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [r8-48]
	cmp	ax, 9
	ja	SHORT $LN28@Build1Word

; 159  :         return (c - L'0');

	movzx	r8d, r8w
	sub	r8, 48					; 00000030H
	jmp	SHORT $LN27@Build1Word
$LN28@Build1Word:

; 160  : 
; 161  :     if (c >= L'a' && c <= L'f')

	lea	eax, DWORD PTR [r8-97]
	cmp	ax, 5
	ja	SHORT $LN29@Build1Word

; 162  :         return (c - L'a' + 10);

	movzx	r8d, r8w
	sub	r8, 87					; 00000057H
	jmp	SHORT $LN27@Build1Word
$LN29@Build1Word:

; 163  : 
; 164  :     if (c >= L'A' && c <= L'F')

	lea	eax, DWORD PTR [r8-65]
	cmp	ax, 5
	ja	SHORT $LN30@Build1Word

; 165  :         return (c - L'A' + 10);

	movzx	r8d, r8w
	sub	r8, 55					; 00000037H
	jmp	SHORT $LN27@Build1Word
$LN30@Build1Word:

; 166  :     return (-1);

	mov	r8, rdx
$LN27@Build1Word:

; 1181 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	shl	rcx, 4
	shl	r8, 32					; 00000020H
	sar	r8, 32					; 00000020H
	add	r8, rcx

; 1182 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	movzx	ecx, WORD PTR [r9+10]

; 158  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [rcx-48]
	cmp	ax, 9
	ja	SHORT $LN33@Build1Word

; 159  :         return (c - L'0');

	movzx	ecx, cx
	sub	rcx, 48					; 00000030H
	jmp	SHORT $LN32@Build1Word
$LN33@Build1Word:

; 160  : 
; 161  :     if (c >= L'a' && c <= L'f')

	lea	eax, DWORD PTR [rcx-97]
	cmp	ax, 5
	ja	SHORT $LN34@Build1Word

; 162  :         return (c - L'a' + 10);

	movzx	ecx, cx
	sub	rcx, 87					; 00000057H
	jmp	SHORT $LN32@Build1Word
$LN34@Build1Word:

; 163  : 
; 164  :     if (c >= L'A' && c <= L'F')

	lea	eax, DWORD PTR [rcx-65]
	cmp	ax, 5
	ja	SHORT $LN35@Build1Word

; 165  :         return (c - L'A' + 10);

	movzx	ecx, cx
	sub	rcx, 55					; 00000037H
	jmp	SHORT $LN32@Build1Word
$LN35@Build1Word:

; 166  :     return (-1);

	mov	rcx, rdx
$LN32@Build1Word:

; 1182 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	shl	r8, 4
	shl	rcx, 32					; 00000020H
	sar	rcx, 32					; 00000020H
	add	rcx, r8

; 1183 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	movzx	r8d, WORD PTR [r9+12]

; 158  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [r8-48]
	cmp	ax, 9
	ja	SHORT $LN38@Build1Word

; 159  :         return (c - L'0');

	movzx	r8d, r8w
	sub	r8, 48					; 00000030H
	jmp	SHORT $LN37@Build1Word
$LN38@Build1Word:

; 160  : 
; 161  :     if (c >= L'a' && c <= L'f')

	lea	eax, DWORD PTR [r8-97]
	cmp	ax, 5
	ja	SHORT $LN39@Build1Word

; 162  :         return (c - L'a' + 10);

	movzx	r8d, r8w
	sub	r8, 87					; 00000057H
	jmp	SHORT $LN37@Build1Word
$LN39@Build1Word:

; 163  : 
; 164  :     if (c >= L'A' && c <= L'F')

	lea	eax, DWORD PTR [r8-65]
	cmp	ax, 5
	ja	SHORT $LN40@Build1Word

; 165  :         return (c - L'A' + 10);

	movzx	r8d, r8w
	sub	r8, 55					; 00000037H
	jmp	SHORT $LN37@Build1Word
$LN40@Build1Word:

; 166  :     return (-1);

	mov	r8, rdx
$LN37@Build1Word:

; 1183 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	shl	rcx, 4
	shl	r8, 32					; 00000020H
	sar	r8, 32					; 00000020H
	add	r8, rcx

; 1184 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	movzx	ecx, WORD PTR [r9+14]

; 158  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [rcx-48]
	cmp	ax, 9
	ja	SHORT $LN43@Build1Word

; 159  :         return (c - L'0');

	movzx	ecx, cx
	sub	rcx, 48					; 00000030H
	jmp	SHORT $LN42@Build1Word
$LN43@Build1Word:

; 160  : 
; 161  :     if (c >= L'a' && c <= L'f')

	lea	eax, DWORD PTR [rcx-97]
	cmp	ax, 5
	ja	SHORT $LN44@Build1Word

; 162  :         return (c - L'a' + 10);

	movzx	ecx, cx
	sub	rcx, 87					; 00000057H
	jmp	SHORT $LN42@Build1Word
$LN44@Build1Word:

; 163  : 
; 164  :     if (c >= L'A' && c <= L'F')

	lea	eax, DWORD PTR [rcx-65]
	cmp	ax, 5
	ja	SHORT $LN45@Build1Word

; 165  :         return (c - L'A' + 10);

	movzx	ecx, cx
	sub	rcx, 55					; 00000037H
	jmp	SHORT $LN42@Build1Word
$LN45@Build1Word:

; 166  :     return (-1);

	mov	rcx, rdx
$LN42@Build1Word:

; 1184 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	shl	r8, 4
	shl	rcx, 32					; 00000020H
	sar	rcx, 32					; 00000020H
	add	rcx, r8

; 1185 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	movzx	r8d, WORD PTR [r9+16]

; 158  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [r8-48]
	cmp	ax, 9
	ja	SHORT $LN48@Build1Word

; 159  :         return (c - L'0');

	movzx	r8d, r8w
	sub	r8, 48					; 00000030H
	jmp	SHORT $LN47@Build1Word
$LN48@Build1Word:

; 160  : 
; 161  :     if (c >= L'a' && c <= L'f')

	lea	eax, DWORD PTR [r8-97]
	cmp	ax, 5
	ja	SHORT $LN49@Build1Word

; 162  :         return (c - L'a' + 10);

	movzx	r8d, r8w
	sub	r8, 87					; 00000057H
	jmp	SHORT $LN47@Build1Word
$LN49@Build1Word:

; 163  : 
; 164  :     if (c >= L'A' && c <= L'F')

	lea	eax, DWORD PTR [r8-65]
	cmp	ax, 5
	ja	SHORT $LN50@Build1Word

; 165  :         return (c - L'A' + 10);

	movzx	r8d, r8w
	sub	r8, 55					; 00000037H
	jmp	SHORT $LN47@Build1Word
$LN50@Build1Word:

; 166  :     return (-1);

	mov	r8, rdx
$LN47@Build1Word:

; 1185 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	shl	rcx, 4
	shl	r8, 32					; 00000020H
	sar	r8, 32					; 00000020H
	add	r8, rcx

; 1186 :     }
; 1187 :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT32_T))
; 1188 :     {
; 1189 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	movzx	ecx, WORD PTR [r9+18]

; 158  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [rcx-48]
	cmp	ax, 9
	ja	SHORT $LN53@Build1Word

; 159  :         return (c - L'0');

	movzx	ecx, cx
	sub	rcx, 48					; 00000030H
	jmp	SHORT $LN52@Build1Word
$LN53@Build1Word:

; 160  : 
; 161  :     if (c >= L'a' && c <= L'f')

	lea	eax, DWORD PTR [rcx-97]
	cmp	ax, 5
	ja	SHORT $LN54@Build1Word

; 162  :         return (c - L'a' + 10);

	movzx	ecx, cx
	sub	rcx, 87					; 00000057H
	jmp	SHORT $LN52@Build1Word
$LN54@Build1Word:

; 163  : 
; 164  :     if (c >= L'A' && c <= L'F')

	lea	eax, DWORD PTR [rcx-65]
	cmp	ax, 5
	ja	SHORT $LN55@Build1Word

; 165  :         return (c - L'A' + 10);

	movzx	ecx, cx
	sub	rcx, 55					; 00000037H
	jmp	SHORT $LN52@Build1Word
$LN55@Build1Word:

; 166  :     return (-1);

	mov	rcx, rdx
$LN52@Build1Word:

; 1186 :     }
; 1187 :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT32_T))
; 1188 :     {
; 1189 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	shl	r8, 4
	shl	rcx, 32					; 00000020H
	sar	rcx, 32					; 00000020H
	add	rcx, r8

; 1190 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	movzx	r8d, WORD PTR [r9+20]

; 158  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [r8-48]
	cmp	ax, 9
	ja	SHORT $LN58@Build1Word

; 159  :         return (c - L'0');

	movzx	r8d, r8w
	sub	r8, 48					; 00000030H
	jmp	SHORT $LN57@Build1Word
$LN58@Build1Word:

; 160  : 
; 161  :     if (c >= L'a' && c <= L'f')

	lea	eax, DWORD PTR [r8-97]
	cmp	ax, 5
	ja	SHORT $LN59@Build1Word

; 162  :         return (c - L'a' + 10);

	movzx	r8d, r8w
	sub	r8, 87					; 00000057H
	jmp	SHORT $LN57@Build1Word
$LN59@Build1Word:

; 163  : 
; 164  :     if (c >= L'A' && c <= L'F')

	lea	eax, DWORD PTR [r8-65]
	cmp	ax, 5
	ja	SHORT $LN60@Build1Word

; 165  :         return (c - L'A' + 10);

	movzx	r8d, r8w
	sub	r8, 55					; 00000037H
	jmp	SHORT $LN57@Build1Word
$LN60@Build1Word:

; 166  :     return (-1);

	mov	r8, rdx
$LN57@Build1Word:

; 1190 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	shl	rcx, 4
	shl	r8, 32					; 00000020H
	sar	r8, 32					; 00000020H
	add	r8, rcx

; 1191 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	movzx	ecx, WORD PTR [r9+22]

; 158  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [rcx-48]
	cmp	ax, 9
	ja	SHORT $LN63@Build1Word

; 159  :         return (c - L'0');

	movzx	ecx, cx
	sub	rcx, 48					; 00000030H
	jmp	SHORT $LN62@Build1Word
$LN63@Build1Word:

; 160  : 
; 161  :     if (c >= L'a' && c <= L'f')

	lea	eax, DWORD PTR [rcx-97]
	cmp	ax, 5
	ja	SHORT $LN64@Build1Word

; 162  :         return (c - L'a' + 10);

	movzx	ecx, cx
	sub	rcx, 87					; 00000057H
	jmp	SHORT $LN62@Build1Word
$LN64@Build1Word:

; 163  : 
; 164  :     if (c >= L'A' && c <= L'F')

	lea	eax, DWORD PTR [rcx-65]
	cmp	ax, 5
	ja	SHORT $LN65@Build1Word

; 165  :         return (c - L'A' + 10);

	movzx	ecx, cx
	sub	rcx, 55					; 00000037H
	jmp	SHORT $LN62@Build1Word
$LN65@Build1Word:

; 166  :     return (-1);

	mov	rcx, rdx
$LN62@Build1Word:

; 1191 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	shl	r8, 4
	shl	rcx, 32					; 00000020H
	sar	rcx, 32					; 00000020H
	add	rcx, r8

; 1192 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	movzx	r8d, WORD PTR [r9+24]

; 158  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [r8-48]
	cmp	ax, 9
	ja	SHORT $LN68@Build1Word

; 159  :         return (c - L'0');

	movzx	r8d, r8w
	sub	r8, 48					; 00000030H
	jmp	SHORT $LN67@Build1Word
$LN68@Build1Word:

; 160  : 
; 161  :     if (c >= L'a' && c <= L'f')

	lea	eax, DWORD PTR [r8-97]
	cmp	ax, 5
	ja	SHORT $LN69@Build1Word

; 162  :         return (c - L'a' + 10);

	movzx	r8d, r8w
	sub	r8, 87					; 00000057H
	jmp	SHORT $LN67@Build1Word
$LN69@Build1Word:

; 163  : 
; 164  :     if (c >= L'A' && c <= L'F')

	lea	eax, DWORD PTR [r8-65]
	cmp	ax, 5
	ja	SHORT $LN70@Build1Word

; 165  :         return (c - L'A' + 10);

	movzx	r8d, r8w
	sub	r8, 55					; 00000037H
	jmp	SHORT $LN67@Build1Word
$LN70@Build1Word:

; 166  :     return (-1);

	mov	r8, rdx
$LN67@Build1Word:

; 1192 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	shl	rcx, 4
	shl	r8, 32					; 00000020H
	sar	r8, 32					; 00000020H
	add	r8, rcx

; 1193 :     }
; 1194 :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT16_T))
; 1195 :     {
; 1196 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	movzx	ecx, WORD PTR [r9+26]

; 158  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [rcx-48]
	cmp	ax, 9
	ja	SHORT $LN73@Build1Word

; 159  :         return (c - L'0');

	movzx	r10d, cx
	sub	r10, 48					; 00000030H
	jmp	SHORT $LN72@Build1Word
$LN73@Build1Word:

; 160  : 
; 161  :     if (c >= L'a' && c <= L'f')

	lea	eax, DWORD PTR [rcx-97]
	cmp	ax, 5
	ja	SHORT $LN74@Build1Word

; 162  :         return (c - L'a' + 10);

	movzx	r10d, cx
	sub	r10, 87					; 00000057H
	jmp	SHORT $LN72@Build1Word
$LN74@Build1Word:

; 163  : 
; 164  :     if (c >= L'A' && c <= L'F')

	lea	eax, DWORD PTR [rcx-65]
	cmp	ax, 5
	ja	SHORT $LN75@Build1Word

; 165  :         return (c - L'A' + 10);

	movzx	r10d, cx
	sub	r10, 55					; 00000037H
	jmp	SHORT $LN72@Build1Word
$LN75@Build1Word:

; 166  :     return (-1);

	mov	r10, rdx
$LN72@Build1Word:

; 1197 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	movzx	ecx, WORD PTR [r9+28]
	shl	r10, 32					; 00000020H
	sar	r10, 32					; 00000020H
	shl	r8, 4

; 158  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [rcx-48]

; 1193 :     }
; 1194 :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT16_T))
; 1195 :     {
; 1196 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	add	r10, r8

; 158  :     if (c >= L'0' && c <= L'9')

	cmp	ax, 9
	ja	SHORT $LN78@Build1Word

; 159  :         return (c - L'0');

	movzx	ecx, cx
	sub	rcx, 48					; 00000030H
	jmp	SHORT $LN77@Build1Word
$LN78@Build1Word:

; 160  : 
; 161  :     if (c >= L'a' && c <= L'f')

	lea	eax, DWORD PTR [rcx-97]
	cmp	ax, 5
	ja	SHORT $LN79@Build1Word

; 162  :         return (c - L'a' + 10);

	movzx	ecx, cx
	sub	rcx, 87					; 00000057H
	jmp	SHORT $LN77@Build1Word
$LN79@Build1Word:

; 163  : 
; 164  :     if (c >= L'A' && c <= L'F')

	lea	eax, DWORD PTR [rcx-65]
	cmp	ax, 5
	ja	SHORT $LN80@Build1Word

; 165  :         return (c - L'A' + 10);

	movzx	ecx, cx
	sub	rcx, 55					; 00000037H
	jmp	SHORT $LN77@Build1Word
$LN80@Build1Word:

; 166  :     return (-1);

	mov	rcx, rdx
$LN77@Build1Word:

; 1198 :     }
; 1199 :     if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))
; 1200 :     {
; 1201 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	movzx	r8d, WORD PTR [r9+30]
	shl	rcx, 32					; 00000020H
	sar	rcx, 32					; 00000020H
	shl	r10, 4

; 158  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [r8-48]

; 1197 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	add	rcx, r10

; 158  :     if (c >= L'0' && c <= L'9')

	cmp	ax, 9
	ja	SHORT $LN83@Build1Word

; 159  :         return (c - L'0');

	movzx	edx, r8w
	sub	rdx, 48					; 00000030H

; 1198 :     }
; 1199 :     if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))
; 1200 :     {
; 1201 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	shl	rdx, 32					; 00000020H
	sar	rdx, 32					; 00000020H
	add	rcx, rcx
	lea	rax, QWORD PTR [rdx+rcx*8]

; 1202 :     }
; 1203 :     return (x);
; 1204 : }

	ret	0
$LN83@Build1Word:

; 161  :     if (c >= L'a' && c <= L'f')

	lea	eax, DWORD PTR [r8-97]
	cmp	ax, 5
	ja	SHORT $LN84@Build1Word

; 162  :         return (c - L'a' + 10);

	movzx	edx, r8w
	sub	rdx, 87					; 00000057H

; 1198 :     }
; 1199 :     if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))
; 1200 :     {
; 1201 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	shl	rdx, 32					; 00000020H
	sar	rdx, 32					; 00000020H
	add	rcx, rcx
	lea	rax, QWORD PTR [rdx+rcx*8]

; 1202 :     }
; 1203 :     return (x);
; 1204 : }

	ret	0
$LN84@Build1Word:

; 164  :     if (c >= L'A' && c <= L'F')

	lea	eax, DWORD PTR [r8-65]
	cmp	ax, 5
	ja	SHORT $LN82@Build1Word

; 165  :         return (c - L'A' + 10);

	movzx	edx, r8w
	sub	rdx, 55					; 00000037H
$LN82@Build1Word:

; 1198 :     }
; 1199 :     if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))
; 1200 :     {
; 1201 :         x = x * 16 + ParseHexDigit(*in_ptr++);

	shl	rdx, 32					; 00000020H
	add	rcx, rcx
	sar	rdx, 32					; 00000020H
	lea	rax, QWORD PTR [rdx+rcx*8]

; 1202 :     }
; 1203 :     return (x);
; 1204 : }

	ret	0
Build1WordFromHexString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT BuildLeading1WordFromHexString
_TEXT	SEGMENT
in_ptr$ = 8
count$ = 16
BuildLeading1WordFromHexString PROC			; COMDAT

; 1160 : {

	mov	r9, rcx

; 1161 :     __UNIT_TYPE x = ParseHexDigit(*in_ptr);

	movzx	ecx, WORD PTR [rcx]

; 158  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [rcx-48]
	cmp	ax, 9
	ja	SHORT $LN6@BuildLeadi

; 159  :         return (c - L'0');

	movzx	r8d, cx
	sub	r8, 48					; 00000030H
	jmp	SHORT $LN5@BuildLeadi
$LN6@BuildLeadi:

; 160  : 
; 161  :     if (c >= L'a' && c <= L'f')

	lea	eax, DWORD PTR [rcx-97]
	cmp	ax, 5
	ja	SHORT $LN7@BuildLeadi

; 162  :         return (c - L'a' + 10);

	movzx	r8d, cx
	sub	r8, 87					; 00000057H
	jmp	SHORT $LN5@BuildLeadi
$LN7@BuildLeadi:

; 163  : 
; 164  :     if (c >= L'A' && c <= L'F')

	lea	eax, DWORD PTR [rcx-65]
	cmp	ax, 5
	ja	SHORT $LN8@BuildLeadi

; 165  :         return (c - L'A' + 10);

	movzx	r8d, cx
	sub	r8, 55					; 00000037H
	jmp	SHORT $LN5@BuildLeadi
$LN8@BuildLeadi:

; 166  :     return (-1);

	mov	r8, -1
$LN5@BuildLeadi:

; 1161 :     __UNIT_TYPE x = ParseHexDigit(*in_ptr);

	shl	r8, 32					; 00000020H

; 1162 :     ++in_ptr;

	add	r9, 2
	sar	r8, 32					; 00000020H
	sub	rdx, 1

; 1163 :     --count;
; 1164 :     while (count > 0)

	je	SHORT $LN19@BuildLeadi
	npad	8
$LL2@BuildLeadi:

; 1165 :     {
; 1166 :         x = x * 16 + ParseHexDigit(*in_ptr);

	movzx	ecx, WORD PTR [r9]

; 158  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [rcx-48]
	cmp	ax, 9
	ja	SHORT $LN11@BuildLeadi

; 159  :         return (c - L'0');

	movzx	eax, cx
	sub	rax, 48					; 00000030H
	jmp	SHORT $LN10@BuildLeadi
$LN11@BuildLeadi:

; 160  : 
; 161  :     if (c >= L'a' && c <= L'f')

	lea	eax, DWORD PTR [rcx-97]
	cmp	ax, 5
	ja	SHORT $LN12@BuildLeadi

; 162  :         return (c - L'a' + 10);

	movzx	eax, cx
	sub	rax, 87					; 00000057H
	jmp	SHORT $LN10@BuildLeadi
$LN12@BuildLeadi:

; 163  : 
; 164  :     if (c >= L'A' && c <= L'F')

	lea	eax, DWORD PTR [rcx-65]
	cmp	ax, 5
	ja	SHORT $LN13@BuildLeadi

; 165  :         return (c - L'A' + 10);

	movzx	eax, cx
	sub	rax, 55					; 00000037H
	jmp	SHORT $LN10@BuildLeadi
$LN13@BuildLeadi:

; 166  :     return (-1);

	mov	rax, -1
$LN10@BuildLeadi:

; 1165 :     {
; 1166 :         x = x * 16 + ParseHexDigit(*in_ptr);

	shl	rax, 32					; 00000020H
	mov	rcx, r8
	sar	rax, 32					; 00000020H

; 1167 :         ++in_ptr;

	add	r9, 2
	shl	rcx, 4
	lea	r8, QWORD PTR [rcx+rax]

; 1168 :         --count;

	sub	rdx, 1
	jne	SHORT $LL2@BuildLeadi
$LN19@BuildLeadi:

; 1169 :     }
; 1170 :     return (x);
; 1171 : }

	mov	rax, r8
	ret	0
BuildLeading1WordFromHexString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT TryParseDN
_TEXT	SEGMENT
int_part_buf_words$ = 48
frac_part_buf_words$ = 56
bin_buf_words$ = 64
work_buf_code$1 = 72
bin_buf_count$ = 72
int_part_buf_code$ = 80
frac_part_buf_code$ = 88
bin_buf_code$ = 96
out_buf$1$ = 104
work_buf_words$2 = 112
no_light_check_code$ = 120
source$ = 176
number_styles$ = 184
format_option$ = 192
o_sign$ = 200
o_abs$ = 208
TryParseDN PROC						; COMDAT

; 1021 : {

	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	push	rbp
	push	rdi
	push	r13
	push	r14
	push	r15
	mov	rbp, rsp
	sub	rsp, 128				; 00000080H
	mov	r15, r9
	mov	r13, r8
	mov	r14d, edx
	mov	rbx, rcx

; 1022 :     PMC_STATUS_CODE result;
; 1023 : #ifdef _M_IX86
; 1024 :     int word_digit_count = 9;
; 1025 : #elif defined(_M_IX64)
; 1026 :     int word_digit_count = 19;
; 1027 : #else
; 1028 : #error unknown platform
; 1029 : #endif
; 1030 :     __UNIT_TYPE source_len = lstrlenW(source);

	call	QWORD PTR __imp_lstrlenW
	movsxd	rsi, eax

; 1031 : 
; 1032 :     __UNIT_TYPE int_part_buf_code;
; 1033 :     __UNIT_TYPE int_part_buf_words;
; 1034 :     wchar_t* int_part_buf = (wchar_t*)AllocateBlock((source_len + 1) * sizeof(wchar_t) * 8, &int_part_buf_words, &int_part_buf_code);

	lea	r8, QWORD PTR int_part_buf_code$[rbp-128]
	inc	rsi
	lea	rdx, QWORD PTR int_part_buf_words$[rbp-128]
	shl	rsi, 4
	mov	rcx, rsi
	call	AllocateBlock
	mov	rdi, rax

; 1035 :     if (int_part_buf == NULL)

	test	rax, rax
	je	SHORT $LN56@TryParseDN

; 1036 :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 1037 : 
; 1038 :     __UNIT_TYPE frac_part_buf_code;
; 1039 :     __UNIT_TYPE frac_part_buf_words;
; 1040 :     wchar_t* frac_part_buf = (wchar_t*)AllocateBlock((source_len + 1) * sizeof(wchar_t) * 8, &frac_part_buf_words, &frac_part_buf_code);

	lea	r8, QWORD PTR frac_part_buf_code$[rbp-128]
	mov	rcx, rsi
	lea	rdx, QWORD PTR frac_part_buf_words$[rbp-128]
	call	AllocateBlock
	mov	rsi, rax

; 1041 :     if (frac_part_buf == NULL)

	test	rax, rax
	jne	SHORT $LN10@TryParseDN

; 1042 :     {
; 1043 :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	rdx, QWORD PTR int_part_buf_words$[rbp-128]
	mov	rcx, rdi
	call	DeallocateBlock
$LN56@TryParseDN:

; 1157 : }

	mov	eax, -5
	jmp	$LN1@TryParseDN
$LN10@TryParseDN:

; 1044 :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 1045 :     }
; 1046 :     int result_parsing = ParseAsDecimalNumberString(source, number_styles, format_option, o_sign, int_part_buf, frac_part_buf);

	mov	QWORD PTR [rsp+40], rsi
	mov	r9, r15
	mov	r8, r13
	mov	QWORD PTR [rsp+32], rdi
	mov	edx, r14d
	mov	rcx, rbx
	call	ParseAsDecimalNumberString

; 1047 :     if ((result = CheckBlockLight((__UNIT_TYPE*)int_part_buf, int_part_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR int_part_buf_code$[rbp-128]
	mov	rcx, rdi
	mov	ebx, eax
	call	CheckBlockLight
	test	eax, eax
	jne	$LN1@TryParseDN

; 1048 :         return (result);
; 1049 :     if ((result = CheckBlockLight((__UNIT_TYPE*)frac_part_buf, frac_part_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR frac_part_buf_code$[rbp-128]
	mov	rcx, rsi
	call	CheckBlockLight
	test	eax, eax
	jne	$LN1@TryParseDN

; 1050 :         return (result);
; 1051 :     if (!result_parsing)

	test	ebx, ebx
	je	SHORT $LN57@TryParseDN

; 1052 :     {
; 1053 :         DeallocateBlock((__UNIT_TYPE*)frac_part_buf, frac_part_buf_words);
; 1054 :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);
; 1055 :         return (PMC_STATUS_PARSING_ERROR);
; 1056 :     }
; 1057 :     // 整数部と小数部がともに空ならばエラーとする
; 1058 :     if (int_part_buf[0] == L'\0' && frac_part_buf[0] == L'\0')

	movzx	eax, WORD PTR [rdi]
	test	ax, ax
	jne	SHORT $LN49@TryParseDN
	cmp	WORD PTR [rsi], ax
	jne	SHORT $LN40@TryParseDN
$LN57@TryParseDN:

; 1157 : }

	mov	rdx, QWORD PTR frac_part_buf_words$[rbp-128]
	mov	rcx, rsi
	call	DeallocateBlock
	mov	rdx, QWORD PTR int_part_buf_words$[rbp-128]
	mov	rcx, rdi
	call	DeallocateBlock
	mov	eax, 1
	jmp	$LN1@TryParseDN
$LN49@TryParseDN:

; 1059 :     {
; 1060 :         DeallocateBlock((__UNIT_TYPE*)frac_part_buf, frac_part_buf_words);
; 1061 :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);
; 1062 :         return (PMC_STATUS_PARSING_ERROR);
; 1063 :     }
; 1064 : 
; 1065 :     if (int_part_buf[0] == L'0')

	cmp	ax, 48					; 00000030H
	jne	SHORT $LN40@TryParseDN

; 1066 :     {
; 1067 :         // 整数部の先行する 0 を削除する
; 1068 :         wchar_t* s_ptr = int_part_buf;

	mov	rcx, rdi

; 1069 :         wchar_t* d_ptr = int_part_buf;

	mov	rdx, rdi
$LL2@TryParseDN:

; 1070 :         while (*s_ptr == L'0')

	movzx	eax, WORD PTR [rcx+2]

; 1071 :             ++s_ptr;

	add	rcx, 2
	cmp	ax, 48					; 00000030H
	je	SHORT $LL2@TryParseDN

; 1072 :         for (;;)
; 1073 :         {
; 1074 :             *d_ptr = *s_ptr;

	mov	WORD PTR [rdi], ax

; 1075 :             if (*s_ptr == L'\0')

	cmp	WORD PTR [rcx], 0
	je	SHORT $LN40@TryParseDN
	npad	7
$LL4@TryParseDN:

; 1072 :         for (;;)
; 1073 :         {
; 1074 :             *d_ptr = *s_ptr;

	movzx	eax, WORD PTR [rcx+2]

; 1076 :                 break;
; 1077 :             ++s_ptr;

	lea	rcx, QWORD PTR [rcx+2]

; 1078 :             ++d_ptr;

	lea	rdx, QWORD PTR [rdx+2]
	mov	WORD PTR [rdx], ax
	cmp	WORD PTR [rcx], 0
	jne	SHORT $LL4@TryParseDN
$LN40@TryParseDN:

; 1079 :         }
; 1080 :     }
; 1081 : 
; 1082 :     // 小数部の末尾の 0 を削除する
; 1083 :     wchar_t* frac_ptr = frac_part_buf + lstrlenW(frac_part_buf);

	mov	rcx, rsi
	call	QWORD PTR __imp_lstrlenW
	movsxd	rcx, eax
	lea	rax, QWORD PTR [rsi+rcx*2]

; 1084 :     while (frac_ptr > frac_part_buf && frac_ptr[-1] == L'0')

	cmp	rax, rsi
	jbe	SHORT $LN54@TryParseDN
	npad	6
$LL7@TryParseDN:
	cmp	WORD PTR [rax-2], 48			; 00000030H
	lea	rcx, QWORD PTR [rax-2]
	jne	SHORT $LN54@TryParseDN

; 1085 :         --frac_ptr;

	mov	rax, rcx
	cmp	rcx, rsi
	ja	SHORT $LL7@TryParseDN
$LN54@TryParseDN:

; 1086 :     *frac_ptr = L'\0';

	xor	ecx, ecx
	mov	WORD PTR [rax], cx

; 1087 : 
; 1088 :     // 小数部が 0 ではない場合、エラーとする
; 1089 :     if (frac_part_buf[0] != L'\0')

	cmp	WORD PTR [rsi], cx
	jne	$LN57@TryParseDN

; 1090 :     {
; 1091 :         DeallocateBlock((__UNIT_TYPE*)frac_part_buf, frac_part_buf_words);
; 1092 :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);
; 1093 :         return (PMC_STATUS_PARSING_ERROR);
; 1094 :     }
; 1095 : 
; 1096 :     if (int_part_buf[0] == L'\0')

	cmp	WORD PTR [rdi], cx
	jne	SHORT $LN18@TryParseDN

; 1097 :     {
; 1098 :         // 整数部が空である場合
; 1099 :         
; 1100 :         // 符号を 0 に 修正する
; 1101 :         *o_sign = 0;

	mov	BYTE PTR [r15], cl

; 1102 : 
; 1103 :         // 整数部に 0 を設定する
; 1104 :         int_part_buf[0] = L'0';

	mov	DWORD PTR [rdi], 48			; 00000030H
$LN18@TryParseDN:

; 1105 :         int_part_buf[1] = L'\0';
; 1106 :     }
; 1107 : 
; 1108 :     // 小数部は捨てる
; 1109 :     DeallocateBlock((__UNIT_TYPE*)frac_part_buf, frac_part_buf_words);

	mov	rdx, QWORD PTR frac_part_buf_words$[rbp-128]
	mov	rcx, rsi
	call	DeallocateBlock

; 1113 :     __UNIT_TYPE* bin_buf = AllocateBlock(_DIVIDE_CEILING_SIZE(lstrlenW(int_part_buf), word_digit_count) * __UNIT_TYPE_BIT_COUNT, &bin_buf_words, &bin_buf_code);

	mov	rcx, rdi
	call	QWORD PTR __imp_lstrlenW
	movsxd	rcx, eax
	lea	r8, QWORD PTR bin_buf_code$[rbp-128]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 193  :         return ((u + v - 1) / v);

	add	rcx, 18
	mov	rax, -2912643801112034465		; d79435e50d79435fH
	mul	rcx
	mov	rcx, rdx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 1113 :     __UNIT_TYPE* bin_buf = AllocateBlock(_DIVIDE_CEILING_SIZE(lstrlenW(int_part_buf), word_digit_count) * __UNIT_TYPE_BIT_COUNT, &bin_buf_words, &bin_buf_code);

	lea	rdx, QWORD PTR bin_buf_words$[rbp-128]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 193  :         return ((u + v - 1) / v);

	shr	rcx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 1113 :     __UNIT_TYPE* bin_buf = AllocateBlock(_DIVIDE_CEILING_SIZE(lstrlenW(int_part_buf), word_digit_count) * __UNIT_TYPE_BIT_COUNT, &bin_buf_words, &bin_buf_code);

	shl	rcx, 6
	call	AllocateBlock
	mov	r15, rax

; 1114 :     if (bin_buf == NULL)

	mov	rcx, rdi
	test	rax, rax
	jne	SHORT $LN19@TryParseDN

; 1115 :     {
; 1116 :         DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	rdx, QWORD PTR int_part_buf_words$[rbp-128]
	call	DeallocateBlock

; 1117 :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	lea	eax, QWORD PTR [r15-5]
	jmp	$LN1@TryParseDN
$LN19@TryParseDN:

; 1118 :     }
; 1119 :     __UNIT_TYPE bin_buf_count;
; 1120 :     BuildBinaryFromDecimalString(int_part_buf, bin_buf, &bin_buf_count, format_option->NativeDigits);

	lea	r9, QWORD PTR [r13+146]
	mov	rdx, r15
	lea	r8, QWORD PTR bin_buf_count$[rbp-128]
	call	BuildBinaryFromDecimalString

; 1121 :     if ((result = CheckBlockLight(bin_buf, bin_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR bin_buf_code$[rbp-128]
	mov	rcx, r15
	call	CheckBlockLight
	test	eax, eax
	jne	$LN1@TryParseDN

; 1122 :         return (result);
; 1123 :     DeallocateBlock((__UNIT_TYPE*)int_part_buf, int_part_buf_words);

	mov	rdx, QWORD PTR int_part_buf_words$[rbp-128]
	mov	rcx, rdi
	mov	QWORD PTR [rsp+176], r12
	call	DeallocateBlock

; 1124 : 
; 1125 :     __UNIT_TYPE o_bit_count = bin_buf_count * __UNIT_TYPE_BIT_COUNT;

	mov	r13, QWORD PTR bin_buf_count$[rbp-128]

; 1126 :     __UNIT_TYPE no_light_check_code;
; 1127 :     if ((result = AllocateNumber(o_abs, o_bit_count, &no_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR no_light_check_code$[rbp-128]
	mov	r12, QWORD PTR o_abs$[rbp-128]
	mov	rdi, r13
	shl	rdi, 6
	mov	rcx, r12
	mov	rdx, rdi
	call	AllocateNumber
	mov	esi, eax
	test	eax, eax
	je	SHORT $LN21@TryParseDN

; 1128 :     {
; 1129 :         DeallocateBlock(bin_buf, bin_buf_words);

	mov	rdx, QWORD PTR bin_buf_words$[rbp-128]
	mov	rcx, r15
	call	DeallocateBlock

; 1130 :         return (result);

	mov	eax, esi
	jmp	$LN55@TryParseDN
$LN21@TryParseDN:

; 1131 :     }
; 1132 : 
; 1133 :     if ((result = ConvertCardinalNumber(bin_buf, bin_buf_count, (*o_abs)->BLOCK)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR [r12]

; 997  :     __UNIT_TYPE* work_buf = AllocateBlock(__UNIT_TYPE_BIT_COUNT * (in_buf_count + 1), &work_buf_words, &work_buf_code);

	lea	rcx, QWORD PTR [rdi+64]
	lea	r8, QWORD PTR work_buf_code$1[rbp-128]
	lea	rdx, QWORD PTR work_buf_words$2[rbp-128]

; 1131 :     }
; 1132 : 
; 1133 :     if ((result = ConvertCardinalNumber(bin_buf, bin_buf_count, (*o_abs)->BLOCK)) != PMC_STATUS_OK)

	mov	rax, QWORD PTR [rax+64]
	mov	QWORD PTR out_buf$1$[rbp-128], rax

; 997  :     __UNIT_TYPE* work_buf = AllocateBlock(__UNIT_TYPE_BIT_COUNT * (in_buf_count + 1), &work_buf_words, &work_buf_code);

	call	AllocateBlock
	mov	r14, rax

; 998  :     if (work_buf == NULL)

	test	rax, rax
	jne	SHORT $LN31@TryParseDN

; 999  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	lea	edi, QWORD PTR [rax-5]
	jmp	SHORT $LN28@TryParseDN
$LN31@TryParseDN:

; 1000 : 
; 1001 :     __UNIT_TYPE work_buf_count = 1;
; 1002 :     work_buf[0] = in_buf[0];

	mov	rax, QWORD PTR [r15]

; 1003 :     ++in_buf;
; 1004 :     --in_buf_count;

	lea	rsi, QWORD PTR [r13-1]
	mov	QWORD PTR [r14], rax
	mov	ebx, 1
	lea	rdi, QWORD PTR [r15+8]

; 1005 : 
; 1006 :     while (in_buf_count > 0)

	test	rsi, rsi
	je	SHORT $LN30@TryParseDN
$LL29@TryParseDN:

; 1007 :     {
; 1008 :         __UNIT_TYPE* w_tail = (*fp_MultiplyAndAdd)(work_buf, work_buf_count, *in_buf);

	mov	r8, QWORD PTR [rdi]
	mov	rdx, rbx
	mov	rcx, r14
	call	QWORD PTR fp_MultiplyAndAdd
	mov	rbx, rax

; 1009 :         work_buf_count = w_tail - work_buf;
; 1010 :         ++in_buf;

	lea	rdi, QWORD PTR [rdi+8]
	sub	rbx, r14
	sar	rbx, 3

; 1011 :         --in_buf_count;

	sub	rsi, 1
	jne	SHORT $LL29@TryParseDN
$LN30@TryParseDN:

; 1012 :     }
; 1013 :     if ((result = CheckBlockLight(work_buf, work_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR work_buf_code$1[rbp-128]
	mov	rcx, r14
	call	CheckBlockLight
	mov	edi, eax
	test	eax, eax
	jne	SHORT $LN28@TryParseDN
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 64   :         __movsq(d, s, count);

	mov	rdi, QWORD PTR out_buf$1$[rbp-128]
	mov	rsi, r14
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 1016 :     DeallocateBlock(work_buf, work_buf_words);

	mov	rdx, QWORD PTR work_buf_words$2[rbp-128]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 64   :         __movsq(d, s, count);

	mov	rcx, rbx
	rep movsq
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 1016 :     DeallocateBlock(work_buf, work_buf_words);

	mov	rcx, r14
	call	DeallocateBlock

; 1017 :     return (PMC_STATUS_OK);

	xor	edi, edi
$LN28@TryParseDN:

; 1131 :     }
; 1132 : 
; 1133 :     if ((result = ConvertCardinalNumber(bin_buf, bin_buf_count, (*o_abs)->BLOCK)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR [r12]
	test	edi, edi
	je	SHORT $LN22@TryParseDN

; 1134 :     {
; 1135 :         DeallocateNumber(*o_abs);

	call	DeallocateNumber

; 1136 :         DeallocateBlock(bin_buf, bin_buf_words);

	mov	rdx, QWORD PTR bin_buf_words$[rbp-128]
	mov	rcx, r15
	call	DeallocateBlock

; 1137 :         return (result);

	mov	eax, edi
	jmp	SHORT $LN55@TryParseDN
$LN22@TryParseDN:

; 1138 :     }
; 1139 :     if ((result = CheckBlockLight((*o_abs)->BLOCK, no_light_check_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR no_light_check_code$[rbp-128]
	mov	rcx, QWORD PTR [rcx+64]
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN55@TryParseDN

; 1140 :         return (result);
; 1141 :     DeallocateBlock(bin_buf, bin_buf_words);

	mov	rdx, QWORD PTR bin_buf_words$[rbp-128]
	mov	rcx, r15
	call	DeallocateBlock

; 1142 :     CommitNumber(*o_abs);

	mov	rcx, QWORD PTR [r12]
	call	CommitNumber

; 1143 :     if ((*o_abs)->IS_ZERO)

	mov	rcx, QWORD PTR [r12]
	test	BYTE PTR [rcx], 1
	je	SHORT $LN24@TryParseDN

; 1144 :     {
; 1145 :         DeallocateNumber(*o_abs);

	call	DeallocateNumber

; 1146 :         *o_abs = &number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR [r12], rax
$LN24@TryParseDN:

; 1147 :     }
; 1148 : #ifdef _DEBUG
; 1149 :     if (*o_sign != 0 && *o_sign != 1 && *o_sign != -1)
; 1150 :         return (PMC_STATUS_INTERNAL_ERROR);
; 1151 :     if (*o_sign == 0 && !(*o_abs)->IS_ZERO)
; 1152 :         return (PMC_STATUS_INTERNAL_ERROR);
; 1153 :     if (*o_sign != 0 && (*o_abs)->IS_ZERO)
; 1154 :         return (PMC_STATUS_INTERNAL_ERROR);
; 1155 : #endif
; 1156 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN55@TryParseDN:
	mov	r12, QWORD PTR [rsp+176]
$LN1@TryParseDN:

; 1157 : }

	lea	r11, QWORD PTR [rsp+128]
	mov	rbx, QWORD PTR [r11+56]
	mov	rsi, QWORD PTR [r11+64]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	rdi
	pop	rbp
	ret	0
TryParseDN ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT ConvertCardinalNumber
_TEXT	SEGMENT
in_buf$ = 64
work_buf_code$ = 72
in_buf_count$ = 72
out_buf$ = 80
work_buf_words$ = 88
ConvertCardinalNumber PROC				; COMDAT

; 993  : {

	mov	QWORD PTR [rsp+24], rbp
	push	rsi
	push	rdi
	push	r14
	sub	rsp, 32					; 00000020H
	mov	rdi, rcx
	mov	rbp, r8

; 994  :     PMC_STATUS_CODE result;
; 995  :     __UNIT_TYPE work_buf_code;
; 996  :     __UNIT_TYPE work_buf_words;
; 997  :     __UNIT_TYPE* work_buf = AllocateBlock(__UNIT_TYPE_BIT_COUNT * (in_buf_count + 1), &work_buf_words, &work_buf_code);

	lea	rcx, QWORD PTR [rdx+1]
	mov	rsi, rdx
	shl	rcx, 6
	lea	r8, QWORD PTR work_buf_code$[rsp]
	lea	rdx, QWORD PTR work_buf_words$[rsp]
	call	AllocateBlock
	mov	r14, rax

; 998  :     if (work_buf == NULL)

	test	rax, rax
	jne	SHORT $LN4@ConvertCar

; 999  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	lea	eax, QWORD PTR [r14-5]

; 1018 : }

	mov	rbp, QWORD PTR [rsp+80]
	add	rsp, 32					; 00000020H
	pop	r14
	pop	rdi
	pop	rsi
	ret	0
$LN4@ConvertCar:

; 1000 : 
; 1001 :     __UNIT_TYPE work_buf_count = 1;
; 1002 :     work_buf[0] = in_buf[0];

	mov	rax, QWORD PTR [rdi]

; 1003 :     ++in_buf;

	add	rdi, 8
	mov	QWORD PTR [rsp+64], rbx
	mov	ebx, 1
	mov	QWORD PTR [r14], rax
	sub	rsi, rbx

; 1004 :     --in_buf_count;
; 1005 : 
; 1006 :     while (in_buf_count > 0)

	je	SHORT $LN3@ConvertCar
$LL2@ConvertCar:

; 1007 :     {
; 1008 :         __UNIT_TYPE* w_tail = (*fp_MultiplyAndAdd)(work_buf, work_buf_count, *in_buf);

	mov	r8, QWORD PTR [rdi]
	mov	rdx, rbx
	mov	rcx, r14
	call	QWORD PTR fp_MultiplyAndAdd
	mov	rbx, rax

; 1009 :         work_buf_count = w_tail - work_buf;
; 1010 :         ++in_buf;

	lea	rdi, QWORD PTR [rdi+8]
	sub	rbx, r14
	sar	rbx, 3

; 1011 :         --in_buf_count;

	sub	rsi, 1
	jne	SHORT $LL2@ConvertCar
$LN3@ConvertCar:

; 1012 :     }
; 1013 :     if ((result = CheckBlockLight(work_buf, work_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR work_buf_code$[rsp]
	mov	rcx, r14
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN13@ConvertCar

; 1016 :     DeallocateBlock(work_buf, work_buf_words);

	mov	rdx, QWORD PTR work_buf_words$[rsp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 64   :         __movsq(d, s, count);

	mov	rdi, rbp
	mov	rsi, r14
	mov	rcx, rbx
	rep movsq
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 1016 :     DeallocateBlock(work_buf, work_buf_words);

	mov	rcx, r14
	call	DeallocateBlock

; 1017 :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN13@ConvertCar:

; 1018 : }

	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+80]
	add	rsp, 32					; 00000020H
	pop	r14
	pop	rdi
	pop	rsi
	ret	0
ConvertCardinalNumber ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT MultiplyAndAdd_using_ADCX_MULX
_TEXT	SEGMENT
k$ = 0
k$ = 8
k$ = 16
k$ = 24
k$ = 32
k$ = 40
k$ = 48
k$ = 56
k$ = 64
k$ = 72
k$ = 80
k$ = 88
k$ = 96
k$ = 104
k$ = 112
k$ = 120
k$ = 128
k$ = 136
k$ = 144
k$ = 152
k$ = 160
k$ = 168
k$ = 176
k$ = 184
k$ = 192
k$ = 200
k$ = 208
k$ = 216
k$ = 224
k$ = 232
k$ = 240
k$ = 248
k$ = 256
k$ = 264
k$ = 272
k$ = 280
k$ = 288
k$ = 296
k$ = 304
k$ = 312
k$ = 320
k$ = 328
k$ = 336
k$ = 344
k$ = 352
k$ = 360
k$ = 368
k$ = 376
k$ = 384
k$ = 392
k$ = 400
k$ = 408
k$ = 416
k$ = 424
k$ = 432
k$ = 440
k$ = 448
k$ = 456
k$ = 464
t_hi$1 = 472
t_hi$2 = 480
t_hi$3 = 488
t_hi$4 = 496
t_hi$5 = 504
t_hi$6 = 512
t_hi$7 = 520
t_hi$8 = 528
t_hi$9 = 536
t_hi$10 = 544
t_hi$11 = 552
t_hi$12 = 560
t_hi$13 = 568
t_hi$14 = 576
t_hi$15 = 584
t_hi$16 = 592
t_hi$17 = 600
t_hi$18 = 608
t_hi$19 = 616
t_hi$20 = 624
t_hi$21 = 632
t_hi$22 = 640
t_hi$23 = 648
t_hi$24 = 656
t_hi$25 = 664
t_hi$26 = 672
t_hi$27 = 680
t_hi$28 = 688
t_hi$29 = 696
t_hi$30 = 704
t_hi$31 = 712
t_hi$32 = 720
t_hi$33 = 728
t_hi$34 = 736
t_hi$35 = 744
t_hi$36 = 752
t_hi$37 = 760
t_hi$38 = 768
t_hi$39 = 776
t_hi$40 = 784
t_hi$41 = 792
t_hi$42 = 800
t_hi$43 = 808
t_hi$44 = 816
t_hi$45 = 824
t_hi$46 = 832
t_hi$47 = 840
t_hi$48 = 848
t_hi$49 = 856
t_hi$50 = 864
t_hi$51 = 872
t_hi$52 = 880
t_hi$53 = 888
t_hi$54 = 896
t_hi$55 = 904
t_hi$56 = 912
t_hi$57 = 920
t_hi$58 = 928
t_hi$59 = 936
t_hi$60 = 944
t_hi$61 = 952
t_hi$62 = 960
t_hi$63 = 968
k$ = 1008
u_buf$ = 1008
k$ = 1016
u_count$ = 1016
k$ = 1024
x$ = 1024
k$ = 1032
MultiplyAndAdd_using_ADCX_MULX PROC			; COMDAT

; 850  : {

	push	rbp
	push	rbx
	push	rdi
	lea	rbp, QWORD PTR [rsp-720]
	sub	rsp, 976				; 000003d0H

; 851  :     __UNIT_TYPE k = x;
; 852  :     __UNIT_TYPE count = u_count >> 5;

	mov	rbx, rdx

; 853  :     while (count > 0)

	xor	edi, edi
	shr	rbx, 5
	mov	r11, rdx
	mov	r10, r8
	mov	rdx, -8446744073709551616		; 8ac7230489e80000H
	test	rbx, rbx
	je	$LN3@MultiplyAn
$LL2@MultiplyAn:

; 854  :     {
; 855  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

	mov	rax, QWORD PTR [rcx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r10

; 334  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$1[rbp-256], r9

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 856  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

	mov	rax, QWORD PTR [rcx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r9
	mov	QWORD PTR k$[rbp-256], r9
	mov	QWORD PTR [rcx+8], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 857  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[2], &u_buf[2]);

	mov	rax, QWORD PTR [rcx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax
	mov	QWORD PTR t_hi$2[rbp-256], r10

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	add	r8, r10
	mov	QWORD PTR k$[rbp-256], r10
	mov	QWORD PTR [rcx+16], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 858  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[3], &u_buf[3]);

	mov	rax, QWORD PTR [rcx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax
	mov	QWORD PTR t_hi$3[rbp-256], r9

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	add	r8, r9
	mov	QWORD PTR k$[rbp-256], r9
	mov	QWORD PTR [rcx+24], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 859  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[4], &u_buf[4]);

	mov	rax, QWORD PTR [rcx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax
	mov	QWORD PTR t_hi$4[rbp-256], r10

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	add	r8, r10
	mov	QWORD PTR k$[rbp-256], r10
	mov	QWORD PTR [rcx+32], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 860  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[5], &u_buf[5]);

	mov	rax, QWORD PTR [rcx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax
	mov	QWORD PTR t_hi$5[rbp-256], r9

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	add	r8, r9
	mov	QWORD PTR k$[rsp], r9
	mov	QWORD PTR [rcx+40], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 861  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[6], &u_buf[6]);

	mov	rax, QWORD PTR [rcx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax
	mov	QWORD PTR t_hi$6[rbp-256], r10

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	add	r8, r10
	mov	QWORD PTR k$[rsp], r10
	mov	QWORD PTR [rcx+48], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 862  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[7], &u_buf[7]);

	mov	rax, QWORD PTR [rcx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax
	mov	QWORD PTR t_hi$7[rbp-256], r9

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	add	r8, r9
	mov	QWORD PTR k$[rsp], r9
	mov	QWORD PTR [rcx+56], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 863  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[8], &u_buf[8]);

	mov	rax, QWORD PTR [rcx+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax
	mov	QWORD PTR t_hi$8[rbp-256], r10

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	add	r8, r10
	mov	QWORD PTR k$[rsp], r10
	mov	QWORD PTR [rcx+64], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 864  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[9], &u_buf[9]);

	mov	rax, QWORD PTR [rcx+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax
	mov	QWORD PTR t_hi$9[rbp-256], r9

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	add	r8, r9
	mov	QWORD PTR k$[rsp], r9
	mov	QWORD PTR [rcx+72], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 865  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[10], &u_buf[10]);

	mov	rax, QWORD PTR [rcx+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax
	mov	QWORD PTR t_hi$10[rbp-256], r10

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	add	r8, r10
	mov	QWORD PTR k$[rsp], r10
	mov	QWORD PTR [rcx+80], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 866  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[11], &u_buf[11]);

	mov	rax, QWORD PTR [rcx+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax
	mov	QWORD PTR t_hi$11[rbp-256], r9

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi

; 334  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$12[rbp-256], r10

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r9
	mov	QWORD PTR k$[rsp], r9
	mov	QWORD PTR [rcx+88], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 867  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[12], &u_buf[12]);

	mov	rax, QWORD PTR [rcx+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r10

; 334  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$13[rbp-256], r9

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+96], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 868  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[13], &u_buf[13]);

	mov	rax, QWORD PTR [rcx+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	mov	QWORD PTR k$[rsp], r10

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r9
	mov	QWORD PTR k$[rsp], r9
	mov	QWORD PTR [rcx+104], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 869  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[14], &u_buf[14]);

	mov	rax, QWORD PTR [rcx+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax
	mov	QWORD PTR t_hi$14[rbp-256], r10

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	add	r8, r10

; 334  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$15[rbp-256], r9

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+112], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 870  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[15], &u_buf[15]);

	mov	rax, QWORD PTR [rcx+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	mov	QWORD PTR k$[rsp], r10

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r9
	mov	QWORD PTR k$[rsp], r9
	mov	QWORD PTR [rcx+120], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 871  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[16], &u_buf[16]);

	mov	rax, QWORD PTR [rcx+128]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax
	mov	QWORD PTR t_hi$16[rbp-256], r10

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	add	r8, r10

; 334  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$17[rbp-256], r9

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+128], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 872  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[17], &u_buf[17]);

	mov	rax, QWORD PTR [rcx+136]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	mov	QWORD PTR k$[rsp], r10

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r9
	mov	QWORD PTR k$[rsp], r9
	mov	QWORD PTR [rcx+136], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 873  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[18], &u_buf[18]);

	mov	rax, QWORD PTR [rcx+144]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax
	mov	QWORD PTR t_hi$18[rbp-256], r10

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	add	r8, r10

; 334  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$19[rbp-256], r9

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+144], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 874  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[19], &u_buf[19]);

	mov	rax, QWORD PTR [rcx+152]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	mov	QWORD PTR k$[rsp], r10

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r9
	mov	QWORD PTR k$[rsp], r9
	mov	QWORD PTR [rcx+152], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 875  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[20], &u_buf[20]);

	mov	rax, QWORD PTR [rcx+160]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax
	mov	QWORD PTR t_hi$20[rbp-256], r10

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	add	r8, r10

; 334  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$21[rbp-256], r9

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+160], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 876  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[21], &u_buf[21]);

	mov	rax, QWORD PTR [rcx+168]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	mov	QWORD PTR k$[rsp], r10

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r9
	mov	QWORD PTR k$[rbp-256], r9
	mov	QWORD PTR [rcx+168], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 877  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[22], &u_buf[22]);

	mov	rax, QWORD PTR [rcx+176]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax
	mov	QWORD PTR t_hi$22[rbp-256], r10

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	add	r8, r10

; 334  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$23[rbp-256], r9

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+176], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 878  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[23], &u_buf[23]);

	mov	rax, QWORD PTR [rcx+184]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	mov	QWORD PTR k$[rbp-256], r9
	mov	QWORD PTR k$[rbp-256], r10

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r9

; 334  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$24[rbp-256], r10

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+184], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 879  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[24], &u_buf[24]);

	mov	rax, QWORD PTR [rcx+192]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r10
	mov	QWORD PTR k$[rbp-256], r10
	mov	QWORD PTR [rcx+192], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 880  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[25], &u_buf[25]);

	mov	rax, QWORD PTR [rcx+200]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax
	mov	QWORD PTR t_hi$25[rbp-256], r9

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	add	r8, r9

; 334  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$26[rbp-256], r10

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+200], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 881  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[26], &u_buf[26]);

	mov	rax, QWORD PTR [rcx+208]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	mov	QWORD PTR k$[rbp-256], r9

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r10
	mov	QWORD PTR k$[rbp-256], r10
	mov	QWORD PTR [rcx+208], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 882  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[27], &u_buf[27]);

	mov	rax, QWORD PTR [rcx+216]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax
	mov	QWORD PTR t_hi$27[rbp-256], r9

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	add	r8, r9

; 334  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$28[rbp-256], r10

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+216], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 883  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[28], &u_buf[28]);

	mov	rax, QWORD PTR [rcx+224]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	mov	QWORD PTR k$[rbp-256], r9

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r10
	mov	QWORD PTR k$[rbp-256], r10
	mov	QWORD PTR [rcx+224], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 884  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[29], &u_buf[29]);

	mov	rax, QWORD PTR [rcx+232]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax
	mov	QWORD PTR t_hi$29[rbp-256], r9

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	add	r8, r9

; 334  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$30[rbp-256], r10

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+232], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 885  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[30], &u_buf[30]);

	mov	rax, QWORD PTR [rcx+240]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	mov	QWORD PTR k$[rbp-256], r9

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r10
	mov	QWORD PTR k$[rbp-256], r10
	mov	QWORD PTR [rcx+240], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 886  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[31], &u_buf[31]);

	mov	rax, QWORD PTR [rcx+248]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax
	mov	QWORD PTR t_hi$31[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 360  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	add	r8, r9

; 334  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$32[rbp-256], r10

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+248], r8
	adcx	r10, rdi
	mov	QWORD PTR k$[rbp-256], r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 887  :         u_buf += 32;

	add	rcx, 256				; 00000100H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 360  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	lock xadd DWORD PTR statistics_info, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 853  :     while (count > 0)

	sub	rbx, 1
	jne	$LL2@MultiplyAn
$LN3@MultiplyAn:

; 888  :         --count;
; 889  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 890  :         if (sizeof(k) == sizeof(_UINT32_T))
; 891  :             AddToMULTI32Counter(32);
; 892  :         else
; 893  :             AddToMULTI64Counter(32);
; 894  : #endif
; 895  :     }
; 896  : 
; 897  :     if (u_count & 0x10)

	test	r11b, 16
	je	$LN413@MultiplyAn

; 898  :     {
; 899  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

	mov	rax, QWORD PTR [rcx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r10

; 334  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$33[rbp-256], r9

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 900  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

	mov	rax, QWORD PTR [rcx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r9
	mov	QWORD PTR k$[rbp-256], r9
	mov	QWORD PTR [rcx+8], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 901  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[2], &u_buf[2]);

	mov	rax, QWORD PTR [rcx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax
	mov	QWORD PTR t_hi$34[rbp-256], r10

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	add	r8, r10
	mov	QWORD PTR k$[rbp-256], r10
	mov	QWORD PTR [rcx+16], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 902  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[3], &u_buf[3]);

	mov	rax, QWORD PTR [rcx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax
	mov	QWORD PTR t_hi$35[rbp-256], r9

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	add	r8, r9
	mov	QWORD PTR k$[rbp-256], r9
	mov	QWORD PTR [rcx+24], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 903  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[4], &u_buf[4]);

	mov	rax, QWORD PTR [rcx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax
	mov	QWORD PTR t_hi$36[rbp-256], r10

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	add	r8, r10
	mov	QWORD PTR k$[rbp-256], r10
	mov	QWORD PTR [rcx+32], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 904  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[5], &u_buf[5]);

	mov	rax, QWORD PTR [rcx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax
	mov	QWORD PTR t_hi$37[rbp-256], r9

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	add	r8, r9
	mov	QWORD PTR k$[rbp-256], r9
	mov	QWORD PTR [rcx+40], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 905  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[6], &u_buf[6]);

	mov	rax, QWORD PTR [rcx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax
	mov	QWORD PTR t_hi$38[rbp-256], r10

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	add	r8, r10
	mov	QWORD PTR k$[rbp-256], r10
	mov	QWORD PTR [rcx+48], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 906  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[7], &u_buf[7]);

	mov	rax, QWORD PTR [rcx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax
	mov	QWORD PTR t_hi$39[rbp-256], r9

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	add	r8, r9
	mov	QWORD PTR k$[rbp-256], r9
	mov	QWORD PTR [rcx+56], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 907  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[8], &u_buf[8]);

	mov	rax, QWORD PTR [rcx+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax
	mov	QWORD PTR t_hi$40[rbp-256], r10

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	add	r8, r10
	mov	QWORD PTR k$[rbp-256], r10
	mov	QWORD PTR [rcx+64], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 908  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[9], &u_buf[9]);

	mov	rax, QWORD PTR [rcx+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax
	mov	QWORD PTR t_hi$41[rbp-256], r9

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	add	r8, r9
	mov	QWORD PTR k$[rbp-256], r9
	mov	QWORD PTR [rcx+72], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 909  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[10], &u_buf[10]);

	mov	rax, QWORD PTR [rcx+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax
	mov	QWORD PTR t_hi$42[rbp-256], r10

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	add	r8, r10
	mov	QWORD PTR k$[rbp-256], r10
	mov	QWORD PTR [rcx+80], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 910  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[11], &u_buf[11]);

	mov	rax, QWORD PTR [rcx+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax
	mov	QWORD PTR t_hi$43[rbp-256], r9

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi

; 334  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$44[rbp-256], r10

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r9
	mov	QWORD PTR k$[rbp-256], r9
	mov	QWORD PTR [rcx+88], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 911  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[12], &u_buf[12]);

	mov	rax, QWORD PTR [rcx+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r10
	mov	QWORD PTR k$[rbp-256], r10
	mov	QWORD PTR [rcx+96], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 912  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[13], &u_buf[13]);

	mov	rax, QWORD PTR [rcx+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax
	mov	QWORD PTR t_hi$45[rbp-256], r9

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	add	r8, r9

; 334  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$46[rbp-256], r10

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+104], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 913  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[14], &u_buf[14]);

	mov	rax, QWORD PTR [rcx+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	mov	QWORD PTR k$[rbp-256], r9

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r10
	mov	QWORD PTR k$[rbp-256], r10
	mov	QWORD PTR [rcx+112], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 914  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[15], &u_buf[15]);

	mov	rax, QWORD PTR [rcx+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax
	mov	QWORD PTR t_hi$47[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 360  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, 16
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	add	r8, r9

; 334  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$48[rbp-256], r10

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+120], r8
	adcx	r10, rdi
	mov	QWORD PTR k$[rbp-256], r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 915  :         u_buf += 16;

	sub	rcx, -128				; ffffffffffffff80H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 360  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	lock xadd DWORD PTR statistics_info, eax
$LN413@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 924  :     if (u_count & 0x8)

	test	r11b, 8
	je	$LN481@MultiplyAn

; 925  :     {
; 926  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

	mov	rax, QWORD PTR [rcx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r10

; 334  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$49[rbp-256], r9

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 927  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

	mov	rax, QWORD PTR [rcx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r9

; 334  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$50[rbp-256], r10

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+8], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 928  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[2], &u_buf[2]);

	mov	rax, QWORD PTR [rcx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	mov	QWORD PTR k$[rbp-256], r9

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r10
	mov	QWORD PTR k$[rbp-256], r10
	mov	QWORD PTR [rcx+16], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 929  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[3], &u_buf[3]);

	mov	rax, QWORD PTR [rcx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax
	mov	QWORD PTR t_hi$51[rbp-256], r9

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	add	r8, r9

; 334  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$52[rbp-256], r10

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+24], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 930  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[4], &u_buf[4]);

	mov	rax, QWORD PTR [rcx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	mov	QWORD PTR k$[rbp-256], r9

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r10
	mov	QWORD PTR k$[rbp-256], r10
	mov	QWORD PTR [rcx+32], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 931  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[5], &u_buf[5]);

	mov	rax, QWORD PTR [rcx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax
	mov	QWORD PTR t_hi$53[rbp-256], r9

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	add	r8, r9

; 334  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$54[rbp-256], r10

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+40], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 932  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[6], &u_buf[6]);

	mov	rax, QWORD PTR [rcx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	mov	QWORD PTR k$[rbp-256], r9

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r10
	mov	QWORD PTR k$[rbp-256], r10
	mov	QWORD PTR [rcx+48], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 933  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[7], &u_buf[7]);

	mov	rax, QWORD PTR [rcx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax
	mov	QWORD PTR t_hi$55[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 360  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	add	r8, r9

; 334  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$56[rbp-256], r10

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+56], r8
	adcx	r10, rdi
	mov	QWORD PTR k$[rbp-256], r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 934  :         u_buf += 8;

	add	rcx, 64					; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 360  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	lock xadd DWORD PTR statistics_info, eax
$LN481@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 943  :     if (u_count & 0x4)

	test	r11b, 4
	je	$LN517@MultiplyAn

; 944  :     {
; 945  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

	mov	rax, QWORD PTR [rcx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r10

; 334  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$57[rbp-256], r9

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 946  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

	mov	rax, QWORD PTR [rcx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r9

; 334  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$58[rbp-256], r10

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+8], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 947  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[2], &u_buf[2]);

	mov	rax, QWORD PTR [rcx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	mov	QWORD PTR k$[rbp-256], r9

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r10
	mov	QWORD PTR k$[rbp-256], r10
	mov	QWORD PTR [rcx+16], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 948  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[3], &u_buf[3]);

	mov	rax, QWORD PTR [rcx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax
	mov	QWORD PTR t_hi$59[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 360  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	add	r8, r9

; 334  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$60[rbp-256], r10

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+24], r8
	adcx	r10, rdi
	mov	QWORD PTR k$[rbp-256], r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 949  :         u_buf += 4;

	add	rcx, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 360  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	lock xadd DWORD PTR statistics_info, eax
$LN517@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 958  :     if (u_count & 0x2)

	test	r11b, 2
	je	SHORT $LN537@MultiplyAn

; 959  :     {
; 960  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

	mov	rax, QWORD PTR [rcx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r10

; 334  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$61[rbp-256], r9

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 961  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

	mov	rax, QWORD PTR [rcx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, r8, rax

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r9, rdi
	add	r8, r9

; 334  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$62[rbp-256], r10

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+8], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 360  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, rdi
	mov	QWORD PTR k$[rbp-256], r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 962  :         u_buf += 2;

	add	rcx, 16
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 360  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	lock xadd DWORD PTR statistics_info, eax
$LN537@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 971  :     if (u_count & 0x1)

	test	r11b, 1
	je	SHORT $LN549@MultiplyAn

; 972  :     {
; 973  :         k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

	mov	rax, QWORD PTR [rcx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	r9, r8, rax

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, r10

; 334  :         return (_mulx_u64(u, v, w_hi));

	mov	QWORD PTR t_hi$63[rbp-256], r9

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	mov	r10, r9
	mov	QWORD PTR [rcx], r8
	adcx	r10, rdi
	mov	QWORD PTR k$[rbp-256], r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 974  :         u_buf += 1;

	add	rcx, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 337  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI64);

	lock inc DWORD PTR statistics_info
$LN549@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 983  :     if (k > 0)

	test	r10, r10
	je	SHORT $LN554@MultiplyAn

; 984  :     {
; 985  :         u_buf[0] = k;

	mov	QWORD PTR [rcx], r10

; 986  :         u_buf += 1;

	lea	rax, QWORD PTR [rcx+8]

; 990  : }

	add	rsp, 976				; 000003d0H
	pop	rdi
	pop	rbx
	pop	rbp
	ret	0
$LN554@MultiplyAn:

; 987  :     }
; 988  : 
; 989  :     return (u_buf);

	mov	rax, rcx

; 990  : }

	add	rsp, 976				; 000003d0H
	pop	rdi
	pop	rbx
	pop	rbp
	ret	0
MultiplyAndAdd_using_ADCX_MULX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT MultiplyAndAdd_using_ADC_MUL
_TEXT	SEGMENT
k$ = 0
k$ = 8
k$ = 16
k$ = 24
k$ = 32
k$ = 40
k$ = 48
k$ = 56
k$ = 64
k$ = 72
k$ = 80
k$ = 88
k$ = 96
k$ = 104
k$ = 112
k$ = 120
k$ = 128
k$ = 136
k$ = 144
k$ = 152
k$ = 160
k$ = 168
k$ = 176
k$ = 184
k$ = 192
k$ = 200
k$ = 208
k$ = 216
k$ = 224
k$ = 232
k$ = 240
k$ = 248
k$ = 256
k$ = 264
k$ = 272
k$ = 280
k$ = 288
k$ = 296
k$ = 304
k$ = 312
k$ = 320
k$ = 328
k$ = 336
k$ = 344
k$ = 352
k$ = 360
k$ = 368
k$ = 376
k$ = 384
k$ = 392
k$ = 400
k$ = 408
k$ = 416
k$ = 424
k$ = 432
k$ = 440
k$ = 448
k$ = 456
k$ = 464
t_hi$1 = 472
t_hi$2 = 480
t_hi$3 = 488
t_hi$4 = 496
t_hi$5 = 504
t_hi$6 = 512
t_hi$7 = 520
t_hi$8 = 528
t_hi$9 = 536
t_hi$10 = 544
t_hi$11 = 552
t_hi$12 = 560
t_hi$13 = 568
t_hi$14 = 576
t_hi$15 = 584
t_hi$16 = 592
t_hi$17 = 600
t_hi$18 = 608
t_hi$19 = 616
t_hi$20 = 624
t_hi$21 = 632
t_hi$22 = 640
t_hi$23 = 648
t_hi$24 = 656
t_hi$25 = 664
t_hi$26 = 672
t_hi$27 = 680
t_hi$28 = 688
t_hi$29 = 696
t_hi$30 = 704
t_hi$31 = 712
t_hi$32 = 720
t_hi$33 = 728
t_hi$34 = 736
t_hi$35 = 744
t_hi$36 = 752
t_hi$37 = 760
t_hi$38 = 768
t_hi$39 = 776
t_hi$40 = 784
t_hi$41 = 792
t_hi$42 = 800
t_hi$43 = 808
t_hi$44 = 816
t_hi$45 = 824
t_hi$46 = 832
t_hi$47 = 840
t_hi$48 = 848
t_hi$49 = 856
t_hi$50 = 864
t_hi$51 = 872
t_hi$52 = 880
t_hi$53 = 888
t_hi$54 = 896
t_hi$55 = 904
t_hi$56 = 912
t_hi$57 = 920
t_hi$58 = 928
t_hi$59 = 936
t_hi$60 = 944
t_hi$61 = 952
t_hi$62 = 960
t_hi$63 = 968
k$ = 1008
u_buf$ = 1008
k$ = 1016
u_count$ = 1016
k$ = 1024
x$ = 1024
k$ = 1032
MultiplyAndAdd_using_ADC_MUL PROC			; COMDAT

; 707  : {

	push	rbp
	push	rbx
	lea	rbp, QWORD PTR [rsp-728]
	sub	rsp, 984				; 000003d8H

; 708  :     __UNIT_TYPE k = x;
; 709  :     __UNIT_TYPE count = u_count >> 5;

	mov	r11, rdx
	mov	r9, r8
	shr	r11, 5
	mov	r10, rdx

; 710  :     while (count > 0)

	mov	rbx, -8446744073709551616		; 8ac7230489e80000H
	test	r11, r11
	je	$LN3@MultiplyAn
	npad	14
$LL2@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, r9

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$1[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+8]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$2[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+8], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+16]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
	add	rax, r9

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$3[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+16], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+24]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$4[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+24], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+32]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
	add	rax, r9

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$5[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+32], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+40]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rsp], r8
	add	rax, r8

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$6[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+40], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+48]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rsp], r9
	add	rax, r9

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$7[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+48], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+56]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rsp], r8
	add	rax, r8

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$8[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+56], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+64]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rsp], r9
	add	rax, r9

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$9[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+64], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+72]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rsp], r8
	add	rax, r8

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$10[rbp-256], rdx
	mov	r9, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+72], rax
	adc	r9, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rsp], r9

; 303  :         return (_umul128(u, v, w_hi));

	mul	QWORD PTR [rcx+80]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, r9

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$11[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+80], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+88]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rsp], r8
	add	rax, r8

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$12[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+88], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+96]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rsp], r9
	add	rax, r9

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$13[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+96], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+104]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rsp], r8
	add	rax, r8

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$14[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+104], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+112]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rsp], r9
	add	rax, r9

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$15[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+112], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+120]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rsp], r8
	add	rax, r8

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$16[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+120], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+128]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rsp], r9
	add	rax, r9

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$17[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+128], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+136]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rsp], r8
	add	rax, r8

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$18[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+136], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+144]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rsp], r9
	add	rax, r9

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$19[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+144], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+152]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rsp], r8
	add	rax, r8

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$20[rbp-256], rdx
	mov	r9, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+152], rax
	adc	r9, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+160]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rsp], r9
	add	rax, r9

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$21[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+160], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+168]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$22[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+168], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+176]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
	add	rax, r9

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$23[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+176], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+184]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$24[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+184], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+192]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
	add	rax, r9

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$25[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+192], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+200]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$26[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+200], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+208]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
	add	rax, r9

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$27[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+208], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+216]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$28[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+216], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+224]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
	add	rax, r9

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$29[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+224], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+232]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$30[rbp-256], rdx
	mov	r9, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+232], rax
	adc	r9, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+240]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9

; 303  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, r9

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$31[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+240], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 303  :         return (_umul128(u, v, w_hi));

	mul	QWORD PTR [rcx+248]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$32[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+248], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 360  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 744  :         u_buf += 32;

	add	rcx, 256				; 00000100H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 360  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	lock xadd DWORD PTR statistics_info, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 710  :     while (count > 0)

	sub	r11, 1
	jne	$LL2@MultiplyAn
$LN3@MultiplyAn:

; 745  :         --count;
; 746  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 747  :         if (sizeof(k) == sizeof(_UINT32_T))
; 748  :             AddToMULTI32Counter(32);
; 749  :         else
; 750  :             AddToMULTI64Counter(32);
; 751  : #endif
; 752  :     }
; 753  : 
; 754  :     if (u_count & 0x10)

	test	r10b, 16
	je	$LN413@MultiplyAn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, r9

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$33[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+8]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$34[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+8], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+16]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
	add	rax, r9

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$35[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+16], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+24]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$36[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+24], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+32]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
	add	rax, r9

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$37[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+32], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+40]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$38[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+40], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+48]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
	add	rax, r9

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$39[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+48], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+56]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$40[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+56], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+64]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
	add	rax, r9

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$41[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+64], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+72]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$42[rbp-256], rdx
	mov	r9, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+72], rax
	adc	r9, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9

; 303  :         return (_umul128(u, v, w_hi));

	mul	QWORD PTR [rcx+80]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, r9

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$43[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+80], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+88]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$44[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+88], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+96]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
	add	rax, r9

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$45[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+96], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+104]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$46[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+104], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+112]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
	add	rax, r9

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$47[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+112], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+120]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$48[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+120], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 360  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, 16
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 772  :         u_buf += 16;

	sub	rcx, -128				; ffffffffffffff80H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 360  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	lock xadd DWORD PTR statistics_info, eax
$LN413@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 781  :     if (u_count & 0x8)

	test	r10b, 8
	je	$LN481@MultiplyAn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, r9

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$49[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+8]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$50[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+8], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+16]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
	add	rax, r9

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$51[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+16], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+24]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$52[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+24], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+32]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
	add	rax, r9

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$53[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+32], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+40]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$54[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+40], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+48]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
	add	rax, r9

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$55[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+48], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+56]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$56[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+56], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 360  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 791  :         u_buf += 8;

	add	rcx, 64					; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 360  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	lock xadd DWORD PTR statistics_info, eax
$LN481@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 800  :     if (u_count & 0x4)

	test	r10b, 4
	je	$LN517@MultiplyAn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, r9

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$57[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+8]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$58[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+8], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+16]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
	add	rax, r9

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$59[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+16], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+24]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$60[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+24], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r9, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r9, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 360  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 806  :         u_buf += 4;

	add	rcx, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 360  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	lock xadd DWORD PTR statistics_info, eax
$LN517@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 815  :     if (u_count & 0x2)

	test	r10b, 2
	je	SHORT $LN537@MultiplyAn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, r9

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$61[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx], rax

; 303  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx+8]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r8
	add	rax, r8

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$62[rbp-256], rdx
	mov	r9, rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR [rcx+8], rax
	adc	r9, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 360  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	edx, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR k$[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 819  :         u_buf += 2;

	add	rcx, 16
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 360  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	lock xadd DWORD PTR statistics_info, edx
$LN537@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 828  :     if (u_count & 0x1)

	test	r10b, 1
	je	SHORT $LN549@MultiplyAn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [rcx]

; 211  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, r9

; 303  :         return (_umul128(u, v, w_hi));

	mov	QWORD PTR t_hi$63[rbp-256], rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	mov	r9, rdx
	mov	QWORD PTR [rcx], rax
	adc	r9, 0
	mov	QWORD PTR k$[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 831  :         u_buf += 1;

	add	rcx, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 337  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI64);

	lock inc DWORD PTR statistics_info
$LN549@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 840  :     if (k > 0)

	test	r9, r9
	je	SHORT $LN554@MultiplyAn

; 841  :     {
; 842  :         u_buf[0] = k;

	mov	QWORD PTR [rcx], r9

; 843  :         u_buf += 1;

	lea	rax, QWORD PTR [rcx+8]

; 847  : }

	add	rsp, 984				; 000003d8H
	pop	rbx
	pop	rbp
	ret	0
$LN554@MultiplyAn:

; 844  :     }
; 845  : 
; 846  :     return (u_buf);

	mov	rax, rcx

; 847  : }

	add	rsp, 984				; 000003d8H
	pop	rbx
	pop	rbp
	ret	0
MultiplyAndAdd_using_ADC_MUL ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT MultiplyAndAdd1Word_using_ADCX_MULX
_TEXT	SEGMENT
k$ = 8
u$ = 16
w_buf$ = 24
MultiplyAndAdd1Word_using_ADCX_MULX PROC		; COMDAT

; 692  : {

	mov	rax, rdx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 334  :         return (_mulx_u64(u, v, w_hi));

	mov	rdx, -8446744073709551616		; 8ac7230489e80000H
	mulx	rax, r9, rax

; 239  :         return (_addcarryx_u64(carry, u, v, w));

	add	r9, rcx
	mov	ecx, 0
	mov	QWORD PTR [r8], r9
	adcx	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 704  : }

	ret	0
MultiplyAndAdd1Word_using_ADCX_MULX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT MultiplyAndAdd1Word_using_ADC_MUL
_TEXT	SEGMENT
k$ = 8
u$ = 16
w_buf$ = 24
MultiplyAndAdd1Word_using_ADC_MUL PROC			; COMDAT
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, -8446744073709551616		; 8ac7230489e80000H
	mul	rdx

; 211  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, rcx
	mov	QWORD PTR [r8], rax
	adc	rdx, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c

; 688  :     return (k);

	mov	rax, rdx

; 689  : }

	ret	0
MultiplyAndAdd1Word_using_ADC_MUL ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT BuildBinaryFromDecimalString
_TEXT	SEGMENT
source$ = 64
out_buf$ = 72
out_buf_count$ = 80
native_digits$ = 88
BuildBinaryFromDecimalString PROC			; COMDAT

; 649  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	rdi, r9
	mov	r15, r8
	mov	r14, rdx
	mov	rsi, rcx

; 650  : #ifdef _M_IX86
; 651  :     int word_digit_count = 9;
; 652  : #elif defined(_M_IX64)
; 653  :     int word_digit_count = 19;
; 654  : #else
; 655  : #error unknown platform
; 656  : #endif
; 657  :     wchar_t* in_ptr = source;
; 658  :     __UNIT_TYPE* out_ptr = out_buf;

	mov	rbx, rdx

; 659  :     __UNIT_TYPE source_count = lstrlenW(source);

	call	QWORD PTR __imp_lstrlenW
	movsxd	r9, eax

; 660  :     int r = source_count % word_digit_count;

	mov	rbp, -2912643801112034465		; d79435e50d79435fH
	mov	rax, rbp
	mov	rcx, r9
	mul	r9
	shr	rdx, 4
	imul	rax, rdx, 19
	sub	rcx, rax

; 661  :     if (r > 0)

	test	ecx, ecx
	jle	$LN24@BuildBinar

; 602  :     __UNIT_TYPE x = 0;

	xor	r11d, r11d

; 662  :     {
; 663  :         *out_ptr++ = BuildLeading1WordFromDecimalString(in_ptr, r, native_digits);

	movsxd	r8, ecx
	mov	rdx, rsi
	mov	r10, r8

; 603  :     while (count > 0)

	test	ecx, ecx
	je	$LN8@BuildBinar

; 151  :     if (c == native_digits[9])

	mov	ebx, 9
	npad	1
$LL7@BuildBinar:

; 605  :         x = x * 10 + ParseDecimalDigit(*in_ptr++, native_digits);

	movzx	ecx, WORD PTR [rdx]

; 131  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [rcx-48]
	cmp	ax, bx
	ja	SHORT $LN11@BuildBinar

; 132  :         return (c - L'0');

	movzx	eax, cx
	sub	eax, 48					; 00000030H
	jmp	SHORT $LN21@BuildBinar
$LN11@BuildBinar:

; 133  :     if (c == native_digits[0])

	cmp	cx, WORD PTR [rdi]
	jne	SHORT $LN12@BuildBinar

; 134  :         return (0);

	xor	eax, eax
	jmp	SHORT $LN21@BuildBinar
$LN12@BuildBinar:

; 135  :     if (c == native_digits[1])

	cmp	cx, WORD PTR [rdi+2]
	jne	SHORT $LN13@BuildBinar

; 136  :         return (1);

	mov	eax, 1
	jmp	SHORT $LN21@BuildBinar
$LN13@BuildBinar:

; 137  :     if (c == native_digits[2])

	cmp	cx, WORD PTR [rdi+4]
	jne	SHORT $LN14@BuildBinar

; 138  :         return (2);

	mov	eax, 2
	jmp	SHORT $LN21@BuildBinar
$LN14@BuildBinar:

; 139  :     if (c == native_digits[3])

	cmp	cx, WORD PTR [rdi+6]
	jne	SHORT $LN15@BuildBinar

; 140  :         return (3);

	mov	eax, 3
	jmp	SHORT $LN21@BuildBinar
$LN15@BuildBinar:

; 141  :     if (c == native_digits[4])

	cmp	cx, WORD PTR [rdi+8]
	jne	SHORT $LN16@BuildBinar

; 142  :         return (4);

	mov	eax, 4
	jmp	SHORT $LN21@BuildBinar
$LN16@BuildBinar:

; 143  :     if (c == native_digits[5])

	cmp	cx, WORD PTR [rdi+10]
	jne	SHORT $LN17@BuildBinar

; 144  :         return (5);

	mov	eax, 5
	jmp	SHORT $LN21@BuildBinar
$LN17@BuildBinar:

; 145  :     if (c == native_digits[6])

	cmp	cx, WORD PTR [rdi+12]
	jne	SHORT $LN18@BuildBinar

; 146  :         return (6);

	mov	eax, 6
	jmp	SHORT $LN21@BuildBinar
$LN18@BuildBinar:

; 147  :     if (c == native_digits[7])

	cmp	cx, WORD PTR [rdi+14]
	jne	SHORT $LN19@BuildBinar

; 148  :         return (7);

	mov	eax, 7
	jmp	SHORT $LN21@BuildBinar
$LN19@BuildBinar:

; 149  :     if (c == native_digits[8])

	cmp	cx, WORD PTR [rdi+16]
	jne	SHORT $LN20@BuildBinar

; 150  :         return (8);

	mov	eax, 8
	jmp	SHORT $LN21@BuildBinar
$LN20@BuildBinar:

; 151  :     if (c == native_digits[9])

	cmp	cx, WORD PTR [rdi+18]
	mov	eax, -1
	cmove	eax, ebx
$LN21@BuildBinar:

; 605  :         x = x * 10 + ParseDecimalDigit(*in_ptr++, native_digits);

	cdqe
	lea	rcx, QWORD PTR [r11+r11*4]
	add	rdx, 2
	lea	r11, QWORD PTR [rax+rcx*2]

; 606  :         --count;

	sub	r10, 1
	jne	$LL7@BuildBinar
$LN8@BuildBinar:

; 662  :     {
; 663  :         *out_ptr++ = BuildLeading1WordFromDecimalString(in_ptr, r, native_digits);

	mov	QWORD PTR [r14], r11
	lea	rbx, QWORD PTR [r14+8]

; 664  :         in_ptr += r;

	lea	rsi, QWORD PTR [rsi+r8*2]

; 665  :         source_count -= r;

	sub	r9, r8
$LN24@BuildBinar:

; 666  :     }
; 667  :     while (source_count > 0)

	test	r9, r9
	je	SHORT $LN3@BuildBinar
	lea	rcx, QWORD PTR [r9-1]
	mov	rax, rbp
	mul	rcx
	mov	r11, rdx
	shr	r11, 4
	inc	r11
	npad	1
$LL2@BuildBinar:

; 668  :     {
; 669  :         *out_ptr++ = Build1WordFromDecimalString(in_ptr, native_digits);

	mov	rdx, rdi
	mov	rcx, rsi
	call	Build1WordFromDecimalString
	mov	QWORD PTR [rbx], rax

; 670  :         in_ptr += word_digit_count;

	add	rsi, 38					; 00000026H
	add	rbx, 8
	sub	r11, 1
	jne	SHORT $LL2@BuildBinar
$LN3@BuildBinar:

; 671  :         source_count -= word_digit_count;
; 672  :     }
; 673  :     *out_buf_count = out_ptr - out_buf;
; 674  : }

	mov	rbp, QWORD PTR [rsp+72]
	sub	rbx, r14
	mov	rsi, QWORD PTR [rsp+80]
	sar	rbx, 3
	mov	QWORD PTR [r15], rbx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	rdi
	ret	0
BuildBinaryFromDecimalString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT Build1WordFromDecimalString
_TEXT	SEGMENT
in_ptr$ = 48
native_digits$ = 56
Build1WordFromDecimalString PROC			; COMDAT

; 612  : {

	sub	rsp, 40					; 00000028H
	mov	r10, rcx

; 613  :     __UNIT_TYPE x = ParseDecimalDigit(*in_ptr++, native_digits);

	movzx	ecx, WORD PTR [rcx]
	call	ParseDecimalDigit

; 614  :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT64_T))
; 615  :     {
; 616  :         x = x * 10 + ParseDecimalDigit(*in_ptr++, native_digits);

	movzx	ecx, WORD PTR [r10+2]
	movsxd	r9, eax
	call	ParseDecimalDigit

; 617  :         x = x * 10 + ParseDecimalDigit(*in_ptr++, native_digits);

	movzx	ecx, WORD PTR [r10+4]
	movsxd	r8, eax
	lea	rax, QWORD PTR [r9+r9*4]
	lea	r9, QWORD PTR [r8+rax*2]
	call	ParseDecimalDigit
	movsxd	rcx, eax
	lea	rax, QWORD PTR [r9+r9*4]
	lea	r9, QWORD PTR [rcx+rax*2]

; 618  :         x = x * 10 + ParseDecimalDigit(*in_ptr++, native_digits);

	movzx	ecx, WORD PTR [r10+6]
	call	ParseDecimalDigit
	movsxd	rcx, eax
	lea	rax, QWORD PTR [r9+r9*4]
	lea	r9, QWORD PTR [rcx+rax*2]

; 619  :         x = x * 10 + ParseDecimalDigit(*in_ptr++, native_digits);

	movzx	ecx, WORD PTR [r10+8]
	call	ParseDecimalDigit
	movsxd	rcx, eax
	lea	rax, QWORD PTR [r9+r9*4]
	lea	r9, QWORD PTR [rcx+rax*2]

; 620  :         x = x * 10 + ParseDecimalDigit(*in_ptr++, native_digits);

	movzx	ecx, WORD PTR [r10+10]
	call	ParseDecimalDigit
	movsxd	rcx, eax
	lea	rax, QWORD PTR [r9+r9*4]
	lea	r9, QWORD PTR [rcx+rax*2]

; 621  :         x = x * 10 + ParseDecimalDigit(*in_ptr++, native_digits);

	movzx	ecx, WORD PTR [r10+12]
	call	ParseDecimalDigit
	movsxd	rcx, eax
	lea	rax, QWORD PTR [r9+r9*4]
	lea	r9, QWORD PTR [rcx+rax*2]

; 622  :         x = x * 10 + ParseDecimalDigit(*in_ptr++, native_digits);

	movzx	ecx, WORD PTR [r10+14]
	call	ParseDecimalDigit
	movsxd	rcx, eax
	lea	rax, QWORD PTR [r9+r9*4]
	lea	r9, QWORD PTR [rcx+rax*2]

; 623  :         x = x * 10 + ParseDecimalDigit(*in_ptr++, native_digits);

	movzx	ecx, WORD PTR [r10+16]
	call	ParseDecimalDigit
	movsxd	rcx, eax
	lea	rax, QWORD PTR [r9+r9*4]
	lea	r9, QWORD PTR [rcx+rax*2]

; 624  :         x = x * 10 + ParseDecimalDigit(*in_ptr++, native_digits);

	movzx	ecx, WORD PTR [r10+18]
	call	ParseDecimalDigit
	movsxd	rcx, eax
	lea	rax, QWORD PTR [r9+r9*4]
	lea	r9, QWORD PTR [rcx+rax*2]

; 625  :         x = x * 10 + ParseDecimalDigit(*in_ptr++, native_digits);

	movzx	ecx, WORD PTR [r10+20]
	call	ParseDecimalDigit
	movsxd	rcx, eax
	lea	rax, QWORD PTR [r9+r9*4]
	lea	r9, QWORD PTR [rcx+rax*2]

; 626  :     }
; 627  :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT32_T))
; 628  :     {
; 629  :         x = x * 10 + ParseDecimalDigit(*in_ptr++, native_digits);

	movzx	ecx, WORD PTR [r10+22]
	call	ParseDecimalDigit
	movsxd	rcx, eax
	lea	rax, QWORD PTR [r9+r9*4]
	lea	r9, QWORD PTR [rcx+rax*2]

; 630  :         x = x * 10 + ParseDecimalDigit(*in_ptr++, native_digits);

	movzx	ecx, WORD PTR [r10+24]
	call	ParseDecimalDigit
	movsxd	rcx, eax
	lea	rax, QWORD PTR [r9+r9*4]
	lea	r9, QWORD PTR [rcx+rax*2]

; 631  :         x = x * 10 + ParseDecimalDigit(*in_ptr++, native_digits);

	movzx	ecx, WORD PTR [r10+26]
	call	ParseDecimalDigit
	movsxd	rcx, eax
	lea	rax, QWORD PTR [r9+r9*4]
	lea	r9, QWORD PTR [rcx+rax*2]

; 632  :         x = x * 10 + ParseDecimalDigit(*in_ptr++, native_digits);

	movzx	ecx, WORD PTR [r10+28]
	call	ParseDecimalDigit
	movsxd	rcx, eax
	lea	rax, QWORD PTR [r9+r9*4]
	lea	r9, QWORD PTR [rcx+rax*2]

; 633  :         x = x * 10 + ParseDecimalDigit(*in_ptr++, native_digits);

	movzx	ecx, WORD PTR [r10+30]
	call	ParseDecimalDigit
	movsxd	rcx, eax
	lea	rax, QWORD PTR [r9+r9*4]
	lea	r9, QWORD PTR [rcx+rax*2]

; 634  :     }
; 635  :     if (sizeof(__UNIT_TYPE) >= sizeof(_UINT16_T))
; 636  :     {
; 637  :         x = x * 10 + ParseDecimalDigit(*in_ptr++, native_digits);

	movzx	ecx, WORD PTR [r10+32]
	call	ParseDecimalDigit
	movsxd	rcx, eax
	lea	rax, QWORD PTR [r9+r9*4]
	lea	r9, QWORD PTR [rcx+rax*2]

; 638  :         x = x * 10 + ParseDecimalDigit(*in_ptr++, native_digits);

	movzx	ecx, WORD PTR [r10+34]
	call	ParseDecimalDigit
	movsxd	rcx, eax
	lea	rax, QWORD PTR [r9+r9*4]
	lea	r9, QWORD PTR [rcx+rax*2]

; 639  :     }
; 640  :     if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))
; 641  :     {
; 642  :         x = x * 10 + ParseDecimalDigit(*in_ptr++, native_digits);

	movzx	ecx, WORD PTR [r10+36]
	call	ParseDecimalDigit
	movsxd	rcx, eax
	lea	rax, QWORD PTR [r9+r9*4]
	lea	rax, QWORD PTR [rcx+rax*2]

; 643  :     }
; 644  :     return (x);
; 645  : }

	add	rsp, 40					; 00000028H
	ret	0
Build1WordFromDecimalString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT BuildLeading1WordFromDecimalString
_TEXT	SEGMENT
in_ptr$ = 16
count$ = 24
native_digits$ = 32
BuildLeading1WordFromDecimalString PROC			; COMDAT

; 601  : {

	sub	rsp, 8

; 602  :     __UNIT_TYPE x = 0;

	xor	r9d, r9d
	mov	r11, rdx
	mov	r10, rcx

; 603  :     while (count > 0)

	test	rdx, rdx
	je	$LN22@BuildLeadi

; 151  :     if (c == native_digits[9])

	mov	QWORD PTR [rsp], rbx
	mov	ebx, 9
	npad	1
$LL2@BuildLeadi:

; 604  :     {
; 605  :         x = x * 10 + ParseDecimalDigit(*in_ptr++, native_digits);

	movzx	ecx, WORD PTR [r10]

; 131  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [rcx-48]
	cmp	ax, bx
	ja	SHORT $LN6@BuildLeadi

; 132  :         return (c - L'0');

	movzx	eax, cx
	sub	eax, 48					; 00000030H
	jmp	$LN16@BuildLeadi
$LN6@BuildLeadi:

; 133  :     if (c == native_digits[0])

	cmp	cx, WORD PTR [r8]
	jne	SHORT $LN7@BuildLeadi

; 134  :         return (0);

	xor	eax, eax
	jmp	SHORT $LN16@BuildLeadi
$LN7@BuildLeadi:

; 135  :     if (c == native_digits[1])

	cmp	cx, WORD PTR [r8+2]
	jne	SHORT $LN8@BuildLeadi

; 136  :         return (1);

	mov	eax, 1
	jmp	SHORT $LN16@BuildLeadi
$LN8@BuildLeadi:

; 137  :     if (c == native_digits[2])

	cmp	cx, WORD PTR [r8+4]
	jne	SHORT $LN9@BuildLeadi

; 138  :         return (2);

	mov	eax, 2
	jmp	SHORT $LN16@BuildLeadi
$LN9@BuildLeadi:

; 139  :     if (c == native_digits[3])

	cmp	cx, WORD PTR [r8+6]
	jne	SHORT $LN10@BuildLeadi

; 140  :         return (3);

	mov	eax, 3
	jmp	SHORT $LN16@BuildLeadi
$LN10@BuildLeadi:

; 141  :     if (c == native_digits[4])

	cmp	cx, WORD PTR [r8+8]
	jne	SHORT $LN11@BuildLeadi

; 142  :         return (4);

	mov	eax, 4
	jmp	SHORT $LN16@BuildLeadi
$LN11@BuildLeadi:

; 143  :     if (c == native_digits[5])

	cmp	cx, WORD PTR [r8+10]
	jne	SHORT $LN12@BuildLeadi

; 144  :         return (5);

	mov	eax, 5
	jmp	SHORT $LN16@BuildLeadi
$LN12@BuildLeadi:

; 145  :     if (c == native_digits[6])

	cmp	cx, WORD PTR [r8+12]
	jne	SHORT $LN13@BuildLeadi

; 146  :         return (6);

	mov	eax, 6
	jmp	SHORT $LN16@BuildLeadi
$LN13@BuildLeadi:

; 147  :     if (c == native_digits[7])

	cmp	cx, WORD PTR [r8+14]
	jne	SHORT $LN14@BuildLeadi

; 148  :         return (7);

	mov	eax, 7
	jmp	SHORT $LN16@BuildLeadi
$LN14@BuildLeadi:

; 149  :     if (c == native_digits[8])

	cmp	cx, WORD PTR [r8+16]
	jne	SHORT $LN15@BuildLeadi

; 150  :         return (8);

	mov	eax, 8
	jmp	SHORT $LN16@BuildLeadi
$LN15@BuildLeadi:

; 151  :     if (c == native_digits[9])

	cmp	cx, WORD PTR [r8+18]
	mov	eax, -1
	cmove	eax, ebx
$LN16@BuildLeadi:

; 604  :     {
; 605  :         x = x * 10 + ParseDecimalDigit(*in_ptr++, native_digits);

	movsxd	rcx, eax
	lea	rdx, QWORD PTR [r9+r9*4]
	add	r10, 2
	lea	r9, QWORD PTR [rcx+rdx*2]

; 606  :         --count;

	sub	r11, 1
	jne	$LL2@BuildLeadi

; 607  :     }
; 608  :     return (x);

	mov	rbx, QWORD PTR [rsp]
$LN22@BuildLeadi:

; 609  : }

	mov	rax, r9
	add	rsp, 8
	ret	0
BuildLeading1WordFromDecimalString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT ParseAsHexNumberString
_TEXT	SEGMENT
state$ = 48
__$ArrayPad$ = 176
in_ptr$ = 208
number_styles$ = 216
format_option$ = 224
int_part_buf$ = 232
ParseAsHexNumberString PROC				; COMDAT

; 586  : {

	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 192				; 000000c0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	ebx, edx

; 587  :     struct __tag_PARSER_STATE state;
; 588  :     InitializeParserState(&state, in_ptr, number_styles, format_option, int_part_buf, NULL);

	xor	edi, edi
	mov	QWORD PTR [rsp+40], rdi
	mov	QWORD PTR [rsp+32], r9
	mov	r9, r8
	mov	r8d, edx
	mov	rdx, rcx
	lea	rcx, QWORD PTR state$[rsp]
	call	InitializeParserState

; 589  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE)

	test	bl, 1
	je	SHORT $LN38@ParseAsHex

; 112  :         switch (*state->IN_PTR)

	mov	rcx, QWORD PTR state$[rsp]
	movzx	eax, WORD PTR [rcx]
	cmp	eax, 9
	jb	SHORT $LN38@ParseAsHex
$LL7@ParseAsHex:
	cmp	eax, 13
	jbe	SHORT $LN12@ParseAsHex
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN38@ParseAsHex
$LN12@ParseAsHex:

; 113  :         {
; 114  :         case L' ':
; 115  :         case L'\t':
; 116  :         case L'\n':
; 117  :         case L'\r':
; 118  :         case L'\f':
; 119  :         case L'\v':
; 120  :             break;
; 121  : 
; 122  :         default:
; 123  :             return;
; 124  :         }
; 125  :         state->IN_PTR += 1;

	add	rcx, 2
	mov	QWORD PTR state$[rsp], rcx
	movzx	eax, WORD PTR [rcx]
	cmp	eax, 9
	jae	SHORT $LL7@ParseAsHex
$LN38@ParseAsHex:

; 590  :         SkipSpace(&state);
; 591  :     ParseAsIntegerPartNumberSequence(&state);

	lea	rcx, QWORD PTR state$[rsp]
	call	ParseAsIntegerPartNumberSequence

; 592  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

	mov	rcx, QWORD PTR state$[rsp]
	test	bl, 2
	je	SHORT $LN30@ParseAsHex

; 112  :         switch (*state->IN_PTR)

	movzx	eax, WORD PTR [rcx]
	cmp	eax, 9
	jb	SHORT $LN30@ParseAsHex
	npad	7
$LL16@ParseAsHex:
	cmp	eax, 13
	jbe	SHORT $LN21@ParseAsHex
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN30@ParseAsHex
$LN21@ParseAsHex:

; 113  :         {
; 114  :         case L' ':
; 115  :         case L'\t':
; 116  :         case L'\n':
; 117  :         case L'\r':
; 118  :         case L'\f':
; 119  :         case L'\v':
; 120  :             break;
; 121  : 
; 122  :         default:
; 123  :             return;
; 124  :         }
; 125  :         state->IN_PTR += 1;

	add	rcx, 2
	mov	QWORD PTR state$[rsp], rcx
	movzx	eax, WORD PTR [rcx]
	cmp	eax, 9
	jae	SHORT $LL16@ParseAsHex
$LN30@ParseAsHex:

; 593  :         SkipSpace(&state);
; 594  :     if (*state.IN_PTR != L'\0')

	cmp	WORD PTR [rcx], di
	je	SHORT $LN4@ParseAsHex

; 595  :         return (0);

	xor	eax, eax
	jmp	SHORT $LN1@ParseAsHex
$LN4@ParseAsHex:

; 102  :     *state->INT_PART_PTR = L'\0';

	mov	rax, QWORD PTR state$[rsp+104]
	mov	WORD PTR [rax], di

; 103  :     if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT)

	test	BYTE PTR state$[rsp+8], 32		; 00000020H
	je	SHORT $LN25@ParseAsHex

; 104  :         *state->FRAC_PART_PTR = L'\0';

	mov	rax, QWORD PTR state$[rsp+112]
	mov	WORD PTR [rax], di
$LN25@ParseAsHex:

; 596  :     FinalizeParserState(&state);
; 597  :     return (1);

	mov	eax, 1
$LN1@ParseAsHex:

; 598  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	rbx, QWORD PTR [rsp+208]
	add	rsp, 192				; 000000c0H
	pop	rdi
	ret	0
ParseAsHexNumberString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT ParseAsDecimalNumberString
_TEXT	SEGMENT
state$ = 48
__$ArrayPad$ = 176
in_ptr$ = 224
number_styles$ = 232
format_option$ = 240
sign$ = 248
int_part_buf$ = 256
frac_part_buf$ = 264
ParseAsDecimalNumberString PROC				; COMDAT

; 217  : {

	mov	QWORD PTR [rsp+8], rbx
	push	rbp
	push	rsi
	push	rdi
	lea	rbp, QWORD PTR [rsp-55]
	sub	rsp, 192				; 000000c0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rbp-137], rax

; 218  :     /*
; 219  :       想定している書式：
; 220  : 
; 221  :         $ -n
; 222  :         $ n
; 223  :         $-n
; 224  :         $n
; 225  :         $n-
; 226  :         ($ n)
; 227  :         ($n)
; 228  :         (n $)
; 229  :         (n)
; 230  :         -$ n
; 231  :         -$n
; 232  :         -n
; 233  :         -n $
; 234  :         -n$
; 235  :         n $
; 236  :         n $-
; 237  :         n -
; 238  :         n$
; 239  :         n$-
; 240  :         n-
; 241  :         n-$
; 242  :     */
; 243  :     struct __tag_PARSER_STATE state;
; 244  :     InitializeParserState(&state, in_ptr, number_styles, format_option, int_part_buf, frac_part_buf);

	mov	rax, QWORD PTR frac_part_buf$[rbp-137]
	mov	rsi, r9
	mov	QWORD PTR [rsp+40], rax
	mov	r9, r8
	mov	rax, QWORD PTR int_part_buf$[rbp-137]
	mov	r8d, edx
	mov	ebx, edx
	mov	QWORD PTR [rsp+32], rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR state$[rbp-137]
	call	InitializeParserState

; 245  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE)

	mov	rcx, QWORD PTR state$[rbp-137]
	mov	r11d, ebx
	and	r11d, 1
	je	SHORT $LN452@ParseAsDec

; 112  :         switch (*state->IN_PTR)

	movzx	eax, WORD PTR [rcx]
	cmp	eax, 9
	jb	SHORT $LN452@ParseAsDec
$LL117@ParseAsDec:
	cmp	eax, 13
	jbe	SHORT $LN122@ParseAsDec
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN452@ParseAsDec
$LN122@ParseAsDec:

; 113  :         {
; 114  :         case L' ':
; 115  :         case L'\t':
; 116  :         case L'\n':
; 117  :         case L'\r':
; 118  :         case L'\f':
; 119  :         case L'\v':
; 120  :             break;
; 121  : 
; 122  :         default:
; 123  :             return;
; 124  :         }
; 125  :         state->IN_PTR += 1;

	add	rcx, 2
	mov	QWORD PTR state$[rbp-137], rcx
	movzx	eax, WORD PTR [rcx]
	cmp	eax, 9
	jae	SHORT $LL117@ParseAsDec
$LN452@ParseAsDec:

; 246  :         SkipSpace(&state);
; 247  :     if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))

	movzx	r10d, WORD PTR state$[rbp-123]
	mov	edi, ebx
	and	edi, 256				; 00000100H
	je	$LN3@ParseAsDec
	lea	rax, QWORD PTR state$[rbp-123]

; 59   :     while (*b != L'\0')

	test	r10w, r10w
	je	SHORT $LN127@ParseAsDec
	lea	r9, QWORD PTR state$[rbp-123]
	mov	r8, rcx
	sub	r8, r9
	movzx	edx, r10w
$LL126@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [r8+rax], dx
	jne	$LN3@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	edx, WORD PTR [rax+2]
	add	rax, 2
	test	dx, dx
	jne	SHORT $LL126@ParseAsDec
$LN127@ParseAsDec:

; 248  :     {
; 249  :         state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp-117]
	lea	r9, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR state$[rbp-137], r9

; 250  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE) && *state.IN_PTR == L' ')

	test	r11d, r11d
	je	SHORT $LN5@ParseAsDec
	cmp	WORD PTR [r9], 32			; 00000020H
	jne	SHORT $LN5@ParseAsDec

; 251  :             state.IN_PTR += 1;

	add	r9, 2
	mov	QWORD PTR state$[rbp-137], r9
$LN5@ParseAsDec:

; 252  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	movzx	r10d, WORD PTR state$[rbp-81]
	movzx	r11d, WORD PTR state$[rbp-91]
	test	bl, 4
	je	$LN10@ParseAsDec
	lea	rax, QWORD PTR state$[rbp-91]

; 59   :     while (*b != L'\0')

	test	r11w, r11w
	je	SHORT $LN132@ParseAsDec
	lea	r8, QWORD PTR state$[rbp-91]
	mov	rdx, r9
	sub	rdx, r8
	movzx	ecx, r11w
$LL131@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [rdx+rax], cx
	jne	SHORT $LN6@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	ecx, WORD PTR [rax+2]
	add	rax, 2
	test	cx, cx
	jne	SHORT $LL131@ParseAsDec
$LN132@ParseAsDec:

; 253  :         {
; 254  :             state.SIGN = 1;
; 255  :             state.IN_PTR += state.POSITIVE_SIGN_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp-85]

; 256  :             if (ParseDecimalDigit(*state.IN_PTR, state.NATIVE_DIGITS) >= 0)

	lea	rdx, QWORD PTR state$[rbp-113]
	lea	r9, QWORD PTR [r9+rax*2]
	mov	BYTE PTR state$[rbp-125], 1
	mov	QWORD PTR state$[rbp-137], r9
	movzx	ecx, WORD PTR [r9]
	call	ParseDecimalDigit
	test	eax, eax
	js	SHORT $LN8@ParseAsDec

; 257  :                 ParseAsIntegerPartNumberSequence(&state);

	lea	rcx, QWORD PTR state$[rbp-137]
	call	ParseAsIntegerPartNumberSequence
	mov	r9, QWORD PTR state$[rbp-137]
$LN8@ParseAsDec:

; 258  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	test	bl, 32					; 00000020H
	je	$LN112@ParseAsDec

; 59   :     while (*b != L'\0')

	movzx	ecx, WORD PTR state$[rbp-69]

; 258  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	lea	rax, QWORD PTR state$[rbp-69]

; 59   :     while (*b != L'\0')

	test	cx, cx
	je	$LN147@ParseAsDec
	lea	r8, QWORD PTR state$[rbp-69]
	mov	rdx, r9
	sub	rdx, r8
	npad	3
$LL136@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [rdx+rax], cx
	jne	$LN112@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	ecx, WORD PTR [rax+2]
	add	rax, 2
	test	cx, cx
	jne	SHORT $LL136@ParseAsDec

; 259  :             {
; 260  :                 state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;
; 261  :                 ParseAsFractionPartNumberSequence(&state);
; 262  :             }
; 263  :         }

	jmp	$LN147@ParseAsDec
$LN6@ParseAsDec:

; 264  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))

	lea	rax, QWORD PTR state$[rbp-81]

; 59   :     while (*b != L'\0')

	test	r10w, r10w
	je	SHORT $LN142@ParseAsDec
	lea	r8, QWORD PTR state$[rbp-81]
	mov	rdx, r9
	sub	rdx, r8
	movzx	ecx, r10w
$LL141@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [rdx+rax], cx
	jne	$LN10@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	ecx, WORD PTR [rax+2]
	add	rax, 2
	test	cx, cx
	jne	SHORT $LL141@ParseAsDec
$LN142@ParseAsDec:

; 265  :         {
; 266  :             state.SIGN = -1;
; 267  :             state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp-73]

; 268  :             if (ParseDecimalDigit(*state.IN_PTR, state.NATIVE_DIGITS) >= 0)

	lea	rdx, QWORD PTR state$[rbp-113]
	lea	r9, QWORD PTR [r9+rax*2]
	mov	BYTE PTR state$[rbp-125], -1
	mov	QWORD PTR state$[rbp-137], r9
	movzx	ecx, WORD PTR [r9]
	call	ParseDecimalDigit
	test	eax, eax
	js	SHORT $LN12@ParseAsDec

; 269  :                 ParseAsIntegerPartNumberSequence(&state);

	lea	rcx, QWORD PTR state$[rbp-137]
	call	ParseAsIntegerPartNumberSequence
	mov	r9, QWORD PTR state$[rbp-137]
$LN12@ParseAsDec:

; 270  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	test	bl, 32					; 00000020H
	je	$LN112@ParseAsDec

; 59   :     while (*b != L'\0')

	movzx	ecx, WORD PTR state$[rbp-69]

; 270  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	lea	rax, QWORD PTR state$[rbp-69]

; 59   :     while (*b != L'\0')

	test	cx, cx
	je	SHORT $LN147@ParseAsDec
	lea	r8, QWORD PTR state$[rbp-69]
	mov	rdx, r9
	sub	rdx, r8
	npad	7
$LL146@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [rdx+rax], cx
	jne	$LN112@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	ecx, WORD PTR [rax+2]
	add	rax, 2
	test	cx, cx
	jne	SHORT $LL146@ParseAsDec
$LN147@ParseAsDec:

; 574  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

	movsxd	rax, DWORD PTR state$[rbp-61]
	lea	rcx, QWORD PTR [r9+rax*2]
	mov	QWORD PTR state$[rbp-137], rcx
	lea	rcx, QWORD PTR state$[rbp-137]
	call	ParseAsFractionPartNumberSequence
	mov	r9, QWORD PTR state$[rbp-137]
	jmp	$LN112@ParseAsDec
$LN10@ParseAsDec:

; 271  :             {
; 272  :                 state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;
; 273  :                 ParseAsFractionPartNumberSequence(&state);
; 274  :             }
; 275  :         }
; 276  :         else
; 277  :         {
; 278  :             if (ParseDecimalDigit(*state.IN_PTR, state.NATIVE_DIGITS) >= 0)

	movzx	ecx, WORD PTR [r9]
	lea	rdx, QWORD PTR state$[rbp-113]
	call	ParseDecimalDigit
	test	eax, eax
	js	SHORT $LN14@ParseAsDec

; 279  :                 ParseAsIntegerPartNumberSequence(&state);

	lea	rcx, QWORD PTR state$[rbp-137]
	call	ParseAsIntegerPartNumberSequence
	movzx	r10d, WORD PTR state$[rbp-81]
	mov	r9, QWORD PTR state$[rbp-137]
	movzx	r11d, WORD PTR state$[rbp-91]
$LN14@ParseAsDec:

; 280  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	test	bl, 32					; 00000020H
	je	SHORT $LN15@ParseAsDec

; 59   :     while (*b != L'\0')

	movzx	ecx, WORD PTR state$[rbp-69]

; 280  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	lea	rax, QWORD PTR state$[rbp-69]

; 59   :     while (*b != L'\0')

	test	cx, cx
	je	SHORT $LN152@ParseAsDec
	lea	r8, QWORD PTR state$[rbp-69]
	mov	rdx, r9
	sub	rdx, r8
	npad	7
$LL151@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [rdx+rax], cx
	jne	SHORT $LN15@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	ecx, WORD PTR [rax+2]
	add	rax, 2
	test	cx, cx
	jne	SHORT $LL151@ParseAsDec
$LN152@ParseAsDec:

; 281  :             {
; 282  :                 state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp-61]
	lea	rcx, QWORD PTR [r9+rax*2]
	mov	QWORD PTR state$[rbp-137], rcx

; 283  :                 ParseAsFractionPartNumberSequence(&state);

	lea	rcx, QWORD PTR state$[rbp-137]
	call	ParseAsFractionPartNumberSequence
	movzx	r10d, WORD PTR state$[rbp-81]
	movzx	r11d, WORD PTR state$[rbp-91]
	mov	r9, QWORD PTR state$[rbp-137]
$LN15@ParseAsDec:

; 284  :             }
; 285  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	test	bl, 8
	je	$LN112@ParseAsDec
	lea	rax, QWORD PTR state$[rbp-91]

; 59   :     while (*b != L'\0')

	test	r11w, r11w
	je	SHORT $LN157@ParseAsDec
	lea	rdx, QWORD PTR state$[rbp-91]
	mov	rcx, r9
	sub	rcx, rdx
$LL156@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [rcx+rax], r11w
	jne	SHORT $LN16@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	r11d, WORD PTR [rax+2]
	add	rax, 2
	test	r11w, r11w
	jne	SHORT $LL156@ParseAsDec
$LN157@ParseAsDec:

; 574  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

	movsxd	rax, DWORD PTR state$[rbp-85]
	mov	BYTE PTR state$[rbp-125], 1
	jmp	$LN714@ParseAsDec
$LN16@ParseAsDec:

; 286  :             {
; 287  :                 state.SIGN = 1;
; 288  :                 state.IN_PTR += state.POSITIVE_SIGN_LENGTH;
; 289  :             }
; 290  :             else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))

	lea	rax, QWORD PTR state$[rbp-81]

; 59   :     while (*b != L'\0')

	test	r10w, r10w
	je	SHORT $LN162@ParseAsDec
	lea	rdx, QWORD PTR state$[rbp-81]
	mov	rcx, r9
	sub	rcx, rdx
	npad	6
$LL161@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [rcx+rax], r10w
	jne	$LN112@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	r10d, WORD PTR [rax+2]
	add	rax, 2
	test	r10w, r10w
	jne	SHORT $LL161@ParseAsDec
$LN162@ParseAsDec:

; 291  :             {
; 292  :                 state.SIGN = -1;
; 293  :                 state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp-73]
	mov	BYTE PTR state$[rbp-125], -1

; 294  :             }
; 295  :             else
; 296  :             {
; 297  :             }
; 298  :         }
; 299  :     }

	jmp	$LN714@ParseAsDec
$LN3@ParseAsDec:

; 300  :     else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_PARENTHESES) && *state.IN_PTR == L'(')

	test	bl, 16
	je	$LN20@ParseAsDec
	cmp	WORD PTR [rcx], 40			; 00000028H
	jne	$LN20@ParseAsDec

; 301  :     {
; 302  :         state.SIGN = -1;

	mov	BYTE PTR state$[rbp-125], -1

; 303  :         state.IN_PTR += 1;

	lea	r9, QWORD PTR [rcx+2]
	mov	QWORD PTR state$[rbp-137], r9

; 304  : 
; 305  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))

	test	edi, edi
	je	$LN22@ParseAsDec
	lea	rdx, QWORD PTR state$[rbp-123]

; 59   :     while (*b != L'\0')

	test	r10w, r10w
	je	SHORT $LN167@ParseAsDec
	mov	rax, r9
	movzx	ecx, r10w
	npad	1
$LL166@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [rax], cx
	jne	$LN22@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	ecx, WORD PTR [rdx+2]
	add	rdx, 2
	add	rax, 2
	test	cx, cx
	jne	SHORT $LL166@ParseAsDec
$LN167@ParseAsDec:

; 306  :         {
; 307  :             state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp-117]
	lea	r9, QWORD PTR [r9+rax*2]
	mov	QWORD PTR state$[rbp-137], r9

; 308  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE) && *state.IN_PTR == L' ')

	test	r11d, r11d
	je	SHORT $LN24@ParseAsDec
	cmp	WORD PTR [r9], 32			; 00000020H
	jne	SHORT $LN24@ParseAsDec

; 309  :                 state.IN_PTR += 1;

	add	r9, 2
	mov	QWORD PTR state$[rbp-137], r9
$LN24@ParseAsDec:

; 310  :             if (ParseDecimalDigit(*state.IN_PTR, state.NATIVE_DIGITS) >= 0)

	movzx	ecx, WORD PTR [r9]
	lea	rdx, QWORD PTR state$[rbp-113]
	call	ParseDecimalDigit
	test	eax, eax
	js	SHORT $LN25@ParseAsDec

; 311  :                 ParseAsIntegerPartNumberSequence(&state);

	lea	rcx, QWORD PTR state$[rbp-137]
	call	ParseAsIntegerPartNumberSequence
	mov	r9, QWORD PTR state$[rbp-137]
$LN25@ParseAsDec:

; 312  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	test	bl, 32					; 00000020H
	je	$LN30@ParseAsDec

; 59   :     while (*b != L'\0')

	movzx	ecx, WORD PTR state$[rbp-69]

; 312  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	lea	rax, QWORD PTR state$[rbp-69]

; 59   :     while (*b != L'\0')

	test	cx, cx
	je	SHORT $LN172@ParseAsDec
	lea	r8, QWORD PTR state$[rbp-69]
	mov	rdx, r9
	sub	rdx, r8
	npad	8
$LL171@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [rdx+rax], cx
	jne	$LN30@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	ecx, WORD PTR [rax+2]
	add	rax, 2
	test	cx, cx
	jne	SHORT $LL171@ParseAsDec
$LN172@ParseAsDec:

; 313  :             {
; 314  :                 state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp-61]
	lea	rcx, QWORD PTR [r9+rax*2]
	mov	QWORD PTR state$[rbp-137], rcx

; 315  :                 ParseAsFractionPartNumberSequence(&state);

	lea	rcx, QWORD PTR state$[rbp-137]
	call	ParseAsFractionPartNumberSequence

; 316  :             }
; 317  :         }

	mov	r9, QWORD PTR state$[rbp-137]
	jmp	$LN30@ParseAsDec
$LN22@ParseAsDec:

; 318  :         else
; 319  :         {
; 320  :             if (ParseDecimalDigit(*state.IN_PTR, state.NATIVE_DIGITS) >= 0)

	movzx	ecx, WORD PTR [r9]
	lea	rdx, QWORD PTR state$[rbp-113]
	call	ParseDecimalDigit
	test	eax, eax
	js	SHORT $LN27@ParseAsDec

; 321  :                 ParseAsIntegerPartNumberSequence(&state);

	lea	rcx, QWORD PTR state$[rbp-137]
	call	ParseAsIntegerPartNumberSequence
	movzx	r10d, WORD PTR state$[rbp-123]
	mov	r9, QWORD PTR state$[rbp-137]
$LN27@ParseAsDec:

; 322  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	test	bl, 32					; 00000020H
	je	SHORT $LN28@ParseAsDec

; 59   :     while (*b != L'\0')

	movzx	ecx, WORD PTR state$[rbp-69]

; 322  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	lea	rax, QWORD PTR state$[rbp-69]

; 59   :     while (*b != L'\0')

	test	cx, cx
	je	SHORT $LN177@ParseAsDec
	lea	r8, QWORD PTR state$[rbp-69]
	mov	rdx, r9
	sub	rdx, r8
$LL176@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [rdx+rax], cx
	jne	SHORT $LN28@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	ecx, WORD PTR [rax+2]
	add	rax, 2
	test	cx, cx
	jne	SHORT $LL176@ParseAsDec
$LN177@ParseAsDec:

; 323  :             {
; 324  :                 state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp-61]
	lea	rcx, QWORD PTR [r9+rax*2]
	mov	QWORD PTR state$[rbp-137], rcx

; 325  :                 ParseAsFractionPartNumberSequence(&state);

	lea	rcx, QWORD PTR state$[rbp-137]
	call	ParseAsFractionPartNumberSequence
	movzx	r10d, WORD PTR state$[rbp-123]
	mov	r9, QWORD PTR state$[rbp-137]
$LN28@ParseAsDec:

; 326  :             }
; 327  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE) && *state.IN_PTR == L' ')

	test	bl, 2
	je	SHORT $LN30@ParseAsDec
	cmp	WORD PTR [r9], 32			; 00000020H
	jne	SHORT $LN30@ParseAsDec

; 328  :             {
; 329  :                 state.IN_PTR += 1;

	add	r9, 2
	mov	QWORD PTR state$[rbp-137], r9

; 330  :                 if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))

	test	edi, edi
	je	SHORT $LN30@ParseAsDec
	lea	rcx, QWORD PTR state$[rbp-123]

; 59   :     while (*b != L'\0')

	test	r10w, r10w
	je	SHORT $LN182@ParseAsDec
	mov	rax, r9
	npad	6
$LL181@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [rax], r10w
	jne	SHORT $LN30@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	r10d, WORD PTR [rcx+2]
	add	rcx, 2
	add	rax, 2
	test	r10w, r10w
	jne	SHORT $LL181@ParseAsDec
$LN182@ParseAsDec:

; 331  :                     state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp-117]
	lea	r9, QWORD PTR [r9+rax*2]
	mov	QWORD PTR state$[rbp-137], r9
$LN30@ParseAsDec:

; 332  :             }
; 333  :         }
; 334  :         if (*state.IN_PTR != L')')

	cmp	WORD PTR [r9], 41			; 00000029H
	jne	$LN87@ParseAsDec

; 335  :             return (0);
; 336  :         state.IN_PTR += 1;

	add	r9, 2

; 337  :     }

	jmp	$LN715@ParseAsDec
$LN20@ParseAsDec:

; 338  :     else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	test	bl, 4
	je	$LN46@ParseAsDec

; 59   :     while (*b != L'\0')

	movzx	edx, WORD PTR state$[rbp-91]

; 338  :     else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	lea	rax, QWORD PTR state$[rbp-91]

; 59   :     while (*b != L'\0')

	test	dx, dx
	je	SHORT $LN187@ParseAsDec
	lea	r9, QWORD PTR state$[rbp-91]
	mov	r8, rcx
	sub	r8, r9
	npad	7
$LL186@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [r8+rax], dx
	jne	$LN32@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	edx, WORD PTR [rax+2]
	add	rax, 2
	test	dx, dx
	jne	SHORT $LL186@ParseAsDec
$LN187@ParseAsDec:

; 339  :     {
; 340  :         state.SIGN = 1;
; 341  :         state.IN_PTR += state.POSITIVE_SIGN_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp-85]
	mov	BYTE PTR state$[rbp-125], 1
	lea	r9, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR state$[rbp-137], r9

; 342  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))

	test	edi, edi
	je	$LN34@ParseAsDec
	lea	rdx, QWORD PTR state$[rbp-123]

; 59   :     while (*b != L'\0')

	test	r10w, r10w
	je	SHORT $LN192@ParseAsDec
	mov	rax, r9
	movzx	ecx, r10w
$LL191@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [rax], cx
	jne	$LN34@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	ecx, WORD PTR [rdx+2]
	add	rdx, 2
	add	rax, 2
	test	cx, cx
	jne	SHORT $LL191@ParseAsDec
$LN192@ParseAsDec:

; 343  :         {
; 344  :             state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp-117]
	lea	r9, QWORD PTR [r9+rax*2]
	mov	QWORD PTR state$[rbp-137], r9

; 345  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE) && *state.IN_PTR == L' ')

	test	r11d, r11d
	je	SHORT $LN36@ParseAsDec
	cmp	WORD PTR [r9], 32			; 00000020H
	jne	SHORT $LN36@ParseAsDec

; 346  :                 state.IN_PTR += 1;

	add	r9, 2
	mov	QWORD PTR state$[rbp-137], r9
$LN36@ParseAsDec:

; 347  :             if (ParseDecimalDigit(*state.IN_PTR, state.NATIVE_DIGITS) >= 0)

	movzx	ecx, WORD PTR [r9]
	lea	rdx, QWORD PTR state$[rbp-113]
	call	ParseDecimalDigit
	test	eax, eax
	js	SHORT $LN37@ParseAsDec

; 348  :                 ParseAsIntegerPartNumberSequence(&state);

	lea	rcx, QWORD PTR state$[rbp-137]
	call	ParseAsIntegerPartNumberSequence
	mov	r9, QWORD PTR state$[rbp-137]
$LN37@ParseAsDec:

; 349  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	test	bl, 32					; 00000020H
	je	$LN112@ParseAsDec

; 59   :     while (*b != L'\0')

	movzx	ecx, WORD PTR state$[rbp-69]

; 349  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	lea	rax, QWORD PTR state$[rbp-69]

; 59   :     while (*b != L'\0')

	test	cx, cx
	je	$LN147@ParseAsDec
	lea	r8, QWORD PTR state$[rbp-69]
	mov	rdx, r9
	sub	rdx, r8
	npad	3
$LL196@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [rdx+rax], cx
	jne	$LN112@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	ecx, WORD PTR [rax+2]
	add	rax, 2
	test	cx, cx
	jne	SHORT $LL196@ParseAsDec

; 350  :             {
; 351  :                 state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;
; 352  :                 ParseAsFractionPartNumberSequence(&state);
; 353  :             }
; 354  :         }

	jmp	$LN147@ParseAsDec
$LN32@ParseAsDec:

; 59   :     while (*b != L'\0')

	movzx	edx, WORD PTR state$[rbp-81]

; 377  :     else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))

	lea	rax, QWORD PTR state$[rbp-81]

; 59   :     while (*b != L'\0')

	test	dx, dx
	je	SHORT $LN217@ParseAsDec
	lea	r9, QWORD PTR state$[rbp-81]
	mov	r8, rcx
	sub	r8, r9
$LL216@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [r8+rax], dx
	jne	$LN46@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	edx, WORD PTR [rax+2]
	add	rax, 2
	test	dx, dx
	jne	SHORT $LL216@ParseAsDec
$LN217@ParseAsDec:

; 378  :     {
; 379  :         state.SIGN = -1;
; 380  :         state.IN_PTR += state.POSITIVE_SIGN_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp-85]
	mov	BYTE PTR state$[rbp-125], -1
	lea	r9, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR state$[rbp-137], r9

; 381  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))

	test	edi, edi
	je	$LN48@ParseAsDec
	lea	rdx, QWORD PTR state$[rbp-123]

; 59   :     while (*b != L'\0')

	test	r10w, r10w
	je	SHORT $LN222@ParseAsDec
	mov	rax, r9
	movzx	ecx, r10w
$LL221@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [rax], cx
	jne	$LN48@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	ecx, WORD PTR [rdx+2]
	add	rdx, 2
	add	rax, 2
	test	cx, cx
	jne	SHORT $LL221@ParseAsDec
$LN222@ParseAsDec:

; 382  :         {
; 383  :             state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp-117]
	lea	r9, QWORD PTR [r9+rax*2]
	mov	QWORD PTR state$[rbp-137], r9

; 384  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE) && *state.IN_PTR == L' ')

	test	r11d, r11d
	je	SHORT $LN50@ParseAsDec
	cmp	WORD PTR [r9], 32			; 00000020H
	jne	SHORT $LN50@ParseAsDec

; 385  :                 state.IN_PTR += 1;

	add	r9, 2
	mov	QWORD PTR state$[rbp-137], r9
$LN50@ParseAsDec:

; 386  :             if (ParseDecimalDigit(*state.IN_PTR, state.NATIVE_DIGITS) >= 0)

	movzx	ecx, WORD PTR [r9]
	lea	rdx, QWORD PTR state$[rbp-113]
	call	ParseDecimalDigit
	test	eax, eax
	js	SHORT $LN51@ParseAsDec

; 387  :                 ParseAsIntegerPartNumberSequence(&state);

	lea	rcx, QWORD PTR state$[rbp-137]
	call	ParseAsIntegerPartNumberSequence
	mov	r9, QWORD PTR state$[rbp-137]
$LN51@ParseAsDec:

; 388  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	test	bl, 32					; 00000020H
	je	$LN112@ParseAsDec

; 59   :     while (*b != L'\0')

	movzx	ecx, WORD PTR state$[rbp-69]

; 388  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	lea	rax, QWORD PTR state$[rbp-69]

; 59   :     while (*b != L'\0')

	test	cx, cx
	je	$LN147@ParseAsDec
	lea	r8, QWORD PTR state$[rbp-69]
	mov	rdx, r9
	sub	rdx, r8
$LL226@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [rdx+rax], cx
	jne	$LN112@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	ecx, WORD PTR [rax+2]
	add	rax, 2
	test	cx, cx
	jne	SHORT $LL226@ParseAsDec

; 389  :             {
; 390  :                 state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;
; 391  :                 ParseAsFractionPartNumberSequence(&state);
; 392  :             }
; 393  :         }

	jmp	$LN147@ParseAsDec
$LN48@ParseAsDec:

; 394  :         else
; 395  :         {
; 396  :             if (ParseDecimalDigit(*state.IN_PTR, state.NATIVE_DIGITS) >= 0)

	movzx	ecx, WORD PTR [r9]
	lea	rdx, QWORD PTR state$[rbp-113]
	call	ParseDecimalDigit
	test	eax, eax
	js	SHORT $LN53@ParseAsDec

; 397  :                 ParseAsIntegerPartNumberSequence(&state);

	lea	rcx, QWORD PTR state$[rbp-137]
	call	ParseAsIntegerPartNumberSequence
	movzx	r10d, WORD PTR state$[rbp-123]
	mov	r9, QWORD PTR state$[rbp-137]
$LN53@ParseAsDec:

; 398  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	test	bl, 32					; 00000020H
	je	SHORT $LN54@ParseAsDec

; 59   :     while (*b != L'\0')

	movzx	ecx, WORD PTR state$[rbp-69]

; 398  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	lea	rax, QWORD PTR state$[rbp-69]

; 59   :     while (*b != L'\0')

	test	cx, cx
	je	SHORT $LN232@ParseAsDec
	lea	r8, QWORD PTR state$[rbp-69]
	mov	rdx, r9
	sub	rdx, r8
	npad	5
$LL231@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [rdx+rax], cx
	jne	SHORT $LN54@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	ecx, WORD PTR [rax+2]
	add	rax, 2
	test	cx, cx
	jne	SHORT $LL231@ParseAsDec
$LN232@ParseAsDec:

; 399  :             {
; 400  :                 state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp-61]
	lea	rcx, QWORD PTR [r9+rax*2]
	mov	QWORD PTR state$[rbp-137], rcx

; 401  :                 ParseAsFractionPartNumberSequence(&state);

	lea	rcx, QWORD PTR state$[rbp-137]
	call	ParseAsFractionPartNumberSequence
	movzx	r10d, WORD PTR state$[rbp-123]
	mov	r9, QWORD PTR state$[rbp-137]
$LN54@ParseAsDec:

; 402  :             }
; 403  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE) && *state.IN_PTR == L' ')

	test	bl, 2
	je	SHORT $LN55@ParseAsDec
	cmp	WORD PTR [r9], 32			; 00000020H
	jne	SHORT $LN55@ParseAsDec

; 404  :             {
; 405  :                 state.IN_PTR += 1;

	add	r9, 2
	mov	QWORD PTR state$[rbp-137], r9

; 406  :                 if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))

	test	edi, edi
	je	$LN112@ParseAsDec
	lea	rcx, QWORD PTR state$[rbp-123]

; 59   :     while (*b != L'\0')

	test	r10w, r10w
	je	$LN375@ParseAsDec
	mov	rax, r9
	npad	2
$LL236@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [rax], r10w
	jne	$LN112@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	r10d, WORD PTR [rcx+2]
	add	rcx, 2
	add	rax, 2
	test	r10w, r10w
	jne	SHORT $LL236@ParseAsDec

; 407  :                     state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;
; 408  :             }

	jmp	$LN375@ParseAsDec
$LN55@ParseAsDec:

; 409  :             else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))

	test	edi, edi
	je	$LN112@ParseAsDec
	lea	rax, QWORD PTR state$[rbp-123]

; 59   :     while (*b != L'\0')

	test	r10w, r10w
	je	$LN375@ParseAsDec
	lea	rdx, QWORD PTR state$[rbp-123]
	mov	rcx, r9
	sub	rcx, rdx
$LL241@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [rcx+rax], r10w
	jne	$LN112@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	r10d, WORD PTR [rax+2]
	add	rax, 2
	test	r10w, r10w
	jne	SHORT $LL241@ParseAsDec

; 410  :                 state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;
; 411  :             else
; 412  :             {
; 413  :             }
; 414  :         }
; 415  :     }

	jmp	$LN375@ParseAsDec
$LN34@ParseAsDec:

; 355  :         else
; 356  :         {
; 357  :             if (ParseDecimalDigit(*state.IN_PTR, state.NATIVE_DIGITS) >= 0)

	movzx	ecx, WORD PTR [r9]
	lea	rdx, QWORD PTR state$[rbp-113]
	call	ParseDecimalDigit
	test	eax, eax
	js	SHORT $LN39@ParseAsDec

; 358  :                 ParseAsIntegerPartNumberSequence(&state);

	lea	rcx, QWORD PTR state$[rbp-137]
	call	ParseAsIntegerPartNumberSequence
	movzx	r10d, WORD PTR state$[rbp-123]
	mov	r9, QWORD PTR state$[rbp-137]
$LN39@ParseAsDec:

; 359  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	test	bl, 32					; 00000020H
	je	SHORT $LN40@ParseAsDec

; 59   :     while (*b != L'\0')

	movzx	ecx, WORD PTR state$[rbp-69]

; 359  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	lea	rax, QWORD PTR state$[rbp-69]

; 59   :     while (*b != L'\0')

	test	cx, cx
	je	SHORT $LN202@ParseAsDec
	lea	r8, QWORD PTR state$[rbp-69]
	mov	rdx, r9
	sub	rdx, r8
$LL201@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [rdx+rax], cx
	jne	SHORT $LN40@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	ecx, WORD PTR [rax+2]
	add	rax, 2
	test	cx, cx
	jne	SHORT $LL201@ParseAsDec
$LN202@ParseAsDec:

; 360  :             {
; 361  :                 state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp-61]
	lea	rcx, QWORD PTR [r9+rax*2]
	mov	QWORD PTR state$[rbp-137], rcx

; 362  :                 ParseAsFractionPartNumberSequence(&state);

	lea	rcx, QWORD PTR state$[rbp-137]
	call	ParseAsFractionPartNumberSequence
	movzx	r10d, WORD PTR state$[rbp-123]
	mov	r9, QWORD PTR state$[rbp-137]
$LN40@ParseAsDec:

; 363  :             }
; 364  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE) && *state.IN_PTR == L' ')

	test	bl, 2
	je	SHORT $LN41@ParseAsDec
	cmp	WORD PTR [r9], 32			; 00000020H
	jne	SHORT $LN41@ParseAsDec

; 365  :             {
; 366  :                 state.IN_PTR += 1;

	add	r9, 2
	mov	QWORD PTR state$[rbp-137], r9

; 367  :                 if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))

	test	edi, edi
	je	$LN112@ParseAsDec
	lea	rcx, QWORD PTR state$[rbp-123]

; 59   :     while (*b != L'\0')

	test	r10w, r10w
	je	$LN375@ParseAsDec
	mov	rax, r9
	npad	2
$LL206@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [rax], r10w
	jne	$LN112@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	r10d, WORD PTR [rcx+2]
	add	rcx, 2
	add	rax, 2
	test	r10w, r10w
	jne	SHORT $LL206@ParseAsDec

; 368  :                     state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;
; 369  :             }

	jmp	$LN375@ParseAsDec
$LN41@ParseAsDec:

; 370  :             else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))

	test	edi, edi
	je	$LN112@ParseAsDec
	lea	rax, QWORD PTR state$[rbp-123]

; 59   :     while (*b != L'\0')

	test	r10w, r10w
	je	$LN375@ParseAsDec
	lea	rdx, QWORD PTR state$[rbp-123]
	mov	rcx, r9
	sub	rcx, rdx
$LL211@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [rcx+rax], r10w
	jne	$LN112@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	r10d, WORD PTR [rax+2]
	add	rax, 2
	test	r10w, r10w
	jne	SHORT $LL211@ParseAsDec

; 371  :                 state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;
; 372  :             else
; 373  :             {
; 374  :             }
; 375  :         }
; 376  :     }

	jmp	$LN375@ParseAsDec
$LN46@ParseAsDec:

; 416  :     else if (ParseDecimalDigit(*state.IN_PTR, state.NATIVE_DIGITS) >= 0)

	movzx	edx, WORD PTR [rcx]

; 131  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [rdx-48]
	cmp	ax, 9
	ja	SHORT $LN246@ParseAsDec

; 132  :         return (c - L'0');

	movzx	eax, dx
	add	eax, -48				; ffffffffffffffd0H
	jmp	$LN245@ParseAsDec
$LN246@ParseAsDec:

; 133  :     if (c == native_digits[0])

	cmp	dx, WORD PTR state$[rbp-113]
	jne	SHORT $LN247@ParseAsDec

; 416  :     else if (ParseDecimalDigit(*state.IN_PTR, state.NATIVE_DIGITS) >= 0)

	mov	r11d, ebx
	and	r11d, 32				; 00000020H

; 134  :         return (0);

	jmp	$LN660@ParseAsDec
$LN247@ParseAsDec:

; 135  :     if (c == native_digits[1])

	cmp	dx, WORD PTR state$[rbp-111]
	jne	SHORT $LN248@ParseAsDec

; 416  :     else if (ParseDecimalDigit(*state.IN_PTR, state.NATIVE_DIGITS) >= 0)

	mov	r11d, ebx
	and	r11d, 32				; 00000020H

; 136  :         return (1);

	jmp	$LN660@ParseAsDec
$LN248@ParseAsDec:

; 137  :     if (c == native_digits[2])

	cmp	dx, WORD PTR state$[rbp-109]
	jne	SHORT $LN249@ParseAsDec

; 416  :     else if (ParseDecimalDigit(*state.IN_PTR, state.NATIVE_DIGITS) >= 0)

	mov	r11d, ebx
	and	r11d, 32				; 00000020H

; 138  :         return (2);

	jmp	SHORT $LN660@ParseAsDec
$LN249@ParseAsDec:

; 139  :     if (c == native_digits[3])

	cmp	dx, WORD PTR state$[rbp-107]
	jne	SHORT $LN250@ParseAsDec

; 416  :     else if (ParseDecimalDigit(*state.IN_PTR, state.NATIVE_DIGITS) >= 0)

	mov	r11d, ebx
	and	r11d, 32				; 00000020H

; 140  :         return (3);

	jmp	SHORT $LN660@ParseAsDec
$LN250@ParseAsDec:

; 141  :     if (c == native_digits[4])

	cmp	dx, WORD PTR state$[rbp-105]
	jne	SHORT $LN251@ParseAsDec

; 416  :     else if (ParseDecimalDigit(*state.IN_PTR, state.NATIVE_DIGITS) >= 0)

	mov	r11d, ebx
	and	r11d, 32				; 00000020H

; 142  :         return (4);

	jmp	SHORT $LN660@ParseAsDec
$LN251@ParseAsDec:

; 143  :     if (c == native_digits[5])

	cmp	dx, WORD PTR state$[rbp-103]
	jne	SHORT $LN252@ParseAsDec

; 416  :     else if (ParseDecimalDigit(*state.IN_PTR, state.NATIVE_DIGITS) >= 0)

	mov	r11d, ebx
	and	r11d, 32				; 00000020H

; 144  :         return (5);

	jmp	SHORT $LN660@ParseAsDec
$LN252@ParseAsDec:

; 145  :     if (c == native_digits[6])

	cmp	dx, WORD PTR state$[rbp-101]
	jne	SHORT $LN253@ParseAsDec

; 416  :     else if (ParseDecimalDigit(*state.IN_PTR, state.NATIVE_DIGITS) >= 0)

	mov	r11d, ebx
	and	r11d, 32				; 00000020H

; 146  :         return (6);

	jmp	SHORT $LN660@ParseAsDec
$LN253@ParseAsDec:

; 147  :     if (c == native_digits[7])

	cmp	dx, WORD PTR state$[rbp-99]
	jne	SHORT $LN254@ParseAsDec

; 416  :     else if (ParseDecimalDigit(*state.IN_PTR, state.NATIVE_DIGITS) >= 0)

	mov	r11d, ebx
	and	r11d, 32				; 00000020H

; 148  :         return (7);

	jmp	SHORT $LN660@ParseAsDec
$LN254@ParseAsDec:

; 149  :     if (c == native_digits[8])

	cmp	dx, WORD PTR state$[rbp-97]
	jne	SHORT $LN255@ParseAsDec

; 416  :     else if (ParseDecimalDigit(*state.IN_PTR, state.NATIVE_DIGITS) >= 0)

	mov	r11d, ebx
	and	r11d, 32				; 00000020H

; 150  :         return (8);

	jmp	SHORT $LN660@ParseAsDec
$LN255@ParseAsDec:

; 151  :     if (c == native_digits[9])

	cmp	dx, WORD PTR state$[rbp-95]
	jne	SHORT $LN256@ParseAsDec

; 416  :     else if (ParseDecimalDigit(*state.IN_PTR, state.NATIVE_DIGITS) >= 0)

	mov	r11d, ebx
	and	r11d, 32				; 00000020H

; 152  :         return (9);

	jmp	SHORT $LN660@ParseAsDec
$LN256@ParseAsDec:

; 153  :     return (-1);

	mov	eax, -1
$LN245@ParseAsDec:

; 416  :     else if (ParseDecimalDigit(*state.IN_PTR, state.NATIVE_DIGITS) >= 0)

	mov	r11d, ebx
	and	r11d, 32				; 00000020H
	test	eax, eax
	js	$LN60@ParseAsDec
$LN660@ParseAsDec:

; 417  :     {
; 418  :         ParseAsIntegerPartNumberSequence(&state);

	lea	rcx, QWORD PTR state$[rbp-137]
	call	ParseAsIntegerPartNumberSequence

; 419  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	mov	r9, QWORD PTR state$[rbp-137]
	test	r11d, r11d
	je	SHORT $LN62@ParseAsDec

; 59   :     while (*b != L'\0')

	movzx	ecx, WORD PTR state$[rbp-69]

; 419  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	lea	rax, QWORD PTR state$[rbp-69]

; 59   :     while (*b != L'\0')

	test	cx, cx
	je	SHORT $LN260@ParseAsDec
	lea	r8, QWORD PTR state$[rbp-69]
	mov	rdx, r9
	sub	rdx, r8
$LL259@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [rdx+rax], cx
	jne	SHORT $LN62@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	ecx, WORD PTR [rax+2]
	add	rax, 2
	test	cx, cx
	jne	SHORT $LL259@ParseAsDec
$LN260@ParseAsDec:

; 420  :         {
; 421  :             state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp-61]
	lea	rcx, QWORD PTR [r9+rax*2]
	mov	QWORD PTR state$[rbp-137], rcx

; 422  :             ParseAsFractionPartNumberSequence(&state);

	lea	rcx, QWORD PTR state$[rbp-137]
	call	ParseAsFractionPartNumberSequence
	mov	r9, QWORD PTR state$[rbp-137]
$LN62@ParseAsDec:

; 423  :         }
; 424  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE) && *state.IN_PTR == L' ')

	test	bl, 2
	je	$LN63@ParseAsDec
	cmp	WORD PTR [r9], 32			; 00000020H
	jne	$LN63@ParseAsDec

; 425  :         {
; 426  :             state.IN_PTR += 1;

	add	r9, 2
	mov	QWORD PTR state$[rbp-137], r9

; 427  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))

	test	edi, edi
	je	$LN65@ParseAsDec

; 59   :     while (*b != L'\0')

	movzx	eax, WORD PTR state$[rbp-123]

; 427  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))

	lea	rdx, QWORD PTR state$[rbp-123]

; 59   :     while (*b != L'\0')

	test	ax, ax
	je	SHORT $LN265@ParseAsDec
	mov	rcx, r9
$LL264@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [rcx], ax
	jne	$LN65@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	eax, WORD PTR [rdx+2]
	add	rdx, 2
	add	rcx, 2
	test	ax, ax
	jne	SHORT $LL264@ParseAsDec
$LN265@ParseAsDec:

; 428  :             {
; 429  :                 state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp-117]
	lea	r9, QWORD PTR [r9+rax*2]
	mov	QWORD PTR state$[rbp-137], r9

; 430  :                 if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	test	bl, 8
	je	$LN112@ParseAsDec

; 59   :     while (*b != L'\0')

	movzx	eax, WORD PTR state$[rbp-91]

; 430  :                 if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	lea	rdx, QWORD PTR state$[rbp-91]

; 59   :     while (*b != L'\0')

	test	ax, ax
	je	$LN157@ParseAsDec
	mov	rcx, r9
$LL269@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [rcx], ax
	jne	SHORT $LN67@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	eax, WORD PTR [rdx+2]
	add	rdx, 2
	add	rcx, 2
	test	ax, ax
	jne	SHORT $LL269@ParseAsDec

; 574  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

	movsxd	rax, DWORD PTR state$[rbp-85]
	mov	BYTE PTR state$[rbp-125], 1
	jmp	$LN714@ParseAsDec
$LN67@ParseAsDec:

; 59   :     while (*b != L'\0')

	movzx	ecx, WORD PTR state$[rbp-81]

; 431  :                 {
; 432  :                     state.SIGN = 1;
; 433  :                     state.IN_PTR += state.POSITIVE_SIGN_LENGTH;
; 434  :                 }
; 435  :                 else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))

	lea	rax, QWORD PTR state$[rbp-81]

; 59   :     while (*b != L'\0')

	test	cx, cx
	je	$LN162@ParseAsDec
	lea	r8, QWORD PTR state$[rbp-81]
	mov	rdx, r9
	sub	rdx, r8
$LL274@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [rdx+rax], cx
	jne	$LN112@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	ecx, WORD PTR [rax+2]
	add	rax, 2
	test	cx, cx
	jne	SHORT $LL274@ParseAsDec

; 436  :                 {
; 437  :                     state.SIGN = -1;

	movsxd	rax, DWORD PTR state$[rbp-73]
	mov	BYTE PTR state$[rbp-125], -1

; 438  :                     state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;
; 439  :                 }
; 440  :                 else
; 441  :                 {
; 442  :                 }
; 443  :             }

	jmp	$LN714@ParseAsDec
$LN65@ParseAsDec:

; 444  :             else
; 445  :             {
; 446  :                 if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	test	bl, 8
	je	$LN112@ParseAsDec

; 59   :     while (*b != L'\0')

	movzx	ecx, WORD PTR state$[rbp-91]

; 444  :             else
; 445  :             {
; 446  :                 if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	lea	rax, QWORD PTR state$[rbp-91]

; 59   :     while (*b != L'\0')

	test	cx, cx
	je	$LN157@ParseAsDec
	lea	r8, QWORD PTR state$[rbp-91]
	mov	rdx, r9
	sub	rdx, r8
	npad	6
$LL279@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [rdx+rax], cx
	jne	SHORT $LN71@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	ecx, WORD PTR [rax+2]
	add	rax, 2
	test	cx, cx
	jne	SHORT $LL279@ParseAsDec

; 574  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

	movsxd	rax, DWORD PTR state$[rbp-85]
	mov	BYTE PTR state$[rbp-125], 1
	jmp	$LN714@ParseAsDec
$LN71@ParseAsDec:

; 59   :     while (*b != L'\0')

	movzx	ecx, WORD PTR state$[rbp-81]

; 447  :                 {
; 448  :                     state.SIGN = 1;
; 449  :                     state.IN_PTR += state.POSITIVE_SIGN_LENGTH;
; 450  :                 }
; 451  :                 else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))

	lea	rax, QWORD PTR state$[rbp-81]

; 59   :     while (*b != L'\0')

	test	cx, cx
	je	$LN162@ParseAsDec
	lea	r8, QWORD PTR state$[rbp-81]
	mov	rdx, r9
	sub	rdx, r8
	npad	5
$LL284@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [rdx+rax], cx
	jne	$LN112@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	ecx, WORD PTR [rax+2]
	add	rax, 2
	test	cx, cx
	jne	SHORT $LL284@ParseAsDec

; 452  :                 {
; 453  :                     state.SIGN = -1;

	movsxd	rax, DWORD PTR state$[rbp-73]
	mov	BYTE PTR state$[rbp-125], -1

; 454  :                     state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;
; 455  :                 }
; 456  :                 else
; 457  :                 {
; 458  :                 }
; 459  :             }
; 460  :         }

	jmp	$LN714@ParseAsDec
$LN63@ParseAsDec:

; 461  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))

	movzx	ecx, WORD PTR state$[rbp-123]
	test	edi, edi
	je	$LN75@ParseAsDec
	lea	rax, QWORD PTR state$[rbp-123]

; 59   :     while (*b != L'\0')

	test	cx, cx
	je	SHORT $LN290@ParseAsDec
	lea	r10, QWORD PTR state$[rbp-123]
	mov	r8, r9
	sub	r8, r10
	movzx	edx, cx
	npad	10
$LL289@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [r8+rax], dx
	jne	$LN75@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	edx, WORD PTR [rax+2]
	add	rax, 2
	test	dx, dx
	jne	SHORT $LL289@ParseAsDec
$LN290@ParseAsDec:

; 462  :         {
; 463  :             state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp-117]
	lea	r9, QWORD PTR [r9+rax*2]
	mov	QWORD PTR state$[rbp-137], r9

; 464  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	test	bl, 8
	je	$LN112@ParseAsDec

; 59   :     while (*b != L'\0')

	movzx	eax, WORD PTR state$[rbp-91]

; 464  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	lea	rdx, QWORD PTR state$[rbp-91]

; 59   :     while (*b != L'\0')

	test	ax, ax
	je	$LN157@ParseAsDec
	mov	rcx, r9
$LL294@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [rcx], ax
	jne	SHORT $LN77@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	eax, WORD PTR [rdx+2]
	add	rdx, 2
	add	rcx, 2
	test	ax, ax
	jne	SHORT $LL294@ParseAsDec

; 574  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

	movsxd	rax, DWORD PTR state$[rbp-85]
	mov	BYTE PTR state$[rbp-125], 1
	jmp	$LN714@ParseAsDec
$LN77@ParseAsDec:

; 59   :     while (*b != L'\0')

	movzx	ecx, WORD PTR state$[rbp-81]

; 465  :             {
; 466  :                 state.SIGN = 1;
; 467  :                 state.IN_PTR += state.POSITIVE_SIGN_LENGTH;
; 468  :             }
; 469  :             else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))

	lea	rax, QWORD PTR state$[rbp-81]

; 59   :     while (*b != L'\0')

	test	cx, cx
	je	$LN162@ParseAsDec
	lea	r8, QWORD PTR state$[rbp-81]
	mov	rdx, r9
	sub	rdx, r8
	npad	1
$LL299@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [rdx+rax], cx
	jne	$LN112@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	ecx, WORD PTR [rax+2]
	add	rax, 2
	test	cx, cx
	jne	SHORT $LL299@ParseAsDec

; 470  :             {
; 471  :                 state.SIGN = -1;

	movsxd	rax, DWORD PTR state$[rbp-73]
	mov	BYTE PTR state$[rbp-125], -1

; 472  :                 state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;
; 473  :             }
; 474  :             else
; 475  :             {
; 476  :             }
; 477  :         }

	jmp	$LN714@ParseAsDec
$LN75@ParseAsDec:

; 478  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	test	bl, 8
	je	$LN112@ParseAsDec

; 59   :     while (*b != L'\0')

	movzx	edx, WORD PTR state$[rbp-91]

; 478  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	lea	rax, QWORD PTR state$[rbp-91]

; 59   :     while (*b != L'\0')

	test	dx, dx
	je	SHORT $LN305@ParseAsDec
	lea	r10, QWORD PTR state$[rbp-91]
	mov	r8, r9
	sub	r8, r10
$LL304@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [r8+rax], dx
	jne	SHORT $LN81@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	edx, WORD PTR [rax+2]
	add	rax, 2
	test	dx, dx
	jne	SHORT $LL304@ParseAsDec
$LN305@ParseAsDec:

; 479  :         {
; 480  :             state.SIGN = 1;
; 481  :             state.IN_PTR += state.POSITIVE_SIGN_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp-85]
	mov	BYTE PTR state$[rbp-125], 1
	lea	r9, QWORD PTR [r9+rax*2]
	mov	QWORD PTR state$[rbp-137], r9

; 482  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))

	test	edi, edi
	je	$LN112@ParseAsDec
	lea	rdx, QWORD PTR state$[rbp-123]

; 59   :     while (*b != L'\0')

	test	cx, cx
	je	$LN375@ParseAsDec
	mov	rax, r9
$LL309@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [rax], cx
	jne	$LN112@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	ecx, WORD PTR [rdx+2]
	add	rdx, 2
	add	rax, 2
	test	cx, cx
	jne	SHORT $LL309@ParseAsDec

; 483  :                 state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;
; 484  :         }

	jmp	$LN375@ParseAsDec
$LN81@ParseAsDec:

; 59   :     while (*b != L'\0')

	movzx	edx, WORD PTR state$[rbp-81]

; 485  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))

	lea	rax, QWORD PTR state$[rbp-81]

; 59   :     while (*b != L'\0')

	test	dx, dx
	je	SHORT $LN315@ParseAsDec
	lea	r10, QWORD PTR state$[rbp-81]
	mov	r8, r9
	sub	r8, r10
	npad	10
$LL314@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [r8+rax], dx
	jne	$LN112@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	edx, WORD PTR [rax+2]
	add	rax, 2
	test	dx, dx
	jne	SHORT $LL314@ParseAsDec
$LN315@ParseAsDec:

; 486  :         {
; 487  :             state.SIGN = -1;
; 488  :             state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp-73]
	mov	BYTE PTR state$[rbp-125], -1
	lea	r9, QWORD PTR [r9+rax*2]
	mov	QWORD PTR state$[rbp-137], r9

; 489  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))

	test	edi, edi
	je	$LN112@ParseAsDec
	lea	rdx, QWORD PTR state$[rbp-123]

; 59   :     while (*b != L'\0')

	test	cx, cx
	je	$LN375@ParseAsDec
	mov	rax, r9
$LL319@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [rax], cx
	jne	$LN112@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	ecx, WORD PTR [rdx+2]
	add	rdx, 2
	add	rax, 2
	test	cx, cx
	jne	SHORT $LL319@ParseAsDec

; 490  :                 state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;
; 491  :         }
; 492  :         else
; 493  :         {
; 494  :         }
; 495  :     }

	jmp	$LN375@ParseAsDec
$LN60@ParseAsDec:

; 496  :     else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	test	r11d, r11d
	je	$LN87@ParseAsDec

; 59   :     while (*b != L'\0')

	movzx	edx, WORD PTR state$[rbp-69]

; 496  :     else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && StartsWith(state.IN_PTR, state.DECIMAL_SEPARATOR))

	lea	rax, QWORD PTR state$[rbp-69]

; 59   :     while (*b != L'\0')

	test	dx, dx
	je	SHORT $LN325@ParseAsDec
	lea	r9, QWORD PTR state$[rbp-69]
	mov	r8, rcx
	sub	r8, r9
	npad	1
$LL324@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [r8+rax], dx
	jne	$LN87@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	edx, WORD PTR [rax+2]
	add	rax, 2
	test	dx, dx
	jne	SHORT $LL324@ParseAsDec
$LN325@ParseAsDec:

; 497  :     {
; 498  :         state.IN_PTR += state.DECIMAL_SEPARATOR_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp-61]
	lea	rcx, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR state$[rbp-137], rcx

; 499  :         ParseAsFractionPartNumberSequence(&state);

	lea	rcx, QWORD PTR state$[rbp-137]
	call	ParseAsFractionPartNumberSequence

; 500  :         if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE) && *state.IN_PTR == L' ')

	mov	r9, QWORD PTR state$[rbp-137]
	test	bl, 2
	je	$LN89@ParseAsDec
	cmp	WORD PTR [r9], 32			; 00000020H
	jne	$LN89@ParseAsDec

; 501  :         {
; 502  :             state.IN_PTR += 1;

	add	r9, 2
	mov	QWORD PTR state$[rbp-137], r9

; 503  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))

	test	edi, edi
	je	$LN91@ParseAsDec

; 59   :     while (*b != L'\0')

	movzx	eax, WORD PTR state$[rbp-123]

; 503  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))

	lea	rdx, QWORD PTR state$[rbp-123]

; 59   :     while (*b != L'\0')

	test	ax, ax
	je	SHORT $LN330@ParseAsDec
	mov	rcx, r9
$LL329@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [rcx], ax
	jne	$LN91@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	eax, WORD PTR [rdx+2]
	add	rdx, 2
	add	rcx, 2
	test	ax, ax
	jne	SHORT $LL329@ParseAsDec
$LN330@ParseAsDec:

; 504  :             {
; 505  :                 state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp-117]
	lea	r9, QWORD PTR [r9+rax*2]
	mov	QWORD PTR state$[rbp-137], r9

; 506  :                 if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	test	bl, 8
	je	$LN112@ParseAsDec

; 59   :     while (*b != L'\0')

	movzx	eax, WORD PTR state$[rbp-91]

; 506  :                 if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	lea	rdx, QWORD PTR state$[rbp-91]

; 59   :     while (*b != L'\0')

	test	ax, ax
	je	$LN157@ParseAsDec
	mov	rcx, r9
$LL334@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [rcx], ax
	jne	SHORT $LN93@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	eax, WORD PTR [rdx+2]
	add	rdx, 2
	add	rcx, 2
	test	ax, ax
	jne	SHORT $LL334@ParseAsDec

; 574  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

	movsxd	rax, DWORD PTR state$[rbp-85]
	mov	BYTE PTR state$[rbp-125], 1
	jmp	$LN714@ParseAsDec
$LN93@ParseAsDec:

; 59   :     while (*b != L'\0')

	movzx	ecx, WORD PTR state$[rbp-81]

; 507  :                 {
; 508  :                     state.SIGN = 1;
; 509  :                     state.IN_PTR += state.POSITIVE_SIGN_LENGTH;
; 510  :                 }
; 511  :                 else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))

	lea	rax, QWORD PTR state$[rbp-81]

; 59   :     while (*b != L'\0')

	test	cx, cx
	je	$LN162@ParseAsDec
	lea	r8, QWORD PTR state$[rbp-81]
	mov	rdx, r9
	sub	rdx, r8
$LL339@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [rdx+rax], cx
	jne	$LN112@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	ecx, WORD PTR [rax+2]
	add	rax, 2
	test	cx, cx
	jne	SHORT $LL339@ParseAsDec

; 512  :                 {
; 513  :                     state.SIGN = -1;

	movsxd	rax, DWORD PTR state$[rbp-73]
	mov	BYTE PTR state$[rbp-125], -1

; 514  :                     state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;
; 515  :                 }
; 516  :                 else
; 517  :                 {
; 518  :                 }
; 519  :             }

	jmp	$LN714@ParseAsDec
$LN91@ParseAsDec:

; 520  :             else
; 521  :             {
; 522  :                 if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	test	bl, 8
	je	$LN112@ParseAsDec

; 59   :     while (*b != L'\0')

	movzx	ecx, WORD PTR state$[rbp-91]

; 520  :             else
; 521  :             {
; 522  :                 if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	lea	rax, QWORD PTR state$[rbp-91]

; 59   :     while (*b != L'\0')

	test	cx, cx
	je	$LN157@ParseAsDec
	lea	r8, QWORD PTR state$[rbp-91]
	mov	rdx, r9
	sub	rdx, r8
	npad	2
$LL344@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [rdx+rax], cx
	jne	SHORT $LN97@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	ecx, WORD PTR [rax+2]
	add	rax, 2
	test	cx, cx
	jne	SHORT $LL344@ParseAsDec

; 574  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

	movsxd	rax, DWORD PTR state$[rbp-85]
	mov	BYTE PTR state$[rbp-125], 1
	jmp	$LN714@ParseAsDec
$LN97@ParseAsDec:

; 59   :     while (*b != L'\0')

	movzx	ecx, WORD PTR state$[rbp-81]

; 523  :                 {
; 524  :                     state.SIGN = 1;
; 525  :                     state.IN_PTR += state.POSITIVE_SIGN_LENGTH;
; 526  :                 }
; 527  :                 else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))

	lea	rax, QWORD PTR state$[rbp-81]

; 59   :     while (*b != L'\0')

	test	cx, cx
	je	$LN162@ParseAsDec
	lea	r8, QWORD PTR state$[rbp-81]
	mov	rdx, r9
	sub	rdx, r8
	npad	5
$LL349@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [rdx+rax], cx
	jne	$LN112@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	ecx, WORD PTR [rax+2]
	add	rax, 2
	test	cx, cx
	jne	SHORT $LL349@ParseAsDec

; 528  :                 {
; 529  :                     state.SIGN = -1;

	movsxd	rax, DWORD PTR state$[rbp-73]
	mov	BYTE PTR state$[rbp-125], -1

; 530  :                     state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;
; 531  :                 }
; 532  :                 else
; 533  :                 {
; 534  :                 }
; 535  :             }
; 536  :         }

	jmp	$LN714@ParseAsDec
$LN89@ParseAsDec:

; 537  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))

	movzx	ecx, WORD PTR state$[rbp-123]
	test	edi, edi
	je	$LN101@ParseAsDec
	lea	rax, QWORD PTR state$[rbp-123]

; 59   :     while (*b != L'\0')

	test	cx, cx
	je	SHORT $LN355@ParseAsDec
	lea	r10, QWORD PTR state$[rbp-123]
	mov	r8, r9
	sub	r8, r10
	movzx	edx, cx
	npad	10
$LL354@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [r8+rax], dx
	jne	$LN101@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	edx, WORD PTR [rax+2]
	add	rax, 2
	test	dx, dx
	jne	SHORT $LL354@ParseAsDec
$LN355@ParseAsDec:

; 538  :         {
; 539  :             state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp-117]
	lea	r9, QWORD PTR [r9+rax*2]
	mov	QWORD PTR state$[rbp-137], r9

; 540  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	test	bl, 8
	je	$LN112@ParseAsDec

; 59   :     while (*b != L'\0')

	movzx	eax, WORD PTR state$[rbp-91]

; 540  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	lea	rdx, QWORD PTR state$[rbp-91]

; 59   :     while (*b != L'\0')

	test	ax, ax
	je	$LN157@ParseAsDec
	mov	rcx, r9
$LL359@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [rcx], ax
	jne	SHORT $LN103@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	eax, WORD PTR [rdx+2]
	add	rdx, 2
	add	rcx, 2
	test	ax, ax
	jne	SHORT $LL359@ParseAsDec

; 574  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

	movsxd	rax, DWORD PTR state$[rbp-85]
	mov	BYTE PTR state$[rbp-125], 1
	jmp	$LN714@ParseAsDec
$LN103@ParseAsDec:

; 59   :     while (*b != L'\0')

	movzx	ecx, WORD PTR state$[rbp-81]

; 541  :             {
; 542  :                 state.SIGN = 1;
; 543  :                 state.IN_PTR += state.POSITIVE_SIGN_LENGTH;
; 544  :             }
; 545  :             else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))

	lea	rax, QWORD PTR state$[rbp-81]

; 59   :     while (*b != L'\0')

	test	cx, cx
	je	$LN162@ParseAsDec
	lea	r8, QWORD PTR state$[rbp-81]
	mov	rdx, r9
	sub	rdx, r8
	npad	1
$LL364@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [rdx+rax], cx
	jne	$LN112@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	ecx, WORD PTR [rax+2]
	add	rax, 2
	test	cx, cx
	jne	SHORT $LL364@ParseAsDec

; 546  :             {
; 547  :                 state.SIGN = -1;

	movsxd	rax, DWORD PTR state$[rbp-73]
	mov	BYTE PTR state$[rbp-125], -1

; 548  :                 state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;
; 549  :             }
; 550  :             else
; 551  :             {
; 552  :             }
; 553  :         }

	jmp	SHORT $LN714@ParseAsDec
$LN101@ParseAsDec:

; 554  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	test	bl, 8
	je	SHORT $LN112@ParseAsDec

; 59   :     while (*b != L'\0')

	movzx	edx, WORD PTR state$[rbp-91]

; 554  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.POSITIVE_SIGN))

	lea	rax, QWORD PTR state$[rbp-91]

; 59   :     while (*b != L'\0')

	test	dx, dx
	je	SHORT $LN370@ParseAsDec
	lea	r10, QWORD PTR state$[rbp-91]
	mov	r8, r9
	sub	r8, r10
	npad	3
$LL369@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [r8+rax], dx
	jne	$LN107@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	edx, WORD PTR [rax+2]
	add	rax, 2
	test	dx, dx
	jne	SHORT $LL369@ParseAsDec
$LN370@ParseAsDec:

; 555  :         {
; 556  :             state.SIGN = 1;
; 557  :             state.IN_PTR += state.POSITIVE_SIGN_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp-85]
	mov	BYTE PTR state$[rbp-125], 1
	lea	r9, QWORD PTR [r9+rax*2]
	mov	QWORD PTR state$[rbp-137], r9

; 558  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))

	test	edi, edi
	je	SHORT $LN112@ParseAsDec
	lea	rdx, QWORD PTR state$[rbp-123]

; 59   :     while (*b != L'\0')

	test	cx, cx
	je	SHORT $LN375@ParseAsDec
	mov	rax, r9
$LL374@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [rax], cx
	jne	SHORT $LN112@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	ecx, WORD PTR [rdx+2]
	add	rdx, 2
	add	rax, 2
	test	cx, cx
	jne	SHORT $LL374@ParseAsDec
$LN375@ParseAsDec:

; 574  :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

	movsxd	rax, DWORD PTR state$[rbp-117]
$LN714@ParseAsDec:
	lea	r9, QWORD PTR [r9+rax*2]
$LN715@ParseAsDec:
	mov	QWORD PTR state$[rbp-137], r9
$LN112@ParseAsDec:
	test	bl, 2
	je	SHORT $LN713@ParseAsDec

; 112  :         switch (*state->IN_PTR)

	movzx	eax, WORD PTR [r9]
	cmp	eax, 9
	jb	SHORT $LN713@ParseAsDec
$LL389@ParseAsDec:
	cmp	eax, 13
	jbe	SHORT $LN394@ParseAsDec
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN713@ParseAsDec
$LN394@ParseAsDec:

; 113  :         {
; 114  :         case L' ':
; 115  :         case L'\t':
; 116  :         case L'\n':
; 117  :         case L'\r':
; 118  :         case L'\f':
; 119  :         case L'\v':
; 120  :             break;
; 121  : 
; 122  :         default:
; 123  :             return;
; 124  :         }
; 125  :         state->IN_PTR += 1;

	add	r9, 2
	mov	QWORD PTR state$[rbp-137], r9
	movzx	eax, WORD PTR [r9]
	cmp	eax, 9
	jae	SHORT $LL389@ParseAsDec
$LN713@ParseAsDec:

; 575  :         SkipSpace(&state);
; 576  :     if (*state.IN_PTR != L'\0')

	cmp	WORD PTR [r9], 0
	jne	$LN87@ParseAsDec

; 102  :     *state->INT_PART_PTR = L'\0';

	mov	rax, QWORD PTR state$[rbp-33]
	xor	ecx, ecx
	mov	WORD PTR [rax], cx

; 103  :     if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT)

	test	BYTE PTR state$[rbp-129], 32		; 00000020H
	je	SHORT $LN398@ParseAsDec

; 104  :         *state->FRAC_PART_PTR = L'\0';

	mov	rax, QWORD PTR state$[rbp-25]
	mov	WORD PTR [rax], cx
$LN398@ParseAsDec:

; 577  :         return (0);
; 578  :     FinalizeParserState(&state);
; 579  :     // 明示的に負の符号が与えられていた場合は負数、そうではない場合は正数とみなす
; 580  :     *sign = state.SIGN < 0 ? -1 : 1;

	cmp	BYTE PTR state$[rbp-125], 0
	mov	ecx, 1
	mov	edx, -1					; ffffffffH

; 581  :     return (1);

	mov	eax, 1
	cmovl	ecx, edx
	mov	BYTE PTR [rsi], cl
	jmp	SHORT $LN1@ParseAsDec
$LN107@ParseAsDec:

; 59   :     while (*b != L'\0')

	movzx	edx, WORD PTR state$[rbp-81]

; 559  :                 state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;
; 560  :         }
; 561  :         else if ((number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && StartsWith(state.IN_PTR, state.NEGATIVE_SIGN))

	lea	rax, QWORD PTR state$[rbp-81]

; 59   :     while (*b != L'\0')

	test	dx, dx
	je	SHORT $LN380@ParseAsDec
	lea	r10, QWORD PTR state$[rbp-81]
	mov	r8, r9
	sub	r8, r10
$LL379@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [r8+rax], dx
	jne	$LN112@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	edx, WORD PTR [rax+2]
	add	rax, 2
	test	dx, dx
	jne	SHORT $LL379@ParseAsDec
$LN380@ParseAsDec:

; 562  :         {
; 563  :             state.SIGN = -1;
; 564  :             state.IN_PTR += state.NEGATIVE_SIGN_LENGTH;

	movsxd	rax, DWORD PTR state$[rbp-73]
	mov	BYTE PTR state$[rbp-125], -1
	lea	r9, QWORD PTR [r9+rax*2]
	mov	QWORD PTR state$[rbp-137], r9

; 565  :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && StartsWith(state.IN_PTR, state.CURRENCY_SYMBOL))

	test	edi, edi
	je	$LN112@ParseAsDec
	lea	rdx, QWORD PTR state$[rbp-123]

; 59   :     while (*b != L'\0')

	test	cx, cx
	je	$LN375@ParseAsDec
	mov	rax, r9
$LL384@ParseAsDec:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [rax], cx
	jne	$LN112@ParseAsDec

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	ecx, WORD PTR [rdx+2]
	add	rdx, 2
	add	rax, 2
	test	cx, cx
	jne	SHORT $LL384@ParseAsDec

; 566  :                 state.IN_PTR += state.CURRENCY_SYMBOL_LENGTH;

	jmp	$LN375@ParseAsDec
$LN87@ParseAsDec:

; 567  :         }
; 568  :         else
; 569  :         {
; 570  :         }
; 571  :     }
; 572  :     else
; 573  :         return (0);

	xor	eax, eax
$LN1@ParseAsDec:

; 582  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rbp-137]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	rbx, QWORD PTR [rsp+224]
	add	rsp, 192				; 000000c0H
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
ParseAsDecimalNumberString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT ParseAsFractionPartNumberSequence
_TEXT	SEGMENT
state$ = 8
ParseAsFractionPartNumberSequence PROC			; COMDAT

; 195  : {

	npad	2
$LN32@ParseAsFra:

; 196  :     for (;;)
; 197  :     {
; 198  :         if (ParseDecimalDigit(*state->IN_PTR, state->NATIVE_DIGITS) >= 0)

	mov	rax, QWORD PTR [rcx]
	movzx	edx, WORD PTR [rax]

; 131  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [rdx-48]
	cmp	ax, 9
	jbe	SHORT $LN10@ParseAsFra

; 132  :         return (c - L'0');
; 133  :     if (c == native_digits[0])

	cmp	dx, WORD PTR [rcx+24]
	je	SHORT $LN31@ParseAsFra

; 134  :         return (0);
; 135  :     if (c == native_digits[1])

	cmp	dx, WORD PTR [rcx+26]
	je	SHORT $LN31@ParseAsFra

; 136  :         return (1);
; 137  :     if (c == native_digits[2])

	cmp	dx, WORD PTR [rcx+28]
	je	SHORT $LN31@ParseAsFra

; 138  :         return (2);
; 139  :     if (c == native_digits[3])

	cmp	dx, WORD PTR [rcx+30]
	je	SHORT $LN31@ParseAsFra

; 140  :         return (3);
; 141  :     if (c == native_digits[4])

	cmp	dx, WORD PTR [rcx+32]
	je	SHORT $LN31@ParseAsFra

; 142  :         return (4);
; 143  :     if (c == native_digits[5])

	cmp	dx, WORD PTR [rcx+34]
	je	SHORT $LN31@ParseAsFra

; 144  :         return (5);
; 145  :     if (c == native_digits[6])

	cmp	dx, WORD PTR [rcx+36]
	je	SHORT $LN31@ParseAsFra

; 146  :         return (6);
; 147  :     if (c == native_digits[7])

	cmp	dx, WORD PTR [rcx+38]
	je	SHORT $LN31@ParseAsFra

; 148  :         return (7);
; 149  :     if (c == native_digits[8])

	cmp	dx, WORD PTR [rcx+40]
	je	SHORT $LN31@ParseAsFra

; 150  :         return (8);
; 151  :     if (c == native_digits[9])

	cmp	dx, WORD PTR [rcx+42]
	jne	SHORT $LN5@ParseAsFra

; 152  :         return (9);

	jmp	SHORT $LN31@ParseAsFra
$LN10@ParseAsFra:

; 196  :     for (;;)
; 197  :     {
; 198  :         if (ParseDecimalDigit(*state->IN_PTR, state->NATIVE_DIGITS) >= 0)

	cmp	dx, 48					; 00000030H
	jae	SHORT $LN31@ParseAsFra
$LN5@ParseAsFra:

; 199  :         {
; 200  :             *state->FRAC_PART_PTR = *state->IN_PTR;
; 201  :             state->FRAC_PART_PTR += 1;
; 202  :             state->IN_PTR += 1;
; 203  :         }
; 204  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER && ParseHexDigit( *state->IN_PTR) >= 0)

	test	DWORD PTR [rcx+8], 512			; 00000200H
	je	SHORT $LN26@ParseAsFra

; 158  :     if (c >= L'0' && c <= L'9')

	cmp	ax, 9
	ja	SHORT $LN24@ParseAsFra

; 159  :         return (c - L'0');

	movzx	eax, dx
	add	eax, -48				; ffffffffffffffd0H
	jmp	SHORT $LN23@ParseAsFra
$LN24@ParseAsFra:

; 160  : 
; 161  :     if (c >= L'a' && c <= L'f')

	lea	eax, DWORD PTR [rdx-97]
	cmp	ax, 5
	ja	SHORT $LN25@ParseAsFra

; 162  :         return (c - L'a' + 10);

	movzx	eax, dx
	add	eax, -87				; ffffffffffffffa9H
	jmp	SHORT $LN23@ParseAsFra
$LN25@ParseAsFra:

; 163  : 
; 164  :     if (c >= L'A' && c <= L'F')

	lea	eax, DWORD PTR [rdx-65]
	cmp	ax, 5
	ja	SHORT $LN26@ParseAsFra

; 165  :         return (c - L'A' + 10);

	movzx	eax, dx
	add	eax, -55				; ffffffffffffffc9H
$LN23@ParseAsFra:

; 199  :         {
; 200  :             *state->FRAC_PART_PTR = *state->IN_PTR;
; 201  :             state->FRAC_PART_PTR += 1;
; 202  :             state->IN_PTR += 1;
; 203  :         }
; 204  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER && ParseHexDigit( *state->IN_PTR) >= 0)

	test	eax, eax
	js	SHORT $LN26@ParseAsFra
$LN31@ParseAsFra:

; 196  :     for (;;)
; 197  :     {
; 198  :         if (ParseDecimalDigit(*state->IN_PTR, state->NATIVE_DIGITS) >= 0)

	mov	rax, QWORD PTR [rcx+112]
	mov	WORD PTR [rax], dx
	add	QWORD PTR [rcx+112], 2
	add	QWORD PTR [rcx], 2
	jmp	$LN32@ParseAsFra
$LN26@ParseAsFra:

; 205  :         {
; 206  :             *state->FRAC_PART_PTR = *state->IN_PTR;
; 207  :             state->FRAC_PART_PTR += 1;
; 208  :             state->IN_PTR += 1;
; 209  :         }
; 210  :         else
; 211  :             break;
; 212  :     }
; 213  : }

	ret	0
ParseAsFractionPartNumberSequence ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT ParseAsIntegerPartNumberSequence
_TEXT	SEGMENT
state$ = 8
ParseAsIntegerPartNumberSequence PROC			; COMDAT

; 170  : {

	npad	2
$LN59@ParseAsInt:

; 171  :     for (;;)
; 172  :     {
; 173  :         if (ParseDecimalDigit(*state->IN_PTR, state->NATIVE_DIGITS) >= 0)

	mov	r8, QWORD PTR [rcx]
	npad	11
$LL2@ParseAsInt:
	movzx	edx, WORD PTR [r8]

; 131  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [rdx-48]
	cmp	ax, 9
	jbe	SHORT $LN14@ParseAsInt

; 132  :         return (c - L'0');
; 133  :     if (c == native_digits[0])

	cmp	dx, WORD PTR [rcx+24]
	je	SHORT $LN56@ParseAsInt

; 134  :         return (0);
; 135  :     if (c == native_digits[1])

	cmp	dx, WORD PTR [rcx+26]
	je	SHORT $LN56@ParseAsInt

; 136  :         return (1);
; 137  :     if (c == native_digits[2])

	cmp	dx, WORD PTR [rcx+28]
	je	SHORT $LN56@ParseAsInt

; 138  :         return (2);
; 139  :     if (c == native_digits[3])

	cmp	dx, WORD PTR [rcx+30]
	je	SHORT $LN56@ParseAsInt

; 140  :         return (3);
; 141  :     if (c == native_digits[4])

	cmp	dx, WORD PTR [rcx+32]
	je	SHORT $LN56@ParseAsInt

; 142  :         return (4);
; 143  :     if (c == native_digits[5])

	cmp	dx, WORD PTR [rcx+34]
	je	SHORT $LN56@ParseAsInt

; 144  :         return (5);
; 145  :     if (c == native_digits[6])

	cmp	dx, WORD PTR [rcx+36]
	je	SHORT $LN56@ParseAsInt

; 146  :         return (6);
; 147  :     if (c == native_digits[7])

	cmp	dx, WORD PTR [rcx+38]
	je	SHORT $LN56@ParseAsInt

; 148  :         return (7);
; 149  :     if (c == native_digits[8])

	cmp	dx, WORD PTR [rcx+40]
	je	SHORT $LN56@ParseAsInt

; 150  :         return (8);
; 151  :     if (c == native_digits[9])

	cmp	dx, WORD PTR [rcx+42]
	jne	SHORT $LN5@ParseAsInt

; 152  :         return (9);

	jmp	SHORT $LN56@ParseAsInt
$LN14@ParseAsInt:

; 171  :     for (;;)
; 172  :     {
; 173  :         if (ParseDecimalDigit(*state->IN_PTR, state->NATIVE_DIGITS) >= 0)

	cmp	dx, 48					; 00000030H
	jae	SHORT $LN56@ParseAsInt
$LN5@ParseAsInt:

; 174  :         {
; 175  :             *state->INT_PART_PTR = *state->IN_PTR;
; 176  :             state->INT_PART_PTR += 1;
; 177  :             state->IN_PTR += 1;
; 178  :         }
; 179  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER && ParseHexDigit(*state->IN_PTR) >= 0)

	mov	r9d, DWORD PTR [rcx+8]
	bt	r9d, 9
	jae	SHORT $LN7@ParseAsInt

; 158  :     if (c >= L'0' && c <= L'9')

	cmp	ax, 9
	ja	SHORT $LN28@ParseAsInt

; 159  :         return (c - L'0');

	movzx	eax, dx
	add	eax, -48				; ffffffffffffffd0H
	jmp	SHORT $LN27@ParseAsInt
$LN28@ParseAsInt:

; 160  : 
; 161  :     if (c >= L'a' && c <= L'f')

	lea	eax, DWORD PTR [rdx-97]
	cmp	ax, 5
	ja	SHORT $LN29@ParseAsInt

; 162  :         return (c - L'a' + 10);

	movzx	eax, dx
	add	eax, -87				; ffffffffffffffa9H
	jmp	SHORT $LN27@ParseAsInt
$LN29@ParseAsInt:

; 163  : 
; 164  :     if (c >= L'A' && c <= L'F')

	lea	eax, DWORD PTR [rdx-65]
	cmp	ax, 5
	ja	SHORT $LN7@ParseAsInt

; 165  :         return (c - L'A' + 10);

	movzx	eax, dx
	add	eax, -55				; ffffffffffffffc9H
$LN27@ParseAsInt:

; 174  :         {
; 175  :             *state->INT_PART_PTR = *state->IN_PTR;
; 176  :             state->INT_PART_PTR += 1;
; 177  :             state->IN_PTR += 1;
; 178  :         }
; 179  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER && ParseHexDigit(*state->IN_PTR) >= 0)

	test	eax, eax
	js	SHORT $LN7@ParseAsInt
$LN56@ParseAsInt:

; 171  :     for (;;)
; 172  :     {
; 173  :         if (ParseDecimalDigit(*state->IN_PTR, state->NATIVE_DIGITS) >= 0)

	mov	rax, QWORD PTR [rcx+104]
	mov	WORD PTR [rax], dx
	add	QWORD PTR [rcx+104], 2
	add	QWORD PTR [rcx], 2
	jmp	$LN59@ParseAsInt
$LN7@ParseAsInt:

; 180  :         {
; 181  :             *state->INT_PART_PTR = *state->IN_PTR;
; 182  :             state->INT_PART_PTR += 1;
; 183  :             state->IN_PTR += 1;
; 184  :         }
; 185  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_THOUSANDS && StartsWith(state->IN_PTR, state->GROUP_SEPARATOR))

	test	r9b, 64					; 00000040H
	je	SHORT $LN46@ParseAsInt

; 59   :     while (*b != L'\0')

	movzx	edx, WORD PTR [rcx+80]

; 180  :         {
; 181  :             *state->INT_PART_PTR = *state->IN_PTR;
; 182  :             state->INT_PART_PTR += 1;
; 183  :             state->IN_PTR += 1;
; 184  :         }
; 185  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_THOUSANDS && StartsWith(state->IN_PTR, state->GROUP_SEPARATOR))

	lea	rax, QWORD PTR [rcx+80]

; 59   :     while (*b != L'\0')

	test	dx, dx
	je	SHORT $LN34@ParseAsInt
	sub	r8, rax
	npad	7
$LL33@ParseAsInt:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [r8+rax], dx
	jne	SHORT $LN52@ParseAsInt

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	edx, WORD PTR [rax+2]
	add	rax, 2
	test	dx, dx
	jne	SHORT $LL33@ParseAsInt
$LN34@ParseAsInt:

; 186  :             state->IN_PTR += state->GROUP_SEPARATOR_LENGTH;

	movsxd	rax, DWORD PTR [rcx+88]
	add	rax, rax
	add	QWORD PTR [rcx], rax

; 189  :         else
; 190  :             break;
; 191  :     }

	jmp	$LN59@ParseAsInt
$LN52@ParseAsInt:

; 187  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_THOUSANDS && state->SECONDARY_GROUP_SEPARATOR_LENGTH > 0 && StartsWith(state->IN_PTR, state->SECONDARY_GROUP_SEPARATOR))

	movsxd	r9, DWORD PTR [rcx+100]
	test	r9d, r9d
	jle	SHORT $LN46@ParseAsInt

; 59   :     while (*b != L'\0')

	movzx	edx, WORD PTR [rcx+92]

; 187  :         else if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_THOUSANDS && state->SECONDARY_GROUP_SEPARATOR_LENGTH > 0 && StartsWith(state->IN_PTR, state->SECONDARY_GROUP_SEPARATOR))

	lea	rax, QWORD PTR [rcx+92]
	mov	r10, QWORD PTR [rcx]

; 59   :     while (*b != L'\0')

	test	dx, dx
	je	SHORT $LN39@ParseAsInt
	mov	r8, r10
	sub	r8, rax
$LL38@ParseAsInt:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [r8+rax], dx
	jne	SHORT $LN46@ParseAsInt

; 62   :             return (0);
; 63   :         ++a;
; 64   :         ++b;

	movzx	edx, WORD PTR [rax+2]
	add	rax, 2
	test	dx, dx
	jne	SHORT $LL38@ParseAsInt
$LN39@ParseAsInt:

; 188  :             state->IN_PTR += state->SECONDARY_GROUP_SEPARATOR_LENGTH;

	lea	r8, QWORD PTR [r10+r9*2]
	mov	rax, r9
	mov	QWORD PTR [rcx], r8
	jmp	$LL2@ParseAsInt
$LN46@ParseAsInt:

; 192  : }

	ret	0
ParseAsIntegerPartNumberSequence ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT ParseHexDigit
_TEXT	SEGMENT
c$ = 8
ParseHexDigit PROC					; COMDAT

; 158  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [rcx-48]
	cmp	ax, 9
	ja	SHORT $LN2@ParseHexDi

; 159  :         return (c - L'0');

	movzx	eax, cx
	sub	eax, 48					; 00000030H

; 167  : }

	ret	0
$LN2@ParseHexDi:

; 160  : 
; 161  :     if (c >= L'a' && c <= L'f')

	lea	eax, DWORD PTR [rcx-97]
	cmp	ax, 5
	ja	SHORT $LN3@ParseHexDi

; 162  :         return (c - L'a' + 10);

	movzx	eax, cx
	sub	eax, 87					; 00000057H

; 167  : }

	ret	0
$LN3@ParseHexDi:

; 163  : 
; 164  :     if (c >= L'A' && c <= L'F')

	lea	eax, DWORD PTR [rcx-65]
	cmp	ax, 5
	ja	SHORT $LN4@ParseHexDi

; 165  :         return (c - L'A' + 10);

	movzx	eax, cx
	sub	eax, 55					; 00000037H

; 167  : }

	ret	0
$LN4@ParseHexDi:

; 166  :     return (-1);

	mov	eax, -1

; 167  : }

	ret	0
ParseHexDigit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT ParseDecimalDigit
_TEXT	SEGMENT
c$ = 8
native_digits$ = 16
ParseDecimalDigit PROC					; COMDAT

; 131  :     if (c >= L'0' && c <= L'9')

	lea	eax, DWORD PTR [rcx-48]
	cmp	ax, 9
	ja	SHORT $LN2@ParseDecim

; 132  :         return (c - L'0');

	movzx	eax, cx
	sub	eax, 48					; 00000030H

; 152  :         return (9);
; 153  :     return (-1);
; 154  : }

	ret	0
$LN2@ParseDecim:

; 133  :     if (c == native_digits[0])

	cmp	cx, WORD PTR [rdx]
	jne	SHORT $LN3@ParseDecim

; 134  :         return (0);

	xor	eax, eax

; 152  :         return (9);
; 153  :     return (-1);
; 154  : }

	ret	0
$LN3@ParseDecim:

; 135  :     if (c == native_digits[1])

	cmp	cx, WORD PTR [rdx+2]
	jne	SHORT $LN4@ParseDecim

; 136  :         return (1);

	mov	eax, 1

; 152  :         return (9);
; 153  :     return (-1);
; 154  : }

	ret	0
$LN4@ParseDecim:

; 137  :     if (c == native_digits[2])

	cmp	cx, WORD PTR [rdx+4]
	jne	SHORT $LN5@ParseDecim

; 138  :         return (2);

	mov	eax, 2

; 152  :         return (9);
; 153  :     return (-1);
; 154  : }

	ret	0
$LN5@ParseDecim:

; 139  :     if (c == native_digits[3])

	cmp	cx, WORD PTR [rdx+6]
	jne	SHORT $LN6@ParseDecim

; 140  :         return (3);

	mov	eax, 3

; 152  :         return (9);
; 153  :     return (-1);
; 154  : }

	ret	0
$LN6@ParseDecim:

; 141  :     if (c == native_digits[4])

	cmp	cx, WORD PTR [rdx+8]
	jne	SHORT $LN7@ParseDecim

; 142  :         return (4);

	mov	eax, 4

; 152  :         return (9);
; 153  :     return (-1);
; 154  : }

	ret	0
$LN7@ParseDecim:

; 143  :     if (c == native_digits[5])

	cmp	cx, WORD PTR [rdx+10]
	jne	SHORT $LN8@ParseDecim

; 144  :         return (5);

	mov	eax, 5

; 152  :         return (9);
; 153  :     return (-1);
; 154  : }

	ret	0
$LN8@ParseDecim:

; 145  :     if (c == native_digits[6])

	cmp	cx, WORD PTR [rdx+12]
	jne	SHORT $LN9@ParseDecim

; 146  :         return (6);

	mov	eax, 6

; 152  :         return (9);
; 153  :     return (-1);
; 154  : }

	ret	0
$LN9@ParseDecim:

; 147  :     if (c == native_digits[7])

	cmp	cx, WORD PTR [rdx+14]
	jne	SHORT $LN10@ParseDecim

; 148  :         return (7);

	mov	eax, 7

; 152  :         return (9);
; 153  :     return (-1);
; 154  : }

	ret	0
$LN10@ParseDecim:

; 149  :     if (c == native_digits[8])

	cmp	cx, WORD PTR [rdx+16]
	jne	SHORT $LN11@ParseDecim

; 150  :         return (8);

	mov	eax, 8

; 152  :         return (9);
; 153  :     return (-1);
; 154  : }

	ret	0
$LN11@ParseDecim:

; 151  :     if (c == native_digits[9])

	cmp	cx, WORD PTR [rdx+18]
	mov	eax, -1
	mov	r8d, 9
	cmove	eax, r8d

; 152  :         return (9);
; 153  :     return (-1);
; 154  : }

	ret	0
ParseDecimalDigit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT SkipSpace
_TEXT	SEGMENT
state$ = 8
SkipSpace PROC						; COMDAT

; 110  :     for (;;)
; 111  :     {
; 112  :         switch (*state->IN_PTR)

	mov	rax, QWORD PTR [rcx]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 9
	jb	SHORT $LN11@SkipSpace
	npad	5
$LL2@SkipSpace:
	cmp	eax, 13
	jbe	SHORT $LN7@SkipSpace
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN11@SkipSpace
$LN7@SkipSpace:

; 113  :         {
; 114  :         case L' ':
; 115  :         case L'\t':
; 116  :         case L'\n':
; 117  :         case L'\r':
; 118  :         case L'\f':
; 119  :         case L'\v':
; 120  :             break;
; 121  : 
; 122  :         default:
; 123  :             return;
; 124  :         }
; 125  :         state->IN_PTR += 1;

	add	QWORD PTR [rcx], 2
	mov	rax, QWORD PTR [rcx]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 9
	jae	SHORT $LL2@SkipSpace
$LN11@SkipSpace:

; 126  :     }
; 127  : }

	ret	0
SkipSpace ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT FinalizeParserState
_TEXT	SEGMENT
state$ = 8
FinalizeParserState PROC				; COMDAT

; 102  :     *state->INT_PART_PTR = L'\0';

	mov	rax, QWORD PTR [rcx+104]
	xor	edx, edx
	mov	WORD PTR [rax], dx

; 103  :     if (state->NUMBER_STYLES & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT)

	test	BYTE PTR [rcx+8], 32			; 00000020H
	je	SHORT $LN2@FinalizePa

; 104  :         *state->FRAC_PART_PTR = L'\0';

	mov	rax, QWORD PTR [rcx+112]
	mov	WORD PTR [rax], dx
$LN2@FinalizePa:

; 105  : }

	ret	0
FinalizeParserState ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT InitializeParserState
_TEXT	SEGMENT
state$ = 48
in_ptr$ = 56
number_styles$ = 64
format_option$ = 72
int_part_buf$ = 80
frac_part_buf$ = 88
InitializeParserState PROC				; COMDAT

; 70   : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	push	r14
	sub	rsp, 32					; 00000020H

; 71   :     state->IN_PTR = in_ptr;

	mov	QWORD PTR [rcx], rdx
	mov	r14, rcx

; 72   :     state->NUMBER_STYLES = number_styles;

	mov	DWORD PTR [rcx+8], r8d

; 73   :     state->SIGN = 0;
; 74   :     lstrcpyW(state->CURRENCY_SYMBOL, format_option->CurrencySymbol);

	lea	rdx, QWORD PTR [r9+140]
	mov	BYTE PTR [rcx+12], 0
	mov	rsi, r9
	add	rcx, 14
	mov	edi, r8d
	call	QWORD PTR __imp_lstrcpyW

; 75   :     state->CURRENCY_SYMBOL_LENGTH = lstrlenW(state->CURRENCY_SYMBOL);

	lea	rcx, QWORD PTR [r14+14]
	call	QWORD PTR __imp_lstrlenW

; 76   :     lstrcpyW(state->NATIVE_DIGITS, format_option->NativeDigits);

	lea	rdx, QWORD PTR [rsi+146]
	mov	DWORD PTR [r14+20], eax
	lea	rcx, QWORD PTR [r14+24]
	call	QWORD PTR __imp_lstrcpyW

; 77   :     lstrcpyW(state->POSITIVE_SIGN, format_option->PositiveSign);

	lea	rdx, QWORD PTR [rsi+174]
	lea	rcx, QWORD PTR [r14+46]
	call	QWORD PTR __imp_lstrcpyW

; 78   :     state->POSITIVE_SIGN_LENGTH = lstrlenW(state->POSITIVE_SIGN);

	lea	rcx, QWORD PTR [r14+46]
	call	QWORD PTR __imp_lstrlenW

; 79   :     lstrcpyW(state->NEGATIVE_SIGN, format_option->NegativeSign);

	lea	rdx, QWORD PTR [rsi+168]
	mov	DWORD PTR [r14+52], eax
	lea	rcx, QWORD PTR [r14+56]
	call	QWORD PTR __imp_lstrcpyW

; 80   :     state->NEGATIVE_SIGN_LENGTH = lstrlenW(state->NEGATIVE_SIGN);

	lea	rcx, QWORD PTR [r14+56]
	call	QWORD PTR __imp_lstrlenW
	mov	DWORD PTR [r14+64], eax

; 81   :     lstrcpyW(state->DECIMAL_SEPARATOR, number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL ? format_option->Currency.DecimalSeparator : format_option->Number.DecimalSeparator);

	and	edi, 256				; 00000100H
	mov	eax, 58					; 0000003aH
	lea	rcx, QWORD PTR [r14+68]
	mov	edx, 4
	cmove	edx, eax
	add	rdx, rsi
	call	QWORD PTR __imp_lstrcpyW

; 82   :     state->DECIMAL_SEPARATOR_LENGTH = lstrlenW(state->DECIMAL_SEPARATOR);

	lea	rcx, QWORD PTR [r14+68]
	call	QWORD PTR __imp_lstrlenW
	mov	DWORD PTR [r14+76], eax

; 83   :     lstrcpyW(state->GROUP_SEPARATOR, number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL ? format_option->Currency.GroupSeparator: format_option->Number.GroupSeparator);

	test	edi, edi
	mov	eax, 52					; 00000034H
	lea	rcx, QWORD PTR [r14+80]
	mov	edx, 10
	cmove	edx, eax
	add	rdx, rsi
	call	QWORD PTR __imp_lstrcpyW

; 84   :     state->GROUP_SEPARATOR_LENGTH = lstrlenW(state->GROUP_SEPARATOR);

	lea	rcx, QWORD PTR [r14+80]
	call	QWORD PTR __imp_lstrlenW
	mov	DWORD PTR [r14+88], eax

; 85   :     if (state->GROUP_SEPARATOR[0] == L'\xa0' && state->GROUP_SEPARATOR[1] == L'\0')

	mov	eax, 160				; 000000a0H
	cmp	WORD PTR [r14+80], ax
	jne	SHORT $LN2@Initialize
	cmp	WORD PTR [r14+82], 0
	jne	SHORT $LN2@Initialize

; 86   :     {
; 87   :         state->SECONDARY_GROUP_SEPARATOR[0] = L'\x20';
; 88   :         state->SECONDARY_GROUP_SEPARATOR[1] = L'\0';

	xor	eax, eax
	mov	WORD PTR [r14+94], ax

; 89   :         state->SECONDARY_GROUP_SEPARATOR_LENGTH = 1;

	mov	eax, 1
	lea	ecx, QWORD PTR [rax+31]

; 90   :     }

	jmp	SHORT $LN3@Initialize
$LN2@Initialize:

; 91   :     else
; 92   :     {
; 93   :         state->SECONDARY_GROUP_SEPARATOR[0] = L'\0';
; 94   :         state->SECONDARY_GROUP_SEPARATOR_LENGTH = 0;

	xor	eax, eax
	movzx	ecx, ax
$LN3@Initialize:

; 95   :     }
; 96   :     state->INT_PART_PTR = int_part_buf;

	mov	WORD PTR [r14+92], cx
	mov	DWORD PTR [r14+100], eax
	mov	rax, QWORD PTR int_part_buf$[rsp]

; 97   :     state->FRAC_PART_PTR = frac_part_buf;
; 98   : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	mov	rdi, QWORD PTR [rsp+64]
	mov	QWORD PTR [r14+104], rax
	mov	rax, QWORD PTR frac_part_buf$[rsp]
	mov	QWORD PTR [r14+112], rax
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
InitializeParserState ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT StartsWith
_TEXT	SEGMENT
a$ = 8
b$ = 16
StartsWith PROC						; COMDAT

; 59   :     while (*b != L'\0')

	movzx	eax, WORD PTR [rdx]
	test	ax, ax
	je	SHORT $LN3@StartsWith
	sub	rcx, rdx
	npad	5
$LL2@StartsWith:

; 60   :     {
; 61   :         if (*a != *b)

	cmp	WORD PTR [rcx+rdx], ax
	jne	SHORT $LN7@StartsWith

; 63   :         ++a;
; 64   :         ++b;

	movzx	eax, WORD PTR [rdx+2]
	add	rdx, 2
	test	ax, ax
	jne	SHORT $LL2@StartsWith
$LN3@StartsWith:

; 65   :     }
; 66   :     return (1);

	mov	eax, 1

; 67   : }

	ret	0
$LN7@StartsWith:

; 62   :             return (0);

	xor	eax, eax

; 67   : }

	ret	0
StartsWith ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _MULTIPLYX_UNIT
_TEXT	SEGMENT
u$ = 8
v$ = 16
w_hi$ = 24
_MULTIPLYX_UNIT PROC					; COMDAT

; 330  : #ifdef _MSC_VER
; 331  : #ifdef _M_IX86
; 332  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));
; 333  : #elif defined(_M_X64)
; 334  :         return (_mulx_u64(u, v, w_hi));

	mulx	rcx, rax, rcx
	mov	QWORD PTR [r8], rcx

; 335  : #else
; 336  : #error unknown platform
; 337  : #endif
; 338  : #elif defined(__GNUC__)
; 339  : #ifdef _M_IX86
; 340  :         _UINT32_T w_lo;
; 341  :         __asm__("mulxl %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 342  :         return (w_lo);
; 343  : #elif defined(_M_X64)
; 344  :         _UINT64_T w_lo;
; 345  :         __asm__("mulxq %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 346  :         return (w_lo);
; 347  : #else
; 348  : #error unknown platform
; 349  : #endif
; 350  : #else
; 351  : #error unknown compiler
; 352  : #endif
; 353  :     }

	ret	0
_MULTIPLYX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _MULTIPLY_UNIT
_TEXT	SEGMENT
u$ = 8
v$ = 16
w_hi$ = 24
_MULTIPLY_UNIT PROC					; COMDAT

; 292  : #ifdef _M_IX86
; 293  : #ifdef _MSC_VER
; 294  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));
; 295  : #elif defined(__GNUC__)
; 296  :         _UINT32_T w_lo;
; 297  :         __asm__("mull %3": "=a"(w_lo), "=d"(*w_hi) : "0"(u), "rm"(v));
; 298  :         return (w_lo);
; 299  : #else
; 300  : #error unknown compiler
; 301  : #endif
; 302  : #elif defined(_M_X64)
; 303  :         return (_umul128(u, v, w_hi));

	mov	rax, rdx
	mul	rcx
	mov	QWORD PTR [r8], rdx

; 304  : #else
; 305  : #error unknown platform
; 306  : #endif
; 307  :     }

	ret	0
_MULTIPLY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ADDX_UNIT
_TEXT	SEGMENT
carry$ = 8
u$ = 16
v$ = 24
w$ = 32
_ADDX_UNIT PROC						; COMDAT

; 236  : #ifdef _M_IX86
; 237  :         return (_addcarryx_u32(carry, u, v, w));
; 238  : #elif defined(_M_X64)
; 239  :         return (_addcarryx_u64(carry, u, v, w));

	add	cl, -1
	adcx	rdx, r8
	mov	QWORD PTR [r9], rdx
	setb	al

; 240  : #else
; 241  : #error unknown platform
; 242  : #endif
; 243  :     }

	ret	0
_ADDX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ADD_UNIT
_TEXT	SEGMENT
carry$ = 8
u$ = 16
v$ = 24
w$ = 32
_ADD_UNIT PROC						; COMDAT

; 208  : #ifdef _M_IX86
; 209  :         return (_addcarry_u32(carry, u, v, w));
; 210  : #elif defined(_M_X64)
; 211  :         return (_addcarry_u64(carry, u, v, w));

	add	cl, -1
	adc	rdx, r8
	mov	QWORD PTR [r9], rdx
	setb	al

; 212  : #else
; 213  : #error unknown platform
; 214  : #endif
; 215  :     }

	ret	0
_ADD_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _DIVIDE_CEILING_SIZE
_TEXT	SEGMENT
u$ = 8
v$ = 16
_DIVIDE_CEILING_SIZE PROC				; COMDAT

; 193  :         return ((u + v - 1) / v);

	lea	rax, QWORD PTR [rdx-1]
	mov	r8, rdx
	add	rax, rcx
	xor	edx, edx
	div	r8

; 194  :     }

	ret	0
_DIVIDE_CEILING_SIZE ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _DIVIDE_CEILING_UNIT
_TEXT	SEGMENT
u$ = 8
v$ = 16
_DIVIDE_CEILING_UNIT PROC				; COMDAT

; 188  :         return ((u + v - 1) / v);

	lea	rax, QWORD PTR [rdx-1]
	mov	r8, rdx
	add	rax, rcx
	xor	edx, edx
	div	r8

; 189  :     }

	ret	0
_DIVIDE_CEILING_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _COPY_MEMORY_UNIT
_TEXT	SEGMENT
d$ = 8
s$ = 16
count$ = 24
_COPY_MEMORY_UNIT PROC					; COMDAT

; 60   :     {

	mov	QWORD PTR [rsp+8], rsi
	mov	QWORD PTR [rsp+16], rdi

; 61   : #ifdef _M_IX86
; 62   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);
; 63   : #elif defined(_M_X64)
; 64   :         __movsq(d, s, count);

	mov	rdi, rcx
	mov	rsi, rdx
	mov	rcx, r8
	rep movsq

; 65   : #else
; 66   : #error unknown platform
; 67   : #endif
; 68   :     }

	mov	rsi, QWORD PTR [rsp+8]
	mov	rdi, QWORD PTR [rsp+16]
	ret	0
_COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT AddToMULTI64Counter
_TEXT	SEGMENT
value$ = 8
AddToMULTI64Counter PROC				; COMDAT

; 360  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	lock xadd DWORD PTR statistics_info, ecx

; 361  :     }

	ret	0
AddToMULTI64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT AddToMULTI32Counter
_TEXT	SEGMENT
value$ = 8
AddToMULTI32Counter PROC				; COMDAT

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock xadd DWORD PTR statistics_info+4, ecx

; 355  :     }

	ret	0
AddToMULTI32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT IncrementMULTI64Counter
_TEXT	SEGMENT
IncrementMULTI64Counter PROC				; COMDAT

; 337  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI64);

	lock inc DWORD PTR statistics_info

; 338  :     }

	ret	0
IncrementMULTI64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT IncrementMULTI32Counter
_TEXT	SEGMENT
IncrementMULTI32Counter PROC				; COMDAT

; 331  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

	lock inc DWORD PTR statistics_info+4

; 332  :     }

	ret	0
IncrementMULTI32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT PMC_TryParseForSINT
_TEXT	SEGMENT
no_abs$ = 64
source$ = 64
number_styles$ = 72
format_option$ = 80
o_sign$ = 88
o_abs$ = 96
PMC_TryParseForSINT PROC				; COMDAT

; 1345 : {

$LN20:
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	rax, r8

; 1346 :     PMC_STATUS_CODE result;
; 1347 :     if (source == NULL)

	test	rcx, rcx
	je	SHORT $LN16@PMC_TryPar

; 1348 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1349 :     if (o_sign == NULL)

	test	r9, r9
	je	SHORT $LN16@PMC_TryPar

; 1350 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1351 :     if (o_abs == NULL)

	mov	rbx, QWORD PTR o_abs$[rsp]
	test	rbx, rbx
	je	SHORT $LN16@PMC_TryPar

; 1294 :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER)

	test	rax, rax
	lea	r8, OFFSET FLAT:default_number_format_option
	cmovne	r8, rax
	bt	edx, 9
	jae	SHORT $LN9@PMC_TryPar

; 1295 :     {
; 1296 :         // 16進数の場合
; 1297 : 
; 1298 :         // 許可されている組み合わせのフラグ
; 1299 :         _UINT32_T mask = PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER | PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE | PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE;
; 1300 : 
; 1301 :         // 許可されていないフラグが指定されていればエラー
; 1302 :         if (number_styles & ~mask)

	test	edx, -516				; fffffdfcH
	jne	SHORT $LN16@PMC_TryPar

; 1303 :             return (PMC_STATUS_ARGUMENT_ERROR);
; 1304 : 
; 1305 :         if ((result = TryParseX(source, number_styles, format_option, o_sign, o_abs)) != PMC_STATUS_OK)

	lea	rax, QWORD PTR no_abs$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	TryParseX

; 1306 :             return (result);

	jmp	SHORT $LN18@PMC_TryPar
$LN9@PMC_TryPar:

; 1307 :     }
; 1308 :     else
; 1309 :     {
; 1310 :         // 10進数の場合
; 1311 :         if ((result = TryParseDN(source, number_styles, format_option, o_sign, o_abs)) != PMC_STATUS_OK)

	lea	rax, QWORD PTR no_abs$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	TryParseDN
$LN18@PMC_TryPar:

; 1352 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1353 :     if (format_option == NULL)
; 1354 :         format_option = &default_number_format_option;
; 1355 :     NUMBER_HEADER* no_abs;
; 1356 :     if ((result = PMC_TryParse_Imp(source, number_styles, format_option, o_sign, &no_abs)) != PMC_STATUS_OK)
; 1357 :         return (result);

	test	eax, eax
	jne	SHORT $LN1@PMC_TryPar

; 1358 :     *o_abs = (PMC_HANDLE_UINT)no_abs;

	mov	rax, QWORD PTR no_abs$[rsp]
	mov	QWORD PTR [rbx], rax

; 1359 :     return (PMC_STATUS_OK);

	xor	eax, eax

; 1360 : }

	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
$LN16@PMC_TryPar:
	mov	eax, -1
$LN1@PMC_TryPar:
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
PMC_TryParseForSINT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT PMC_TryParse
_TEXT	SEGMENT
o_abs$ = 48
o_sign$ = 80
source$ = 80
number_styles$ = 88
format_option$ = 96
o$ = 104
PMC_TryParse PROC					; COMDAT

; 1322 : {

$LN20:
	push	rbx
	sub	rsp, 64					; 00000040H
	mov	rbx, r9
	mov	rax, r8

; 1323 :     PMC_STATUS_CODE result;
; 1324 :     if (source == NULL)

	test	rcx, rcx
	je	SHORT $LN16@PMC_TryPar

; 1325 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1326 :     if (o == NULL)

	test	rbx, rbx
	je	SHORT $LN16@PMC_TryPar

; 1294 :     if (number_styles & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER)

	test	rax, rax
	lea	r8, OFFSET FLAT:default_number_format_option
	cmovne	r8, rax
	bt	edx, 9
	jae	SHORT $LN9@PMC_TryPar

; 1295 :     {
; 1296 :         // 16進数の場合
; 1297 : 
; 1298 :         // 許可されている組み合わせのフラグ
; 1299 :         _UINT32_T mask = PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER | PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE | PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE;
; 1300 : 
; 1301 :         // 許可されていないフラグが指定されていればエラー
; 1302 :         if (number_styles & ~mask)

	test	edx, -516				; fffffdfcH
	jne	SHORT $LN16@PMC_TryPar

; 1303 :             return (PMC_STATUS_ARGUMENT_ERROR);
; 1304 : 
; 1305 :         if ((result = TryParseX(source, number_styles, format_option, o_sign, o_abs)) != PMC_STATUS_OK)

	lea	rax, QWORD PTR o_abs$[rsp]
	lea	r9, QWORD PTR o_sign$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	TryParseX

; 1306 :             return (result);

	jmp	SHORT $LN18@PMC_TryPar
$LN9@PMC_TryPar:

; 1307 :     }
; 1308 :     else
; 1309 :     {
; 1310 :         // 10進数の場合
; 1311 :         if ((result = TryParseDN(source, number_styles, format_option, o_sign, o_abs)) != PMC_STATUS_OK)

	lea	rax, QWORD PTR o_abs$[rsp]
	lea	r9, QWORD PTR o_sign$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	TryParseDN
$LN18@PMC_TryPar:

; 1327 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1328 :     if (format_option == NULL)
; 1329 :         format_option = &default_number_format_option;
; 1330 :     char o_sign;
; 1331 :     NUMBER_HEADER* o_abs;
; 1332 :     if ((result = PMC_TryParse_Imp(source, number_styles, format_option, &o_sign, &o_abs)) != PMC_STATUS_OK)
; 1333 :         return (result);

	test	eax, eax
	jne	SHORT $LN1@PMC_TryPar

; 1334 :     if (o_sign < 0)

	cmp	BYTE PTR o_sign$[rsp], al
	jge	SHORT $LN6@PMC_TryPar

; 1335 :     {
; 1336 :         // 負数は表現できないのでエラーとする
; 1337 :         DeallocateNumber(o_abs);

	mov	rcx, QWORD PTR o_abs$[rsp]
	call	DeallocateNumber

; 1338 :         return (PMC_STATUS_OVERFLOW);

	mov	eax, -2

; 1342 : }

	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
$LN6@PMC_TryPar:

; 1339 :     }
; 1340 :     *o = (PMC_HANDLE_UINT)o_abs;

	mov	rax, QWORD PTR o_abs$[rsp]
	mov	QWORD PTR [rbx], rax

; 1341 :     return (PMC_STATUS_OK);

	xor	eax, eax

; 1342 : }

	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
$LN16@PMC_TryPar:
	mov	eax, -1
$LN1@PMC_TryPar:
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
PMC_TryParse ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.c
;	COMDAT Initialize_Parse
_TEXT	SEGMENT
feature$ = 48
Initialize_Parse PROC					; COMDAT

; 1363 : {

$LN6:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 1364 :     InitializeNumberFormatoInfo(&default_number_format_option);

	lea	rcx, OFFSET FLAT:default_number_format_option
	call	InitializeNumberFormatoInfo
	mov	eax, DWORD PTR [rbx]

; 1365 : 
; 1366 :     if (feature->PROCESSOR_FEATURE_ADX && feature->PROCESSOR_FEATURE_BMI2)
; 1367 :         fp_MultiplyAndAdd = MultiplyAndAdd_using_ADCX_MULX;
; 1368 :     else
; 1369 :         fp_MultiplyAndAdd = MultiplyAndAdd_using_ADC_MUL;
; 1370 : 
; 1371 :     return (PMC_STATUS_OK);

	lea	rcx, OFFSET FLAT:MultiplyAndAdd_using_ADCX_MULX
	and	eax, 10
	lea	rdx, OFFSET FLAT:MultiplyAndAdd_using_ADC_MUL
	cmp	al, 10
	cmovne	rcx, rdx
	xor	eax, eax
	mov	QWORD PTR fp_MultiplyAndAdd, rcx

; 1372 : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
Initialize_Parse ENDP
_TEXT	ENDS
END
