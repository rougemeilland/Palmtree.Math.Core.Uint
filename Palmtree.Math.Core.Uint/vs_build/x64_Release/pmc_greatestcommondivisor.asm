; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	Initialize_GreatestCommonDivisor
PUBLIC	PMC_GreatestCommonDivisor_I_X
PUBLIC	PMC_GreatestCommonDivisor_L_X
PUBLIC	PMC_GreatestCommonDivisor_X_I
PUBLIC	PMC_GreatestCommonDivisor_X_L
PUBLIC	PMC_GreatestCommonDivisor_X_X
EXTRN	AllocateBlock:PROC
EXTRN	DeallocateBlock:PROC
EXTRN	CheckBlockLight:PROC
EXTRN	AllocateNumber:PROC
EXTRN	CommitNumber:PROC
EXTRN	CheckNumber:PROC
EXTRN	DuplicateNumber:PROC
EXTRN	From_I_Imp:PROC
EXTRN	From_L_Imp:PROC
EXTRN	RightShift_Imp:PROC
EXTRN	LeftShift_Imp:PROC
EXTRN	Subtruct_Imp:PROC
EXTRN	Compare_Imp:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_GreatestCommonDivisor_I_X DD imagerel $LN10
	DD	imagerel $LN10+94
	DD	imagerel $unwind$PMC_GreatestCommonDivisor_I_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_GreatestCommonDivisor_L_X DD imagerel $LN10
	DD	imagerel $LN10+96
	DD	imagerel $unwind$PMC_GreatestCommonDivisor_L_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_GreatestCommonDivisor_X_I DD imagerel $LN10
	DD	imagerel $LN10+91
	DD	imagerel $unwind$PMC_GreatestCommonDivisor_X_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_GreatestCommonDivisor_X_L DD imagerel $LN10
	DD	imagerel $LN10+93
	DD	imagerel $unwind$PMC_GreatestCommonDivisor_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_GreatestCommonDivisor_X_X DD imagerel $LN40
	DD	imagerel $LN40+647
	DD	imagerel $unwind$PMC_GreatestCommonDivisor_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_COPY_MEMORY_UNIT DD imagerel _COPY_MEMORY_UNIT
	DD	imagerel _COPY_MEMORY_UNIT+33
	DD	imagerel $unwind$_COPY_MEMORY_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$GreatestCommonDivisor_Imp DD imagerel GreatestCommonDivisor_Imp
	DD	imagerel GreatestCommonDivisor_Imp+251
	DD	imagerel $unwind$GreatestCommonDivisor_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_GreatestCommonDivisor_X_I_Imp DD imagerel PMC_GreatestCommonDivisor_X_I_Imp
	DD	imagerel PMC_GreatestCommonDivisor_X_I_Imp+324
	DD	imagerel $unwind$PMC_GreatestCommonDivisor_X_I_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PMC_GreatestCommonDivisor_X_I_Imp DD imagerel PMC_GreatestCommonDivisor_X_I_Imp+324
	DD	imagerel PMC_GreatestCommonDivisor_X_I_Imp+485
	DD	imagerel $chain$0$PMC_GreatestCommonDivisor_X_I_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PMC_GreatestCommonDivisor_X_I_Imp DD imagerel PMC_GreatestCommonDivisor_X_I_Imp+485
	DD	imagerel PMC_GreatestCommonDivisor_X_I_Imp+632
	DD	imagerel $chain$1$PMC_GreatestCommonDivisor_X_I_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_GreatestCommonDivisor_X_L_Imp DD imagerel PMC_GreatestCommonDivisor_X_L_Imp
	DD	imagerel PMC_GreatestCommonDivisor_X_L_Imp+336
	DD	imagerel $unwind$PMC_GreatestCommonDivisor_X_L_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PMC_GreatestCommonDivisor_X_L_Imp DD imagerel PMC_GreatestCommonDivisor_X_L_Imp+336
	DD	imagerel PMC_GreatestCommonDivisor_X_L_Imp+471
	DD	imagerel $chain$0$PMC_GreatestCommonDivisor_X_L_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PMC_GreatestCommonDivisor_X_L_Imp DD imagerel PMC_GreatestCommonDivisor_X_L_Imp+471
	DD	imagerel PMC_GreatestCommonDivisor_X_L_Imp+620
	DD	imagerel $chain$1$PMC_GreatestCommonDivisor_X_L_Imp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PMC_GreatestCommonDivisor_X_L_Imp DD 021H
	DD	imagerel PMC_GreatestCommonDivisor_X_L_Imp
	DD	imagerel PMC_GreatestCommonDivisor_X_L_Imp+336
	DD	imagerel $unwind$PMC_GreatestCommonDivisor_X_L_Imp
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PMC_GreatestCommonDivisor_X_L_Imp DD 020821H
	DD	015c408H
	DD	imagerel PMC_GreatestCommonDivisor_X_L_Imp
	DD	imagerel PMC_GreatestCommonDivisor_X_L_Imp+336
	DD	imagerel $unwind$PMC_GreatestCommonDivisor_X_L_Imp
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_GreatestCommonDivisor_X_L_Imp DD 080f01H
	DD	0f00bb20fH
	DD	0d007e009H
	DD	060047005H
	DD	030025003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PMC_GreatestCommonDivisor_X_I_Imp DD 021H
	DD	imagerel PMC_GreatestCommonDivisor_X_I_Imp
	DD	imagerel PMC_GreatestCommonDivisor_X_I_Imp+324
	DD	imagerel $unwind$PMC_GreatestCommonDivisor_X_I_Imp
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PMC_GreatestCommonDivisor_X_I_Imp DD 020821H
	DD	013d408H
	DD	imagerel PMC_GreatestCommonDivisor_X_I_Imp
	DD	imagerel PMC_GreatestCommonDivisor_X_I_Imp+324
	DD	imagerel $unwind$PMC_GreatestCommonDivisor_X_I_Imp
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_GreatestCommonDivisor_X_I_Imp DD 080f01H
	DD	0f00b920fH
	DD	0c007e009H
	DD	060047005H
	DD	030025003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$GreatestCommonDivisor_Imp DD 0a1801H
	DD	0c6418H
	DD	0b5418H
	DD	0a3418H
	DD	0f0145218H
	DD	07010e012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_COPY_MEMORY_UNIT DD 040a01H
	DD	02740aH
	DD	016405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_GreatestCommonDivisor_X_X DD 0a1701H
	DD	0153417H
	DD	0f010b217H
	DD	0d00ce00eH
	DD	07008c00aH
	DD	050066007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_GreatestCommonDivisor_X_L DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_GreatestCommonDivisor_X_I DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_GreatestCommonDivisor_L_X DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_GreatestCommonDivisor_I_X DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
;	COMDAT PMC_GreatestCommonDivisor_X_L_Imp
_TEXT	SEGMENT
nw_check_code$1 = 48
work_u_buf_code$2 = 56
work_v_buf_code$3 = 64
k$1$ = 72
w_buf_count$4 = 80
work_u_buf_words$5 = 160
u$ = 160
v$ = 168
w$ = 176
work_v_buf_words$6 = 184
PMC_GreatestCommonDivisor_X_L_Imp PROC			; COMDAT

; 222  : {

	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r13
	push	r14
	push	r15
	sub	rsp, 96					; 00000060H

; 223  :     PMC_STATUS_CODE result;
; 224  :     if (u->IS_ZERO)

	test	BYTE PTR [rcx+40], 2
	mov	rbx, r8
	mov	rbp, rdx
	mov	rdi, rcx
	je	SHORT $LN2@PMC_Greate

; 225  :     {
; 226  :         // u が 0 である場合
; 227  : 
; 228  :         if (v == 0)

	test	rdx, rdx
	jne	SHORT $LN4@PMC_Greate

; 229  :         {
; 230  :             // v が 0 である場合
; 231  : 
; 232  :             // u と v がともに 0 であり、GCD は一意に存在しないため、エラーを返す。
; 233  :             return (PMC_STATUS_ARGUMENT_ERROR);

	lea	eax, QWORD PTR [rdx-1]

; 439  : }

	add	rsp, 96					; 00000060H
	pop	r15
	pop	r14
	pop	r13
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
$LN4@PMC_Greate:

; 234  :         }
; 235  :         else
; 236  :         {
; 237  :             // v が 0 ではない場合
; 238  : 
; 239  :             // GCD は v そのものであるため、v を計算結果として返す。
; 240  :             if ((result = From_L_Imp(v, w)) != PMC_STATUS_OK)

	mov	rdx, rbx
	mov	rcx, rbp
	call	From_L_Imp
	test	eax, eax
	je	$LN11@PMC_Greate

; 439  : }

	add	rsp, 96					; 00000060H
	pop	r15
	pop	r14
	pop	r13
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
$LN2@PMC_Greate:

; 241  :                 return (result);
; 242  :         }
; 243  :     }
; 244  :     else
; 245  :     {
; 246  :         // u が 0 ではない場合
; 247  : 
; 248  :         if (v == 0)

	test	rbp, rbp
	jne	SHORT $LN7@PMC_Greate

; 249  :         {
; 250  :             // v が 0 である場合
; 251  : 
; 252  :             // GCD は u そのものであるため、u を計算結果として返す。
; 253  :             if ((result = DuplicateNumber(u, w)) != PMC_STATUS_OK)

	mov	rdx, rbx
	call	DuplicateNumber
	test	eax, eax
	je	$LN11@PMC_Greate

; 439  : }

	add	rsp, 96					; 00000060H
	pop	r15
	pop	r14
	pop	r13
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
$LN7@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 644  :         _BitScanReverse64(&pos, x);

	bsr	rax, rbp

; 654  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 63					; 0000003fH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 390  :                 __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	r8, QWORD PTR work_u_buf_code$2[rsp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 654  :         return (sizeof(x) * 8 - 1 - pos);

	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 390  :                 __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	rdx, QWORD PTR work_u_buf_words$5[rsp]
	movsxd	rax, ecx
	mov	r13d, 64				; 00000040H
	sub	r13, rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 204  :         return (x >= y ? x : y);

	cmp	QWORD PTR [rdi+16], r13
	cmovae	r13, QWORD PTR [rdi+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 390  :                 __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	mov	rcx, r13
	call	AllocateBlock
	mov	r14, rax

; 391  :                 if (work_u_buf == NULL)

	test	rax, rax
	je	SHORT $LN92@PMC_Greate

; 392  :                     return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 393  : 
; 394  :                 __UNIT_TYPE work_v_buf_code;
; 395  :                 __UNIT_TYPE work_v_buf_words;
; 396  :                 __UNIT_TYPE* work_v_buf = AllocateBlock(work_bit_count, &work_v_buf_words, &work_v_buf_code);

	lea	r8, QWORD PTR work_v_buf_code$3[rsp]
	mov	rcx, r13
	lea	rdx, QWORD PTR work_v_buf_words$6[rsp]
	call	AllocateBlock
	mov	r15, rax

; 397  :                 if (work_v_buf == NULL)

	test	rax, rax
	jne	SHORT $LN34@PMC_Greate

; 398  :                 {
; 399  :                     DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	rdx, QWORD PTR work_u_buf_words$5[rsp]
	mov	rcx, r14
	call	DeallocateBlock
$LN92@PMC_Greate:

; 439  : }

	mov	eax, -5
	add	rsp, 96					; 00000060H
	pop	r15
	pop	r14
	pop	r13
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
$LN34@PMC_Greate:

; 400  :                     return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 401  :                 }
; 402  : 
; 403  :                 __UNIT_TYPE nw_check_code;
; 404  :                 if ((result = AllocateNumber(w, work_bit_count, &nw_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR nw_check_code$1[rsp]
	mov	rdx, r13
	mov	rcx, rbx
	call	AllocateNumber
	mov	esi, eax
	test	eax, eax
	je	SHORT $LN35@PMC_Greate

; 405  :                 {
; 406  :                     DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	rdx, QWORD PTR work_v_buf_words$6[rsp]
	mov	rcx, r15
	call	DeallocateBlock

; 407  :                     DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	rdx, QWORD PTR work_u_buf_words$5[rsp]
	mov	rcx, r14
	call	DeallocateBlock

; 408  :                     return (result);

	mov	eax, esi

; 439  : }

	add	rsp, 96					; 00000060H
	pop	r15
	pop	r14
	pop	r13
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
$LN35@PMC_Greate:

; 409  :                 }
; 410  : 
; 411  :                 __UNIT_TYPE u_tzcnt = u->TRAILING_ZERO_BITS_COUNT;

	mov	r8, QWORD PTR [rdi+32]

; 413  :                 __UNIT_TYPE k = _MINIMUM_UNIT(u_tzcnt, v_tzcnt);

	mov	rcx, QWORD PTR [rdi+8]
	mov	rsi, QWORD PTR [rdi+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 724  :         _BitScanForward64(&pos, x);

	bsf	rax, rbp
	mov	QWORD PTR [rsp+168], r12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 412  :                 __UNIT_TYPE v_tzcnt = _TZCNT_ALT_UNIT((__UNIT_TYPE)v);

	movsxd	r12, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 209  :         return (x <= y ? x : y);

	cmp	r8, r12
	mov	rax, r12
	cmovbe	rax, r8
	mov	QWORD PTR k$1$[rsp], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 414  :                 if (u_tzcnt > 0)

	test	r8, r8
	je	SHORT $LN36@PMC_Greate

; 415  :                     RightShift_Imp(u->BLOCK, u->UNIT_WORD_COUNT, u_tzcnt, work_u_buf, FALSE);

	mov	rdx, rcx
	mov	DWORD PTR [rsp+32], 0
	mov	rcx, rsi
	mov	r9, r14
	call	RightShift_Imp
	jmp	SHORT $LN88@PMC_Greate
$LN36@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 70   :         __movsq(d, s, count);

	mov	rdi, r14
	rep movsq
$LN88@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 418  :                 work_v_buf[0] = (__UNIT_TYPE)(v >> v_tzcnt);

	mov	rcx, r12

; 421  :                 GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), (*w)->BLOCK, &w_buf_count);

	lea	rax, QWORD PTR w_buf_count$4[rsp]
	shr	rbp, cl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 194  :         return ((u + v - 1) / v);

	lea	r8, QWORD PTR [r13+63]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 418  :                 work_v_buf[0] = (__UNIT_TYPE)(v >> v_tzcnt);

	mov	QWORD PTR [r15], rbp

; 421  :                 GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), (*w)->BLOCK, &w_buf_count);

	mov	rdx, r15
	mov	r9, QWORD PTR [rbx]
	mov	rcx, r14
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 194  :         return ((u + v - 1) / v);

	shr	r8, 6
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 421  :                 GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), (*w)->BLOCK, &w_buf_count);

	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR [r9+56]
	call	GreatestCommonDivisor_Imp

; 422  :                 if ((result = CheckBlockLight(work_u_buf, work_u_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR work_u_buf_code$2[rsp]
	mov	rcx, r14
	call	CheckBlockLight
	mov	r12, QWORD PTR [rsp+168]
	test	eax, eax
	jne	$LN1@PMC_Greate

; 423  :                     return (result);
; 424  :                 if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR work_v_buf_code$3[rsp]
	mov	rcx, r15
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 425  :                     return (result);
; 426  :                 if ((result = CheckBlockLight((*w)->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR [rbx]
	mov	rdx, QWORD PTR nw_check_code$1[rsp]
	mov	rcx, QWORD PTR [rcx+56]
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 427  :                     return (result);
; 428  :                 DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	rdx, QWORD PTR work_v_buf_words$6[rsp]
	mov	rcx, r15
	call	DeallocateBlock

; 429  :                 DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	rdx, QWORD PTR work_u_buf_words$5[rsp]
	mov	rcx, r14
	call	DeallocateBlock

; 430  : 
; 431  :                 LeftShift_Imp((*w)->BLOCK, w_buf_count, k, (*w)->BLOCK, TRUE);

	mov	rax, QWORD PTR [rbx]
	mov	r8, QWORD PTR k$1$[rsp]
	mov	rdx, QWORD PTR w_buf_count$4[rsp]
	mov	DWORD PTR [rsp+32], 1
	mov	rcx, QWORD PTR [rax+56]
	mov	r9, rcx
	call	LeftShift_Imp

; 432  :                 if ((result = CheckBlockLight((*w)->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR [rbx]
	mov	rdx, QWORD PTR nw_check_code$1[rsp]
	mov	rcx, QWORD PTR [rcx+56]
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 433  :                     return (result);
; 434  :                 CommitNumber(*w);

	mov	rcx, QWORD PTR [rbx]
	call	CommitNumber
$LN11@PMC_Greate:

; 435  :             }
; 436  :         }
; 437  :     }
; 438  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Greate:

; 439  : }

	add	rsp, 96					; 00000060H
	pop	r15
	pop	r14
	pop	r13
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
PMC_GreatestCommonDivisor_X_L_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
;	COMDAT PMC_GreatestCommonDivisor_X_I_Imp
_TEXT	SEGMENT
nw_check_code$1 = 48
k$1$ = 56
w_buf_count$2 = 56
work_u_buf_code$3 = 64
work_v_buf_code$4 = 72
work_u_buf_words$5 = 144
u$ = 144
v$ = 152
w$ = 160
work_v_buf_words$6 = 168
PMC_GreatestCommonDivisor_X_I_Imp PROC			; COMDAT

; 80   : {

	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r14
	push	r15
	sub	rsp, 80					; 00000050H

; 81   :     PMC_STATUS_CODE result;
; 82   :     if (u->IS_ZERO)

	test	BYTE PTR [rcx+40], 2
	mov	rbx, r8
	mov	edi, edx
	mov	rsi, rcx
	je	SHORT $LN2@PMC_Greate

; 83   :     {
; 84   :         // u が 0 である場合
; 85   : 
; 86   :         if (v == 0)

	test	edx, edx
	jne	SHORT $LN4@PMC_Greate

; 87   :         {
; 88   :             // v が 0 である場合
; 89   : 
; 90   :             // u と v がともに 0 であり、GCD は一意に存在しないため、エラーを返す。
; 91   :             return (PMC_STATUS_ARGUMENT_ERROR);

	lea	eax, QWORD PTR [rdx-1]

; 173  : }

	add	rsp, 80					; 00000050H
	pop	r15
	pop	r14
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
$LN4@PMC_Greate:

; 92   :         }
; 93   :         else
; 94   :         {
; 95   :             // v が 0 ではない場合
; 96   : 
; 97   :             // GCD は v そのものであるため、v を計算結果として返す。
; 98   :             if ((result = From_I_Imp(v, w)) != PMC_STATUS_OK)

	mov	rdx, rbx
	mov	ecx, edi
	call	From_I_Imp
	test	eax, eax
	je	$LN8@PMC_Greate

; 173  : }

	add	rsp, 80					; 00000050H
	pop	r15
	pop	r14
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
$LN2@PMC_Greate:

; 99   :                 return (result);
; 100  :         }
; 101  :     }
; 102  :     else
; 103  :     {
; 104  :         // u が 0 ではない場合
; 105  : 
; 106  :         if (v == 0)

	test	edx, edx
	jne	SHORT $LN7@PMC_Greate

; 107  :         {
; 108  :             // v が 0 である場合
; 109  : 
; 110  :             // GCD は u そのものであるため、u を計算結果として返す。
; 111  :             if ((result = DuplicateNumber(u, w)) != PMC_STATUS_OK)

	mov	rdx, rbx
	call	DuplicateNumber
	test	eax, eax
	je	$LN8@PMC_Greate

; 173  : }

	add	rsp, 80					; 00000050H
	pop	r15
	pop	r14
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
$LN7@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 601  :         _BitScanReverse(&pos, x);

	bsr	eax, edi

; 607  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 125  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	r8, QWORD PTR work_u_buf_code$3[rsp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 607  :         return (sizeof(x) * 8 - 1 - pos);

	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 125  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	rdx, QWORD PTR work_u_buf_words$5[rsp]
	movsxd	rax, ecx
	mov	r15d, 32				; 00000020H
	sub	r15, rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 204  :         return (x >= y ? x : y);

	cmp	QWORD PTR [rsi+16], r15
	cmovae	r15, QWORD PTR [rsi+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 125  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	mov	rcx, r15
	call	AllocateBlock
	mov	rbp, rax

; 126  :             if (work_u_buf == NULL)

	test	rax, rax
	je	SHORT $LN34@PMC_Greate

; 127  :                 return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 128  : 
; 129  :             __UNIT_TYPE work_v_buf_code;
; 130  :             __UNIT_TYPE work_v_buf_words;
; 131  :             __UNIT_TYPE* work_v_buf = AllocateBlock(work_bit_count, &work_v_buf_words, &work_v_buf_code);

	lea	r8, QWORD PTR work_v_buf_code$4[rsp]
	mov	rcx, r15
	lea	rdx, QWORD PTR work_v_buf_words$6[rsp]
	call	AllocateBlock
	mov	r14, rax

; 132  :             if (work_v_buf == NULL)

	test	rax, rax
	jne	SHORT $LN11@PMC_Greate

; 133  :             {
; 134  :                 DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	rdx, QWORD PTR work_u_buf_words$5[rsp]
	mov	rcx, rbp
	call	DeallocateBlock
$LN34@PMC_Greate:

; 173  : }

	mov	eax, -5
	add	rsp, 80					; 00000050H
	pop	r15
	pop	r14
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
$LN11@PMC_Greate:

; 135  :                 return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 136  :             }
; 137  : 
; 138  :             __UNIT_TYPE nw_check_code;
; 139  :             if ((result = AllocateNumber(w, work_bit_count, &nw_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR nw_check_code$1[rsp]
	mov	rdx, r15
	mov	rcx, rbx
	call	AllocateNumber
	mov	r12d, eax
	test	eax, eax
	je	SHORT $LN12@PMC_Greate

; 140  :             {
; 141  :                 DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	rdx, QWORD PTR work_v_buf_words$6[rsp]
	mov	rcx, r14
	call	DeallocateBlock

; 142  :                 DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	rdx, QWORD PTR work_u_buf_words$5[rsp]
	mov	rcx, rbp
	call	DeallocateBlock

; 143  :                 return (result);

	mov	eax, r12d

; 173  : }

	add	rsp, 80					; 00000050H
	pop	r15
	pop	r14
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
$LN12@PMC_Greate:

; 144  :             }
; 145  : 
; 146  :             __UNIT_TYPE u_tzcnt = u->TRAILING_ZERO_BITS_COUNT;

	mov	r8, QWORD PTR [rsi+32]

; 147  :             __UNIT_TYPE v_tzcnt = _TZCNT_ALT_UNIT(v);

	mov	r12, rdi
	mov	QWORD PTR [rsp+152], r13
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 710  :         if (x == 0)

	test	edi, edi
	jne	SHORT $LN26@PMC_Greate

; 711  :             return (sizeof(x) * 8);

	lea	eax, QWORD PTR [rdi+64]
	jmp	SHORT $LN25@PMC_Greate
$LN26@PMC_Greate:

; 712  : #ifdef _M_IX86
; 713  :         _UINT32_T pos;
; 714  : #ifdef _MSC_VER
; 715  :         _BitScanForward(&pos, x);
; 716  : #elif defined(__GNUC__)
; 717  :         __asm__("bsfl %1, %0" : "=r"(pos) : "rm"(x));
; 718  : #else
; 719  : #error unknown compiler
; 720  : #endif
; 721  : #elif defined(_M_X64)
; 722  : #ifdef _MSC_VER
; 723  :         _UINT32_T pos;
; 724  :         _BitScanForward64(&pos, x);

	bsf	rax, r12
$LN25@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 148  :             __UNIT_TYPE k = _MINIMUM_UNIT(u_tzcnt, v_tzcnt);

	mov	rcx, QWORD PTR [rsi+8]
	mov	rsi, QWORD PTR [rsi+56]
	movsxd	r13, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 209  :         return (x <= y ? x : y);

	cmp	r8, r13
	mov	rdi, r13
	cmovbe	rdi, r8
	mov	QWORD PTR k$1$[rsp], rdi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 149  :             if (u_tzcnt > 0)

	test	r8, r8
	je	SHORT $LN13@PMC_Greate

; 150  :                 RightShift_Imp(u->BLOCK, u->UNIT_WORD_COUNT, u_tzcnt, work_u_buf, FALSE);

	mov	rdx, rcx
	mov	DWORD PTR [rsp+32], 0
	mov	rcx, rsi
	mov	r9, rbp
	call	RightShift_Imp
	jmp	SHORT $LN30@PMC_Greate
$LN13@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 70   :         __movsq(d, s, count);

	mov	rdi, rbp
	rep movsq
	mov	rdi, QWORD PTR k$1$[rsp]
$LN30@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 153  :             work_v_buf[0] = v >> v_tzcnt;

	mov	rcx, r13

; 156  :             GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), (*w)->BLOCK, &w_buf_count);

	lea	rax, QWORD PTR w_buf_count$2[rsp]
	shr	r12, cl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 194  :         return ((u + v - 1) / v);

	lea	r8, QWORD PTR [r15+63]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 153  :             work_v_buf[0] = v >> v_tzcnt;

	mov	QWORD PTR [r14], r12

; 156  :             GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), (*w)->BLOCK, &w_buf_count);

	mov	rdx, r14
	mov	r9, QWORD PTR [rbx]
	mov	rcx, rbp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 194  :         return ((u + v - 1) / v);

	shr	r8, 6
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 156  :             GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), (*w)->BLOCK, &w_buf_count);

	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR [r9+56]
	call	GreatestCommonDivisor_Imp

; 157  :             if ((result = CheckBlockLight(work_u_buf, work_u_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR work_u_buf_code$3[rsp]
	mov	rcx, rbp
	call	CheckBlockLight
	mov	r13, QWORD PTR [rsp+152]
	test	eax, eax
	jne	$LN1@PMC_Greate

; 158  :                 return (result);
; 159  :             if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR work_v_buf_code$4[rsp]
	mov	rcx, r14
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 160  :                 return (result);
; 161  :             if ((result = CheckBlockLight((*w)->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR [rbx]
	mov	rdx, QWORD PTR nw_check_code$1[rsp]
	mov	rcx, QWORD PTR [rcx+56]
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 162  :                 return (result);
; 163  :             DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	rdx, QWORD PTR work_v_buf_words$6[rsp]
	mov	rcx, r14
	call	DeallocateBlock

; 164  :             DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	rdx, QWORD PTR work_u_buf_words$5[rsp]
	mov	rcx, rbp
	call	DeallocateBlock

; 165  : 
; 166  :             LeftShift_Imp((*w)->BLOCK, w_buf_count, k, (*w)->BLOCK, TRUE);

	mov	rax, QWORD PTR [rbx]
	mov	r8, rdi
	mov	rdx, QWORD PTR w_buf_count$2[rsp]
	mov	DWORD PTR [rsp+32], 1
	mov	rcx, QWORD PTR [rax+56]
	mov	r9, rcx
	call	LeftShift_Imp

; 167  :             if ((result = CheckBlockLight((*w)->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR [rbx]
	mov	rdx, QWORD PTR nw_check_code$1[rsp]
	mov	rcx, QWORD PTR [rcx+56]
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 168  :                 return (result);
; 169  :             CommitNumber(*w);

	mov	rcx, QWORD PTR [rbx]
	call	CommitNumber
$LN8@PMC_Greate:

; 170  :         }
; 171  :     }
; 172  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Greate:

; 173  : }

	add	rsp, 80					; 00000050H
	pop	r15
	pop	r14
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
PMC_GreatestCommonDivisor_X_I_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
;	COMDAT GreatestCommonDivisor_Imp
_TEXT	SEGMENT
p1_buf$ = 80
p2_buf$ = 88
word_count$ = 96
w_buf$ = 104
w_buf_count$ = 112
GreatestCommonDivisor_Imp PROC				; COMDAT

; 39   : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 48					; 00000030H

; 40   :     __UNIT_TYPE* u = p1_buf;
; 41   :     __UNIT_TYPE* v = p2_buf;

	mov	r15, QWORD PTR w_buf_count$[rsp]
	mov	r14, r9
	mov	rbx, r8
	mov	rdi, rdx
	mov	rsi, rcx
	xor	ebp, ebp
	npad	5
$LL2@GreatestCo:

; 42   :     for (;;)
; 43   :     {
; 44   :         while (word_count > 0 && u[word_count - 1] == 0 && v[word_count - 1] == 0)

	test	rbx, rbx
	je	SHORT $LN29@GreatestCo
	lea	rax, QWORD PTR [rbx-1]
	mov	rcx, rsi
	lea	rax, QWORD PTR [rdi+rax*8]
	sub	rcx, rdi
$LL5@GreatestCo:
	cmp	QWORD PTR [rcx+rax], rbp
	jne	SHORT $LN6@GreatestCo
	cmp	QWORD PTR [rax], rbp
	jne	SHORT $LN6@GreatestCo

; 45   :             --word_count;

	sub	rax, 8
	sub	rbx, 1
	jne	SHORT $LL5@GreatestCo

; 46   :         if (word_count <= 0)

	jmp	SHORT $LN29@GreatestCo
$LN6@GreatestCo:
	test	rbx, rbx
	jne	SHORT $LN9@GreatestCo
$LN29@GreatestCo:

; 47   :         {
; 48   :             // このルートへの到達はあり得ないはず。
; 49   :             w_buf[0] = 0;

	mov	QWORD PTR [r14], rbp

; 50   :             *w_buf_count = 1;

	mov	QWORD PTR [r15], 1
$LN9@GreatestCo:

; 51   :         }
; 52   :         int c = Compare_Imp(u, v, word_count);

	mov	r8, rbx
	mov	rdx, rdi
	mov	rcx, rsi
	call	Compare_Imp

; 53   :         if (c == 0)

	test	eax, eax
	je	SHORT $LN19@GreatestCo

; 54   :         {
; 55   :             // u == v の場合
; 56   : 
; 57   :             // GCD を u として復帰
; 58   :             _COPY_MEMORY_UNIT(w_buf, u, word_count);
; 59   :             *w_buf_count = word_count;
; 60   :             return;
; 61   :         }
; 62   :         if (c < 0)

	jns	SHORT $LN11@GreatestCo

; 63   :         {
; 64   :             __UNIT_TYPE* tt = u;

	mov	rax, rsi

; 65   :             u = v;

	mov	rsi, rdi

; 66   :             v = tt;

	mov	rdi, rax
$LN11@GreatestCo:

; 67   :         }
; 68   :         // この時点で u > v かつ u と v はともに奇数である
; 69   : 
; 70   :         Subtruct_Imp(u, word_count, v, word_count, u, word_count);

	mov	QWORD PTR [rsp+40], rbx
	mov	r9, rbx
	mov	r8, rdi
	mov	QWORD PTR [rsp+32], rsi
	mov	rdx, rbx
	mov	rcx, rsi
	call	Subtruct_Imp

; 71   : 
; 72   :         // この時点で u は偶数
; 73   : 
; 74   :         while ((*u & 1) == 0)

	test	BYTE PTR [rsi], 1
	jne	SHORT $LL2@GreatestCo
	npad	10
$LL7@GreatestCo:

; 75   :             RightShift_Imp(u, word_count, 1, u, TRUE);

	mov	r9, rsi
	mov	DWORD PTR [rsp+32], 1
	mov	r8d, 1
	mov	rdx, rbx
	mov	rcx, rsi
	call	RightShift_Imp
	test	BYTE PTR [rsi], 1
	je	SHORT $LL7@GreatestCo
	jmp	$LL2@GreatestCo
$LN19@GreatestCo:

; 77   : }

	mov	rbp, QWORD PTR [rsp+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 70   :         __movsq(d, s, count);

	mov	rcx, rbx
	mov	rdi, r14
	rep movsq
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 77   : }

	mov	rsi, QWORD PTR [rsp+96]
	mov	QWORD PTR [r15], rbx
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	r15
	pop	r14
	pop	rdi
	ret	0
GreatestCommonDivisor_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _TZCNT_ALT_UNIT
_TEXT	SEGMENT
x$ = 8
_TZCNT_ALT_UNIT PROC					; COMDAT

; 710  :         if (x == 0)

	test	rcx, rcx
	jne	SHORT $LN2@TZCNT_ALT_

; 711  :             return (sizeof(x) * 8);

	lea	eax, QWORD PTR [rcx+64]

; 725  : #elif defined(__GNUC__)
; 726  :         _UINT64_T pos;
; 727  :         __asm__("bsfq %1, %0" : "=r"(pos) : "rm"(x));
; 728  : #else
; 729  : #error unknown compiler
; 730  : #endif
; 731  : #else
; 732  : #error unknown platform
; 733  : #endif
; 734  :         return (pos);
; 735  :     }

	ret	0
$LN2@TZCNT_ALT_:

; 712  : #ifdef _M_IX86
; 713  :         _UINT32_T pos;
; 714  : #ifdef _MSC_VER
; 715  :         _BitScanForward(&pos, x);
; 716  : #elif defined(__GNUC__)
; 717  :         __asm__("bsfl %1, %0" : "=r"(pos) : "rm"(x));
; 718  : #else
; 719  : #error unknown compiler
; 720  : #endif
; 721  : #elif defined(_M_X64)
; 722  : #ifdef _MSC_VER
; 723  :         _UINT32_T pos;
; 724  :         _BitScanForward64(&pos, x);

	bsf	rax, rcx

; 725  : #elif defined(__GNUC__)
; 726  :         _UINT64_T pos;
; 727  :         __asm__("bsfq %1, %0" : "=r"(pos) : "rm"(x));
; 728  : #else
; 729  : #error unknown compiler
; 730  : #endif
; 731  : #else
; 732  : #error unknown platform
; 733  : #endif
; 734  :         return (pos);
; 735  :     }

	ret	0
_TZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _LZCNT_ALT_UNIT
_TEXT	SEGMENT
x$ = 8
_LZCNT_ALT_UNIT PROC					; COMDAT

; 630  :         if (x == 0)

	test	rcx, rcx
	jne	SHORT $LN2@LZCNT_ALT_

; 631  :             return (sizeof(x) * 8);

	mov	eax, 64					; 00000040H

; 655  :     }

	ret	0
$LN2@LZCNT_ALT_:

; 632  : #ifdef _M_IX86
; 633  :         _UINT32_T pos;
; 634  : #ifdef _MSC_VER
; 635  :         _BitScanReverse(&pos, x);
; 636  : #elif defined(__GNUC__)
; 637  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 638  : #else
; 639  : #error unknown compiler
; 640  : #endif
; 641  : #elif defined(_M_X64)
; 642  : #ifdef _MSC_VER
; 643  :         _UINT32_T pos;
; 644  :         _BitScanReverse64(&pos, x);

	bsr	rcx, rcx

; 645  : #elif defined(__GNUC__)
; 646  :         _UINT64_T pos;
; 647  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 648  : #else
; 649  : #error unknown compiler
; 650  : #endif
; 651  : #else
; 652  : #error unknown platform
; 653  : #endif
; 654  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 63					; 0000003fH
	sub	eax, ecx

; 655  :     }

	ret	0
_LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _LZCNT_ALT_32
_TEXT	SEGMENT
x$ = 8
_LZCNT_ALT_32 PROC					; COMDAT

; 597  :         if (x == 0)

	test	ecx, ecx
	jne	SHORT $LN2@LZCNT_ALT_

; 598  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 608  :     }

	ret	0
$LN2@LZCNT_ALT_:

; 599  :         _UINT32_T pos;
; 600  : #ifdef _MSC_VER
; 601  :         _BitScanReverse(&pos, x);

	bsr	ecx, ecx

; 602  : #elif defined(__GNUC__)
; 603  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 604  : #else
; 605  : #error unknown compiler
; 606  : #endif
; 607  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31
	sub	eax, ecx

; 608  :     }

	ret	0
_LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _MINIMUM_UNIT
_TEXT	SEGMENT
x$ = 8
y$ = 16
_MINIMUM_UNIT PROC					; COMDAT

; 209  :         return (x <= y ? x : y);

	cmp	rcx, rdx
	cmovbe	rdx, rcx
	mov	rax, rdx

; 210  :     }

	ret	0
_MINIMUM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _MAXIMUM_UNIT
_TEXT	SEGMENT
x$ = 8
y$ = 16
_MAXIMUM_UNIT PROC					; COMDAT

; 204  :         return (x >= y ? x : y);

	cmp	rcx, rdx
	cmovae	rdx, rcx
	mov	rax, rdx

; 205  :     }

	ret	0
_MAXIMUM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _DIVIDE_CEILING_UNIT
_TEXT	SEGMENT
u$ = 8
v$ = 16
_DIVIDE_CEILING_UNIT PROC				; COMDAT

; 194  :         return ((u + v - 1) / v);

	lea	rax, QWORD PTR [rdx-1]
	mov	r8, rdx
	add	rax, rcx
	xor	edx, edx
	div	r8

; 195  :     }

	ret	0
_DIVIDE_CEILING_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _FROMDWORDTOWORD
_TEXT	SEGMENT
value$ = 8
result_high$ = 16
_FROMDWORDTOWORD PROC					; COMDAT

; 183  :         *result_high = (_UINT32_T)(value >> 32);

	mov	rax, rcx
	shr	rax, 32					; 00000020H
	mov	DWORD PTR [rdx], eax

; 184  :         return ((_UINT32_T)value);

	mov	eax, ecx

; 185  :     }

	ret	0
_FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _COPY_MEMORY_UNIT
_TEXT	SEGMENT
d$ = 8
s$ = 16
count$ = 24
_COPY_MEMORY_UNIT PROC					; COMDAT

; 66   :     {

	mov	QWORD PTR [rsp+8], rsi
	mov	QWORD PTR [rsp+16], rdi

; 67   : #ifdef _M_IX86
; 68   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);
; 69   : #elif defined(_M_X64)
; 70   :         __movsq(d, s, count);

	mov	rdi, rcx
	mov	rsi, rdx
	mov	rcx, r8
	rep movsq

; 71   : #else
; 72   : #error unknown platform
; 73   : #endif
; 74   :     }

	mov	rsi, QWORD PTR [rsp+8]
	mov	rdi, QWORD PTR [rsp+16]
	ret	0
_COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
;	COMDAT PMC_GreatestCommonDivisor_X_X
_TEXT	SEGMENT
work_v_buf_words$1 = 48
nw_check_code$2 = 56
v_tzcnt$1$ = 64
w_buf_count$3 = 64
work_u_buf_code$4 = 72
work_v_buf_code$5 = 80
k$1$ = 88
nw$ = 160
u$ = 160
v$ = 168
w$ = 176
work_u_buf_words$6 = 184
PMC_GreatestCommonDivisor_X_X PROC			; COMDAT

; 488  : {

$LN40:
	mov	QWORD PTR [rsp+16], rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	mov	rbp, rsp
	sub	rsp, 96					; 00000060H
	mov	r12, r8
	mov	rbx, rdx
	mov	rdi, rcx

; 489  :     if (u == NULL)

	test	rcx, rcx
	je	$LN37@PMC_Greate

; 490  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 491  :     if (v == NULL)

	test	rdx, rdx
	je	$LN37@PMC_Greate

; 492  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 493  :     if (w == NULL)

	test	r8, r8
	je	$LN37@PMC_Greate

; 494  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 495  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 496  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 497  :     PMC_STATUS_CODE result;
; 498  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	$LN1@PMC_Greate

; 499  :         return (result);
; 500  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	rcx, rbx
	call	CheckNumber
	test	eax, eax
	jne	$LN1@PMC_Greate

; 501  :         return (result);
; 502  :     NUMBER_HEADER* nw;
; 503  :     if (nu->IS_ZERO)

	mov	eax, DWORD PTR [rbx+40]
	and	eax, 2
	test	BYTE PTR [rdi+40], 2
	je	SHORT $LN7@PMC_Greate

; 504  :     {
; 505  :         // u が 0 である場合
; 506  : 
; 507  :         if (nv->IS_ZERO)

	test	eax, eax
	jne	$LN37@PMC_Greate

; 513  :         }
; 514  :         else
; 515  :         {
; 516  :             // v が 0 ではない場合
; 517  : 
; 518  :             // GCD は v そのものであるため、v を計算結果として返す。
; 519  :             if ((result = DuplicateNumber(nv, &nw)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR nw$[rbp-96]
	mov	rcx, rbx
	call	DuplicateNumber
	test	eax, eax
	je	$LN14@PMC_Greate

; 520  :                 return (result);

	jmp	$LN1@PMC_Greate
$LN7@PMC_Greate:

; 521  :             *w = nw;
; 522  :         }
; 523  :     }
; 524  :     else
; 525  :     {
; 526  :         // u が 0 ではない場合
; 527  : 
; 528  :         if (nv->IS_ZERO)

	test	eax, eax
	je	SHORT $LN12@PMC_Greate

; 529  :         {
; 530  :             // v が 0 である場合
; 531  : 
; 532  :             // GCD は u そのものであるため、u を計算結果として返す。
; 533  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR nw$[rbp-96]
	mov	rcx, rdi
	call	DuplicateNumber
	test	eax, eax
	jne	$LN1@PMC_Greate

; 596  :             *w = nw;
; 597  :         }
; 598  :     }
; 599  : #ifdef _DEBUG
; 600  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 601  :         return (result);
; 602  : #endif
; 603  :     return (PMC_STATUS_OK);

	mov	rax, QWORD PTR nw$[rbp-96]
	mov	QWORD PTR [r12], rax
	xor	eax, eax
	jmp	$LN1@PMC_Greate
$LN12@PMC_Greate:

; 534  :                 return (result);
; 535  :             *w = nw;
; 536  :         }
; 537  :         else
; 538  :         {
; 539  :             // u と v がともに 0 ではない場合
; 540  : 
; 541  :             // u と v の GCD を計算する
; 542  :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 543  :             __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	r13, QWORD PTR [rbx+16]

; 548  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	r8, QWORD PTR work_u_buf_code$4[rbp-96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 204  :         return (x >= y ? x : y);

	cmp	QWORD PTR [rdi+16], r13
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 548  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	rdx, QWORD PTR work_u_buf_words$6[rbp-96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 204  :         return (x >= y ? x : y);

	cmovae	r13, QWORD PTR [rdi+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 548  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	mov	rcx, r13
	call	AllocateBlock
	mov	r15, rax

; 549  :             if (work_u_buf == NULL)

	test	rax, rax
	je	SHORT $LN38@PMC_Greate

; 550  :                 return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 551  : 
; 552  :             __UNIT_TYPE work_v_buf_code;
; 553  :             __UNIT_TYPE work_v_buf_words;
; 554  :             __UNIT_TYPE* work_v_buf = AllocateBlock(work_bit_count, &work_v_buf_words, &work_v_buf_code);

	lea	r8, QWORD PTR work_v_buf_code$5[rbp-96]
	mov	rcx, r13
	lea	rdx, QWORD PTR work_v_buf_words$1[rbp-96]
	call	AllocateBlock
	mov	r14, rax

; 555  :             if (work_v_buf == NULL)

	test	rax, rax
	jne	SHORT $LN16@PMC_Greate

; 556  :             {
; 557  :                 DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	rdx, QWORD PTR work_u_buf_words$6[rbp-96]
	mov	rcx, r15
	call	DeallocateBlock
$LN38@PMC_Greate:

; 604  : }

	mov	eax, -5
	jmp	$LN1@PMC_Greate
$LN16@PMC_Greate:

; 558  :                 return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 559  :             }
; 560  : 
; 561  :             __UNIT_TYPE nw_check_code;
; 562  :             if ((result = AllocateNumber(&nw, work_bit_count, &nw_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR nw_check_code$2[rbp-96]
	mov	rdx, r13
	lea	rcx, QWORD PTR nw$[rbp-96]
	call	AllocateNumber
	mov	esi, eax
	test	eax, eax
	je	SHORT $LN17@PMC_Greate

; 563  :             {
; 564  :                 DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	rdx, QWORD PTR work_v_buf_words$1[rbp-96]
	mov	rcx, r14
	call	DeallocateBlock

; 565  :                 DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	rdx, QWORD PTR work_u_buf_words$6[rbp-96]
	mov	rcx, r15
	call	DeallocateBlock

; 566  :                 return (result);

	mov	eax, esi
	jmp	$LN1@PMC_Greate
$LN17@PMC_Greate:

; 567  :             }
; 568  : 
; 569  :             __UNIT_TYPE u_tzcnt = nu->TRAILING_ZERO_BITS_COUNT;

	mov	r8, QWORD PTR [rdi+32]

; 570  :             __UNIT_TYPE v_tzcnt = nv->TRAILING_ZERO_BITS_COUNT;

	mov	rax, QWORD PTR [rbx+32]

; 571  :             __UNIT_TYPE k = _MINIMUM_UNIT(u_tzcnt, v_tzcnt);

	mov	rsi, QWORD PTR [rdi+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 209  :         return (x <= y ? x : y);

	cmp	r8, rax
	mov	rcx, rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 570  :             __UNIT_TYPE v_tzcnt = nv->TRAILING_ZERO_BITS_COUNT;

	mov	QWORD PTR v_tzcnt$1$[rbp-96], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 209  :         return (x <= y ? x : y);

	cmovbe	rcx, r8
	mov	QWORD PTR k$1$[rbp-96], rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 571  :             __UNIT_TYPE k = _MINIMUM_UNIT(u_tzcnt, v_tzcnt);

	mov	rcx, QWORD PTR [rdi+8]

; 572  :             if (u_tzcnt > 0)

	test	r8, r8
	je	SHORT $LN18@PMC_Greate

; 573  :                 RightShift_Imp(nu->BLOCK, nu->UNIT_WORD_COUNT, u_tzcnt, work_u_buf, FALSE);

	mov	rdx, rcx
	mov	DWORD PTR [rsp+32], 0
	mov	rcx, rsi
	mov	r9, r15
	call	RightShift_Imp
	mov	rax, QWORD PTR v_tzcnt$1$[rbp-96]
	jmp	SHORT $LN31@PMC_Greate
$LN18@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 70   :         __movsq(d, s, count);

	mov	rdi, r15
	rep movsq
$LN31@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 576  :             if (v_tzcnt > 0)

	mov	rcx, QWORD PTR [rbx+8]
	mov	rsi, QWORD PTR [rbx+56]
	test	rax, rax
	je	SHORT $LN20@PMC_Greate

; 577  :                 RightShift_Imp(nv->BLOCK, nv->UNIT_WORD_COUNT, v_tzcnt, work_v_buf, FALSE);

	mov	rdx, rcx
	mov	DWORD PTR [rsp+32], 0
	mov	rcx, rsi
	mov	r9, r14
	mov	r8, rax
	call	RightShift_Imp
	jmp	SHORT $LN33@PMC_Greate
$LN20@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 70   :         __movsq(d, s, count);

	mov	rdi, r14
	rep movsq
$LN33@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 582  :             GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), nw->BLOCK, &w_buf_count);

	mov	r9, QWORD PTR nw$[rbp-96]
	lea	rax, QWORD PTR w_buf_count$3[rbp-96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 194  :         return ((u + v - 1) / v);

	lea	r8, QWORD PTR [r13+63]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 582  :             GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), nw->BLOCK, &w_buf_count);

	mov	QWORD PTR [rsp+32], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 194  :         return ((u + v - 1) / v);

	shr	r8, 6
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 582  :             GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), nw->BLOCK, &w_buf_count);

	mov	rdx, r14
	mov	rcx, r15
	mov	r9, QWORD PTR [r9+56]
	call	GreatestCommonDivisor_Imp

; 583  :             if ((result = CheckBlockLight(work_u_buf, work_u_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR work_u_buf_code$4[rbp-96]
	mov	rcx, r15
	call	CheckBlockLight
	test	eax, eax
	jne	$LN1@PMC_Greate

; 584  :                 return (result);
; 585  :             if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR work_v_buf_code$5[rbp-96]
	mov	rcx, r14
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 586  :                 return (result);
; 587  :             if ((result = CheckBlockLight(nw->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nw$[rbp-96]
	mov	rdx, QWORD PTR nw_check_code$2[rbp-96]
	mov	rcx, QWORD PTR [rcx+56]
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 588  :                 return (result);
; 589  :             DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	rdx, QWORD PTR work_v_buf_words$1[rbp-96]
	mov	rcx, r14
	call	DeallocateBlock

; 590  :             DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	rdx, QWORD PTR work_u_buf_words$6[rbp-96]
	mov	rcx, r15
	call	DeallocateBlock

; 591  : 
; 592  :             LeftShift_Imp(nw->BLOCK, w_buf_count, k, nw->BLOCK, TRUE);

	mov	rax, QWORD PTR nw$[rbp-96]
	mov	r8, QWORD PTR k$1$[rbp-96]
	mov	rdx, QWORD PTR w_buf_count$3[rbp-96]
	mov	DWORD PTR [rsp+32], 1
	mov	rcx, QWORD PTR [rax+56]
	mov	r9, rcx
	call	LeftShift_Imp

; 593  :             if ((result = CheckBlockLight(nw->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nw$[rbp-96]
	mov	rdx, QWORD PTR nw_check_code$2[rbp-96]
	mov	rcx, QWORD PTR [rcx+56]
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 594  :                 return (result);
; 595  :             CommitNumber(nw);

	mov	rcx, QWORD PTR nw$[rbp-96]
	call	CommitNumber
$LN14@PMC_Greate:

; 596  :             *w = nw;
; 597  :         }
; 598  :     }
; 599  : #ifdef _DEBUG
; 600  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 601  :         return (result);
; 602  : #endif
; 603  :     return (PMC_STATUS_OK);

	mov	rax, QWORD PTR nw$[rbp-96]
	mov	QWORD PTR [r12], rax
	xor	eax, eax
	jmp	SHORT $LN1@PMC_Greate
$LN37@PMC_Greate:

; 508  :         {
; 509  :             // v が 0 である場合
; 510  : 
; 511  :             // u と v がともに 0 であり、GCD は一意に存在しないため、エラーを返す。
; 512  :             return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN1@PMC_Greate:

; 604  : }

	mov	rbx, QWORD PTR [rsp+168]
	add	rsp, 96					; 00000060H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
PMC_GreatestCommonDivisor_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
;	COMDAT PMC_GreatestCommonDivisor_X_L
_TEXT	SEGMENT
u$ = 48
v$ = 56
w$ = 64
PMC_GreatestCommonDivisor_X_L PROC			; COMDAT

; 465  : {

$LN10:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, r8
	mov	rsi, rdx
	mov	rbx, rcx

; 466  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(v) * 8)
; 467  :     {
; 468  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 469  :         return (PMC_STATUS_INTERNAL_ERROR);
; 470  :     }
; 471  :     if (u == NULL)

	test	rcx, rcx
	je	SHORT $LN8@PMC_Greate

; 472  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 473  :     if (w == NULL)

	test	r8, r8
	je	SHORT $LN8@PMC_Greate

; 475  :     PMC_STATUS_CODE result;
; 476  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN6@PMC_Greate

; 477  :         return (result);
; 478  :     if ((result = PMC_GreatestCommonDivisor_X_L_Imp((NUMBER_HEADER*)u, v, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	r8, rdi
	mov	rdx, rsi
	mov	rcx, rbx

; 479  :         return (result);
; 480  : #ifdef _DEBUG
; 481  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 482  :         return (result);
; 483  : #endif
; 484  :     return (PMC_STATUS_OK);
; 485  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi

; 477  :         return (result);
; 478  :     if ((result = PMC_GreatestCommonDivisor_X_L_Imp((NUMBER_HEADER*)u, v, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	jmp	PMC_GreatestCommonDivisor_X_L_Imp
$LN8@PMC_Greate:

; 474  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN6@PMC_Greate:

; 479  :         return (result);
; 480  : #ifdef _DEBUG
; 481  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 482  :         return (result);
; 483  : #endif
; 484  :     return (PMC_STATUS_OK);
; 485  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_GreatestCommonDivisor_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
;	COMDAT PMC_GreatestCommonDivisor_X_I
_TEXT	SEGMENT
u$ = 48
v$ = 56
w$ = 64
PMC_GreatestCommonDivisor_X_I PROC			; COMDAT

; 199  : {

$LN10:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, r8
	mov	esi, edx
	mov	rbx, rcx

; 200  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)
; 201  :     {
; 202  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 203  :         return (PMC_STATUS_INTERNAL_ERROR);
; 204  :     }
; 205  :     if (u == NULL)

	test	rcx, rcx
	je	SHORT $LN8@PMC_Greate

; 206  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 207  :     if (w == NULL)

	test	r8, r8
	je	SHORT $LN8@PMC_Greate

; 209  :     PMC_STATUS_CODE result;
; 210  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN6@PMC_Greate

; 211  :         return (result);
; 212  :     if ((result = PMC_GreatestCommonDivisor_X_I_Imp((NUMBER_HEADER*)u, v, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	r8, rdi
	mov	edx, esi
	mov	rcx, rbx

; 213  :         return (result);
; 214  : #ifdef _DEBUG
; 215  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 216  :         return (result);
; 217  : #endif
; 218  :     return (PMC_STATUS_OK);
; 219  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi

; 211  :         return (result);
; 212  :     if ((result = PMC_GreatestCommonDivisor_X_I_Imp((NUMBER_HEADER*)u, v, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	jmp	PMC_GreatestCommonDivisor_X_I_Imp
$LN8@PMC_Greate:

; 208  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN6@PMC_Greate:

; 213  :         return (result);
; 214  : #ifdef _DEBUG
; 215  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 216  :         return (result);
; 217  : #endif
; 218  :     return (PMC_STATUS_OK);
; 219  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_GreatestCommonDivisor_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
;	COMDAT PMC_GreatestCommonDivisor_L_X
_TEXT	SEGMENT
u$ = 48
v$ = 56
w$ = 64
PMC_GreatestCommonDivisor_L_X PROC			; COMDAT

; 442  : {

$LN10:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, r8
	mov	rbx, rdx
	mov	rsi, rcx

; 443  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(u) * 8)
; 444  :     {
; 445  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 446  :         return (PMC_STATUS_INTERNAL_ERROR);
; 447  :     }
; 448  :     if (v == NULL)

	test	rdx, rdx
	je	SHORT $LN8@PMC_Greate

; 449  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 450  :     if (w == NULL)

	test	r8, r8
	je	SHORT $LN8@PMC_Greate

; 452  :     PMC_STATUS_CODE result;
; 453  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	mov	rcx, rdx
	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN6@PMC_Greate

; 454  :         return (result);
; 455  :     if ((result = PMC_GreatestCommonDivisor_X_L_Imp((NUMBER_HEADER*)v, u, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	r8, rdi
	mov	rdx, rsi
	mov	rcx, rbx

; 456  :         return (result);
; 457  : #ifdef _DEBUG
; 458  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 459  :         return (result);
; 460  : #endif
; 461  :     return (PMC_STATUS_OK);
; 462  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi

; 454  :         return (result);
; 455  :     if ((result = PMC_GreatestCommonDivisor_X_L_Imp((NUMBER_HEADER*)v, u, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	jmp	PMC_GreatestCommonDivisor_X_L_Imp
$LN8@PMC_Greate:

; 451  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN6@PMC_Greate:

; 456  :         return (result);
; 457  : #ifdef _DEBUG
; 458  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 459  :         return (result);
; 460  : #endif
; 461  :     return (PMC_STATUS_OK);
; 462  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_GreatestCommonDivisor_L_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
;	COMDAT PMC_GreatestCommonDivisor_I_X
_TEXT	SEGMENT
u$ = 48
v$ = 56
w$ = 64
PMC_GreatestCommonDivisor_I_X PROC			; COMDAT

; 176  : {

$LN10:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, r8
	mov	rbx, rdx
	mov	esi, ecx

; 177  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(u) * 8)
; 178  :     {
; 179  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 180  :         return (PMC_STATUS_INTERNAL_ERROR);
; 181  :     }
; 182  :     if (v == NULL)

	test	rdx, rdx
	je	SHORT $LN8@PMC_Greate

; 183  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 184  :     if (w == NULL)

	test	r8, r8
	je	SHORT $LN8@PMC_Greate

; 186  :     PMC_STATUS_CODE result;
; 187  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	mov	rcx, rdx
	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN6@PMC_Greate

; 188  :         return (result);
; 189  :     if ((result = PMC_GreatestCommonDivisor_X_I_Imp((NUMBER_HEADER*)v, u, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	r8, rdi
	mov	edx, esi
	mov	rcx, rbx

; 190  :         return (result);
; 191  : #ifdef _DEBUG
; 192  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 193  :         return (result);
; 194  : #endif
; 195  :     return (PMC_STATUS_OK);
; 196  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi

; 188  :         return (result);
; 189  :     if ((result = PMC_GreatestCommonDivisor_X_I_Imp((NUMBER_HEADER*)v, u, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	jmp	PMC_GreatestCommonDivisor_X_I_Imp
$LN8@PMC_Greate:

; 185  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN6@PMC_Greate:

; 190  :         return (result);
; 191  : #ifdef _DEBUG
; 192  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 193  :         return (result);
; 194  : #endif
; 195  :     return (PMC_STATUS_OK);
; 196  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_GreatestCommonDivisor_I_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
;	COMDAT Initialize_GreatestCommonDivisor
_TEXT	SEGMENT
feature$ = 8
Initialize_GreatestCommonDivisor PROC			; COMDAT

; 608  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 609  : }

	ret	0
Initialize_GreatestCommonDivisor ENDP
_TEXT	ENDS
END
