; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	Initialize_GreatestCommonDivisor
PUBLIC	PMC_GreatestCommonDivisor_I_X
PUBLIC	PMC_GreatestCommonDivisor_L_X
PUBLIC	PMC_GreatestCommonDivisor_X_I
PUBLIC	PMC_GreatestCommonDivisor_X_L
PUBLIC	PMC_GreatestCommonDivisor_X_X
EXTRN	AllocateBlock:PROC
EXTRN	DeallocateBlock:PROC
EXTRN	CheckBlockLight:PROC
EXTRN	AllocateNumber:PROC
EXTRN	CommitNumber:PROC
EXTRN	CheckNumber:PROC
EXTRN	DuplicateNumber:PROC
EXTRN	From_I_Imp:PROC
EXTRN	From_L_Imp:PROC
EXTRN	RightShift_Imp:PROC
EXTRN	LeftShift_Imp:PROC
EXTRN	Subtruct_Imp:PROC
EXTRN	Compare_Imp:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_GreatestCommonDivisor_I_X DD imagerel $LN10
	DD	imagerel $LN10+94
	DD	imagerel $unwind$PMC_GreatestCommonDivisor_I_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_GreatestCommonDivisor_L_X DD imagerel $LN10
	DD	imagerel $LN10+96
	DD	imagerel $unwind$PMC_GreatestCommonDivisor_L_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_GreatestCommonDivisor_X_I DD imagerel $LN10
	DD	imagerel $LN10+91
	DD	imagerel $unwind$PMC_GreatestCommonDivisor_X_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_GreatestCommonDivisor_X_L DD imagerel $LN10
	DD	imagerel $LN10+93
	DD	imagerel $unwind$PMC_GreatestCommonDivisor_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_GreatestCommonDivisor_X_X DD imagerel $LN40
	DD	imagerel $LN40+647
	DD	imagerel $unwind$PMC_GreatestCommonDivisor_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_COPY_MEMORY_UNIT DD imagerel _COPY_MEMORY_UNIT
	DD	imagerel _COPY_MEMORY_UNIT+33
	DD	imagerel $unwind$_COPY_MEMORY_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$GreatestCommonDivisor_Imp DD imagerel GreatestCommonDivisor_Imp
	DD	imagerel GreatestCommonDivisor_Imp+251
	DD	imagerel $unwind$GreatestCommonDivisor_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_GreatestCommonDivisor_X_I_Imp DD imagerel PMC_GreatestCommonDivisor_X_I_Imp
	DD	imagerel PMC_GreatestCommonDivisor_X_I_Imp+324
	DD	imagerel $unwind$PMC_GreatestCommonDivisor_X_I_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PMC_GreatestCommonDivisor_X_I_Imp DD imagerel PMC_GreatestCommonDivisor_X_I_Imp+324
	DD	imagerel PMC_GreatestCommonDivisor_X_I_Imp+485
	DD	imagerel $chain$0$PMC_GreatestCommonDivisor_X_I_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PMC_GreatestCommonDivisor_X_I_Imp DD imagerel PMC_GreatestCommonDivisor_X_I_Imp+485
	DD	imagerel PMC_GreatestCommonDivisor_X_I_Imp+632
	DD	imagerel $chain$1$PMC_GreatestCommonDivisor_X_I_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_GreatestCommonDivisor_X_L_Imp DD imagerel PMC_GreatestCommonDivisor_X_L_Imp
	DD	imagerel PMC_GreatestCommonDivisor_X_L_Imp+336
	DD	imagerel $unwind$PMC_GreatestCommonDivisor_X_L_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PMC_GreatestCommonDivisor_X_L_Imp DD imagerel PMC_GreatestCommonDivisor_X_L_Imp+336
	DD	imagerel PMC_GreatestCommonDivisor_X_L_Imp+471
	DD	imagerel $chain$0$PMC_GreatestCommonDivisor_X_L_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PMC_GreatestCommonDivisor_X_L_Imp DD imagerel PMC_GreatestCommonDivisor_X_L_Imp+471
	DD	imagerel PMC_GreatestCommonDivisor_X_L_Imp+620
	DD	imagerel $chain$1$PMC_GreatestCommonDivisor_X_L_Imp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PMC_GreatestCommonDivisor_X_L_Imp DD 021H
	DD	imagerel PMC_GreatestCommonDivisor_X_L_Imp
	DD	imagerel PMC_GreatestCommonDivisor_X_L_Imp+336
	DD	imagerel $unwind$PMC_GreatestCommonDivisor_X_L_Imp
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PMC_GreatestCommonDivisor_X_L_Imp DD 020821H
	DD	015c408H
	DD	imagerel PMC_GreatestCommonDivisor_X_L_Imp
	DD	imagerel PMC_GreatestCommonDivisor_X_L_Imp+336
	DD	imagerel $unwind$PMC_GreatestCommonDivisor_X_L_Imp
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_GreatestCommonDivisor_X_L_Imp DD 080f01H
	DD	0f00bb20fH
	DD	0d007e009H
	DD	060047005H
	DD	030025003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PMC_GreatestCommonDivisor_X_I_Imp DD 021H
	DD	imagerel PMC_GreatestCommonDivisor_X_I_Imp
	DD	imagerel PMC_GreatestCommonDivisor_X_I_Imp+324
	DD	imagerel $unwind$PMC_GreatestCommonDivisor_X_I_Imp
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PMC_GreatestCommonDivisor_X_I_Imp DD 020821H
	DD	013d408H
	DD	imagerel PMC_GreatestCommonDivisor_X_I_Imp
	DD	imagerel PMC_GreatestCommonDivisor_X_I_Imp+324
	DD	imagerel $unwind$PMC_GreatestCommonDivisor_X_I_Imp
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_GreatestCommonDivisor_X_I_Imp DD 080f01H
	DD	0f00b920fH
	DD	0c007e009H
	DD	060047005H
	DD	030025003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$GreatestCommonDivisor_Imp DD 0a1801H
	DD	0c6418H
	DD	0b5418H
	DD	0a3418H
	DD	0f0145218H
	DD	07010e012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_COPY_MEMORY_UNIT DD 040a01H
	DD	02740aH
	DD	016405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_GreatestCommonDivisor_X_X DD 0a1701H
	DD	0153417H
	DD	0f010b217H
	DD	0d00ce00eH
	DD	07008c00aH
	DD	050066007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_GreatestCommonDivisor_X_L DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_GreatestCommonDivisor_X_I DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_GreatestCommonDivisor_L_X DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_GreatestCommonDivisor_I_X DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
;	COMDAT PMC_GreatestCommonDivisor_X_L_Imp
_TEXT	SEGMENT
nw_check_code$1 = 48
work_u_buf_code$2 = 56
work_v_buf_code$3 = 64
k$1$ = 72
w_buf_count$4 = 80
work_u_buf_words$5 = 160
u$ = 160
v$ = 168
w$ = 176
work_v_buf_words$6 = 184
PMC_GreatestCommonDivisor_X_L_Imp PROC			; COMDAT

; 215  : {

	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r13
	push	r14
	push	r15
	sub	rsp, 96					; 00000060H

; 216  :     PMC_STATUS_CODE result;
; 217  :     if (u->IS_ZERO)

	test	BYTE PTR [rcx+40], 2
	mov	rbx, r8
	mov	rbp, rdx
	mov	rdi, rcx
	je	SHORT $LN2@PMC_Greate

; 218  :     {
; 219  :         // u が 0 である場合
; 220  : 
; 221  :         if (v == 0)

	test	rdx, rdx
	jne	SHORT $LN4@PMC_Greate

; 222  :         {
; 223  :             // v が 0 である場合
; 224  : 
; 225  :             // u と v がともに 0 であり、GCD は一意に存在しないため、エラーを返す。
; 226  :             return (PMC_STATUS_ARGUMENT_ERROR);

	lea	eax, QWORD PTR [rdx-1]

; 432  : }

	add	rsp, 96					; 00000060H
	pop	r15
	pop	r14
	pop	r13
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
$LN4@PMC_Greate:

; 227  :         }
; 228  :         else
; 229  :         {
; 230  :             // v が 0 ではない場合
; 231  : 
; 232  :             // GCD は v そのものであるため、v を計算結果として返す。
; 233  :             if ((result = From_L_Imp(v, w)) != PMC_STATUS_OK)

	mov	rdx, rbx
	mov	rcx, rbp
	call	From_L_Imp
	test	eax, eax
	je	$LN11@PMC_Greate

; 432  : }

	add	rsp, 96					; 00000060H
	pop	r15
	pop	r14
	pop	r13
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
$LN2@PMC_Greate:

; 234  :                 return (result);
; 235  :         }
; 236  :     }
; 237  :     else
; 238  :     {
; 239  :         // u が 0 ではない場合
; 240  : 
; 241  :         if (v == 0)

	test	rbp, rbp
	jne	SHORT $LN7@PMC_Greate

; 242  :         {
; 243  :             // v が 0 である場合
; 244  : 
; 245  :             // GCD は u そのものであるため、u を計算結果として返す。
; 246  :             if ((result = DuplicateNumber(u, w)) != PMC_STATUS_OK)

	mov	rdx, rbx
	call	DuplicateNumber
	test	eax, eax
	je	$LN11@PMC_Greate

; 432  : }

	add	rsp, 96					; 00000060H
	pop	r15
	pop	r14
	pop	r13
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
$LN7@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 637  :         _BitScanReverse64(&pos, x);

	bsr	rax, rbp

; 647  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 63					; 0000003fH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 383  :                 __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	r8, QWORD PTR work_u_buf_code$2[rsp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 647  :         return (sizeof(x) * 8 - 1 - pos);

	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 383  :                 __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	rdx, QWORD PTR work_u_buf_words$5[rsp]
	movsxd	rax, ecx
	mov	r13d, 64				; 00000040H
	sub	r13, rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 197  :         return (x >= y ? x : y);

	cmp	QWORD PTR [rdi+16], r13
	cmovae	r13, QWORD PTR [rdi+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 383  :                 __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	mov	rcx, r13
	call	AllocateBlock
	mov	r14, rax

; 384  :                 if (work_u_buf == NULL)

	test	rax, rax
	je	SHORT $LN92@PMC_Greate

; 385  :                     return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 386  : 
; 387  :                 __UNIT_TYPE work_v_buf_code;
; 388  :                 __UNIT_TYPE work_v_buf_words;
; 389  :                 __UNIT_TYPE* work_v_buf = AllocateBlock(work_bit_count, &work_v_buf_words, &work_v_buf_code);

	lea	r8, QWORD PTR work_v_buf_code$3[rsp]
	mov	rcx, r13
	lea	rdx, QWORD PTR work_v_buf_words$6[rsp]
	call	AllocateBlock
	mov	r15, rax

; 390  :                 if (work_v_buf == NULL)

	test	rax, rax
	jne	SHORT $LN34@PMC_Greate

; 391  :                 {
; 392  :                     DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	rdx, QWORD PTR work_u_buf_words$5[rsp]
	mov	rcx, r14
	call	DeallocateBlock
$LN92@PMC_Greate:

; 432  : }

	mov	eax, -5
	add	rsp, 96					; 00000060H
	pop	r15
	pop	r14
	pop	r13
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
$LN34@PMC_Greate:

; 393  :                     return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 394  :                 }
; 395  : 
; 396  :                 __UNIT_TYPE nw_check_code;
; 397  :                 if ((result = AllocateNumber(w, work_bit_count, &nw_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR nw_check_code$1[rsp]
	mov	rdx, r13
	mov	rcx, rbx
	call	AllocateNumber
	mov	esi, eax
	test	eax, eax
	je	SHORT $LN35@PMC_Greate

; 398  :                 {
; 399  :                     DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	rdx, QWORD PTR work_v_buf_words$6[rsp]
	mov	rcx, r15
	call	DeallocateBlock

; 400  :                     DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	rdx, QWORD PTR work_u_buf_words$5[rsp]
	mov	rcx, r14
	call	DeallocateBlock

; 401  :                     return (result);

	mov	eax, esi

; 432  : }

	add	rsp, 96					; 00000060H
	pop	r15
	pop	r14
	pop	r13
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
$LN35@PMC_Greate:

; 402  :                 }
; 403  : 
; 404  :                 __UNIT_TYPE u_tzcnt = u->TRAILING_ZERO_BITS_COUNT;

	mov	r8, QWORD PTR [rdi+32]

; 406  :                 __UNIT_TYPE k = _MINIMUM_UNIT(u_tzcnt, v_tzcnt);

	mov	rcx, QWORD PTR [rdi+8]
	mov	rsi, QWORD PTR [rdi+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 717  :         _BitScanForward64(&pos, x);

	bsf	rax, rbp
	mov	QWORD PTR [rsp+168], r12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 405  :                 __UNIT_TYPE v_tzcnt = _TZCNT_ALT_UNIT((__UNIT_TYPE)v);

	movsxd	r12, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 202  :         return (x <= y ? x : y);

	cmp	r8, r12
	mov	rax, r12
	cmovbe	rax, r8
	mov	QWORD PTR k$1$[rsp], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 407  :                 if (u_tzcnt > 0)

	test	r8, r8
	je	SHORT $LN36@PMC_Greate

; 408  :                     RightShift_Imp(u->BLOCK, u->UNIT_WORD_COUNT, u_tzcnt, work_u_buf, FALSE);

	mov	rdx, rcx
	mov	DWORD PTR [rsp+32], 0
	mov	rcx, rsi
	mov	r9, r14
	call	RightShift_Imp
	jmp	SHORT $LN88@PMC_Greate
$LN36@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 63   :         __movsq(d, s, count);

	mov	rdi, r14
	rep movsq
$LN88@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 411  :                 work_v_buf[0] = (__UNIT_TYPE)(v >> v_tzcnt);

	mov	rcx, r12

; 414  :                 GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), (*w)->BLOCK, &w_buf_count);

	lea	rax, QWORD PTR w_buf_count$4[rsp]
	shr	rbp, cl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 187  :         return ((u + v - 1) / v);

	lea	r8, QWORD PTR [r13+63]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 411  :                 work_v_buf[0] = (__UNIT_TYPE)(v >> v_tzcnt);

	mov	QWORD PTR [r15], rbp

; 414  :                 GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), (*w)->BLOCK, &w_buf_count);

	mov	rdx, r15
	mov	r9, QWORD PTR [rbx]
	mov	rcx, r14
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 187  :         return ((u + v - 1) / v);

	shr	r8, 6
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 414  :                 GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), (*w)->BLOCK, &w_buf_count);

	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR [r9+56]
	call	GreatestCommonDivisor_Imp

; 415  :                 if ((result = CheckBlockLight(work_u_buf, work_u_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR work_u_buf_code$2[rsp]
	mov	rcx, r14
	call	CheckBlockLight
	mov	r12, QWORD PTR [rsp+168]
	test	eax, eax
	jne	$LN1@PMC_Greate

; 416  :                     return (result);
; 417  :                 if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR work_v_buf_code$3[rsp]
	mov	rcx, r15
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 418  :                     return (result);
; 419  :                 if ((result = CheckBlockLight((*w)->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR [rbx]
	mov	rdx, QWORD PTR nw_check_code$1[rsp]
	mov	rcx, QWORD PTR [rcx+56]
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 420  :                     return (result);
; 421  :                 DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	rdx, QWORD PTR work_v_buf_words$6[rsp]
	mov	rcx, r15
	call	DeallocateBlock

; 422  :                 DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	rdx, QWORD PTR work_u_buf_words$5[rsp]
	mov	rcx, r14
	call	DeallocateBlock

; 423  : 
; 424  :                 LeftShift_Imp((*w)->BLOCK, w_buf_count, k, (*w)->BLOCK, TRUE);

	mov	rax, QWORD PTR [rbx]
	mov	r8, QWORD PTR k$1$[rsp]
	mov	rdx, QWORD PTR w_buf_count$4[rsp]
	mov	DWORD PTR [rsp+32], 1
	mov	rcx, QWORD PTR [rax+56]
	mov	r9, rcx
	call	LeftShift_Imp

; 425  :                 if ((result = CheckBlockLight((*w)->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR [rbx]
	mov	rdx, QWORD PTR nw_check_code$1[rsp]
	mov	rcx, QWORD PTR [rcx+56]
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 426  :                     return (result);
; 427  :                 CommitNumber(*w);

	mov	rcx, QWORD PTR [rbx]
	call	CommitNumber
$LN11@PMC_Greate:

; 428  :             }
; 429  :         }
; 430  :     }
; 431  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Greate:

; 432  : }

	add	rsp, 96					; 00000060H
	pop	r15
	pop	r14
	pop	r13
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
PMC_GreatestCommonDivisor_X_L_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
;	COMDAT PMC_GreatestCommonDivisor_X_I_Imp
_TEXT	SEGMENT
nw_check_code$1 = 48
k$1$ = 56
w_buf_count$2 = 56
work_u_buf_code$3 = 64
work_v_buf_code$4 = 72
work_u_buf_words$5 = 144
u$ = 144
v$ = 152
w$ = 160
work_v_buf_words$6 = 168
PMC_GreatestCommonDivisor_X_I_Imp PROC			; COMDAT

; 73   : {

	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r14
	push	r15
	sub	rsp, 80					; 00000050H

; 74   :     PMC_STATUS_CODE result;
; 75   :     if (u->IS_ZERO)

	test	BYTE PTR [rcx+40], 2
	mov	rbx, r8
	mov	edi, edx
	mov	rsi, rcx
	je	SHORT $LN2@PMC_Greate

; 76   :     {
; 77   :         // u が 0 である場合
; 78   : 
; 79   :         if (v == 0)

	test	edx, edx
	jne	SHORT $LN4@PMC_Greate

; 80   :         {
; 81   :             // v が 0 である場合
; 82   : 
; 83   :             // u と v がともに 0 であり、GCD は一意に存在しないため、エラーを返す。
; 84   :             return (PMC_STATUS_ARGUMENT_ERROR);

	lea	eax, QWORD PTR [rdx-1]

; 166  : }

	add	rsp, 80					; 00000050H
	pop	r15
	pop	r14
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
$LN4@PMC_Greate:

; 85   :         }
; 86   :         else
; 87   :         {
; 88   :             // v が 0 ではない場合
; 89   : 
; 90   :             // GCD は v そのものであるため、v を計算結果として返す。
; 91   :             if ((result = From_I_Imp(v, w)) != PMC_STATUS_OK)

	mov	rdx, rbx
	mov	ecx, edi
	call	From_I_Imp
	test	eax, eax
	je	$LN8@PMC_Greate

; 166  : }

	add	rsp, 80					; 00000050H
	pop	r15
	pop	r14
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
$LN2@PMC_Greate:

; 92   :                 return (result);
; 93   :         }
; 94   :     }
; 95   :     else
; 96   :     {
; 97   :         // u が 0 ではない場合
; 98   : 
; 99   :         if (v == 0)

	test	edx, edx
	jne	SHORT $LN7@PMC_Greate

; 100  :         {
; 101  :             // v が 0 である場合
; 102  : 
; 103  :             // GCD は u そのものであるため、u を計算結果として返す。
; 104  :             if ((result = DuplicateNumber(u, w)) != PMC_STATUS_OK)

	mov	rdx, rbx
	call	DuplicateNumber
	test	eax, eax
	je	$LN8@PMC_Greate

; 166  : }

	add	rsp, 80					; 00000050H
	pop	r15
	pop	r14
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
$LN7@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 594  :         _BitScanReverse(&pos, x);

	bsr	eax, edi

; 600  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 118  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	r8, QWORD PTR work_u_buf_code$3[rsp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 600  :         return (sizeof(x) * 8 - 1 - pos);

	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 118  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	rdx, QWORD PTR work_u_buf_words$5[rsp]
	movsxd	rax, ecx
	mov	r15d, 32				; 00000020H
	sub	r15, rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 197  :         return (x >= y ? x : y);

	cmp	QWORD PTR [rsi+16], r15
	cmovae	r15, QWORD PTR [rsi+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 118  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	mov	rcx, r15
	call	AllocateBlock
	mov	rbp, rax

; 119  :             if (work_u_buf == NULL)

	test	rax, rax
	je	SHORT $LN34@PMC_Greate

; 120  :                 return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 121  : 
; 122  :             __UNIT_TYPE work_v_buf_code;
; 123  :             __UNIT_TYPE work_v_buf_words;
; 124  :             __UNIT_TYPE* work_v_buf = AllocateBlock(work_bit_count, &work_v_buf_words, &work_v_buf_code);

	lea	r8, QWORD PTR work_v_buf_code$4[rsp]
	mov	rcx, r15
	lea	rdx, QWORD PTR work_v_buf_words$6[rsp]
	call	AllocateBlock
	mov	r14, rax

; 125  :             if (work_v_buf == NULL)

	test	rax, rax
	jne	SHORT $LN11@PMC_Greate

; 126  :             {
; 127  :                 DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	rdx, QWORD PTR work_u_buf_words$5[rsp]
	mov	rcx, rbp
	call	DeallocateBlock
$LN34@PMC_Greate:

; 166  : }

	mov	eax, -5
	add	rsp, 80					; 00000050H
	pop	r15
	pop	r14
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
$LN11@PMC_Greate:

; 128  :                 return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 129  :             }
; 130  : 
; 131  :             __UNIT_TYPE nw_check_code;
; 132  :             if ((result = AllocateNumber(w, work_bit_count, &nw_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR nw_check_code$1[rsp]
	mov	rdx, r15
	mov	rcx, rbx
	call	AllocateNumber
	mov	r12d, eax
	test	eax, eax
	je	SHORT $LN12@PMC_Greate

; 133  :             {
; 134  :                 DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	rdx, QWORD PTR work_v_buf_words$6[rsp]
	mov	rcx, r14
	call	DeallocateBlock

; 135  :                 DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	rdx, QWORD PTR work_u_buf_words$5[rsp]
	mov	rcx, rbp
	call	DeallocateBlock

; 136  :                 return (result);

	mov	eax, r12d

; 166  : }

	add	rsp, 80					; 00000050H
	pop	r15
	pop	r14
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
$LN12@PMC_Greate:

; 137  :             }
; 138  : 
; 139  :             __UNIT_TYPE u_tzcnt = u->TRAILING_ZERO_BITS_COUNT;

	mov	r8, QWORD PTR [rsi+32]

; 140  :             __UNIT_TYPE v_tzcnt = _TZCNT_ALT_UNIT(v);

	mov	r12, rdi
	mov	QWORD PTR [rsp+152], r13
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 703  :         if (x == 0)

	test	edi, edi
	jne	SHORT $LN26@PMC_Greate

; 704  :             return (sizeof(x) * 8);

	lea	eax, QWORD PTR [rdi+64]
	jmp	SHORT $LN25@PMC_Greate
$LN26@PMC_Greate:

; 705  : #ifdef _M_IX86
; 706  :         _UINT32_T pos;
; 707  : #ifdef _MSC_VER
; 708  :         _BitScanForward(&pos, x);
; 709  : #elif defined(__GNUC__)
; 710  :         __asm__("bsfl %1, %0" : "=r"(pos) : "rm"(x));
; 711  : #else
; 712  : #error unknown compiler
; 713  : #endif
; 714  : #elif defined(_M_X64)
; 715  : #ifdef _MSC_VER
; 716  :         _UINT32_T pos;
; 717  :         _BitScanForward64(&pos, x);

	bsf	rax, r12
$LN25@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 141  :             __UNIT_TYPE k = _MINIMUM_UNIT(u_tzcnt, v_tzcnt);

	mov	rcx, QWORD PTR [rsi+8]
	mov	rsi, QWORD PTR [rsi+56]
	movsxd	r13, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 202  :         return (x <= y ? x : y);

	cmp	r8, r13
	mov	rdi, r13
	cmovbe	rdi, r8
	mov	QWORD PTR k$1$[rsp], rdi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 142  :             if (u_tzcnt > 0)

	test	r8, r8
	je	SHORT $LN13@PMC_Greate

; 143  :                 RightShift_Imp(u->BLOCK, u->UNIT_WORD_COUNT, u_tzcnt, work_u_buf, FALSE);

	mov	rdx, rcx
	mov	DWORD PTR [rsp+32], 0
	mov	rcx, rsi
	mov	r9, rbp
	call	RightShift_Imp
	jmp	SHORT $LN30@PMC_Greate
$LN13@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 63   :         __movsq(d, s, count);

	mov	rdi, rbp
	rep movsq
	mov	rdi, QWORD PTR k$1$[rsp]
$LN30@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 146  :             work_v_buf[0] = v >> v_tzcnt;

	mov	rcx, r13

; 149  :             GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), (*w)->BLOCK, &w_buf_count);

	lea	rax, QWORD PTR w_buf_count$2[rsp]
	shr	r12, cl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 187  :         return ((u + v - 1) / v);

	lea	r8, QWORD PTR [r15+63]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 146  :             work_v_buf[0] = v >> v_tzcnt;

	mov	QWORD PTR [r14], r12

; 149  :             GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), (*w)->BLOCK, &w_buf_count);

	mov	rdx, r14
	mov	r9, QWORD PTR [rbx]
	mov	rcx, rbp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 187  :         return ((u + v - 1) / v);

	shr	r8, 6
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 149  :             GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), (*w)->BLOCK, &w_buf_count);

	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR [r9+56]
	call	GreatestCommonDivisor_Imp

; 150  :             if ((result = CheckBlockLight(work_u_buf, work_u_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR work_u_buf_code$3[rsp]
	mov	rcx, rbp
	call	CheckBlockLight
	mov	r13, QWORD PTR [rsp+152]
	test	eax, eax
	jne	$LN1@PMC_Greate

; 151  :                 return (result);
; 152  :             if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR work_v_buf_code$4[rsp]
	mov	rcx, r14
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 153  :                 return (result);
; 154  :             if ((result = CheckBlockLight((*w)->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR [rbx]
	mov	rdx, QWORD PTR nw_check_code$1[rsp]
	mov	rcx, QWORD PTR [rcx+56]
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 155  :                 return (result);
; 156  :             DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	rdx, QWORD PTR work_v_buf_words$6[rsp]
	mov	rcx, r14
	call	DeallocateBlock

; 157  :             DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	rdx, QWORD PTR work_u_buf_words$5[rsp]
	mov	rcx, rbp
	call	DeallocateBlock

; 158  : 
; 159  :             LeftShift_Imp((*w)->BLOCK, w_buf_count, k, (*w)->BLOCK, TRUE);

	mov	rax, QWORD PTR [rbx]
	mov	r8, rdi
	mov	rdx, QWORD PTR w_buf_count$2[rsp]
	mov	DWORD PTR [rsp+32], 1
	mov	rcx, QWORD PTR [rax+56]
	mov	r9, rcx
	call	LeftShift_Imp

; 160  :             if ((result = CheckBlockLight((*w)->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR [rbx]
	mov	rdx, QWORD PTR nw_check_code$1[rsp]
	mov	rcx, QWORD PTR [rcx+56]
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 161  :                 return (result);
; 162  :             CommitNumber(*w);

	mov	rcx, QWORD PTR [rbx]
	call	CommitNumber
$LN8@PMC_Greate:

; 163  :         }
; 164  :     }
; 165  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Greate:

; 166  : }

	add	rsp, 80					; 00000050H
	pop	r15
	pop	r14
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
PMC_GreatestCommonDivisor_X_I_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
;	COMDAT GreatestCommonDivisor_Imp
_TEXT	SEGMENT
p1_buf$ = 80
p2_buf$ = 88
word_count$ = 96
w_buf$ = 104
w_buf_count$ = 112
GreatestCommonDivisor_Imp PROC				; COMDAT

; 32   : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 48					; 00000030H

; 33   :     __UNIT_TYPE* u = p1_buf;
; 34   :     __UNIT_TYPE* v = p2_buf;

	mov	r15, QWORD PTR w_buf_count$[rsp]
	mov	r14, r9
	mov	rbx, r8
	mov	rdi, rdx
	mov	rsi, rcx
	xor	ebp, ebp
	npad	5
$LL2@GreatestCo:

; 35   :     for (;;)
; 36   :     {
; 37   :         while (word_count > 0 && u[word_count - 1] == 0 && v[word_count - 1] == 0)

	test	rbx, rbx
	je	SHORT $LN29@GreatestCo
	lea	rax, QWORD PTR [rbx-1]
	mov	rcx, rsi
	lea	rax, QWORD PTR [rdi+rax*8]
	sub	rcx, rdi
$LL5@GreatestCo:
	cmp	QWORD PTR [rcx+rax], rbp
	jne	SHORT $LN6@GreatestCo
	cmp	QWORD PTR [rax], rbp
	jne	SHORT $LN6@GreatestCo

; 38   :             --word_count;

	sub	rax, 8
	sub	rbx, 1
	jne	SHORT $LL5@GreatestCo

; 39   :         if (word_count <= 0)

	jmp	SHORT $LN29@GreatestCo
$LN6@GreatestCo:
	test	rbx, rbx
	jne	SHORT $LN9@GreatestCo
$LN29@GreatestCo:

; 40   :         {
; 41   :             // このルートへの到達はあり得ないはず。
; 42   :             w_buf[0] = 0;

	mov	QWORD PTR [r14], rbp

; 43   :             *w_buf_count = 1;

	mov	QWORD PTR [r15], 1
$LN9@GreatestCo:

; 44   :         }
; 45   :         int c = Compare_Imp(u, v, word_count);

	mov	r8, rbx
	mov	rdx, rdi
	mov	rcx, rsi
	call	Compare_Imp

; 46   :         if (c == 0)

	test	eax, eax
	je	SHORT $LN19@GreatestCo

; 47   :         {
; 48   :             // u == v の場合
; 49   : 
; 50   :             // GCD を u として復帰
; 51   :             _COPY_MEMORY_UNIT(w_buf, u, word_count);
; 52   :             *w_buf_count = word_count;
; 53   :             return;
; 54   :         }
; 55   :         if (c < 0)

	jns	SHORT $LN11@GreatestCo

; 56   :         {
; 57   :             __UNIT_TYPE* tt = u;

	mov	rax, rsi

; 58   :             u = v;

	mov	rsi, rdi

; 59   :             v = tt;

	mov	rdi, rax
$LN11@GreatestCo:

; 60   :         }
; 61   :         // この時点で u > v かつ u と v はともに奇数である
; 62   : 
; 63   :         Subtruct_Imp(u, word_count, v, word_count, u, word_count);

	mov	QWORD PTR [rsp+40], rbx
	mov	r9, rbx
	mov	r8, rdi
	mov	QWORD PTR [rsp+32], rsi
	mov	rdx, rbx
	mov	rcx, rsi
	call	Subtruct_Imp

; 64   : 
; 65   :         // この時点で u は偶数
; 66   : 
; 67   :         while ((*u & 1) == 0)

	test	BYTE PTR [rsi], 1
	jne	SHORT $LL2@GreatestCo
	npad	10
$LL7@GreatestCo:

; 68   :             RightShift_Imp(u, word_count, 1, u, TRUE);

	mov	r9, rsi
	mov	DWORD PTR [rsp+32], 1
	mov	r8d, 1
	mov	rdx, rbx
	mov	rcx, rsi
	call	RightShift_Imp
	test	BYTE PTR [rsi], 1
	je	SHORT $LL7@GreatestCo
	jmp	$LL2@GreatestCo
$LN19@GreatestCo:

; 70   : }

	mov	rbp, QWORD PTR [rsp+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 63   :         __movsq(d, s, count);

	mov	rcx, rbx
	mov	rdi, r14
	rep movsq
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 70   : }

	mov	rsi, QWORD PTR [rsp+96]
	mov	QWORD PTR [r15], rbx
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	r15
	pop	r14
	pop	rdi
	ret	0
GreatestCommonDivisor_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _TZCNT_ALT_UNIT
_TEXT	SEGMENT
x$ = 8
_TZCNT_ALT_UNIT PROC					; COMDAT

; 703  :         if (x == 0)

	test	rcx, rcx
	jne	SHORT $LN2@TZCNT_ALT_

; 704  :             return (sizeof(x) * 8);

	lea	eax, QWORD PTR [rcx+64]

; 718  : #elif defined(__GNUC__)
; 719  :         _UINT64_T pos;
; 720  :         __asm__("bsfq %1, %0" : "=r"(pos) : "rm"(x));
; 721  : #else
; 722  : #error unknown compiler
; 723  : #endif
; 724  : #else
; 725  : #error unknown platform
; 726  : #endif
; 727  :         return (pos);
; 728  :     }

	ret	0
$LN2@TZCNT_ALT_:

; 705  : #ifdef _M_IX86
; 706  :         _UINT32_T pos;
; 707  : #ifdef _MSC_VER
; 708  :         _BitScanForward(&pos, x);
; 709  : #elif defined(__GNUC__)
; 710  :         __asm__("bsfl %1, %0" : "=r"(pos) : "rm"(x));
; 711  : #else
; 712  : #error unknown compiler
; 713  : #endif
; 714  : #elif defined(_M_X64)
; 715  : #ifdef _MSC_VER
; 716  :         _UINT32_T pos;
; 717  :         _BitScanForward64(&pos, x);

	bsf	rax, rcx

; 718  : #elif defined(__GNUC__)
; 719  :         _UINT64_T pos;
; 720  :         __asm__("bsfq %1, %0" : "=r"(pos) : "rm"(x));
; 721  : #else
; 722  : #error unknown compiler
; 723  : #endif
; 724  : #else
; 725  : #error unknown platform
; 726  : #endif
; 727  :         return (pos);
; 728  :     }

	ret	0
_TZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _LZCNT_ALT_UNIT
_TEXT	SEGMENT
x$ = 8
_LZCNT_ALT_UNIT PROC					; COMDAT

; 623  :         if (x == 0)

	test	rcx, rcx
	jne	SHORT $LN2@LZCNT_ALT_

; 624  :             return (sizeof(x) * 8);

	mov	eax, 64					; 00000040H

; 648  :     }

	ret	0
$LN2@LZCNT_ALT_:

; 625  : #ifdef _M_IX86
; 626  :         _UINT32_T pos;
; 627  : #ifdef _MSC_VER
; 628  :         _BitScanReverse(&pos, x);
; 629  : #elif defined(__GNUC__)
; 630  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 631  : #else
; 632  : #error unknown compiler
; 633  : #endif
; 634  : #elif defined(_M_X64)
; 635  : #ifdef _MSC_VER
; 636  :         _UINT32_T pos;
; 637  :         _BitScanReverse64(&pos, x);

	bsr	rcx, rcx

; 638  : #elif defined(__GNUC__)
; 639  :         _UINT64_T pos;
; 640  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 641  : #else
; 642  : #error unknown compiler
; 643  : #endif
; 644  : #else
; 645  : #error unknown platform
; 646  : #endif
; 647  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 63					; 0000003fH
	sub	eax, ecx

; 648  :     }

	ret	0
_LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _LZCNT_ALT_32
_TEXT	SEGMENT
x$ = 8
_LZCNT_ALT_32 PROC					; COMDAT

; 590  :         if (x == 0)

	test	ecx, ecx
	jne	SHORT $LN2@LZCNT_ALT_

; 591  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 601  :     }

	ret	0
$LN2@LZCNT_ALT_:

; 592  :         _UINT32_T pos;
; 593  : #ifdef _MSC_VER
; 594  :         _BitScanReverse(&pos, x);

	bsr	ecx, ecx

; 595  : #elif defined(__GNUC__)
; 596  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 597  : #else
; 598  : #error unknown compiler
; 599  : #endif
; 600  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31
	sub	eax, ecx

; 601  :     }

	ret	0
_LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _MINIMUM_UNIT
_TEXT	SEGMENT
x$ = 8
y$ = 16
_MINIMUM_UNIT PROC					; COMDAT

; 202  :         return (x <= y ? x : y);

	cmp	rcx, rdx
	cmovbe	rdx, rcx
	mov	rax, rdx

; 203  :     }

	ret	0
_MINIMUM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _MAXIMUM_UNIT
_TEXT	SEGMENT
x$ = 8
y$ = 16
_MAXIMUM_UNIT PROC					; COMDAT

; 197  :         return (x >= y ? x : y);

	cmp	rcx, rdx
	cmovae	rdx, rcx
	mov	rax, rdx

; 198  :     }

	ret	0
_MAXIMUM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _DIVIDE_CEILING_UNIT
_TEXT	SEGMENT
u$ = 8
v$ = 16
_DIVIDE_CEILING_UNIT PROC				; COMDAT

; 187  :         return ((u + v - 1) / v);

	lea	rax, QWORD PTR [rdx-1]
	mov	r8, rdx
	add	rax, rcx
	xor	edx, edx
	div	r8

; 188  :     }

	ret	0
_DIVIDE_CEILING_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _FROMDWORDTOWORD
_TEXT	SEGMENT
value$ = 8
result_high$ = 16
_FROMDWORDTOWORD PROC					; COMDAT

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	rax, rcx
	shr	rax, 32					; 00000020H
	mov	DWORD PTR [rdx], eax

; 177  :         return ((_UINT32_T)value);

	mov	eax, ecx

; 178  :     }

	ret	0
_FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _COPY_MEMORY_UNIT
_TEXT	SEGMENT
d$ = 8
s$ = 16
count$ = 24
_COPY_MEMORY_UNIT PROC					; COMDAT

; 59   :     {

	mov	QWORD PTR [rsp+8], rsi
	mov	QWORD PTR [rsp+16], rdi

; 60   : #ifdef _M_IX86
; 61   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);
; 62   : #elif defined(_M_X64)
; 63   :         __movsq(d, s, count);

	mov	rdi, rcx
	mov	rsi, rdx
	mov	rcx, r8
	rep movsq

; 64   : #else
; 65   : #error unknown platform
; 66   : #endif
; 67   :     }

	mov	rsi, QWORD PTR [rsp+8]
	mov	rdi, QWORD PTR [rsp+16]
	ret	0
_COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
;	COMDAT PMC_GreatestCommonDivisor_X_X
_TEXT	SEGMENT
work_v_buf_words$1 = 48
nw_check_code$2 = 56
v_tzcnt$1$ = 64
w_buf_count$3 = 64
work_u_buf_code$4 = 72
work_v_buf_code$5 = 80
k$1$ = 88
nw$ = 160
u$ = 160
v$ = 168
w$ = 176
work_u_buf_words$6 = 184
PMC_GreatestCommonDivisor_X_X PROC			; COMDAT

; 481  : {

$LN40:
	mov	QWORD PTR [rsp+16], rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	mov	rbp, rsp
	sub	rsp, 96					; 00000060H
	mov	r12, r8
	mov	rbx, rdx
	mov	rdi, rcx

; 482  :     if (u == NULL)

	test	rcx, rcx
	je	$LN37@PMC_Greate

; 483  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 484  :     if (v == NULL)

	test	rdx, rdx
	je	$LN37@PMC_Greate

; 485  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 486  :     if (w == NULL)

	test	r8, r8
	je	$LN37@PMC_Greate

; 487  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 488  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 489  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 490  :     PMC_STATUS_CODE result;
; 491  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	$LN1@PMC_Greate

; 492  :         return (result);
; 493  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	rcx, rbx
	call	CheckNumber
	test	eax, eax
	jne	$LN1@PMC_Greate

; 494  :         return (result);
; 495  :     NUMBER_HEADER* nw;
; 496  :     if (nu->IS_ZERO)

	mov	eax, DWORD PTR [rbx+40]
	and	eax, 2
	test	BYTE PTR [rdi+40], 2
	je	SHORT $LN7@PMC_Greate

; 497  :     {
; 498  :         // u が 0 である場合
; 499  : 
; 500  :         if (nv->IS_ZERO)

	test	eax, eax
	jne	$LN37@PMC_Greate

; 506  :         }
; 507  :         else
; 508  :         {
; 509  :             // v が 0 ではない場合
; 510  : 
; 511  :             // GCD は v そのものであるため、v を計算結果として返す。
; 512  :             if ((result = DuplicateNumber(nv, &nw)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR nw$[rbp-96]
	mov	rcx, rbx
	call	DuplicateNumber
	test	eax, eax
	je	$LN14@PMC_Greate

; 513  :                 return (result);

	jmp	$LN1@PMC_Greate
$LN7@PMC_Greate:

; 514  :             *w = (PMC_HANDLE_UINT)nw;
; 515  :         }
; 516  :     }
; 517  :     else
; 518  :     {
; 519  :         // u が 0 ではない場合
; 520  : 
; 521  :         if (nv->IS_ZERO)

	test	eax, eax
	je	SHORT $LN12@PMC_Greate

; 522  :         {
; 523  :             // v が 0 である場合
; 524  : 
; 525  :             // GCD は u そのものであるため、u を計算結果として返す。
; 526  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR nw$[rbp-96]
	mov	rcx, rdi
	call	DuplicateNumber
	test	eax, eax
	jne	$LN1@PMC_Greate

; 589  :             *w = (PMC_HANDLE_UINT)nw;
; 590  :         }
; 591  :     }
; 592  : #ifdef _DEBUG
; 593  :     if ((result = CheckNumber((NUMBER_HEADER*)*w)) != PMC_STATUS_OK)
; 594  :         return (result);
; 595  : #endif
; 596  :     return (PMC_STATUS_OK);

	mov	rax, QWORD PTR nw$[rbp-96]
	mov	QWORD PTR [r12], rax
	xor	eax, eax
	jmp	$LN1@PMC_Greate
$LN12@PMC_Greate:

; 527  :                 return (result);
; 528  :             *w = (PMC_HANDLE_UINT)nw;
; 529  :         }
; 530  :         else
; 531  :         {
; 532  :             // u と v がともに 0 ではない場合
; 533  : 
; 534  :             // u と v の GCD を計算する
; 535  :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 536  :             __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	r13, QWORD PTR [rbx+16]

; 541  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	r8, QWORD PTR work_u_buf_code$4[rbp-96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 197  :         return (x >= y ? x : y);

	cmp	QWORD PTR [rdi+16], r13
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 541  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	lea	rdx, QWORD PTR work_u_buf_words$6[rbp-96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 197  :         return (x >= y ? x : y);

	cmovae	r13, QWORD PTR [rdi+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 541  :             __UNIT_TYPE* work_u_buf = AllocateBlock(work_bit_count, &work_u_buf_words, &work_u_buf_code);

	mov	rcx, r13
	call	AllocateBlock
	mov	r15, rax

; 542  :             if (work_u_buf == NULL)

	test	rax, rax
	je	SHORT $LN38@PMC_Greate

; 543  :                 return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 544  : 
; 545  :             __UNIT_TYPE work_v_buf_code;
; 546  :             __UNIT_TYPE work_v_buf_words;
; 547  :             __UNIT_TYPE* work_v_buf = AllocateBlock(work_bit_count, &work_v_buf_words, &work_v_buf_code);

	lea	r8, QWORD PTR work_v_buf_code$5[rbp-96]
	mov	rcx, r13
	lea	rdx, QWORD PTR work_v_buf_words$1[rbp-96]
	call	AllocateBlock
	mov	r14, rax

; 548  :             if (work_v_buf == NULL)

	test	rax, rax
	jne	SHORT $LN16@PMC_Greate

; 549  :             {
; 550  :                 DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	rdx, QWORD PTR work_u_buf_words$6[rbp-96]
	mov	rcx, r15
	call	DeallocateBlock
$LN38@PMC_Greate:

; 597  : }

	mov	eax, -5
	jmp	$LN1@PMC_Greate
$LN16@PMC_Greate:

; 551  :                 return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 552  :             }
; 553  : 
; 554  :             __UNIT_TYPE nw_check_code;
; 555  :             if ((result = AllocateNumber(&nw, work_bit_count, &nw_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR nw_check_code$2[rbp-96]
	mov	rdx, r13
	lea	rcx, QWORD PTR nw$[rbp-96]
	call	AllocateNumber
	mov	esi, eax
	test	eax, eax
	je	SHORT $LN17@PMC_Greate

; 556  :             {
; 557  :                 DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	rdx, QWORD PTR work_v_buf_words$1[rbp-96]
	mov	rcx, r14
	call	DeallocateBlock

; 558  :                 DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	rdx, QWORD PTR work_u_buf_words$6[rbp-96]
	mov	rcx, r15
	call	DeallocateBlock

; 559  :                 return (result);

	mov	eax, esi
	jmp	$LN1@PMC_Greate
$LN17@PMC_Greate:

; 560  :             }
; 561  : 
; 562  :             __UNIT_TYPE u_tzcnt = nu->TRAILING_ZERO_BITS_COUNT;

	mov	r8, QWORD PTR [rdi+32]

; 563  :             __UNIT_TYPE v_tzcnt = nv->TRAILING_ZERO_BITS_COUNT;

	mov	rax, QWORD PTR [rbx+32]

; 564  :             __UNIT_TYPE k = _MINIMUM_UNIT(u_tzcnt, v_tzcnt);

	mov	rsi, QWORD PTR [rdi+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 202  :         return (x <= y ? x : y);

	cmp	r8, rax
	mov	rcx, rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 563  :             __UNIT_TYPE v_tzcnt = nv->TRAILING_ZERO_BITS_COUNT;

	mov	QWORD PTR v_tzcnt$1$[rbp-96], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 202  :         return (x <= y ? x : y);

	cmovbe	rcx, r8
	mov	QWORD PTR k$1$[rbp-96], rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 564  :             __UNIT_TYPE k = _MINIMUM_UNIT(u_tzcnt, v_tzcnt);

	mov	rcx, QWORD PTR [rdi+8]

; 565  :             if (u_tzcnt > 0)

	test	r8, r8
	je	SHORT $LN18@PMC_Greate

; 566  :                 RightShift_Imp(nu->BLOCK, nu->UNIT_WORD_COUNT, u_tzcnt, work_u_buf, FALSE);

	mov	rdx, rcx
	mov	DWORD PTR [rsp+32], 0
	mov	rcx, rsi
	mov	r9, r15
	call	RightShift_Imp
	mov	rax, QWORD PTR v_tzcnt$1$[rbp-96]
	jmp	SHORT $LN31@PMC_Greate
$LN18@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 63   :         __movsq(d, s, count);

	mov	rdi, r15
	rep movsq
$LN31@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 569  :             if (v_tzcnt > 0)

	mov	rcx, QWORD PTR [rbx+8]
	mov	rsi, QWORD PTR [rbx+56]
	test	rax, rax
	je	SHORT $LN20@PMC_Greate

; 570  :                 RightShift_Imp(nv->BLOCK, nv->UNIT_WORD_COUNT, v_tzcnt, work_v_buf, FALSE);

	mov	rdx, rcx
	mov	DWORD PTR [rsp+32], 0
	mov	rcx, rsi
	mov	r9, r14
	mov	r8, rax
	call	RightShift_Imp
	jmp	SHORT $LN33@PMC_Greate
$LN20@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 63   :         __movsq(d, s, count);

	mov	rdi, r14
	rep movsq
$LN33@PMC_Greate:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 575  :             GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), nw->BLOCK, &w_buf_count);

	mov	r9, QWORD PTR nw$[rbp-96]
	lea	rax, QWORD PTR w_buf_count$3[rbp-96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 187  :         return ((u + v - 1) / v);

	lea	r8, QWORD PTR [r13+63]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 575  :             GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), nw->BLOCK, &w_buf_count);

	mov	QWORD PTR [rsp+32], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 187  :         return ((u + v - 1) / v);

	shr	r8, 6
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c

; 575  :             GreatestCommonDivisor_Imp(work_u_buf, work_v_buf, _DIVIDE_CEILING_UNIT(work_bit_count, __UNIT_TYPE_BIT_COUNT), nw->BLOCK, &w_buf_count);

	mov	rdx, r14
	mov	rcx, r15
	mov	r9, QWORD PTR [r9+56]
	call	GreatestCommonDivisor_Imp

; 576  :             if ((result = CheckBlockLight(work_u_buf, work_u_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR work_u_buf_code$4[rbp-96]
	mov	rcx, r15
	call	CheckBlockLight
	test	eax, eax
	jne	$LN1@PMC_Greate

; 577  :                 return (result);
; 578  :             if ((result = CheckBlockLight(work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR work_v_buf_code$5[rbp-96]
	mov	rcx, r14
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 579  :                 return (result);
; 580  :             if ((result = CheckBlockLight(nw->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nw$[rbp-96]
	mov	rdx, QWORD PTR nw_check_code$2[rbp-96]
	mov	rcx, QWORD PTR [rcx+56]
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 581  :                 return (result);
; 582  :             DeallocateBlock(work_v_buf, work_v_buf_words);

	mov	rdx, QWORD PTR work_v_buf_words$1[rbp-96]
	mov	rcx, r14
	call	DeallocateBlock

; 583  :             DeallocateBlock(work_u_buf, work_u_buf_words);

	mov	rdx, QWORD PTR work_u_buf_words$6[rbp-96]
	mov	rcx, r15
	call	DeallocateBlock

; 584  : 
; 585  :             LeftShift_Imp(nw->BLOCK, w_buf_count, k, nw->BLOCK, TRUE);

	mov	rax, QWORD PTR nw$[rbp-96]
	mov	r8, QWORD PTR k$1$[rbp-96]
	mov	rdx, QWORD PTR w_buf_count$3[rbp-96]
	mov	DWORD PTR [rsp+32], 1
	mov	rcx, QWORD PTR [rax+56]
	mov	r9, rcx
	call	LeftShift_Imp

; 586  :             if ((result = CheckBlockLight(nw->BLOCK, nw_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nw$[rbp-96]
	mov	rdx, QWORD PTR nw_check_code$2[rbp-96]
	mov	rcx, QWORD PTR [rcx+56]
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_Greate

; 587  :                 return (result);
; 588  :             CommitNumber(nw);

	mov	rcx, QWORD PTR nw$[rbp-96]
	call	CommitNumber
$LN14@PMC_Greate:

; 589  :             *w = (PMC_HANDLE_UINT)nw;
; 590  :         }
; 591  :     }
; 592  : #ifdef _DEBUG
; 593  :     if ((result = CheckNumber((NUMBER_HEADER*)*w)) != PMC_STATUS_OK)
; 594  :         return (result);
; 595  : #endif
; 596  :     return (PMC_STATUS_OK);

	mov	rax, QWORD PTR nw$[rbp-96]
	mov	QWORD PTR [r12], rax
	xor	eax, eax
	jmp	SHORT $LN1@PMC_Greate
$LN37@PMC_Greate:

; 501  :         {
; 502  :             // v が 0 である場合
; 503  : 
; 504  :             // u と v がともに 0 であり、GCD は一意に存在しないため、エラーを返す。
; 505  :             return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN1@PMC_Greate:

; 597  : }

	mov	rbx, QWORD PTR [rsp+168]
	add	rsp, 96					; 00000060H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
PMC_GreatestCommonDivisor_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
;	COMDAT PMC_GreatestCommonDivisor_X_L
_TEXT	SEGMENT
u$ = 48
v$ = 56
w$ = 64
PMC_GreatestCommonDivisor_X_L PROC			; COMDAT

; 458  : {

$LN10:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, r8
	mov	rsi, rdx
	mov	rbx, rcx

; 459  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(v) * 8)
; 460  :     {
; 461  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 462  :         return (PMC_STATUS_INTERNAL_ERROR);
; 463  :     }
; 464  :     if (u == NULL)

	test	rcx, rcx
	je	SHORT $LN8@PMC_Greate

; 465  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 466  :     if (w == NULL)

	test	r8, r8
	je	SHORT $LN8@PMC_Greate

; 468  :     PMC_STATUS_CODE result;
; 469  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN6@PMC_Greate

; 470  :         return (result);
; 471  :     if ((result = PMC_GreatestCommonDivisor_X_L_Imp((NUMBER_HEADER*)u, v, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	r8, rdi
	mov	rdx, rsi
	mov	rcx, rbx

; 472  :         return (result);
; 473  : #ifdef _DEBUG
; 474  :     if ((result = CheckNumber((NUMBER_HEADER*)*w)) != PMC_STATUS_OK)
; 475  :         return (result);
; 476  : #endif
; 477  :     return (PMC_STATUS_OK);
; 478  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi

; 470  :         return (result);
; 471  :     if ((result = PMC_GreatestCommonDivisor_X_L_Imp((NUMBER_HEADER*)u, v, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	jmp	PMC_GreatestCommonDivisor_X_L_Imp
$LN8@PMC_Greate:

; 467  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN6@PMC_Greate:

; 472  :         return (result);
; 473  : #ifdef _DEBUG
; 474  :     if ((result = CheckNumber((NUMBER_HEADER*)*w)) != PMC_STATUS_OK)
; 475  :         return (result);
; 476  : #endif
; 477  :     return (PMC_STATUS_OK);
; 478  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_GreatestCommonDivisor_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
;	COMDAT PMC_GreatestCommonDivisor_X_I
_TEXT	SEGMENT
u$ = 48
v$ = 56
w$ = 64
PMC_GreatestCommonDivisor_X_I PROC			; COMDAT

; 192  : {

$LN10:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, r8
	mov	esi, edx
	mov	rbx, rcx

; 193  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)
; 194  :     {
; 195  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 196  :         return (PMC_STATUS_INTERNAL_ERROR);
; 197  :     }
; 198  :     if (u == NULL)

	test	rcx, rcx
	je	SHORT $LN8@PMC_Greate

; 199  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 200  :     if (w == NULL)

	test	r8, r8
	je	SHORT $LN8@PMC_Greate

; 202  :     PMC_STATUS_CODE result;
; 203  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN6@PMC_Greate

; 204  :         return (result);
; 205  :     if ((result = PMC_GreatestCommonDivisor_X_I_Imp((NUMBER_HEADER*)u, v, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	r8, rdi
	mov	edx, esi
	mov	rcx, rbx

; 206  :         return (result);
; 207  : #ifdef _DEBUG
; 208  :     if ((result = CheckNumber((NUMBER_HEADER*)*w)) != PMC_STATUS_OK)
; 209  :         return (result);
; 210  : #endif
; 211  :     return (PMC_STATUS_OK);
; 212  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi

; 204  :         return (result);
; 205  :     if ((result = PMC_GreatestCommonDivisor_X_I_Imp((NUMBER_HEADER*)u, v, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	jmp	PMC_GreatestCommonDivisor_X_I_Imp
$LN8@PMC_Greate:

; 201  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN6@PMC_Greate:

; 206  :         return (result);
; 207  : #ifdef _DEBUG
; 208  :     if ((result = CheckNumber((NUMBER_HEADER*)*w)) != PMC_STATUS_OK)
; 209  :         return (result);
; 210  : #endif
; 211  :     return (PMC_STATUS_OK);
; 212  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_GreatestCommonDivisor_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
;	COMDAT PMC_GreatestCommonDivisor_L_X
_TEXT	SEGMENT
u$ = 48
v$ = 56
w$ = 64
PMC_GreatestCommonDivisor_L_X PROC			; COMDAT

; 435  : {

$LN10:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, r8
	mov	rbx, rdx
	mov	rsi, rcx

; 436  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(u) * 8)
; 437  :     {
; 438  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 439  :         return (PMC_STATUS_INTERNAL_ERROR);
; 440  :     }
; 441  :     if (v == NULL)

	test	rdx, rdx
	je	SHORT $LN8@PMC_Greate

; 442  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 443  :     if (w == NULL)

	test	r8, r8
	je	SHORT $LN8@PMC_Greate

; 445  :     PMC_STATUS_CODE result;
; 446  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	mov	rcx, rdx
	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN6@PMC_Greate

; 447  :         return (result);
; 448  :     if ((result = PMC_GreatestCommonDivisor_X_L_Imp((NUMBER_HEADER*)v, u, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	r8, rdi
	mov	rdx, rsi
	mov	rcx, rbx

; 449  :         return (result);
; 450  : #ifdef _DEBUG
; 451  :     if ((result = CheckNumber((NUMBER_HEADER*)*w)) != PMC_STATUS_OK)
; 452  :         return (result);
; 453  : #endif
; 454  :     return (PMC_STATUS_OK);
; 455  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi

; 447  :         return (result);
; 448  :     if ((result = PMC_GreatestCommonDivisor_X_L_Imp((NUMBER_HEADER*)v, u, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	jmp	PMC_GreatestCommonDivisor_X_L_Imp
$LN8@PMC_Greate:

; 444  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN6@PMC_Greate:

; 449  :         return (result);
; 450  : #ifdef _DEBUG
; 451  :     if ((result = CheckNumber((NUMBER_HEADER*)*w)) != PMC_STATUS_OK)
; 452  :         return (result);
; 453  : #endif
; 454  :     return (PMC_STATUS_OK);
; 455  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_GreatestCommonDivisor_L_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
;	COMDAT PMC_GreatestCommonDivisor_I_X
_TEXT	SEGMENT
u$ = 48
v$ = 56
w$ = 64
PMC_GreatestCommonDivisor_I_X PROC			; COMDAT

; 169  : {

$LN10:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, r8
	mov	rbx, rdx
	mov	esi, ecx

; 170  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(u) * 8)
; 171  :     {
; 172  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 173  :         return (PMC_STATUS_INTERNAL_ERROR);
; 174  :     }
; 175  :     if (v == NULL)

	test	rdx, rdx
	je	SHORT $LN8@PMC_Greate

; 176  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 177  :     if (w == NULL)

	test	r8, r8
	je	SHORT $LN8@PMC_Greate

; 179  :     PMC_STATUS_CODE result;
; 180  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	mov	rcx, rdx
	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN6@PMC_Greate

; 181  :         return (result);
; 182  :     if ((result = PMC_GreatestCommonDivisor_X_I_Imp((NUMBER_HEADER*)v, u, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	r8, rdi
	mov	edx, esi
	mov	rcx, rbx

; 183  :         return (result);
; 184  : #ifdef _DEBUG
; 185  :     if ((result = CheckNumber((NUMBER_HEADER*)*w)) != PMC_STATUS_OK)
; 186  :         return (result);
; 187  : #endif
; 188  :     return (PMC_STATUS_OK);
; 189  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi

; 181  :         return (result);
; 182  :     if ((result = PMC_GreatestCommonDivisor_X_I_Imp((NUMBER_HEADER*)v, u, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	jmp	PMC_GreatestCommonDivisor_X_I_Imp
$LN8@PMC_Greate:

; 178  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN6@PMC_Greate:

; 183  :         return (result);
; 184  : #ifdef _DEBUG
; 185  :     if ((result = CheckNumber((NUMBER_HEADER*)*w)) != PMC_STATUS_OK)
; 186  :         return (result);
; 187  : #endif
; 188  :     return (PMC_STATUS_OK);
; 189  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_GreatestCommonDivisor_I_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_greatestcommondivisor.c
;	COMDAT Initialize_GreatestCommonDivisor
_TEXT	SEGMENT
feature$ = 8
Initialize_GreatestCommonDivisor PROC			; COMDAT

; 601  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 602  : }

	ret	0
Initialize_GreatestCommonDivisor ENDP
_TEXT	ENDS
END
