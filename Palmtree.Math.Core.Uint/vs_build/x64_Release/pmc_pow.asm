; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	Initialize_Pow
PUBLIC	PMC_Pow_X_I
EXTRN	AllocateBlock:PROC
EXTRN	DeallocateBlock:PROC
EXTRN	CheckBlockLight:PROC
EXTRN	AllocateNumber:PROC
EXTRN	CommitNumber:PROC
EXTRN	CheckNumber:PROC
EXTRN	DuplicateNumber:PROC
EXTRN	Multiply_X_X_Imp:PROC
EXTRN	number_zero:BYTE
EXTRN	number_one:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Pow_X_I DD imagerel $LN10
	DD	imagerel $LN10+91
	DD	imagerel $unwind$PMC_Pow_X_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_COPY_MEMORY_UNIT DD imagerel _COPY_MEMORY_UNIT
	DD	imagerel _COPY_MEMORY_UNIT+33
	DD	imagerel $unwind$_COPY_MEMORY_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ZERO_MEMORY_UNIT DD imagerel _ZERO_MEMORY_UNIT
	DD	imagerel _ZERO_MEMORY_UNIT+22
	DD	imagerel $unwind$_ZERO_MEMORY_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Pow_Imp DD imagerel Pow_Imp
	DD	imagerel Pow_Imp+96
	DD	imagerel $unwind$Pow_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$Pow_Imp DD imagerel Pow_Imp+96
	DD	imagerel Pow_Imp+261
	DD	imagerel $chain$0$Pow_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$Pow_Imp DD imagerel Pow_Imp+261
	DD	imagerel Pow_Imp+293
	DD	imagerel $chain$1$Pow_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Pow_X_I_Imp DD imagerel PMC_Pow_X_I_Imp
	DD	imagerel PMC_Pow_X_I_Imp+317
	DD	imagerel $unwind$PMC_Pow_X_I_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PMC_Pow_X_I_Imp DD imagerel PMC_Pow_X_I_Imp+317
	DD	imagerel PMC_Pow_X_I_Imp+593
	DD	imagerel $chain$1$PMC_Pow_X_I_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PMC_Pow_X_I_Imp DD imagerel PMC_Pow_X_I_Imp+593
	DD	imagerel PMC_Pow_X_I_Imp+717
	DD	imagerel $chain$2$PMC_Pow_X_I_Imp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PMC_Pow_X_I_Imp DD 021H
	DD	imagerel PMC_Pow_X_I_Imp
	DD	imagerel PMC_Pow_X_I_Imp+317
	DD	imagerel $unwind$PMC_Pow_X_I_Imp
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PMC_Pow_X_I_Imp DD 041021H
	DD	0ef410H
	DD	0175408H
	DD	imagerel PMC_Pow_X_I_Imp
	DD	imagerel PMC_Pow_X_I_Imp+317
	DD	imagerel $unwind$PMC_Pow_X_I_Imp
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Pow_X_I_Imp DD 071201H
	DD	0e00ee212H
	DD	0c00ad00cH
	DD	060077008H
	DD	03006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$Pow_Imp DD 021H
	DD	imagerel Pow_Imp
	DD	imagerel Pow_Imp+96
	DD	imagerel $unwind$Pow_Imp
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$Pow_Imp DD 020521H
	DD	0fc405H
	DD	imagerel Pow_Imp
	DD	imagerel Pow_Imp+96
	DD	imagerel $unwind$Pow_Imp
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Pow_Imp DD 081801H
	DD	0f0145218H
	DD	0d010e012H
	DD	0600d700eH
	DD	0300b500cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ZERO_MEMORY_UNIT DD 020501H
	DD	017405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_COPY_MEMORY_UNIT DD 040a01H
	DD	02740aH
	DD	016405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Pow_X_I DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_pow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_pow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_pow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_pow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_pow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_pow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_pow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_pow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_pow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_pow.c
;	COMDAT PMC_Pow_X_I_Imp
_TEXT	SEGMENT
work2_buf_words$1 = 48
v_buf$1$ = 56
r_buf$1$ = 64
work1_buf_code$2 = 72
work1_buf$1$ = 80
work2_buf_code$3 = 88
work2_buf$1$ = 96
r_check_code$4 = 104
tv426 = 176
v$ = 176
e$ = 184
r$ = 192
work1_buf_words$5 = 200
PMC_Pow_X_I_Imp PROC					; COMDAT

; 77   : {

	mov	QWORD PTR [rsp+24], r8
	push	rbx
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	sub	rsp, 120				; 00000078H

; 78   :     PMC_STATUS_CODE result;
; 79   :     if (v->IS_ZERO)

	mov	eax, DWORD PTR [rcx]
	mov	r12, r8
	mov	r13d, edx
	mov	rsi, rcx
	test	al, 1
	je	SHORT $LN2@PMC_Pow_X_

; 80   :     {
; 81   :         // v が 0 である場合
; 82   : 
; 83   :         if (e == 0)

	test	edx, edx
	jne	SHORT $LN4@PMC_Pow_X_

; 84   :         {
; 85   :             // e が 0 である場合
; 86   : 
; 87   :             // 0 の 0 乗となるので、エラーを返す
; 88   :             return (PMC_STATUS_ARGUMENT_ERROR);

	lea	eax, QWORD PTR [rdx-1]

; 173  : }

	add	rsp, 120				; 00000078H
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
$LN4@PMC_Pow_X_:

; 89   :         }
; 90   :         else
; 91   :         {
; 92   :             // e が 0 ではない場合
; 93   : 
; 94   :             *r = &number_zero;

	lea	rax, OFFSET FLAT:number_zero

; 95   :         }
; 96   :     }

	jmp	$LN45@PMC_Pow_X_
$LN2@PMC_Pow_X_:

; 97   :     else if (v->IS_ONE)

	test	al, 2
	jne	$LN44@PMC_Pow_X_

; 98   :     {
; 99   :         // v が 1 である場合
; 100  :         
; 101  :         // e が何であってもべき乗は 1 となる。
; 102  :         *r = &number_one;
; 103  :     }
; 104  :     else
; 105  :     {
; 106  :         // v が 2 以上である場合
; 107  : 
; 108  :         if (e == 0)

	test	edx, edx
	je	$LN44@PMC_Pow_X_

; 114  :         }
; 115  :         else if (e == 1)

	cmp	r13d, 1
	jne	SHORT $LN10@PMC_Pow_X_

; 116  :         {
; 117  :             // e が 1 である場合
; 118  : 
; 119  :             // 計算結果の v を返す
; 120  :             if ((result = DuplicateNumber(v, r)) != PMC_STATUS_OK)

	mov	rdx, r12
	call	DuplicateNumber
	test	eax, eax
	je	$LN11@PMC_Pow_X_

; 173  : }

	add	rsp, 120				; 00000078H
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
$LN10@PMC_Pow_X_:

; 121  :                 return (result);
; 122  :         }
; 123  :         else
; 124  :         {
; 125  :             // v と e がともに 2 以上である場合
; 126  : 
; 127  :             // v の e 乗を計算する
; 128  :             __UNIT_TYPE v_bit_count = v->UNIT_BIT_COUNT;

	mov	rcx, QWORD PTR [rcx+24]

; 129  : 
; 130  :             // べき乗の計算結果のビット長が論理的な限界を超えると思われる場合、エラーを返す
; 131  :             if (v_bit_count > ((__UNIT_TYPE)-1 - __UNIT_TYPE_BIT_COUNT) / e)

	xor	edx, edx
	mov	rax, -65				; ffffffffffffffbfH
	mov	rdi, r13
	div	r13
	cmp	rcx, rax
	jbe	SHORT $LN13@PMC_Pow_X_

; 132  :                 return (PMC_STATUS_OVERFLOW);

	mov	eax, -2

; 173  : }

	add	rsp, 120				; 00000078H
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
$LN13@PMC_Pow_X_:

; 133  : 
; 134  :             __UNIT_TYPE work_bit_count = v_bit_count * e + __UNIT_TYPE_BIT_COUNT;

	imul	rdi, rcx

; 135  : 
; 136  :             __UNIT_TYPE work1_buf_code;
; 137  :             __UNIT_TYPE work1_buf_words;
; 138  :             __UNIT_TYPE* work1_buf = AllocateBlock(work_bit_count, &work1_buf_words, &work1_buf_code);

	lea	r8, QWORD PTR work1_buf_code$2[rsp]
	add	rdi, 64					; 00000040H
	lea	rdx, QWORD PTR work1_buf_words$5[rsp]
	mov	rcx, rdi
	call	AllocateBlock
	mov	QWORD PTR work1_buf$1$[rsp], rax
	mov	r14, rax

; 139  :             if (work1_buf == NULL)

	test	rax, rax
	je	SHORT $LN46@PMC_Pow_X_

; 140  :             {
; 141  :                 return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 142  :             }
; 143  :             __UNIT_TYPE work2_buf_code;
; 144  :             __UNIT_TYPE work2_buf_words;
; 145  :             __UNIT_TYPE* work2_buf = AllocateBlock(work_bit_count, &work2_buf_words, &work2_buf_code);

	lea	r8, QWORD PTR work2_buf_code$3[rsp]
	mov	rcx, rdi
	lea	rdx, QWORD PTR work2_buf_words$1[rsp]
	call	AllocateBlock

; 146  :             if (work1_buf == NULL)
; 147  :             {
; 148  :                 DeallocateBlock(work1_buf, work1_buf_words);
; 149  :                 return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 150  :             }
; 151  :             __UNIT_TYPE r_check_code;
; 152  :             if ((result = AllocateNumber(r, work_bit_count, &r_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR r_check_code$4[rsp]
	mov	QWORD PTR work2_buf$1$[rsp], rax
	mov	rdx, rdi
	mov	rcx, r12
	mov	rbx, rax
	call	AllocateNumber
	test	eax, eax
	je	SHORT $LN16@PMC_Pow_X_

; 153  :             {
; 154  :                 DeallocateBlock(work1_buf, work1_buf_words);

	mov	rdx, QWORD PTR work1_buf_words$5[rsp]
	mov	rcx, r14
	call	DeallocateBlock

; 155  :                 DeallocateBlock(work2_buf, work2_buf_words);

	mov	rdx, QWORD PTR work2_buf_words$1[rsp]
	mov	rcx, rbx
	call	DeallocateBlock
$LN46@PMC_Pow_X_:

; 173  : }

	mov	eax, -6
	add	rsp, 120				; 00000078H
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
$LN16@PMC_Pow_X_:

; 159  :             Pow_Imp(v->BLOCK, v->UNIT_WORD_COUNT, e, work1_buf, work2_buf, (*r)->BLOCK);

	mov	rcx, QWORD PTR [rsi+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 64   :         __movsq(d, s, count);

	mov	rdi, r14
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_pow.c

; 159  :             Pow_Imp(v->BLOCK, v->UNIT_WORD_COUNT, e, work1_buf, work2_buf, (*r)->BLOCK);

	mov	rax, QWORD PTR [r12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 601  :         return (sizeof(x) * 8 - 1 - pos);

	mov	edx, 31
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_pow.c

; 159  :             Pow_Imp(v->BLOCK, v->UNIT_WORD_COUNT, e, work1_buf, work2_buf, (*r)->BLOCK);

	mov	rsi, QWORD PTR [rsi+64]
	mov	QWORD PTR [rsp+184], rbp

; 37   :     __UNIT_TYPE* u_ptr = work1_buf;

	mov	rbp, r14
	mov	QWORD PTR [rsp+112], r15

; 33   :     _UINT32_T e_mask = _rotr(1, _LZCNT_ALT_32(e) + 1);

	mov	r14d, 1

; 159  :             Pow_Imp(v->BLOCK, v->UNIT_WORD_COUNT, e, work1_buf, work2_buf, (*r)->BLOCK);

	mov	rax, QWORD PTR [rax+64]

; 39   :     __UNIT_TYPE* w_ptr = work2_buf;

	mov	r15, rbx

; 40   :     __UNIT_TYPE u_count = v_buf_count;

	mov	rbx, rcx

; 159  :             Pow_Imp(v->BLOCK, v->UNIT_WORD_COUNT, e, work1_buf, work2_buf, (*r)->BLOCK);

	mov	QWORD PTR r_buf$1$[rsp], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 595  :         _BitScanReverse(&pos, x);

	bsr	eax, r13d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_pow.c

; 159  :             Pow_Imp(v->BLOCK, v->UNIT_WORD_COUNT, e, work1_buf, work2_buf, (*r)->BLOCK);

	mov	QWORD PTR v_buf$1$[rsp], rsi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 601  :         return (sizeof(x) * 8 - 1 - pos);

	sub	edx, eax

; 64   :         __movsq(d, s, count);

	rep movsq
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_pow.c

; 33   :     _UINT32_T e_mask = _rotr(1, _LZCNT_ALT_32(e) + 1);

	lea	ecx, DWORD PTR [rdx+1]
	ror	r14d, cl

; 41   :     __UNIT_TYPE v_count = v_buf_count;
; 42   :     _COPY_MEMORY_UNIT(work1_buf, v_buf, v_buf_count);
; 43   :     e_mask >>= 1;

	shr	r14d, 1

; 44   :     while (e_mask != 0)

	je	$LN23@PMC_Pow_X_
	mov	r12, rbx
$LL22@PMC_Pow_X_:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 114  :         __stosq(d, 0, count);

	xor	eax, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_pow.c

; 47   :         _ZERO_MEMORY_UNIT(w_ptr, u_count * 2);

	mov	DWORD PTR tv426[rsp], r14d
	lea	rsi, QWORD PTR [rbx+rbx]

; 48   :         Multiply_X_X_Imp(u_ptr, u_count, u_ptr, u_count, w_ptr);

	mov	QWORD PTR [rsp+32], r15
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 114  :         __stosq(d, 0, count);

	mov	rcx, rsi
	mov	rdi, r15
	rep stosq
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_pow.c

; 48   :         Multiply_X_X_Imp(u_ptr, u_count, u_ptr, u_count, w_ptr);

	mov	rcx, rbp
	mov	r9, rbx
	mov	r8, rbp
	mov	rdx, rbx
	call	Multiply_X_X_Imp

; 49   :         u_count *= 2;
; 50   :         if (w_ptr[u_count - 1] == 0)

	add	rbx, rbx

; 51   :             --u_count;
; 52   : 
; 53   :         // e の該当桁の bit を調べる
; 54   :         if (e & e_mask)

	mov	rax, QWORD PTR [r15+rbx*8-8]
	lea	rbx, QWORD PTR [rsi-1]
	test	rax, rax
	cmovne	rbx, rsi
	test	r14d, r13d
	je	SHORT $LN25@PMC_Pow_X_

; 58   :             Multiply_X_X_Imp(w_ptr, u_count, v_ptr, v_count, u_ptr);

	mov	r8, QWORD PTR v_buf$1$[rsp]
	lea	rsi, QWORD PTR [rbx+r12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 114  :         __stosq(d, 0, count);

	xor	eax, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_pow.c

; 58   :             Multiply_X_X_Imp(w_ptr, u_count, v_ptr, v_count, u_ptr);

	mov	QWORD PTR [rsp+32], rbp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 114  :         __stosq(d, 0, count);

	mov	rcx, rsi
	mov	rdi, rbp
	rep stosq
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_pow.c

; 58   :             Multiply_X_X_Imp(w_ptr, u_count, v_ptr, v_count, u_ptr);

	mov	rcx, r15
	mov	r9, r12
	mov	rdx, rbx
	call	Multiply_X_X_Imp

; 59   :             u_count += v_count;
; 60   :             if (u_ptr[u_count - 1] == 0)
; 61   :                 --u_count;
; 62   :         }

	cmp	QWORD PTR [rbp+rsi*8-8], 0
	lea	rbx, QWORD PTR [rsi-1]
	cmovne	rbx, rsi
	jmp	SHORT $LN26@PMC_Pow_X_
$LN25@PMC_Pow_X_:

; 63   :         else
; 64   :         {
; 65   :             // u と w を交換する
; 66   :             __UNIT_TYPE* t_ptr = u_ptr;

	mov	rax, rbp

; 67   :             u_ptr = w_ptr;

	mov	rbp, r15

; 68   :             w_ptr = t_ptr;

	mov	r15, rax
$LN26@PMC_Pow_X_:

; 69   :         }
; 70   : 
; 71   :         e_mask >>= 1;

	shr	r14d, 1
	cmp	DWORD PTR tv426[rsp], 2
	jae	$LL22@PMC_Pow_X_
	mov	r12, QWORD PTR r$[rsp]
$LN23@PMC_Pow_X_:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 64   :         __movsq(d, s, count);

	mov	rdi, QWORD PTR r_buf$1$[rsp]
	mov	rsi, rbp
	mov	rcx, rbx
	rep movsq
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_pow.c

; 161  :             if ((result = CheckBlockLight(work1_buf, work1_buf_code)) != PMC_STATUS_OK)

	mov	rdi, QWORD PTR work1_buf$1$[rsp]
	mov	rdx, QWORD PTR work1_buf_code$2[rsp]
	mov	rcx, rdi
	call	CheckBlockLight
	mov	r15, QWORD PTR [rsp+112]
	mov	rbp, QWORD PTR [rsp+184]
	test	eax, eax
	jne	SHORT $LN1@PMC_Pow_X_

; 162  :                 return (result);
; 163  :             if ((result = CheckBlockLight(work2_buf, work2_buf_code)) != PMC_STATUS_OK)

	mov	rsi, QWORD PTR work2_buf$1$[rsp]
	mov	rdx, QWORD PTR work2_buf_code$3[rsp]
	mov	rcx, rsi
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_Pow_X_

; 164  :                 return (result);
; 165  :             if ((result = CheckBlockLight((*r)->BLOCK, r_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR [r12]
	mov	rdx, QWORD PTR r_check_code$4[rsp]
	mov	rcx, QWORD PTR [rcx+64]
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_Pow_X_

; 166  :                 return (result);
; 167  :             DeallocateBlock(work1_buf, work1_buf_words);

	mov	rdx, QWORD PTR work1_buf_words$5[rsp]
	mov	rcx, rdi
	call	DeallocateBlock

; 168  :             DeallocateBlock(work2_buf, work2_buf_words);

	mov	rdx, QWORD PTR work2_buf_words$1[rsp]
	mov	rcx, rsi
	call	DeallocateBlock

; 169  :             CommitNumber(*r);

	mov	rcx, QWORD PTR [r12]
	call	CommitNumber

; 170  :         }
; 171  :     }
; 172  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 173  : }

	add	rsp, 120				; 00000078H
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
$LN44@PMC_Pow_X_:

; 109  :         {
; 110  :             // e が 0 である場合
; 111  : 
; 112  :             // 計算結果の 1 を返す
; 113  :             *r = &number_one;

	lea	rax, OFFSET FLAT:number_one
$LN45@PMC_Pow_X_:

; 170  :         }
; 171  :     }
; 172  :     return (PMC_STATUS_OK);

	mov	QWORD PTR [r8], rax
$LN11@PMC_Pow_X_:
	xor	eax, eax
$LN1@PMC_Pow_X_:

; 173  : }

	add	rsp, 120				; 00000078H
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
PMC_Pow_X_I_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_pow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_pow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_pow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_pow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_pow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_pow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_pow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_pow.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_pow.c
;	COMDAT Pow_Imp
_TEXT	SEGMENT
v_buf$ = 112
v_buf_count$ = 120
e$ = 128
work1_buf$ = 136
work2_buf$ = 144
r_buf$ = 152
Pow_Imp	PROC						; COMDAT

; 32   : {

	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+8], rcx
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r13
	push	r14
	push	r15
	sub	rsp, 48					; 00000030H
	mov	rbx, r9
	mov	r13, rdx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 591  :         if (x == 0)

	test	r8d, r8d
	jne	SHORT $LN10@Pow_Imp

; 592  :             return (sizeof(x) * 8);

	lea	r9d, QWORD PTR [r8+32]
	jmp	SHORT $LN9@Pow_Imp
$LN10@Pow_Imp:

; 593  :         _UINT32_T pos;
; 594  : #ifdef _MSC_VER
; 595  :         _BitScanReverse(&pos, x);

	bsr	eax, r8d

; 596  : #elif defined(__GNUC__)
; 597  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 598  : #else
; 599  : #error unknown compiler
; 600  : #endif
; 601  :         return (sizeof(x) * 8 - 1 - pos);

	mov	r9d, 31
	sub	r9d, eax
$LN9@Pow_Imp:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_pow.c

; 39   :     __UNIT_TYPE* w_ptr = work2_buf;

	mov	r15, QWORD PTR work2_buf$[rsp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 64   :         __movsq(d, s, count);

	mov	rsi, rcx
	mov	rcx, r13
	mov	rdi, rbx
	rep movsq
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_pow.c

; 33   :     _UINT32_T e_mask = _rotr(1, _LZCNT_ALT_32(e) + 1);

	lea	ecx, DWORD PTR [r9+1]
	mov	ebp, 1
	ror	ebp, cl

; 40   :     __UNIT_TYPE u_count = v_buf_count;

	mov	r14, r13

; 41   :     __UNIT_TYPE v_count = v_buf_count;
; 42   :     _COPY_MEMORY_UNIT(work1_buf, v_buf, v_buf_count);
; 43   :     e_mask >>= 1;

	shr	ebp, 1

; 44   :     while (e_mask != 0)

	je	$LN3@Pow_Imp
	mov	QWORD PTR [rsp+120], r12
	npad	11
$LL2@Pow_Imp:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 114  :         __stosq(d, 0, count);

	xor	eax, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_pow.c

; 48   :         Multiply_X_X_Imp(u_ptr, u_count, u_ptr, u_count, w_ptr);

	mov	QWORD PTR [rsp+32], r15
	lea	rsi, QWORD PTR [r14+r14]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 114  :         __stosq(d, 0, count);

	mov	rdi, r15
	mov	rcx, rsi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_pow.c

; 48   :         Multiply_X_X_Imp(u_ptr, u_count, u_ptr, u_count, w_ptr);

	mov	r9, r14
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 114  :         __stosq(d, 0, count);

	rep stosq
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_pow.c

; 48   :         Multiply_X_X_Imp(u_ptr, u_count, u_ptr, u_count, w_ptr);

	mov	rcx, rbx
	mov	r8, rbx
	mov	rdx, r14
	mov	r12d, ebp
	call	Multiply_X_X_Imp

; 49   :         u_count *= 2;
; 50   :         if (w_ptr[u_count - 1] == 0)

	add	r14, r14

; 51   :             --u_count;
; 52   : 
; 53   :         // e の該当桁の bit を調べる
; 54   :         if (e & e_mask)

	mov	rax, QWORD PTR [r15+r14*8-8]
	lea	r14, QWORD PTR [rsi-1]
	test	rax, rax
	cmovne	r14, rsi
	test	ebp, DWORD PTR e$[rsp]
	je	SHORT $LN5@Pow_Imp

; 58   :             Multiply_X_X_Imp(w_ptr, u_count, v_ptr, v_count, u_ptr);

	mov	r8, QWORD PTR v_buf$[rsp]
	lea	rsi, QWORD PTR [r14+r13]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 114  :         __stosq(d, 0, count);

	xor	eax, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_pow.c

; 58   :             Multiply_X_X_Imp(w_ptr, u_count, v_ptr, v_count, u_ptr);

	mov	QWORD PTR [rsp+32], rbx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 114  :         __stosq(d, 0, count);

	mov	rcx, rsi
	mov	rdi, rbx
	rep stosq
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_pow.c

; 58   :             Multiply_X_X_Imp(w_ptr, u_count, v_ptr, v_count, u_ptr);

	mov	rcx, r15
	mov	r9, r13
	mov	rdx, r14
	call	Multiply_X_X_Imp

; 59   :             u_count += v_count;
; 60   :             if (u_ptr[u_count - 1] == 0)
; 61   :                 --u_count;
; 62   :         }

	cmp	QWORD PTR [rbx+rsi*8-8], 0
	lea	r14, QWORD PTR [rsi-1]
	cmovne	r14, rsi
	jmp	SHORT $LN6@Pow_Imp
$LN5@Pow_Imp:

; 63   :         else
; 64   :         {
; 65   :             // u と w を交換する
; 66   :             __UNIT_TYPE* t_ptr = u_ptr;

	mov	rax, rbx

; 67   :             u_ptr = w_ptr;

	mov	rbx, r15

; 68   :             w_ptr = t_ptr;

	mov	r15, rax
$LN6@Pow_Imp:

; 69   :         }
; 70   : 
; 71   :         e_mask >>= 1;

	shr	ebp, 1
	cmp	r12d, 2
	jae	$LL2@Pow_Imp

; 44   :     while (e_mask != 0)

	mov	r12, QWORD PTR [rsp+120]
$LN3@Pow_Imp:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 64   :         __movsq(d, s, count);

	mov	rdi, QWORD PTR r_buf$[rsp]
	mov	rsi, rbx
	mov	rcx, r14
	rep movsq
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_pow.c

; 74   : }

	add	rsp, 48					; 00000030H
	pop	r15
	pop	r14
	pop	r13
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
Pow_Imp	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _LZCNT_ALT_32
_TEXT	SEGMENT
x$ = 8
_LZCNT_ALT_32 PROC					; COMDAT

; 591  :         if (x == 0)

	test	ecx, ecx
	jne	SHORT $LN2@LZCNT_ALT_

; 592  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 602  :     }

	ret	0
$LN2@LZCNT_ALT_:

; 593  :         _UINT32_T pos;
; 594  : #ifdef _MSC_VER
; 595  :         _BitScanReverse(&pos, x);

	bsr	ecx, ecx

; 596  : #elif defined(__GNUC__)
; 597  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 598  : #else
; 599  : #error unknown compiler
; 600  : #endif
; 601  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31
	sub	eax, ecx

; 602  :     }

	ret	0
_LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ZERO_MEMORY_UNIT
_TEXT	SEGMENT
d$ = 8
count$ = 16
_ZERO_MEMORY_UNIT PROC					; COMDAT

; 110  :     {

	mov	QWORD PTR [rsp+8], rdi

; 111  : #ifdef _M_IX86
; 112  :         __stosd((unsigned long*)d, 0, (unsigned long)count);
; 113  : #elif defined(_M_X64)
; 114  :         __stosq(d, 0, count);

	mov	rdi, rcx
	xor	eax, eax
	mov	rcx, rdx
	rep stosq

; 115  : #else
; 116  : #error unknown platform
; 117  : #endif
; 118  :     }

	mov	rdi, QWORD PTR [rsp+8]
	ret	0
_ZERO_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _COPY_MEMORY_UNIT
_TEXT	SEGMENT
d$ = 8
s$ = 16
count$ = 24
_COPY_MEMORY_UNIT PROC					; COMDAT

; 60   :     {

	mov	QWORD PTR [rsp+8], rsi
	mov	QWORD PTR [rsp+16], rdi

; 61   : #ifdef _M_IX86
; 62   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);
; 63   : #elif defined(_M_X64)
; 64   :         __movsq(d, s, count);

	mov	rdi, rcx
	mov	rsi, rdx
	mov	rcx, r8
	rep movsq

; 65   : #else
; 66   : #error unknown platform
; 67   : #endif
; 68   :     }

	mov	rsi, QWORD PTR [rsp+8]
	mov	rdi, QWORD PTR [rsp+16]
	ret	0
_COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_pow.c
;	COMDAT PMC_Pow_X_I
_TEXT	SEGMENT
v$ = 48
e$ = 56
r$ = 64
PMC_Pow_X_I PROC					; COMDAT

; 176  : {

$LN10:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, r8
	mov	esi, edx
	mov	rbx, rcx

; 177  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(e) * 8)
; 178  :     {
; 179  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 180  :         return (PMC_STATUS_INTERNAL_ERROR);
; 181  :     }
; 182  :     if (v == NULL)

	test	rcx, rcx
	je	SHORT $LN8@PMC_Pow_X_

; 183  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 184  :     if (r == NULL)

	test	r8, r8
	je	SHORT $LN8@PMC_Pow_X_

; 186  :     PMC_STATUS_CODE result;
; 187  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN6@PMC_Pow_X_

; 188  :         return (result);
; 189  :     if ((result = PMC_Pow_X_I_Imp((NUMBER_HEADER*)v, e, (NUMBER_HEADER**)r)) != PMC_STATUS_OK)

	mov	r8, rdi
	mov	edx, esi
	mov	rcx, rbx

; 190  :         return (result);
; 191  : #ifdef _DEBUG
; 192  :     if ((result = CheckNumber((NUMBER_HEADER*)*r)) != PMC_STATUS_OK)
; 193  :         return (result);
; 194  : #endif
; 195  :     return (PMC_STATUS_OK);
; 196  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi

; 188  :         return (result);
; 189  :     if ((result = PMC_Pow_X_I_Imp((NUMBER_HEADER*)v, e, (NUMBER_HEADER**)r)) != PMC_STATUS_OK)

	jmp	PMC_Pow_X_I_Imp
$LN8@PMC_Pow_X_:

; 185  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN6@PMC_Pow_X_:

; 190  :         return (result);
; 191  : #ifdef _DEBUG
; 192  :     if ((result = CheckNumber((NUMBER_HEADER*)*r)) != PMC_STATUS_OK)
; 193  :         return (result);
; 194  : #endif
; 195  :     return (PMC_STATUS_OK);
; 196  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_Pow_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_pow.c
;	COMDAT Initialize_Pow
_TEXT	SEGMENT
feature$ = 8
Initialize_Pow PROC					; COMDAT

; 200  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 201  : }

	ret	0
Initialize_Pow ENDP
_TEXT	ENDS
END
