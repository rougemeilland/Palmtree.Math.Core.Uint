; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	Initialize_Equals
PUBLIC	PMC_Equals_I_X
PUBLIC	PMC_Equals_L_X
PUBLIC	PMC_Equals_X_I
PUBLIC	PMC_Equals_X_L
PUBLIC	PMC_Equals_X_X
EXTRN	CheckNumber:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Equals_I_X DD imagerel $LN9
	DD	imagerel $LN9+96
	DD	imagerel $unwind$PMC_Equals_I_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Equals_L_X DD imagerel $LN9
	DD	imagerel $LN9+98
	DD	imagerel $unwind$PMC_Equals_L_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Equals_X_I DD imagerel $LN9
	DD	imagerel $LN9+93
	DD	imagerel $unwind$PMC_Equals_X_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Equals_X_L DD imagerel $LN9
	DD	imagerel $LN9+95
	DD	imagerel $unwind$PMC_Equals_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Equals_X_X DD imagerel $LN26
	DD	imagerel $LN26+213
	DD	imagerel $unwind$PMC_Equals_X_X
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Equals_X_X DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Equals_X_L DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Equals_X_I DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Equals_L_X DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Equals_I_X DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_equals.c
;	COMDAT Equals_X_X_Imp
_TEXT	SEGMENT
u$ = 8
v$ = 16
count$ = 24
Equals_X_X_Imp PROC					; COMDAT

; 140  :     while (count > 0)

	test	r8, r8
	je	SHORT $LN3@Equals_X_X
	sub	rcx, rdx
	npad	8
$LL2@Equals_X_X:

; 141  :     {
; 142  :         if (*u != *v)

	mov	rax, QWORD PTR [rdx]
	cmp	QWORD PTR [rcx+rdx], rax
	jne	SHORT $LN7@Equals_X_X

; 144  :         ++u;
; 145  :         ++v;

	add	rdx, 8

; 146  :         --count;

	sub	r8, 1
	jne	SHORT $LL2@Equals_X_X
$LN3@Equals_X_X:

; 147  :     }
; 148  :     return (1);

	mov	eax, 1

; 149  : }

	ret	0
$LN7@Equals_X_X:

; 143  :             return (0);

	xor	eax, eax

; 149  : }

	ret	0
Equals_X_X_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_equals.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_equals.c
;	COMDAT Equals_X_L_Imp
_TEXT	SEGMENT
u$ = 8
v$ = 16
Equals_X_L_Imp PROC					; COMDAT

; 64   :     if (u->IS_ZERO)

	test	BYTE PTR [rcx], 1
	mov	r8, rcx
	je	SHORT $LN2@Equals_X_L

; 65   :     {
; 66   :         // u が 0 である場合
; 67   :         return (v == 0);

	xor	eax, eax
	test	rdx, rdx
	sete	al

; 132  :             }
; 133  :         }
; 134  :     }
; 135  :     return (PMC_STATUS_OK);
; 136  : }

	ret	0
$LN2@Equals_X_L:

; 68   :     }
; 69   :     else if (v == 0)

	test	rdx, rdx
	je	SHORT $LN30@Equals_X_L
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 638  :         _BitScanReverse64(&pos, x);

	bsr	rax, rdx

; 639  : #elif defined(__GNUC__)
; 640  :         _UINT64_T pos;
; 641  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 642  : #else
; 643  : #error unknown compiler
; 644  : #endif
; 645  : #else
; 646  : #error unknown platform
; 647  : #endif
; 648  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 63					; 0000003fH
	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_equals.c

; 121  :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);

	movsxd	rax, ecx
	mov	ecx, 64					; 00000040H
	sub	rcx, rax

; 122  :             if (u_bit_count != v_bit_count)

	cmp	QWORD PTR [r8+24], rcx
	jne	SHORT $LN30@Equals_X_L

; 126  :             }
; 127  :             else
; 128  :             {
; 129  :                 // u > 0 && v > 0 かつ u のビット長と v のビット長が等しく、かつ v が 1 ワードで表現できる場合
; 130  :                 // ⇒ u と v はともに 1 ワードで表現できる
; 131  :                 return (u->BLOCK[0] == v);

	mov	rcx, QWORD PTR [r8+64]
	xor	eax, eax
	cmp	QWORD PTR [rcx], rdx
	sete	al

; 132  :             }
; 133  :         }
; 134  :     }
; 135  :     return (PMC_STATUS_OK);
; 136  : }

	ret	0
$LN30@Equals_X_L:

; 123  :             {
; 124  :                 // 明らかに u > v である場合
; 125  :                 return (0);

	xor	eax, eax

; 132  :             }
; 133  :         }
; 134  :     }
; 135  :     return (PMC_STATUS_OK);
; 136  : }

	ret	0
Equals_X_L_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_equals.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_equals.c
;	COMDAT Equals_X_I_Imp
_TEXT	SEGMENT
u$ = 8
v$ = 16
Equals_X_I_Imp PROC					; COMDAT

; 33   :     if (u->IS_ZERO)

	test	BYTE PTR [rcx], 1
	mov	r8d, edx
	mov	rdx, rcx
	je	SHORT $LN2@Equals_X_I

; 34   :     {
; 35   :         // u が 0 である場合
; 36   :         return (v == 0);

	xor	eax, eax
	test	r8d, r8d
	sete	al

; 58   :         }
; 59   :     }
; 60   : }

	ret	0
$LN2@Equals_X_I:

; 37   :     }
; 38   :     else if (v == 0)

	test	r8d, r8d
	je	SHORT $LN12@Equals_X_I
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 595  :         _BitScanReverse(&pos, x);

	bsr	eax, r8d

; 596  : #elif defined(__GNUC__)
; 597  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 598  : #else
; 599  : #error unknown compiler
; 600  : #endif
; 601  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31
	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_equals.c

; 47   :         __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

	movsxd	rax, ecx
	mov	ecx, 32					; 00000020H
	sub	rcx, rax

; 48   :         if (u_bit_count != v_bit_count)

	cmp	QWORD PTR [rdx+24], rcx
	jne	SHORT $LN12@Equals_X_I

; 52   :         }
; 53   :         else
; 54   :         {
; 55   :             // u > 0 && v > 0 かつ u のビット長と v のビット長が等しい場合
; 56   :             // ⇒ u と v はともに 1 ワードで表現できる
; 57   :             return ( u->BLOCK[0] == v);

	mov	rdx, QWORD PTR [rdx+64]
	xor	eax, eax
	cmp	QWORD PTR [rdx], r8
	sete	al

; 58   :         }
; 59   :     }
; 60   : }

	ret	0
$LN12@Equals_X_I:

; 49   :         {
; 50   :             // 明らかに u != v である場合
; 51   :             return (0);

	xor	eax, eax

; 58   :         }
; 59   :     }
; 60   : }

	ret	0
Equals_X_I_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _LZCNT_ALT_UNIT
_TEXT	SEGMENT
x$ = 8
_LZCNT_ALT_UNIT PROC					; COMDAT

; 624  :         if (x == 0)

	test	rcx, rcx
	jne	SHORT $LN2@LZCNT_ALT_

; 625  :             return (sizeof(x) * 8);

	mov	eax, 64					; 00000040H

; 649  :     }

	ret	0
$LN2@LZCNT_ALT_:

; 626  : #ifdef _M_IX86
; 627  :         _UINT32_T pos;
; 628  : #ifdef _MSC_VER
; 629  :         _BitScanReverse(&pos, x);
; 630  : #elif defined(__GNUC__)
; 631  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 632  : #else
; 633  : #error unknown compiler
; 634  : #endif
; 635  : #elif defined(_M_X64)
; 636  : #ifdef _MSC_VER
; 637  :         _UINT32_T pos;
; 638  :         _BitScanReverse64(&pos, x);

	bsr	rcx, rcx

; 639  : #elif defined(__GNUC__)
; 640  :         _UINT64_T pos;
; 641  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 642  : #else
; 643  : #error unknown compiler
; 644  : #endif
; 645  : #else
; 646  : #error unknown platform
; 647  : #endif
; 648  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 63					; 0000003fH
	sub	eax, ecx

; 649  :     }

	ret	0
_LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _LZCNT_ALT_32
_TEXT	SEGMENT
x$ = 8
_LZCNT_ALT_32 PROC					; COMDAT

; 591  :         if (x == 0)

	test	ecx, ecx
	jne	SHORT $LN2@LZCNT_ALT_

; 592  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 602  :     }

	ret	0
$LN2@LZCNT_ALT_:

; 593  :         _UINT32_T pos;
; 594  : #ifdef _MSC_VER
; 595  :         _BitScanReverse(&pos, x);

	bsr	ecx, ecx

; 596  : #elif defined(__GNUC__)
; 597  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 598  : #else
; 599  : #error unknown compiler
; 600  : #endif
; 601  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31
	sub	eax, ecx

; 602  :     }

	ret	0
_LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _FROMDWORDTOWORD
_TEXT	SEGMENT
value$ = 8
result_high$ = 16
_FROMDWORDTOWORD PROC					; COMDAT

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	rax, rcx
	shr	rax, 32					; 00000020H
	mov	DWORD PTR [rdx], eax

; 178  :         return ((_UINT32_T)value);

	mov	eax, ecx

; 179  :     }

	ret	0
_FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_equals.c
;	COMDAT PMC_Equals_X_X
_TEXT	SEGMENT
u$ = 48
v$ = 56
w$ = 64
PMC_Equals_X_X PROC					; COMDAT

; 240  : {

$LN26:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rsi, r8
	mov	rbx, rdx
	mov	rdi, rcx

; 241  :     if (u == NULL)

	test	rcx, rcx
	je	$LN24@PMC_Equals

; 242  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 243  :     if (v == NULL)

	test	rdx, rdx
	je	$LN24@PMC_Equals

; 244  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 245  :     if (w == NULL)

	test	r8, r8
	je	$LN24@PMC_Equals

; 247  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 248  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 249  :     PMC_STATUS_CODE result;
; 250  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	$LN1@PMC_Equals

; 251  :         return (result);
; 252  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	rcx, rbx
	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN1@PMC_Equals

; 253  :         return (result);
; 254  :     if (nu->IS_ZERO)

	test	BYTE PTR [rdi], 1
	je	SHORT $LN7@PMC_Equals

; 255  :     {
; 256  :         *w = nv->IS_ZERO ? 1 : 0;

	mov	eax, DWORD PTR [rbx]
	and	eax, 1

; 275  :         }
; 276  :     }
; 277  : #ifdef _DEBUG
; 278  :     if (*w != 0 && *w != 1)
; 279  :         return (PMC_STATUS_INTERNAL_ERROR);
; 280  : #endif
; 281  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [rsi], eax
	xor	eax, eax

; 282  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN7@PMC_Equals:

; 257  :     }
; 258  :     else if (nv->IS_ZERO)

	test	BYTE PTR [rbx], 1
	jne	SHORT $LN20@PMC_Equals

; 259  :     {
; 260  :         *w = 0;
; 261  :     }
; 262  :     else
; 263  :     {
; 264  :         __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 265  :         __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 266  :         if (u_bit_count != v_bit_count)

	mov	rax, QWORD PTR [rbx+24]
	cmp	QWORD PTR [rdi+24], rax
	jne	SHORT $LN20@PMC_Equals

; 267  :         {
; 268  :             // 明らかに u > v である場合
; 269  :             *w = 0;
; 270  :         }
; 271  :         else
; 272  :         {
; 273  :             // u > 0 && v > 0 かつ u のビット長と v のビット長が等しい場合
; 274  :             *w = Equals_X_X_Imp(nu->BLOCK, nv->BLOCK, nu->UNIT_WORD_COUNT);

	mov	rdx, QWORD PTR [rdi+16]
	mov	rcx, QWORD PTR [rbx+64]

; 140  :     while (count > 0)

	test	rdx, rdx
	je	SHORT $LN16@PMC_Equals
	mov	r8, QWORD PTR [rdi+64]
	sub	r8, rcx
	npad	3
$LL15@PMC_Equals:

; 141  :     {
; 142  :         if (*u != *v)

	mov	rax, QWORD PTR [rcx]
	cmp	QWORD PTR [r8+rcx], rax
	jne	SHORT $LN20@PMC_Equals

; 143  :             return (0);
; 144  :         ++u;
; 145  :         ++v;

	add	rcx, 8

; 146  :         --count;

	sub	rdx, 1
	jne	SHORT $LL15@PMC_Equals
$LN16@PMC_Equals:

; 147  :     }
; 148  :     return (1);

	mov	eax, 1
$LN14@PMC_Equals:

; 275  :         }
; 276  :     }
; 277  : #ifdef _DEBUG
; 278  :     if (*w != 0 && *w != 1)
; 279  :         return (PMC_STATUS_INTERNAL_ERROR);
; 280  : #endif
; 281  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [rsi], eax
	xor	eax, eax

; 282  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN20@PMC_Equals:

; 275  :         }
; 276  :     }
; 277  : #ifdef _DEBUG
; 278  :     if (*w != 0 && *w != 1)
; 279  :         return (PMC_STATUS_INTERNAL_ERROR);
; 280  : #endif
; 281  :     return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN14@PMC_Equals
$LN24@PMC_Equals:

; 246  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN1@PMC_Equals:

; 282  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_Equals_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_equals.c
;	COMDAT PMC_Equals_X_L
_TEXT	SEGMENT
u$ = 48
v$ = 56
w$ = 64
PMC_Equals_X_L PROC					; COMDAT

; 218  : {

$LN9:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, r8
	mov	rsi, rdx
	mov	rbx, rcx

; 219  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(v) * 8)
; 220  :     {
; 221  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 222  :         return (PMC_STATUS_INTERNAL_ERROR);
; 223  :     }
; 224  :     if (u == NULL)

	test	rcx, rcx
	je	SHORT $LN7@PMC_Equals

; 225  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 226  :     if (w == NULL)

	test	r8, r8
	je	SHORT $LN7@PMC_Equals

; 228  :     PMC_STATUS_CODE result;
; 229  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN1@PMC_Equals

; 230  :         return (result);
; 231  :     *w = Equals_X_L_Imp((NUMBER_HEADER*)u, v);

	mov	rdx, rsi
	mov	rcx, rbx
	call	Equals_X_L_Imp
	mov	DWORD PTR [rdi], eax

; 232  : #ifdef _DEBUG
; 233  :     if (*w != 0 && *w != 1)
; 234  :         return (PMC_STATUS_INTERNAL_ERROR);
; 235  : #endif
; 236  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 237  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN7@PMC_Equals:

; 227  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN1@PMC_Equals:

; 237  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_Equals_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_equals.c
;	COMDAT PMC_Equals_X_I
_TEXT	SEGMENT
u$ = 48
v$ = 56
w$ = 64
PMC_Equals_X_I PROC					; COMDAT

; 174  : {

$LN9:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, r8
	mov	esi, edx
	mov	rbx, rcx

; 175  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)
; 176  :     {
; 177  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 178  :         return (PMC_STATUS_INTERNAL_ERROR);
; 179  :     }
; 180  :     if (u == NULL)

	test	rcx, rcx
	je	SHORT $LN7@PMC_Equals

; 181  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 182  :     if (w == NULL)

	test	r8, r8
	je	SHORT $LN7@PMC_Equals

; 184  :     PMC_STATUS_CODE result;
; 185  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN1@PMC_Equals

; 186  :         return (result);
; 187  :     *w = Equals_X_I_Imp((NUMBER_HEADER*)u, v);

	mov	edx, esi
	mov	rcx, rbx
	call	Equals_X_I_Imp
	mov	DWORD PTR [rdi], eax

; 188  : #ifdef _DEBUG
; 189  :     if (*w != 0 && *w != 1)
; 190  :         return (PMC_STATUS_INTERNAL_ERROR);
; 191  : #endif
; 192  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 193  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN7@PMC_Equals:

; 183  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN1@PMC_Equals:

; 193  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_Equals_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_equals.c
;	COMDAT PMC_Equals_L_X
_TEXT	SEGMENT
u$ = 48
v$ = 56
w$ = 64
PMC_Equals_L_X PROC					; COMDAT

; 196  : {

$LN9:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, r8
	mov	rbx, rdx
	mov	rsi, rcx

; 197  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(u) * 8)
; 198  :     {
; 199  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 200  :         return (PMC_STATUS_INTERNAL_ERROR);
; 201  :     }
; 202  :     if (v == NULL)

	test	rdx, rdx
	je	SHORT $LN7@PMC_Equals

; 203  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 204  :     if (w == NULL)

	test	r8, r8
	je	SHORT $LN7@PMC_Equals

; 206  :     PMC_STATUS_CODE result;
; 207  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	mov	rcx, rdx
	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN1@PMC_Equals

; 208  :         return (result);
; 209  :     *w = Equals_X_L_Imp((NUMBER_HEADER*)v, u);

	mov	rdx, rsi
	mov	rcx, rbx
	call	Equals_X_L_Imp
	mov	DWORD PTR [rdi], eax

; 210  : #ifdef _DEBUG
; 211  :     if (*w != 0 && *w != 1)
; 212  :         return (PMC_STATUS_INTERNAL_ERROR);
; 213  : #endif
; 214  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 215  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN7@PMC_Equals:

; 205  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN1@PMC_Equals:

; 215  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_Equals_L_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_equals.c
;	COMDAT PMC_Equals_I_X
_TEXT	SEGMENT
u$ = 48
v$ = 56
w$ = 64
PMC_Equals_I_X PROC					; COMDAT

; 152  : {

$LN9:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, r8
	mov	rbx, rdx
	mov	esi, ecx

; 153  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(u) * 8)
; 154  :     {
; 155  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 156  :         return (PMC_STATUS_INTERNAL_ERROR);
; 157  :     }
; 158  :     if (v == NULL)

	test	rdx, rdx
	je	SHORT $LN7@PMC_Equals

; 159  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 160  :     if (w == NULL)

	test	r8, r8
	je	SHORT $LN7@PMC_Equals

; 162  :     PMC_STATUS_CODE result;
; 163  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	mov	rcx, rdx
	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN1@PMC_Equals

; 164  :         return (result);
; 165  :     *w = Equals_X_I_Imp((NUMBER_HEADER*)v, u);

	mov	edx, esi
	mov	rcx, rbx
	call	Equals_X_I_Imp
	mov	DWORD PTR [rdi], eax

; 166  : #ifdef _DEBUG
; 167  :     if (*w != 0 && *w != 1)
; 168  :         return (PMC_STATUS_INTERNAL_ERROR);
; 169  : #endif
; 170  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 171  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN7@PMC_Equals:

; 161  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN1@PMC_Equals:

; 171  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_Equals_I_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_equals.c
;	COMDAT Initialize_Equals
_TEXT	SEGMENT
feature$ = 8
Initialize_Equals PROC					; COMDAT

; 286  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 287  : }

	ret	0
Initialize_Equals ENDP
_TEXT	ENDS
END
