; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	number_zero:BYTE:048H
COMM	number_one:BYTE:048H
COMM	hLocalHeap:QWORD
_DATA	ENDS
PUBLIC	AllocateHeapArea
PUBLIC	DeallocateHeapArea
PUBLIC	AllocateBlock
PUBLIC	DeallocateBlock
PUBLIC	CheckBlockLight
PUBLIC	AttatchNumber
PUBLIC	AllocateNumber
PUBLIC	DetatchNumber
PUBLIC	DeallocateNumber
PUBLIC	CommitNumber
PUBLIC	CheckNumber
PUBLIC	DuplicateNumber
PUBLIC	InitializeChainBuffer
PUBLIC	CleanUpChainBuffer
PUBLIC	AllocateChainedBuffer
PUBLIC	CheckChainedBuffer
PUBLIC	DeallocateChainedBuffer
PUBLIC	Initialize_Memory
PUBLIC	PMC_Dispose
PUBLIC	PMC_GetConstantValue_I
EXTRN	__imp_HeapCreate:PROC
EXTRN	__imp_HeapDestroy:PROC
EXTRN	__imp_HeapAlloc:PROC
EXTRN	__imp_HeapFree:PROC
EXTRN	__imp_GetTickCount:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$AllocateHeapArea DD imagerel $LN5
	DD	imagerel $LN5+42
	DD	imagerel $unwind$AllocateHeapArea
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DeallocateHeapArea DD imagerel $LN5
	DD	imagerel $LN5+38
	DD	imagerel $unwind$DeallocateHeapArea
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AllocateBlock DD imagerel $LN8
	DD	imagerel $LN8+128
	DD	imagerel $unwind$AllocateBlock
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DeallocateBlock DD imagerel $LN9
	DD	imagerel $LN9+23
	DD	imagerel $unwind$DeallocateBlock
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$DeallocateBlock DD imagerel $LN9+23
	DD	imagerel $LN9+69
	DD	imagerel $chain$0$DeallocateBlock
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$DeallocateBlock DD imagerel $LN9+69
	DD	imagerel $LN9+79
	DD	imagerel $chain$1$DeallocateBlock
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AttatchNumber DD imagerel $LN5
	DD	imagerel $LN5+31
	DD	imagerel $unwind$AttatchNumber
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AllocateNumber DD imagerel $LN6
	DD	imagerel $LN6+110
	DD	imagerel $unwind$AllocateNumber
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DeallocateNumber DD imagerel $LN27
	DD	imagerel $LN27+93
	DD	imagerel $unwind$DeallocateNumber
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CommitNumber DD imagerel $LN39
	DD	imagerel $LN39+346
	DD	imagerel $unwind$CommitNumber
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DuplicateNumber DD imagerel $LN18
	DD	imagerel $LN18+194
	DD	imagerel $unwind$DuplicateNumber
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CleanUpChainBuffer DD imagerel $LN14
	DD	imagerel $LN14+70
	DD	imagerel $unwind$CleanUpChainBuffer
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AllocateChainedBuffer DD imagerel $LN7
	DD	imagerel $LN7+129
	DD	imagerel $unwind$AllocateChainedBuffer
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Initialize_Memory DD imagerel $LN129
	DD	imagerel $LN129+362
	DD	imagerel $unwind$Initialize_Memory
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Dispose DD imagerel $LN38
	DD	imagerel $LN38+113
	DD	imagerel $unwind$PMC_Dispose
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_COPY_MEMORY_UNIT DD imagerel _COPY_MEMORY_UNIT
	DD	imagerel _COPY_MEMORY_UNIT+33
	DD	imagerel $unwind$_COPY_MEMORY_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ZERO_MEMORY_BYTE DD imagerel _ZERO_MEMORY_BYTE
	DD	imagerel _ZERO_MEMORY_BYTE+21
	DD	imagerel $unwind$_ZERO_MEMORY_BYTE
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ZERO_MEMORY_16 DD imagerel _ZERO_MEMORY_16
	DD	imagerel _ZERO_MEMORY_16+22
	DD	imagerel $unwind$_ZERO_MEMORY_16
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ZERO_MEMORY_32 DD imagerel _ZERO_MEMORY_32
	DD	imagerel _ZERO_MEMORY_32+21
	DD	imagerel $unwind$_ZERO_MEMORY_32
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_ZERO_MEMORY_64 DD imagerel _ZERO_MEMORY_64
	DD	imagerel _ZERO_MEMORY_64+22
	DD	imagerel $unwind$_ZERO_MEMORY_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_FILL_MEMORY_BYTE DD imagerel _FILL_MEMORY_BYTE
	DD	imagerel _FILL_MEMORY_BYTE+22
	DD	imagerel $unwind$_FILL_MEMORY_BYTE
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_FILL_MEMORY_16 DD imagerel _FILL_MEMORY_16
	DD	imagerel _FILL_MEMORY_16+23
	DD	imagerel $unwind$_FILL_MEMORY_16
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_FILL_MEMORY_32 DD imagerel _FILL_MEMORY_32
	DD	imagerel _FILL_MEMORY_32+21
	DD	imagerel $unwind$_FILL_MEMORY_32
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_FILL_MEMORY_64 DD imagerel _FILL_MEMORY_64
	DD	imagerel _FILL_MEMORY_64+23
	DD	imagerel $unwind$_FILL_MEMORY_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_FILL_MEMORY_UNIT DD imagerel _FILL_MEMORY_UNIT
	DD	imagerel _FILL_MEMORY_UNIT+23
	DD	imagerel $unwind$_FILL_MEMORY_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$InitializeNumber DD imagerel InitializeNumber
	DD	imagerel InitializeNumber+192
	DD	imagerel $unwind$InitializeNumber
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CleanUpNumber DD imagerel CleanUpNumber
	DD	imagerel CleanUpNumber+35
	DD	imagerel $unwind$CleanUpNumber
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$CleanUpNumber DD imagerel CleanUpNumber+35
	DD	imagerel CleanUpNumber+76
	DD	imagerel $chain$0$CleanUpNumber
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$CleanUpNumber DD imagerel CleanUpNumber+76
	DD	imagerel CleanUpNumber+90
	DD	imagerel $chain$1$CleanUpNumber
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$CleanUpNumber DD 021H
	DD	imagerel CleanUpNumber
	DD	imagerel CleanUpNumber+35
	DD	imagerel $unwind$CleanUpNumber
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$CleanUpNumber DD 020521H
	DD	067405H
	DD	imagerel CleanUpNumber
	DD	imagerel CleanUpNumber+35
	DD	imagerel $unwind$CleanUpNumber
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CleanUpNumber DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$InitializeNumber DD 081501H
	DD	087415H
	DD	076415H
	DD	063415H
	DD	0e0113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_FILL_MEMORY_UNIT DD 020501H
	DD	017405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_FILL_MEMORY_64 DD 020501H
	DD	017405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_FILL_MEMORY_32 DD 020501H
	DD	017405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_FILL_MEMORY_16 DD 020501H
	DD	017405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_FILL_MEMORY_BYTE DD 020501H
	DD	017405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ZERO_MEMORY_64 DD 020501H
	DD	017405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ZERO_MEMORY_32 DD 020501H
	DD	017405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ZERO_MEMORY_16 DD 020501H
	DD	017405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_ZERO_MEMORY_BYTE DD 020501H
	DD	017405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_COPY_MEMORY_UNIT DD 040a01H
	DD	02740aH
	DD	016405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Dispose DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Initialize_Memory DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AllocateChainedBuffer DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CleanUpChainBuffer DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DuplicateNumber DD 085401H
	DD	077454H
	DD	06344fH
	DD	08640bH
	DD	0e007320bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CommitNumber DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DeallocateNumber DD 020a01H
	DD	03006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AllocateNumber DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AttatchNumber DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$DeallocateBlock DD 021H
	DD	imagerel $LN9
	DD	imagerel $LN9+23
	DD	imagerel $unwind$DeallocateBlock
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$DeallocateBlock DD 020521H
	DD	047405H
	DD	imagerel $LN9
	DD	imagerel $LN9+23
	DD	imagerel $unwind$DeallocateBlock
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DeallocateBlock DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AllocateBlock DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DeallocateHeapArea DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AllocateHeapArea DD 010401H
	DD	04204H
xdata	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT DeallocateChainedBuffer_Imp
_TEXT	SEGMENT
header$ = 8
DeallocateChainedBuffer_Imp PROC			; COMDAT

; 613  :     __CHAIN_BUFFER_TAG* tag = &header->tag;
; 614  :     tag->next->prev = tag->prev;

	mov	rdx, QWORD PTR [rcx]

; 615  :     tag->prev->next = tag->next;
; 616  : #ifdef _DEBUG
; 617  :     _FILL_MEMORY_32((_UINT32_T*)header, 0xcccccccc, (sizeof(*header) + header->header.body.user_data_size + sizeof(_UINT32_T)) / sizeof(_UINT32_T));
; 618  : #endif
; 619  :     HeapFree(hLocalHeap, 0, tag);

	mov	r8, rcx
	mov	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR [rdx+8], rax
	mov	rdx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rdx], rax
	xor	edx, edx
	mov	rcx, QWORD PTR hLocalHeap
	rex_jmp	QWORD PTR __imp_HeapFree
DeallocateChainedBuffer_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT CheckChainedBuffer_Imp
_TEXT	SEGMENT
header$ = 8
CheckChainedBuffer_Imp PROC				; COMDAT

; 597  : #ifdef _DEBUG
; 598  :     size_t user_data_size = header->header.body.user_data_size;
; 599  :     _UINT32_T code1 = header->header.body.check_code;
; 600  :     _UINT32_T code2 = *(_UINT32_T*)((unsigned char*)header + sizeof(*header) + user_data_size);
; 601  :     if (code1 != code2)
; 602  :     {
; 603  :         // コードが一致していない場合 ≒ バッファオーバーランが発生している場合
; 604  : 
; 605  :         __UNIT_TYPE_DIV temp_r;
; 606  :         _DIVREM_UNIT(0, 1, 0, &temp_r);// 故意にゼロ除算例外を発生させる
; 607  :     }
; 608  : #endif
; 609  : }

	ret	0
CheckChainedBuffer_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT GetTrailingZeroBitCount
_TEXT	SEGMENT
p$ = 8
word_count$ = 16
GetTrailingZeroBitCount PROC				; COMDAT

; 466  :     __UNIT_TYPE bit_count = 0;

	xor	r8d, r8d

; 467  :     while (word_count > 0)

	test	rdx, rdx
	je	SHORT $LN3@GetTrailin
	npad	8
$LL2@GetTrailin:

; 468  :     {
; 469  :         --word_count;
; 470  :         if (*p != 0)

	mov	rax, QWORD PTR [rcx]
	dec	rdx
	test	rax, rax
	jne	SHORT $LN10@GetTrailin

; 472  :         bit_count += __UNIT_TYPE_BIT_COUNT;

	add	r8, 64					; 00000040H

; 473  :         ++p;

	add	rcx, 8
	test	rdx, rdx
	jne	SHORT $LL2@GetTrailin
$LN3@GetTrailin:

; 474  :     }
; 475  :     // このルートには到達しないはず
; 476  :     return (0);

	xor	eax, eax

; 477  : }

	ret	0
$LN10@GetTrailin:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 718  :         _BitScanForward64(&pos, x);

	bsf	rax, rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 471  :             return (bit_count + _TZCNT_ALT_UNIT(*p));

	cdqe
	add	rax, r8

; 477  : }

	ret	0
GetTrailingZeroBitCount ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT GetEffectiveBitLength
_TEXT	SEGMENT
p$ = 8
word_count$ = 16
effective_word_count$ = 24
GetEffectiveBitLength PROC				; COMDAT

; 444  :     if (p == NULL)

	test	rcx, rcx
	je	SHORT $LN3@GetEffecti

; 445  :     {
; 446  :         *effective_word_count = 0;
; 447  :         return (0);
; 448  :     }
; 449  :     p += word_count;

	lea	rax, QWORD PTR [rcx+rdx*8]

; 450  :     while (word_count != 0)

	test	rdx, rdx
	je	SHORT $LN3@GetEffecti
	npad	2
$LL2@GetEffecti:

; 451  :     {
; 452  :         --p;
; 453  :         if (*p != 0)

	cmp	QWORD PTR [rax-8], 0
	lea	rax, QWORD PTR [rax-8]
	jne	SHORT $LN11@GetEffecti

; 457  :         }
; 458  :         --word_count;

	sub	rdx, 1
	jne	SHORT $LL2@GetEffecti
$LN3@GetEffecti:

; 459  :     }
; 460  :     *effective_word_count = 0;

	mov	QWORD PTR [r8], 0

; 461  :     return (0);

	xor	eax, eax

; 462  : }

	ret	0
$LN11@GetEffecti:

; 454  :         {
; 455  :             *effective_word_count = word_count;

	mov	QWORD PTR [r8], rdx

; 456  :             return (word_count * __UNIT_TYPE_BIT_COUNT - _LZCNT_ALT_UNIT(*p));

	mov	rcx, QWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 624  :         if (x == 0)

	test	rcx, rcx
	jne	SHORT $LN8@GetEffecti

; 625  :             return (sizeof(x) * 8);

	mov	ecx, 64					; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 456  :             return (word_count * __UNIT_TYPE_BIT_COUNT - _LZCNT_ALT_UNIT(*p));

	shl	rdx, 6
	movsxd	rax, ecx
	sub	rdx, rax
	mov	rax, rdx

; 462  : }

	ret	0
$LN8@GetEffecti:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 638  :         _BitScanReverse64(&pos, x);

	bsr	rax, rcx

; 648  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 63					; 0000003fH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 456  :             return (word_count * __UNIT_TYPE_BIT_COUNT - _LZCNT_ALT_UNIT(*p));

	shl	rdx, 6
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 648  :         return (sizeof(x) * 8 - 1 - pos);

	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 456  :             return (word_count * __UNIT_TYPE_BIT_COUNT - _LZCNT_ALT_UNIT(*p));

	movsxd	rax, ecx
	sub	rdx, rax
	mov	rax, rdx

; 462  : }

	ret	0
GetEffectiveBitLength ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT CleanUpNumber
_TEXT	SEGMENT
p$ = 48
CleanUpNumber PROC					; COMDAT

; 396  : {

	push	rbx
	sub	rsp, 32					; 00000020H

; 397  :     if (p->BLOCK != NULL)

	mov	rax, QWORD PTR [rcx+64]
	mov	rbx, rcx
	test	rax, rax
	je	SHORT $LN2@CleanUpNum

; 398  :     {
; 399  :         DeallocateBlock(p->BLOCK, p->BLOCK_COUNT);

	mov	rcx, QWORD PTR [rcx+56]

; 202  :         __UNIT_TYPE* p = buffer - 1;

	lea	r8, QWORD PTR [rax-8]

; 203  :         if (*p != buffer_words)

	cmp	QWORD PTR [r8], rcx
	jne	SHORT $LN7@CleanUpNum

; 204  :         {
; 205  :             // もし、buffer の指す内容が壊れていることが明らかならば、二重解放の恐れがあるので解放処理はしない。
; 206  :         }
; 207  :         else
; 208  :         {
; 209  :             // 使用済みのバッファを既定のデータで塗りつぶす。
; 210  :             _FILL_MEMORY_UNIT(p, DEFAULT_MEMORY_DATA, buffer_words + 2);

	add	rcx, 2
	mov	QWORD PTR [rsp+48], rdi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 164  :         __stosq(d, x, count);

	mov	rdi, r8
	mov	rax, -3689348814741910324		; ccccccccccccccccH
	rep stosq
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 212  :             HeapFree(hLocalHeap, 0, p);

	mov	rcx, QWORD PTR hLocalHeap
	xor	edx, edx
	call	QWORD PTR __imp_HeapFree
	mov	rdi, QWORD PTR [rsp+48]
$LN7@CleanUpNum:

; 400  :         p->BLOCK = NULL;

	mov	QWORD PTR [rbx+64], 0
$LN2@CleanUpNum:

; 401  :     }
; 402  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
CleanUpNumber ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT InitializeNumber
_TEXT	SEGMENT
p$ = 48
bit_count$ = 56
light_check_code$ = 64
InitializeNumber PROC					; COMDAT

; 368  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	push	r14
	sub	rsp, 32					; 00000020H
	mov	r14, r8
	mov	rsi, rdx
	mov	rdi, rcx

; 369  :     if (bit_count > 0)

	test	rdx, rdx
	je	SHORT $LN2@Initialize

; 165  : 	__UNIT_TYPE* buffer = (__UNIT_TYPE*)HeapAlloc(hLocalHeap, HEAP_ZERO_MEMORY, bytes);

	mov	rcx, QWORD PTR hLocalHeap
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 188  :         return ((u + v - 1) / v);

	lea	rbx, QWORD PTR [rdx+63]
	shr	rbx, 6
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 165  : 	__UNIT_TYPE* buffer = (__UNIT_TYPE*)HeapAlloc(hLocalHeap, HEAP_ZERO_MEMORY, bytes);

	mov	edx, 8
	lea	r8, QWORD PTR [rbx*8+16]
	call	QWORD PTR __imp_HeapAlloc

; 166  : 	if (buffer == NULL)

	test	rax, rax
	je	SHORT $LN52@Initialize

; 167  : 		return (NULL);
; 168  : 	buffer[0] = words1;
; 169  :     *allocated_block_words = words1;
; 170  : #ifdef _DEBUG
; 171  :     // 乱数もどきを生成する。
; 172  : #ifdef _M_IX86
; 173  :     __UNIT_TYPE r = GetTickCount();
; 174  : #elif defined(_M_IX64)
; 175  : #ifdef _MSC_VER
; 176  :     __UNIT_TYPE r = GetTickCount64();
; 177  : #elif defined(__GNUC__)
; 178  :     _UINT32_T temp = GetTickCount();
; 179  :     __UNIT_TYPE r = _FROMWORDTODWORD(temp, temp);
; 180  : #else
; 181  : #error unknown compiler
; 182  : #endif
; 183  : #else
; 184  : #error unknown platform
; 185  : #endif
; 186  :     __UNIT_TYPE check_code = configuration_info.MEMORY_VERIFICATION_ENABLED ? CalculateCheckCode(&buffer[1], words1) : CHECK_CODE_INIT | r;
; 187  : #else
; 188  :     __UNIT_TYPE check_code = 0;
; 189  : #endif
; 190  :     buffer[words1 + 1] = check_code ^ (__UNIT_TYPE)&buffer[words1 + 1];

	lea	rcx, QWORD PTR [rbx+1]
	mov	QWORD PTR [rax], rbx
	lea	rcx, QWORD PTR [rax+rcx*8]
	mov	QWORD PTR [rcx], rcx

; 191  :     if (code != NULL)

	xor	ecx, ecx
	test	r14, r14
	je	SHORT $LN8@Initialize

; 192  :         *code = check_code;

	mov	QWORD PTR [r14], rcx
$LN8@Initialize:

; 193  :     return (&buffer[1]);

	add	rax, 8

; 370  :     {
; 371  :         __UNIT_TYPE word_count;
; 372  :         __UNIT_TYPE* block = AllocateBlock(bit_count, &word_count, light_check_code);
; 373  :         if (block == NULL)

	jne	SHORT $LN3@Initialize
$LN52@Initialize:

; 374  :             return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -6
	jmp	SHORT $LN1@Initialize
$LN2@Initialize:

; 375  :         ClearNumberHeader(p);
; 376  :         p->SIGNATURE1 = PMC_SIGNATURE;
; 377  :         p->SIGNATURE2 = PMC_UINT_SIGNATURE;
; 378  :         p->UNIT_BIT_COUNT = bit_count;
; 379  :         p->BLOCK_COUNT = word_count;
; 380  :         p->BLOCK = block;
; 381  :     }
; 382  :     else
; 383  :     {
; 384  :         // bit_count に 0 が与えられるのは、数値が 0 の場合。
; 385  :         ClearNumberHeader(p);
; 386  :         p->SIGNATURE1 = PMC_SIGNATURE;
; 387  :         p->SIGNATURE2 = PMC_UINT_SIGNATURE;
; 388  :         p->UNIT_BIT_COUNT = 0;
; 389  :         p->BLOCK_COUNT = 0;
; 390  :         p->BLOCK = NULL;

	xor	ecx, ecx
	mov	eax, ecx
	mov	ebx, ecx
	mov	esi, ecx
$LN3@Initialize:

; 391  :     }
; 392  :     return (PMC_STATUS_OK);

	mov	QWORD PTR [rdi], rcx
	mov	QWORD PTR [rdi+8], rcx
	mov	QWORD PTR [rdi+16], rcx
	mov	QWORD PTR [rdi+32], rcx
	mov	QWORD PTR [rdi+40], rcx
	mov	QWORD PTR [rdi+48], rcx
	mov	DWORD PTR [rdi+4], 1231244656		; 49634d70H
	mov	DWORD PTR [rdi+8], 1416522069		; 546e6955H
	mov	QWORD PTR [rdi+24], rsi
	mov	QWORD PTR [rdi+56], rbx
	mov	QWORD PTR [rdi+64], rax
	xor	eax, eax
$LN1@Initialize:

; 393  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	mov	rdi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
InitializeNumber ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT FillNumberHeader
_TEXT	SEGMENT
p$ = 8
FillNumberHeader PROC					; COMDAT

; 321  : #ifdef _M_IX64
; 322  :     if (sizeof(*p) == sizeof(_UINT64_T) * 9)
; 323  :     {
; 324  :         _UINT64_T* __p = (_UINT64_T*)p;
; 325  :         __p[0] = DEFAULT_MEMORY_DATA;

	mov	rax, -3689348814741910324		; ccccccccccccccccH
	mov	QWORD PTR [rcx], rax

; 326  :         __p[1] = DEFAULT_MEMORY_DATA;

	mov	QWORD PTR [rcx+8], rax

; 327  :         __p[2] = DEFAULT_MEMORY_DATA;

	mov	QWORD PTR [rcx+16], rax

; 328  :         __p[3] = DEFAULT_MEMORY_DATA;

	mov	QWORD PTR [rcx+24], rax

; 329  :         __p[4] = DEFAULT_MEMORY_DATA;

	mov	QWORD PTR [rcx+32], rax

; 330  :         __p[5] = DEFAULT_MEMORY_DATA;

	mov	QWORD PTR [rcx+40], rax

; 331  :         __p[6] = DEFAULT_MEMORY_DATA;

	mov	QWORD PTR [rcx+48], rax

; 332  :         __p[7] = DEFAULT_MEMORY_DATA;

	mov	QWORD PTR [rcx+56], rax

; 333  :         __p[8] = DEFAULT_MEMORY_DATA;

	mov	QWORD PTR [rcx+64], rax

; 334  :     }
; 335  :     else
; 336  :     {
; 337  : #endif
; 338  :         if (sizeof(*p) == sizeof(_UINT32_T) * 10)
; 339  :         {
; 340  :             _UINT32_T* __p = (_UINT32_T*)p;
; 341  :             __p[0] = (_UINT32_T)DEFAULT_MEMORY_DATA;
; 342  :             __p[1] = (_UINT32_T)DEFAULT_MEMORY_DATA;
; 343  :             __p[2] = (_UINT32_T)DEFAULT_MEMORY_DATA;
; 344  :             __p[3] = (_UINT32_T)DEFAULT_MEMORY_DATA;
; 345  :             __p[4] = (_UINT32_T)DEFAULT_MEMORY_DATA;
; 346  :             __p[5] = (_UINT32_T)DEFAULT_MEMORY_DATA;
; 347  :             __p[6] = (_UINT32_T)DEFAULT_MEMORY_DATA;
; 348  :             __p[7] = (_UINT32_T)DEFAULT_MEMORY_DATA;
; 349  :             __p[8] = (_UINT32_T)DEFAULT_MEMORY_DATA;
; 350  :             __p[9] = (_UINT32_T)DEFAULT_MEMORY_DATA;
; 351  :         }
; 352  : #ifdef _M_IX64
; 353  :         else if (sizeof(*p) % sizeof(_UINT64_T) == 0)
; 354  :             _FILL_MEMORY_64((_UINT64_T*)p, DEFAULT_MEMORY_DATA, sizeof(*p) / sizeof(_UINT64_T));
; 355  : #endif
; 356  :         else if (sizeof(*p) % sizeof(_UINT32_T) == 0)
; 357  :             _FILL_MEMORY_32((_UINT32_T*)p, (_UINT32_T)DEFAULT_MEMORY_DATA, sizeof(*p) / sizeof(_UINT32_T));
; 358  :         else if (sizeof(*p) % sizeof(_UINT16_T) == 0)
; 359  :             _FILL_MEMORY_16((_UINT16_T*)p, (_UINT16_T)DEFAULT_MEMORY_DATA, sizeof(*p) / sizeof(_UINT16_T));
; 360  :         else
; 361  :             _FILL_MEMORY_BYTE(p, (unsigned char)DEFAULT_MEMORY_DATA, sizeof(*p));
; 362  : #ifdef _M_IX64
; 363  :     }
; 364  : #endif
; 365  : }

	ret	0
FillNumberHeader ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT ClearNumberHeader
_TEXT	SEGMENT
p$ = 8
ClearNumberHeader PROC					; COMDAT

; 273  : #ifdef _M_IX64
; 274  :     if (sizeof(*p) == sizeof(_UINT64_T) * 9)
; 275  :     {
; 276  :         _UINT64_T* __p = (_UINT64_T*)p;
; 277  :         __p[0] = 0;

	xor	eax, eax
	mov	QWORD PTR [rcx], rax

; 278  :         __p[1] = 0;

	mov	QWORD PTR [rcx+8], rax

; 279  :         __p[2] = 0;

	mov	QWORD PTR [rcx+16], rax

; 280  :         __p[3] = 0;

	mov	QWORD PTR [rcx+24], rax

; 281  :         __p[4] = 0;

	mov	QWORD PTR [rcx+32], rax

; 282  :         __p[5] = 0;

	mov	QWORD PTR [rcx+40], rax

; 283  :         __p[6] = 0;

	mov	QWORD PTR [rcx+48], rax

; 284  :         __p[7] = 0;

	mov	QWORD PTR [rcx+56], rax

; 285  :         __p[8] = 0;

	mov	QWORD PTR [rcx+64], rax

; 286  :     }
; 287  :     else
; 288  :     {
; 289  : #endif
; 290  :         if (sizeof(*p) == sizeof(_UINT32_T) * 10)
; 291  :         {
; 292  :             _UINT32_T* __p = (_UINT32_T*)p;
; 293  :             __p[0] = 0;
; 294  :             __p[1] = 0;
; 295  :             __p[2] = 0;
; 296  :             __p[3] = 0;
; 297  :             __p[4] = 0;
; 298  :             __p[5] = 0;
; 299  :             __p[6] = 0;
; 300  :             __p[7] = 0;
; 301  :             __p[8] = 0;
; 302  :             __p[9] = 0;
; 303  :         }
; 304  : #ifdef _M_IX64
; 305  :         else if (sizeof(*p) % sizeof(_UINT64_T) == 0)
; 306  :             _ZERO_MEMORY_64((_UINT64_T*)p, sizeof(*p) / sizeof(_UINT64_T));
; 307  : #endif
; 308  :         else if (sizeof(*p) % sizeof(_UINT32_T) == 0)
; 309  :             _ZERO_MEMORY_32((_UINT32_T*)p, sizeof(*p) / sizeof(_UINT32_T));
; 310  :         else if (sizeof(*p) % sizeof(_UINT16_T) == 0)
; 311  :             _ZERO_MEMORY_16((_UINT16_T*)p, sizeof(*p) / sizeof(_UINT16_T));
; 312  :         else
; 313  :             _ZERO_MEMORY_BYTE(p, sizeof(*p));
; 314  : #ifdef _M_IX64
; 315  :     }
; 316  : #endif
; 317  : }

	ret	0
ClearNumberHeader ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT CheckBlock
_TEXT	SEGMENT
buffer$ = 8
CheckBlock PROC						; COMDAT

; 236  : #ifdef _DEBUG
; 237  :     if (buffer == NULL)
; 238  :         return (PMC_STATUS_OK);
; 239  :     --buffer;
; 240  :     __UNIT_TYPE words = buffer[0];
; 241  :     __UNIT_TYPE code_desired = buffer[words + 1];
; 242  :     __UNIT_TYPE code_actual = CalculateCheckCode(&buffer[1], words);
; 243  :     if (code_actual == code_desired)
; 244  :         return (PMC_STATUS_OK);
; 245  :     else
; 246  :         return (PMC_STATUS_BAD_BUFFER);
; 247  : #else
; 248  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 249  : #endif
; 250  : }

	ret	0
CheckBlock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT CommitBlock
_TEXT	SEGMENT
buffer$ = 8
CommitBlock PROC					; COMDAT

; 220  :     if (buffer != NULL)

	test	rcx, rcx
	je	SHORT $LN2@CommitBloc

; 221  :     {
; 222  :         --buffer;
; 223  :         __UNIT_TYPE words = buffer[0];
; 224  : #ifdef _DEBUG
; 225  :         __UNIT_TYPE code = CalculateCheckCode(&buffer[1], words);
; 226  : #else
; 227  :         __UNIT_TYPE code = 0;
; 228  : #endif
; 229  :         buffer[words + 1] = code;

	mov	rax, QWORD PTR [rcx-8]
	mov	QWORD PTR [rcx+rax*8], 0
$LN2@CommitBloc:

; 230  :     }
; 231  : }

	ret	0
CommitBlock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT CalculateCheckCode
_TEXT	SEGMENT
p$ = 8
words$ = 16
CalculateCheckCode PROC					; COMDAT

; 54   : 	__UNIT_TYPE code = CHECK_CODE_INIT;
; 55   : 	
; 56   :     __UNIT_TYPE count = words >> 5;

	mov	r8, rdx
	mov	rax, -8897841259083430780		; 8484848484848484H
	shr	r8, 5

; 57   : 	while (count != 0)

	test	r8, r8
	je	$LN3@CalculateC
	npad	6
$LL2@CalculateC:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 59   :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	xor	rax, QWORD PTR [rcx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 60   :         code = _ROTATE_L_UNIT(code, 3) ^ p[1];

	xor	rax, QWORD PTR [rcx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 61   :         code = _ROTATE_L_UNIT(code, 3) ^ p[2];

	xor	rax, QWORD PTR [rcx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 62   :         code = _ROTATE_L_UNIT(code, 3) ^ p[3];

	xor	rax, QWORD PTR [rcx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 63   :         code = _ROTATE_L_UNIT(code, 3) ^ p[4];

	xor	rax, QWORD PTR [rcx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 64   :         code = _ROTATE_L_UNIT(code, 3) ^ p[5];

	xor	rax, QWORD PTR [rcx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 65   :         code = _ROTATE_L_UNIT(code, 3) ^ p[6];

	xor	rax, QWORD PTR [rcx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 66   :         code = _ROTATE_L_UNIT(code, 3) ^ p[7];

	xor	rax, QWORD PTR [rcx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 67   :         code = _ROTATE_L_UNIT(code, 3) ^ p[8];

	xor	rax, QWORD PTR [rcx+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 68   :         code = _ROTATE_L_UNIT(code, 3) ^ p[9];

	xor	rax, QWORD PTR [rcx+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 69   :         code = _ROTATE_L_UNIT(code, 3) ^ p[10];

	xor	rax, QWORD PTR [rcx+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 70   :         code = _ROTATE_L_UNIT(code, 3) ^ p[11];

	xor	rax, QWORD PTR [rcx+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 71   :         code = _ROTATE_L_UNIT(code, 3) ^ p[12];

	xor	rax, QWORD PTR [rcx+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 72   :         code = _ROTATE_L_UNIT(code, 3) ^ p[13];

	xor	rax, QWORD PTR [rcx+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 73   :         code = _ROTATE_L_UNIT(code, 3) ^ p[14];

	xor	rax, QWORD PTR [rcx+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 74   :         code = _ROTATE_L_UNIT(code, 3) ^ p[15];

	xor	rax, QWORD PTR [rcx+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 75   :         code = _ROTATE_L_UNIT(code, 3) ^ p[16];

	xor	rax, QWORD PTR [rcx+128]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 76   :         code = _ROTATE_L_UNIT(code, 3) ^ p[17];

	xor	rax, QWORD PTR [rcx+136]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 77   :         code = _ROTATE_L_UNIT(code, 3) ^ p[18];

	xor	rax, QWORD PTR [rcx+144]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 78   :         code = _ROTATE_L_UNIT(code, 3) ^ p[19];

	xor	rax, QWORD PTR [rcx+152]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 79   :         code = _ROTATE_L_UNIT(code, 3) ^ p[20];

	xor	rax, QWORD PTR [rcx+160]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 80   :         code = _ROTATE_L_UNIT(code, 3) ^ p[21];

	xor	rax, QWORD PTR [rcx+168]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 81   :         code = _ROTATE_L_UNIT(code, 3) ^ p[22];

	xor	rax, QWORD PTR [rcx+176]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 82   :         code = _ROTATE_L_UNIT(code, 3) ^ p[23];

	xor	rax, QWORD PTR [rcx+184]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 83   :         code = _ROTATE_L_UNIT(code, 3) ^ p[24];

	xor	rax, QWORD PTR [rcx+192]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 84   :         code = _ROTATE_L_UNIT(code, 3) ^ p[25];

	xor	rax, QWORD PTR [rcx+200]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 85   :         code = _ROTATE_L_UNIT(code, 3) ^ p[26];

	xor	rax, QWORD PTR [rcx+208]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 86   :         code = _ROTATE_L_UNIT(code, 3) ^ p[27];

	xor	rax, QWORD PTR [rcx+216]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 87   :         code = _ROTATE_L_UNIT(code, 3) ^ p[28];

	xor	rax, QWORD PTR [rcx+224]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 88   :         code = _ROTATE_L_UNIT(code, 3) ^ p[29];

	xor	rax, QWORD PTR [rcx+232]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 89   :         code = _ROTATE_L_UNIT(code, 3) ^ p[30];

	xor	rax, QWORD PTR [rcx+240]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 90   :         code = _ROTATE_L_UNIT(code, 3) ^ p[31];

	xor	rax, QWORD PTR [rcx+248]

; 91   :         p += 32;

	add	rcx, 256				; 00000100H

; 92   :         --count;

	sub	r8, 1
	jne	$LL2@CalculateC
$LN3@CalculateC:

; 93   :     }
; 94   : 
; 95   : 	if (words & 0x10)

	test	dl, 16
	je	$LN4@CalculateC
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 97   :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	xor	rax, QWORD PTR [rcx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 98   :         code = _ROTATE_L_UNIT(code, 3) ^ p[1];

	xor	rax, QWORD PTR [rcx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 99   :         code = _ROTATE_L_UNIT(code, 3) ^ p[2];

	xor	rax, QWORD PTR [rcx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 100  :         code = _ROTATE_L_UNIT(code, 3) ^ p[3];

	xor	rax, QWORD PTR [rcx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 101  :         code = _ROTATE_L_UNIT(code, 3) ^ p[4];

	xor	rax, QWORD PTR [rcx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 102  :         code = _ROTATE_L_UNIT(code, 3) ^ p[5];

	xor	rax, QWORD PTR [rcx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 103  :         code = _ROTATE_L_UNIT(code, 3) ^ p[6];

	xor	rax, QWORD PTR [rcx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 104  :         code = _ROTATE_L_UNIT(code, 3) ^ p[7];

	xor	rax, QWORD PTR [rcx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 105  :         code = _ROTATE_L_UNIT(code, 3) ^ p[8];

	xor	rax, QWORD PTR [rcx+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 106  :         code = _ROTATE_L_UNIT(code, 3) ^ p[9];

	xor	rax, QWORD PTR [rcx+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 107  :         code = _ROTATE_L_UNIT(code, 3) ^ p[10];

	xor	rax, QWORD PTR [rcx+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 108  :         code = _ROTATE_L_UNIT(code, 3) ^ p[11];

	xor	rax, QWORD PTR [rcx+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 109  :         code = _ROTATE_L_UNIT(code, 3) ^ p[12];

	xor	rax, QWORD PTR [rcx+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 110  :         code = _ROTATE_L_UNIT(code, 3) ^ p[13];

	xor	rax, QWORD PTR [rcx+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 111  :         code = _ROTATE_L_UNIT(code, 3) ^ p[14];

	xor	rax, QWORD PTR [rcx+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 112  :         code = _ROTATE_L_UNIT(code, 3) ^ p[15];

	xor	rax, QWORD PTR [rcx+120]

; 113  :         p += 16;

	sub	rcx, -128				; ffffffffffffff80H
$LN4@CalculateC:

; 114  :     }
; 115  : 
; 116  :     if (words & 0x8)

	test	dl, 8
	je	SHORT $LN5@CalculateC
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 118  :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	xor	rax, QWORD PTR [rcx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 119  :         code = _ROTATE_L_UNIT(code, 3) ^ p[1];

	xor	rax, QWORD PTR [rcx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 120  :         code = _ROTATE_L_UNIT(code, 3) ^ p[2];

	xor	rax, QWORD PTR [rcx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 121  :         code = _ROTATE_L_UNIT(code, 3) ^ p[3];

	xor	rax, QWORD PTR [rcx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 122  :         code = _ROTATE_L_UNIT(code, 3) ^ p[4];

	xor	rax, QWORD PTR [rcx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 123  :         code = _ROTATE_L_UNIT(code, 3) ^ p[5];

	xor	rax, QWORD PTR [rcx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 124  :         code = _ROTATE_L_UNIT(code, 3) ^ p[6];

	xor	rax, QWORD PTR [rcx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 125  :         code = _ROTATE_L_UNIT(code, 3) ^ p[7];

	xor	rax, QWORD PTR [rcx+56]

; 126  :         p += 8;

	add	rcx, 64					; 00000040H
$LN5@CalculateC:

; 127  :     }
; 128  : 
; 129  :     if (words & 0x4)

	test	dl, 4
	je	SHORT $LN6@CalculateC
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 131  :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	xor	rax, QWORD PTR [rcx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 132  :         code = _ROTATE_L_UNIT(code, 3) ^ p[1];

	xor	rax, QWORD PTR [rcx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 133  :         code = _ROTATE_L_UNIT(code, 3) ^ p[2];

	xor	rax, QWORD PTR [rcx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 134  :         code = _ROTATE_L_UNIT(code, 3) ^ p[3];

	xor	rax, QWORD PTR [rcx+24]

; 135  :         p += 4;

	add	rcx, 32					; 00000020H
$LN6@CalculateC:

; 136  :     }
; 137  : 
; 138  :     if (words & 0x2)

	test	dl, 2
	je	SHORT $LN7@CalculateC
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 140  :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	xor	rax, QWORD PTR [rcx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 141  :         code = _ROTATE_L_UNIT(code, 3) ^ p[1];

	xor	rax, QWORD PTR [rcx+8]

; 142  :         p += 2;

	add	rcx, 16
$LN7@CalculateC:

; 143  :     }
; 144  : 
; 145  :     if (words & 0x1)

	test	dl, 1
	je	SHORT $LN140@CalculateC
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 479  :         return (_rotl64(x, count));

	rol	rax, 3
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 146  :         code = _ROTATE_L_UNIT(code, 3) ^ p[0];

	xor	rax, QWORD PTR [rcx]
$LN140@CalculateC:

; 147  :     
; 148  :     return (code);
; 149  : }

	ret	0
CalculateCheckCode ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _TZCNT_ALT_UNIT
_TEXT	SEGMENT
x$ = 8
_TZCNT_ALT_UNIT PROC					; COMDAT

; 704  :         if (x == 0)

	test	rcx, rcx
	jne	SHORT $LN2@TZCNT_ALT_

; 705  :             return (sizeof(x) * 8);

	lea	eax, QWORD PTR [rcx+64]

; 719  : #elif defined(__GNUC__)
; 720  :         _UINT64_T pos;
; 721  :         __asm__("bsfq %1, %0" : "=r"(pos) : "rm"(x));
; 722  : #else
; 723  : #error unknown compiler
; 724  : #endif
; 725  : #else
; 726  : #error unknown platform
; 727  : #endif
; 728  :         return (pos);
; 729  :     }

	ret	0
$LN2@TZCNT_ALT_:

; 706  : #ifdef _M_IX86
; 707  :         _UINT32_T pos;
; 708  : #ifdef _MSC_VER
; 709  :         _BitScanForward(&pos, x);
; 710  : #elif defined(__GNUC__)
; 711  :         __asm__("bsfl %1, %0" : "=r"(pos) : "rm"(x));
; 712  : #else
; 713  : #error unknown compiler
; 714  : #endif
; 715  : #elif defined(_M_X64)
; 716  : #ifdef _MSC_VER
; 717  :         _UINT32_T pos;
; 718  :         _BitScanForward64(&pos, x);

	bsf	rax, rcx

; 719  : #elif defined(__GNUC__)
; 720  :         _UINT64_T pos;
; 721  :         __asm__("bsfq %1, %0" : "=r"(pos) : "rm"(x));
; 722  : #else
; 723  : #error unknown compiler
; 724  : #endif
; 725  : #else
; 726  : #error unknown platform
; 727  : #endif
; 728  :         return (pos);
; 729  :     }

	ret	0
_TZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _LZCNT_ALT_UNIT
_TEXT	SEGMENT
x$ = 8
_LZCNT_ALT_UNIT PROC					; COMDAT

; 624  :         if (x == 0)

	test	rcx, rcx
	jne	SHORT $LN2@LZCNT_ALT_

; 625  :             return (sizeof(x) * 8);

	mov	eax, 64					; 00000040H

; 649  :     }

	ret	0
$LN2@LZCNT_ALT_:

; 626  : #ifdef _M_IX86
; 627  :         _UINT32_T pos;
; 628  : #ifdef _MSC_VER
; 629  :         _BitScanReverse(&pos, x);
; 630  : #elif defined(__GNUC__)
; 631  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 632  : #else
; 633  : #error unknown compiler
; 634  : #endif
; 635  : #elif defined(_M_X64)
; 636  : #ifdef _MSC_VER
; 637  :         _UINT32_T pos;
; 638  :         _BitScanReverse64(&pos, x);

	bsr	rcx, rcx

; 639  : #elif defined(__GNUC__)
; 640  :         _UINT64_T pos;
; 641  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 642  : #else
; 643  : #error unknown compiler
; 644  : #endif
; 645  : #else
; 646  : #error unknown platform
; 647  : #endif
; 648  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 63					; 0000003fH
	sub	eax, ecx

; 649  :     }

	ret	0
_LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ROTATE_L_UNIT
_TEXT	SEGMENT
x$ = 8
count$ = 16
_ROTATE_L_UNIT PROC					; COMDAT

; 475  :     {

	mov	rax, rcx

; 476  : #ifdef _M_IX86
; 477  :         return (_rotl(x, count));
; 478  : #elif defined(_M_X64)
; 479  :         return (_rotl64(x, count));

	mov	ecx, edx
	rol	rax, cl

; 480  : #else
; 481  : #error unknown platform
; 482  : #endif
; 483  :     }

	ret	0
_ROTATE_L_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _DIVREM_UNIT
_TEXT	SEGMENT
u_high$ = 8
u_low$ = 16
v$ = 24
r$ = 32
_DIVREM_UNIT PROC					; COMDAT

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, ecx
	mov	ecx, edx

; 379  : #ifdef _MSC_VER
; 380  :         if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))
; 381  :         {
; 382  :             // 64bit/32bitの除算を行う組み込み関数は実装されていない。
; 383  :             _UINT64_T t = _FROMWORDTODWORD(u_high, u_low);
; 384  :             *r = (_UINT32_T)(t % v);

	xor	edx, edx

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	shl	rax, 32					; 00000020H
	or	rax, rcx

; 379  : #ifdef _MSC_VER
; 380  :         if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))
; 381  :         {
; 382  :             // 64bit/32bitの除算を行う組み込み関数は実装されていない。
; 383  :             _UINT64_T t = _FROMWORDTODWORD(u_high, u_low);
; 384  :             *r = (_UINT32_T)(t % v);

	mov	ecx, r8d
	div	rcx
	mov	DWORD PTR [r9], edx

; 385  :             return ((_UINT32_T)(t / v));
; 386  :         }
; 387  :         else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))
; 388  :         {
; 389  :             // 以下の理由のため、MSVCでは 128bit/64bit の除算を実装できない。運用で回避すること。
; 390  :             // ・(x64 に限らず) 除算の組み込み関数が用意されていない。
; 391  :             // ・128bit 整数のデータ型が用意されていない。
; 392  :             // ・x64 ではインラインアセンブラがサポートされていない。
; 393  :             *r = 0;
; 394  :             return (0);
; 395  :         }
; 396  :         else
; 397  :         {
; 398  :             // 未知のプラットフォームの場合はとりあえず適当なものを返す。
; 399  :             *r = 0;
; 400  :             return (0);
; 401  :         }
; 402  : #elif defined(__GNUC__)
; 403  :         __UNIT_TYPE q;
; 404  :         if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))
; 405  :             __asm__("divl %4": "=a"(q), "=d"(*r) : "0"(u_low), "1"(u_high), "rm"(v));
; 406  :         else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))
; 407  :             __asm__("divq %4": "=a"(q), "=d"(*r) : "0"(u_low), "1"(u_high), "rm"(v));
; 408  :         else
; 409  :         {
; 410  :             // 未知のプラットフォームの場合はとりあえず適当なものを返す。
; 411  :             *r = 0;
; 412  :             q = 0;
; 413  :         }
; 414  :         return (q);
; 415  : #else
; 416  : #error unknown compiler
; 417  : #endif
; 418  :     }

	ret	0
_DIVREM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _DIVIDE_CEILING_SIZE
_TEXT	SEGMENT
u$ = 8
v$ = 16
_DIVIDE_CEILING_SIZE PROC				; COMDAT

; 193  :         return ((u + v - 1) / v);

	lea	rax, QWORD PTR [rdx-1]
	mov	r8, rdx
	add	rax, rcx
	xor	edx, edx
	div	r8

; 194  :     }

	ret	0
_DIVIDE_CEILING_SIZE ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _DIVIDE_CEILING_UNIT
_TEXT	SEGMENT
u$ = 8
v$ = 16
_DIVIDE_CEILING_UNIT PROC				; COMDAT

; 188  :         return ((u + v - 1) / v);

	lea	rax, QWORD PTR [rdx-1]
	mov	r8, rdx
	add	rax, rcx
	xor	edx, edx
	div	r8

; 189  :     }

	ret	0
_DIVIDE_CEILING_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _FROMWORDTODWORD
_TEXT	SEGMENT
value_high$ = 8
value_low$ = 16
_FROMWORDTODWORD PROC					; COMDAT

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, ecx
	shl	rax, 32					; 00000020H
	mov	ecx, edx
	or	rax, rcx

; 173  :     }

	ret	0
_FROMWORDTODWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _FILL_MEMORY_UNIT
_TEXT	SEGMENT
d$ = 8
x$ = 16
count$ = 24
_FILL_MEMORY_UNIT PROC					; COMDAT

; 160  :     {

	mov	QWORD PTR [rsp+8], rdi

; 161  : #ifdef _M_IX86
; 162  :         __stosd((unsigned long*)d, x, (unsigned long)count);
; 163  : #elif defined(_M_X64)
; 164  :         __stosq(d, x, count);

	mov	rdi, rcx
	mov	rax, rdx
	mov	rcx, r8
	rep stosq

; 165  : #else
; 166  : #error unknown platform
; 167  : #endif
; 168  :     }

	mov	rdi, QWORD PTR [rsp+8]
	ret	0
_FILL_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _FILL_MEMORY_64
_TEXT	SEGMENT
d$ = 8
x$ = 16
count$ = 24
_FILL_MEMORY_64 PROC					; COMDAT

; 154  :     {

	mov	QWORD PTR [rsp+8], rdi

; 155  :         __stosq(d, x, count);

	mov	rdi, rcx
	mov	rax, rdx
	mov	rcx, r8
	rep stosq

; 156  :     }

	mov	rdi, QWORD PTR [rsp+8]
	ret	0
_FILL_MEMORY_64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _FILL_MEMORY_32
_TEXT	SEGMENT
d$ = 8
x$ = 16
count$ = 24
_FILL_MEMORY_32 PROC					; COMDAT

; 148  :     {

	mov	QWORD PTR [rsp+8], rdi

; 149  :         __stosd((unsigned long*)d, x, count);

	mov	rdi, rcx
	mov	eax, edx
	mov	rcx, r8
	rep stosd

; 150  :     }

	mov	rdi, QWORD PTR [rsp+8]
	ret	0
_FILL_MEMORY_32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _FILL_MEMORY_16
_TEXT	SEGMENT
d$ = 8
x$ = 16
count$ = 24
_FILL_MEMORY_16 PROC					; COMDAT

; 143  :     {

	mov	QWORD PTR [rsp+8], rdi

; 144  :         __stosw(d, x, count);

	mov	rdi, rcx
	movzx	eax, dx
	mov	rcx, r8
	rep stosw

; 145  :     }

	mov	rdi, QWORD PTR [rsp+8]
	ret	0
_FILL_MEMORY_16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _FILL_MEMORY_BYTE
_TEXT	SEGMENT
d$ = 8
x$ = 16
count$ = 24
_FILL_MEMORY_BYTE PROC					; COMDAT

; 138  :     {

	mov	QWORD PTR [rsp+8], rdi

; 139  :         __stosb(d, x, count);

	mov	rdi, rcx
	movzx	eax, dl
	mov	rcx, r8
	rep stosb

; 140  :     }

	mov	rdi, QWORD PTR [rsp+8]
	ret	0
_FILL_MEMORY_BYTE ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ZERO_MEMORY_64
_TEXT	SEGMENT
d$ = 8
count$ = 16
_ZERO_MEMORY_64 PROC					; COMDAT

; 104  :     {

	mov	QWORD PTR [rsp+8], rdi

; 105  :         __stosq(d, 0, count);

	mov	rdi, rcx
	xor	eax, eax
	mov	rcx, rdx
	rep stosq

; 106  :     }

	mov	rdi, QWORD PTR [rsp+8]
	ret	0
_ZERO_MEMORY_64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ZERO_MEMORY_32
_TEXT	SEGMENT
d$ = 8
count$ = 16
_ZERO_MEMORY_32 PROC					; COMDAT

; 98   :     {

	mov	QWORD PTR [rsp+8], rdi

; 99   :         __stosd((unsigned long*)d, 0, count);

	mov	rdi, rcx
	xor	eax, eax
	mov	rcx, rdx
	rep stosd

; 100  :     }

	mov	rdi, QWORD PTR [rsp+8]
	ret	0
_ZERO_MEMORY_32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ZERO_MEMORY_16
_TEXT	SEGMENT
d$ = 8
count$ = 16
_ZERO_MEMORY_16 PROC					; COMDAT

; 93   :     {

	mov	QWORD PTR [rsp+8], rdi

; 94   :         __stosw(d, 0, count);

	mov	rdi, rcx
	xor	eax, eax
	mov	rcx, rdx
	rep stosw

; 95   :     }

	mov	rdi, QWORD PTR [rsp+8]
	ret	0
_ZERO_MEMORY_16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ZERO_MEMORY_BYTE
_TEXT	SEGMENT
d$ = 8
count$ = 16
_ZERO_MEMORY_BYTE PROC					; COMDAT

; 88   :     {

	mov	QWORD PTR [rsp+8], rdi

; 89   :         __stosb(d, 0, count);

	mov	rdi, rcx
	xor	eax, eax
	mov	rcx, rdx
	rep stosb

; 90   :     }

	mov	rdi, QWORD PTR [rsp+8]
	ret	0
_ZERO_MEMORY_BYTE ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _COPY_MEMORY_UNIT
_TEXT	SEGMENT
d$ = 8
s$ = 16
count$ = 24
_COPY_MEMORY_UNIT PROC					; COMDAT

; 60   :     {

	mov	QWORD PTR [rsp+8], rsi
	mov	QWORD PTR [rsp+16], rdi

; 61   : #ifdef _M_IX86
; 62   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);
; 63   : #elif defined(_M_X64)
; 64   :         __movsq(d, s, count);

	mov	rdi, rcx
	mov	rsi, rdx
	mov	rcx, r8
	rep movsq

; 65   : #else
; 66   : #error unknown platform
; 67   : #endif
; 68   :     }

	mov	rsi, QWORD PTR [rsp+8]
	mov	rdi, QWORD PTR [rsp+16]
	ret	0
_COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT PMC_GetConstantValue_I
_TEXT	SEGMENT
type$ = 8
o$ = 16
PMC_GetConstantValue_I PROC				; COMDAT

; 555  :     switch (type)

	sub	ecx, 1
	je	SHORT $LN4@PMC_GetCon
	cmp	ecx, 1
	je	SHORT $LN5@PMC_GetCon

; 562  :         return (PMC_STATUS_OK);
; 563  :     default:
; 564  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1

; 565  :     }
; 566  : }

	ret	0
$LN5@PMC_GetCon:

; 559  :         return (PMC_STATUS_OK);
; 560  :     case PMC_CONSTANT_ONE:
; 561  :         *o = (PMC_HANDLE_UINT)&number_one;

	lea	rax, OFFSET FLAT:number_one

; 565  :     }
; 566  : }

	mov	QWORD PTR [rdx], rax
	xor	eax, eax
	ret	0
$LN4@PMC_GetCon:

; 556  :     {
; 557  :     case PMC_CONSTANT_ZERO:
; 558  :         *o = (PMC_HANDLE_UINT)&number_zero;

	lea	rax, OFFSET FLAT:number_zero

; 565  :     }
; 566  : }

	mov	QWORD PTR [rdx], rax
	xor	eax, eax
	ret	0
PMC_GetConstantValue_I ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT PMC_Dispose
_TEXT	SEGMENT
p$ = 48
PMC_Dispose PROC					; COMDAT

; 569  : {

$LN38:
	push	rbx
	sub	rsp, 32					; 00000020H

; 514  :     if (p->SIGNATURE1 != PMC_SIGNATURE || p->SIGNATURE2 != PMC_UINT_SIGNATURE)

	cmp	DWORD PTR [rcx+4], 1231244656		; 49634d70H

; 569  : {

	mov	rbx, rcx

; 514  :     if (p->SIGNATURE1 != PMC_SIGNATURE || p->SIGNATURE2 != PMC_UINT_SIGNATURE)

	jne	SHORT $LN14@PMC_Dispos
	cmp	DWORD PTR [rcx+8], 1416522069		; 546e6955H
	jne	SHORT $LN14@PMC_Dispos

; 435  :     if (p == NULL || p->IS_STATIC)

	test	BYTE PTR [rcx+48], 1
	jne	SHORT $LN14@PMC_Dispos

; 436  :         return;
; 437  :     CleanUpNumber(p);

	call	CleanUpNumber

; 325  :         __p[0] = DEFAULT_MEMORY_DATA;

	mov	rax, -3689348814741910324		; ccccccccccccccccH

; 439  :     HeapFree(hLocalHeap, 0, p);

	mov	r8, rbx

; 325  :         __p[0] = DEFAULT_MEMORY_DATA;

	mov	QWORD PTR [rbx], rax

; 439  :     HeapFree(hLocalHeap, 0, p);

	xor	edx, edx

; 326  :         __p[1] = DEFAULT_MEMORY_DATA;

	mov	QWORD PTR [rbx+8], rax

; 327  :         __p[2] = DEFAULT_MEMORY_DATA;

	mov	QWORD PTR [rbx+16], rax

; 328  :         __p[3] = DEFAULT_MEMORY_DATA;

	mov	QWORD PTR [rbx+24], rax

; 329  :         __p[4] = DEFAULT_MEMORY_DATA;

	mov	QWORD PTR [rbx+32], rax

; 330  :         __p[5] = DEFAULT_MEMORY_DATA;

	mov	QWORD PTR [rbx+40], rax

; 331  :         __p[6] = DEFAULT_MEMORY_DATA;

	mov	QWORD PTR [rbx+48], rax

; 332  :         __p[7] = DEFAULT_MEMORY_DATA;

	mov	QWORD PTR [rbx+56], rax

; 333  :         __p[8] = DEFAULT_MEMORY_DATA;

	mov	QWORD PTR [rbx+64], rax

; 439  :     HeapFree(hLocalHeap, 0, p);

	mov	rcx, QWORD PTR hLocalHeap

; 570  :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;
; 571  :     PMC_STATUS_CODE result = CheckNumber(np);
; 572  :     if (result != PMC_STATUS_OK)
; 573  :         return;
; 574  :     DeallocateNumber(np);
; 575  :     return;
; 576  : }

	add	rsp, 32					; 00000020H
	pop	rbx

; 439  :     HeapFree(hLocalHeap, 0, p);

	rex_jmp	QWORD PTR __imp_HeapFree
$LN14@PMC_Dispos:

; 570  :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;
; 571  :     PMC_STATUS_CODE result = CheckNumber(np);
; 572  :     if (result != PMC_STATUS_OK)
; 573  :         return;
; 574  :     DeallocateNumber(np);
; 575  :     return;
; 576  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
PMC_Dispose ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT Initialize_Memory
_TEXT	SEGMENT
feature$ = 48
Initialize_Memory PROC					; COMDAT

; 687  : {

$LN129:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 277  :         __p[0] = 0;

	xor	edi, edi

; 688  :     PMC_STATUS_CODE result = PMC_STATUS_OK;
; 689  : 
; 690  :     BOOL number_zero_ok = TRUE;
; 691  :     BOOL number_one_ok = TRUE;
; 692  :     if (result == PMC_STATUS_OK)
; 693  :     {
; 694  :         result = AttatchNumber(&number_zero, 0);
; 695  :         if (result == PMC_STATUS_OK)
; 696  :         {
; 697  :             CommitNumber(&number_zero);

	lea	rcx, OFFSET FLAT:number_zero
	xorps	xmm0, xmm0

; 277  :         __p[0] = 0;

	mov	QWORD PTR number_zero, rdi
	xorps	xmm1, xmm1

; 282  :         __p[5] = 0;
; 283  :         __p[6] = 0;

	mov	QWORD PTR number_zero+48, rdi
	movdqu	XMMWORD PTR number_zero+8, xmm0

; 386  :         p->SIGNATURE1 = PMC_SIGNATURE;

	mov	DWORD PTR number_zero+4, 1231244656	; 49634d70H

; 387  :         p->SIGNATURE2 = PMC_UINT_SIGNATURE;

	mov	DWORD PTR number_zero+8, 1416522069	; 546e6955H

; 409  :     p->IS_STATIC = TRUE;

	mov	DWORD PTR number_zero+48, 1

; 281  :         __p[4] = 0;

	movdqu	XMMWORD PTR number_zero+32, xmm1

; 388  :         p->UNIT_BIT_COUNT = 0;

	mov	QWORD PTR number_zero+24, rdi

; 389  :         p->BLOCK_COUNT = 0;

	mov	QWORD PTR number_zero+56, rdi

; 390  :         p->BLOCK = NULL;

	mov	QWORD PTR number_zero+64, rdi

; 688  :     PMC_STATUS_CODE result = PMC_STATUS_OK;
; 689  : 
; 690  :     BOOL number_zero_ok = TRUE;
; 691  :     BOOL number_one_ok = TRUE;
; 692  :     if (result == PMC_STATUS_OK)
; 693  :     {
; 694  :         result = AttatchNumber(&number_zero, 0);
; 695  :         if (result == PMC_STATUS_OK)
; 696  :         {
; 697  :             CommitNumber(&number_zero);

	call	CommitNumber

; 165  : 	__UNIT_TYPE* buffer = (__UNIT_TYPE*)HeapAlloc(hLocalHeap, HEAP_ZERO_MEMORY, bytes);

	mov	rcx, QWORD PTR hLocalHeap
	lea	edx, QWORD PTR [rdi+8]
	lea	r8d, QWORD PTR [rdi+24]
	call	QWORD PTR __imp_HeapAlloc

; 166  : 	if (buffer == NULL)

	test	rax, rax
	je	SHORT $LN126@Initialize

; 167  : 		return (NULL);
; 168  : 	buffer[0] = words1;
; 169  :     *allocated_block_words = words1;
; 170  : #ifdef _DEBUG
; 171  :     // 乱数もどきを生成する。
; 172  : #ifdef _M_IX86
; 173  :     __UNIT_TYPE r = GetTickCount();
; 174  : #elif defined(_M_IX64)
; 175  : #ifdef _MSC_VER
; 176  :     __UNIT_TYPE r = GetTickCount64();
; 177  : #elif defined(__GNUC__)
; 178  :     _UINT32_T temp = GetTickCount();
; 179  :     __UNIT_TYPE r = _FROMWORDTODWORD(temp, temp);
; 180  : #else
; 181  : #error unknown compiler
; 182  : #endif
; 183  : #else
; 184  : #error unknown platform
; 185  : #endif
; 186  :     __UNIT_TYPE check_code = configuration_info.MEMORY_VERIFICATION_ENABLED ? CalculateCheckCode(&buffer[1], words1) : CHECK_CODE_INIT | r;
; 187  : #else
; 188  :     __UNIT_TYPE check_code = 0;
; 189  : #endif
; 190  :     buffer[words1 + 1] = check_code ^ (__UNIT_TYPE)&buffer[words1 + 1];

	lea	rcx, QWORD PTR [rax+8]
	mov	QWORD PTR [rax], 1
	add	rax, 16
	mov	QWORD PTR [rcx+8], rax

; 373  :         if (block == NULL)

	test	rcx, rcx
	je	SHORT $LN126@Initialize
	xorps	xmm0, xmm0

; 277  :         __p[0] = 0;

	mov	QWORD PTR number_one, rdi
	xorps	xmm1, xmm1

; 282  :         __p[5] = 0;
; 283  :         __p[6] = 0;

	mov	QWORD PTR number_one+48, rdi
	movdqu	XMMWORD PTR number_one+8, xmm0

; 377  :         p->SIGNATURE2 = PMC_UINT_SIGNATURE;

	mov	DWORD PTR number_one+8, 1416522069	; 546e6955H

; 407  :     if (result != PMC_STATUS_OK)

	mov	ebx, edi

; 281  :         __p[4] = 0;

	movdqu	XMMWORD PTR number_one+32, xmm1

; 376  :         p->SIGNATURE1 = PMC_SIGNATURE;

	mov	DWORD PTR number_one+4, 1231244656	; 49634d70H

; 378  :         p->UNIT_BIT_COUNT = bit_count;

	mov	QWORD PTR number_one+24, 1

; 379  :         p->BLOCK_COUNT = word_count;

	mov	QWORD PTR number_one+56, 1

; 380  :         p->BLOCK = block;

	mov	QWORD PTR number_one+64, rcx

; 409  :     p->IS_STATIC = TRUE;

	mov	DWORD PTR number_one+48, 1
	jmp	SHORT $LN64@Initialize
$LN126@Initialize:

; 374  :             return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	rcx, QWORD PTR number_one+64
	mov	ebx, -6
$LN64@Initialize:

; 698  :             number_zero_ok = TRUE;
; 699  :         }
; 700  :     }
; 701  : 
; 702  :     if (result == PMC_STATUS_OK)
; 703  :     {
; 704  :         result = AttatchNumber(&number_one, 1);
; 705  :         if (result == PMC_STATUS_OK)

	test	ebx, ebx
	jne	SHORT $LN5@Initialize

; 706  :         {
; 707  :             number_one.BLOCK[0] = 1;

	mov	QWORD PTR [rcx], 1

; 708  :             CommitNumber(&number_one);

	lea	rcx, OFFSET FLAT:number_one
	call	CommitNumber

; 709  :             number_one_ok = TRUE;
; 710  :         }
; 711  :     }
; 712  : 
; 713  :     if (result != PMC_STATUS_OK)
; 714  :     {
; 715  :         if (number_zero_ok)
; 716  :             DetatchNumber(&number_zero);
; 717  :         if (number_one_ok)
; 718  :             DetatchNumber(&number_one);
; 719  :     }
; 720  :     return (result);

	mov	eax, edi

; 721  : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN5@Initialize:

; 428  :     if (p == NULL || !p->IS_STATIC)

	test	BYTE PTR number_zero+48, 1
	je	SHORT $LN120@Initialize

; 429  :         return;
; 430  :     CleanUpNumber(p);

	lea	rcx, OFFSET FLAT:number_zero
	call	CleanUpNumber
$LN120@Initialize:

; 428  :     if (p == NULL || !p->IS_STATIC)

	test	BYTE PTR number_one+48, 1
	je	SHORT $LN127@Initialize

; 429  :         return;
; 430  :     CleanUpNumber(p);

	lea	rcx, OFFSET FLAT:number_one
	call	CleanUpNumber
$LN127@Initialize:

; 721  : }

	mov	eax, ebx
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
Initialize_Memory ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT DeallocateChainedBuffer
_TEXT	SEGMENT
root$ = 8
buffer$ = 16
DeallocateChainedBuffer PROC				; COMDAT

; 664  :     struct __tag_CHAIN_BUFFER_HEADER* header = (struct __tag_CHAIN_BUFFER_HEADER*)buffer - 1;
; 665  :     CheckChainedBuffer_Imp(header);
; 666  : 
; 667  :     for (__CHAIN_BUFFER_TAG* tag = root->tag.next; tag != &root->tag; tag = tag->next)

	mov	rax, QWORD PTR [rcx]
	lea	r8, QWORD PTR [rdx-32]
	cmp	rax, rcx
	je	SHORT $LN3@Deallocate
	npad	4
$LL4@Deallocate:

; 668  :     {
; 669  :         if (tag == (__CHAIN_BUFFER_TAG*)header)

	cmp	rax, r8
	je	SHORT $LN20@Deallocate

; 664  :     struct __tag_CHAIN_BUFFER_HEADER* header = (struct __tag_CHAIN_BUFFER_HEADER*)buffer - 1;
; 665  :     CheckChainedBuffer_Imp(header);
; 666  : 
; 667  :     for (__CHAIN_BUFFER_TAG* tag = root->tag.next; tag != &root->tag; tag = tag->next)

	mov	rax, QWORD PTR [rax]
	cmp	rax, rcx
	jne	SHORT $LL4@Deallocate

; 670  :         {
; 671  :             DeallocateChainedBuffer_Imp(header);
; 672  :             return;
; 673  :         }
; 674  :     }
; 675  :     // 指定された領域のポインタがチェーンの中に見つからなかった場合
; 676  :     // 主原因は与えられたポインタが誤っているかあるいは二重解放であること
; 677  : 
; 678  :     {
; 679  :         __UNIT_TYPE_DIV temp_r;
; 680  :         _DIVREM_UNIT(0, 1, 0, &temp_r);// 故意にゼロ除算例外を発生させる
; 681  :     }
; 682  : }

	ret	0
$LN20@Deallocate:

; 614  :     tag->next->prev = tag->prev;

	mov	rcx, QWORD PTR [r8]

; 615  :     tag->prev->next = tag->next;
; 616  : #ifdef _DEBUG
; 617  :     _FILL_MEMORY_32((_UINT32_T*)header, 0xcccccccc, (sizeof(*header) + header->header.body.user_data_size + sizeof(_UINT32_T)) / sizeof(_UINT32_T));
; 618  : #endif
; 619  :     HeapFree(hLocalHeap, 0, tag);

	xor	edx, edx
	mov	rax, QWORD PTR [r8+8]
	mov	QWORD PTR [rcx+8], rax
	mov	rcx, QWORD PTR [r8+8]
	mov	rax, QWORD PTR [r8]
	mov	QWORD PTR [rcx], rax
	mov	rcx, QWORD PTR hLocalHeap
	rex_jmp	QWORD PTR __imp_HeapFree
$LN3@Deallocate:

; 670  :         {
; 671  :             DeallocateChainedBuffer_Imp(header);
; 672  :             return;
; 673  :         }
; 674  :     }
; 675  :     // 指定された領域のポインタがチェーンの中に見つからなかった場合
; 676  :     // 主原因は与えられたポインタが誤っているかあるいは二重解放であること
; 677  : 
; 678  :     {
; 679  :         __UNIT_TYPE_DIV temp_r;
; 680  :         _DIVREM_UNIT(0, 1, 0, &temp_r);// 故意にゼロ除算例外を発生させる
; 681  :     }
; 682  : }

	ret	0
DeallocateChainedBuffer ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT CheckChainedBuffer
_TEXT	SEGMENT
buffer$ = 8
CheckChainedBuffer PROC					; COMDAT

; 659  :     CheckChainedBuffer_Imp((struct __tag_CHAIN_BUFFER_HEADER*)buffer - 1);
; 660  : }

	ret	0
CheckChainedBuffer ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT AllocateChainedBuffer
_TEXT	SEGMENT
root$ = 48
size$ = 56
AllocateChainedBuffer PROC				; COMDAT

; 640  : {

$LN7:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 193  :         return ((u + v - 1) / v);

	lea	rsi, QWORD PTR [rdx+3]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 640  : {

	mov	rdi, rcx

; 641  :     size_t user_data_size = _DIVIDE_CEILING_SIZE(size, sizeof(_UINT32_T)) * sizeof(_UINT32_T);
; 642  :     void* buffer = HeapAlloc(hLocalHeap, HEAP_ZERO_MEMORY, sizeof(struct __tag_CHAIN_BUFFER_HEADER) + user_data_size + sizeof(_UINT32_T));

	mov	rcx, QWORD PTR hLocalHeap
	and	rsi, -4
	mov	edx, 8
	lea	r8, QWORD PTR [rsi+36]
	call	QWORD PTR __imp_HeapAlloc
	mov	rbx, rax

; 643  :     if (buffer == NULL)

	test	rax, rax
	jne	SHORT $LN2@AllocateCh

; 655  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN2@AllocateCh:

; 644  :         return (NULL);
; 645  :     _UINT32_T code = GetTickCount();

	call	QWORD PTR __imp_GetTickCount

; 646  :     struct __tag_CHAIN_BUFFER_HEADER* buffer_header = (struct __tag_CHAIN_BUFFER_HEADER*)buffer;
; 647  :     buffer_header->tag.prev = &root->tag;

	mov	QWORD PTR [rbx+8], rdi

; 648  :     buffer_header->tag.next = root->tag.next;

	mov	rcx, QWORD PTR [rdi]
	mov	QWORD PTR [rbx], rcx

; 649  :     root->tag.next->prev = &buffer_header->tag;

	mov	rcx, QWORD PTR [rdi]
	mov	QWORD PTR [rcx+8], rbx

; 650  :     root->tag.next = &buffer_header->tag;

	mov	QWORD PTR [rdi], rbx

; 651  :     buffer_header->header.body.check_code = code;

	mov	DWORD PTR [rbx+24], eax

; 652  :     buffer_header->header.body.user_data_size = user_data_size;

	mov	QWORD PTR [rbx+16], rsi

; 653  :     *(_UINT32_T*)&((unsigned char*)buffer)[sizeof(struct __tag_CHAIN_BUFFER_HEADER) + user_data_size] = code;

	mov	DWORD PTR [rbx+rsi+32], eax

; 654  :     return (&((struct __tag_CHAIN_BUFFER_HEADER*)buffer)[1]);

	lea	rax, QWORD PTR [rbx+32]

; 655  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
AllocateChainedBuffer ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT CleanUpChainBuffer
_TEXT	SEGMENT
root$ = 48
CleanUpChainBuffer PROC					; COMDAT

; 629  : {

$LN14:
	push	rbx
	sub	rsp, 32					; 00000020H

; 630  :     __CHAIN_BUFFER_TAG* root_tag = &root->tag;
; 631  :     while (root_tag->next != root_tag)

	mov	rax, QWORD PTR [rcx]
	mov	rbx, rcx
	cmp	rax, rcx
	je	SHORT $LN3@CleanUpCha
$LL2@CleanUpCha:

; 614  :     tag->next->prev = tag->prev;

	mov	r8, QWORD PTR [rax]
	mov	rdx, QWORD PTR [rax+8]
	mov	QWORD PTR [r8+8], rdx

; 615  :     tag->prev->next = tag->next;

	mov	r8, QWORD PTR [rax+8]
	mov	rdx, QWORD PTR [rax]
	mov	QWORD PTR [r8], rdx

; 616  : #ifdef _DEBUG
; 617  :     _FILL_MEMORY_32((_UINT32_T*)header, 0xcccccccc, (sizeof(*header) + header->header.body.user_data_size + sizeof(_UINT32_T)) / sizeof(_UINT32_T));
; 618  : #endif
; 619  :     HeapFree(hLocalHeap, 0, tag);

	mov	r8, rax
	mov	rcx, QWORD PTR hLocalHeap
	xor	edx, edx
	call	QWORD PTR __imp_HeapFree

; 630  :     __CHAIN_BUFFER_TAG* root_tag = &root->tag;
; 631  :     while (root_tag->next != root_tag)

	mov	rax, QWORD PTR [rbx]
	cmp	rax, rbx
	jne	SHORT $LL2@CleanUpCha
$LN3@CleanUpCha:

; 632  :     {
; 633  :         __CHAIN_BUFFER_TAG* p = root_tag->next;
; 634  :         CheckChainedBuffer_Imp((struct __tag_CHAIN_BUFFER_HEADER*)p);
; 635  :         DeallocateChainedBuffer_Imp((struct __tag_CHAIN_BUFFER_HEADER*)p);
; 636  :     }
; 637  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
CleanUpChainBuffer ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT InitializeChainBuffer
_TEXT	SEGMENT
root$ = 8
InitializeChainBuffer PROC				; COMDAT

; 624  :     root->tag.next = &root->tag;

	mov	QWORD PTR [rcx], rcx

; 625  :     root->tag.prev = &root->tag;

	mov	QWORD PTR [rcx+8], rcx

; 626  : }

	ret	0
InitializeChainBuffer ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT DuplicateNumber
_TEXT	SEGMENT
x$ = 48
op$ = 56
DuplicateNumber PROC					; COMDAT

; 531  : {

$LN18:
	mov	QWORD PTR [rsp+24], rsi
	push	r14
	sub	rsp, 32					; 00000020H

; 532  :     if (x->IS_STATIC)

	test	BYTE PTR [rcx+48], 1
	mov	r14, rdx
	mov	rsi, rcx
	je	SHORT $LN2@DuplicateN

; 533  :     {
; 534  :         *op = x;

	mov	QWORD PTR [rdx], rcx

; 535  :         return (PMC_STATUS_OK);

	xor	eax, eax

; 551  : }

	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
$LN2@DuplicateN:

; 536  :     }
; 537  :     if (x->IS_ZERO)

	test	BYTE PTR [rcx], 1
	je	SHORT $LN3@DuplicateN

; 538  :     {
; 539  :         *op = &number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR [rdx], rax

; 540  :         return (PMC_STATUS_OK);

	xor	eax, eax

; 551  : }

	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
$LN3@DuplicateN:

; 415  :     NUMBER_HEADER* p = (NUMBER_HEADER*)HeapAlloc(hLocalHeap, HEAP_ZERO_MEMORY, sizeof(NUMBER_HEADER));

	mov	edx, 8
	mov	QWORD PTR [rsp+48], rbx
	mov	QWORD PTR [rsp+56], rdi

; 541  :     }
; 542  :     __UNIT_TYPE x_bit_count = x->UNIT_BIT_COUNT;

	mov	rdi, QWORD PTR [rcx+24]

; 415  :     NUMBER_HEADER* p = (NUMBER_HEADER*)HeapAlloc(hLocalHeap, HEAP_ZERO_MEMORY, sizeof(NUMBER_HEADER));

	mov	rcx, QWORD PTR hLocalHeap
	lea	r8d, QWORD PTR [rdx+64]
	call	QWORD PTR __imp_HeapAlloc
	mov	rbx, rax

; 416  :     if (p == NULL)

	test	rax, rax
	jne	SHORT $LN7@DuplicateN

; 417  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	lea	eax, QWORD PTR [rbx-6]
	jmp	SHORT $LN16@DuplicateN
$LN7@DuplicateN:

; 418  :     PMC_STATUS_CODE result = InitializeNumber(p, bit_count, light_check_code);

	xor	r8d, r8d
	mov	rdx, rdi
	mov	rcx, rbx
	call	InitializeNumber

; 419  :     if (result != PMC_STATUS_OK)

	test	eax, eax
	jne	SHORT $LN16@DuplicateN

; 420  :         return (result);
; 421  :     p->IS_STATIC = FALSE;

	and	DWORD PTR [rbx+48], -2			; fffffffeH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 188  :         return ((u + v - 1) / v);

	lea	rcx, QWORD PTR [rdi+63]

; 64   :         __movsq(d, s, count);

	mov	rdi, QWORD PTR [rbx+64]
	mov	rsi, QWORD PTR [rsi+64]

; 188  :         return ((u + v - 1) / v);

	shr	rcx, 6

; 64   :         __movsq(d, s, count);

	rep movsq
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 548  :     CommitNumber(o);

	mov	rcx, rbx
	call	CommitNumber

; 549  :     *op = o;
; 550  :     return (PMC_STATUS_OK);

	xor	eax, eax
	mov	QWORD PTR [r14], rbx
$LN16@DuplicateN:

; 551  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rdi, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
DuplicateNumber ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT CheckNumber
_TEXT	SEGMENT
p$ = 8
CheckNumber PROC					; COMDAT

; 514  :     if (p->SIGNATURE1 != PMC_SIGNATURE || p->SIGNATURE2 != PMC_UINT_SIGNATURE)

	cmp	DWORD PTR [rcx+4], 1231244656		; 49634d70H
	jne	SHORT $LN3@CheckNumbe
	cmp	DWORD PTR [rcx+8], 1416522069		; 546e6955H
	jne	SHORT $LN3@CheckNumbe

; 516  :     if (!p->IS_ZERO)
; 517  :     {
; 518  :         PMC_STATUS_CODE result;
; 519  :         if ((result = CheckBlock(p->BLOCK)) != PMC_STATUS_OK)
; 520  :             return (result);
; 521  : #ifdef _DEBUG
; 522  :         __UNIT_TYPE desired_hash_code = CalculateCheckCode(p->BLOCK, p->UNIT_WORD_COUNT);
; 523  :         if (desired_hash_code != p->HASH_CODE)
; 524  :             return (PMC_STATUS_BAD_BUFFER);
; 525  : #endif
; 526  :     }
; 527  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 528  : }

	ret	0
$LN3@CheckNumbe:

; 515  :         return (PMC_STATUS_BAD_BUFFER);

	mov	eax, -257				; fffffffffffffeffH

; 528  : }

	ret	0
CheckNumber ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT CommitNumber
_TEXT	SEGMENT
p$ = 48
CommitNumber PROC					; COMDAT

; 480  : {

$LN39:
	sub	rsp, 40					; 00000028H
	mov	r10, rcx

; 220  :     if (buffer != NULL)

	xor	r11d, r11d

; 481  :     CommitBlock(p->BLOCK);

	mov	rcx, QWORD PTR [rcx+64]

; 220  :     if (buffer != NULL)

	test	rcx, rcx
	je	SHORT $LN8@CommitNumb

; 221  :     {
; 222  :         --buffer;
; 223  :         __UNIT_TYPE words = buffer[0];
; 224  : #ifdef _DEBUG
; 225  :         __UNIT_TYPE code = CalculateCheckCode(&buffer[1], words);
; 226  : #else
; 227  :         __UNIT_TYPE code = 0;
; 228  : #endif
; 229  :         buffer[words + 1] = code;

	mov	rax, QWORD PTR [rcx-8]
	mov	QWORD PTR [rcx+rax*8], r11
	mov	rcx, QWORD PTR [r10+64]
$LN8@CommitNumb:

; 482  :     p->UNIT_BIT_COUNT = GetEffectiveBitLength(p->BLOCK, p->BLOCK_COUNT, &p->UNIT_WORD_COUNT);

	mov	r9, QWORD PTR [r10+56]

; 444  :     if (p == NULL)

	test	rcx, rcx
	je	SHORT $LN12@CommitNumb

; 445  :     {
; 446  :         *effective_word_count = 0;
; 447  :         return (0);
; 448  :     }
; 449  :     p += word_count;

	lea	rax, QWORD PTR [rcx+r9*8]

; 450  :     while (word_count != 0)

	test	r9, r9
	je	SHORT $LN12@CommitNumb
$LL11@CommitNumb:

; 451  :     {
; 452  :         --p;
; 453  :         if (*p != 0)

	cmp	QWORD PTR [rax-8], r11
	lea	rax, QWORD PTR [rax-8]
	jne	SHORT $LN29@CommitNumb

; 457  :         }
; 458  :         --word_count;

	sub	r9, 1
	jne	SHORT $LL11@CommitNumb
$LN12@CommitNumb:

; 482  :     p->UNIT_BIT_COUNT = GetEffectiveBitLength(p->BLOCK, p->BLOCK_COUNT, &p->UNIT_WORD_COUNT);

	mov	r9, r11
	mov	QWORD PTR [r10+16], r11
$LN10@CommitNumb:
	mov	QWORD PTR [r10+24], r9

; 483  :     if (p->UNIT_BIT_COUNT <= 0)

	test	r9, r9
	jne	SHORT $LN2@CommitNumb

; 484  :     {
; 485  :         p->HASH_CODE = 0;
; 486  :         p->IS_ZERO = TRUE;

	mov	eax, DWORD PTR [r10]
	and	eax, -11				; fffffff5H
	mov	QWORD PTR [r10+32], r11

; 487  :         p->IS_ONE = FALSE;
; 488  :         p->IS_EVEN = TRUE;
; 489  :         p->TRAILING_ZERO_BITS_COUNT = 0;
; 490  :         p->IS_POWER_OF_TWO = FALSE;

	or	eax, 5
	mov	QWORD PTR [r10+40], r11

; 509  :     }
; 510  : }

	mov	DWORD PTR [r10], eax
	add	rsp, 40					; 00000028H
	ret	0
$LN29@CommitNumb:

; 455  :             *effective_word_count = word_count;

	mov	QWORD PTR [r10+16], r9

; 456  :             return (word_count * __UNIT_TYPE_BIT_COUNT - _LZCNT_ALT_UNIT(*p));

	mov	rcx, QWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 624  :         if (x == 0)

	test	rcx, rcx
	jne	SHORT $LN17@CommitNumb

; 625  :             return (sizeof(x) * 8);

	mov	ecx, 64					; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 456  :             return (word_count * __UNIT_TYPE_BIT_COUNT - _LZCNT_ALT_UNIT(*p));

	shl	r9, 6
	movsxd	rax, ecx
	sub	r9, rax
	jmp	SHORT $LN10@CommitNumb
$LN17@CommitNumb:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 638  :         _BitScanReverse64(&pos, x);

	bsr	rax, rcx

; 648  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 63					; 0000003fH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 456  :             return (word_count * __UNIT_TYPE_BIT_COUNT - _LZCNT_ALT_UNIT(*p));

	shl	r9, 6
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 648  :         return (sizeof(x) * 8 - 1 - pos);

	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 456  :             return (word_count * __UNIT_TYPE_BIT_COUNT - _LZCNT_ALT_UNIT(*p));

	movsxd	rax, ecx
	sub	r9, rax
	jmp	SHORT $LN10@CommitNumb
$LN2@CommitNumb:

; 491  :     }
; 492  :     else if (p->UNIT_BIT_COUNT == 1)

	mov	rdx, QWORD PTR [r10+16]
	mov	rcx, QWORD PTR [r10+64]
	call	CalculateCheckCode
	mov	QWORD PTR [r10+32], rax
	mov	edx, DWORD PTR [r10]
	mov	rcx, QWORD PTR [r10+64]
	and	edx, -2					; fffffffeH
	cmp	r9, 1
	jne	SHORT $LN4@CommitNumb

; 493  :     {
; 494  :         p->HASH_CODE = CalculateCheckCode(p->BLOCK, p->UNIT_WORD_COUNT);
; 495  :         p->IS_ZERO = FALSE;

	mov	DWORD PTR [r10], edx

; 496  :         p->IS_ONE = p->BLOCK[0] == 1; // 無条件でTRUEでも大丈夫だが念のため。

	mov	rax, QWORD PTR [rcx]
	mov	ecx, 2

; 497  :         p->IS_EVEN = FALSE;
; 498  :         p->TRAILING_ZERO_BITS_COUNT = 0;

	mov	QWORD PTR [r10+40], r11
	cmp	rax, r9
	cmove	r11d, ecx
	and	edx, -3					; fffffffdH

; 499  :         p->IS_POWER_OF_TWO = TRUE;

	or	r11d, edx
	and	r11d, -5				; fffffffbH
	or	r11d, 8

; 509  :     }
; 510  : }

	mov	DWORD PTR [r10], r11d
	add	rsp, 40					; 00000028H
	ret	0
$LN4@CommitNumb:

; 500  :     }
; 501  :     else
; 502  :     {
; 503  :         p->HASH_CODE = CalculateCheckCode(p->BLOCK, p->UNIT_WORD_COUNT);
; 504  :         p->IS_ZERO = FALSE;
; 505  :         p->IS_ONE = FALSE;

	and	edx, -3					; fffffffdH
	mov	DWORD PTR [r10], edx

; 506  :         p->IS_EVEN = !(p->BLOCK[0] & 1);

	mov	eax, DWORD PTR [rcx]
	shl	eax, 2
	not	eax
	xor	eax, edx
	and	eax, 4
	xor	eax, edx

; 466  :     __UNIT_TYPE bit_count = 0;

	mov	rdx, r11

; 506  :         p->IS_EVEN = !(p->BLOCK[0] & 1);

	mov	DWORD PTR [r10], eax

; 507  :         p->TRAILING_ZERO_BITS_COUNT = GetTrailingZeroBitCount(p->BLOCK, p->UNIT_WORD_COUNT);

	mov	rax, QWORD PTR [r10+16]

; 467  :     while (word_count > 0)

	test	rax, rax
	je	SHORT $LN21@CommitNumb
	npad	2
$LL20@CommitNumb:

; 468  :     {
; 469  :         --word_count;
; 470  :         if (*p != 0)

	mov	r8, QWORD PTR [rcx]
	dec	rax
	test	r8, r8
	jne	SHORT $LN30@CommitNumb

; 472  :         bit_count += __UNIT_TYPE_BIT_COUNT;

	add	rdx, 64					; 00000040H

; 473  :         ++p;

	add	rcx, 8
	test	rax, rax
	jne	SHORT $LL20@CommitNumb
$LN21@CommitNumb:

; 474  :     }
; 475  :     // このルートには到達しないはず
; 476  :     return (0);

	mov	rax, r11
$LN19@CommitNumb:

; 507  :         p->TRAILING_ZERO_BITS_COUNT = GetTrailingZeroBitCount(p->BLOCK, p->UNIT_WORD_COUNT);

	mov	QWORD PTR [r10+40], rax

; 508  :         p->IS_POWER_OF_TWO = p->TRAILING_ZERO_BITS_COUNT + 1 == p->UNIT_BIT_COUNT;

	mov	ecx, 8
	inc	rax
	cmp	rax, r9
	mov	eax, DWORD PTR [r10]
	cmove	r11d, ecx
	and	eax, -9					; fffffff7H
	or	r11d, eax

; 509  :     }
; 510  : }

	mov	DWORD PTR [r10], r11d
	add	rsp, 40					; 00000028H
	ret	0
$LN30@CommitNumb:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 718  :         _BitScanForward64(&pos, x);

	bsf	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 471  :             return (bit_count + _TZCNT_ALT_UNIT(*p));

	cdqe
	add	rax, rdx
	jmp	SHORT $LN19@CommitNumb
CommitNumber ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT DeallocateNumber
_TEXT	SEGMENT
p$ = 48
DeallocateNumber PROC					; COMDAT

; 434  : {

$LN27:

; 435  :     if (p == NULL || p->IS_STATIC)

	test	rcx, rcx
	je	SHORT $LN25@Deallocate
	push	rbx
	sub	rsp, 32					; 00000020H
	test	BYTE PTR [rcx+48], 1
	mov	rbx, rcx
	jne	SHORT $LN3@Deallocate

; 436  :         return;
; 437  :     CleanUpNumber(p);

	call	CleanUpNumber

; 325  :         __p[0] = DEFAULT_MEMORY_DATA;

	mov	rax, -3689348814741910324		; ccccccccccccccccH

; 438  :     FillNumberHeader(p);
; 439  :     HeapFree(hLocalHeap, 0, p);

	mov	r8, rbx

; 325  :         __p[0] = DEFAULT_MEMORY_DATA;

	mov	QWORD PTR [rbx], rax

; 438  :     FillNumberHeader(p);
; 439  :     HeapFree(hLocalHeap, 0, p);

	xor	edx, edx

; 326  :         __p[1] = DEFAULT_MEMORY_DATA;

	mov	QWORD PTR [rbx+8], rax

; 327  :         __p[2] = DEFAULT_MEMORY_DATA;

	mov	QWORD PTR [rbx+16], rax

; 328  :         __p[3] = DEFAULT_MEMORY_DATA;

	mov	QWORD PTR [rbx+24], rax

; 329  :         __p[4] = DEFAULT_MEMORY_DATA;

	mov	QWORD PTR [rbx+32], rax

; 330  :         __p[5] = DEFAULT_MEMORY_DATA;

	mov	QWORD PTR [rbx+40], rax

; 331  :         __p[6] = DEFAULT_MEMORY_DATA;

	mov	QWORD PTR [rbx+48], rax

; 332  :         __p[7] = DEFAULT_MEMORY_DATA;

	mov	QWORD PTR [rbx+56], rax

; 333  :         __p[8] = DEFAULT_MEMORY_DATA;

	mov	QWORD PTR [rbx+64], rax

; 438  :     FillNumberHeader(p);
; 439  :     HeapFree(hLocalHeap, 0, p);

	mov	rcx, QWORD PTR hLocalHeap
	call	QWORD PTR __imp_HeapFree
$LN3@Deallocate:

; 440  : }

	add	rsp, 32					; 00000020H
	pop	rbx
$LN25@Deallocate:
	ret	0
DeallocateNumber ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT DetatchNumber
_TEXT	SEGMENT
p$ = 8
DetatchNumber PROC					; COMDAT

; 428  :     if (p == NULL || !p->IS_STATIC)

	test	rcx, rcx
	je	SHORT $LN3@DetatchNum
	test	BYTE PTR [rcx+48], 1
	jne	CleanUpNumber
$LN3@DetatchNum:

; 429  :         return;
; 430  :     CleanUpNumber(p);
; 431  : }

	ret	0
DetatchNumber ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT AllocateNumber
_TEXT	SEGMENT
pp$ = 48
bit_count$ = 56
light_check_code$ = 64
AllocateNumber PROC					; COMDAT

; 414  : {

$LN6:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	mov	rsi, r8

; 415  :     NUMBER_HEADER* p = (NUMBER_HEADER*)HeapAlloc(hLocalHeap, HEAP_ZERO_MEMORY, sizeof(NUMBER_HEADER));

	mov	edx, 8
	mov	rdi, rcx
	mov	rcx, QWORD PTR hLocalHeap
	lea	r8d, QWORD PTR [rdx+64]
	call	QWORD PTR __imp_HeapAlloc
	mov	rbx, rax

; 416  :     if (p == NULL)

	test	rax, rax
	jne	SHORT $LN2@AllocateNu

; 417  :         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	lea	eax, QWORD PTR [rbx-6]
	jmp	SHORT $LN1@AllocateNu
$LN2@AllocateNu:

; 418  :     PMC_STATUS_CODE result = InitializeNumber(p, bit_count, light_check_code);

	mov	r8, rsi
	mov	rdx, rbp
	mov	rcx, rbx
	call	InitializeNumber

; 419  :     if (result != PMC_STATUS_OK)

	test	eax, eax
	jne	SHORT $LN1@AllocateNu

; 420  :         return (result);
; 421  :     p->IS_STATIC = FALSE;

	and	DWORD PTR [rbx+48], -2			; fffffffeH

; 422  :     *pp = p;

	mov	QWORD PTR [rdi], rbx
$LN1@AllocateNu:

; 423  :     return (PMC_STATUS_OK);
; 424  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
AllocateNumber ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT AttatchNumber
_TEXT	SEGMENT
p$ = 48
bit_count$ = 56
AttatchNumber PROC					; COMDAT

; 405  : {

$LN5:
	push	rbx
	sub	rsp, 32					; 00000020H

; 406  :     PMC_STATUS_CODE result = InitializeNumber(p, bit_count, NULL);

	xor	r8d, r8d
	mov	rbx, rcx
	call	InitializeNumber

; 407  :     if (result != PMC_STATUS_OK)

	test	eax, eax
	jne	SHORT $LN1@AttatchNum

; 408  :         return (result);
; 409  :     p->IS_STATIC = TRUE;

	or	DWORD PTR [rbx+48], 1
$LN1@AttatchNum:

; 410  :     return (PMC_STATUS_OK);
; 411  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
AttatchNumber ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT CheckBlockLight
_TEXT	SEGMENT
buffer$ = 8
code$ = 16
CheckBlockLight PROC					; COMDAT

; 255  : #ifdef _DEBUG
; 256  :     if (buffer == NULL)
; 257  :         return (PMC_STATUS_OK);
; 258  :     --buffer;
; 259  :     __UNIT_TYPE words = buffer[0];
; 260  :     __UNIT_TYPE code_desired = buffer[words + 1] ^ (__UNIT_TYPE)&buffer[words + 1];
; 261  :     __UNIT_TYPE code_actual = code;
; 262  :     if (code_actual == code_desired)
; 263  :         return (PMC_STATUS_OK);
; 264  :     else
; 265  :         return (PMC_STATUS_BAD_BUFFER);
; 266  : #else
; 267  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 268  : #endif
; 269  : }

	ret	0
CheckBlockLight ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT DeallocateBlock
_TEXT	SEGMENT
buffer$ = 48
buffer_words$ = 56
DeallocateBlock PROC					; COMDAT

; 199  : {

$LN9:
	sub	rsp, 40					; 00000028H

; 200  : 	if (buffer != NULL)

	test	rcx, rcx
	je	SHORT $LN4@Deallocate

; 201  : 	{
; 202  :         __UNIT_TYPE* p = buffer - 1;
; 203  :         if (*p != buffer_words)

	cmp	QWORD PTR [rcx-8], rdx
	lea	r8, QWORD PTR [rcx-8]
	jne	SHORT $LN4@Deallocate

; 204  :         {
; 205  :             // もし、buffer の指す内容が壊れていることが明らかならば、二重解放の恐れがあるので解放処理はしない。
; 206  :         }
; 207  :         else
; 208  :         {
; 209  :             // 使用済みのバッファを既定のデータで塗りつぶす。
; 210  :             _FILL_MEMORY_UNIT(p, DEFAULT_MEMORY_DATA, buffer_words + 2);

	lea	rcx, QWORD PTR [rdx+2]
	mov	QWORD PTR [rsp+32], rdi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 164  :         __stosq(d, x, count);

	mov	rdi, r8
	mov	rax, -3689348814741910324		; ccccccccccccccccH
	rep stosq
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 212  :             HeapFree(hLocalHeap, 0, p);

	mov	rcx, QWORD PTR hLocalHeap
	xor	edx, edx
	mov	rdi, QWORD PTR [rsp+32]

; 213  :         }
; 214  : 	}
; 215  : }

	add	rsp, 40					; 00000028H

; 212  :             HeapFree(hLocalHeap, 0, p);

	rex_jmp	QWORD PTR __imp_HeapFree
	mov	rdi, QWORD PTR [rsp+32]
$LN4@Deallocate:

; 213  :         }
; 214  : 	}
; 215  : }

	add	rsp, 40					; 00000028H
	ret	0
DeallocateBlock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT AllocateBlock
_TEXT	SEGMENT
bits$ = 48
allocated_block_words$ = 56
code$ = 64
AllocateBlock PROC					; COMDAT

; 157  : {

$LN8:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 188  :         return ((u + v - 1) / v);

	lea	rbx, QWORD PTR [rcx+63]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 157  : {

	mov	rdi, r8

; 165  : 	__UNIT_TYPE* buffer = (__UNIT_TYPE*)HeapAlloc(hLocalHeap, HEAP_ZERO_MEMORY, bytes);

	mov	rcx, QWORD PTR hLocalHeap
	mov	rsi, rdx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 188  :         return ((u + v - 1) / v);

	shr	rbx, 6
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c

; 165  : 	__UNIT_TYPE* buffer = (__UNIT_TYPE*)HeapAlloc(hLocalHeap, HEAP_ZERO_MEMORY, bytes);

	mov	edx, 8
	lea	r8, QWORD PTR [rbx*8+16]
	call	QWORD PTR __imp_HeapAlloc
	mov	rcx, rax

; 166  : 	if (buffer == NULL)

	test	rax, rax
	jne	SHORT $LN2@AllocateBl

; 193  :     return (&buffer[1]);
; 194  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN2@AllocateBl:

; 167  : 		return (NULL);
; 168  : 	buffer[0] = words1;

	mov	QWORD PTR [rax], rbx

; 169  :     *allocated_block_words = words1;
; 170  : #ifdef _DEBUG
; 171  :     // 乱数もどきを生成する。
; 172  : #ifdef _M_IX86
; 173  :     __UNIT_TYPE r = GetTickCount();
; 174  : #elif defined(_M_IX64)
; 175  : #ifdef _MSC_VER
; 176  :     __UNIT_TYPE r = GetTickCount64();
; 177  : #elif defined(__GNUC__)
; 178  :     _UINT32_T temp = GetTickCount();
; 179  :     __UNIT_TYPE r = _FROMWORDTODWORD(temp, temp);
; 180  : #else
; 181  : #error unknown compiler
; 182  : #endif
; 183  : #else
; 184  : #error unknown platform
; 185  : #endif
; 186  :     __UNIT_TYPE check_code = configuration_info.MEMORY_VERIFICATION_ENABLED ? CalculateCheckCode(&buffer[1], words1) : CHECK_CODE_INIT | r;
; 187  : #else
; 188  :     __UNIT_TYPE check_code = 0;
; 189  : #endif
; 190  :     buffer[words1 + 1] = check_code ^ (__UNIT_TYPE)&buffer[words1 + 1];

	lea	rax, QWORD PTR [rbx+1]
	mov	QWORD PTR [rsi], rbx
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR [rax], rax

; 191  :     if (code != NULL)

	test	rdi, rdi
	je	SHORT $LN3@AllocateBl

; 192  :         *code = check_code;

	mov	QWORD PTR [rdi], 0
$LN3@AllocateBl:

; 193  :     return (&buffer[1]);
; 194  : }

	mov	rbx, QWORD PTR [rsp+48]
	lea	rax, QWORD PTR [rcx+8]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
AllocateBlock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT DeallocateHeapArea
_TEXT	SEGMENT
DeallocateHeapArea PROC					; COMDAT

; 732  : {

$LN5:
	sub	rsp, 40					; 00000028H

; 733  :     if (hLocalHeap != NULL)

	mov	rcx, QWORD PTR hLocalHeap
	test	rcx, rcx
	je	SHORT $LN2@Deallocate

; 734  :     {
; 735  :         HeapDestroy(hLocalHeap);

	call	QWORD PTR __imp_HeapDestroy

; 736  :         hLocalHeap = NULL;

	mov	QWORD PTR hLocalHeap, 0
$LN2@Deallocate:

; 737  :     }
; 738  : }

	add	rsp, 40					; 00000028H
	ret	0
DeallocateHeapArea ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_memory.c
;	COMDAT AllocateHeapArea
_TEXT	SEGMENT
AllocateHeapArea PROC					; COMDAT

; 724  : {

$LN5:
	sub	rsp, 40					; 00000028H

; 725  :     hLocalHeap = HeapCreate(0, 0x1000, 0);

	xor	r8d, r8d
	mov	edx, 4096				; 00001000H
	xor	ecx, ecx
	call	QWORD PTR __imp_HeapCreate

; 726  :     if (hLocalHeap == NULL)

	xor	ecx, ecx
	mov	QWORD PTR hLocalHeap, rax
	test	rax, rax
	setne	cl
	mov	eax, ecx

; 727  :         return (FALSE);
; 728  :     return (TRUE);
; 729  : }

	add	rsp, 40					; 00000028H
	ret	0
AllocateHeapArea ENDP
_TEXT	ENDS
END
