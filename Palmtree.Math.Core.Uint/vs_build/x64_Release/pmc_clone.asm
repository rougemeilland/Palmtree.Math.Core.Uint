; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	Initialize_Clone
PUBLIC	PMC_Clone_X
EXTRN	CheckNumber:PROC
EXTRN	DuplicateNumber:PROC
EXTRN	number_zero:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Clone_X DD imagerel $LN12
	DD	imagerel $LN12+117
	DD	imagerel $unwind$PMC_Clone_X
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Clone_X DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_clone.c
;	COMDAT PMC_Clone_X
_TEXT	SEGMENT
no$ = 48
x$ = 48
o$ = 56
PMC_Clone_X PROC					; COMDAT

; 31   : {

$LN12:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx

; 32   :     if (x == NULL)

	test	rcx, rcx
	je	SHORT $LN9@PMC_Clone_

; 33   :         return (PMC_STATUS_ARGUMENT_ERROR);
; 34   :     if (o == NULL)

	test	rdx, rdx
	je	SHORT $LN9@PMC_Clone_

; 36   :     NUMBER_HEADER* nx = (NUMBER_HEADER*)x;
; 37   :     PMC_STATUS_CODE result;
; 38   :     if ((result = CheckNumber(nx)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN1@PMC_Clone_

; 39   :         return (result);
; 40   :     NUMBER_HEADER* no;
; 41   :     if (nx->IS_ZERO)

	test	BYTE PTR [rbx], 1
	je	SHORT $LN5@PMC_Clone_

; 42   :         no = &number_zero;

	lea	rax, OFFSET FLAT:number_zero

; 46   :             return (result);
; 47   :     }
; 48   :     *o = (PMC_HANDLE_UINT)no;

	mov	QWORD PTR [rdi], rax

; 49   : #ifdef _DEBUG
; 50   :     if ((result = CheckNumber((NUMBER_HEADER*)*o)) != PMC_STATUS_OK)
; 51   :         return (result);
; 52   : #endif
; 53   :     return (PMC_STATUS_OK);

	xor	eax, eax

; 54   : }

	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN5@PMC_Clone_:

; 43   :     else
; 44   :     {
; 45   :         if ((result = DuplicateNumber(nx, &no)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR no$[rsp]
	mov	rcx, rbx
	call	DuplicateNumber
	test	eax, eax
	jne	SHORT $LN1@PMC_Clone_
	mov	rax, QWORD PTR no$[rsp]

; 46   :             return (result);
; 47   :     }
; 48   :     *o = (PMC_HANDLE_UINT)no;

	mov	QWORD PTR [rdi], rax

; 49   : #ifdef _DEBUG
; 50   :     if ((result = CheckNumber((NUMBER_HEADER*)*o)) != PMC_STATUS_OK)
; 51   :         return (result);
; 52   : #endif
; 53   :     return (PMC_STATUS_OK);

	xor	eax, eax

; 54   : }

	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN9@PMC_Clone_:

; 35   :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN1@PMC_Clone_:

; 54   : }

	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_Clone_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_clone.c
;	COMDAT Initialize_Clone
_TEXT	SEGMENT
feature$ = 8
Initialize_Clone PROC					; COMDAT

; 58   :     return (PMC_STATUS_OK);

	xor	eax, eax

; 59   : }

	ret	0
Initialize_Clone ENDP
_TEXT	ENDS
END
