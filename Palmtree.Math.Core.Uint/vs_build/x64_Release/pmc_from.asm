; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	From_I_Imp
PUBLIC	From_L_Imp
PUBLIC	Initialize_From
PUBLIC	PMC_From_I
PUBLIC	PMC_From_L
EXTRN	AllocateNumber:PROC
EXTRN	CommitNumber:PROC
EXTRN	number_zero:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$From_I_Imp DD imagerel $LN8
	DD	imagerel $LN8+93
	DD	imagerel $unwind$From_I_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$From_L_Imp DD imagerel $LN24
	DD	imagerel $LN24+96
	DD	imagerel $unwind$From_L_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_From_I DD imagerel $LN14
	DD	imagerel $LN14+123
	DD	imagerel $unwind$PMC_From_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_From_L DD imagerel $LN30
	DD	imagerel $LN30+126
	DD	imagerel $unwind$PMC_From_L
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_From_L DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_From_I DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$From_L_Imp DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$From_I_Imp DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _LZCNT_ALT_UNIT
_TEXT	SEGMENT
x$ = 8
_LZCNT_ALT_UNIT PROC					; COMDAT

; 623  :         if (x == 0)

	test	rcx, rcx
	jne	SHORT $LN2@LZCNT_ALT_

; 624  :             return (sizeof(x) * 8);

	mov	eax, 64					; 00000040H

; 648  :     }

	ret	0
$LN2@LZCNT_ALT_:

; 625  : #ifdef _M_IX86
; 626  :         _UINT32_T pos;
; 627  : #ifdef _MSC_VER
; 628  :         _BitScanReverse(&pos, x);
; 629  : #elif defined(__GNUC__)
; 630  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 631  : #else
; 632  : #error unknown compiler
; 633  : #endif
; 634  : #elif defined(_M_X64)
; 635  : #ifdef _MSC_VER
; 636  :         _UINT32_T pos;
; 637  :         _BitScanReverse64(&pos, x);

	bsr	rcx, rcx

; 638  : #elif defined(__GNUC__)
; 639  :         _UINT64_T pos;
; 640  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 641  : #else
; 642  : #error unknown compiler
; 643  : #endif
; 644  : #else
; 645  : #error unknown platform
; 646  : #endif
; 647  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 63					; 0000003fH
	sub	eax, ecx

; 648  :     }

	ret	0
_LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _LZCNT_ALT_32
_TEXT	SEGMENT
x$ = 8
_LZCNT_ALT_32 PROC					; COMDAT

; 590  :         if (x == 0)

	test	ecx, ecx
	jne	SHORT $LN2@LZCNT_ALT_

; 591  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 601  :     }

	ret	0
$LN2@LZCNT_ALT_:

; 592  :         _UINT32_T pos;
; 593  : #ifdef _MSC_VER
; 594  :         _BitScanReverse(&pos, x);

	bsr	ecx, ecx

; 595  : #elif defined(__GNUC__)
; 596  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 597  : #else
; 598  : #error unknown compiler
; 599  : #endif
; 600  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31
	sub	eax, ecx

; 601  :     }

	ret	0
_LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _FROMDWORDTOWORD
_TEXT	SEGMENT
value$ = 8
result_high$ = 16
_FROMDWORDTOWORD PROC					; COMDAT

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	rax, rcx
	shr	rax, 32					; 00000020H
	mov	DWORD PTR [rdx], eax

; 177  :         return ((_UINT32_T)value);

	mov	eax, ecx

; 178  :     }

	ret	0
_FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c
;	COMDAT PMC_From_L
_TEXT	SEGMENT
p$ = 48
x$ = 48
o$ = 56
PMC_From_L PROC						; COMDAT

; 105  : {

$LN30:
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	rbx, rcx

; 106  :     NUMBER_HEADER* p;
; 107  :     PMC_STATUS_CODE result;
; 108  :     if (sizeof(__UNIT_TYPE) * 2 < sizeof(x))
; 109  :     {
; 110  :         // 32bit–¢–ž‚ÌCPU‚É‚Í–¢‘Î‰ž
; 111  :         return (PMC_STATUS_INTERNAL_ERROR);
; 112  :     }
; 113  :     if (x == 0)

	test	rcx, rcx
	jne	SHORT $LN3@PMC_From_L

; 114  :         *o = &number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR [rdx], rax

; 120  :     }
; 121  : #ifdef _DEBUG
; 122  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 123  :         return (result);
; 124  : #endif
; 125  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 126  : }

	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN3@PMC_From_L:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 637  :         _BitScanReverse64(&pos, x);

	bsr	rax, rbx

; 647  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 63					; 0000003fH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c

; 74   :         __UNIT_TYPE x_bit_length = sizeof(x) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)x);

	mov	edx, 64					; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 647  :         return (sizeof(x) * 8 - 1 - pos);

	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c

; 75   :         if ((result = AllocateNumber(o, x_bit_length, NULL)) != PMC_STATUS_OK)

	xor	r8d, r8d
	movsxd	rax, ecx
	lea	rcx, QWORD PTR p$[rsp]
	sub	rdx, rax
	call	AllocateNumber
	test	eax, eax
	jne	SHORT $LN7@PMC_From_L

; 76   :             return (result);
; 77   :         (*o)->BLOCK[0] = (__UNIT_TYPE)x;

	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR [rax+56]
	mov	QWORD PTR [rcx], rbx

; 78   :     }
; 79   :     CommitNumber(*o);

	mov	rcx, QWORD PTR p$[rsp]
	call	CommitNumber

; 115  :     else
; 116  :     {
; 117  :         if ((result = From_L_Imp(x, &p)) != PMC_STATUS_OK)
; 118  :             return (result);
; 119  :         *o = p;

	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR [rdi], rax

; 120  :     }
; 121  : #ifdef _DEBUG
; 122  :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 123  :         return (result);
; 124  : #endif
; 125  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN7@PMC_From_L:

; 126  : }

	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_From_L ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c
;	COMDAT PMC_From_I
_TEXT	SEGMENT
x$ = 48
o$ = 56
p$1 = 64
PMC_From_I PROC						; COMDAT

; 84   : {

$LN14:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	ebx, ecx
	mov	rdi, rdx

; 85   :     PMC_STATUS_CODE result;
; 86   :     if (sizeof(__UNIT_TYPE) < sizeof(x))
; 87   :         return (PMC_STATUS_INTERNAL_ERROR);
; 88   :     if (x == 0)

	test	ecx, ecx
	jne	SHORT $LN3@PMC_From_I

; 89   :         *o = &number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR [rdx], rax

; 96   :     }
; 97   : #ifdef _DEBUG
; 98   :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 99   :         return (result);
; 100  : #endif
; 101  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 102  : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN3@PMC_From_I:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 594  :         _BitScanReverse(&pos, x);

	bsr	eax, ebx

; 600  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c

; 34   :     if ((result = AllocateNumber(o, sizeof(x) * 8 - _LZCNT_ALT_32(x), NULL)) != PMC_STATUS_OK)

	mov	edx, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 600  :         return (sizeof(x) * 8 - 1 - pos);

	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c

; 34   :     if ((result = AllocateNumber(o, sizeof(x) * 8 - _LZCNT_ALT_32(x), NULL)) != PMC_STATUS_OK)

	xor	r8d, r8d
	movsxd	rax, ecx
	lea	rcx, QWORD PTR p$1[rsp]
	sub	rdx, rax
	call	AllocateNumber
	test	eax, eax
	jne	SHORT $LN7@PMC_From_I

; 35   :         return (result);
; 36   :     (*o)->BLOCK[0] = x;

	mov	rax, QWORD PTR p$1[rsp]
	mov	rcx, QWORD PTR [rax+56]
	mov	QWORD PTR [rcx], rbx

; 37   :     CommitNumber(*o);

	mov	rcx, QWORD PTR p$1[rsp]
	call	CommitNumber

; 90   :     else
; 91   :     {
; 92   :         NUMBER_HEADER* p;
; 93   :         if ((result = From_I_Imp(x, &p)) != PMC_STATUS_OK)
; 94   :             return (result);
; 95   :         *o = p;

	mov	rax, QWORD PTR p$1[rsp]
	mov	QWORD PTR [rdi], rax

; 96   :     }
; 97   : #ifdef _DEBUG
; 98   :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 99   :         return (result);
; 100  : #endif
; 101  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN7@PMC_From_I:

; 102  : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_From_I ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c
;	COMDAT Initialize_From
_TEXT	SEGMENT
feature$ = 8
Initialize_From PROC					; COMDAT

; 130  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 131  : }

	ret	0
Initialize_From ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c
;	COMDAT From_L_Imp
_TEXT	SEGMENT
x$ = 48
o$ = 56
From_L_Imp PROC						; COMDAT

; 42   : {

$LN24:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 623  :         if (x == 0)

	mov	edx, 64					; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c

; 42   : {

	mov	rbx, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 623  :         if (x == 0)

	test	rcx, rcx
	jne	SHORT $LN21@From_L_Imp

; 624  :             return (sizeof(x) * 8);

	mov	r8d, edx
	jmp	SHORT $LN20@From_L_Imp
$LN21@From_L_Imp:

; 625  : #ifdef _M_IX86
; 626  :         _UINT32_T pos;
; 627  : #ifdef _MSC_VER
; 628  :         _BitScanReverse(&pos, x);
; 629  : #elif defined(__GNUC__)
; 630  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 631  : #else
; 632  : #error unknown compiler
; 633  : #endif
; 634  : #elif defined(_M_X64)
; 635  : #ifdef _MSC_VER
; 636  :         _UINT32_T pos;
; 637  :         _BitScanReverse64(&pos, x);

	bsr	rax, rbx

; 638  : #elif defined(__GNUC__)
; 639  :         _UINT64_T pos;
; 640  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 641  : #else
; 642  : #error unknown compiler
; 643  : #endif
; 644  : #else
; 645  : #error unknown platform
; 646  : #endif
; 647  :         return (sizeof(x) * 8 - 1 - pos);

	mov	r8d, 63					; 0000003fH
	sub	r8d, eax
$LN20@From_L_Imp:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c

; 74   :         __UNIT_TYPE x_bit_length = sizeof(x) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)x);

	movsxd	rax, r8d

; 75   :         if ((result = AllocateNumber(o, x_bit_length, NULL)) != PMC_STATUS_OK)

	mov	rcx, rdi
	sub	rdx, rax
	xor	r8d, r8d
	call	AllocateNumber
	test	eax, eax
	jne	SHORT $LN1@From_L_Imp

; 76   :             return (result);
; 77   :         (*o)->BLOCK[0] = (__UNIT_TYPE)x;

	mov	rax, QWORD PTR [rdi]
	mov	rcx, QWORD PTR [rax+56]
	mov	QWORD PTR [rcx], rbx

; 78   :     }
; 79   :     CommitNumber(*o);

	mov	rcx, QWORD PTR [rdi]
	call	CommitNumber

; 80   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@From_L_Imp:

; 81   : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
From_L_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c
;	COMDAT From_I_Imp
_TEXT	SEGMENT
x$ = 48
o$ = 56
From_I_Imp PROC						; COMDAT

; 32   : {

$LN8:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	ebx, ecx
	mov	rdi, rdx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 590  :         if (x == 0)

	mov	edx, 32					; 00000020H
	test	ecx, ecx
	jne	SHORT $LN5@From_I_Imp

; 591  :             return (sizeof(x) * 8);

	mov	r8d, edx
	jmp	SHORT $LN4@From_I_Imp
$LN5@From_I_Imp:

; 592  :         _UINT32_T pos;
; 593  : #ifdef _MSC_VER
; 594  :         _BitScanReverse(&pos, x);

	bsr	eax, ebx

; 595  : #elif defined(__GNUC__)
; 596  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 597  : #else
; 598  : #error unknown compiler
; 599  : #endif
; 600  :         return (sizeof(x) * 8 - 1 - pos);

	mov	r8d, 31
	sub	r8d, eax
$LN4@From_I_Imp:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_from.c

; 34   :     if ((result = AllocateNumber(o, sizeof(x) * 8 - _LZCNT_ALT_32(x), NULL)) != PMC_STATUS_OK)

	movsxd	rax, r8d
	mov	rcx, rdi
	sub	rdx, rax
	xor	r8d, r8d
	call	AllocateNumber
	test	eax, eax
	jne	SHORT $LN1@From_I_Imp

; 35   :         return (result);
; 36   :     (*o)->BLOCK[0] = x;

	mov	rax, QWORD PTR [rdi]
	mov	rcx, QWORD PTR [rax+56]
	mov	QWORD PTR [rcx], rbx

; 37   :     CommitNumber(*o);

	mov	rcx, QWORD PTR [rdi]
	call	CommitNumber

; 38   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@From_I_Imp:

; 39   : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
From_I_Imp ENDP
_TEXT	ENDS
END
