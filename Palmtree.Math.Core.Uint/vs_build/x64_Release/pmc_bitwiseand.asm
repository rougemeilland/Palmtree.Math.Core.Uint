; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	Initialize_BitwiseAnd
PUBLIC	PMC_BitwiseAnd_I_X
PUBLIC	PMC_BitwiseAnd_L_X
PUBLIC	PMC_BitwiseAnd_X_I
PUBLIC	PMC_BitwiseAnd_X_L
PUBLIC	PMC_BitwiseAnd_X_X
EXTRN	CheckBlockLight:PROC
EXTRN	AllocateNumber:PROC
EXTRN	DeallocateNumber:PROC
EXTRN	CommitNumber:PROC
EXTRN	CheckNumber:PROC
EXTRN	number_zero:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_BitwiseAnd_I_X DD imagerel $LN14
	DD	imagerel $LN14+124
	DD	imagerel $unwind$PMC_BitwiseAnd_I_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_BitwiseAnd_L_X DD imagerel $LN22
	DD	imagerel $LN22+130
	DD	imagerel $unwind$PMC_BitwiseAnd_L_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_BitwiseAnd_X_I DD imagerel $LN14
	DD	imagerel $LN14+121
	DD	imagerel $unwind$PMC_BitwiseAnd_X_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_BitwiseAnd_X_L DD imagerel $LN22
	DD	imagerel $LN22+127
	DD	imagerel $unwind$PMC_BitwiseAnd_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_BitwiseAnd_X_X DD imagerel $LN23
	DD	imagerel $LN23+77
	DD	imagerel $unwind$PMC_BitwiseAnd_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PMC_BitwiseAnd_X_X DD imagerel $LN23+77
	DD	imagerel $LN23+224
	DD	imagerel $chain$0$PMC_BitwiseAnd_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PMC_BitwiseAnd_X_X DD imagerel $LN23+224
	DD	imagerel $LN23+245
	DD	imagerel $chain$1$PMC_BitwiseAnd_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$BitwiseAnd_X_X DD imagerel BitwiseAnd_X_X
	DD	imagerel BitwiseAnd_X_X+4
	DD	imagerel $unwind$BitwiseAnd_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$BitwiseAnd_X_X DD imagerel BitwiseAnd_X_X+4
	DD	imagerel BitwiseAnd_X_X+560
	DD	imagerel $chain$2$BitwiseAnd_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$BitwiseAnd_X_X DD imagerel BitwiseAnd_X_X+560
	DD	imagerel BitwiseAnd_X_X+778
	DD	imagerel $chain$3$BitwiseAnd_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$BitwiseAnd_X_X DD imagerel BitwiseAnd_X_X+778
	DD	imagerel BitwiseAnd_X_X+792
	DD	imagerel $chain$4$BitwiseAnd_X_X
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$BitwiseAnd_X_X DD 021H
	DD	imagerel BitwiseAnd_X_X
	DD	imagerel BitwiseAnd_X_X+4
	DD	imagerel $unwind$BitwiseAnd_X_X
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$BitwiseAnd_X_X DD 020021H
	DD	036400H
	DD	imagerel BitwiseAnd_X_X
	DD	imagerel BitwiseAnd_X_X+4
	DD	imagerel $unwind$BitwiseAnd_X_X
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$BitwiseAnd_X_X DD 061421H
	DD	07414H
	DD	03640dH
	DD	023405H
	DD	imagerel BitwiseAnd_X_X
	DD	imagerel BitwiseAnd_X_X+4
	DD	imagerel $unwind$BitwiseAnd_X_X
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$BitwiseAnd_X_X DD 010401H
	DD	0204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PMC_BitwiseAnd_X_X DD 021H
	DD	imagerel $LN23
	DD	imagerel $LN23+77
	DD	imagerel $unwind$PMC_BitwiseAnd_X_X
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PMC_BitwiseAnd_X_X DD 020521H
	DD	095405H
	DD	imagerel $LN23
	DD	imagerel $LN23+77
	DD	imagerel $unwind$PMC_BitwiseAnd_X_X
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_BitwiseAnd_X_X DD 040801H
	DD	070043208H
	DD	030026003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_BitwiseAnd_X_L DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_BitwiseAnd_X_I DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_BitwiseAnd_L_X DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_BitwiseAnd_I_X DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c
;	COMDAT BitwiseAnd_X_X
_TEXT	SEGMENT
u$ = 16
v$ = 24
w$ = 32
w_count$ = 40
BitwiseAnd_X_X PROC					; COMDAT

; 32   : {

	sub	rsp, 8
	mov	QWORD PTR [rsp+16], rbx
	mov	r10, rcx
	mov	QWORD PTR [rsp+24], rsi
	mov	rsi, r9
	mov	QWORD PTR [rsp], rdi

; 33   :     __UNIT_TYPE count = w_count >> 5;

	mov	rdi, r9
	shr	rdi, 5

; 34   :     while (count != 0)

	test	rdi, rdi
	je	$LN3@BitwiseAnd
	npad	8
$LL2@BitwiseAnd:

; 35   :     {
; 36   :         w[0] = u[0] & v[0];

	lea	rcx, QWORD PTR [rdx+16]
	lea	rax, QWORD PTR [rcx+232]
	cmp	r8, rax
	ja	SHORT $LN30@BitwiseAnd
	lea	rax, QWORD PTR [r8+248]
	cmp	rax, rdx
	jae	SHORT $LN70@BitwiseAnd
$LN30@BitwiseAnd:
	lea	rax, QWORD PTR [r10+248]
	cmp	r8, rax
	ja	SHORT $LN31@BitwiseAnd
	lea	rax, QWORD PTR [r8+248]
	cmp	rax, r10
	jb	SHORT $LN31@BitwiseAnd
$LN70@BitwiseAnd:
	mov	r11, r10
	mov	rbx, r8
	sub	r11, rdx
	mov	rax, rdx
	sub	rbx, rdx
	mov	r9d, 32					; 00000020H
	npad	7
$LL69@BitwiseAnd:
	mov	rcx, QWORD PTR [rax+r11]
	and	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rax+rbx], rcx
	lea	rax, QWORD PTR [rax+8]
	sub	r9, 1
	jne	SHORT $LL69@BitwiseAnd
	jmp	SHORT $LN13@BitwiseAnd
$LN31@BitwiseAnd:
	mov	rax, r10
	mov	r9, r8
	sub	rax, rdx
	mov	r11d, 4
	sub	r9, rdx
	npad	7
$LL12@BitwiseAnd:
	movdqu	xmm0, XMMWORD PTR [rcx-16]
	movdqu	xmm1, XMMWORD PTR [rcx+rax-16]
	movdqu	xmm2, XMMWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR [rcx+64]
	pand	xmm1, xmm0
	movdqu	xmm0, XMMWORD PTR [rcx-64]
	movdqu	XMMWORD PTR [rcx+r9-80], xmm1
	pand	xmm2, xmm0
	movdqu	xmm0, XMMWORD PTR [rcx-48]
	movdqu	xmm1, XMMWORD PTR [rcx+rax-48]
	movdqu	XMMWORD PTR [rcx+r9-64], xmm2
	pand	xmm1, xmm0
	movdqu	xmm0, XMMWORD PTR [rcx-32]
	movdqu	xmm2, XMMWORD PTR [rcx+rax-32]
	movdqu	XMMWORD PTR [rcx+r9-48], xmm1
	pand	xmm2, xmm0
	movdqu	XMMWORD PTR [rcx+r9-32], xmm2
	sub	r11, 1
	jne	SHORT $LL12@BitwiseAnd
$LN13@BitwiseAnd:

; 37   :         w[1] = u[1] & v[1];
; 38   :         w[2] = u[2] & v[2];
; 39   :         w[3] = u[3] & v[3];
; 40   :         w[4] = u[4] & v[4];
; 41   :         w[5] = u[5] & v[5];
; 42   :         w[6] = u[6] & v[6];
; 43   :         w[7] = u[7] & v[7];
; 44   :         w[8] = u[8] & v[8];
; 45   :         w[9] = u[9] & v[9];
; 46   :         w[10] = u[10] & v[10];
; 47   :         w[11] = u[11] & v[11];
; 48   :         w[12] = u[12] & v[12];
; 49   :         w[13] = u[13] & v[13];
; 50   :         w[14] = u[14] & v[14];
; 51   :         w[15] = u[15] & v[15];
; 52   :         w[16] = u[16] & v[16];
; 53   :         w[17] = u[17] & v[17];
; 54   :         w[18] = u[18] & v[18];
; 55   :         w[19] = u[19] & v[19];
; 56   :         w[20] = u[20] & v[20];
; 57   :         w[21] = u[21] & v[21];
; 58   :         w[22] = u[22] & v[22];
; 59   :         w[23] = u[23] & v[23];
; 60   :         w[24] = u[24] & v[24];
; 61   :         w[25] = u[25] & v[25];
; 62   :         w[26] = u[26] & v[26];
; 63   :         w[27] = u[27] & v[27];
; 64   :         w[28] = u[28] & v[28];
; 65   :         w[29] = u[29] & v[29];
; 66   :         w[30] = u[30] & v[30];
; 67   :         w[31] = u[31] & v[31];
; 68   :         u += 32;

	add	r10, 256				; 00000100H

; 69   :         v += 32;

	add	rdx, 256				; 00000100H

; 70   :         w += 32;

	add	r8, 256					; 00000100H

; 71   :         --count;

	sub	rdi, 1
	jne	$LL2@BitwiseAnd
$LN3@BitwiseAnd:

; 72   :     }
; 73   : 
; 74   :     if (w_count & 0x10)

	test	sil, 16
	je	$LN4@BitwiseAnd

; 75   :     {
; 76   :         w[0] = u[0] & v[0];

	lea	rax, QWORD PTR [rdx+120]
	xor	r11d, r11d
	lea	rcx, QWORD PTR [r8+120]
	mov	r9d, 16
	cmp	r8, rax
	ja	SHORT $LN34@BitwiseAnd
	cmp	rcx, rdx
	jae	$LN33@BitwiseAnd
$LN34@BitwiseAnd:
	lea	rax, QWORD PTR [r10+120]
	cmp	r8, rax
	ja	SHORT $LN35@BitwiseAnd
	cmp	rcx, r10
	jae	SHORT $LN33@BitwiseAnd
$LN35@BitwiseAnd:
	mov	rcx, r10
	lea	rax, QWORD PTR [rdx+16]
	sub	rcx, rdx
	mov	r11, r8
	sub	r11, rdx
	mov	ebx, 2
	npad	4
$LL14@BitwiseAnd:
	movdqu	xmm0, XMMWORD PTR [rax-16]
	movdqu	xmm1, XMMWORD PTR [rax+rcx-16]
	movdqu	xmm2, XMMWORD PTR [rax+rcx]
	lea	rax, QWORD PTR [rax+64]
	pand	xmm1, xmm0
	movdqu	xmm0, XMMWORD PTR [rax-64]
	movdqu	XMMWORD PTR [rax+r11-80], xmm1
	pand	xmm2, xmm0
	movdqu	xmm0, XMMWORD PTR [rax-48]
	movdqu	xmm1, XMMWORD PTR [rax+rcx-48]
	movdqu	XMMWORD PTR [rax+r11-64], xmm2
	pand	xmm1, xmm0
	movdqu	xmm0, XMMWORD PTR [rax-32]
	movdqu	xmm2, XMMWORD PTR [rax+rcx-32]
	movdqu	XMMWORD PTR [rax+r11-48], xmm1
	pand	xmm2, xmm0
	movdqu	XMMWORD PTR [rax+r11-32], xmm2
	sub	rbx, 1
	jne	SHORT $LL14@BitwiseAnd
	mov	r11, r9
$LN33@BitwiseAnd:
	cmp	r11, r9
	jae	SHORT $LN15@BitwiseAnd
	mov	rbx, r10
	lea	rcx, QWORD PTR [rdx+r11*8]
	mov	rdi, r8
	sub	rbx, rdx
	sub	rdi, rdx
	sub	r9, r11
	npad	4
$LL32@BitwiseAnd:
	mov	rax, QWORD PTR [rcx+rbx]
	and	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rcx+rdi], rax
	lea	rcx, QWORD PTR [rcx+8]
	sub	r9, 1
	jne	SHORT $LL32@BitwiseAnd
$LN15@BitwiseAnd:

; 77   :         w[1] = u[1] & v[1];
; 78   :         w[2] = u[2] & v[2];
; 79   :         w[3] = u[3] & v[3];
; 80   :         w[4] = u[4] & v[4];
; 81   :         w[5] = u[5] & v[5];
; 82   :         w[6] = u[6] & v[6];
; 83   :         w[7] = u[7] & v[7];
; 84   :         w[8] = u[8] & v[8];
; 85   :         w[9] = u[9] & v[9];
; 86   :         w[10] = u[10] & v[10];
; 87   :         w[11] = u[11] & v[11];
; 88   :         w[12] = u[12] & v[12];
; 89   :         w[13] = u[13] & v[13];
; 90   :         w[14] = u[14] & v[14];
; 91   :         w[15] = u[15] & v[15];
; 92   :         u += 16;

	sub	r10, -128				; ffffffffffffff80H

; 93   :         v += 16;

	sub	rdx, -128				; ffffffffffffff80H

; 94   :         w += 16;

	sub	r8, -128				; ffffffffffffff80H
$LN4@BitwiseAnd:

; 95   :     }
; 96   : 
; 97   :     if (w_count & 0x8)

	mov	rdi, QWORD PTR [rsp]
	mov	rbx, QWORD PTR [rsp+16]
	test	sil, 8
	je	SHORT $LN5@BitwiseAnd

; 98   :     {
; 99   :         w[0] = u[0] & v[0];

	mov	rax, QWORD PTR [r10]
	and	rax, QWORD PTR [rdx]
	mov	QWORD PTR [r8], rax
	mov	rax, QWORD PTR [r10+8]
	and	rax, QWORD PTR [rdx+8]
	mov	QWORD PTR [r8+8], rax
	mov	rax, QWORD PTR [r10+16]
	and	rax, QWORD PTR [rdx+16]
	mov	QWORD PTR [r8+16], rax
	mov	rax, QWORD PTR [r10+24]
	and	rax, QWORD PTR [rdx+24]
	mov	QWORD PTR [r8+24], rax
	mov	rax, QWORD PTR [r10+32]
	and	rax, QWORD PTR [rdx+32]
	mov	QWORD PTR [r8+32], rax
	mov	rax, QWORD PTR [r10+40]
	and	rax, QWORD PTR [rdx+40]
	mov	QWORD PTR [r8+40], rax
	mov	rax, QWORD PTR [r10+48]
	and	rax, QWORD PTR [rdx+48]
	mov	QWORD PTR [r8+48], rax
	mov	rax, QWORD PTR [r10+56]

; 100  :         w[1] = u[1] & v[1];
; 101  :         w[2] = u[2] & v[2];
; 102  :         w[3] = u[3] & v[3];
; 103  :         w[4] = u[4] & v[4];
; 104  :         w[5] = u[5] & v[5];
; 105  :         w[6] = u[6] & v[6];
; 106  :         w[7] = u[7] & v[7];
; 107  :         u += 8;

	add	r10, 64					; 00000040H
	and	rax, QWORD PTR [rdx+56]

; 108  :         v += 8;

	add	rdx, 64					; 00000040H
	mov	QWORD PTR [r8+56], rax

; 109  :         w += 8;

	add	r8, 64					; 00000040H
$LN5@BitwiseAnd:

; 110  :     }
; 111  : 
; 112  :     if (w_count & 0x4)

	test	sil, 4
	je	SHORT $LN6@BitwiseAnd

; 113  :     {
; 114  :         w[0] = u[0] & v[0];

	mov	rax, QWORD PTR [r10]
	and	rax, QWORD PTR [rdx]
	mov	QWORD PTR [r8], rax
	mov	rax, QWORD PTR [r10+8]
	and	rax, QWORD PTR [rdx+8]
	mov	QWORD PTR [r8+8], rax
	mov	rax, QWORD PTR [r10+16]
	and	rax, QWORD PTR [rdx+16]
	mov	QWORD PTR [r8+16], rax
	mov	rax, QWORD PTR [r10+24]

; 115  :         w[1] = u[1] & v[1];
; 116  :         w[2] = u[2] & v[2];
; 117  :         w[3] = u[3] & v[3];
; 118  :         u += 4;

	add	r10, 32					; 00000020H
	and	rax, QWORD PTR [rdx+24]

; 119  :         v += 4;

	add	rdx, 32					; 00000020H
	mov	QWORD PTR [r8+24], rax

; 120  :         w += 4;

	add	r8, 32					; 00000020H
$LN6@BitwiseAnd:

; 121  :     }
; 122  : 
; 123  :     if (w_count & 0x2)

	test	sil, 2
	je	SHORT $LN7@BitwiseAnd

; 124  :     {
; 125  :         w[0] = u[0] & v[0];

	mov	rax, QWORD PTR [r10]
	and	rax, QWORD PTR [rdx]
	mov	QWORD PTR [r8], rax
	mov	rax, QWORD PTR [r10+8]

; 126  :         w[1] = u[1] & v[1];
; 127  :         u += 2;

	add	r10, 16
	and	rax, QWORD PTR [rdx+8]

; 128  :         v += 2;

	add	rdx, 16
	mov	QWORD PTR [r8+8], rax

; 129  :         w += 2;

	add	r8, 16
$LN7@BitwiseAnd:

; 130  :     }
; 131  : 
; 132  :     if (w_count & 0x1)

	test	sil, 1
	mov	rsi, QWORD PTR [rsp+24]
	je	SHORT $LN8@BitwiseAnd

; 133  :     {
; 134  :         w[0] = u[0] & v[0];

	mov	rax, QWORD PTR [r10]
	and	rax, QWORD PTR [rdx]
	mov	QWORD PTR [r8], rax
$LN8@BitwiseAnd:

; 135  :         u += 1;
; 136  :         v += 1;
; 137  :         w += 1;
; 138  :     }
; 139  : }

	add	rsp, 8
	ret	0
BitwiseAnd_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _MINIMUM_UNIT
_TEXT	SEGMENT
x$ = 8
y$ = 16
_MINIMUM_UNIT PROC					; COMDAT

; 203  :         return (x <= y ? x : y);

	cmp	rcx, rdx
	cmovbe	rdx, rcx
	mov	rax, rdx

; 204  :     }

	ret	0
_MINIMUM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _DIVIDE_CEILING_UNIT
_TEXT	SEGMENT
u$ = 8
v$ = 16
_DIVIDE_CEILING_UNIT PROC				; COMDAT

; 188  :         return ((u + v - 1) / v);

	lea	rax, QWORD PTR [rdx-1]
	mov	r8, rdx
	add	rax, rcx
	xor	edx, edx
	div	r8

; 189  :     }

	ret	0
_DIVIDE_CEILING_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _FROMDWORDTOWORD
_TEXT	SEGMENT
value$ = 8
result_high$ = 16
_FROMDWORDTOWORD PROC					; COMDAT

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	rax, rcx
	shr	rax, 32					; 00000020H
	mov	DWORD PTR [rdx], eax

; 178  :         return ((_UINT32_T)value);

	mov	eax, ecx

; 179  :     }

	ret	0
_FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _FROMWORDTODWORD
_TEXT	SEGMENT
value_high$ = 8
value_low$ = 16
_FROMWORDTODWORD PROC					; COMDAT

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, ecx
	shl	rax, 32					; 00000020H
	mov	ecx, edx
	or	rax, rcx

; 173  :     }

	ret	0
_FROMWORDTODWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c
;	COMDAT PMC_BitwiseAnd_X_X
_TEXT	SEGMENT
nw$ = 64
u$ = 64
v$ = 72
w$ = 80
nw_light_check_code$1 = 88
PMC_BitwiseAnd_X_X PROC					; COMDAT

; 310  : {

$LN23:
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rsi, r8
	mov	rbx, rdx
	mov	rdi, rcx

; 311  :     if (u == NULL)

	test	rcx, rcx
	je	$LN20@PMC_Bitwis

; 312  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 313  :     if (v == NULL)

	test	rdx, rdx
	je	$LN20@PMC_Bitwis

; 314  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 315  :     if (w == NULL)

	test	r8, r8
	je	$LN20@PMC_Bitwis

; 317  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 318  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 319  :     PMC_STATUS_CODE result;
; 320  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	$LN1@PMC_Bitwis

; 321  :         return (result);
; 322  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	rcx, rbx
	call	CheckNumber
	test	eax, eax
	jne	$LN1@PMC_Bitwis

; 323  :         return (result);
; 324  :     NUMBER_HEADER* nw;
; 325  :     if (nu->IS_ZERO)

	test	BYTE PTR [rdi+40], 2
	mov	QWORD PTR [rsp+72], rbp
	jne	SHORT $LN19@PMC_Bitwis

; 326  :         *w = (PMC_HANDLE_UINT)&number_zero;
; 327  :     else if (nv->IS_ZERO)

	test	BYTE PTR [rbx+40], 2
	jne	SHORT $LN19@PMC_Bitwis

; 328  :         *w = (PMC_HANDLE_UINT)&number_zero;
; 329  :     else
; 330  :     {
; 331  :         __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 332  :         __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	rbp, QWORD PTR [rbx+16]

; 335  :         if ((result = AllocateNumber(&nw, w_bit_count, &nw_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR nw_light_check_code$1[rsp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 203  :         return (x <= y ? x : y);

	cmp	QWORD PTR [rdi+16], rbp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c

; 335  :         if ((result = AllocateNumber(&nw, w_bit_count, &nw_light_check_code)) != PMC_STATUS_OK)

	lea	rcx, QWORD PTR nw$[rsp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 203  :         return (x <= y ? x : y);

	cmovbe	rbp, QWORD PTR [rdi+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c

; 335  :         if ((result = AllocateNumber(&nw, w_bit_count, &nw_light_check_code)) != PMC_STATUS_OK)

	mov	rdx, rbp
	call	AllocateNumber
	test	eax, eax
	jne	SHORT $LN21@PMC_Bitwis

; 338  :         BitwiseAnd_X_X(nu->BLOCK, nv->BLOCK, nw->BLOCK, w_word_count);

	mov	r8, QWORD PTR nw$[rsp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 188  :         return ((u + v - 1) / v);

	lea	r9, QWORD PTR [rbp+63]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c

; 338  :         BitwiseAnd_X_X(nu->BLOCK, nv->BLOCK, nw->BLOCK, w_word_count);

	mov	rdx, QWORD PTR [rbx+56]
	mov	rcx, QWORD PTR [rdi+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 188  :         return ((u + v - 1) / v);

	shr	r9, 6
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c

; 338  :         BitwiseAnd_X_X(nu->BLOCK, nv->BLOCK, nw->BLOCK, w_word_count);

	mov	r8, QWORD PTR [r8+56]
	call	BitwiseAnd_X_X

; 339  :         if ((result = CheckBlockLight(nw->BLOCK, nw_light_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nw$[rsp]
	mov	rdx, QWORD PTR nw_light_check_code$1[rsp]
	mov	rcx, QWORD PTR [rcx+56]
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN21@PMC_Bitwis

; 340  :             return (result);
; 341  :         CommitNumber(nw);

	mov	rcx, QWORD PTR nw$[rsp]
	call	CommitNumber

; 342  :         if (nw->IS_ZERO)

	mov	rax, QWORD PTR nw$[rsp]
	test	BYTE PTR [rax+40], 2
	je	SHORT $LN13@PMC_Bitwis

; 343  :         {
; 344  :             DeallocateNumber(nw);

	mov	rcx, rax
	call	DeallocateNumber
$LN19@PMC_Bitwis:

; 345  :             nw = &number_zero;
; 346  :         }
; 347  :         *w = (PMC_HANDLE_UINT)nw;
; 348  :     }
; 349  : #ifdef _DEBUG
; 350  :     if ((result = CheckNumber((NUMBER_HEADER*)*w)) != PMC_STATUS_OK)
; 351  :         return (result);
; 352  : #endif
; 353  :     return (PMC_STATUS_OK);

	lea	rax, OFFSET FLAT:number_zero
$LN13@PMC_Bitwis:
	mov	QWORD PTR [rsi], rax
	xor	eax, eax
$LN21@PMC_Bitwis:
	mov	rbp, QWORD PTR [rsp+72]
$LN1@PMC_Bitwis:

; 354  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
$LN20@PMC_Bitwis:

; 316  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1

; 354  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
PMC_BitwiseAnd_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c
;	COMDAT PMC_BitwiseAnd_X_L
_TEXT	SEGMENT
u$ = 48
v$ = 56
w$ = 64
PMC_BitwiseAnd_X_L PROC					; COMDAT

; 261  : {

$LN22:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, r8
	mov	rsi, rdx
	mov	rbx, rcx

; 262  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(v) * 8)
; 263  :     {
; 264  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 265  :         return (PMC_STATUS_INTERNAL_ERROR);
; 266  :     }
; 267  :     if (u == NULL)

	test	rcx, rcx
	je	SHORT $LN19@PMC_Bitwis

; 268  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 269  :     if (w == NULL)

	test	r8, r8
	je	SHORT $LN19@PMC_Bitwis

; 271  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 272  :     PMC_STATUS_CODE result;
; 273  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN1@PMC_Bitwis

; 274  :         return (result);
; 275  :     if (nu->IS_ZERO)

	test	BYTE PTR [rbx+40], 2
	jne	SHORT $LN20@PMC_Bitwis

; 276  :     {
; 277  :         // u が 0 である場合
; 278  :         *w = 0;
; 279  :     }
; 280  :     else if (v == 0)

	test	rsi, rsi
	jne	SHORT $LN8@PMC_Bitwis
$LN20@PMC_Bitwis:

; 304  :         }
; 305  :     }
; 306  :     return (PMC_STATUS_OK);

	xor	eax, eax
	mov	QWORD PTR [rdi], rax

; 307  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN8@PMC_Bitwis:

; 281  :     {
; 282  :         // v が 0 である場合
; 283  :         *w = 0;
; 284  :     }
; 285  :     else
; 286  :     {
; 287  :         // u と v がともに 0 ではない場合
; 288  : 
; 289  :         // x と y の和を計算する
; 290  :         if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)
; 291  :         {
; 292  :             // _UINT64_T が 1 ワードで表現しきれない場合
; 293  : 
; 294  :             _UINT32_T v_hi;
; 295  :             _UINT32_T v_lo = _FROMDWORDTOWORD(v, &v_hi);
; 296  :             _UINT32_T w_hi = nu->UNIT_WORD_COUNT > 1 ? nu->BLOCK[1] & v_hi : 0;
; 297  :             _UINT32_T w_lo = nu->BLOCK[0] & v_lo;
; 298  :             *w = _FROMWORDTODWORD(w_hi, w_lo);
; 299  :         }
; 300  :         else
; 301  :         {
; 302  :             // _UINT64_T が 1 ワードで表現できる場合
; 303  :             *w = nu->BLOCK[0] & v;

	mov	rax, QWORD PTR [rbx+56]
	mov	rax, QWORD PTR [rax]
	and	rax, rsi

; 304  :         }
; 305  :     }
; 306  :     return (PMC_STATUS_OK);

	mov	QWORD PTR [rdi], rax
	xor	eax, eax

; 307  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN19@PMC_Bitwis:

; 270  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN1@PMC_Bitwis:

; 307  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_BitwiseAnd_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c
;	COMDAT PMC_BitwiseAnd_X_I
_TEXT	SEGMENT
u$ = 48
v$ = 56
w$ = 64
PMC_BitwiseAnd_X_I PROC					; COMDAT

; 177  : {

$LN14:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, r8
	mov	esi, edx
	mov	rbx, rcx

; 178  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)
; 179  :     {
; 180  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 181  :         return (PMC_STATUS_INTERNAL_ERROR);
; 182  :     }
; 183  :     if (u == NULL)

	test	rcx, rcx
	je	SHORT $LN11@PMC_Bitwis

; 184  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 185  :     if (w == NULL)

	test	r8, r8
	je	SHORT $LN11@PMC_Bitwis

; 187  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 188  :     PMC_STATUS_CODE result;
; 189  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN1@PMC_Bitwis

; 190  :         return (result);
; 191  :     if (nu->IS_ZERO)

	test	BYTE PTR [rbx+40], 2
	jne	SHORT $LN12@PMC_Bitwis

; 192  :     {
; 193  :         // u が 0 である場合
; 194  :         *w = 0;
; 195  :     }
; 196  :     else  if (v == 0)

	test	esi, esi
	jne	SHORT $LN8@PMC_Bitwis
$LN12@PMC_Bitwis:

; 207  :     }
; 208  :     return (PMC_STATUS_OK);

	xor	eax, eax
	mov	DWORD PTR [rdi], eax

; 209  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN8@PMC_Bitwis:

; 197  :     {
; 198  :         // v が 0 である場合
; 199  :         *w = 0;
; 200  :     }
; 201  :     else
; 202  :     {
; 203  :         // u と v がともに 0 ではない場合
; 204  : 
; 205  :         // u と v の bit AND を計算する
; 206  :         *w = nu->BLOCK[0] & v;

	mov	rax, QWORD PTR [rbx+56]
	mov	eax, DWORD PTR [rax]
	and	eax, esi

; 207  :     }
; 208  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [rdi], eax
	xor	eax, eax

; 209  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN11@PMC_Bitwis:

; 186  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN1@PMC_Bitwis:

; 209  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_BitwiseAnd_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c
;	COMDAT PMC_BitwiseAnd_L_X
_TEXT	SEGMENT
u$ = 48
v$ = 56
w$ = 64
PMC_BitwiseAnd_L_X PROC					; COMDAT

; 212  : {

$LN22:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, r8
	mov	rbx, rdx
	mov	rsi, rcx

; 213  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(u) * 8)
; 214  :     {
; 215  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 216  :         return (PMC_STATUS_INTERNAL_ERROR);
; 217  :     }
; 218  :     if (v == NULL)

	test	rdx, rdx
	je	SHORT $LN19@PMC_Bitwis

; 219  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 220  :     if (w == NULL)

	test	r8, r8
	je	SHORT $LN19@PMC_Bitwis

; 222  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 223  :     PMC_STATUS_CODE result;
; 224  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	rcx, rdx
	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN1@PMC_Bitwis

; 225  :         return (result);
; 226  :     if (nv->IS_ZERO)

	test	BYTE PTR [rbx+40], 2
	jne	SHORT $LN20@PMC_Bitwis

; 227  :     {
; 228  :         // v が 0 である場合
; 229  :         *w = 0;
; 230  :     }
; 231  :     else if (u == 0)

	test	rsi, rsi
	jne	SHORT $LN8@PMC_Bitwis
$LN20@PMC_Bitwis:

; 255  :         }
; 256  :     }
; 257  :     return (PMC_STATUS_OK);

	xor	eax, eax
	mov	QWORD PTR [rdi], rax

; 258  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN8@PMC_Bitwis:

; 232  :     {
; 233  :         // u が 0 である場合
; 234  :         *w = 0;
; 235  :     }
; 236  :     else
; 237  :     {
; 238  :         // u と v がともに 0 ではない場合
; 239  : 
; 240  :         // x と y の和を計算する
; 241  :         if (__UNIT_TYPE_BIT_COUNT < sizeof(u) * 8)
; 242  :         {
; 243  :             // _UINT64_T が 1 ワードで表現しきれない場合
; 244  : 
; 245  :             _UINT32_T u_hi;
; 246  :             _UINT32_T u_lo = _FROMDWORDTOWORD(u, &u_hi);
; 247  :             _UINT32_T w_hi = nv->UNIT_WORD_COUNT > 1 ? nv->BLOCK[1] & u_hi : 0;
; 248  :             _UINT32_T w_lo = nv->BLOCK[0] & u_lo;
; 249  :             *w = _FROMWORDTODWORD(w_hi, w_lo);
; 250  :         }
; 251  :         else
; 252  :         {
; 253  :             // _UINT64_T が 1 ワードで表現できる場合
; 254  :             *w = nv->BLOCK[0] & u;

	mov	rax, QWORD PTR [rbx+56]
	mov	rax, QWORD PTR [rax]
	and	rax, rsi

; 255  :         }
; 256  :     }
; 257  :     return (PMC_STATUS_OK);

	mov	QWORD PTR [rdi], rax
	xor	eax, eax

; 258  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN19@PMC_Bitwis:

; 221  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN1@PMC_Bitwis:

; 258  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_BitwiseAnd_L_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c
;	COMDAT PMC_BitwiseAnd_I_X
_TEXT	SEGMENT
u$ = 48
v$ = 56
w$ = 64
PMC_BitwiseAnd_I_X PROC					; COMDAT

; 142  : {

$LN14:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, r8
	mov	rbx, rdx
	mov	esi, ecx

; 143  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(u) * 8)
; 144  :     {
; 145  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 146  :         return (PMC_STATUS_INTERNAL_ERROR);
; 147  :     }
; 148  :     if (v == NULL)

	test	rdx, rdx
	je	SHORT $LN11@PMC_Bitwis

; 149  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 150  :     if (w == NULL)

	test	r8, r8
	je	SHORT $LN11@PMC_Bitwis

; 152  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 153  :     PMC_STATUS_CODE result;
; 154  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	rcx, rdx
	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN1@PMC_Bitwis

; 155  :         return (result);
; 156  :     if (nv->IS_ZERO)

	test	BYTE PTR [rbx+40], 2
	jne	SHORT $LN12@PMC_Bitwis

; 157  :     {
; 158  :         // v が 0 である場合
; 159  :         *w = 0;
; 160  :     }
; 161  :     else  if (u == 0)

	test	esi, esi
	jne	SHORT $LN8@PMC_Bitwis
$LN12@PMC_Bitwis:

; 172  :     }
; 173  :     return (PMC_STATUS_OK);

	xor	eax, eax
	mov	DWORD PTR [rdi], eax

; 174  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN8@PMC_Bitwis:

; 162  :     {
; 163  :         // u が 0 である場合
; 164  :         *w = 0;
; 165  :     }
; 166  :     else
; 167  :     {
; 168  :         // u と v がともに 0 ではない場合
; 169  : 
; 170  :         // u と v の bit AND を計算する
; 171  :         *w = nv->BLOCK[0] & u;

	mov	rax, QWORD PTR [rbx+56]
	mov	eax, DWORD PTR [rax]
	and	eax, esi

; 172  :     }
; 173  :     return (PMC_STATUS_OK);

	mov	DWORD PTR [rdi], eax
	xor	eax, eax

; 174  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN11@PMC_Bitwis:

; 151  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN1@PMC_Bitwis:

; 174  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_BitwiseAnd_I_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseand.c
;	COMDAT Initialize_BitwiseAnd
_TEXT	SEGMENT
feature$ = 8
Initialize_BitwiseAnd PROC				; COMDAT

; 359  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 360  : }

	ret	0
Initialize_BitwiseAnd ENDP
_TEXT	ENDS
END
