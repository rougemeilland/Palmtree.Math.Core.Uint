; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	Initialize_BitwiseOr
PUBLIC	PMC_BitwiseOr_I_X
PUBLIC	PMC_BitwiseOr_L_X
PUBLIC	PMC_BitwiseOr_X_I
PUBLIC	PMC_BitwiseOr_X_L
PUBLIC	PMC_BitwiseOr_X_X
EXTRN	CheckBlockLight:PROC
EXTRN	AllocateNumber:PROC
EXTRN	CommitNumber:PROC
EXTRN	CheckNumber:PROC
EXTRN	DuplicateNumber:PROC
EXTRN	From_I_Imp:PROC
EXTRN	From_L_Imp:PROC
EXTRN	number_zero:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_BitwiseOr_I_X DD imagerel $LN10
	DD	imagerel $LN10+94
	DD	imagerel $unwind$PMC_BitwiseOr_I_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_BitwiseOr_L_X DD imagerel $LN10
	DD	imagerel $LN10+96
	DD	imagerel $unwind$PMC_BitwiseOr_L_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_BitwiseOr_X_I DD imagerel $LN10
	DD	imagerel $LN10+91
	DD	imagerel $unwind$PMC_BitwiseOr_X_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_BitwiseOr_X_L DD imagerel $LN10
	DD	imagerel $LN10+93
	DD	imagerel $unwind$PMC_BitwiseOr_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_BitwiseOr_X_X DD imagerel $LN23
	DD	imagerel $LN23+69
	DD	imagerel $unwind$PMC_BitwiseOr_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PMC_BitwiseOr_X_X DD imagerel $LN23+69
	DD	imagerel $LN23+102
	DD	imagerel $chain$0$PMC_BitwiseOr_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PMC_BitwiseOr_X_X DD imagerel $LN23+102
	DD	imagerel $LN23+110
	DD	imagerel $chain$1$PMC_BitwiseOr_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PMC_BitwiseOr_X_X DD imagerel $LN23+110
	DD	imagerel $LN23+272
	DD	imagerel $chain$2$PMC_BitwiseOr_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PMC_BitwiseOr_X_X DD imagerel $LN23+272
	DD	imagerel $LN23+285
	DD	imagerel $chain$3$PMC_BitwiseOr_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_COPY_MEMORY_UNIT DD imagerel _COPY_MEMORY_UNIT
	DD	imagerel _COPY_MEMORY_UNIT+33
	DD	imagerel $unwind$_COPY_MEMORY_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$BitwiseOr_X_1W DD imagerel BitwiseOr_X_1W
	DD	imagerel BitwiseOr_X_1W+20
	DD	imagerel $unwind$BitwiseOr_X_1W
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$BitwiseOr_X_1W DD imagerel BitwiseOr_X_1W+20
	DD	imagerel BitwiseOr_X_1W+45
	DD	imagerel $chain$0$BitwiseOr_X_1W
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$BitwiseOr_X_1W DD imagerel BitwiseOr_X_1W+45
	DD	imagerel BitwiseOr_X_1W+47
	DD	imagerel $chain$1$BitwiseOr_X_1W
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$BitwiseOr_X_2W DD imagerel BitwiseOr_X_2W
	DD	imagerel BitwiseOr_X_2W+91
	DD	imagerel $unwind$BitwiseOr_X_2W
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$BitwiseOr_X_X DD imagerel BitwiseOr_X_X
	DD	imagerel BitwiseOr_X_X+820
	DD	imagerel $unwind$BitwiseOr_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_BitwiseOr_X_I_Imp DD imagerel PMC_BitwiseOr_X_I_Imp
	DD	imagerel PMC_BitwiseOr_X_I_Imp+240
	DD	imagerel $unwind$PMC_BitwiseOr_X_I_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_BitwiseOr_X_L_Imp DD imagerel PMC_BitwiseOr_X_L_Imp
	DD	imagerel PMC_BitwiseOr_X_L_Imp+245
	DD	imagerel $unwind$PMC_BitwiseOr_X_L_Imp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_BitwiseOr_X_L_Imp DD 081401H
	DD	096414H
	DD	085414H
	DD	073414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_BitwiseOr_X_I_Imp DD 081401H
	DD	096414H
	DD	085414H
	DD	073414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$BitwiseOr_X_X DD 081401H
	DD	047414H
	DD	03640fH
	DD	02540aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$BitwiseOr_X_2W DD 040a01H
	DD	02740aH
	DD	016405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$BitwiseOr_X_1W DD 021H
	DD	imagerel BitwiseOr_X_1W
	DD	imagerel BitwiseOr_X_1W+20
	DD	imagerel $unwind$BitwiseOr_X_1W
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$BitwiseOr_X_1W DD 020521H
	DD	027405H
	DD	imagerel BitwiseOr_X_1W
	DD	imagerel BitwiseOr_X_1W+20
	DD	imagerel $unwind$BitwiseOr_X_1W
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$BitwiseOr_X_1W DD 010201H
	DD	06002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_COPY_MEMORY_UNIT DD 040a01H
	DD	02740aH
	DD	016405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PMC_BitwiseOr_X_X DD 021H
	DD	imagerel $LN23
	DD	imagerel $LN23+69
	DD	imagerel $unwind$PMC_BitwiseOr_X_X
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PMC_BitwiseOr_X_X DD 020021H
	DD	0b5400H
	DD	imagerel $LN23
	DD	imagerel $LN23+69
	DD	imagerel $unwind$PMC_BitwiseOr_X_X
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PMC_BitwiseOr_X_X DD 021H
	DD	imagerel $LN23
	DD	imagerel $LN23+69
	DD	imagerel $unwind$PMC_BitwiseOr_X_X
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PMC_BitwiseOr_X_X DD 020521H
	DD	0b5405H
	DD	imagerel $LN23
	DD	imagerel $LN23+69
	DD	imagerel $unwind$PMC_BitwiseOr_X_X
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_BitwiseOr_X_X DD 040801H
	DD	070045208H
	DD	030026003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_BitwiseOr_X_L DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_BitwiseOr_X_I DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_BitwiseOr_L_X DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_BitwiseOr_I_X DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c
;	COMDAT PMC_BitwiseOr_X_L_Imp
_TEXT	SEGMENT
nw_light_check_code$1 = 48
u$ = 48
v$ = 56
w$ = 64
PMC_BitwiseOr_X_L_Imp PROC				; COMDAT

; 268  : {

	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 269  :     PMC_STATUS_CODE result;
; 270  :     if (u->IS_ZERO)

	test	BYTE PTR [rcx+40], 2
	mov	rbx, r8
	mov	rsi, rdx
	mov	rbp, rcx
	je	SHORT $LN2@PMC_Bitwis

; 271  :     {
; 272  :         // u が 0 である場合
; 273  :         if (v == 0)

	test	rdx, rdx
	jne	SHORT $LN4@PMC_Bitwis

; 274  :         {
; 275  :             // v が 0 である場合
; 276  :             *w = &number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR [r8], rax

; 277  :         }

	jmp	$LN11@PMC_Bitwis
$LN4@PMC_Bitwis:

; 278  :         else
; 279  :         {
; 280  :             // v が 0 でない場合
; 281  :             if ((result = From_L_Imp(v, w)) != PMC_STATUS_OK)

	mov	rdx, rbx
	mov	rcx, rsi
	call	From_L_Imp
	test	eax, eax
	je	$LN11@PMC_Bitwis

; 282  :                 return (result);

	jmp	$LN1@PMC_Bitwis
$LN2@PMC_Bitwis:

; 283  :         }
; 284  :     }
; 285  :     else if (v == 0)

	test	rsi, rsi
	jne	SHORT $LN7@PMC_Bitwis

; 286  :     {
; 287  :         // v が 0 である場合
; 288  :         if ((result = DuplicateNumber(u, w)) != PMC_STATUS_OK)

	mov	rdx, rbx
	call	DuplicateNumber
	test	eax, eax
	je	SHORT $LN11@PMC_Bitwis

; 289  :             return (result);

	jmp	SHORT $LN1@PMC_Bitwis
$LN7@PMC_Bitwis:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 637  :         _BitScanReverse64(&pos, x);

	bsr	rax, rsi

; 647  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 63					; 0000003fH
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c

; 334  :             if ((result = AllocateNumber(w, w_bit_count, &nw_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR nw_light_check_code$1[rsp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 647  :         return (sizeof(x) * 8 - 1 - pos);

	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c

; 331  :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);

	mov	edx, 64					; 00000040H
	movsxd	rax, ecx

; 334  :             if ((result = AllocateNumber(w, w_bit_count, &nw_light_check_code)) != PMC_STATUS_OK)

	mov	rcx, rbx
	sub	rdx, rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 197  :         return (x >= y ? x : y);

	cmp	QWORD PTR [rbp+16], rdx
	cmovae	rdx, QWORD PTR [rbp+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c

; 332  :             __UNIT_TYPE w_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count) + 1;

	inc	rdx

; 334  :             if ((result = AllocateNumber(w, w_bit_count, &nw_light_check_code)) != PMC_STATUS_OK)

	call	AllocateNumber
	test	eax, eax
	jne	SHORT $LN1@PMC_Bitwis

; 335  :                 return (result);
; 336  :             BitwiseOr_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, (__UNIT_TYPE)v, (*w)->BLOCK);

	mov	rax, QWORD PTR [rbx]
	mov	rdx, QWORD PTR [rbp+56]
	mov	rcx, QWORD PTR [rbp+8]
	mov	rdi, QWORD PTR [rax+56]
	mov	rax, QWORD PTR [rdx]

; 34   :     if (u_count == 1)

	or	rax, rsi
	mov	QWORD PTR [rdi], rax
	cmp	rcx, 1
	je	SHORT $LN56@PMC_Bitwis

; 35   :         w[0] = u[0] | v;
; 36   :     else
; 37   :     {
; 38   :         w[0] = u[0] | v;
; 39   :         _COPY_MEMORY_UNIT(w + 1, u + 1, u_count - 1);

	dec	rcx
	lea	rsi, QWORD PTR [rdx+8]
	add	rdi, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 63   :         __movsq(d, s, count);

	rep movsq
$LN56@PMC_Bitwis:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c

; 337  :             if ((result = CheckBlockLight((*w)->BLOCK, nw_light_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR [rbx]
	mov	rdx, QWORD PTR nw_light_check_code$1[rsp]
	mov	rcx, QWORD PTR [rcx+56]
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_Bitwis

; 338  :                 return (result);
; 339  :             CommitNumber(*w);

	mov	rcx, QWORD PTR [rbx]
	call	CommitNumber
$LN11@PMC_Bitwis:

; 340  :         }
; 341  :     }
; 342  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Bitwis:

; 343  : }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rbp, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_BitwiseOr_X_L_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c
;	COMDAT PMC_BitwiseOr_X_I_Imp
_TEXT	SEGMENT
nz_check_code$1 = 48
u$ = 48
v$ = 56
w$ = 64
PMC_BitwiseOr_X_I_Imp PROC				; COMDAT

; 181  : {

	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 182  :     PMC_STATUS_CODE result;
; 183  :     if (u->IS_ZERO)

	test	BYTE PTR [rcx+40], 2
	mov	rbx, r8
	mov	esi, edx
	mov	rbp, rcx
	je	SHORT $LN2@PMC_Bitwis

; 184  :     {
; 185  :         // u が 0 である場合
; 186  :         if (v == 0)

	test	edx, edx
	jne	SHORT $LN4@PMC_Bitwis

; 187  :         {
; 188  :             // v が 0 である場合
; 189  :             *w = &number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR [r8], rax

; 190  :         }

	jmp	$LN8@PMC_Bitwis
$LN4@PMC_Bitwis:

; 191  :         else
; 192  :         {
; 193  :             // v が 0 でない場合
; 194  :             if ((result = From_I_Imp(v, w)) != PMC_STATUS_OK)

	mov	rdx, rbx
	mov	ecx, esi
	call	From_I_Imp
	test	eax, eax
	je	$LN8@PMC_Bitwis

; 195  :                 return (result);

	jmp	$LN1@PMC_Bitwis
$LN2@PMC_Bitwis:

; 196  :         }
; 197  :     }
; 198  :     else if (v == 0)

	test	edx, edx
	jne	SHORT $LN7@PMC_Bitwis

; 199  :     {
; 200  :         // v が 0 である場合
; 201  :         if ((result = DuplicateNumber(u, w)) != PMC_STATUS_OK)

	mov	rdx, rbx
	call	DuplicateNumber
	test	eax, eax
	je	SHORT $LN8@PMC_Bitwis

; 202  :             return (result);

	jmp	SHORT $LN1@PMC_Bitwis
$LN7@PMC_Bitwis:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 594  :         _BitScanReverse(&pos, x);

	bsr	eax, esi

; 600  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c

; 211  :         if ((result = AllocateNumber(w, w_bit_count, &nz_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR nz_check_code$1[rsp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 600  :         return (sizeof(x) * 8 - 1 - pos);

	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c

; 208  :         __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

	mov	edx, 32					; 00000020H
	movsxd	rax, ecx

; 211  :         if ((result = AllocateNumber(w, w_bit_count, &nz_check_code)) != PMC_STATUS_OK)

	mov	rcx, rbx
	sub	rdx, rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 197  :         return (x >= y ? x : y);

	cmp	QWORD PTR [rbp+16], rdx
	cmovae	rdx, QWORD PTR [rbp+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c

; 209  :         __UNIT_TYPE w_bit_count = _MAXIMUM_UNIT(u_bit_count, v_bit_count) + 1;

	inc	rdx

; 211  :         if ((result = AllocateNumber(w, w_bit_count, &nz_check_code)) != PMC_STATUS_OK)

	call	AllocateNumber
	test	eax, eax
	jne	SHORT $LN1@PMC_Bitwis

; 212  :             return (result);
; 213  :         BitwiseOr_X_1W(u->BLOCK, u->UNIT_WORD_COUNT, v, (*w)->BLOCK);

	mov	rax, QWORD PTR [rbx]
	mov	rdx, QWORD PTR [rbp+56]
	mov	rcx, QWORD PTR [rbp+8]
	mov	rdi, QWORD PTR [rax+56]
	mov	rax, rsi
	or	rax, QWORD PTR [rdx]
	mov	QWORD PTR [rdi], rax

; 34   :     if (u_count == 1)

	cmp	rcx, 1
	je	SHORT $LN22@PMC_Bitwis

; 35   :         w[0] = u[0] | v;
; 36   :     else
; 37   :     {
; 38   :         w[0] = u[0] | v;
; 39   :         _COPY_MEMORY_UNIT(w + 1, u + 1, u_count - 1);

	dec	rcx
	lea	rsi, QWORD PTR [rdx+8]
	add	rdi, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 63   :         __movsq(d, s, count);

	rep movsq
$LN22@PMC_Bitwis:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c

; 214  :         if ((result = CheckBlockLight((*w)->BLOCK, nz_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR [rbx]
	mov	rdx, QWORD PTR nz_check_code$1[rsp]
	mov	rcx, QWORD PTR [rcx+56]
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_Bitwis

; 215  :             return (result);
; 216  :         CommitNumber(*w);

	mov	rcx, QWORD PTR [rbx]
	call	CommitNumber
$LN8@PMC_Bitwis:

; 217  :     }
; 218  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Bitwis:

; 219  : }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rbp, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_BitwiseOr_X_I_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c
;	COMDAT BitwiseOr_X_X
_TEXT	SEGMENT
u$ = 8
u_count$ = 16
v$ = 24
v_count$ = 32
w$ = 40
BitwiseOr_X_X PROC					; COMDAT

; 66   : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi

; 67   :     __UNIT_TYPE or_count = v_count;
; 68   :     __UNIT_TYPE cp_count = u_count - v_count;
; 69   : 
; 70   :     __UNIT_TYPE count = or_count >> 5;
; 71   :     while (count > 0)

	mov	rdi, QWORD PTR w$[rsp]
	mov	rbp, rdx
	mov	r11, r9
	sub	rbp, r9
	shr	r11, 5
	mov	rbx, r9
	mov	rsi, rcx
	test	r11, r11
	je	$LN3@BitwiseOr_
	npad	11
$LL2@BitwiseOr_:

; 72   :     {
; 73   :         w[0] = u[0] | v[0];

	lea	rcx, QWORD PTR [r8+16]
	lea	rax, QWORD PTR [rcx+232]
	cmp	rdi, rax
	ja	SHORT $LN32@BitwiseOr_
	lea	rax, QWORD PTR [rdi+248]
	cmp	rax, r8
	jae	SHORT $LN72@BitwiseOr_
$LN32@BitwiseOr_:
	lea	rax, QWORD PTR [rsi+248]
	cmp	rdi, rax
	ja	SHORT $LN33@BitwiseOr_
	lea	rax, QWORD PTR [rdi+248]
	cmp	rax, rsi
	jb	SHORT $LN33@BitwiseOr_
$LN72@BitwiseOr_:
	mov	r9, rsi
	mov	r10, rdi
	sub	r9, r8
	mov	rax, r8
	sub	r10, r8
	mov	edx, 32					; 00000020H
	npad	8
$LL71@BitwiseOr_:
	mov	rcx, QWORD PTR [rax+r9]
	or	rcx, QWORD PTR [rax]
	mov	QWORD PTR [rax+r10], rcx
	lea	rax, QWORD PTR [rax+8]
	sub	rdx, 1
	jne	SHORT $LL71@BitwiseOr_
	jmp	SHORT $LN15@BitwiseOr_
$LN33@BitwiseOr_:
	mov	rax, rsi
	mov	rdx, rdi
	sub	rax, r8
	mov	r9d, 4
	sub	rdx, r8
	npad	7
$LL14@BitwiseOr_:
	movdqu	xmm0, XMMWORD PTR [rcx-16]
	movdqu	xmm1, XMMWORD PTR [rax+rcx-16]
	movdqu	xmm2, XMMWORD PTR [rax+rcx]
	lea	rcx, QWORD PTR [rcx+64]
	por	xmm1, xmm0
	movdqu	xmm0, XMMWORD PTR [rcx-64]
	movdqu	XMMWORD PTR [rdx+rcx-80], xmm1
	por	xmm2, xmm0
	movdqu	xmm0, XMMWORD PTR [rcx-48]
	movdqu	xmm1, XMMWORD PTR [rax+rcx-48]
	movdqu	XMMWORD PTR [rdx+rcx-64], xmm2
	por	xmm1, xmm0
	movdqu	xmm0, XMMWORD PTR [rcx-32]
	movdqu	xmm2, XMMWORD PTR [rax+rcx-32]
	movdqu	XMMWORD PTR [rdx+rcx-48], xmm1
	por	xmm2, xmm0
	movdqu	XMMWORD PTR [rdx+rcx-32], xmm2
	sub	r9, 1
	jne	SHORT $LL14@BitwiseOr_
$LN15@BitwiseOr_:

; 74   :         w[1] = u[1] | v[1];
; 75   :         w[2] = u[2] | v[2];
; 76   :         w[3] = u[3] | v[3];
; 77   :         w[4] = u[4] | v[4];
; 78   :         w[5] = u[5] | v[5];
; 79   :         w[6] = u[6] | v[6];
; 80   :         w[7] = u[7] | v[7];
; 81   :         w[8] = u[8] | v[8];
; 82   :         w[9] = u[9] | v[9];
; 83   :         w[10] = u[10] | v[10];
; 84   :         w[11] = u[11] | v[11];
; 85   :         w[12] = u[12] | v[12];
; 86   :         w[13] = u[13] | v[13];
; 87   :         w[14] = u[14] | v[14];
; 88   :         w[15] = u[15] | v[15];
; 89   :         w[16] = u[16] | v[16];
; 90   :         w[17] = u[17] | v[17];
; 91   :         w[18] = u[18] | v[18];
; 92   :         w[19] = u[19] | v[19];
; 93   :         w[20] = u[20] | v[20];
; 94   :         w[21] = u[21] | v[21];
; 95   :         w[22] = u[22] | v[22];
; 96   :         w[23] = u[23] | v[23];
; 97   :         w[24] = u[24] | v[24];
; 98   :         w[25] = u[25] | v[25];
; 99   :         w[26] = u[26] | v[26];
; 100  :         w[27] = u[27] | v[27];
; 101  :         w[28] = u[28] | v[28];
; 102  :         w[29] = u[29] | v[29];
; 103  :         w[30] = u[30] | v[30];
; 104  :         w[31] = u[31] | v[31];
; 105  :         u += 32;

	add	rsi, 256				; 00000100H

; 106  :         v += 32;

	add	r8, 256					; 00000100H

; 107  :         w += 32;

	add	rdi, 256				; 00000100H

; 108  :         --count;

	sub	r11, 1
	jne	$LL2@BitwiseOr_
$LN3@BitwiseOr_:

; 109  :     }
; 110  : 
; 111  :     if (or_count & 0x10)

	test	bl, 16
	je	$LN4@BitwiseOr_

; 112  :     {
; 113  :         w[0] = u[0] | v[0];

	lea	rax, QWORD PTR [r8+120]
	xor	r9d, r9d
	lea	rcx, QWORD PTR [rdi+120]
	mov	edx, 16
	cmp	rdi, rax
	ja	SHORT $LN36@BitwiseOr_
	cmp	rcx, r8
	jae	$LN35@BitwiseOr_
$LN36@BitwiseOr_:
	lea	rax, QWORD PTR [rsi+120]
	cmp	rdi, rax
	ja	SHORT $LN37@BitwiseOr_
	cmp	rcx, rsi
	jae	$LN35@BitwiseOr_
$LN37@BitwiseOr_:
	mov	rcx, rsi
	lea	rax, QWORD PTR [r8+16]
	sub	rcx, r8
	mov	r9, rdi
	sub	r9, r8
	mov	r10d, 2
	npad	5
$LL16@BitwiseOr_:
	movdqu	xmm0, XMMWORD PTR [rax-16]
	movdqu	xmm1, XMMWORD PTR [rax+rcx-16]
	movdqu	xmm2, XMMWORD PTR [rax+rcx]
	lea	rax, QWORD PTR [rax+64]
	por	xmm1, xmm0
	movdqu	xmm0, XMMWORD PTR [rax-64]
	movdqu	XMMWORD PTR [rax+r9-80], xmm1
	por	xmm2, xmm0
	movdqu	xmm0, XMMWORD PTR [rax-48]
	movdqu	xmm1, XMMWORD PTR [rax+rcx-48]
	movdqu	XMMWORD PTR [rax+r9-64], xmm2
	por	xmm1, xmm0
	movdqu	xmm0, XMMWORD PTR [rax-32]
	movdqu	xmm2, XMMWORD PTR [rax+rcx-32]
	movdqu	XMMWORD PTR [rax+r9-48], xmm1
	por	xmm2, xmm0
	movdqu	XMMWORD PTR [rax+r9-32], xmm2
	sub	r10, 1
	jne	SHORT $LL16@BitwiseOr_
	mov	r9, rdx
$LN35@BitwiseOr_:
	cmp	r9, rdx
	jae	SHORT $LN17@BitwiseOr_
	mov	r10, rsi
	lea	rcx, QWORD PTR [r8+r9*8]
	mov	r11, rdi
	sub	r10, r8
	sub	r11, r8
	sub	rdx, r9
	npad	4
$LL34@BitwiseOr_:
	mov	rax, QWORD PTR [rcx+r10]
	or	rax, QWORD PTR [rcx]
	mov	QWORD PTR [rcx+r11], rax
	lea	rcx, QWORD PTR [rcx+8]
	sub	rdx, 1
	jne	SHORT $LL34@BitwiseOr_
$LN17@BitwiseOr_:

; 114  :         w[1] = u[1] | v[1];
; 115  :         w[2] = u[2] | v[2];
; 116  :         w[3] = u[3] | v[3];
; 117  :         w[4] = u[4] | v[4];
; 118  :         w[5] = u[5] | v[5];
; 119  :         w[6] = u[6] | v[6];
; 120  :         w[7] = u[7] | v[7];
; 121  :         w[8] = u[8] | v[8];
; 122  :         w[9] = u[9] | v[9];
; 123  :         w[10] = u[10] | v[10];
; 124  :         w[11] = u[11] | v[11];
; 125  :         w[12] = u[12] | v[12];
; 126  :         w[13] = u[13] | v[13];
; 127  :         w[14] = u[14] | v[14];
; 128  :         w[15] = u[15] | v[15];
; 129  :         u += 16;

	sub	rsi, -128				; ffffffffffffff80H

; 130  :         v += 16;

	sub	r8, -128				; ffffffffffffff80H

; 131  :         w += 16;

	sub	rdi, -128				; ffffffffffffff80H
$LN4@BitwiseOr_:

; 132  :     }
; 133  : 
; 134  :     if (or_count & 0x8)

	test	bl, 8
	je	SHORT $LN5@BitwiseOr_

; 135  :     {
; 136  :         w[0] = u[0] | v[0];

	mov	rax, QWORD PTR [rsi]
	or	rax, QWORD PTR [r8]
	mov	QWORD PTR [rdi], rax
	mov	rax, QWORD PTR [rsi+8]
	or	rax, QWORD PTR [r8+8]
	mov	QWORD PTR [rdi+8], rax
	mov	rax, QWORD PTR [rsi+16]
	or	rax, QWORD PTR [r8+16]
	mov	QWORD PTR [rdi+16], rax
	mov	rax, QWORD PTR [rsi+24]
	or	rax, QWORD PTR [r8+24]
	mov	QWORD PTR [rdi+24], rax
	mov	rax, QWORD PTR [rsi+32]
	or	rax, QWORD PTR [r8+32]
	mov	QWORD PTR [rdi+32], rax
	mov	rax, QWORD PTR [rsi+40]
	or	rax, QWORD PTR [r8+40]
	mov	QWORD PTR [rdi+40], rax
	mov	rax, QWORD PTR [rsi+48]
	or	rax, QWORD PTR [r8+48]
	mov	QWORD PTR [rdi+48], rax
	mov	rax, QWORD PTR [rsi+56]

; 137  :         w[1] = u[1] | v[1];
; 138  :         w[2] = u[2] | v[2];
; 139  :         w[3] = u[3] | v[3];
; 140  :         w[4] = u[4] | v[4];
; 141  :         w[5] = u[5] | v[5];
; 142  :         w[6] = u[6] | v[6];
; 143  :         w[7] = u[7] | v[7];
; 144  :         u += 8;

	add	rsi, 64					; 00000040H
	or	rax, QWORD PTR [r8+56]

; 145  :         v += 8;

	add	r8, 64					; 00000040H
	mov	QWORD PTR [rdi+56], rax

; 146  :         w += 8;

	add	rdi, 64					; 00000040H
$LN5@BitwiseOr_:

; 147  :     }
; 148  : 
; 149  :     if (or_count & 0x4)

	test	bl, 4
	je	SHORT $LN6@BitwiseOr_

; 150  :     {
; 151  :         w[0] = u[0] | v[0];

	mov	rax, QWORD PTR [rsi]
	or	rax, QWORD PTR [r8]
	mov	QWORD PTR [rdi], rax
	mov	rax, QWORD PTR [rsi+8]
	or	rax, QWORD PTR [r8+8]
	mov	QWORD PTR [rdi+8], rax
	mov	rax, QWORD PTR [rsi+16]
	or	rax, QWORD PTR [r8+16]
	mov	QWORD PTR [rdi+16], rax
	mov	rax, QWORD PTR [rsi+24]

; 152  :         w[1] = u[1] | v[1];
; 153  :         w[2] = u[2] | v[2];
; 154  :         w[3] = u[3] | v[3];
; 155  :         u += 4;

	add	rsi, 32					; 00000020H
	or	rax, QWORD PTR [r8+24]

; 156  :         v += 4;

	add	r8, 32					; 00000020H
	mov	QWORD PTR [rdi+24], rax

; 157  :         w += 4;

	add	rdi, 32					; 00000020H
$LN6@BitwiseOr_:

; 158  :     }
; 159  : 
; 160  :     if (or_count & 0x2)

	test	bl, 2
	je	SHORT $LN7@BitwiseOr_

; 161  :     {
; 162  :         w[0] = u[0] | v[0];

	mov	rax, QWORD PTR [rsi]
	or	rax, QWORD PTR [r8]
	mov	QWORD PTR [rdi], rax
	mov	rax, QWORD PTR [rsi+8]

; 163  :         w[1] = u[1] | v[1];
; 164  :         u += 2;

	add	rsi, 16
	or	rax, QWORD PTR [r8+8]

; 165  :         v += 2;

	add	r8, 16
	mov	QWORD PTR [rdi+8], rax

; 166  :         w += 2;

	add	rdi, 16
$LN7@BitwiseOr_:

; 167  :     }
; 168  : 
; 169  :     if (or_count & 0x1)

	test	bl, 1
	je	SHORT $LN8@BitwiseOr_

; 170  :     {
; 171  :         w[0] = u[0] | v[0];

	mov	rax, QWORD PTR [rsi]

; 172  :         u += 1;

	add	rsi, 8
	or	rax, QWORD PTR [r8]
	mov	QWORD PTR [rdi], rax

; 173  :         v += 1;
; 174  :         w += 1;

	add	rdi, 8
$LN8@BitwiseOr_:

; 178  : }

	mov	rbx, QWORD PTR [rsp+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 63   :         __movsq(d, s, count);

	mov	rcx, rbp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c

; 178  : }

	mov	rbp, QWORD PTR [rsp+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 63   :         __movsq(d, s, count);

	rep movsq
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c

; 178  : }

	mov	rsi, QWORD PTR [rsp+24]
	mov	rdi, QWORD PTR [rsp+32]
	ret	0
BitwiseOr_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c
;	COMDAT BitwiseOr_X_2W
_TEXT	SEGMENT
u$ = 8
u_count$ = 16
v_hi$ = 24
v_lo$ = 32
w$ = 40
BitwiseOr_X_2W PROC					; COMDAT

; 45   : {

	mov	QWORD PTR [rsp+8], rsi
	mov	QWORD PTR [rsp+16], rdi
	mov	rax, QWORD PTR [rcx]
	mov	rsi, rcx
	mov	rdi, QWORD PTR w$[rsp]
	or	rax, r9

; 46   :     if (u_count == 1)

	mov	QWORD PTR [rdi], rax
	cmp	rdx, 1
	jne	SHORT $LN2@BitwiseOr_

; 47   :     {
; 48   :         w[0] = u[0] | v_lo;
; 49   :         w[1] = v_hi;

	mov	QWORD PTR [rdi+8], r8

; 62   : }

	mov	rsi, QWORD PTR [rsp+8]
	mov	rdi, QWORD PTR [rsp+16]
	ret	0
$LN2@BitwiseOr_:

; 50   :     }
; 51   :     else if (u_count == 2)

	mov	rax, QWORD PTR [rcx+8]
	or	rax, r8
	mov	QWORD PTR [rdi+8], rax
	cmp	rdx, 2
	je	SHORT $LN7@BitwiseOr_

; 52   :     {
; 53   :         w[0] = u[0] | v_lo;
; 54   :         w[1] = u[1] | v_hi;
; 55   :     }
; 56   :     else
; 57   :     {
; 58   :         w[0] = u[0] | v_lo;
; 59   :         w[1] = u[1] | v_hi;
; 60   :         _COPY_MEMORY_UNIT(w + 2, u + 2, u_count - 2);

	add	rsi, 16
	lea	rcx, QWORD PTR [rdx-2]
	add	rdi, 16
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 63   :         __movsq(d, s, count);

	rep movsq
$LN7@BitwiseOr_:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c

; 62   : }

	mov	rsi, QWORD PTR [rsp+8]
	mov	rdi, QWORD PTR [rsp+16]
	ret	0
BitwiseOr_X_2W ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c
;	COMDAT BitwiseOr_X_1W
_TEXT	SEGMENT
u$ = 16
u_count$ = 24
v$ = 32
w$ = 40
BitwiseOr_X_1W PROC					; COMDAT

; 33   : {

	push	rsi
	mov	rax, QWORD PTR [rcx]
	mov	rsi, rcx
	or	rax, r8
	mov	QWORD PTR [r9], rax

; 34   :     if (u_count == 1)

	cmp	rdx, 1
	je	SHORT $LN5@BitwiseOr_

; 35   :         w[0] = u[0] | v;
; 36   :     else
; 37   :     {
; 38   :         w[0] = u[0] | v;
; 39   :         _COPY_MEMORY_UNIT(w + 1, u + 1, u_count - 1);

	mov	QWORD PTR [rsp+16], rdi
	lea	rcx, QWORD PTR [rdx-1]
	lea	rdi, QWORD PTR [r9+8]
	add	rsi, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 63   :         __movsq(d, s, count);

	rep movsq
	mov	rdi, QWORD PTR [rsp+16]
$LN5@BitwiseOr_:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c

; 41   : }

	pop	rsi
	ret	0
BitwiseOr_X_1W ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _LZCNT_ALT_UNIT
_TEXT	SEGMENT
x$ = 8
_LZCNT_ALT_UNIT PROC					; COMDAT

; 623  :         if (x == 0)

	test	rcx, rcx
	jne	SHORT $LN2@LZCNT_ALT_

; 624  :             return (sizeof(x) * 8);

	mov	eax, 64					; 00000040H

; 648  :     }

	ret	0
$LN2@LZCNT_ALT_:

; 625  : #ifdef _M_IX86
; 626  :         _UINT32_T pos;
; 627  : #ifdef _MSC_VER
; 628  :         _BitScanReverse(&pos, x);
; 629  : #elif defined(__GNUC__)
; 630  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 631  : #else
; 632  : #error unknown compiler
; 633  : #endif
; 634  : #elif defined(_M_X64)
; 635  : #ifdef _MSC_VER
; 636  :         _UINT32_T pos;
; 637  :         _BitScanReverse64(&pos, x);

	bsr	rcx, rcx

; 638  : #elif defined(__GNUC__)
; 639  :         _UINT64_T pos;
; 640  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 641  : #else
; 642  : #error unknown compiler
; 643  : #endif
; 644  : #else
; 645  : #error unknown platform
; 646  : #endif
; 647  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 63					; 0000003fH
	sub	eax, ecx

; 648  :     }

	ret	0
_LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _LZCNT_ALT_32
_TEXT	SEGMENT
x$ = 8
_LZCNT_ALT_32 PROC					; COMDAT

; 590  :         if (x == 0)

	test	ecx, ecx
	jne	SHORT $LN2@LZCNT_ALT_

; 591  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 601  :     }

	ret	0
$LN2@LZCNT_ALT_:

; 592  :         _UINT32_T pos;
; 593  : #ifdef _MSC_VER
; 594  :         _BitScanReverse(&pos, x);

	bsr	ecx, ecx

; 595  : #elif defined(__GNUC__)
; 596  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 597  : #else
; 598  : #error unknown compiler
; 599  : #endif
; 600  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31
	sub	eax, ecx

; 601  :     }

	ret	0
_LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _MAXIMUM_UNIT
_TEXT	SEGMENT
x$ = 8
y$ = 16
_MAXIMUM_UNIT PROC					; COMDAT

; 197  :         return (x >= y ? x : y);

	cmp	rcx, rdx
	cmovae	rdx, rcx
	mov	rax, rdx

; 198  :     }

	ret	0
_MAXIMUM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _FROMDWORDTOWORD
_TEXT	SEGMENT
value$ = 8
result_high$ = 16
_FROMDWORDTOWORD PROC					; COMDAT

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	rax, rcx
	shr	rax, 32					; 00000020H
	mov	DWORD PTR [rdx], eax

; 177  :         return ((_UINT32_T)value);

	mov	eax, ecx

; 178  :     }

	ret	0
_FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _COPY_MEMORY_UNIT
_TEXT	SEGMENT
d$ = 8
s$ = 16
count$ = 24
_COPY_MEMORY_UNIT PROC					; COMDAT

; 59   :     {

	mov	QWORD PTR [rsp+8], rsi
	mov	QWORD PTR [rsp+16], rdi

; 60   : #ifdef _M_IX86
; 61   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);
; 62   : #elif defined(_M_X64)
; 63   :         __movsq(d, s, count);

	mov	rdi, rcx
	mov	rsi, rdx
	mov	rcx, r8
	rep movsq

; 64   : #else
; 65   : #error unknown platform
; 66   : #endif
; 67   :     }

	mov	rsi, QWORD PTR [rsp+8]
	mov	rdi, QWORD PTR [rsp+16]
	ret	0
_COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c
;	COMDAT PMC_BitwiseOr_X_X
_TEXT	SEGMENT
nw$ = 80
u$ = 80
v$ = 88
w$ = 96
nw_light_check_code$1 = 104
PMC_BitwiseOr_X_X PROC					; COMDAT

; 392  : {

$LN23:
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rsi, r8
	mov	rbx, rdx
	mov	rdi, rcx

; 393  :     if (u == NULL)

	test	rcx, rcx
	je	$LN19@PMC_Bitwis

; 394  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 395  :     if (v == NULL)

	test	rdx, rdx
	je	$LN19@PMC_Bitwis

; 396  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 397  :     if (w == NULL)

	test	r8, r8
	je	$LN19@PMC_Bitwis

; 399  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 400  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 401  :     PMC_STATUS_CODE result;
; 402  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN1@PMC_Bitwis

; 403  :         return (result);
; 404  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	rcx, rbx
	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN1@PMC_Bitwis

; 405  :         return (result);
; 406  :     NUMBER_HEADER* nw;
; 407  :     if (nu->IS_ZERO)

	test	BYTE PTR [rdi+40], 2
	mov	QWORD PTR [rsp+88], rbp
	je	SHORT $LN7@PMC_Bitwis

; 408  :     {
; 409  :         if ((result = DuplicateNumber(nv, &nw)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR nw$[rsp]
	mov	rcx, rbx
$LN21@PMC_Bitwis:
	call	DuplicateNumber
	test	eax, eax
	je	$LN11@PMC_Bitwis
$LN20@PMC_Bitwis:
	mov	rbp, QWORD PTR [rsp+88]
$LN1@PMC_Bitwis:

; 442  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
$LN7@PMC_Bitwis:

; 410  :             return (result);
; 411  :     }
; 412  :     else if (nv->IS_ZERO)

	test	BYTE PTR [rbx+40], 2
	je	SHORT $LN10@PMC_Bitwis

; 413  :     {
; 414  :         if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR nw$[rsp]
	mov	rcx, rdi

; 415  :             return (result);

	jmp	SHORT $LN21@PMC_Bitwis
$LN10@PMC_Bitwis:

; 416  :     }
; 417  :     else
; 418  :     {
; 419  :         if (nu->UNIT_WORD_COUNT < nv->UNIT_WORD_COUNT)

	mov	rcx, QWORD PTR [rdi+8]

; 429  :         if ((result = AllocateNumber(&nw, w_bit_count, &nw_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR nw_light_check_code$1[rsp]
	cmp	rcx, QWORD PTR [rbx+8]
	mov	rbp, rdi
	lea	rcx, QWORD PTR nw$[rsp]
	cmovae	rbp, rbx
	cmovae	rbx, rdi
	mov	rdx, QWORD PTR [rbp+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 197  :         return (x >= y ? x : y);

	cmp	QWORD PTR [rbx+16], rdx
	cmovae	rdx, QWORD PTR [rbx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c

; 429  :         if ((result = AllocateNumber(&nw, w_bit_count, &nw_light_check_code)) != PMC_STATUS_OK)

	call	AllocateNumber
	test	eax, eax
	jne	SHORT $LN20@PMC_Bitwis

; 430  :             return (result);
; 431  :         BitwiseOr_X_X(nu->BLOCK, nu->UNIT_WORD_COUNT, nv->BLOCK, nv->UNIT_WORD_COUNT, nw->BLOCK);

	mov	rax, QWORD PTR nw$[rsp]
	mov	r9, QWORD PTR [rbp+8]
	mov	r8, QWORD PTR [rbp+56]
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, QWORD PTR [rax+56]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR [rbx+56]
	call	BitwiseOr_X_X

; 432  :         if ((result = CheckBlockLight(nw->BLOCK, nw_light_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nw$[rsp]
	mov	rdx, QWORD PTR nw_light_check_code$1[rsp]
	mov	rcx, QWORD PTR [rcx+56]
	call	CheckBlockLight
	test	eax, eax
	jne	$LN20@PMC_Bitwis

; 433  :             return (result);
; 434  :         CommitNumber(nw);

	mov	rcx, QWORD PTR nw$[rsp]
	call	CommitNumber
$LN11@PMC_Bitwis:

; 435  :     }
; 436  :     *w = nw;

	mov	rax, QWORD PTR nw$[rsp]
	mov	rbp, QWORD PTR [rsp+88]
	mov	QWORD PTR [rsi], rax

; 437  : #ifdef _DEBUG
; 438  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 439  :         return (result);
; 440  : #endif
; 441  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 442  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
$LN19@PMC_Bitwis:

; 398  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1

; 442  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
PMC_BitwiseOr_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c
;	COMDAT PMC_BitwiseOr_X_L
_TEXT	SEGMENT
u$ = 48
v$ = 56
w$ = 64
PMC_BitwiseOr_X_L PROC					; COMDAT

; 369  : {

$LN10:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, r8
	mov	rsi, rdx
	mov	rbx, rcx

; 370  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(v) * 8)
; 371  :     {
; 372  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 373  :         return (PMC_STATUS_INTERNAL_ERROR);
; 374  :     }
; 375  :     if (u == NULL)

	test	rcx, rcx
	je	SHORT $LN8@PMC_Bitwis

; 376  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 377  :     if (w == NULL)

	test	r8, r8
	je	SHORT $LN8@PMC_Bitwis

; 379  :     PMC_STATUS_CODE result;
; 380  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN6@PMC_Bitwis

; 381  :         return (result);
; 382  :     if ((result = PMC_BitwiseOr_X_L_Imp((NUMBER_HEADER*)u, v, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	r8, rdi
	mov	rdx, rsi
	mov	rcx, rbx

; 383  :         return (result);
; 384  : #ifdef _DEBUG
; 385  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 386  :         return (result);
; 387  : #endif
; 388  :     return (PMC_STATUS_OK);
; 389  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi

; 381  :         return (result);
; 382  :     if ((result = PMC_BitwiseOr_X_L_Imp((NUMBER_HEADER*)u, v, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	jmp	PMC_BitwiseOr_X_L_Imp
$LN8@PMC_Bitwis:

; 378  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN6@PMC_Bitwis:

; 383  :         return (result);
; 384  : #ifdef _DEBUG
; 385  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 386  :         return (result);
; 387  : #endif
; 388  :     return (PMC_STATUS_OK);
; 389  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_BitwiseOr_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c
;	COMDAT PMC_BitwiseOr_X_I
_TEXT	SEGMENT
u$ = 48
v$ = 56
w$ = 64
PMC_BitwiseOr_X_I PROC					; COMDAT

; 245  : {

$LN10:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, r8
	mov	esi, edx
	mov	rbx, rcx

; 246  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)
; 247  :     {
; 248  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 249  :         return (PMC_STATUS_INTERNAL_ERROR);
; 250  :     }
; 251  :     if (u == NULL)

	test	rcx, rcx
	je	SHORT $LN8@PMC_Bitwis

; 252  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 253  :     if (w == NULL)

	test	r8, r8
	je	SHORT $LN8@PMC_Bitwis

; 255  :     PMC_STATUS_CODE result;
; 256  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN6@PMC_Bitwis

; 257  :         return (result);
; 258  :     if ((result = PMC_BitwiseOr_X_I_Imp((NUMBER_HEADER*)u, v, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	r8, rdi
	mov	edx, esi
	mov	rcx, rbx

; 259  :         return (result);
; 260  : #ifdef _DEBUG
; 261  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 262  :         return (result);
; 263  : #endif
; 264  :     return (PMC_STATUS_OK);
; 265  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi

; 257  :         return (result);
; 258  :     if ((result = PMC_BitwiseOr_X_I_Imp((NUMBER_HEADER*)u, v, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	jmp	PMC_BitwiseOr_X_I_Imp
$LN8@PMC_Bitwis:

; 254  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN6@PMC_Bitwis:

; 259  :         return (result);
; 260  : #ifdef _DEBUG
; 261  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 262  :         return (result);
; 263  : #endif
; 264  :     return (PMC_STATUS_OK);
; 265  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_BitwiseOr_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c
;	COMDAT PMC_BitwiseOr_L_X
_TEXT	SEGMENT
u$ = 48
v$ = 56
w$ = 64
PMC_BitwiseOr_L_X PROC					; COMDAT

; 346  : {

$LN10:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, r8
	mov	rbx, rdx
	mov	rsi, rcx

; 347  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(u) * 8)
; 348  :     {
; 349  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 350  :         return (PMC_STATUS_INTERNAL_ERROR);
; 351  :     }
; 352  :     if (v == NULL)

	test	rdx, rdx
	je	SHORT $LN8@PMC_Bitwis

; 353  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 354  :     if (w == NULL)

	test	r8, r8
	je	SHORT $LN8@PMC_Bitwis

; 356  :     PMC_STATUS_CODE result;
; 357  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	mov	rcx, rdx
	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN6@PMC_Bitwis

; 358  :         return (result);
; 359  :     if ((result = PMC_BitwiseOr_X_L_Imp((NUMBER_HEADER*)v, u, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	r8, rdi
	mov	rdx, rsi
	mov	rcx, rbx

; 360  :         return (result);
; 361  : #ifdef _DEBUG
; 362  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 363  :         return (result);
; 364  : #endif
; 365  :     return (PMC_STATUS_OK);
; 366  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi

; 358  :         return (result);
; 359  :     if ((result = PMC_BitwiseOr_X_L_Imp((NUMBER_HEADER*)v, u, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	jmp	PMC_BitwiseOr_X_L_Imp
$LN8@PMC_Bitwis:

; 355  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN6@PMC_Bitwis:

; 360  :         return (result);
; 361  : #ifdef _DEBUG
; 362  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 363  :         return (result);
; 364  : #endif
; 365  :     return (PMC_STATUS_OK);
; 366  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_BitwiseOr_L_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c
;	COMDAT PMC_BitwiseOr_I_X
_TEXT	SEGMENT
u$ = 48
v$ = 56
w$ = 64
PMC_BitwiseOr_I_X PROC					; COMDAT

; 222  : {

$LN10:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, r8
	mov	rbx, rdx
	mov	esi, ecx

; 223  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(u) * 8)
; 224  :     {
; 225  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 226  :         return (PMC_STATUS_INTERNAL_ERROR);
; 227  :     }
; 228  :     if (v == NULL)

	test	rdx, rdx
	je	SHORT $LN8@PMC_Bitwis

; 229  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 230  :     if (w == NULL)

	test	r8, r8
	je	SHORT $LN8@PMC_Bitwis

; 232  :     PMC_STATUS_CODE result;
; 233  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	mov	rcx, rdx
	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN6@PMC_Bitwis

; 234  :         return (result);
; 235  :     if ((result = PMC_BitwiseOr_X_I_Imp((NUMBER_HEADER*)v, u, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	r8, rdi
	mov	edx, esi
	mov	rcx, rbx

; 236  :         return (result);
; 237  : #ifdef _DEBUG
; 238  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 239  :         return (result);
; 240  : #endif
; 241  :     return (PMC_STATUS_OK);
; 242  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi

; 234  :         return (result);
; 235  :     if ((result = PMC_BitwiseOr_X_I_Imp((NUMBER_HEADER*)v, u, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	jmp	PMC_BitwiseOr_X_I_Imp
$LN8@PMC_Bitwis:

; 231  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN6@PMC_Bitwis:

; 236  :         return (result);
; 237  : #ifdef _DEBUG
; 238  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 239  :         return (result);
; 240  : #endif
; 241  :     return (PMC_STATUS_OK);
; 242  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_BitwiseOr_I_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bitwiseor.c
;	COMDAT Initialize_BitwiseOr
_TEXT	SEGMENT
feature$ = 8
Initialize_BitwiseOr PROC				; COMDAT

; 446  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 447  : }

	ret	0
Initialize_BitwiseOr ENDP
_TEXT	ENDS
END
