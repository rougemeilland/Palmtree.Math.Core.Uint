; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??1exception@std@@UEAA@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UEBAPEBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UEAAPEAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ; Palmtree::Math::Core::Internal::Exception::Exception
PUBLIC	??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
PUBLIC	??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor'
PUBLIC	??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z ; Palmtree::Math::Core::Internal::ArgumentException::ArgumentException
PUBLIC	??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ; Palmtree::Math::Core::Internal::ArgumentException::ArgumentException
PUBLIC	??1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ArgumentException::~ArgumentException
PUBLIC	??_GArgumentException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z ; Palmtree::Math::Core::Internal::ArgumentException::`scalar deleting destructor'
PUBLIC	??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
PUBLIC	??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
PUBLIC	??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
PUBLIC	??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor'
PUBLIC	??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException
PUBLIC	??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException
PUBLIC	??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::InsufficientBufferException::~InsufficientBufferException
PUBLIC	??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z ; Palmtree::Math::Core::Internal::InsufficientBufferException::`scalar deleting destructor'
PUBLIC	??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
PUBLIC	??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
PUBLIC	??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
PUBLIC	??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor'
PUBLIC	?PeekChar@StringReader@Internal@Core@Math@Palmtree@@UEAA_WXZ ; Palmtree::Math::Core::Internal::StringReader::PeekChar
PUBLIC	?Progress@StringReader@Internal@Core@Math@Palmtree@@UEAAXXZ ; Palmtree::Math::Core::Internal::StringReader::Progress
PUBLIC	?StartsWith@StringReader@Internal@Core@Math@Palmtree@@UEAAHPEB_W@Z ; Palmtree::Math::Core::Internal::StringReader::StartsWith
PUBLIC	?SkipString@StringReader@Internal@Core@Math@Palmtree@@UEAAXPEB_W@Z ; Palmtree::Math::Core::Internal::StringReader::SkipString
PUBLIC	?Write@StringWriter@Internal@Core@Math@Palmtree@@UEAAX_W@Z ; Palmtree::Math::Core::Internal::StringWriter::Write
PUBLIC	?Write@StringWriter@Internal@Core@Math@Palmtree@@UEAAXPEB_W@Z ; Palmtree::Math::Core::Internal::StringWriter::Write
PUBLIC	?GetString@StringWriter@Internal@Core@Math@Palmtree@@UEAAPEA_WXZ ; Palmtree::Math::Core::Internal::StringWriter::GetString
PUBLIC	?Initialize_Parse@Internal@Core@Math@Palmtree@@YAHPEAU_tag_PROCESSOR_FEATURES@1234@@Z ; Palmtree::Math::Core::Internal::Initialize_Parse
PUBLIC	?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z ; Palmtree::Math::Core::Internal::PMC_TryParse
PUBLIC	?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z ; Palmtree::Math::Core::Internal::PMC_TryParseForSINT
PUBLIC	??0ParserState@Internal@Core@Math@Palmtree@@QEAA@PEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z ; Palmtree::Math::Core::Internal::ParserState::ParserState
PUBLIC	?ParseAsDecimalNumberString@ParserState@Internal@Core@Math@Palmtree@@QEAAHXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsDecimalNumberString
PUBLIC	?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence
PUBLIC	?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7Exception@Internal@Core@Math@Palmtree@@6B@	; Palmtree::Math::Core::Internal::Exception::`vftable'
PUBLIC	??_7ArgumentException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentException::`vftable'
PUBLIC	??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`vftable'
PUBLIC	??_7InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InsufficientBufferException::`vftable'
PUBLIC	??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`vftable'
PUBLIC	??_7StringReader@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::StringReader::`vftable'
PUBLIC	_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
PUBLIC	_CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InternalErrorException `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
PUBLIC	??_R0?AVException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::Exception `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
PUBLIC	??_C@_1FA@CNGEABBJ@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@ ; `string'
PUBLIC	??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@ ; `string'
PUBLIC	??_C@_1FE@KONPIGEM@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@ ; `string'
PUBLIC	??_7StringWriter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::StringWriter::`vftable'
PUBLIC	_TI2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@
PUBLIC	_CTA2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InsufficientBufferException `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
PUBLIC	??_C@_1CO@JABAMCFP@?$PP?x?$AAM?$PP?$LM?$AA?$HP?$AAH?$PP?P?$PP?C?$PP?U?$PP?$KB?$AAn?$PP?$LF?$PP?$KE?$PP?$LK?$AAL?$AA?$AN@ ; `string'
PUBLIC	??_C@_1EK@OBHKPMHI@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ ; `string'
PUBLIC	??_C@_1EK@PDMPFDJG@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ ; `string'
PUBLIC	??_C@_1EK@ELHDDEPD@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ ; `string'
PUBLIC	??_C@_1EK@NGKEAMEK@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ ; `string'
PUBLIC	??_C@_1EK@GOBIGLCP@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ ; `string'
PUBLIC	??_C@_1EK@HMKNMEMB@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ ; `string'
PUBLIC	??_C@_1EK@MEBBKDKE@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ ; `string'
PUBLIC	??_C@_13JDNADJOG@?$PP?$KA@			; `string'
PUBLIC	??_C@_13HOIJIPNN@?$AA?5@			; `string'
PUBLIC	??_C@_13LLDNKHDC@?$AA?$CI@			; `string'
PUBLIC	??_C@_13DIBMAFH@?$AA?$CJ@			; `string'
PUBLIC	_TI2?AVArgumentException@Internal@Core@Math@Palmtree@@
PUBLIC	_CTA2?AVArgumentException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVArgumentException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentException `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVArgumentException@Internal@Core@Math@Palmtree@@@8??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
PUBLIC	??_C@_1FG@MPGAEBOC@?$AA?$BF?$AAp?$AAn?$AAu?$AAm?$AAb?$AAe?$AAr?$AA_?$AAs?$AAt?$AAy?$AAl?$AAe?$AAs@ ; `string'
PUBLIC	_TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
PUBLIC	_CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
PUBLIC	??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
PUBLIC	??_C@_1O@JOABEBCL@?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe@ ; `string'
PUBLIC	??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@ ; `string'
PUBLIC	??_C@_13LNPOMHLG@?$AAo@				; `string'
PUBLIC	??_C@_1O@KGDAECED@?$AAo?$AA_?$AAs?$AAi?$AAg?$AAn@ ; `string'
PUBLIC	??_C@_1M@LGAEBGCK@?$AAo?$AA_?$AAa?$AAb?$AAs@	; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Exception@Internal@Core@Math@Palmtree@@6B@	; Palmtree::Math::Core::Internal::Exception::`RTTI Complete Object Locator'
PUBLIC	??_R3Exception@Internal@Core@Math@Palmtree@@8	; Palmtree::Math::Core::Internal::Exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Exception@Internal@Core@Math@Palmtree@@8	; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EN@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,77)'
PUBLIC	??_R4ArgumentException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentException::`RTTI Complete Object Locator'
PUBLIC	??_R3ArgumentException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ArgumentException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ArgumentException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Complete Object Locator'
PUBLIC	??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Complete Object Locator'
PUBLIC	??_R3InsufficientBufferException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InsufficientBufferException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InsufficientBufferException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Complete Object Locator'
PUBLIC	??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4StringReader@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::StringReader::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVStringReader@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::StringReader `RTTI Type Descriptor'
PUBLIC	??_R3StringReader@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringReader::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2StringReader@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringReader::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@StringReader@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringReader::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4StringWriter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVStringWriter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::StringWriter `RTTI Type Descriptor'
PUBLIC	??_R3StringWriter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2StringWriter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@StringWriter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	__imp_lstrcmpW:PROC
EXTRN	__imp_lstrcpyW:PROC
EXTRN	__imp_lstrlenW:PROC
EXTRN	__std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UEAAPEAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_EException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z:PROC ; Palmtree::Math::Core::Internal::Exception::`vector deleting destructor'
EXTRN	??_EArgumentException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z:PROC ; Palmtree::Math::Core::Internal::ArgumentException::`vector deleting destructor'
EXTRN	??_EArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z:PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::`vector deleting destructor'
EXTRN	??_EInsufficientBufferException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z:PROC ; Palmtree::Math::Core::Internal::InsufficientBufferException::`vector deleting destructor'
EXTRN	??_EInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z:PROC ; Palmtree::Math::Core::Internal::InternalErrorException::`vector deleting destructor'
EXTRN	?CommitNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z:PROC ; Palmtree::Math::Core::Internal::CommitNumber
EXTRN	?InitializeNumberFormatoInfo@Internal@Core@Math@Palmtree@@YAXPEAU__tag_PMC_NUMBER_FORMAT_INFO@1234@@Z:PROC ; Palmtree::Math::Core::Internal::InitializeNumberFormatoInfo
EXTRN	??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
EXTRN	??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
EXTRN	?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEA_K_K@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
EXTRN	?DeallocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEA_K@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateBlock
EXTRN	?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEA_K@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock
EXTRN	?AllocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEA_W_K@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateString
EXTRN	?DeallocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEA_W@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateString
EXTRN	?CheckString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEA_W@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckString
EXTRN	?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEAU__tag_NUMBER_HEADER@2345@_K@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
EXTRN	?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber
EXTRN	?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber
EXTRN	?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber
EXTRN	?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z:PROC ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
EXTRN	_CxxThrowException:PROC
EXTRN	__CxxFrameHandler3:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__GSHandlerCheck_EH:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A:BYTE ; Palmtree::Math::Core::Internal::number_zero
EXTRN	?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A:BYTE ; Palmtree::Math::Core::Internal::statistics_info
EXTRN	__security_cookie:QWORD
_BSS	SEGMENT
?default_number_format_option@Internal@Core@Math@Palmtree@@3U__tag_PMC_NUMBER_FORMAT_INFO@1234@A DB 01e4H DUP (?) ; Palmtree::Math::Core::Internal::default_number_format_option
	ALIGN	8

?fp_MultiplyAndAdd@Internal@Core@Math@Palmtree@@3P6APEA_KPEA_K_K1@ZEA DQ 01H DUP (?) ; Palmtree::Math::Core::Internal::fp_MultiplyAndAdd
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1exception@std@@UEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+38
	DD	imagerel $unwind$??1exception@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gexception@std@@UEAAPEAXI@Z DD imagerel $LN9
	DD	imagerel $LN9+78
	DD	imagerel $unwind$??_Gexception@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z DD imagerel $LN8
	DD	imagerel $LN8+70
	DD	imagerel $unwind$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z DD imagerel $LN8
	DD	imagerel $LN8+66
	DD	imagerel $unwind$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD imagerel $LN8
	DD	imagerel $LN8+77
	DD	imagerel $unwind$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ DD imagerel $LN8
	DD	imagerel $LN8+53
	DD	imagerel $unwind$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD imagerel $LN12
	DD	imagerel $LN12+92
	DD	imagerel $unwind$??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z DD imagerel $LN11
	DD	imagerel $LN11+84
	DD	imagerel $unwind$??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD imagerel $LN11
	DD	imagerel $LN11+87
	DD	imagerel $unwind$??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ DD imagerel $LN11
	DD	imagerel $LN11+63
	DD	imagerel $unwind$??1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GArgumentException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD imagerel $LN15
	DD	imagerel $LN15+102
	DD	imagerel $unwind$??_GArgumentException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD imagerel $LN11
	DD	imagerel $LN11+80
	DD	imagerel $unwind$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD imagerel $LN11
	DD	imagerel $LN11+87
	DD	imagerel $unwind$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ DD imagerel $LN11
	DD	imagerel $LN11+63
	DD	imagerel $unwind$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD imagerel $LN15
	DD	imagerel $LN15+102
	DD	imagerel $unwind$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z DD imagerel $LN11
	DD	imagerel $LN11+84
	DD	imagerel $unwind$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD imagerel $LN11
	DD	imagerel $LN11+87
	DD	imagerel $unwind$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ DD imagerel $LN11
	DD	imagerel $LN11+63
	DD	imagerel $unwind$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD imagerel $LN15
	DD	imagerel $LN15+102
	DD	imagerel $unwind$??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD imagerel $LN11
	DD	imagerel $LN11+80
	DD	imagerel $unwind$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD imagerel $LN11
	DD	imagerel $LN11+87
	DD	imagerel $unwind$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ DD imagerel $LN11
	DD	imagerel $LN11+63
	DD	imagerel $unwind$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD imagerel $LN15
	DD	imagerel $LN15+102
	DD	imagerel $unwind$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Progress@StringReader@Internal@Core@Math@Palmtree@@UEAAXXZ DD imagerel $LN7
	DD	imagerel $LN7+69
	DD	imagerel $unwind$?Progress@StringReader@Internal@Core@Math@Palmtree@@UEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SkipSpace@StringReader@Internal@Core@Math@Palmtree@@QEAAXXZ DD imagerel $LN17
	DD	imagerel $LN17+63
	DD	imagerel $unwind$?SkipSpace@StringReader@Internal@Core@Math@Palmtree@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SkipString@StringReader@Internal@Core@Math@Palmtree@@UEAAXPEB_W@Z DD imagerel $LN17
	DD	imagerel $LN17+121
	DD	imagerel $unwind$?SkipString@StringReader@Internal@Core@Math@Palmtree@@UEAAXPEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Write@StringWriter@Internal@Core@Math@Palmtree@@UEAAX_W@Z DD imagerel $LN8
	DD	imagerel $LN8+85
	DD	imagerel $unwind$?Write@StringWriter@Internal@Core@Math@Palmtree@@UEAAX_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Write@StringWriter@Internal@Core@Math@Palmtree@@UEAAXPEB_W@Z DD imagerel $LN10
	DD	imagerel $LN10+65
	DD	imagerel $unwind$?Write@StringWriter@Internal@Core@Math@Palmtree@@UEAAXPEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Initialize_Parse@Internal@Core@Math@Palmtree@@YAHPEAU_tag_PROCESSOR_FEATURES@1234@@Z DD imagerel $LN6
	DD	imagerel $LN6+61
	DD	imagerel $unwind$?Initialize_Parse@Internal@Core@Math@Palmtree@@YAHPEAU_tag_PROCESSOR_FEATURES@1234@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z DD imagerel $LN15
	DD	imagerel $LN15+349
	DD	imagerel $unwind$?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z DD imagerel $LN15
	DD	imagerel $LN15+25
	DD	imagerel $unwind$?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z DD imagerel $LN15+25
	DD	imagerel $LN15+119
	DD	imagerel $chain$1$?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z DD imagerel $LN15+119
	DD	imagerel $LN15+150
	DD	imagerel $chain$3$?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z DD imagerel $LN15+150
	DD	imagerel $LN15+234
	DD	imagerel $chain$4$?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z DD imagerel $LN15+234
	DD	imagerel $LN15+276
	DD	imagerel $chain$5$?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_COPY_MEMORY_UNIT DD imagerel _COPY_MEMORY_UNIT
	DD	imagerel _COPY_MEMORY_UNIT+33
	DD	imagerel $unwind$_COPY_MEMORY_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ParserState@Internal@Core@Math@Palmtree@@QEAA@PEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z DD imagerel $LN38
	DD	imagerel $LN38+815
	DD	imagerel $unwind$??0ParserState@Internal@Core@Math@Palmtree@@QEAA@PEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ParseAsDecimalNumberString@ParserState@Internal@Core@Math@Palmtree@@QEAAHXZ DD imagerel $LN244
	DD	imagerel $LN244+2137
	DD	imagerel $unwind$?ParseAsDecimalNumberString@ParserState@Internal@Core@Math@Palmtree@@QEAAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ParseAsHexNumberString@ParserState@Internal@Core@Math@Palmtree@@QEAAHXZ DD imagerel $LN37
	DD	imagerel $LN37+156
	DD	imagerel $unwind$?ParseAsHexNumberString@ParserState@Internal@Core@Math@Palmtree@@QEAAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ DD imagerel $LN29
	DD	imagerel $LN29+239
	DD	imagerel $unwind$?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ DD imagerel $LN23
	DD	imagerel $LN23+136
	DD	imagerel $unwind$?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z DD imagerel ?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z
	DD	imagerel ?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z+138
	DD	imagerel $unwind$?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?BuildBinaryFromDecimalString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K1@Z DD imagerel ?BuildBinaryFromDecimalString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K1@Z
	DD	imagerel ?BuildBinaryFromDecimalString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K1@Z+258
	DD	imagerel $unwind$?BuildBinaryFromDecimalString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?MultiplyAndAdd_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAPEA_KPEA_K_K1@Z DD imagerel ?MultiplyAndAdd_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAPEA_KPEA_K_K1@Z
	DD	imagerel ?MultiplyAndAdd_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAPEA_KPEA_K_K1@Z+2410
	DD	imagerel $unwind$?MultiplyAndAdd_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAPEA_KPEA_K_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?MultiplyAndAdd_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAPEA_KPEA_K_K1@Z DD imagerel ?MultiplyAndAdd_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAPEA_KPEA_K_K1@Z
	DD	imagerel ?MultiplyAndAdd_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAPEA_KPEA_K_K1@Z+2467
	DD	imagerel $unwind$?MultiplyAndAdd_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAPEA_KPEA_K_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z DD imagerel ?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z
	DD	imagerel ?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z+194
	DD	imagerel $unwind$?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z DD imagerel ?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
	DD	imagerel ?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+1128
	DD	imagerel $unwind$?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?BuildBinaryFromHexString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K@Z DD imagerel ?BuildBinaryFromHexString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K@Z
	DD	imagerel ?BuildBinaryFromHexString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K@Z+57
	DD	imagerel $unwind$?BuildBinaryFromHexString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?BuildBinaryFromHexString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K@Z DD imagerel ?BuildBinaryFromHexString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K@Z+57
	DD	imagerel ?BuildBinaryFromHexString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K@Z+260
	DD	imagerel $chain$0$?BuildBinaryFromHexString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?BuildBinaryFromHexString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K@Z DD imagerel ?BuildBinaryFromHexString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K@Z+260
	DD	imagerel ?BuildBinaryFromHexString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K@Z+311
	DD	imagerel $chain$1$?BuildBinaryFromHexString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z DD imagerel ?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z
	DD	imagerel ?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z+287
	DD	imagerel $unwind$?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z DD imagerel ?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
	DD	imagerel ?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+779
	DD	imagerel $unwind$?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z DD imagerel ?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
	DD	imagerel ?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+300
	DD	imagerel $unwind$?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
pdata	ENDS
;	COMDAT ??_R1A@?0A@EA@StringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@StringWriter@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R0?AVStringWriter@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3StringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2StringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2StringWriter@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R1A@?0A@EA@StringWriter@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3StringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3StringWriter@Internal@Core@Math@Palmtree@@8 DD 00H	; Palmtree::Math::Core::Internal::StringWriter::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2StringWriter@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVStringWriter@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVStringWriter@Internal@Core@Math@Palmtree@@@8 DQ FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::StringWriter `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVStringWriter@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT ??_R4StringWriter@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4StringWriter@Internal@Core@Math@Palmtree@@6B@ DD 01H ; Palmtree::Math::Core::Internal::StringWriter::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVStringWriter@Internal@Core@Math@Palmtree@@@8
	DD	imagerel ??_R3StringWriter@Internal@Core@Math@Palmtree@@8
	DD	imagerel ??_R4StringWriter@Internal@Core@Math@Palmtree@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@StringReader@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@StringReader@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R0?AVStringReader@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::StringReader::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3StringReader@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2StringReader@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2StringReader@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R1A@?0A@EA@StringReader@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::StringReader::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3StringReader@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3StringReader@Internal@Core@Math@Palmtree@@8 DD 00H	; Palmtree::Math::Core::Internal::StringReader::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2StringReader@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVStringReader@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVStringReader@Internal@Core@Math@Palmtree@@@8 DQ FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::StringReader `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVStringReader@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT ??_R4StringReader@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4StringReader@Internal@Core@Math@Palmtree@@6B@ DD 01H ; Palmtree::Math::Core::Internal::StringReader::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVStringReader@Internal@Core@Math@Palmtree@@@8
	DD	imagerel ??_R3StringReader@Internal@Core@Math@Palmtree@@8
	DD	imagerel ??_R4StringReader@Internal@Core@Math@Palmtree@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R1A@?0A@EA@InternalErrorException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	imagerel ??_R1A@?0A@EN@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2InternalErrorException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ DD 01H ; Palmtree::Math::Core::Internal::InternalErrorException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
	DD	imagerel ??_R3InternalErrorException@Internal@Core@Math@Palmtree@@8
	DD	imagerel ??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@InsufficientBufferException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InsufficientBufferException@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3InsufficientBufferException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2InsufficientBufferException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2InsufficientBufferException@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R1A@?0A@EA@InsufficientBufferException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	imagerel ??_R1A@?0A@EN@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3InsufficientBufferException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3InsufficientBufferException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2InsufficientBufferException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@ DD 01H ; Palmtree::Math::Core::Internal::InsufficientBufferException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8
	DD	imagerel ??_R3InsufficientBufferException@Internal@Core@Math@Palmtree@@8
	DD	imagerel ??_R4InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R1A@?0A@EA@ArgumentNullException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	imagerel ??_R1A@?0A@EN@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2ArgumentNullException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ DD 01H ; Palmtree::Math::Core::Internal::ArgumentNullException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
	DD	imagerel ??_R3ArgumentNullException@Internal@Core@Math@Palmtree@@8
	DD	imagerel ??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ArgumentException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ArgumentException@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R0?AVArgumentException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::ArgumentException::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3ArgumentException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2ArgumentException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2ArgumentException@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R1A@?0A@EA@ArgumentException@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::ArgumentException::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
	DD	imagerel ??_R1A@?0A@EN@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3ArgumentException@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3ArgumentException@Internal@Core@Math@Palmtree@@8 DD 00H ; Palmtree::Math::Core::Internal::ArgumentException::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2ArgumentException@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4ArgumentException@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4ArgumentException@Internal@Core@Math@Palmtree@@6B@ DD 01H ; Palmtree::Math::Core::Internal::ArgumentException::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVArgumentException@Internal@Core@Math@Palmtree@@@8
	DD	imagerel ??_R3ArgumentException@Internal@Core@Math@Palmtree@@8
	DD	imagerel ??_R4ArgumentException@Internal@Core@Math@Palmtree@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EN@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EN@exception@std@@8 DD imagerel ??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,77)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	04dH
	DD	imagerel ??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R0?AVException@Internal@Core@Math@Palmtree@@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R2Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R2Exception@Internal@Core@Math@Palmtree@@8 DD imagerel ??_R1A@?0A@EA@Exception@Internal@Core@Math@Palmtree@@8 ; Palmtree::Math::Core::Internal::Exception::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EN@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3Exception@Internal@Core@Math@Palmtree@@8
rdata$r	SEGMENT
??_R3Exception@Internal@Core@Math@Palmtree@@8 DD 00H	; Palmtree::Math::Core::Internal::Exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2Exception@Internal@Core@Math@Palmtree@@8
rdata$r	ENDS
;	COMDAT ??_R4Exception@Internal@Core@Math@Palmtree@@6B@
rdata$r	SEGMENT
??_R4Exception@Internal@Core@Math@Palmtree@@6B@ DD 01H	; Palmtree::Math::Core::Internal::Exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVException@Internal@Core@Math@Palmtree@@@8
	DD	imagerel ??_R3Exception@Internal@Core@Math@Palmtree@@8
	DD	imagerel ??_R4Exception@Internal@Core@Math@Palmtree@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD imagerel ??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD imagerel ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 01H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	imagerel ??_R3exception@std@@8
	DD	imagerel ??_R4exception@std@@6B@
rdata$r	ENDS
;	COMDAT ??_C@_1M@LGAEBGCK@?$AAo?$AA_?$AAa?$AAb?$AAs@
CONST	SEGMENT
??_C@_1M@LGAEBGCK@?$AAo?$AA_?$AAa?$AAb?$AAs@ DB 'o', 00H, '_', 00H, 'a', 00H
	DB	'b', 00H, 's', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@KGDAECED@?$AAo?$AA_?$AAs?$AAi?$AAg?$AAn@
CONST	SEGMENT
??_C@_1O@KGDAECED@?$AAo?$AA_?$AAs?$AAi?$AAg?$AAn@ DB 'o', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'g', 00H, 'n', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_13LNPOMHLG@?$AAo@
CONST	SEGMENT
??_C@_13LNPOMHLG@?$AAo@ DB 'o', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
CONST	SEGMENT
??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@ DB 015H
	DB	'_pek0n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'p', 00H, 't', 00H
	DB	'r', 00H, 'L0', 0eH, 'NH0', 089H, '0', 08cH, '0f0D0~0Y0', 02H, '0'
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@JOABEBCL@?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe@
CONST	SEGMENT
??_C@_1O@JOABEBCL@?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe@ DB 's', 00H, 'o', 00H, 'u'
	DB	00H, 'r', 00H, 'c', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
xdata$x	SEGMENT
_CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48 DD 00H
	DD	imagerel ??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	030H
	DD	imagerel ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8 DQ FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVArgumentNullException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT _CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
_CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	imagerel _CT??_R0?AVArgumentNullException@Internal@Core@Math@Palmtree@@@8??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
	DD	imagerel _CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
xdata$x	ENDS
;	COMDAT _TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
_TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	imagerel ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT ??_C@_1FG@MPGAEBOC@?$AA?$BF?$AAp?$AAn?$AAu?$AAm?$AAb?$AAe?$AAr?$AA_?$AAs?$AAt?$AAy?$AAl?$AAe?$AAs@
CONST	SEGMENT
??_C@_1FG@MPGAEBOC@?$AA?$BF?$AAp?$AAn?$AAu?$AAm?$AAb?$AAe?$AAr?$AA_?$AAs?$AAt?$AAy?$AAl?$AAe?$AAs@ DB 015H
	DB	'_pen', 00H, 'u', 00H, 'm', 00H, 'b', 00H, 'e', 00H, 'r', 00H, '_'
	DB	00H, 's', 00H, 't', 00H, 'y', 00H, 'l', 00H, 'e', 00H, 's', 00H
	DB	'k01', 08aH, 0efH, 'SU0', 08cH, '0f0D0j0D0D}', 07fH, '0', 08H, 'T'
	DB	08fH, '0[0n0', 0d5H, '0', 0e9H, '0', 0b0H, '0L0', 07H, 'c', 09aH
	DB	'[U0', 08cH, '0~0W0_0', 02H, '0', 00H, 00H	; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVArgumentException@Internal@Core@Math@Palmtree@@@8??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
xdata$x	SEGMENT
_CT??_R0?AVArgumentException@Internal@Core@Math@Palmtree@@@8??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48 DD 00H
	DD	imagerel ??_R0?AVArgumentException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	030H
	DD	imagerel ??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVArgumentException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVArgumentException@Internal@Core@Math@Palmtree@@@8 DQ FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::ArgumentException `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVArgumentException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT _CTA2?AVArgumentException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
_CTA2?AVArgumentException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	imagerel _CT??_R0?AVArgumentException@Internal@Core@Math@Palmtree@@@8??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
	DD	imagerel _CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
xdata$x	ENDS
;	COMDAT _TI2?AVArgumentException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
_TI2?AVArgumentException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	imagerel ??1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA2?AVArgumentException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT ??_C@_13DIBMAFH@?$AA?$CJ@
CONST	SEGMENT
??_C@_13DIBMAFH@?$AA?$CJ@ DB ')', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_13LLDNKHDC@?$AA?$CI@
CONST	SEGMENT
??_C@_13LLDNKHDC@?$AA?$CI@ DB '(', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_13HOIJIPNN@?$AA?5@
CONST	SEGMENT
??_C@_13HOIJIPNN@?$AA?5@ DB ' ', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_13JDNADJOG@?$PP?$KA@
CONST	SEGMENT
??_C@_13JDNADJOG@?$PP?$KA@ DB 0a0H, 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@MEBBKDKE@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
CONST	SEGMENT
??_C@_1EK@MEBBKDKE@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'p', 00H, 'a', 00H, 'r', 00H
	DB	's', 00H, 'e', 00H, ';', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ':', 00H, ':', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ';', 00H, '7', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@HMKNMEMB@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
CONST	SEGMENT
??_C@_1EK@HMKNMEMB@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'p', 00H, 'a', 00H, 'r', 00H
	DB	's', 00H, 'e', 00H, ';', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ':', 00H, ':', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ';', 00H, '6', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@GOBIGLCP@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
CONST	SEGMENT
??_C@_1EK@GOBIGLCP@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'p', 00H, 'a', 00H, 'r', 00H
	DB	's', 00H, 'e', 00H, ';', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ':', 00H, ':', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ';', 00H, '5', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@NGKEAMEK@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
CONST	SEGMENT
??_C@_1EK@NGKEAMEK@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'p', 00H, 'a', 00H, 'r', 00H
	DB	's', 00H, 'e', 00H, ';', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ':', 00H, ':', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ';', 00H, '4', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@ELHDDEPD@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
CONST	SEGMENT
??_C@_1EK@ELHDDEPD@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'p', 00H, 'a', 00H, 'r', 00H
	DB	's', 00H, 'e', 00H, ';', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ':', 00H, ':', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ';', 00H, '3', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@PDMPFDJG@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
CONST	SEGMENT
??_C@_1EK@PDMPFDJG@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'p', 00H, 'a', 00H, 'r', 00H
	DB	's', 00H, 'e', 00H, ';', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ':', 00H, ':', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ';', 00H, '2', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@OBHKPMHI@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
CONST	SEGMENT
??_C@_1EK@OBHKPMHI@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 'p', 00H, 'a', 00H, 'r', 00H
	DB	's', 00H, 'e', 00H, ';', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ':', 00H, ':', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 's'
	DB	00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ';', 00H, '1', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@JABAMCFP@?$PP?x?$AAM?$PP?$LM?$AA?$HP?$AAH?$PP?P?$PP?C?$PP?U?$PP?$KB?$AAn?$PP?$LF?$PP?$KE?$PP?$LK?$AAL?$AA?$AN@
CONST	SEGMENT
??_C@_1CO@JABAMCFP@?$PP?x?$AAM?$PP?$LM?$AA?$HP?$AAH?$PP?P?$PP?C?$PP?U?$PP?$KB?$AAn?$PP?$LF?$PP?$KE?$PP?$LK?$AAL?$AA?$AN@ DB 0f8H
	DB	'fM0', 0bcH, 08fH, 07fH, '0HQ', 0d0H, '0', 0c3H, '0', 0d5H, '0'
	DB	0a1H, '0n0', 0b5H, '0', 0a4H, '0', 0baH, '0L0', 0dH, 'N', 0b3H
	DB	08dH, 'W0f0D0~0Y0', 02H, '0', 00H, 00H	; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
xdata$x	SEGMENT
_CT??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48 DD 00H
	DD	imagerel ??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	030H
	DD	imagerel ??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8 DQ FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::InsufficientBufferException `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVInsufficientBufferException@Internal@Core@Math@Palmt'
	DB	'ree@@', 00H
data$r	ENDS
;	COMDAT _CTA2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
_CTA2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	imagerel _CT??_R0?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@@8??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
	DD	imagerel _CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
xdata$x	ENDS
;	COMDAT _TI2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
_TI2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	imagerel ??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT ??_7StringWriter@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7StringWriter@Internal@Core@Math@Palmtree@@6B@ DQ FLAT:??_R4StringWriter@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::StringWriter::`vftable'
	DQ	FLAT:?Write@StringWriter@Internal@Core@Math@Palmtree@@UEAAXPEB_W@Z
	DQ	FLAT:?Write@StringWriter@Internal@Core@Math@Palmtree@@UEAAX_W@Z
	DQ	FLAT:?GetString@StringWriter@Internal@Core@Math@Palmtree@@UEAAPEA_WXZ
CONST	ENDS
;	COMDAT ??_C@_1FE@KONPIGEM@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@
CONST	SEGMENT
??_C@_1FE@KONPIGEM@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, 'i', 00H, 'o', 00H, '.', 00H, 'h'
	DB	00H, ';', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, 'R', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r'
	DB	00H, ':', 00H, ':', 00H, 'S', 00H, 'k', 00H, 'i', 00H, 'p', 00H
	DB	'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ';'
	DB	00H, '1', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
CONST	SEGMENT
??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@ DB 085H
	DB	'Q', 0e8H, 090H, 0a8H, '0', 0e9H, '0', 0fcH, '0L0zv', 01fH, 'u'
	DB	'W0~0W0_0', 02H, '0', 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1FA@CNGEABBJ@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@
CONST	SEGMENT
??_C@_1FA@CNGEABBJ@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@ DB 'p'
	DB	00H, 'm', 00H, 'c', 00H, '_', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, 'i', 00H, 'o', 00H, '.', 00H, 'h'
	DB	00H, ';', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, 'R', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r'
	DB	00H, ':', 00H, ':', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'e', 00H, 's', 00H, 's', 00H, ';', 00H, '1', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
xdata$x	SEGMENT
_CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48 DD 00H
	DD	imagerel ??_R0?AVException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	030H
	DD	imagerel ??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVException@Internal@Core@Math@Palmtree@@@8 DQ FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::Exception `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVException@Internal@Core@Math@Palmtree@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
xdata$x	SEGMENT
_CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48 DD 00H
	DD	imagerel ??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	030H
	DD	imagerel ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8
data$r	SEGMENT
??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8 DQ FLAT:??_7type_info@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVInternalErrorException@Internal@Core@Math@Palmtree@@'
	DB	00H
data$r	ENDS
;	COMDAT _CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
_CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@ DD 02H
	DD	imagerel _CT??_R0?AVInternalErrorException@Internal@Core@Math@Palmtree@@@8??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
	DD	imagerel _CT??_R0?AVException@Internal@Core@Math@Palmtree@@@8??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z48
xdata$x	ENDS
;	COMDAT _TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	SEGMENT
_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@ DD 00H
	DD	imagerel ??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
xdata$x	ENDS
;	COMDAT ??_7StringReader@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7StringReader@Internal@Core@Math@Palmtree@@6B@ DQ FLAT:??_R4StringReader@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::StringReader::`vftable'
	DQ	FLAT:?PeekChar@StringReader@Internal@Core@Math@Palmtree@@UEAA_WXZ
	DQ	FLAT:?Progress@StringReader@Internal@Core@Math@Palmtree@@UEAAXXZ
	DQ	FLAT:?StartsWith@StringReader@Internal@Core@Math@Palmtree@@UEAAHPEB_W@Z
	DQ	FLAT:?SkipString@StringReader@Internal@Core@Math@Palmtree@@UEAAXPEB_W@Z
CONST	ENDS
;	COMDAT ??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@ DQ FLAT:??_R4InternalErrorException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InternalErrorException::`vftable'
	DQ	FLAT:??_EInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_7InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@ DQ FLAT:??_R4InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::InsufficientBufferException::`vftable'
	DQ	FLAT:??_EInsufficientBufferException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ DQ FLAT:??_R4ArgumentNullException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentNullException::`vftable'
	DQ	FLAT:??_EArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_7ArgumentException@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7ArgumentException@Internal@Core@Math@Palmtree@@6B@ DQ FLAT:??_R4ArgumentException@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::ArgumentException::`vftable'
	DQ	FLAT:??_EArgumentException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_7Exception@Internal@Core@Math@Palmtree@@6B@
CONST	SEGMENT
??_7Exception@Internal@Core@Math@Palmtree@@6B@ DQ FLAT:??_R4Exception@Internal@Core@Math@Palmtree@@6B@ ; Palmtree::Math::Core::Internal::Exception::`vftable'
	DQ	FLAT:??_EException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DQ FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DQ	FLAT:??_Eexception@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z DD imagerel ?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
	DD	0ffffffffH
	DD	imagerel ?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+56
	DD	00H
	DD	imagerel ?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+126
	DD	0ffffffffH
	DD	imagerel ?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+167
	DD	00H
	DD	imagerel ?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+251
	DD	0ffffffffH
	DD	imagerel ?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+265
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
	DD	00H
	DD	00H
	DD	06H
	DD	imagerel $ip2state$?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
	DD	030H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z DD 0b2311H
	DD	0186423H
	DD	017541fH
	DD	016341bH
	DD	012010fH
	DD	0e006f008H
	DD	07004H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z DD imagerel ?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
	DD	0ffffffffH
	DD	imagerel ?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+104
	DD	00H
	DD	imagerel ?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+724
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
	DD	088H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z DD 0b3c19H
	DD	045342bH
	DD	03c011bH
	DD	0e00af00cH
	DD	0c006d008H
	DD	060037004H
	DD	05002H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
	DD	01d2H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z DD 031b19H
	DD	0360109H
	DD	03002H
	DD	imagerel __GSHandlerCheck
	DD	01a0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?BuildBinaryFromHexString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K@Z DD 021H
	DD	imagerel ?BuildBinaryFromHexString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K@Z
	DD	imagerel ?BuildBinaryFromHexString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K@Z+57
	DD	imagerel $unwind$?BuildBinaryFromHexString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?BuildBinaryFromHexString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K@Z DD 020521H
	DD	066405H
	DD	imagerel ?BuildBinaryFromHexString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K@Z
	DD	imagerel ?BuildBinaryFromHexString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K@Z+57
	DD	imagerel $unwind$?BuildBinaryFromHexString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?BuildBinaryFromHexString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z DD imagerel ?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
	DD	0ffffffffH
	DD	imagerel ?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+100
	DD	00H
	DD	imagerel ?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+866
	DD	01H
	DD	imagerel ?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+977
	DD	00H
	DD	imagerel ?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z+1073
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA
	DD	00H
	DD	imagerel ?dtor$1@?0??TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
	DD	00H
	DD	00H
	DD	05H
	DD	imagerel $ip2state$?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
	DD	080H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z DD 0b3919H
	DD	0493427H
	DD	0400113H
	DD	0e00af00cH
	DD	0c006d008H
	DD	060037004H
	DD	05002H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
	DD	01f2H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z DD imagerel ?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z
	DD	0ffffffffH
	DD	imagerel ?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z+51
	DD	00H
	DD	imagerel ?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z+156
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z
	DD	020H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z DD 0a2011H
	DD	0106420H
	DD	0f541cH
	DD	0e3418H
	DD	0f008920cH
	DD	07004e006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?MultiplyAndAdd_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAPEA_KPEA_K_K1@Z DD 051301H
	DD	07a0113H
	DD	030037004H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?MultiplyAndAdd_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAPEA_KPEA_K_K1@Z DD 041201H
	DD	07b0112H
	DD	050023003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?BuildBinaryFromDecimalString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K1@Z DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z DD 021919H
	DD	0350107H
	DD	imagerel __GSHandlerCheck
	DD	0190H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ DD 040e01H
	DD	06740eH
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ParseAsHexNumberString@ParserState@Internal@Core@Math@Palmtree@@QEAAHXZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ParseAsDecimalNumberString@ParserState@Internal@Core@Math@Palmtree@@QEAAHXZ DD 064b01H
	DD	06644bH
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ParserState@Internal@Core@Math@Palmtree@@QEAA@PEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z DD 081401H
	DD	0e6414H
	DD	0d5414H
	DD	0c3414H
	DD	070109214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_COPY_MEMORY_UNIT DD 040a01H
	DD	02740aH
	DD	016405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z DD 020021H
	DD	0f3400H
	DD	imagerel $LN15
	DD	imagerel $LN15+25
	DD	imagerel $unwind$?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z DD 021H
	DD	imagerel $LN15
	DD	imagerel $LN15+25
	DD	imagerel $unwind$?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z DD 040021H
	DD	0c7400H
	DD	0f3400H
	DD	imagerel $LN15
	DD	imagerel $LN15+25
	DD	imagerel $unwind$?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z DD 041e21H
	DD	0c741eH
	DD	0f3405H
	DD	imagerel $LN15
	DD	imagerel $LN15+25
	DD	imagerel $unwind$?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z DD 010401H
	DD	0c204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z DD imagerel ?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z
	DD	0ffffffffH
	DD	imagerel ?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z+70
	DD	00H
	DD	imagerel ?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z+169
	DD	0ffffffffH
	DD	imagerel ?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z+186
	DD	00H
	DD	imagerel ?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z+208
	DD	0ffffffffH
	DD	imagerel ?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z+222
	DD	00H
	DD	imagerel ?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z+228
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z
	DD	00H
	DD	00H
	DD	07H
	DD	imagerel $ip2state$?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z
	DD	038H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z DD 091f11H
	DD	017641fH
	DD	016541bH
	DD	0153417H
	DD	012010bH
	DD	07004H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Initialize_Parse@Internal@Core@Math@Palmtree@@YAHPEAU_tag_PROCESSOR_FEATURES@1234@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Write@StringWriter@Internal@Core@Math@Palmtree@@UEAAXPEB_W@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Write@StringWriter@Internal@Core@Math@Palmtree@@UEAAX_W@Z DD 010401H
	DD	0a204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SkipString@StringReader@Internal@Core@Math@Palmtree@@UEAAXPEB_W@Z DD 020601H
	DD	030029206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SkipSpace@StringReader@Internal@Core@Math@Palmtree@@QEAAXXZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Progress@StringReader@Internal@Core@Math@Palmtree@@UEAAXXZ DD 010401H
	DD	0a204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD imagerel ??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$1@?0???_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
	DD	020H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD 041819H
	DD	093418H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ DD imagerel ??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$1@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	020H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 011219H
	DD	06209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD imagerel ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	0ffffffffH
	DD	imagerel ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+37
	DD	00H
	DD	imagerel ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+69
	DD	01H
	DD	imagerel ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+79
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 0ffffffffH
	DD	imagerel ?dtor$1@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	00H
	DD	00H
	DD	04H
	DD	imagerel $ip2state$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	00H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 011111H
	DD	02209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD imagerel ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
	DD	0ffffffffH
	DD	imagerel ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z+37
	DD	00H
	DD	imagerel ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z+62
	DD	01H
	DD	imagerel ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z+72
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD 0ffffffffH
	DD	imagerel ?dtor$1@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
	DD	00H
	DD	00H
	DD	04H
	DD	imagerel $ip2state$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
	DD	00H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD 011111H
	DD	02209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD imagerel ??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$1@?0???_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
	DD	020H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD 041819H
	DD	093418H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ DD imagerel ??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$1@?0???1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	020H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 011219H
	DD	06209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD imagerel ??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	0ffffffffH
	DD	imagerel ??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+37
	DD	00H
	DD	imagerel ??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+69
	DD	01H
	DD	imagerel ??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+79
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 0ffffffffH
	DD	imagerel ?dtor$1@?0???0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$0@?0???0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	00H
	DD	00H
	DD	04H
	DD	imagerel $ip2state$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	00H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 011111H
	DD	02209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z DD imagerel ??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z
	DD	0ffffffffH
	DD	imagerel ??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z+37
	DD	00H
	DD	imagerel ??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z+66
	DD	01H
	DD	imagerel ??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z+76
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z DD 0ffffffffH
	DD	imagerel ?dtor$1@?0???0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$0@?0???0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z
	DD	00H
	DD	00H
	DD	04H
	DD	imagerel $ip2state$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z DD 011111H
	DD	02209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD imagerel ??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$1@?0???_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
	DD	020H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD 041819H
	DD	093418H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ DD imagerel ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$1@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	020H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 011219H
	DD	06209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD imagerel ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	0ffffffffH
	DD	imagerel ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+37
	DD	00H
	DD	imagerel ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+69
	DD	01H
	DD	imagerel ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+79
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 0ffffffffH
	DD	imagerel ?dtor$1@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	00H
	DD	00H
	DD	04H
	DD	imagerel $ip2state$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	00H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 011111H
	DD	02209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD imagerel ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
	DD	0ffffffffH
	DD	imagerel ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z+37
	DD	00H
	DD	imagerel ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z+62
	DD	01H
	DD	imagerel ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z+72
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD 0ffffffffH
	DD	imagerel ?dtor$1@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
	DD	00H
	DD	00H
	DD	04H
	DD	imagerel $ip2state$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
	DD	00H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z DD 011111H
	DD	02209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??_GArgumentException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD imagerel ??_GArgumentException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??_GArgumentException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???_GArgumentException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$1@?0???_GArgumentException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??_GArgumentException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$??_GArgumentException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??_GArgumentException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
	DD	020H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GArgumentException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD 041819H
	DD	093418H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??_GArgumentException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ DD imagerel ??1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$1@?0???1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$??1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	020H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ DD 011219H
	DD	06209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD imagerel ??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	0ffffffffH
	DD	imagerel ??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+37
	DD	00H
	DD	imagerel ??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+69
	DD	01H
	DD	imagerel ??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+79
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 0ffffffffH
	DD	imagerel ?dtor$1@?0???0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$0@?0???0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	00H
	DD	00H
	DD	04H
	DD	imagerel $ip2state$??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	00H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 011111H
	DD	02209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z DD imagerel ??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z
	DD	0ffffffffH
	DD	imagerel ??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z+37
	DD	00H
	DD	imagerel ??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z+66
	DD	01H
	DD	imagerel ??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z+76
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z DD 0ffffffffH
	DD	imagerel ?dtor$1@?0???0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$0@?0???0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z
	DD	00H
	DD	00H
	DD	04H
	DD	imagerel $ip2state$??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z
	DD	00H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z DD 011111H
	DD	02209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD imagerel ??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
	DD	020H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z DD 041819H
	DD	093418H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ DD imagerel ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ
	DD	020H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ DD 011219H
	DD	06209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD imagerel ??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	0ffffffffH
	DD	imagerel ??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+37
	DD	00H
	DD	imagerel ??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z+69
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
	DD	00H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z DD 011111H
	DD	02209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z DD imagerel ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z
	DD	0ffffffffH
	DD	imagerel ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z+37
	DD	00H
	DD	imagerel ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z+58
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z
	DD	00H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z DD 011111H
	DD	02209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z DD imagerel ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z
	DD	0ffffffffH
	DD	imagerel ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z+37
	DD	00H
	DD	imagerel ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z+62
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z
	DD	00H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z DD 011111H
	DD	02209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??_Gexception@std@@UEAAPEAXI@Z DD imagerel ??_Gexception@std@@UEAAPEAXI@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??_Gexception@std@@UEAAPEAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??_Gexception@std@@UEAAPEAXI@Z
	DD	020H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gexception@std@@UEAAPEAXI@Z DD 041419H
	DD	083414H
	DD	070025206H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??_Gexception@std@@UEAAPEAXI@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1exception@std@@UEAA@XZ DD imagerel ??1exception@std@@UEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1exception@std@@UEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1exception@std@@UEAA@XZ
	DD	020H
	DD	00H
	DD	04H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1exception@std@@UEAA@XZ DD 010d19H
	DD	06204H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1exception@std@@UEAA@XZ
xdata	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
_TEXT	SEGMENT
root$ = 56
$T1 = 88
source$ = 176
number_styles$ = 184
format_option$ = 192
o_sign$ = 200
o_abs$ = 208
result$ = 216
?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z PROC ; Palmtree::Math::Core::Internal::PMC_TryParse_Imp, COMDAT

; 1271 :     {

  00000	48 8b c4	 mov	 rax, rsp
  00003	57		 push	 rdi
  00004	41 56		 push	 r14
  00006	41 57		 push	 r15
  00008	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H
  0000f	48 c7 40 88 fe
	ff ff ff	 mov	 QWORD PTR [rax-120], -2
  00017	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  0001b	48 89 68 10	 mov	 QWORD PTR [rax+16], rbp
  0001f	48 89 70 18	 mov	 QWORD PTR [rax+24], rsi
  00023	49 8b e9	 mov	 rbp, r9
  00026	4d 8b f0	 mov	 r14, r8
  00029	8b f2		 mov	 esi, edx
  0002b	4c 8b f9	 mov	 r15, rcx

; 1272 :         ResourceHolderUINT root;

  0002e	48 8d 48 90	 lea	 rcx, QWORD PTR [rax-112]
  00032	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00037	90		 npad	 1

; 1273 :         if (number_styles & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER)

  00038	0f ba e6 09	 bt	 esi, 9
  0003c	73 69		 jae	 SHORT $LN2@PMC_TryPar

; 1274 :         {
; 1275 :             // 16進数の場合
; 1276 : 
; 1277 :             // 許可されている組み合わせのフラグ
; 1278 :             _UINT32_T mask = PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER | PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE | PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE | PMC_NUMBER_STYLE_ALLOW_EXCEPTION_THROWING | PMC_NUMBER_STYLE_ALLOW_SIGNED_INTEGER;
; 1279 : 
; 1280 :             // 許可されていないフラグが指定されていればエラー
; 1281 :             if (number_styles & ~mask)

  0003e	f7 c6 fc fd ff
	fc		 test	 esi, -50332164		; fcfffdfcH
  00044	0f 85 bf 00 00
	00		 jne	 $LN14@PMC_TryPar

; 1283 : 
; 1284 :             PMC_STATUS_CODE err = TryParseX(source, number_styles, format_option, o_sign, o_abs, result);

  0004a	48 8b 9c 24 d8
	00 00 00	 mov	 rbx, QWORD PTR result$[rsp]
  00052	48 89 5c 24 28	 mov	 QWORD PTR [rsp+40], rbx
  00057	48 8b bc 24 d0
	00 00 00	 mov	 rdi, QWORD PTR o_abs$[rsp]
  0005f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00064	4c 8b cd	 mov	 r9, rbp
  00067	4d 8b c6	 mov	 r8, r14
  0006a	8b d6		 mov	 edx, esi
  0006c	49 8b cf	 mov	 rcx, r15
  0006f	e8 00 00 00 00	 call	 ?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z ; Palmtree::Math::Core::Internal::TryParseX
  00074	8b f0		 mov	 esi, eax

; 1285 :             if (err != PMC_STATUS_OK || !*result)

  00076	85 c0		 test	 eax, eax
  00078	75 04		 jne	 SHORT $LN8@PMC_TryPar
  0007a	39 03		 cmp	 DWORD PTR [rbx], eax
  0007c	75 5d		 jne	 SHORT $LN12@PMC_TryPar
$LN8@PMC_TryPar:

; 1303 :     }

  0007e	48 8d 4c 24 38	 lea	 rcx, QWORD PTR root$[rsp]
  00083	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00088	8b c6		 mov	 eax, esi
$LN1@PMC_TryPar:
  0008a	4c 8d 9c 24 90
	00 00 00	 lea	 r11, QWORD PTR [rsp+144]
  00092	49 8b 5b 20	 mov	 rbx, QWORD PTR [r11+32]
  00096	49 8b 6b 28	 mov	 rbp, QWORD PTR [r11+40]
  0009a	49 8b 73 30	 mov	 rsi, QWORD PTR [r11+48]
  0009e	49 8b e3	 mov	 rsp, r11
  000a1	41 5f		 pop	 r15
  000a3	41 5e		 pop	 r14
  000a5	5f		 pop	 rdi
  000a6	c3		 ret	 0
$LN2@PMC_TryPar:

; 1286 :                 return (err);
; 1287 :             root.HookNumber(*o_abs);
; 1288 :         }
; 1289 :         else
; 1290 :         {
; 1291 :             // 10進数の場合
; 1292 :             PMC_STATUS_CODE err = TryParseDN(source, number_styles, format_option, o_sign, o_abs, result);

  000a7	48 8b 9c 24 d8
	00 00 00	 mov	 rbx, QWORD PTR result$[rsp]
  000af	48 89 5c 24 28	 mov	 QWORD PTR [rsp+40], rbx
  000b4	48 8b bc 24 d0
	00 00 00	 mov	 rdi, QWORD PTR o_abs$[rsp]
  000bc	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  000c1	4c 8b cd	 mov	 r9, rbp
  000c4	4d 8b c6	 mov	 r8, r14
  000c7	8b d6		 mov	 edx, esi
  000c9	49 8b cf	 mov	 rcx, r15
  000cc	e8 00 00 00 00	 call	 ?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z ; Palmtree::Math::Core::Internal::TryParseDN
  000d1	8b f0		 mov	 esi, eax

; 1293 :             if (err != PMC_STATUS_OK || !*result)

  000d3	85 c0		 test	 eax, eax
  000d5	75 a7		 jne	 SHORT $LN8@PMC_TryPar
  000d7	39 03		 cmp	 DWORD PTR [rbx], eax
  000d9	74 a3		 je	 SHORT $LN8@PMC_TryPar
$LN12@PMC_TryPar:

; 1294 :                 return (err);
; 1295 :             root.HookNumber(*o_abs);
; 1296 :         }
; 1297 : #ifdef _DEBUG
; 1298 :         CheckNumber(*o_abs);
; 1299 : #endif
; 1300 :         root.UnlinkNumber(*o_abs);

  000db	48 8b 17	 mov	 rdx, QWORD PTR [rdi]
  000de	48 8d 4c 24 38	 lea	 rcx, QWORD PTR root$[rsp]
  000e3	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber
  000e8	48 8b 17	 mov	 rdx, QWORD PTR [rdi]
  000eb	48 8d 4c 24 38	 lea	 rcx, QWORD PTR root$[rsp]
  000f0	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 1301 :         *result = 1;

  000f5	c7 03 01 00 00
	00		 mov	 DWORD PTR [rbx], 1

; 1302 :         return (PMC_STATUS_OK);

  000fb	48 8d 4c 24 38	 lea	 rcx, QWORD PTR root$[rsp]
  00100	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  00105	33 c0		 xor	 eax, eax
  00107	eb 81		 jmp	 SHORT $LN1@PMC_TryPar
$LN14@PMC_TryPar:

; 1282 :                 throw ArgumentException(L"引数number_stylesに許可されていない組み合わせのフラグが指定されました。");

  00109	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FG@MPGAEBOC@?$AA?$BF?$AAp?$AAn?$AAu?$AAm?$AAb?$AAe?$AAr?$AA_?$AAs?$AAt?$AAy?$AAl?$AAe?$AAs@
  00110	48 8d 4c 24 58	 lea	 rcx, QWORD PTR $T1[rsp]
  00115	e8 00 00 00 00	 call	 ??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z ; Palmtree::Math::Core::Internal::ArgumentException::ArgumentException
  0011a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVArgumentException@Internal@Core@Math@Palmtree@@
  00121	48 8d 4c 24 58	 lea	 rcx, QWORD PTR $T1[rsp]
  00126	e8 00 00 00 00	 call	 _CxxThrowException
  0012b	cc		 int	 3
$LN11@PMC_TryPar:
?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z ENDP ; Palmtree::Math::Core::Internal::PMC_TryParse_Imp
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
root$ = 56
$T1 = 88
source$ = 176
number_styles$ = 184
format_option$ = 192
o_sign$ = 200
o_abs$ = 208
result$ = 216
?dtor$0@?0??PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_TryParse_Imp'::`1'::dtor$0
  00000	48 8d 8a 38 00
	00 00		 lea	 rcx, QWORD PTR root$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
?dtor$0@?0??PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_TryParse_Imp'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
root$ = 56
$T1 = 88
source$ = 176
number_styles$ = 184
format_option$ = 192
o_sign$ = 200
o_abs$ = 208
result$ = 216
?dtor$0@?0??PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_TryParse_Imp'::`1'::dtor$0
  00000	48 8d 8a 38 00
	00 00		 lea	 rcx, QWORD PTR root$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
?dtor$0@?0??PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_TryParse_Imp'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
_TEXT	SEGMENT
dummy_sign$1 = 80
o_sign$GSCopy$1$ = 88
result$GSCopy$1$ = 96
root$ = 104
$T2 = 136
state$3 = 144
__$ArrayPad$ = 464
source$ = 544
number_styles$ = 552
format_option$ = 560
o_sign$ = 568
o_abs$ = 576
result$ = 584
?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z PROC ; Palmtree::Math::Core::Internal::TryParseX, COMDAT

; 1190 :     {

  00000	40 55		 push	 rbp
  00002	56		 push	 rsi
  00003	57		 push	 rdi
  00004	41 54		 push	 r12
  00006	41 55		 push	 r13
  00008	41 56		 push	 r14
  0000a	41 57		 push	 r15
  0000c	48 8d ac 24 20
	ff ff ff	 lea	 rbp, QWORD PTR [rsp-224]
  00014	48 81 ec e0 01
	00 00		 sub	 rsp, 480		; 000001e0H
  0001b	48 c7 45 88 fe
	ff ff ff	 mov	 QWORD PTR $T2[rbp-256], -2
  00023	48 89 9c 24 28
	02 00 00	 mov	 QWORD PTR [rsp+552], rbx
  0002b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00032	48 33 c4	 xor	 rax, rsp
  00035	48 89 85 d0 00
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp-256], rax
  0003c	4c 89 4c 24 58	 mov	 QWORD PTR o_sign$GSCopy$1$[rsp], r9
  00041	49 8b f0	 mov	 rsi, r8
  00044	44 8b fa	 mov	 r15d, edx
  00047	48 8b f9	 mov	 rdi, rcx
  0004a	4c 8b b5 40 01
	00 00		 mov	 r14, QWORD PTR o_abs$[rbp-256]
  00051	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR result$[rbp-256]
  00058	48 89 44 24 60	 mov	 QWORD PTR result$GSCopy$1$[rsp], rax

; 1191 :         ResourceHolderUINT root;

  0005d	48 8d 4c 24 68	 lea	 rcx, QWORD PTR root$[rsp]
  00062	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00067	90		 npad	 1

; 1192 :         __UNIT_TYPE source_len = lstrlenW(source);

  00068	48 8b cf	 mov	 rcx, rdi
  0006b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrlenW
  00071	48 63 d8	 movsxd	 rbx, eax

; 1193 :         size_t int_part_buf_size = source_len + 1;

  00074	48 ff c3	 inc	 rbx

; 1194 :         wchar_t* int_part_buf = root.AllocateString(source_len + 1);

  00077	48 8b d3	 mov	 rdx, rbx
  0007a	48 8d 4c 24 68	 lea	 rcx, QWORD PTR root$[rsp]
  0007f	e8 00 00 00 00	 call	 ?AllocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEA_W_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateString
  00084	4c 8b e8	 mov	 r13, rax

; 1185 :         ParserState state(in_ptr, number_styles, format_option, &dummy_sign, int_part_buf, int_part_buf_size, nullptr, 0);

  00087	45 33 e4	 xor	 r12d, r12d
  0008a	4c 89 64 24 40	 mov	 QWORD PTR [rsp+64], r12
  0008f	4c 89 64 24 38	 mov	 QWORD PTR [rsp+56], r12
  00094	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  00099	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0009e	48 8d 44 24 50	 lea	 rax, QWORD PTR dummy_sign$1[rsp]
  000a3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000a8	4c 8b ce	 mov	 r9, rsi
  000ab	45 8b c7	 mov	 r8d, r15d
  000ae	48 8b d7	 mov	 rdx, rdi
  000b1	48 8d 4d 90	 lea	 rcx, QWORD PTR state$3[rbp-256]
  000b5	e8 00 00 00 00	 call	 ??0ParserState@Internal@Core@Math@Palmtree@@QEAA@PEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z ; Palmtree::Math::Core::Internal::ParserState::ParserState

; 480  :             if (_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE)

  000ba	f6 45 f0 01	 test	 BYTE PTR state$3[rbp-160], 1
  000be	74 39		 je	 SHORT $LN56@TryParseX
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 92   :                 switch (PeekChar())

  000c0	48 8d 4d 90	 lea	 rcx, QWORD PTR state$3[rbp-256]
  000c4	48 8b 45 90	 mov	 rax, QWORD PTR state$3[rbp-256]
  000c8	ff 10		 call	 QWORD PTR [rax]
  000ca	0f b7 c0	 movzx	 eax, ax
  000cd	83 f8 09	 cmp	 eax, 9
  000d0	72 27		 jb	 SHORT $LN56@TryParseX
$LL27@TryParseX:
  000d2	83 f8 0d	 cmp	 eax, 13
  000d5	76 05		 jbe	 SHORT $LN32@TryParseX
  000d7	83 f8 20	 cmp	 eax, 32			; 00000020H
  000da	75 1d		 jne	 SHORT $LN56@TryParseX
$LN32@TryParseX:

; 93   :                 {
; 94   :                 case L' ':
; 95   :                 case L'\t':
; 96   :                 case L'\n':
; 97   :                 case L'\r':
; 98   :                 case L'\f':
; 99   :                 case L'\v':
; 100  :                     break;
; 101  :                 default:
; 102  :                     return;
; 103  :                 }
; 104  :                 Progress();

  000dc	48 8d 4d 90	 lea	 rcx, QWORD PTR state$3[rbp-256]
  000e0	48 8b 45 90	 mov	 rax, QWORD PTR state$3[rbp-256]
  000e4	ff 50 08	 call	 QWORD PTR [rax+8]

; 92   :                 switch (PeekChar())

  000e7	48 8d 4d 90	 lea	 rcx, QWORD PTR state$3[rbp-256]
  000eb	48 8b 45 90	 mov	 rax, QWORD PTR state$3[rbp-256]
  000ef	ff 10		 call	 QWORD PTR [rax]
  000f1	0f b7 c0	 movzx	 eax, ax
  000f4	83 f8 09	 cmp	 eax, 9
  000f7	73 d9		 jae	 SHORT $LL27@TryParseX
$LN56@TryParseX:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 482  :             ParseAsIntegerPartNumberSequence();

  000f9	48 8d 4d 90	 lea	 rcx, QWORD PTR state$3[rbp-256]
  000fd	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence

; 483  :             if (_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

  00102	f6 45 f0 02	 test	 BYTE PTR state$3[rbp-160], 2
  00106	74 3f		 je	 SHORT $LN57@TryParseX
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 92   :                 switch (PeekChar())

  00108	48 8d 4d 90	 lea	 rcx, QWORD PTR state$3[rbp-256]
  0010c	48 8b 45 90	 mov	 rax, QWORD PTR state$3[rbp-256]
  00110	ff 10		 call	 QWORD PTR [rax]
  00112	0f b7 c0	 movzx	 eax, ax
  00115	83 f8 09	 cmp	 eax, 9
  00118	72 2d		 jb	 SHORT $LN57@TryParseX
  0011a	66 0f 1f 44 00
	00		 npad	 6
$LL36@TryParseX:
  00120	83 f8 0d	 cmp	 eax, 13
  00123	76 05		 jbe	 SHORT $LN41@TryParseX
  00125	83 f8 20	 cmp	 eax, 32			; 00000020H
  00128	75 1d		 jne	 SHORT $LN57@TryParseX
$LN41@TryParseX:

; 93   :                 {
; 94   :                 case L' ':
; 95   :                 case L'\t':
; 96   :                 case L'\n':
; 97   :                 case L'\r':
; 98   :                 case L'\f':
; 99   :                 case L'\v':
; 100  :                     break;
; 101  :                 default:
; 102  :                     return;
; 103  :                 }
; 104  :                 Progress();

  0012a	48 8d 4d 90	 lea	 rcx, QWORD PTR state$3[rbp-256]
  0012e	48 8b 45 90	 mov	 rax, QWORD PTR state$3[rbp-256]
  00132	ff 50 08	 call	 QWORD PTR [rax+8]

; 92   :                 switch (PeekChar())

  00135	48 8d 4d 90	 lea	 rcx, QWORD PTR state$3[rbp-256]
  00139	48 8b 45 90	 mov	 rax, QWORD PTR state$3[rbp-256]
  0013d	ff 10		 call	 QWORD PTR [rax]
  0013f	0f b7 c0	 movzx	 eax, ax
  00142	83 f8 09	 cmp	 eax, 9
  00145	73 d9		 jae	 SHORT $LL36@TryParseX
$LN57@TryParseX:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 485  :             if (_source.PeekChar() != L'\0')

  00147	48 8d 4d 90	 lea	 rcx, QWORD PTR state$3[rbp-256]
  0014b	48 8b 45 90	 mov	 rax, QWORD PTR state$3[rbp-256]
  0014f	ff 10		 call	 QWORD PTR [rax]
  00151	41 8b dc	 mov	 ebx, r12d
  00154	66 85 c0	 test	 ax, ax
  00157	0f 94 c3	 sete	 bl

; 1195 :         int result_parsing = ParseAsHexNumberString(source, number_styles, format_option, int_part_buf, int_part_buf_size);
; 1196 :         root.CheckString(int_part_buf);

  0015a	49 8b d5	 mov	 rdx, r13
  0015d	48 8d 4c 24 68	 lea	 rcx, QWORD PTR root$[rsp]
  00162	e8 00 00 00 00	 call	 ?CheckString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEA_W@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckString

; 1197 :         if (!result_parsing || int_part_buf[0] == L'\0')

  00167	85 db		 test	 ebx, ebx
  00169	0f 84 4b 01 00
	00		 je	 $LN5@TryParseX
  0016f	41 0f b7 4d 00	 movzx	 ecx, WORD PTR [r13]
  00174	66 85 c9	 test	 cx, cx
  00177	0f 84 3d 01 00
	00		 je	 $LN5@TryParseX

; 49   :         if (c >= L'0' && c <= L'9')

  0017d	8d 41 d0	 lea	 eax, DWORD PTR [rcx-48]
  00180	be 01 00 00 00	 mov	 esi, 1
  00185	66 83 f8 09	 cmp	 ax, 9
  00189	77 08		 ja	 SHORT $LN47@TryParseX

; 50   :             return (c - L'0');

  0018b	0f b7 c1	 movzx	 eax, cx
  0018e	83 c0 d0	 add	 eax, -48		; ffffffffffffffd0H
  00191	eb 20		 jmp	 SHORT $LN46@TryParseX
$LN47@TryParseX:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  00193	8d 41 9f	 lea	 eax, DWORD PTR [rcx-97]
  00196	66 83 f8 05	 cmp	 ax, 5
  0019a	77 08		 ja	 SHORT $LN48@TryParseX

; 53   :             return (c - L'a' + 10);

  0019c	0f b7 c1	 movzx	 eax, cx
  0019f	83 c0 a9	 add	 eax, -87		; ffffffffffffffa9H
  001a2	eb 0f		 jmp	 SHORT $LN46@TryParseX
$LN48@TryParseX:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  001a4	8d 41 bf	 lea	 eax, DWORD PTR [rcx-65]
  001a7	66 83 f8 05	 cmp	 ax, 5
  001ab	77 21		 ja	 SHORT $LN7@TryParseX

; 56   :             return (c - L'A' + 10);

  001ad	0f b7 c1	 movzx	 eax, cx
  001b0	83 c0 c9	 add	 eax, -55		; ffffffffffffffc9H
$LN46@TryParseX:

; 1201 :                 return (PMC_STATUS_FORMAT_ERROR);
; 1202 :             return (PMC_STATUS_OK);
; 1203 :         }
; 1204 : 
; 1205 :         // 先頭 1 文字が 8～F であれば負数とみなす
; 1206 :         if (ParseHexDigit(int_part_buf[0]) >= 8)

  001b3	83 f8 08	 cmp	 eax, 8
  001b6	7c 16		 jl	 SHORT $LN7@TryParseX

; 1207 :         {
; 1208 :             // 先頭 1 文字が 8～F であれば負数とみなす
; 1209 :             if (!(number_styles & PMC_NUMBER_STYLE_ALLOW_SIGNED_INTEGER))

  001b8	41 0f ba e7 18	 bt	 r15d, 24
  001bd	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  001c2	0f 43 c6	 cmovae	 eax, esi
  001c5	48 8b 7c 24 58	 mov	 rdi, QWORD PTR o_sign$GSCopy$1$[rsp]
  001ca	88 07		 mov	 BYTE PTR [rdi], al

; 1210 :             {
; 1211 :                 // 負数が許可されていないにもかかわらず先頭文字が'8'～'F'である場合
; 1212 : 
; 1213 :                 // そのまま正数として扱う
; 1214 :                 *o_sign = 1;
; 1215 :             }
; 1216 :             else
; 1217 :             {
; 1218 :                 // 負数が許可されていて先頭文字が'8'～'F'である場合
; 1219 : 
; 1220 :                 // 負数として扱う
; 1221 :                 *o_sign = -1;
; 1222 :             }
; 1223 :         }
; 1224 :         else

  001cc	eb 08		 jmp	 SHORT $LN8@TryParseX
$LN7@TryParseX:

; 1225 :         {
; 1226 :             // 先頭 1 文字が 0～7 であれば正数とみなす
; 1227 :             *o_sign = 1;

  001ce	48 8b 7c 24 58	 mov	 rdi, QWORD PTR o_sign$GSCopy$1$[rsp]
  001d3	40 88 37	 mov	 BYTE PTR [rdi], sil
$LN8@TryParseX:

; 1228 :         }
; 1229 : 
; 1230 :         __UNIT_TYPE o_bit_count = lstrlenW(int_part_buf) * 4;

  001d6	49 8b cd	 mov	 rcx, r13
  001d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrlenW
  001df	8b d8		 mov	 ebx, eax
  001e1	c1 e3 02	 shl	 ebx, 2
  001e4	48 63 d3	 movsxd	 rdx, ebx

; 1231 :         *o_abs = root.AllocateNumber(o_bit_count);

  001e7	48 8d 4c 24 68	 lea	 rcx, QWORD PTR root$[rsp]
  001ec	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEAU__tag_NUMBER_HEADER@2345@_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  001f1	49 89 06	 mov	 QWORD PTR [r14], rax

; 1232 :         BuildBinaryFromHexString(int_part_buf, (*o_abs)->BLOCK);

  001f4	48 8b 50 40	 mov	 rdx, QWORD PTR [rax+64]
  001f8	49 8b cd	 mov	 rcx, r13
  001fb	e8 00 00 00 00	 call	 ?BuildBinaryFromHexString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K@Z ; Palmtree::Math::Core::Internal::BuildBinaryFromHexString

; 1233 :         root.CheckNumber(*o_abs);

  00200	49 8b 16	 mov	 rdx, QWORD PTR [r14]
  00203	48 8d 4c 24 68	 lea	 rcx, QWORD PTR root$[rsp]
  00208	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 1234 :         root.DeallocateString(int_part_buf);

  0020d	49 8b d5	 mov	 rdx, r13
  00210	48 8d 4c 24 68	 lea	 rcx, QWORD PTR root$[rsp]
  00215	e8 00 00 00 00	 call	 ?DeallocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEA_W@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateString

; 1235 :         if (*o_sign < 0)

  0021a	44 38 27	 cmp	 BYTE PTR [rdi], r12b
  0021d	7d 5c		 jge	 SHORT $LN3@TryParseX

; 1236 :         {
; 1237 :             // 負数の場合
; 1238 : 
; 1239 :             int lzcnt = o_bit_count % __UNIT_TYPE_BIT_COUNT;

  0021f	83 e3 3f	 and	 ebx, 63			; 0000003fH

; 1240 :             if (lzcnt != 0)

  00222	74 1c		 je	 SHORT $LN12@TryParseX

; 1241 :             {
; 1242 :                 __UNIT_TYPE padding = (__UNIT_TYPE)-1 << lzcnt;

  00224	8b cb		 mov	 ecx, ebx
  00226	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  0022d	48 d3 e2	 shl	 rdx, cl

; 1243 :                 (*o_abs)->BLOCK[(*o_abs)->BLOCK_COUNT - 1] |= padding;

  00230	49 8b 06	 mov	 rax, QWORD PTR [r14]
  00233	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  00237	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  0023b	48 09 54 c8 f8	 or	 QWORD PTR [rax+rcx*8-8], rdx
$LN12@TryParseX:

; 1244 :             }
; 1245 : 
; 1246 :             // 配列 (*o_abs)->BLOCK の内容をビット反転してインクリメントする
; 1247 :             char carry = 1;

  00240	40 0f b6 d6	 movzx	 edx, sil

; 1248 :             __UNIT_TYPE* p = (*o_abs)->BLOCK;

  00244	49 8b 06	 mov	 rax, QWORD PTR [r14]
  00247	48 8b 48 40	 mov	 rcx, QWORD PTR [rax+64]

; 1244 :             }
; 1245 : 
; 1246 :             // 配列 (*o_abs)->BLOCK の内容をビット反転してインクリメントする
; 1247 :             char carry = 1;

  0024b	4c 8b 40 38	 mov	 r8, QWORD PTR [rax+56]

; 1249 :             __UNIT_TYPE count = (*o_abs)->BLOCK_COUNT;
; 1250 :             while (count > 0)

  0024f	4d 85 c0	 test	 r8, r8
  00252	74 27		 je	 SHORT $LN3@TryParseX
  00254	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL2@TryParseX:

; 1251 :             {
; 1252 :                 carry = _ADD_UNIT(carry, ~*p, 0, p);

  00260	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00263	48 f7 d0	 not	 rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00266	80 c2 ff	 add	 dl, -1
  00269	49 13 c4	 adc	 rax, r12
  0026c	0f 92 c2	 setb	 dl
  0026f	48 89 01	 mov	 QWORD PTR [rcx], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 1253 :                 ++p;

  00272	48 8d 49 08	 lea	 rcx, QWORD PTR [rcx+8]

; 1254 :                 --count;

  00276	4c 2b c6	 sub	 r8, rsi

; 1249 :             __UNIT_TYPE count = (*o_abs)->BLOCK_COUNT;
; 1250 :             while (count > 0)

  00279	75 e5		 jne	 SHORT $LL2@TryParseX
$LN3@TryParseX:

; 1255 :             }
; 1256 :         }
; 1257 :         CommitNumber(*o_abs);

  0027b	49 8b 0e	 mov	 rcx, QWORD PTR [r14]
  0027e	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber

; 1258 :         if ((*o_abs)->IS_ZERO)

  00283	49 8b 16	 mov	 rdx, QWORD PTR [r14]
  00286	48 8d 4c 24 68	 lea	 rcx, QWORD PTR root$[rsp]
  0028b	40 84 72 08	 test	 BYTE PTR [rdx+8], sil
  0028f	74 1b		 je	 SHORT $LN13@TryParseX

; 1259 :         {
; 1260 :             root.DeallocateNumber(*o_abs);

  00291	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 1261 :             *o_sign = 0;

  00296	44 88 27	 mov	 BYTE PTR [rdi], r12b

; 1262 :             *o_abs = &number_zero;

  00299	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  002a0	49 89 06	 mov	 QWORD PTR [r14], rax

; 1266 :         *result = 1;

  002a3	48 8b 44 24 60	 mov	 rax, QWORD PTR result$GSCopy$1$[rsp]
  002a8	89 30		 mov	 DWORD PTR [rax], esi

; 1267 :         return (PMC_STATUS_OK);

  002aa	eb 28		 jmp	 SHORT $LN18@TryParseX
$LN13@TryParseX:

; 1263 :         }
; 1264 :         else
; 1265 :             root.UnlinkNumber(*o_abs);

  002ac	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 1266 :         *result = 1;

  002b1	48 8b 44 24 60	 mov	 rax, QWORD PTR result$GSCopy$1$[rsp]
  002b6	89 30		 mov	 DWORD PTR [rax], esi

; 1267 :         return (PMC_STATUS_OK);

  002b8	eb 1a		 jmp	 SHORT $LN18@TryParseX
$LN5@TryParseX:

; 1198 :         {
; 1199 :             *result = 0;

  002ba	48 8b 44 24 60	 mov	 rax, QWORD PTR result$GSCopy$1$[rsp]
  002bf	44 89 20	 mov	 DWORD PTR [rax], r12d

; 1200 :             if (number_styles & PMC_NUMBER_STYLE_ALLOW_EXCEPTION_THROWING)

  002c2	41 81 e7 00 00
	00 02		 and	 r15d, 33554432		; 02000000H
  002c9	41 f7 df	 neg	 r15d
  002cc	1b c0		 sbb	 eax, eax
  002ce	83 e0 f9	 and	 eax, -7
  002d1	44 8b e0	 mov	 r12d, eax
$LN18@TryParseX:

; 1267 :         return (PMC_STATUS_OK);

  002d4	48 8d 4c 24 68	 lea	 rcx, QWORD PTR root$[rsp]
  002d9	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  002de	41 8b c4	 mov	 eax, r12d

; 1268 :     }

  002e1	48 8b 8d d0 00
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp-256]
  002e8	48 33 cc	 xor	 rcx, rsp
  002eb	e8 00 00 00 00	 call	 __security_check_cookie
  002f0	48 8b 9c 24 28
	02 00 00	 mov	 rbx, QWORD PTR [rsp+552]
  002f8	48 81 c4 e0 01
	00 00		 add	 rsp, 480		; 000001e0H
  002ff	41 5f		 pop	 r15
  00301	41 5e		 pop	 r14
  00303	41 5d		 pop	 r13
  00305	41 5c		 pop	 r12
  00307	5f		 pop	 rdi
  00308	5e		 pop	 rsi
  00309	5d		 pop	 rbp
  0030a	c3		 ret	 0
?TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z ENDP ; Palmtree::Math::Core::Internal::TryParseX
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
dummy_sign$1 = 80
o_sign$GSCopy$1$ = 88
result$GSCopy$1$ = 96
root$ = 104
$T2 = 136
state$3 = 144
__$ArrayPad$ = 464
source$ = 544
number_styles$ = 552
format_option$ = 560
o_sign$ = 568
o_abs$ = 576
result$ = 584
?dtor$0@?0??TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA PROC ; `Palmtree::Math::Core::Internal::TryParseX'::`1'::dtor$0
  00000	48 8d 8a 68 00
	00 00		 lea	 rcx, QWORD PTR root$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
?dtor$0@?0??TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::TryParseX'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
dummy_sign$1 = 80
o_sign$GSCopy$1$ = 88
result$GSCopy$1$ = 96
root$ = 104
$T2 = 136
state$3 = 144
__$ArrayPad$ = 464
source$ = 544
number_styles$ = 552
format_option$ = 560
o_sign$ = 568
o_abs$ = 576
result$ = 584
?dtor$0@?0??TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA PROC ; `Palmtree::Math::Core::Internal::TryParseX'::`1'::dtor$0
  00000	48 8d 8a 68 00
	00 00		 lea	 rcx, QWORD PTR root$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
?dtor$0@?0??TryParseX@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::TryParseX'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z
_TEXT	SEGMENT
dummy_sign$ = 80
state$ = 96
__$ArrayPad$ = 416
in_ptr$ = 448
number_styles$ = 456
format_option$ = 464
int_part_buf$ = 472
int_part_buf_size$ = 480
?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z PROC ; Palmtree::Math::Core::Internal::ParseAsHexNumberString, COMDAT

; 1183 :     {

  00000	40 53		 push	 rbx
  00002	48 81 ec b0 01
	00 00		 sub	 rsp, 432		; 000001b0H
  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00010	48 33 c4	 xor	 rax, rsp
  00013	48 89 84 24 a0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1184 :         char dummy_sign;
; 1185 :         ParserState state(in_ptr, number_styles, format_option, &dummy_sign, int_part_buf, int_part_buf_size, nullptr, 0);

  0001b	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR int_part_buf_size$[rsp]
  00023	33 db		 xor	 ebx, ebx
  00025	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  0002a	48 89 5c 24 38	 mov	 QWORD PTR [rsp+56], rbx
  0002f	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00034	48 8d 44 24 50	 lea	 rax, QWORD PTR dummy_sign$[rsp]
  00039	4c 89 4c 24 28	 mov	 QWORD PTR [rsp+40], r9
  0003e	4d 8b c8	 mov	 r9, r8
  00041	44 8b c2	 mov	 r8d, edx
  00044	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00049	48 8b d1	 mov	 rdx, rcx
  0004c	48 8d 4c 24 60	 lea	 rcx, QWORD PTR state$[rsp]
  00051	e8 00 00 00 00	 call	 ??0ParserState@Internal@Core@Math@Palmtree@@QEAA@PEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z ; Palmtree::Math::Core::Internal::ParserState::ParserState

; 480  :             if (_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE)

  00056	f6 84 24 c0 00
	00 00 01	 test	 BYTE PTR state$[rsp+96], 1
  0005e	74 3f		 je	 SHORT $LN38@ParseAsHex
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 92   :                 switch (PeekChar())

  00060	48 8b 44 24 60	 mov	 rax, QWORD PTR state$[rsp]
  00065	48 8d 4c 24 60	 lea	 rcx, QWORD PTR state$[rsp]
  0006a	ff 10		 call	 QWORD PTR [rax]
  0006c	0f b7 c0	 movzx	 eax, ax
  0006f	83 f8 09	 cmp	 eax, 9
  00072	72 2b		 jb	 SHORT $LN38@ParseAsHex
$LL9@ParseAsHex:
  00074	83 f8 0d	 cmp	 eax, 13
  00077	76 05		 jbe	 SHORT $LN14@ParseAsHex
  00079	83 f8 20	 cmp	 eax, 32			; 00000020H
  0007c	75 21		 jne	 SHORT $LN38@ParseAsHex
$LN14@ParseAsHex:

; 93   :                 {
; 94   :                 case L' ':
; 95   :                 case L'\t':
; 96   :                 case L'\n':
; 97   :                 case L'\r':
; 98   :                 case L'\f':
; 99   :                 case L'\v':
; 100  :                     break;
; 101  :                 default:
; 102  :                     return;
; 103  :                 }
; 104  :                 Progress();

  0007e	48 8b 44 24 60	 mov	 rax, QWORD PTR state$[rsp]
  00083	48 8d 4c 24 60	 lea	 rcx, QWORD PTR state$[rsp]
  00088	ff 50 08	 call	 QWORD PTR [rax+8]
  0008b	48 8b 44 24 60	 mov	 rax, QWORD PTR state$[rsp]
  00090	48 8d 4c 24 60	 lea	 rcx, QWORD PTR state$[rsp]
  00095	ff 10		 call	 QWORD PTR [rax]
  00097	0f b7 c0	 movzx	 eax, ax
  0009a	83 f8 09	 cmp	 eax, 9
  0009d	73 d5		 jae	 SHORT $LL9@ParseAsHex
$LN38@ParseAsHex:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 482  :             ParseAsIntegerPartNumberSequence();

  0009f	48 8d 4c 24 60	 lea	 rcx, QWORD PTR state$[rsp]
  000a4	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence

; 483  :             if (_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

  000a9	f6 84 24 c0 00
	00 00 02	 test	 BYTE PTR state$[rsp+96], 2
  000b1	74 3f		 je	 SHORT $LN39@ParseAsHex
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 92   :                 switch (PeekChar())

  000b3	48 8b 44 24 60	 mov	 rax, QWORD PTR state$[rsp]
  000b8	48 8d 4c 24 60	 lea	 rcx, QWORD PTR state$[rsp]
  000bd	ff 10		 call	 QWORD PTR [rax]
  000bf	0f b7 c0	 movzx	 eax, ax
  000c2	83 f8 09	 cmp	 eax, 9
  000c5	72 2b		 jb	 SHORT $LN39@ParseAsHex
$LL18@ParseAsHex:
  000c7	83 f8 0d	 cmp	 eax, 13
  000ca	76 05		 jbe	 SHORT $LN23@ParseAsHex
  000cc	83 f8 20	 cmp	 eax, 32			; 00000020H
  000cf	75 21		 jne	 SHORT $LN39@ParseAsHex
$LN23@ParseAsHex:

; 93   :                 {
; 94   :                 case L' ':
; 95   :                 case L'\t':
; 96   :                 case L'\n':
; 97   :                 case L'\r':
; 98   :                 case L'\f':
; 99   :                 case L'\v':
; 100  :                     break;
; 101  :                 default:
; 102  :                     return;
; 103  :                 }
; 104  :                 Progress();

  000d1	48 8b 44 24 60	 mov	 rax, QWORD PTR state$[rsp]
  000d6	48 8d 4c 24 60	 lea	 rcx, QWORD PTR state$[rsp]
  000db	ff 50 08	 call	 QWORD PTR [rax+8]
  000de	48 8b 44 24 60	 mov	 rax, QWORD PTR state$[rsp]
  000e3	48 8d 4c 24 60	 lea	 rcx, QWORD PTR state$[rsp]
  000e8	ff 10		 call	 QWORD PTR [rax]
  000ea	0f b7 c0	 movzx	 eax, ax
  000ed	83 f8 09	 cmp	 eax, 9
  000f0	73 d5		 jae	 SHORT $LL18@ParseAsHex
$LN39@ParseAsHex:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 485  :             if (_source.PeekChar() != L'\0')

  000f2	48 8b 54 24 60	 mov	 rdx, QWORD PTR state$[rsp]
  000f7	48 8d 4c 24 60	 lea	 rcx, QWORD PTR state$[rsp]
  000fc	ff 12		 call	 QWORD PTR [rdx]
  000fe	66 85 c0	 test	 ax, ax
  00101	0f 94 c3	 sete	 bl

; 1186 :         return (state.ParseAsHexNumberString());

  00104	8b c3		 mov	 eax, ebx

; 1187 :     }

  00106	48 8b 8c 24 a0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0010e	48 33 cc	 xor	 rcx, rsp
  00111	e8 00 00 00 00	 call	 __security_check_cookie
  00116	48 81 c4 b0 01
	00 00		 add	 rsp, 432		; 000001b0H
  0011d	5b		 pop	 rbx
  0011e	c3		 ret	 0
?ParseAsHexNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEA_W_K@Z ENDP ; Palmtree::Math::Core::Internal::ParseAsHexNumberString
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?BuildBinaryFromHexString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K@Z
_TEXT	SEGMENT
source$ = 48
out_buf$ = 56
?BuildBinaryFromHexString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K@Z PROC ; Palmtree::Math::Core::Internal::BuildBinaryFromHexString, COMDAT

; 1162 :     {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	48 8b f9	 mov	 rdi, rcx

; 1163 :         int word_digit_count = __UNIT_TYPE_BIT_COUNT / 4;
; 1164 :         __UNIT_TYPE source_count = lstrlenW(source);

  00010	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrlenW
  00016	4c 63 d8	 movsxd	 r11, eax

; 1167 :         int r = source_count % word_digit_count;

  00019	4d 8b d3	 mov	 r10, r11
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 157  :             return ((u + v - 1) / v);

  0001c	49 8d 43 0f	 lea	 rax, QWORD PTR [r11+15]
  00020	48 c1 e8 04	 shr	 rax, 4
  00024	48 8d 1c c3	 lea	 rbx, QWORD PTR [rbx+rax*8]
  00028	48 83 c3 f8	 add	 rbx, -8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 1167 :         int r = source_count % word_digit_count;

  0002c	41 83 e2 0f	 and	 r10d, 15

; 1168 :         if (r > 0)

  00030	0f 86 ce 00 00
	00		 jbe	 $LN23@BuildBinar

; 1116 :         __UNIT_TYPE x = ParseHexDigit(*in_ptr);

  00036	0f b7 0f	 movzx	 ecx, WORD PTR [rdi]

; 1169 :         {
; 1170 :             *out_ptr-- = BuildLeading1WordFromHexString(in_ptr, r);

  00039	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
  0003e	41 8b f2	 mov	 esi, r10d
  00041	45 8b ca	 mov	 r9d, r10d

; 49   :         if (c >= L'0' && c <= L'9')

  00044	8d 41 d0	 lea	 eax, DWORD PTR [rcx-48]
  00047	66 83 f8 09	 cmp	 ax, 9
  0004b	77 09		 ja	 SHORT $LN13@BuildBinar

; 50   :             return (c - L'0');

  0004d	0f b7 d1	 movzx	 edx, cx
  00050	48 83 ea 30	 sub	 rdx, 48			; 00000030H
  00054	eb 2b		 jmp	 SHORT $LN12@BuildBinar
$LN13@BuildBinar:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  00056	8d 41 9f	 lea	 eax, DWORD PTR [rcx-97]
  00059	66 83 f8 05	 cmp	 ax, 5
  0005d	77 09		 ja	 SHORT $LN14@BuildBinar

; 53   :             return (c - L'a' + 10);

  0005f	0f b7 d1	 movzx	 edx, cx
  00062	48 83 ea 57	 sub	 rdx, 87			; 00000057H
  00066	eb 19		 jmp	 SHORT $LN12@BuildBinar
$LN14@BuildBinar:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  00068	8d 41 bf	 lea	 eax, DWORD PTR [rcx-65]
  0006b	66 83 f8 05	 cmp	 ax, 5
  0006f	77 09		 ja	 SHORT $LN15@BuildBinar

; 56   :             return (c - L'A' + 10);

  00071	0f b7 d1	 movzx	 edx, cx
  00074	48 83 ea 37	 sub	 rdx, 55			; 00000037H
  00078	eb 07		 jmp	 SHORT $LN12@BuildBinar
$LN15@BuildBinar:

; 57   :         return (-1);

  0007a	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
$LN12@BuildBinar:

; 1116 :         __UNIT_TYPE x = ParseHexDigit(*in_ptr);

  00081	48 c1 e2 20	 shl	 rdx, 32			; 00000020H

; 1117 :         ++in_ptr;

  00085	4c 8d 47 02	 lea	 r8, QWORD PTR [rdi+2]
  00089	48 c1 fa 20	 sar	 rdx, 32			; 00000020H
  0008d	49 83 e9 01	 sub	 r9, 1

; 1118 :         --count;
; 1119 :         while (count > 0)

  00091	74 5e		 je	 SHORT $LN10@BuildBinar
$LL9@BuildBinar:

; 1120 :         {
; 1121 :             x = x * 16 + ParseHexDigit(*in_ptr);

  00093	41 0f b7 08	 movzx	 ecx, WORD PTR [r8]

; 49   :         if (c >= L'0' && c <= L'9')

  00097	8d 41 d0	 lea	 eax, DWORD PTR [rcx-48]
  0009a	66 83 f8 09	 cmp	 ax, 9
  0009e	77 09		 ja	 SHORT $LN18@BuildBinar

; 50   :             return (c - L'0');

  000a0	0f b7 c1	 movzx	 eax, cx
  000a3	48 83 e8 30	 sub	 rax, 48			; 00000030H
  000a7	eb 2b		 jmp	 SHORT $LN17@BuildBinar
$LN18@BuildBinar:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  000a9	8d 41 9f	 lea	 eax, DWORD PTR [rcx-97]
  000ac	66 83 f8 05	 cmp	 ax, 5
  000b0	77 09		 ja	 SHORT $LN19@BuildBinar

; 53   :             return (c - L'a' + 10);

  000b2	0f b7 c1	 movzx	 eax, cx
  000b5	48 83 e8 57	 sub	 rax, 87			; 00000057H
  000b9	eb 19		 jmp	 SHORT $LN17@BuildBinar
$LN19@BuildBinar:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  000bb	8d 41 bf	 lea	 eax, DWORD PTR [rcx-65]
  000be	66 83 f8 05	 cmp	 ax, 5
  000c2	77 09		 ja	 SHORT $LN20@BuildBinar

; 56   :             return (c - L'A' + 10);

  000c4	0f b7 c1	 movzx	 eax, cx
  000c7	48 83 e8 37	 sub	 rax, 55			; 00000037H
  000cb	eb 07		 jmp	 SHORT $LN17@BuildBinar
$LN20@BuildBinar:

; 57   :         return (-1);

  000cd	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
$LN17@BuildBinar:

; 1121 :             x = x * 16 + ParseHexDigit(*in_ptr);

  000d4	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  000d8	48 8b ca	 mov	 rcx, rdx
  000db	48 c1 f8 20	 sar	 rax, 32			; 00000020H

; 1122 :             ++in_ptr;

  000df	49 83 c0 02	 add	 r8, 2
  000e3	48 c1 e1 04	 shl	 rcx, 4
  000e7	48 8d 14 01	 lea	 rdx, QWORD PTR [rcx+rax]

; 1123 :             --count;

  000eb	49 83 e9 01	 sub	 r9, 1
  000ef	75 a2		 jne	 SHORT $LL9@BuildBinar
$LN10@BuildBinar:

; 1169 :         {
; 1170 :             *out_ptr-- = BuildLeading1WordFromHexString(in_ptr, r);

  000f1	48 89 13	 mov	 QWORD PTR [rbx], rdx

; 1171 :             in_ptr += r;

  000f4	4a 8d 3c 57	 lea	 rdi, QWORD PTR [rdi+r10*2]
  000f8	48 83 eb 08	 sub	 rbx, 8

; 1172 :             source_count -= r;

  000fc	4c 2b de	 sub	 r11, rsi
  000ff	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
$LN23@BuildBinar:

; 1173 :         }
; 1174 :         while (source_count > 0)

  00104	4d 85 db	 test	 r11, r11
  00107	74 23		 je	 SHORT $LN3@BuildBinar
  00109	49 ff cb	 dec	 r11
  0010c	49 c1 eb 04	 shr	 r11, 4
  00110	49 ff c3	 inc	 r11
$LL2@BuildBinar:

; 1175 :         {
; 1176 :             *out_ptr-- = Build1WordFromHexString(in_ptr);

  00113	48 8b cf	 mov	 rcx, rdi
  00116	e8 00 00 00 00	 call	 ?Build1WordFromHexString@Internal@Core@Math@Palmtree@@YA_KPEA_W@Z ; Palmtree::Math::Core::Internal::Build1WordFromHexString

; 1177 :             in_ptr += word_digit_count;

  0011b	48 83 c7 20	 add	 rdi, 32			; 00000020H
  0011f	48 89 03	 mov	 QWORD PTR [rbx], rax
  00122	48 8d 5b f8	 lea	 rbx, QWORD PTR [rbx-8]
  00126	49 83 eb 01	 sub	 r11, 1
  0012a	75 e7		 jne	 SHORT $LL2@BuildBinar
$LN3@BuildBinar:

; 1178 :             source_count -= word_digit_count;
; 1179 :         }
; 1180 :     }

  0012c	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00131	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00135	5f		 pop	 rdi
  00136	c3		 ret	 0
?BuildBinaryFromHexString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K@Z ENDP ; Palmtree::Math::Core::Internal::BuildBinaryFromHexString
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?Build1WordFromHexString@Internal@Core@Math@Palmtree@@YA_KPEA_W@Z
_TEXT	SEGMENT
in_ptr$ = 8
?Build1WordFromHexString@Internal@Core@Math@Palmtree@@YA_KPEA_W@Z PROC ; Palmtree::Math::Core::Internal::Build1WordFromHexString, COMDAT

; 1129 :     {

  00000	4c 8b c9	 mov	 r9, rcx

; 49   :         if (c >= L'0' && c <= L'9')

  00003	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1

; 1130 :         __UNIT_TYPE x = ParseHexDigit(*in_ptr++);

  0000a	0f b7 09	 movzx	 ecx, WORD PTR [rcx]

; 49   :         if (c >= L'0' && c <= L'9')

  0000d	8d 41 d0	 lea	 eax, DWORD PTR [rcx-48]
  00010	66 83 f8 09	 cmp	 ax, 9
  00014	77 0a		 ja	 SHORT $LN8@Build1Word

; 50   :             return (c - L'0');

  00016	44 0f b7 c1	 movzx	 r8d, cx
  0001a	49 83 e8 30	 sub	 r8, 48			; 00000030H
  0001e	eb 29		 jmp	 SHORT $LN7@Build1Word
$LN8@Build1Word:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  00020	8d 41 9f	 lea	 eax, DWORD PTR [rcx-97]
  00023	66 83 f8 05	 cmp	 ax, 5
  00027	77 0a		 ja	 SHORT $LN9@Build1Word

; 53   :             return (c - L'a' + 10);

  00029	44 0f b7 c1	 movzx	 r8d, cx
  0002d	49 83 e8 57	 sub	 r8, 87			; 00000057H
  00031	eb 16		 jmp	 SHORT $LN7@Build1Word
$LN9@Build1Word:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  00033	8d 41 bf	 lea	 eax, DWORD PTR [rcx-65]
  00036	66 83 f8 05	 cmp	 ax, 5
  0003a	77 0a		 ja	 SHORT $LN10@Build1Word

; 56   :             return (c - L'A' + 10);

  0003c	44 0f b7 c1	 movzx	 r8d, cx
  00040	49 83 e8 37	 sub	 r8, 55			; 00000037H
  00044	eb 03		 jmp	 SHORT $LN7@Build1Word
$LN10@Build1Word:

; 57   :         return (-1);

  00046	4c 8b c2	 mov	 r8, rdx
$LN7@Build1Word:

; 1131 :         if (sizeof(__UNIT_TYPE) >= sizeof(_UINT64_T))
; 1132 :         {
; 1133 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  00049	41 0f b7 49 02	 movzx	 ecx, WORD PTR [r9+2]
  0004e	49 c1 e0 20	 shl	 r8, 32			; 00000020H
  00052	49 c1 f8 20	 sar	 r8, 32			; 00000020H

; 49   :         if (c >= L'0' && c <= L'9')

  00056	8d 41 d0	 lea	 eax, DWORD PTR [rcx-48]
  00059	66 83 f8 09	 cmp	 ax, 9
  0005d	77 09		 ja	 SHORT $LN13@Build1Word

; 50   :             return (c - L'0');

  0005f	0f b7 c9	 movzx	 ecx, cx
  00062	48 83 e9 30	 sub	 rcx, 48			; 00000030H
  00066	eb 27		 jmp	 SHORT $LN12@Build1Word
$LN13@Build1Word:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  00068	8d 41 9f	 lea	 eax, DWORD PTR [rcx-97]
  0006b	66 83 f8 05	 cmp	 ax, 5
  0006f	77 09		 ja	 SHORT $LN14@Build1Word

; 53   :             return (c - L'a' + 10);

  00071	0f b7 c9	 movzx	 ecx, cx
  00074	48 83 e9 57	 sub	 rcx, 87			; 00000057H
  00078	eb 15		 jmp	 SHORT $LN12@Build1Word
$LN14@Build1Word:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  0007a	8d 41 bf	 lea	 eax, DWORD PTR [rcx-65]
  0007d	66 83 f8 05	 cmp	 ax, 5
  00081	77 09		 ja	 SHORT $LN15@Build1Word

; 56   :             return (c - L'A' + 10);

  00083	0f b7 c9	 movzx	 ecx, cx
  00086	48 83 e9 37	 sub	 rcx, 55			; 00000037H
  0008a	eb 03		 jmp	 SHORT $LN12@Build1Word
$LN15@Build1Word:

; 57   :         return (-1);

  0008c	48 8b ca	 mov	 rcx, rdx
$LN12@Build1Word:

; 1131 :         if (sizeof(__UNIT_TYPE) >= sizeof(_UINT64_T))
; 1132 :         {
; 1133 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  0008f	49 c1 e0 04	 shl	 r8, 4
  00093	48 c1 e1 20	 shl	 rcx, 32			; 00000020H
  00097	48 c1 f9 20	 sar	 rcx, 32			; 00000020H
  0009b	49 03 c8	 add	 rcx, r8

; 1134 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  0009e	45 0f b7 41 04	 movzx	 r8d, WORD PTR [r9+4]

; 49   :         if (c >= L'0' && c <= L'9')

  000a3	41 8d 40 d0	 lea	 eax, DWORD PTR [r8-48]
  000a7	66 83 f8 09	 cmp	 ax, 9
  000ab	77 0a		 ja	 SHORT $LN18@Build1Word

; 50   :             return (c - L'0');

  000ad	45 0f b7 c0	 movzx	 r8d, r8w
  000b1	49 83 e8 30	 sub	 r8, 48			; 00000030H
  000b5	eb 2b		 jmp	 SHORT $LN17@Build1Word
$LN18@Build1Word:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  000b7	41 8d 40 9f	 lea	 eax, DWORD PTR [r8-97]
  000bb	66 83 f8 05	 cmp	 ax, 5
  000bf	77 0a		 ja	 SHORT $LN19@Build1Word

; 53   :             return (c - L'a' + 10);

  000c1	45 0f b7 c0	 movzx	 r8d, r8w
  000c5	49 83 e8 57	 sub	 r8, 87			; 00000057H
  000c9	eb 17		 jmp	 SHORT $LN17@Build1Word
$LN19@Build1Word:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  000cb	41 8d 40 bf	 lea	 eax, DWORD PTR [r8-65]
  000cf	66 83 f8 05	 cmp	 ax, 5
  000d3	77 0a		 ja	 SHORT $LN20@Build1Word

; 56   :             return (c - L'A' + 10);

  000d5	45 0f b7 c0	 movzx	 r8d, r8w
  000d9	49 83 e8 37	 sub	 r8, 55			; 00000037H
  000dd	eb 03		 jmp	 SHORT $LN17@Build1Word
$LN20@Build1Word:

; 57   :         return (-1);

  000df	4c 8b c2	 mov	 r8, rdx
$LN17@Build1Word:

; 1134 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  000e2	48 c1 e1 04	 shl	 rcx, 4
  000e6	49 c1 e0 20	 shl	 r8, 32			; 00000020H
  000ea	49 c1 f8 20	 sar	 r8, 32			; 00000020H
  000ee	4c 03 c1	 add	 r8, rcx

; 1135 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  000f1	41 0f b7 49 06	 movzx	 ecx, WORD PTR [r9+6]

; 49   :         if (c >= L'0' && c <= L'9')

  000f6	8d 41 d0	 lea	 eax, DWORD PTR [rcx-48]
  000f9	66 83 f8 09	 cmp	 ax, 9
  000fd	77 09		 ja	 SHORT $LN23@Build1Word

; 50   :             return (c - L'0');

  000ff	0f b7 c9	 movzx	 ecx, cx
  00102	48 83 e9 30	 sub	 rcx, 48			; 00000030H
  00106	eb 27		 jmp	 SHORT $LN22@Build1Word
$LN23@Build1Word:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  00108	8d 41 9f	 lea	 eax, DWORD PTR [rcx-97]
  0010b	66 83 f8 05	 cmp	 ax, 5
  0010f	77 09		 ja	 SHORT $LN24@Build1Word

; 53   :             return (c - L'a' + 10);

  00111	0f b7 c9	 movzx	 ecx, cx
  00114	48 83 e9 57	 sub	 rcx, 87			; 00000057H
  00118	eb 15		 jmp	 SHORT $LN22@Build1Word
$LN24@Build1Word:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  0011a	8d 41 bf	 lea	 eax, DWORD PTR [rcx-65]
  0011d	66 83 f8 05	 cmp	 ax, 5
  00121	77 09		 ja	 SHORT $LN25@Build1Word

; 56   :             return (c - L'A' + 10);

  00123	0f b7 c9	 movzx	 ecx, cx
  00126	48 83 e9 37	 sub	 rcx, 55			; 00000037H
  0012a	eb 03		 jmp	 SHORT $LN22@Build1Word
$LN25@Build1Word:

; 57   :         return (-1);

  0012c	48 8b ca	 mov	 rcx, rdx
$LN22@Build1Word:

; 1135 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  0012f	49 c1 e0 04	 shl	 r8, 4
  00133	48 c1 e1 20	 shl	 rcx, 32			; 00000020H
  00137	48 c1 f9 20	 sar	 rcx, 32			; 00000020H
  0013b	49 03 c8	 add	 rcx, r8

; 1136 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  0013e	45 0f b7 41 08	 movzx	 r8d, WORD PTR [r9+8]

; 49   :         if (c >= L'0' && c <= L'9')

  00143	41 8d 40 d0	 lea	 eax, DWORD PTR [r8-48]
  00147	66 83 f8 09	 cmp	 ax, 9
  0014b	77 0a		 ja	 SHORT $LN28@Build1Word

; 50   :             return (c - L'0');

  0014d	45 0f b7 c0	 movzx	 r8d, r8w
  00151	49 83 e8 30	 sub	 r8, 48			; 00000030H
  00155	eb 2b		 jmp	 SHORT $LN27@Build1Word
$LN28@Build1Word:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  00157	41 8d 40 9f	 lea	 eax, DWORD PTR [r8-97]
  0015b	66 83 f8 05	 cmp	 ax, 5
  0015f	77 0a		 ja	 SHORT $LN29@Build1Word

; 53   :             return (c - L'a' + 10);

  00161	45 0f b7 c0	 movzx	 r8d, r8w
  00165	49 83 e8 57	 sub	 r8, 87			; 00000057H
  00169	eb 17		 jmp	 SHORT $LN27@Build1Word
$LN29@Build1Word:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  0016b	41 8d 40 bf	 lea	 eax, DWORD PTR [r8-65]
  0016f	66 83 f8 05	 cmp	 ax, 5
  00173	77 0a		 ja	 SHORT $LN30@Build1Word

; 56   :             return (c - L'A' + 10);

  00175	45 0f b7 c0	 movzx	 r8d, r8w
  00179	49 83 e8 37	 sub	 r8, 55			; 00000037H
  0017d	eb 03		 jmp	 SHORT $LN27@Build1Word
$LN30@Build1Word:

; 57   :         return (-1);

  0017f	4c 8b c2	 mov	 r8, rdx
$LN27@Build1Word:

; 1136 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  00182	48 c1 e1 04	 shl	 rcx, 4
  00186	49 c1 e0 20	 shl	 r8, 32			; 00000020H
  0018a	49 c1 f8 20	 sar	 r8, 32			; 00000020H
  0018e	4c 03 c1	 add	 r8, rcx

; 1137 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  00191	41 0f b7 49 0a	 movzx	 ecx, WORD PTR [r9+10]

; 49   :         if (c >= L'0' && c <= L'9')

  00196	8d 41 d0	 lea	 eax, DWORD PTR [rcx-48]
  00199	66 83 f8 09	 cmp	 ax, 9
  0019d	77 09		 ja	 SHORT $LN33@Build1Word

; 50   :             return (c - L'0');

  0019f	0f b7 c9	 movzx	 ecx, cx
  001a2	48 83 e9 30	 sub	 rcx, 48			; 00000030H
  001a6	eb 27		 jmp	 SHORT $LN32@Build1Word
$LN33@Build1Word:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  001a8	8d 41 9f	 lea	 eax, DWORD PTR [rcx-97]
  001ab	66 83 f8 05	 cmp	 ax, 5
  001af	77 09		 ja	 SHORT $LN34@Build1Word

; 53   :             return (c - L'a' + 10);

  001b1	0f b7 c9	 movzx	 ecx, cx
  001b4	48 83 e9 57	 sub	 rcx, 87			; 00000057H
  001b8	eb 15		 jmp	 SHORT $LN32@Build1Word
$LN34@Build1Word:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  001ba	8d 41 bf	 lea	 eax, DWORD PTR [rcx-65]
  001bd	66 83 f8 05	 cmp	 ax, 5
  001c1	77 09		 ja	 SHORT $LN35@Build1Word

; 56   :             return (c - L'A' + 10);

  001c3	0f b7 c9	 movzx	 ecx, cx
  001c6	48 83 e9 37	 sub	 rcx, 55			; 00000037H
  001ca	eb 03		 jmp	 SHORT $LN32@Build1Word
$LN35@Build1Word:

; 57   :         return (-1);

  001cc	48 8b ca	 mov	 rcx, rdx
$LN32@Build1Word:

; 1137 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  001cf	49 c1 e0 04	 shl	 r8, 4
  001d3	48 c1 e1 20	 shl	 rcx, 32			; 00000020H
  001d7	48 c1 f9 20	 sar	 rcx, 32			; 00000020H
  001db	49 03 c8	 add	 rcx, r8

; 1138 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  001de	45 0f b7 41 0c	 movzx	 r8d, WORD PTR [r9+12]

; 49   :         if (c >= L'0' && c <= L'9')

  001e3	41 8d 40 d0	 lea	 eax, DWORD PTR [r8-48]
  001e7	66 83 f8 09	 cmp	 ax, 9
  001eb	77 0a		 ja	 SHORT $LN38@Build1Word

; 50   :             return (c - L'0');

  001ed	45 0f b7 c0	 movzx	 r8d, r8w
  001f1	49 83 e8 30	 sub	 r8, 48			; 00000030H
  001f5	eb 2b		 jmp	 SHORT $LN37@Build1Word
$LN38@Build1Word:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  001f7	41 8d 40 9f	 lea	 eax, DWORD PTR [r8-97]
  001fb	66 83 f8 05	 cmp	 ax, 5
  001ff	77 0a		 ja	 SHORT $LN39@Build1Word

; 53   :             return (c - L'a' + 10);

  00201	45 0f b7 c0	 movzx	 r8d, r8w
  00205	49 83 e8 57	 sub	 r8, 87			; 00000057H
  00209	eb 17		 jmp	 SHORT $LN37@Build1Word
$LN39@Build1Word:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  0020b	41 8d 40 bf	 lea	 eax, DWORD PTR [r8-65]
  0020f	66 83 f8 05	 cmp	 ax, 5
  00213	77 0a		 ja	 SHORT $LN40@Build1Word

; 56   :             return (c - L'A' + 10);

  00215	45 0f b7 c0	 movzx	 r8d, r8w
  00219	49 83 e8 37	 sub	 r8, 55			; 00000037H
  0021d	eb 03		 jmp	 SHORT $LN37@Build1Word
$LN40@Build1Word:

; 57   :         return (-1);

  0021f	4c 8b c2	 mov	 r8, rdx
$LN37@Build1Word:

; 1138 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  00222	48 c1 e1 04	 shl	 rcx, 4
  00226	49 c1 e0 20	 shl	 r8, 32			; 00000020H
  0022a	49 c1 f8 20	 sar	 r8, 32			; 00000020H
  0022e	4c 03 c1	 add	 r8, rcx

; 1139 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  00231	41 0f b7 49 0e	 movzx	 ecx, WORD PTR [r9+14]

; 49   :         if (c >= L'0' && c <= L'9')

  00236	8d 41 d0	 lea	 eax, DWORD PTR [rcx-48]
  00239	66 83 f8 09	 cmp	 ax, 9
  0023d	77 09		 ja	 SHORT $LN43@Build1Word

; 50   :             return (c - L'0');

  0023f	0f b7 c9	 movzx	 ecx, cx
  00242	48 83 e9 30	 sub	 rcx, 48			; 00000030H
  00246	eb 27		 jmp	 SHORT $LN42@Build1Word
$LN43@Build1Word:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  00248	8d 41 9f	 lea	 eax, DWORD PTR [rcx-97]
  0024b	66 83 f8 05	 cmp	 ax, 5
  0024f	77 09		 ja	 SHORT $LN44@Build1Word

; 53   :             return (c - L'a' + 10);

  00251	0f b7 c9	 movzx	 ecx, cx
  00254	48 83 e9 57	 sub	 rcx, 87			; 00000057H
  00258	eb 15		 jmp	 SHORT $LN42@Build1Word
$LN44@Build1Word:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  0025a	8d 41 bf	 lea	 eax, DWORD PTR [rcx-65]
  0025d	66 83 f8 05	 cmp	 ax, 5
  00261	77 09		 ja	 SHORT $LN45@Build1Word

; 56   :             return (c - L'A' + 10);

  00263	0f b7 c9	 movzx	 ecx, cx
  00266	48 83 e9 37	 sub	 rcx, 55			; 00000037H
  0026a	eb 03		 jmp	 SHORT $LN42@Build1Word
$LN45@Build1Word:

; 57   :         return (-1);

  0026c	48 8b ca	 mov	 rcx, rdx
$LN42@Build1Word:

; 1139 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  0026f	49 c1 e0 04	 shl	 r8, 4
  00273	48 c1 e1 20	 shl	 rcx, 32			; 00000020H
  00277	48 c1 f9 20	 sar	 rcx, 32			; 00000020H
  0027b	49 03 c8	 add	 rcx, r8

; 1140 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  0027e	45 0f b7 41 10	 movzx	 r8d, WORD PTR [r9+16]

; 49   :         if (c >= L'0' && c <= L'9')

  00283	41 8d 40 d0	 lea	 eax, DWORD PTR [r8-48]
  00287	66 83 f8 09	 cmp	 ax, 9
  0028b	77 0a		 ja	 SHORT $LN48@Build1Word

; 50   :             return (c - L'0');

  0028d	45 0f b7 c0	 movzx	 r8d, r8w
  00291	49 83 e8 30	 sub	 r8, 48			; 00000030H
  00295	eb 2b		 jmp	 SHORT $LN47@Build1Word
$LN48@Build1Word:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  00297	41 8d 40 9f	 lea	 eax, DWORD PTR [r8-97]
  0029b	66 83 f8 05	 cmp	 ax, 5
  0029f	77 0a		 ja	 SHORT $LN49@Build1Word

; 53   :             return (c - L'a' + 10);

  002a1	45 0f b7 c0	 movzx	 r8d, r8w
  002a5	49 83 e8 57	 sub	 r8, 87			; 00000057H
  002a9	eb 17		 jmp	 SHORT $LN47@Build1Word
$LN49@Build1Word:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  002ab	41 8d 40 bf	 lea	 eax, DWORD PTR [r8-65]
  002af	66 83 f8 05	 cmp	 ax, 5
  002b3	77 0a		 ja	 SHORT $LN50@Build1Word

; 56   :             return (c - L'A' + 10);

  002b5	45 0f b7 c0	 movzx	 r8d, r8w
  002b9	49 83 e8 37	 sub	 r8, 55			; 00000037H
  002bd	eb 03		 jmp	 SHORT $LN47@Build1Word
$LN50@Build1Word:

; 57   :         return (-1);

  002bf	4c 8b c2	 mov	 r8, rdx
$LN47@Build1Word:

; 1140 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  002c2	48 c1 e1 04	 shl	 rcx, 4
  002c6	49 c1 e0 20	 shl	 r8, 32			; 00000020H
  002ca	49 c1 f8 20	 sar	 r8, 32			; 00000020H
  002ce	4c 03 c1	 add	 r8, rcx

; 1141 :         }
; 1142 :         if (sizeof(__UNIT_TYPE) >= sizeof(_UINT32_T))
; 1143 :         {
; 1144 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  002d1	41 0f b7 49 12	 movzx	 ecx, WORD PTR [r9+18]

; 49   :         if (c >= L'0' && c <= L'9')

  002d6	8d 41 d0	 lea	 eax, DWORD PTR [rcx-48]
  002d9	66 83 f8 09	 cmp	 ax, 9
  002dd	77 09		 ja	 SHORT $LN53@Build1Word

; 50   :             return (c - L'0');

  002df	0f b7 c9	 movzx	 ecx, cx
  002e2	48 83 e9 30	 sub	 rcx, 48			; 00000030H
  002e6	eb 27		 jmp	 SHORT $LN52@Build1Word
$LN53@Build1Word:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  002e8	8d 41 9f	 lea	 eax, DWORD PTR [rcx-97]
  002eb	66 83 f8 05	 cmp	 ax, 5
  002ef	77 09		 ja	 SHORT $LN54@Build1Word

; 53   :             return (c - L'a' + 10);

  002f1	0f b7 c9	 movzx	 ecx, cx
  002f4	48 83 e9 57	 sub	 rcx, 87			; 00000057H
  002f8	eb 15		 jmp	 SHORT $LN52@Build1Word
$LN54@Build1Word:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  002fa	8d 41 bf	 lea	 eax, DWORD PTR [rcx-65]
  002fd	66 83 f8 05	 cmp	 ax, 5
  00301	77 09		 ja	 SHORT $LN55@Build1Word

; 56   :             return (c - L'A' + 10);

  00303	0f b7 c9	 movzx	 ecx, cx
  00306	48 83 e9 37	 sub	 rcx, 55			; 00000037H
  0030a	eb 03		 jmp	 SHORT $LN52@Build1Word
$LN55@Build1Word:

; 57   :         return (-1);

  0030c	48 8b ca	 mov	 rcx, rdx
$LN52@Build1Word:

; 1141 :         }
; 1142 :         if (sizeof(__UNIT_TYPE) >= sizeof(_UINT32_T))
; 1143 :         {
; 1144 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  0030f	49 c1 e0 04	 shl	 r8, 4
  00313	48 c1 e1 20	 shl	 rcx, 32			; 00000020H
  00317	48 c1 f9 20	 sar	 rcx, 32			; 00000020H
  0031b	49 03 c8	 add	 rcx, r8

; 1145 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  0031e	45 0f b7 41 14	 movzx	 r8d, WORD PTR [r9+20]

; 49   :         if (c >= L'0' && c <= L'9')

  00323	41 8d 40 d0	 lea	 eax, DWORD PTR [r8-48]
  00327	66 83 f8 09	 cmp	 ax, 9
  0032b	77 0a		 ja	 SHORT $LN58@Build1Word

; 50   :             return (c - L'0');

  0032d	45 0f b7 c0	 movzx	 r8d, r8w
  00331	49 83 e8 30	 sub	 r8, 48			; 00000030H
  00335	eb 2b		 jmp	 SHORT $LN57@Build1Word
$LN58@Build1Word:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  00337	41 8d 40 9f	 lea	 eax, DWORD PTR [r8-97]
  0033b	66 83 f8 05	 cmp	 ax, 5
  0033f	77 0a		 ja	 SHORT $LN59@Build1Word

; 53   :             return (c - L'a' + 10);

  00341	45 0f b7 c0	 movzx	 r8d, r8w
  00345	49 83 e8 57	 sub	 r8, 87			; 00000057H
  00349	eb 17		 jmp	 SHORT $LN57@Build1Word
$LN59@Build1Word:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  0034b	41 8d 40 bf	 lea	 eax, DWORD PTR [r8-65]
  0034f	66 83 f8 05	 cmp	 ax, 5
  00353	77 0a		 ja	 SHORT $LN60@Build1Word

; 56   :             return (c - L'A' + 10);

  00355	45 0f b7 c0	 movzx	 r8d, r8w
  00359	49 83 e8 37	 sub	 r8, 55			; 00000037H
  0035d	eb 03		 jmp	 SHORT $LN57@Build1Word
$LN60@Build1Word:

; 57   :         return (-1);

  0035f	4c 8b c2	 mov	 r8, rdx
$LN57@Build1Word:

; 1145 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  00362	48 c1 e1 04	 shl	 rcx, 4
  00366	49 c1 e0 20	 shl	 r8, 32			; 00000020H
  0036a	49 c1 f8 20	 sar	 r8, 32			; 00000020H
  0036e	4c 03 c1	 add	 r8, rcx

; 1146 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  00371	41 0f b7 49 16	 movzx	 ecx, WORD PTR [r9+22]

; 49   :         if (c >= L'0' && c <= L'9')

  00376	8d 41 d0	 lea	 eax, DWORD PTR [rcx-48]
  00379	66 83 f8 09	 cmp	 ax, 9
  0037d	77 09		 ja	 SHORT $LN63@Build1Word

; 50   :             return (c - L'0');

  0037f	0f b7 c9	 movzx	 ecx, cx
  00382	48 83 e9 30	 sub	 rcx, 48			; 00000030H
  00386	eb 27		 jmp	 SHORT $LN62@Build1Word
$LN63@Build1Word:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  00388	8d 41 9f	 lea	 eax, DWORD PTR [rcx-97]
  0038b	66 83 f8 05	 cmp	 ax, 5
  0038f	77 09		 ja	 SHORT $LN64@Build1Word

; 53   :             return (c - L'a' + 10);

  00391	0f b7 c9	 movzx	 ecx, cx
  00394	48 83 e9 57	 sub	 rcx, 87			; 00000057H
  00398	eb 15		 jmp	 SHORT $LN62@Build1Word
$LN64@Build1Word:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  0039a	8d 41 bf	 lea	 eax, DWORD PTR [rcx-65]
  0039d	66 83 f8 05	 cmp	 ax, 5
  003a1	77 09		 ja	 SHORT $LN65@Build1Word

; 56   :             return (c - L'A' + 10);

  003a3	0f b7 c9	 movzx	 ecx, cx
  003a6	48 83 e9 37	 sub	 rcx, 55			; 00000037H
  003aa	eb 03		 jmp	 SHORT $LN62@Build1Word
$LN65@Build1Word:

; 57   :         return (-1);

  003ac	48 8b ca	 mov	 rcx, rdx
$LN62@Build1Word:

; 1146 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  003af	49 c1 e0 04	 shl	 r8, 4
  003b3	48 c1 e1 20	 shl	 rcx, 32			; 00000020H
  003b7	48 c1 f9 20	 sar	 rcx, 32			; 00000020H
  003bb	49 03 c8	 add	 rcx, r8

; 1147 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  003be	45 0f b7 41 18	 movzx	 r8d, WORD PTR [r9+24]

; 49   :         if (c >= L'0' && c <= L'9')

  003c3	41 8d 40 d0	 lea	 eax, DWORD PTR [r8-48]
  003c7	66 83 f8 09	 cmp	 ax, 9
  003cb	77 0a		 ja	 SHORT $LN68@Build1Word

; 50   :             return (c - L'0');

  003cd	45 0f b7 d0	 movzx	 r10d, r8w
  003d1	49 83 ea 30	 sub	 r10, 48			; 00000030H
  003d5	eb 2b		 jmp	 SHORT $LN67@Build1Word
$LN68@Build1Word:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  003d7	41 8d 40 9f	 lea	 eax, DWORD PTR [r8-97]
  003db	66 83 f8 05	 cmp	 ax, 5
  003df	77 0a		 ja	 SHORT $LN69@Build1Word

; 53   :             return (c - L'a' + 10);

  003e1	45 0f b7 d0	 movzx	 r10d, r8w
  003e5	49 83 ea 57	 sub	 r10, 87			; 00000057H
  003e9	eb 17		 jmp	 SHORT $LN67@Build1Word
$LN69@Build1Word:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  003eb	41 8d 40 bf	 lea	 eax, DWORD PTR [r8-65]
  003ef	66 83 f8 05	 cmp	 ax, 5
  003f3	77 0a		 ja	 SHORT $LN70@Build1Word

; 56   :             return (c - L'A' + 10);

  003f5	45 0f b7 d0	 movzx	 r10d, r8w
  003f9	49 83 ea 37	 sub	 r10, 55			; 00000037H
  003fd	eb 03		 jmp	 SHORT $LN67@Build1Word
$LN70@Build1Word:

; 57   :         return (-1);

  003ff	4c 8b d2	 mov	 r10, rdx
$LN67@Build1Word:

; 1147 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  00402	48 c1 e1 04	 shl	 rcx, 4
  00406	49 c1 e2 20	 shl	 r10, 32			; 00000020H
  0040a	49 c1 fa 20	 sar	 r10, 32			; 00000020H
  0040e	4c 03 d1	 add	 r10, rcx

; 1148 :         }
; 1149 :         if (sizeof(__UNIT_TYPE) >= sizeof(_UINT16_T))
; 1150 :         {
; 1151 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  00411	41 0f b7 49 1a	 movzx	 ecx, WORD PTR [r9+26]

; 49   :         if (c >= L'0' && c <= L'9')

  00416	8d 41 d0	 lea	 eax, DWORD PTR [rcx-48]
  00419	66 83 f8 09	 cmp	 ax, 9
  0041d	77 0a		 ja	 SHORT $LN73@Build1Word

; 50   :             return (c - L'0');

  0041f	44 0f b7 c1	 movzx	 r8d, cx
  00423	49 83 e8 30	 sub	 r8, 48			; 00000030H
  00427	eb 29		 jmp	 SHORT $LN72@Build1Word
$LN73@Build1Word:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  00429	8d 41 9f	 lea	 eax, DWORD PTR [rcx-97]
  0042c	66 83 f8 05	 cmp	 ax, 5
  00430	77 0a		 ja	 SHORT $LN74@Build1Word

; 53   :             return (c - L'a' + 10);

  00432	44 0f b7 c1	 movzx	 r8d, cx
  00436	49 83 e8 57	 sub	 r8, 87			; 00000057H
  0043a	eb 16		 jmp	 SHORT $LN72@Build1Word
$LN74@Build1Word:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  0043c	8d 41 bf	 lea	 eax, DWORD PTR [rcx-65]
  0043f	66 83 f8 05	 cmp	 ax, 5
  00443	77 0a		 ja	 SHORT $LN75@Build1Word

; 56   :             return (c - L'A' + 10);

  00445	44 0f b7 c1	 movzx	 r8d, cx
  00449	49 83 e8 37	 sub	 r8, 55			; 00000037H
  0044d	eb 03		 jmp	 SHORT $LN72@Build1Word
$LN75@Build1Word:

; 57   :         return (-1);

  0044f	4c 8b c2	 mov	 r8, rdx
$LN72@Build1Word:

; 1152 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  00452	41 0f b7 49 1c	 movzx	 ecx, WORD PTR [r9+28]
  00457	49 c1 e0 20	 shl	 r8, 32			; 00000020H
  0045b	49 c1 f8 20	 sar	 r8, 32			; 00000020H
  0045f	49 c1 e2 04	 shl	 r10, 4

; 49   :         if (c >= L'0' && c <= L'9')

  00463	8d 41 d0	 lea	 eax, DWORD PTR [rcx-48]

; 1148 :         }
; 1149 :         if (sizeof(__UNIT_TYPE) >= sizeof(_UINT16_T))
; 1150 :         {
; 1151 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  00466	4d 03 c2	 add	 r8, r10

; 49   :         if (c >= L'0' && c <= L'9')

  00469	66 83 f8 09	 cmp	 ax, 9
  0046d	77 09		 ja	 SHORT $LN78@Build1Word

; 50   :             return (c - L'0');

  0046f	0f b7 c9	 movzx	 ecx, cx
  00472	48 83 e9 30	 sub	 rcx, 48			; 00000030H
  00476	eb 27		 jmp	 SHORT $LN77@Build1Word
$LN78@Build1Word:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  00478	8d 41 9f	 lea	 eax, DWORD PTR [rcx-97]
  0047b	66 83 f8 05	 cmp	 ax, 5
  0047f	77 09		 ja	 SHORT $LN79@Build1Word

; 53   :             return (c - L'a' + 10);

  00481	0f b7 c9	 movzx	 ecx, cx
  00484	48 83 e9 57	 sub	 rcx, 87			; 00000057H
  00488	eb 15		 jmp	 SHORT $LN77@Build1Word
$LN79@Build1Word:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  0048a	8d 41 bf	 lea	 eax, DWORD PTR [rcx-65]
  0048d	66 83 f8 05	 cmp	 ax, 5
  00491	77 09		 ja	 SHORT $LN80@Build1Word

; 56   :             return (c - L'A' + 10);

  00493	0f b7 c9	 movzx	 ecx, cx
  00496	48 83 e9 37	 sub	 rcx, 55			; 00000037H
  0049a	eb 03		 jmp	 SHORT $LN77@Build1Word
$LN80@Build1Word:

; 57   :         return (-1);

  0049c	48 8b ca	 mov	 rcx, rdx
$LN77@Build1Word:

; 1152 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  0049f	49 c1 e0 04	 shl	 r8, 4
  004a3	48 c1 e1 20	 shl	 rcx, 32			; 00000020H
  004a7	48 c1 f9 20	 sar	 rcx, 32			; 00000020H
  004ab	49 03 c8	 add	 rcx, r8

; 1153 :         }
; 1154 :         if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))
; 1155 :         {
; 1156 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  004ae	45 0f b7 41 1e	 movzx	 r8d, WORD PTR [r9+30]

; 49   :         if (c >= L'0' && c <= L'9')

  004b3	41 8d 40 d0	 lea	 eax, DWORD PTR [r8-48]
  004b7	66 83 f8 09	 cmp	 ax, 9
  004bb	77 18		 ja	 SHORT $LN83@Build1Word

; 50   :             return (c - L'0');

  004bd	41 0f b7 d0	 movzx	 edx, r8w
  004c1	48 83 ea 30	 sub	 rdx, 48			; 00000030H

; 1153 :         }
; 1154 :         if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))
; 1155 :         {
; 1156 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  004c5	48 c1 e2 20	 shl	 rdx, 32			; 00000020H
  004c9	48 c1 fa 20	 sar	 rdx, 32			; 00000020H
  004cd	48 03 c9	 add	 rcx, rcx
  004d0	48 8d 04 ca	 lea	 rax, QWORD PTR [rdx+rcx*8]

; 1157 :         }
; 1158 :         return (x);
; 1159 :     }

  004d4	c3		 ret	 0
$LN83@Build1Word:

; 52   :         if (c >= L'a' && c <= L'f')

  004d5	41 8d 40 9f	 lea	 eax, DWORD PTR [r8-97]
  004d9	66 83 f8 05	 cmp	 ax, 5
  004dd	77 18		 ja	 SHORT $LN84@Build1Word

; 53   :             return (c - L'a' + 10);

  004df	41 0f b7 d0	 movzx	 edx, r8w
  004e3	48 83 ea 57	 sub	 rdx, 87			; 00000057H

; 1153 :         }
; 1154 :         if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))
; 1155 :         {
; 1156 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  004e7	48 c1 e2 20	 shl	 rdx, 32			; 00000020H
  004eb	48 c1 fa 20	 sar	 rdx, 32			; 00000020H
  004ef	48 03 c9	 add	 rcx, rcx
  004f2	48 8d 04 ca	 lea	 rax, QWORD PTR [rdx+rcx*8]

; 1157 :         }
; 1158 :         return (x);
; 1159 :     }

  004f6	c3		 ret	 0
$LN84@Build1Word:

; 55   :         if (c >= L'A' && c <= L'F')

  004f7	41 8d 40 bf	 lea	 eax, DWORD PTR [r8-65]
  004fb	66 83 f8 05	 cmp	 ax, 5
  004ff	77 08		 ja	 SHORT $LN82@Build1Word

; 56   :             return (c - L'A' + 10);

  00501	41 0f b7 d0	 movzx	 edx, r8w
  00505	48 83 ea 37	 sub	 rdx, 55			; 00000037H
$LN82@Build1Word:

; 1153 :         }
; 1154 :         if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))
; 1155 :         {
; 1156 :             x = x * 16 + ParseHexDigit(*in_ptr++);

  00509	48 c1 e2 20	 shl	 rdx, 32			; 00000020H
  0050d	48 03 c9	 add	 rcx, rcx
  00510	48 c1 fa 20	 sar	 rdx, 32			; 00000020H
  00514	48 8d 04 ca	 lea	 rax, QWORD PTR [rdx+rcx*8]

; 1157 :         }
; 1158 :         return (x);
; 1159 :     }

  00518	c3		 ret	 0
?Build1WordFromHexString@Internal@Core@Math@Palmtree@@YA_KPEA_W@Z ENDP ; Palmtree::Math::Core::Internal::Build1WordFromHexString
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?BuildLeading1WordFromHexString@Internal@Core@Math@Palmtree@@YA_KPEA_W_K@Z
_TEXT	SEGMENT
in_ptr$ = 8
count$ = 16
?BuildLeading1WordFromHexString@Internal@Core@Math@Palmtree@@YA_KPEA_W_K@Z PROC ; Palmtree::Math::Core::Internal::BuildLeading1WordFromHexString, COMDAT

; 1115 :     {

  00000	4c 8b c9	 mov	 r9, rcx

; 1116 :         __UNIT_TYPE x = ParseHexDigit(*in_ptr);

  00003	0f b7 09	 movzx	 ecx, WORD PTR [rcx]

; 49   :         if (c >= L'0' && c <= L'9')

  00006	8d 41 d0	 lea	 eax, DWORD PTR [rcx-48]
  00009	66 83 f8 09	 cmp	 ax, 9
  0000d	77 0a		 ja	 SHORT $LN6@BuildLeadi

; 50   :             return (c - L'0');

  0000f	44 0f b7 c1	 movzx	 r8d, cx
  00013	49 83 e8 30	 sub	 r8, 48			; 00000030H
  00017	eb 2d		 jmp	 SHORT $LN5@BuildLeadi
$LN6@BuildLeadi:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  00019	8d 41 9f	 lea	 eax, DWORD PTR [rcx-97]
  0001c	66 83 f8 05	 cmp	 ax, 5
  00020	77 0a		 ja	 SHORT $LN7@BuildLeadi

; 53   :             return (c - L'a' + 10);

  00022	44 0f b7 c1	 movzx	 r8d, cx
  00026	49 83 e8 57	 sub	 r8, 87			; 00000057H
  0002a	eb 1a		 jmp	 SHORT $LN5@BuildLeadi
$LN7@BuildLeadi:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  0002c	8d 41 bf	 lea	 eax, DWORD PTR [rcx-65]
  0002f	66 83 f8 05	 cmp	 ax, 5
  00033	77 0a		 ja	 SHORT $LN8@BuildLeadi

; 56   :             return (c - L'A' + 10);

  00035	44 0f b7 c1	 movzx	 r8d, cx
  00039	49 83 e8 37	 sub	 r8, 55			; 00000037H
  0003d	eb 07		 jmp	 SHORT $LN5@BuildLeadi
$LN8@BuildLeadi:

; 57   :         return (-1);

  0003f	49 c7 c0 ff ff
	ff ff		 mov	 r8, -1
$LN5@BuildLeadi:

; 1116 :         __UNIT_TYPE x = ParseHexDigit(*in_ptr);

  00046	49 c1 e0 20	 shl	 r8, 32			; 00000020H

; 1117 :         ++in_ptr;

  0004a	49 83 c1 02	 add	 r9, 2
  0004e	49 c1 f8 20	 sar	 r8, 32			; 00000020H
  00052	48 83 ea 01	 sub	 rdx, 1

; 1118 :         --count;
; 1119 :         while (count > 0)

  00056	74 66		 je	 SHORT $LN19@BuildLeadi
  00058	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL2@BuildLeadi:

; 1120 :         {
; 1121 :             x = x * 16 + ParseHexDigit(*in_ptr);

  00060	41 0f b7 09	 movzx	 ecx, WORD PTR [r9]

; 49   :         if (c >= L'0' && c <= L'9')

  00064	8d 41 d0	 lea	 eax, DWORD PTR [rcx-48]
  00067	66 83 f8 09	 cmp	 ax, 9
  0006b	77 09		 ja	 SHORT $LN11@BuildLeadi

; 50   :             return (c - L'0');

  0006d	0f b7 c1	 movzx	 eax, cx
  00070	48 83 e8 30	 sub	 rax, 48			; 00000030H
  00074	eb 2b		 jmp	 SHORT $LN10@BuildLeadi
$LN11@BuildLeadi:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  00076	8d 41 9f	 lea	 eax, DWORD PTR [rcx-97]
  00079	66 83 f8 05	 cmp	 ax, 5
  0007d	77 09		 ja	 SHORT $LN12@BuildLeadi

; 53   :             return (c - L'a' + 10);

  0007f	0f b7 c1	 movzx	 eax, cx
  00082	48 83 e8 57	 sub	 rax, 87			; 00000057H
  00086	eb 19		 jmp	 SHORT $LN10@BuildLeadi
$LN12@BuildLeadi:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  00088	8d 41 bf	 lea	 eax, DWORD PTR [rcx-65]
  0008b	66 83 f8 05	 cmp	 ax, 5
  0008f	77 09		 ja	 SHORT $LN13@BuildLeadi

; 56   :             return (c - L'A' + 10);

  00091	0f b7 c1	 movzx	 eax, cx
  00094	48 83 e8 37	 sub	 rax, 55			; 00000037H
  00098	eb 07		 jmp	 SHORT $LN10@BuildLeadi
$LN13@BuildLeadi:

; 57   :         return (-1);

  0009a	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
$LN10@BuildLeadi:

; 1120 :         {
; 1121 :             x = x * 16 + ParseHexDigit(*in_ptr);

  000a1	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  000a5	49 8b c8	 mov	 rcx, r8
  000a8	48 c1 f8 20	 sar	 rax, 32			; 00000020H

; 1122 :             ++in_ptr;

  000ac	49 83 c1 02	 add	 r9, 2
  000b0	48 c1 e1 04	 shl	 rcx, 4
  000b4	4c 8d 04 01	 lea	 r8, QWORD PTR [rcx+rax]

; 1123 :             --count;

  000b8	48 83 ea 01	 sub	 rdx, 1
  000bc	75 a2		 jne	 SHORT $LL2@BuildLeadi
$LN19@BuildLeadi:

; 1124 :         }
; 1125 :         return (x);
; 1126 :     }

  000be	49 8b c0	 mov	 rax, r8
  000c1	c3		 ret	 0
?BuildLeading1WordFromHexString@Internal@Core@Math@Palmtree@@YA_KPEA_W_K@Z ENDP ; Palmtree::Math::Core::Internal::BuildLeading1WordFromHexString
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z
_TEXT	SEGMENT
root$ = 80
o_abs$GSCopy$1$ = 112
out_buf$1$ = 120
$T1 = 128
root$2 = 136
state$3 = 176
__$ArrayPad$ = 496
source$ = 576
number_styles$ = 584
format_option$ = 592
o_sign$ = 600
o_abs$ = 608
result$ = 616
?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z PROC ; Palmtree::Math::Core::Internal::TryParseDN, COMDAT

; 967  :     {

  00000	40 55		 push	 rbp
  00002	56		 push	 rsi
  00003	57		 push	 rdi
  00004	41 54		 push	 r12
  00006	41 55		 push	 r13
  00008	41 56		 push	 r14
  0000a	41 57		 push	 r15
  0000c	48 81 ec 00 02
	00 00		 sub	 rsp, 512		; 00000200H
  00013	48 c7 84 24 80
	00 00 00 fe ff
	ff ff		 mov	 QWORD PTR $T1[rsp], -2
  0001f	48 89 9c 24 48
	02 00 00	 mov	 QWORD PTR [rsp+584], rbx
  00027	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0002e	48 33 c4	 xor	 rax, rsp
  00031	48 89 84 24 f0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  00039	4d 8b e9	 mov	 r13, r9
  0003c	49 8b d8	 mov	 rbx, r8
  0003f	8b ea		 mov	 ebp, edx
  00041	48 8b f1	 mov	 rsi, rcx
  00044	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR o_abs$[rsp]
  0004c	48 89 44 24 70	 mov	 QWORD PTR o_abs$GSCopy$1$[rsp], rax
  00051	4c 8b a4 24 68
	02 00 00	 mov	 r12, QWORD PTR result$[rsp]

; 968  : #ifdef _M_IX86
; 969  :         int word_digit_count = 9;
; 970  : #elif defined(_M_X64)
; 971  :         int word_digit_count = 19;
; 972  : #else
; 973  : #error unknown platform
; 974  : #endif
; 975  : 
; 976  :         ResourceHolderUINT root;

  00059	48 8d 4c 24 50	 lea	 rcx, QWORD PTR root$[rsp]
  0005e	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00063	90		 npad	 1

; 977  : 
; 978  :         __UNIT_TYPE source_len = lstrlenW(source);

  00064	48 8b ce	 mov	 rcx, rsi
  00067	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrlenW
  0006d	48 63 f8	 movsxd	 rdi, eax

; 979  : 
; 980  :         size_t int_part_buf_count = source_len + 1;

  00070	48 ff c7	 inc	 rdi

; 981  :         wchar_t* int_part_buf = root.AllocateString(int_part_buf_count);

  00073	48 8b d7	 mov	 rdx, rdi
  00076	48 8d 4c 24 50	 lea	 rcx, QWORD PTR root$[rsp]
  0007b	e8 00 00 00 00	 call	 ?AllocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEA_W_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateString
  00080	4c 8b f8	 mov	 r15, rax

; 982  :         size_t frac_part_buf_count = source_len + 1;
; 983  :         wchar_t* frac_part_buf = root.AllocateString(frac_part_buf_count);

  00083	48 8b d7	 mov	 rdx, rdi
  00086	48 8d 4c 24 50	 lea	 rcx, QWORD PTR root$[rsp]
  0008b	e8 00 00 00 00	 call	 ?AllocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEA_W_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateString
  00090	4c 8b f0	 mov	 r14, rax

; 550  :         ParserState state(in_ptr, number_styles, format_option, sign, int_part_buf, int_part_buf_size, frac_part_buf, frac_part_buf_size);

  00093	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  00098	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0009d	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  000a2	4c 89 7c 24 28	 mov	 QWORD PTR [rsp+40], r15
  000a7	4c 89 6c 24 20	 mov	 QWORD PTR [rsp+32], r13
  000ac	4c 8b cb	 mov	 r9, rbx
  000af	44 8b c5	 mov	 r8d, ebp
  000b2	48 8b d6	 mov	 rdx, rsi
  000b5	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR state$3[rsp]
  000bd	e8 00 00 00 00	 call	 ??0ParserState@Internal@Core@Math@Palmtree@@QEAA@PEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z ; Palmtree::Math::Core::Internal::ParserState::ParserState

; 551  :         return (state.ParseAsDecimalNumberString());

  000c2	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR state$3[rsp]
  000ca	e8 00 00 00 00	 call	 ?ParseAsDecimalNumberString@ParserState@Internal@Core@Math@Palmtree@@QEAAHXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsDecimalNumberString
  000cf	8b f8		 mov	 edi, eax

; 984  :         bool result_parsing = ParseAsDecimalNumberString(source, number_styles, format_option, o_sign, int_part_buf, int_part_buf_count, frac_part_buf, frac_part_buf_count);
; 985  :         root.CheckString(int_part_buf);

  000d1	49 8b d7	 mov	 rdx, r15
  000d4	48 8d 4c 24 50	 lea	 rcx, QWORD PTR root$[rsp]
  000d9	e8 00 00 00 00	 call	 ?CheckString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEA_W@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckString

; 986  :         root.CheckString(frac_part_buf);

  000de	49 8b d6	 mov	 rdx, r14
  000e1	48 8d 4c 24 50	 lea	 rcx, QWORD PTR root$[rsp]
  000e6	e8 00 00 00 00	 call	 ?CheckString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEA_W@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckString

; 987  :         if (!result_parsing)

  000eb	85 ff		 test	 edi, edi
  000ed	75 18		 jne	 SHORT $LN9@TryParseDN

; 988  :         {
; 989  :             *result = 0;

  000ef	33 db		 xor	 ebx, ebx
  000f1	41 89 1c 24	 mov	 DWORD PTR [r12], ebx

; 990  :             if (number_styles & PMC_NUMBER_STYLE_ALLOW_EXCEPTION_THROWING)

  000f5	81 e5 00 00 00
	02		 and	 ebp, 33554432		; 02000000H

; 620  :             source_count -= r;

  000fb	f7 dd		 neg	 ebp
  000fd	1b db		 sbb	 ebx, ebx
  000ff	83 e3 f9	 and	 ebx, -7
  00102	e9 2a 03 00 00	 jmp	 $LN39@TryParseDN
$LN9@TryParseDN:

; 991  :                 return (PMC_STATUS_FORMAT_ERROR);
; 992  :             return (PMC_STATUS_OK);
; 993  :         }
; 994  :         if (int_part_buf[0] == L'\0' && (frac_part_buf[0] == L'\0' || frac_part_buf[0] == L'.' && frac_part_buf[1] == L'\0'))

  00107	41 0f b7 0f	 movzx	 ecx, WORD PTR [r15]
  0010b	66 85 c9	 test	 cx, cx
  0010e	75 30		 jne	 SHORT $LN11@TryParseDN
  00110	41 0f b7 06	 movzx	 eax, WORD PTR [r14]
  00114	66 85 c0	 test	 ax, ax
  00117	74 0d		 je	 SHORT $LN12@TryParseDN
  00119	66 83 f8 2e	 cmp	 ax, 46			; 0000002eH
  0011d	75 21		 jne	 SHORT $LN11@TryParseDN
  0011f	66 41 39 4e 02	 cmp	 WORD PTR [r14+2], cx
  00124	75 1a		 jne	 SHORT $LN11@TryParseDN
$LN12@TryParseDN:

; 995  :         {
; 996  :             // 整数部と小数部がともに空ならばエラーとする
; 997  :             *result = 0;

  00126	33 db		 xor	 ebx, ebx
  00128	41 89 1c 24	 mov	 DWORD PTR [r12], ebx

; 998  :             if (number_styles & PMC_NUMBER_STYLE_ALLOW_EXCEPTION_THROWING)

  0012c	0f ba e5 19	 bt	 ebp, 25
  00130	0f 83 fb 02 00
	00		 jae	 $LN39@TryParseDN

; 999  :                 return (PMC_STATUS_FORMAT_ERROR);

  00136	bb f9 ff ff ff	 mov	 ebx, -7
  0013b	e9 f1 02 00 00	 jmp	 $LN39@TryParseDN
$LN11@TryParseDN:

; 1000 :             return (PMC_STATUS_OK);
; 1001 :         }
; 1002 : 
; 1003 :         if (*o_sign < 0 && frac_part_buf[0] != L'\0')

  00140	41 80 7d 00 00	 cmp	 BYTE PTR [r13], 0
  00145	7d 27		 jge	 SHORT $LN15@TryParseDN
  00147	66 41 83 3e 00	 cmp	 WORD PTR [r14], 0
  0014c	74 20		 je	 SHORT $LN15@TryParseDN

; 1004 :         {
; 1005 :             // 負の符号が含まれていて、かつ小数部が存在する場合はエラー (OverflowException) とする。(小数点のみや小数部が '0' の連続のみでも存在するうちに入る)
; 1006 :             // ※エラーの条件がそうなっている根拠は不明だが実際問題として uint.Parse などではそうなっているため、それに合わせる。
; 1007 : 
; 1008 :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_SIGNED_INTEGER) == 0)

  0014e	0f ba e5 18	 bt	 ebp, 24
  00152	72 1a		 jb	 SHORT $LN15@TryParseDN

; 1009 :             {
; 1010 :                 // 負数が許可されていない場合
; 1011 : 
; 1012 :                 *result = 0;

  00154	33 db		 xor	 ebx, ebx
$LN20@TryParseDN:

; 1111 :         return (PMC_STATUS_OK);

  00156	41 89 1c 24	 mov	 DWORD PTR [r12], ebx
  0015a	0f ba e5 19	 bt	 ebp, 25
  0015e	0f 83 cd 02 00
	00		 jae	 $LN39@TryParseDN
  00164	bb fc ff ff ff	 mov	 ebx, -4
  00169	e9 c3 02 00 00	 jmp	 $LN39@TryParseDN
$LN15@TryParseDN:

; 1013 :                 if (number_styles & PMC_NUMBER_STYLE_ALLOW_EXCEPTION_THROWING)
; 1014 :                     return (PMC_STATUS_OVERFLOW);
; 1015 :                 return (PMC_STATUS_OK);
; 1016 :             }
; 1017 :         }
; 1018 : 
; 1019 :         if (int_part_buf[0] == L'0')

  0016e	66 83 f9 30	 cmp	 cx, 48			; 00000030H
  00172	75 40		 jne	 SHORT $LN71@TryParseDN

; 1020 :         {
; 1021 :             // 整数部の先行する 0 を削除する
; 1022 :             wchar_t* s_ptr = int_part_buf;

  00174	49 8b c7	 mov	 rax, r15

; 1023 :             wchar_t* d_ptr = int_part_buf;

  00177	49 8b d7	 mov	 rdx, r15
  0017a	66 0f 1f 44 00
	00		 npad	 6
$LL2@TryParseDN:

; 1025 :                 ++s_ptr;

  00180	48 83 c0 02	 add	 rax, 2

; 1024 :             while (*s_ptr == L'0')

  00184	0f b7 08	 movzx	 ecx, WORD PTR [rax]
  00187	66 83 f9 30	 cmp	 cx, 48			; 00000030H
  0018b	74 f3		 je	 SHORT $LL2@TryParseDN

; 1026 :             for (;;)
; 1027 :             {
; 1028 :                 *d_ptr = *s_ptr;

  0018d	66 41 89 0f	 mov	 WORD PTR [r15], cx

; 1029 :                 if (*s_ptr == L'\0')

  00191	66 83 38 00	 cmp	 WORD PTR [rax], 0
  00195	74 1d		 je	 SHORT $LN71@TryParseDN
  00197	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL4@TryParseDN:

; 1030 :                     break;
; 1031 :                 ++s_ptr;

  001a0	48 8d 40 02	 lea	 rax, QWORD PTR [rax+2]

; 1032 :                 ++d_ptr;

  001a4	48 8d 52 02	 lea	 rdx, QWORD PTR [rdx+2]

; 1026 :             for (;;)
; 1027 :             {
; 1028 :                 *d_ptr = *s_ptr;

  001a8	0f b7 08	 movzx	 ecx, WORD PTR [rax]
  001ab	66 89 0a	 mov	 WORD PTR [rdx], cx

; 1029 :                 if (*s_ptr == L'\0')

  001ae	66 83 38 00	 cmp	 WORD PTR [rax], 0
  001b2	75 ec		 jne	 SHORT $LL4@TryParseDN
$LN71@TryParseDN:

; 1033 :             }
; 1034 :         }
; 1035 : 
; 1036 :         // 小数部の末尾の 0 を削除する
; 1037 :         wchar_t* frac_ptr = frac_part_buf + lstrlenW(frac_part_buf);

  001b4	49 8b ce	 mov	 rcx, r14
  001b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrlenW
  001bd	48 63 c8	 movsxd	 rcx, eax
  001c0	49 8d 04 4e	 lea	 rax, QWORD PTR [r14+rcx*2]

; 1038 :         while (frac_ptr > frac_part_buf && frac_ptr[-1] == L'0')

  001c4	49 3b c6	 cmp	 rax, r14
  001c7	76 19		 jbe	 SHORT $LN8@TryParseDN
  001c9	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@TryParseDN:
  001d0	48 8d 48 fe	 lea	 rcx, QWORD PTR [rax-2]
  001d4	66 83 39 30	 cmp	 WORD PTR [rcx], 48	; 00000030H
  001d8	75 08		 jne	 SHORT $LN8@TryParseDN

; 1039 :             --frac_ptr;

  001da	48 8b c1	 mov	 rax, rcx

; 1038 :         while (frac_ptr > frac_part_buf && frac_ptr[-1] == L'0')

  001dd	49 3b ce	 cmp	 rcx, r14
  001e0	77 ee		 ja	 SHORT $LL7@TryParseDN
$LN8@TryParseDN:

; 1040 :         *frac_ptr = L'\0';

  001e2	33 db		 xor	 ebx, ebx
  001e4	66 89 18	 mov	 WORD PTR [rax], bx

; 1041 : 
; 1042 :         // 小数部が 0 ではない場合、エラーとする
; 1043 :         if (!(frac_part_buf[0] == L'\0' || frac_part_buf[0] == L'.' && frac_part_buf[1] == L'\0'))

  001e7	41 0f b7 06	 movzx	 eax, WORD PTR [r14]
  001eb	66 85 c0	 test	 ax, ax
  001ee	74 15		 je	 SHORT $LN19@TryParseDN
  001f0	66 83 f8 2e	 cmp	 ax, 46			; 0000002eH
  001f4	0f 85 5c ff ff
	ff		 jne	 $LN20@TryParseDN
  001fa	66 41 39 5e 02	 cmp	 WORD PTR [r14+2], bx
  001ff	0f 85 51 ff ff
	ff		 jne	 $LN20@TryParseDN
$LN19@TryParseDN:

; 1044 :         {
; 1045 :             *result = 0;
; 1046 :             if (number_styles & PMC_NUMBER_STYLE_ALLOW_EXCEPTION_THROWING)
; 1047 :                 return (PMC_STATUS_OVERFLOW);
; 1048 :             return (PMC_STATUS_OK);
; 1049 :         }
; 1050 : 
; 1051 :         if (int_part_buf[0] == L'\0')

  00205	66 41 39 1f	 cmp	 WORD PTR [r15], bx
  00209	75 0b		 jne	 SHORT $LN22@TryParseDN

; 1052 :         {
; 1053 :             // 整数部が空である場合
; 1054 : 
; 1055 :             // 符号を 0 に 修正する
; 1056 :             *o_sign = 0;

  0020b	41 88 5d 00	 mov	 BYTE PTR [r13], bl

; 1057 : 
; 1058 :             // 整数部に 0 を設定する
; 1059 :             int_part_buf[0] = L'0';

  0020f	41 c7 07 30 00
	00 00		 mov	 DWORD PTR [r15], 48	; 00000030H
$LN22@TryParseDN:

; 1060 :             int_part_buf[1] = L'\0';
; 1061 :         }
; 1062 : 
; 1063 :         if (*o_sign < 0)

  00216	41 38 5d 00	 cmp	 BYTE PTR [r13], bl
  0021a	7d 0a		 jge	 SHORT $LN24@TryParseDN

; 1064 :         {
; 1065 :             // 数値が負である場合
; 1066 : 
; 1067 :             if ((number_styles & PMC_NUMBER_STYLE_ALLOW_SIGNED_INTEGER) == 0)

  0021c	0f ba e5 18	 bt	 ebp, 24
  00220	0f 83 30 ff ff
	ff		 jae	 $LN20@TryParseDN
$LN24@TryParseDN:

; 1068 :             {
; 1069 :                 // 負数が許可されていない場合
; 1070 : 
; 1071 :                 *result = 0;
; 1072 :                 if (number_styles & PMC_NUMBER_STYLE_ALLOW_EXCEPTION_THROWING)
; 1073 :                     return (PMC_STATUS_OVERFLOW);
; 1074 :                 return (PMC_STATUS_OK);
; 1075 :             }
; 1076 :         }
; 1077 : 
; 1078 :         // 小数部は捨てる
; 1079 :         root.DeallocateString(frac_part_buf);

  00226	49 8b d6	 mov	 rdx, r14
  00229	48 8d 4c 24 50	 lea	 rcx, QWORD PTR root$[rsp]
  0022e	e8 00 00 00 00	 call	 ?DeallocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEA_W@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateString

; 1082 :         __UNIT_TYPE* bin_buf = root.AllocateBlock(_DIVIDE_CEILING_SIZE(lstrlenW(int_part_buf), word_digit_count) * __UNIT_TYPE_BIT_COUNT);

  00233	49 8b cf	 mov	 rcx, r15
  00236	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrlenW
  0023c	48 63 c8	 movsxd	 rcx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 162  :             return ((u + v - 1) / v);

  0023f	48 83 c1 12	 add	 rcx, 18
  00243	48 bd 5f 43 79
	0d e5 35 94 d7	 mov	 rbp, -2912643801112034465 ; d79435e50d79435fH
  0024d	48 8b c5	 mov	 rax, rbp
  00250	48 f7 e1	 mul	 rcx
  00253	48 c1 ea 04	 shr	 rdx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 1082 :         __UNIT_TYPE* bin_buf = root.AllocateBlock(_DIVIDE_CEILING_SIZE(lstrlenW(int_part_buf), word_digit_count) * __UNIT_TYPE_BIT_COUNT);

  00257	48 c1 e2 06	 shl	 rdx, 6
  0025b	48 8d 4c 24 50	 lea	 rcx, QWORD PTR root$[rsp]
  00260	e8 00 00 00 00	 call	 ?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEA_K_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
  00265	4c 8b e8	 mov	 r13, rax

; 612  :         wchar_t* in_ptr = source;

  00268	49 8b ff	 mov	 rdi, r15

; 613  :         __UNIT_TYPE* out_ptr = out_buf;

  0026b	48 8b f0	 mov	 rsi, rax

; 614  :         __UNIT_TYPE source_count = lstrlenW(source);

  0026e	49 8b cf	 mov	 rcx, r15
  00271	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrlenW
  00277	4c 63 c0	 movsxd	 r8, eax

; 615  :         int r = source_count % word_digit_count;

  0027a	48 8b c5	 mov	 rax, rbp
  0027d	49 f7 e0	 mul	 r8
  00280	48 c1 ea 04	 shr	 rdx, 4
  00284	48 6b ca 13	 imul	 rcx, rdx, 19
  00288	49 8b c0	 mov	 rax, r8
  0028b	48 2b c1	 sub	 rax, rcx

; 616  :         if (r > 0)

  0028e	85 c0		 test	 eax, eax
  00290	7e 4a		 jle	 SHORT $LN91@TryParseDN

; 617  :         {
; 618  :             *out_ptr++ = BuildLeading1WordFromDecimalString(in_ptr, r);

  00292	4c 63 c8	 movsxd	 r9, eax
  00295	49 8b d7	 mov	 rdx, r15

; 556  :         __UNIT_TYPE x = 0;

  00298	48 8b fb	 mov	 rdi, rbx

; 618  :             *out_ptr++ = BuildLeading1WordFromDecimalString(in_ptr, r);

  0029b	49 8b f1	 mov	 rsi, r9
  0029e	66 90		 npad	 2
$LL52@TryParseDN:

; 559  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  002a0	0f b7 0a	 movzx	 ecx, WORD PTR [rdx]
  002a3	48 8d 52 02	 lea	 rdx, QWORD PTR [rdx+2]

; 42   :         if (c >= L'0' && c <= L'9')

  002a7	8d 41 d0	 lea	 eax, DWORD PTR [rcx-48]
  002aa	66 83 f8 09	 cmp	 ax, 9
  002ae	77 08		 ja	 SHORT $LN56@TryParseDN

; 43   :             return (c - L'0');

  002b0	0f b7 c1	 movzx	 eax, cx
  002b3	83 e8 30	 sub	 eax, 48			; 00000030H
  002b6	eb 05		 jmp	 SHORT $LN55@TryParseDN
$LN56@TryParseDN:

; 44   :         return (-1);

  002b8	b8 ff ff ff ff	 mov	 eax, -1
$LN55@TryParseDN:

; 559  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  002bd	48 8d 0c bf	 lea	 rcx, QWORD PTR [rdi+rdi*4]
  002c1	48 98		 cdqe
  002c3	48 8d 3c 48	 lea	 rdi, QWORD PTR [rax+rcx*2]

; 560  :             --count;

  002c7	48 83 ee 01	 sub	 rsi, 1

; 557  :         while (count > 0)

  002cb	75 d3		 jne	 SHORT $LL52@TryParseDN

; 618  :             *out_ptr++ = BuildLeading1WordFromDecimalString(in_ptr, r);

  002cd	49 89 7d 00	 mov	 QWORD PTR [r13], rdi
  002d1	49 8d 75 08	 lea	 rsi, QWORD PTR [r13+8]

; 619  :             in_ptr += r;

  002d5	4b 8d 3c 4f	 lea	 rdi, QWORD PTR [r15+r9*2]

; 620  :             source_count -= r;

  002d9	4d 2b c1	 sub	 r8, r9
$LN91@TryParseDN:

; 621  :         }
; 622  :         while (source_count > 0)

  002dc	4d 85 c0	 test	 r8, r8
  002df	74 2d		 je	 SHORT $LN48@TryParseDN
  002e1	49 8d 48 ff	 lea	 rcx, QWORD PTR [r8-1]
  002e5	48 8b c5	 mov	 rax, rbp
  002e8	48 f7 e1	 mul	 rcx
  002eb	4c 8b d2	 mov	 r10, rdx
  002ee	49 c1 ea 04	 shr	 r10, 4
  002f2	49 ff c2	 inc	 r10
$LL47@TryParseDN:

; 623  :         {
; 624  :             *out_ptr++ = Build1WordFromDecimalString(in_ptr);

  002f5	48 8b cf	 mov	 rcx, rdi
  002f8	e8 00 00 00 00	 call	 ?Build1WordFromDecimalString@Internal@Core@Math@Palmtree@@YA_KPEA_W@Z ; Palmtree::Math::Core::Internal::Build1WordFromDecimalString
  002fd	48 89 06	 mov	 QWORD PTR [rsi], rax
  00300	48 83 c6 08	 add	 rsi, 8

; 625  :             in_ptr += word_digit_count;

  00304	48 83 c7 26	 add	 rdi, 38			; 00000026H

; 621  :         }
; 622  :         while (source_count > 0)

  00308	49 83 ea 01	 sub	 r10, 1
  0030c	75 e7		 jne	 SHORT $LL47@TryParseDN
$LN48@TryParseDN:

; 626  :             source_count -= word_digit_count;
; 627  :         }
; 628  :         *out_buf_count = out_ptr - out_buf;

  0030e	49 2b f5	 sub	 rsi, r13
  00311	48 c1 fe 03	 sar	 rsi, 3

; 1083 :         __UNIT_TYPE bin_buf_count;
; 1084 :         BuildBinaryFromDecimalString(int_part_buf, bin_buf, &bin_buf_count);
; 1085 :         root.CheckBlock(bin_buf);

  00315	49 8b d5	 mov	 rdx, r13
  00318	48 8d 4c 24 50	 lea	 rcx, QWORD PTR root$[rsp]
  0031d	e8 00 00 00 00	 call	 ?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEA_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock

; 1086 :         root.DeallocateString(int_part_buf);

  00322	49 8b d7	 mov	 rdx, r15
  00325	48 8d 4c 24 50	 lea	 rcx, QWORD PTR root$[rsp]
  0032a	e8 00 00 00 00	 call	 ?DeallocateString@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEA_W@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateString

; 1087 : 
; 1088 :         // 10^word_digit_count を基数としたバイト列を 10 を基数としたバイト列に変換する
; 1089 :         __UNIT_TYPE o_bit_count = bin_buf_count * __UNIT_TYPE_BIT_COUNT;

  0032f	48 8b fe	 mov	 rdi, rsi
  00332	48 c1 e7 06	 shl	 rdi, 6

; 1090 :         *o_abs = root.AllocateNumber(o_bit_count);

  00336	48 8b d7	 mov	 rdx, rdi
  00339	48 8d 4c 24 50	 lea	 rcx, QWORD PTR root$[rsp]
  0033e	e8 00 00 00 00	 call	 ?AllocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEAU__tag_NUMBER_HEADER@2345@_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateNumber
  00343	48 8b 4c 24 70	 mov	 rcx, QWORD PTR o_abs$GSCopy$1$[rsp]
  00348	48 89 01	 mov	 QWORD PTR [rcx], rax

; 1091 :         ConvertCardinalNumber(bin_buf, bin_buf_count, (*o_abs)->BLOCK);

  0034b	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  0034f	48 89 44 24 78	 mov	 QWORD PTR out_buf$1$[rsp], rax

; 949  :         ResourceHolderUINT root;

  00354	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR root$2[rsp]
  0035c	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00361	90		 npad	 1

; 950  :         __UNIT_TYPE* work_buf = root.AllocateBlock(__UNIT_TYPE_BIT_COUNT * (in_buf_count + 1));

  00362	48 8d 57 40	 lea	 rdx, QWORD PTR [rdi+64]
  00366	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR root$2[rsp]
  0036e	e8 00 00 00 00	 call	 ?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEA_K_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
  00373	4c 8b f8	 mov	 r15, rax

; 951  :         __UNIT_TYPE work_buf_count = 1;

  00376	bd 01 00 00 00	 mov	 ebp, 1

; 952  :         work_buf[0] = in_buf[0];

  0037b	49 8b 4d 00	 mov	 rcx, QWORD PTR [r13]
  0037f	48 89 08	 mov	 QWORD PTR [rax], rcx

; 953  :         ++in_buf;

  00382	4d 8d 75 08	 lea	 r14, QWORD PTR [r13+8]

; 954  :         --in_buf_count;

  00386	48 2b f5	 sub	 rsi, rbp

; 955  :         while (in_buf_count > 0)

  00389	74 28		 je	 SHORT $LN60@TryParseDN
  0038b	0f 1f 44 00 00	 npad	 5
$LL59@TryParseDN:

; 956  :         {
; 957  :             __UNIT_TYPE* w_tail = (*fp_MultiplyAndAdd)(work_buf, work_buf_count, *in_buf);

  00390	4d 8b 06	 mov	 r8, QWORD PTR [r14]
  00393	48 8b d5	 mov	 rdx, rbp
  00396	49 8b cf	 mov	 rcx, r15
  00399	ff 15 00 00 00
	00		 call	 QWORD PTR ?fp_MultiplyAndAdd@Internal@Core@Math@Palmtree@@3P6APEA_KPEA_K_K1@ZEA
  0039f	48 8b e8	 mov	 rbp, rax

; 958  :             work_buf_count = w_tail - work_buf;

  003a2	49 2b ef	 sub	 rbp, r15
  003a5	48 c1 fd 03	 sar	 rbp, 3

; 959  :             ++in_buf;

  003a9	4d 8d 76 08	 lea	 r14, QWORD PTR [r14+8]

; 960  :             --in_buf_count;

  003ad	48 83 ee 01	 sub	 rsi, 1

; 955  :         while (in_buf_count > 0)

  003b1	75 dd		 jne	 SHORT $LL59@TryParseDN
$LN60@TryParseDN:

; 961  :         }
; 962  :         root.CheckBlock(work_buf);

  003b3	49 8b d7	 mov	 rdx, r15
  003b6	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR root$2[rsp]
  003be	e8 00 00 00 00	 call	 ?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEA_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 67   :             __movsq(d, s, count);

  003c3	48 8b 7c 24 78	 mov	 rdi, QWORD PTR out_buf$1$[rsp]
  003c8	49 8b f7	 mov	 rsi, r15
  003cb	48 8b cd	 mov	 rcx, rbp
  003ce	f3 48 a5	 rep movsq
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 964  :     }

  003d1	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR root$2[rsp]
  003d9	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT

; 1092 :         root.CheckNumber(*o_abs);

  003de	48 8b 7c 24 70	 mov	 rdi, QWORD PTR o_abs$GSCopy$1$[rsp]
  003e3	48 8b 17	 mov	 rdx, QWORD PTR [rdi]
  003e6	48 8d 4c 24 50	 lea	 rcx, QWORD PTR root$[rsp]
  003eb	e8 00 00 00 00	 call	 ?CheckNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckNumber

; 1093 :         root.DeallocateBlock(bin_buf);

  003f0	49 8b d5	 mov	 rdx, r13
  003f3	48 8d 4c 24 50	 lea	 rcx, QWORD PTR root$[rsp]
  003f8	e8 00 00 00 00	 call	 ?DeallocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEA_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateBlock

; 1094 :         CommitNumber(*o_abs);

  003fd	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  00400	e8 00 00 00 00	 call	 ?CommitNumber@Internal@Core@Math@Palmtree@@YAXPEAU__tag_NUMBER_HEADER@1234@@Z ; Palmtree::Math::Core::Internal::CommitNumber

; 1095 :         if ((*o_abs)->IS_ZERO)

  00405	48 8b 17	 mov	 rdx, QWORD PTR [rdi]
  00408	48 8d 4c 24 50	 lea	 rcx, QWORD PTR root$[rsp]
  0040d	f6 42 08 01	 test	 BYTE PTR [rdx+8], 1
  00411	74 11		 je	 SHORT $LN26@TryParseDN

; 1096 :         {
; 1097 :             root.DeallocateNumber(*o_abs);

  00413	e8 00 00 00 00	 call	 ?DeallocateNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::DeallocateNumber

; 1098 :             *o_abs = &number_zero;

  00418	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?number_zero@Internal@Core@Math@Palmtree@@3U__tag_NUMBER_HEADER@1234@A ; Palmtree::Math::Core::Internal::number_zero
  0041f	48 89 07	 mov	 QWORD PTR [rdi], rax

; 1099 :         }
; 1100 :         else

  00422	eb 05		 jmp	 SHORT $LN27@TryParseDN
$LN26@TryParseDN:

; 1101 :             root.UnlinkNumber(*o_abs);

  00424	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber
$LN27@TryParseDN:

; 1102 : #ifdef _DEBUG
; 1103 :         if (*o_sign != 0 && *o_sign != 1 && *o_sign != -1)
; 1104 :             throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_parse.cpp;TryParseDN;1");
; 1105 :         if (*o_sign == 0 && !(*o_abs)->IS_ZERO)
; 1106 :             throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_parse.cpp;TryParseDN;2");
; 1107 :         if (*o_sign != 0 && (*o_abs)->IS_ZERO)
; 1108 :             throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_parse.cpp;TryParseDN;3");
; 1109 : #endif
; 1110 :         *result = 1;

  00429	41 c7 04 24 01
	00 00 00	 mov	 DWORD PTR [r12], 1
$LN39@TryParseDN:

; 1111 :         return (PMC_STATUS_OK);

  00431	48 8d 4c 24 50	 lea	 rcx, QWORD PTR root$[rsp]
  00436	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  0043b	8b c3		 mov	 eax, ebx

; 1112 :     }

  0043d	48 8b 8c 24 f0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00445	48 33 cc	 xor	 rcx, rsp
  00448	e8 00 00 00 00	 call	 __security_check_cookie
  0044d	48 8b 9c 24 48
	02 00 00	 mov	 rbx, QWORD PTR [rsp+584]
  00455	48 81 c4 00 02
	00 00		 add	 rsp, 512		; 00000200H
  0045c	41 5f		 pop	 r15
  0045e	41 5e		 pop	 r14
  00460	41 5d		 pop	 r13
  00462	41 5c		 pop	 r12
  00464	5f		 pop	 rdi
  00465	5e		 pop	 rsi
  00466	5d		 pop	 rbp
  00467	c3		 ret	 0
?TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z ENDP ; Palmtree::Math::Core::Internal::TryParseDN
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
root$ = 80
o_abs$GSCopy$1$ = 112
out_buf$1$ = 120
$T1 = 128
root$2 = 136
state$3 = 176
__$ArrayPad$ = 496
source$ = 576
number_styles$ = 584
format_option$ = 592
o_sign$ = 600
o_abs$ = 608
result$ = 616
?dtor$0@?0??TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA PROC ; `Palmtree::Math::Core::Internal::TryParseDN'::`1'::dtor$0
  00000	48 8d 8a 50 00
	00 00		 lea	 rcx, QWORD PTR root$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
?dtor$0@?0??TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::TryParseDN'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
root$ = 80
o_abs$GSCopy$1$ = 112
out_buf$1$ = 120
$T1 = 128
root$2 = 136
state$3 = 176
__$ArrayPad$ = 496
source$ = 576
number_styles$ = 584
format_option$ = 592
o_sign$ = 600
o_abs$ = 608
result$ = 616
?dtor$1@?0??TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA PROC ; `Palmtree::Math::Core::Internal::TryParseDN'::`1'::dtor$1
  00000	48 8d 8a 88 00
	00 00		 lea	 rcx, QWORD PTR root$2[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
?dtor$1@?0??TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::TryParseDN'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
root$ = 80
o_abs$GSCopy$1$ = 112
out_buf$1$ = 120
$T1 = 128
root$2 = 136
state$3 = 176
__$ArrayPad$ = 496
source$ = 576
number_styles$ = 584
format_option$ = 592
o_sign$ = 600
o_abs$ = 608
result$ = 616
?dtor$0@?0??TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA PROC ; `Palmtree::Math::Core::Internal::TryParseDN'::`1'::dtor$0
  00000	48 8d 8a 50 00
	00 00		 lea	 rcx, QWORD PTR root$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
?dtor$0@?0??TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::TryParseDN'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
root$ = 80
o_abs$GSCopy$1$ = 112
out_buf$1$ = 120
$T1 = 128
root$2 = 136
state$3 = 176
__$ArrayPad$ = 496
source$ = 576
number_styles$ = 584
format_option$ = 592
o_sign$ = 600
o_abs$ = 608
result$ = 616
?dtor$1@?0??TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA PROC ; `Palmtree::Math::Core::Internal::TryParseDN'::`1'::dtor$1
  00000	48 8d 8a 88 00
	00 00		 lea	 rcx, QWORD PTR root$2[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
?dtor$1@?0??TryParseDN@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::TryParseDN'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z
_TEXT	SEGMENT
root$ = 40
in_buf$ = 112
in_buf_count$ = 120
out_buf$ = 128
?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z PROC ; Palmtree::Math::Core::Internal::ConvertCardinalNumber, COMDAT

; 948  :     {

  00000	48 8b c4	 mov	 rax, rsp
  00003	57		 push	 rdi
  00004	41 56		 push	 r14
  00006	41 57		 push	 r15
  00008	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000c	48 c7 40 b8 fe
	ff ff ff	 mov	 QWORD PTR [rax-72], -2
  00014	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  00018	48 89 68 10	 mov	 QWORD PTR [rax+16], rbp
  0001c	48 89 70 18	 mov	 QWORD PTR [rax+24], rsi
  00020	4d 8b f8	 mov	 r15, r8
  00023	48 8b ea	 mov	 rbp, rdx
  00026	48 8b f1	 mov	 rsi, rcx

; 949  :         ResourceHolderUINT root;

  00029	48 8d 48 c0	 lea	 rcx, QWORD PTR [rax-64]
  0002d	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00032	90		 npad	 1

; 950  :         __UNIT_TYPE* work_buf = root.AllocateBlock(__UNIT_TYPE_BIT_COUNT * (in_buf_count + 1));

  00033	48 8d 55 01	 lea	 rdx, QWORD PTR [rbp+1]
  00037	48 c1 e2 06	 shl	 rdx, 6
  0003b	48 8d 4c 24 28	 lea	 rcx, QWORD PTR root$[rsp]
  00040	e8 00 00 00 00	 call	 ?AllocateBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAPEA_K_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::AllocateBlock
  00045	4c 8b f0	 mov	 r14, rax

; 951  :         __UNIT_TYPE work_buf_count = 1;

  00048	bb 01 00 00 00	 mov	 ebx, 1

; 952  :         work_buf[0] = in_buf[0];

  0004d	48 8b 3e	 mov	 rdi, QWORD PTR [rsi]
  00050	48 89 38	 mov	 QWORD PTR [rax], rdi

; 953  :         ++in_buf;

  00053	48 83 c6 08	 add	 rsi, 8

; 949  :         ResourceHolderUINT root;

  00057	48 83 ed 01	 sub	 rbp, 1

; 954  :         --in_buf_count;
; 955  :         while (in_buf_count > 0)

  0005b	74 26		 je	 SHORT $LN3@ConvertCar
  0005d	0f 1f 00	 npad	 3
$LL2@ConvertCar:

; 956  :         {
; 957  :             __UNIT_TYPE* w_tail = (*fp_MultiplyAndAdd)(work_buf, work_buf_count, *in_buf);

  00060	4c 8b 06	 mov	 r8, QWORD PTR [rsi]
  00063	48 8b d3	 mov	 rdx, rbx
  00066	49 8b ce	 mov	 rcx, r14
  00069	ff 15 00 00 00
	00		 call	 QWORD PTR ?fp_MultiplyAndAdd@Internal@Core@Math@Palmtree@@3P6APEA_KPEA_K_K1@ZEA
  0006f	48 8b d8	 mov	 rbx, rax

; 958  :             work_buf_count = w_tail - work_buf;

  00072	49 2b de	 sub	 rbx, r14
  00075	48 c1 fb 03	 sar	 rbx, 3

; 959  :             ++in_buf;

  00079	48 8d 76 08	 lea	 rsi, QWORD PTR [rsi+8]

; 960  :             --in_buf_count;

  0007d	48 83 ed 01	 sub	 rbp, 1

; 954  :         --in_buf_count;
; 955  :         while (in_buf_count > 0)

  00081	75 dd		 jne	 SHORT $LL2@ConvertCar
$LN3@ConvertCar:

; 961  :         }
; 962  :         root.CheckBlock(work_buf);

  00083	49 8b d6	 mov	 rdx, r14
  00086	48 8d 4c 24 28	 lea	 rcx, QWORD PTR root$[rsp]
  0008b	e8 00 00 00 00	 call	 ?CheckBlock@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEA_K@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::CheckBlock
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 67   :             __movsq(d, s, count);

  00090	49 8b ff	 mov	 rdi, r15
  00093	49 8b f6	 mov	 rsi, r14
  00096	48 8b cb	 mov	 rcx, rbx
  00099	f3 48 a5	 rep movsq
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 964  :     }

  0009c	48 8d 4c 24 28	 lea	 rcx, QWORD PTR root$[rsp]
  000a1	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  000a6	48 8b 5c 24 70	 mov	 rbx, QWORD PTR [rsp+112]
  000ab	48 8b 6c 24 78	 mov	 rbp, QWORD PTR [rsp+120]
  000b0	48 8b b4 24 80
	00 00 00	 mov	 rsi, QWORD PTR [rsp+128]
  000b8	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000bc	41 5f		 pop	 r15
  000be	41 5e		 pop	 r14
  000c0	5f		 pop	 rdi
  000c1	c3		 ret	 0
?ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z ENDP ; Palmtree::Math::Core::Internal::ConvertCardinalNumber
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
root$ = 40
in_buf$ = 112
in_buf_count$ = 120
out_buf$ = 128
?dtor$0@?0??ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ConvertCardinalNumber'::`1'::dtor$0
  00000	48 8d 8a 28 00
	00 00		 lea	 rcx, QWORD PTR root$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
?dtor$0@?0??ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ConvertCardinalNumber'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
root$ = 40
in_buf$ = 112
in_buf_count$ = 120
out_buf$ = 128
?dtor$0@?0??ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ConvertCardinalNumber'::`1'::dtor$0
  00000	48 8d 8a 28 00
	00 00		 lea	 rcx, QWORD PTR root$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
?dtor$0@?0??ConvertCardinalNumber@Internal@Core@Math@Palmtree@@YAXPEA_K_K0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ConvertCardinalNumber'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?MultiplyAndAdd_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAPEA_KPEA_K_K1@Z
_TEXT	SEGMENT
k$ = 0
k$ = 8
k$ = 16
k$ = 24
k$ = 32
k$ = 40
k$ = 48
k$ = 56
k$ = 64
k$ = 72
k$ = 80
k$ = 88
k$ = 96
k$ = 104
k$ = 112
k$ = 120
k$ = 128
k$ = 136
k$ = 144
k$ = 152
k$ = 160
k$ = 168
k$ = 176
k$ = 184
k$ = 192
k$ = 200
k$ = 208
k$ = 216
k$ = 224
k$ = 232
k$ = 240
k$ = 248
k$ = 256
k$ = 264
k$ = 272
k$ = 280
k$ = 288
k$ = 296
k$ = 304
k$ = 312
k$ = 320
k$ = 328
k$ = 336
k$ = 344
k$ = 352
k$ = 360
k$ = 368
k$ = 376
k$ = 384
k$ = 392
k$ = 400
k$ = 408
k$ = 416
k$ = 424
k$ = 432
k$ = 440
k$ = 448
k$ = 456
k$ = 464
t_hi$1 = 472
t_hi$2 = 480
t_hi$3 = 488
t_hi$4 = 496
t_hi$5 = 504
t_hi$6 = 512
t_hi$7 = 520
t_hi$8 = 528
t_hi$9 = 536
t_hi$10 = 544
t_hi$11 = 552
t_hi$12 = 560
t_hi$13 = 568
t_hi$14 = 576
t_hi$15 = 584
t_hi$16 = 592
t_hi$17 = 600
t_hi$18 = 608
t_hi$19 = 616
t_hi$20 = 624
t_hi$21 = 632
t_hi$22 = 640
t_hi$23 = 648
t_hi$24 = 656
t_hi$25 = 664
t_hi$26 = 672
t_hi$27 = 680
t_hi$28 = 688
t_hi$29 = 696
t_hi$30 = 704
t_hi$31 = 712
t_hi$32 = 720
t_hi$33 = 728
t_hi$34 = 736
t_hi$35 = 744
t_hi$36 = 752
t_hi$37 = 760
t_hi$38 = 768
t_hi$39 = 776
t_hi$40 = 784
t_hi$41 = 792
t_hi$42 = 800
t_hi$43 = 808
t_hi$44 = 816
t_hi$45 = 824
t_hi$46 = 832
t_hi$47 = 840
t_hi$48 = 848
t_hi$49 = 856
t_hi$50 = 864
t_hi$51 = 872
t_hi$52 = 880
t_hi$53 = 888
t_hi$54 = 896
t_hi$55 = 904
t_hi$56 = 912
t_hi$57 = 920
t_hi$58 = 928
t_hi$59 = 936
t_hi$60 = 944
t_hi$61 = 952
t_hi$62 = 960
t_hi$63 = 968
k$ = 1008
u_buf$ = 1008
k$ = 1016
u_count$ = 1016
k$ = 1024
x$ = 1024
k$ = 1032
?MultiplyAndAdd_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAPEA_KPEA_K_K1@Z PROC ; Palmtree::Math::Core::Internal::MultiplyAndAdd_using_ADCX_MULX, COMDAT

; 805  :     {

  00000	40 55		 push	 rbp
  00002	53		 push	 rbx
  00003	57		 push	 rdi
  00004	48 8d ac 24 30
	fd ff ff	 lea	 rbp, QWORD PTR [rsp-720]
  0000c	48 81 ec d0 03
	00 00		 sub	 rsp, 976		; 000003d0H

; 806  :         __UNIT_TYPE k = x;
; 807  :         __UNIT_TYPE count = u_count >> 5;

  00013	48 8b da	 mov	 rbx, rdx

; 808  :         while (count > 0)

  00016	33 ff		 xor	 edi, edi
  00018	48 c1 eb 05	 shr	 rbx, 5
  0001c	4c 8b da	 mov	 r11, rdx
  0001f	4d 8b d0	 mov	 r10, r8
  00022	48 ba 00 00 e8
	89 04 23 c7 8a	 mov	 rdx, -8446744073709551616 ; 8ac7230489e80000H
  0002c	48 85 db	 test	 rbx, rbx
  0002f	0f 84 b7 04 00
	00		 je	 $LN3@MultiplyAn
$LL2@MultiplyAn:

; 809  :         {
; 810  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

  00035	48 8b 01	 mov	 rax, QWORD PTR [rcx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  00038	c4 62 bb f6 c8	 mulx	 r9, r8, rax

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  0003d	4d 03 c2	 add	 r8, r10

; 233  :             return (_mulx_u64(u, v, w_hi));

  00040	4c 89 8d d8 00
	00 00		 mov	 QWORD PTR t_hi$1[rbp-256], r9

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00047	4c 89 01	 mov	 QWORD PTR [rcx], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 811  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

  0004a	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  0004e	66 4c 0f 38 f6
	cf		 adcx	 r9, rdi

; 233  :             return (_mulx_u64(u, v, w_hi));

  00054	c4 62 bb f6 d0	 mulx	 r10, r8, rax

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00059	4d 03 c1	 add	 r8, r9
  0005c	4c 89 8d f0 02
	00 00		 mov	 QWORD PTR k$[rbp-256], r9
  00063	4c 89 41 08	 mov	 QWORD PTR [rcx+8], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 812  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[2], &u_buf[2]);

  00067	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  0006b	c4 62 bb f6 c8	 mulx	 r9, r8, rax
  00070	4c 89 95 e0 00
	00 00		 mov	 QWORD PTR t_hi$2[rbp-256], r10

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00077	66 4c 0f 38 f6
	d7		 adcx	 r10, rdi
  0007d	4d 03 c2	 add	 r8, r10
  00080	4c 89 95 f8 02
	00 00		 mov	 QWORD PTR k$[rbp-256], r10
  00087	4c 89 41 10	 mov	 QWORD PTR [rcx+16], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 813  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[3], &u_buf[3]);

  0008b	48 8b 41 18	 mov	 rax, QWORD PTR [rcx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  0008f	c4 62 bb f6 d0	 mulx	 r10, r8, rax
  00094	4c 89 8d e8 00
	00 00		 mov	 QWORD PTR t_hi$3[rbp-256], r9

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  0009b	66 4c 0f 38 f6
	cf		 adcx	 r9, rdi
  000a1	4d 03 c1	 add	 r8, r9
  000a4	4c 89 8d 00 03
	00 00		 mov	 QWORD PTR k$[rbp-256], r9
  000ab	4c 89 41 18	 mov	 QWORD PTR [rcx+24], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 814  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[4], &u_buf[4]);

  000af	48 8b 41 20	 mov	 rax, QWORD PTR [rcx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  000b3	c4 62 bb f6 c8	 mulx	 r9, r8, rax
  000b8	4c 89 95 f0 00
	00 00		 mov	 QWORD PTR t_hi$4[rbp-256], r10

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  000bf	66 4c 0f 38 f6
	d7		 adcx	 r10, rdi
  000c5	4d 03 c2	 add	 r8, r10
  000c8	4c 89 95 08 03
	00 00		 mov	 QWORD PTR k$[rbp-256], r10
  000cf	4c 89 41 20	 mov	 QWORD PTR [rcx+32], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 815  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[5], &u_buf[5]);

  000d3	48 8b 41 28	 mov	 rax, QWORD PTR [rcx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  000d7	c4 62 bb f6 d0	 mulx	 r10, r8, rax
  000dc	4c 89 8d f8 00
	00 00		 mov	 QWORD PTR t_hi$5[rbp-256], r9

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  000e3	66 4c 0f 38 f6
	cf		 adcx	 r9, rdi
  000e9	4d 03 c1	 add	 r8, r9
  000ec	4c 89 0c 24	 mov	 QWORD PTR k$[rsp], r9
  000f0	4c 89 41 28	 mov	 QWORD PTR [rcx+40], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 816  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[6], &u_buf[6]);

  000f4	48 8b 41 30	 mov	 rax, QWORD PTR [rcx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  000f8	c4 62 bb f6 c8	 mulx	 r9, r8, rax
  000fd	4c 89 95 00 01
	00 00		 mov	 QWORD PTR t_hi$6[rbp-256], r10

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00104	66 4c 0f 38 f6
	d7		 adcx	 r10, rdi
  0010a	4d 03 c2	 add	 r8, r10
  0010d	4c 89 54 24 08	 mov	 QWORD PTR k$[rsp], r10
  00112	4c 89 41 30	 mov	 QWORD PTR [rcx+48], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 817  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[7], &u_buf[7]);

  00116	48 8b 41 38	 mov	 rax, QWORD PTR [rcx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  0011a	c4 62 bb f6 d0	 mulx	 r10, r8, rax
  0011f	4c 89 8d 08 01
	00 00		 mov	 QWORD PTR t_hi$7[rbp-256], r9

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00126	66 4c 0f 38 f6
	cf		 adcx	 r9, rdi
  0012c	4d 03 c1	 add	 r8, r9
  0012f	4c 89 4c 24 10	 mov	 QWORD PTR k$[rsp], r9
  00134	4c 89 41 38	 mov	 QWORD PTR [rcx+56], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 818  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[8], &u_buf[8]);

  00138	48 8b 41 40	 mov	 rax, QWORD PTR [rcx+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  0013c	c4 62 bb f6 c8	 mulx	 r9, r8, rax
  00141	4c 89 95 10 01
	00 00		 mov	 QWORD PTR t_hi$8[rbp-256], r10

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00148	66 4c 0f 38 f6
	d7		 adcx	 r10, rdi
  0014e	4d 03 c2	 add	 r8, r10
  00151	4c 89 54 24 18	 mov	 QWORD PTR k$[rsp], r10
  00156	4c 89 41 40	 mov	 QWORD PTR [rcx+64], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 819  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[9], &u_buf[9]);

  0015a	48 8b 41 48	 mov	 rax, QWORD PTR [rcx+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  0015e	c4 62 bb f6 d0	 mulx	 r10, r8, rax
  00163	4c 89 8d 18 01
	00 00		 mov	 QWORD PTR t_hi$9[rbp-256], r9

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  0016a	66 4c 0f 38 f6
	cf		 adcx	 r9, rdi
  00170	4d 03 c1	 add	 r8, r9
  00173	4c 89 4c 24 20	 mov	 QWORD PTR k$[rsp], r9
  00178	4c 89 41 48	 mov	 QWORD PTR [rcx+72], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 820  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[10], &u_buf[10]);

  0017c	48 8b 41 50	 mov	 rax, QWORD PTR [rcx+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  00180	c4 62 bb f6 c8	 mulx	 r9, r8, rax
  00185	4c 89 95 20 01
	00 00		 mov	 QWORD PTR t_hi$10[rbp-256], r10

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  0018c	66 4c 0f 38 f6
	d7		 adcx	 r10, rdi
  00192	4d 03 c2	 add	 r8, r10
  00195	4c 89 54 24 28	 mov	 QWORD PTR k$[rsp], r10
  0019a	4c 89 41 50	 mov	 QWORD PTR [rcx+80], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 821  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[11], &u_buf[11]);

  0019e	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  001a2	c4 62 bb f6 d0	 mulx	 r10, r8, rax
  001a7	4c 89 8d 28 01
	00 00		 mov	 QWORD PTR t_hi$11[rbp-256], r9

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  001ae	66 4c 0f 38 f6
	cf		 adcx	 r9, rdi

; 233  :             return (_mulx_u64(u, v, w_hi));

  001b4	4c 89 95 30 01
	00 00		 mov	 QWORD PTR t_hi$12[rbp-256], r10

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  001bb	4d 03 c1	 add	 r8, r9
  001be	4c 89 4c 24 30	 mov	 QWORD PTR k$[rsp], r9
  001c3	4c 89 41 58	 mov	 QWORD PTR [rcx+88], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 822  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[12], &u_buf[12]);

  001c7	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  001cb	66 4c 0f 38 f6
	d7		 adcx	 r10, rdi

; 233  :             return (_mulx_u64(u, v, w_hi));

  001d1	c4 62 bb f6 c8	 mulx	 r9, r8, rax

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  001d6	4d 03 c2	 add	 r8, r10

; 233  :             return (_mulx_u64(u, v, w_hi));

  001d9	4c 89 8d 38 01
	00 00		 mov	 QWORD PTR t_hi$13[rbp-256], r9

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  001e0	4c 89 41 60	 mov	 QWORD PTR [rcx+96], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 823  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[13], &u_buf[13]);

  001e4	48 8b 41 68	 mov	 rax, QWORD PTR [rcx+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  001e8	66 4c 0f 38 f6
	cf		 adcx	 r9, rdi
  001ee	4c 89 54 24 38	 mov	 QWORD PTR k$[rsp], r10

; 233  :             return (_mulx_u64(u, v, w_hi));

  001f3	c4 62 bb f6 d0	 mulx	 r10, r8, rax

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  001f8	4d 03 c1	 add	 r8, r9
  001fb	4c 89 4c 24 40	 mov	 QWORD PTR k$[rsp], r9
  00200	4c 89 41 68	 mov	 QWORD PTR [rcx+104], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 824  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[14], &u_buf[14]);

  00204	48 8b 41 70	 mov	 rax, QWORD PTR [rcx+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  00208	c4 62 bb f6 c8	 mulx	 r9, r8, rax
  0020d	4c 89 95 40 01
	00 00		 mov	 QWORD PTR t_hi$14[rbp-256], r10

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00214	66 4c 0f 38 f6
	d7		 adcx	 r10, rdi
  0021a	4d 03 c2	 add	 r8, r10

; 233  :             return (_mulx_u64(u, v, w_hi));

  0021d	4c 89 8d 48 01
	00 00		 mov	 QWORD PTR t_hi$15[rbp-256], r9

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00224	4c 89 41 70	 mov	 QWORD PTR [rcx+112], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 825  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[15], &u_buf[15]);

  00228	48 8b 41 78	 mov	 rax, QWORD PTR [rcx+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  0022c	66 4c 0f 38 f6
	cf		 adcx	 r9, rdi
  00232	4c 89 54 24 48	 mov	 QWORD PTR k$[rsp], r10

; 233  :             return (_mulx_u64(u, v, w_hi));

  00237	c4 62 bb f6 d0	 mulx	 r10, r8, rax

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  0023c	4d 03 c1	 add	 r8, r9
  0023f	4c 89 4c 24 50	 mov	 QWORD PTR k$[rsp], r9
  00244	4c 89 41 78	 mov	 QWORD PTR [rcx+120], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 826  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[16], &u_buf[16]);

  00248	48 8b 81 80 00
	00 00		 mov	 rax, QWORD PTR [rcx+128]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  0024f	c4 62 bb f6 c8	 mulx	 r9, r8, rax
  00254	4c 89 95 50 01
	00 00		 mov	 QWORD PTR t_hi$16[rbp-256], r10

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  0025b	66 4c 0f 38 f6
	d7		 adcx	 r10, rdi
  00261	4d 03 c2	 add	 r8, r10

; 233  :             return (_mulx_u64(u, v, w_hi));

  00264	4c 89 8d 58 01
	00 00		 mov	 QWORD PTR t_hi$17[rbp-256], r9

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  0026b	4c 89 81 80 00
	00 00		 mov	 QWORD PTR [rcx+128], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 827  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[17], &u_buf[17]);

  00272	48 8b 81 88 00
	00 00		 mov	 rax, QWORD PTR [rcx+136]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00279	66 4c 0f 38 f6
	cf		 adcx	 r9, rdi
  0027f	4c 89 54 24 58	 mov	 QWORD PTR k$[rsp], r10

; 233  :             return (_mulx_u64(u, v, w_hi));

  00284	c4 62 bb f6 d0	 mulx	 r10, r8, rax

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00289	4d 03 c1	 add	 r8, r9
  0028c	4c 89 4c 24 60	 mov	 QWORD PTR k$[rsp], r9
  00291	4c 89 81 88 00
	00 00		 mov	 QWORD PTR [rcx+136], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 828  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[18], &u_buf[18]);

  00298	48 8b 81 90 00
	00 00		 mov	 rax, QWORD PTR [rcx+144]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  0029f	c4 62 bb f6 c8	 mulx	 r9, r8, rax
  002a4	4c 89 95 60 01
	00 00		 mov	 QWORD PTR t_hi$18[rbp-256], r10

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  002ab	66 4c 0f 38 f6
	d7		 adcx	 r10, rdi
  002b1	4d 03 c2	 add	 r8, r10

; 233  :             return (_mulx_u64(u, v, w_hi));

  002b4	4c 89 8d 68 01
	00 00		 mov	 QWORD PTR t_hi$19[rbp-256], r9

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  002bb	4c 89 81 90 00
	00 00		 mov	 QWORD PTR [rcx+144], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 829  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[19], &u_buf[19]);

  002c2	48 8b 81 98 00
	00 00		 mov	 rax, QWORD PTR [rcx+152]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  002c9	66 4c 0f 38 f6
	cf		 adcx	 r9, rdi
  002cf	4c 89 54 24 68	 mov	 QWORD PTR k$[rsp], r10

; 233  :             return (_mulx_u64(u, v, w_hi));

  002d4	c4 62 bb f6 d0	 mulx	 r10, r8, rax

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  002d9	4d 03 c1	 add	 r8, r9
  002dc	4c 89 4c 24 70	 mov	 QWORD PTR k$[rsp], r9
  002e1	4c 89 81 98 00
	00 00		 mov	 QWORD PTR [rcx+152], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 830  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[20], &u_buf[20]);

  002e8	48 8b 81 a0 00
	00 00		 mov	 rax, QWORD PTR [rcx+160]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  002ef	c4 62 bb f6 c8	 mulx	 r9, r8, rax
  002f4	4c 89 95 70 01
	00 00		 mov	 QWORD PTR t_hi$20[rbp-256], r10

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  002fb	66 4c 0f 38 f6
	d7		 adcx	 r10, rdi
  00301	4d 03 c2	 add	 r8, r10

; 233  :             return (_mulx_u64(u, v, w_hi));

  00304	4c 89 8d 78 01
	00 00		 mov	 QWORD PTR t_hi$21[rbp-256], r9

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  0030b	4c 89 81 a0 00
	00 00		 mov	 QWORD PTR [rcx+160], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 831  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[21], &u_buf[21]);

  00312	48 8b 81 a8 00
	00 00		 mov	 rax, QWORD PTR [rcx+168]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00319	66 4c 0f 38 f6
	cf		 adcx	 r9, rdi
  0031f	4c 89 54 24 78	 mov	 QWORD PTR k$[rsp], r10

; 233  :             return (_mulx_u64(u, v, w_hi));

  00324	c4 62 bb f6 d0	 mulx	 r10, r8, rax

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00329	4d 03 c1	 add	 r8, r9
  0032c	4c 89 4d 80	 mov	 QWORD PTR k$[rbp-256], r9
  00330	4c 89 81 a8 00
	00 00		 mov	 QWORD PTR [rcx+168], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 832  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[22], &u_buf[22]);

  00337	48 8b 81 b0 00
	00 00		 mov	 rax, QWORD PTR [rcx+176]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  0033e	c4 62 bb f6 c8	 mulx	 r9, r8, rax
  00343	4c 89 95 80 01
	00 00		 mov	 QWORD PTR t_hi$22[rbp-256], r10

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  0034a	66 4c 0f 38 f6
	d7		 adcx	 r10, rdi
  00350	4d 03 c2	 add	 r8, r10

; 233  :             return (_mulx_u64(u, v, w_hi));

  00353	4c 89 8d 88 01
	00 00		 mov	 QWORD PTR t_hi$23[rbp-256], r9

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  0035a	4c 89 81 b0 00
	00 00		 mov	 QWORD PTR [rcx+176], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 833  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[23], &u_buf[23]);

  00361	48 8b 81 b8 00
	00 00		 mov	 rax, QWORD PTR [rcx+184]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00368	66 4c 0f 38 f6
	cf		 adcx	 r9, rdi
  0036e	4c 89 4d 90	 mov	 QWORD PTR k$[rbp-256], r9
  00372	4c 89 55 88	 mov	 QWORD PTR k$[rbp-256], r10

; 233  :             return (_mulx_u64(u, v, w_hi));

  00376	c4 62 bb f6 d0	 mulx	 r10, r8, rax

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  0037b	4d 03 c1	 add	 r8, r9

; 233  :             return (_mulx_u64(u, v, w_hi));

  0037e	4c 89 95 90 01
	00 00		 mov	 QWORD PTR t_hi$24[rbp-256], r10

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00385	4c 89 81 b8 00
	00 00		 mov	 QWORD PTR [rcx+184], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 834  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[24], &u_buf[24]);

  0038c	48 8b 81 c0 00
	00 00		 mov	 rax, QWORD PTR [rcx+192]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00393	66 4c 0f 38 f6
	d7		 adcx	 r10, rdi

; 233  :             return (_mulx_u64(u, v, w_hi));

  00399	c4 62 bb f6 c8	 mulx	 r9, r8, rax

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  0039e	4d 03 c2	 add	 r8, r10
  003a1	4c 89 55 98	 mov	 QWORD PTR k$[rbp-256], r10
  003a5	4c 89 81 c0 00
	00 00		 mov	 QWORD PTR [rcx+192], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 835  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[25], &u_buf[25]);

  003ac	48 8b 81 c8 00
	00 00		 mov	 rax, QWORD PTR [rcx+200]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  003b3	c4 62 bb f6 d0	 mulx	 r10, r8, rax
  003b8	4c 89 8d 98 01
	00 00		 mov	 QWORD PTR t_hi$25[rbp-256], r9

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  003bf	66 4c 0f 38 f6
	cf		 adcx	 r9, rdi
  003c5	4d 03 c1	 add	 r8, r9

; 233  :             return (_mulx_u64(u, v, w_hi));

  003c8	4c 89 95 a0 01
	00 00		 mov	 QWORD PTR t_hi$26[rbp-256], r10

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  003cf	4c 89 81 c8 00
	00 00		 mov	 QWORD PTR [rcx+200], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 836  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[26], &u_buf[26]);

  003d6	48 8b 81 d0 00
	00 00		 mov	 rax, QWORD PTR [rcx+208]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  003dd	66 4c 0f 38 f6
	d7		 adcx	 r10, rdi
  003e3	4c 89 4d a0	 mov	 QWORD PTR k$[rbp-256], r9

; 233  :             return (_mulx_u64(u, v, w_hi));

  003e7	c4 62 bb f6 c8	 mulx	 r9, r8, rax

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  003ec	4d 03 c2	 add	 r8, r10
  003ef	4c 89 55 a8	 mov	 QWORD PTR k$[rbp-256], r10
  003f3	4c 89 81 d0 00
	00 00		 mov	 QWORD PTR [rcx+208], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 837  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[27], &u_buf[27]);

  003fa	48 8b 81 d8 00
	00 00		 mov	 rax, QWORD PTR [rcx+216]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  00401	c4 62 bb f6 d0	 mulx	 r10, r8, rax
  00406	4c 89 8d a8 01
	00 00		 mov	 QWORD PTR t_hi$27[rbp-256], r9

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  0040d	66 4c 0f 38 f6
	cf		 adcx	 r9, rdi
  00413	4d 03 c1	 add	 r8, r9

; 233  :             return (_mulx_u64(u, v, w_hi));

  00416	4c 89 95 b0 01
	00 00		 mov	 QWORD PTR t_hi$28[rbp-256], r10

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  0041d	4c 89 81 d8 00
	00 00		 mov	 QWORD PTR [rcx+216], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 838  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[28], &u_buf[28]);

  00424	48 8b 81 e0 00
	00 00		 mov	 rax, QWORD PTR [rcx+224]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  0042b	66 4c 0f 38 f6
	d7		 adcx	 r10, rdi
  00431	4c 89 4d b0	 mov	 QWORD PTR k$[rbp-256], r9

; 233  :             return (_mulx_u64(u, v, w_hi));

  00435	c4 62 bb f6 c8	 mulx	 r9, r8, rax

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  0043a	4d 03 c2	 add	 r8, r10
  0043d	4c 89 55 b8	 mov	 QWORD PTR k$[rbp-256], r10
  00441	4c 89 81 e0 00
	00 00		 mov	 QWORD PTR [rcx+224], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 839  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[29], &u_buf[29]);

  00448	48 8b 81 e8 00
	00 00		 mov	 rax, QWORD PTR [rcx+232]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  0044f	c4 62 bb f6 d0	 mulx	 r10, r8, rax
  00454	4c 89 8d b8 01
	00 00		 mov	 QWORD PTR t_hi$29[rbp-256], r9

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  0045b	66 4c 0f 38 f6
	cf		 adcx	 r9, rdi
  00461	4d 03 c1	 add	 r8, r9

; 233  :             return (_mulx_u64(u, v, w_hi));

  00464	4c 89 95 c0 01
	00 00		 mov	 QWORD PTR t_hi$30[rbp-256], r10

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  0046b	4c 89 81 e8 00
	00 00		 mov	 QWORD PTR [rcx+232], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 840  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[30], &u_buf[30]);

  00472	48 8b 81 f0 00
	00 00		 mov	 rax, QWORD PTR [rcx+240]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00479	66 4c 0f 38 f6
	d7		 adcx	 r10, rdi
  0047f	4c 89 4d c0	 mov	 QWORD PTR k$[rbp-256], r9

; 233  :             return (_mulx_u64(u, v, w_hi));

  00483	c4 62 bb f6 c8	 mulx	 r9, r8, rax

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00488	4d 03 c2	 add	 r8, r10
  0048b	4c 89 55 c8	 mov	 QWORD PTR k$[rbp-256], r10
  0048f	4c 89 81 f0 00
	00 00		 mov	 QWORD PTR [rcx+240], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 841  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[31], &u_buf[31]);

  00496	48 8b 81 f8 00
	00 00		 mov	 rax, QWORD PTR [rcx+248]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  0049d	c4 62 bb f6 d0	 mulx	 r10, r8, rax
  004a2	4c 89 8d c8 01
	00 00		 mov	 QWORD PTR t_hi$31[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

  004a9	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  004ae	66 4c 0f 38 f6
	cf		 adcx	 r9, rdi
  004b4	4d 03 c1	 add	 r8, r9

; 233  :             return (_mulx_u64(u, v, w_hi));

  004b7	4c 89 95 d0 01
	00 00		 mov	 QWORD PTR t_hi$32[rbp-256], r10

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  004be	4c 89 81 f8 00
	00 00		 mov	 QWORD PTR [rcx+248], r8
  004c5	66 4c 0f 38 f6
	d7		 adcx	 r10, rdi
  004cb	4c 89 55 d8	 mov	 QWORD PTR k$[rbp-256], r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 842  :             u_buf += 32;

  004cf	48 81 c1 00 01
	00 00		 add	 rcx, 256		; 00000100H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  004d6	4c 89 4d d0	 mov	 QWORD PTR k$[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

  004da	f0 0f c1 05 00
	00 00 00	 lock xadd DWORD PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 808  :         while (count > 0)

  004e2	48 83 eb 01	 sub	 rbx, 1
  004e6	0f 85 49 fb ff
	ff		 jne	 $LL2@MultiplyAn
$LN3@MultiplyAn:

; 843  :             --count;
; 844  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 845  :             if (sizeof(k) == sizeof(_UINT32_T))
; 846  :                 AddToMULTI32Counter(32);
; 847  :             else
; 848  :                 AddToMULTI64Counter(32);
; 849  : #endif
; 850  :         }
; 851  : 
; 852  :         if (u_count & 0x10)

  004ec	41 f6 c3 10	 test	 r11b, 16
  004f0	0f 84 1f 02 00
	00		 je	 $LN8@MultiplyAn

; 853  :         {
; 854  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

  004f6	48 8b 01	 mov	 rax, QWORD PTR [rcx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  004f9	c4 62 bb f6 c8	 mulx	 r9, r8, rax

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  004fe	4d 03 c2	 add	 r8, r10

; 233  :             return (_mulx_u64(u, v, w_hi));

  00501	4c 89 8d d8 01
	00 00		 mov	 QWORD PTR t_hi$33[rbp-256], r9

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00508	4c 89 01	 mov	 QWORD PTR [rcx], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 855  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

  0050b	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  0050f	66 4c 0f 38 f6
	cf		 adcx	 r9, rdi

; 233  :             return (_mulx_u64(u, v, w_hi));

  00515	c4 62 bb f6 d0	 mulx	 r10, r8, rax

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  0051a	4d 03 c1	 add	 r8, r9
  0051d	4c 89 4d e0	 mov	 QWORD PTR k$[rbp-256], r9
  00521	4c 89 41 08	 mov	 QWORD PTR [rcx+8], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 856  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[2], &u_buf[2]);

  00525	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  00529	c4 62 bb f6 c8	 mulx	 r9, r8, rax
  0052e	4c 89 95 e0 01
	00 00		 mov	 QWORD PTR t_hi$34[rbp-256], r10

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00535	66 4c 0f 38 f6
	d7		 adcx	 r10, rdi
  0053b	4d 03 c2	 add	 r8, r10
  0053e	4c 89 55 e8	 mov	 QWORD PTR k$[rbp-256], r10
  00542	4c 89 41 10	 mov	 QWORD PTR [rcx+16], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 857  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[3], &u_buf[3]);

  00546	48 8b 41 18	 mov	 rax, QWORD PTR [rcx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  0054a	c4 62 bb f6 d0	 mulx	 r10, r8, rax
  0054f	4c 89 8d e8 01
	00 00		 mov	 QWORD PTR t_hi$35[rbp-256], r9

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00556	66 4c 0f 38 f6
	cf		 adcx	 r9, rdi
  0055c	4d 03 c1	 add	 r8, r9
  0055f	4c 89 4d f0	 mov	 QWORD PTR k$[rbp-256], r9
  00563	4c 89 41 18	 mov	 QWORD PTR [rcx+24], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 858  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[4], &u_buf[4]);

  00567	48 8b 41 20	 mov	 rax, QWORD PTR [rcx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  0056b	c4 62 bb f6 c8	 mulx	 r9, r8, rax
  00570	4c 89 95 f0 01
	00 00		 mov	 QWORD PTR t_hi$36[rbp-256], r10

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00577	66 4c 0f 38 f6
	d7		 adcx	 r10, rdi
  0057d	4d 03 c2	 add	 r8, r10
  00580	4c 89 55 f8	 mov	 QWORD PTR k$[rbp-256], r10
  00584	4c 89 41 20	 mov	 QWORD PTR [rcx+32], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 859  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[5], &u_buf[5]);

  00588	48 8b 41 28	 mov	 rax, QWORD PTR [rcx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  0058c	c4 62 bb f6 d0	 mulx	 r10, r8, rax
  00591	4c 89 8d f8 01
	00 00		 mov	 QWORD PTR t_hi$37[rbp-256], r9

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00598	66 4c 0f 38 f6
	cf		 adcx	 r9, rdi
  0059e	4d 03 c1	 add	 r8, r9
  005a1	4c 89 4d 00	 mov	 QWORD PTR k$[rbp-256], r9
  005a5	4c 89 41 28	 mov	 QWORD PTR [rcx+40], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 860  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[6], &u_buf[6]);

  005a9	48 8b 41 30	 mov	 rax, QWORD PTR [rcx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  005ad	c4 62 bb f6 c8	 mulx	 r9, r8, rax
  005b2	4c 89 95 00 02
	00 00		 mov	 QWORD PTR t_hi$38[rbp-256], r10

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  005b9	66 4c 0f 38 f6
	d7		 adcx	 r10, rdi
  005bf	4d 03 c2	 add	 r8, r10
  005c2	4c 89 55 08	 mov	 QWORD PTR k$[rbp-256], r10
  005c6	4c 89 41 30	 mov	 QWORD PTR [rcx+48], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 861  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[7], &u_buf[7]);

  005ca	48 8b 41 38	 mov	 rax, QWORD PTR [rcx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  005ce	c4 62 bb f6 d0	 mulx	 r10, r8, rax
  005d3	4c 89 8d 08 02
	00 00		 mov	 QWORD PTR t_hi$39[rbp-256], r9

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  005da	66 4c 0f 38 f6
	cf		 adcx	 r9, rdi
  005e0	4d 03 c1	 add	 r8, r9
  005e3	4c 89 4d 10	 mov	 QWORD PTR k$[rbp-256], r9
  005e7	4c 89 41 38	 mov	 QWORD PTR [rcx+56], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 862  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[8], &u_buf[8]);

  005eb	48 8b 41 40	 mov	 rax, QWORD PTR [rcx+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  005ef	c4 62 bb f6 c8	 mulx	 r9, r8, rax
  005f4	4c 89 95 10 02
	00 00		 mov	 QWORD PTR t_hi$40[rbp-256], r10

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  005fb	66 4c 0f 38 f6
	d7		 adcx	 r10, rdi
  00601	4d 03 c2	 add	 r8, r10
  00604	4c 89 55 18	 mov	 QWORD PTR k$[rbp-256], r10
  00608	4c 89 41 40	 mov	 QWORD PTR [rcx+64], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 863  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[9], &u_buf[9]);

  0060c	48 8b 41 48	 mov	 rax, QWORD PTR [rcx+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  00610	c4 62 bb f6 d0	 mulx	 r10, r8, rax
  00615	4c 89 8d 18 02
	00 00		 mov	 QWORD PTR t_hi$41[rbp-256], r9

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  0061c	66 4c 0f 38 f6
	cf		 adcx	 r9, rdi
  00622	4d 03 c1	 add	 r8, r9
  00625	4c 89 4d 20	 mov	 QWORD PTR k$[rbp-256], r9
  00629	4c 89 41 48	 mov	 QWORD PTR [rcx+72], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 864  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[10], &u_buf[10]);

  0062d	48 8b 41 50	 mov	 rax, QWORD PTR [rcx+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  00631	c4 62 bb f6 c8	 mulx	 r9, r8, rax
  00636	4c 89 95 20 02
	00 00		 mov	 QWORD PTR t_hi$42[rbp-256], r10

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  0063d	66 4c 0f 38 f6
	d7		 adcx	 r10, rdi
  00643	4d 03 c2	 add	 r8, r10
  00646	4c 89 55 28	 mov	 QWORD PTR k$[rbp-256], r10
  0064a	4c 89 41 50	 mov	 QWORD PTR [rcx+80], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 865  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[11], &u_buf[11]);

  0064e	48 8b 41 58	 mov	 rax, QWORD PTR [rcx+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  00652	c4 62 bb f6 d0	 mulx	 r10, r8, rax
  00657	4c 89 8d 28 02
	00 00		 mov	 QWORD PTR t_hi$43[rbp-256], r9

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  0065e	66 4c 0f 38 f6
	cf		 adcx	 r9, rdi

; 233  :             return (_mulx_u64(u, v, w_hi));

  00664	4c 89 95 30 02
	00 00		 mov	 QWORD PTR t_hi$44[rbp-256], r10

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  0066b	4d 03 c1	 add	 r8, r9
  0066e	4c 89 4d 30	 mov	 QWORD PTR k$[rbp-256], r9
  00672	4c 89 41 58	 mov	 QWORD PTR [rcx+88], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 866  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[12], &u_buf[12]);

  00676	48 8b 41 60	 mov	 rax, QWORD PTR [rcx+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  0067a	66 4c 0f 38 f6
	d7		 adcx	 r10, rdi

; 233  :             return (_mulx_u64(u, v, w_hi));

  00680	c4 62 bb f6 c8	 mulx	 r9, r8, rax

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00685	4d 03 c2	 add	 r8, r10
  00688	4c 89 55 38	 mov	 QWORD PTR k$[rbp-256], r10
  0068c	4c 89 41 60	 mov	 QWORD PTR [rcx+96], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 867  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[13], &u_buf[13]);

  00690	48 8b 41 68	 mov	 rax, QWORD PTR [rcx+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  00694	c4 62 bb f6 d0	 mulx	 r10, r8, rax
  00699	4c 89 8d 38 02
	00 00		 mov	 QWORD PTR t_hi$45[rbp-256], r9

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  006a0	66 4c 0f 38 f6
	cf		 adcx	 r9, rdi
  006a6	4d 03 c1	 add	 r8, r9

; 233  :             return (_mulx_u64(u, v, w_hi));

  006a9	4c 89 95 40 02
	00 00		 mov	 QWORD PTR t_hi$46[rbp-256], r10

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  006b0	4c 89 41 68	 mov	 QWORD PTR [rcx+104], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 868  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[14], &u_buf[14]);

  006b4	48 8b 41 70	 mov	 rax, QWORD PTR [rcx+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  006b8	66 4c 0f 38 f6
	d7		 adcx	 r10, rdi
  006be	4c 89 4d 40	 mov	 QWORD PTR k$[rbp-256], r9

; 233  :             return (_mulx_u64(u, v, w_hi));

  006c2	c4 62 bb f6 c8	 mulx	 r9, r8, rax

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  006c7	4d 03 c2	 add	 r8, r10
  006ca	4c 89 55 48	 mov	 QWORD PTR k$[rbp-256], r10
  006ce	4c 89 41 70	 mov	 QWORD PTR [rcx+112], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 869  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[15], &u_buf[15]);

  006d2	48 8b 41 78	 mov	 rax, QWORD PTR [rcx+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  006d6	c4 62 bb f6 d0	 mulx	 r10, r8, rax
  006db	4c 89 8d 48 02
	00 00		 mov	 QWORD PTR t_hi$47[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

  006e2	b8 10 00 00 00	 mov	 eax, 16
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  006e7	66 4c 0f 38 f6
	cf		 adcx	 r9, rdi
  006ed	4d 03 c1	 add	 r8, r9

; 233  :             return (_mulx_u64(u, v, w_hi));

  006f0	4c 89 95 50 02
	00 00		 mov	 QWORD PTR t_hi$48[rbp-256], r10

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  006f7	4c 89 41 78	 mov	 QWORD PTR [rcx+120], r8
  006fb	66 4c 0f 38 f6
	d7		 adcx	 r10, rdi
  00701	4c 89 55 58	 mov	 QWORD PTR k$[rbp-256], r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 870  :             u_buf += 16;

  00705	48 83 e9 80	 sub	 rcx, -128		; ffffffffffffff80H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00709	4c 89 4d 50	 mov	 QWORD PTR k$[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

  0070d	f0 0f c1 05 00
	00 00 00	 lock xadd DWORD PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A, eax
$LN8@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 879  :         if (u_count & 0x8)

  00715	41 f6 c3 08	 test	 r11b, 8
  00719	0f 84 23 01 00
	00		 je	 $LN11@MultiplyAn

; 880  :         {
; 881  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

  0071f	48 8b 01	 mov	 rax, QWORD PTR [rcx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  00722	c4 62 bb f6 c8	 mulx	 r9, r8, rax

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00727	4d 03 c2	 add	 r8, r10

; 233  :             return (_mulx_u64(u, v, w_hi));

  0072a	4c 89 8d 58 02
	00 00		 mov	 QWORD PTR t_hi$49[rbp-256], r9

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00731	4c 89 01	 mov	 QWORD PTR [rcx], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 882  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

  00734	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00738	66 4c 0f 38 f6
	cf		 adcx	 r9, rdi

; 233  :             return (_mulx_u64(u, v, w_hi));

  0073e	c4 62 bb f6 d0	 mulx	 r10, r8, rax

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00743	4d 03 c1	 add	 r8, r9

; 233  :             return (_mulx_u64(u, v, w_hi));

  00746	4c 89 95 60 02
	00 00		 mov	 QWORD PTR t_hi$50[rbp-256], r10

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  0074d	4c 89 41 08	 mov	 QWORD PTR [rcx+8], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 883  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[2], &u_buf[2]);

  00751	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00755	66 4c 0f 38 f6
	d7		 adcx	 r10, rdi
  0075b	4c 89 4d 60	 mov	 QWORD PTR k$[rbp-256], r9

; 233  :             return (_mulx_u64(u, v, w_hi));

  0075f	c4 62 bb f6 c8	 mulx	 r9, r8, rax

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00764	4d 03 c2	 add	 r8, r10
  00767	4c 89 55 68	 mov	 QWORD PTR k$[rbp-256], r10
  0076b	4c 89 41 10	 mov	 QWORD PTR [rcx+16], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 884  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[3], &u_buf[3]);

  0076f	48 8b 41 18	 mov	 rax, QWORD PTR [rcx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  00773	c4 62 bb f6 d0	 mulx	 r10, r8, rax
  00778	4c 89 8d 68 02
	00 00		 mov	 QWORD PTR t_hi$51[rbp-256], r9

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  0077f	66 4c 0f 38 f6
	cf		 adcx	 r9, rdi
  00785	4d 03 c1	 add	 r8, r9

; 233  :             return (_mulx_u64(u, v, w_hi));

  00788	4c 89 95 70 02
	00 00		 mov	 QWORD PTR t_hi$52[rbp-256], r10

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  0078f	4c 89 41 18	 mov	 QWORD PTR [rcx+24], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 885  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[4], &u_buf[4]);

  00793	48 8b 41 20	 mov	 rax, QWORD PTR [rcx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00797	66 4c 0f 38 f6
	d7		 adcx	 r10, rdi
  0079d	4c 89 4d 70	 mov	 QWORD PTR k$[rbp-256], r9

; 233  :             return (_mulx_u64(u, v, w_hi));

  007a1	c4 62 bb f6 c8	 mulx	 r9, r8, rax

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  007a6	4d 03 c2	 add	 r8, r10
  007a9	4c 89 55 78	 mov	 QWORD PTR k$[rbp-256], r10
  007ad	4c 89 41 20	 mov	 QWORD PTR [rcx+32], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 886  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[5], &u_buf[5]);

  007b1	48 8b 41 28	 mov	 rax, QWORD PTR [rcx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  007b5	c4 62 bb f6 d0	 mulx	 r10, r8, rax
  007ba	4c 89 8d 78 02
	00 00		 mov	 QWORD PTR t_hi$53[rbp-256], r9

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  007c1	66 4c 0f 38 f6
	cf		 adcx	 r9, rdi
  007c7	4d 03 c1	 add	 r8, r9

; 233  :             return (_mulx_u64(u, v, w_hi));

  007ca	4c 89 95 80 02
	00 00		 mov	 QWORD PTR t_hi$54[rbp-256], r10

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  007d1	4c 89 41 28	 mov	 QWORD PTR [rcx+40], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 887  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[6], &u_buf[6]);

  007d5	48 8b 41 30	 mov	 rax, QWORD PTR [rcx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  007d9	66 4c 0f 38 f6
	d7		 adcx	 r10, rdi
  007df	4c 89 8d 80 00
	00 00		 mov	 QWORD PTR k$[rbp-256], r9

; 233  :             return (_mulx_u64(u, v, w_hi));

  007e6	c4 62 bb f6 c8	 mulx	 r9, r8, rax

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  007eb	4d 03 c2	 add	 r8, r10
  007ee	4c 89 95 88 00
	00 00		 mov	 QWORD PTR k$[rbp-256], r10
  007f5	4c 89 41 30	 mov	 QWORD PTR [rcx+48], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 888  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[7], &u_buf[7]);

  007f9	48 8b 41 38	 mov	 rax, QWORD PTR [rcx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  007fd	c4 62 bb f6 d0	 mulx	 r10, r8, rax
  00802	4c 89 8d 88 02
	00 00		 mov	 QWORD PTR t_hi$55[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

  00809	b8 08 00 00 00	 mov	 eax, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  0080e	66 4c 0f 38 f6
	cf		 adcx	 r9, rdi
  00814	4d 03 c1	 add	 r8, r9

; 233  :             return (_mulx_u64(u, v, w_hi));

  00817	4c 89 95 90 02
	00 00		 mov	 QWORD PTR t_hi$56[rbp-256], r10

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  0081e	4c 89 41 38	 mov	 QWORD PTR [rcx+56], r8
  00822	66 4c 0f 38 f6
	d7		 adcx	 r10, rdi
  00828	4c 89 95 98 00
	00 00		 mov	 QWORD PTR k$[rbp-256], r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 889  :             u_buf += 8;

  0082f	48 83 c1 40	 add	 rcx, 64			; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00833	4c 89 8d 90 00
	00 00		 mov	 QWORD PTR k$[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

  0083a	f0 0f c1 05 00
	00 00 00	 lock xadd DWORD PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A, eax
$LN11@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 898  :         if (u_count & 0x4)

  00842	41 f6 c3 04	 test	 r11b, 4
  00846	0f 84 9f 00 00
	00		 je	 $LN14@MultiplyAn

; 899  :         {
; 900  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

  0084c	48 8b 01	 mov	 rax, QWORD PTR [rcx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  0084f	c4 62 bb f6 c8	 mulx	 r9, r8, rax

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00854	4d 03 c2	 add	 r8, r10

; 233  :             return (_mulx_u64(u, v, w_hi));

  00857	4c 89 8d 98 02
	00 00		 mov	 QWORD PTR t_hi$57[rbp-256], r9

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  0085e	4c 89 01	 mov	 QWORD PTR [rcx], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 901  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

  00861	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00865	66 4c 0f 38 f6
	cf		 adcx	 r9, rdi

; 233  :             return (_mulx_u64(u, v, w_hi));

  0086b	c4 62 bb f6 d0	 mulx	 r10, r8, rax

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00870	4d 03 c1	 add	 r8, r9

; 233  :             return (_mulx_u64(u, v, w_hi));

  00873	4c 89 95 a0 02
	00 00		 mov	 QWORD PTR t_hi$58[rbp-256], r10

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  0087a	4c 89 41 08	 mov	 QWORD PTR [rcx+8], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 902  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[2], &u_buf[2]);

  0087e	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00882	66 4c 0f 38 f6
	d7		 adcx	 r10, rdi
  00888	4c 89 8d a0 00
	00 00		 mov	 QWORD PTR k$[rbp-256], r9

; 233  :             return (_mulx_u64(u, v, w_hi));

  0088f	c4 62 bb f6 c8	 mulx	 r9, r8, rax

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00894	4d 03 c2	 add	 r8, r10
  00897	4c 89 95 a8 00
	00 00		 mov	 QWORD PTR k$[rbp-256], r10
  0089e	4c 89 41 10	 mov	 QWORD PTR [rcx+16], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 903  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[3], &u_buf[3]);

  008a2	48 8b 41 18	 mov	 rax, QWORD PTR [rcx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  008a6	c4 62 bb f6 d0	 mulx	 r10, r8, rax
  008ab	4c 89 8d a8 02
	00 00		 mov	 QWORD PTR t_hi$59[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

  008b2	b8 04 00 00 00	 mov	 eax, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  008b7	66 4c 0f 38 f6
	cf		 adcx	 r9, rdi
  008bd	4d 03 c1	 add	 r8, r9

; 233  :             return (_mulx_u64(u, v, w_hi));

  008c0	4c 89 95 b0 02
	00 00		 mov	 QWORD PTR t_hi$60[rbp-256], r10

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  008c7	4c 89 41 18	 mov	 QWORD PTR [rcx+24], r8
  008cb	66 4c 0f 38 f6
	d7		 adcx	 r10, rdi
  008d1	4c 89 95 b8 00
	00 00		 mov	 QWORD PTR k$[rbp-256], r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 904  :             u_buf += 4;

  008d8	48 83 c1 20	 add	 rcx, 32			; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  008dc	4c 89 8d b0 00
	00 00		 mov	 QWORD PTR k$[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

  008e3	f0 0f c1 05 00
	00 00 00	 lock xadd DWORD PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A, eax
$LN14@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 913  :         if (u_count & 0x2)

  008eb	41 f6 c3 02	 test	 r11b, 2
  008ef	74 57		 je	 SHORT $LN17@MultiplyAn

; 914  :         {
; 915  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

  008f1	48 8b 01	 mov	 rax, QWORD PTR [rcx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  008f4	c4 62 bb f6 c8	 mulx	 r9, r8, rax

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  008f9	4d 03 c2	 add	 r8, r10

; 233  :             return (_mulx_u64(u, v, w_hi));

  008fc	4c 89 8d b8 02
	00 00		 mov	 QWORD PTR t_hi$61[rbp-256], r9

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00903	4c 89 01	 mov	 QWORD PTR [rcx], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 916  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[1], &u_buf[1]);

  00906	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  0090a	c4 62 bb f6 d0	 mulx	 r10, r8, rax

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  0090f	66 4c 0f 38 f6
	cf		 adcx	 r9, rdi
  00915	4d 03 c1	 add	 r8, r9

; 233  :             return (_mulx_u64(u, v, w_hi));

  00918	4c 89 95 c0 02
	00 00		 mov	 QWORD PTR t_hi$62[rbp-256], r10

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  0091f	4c 89 41 08	 mov	 QWORD PTR [rcx+8], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

  00923	b8 02 00 00 00	 mov	 eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00928	66 4c 0f 38 f6
	d7		 adcx	 r10, rdi
  0092e	4c 89 95 c8 00
	00 00		 mov	 QWORD PTR k$[rbp-256], r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 917  :             u_buf += 2;

  00935	48 83 c1 10	 add	 rcx, 16
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00939	4c 89 8d c0 00
	00 00		 mov	 QWORD PTR k$[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

  00940	f0 0f c1 05 00
	00 00 00	 lock xadd DWORD PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A, eax
$LN17@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 926  :         if (u_count & 0x1)

  00948	41 f6 c3 01	 test	 r11b, 1
  0094c	74 30		 je	 SHORT $LN20@MultiplyAn

; 927  :         {
; 928  :             k = MultiplyAndAdd1Word_using_ADCX_MULX(k, u_buf[0], &u_buf[0]);

  0094e	48 8b 01	 mov	 rax, QWORD PTR [rcx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  00951	c4 62 bb f6 c8	 mulx	 r9, r8, rax

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00956	4d 03 c2	 add	 r8, r10

; 233  :             return (_mulx_u64(u, v, w_hi));

  00959	4c 89 8d c8 02
	00 00		 mov	 QWORD PTR t_hi$63[rbp-256], r9

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00960	4d 8b d1	 mov	 r10, r9
  00963	4c 89 01	 mov	 QWORD PTR [rcx], r8
  00966	66 4c 0f 38 f6
	d7		 adcx	 r10, rdi
  0096c	4c 89 95 d0 00
	00 00		 mov	 QWORD PTR k$[rbp-256], r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 929  :             u_buf += 1;

  00973	48 83 c1 08	 add	 rcx, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 322  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI64);

  00977	f0 ff 05 00 00
	00 00		 lock inc DWORD PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A
$LN20@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 938  :         if (k > 0)

  0097e	4d 85 d2	 test	 r10, r10
  00981	74 12		 je	 SHORT $LN554@MultiplyAn

; 939  :         {
; 940  :             u_buf[0] = k;

  00983	4c 89 11	 mov	 QWORD PTR [rcx], r10

; 941  :             u_buf += 1;

  00986	48 8d 41 08	 lea	 rax, QWORD PTR [rcx+8]

; 945  :     }

  0098a	48 81 c4 d0 03
	00 00		 add	 rsp, 976		; 000003d0H
  00991	5f		 pop	 rdi
  00992	5b		 pop	 rbx
  00993	5d		 pop	 rbp
  00994	c3		 ret	 0
$LN554@MultiplyAn:

; 942  :         }
; 943  : 
; 944  :         return (u_buf);

  00995	48 8b c1	 mov	 rax, rcx

; 945  :     }

  00998	48 81 c4 d0 03
	00 00		 add	 rsp, 976		; 000003d0H
  0099f	5f		 pop	 rdi
  009a0	5b		 pop	 rbx
  009a1	5d		 pop	 rbp
  009a2	c3		 ret	 0
?MultiplyAndAdd_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAPEA_KPEA_K_K1@Z ENDP ; Palmtree::Math::Core::Internal::MultiplyAndAdd_using_ADCX_MULX
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?MultiplyAndAdd_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAPEA_KPEA_K_K1@Z
_TEXT	SEGMENT
k$ = 0
k$ = 8
k$ = 16
k$ = 24
k$ = 32
k$ = 40
k$ = 48
k$ = 56
k$ = 64
k$ = 72
k$ = 80
k$ = 88
k$ = 96
k$ = 104
k$ = 112
k$ = 120
k$ = 128
k$ = 136
k$ = 144
k$ = 152
k$ = 160
k$ = 168
k$ = 176
k$ = 184
k$ = 192
k$ = 200
k$ = 208
k$ = 216
k$ = 224
k$ = 232
k$ = 240
k$ = 248
k$ = 256
k$ = 264
k$ = 272
k$ = 280
k$ = 288
k$ = 296
k$ = 304
k$ = 312
k$ = 320
k$ = 328
k$ = 336
k$ = 344
k$ = 352
k$ = 360
k$ = 368
k$ = 376
k$ = 384
k$ = 392
k$ = 400
k$ = 408
k$ = 416
k$ = 424
k$ = 432
k$ = 440
k$ = 448
k$ = 456
k$ = 464
t_hi$1 = 472
t_hi$2 = 480
t_hi$3 = 488
t_hi$4 = 496
t_hi$5 = 504
t_hi$6 = 512
t_hi$7 = 520
t_hi$8 = 528
t_hi$9 = 536
t_hi$10 = 544
t_hi$11 = 552
t_hi$12 = 560
t_hi$13 = 568
t_hi$14 = 576
t_hi$15 = 584
t_hi$16 = 592
t_hi$17 = 600
t_hi$18 = 608
t_hi$19 = 616
t_hi$20 = 624
t_hi$21 = 632
t_hi$22 = 640
t_hi$23 = 648
t_hi$24 = 656
t_hi$25 = 664
t_hi$26 = 672
t_hi$27 = 680
t_hi$28 = 688
t_hi$29 = 696
t_hi$30 = 704
t_hi$31 = 712
t_hi$32 = 720
t_hi$33 = 728
t_hi$34 = 736
t_hi$35 = 744
t_hi$36 = 752
t_hi$37 = 760
t_hi$38 = 768
t_hi$39 = 776
t_hi$40 = 784
t_hi$41 = 792
t_hi$42 = 800
t_hi$43 = 808
t_hi$44 = 816
t_hi$45 = 824
t_hi$46 = 832
t_hi$47 = 840
t_hi$48 = 848
t_hi$49 = 856
t_hi$50 = 864
t_hi$51 = 872
t_hi$52 = 880
t_hi$53 = 888
t_hi$54 = 896
t_hi$55 = 904
t_hi$56 = 912
t_hi$57 = 920
t_hi$58 = 928
t_hi$59 = 936
t_hi$60 = 944
t_hi$61 = 952
t_hi$62 = 960
t_hi$63 = 968
k$ = 1008
u_buf$ = 1008
k$ = 1016
u_count$ = 1016
k$ = 1024
x$ = 1024
k$ = 1032
?MultiplyAndAdd_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAPEA_KPEA_K_K1@Z PROC ; Palmtree::Math::Core::Internal::MultiplyAndAdd_using_ADC_MUL, COMDAT

; 662  :     {

  00000	40 55		 push	 rbp
  00002	53		 push	 rbx
  00003	48 8d ac 24 28
	fd ff ff	 lea	 rbp, QWORD PTR [rsp-728]
  0000b	48 81 ec d8 03
	00 00		 sub	 rsp, 984		; 000003d8H

; 663  :         __UNIT_TYPE k = x;
; 664  :         __UNIT_TYPE count = u_count >> 5;

  00012	4c 8b da	 mov	 r11, rdx
  00015	4d 8b c8	 mov	 r9, r8
  00018	49 c1 eb 05	 shr	 r11, 5
  0001c	4c 8b d2	 mov	 r10, rdx

; 665  :         while (count > 0)

  0001f	48 bb 00 00 e8
	89 04 23 c7 8a	 mov	 rbx, -8446744073709551616 ; 8ac7230489e80000H
  00029	4d 85 db	 test	 r11, r11
  0002c	0f 84 a5 04 00
	00		 je	 $LN3@MultiplyAn
  00032	0f 1f 40 00 66
	66 0f 1f 84 00
	00 00 00 00	 npad	 14
$LL2@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 221  :             return (_umul128(u, v, w_hi));

  00040	48 8b c3	 mov	 rax, rbx
  00043	48 f7 21	 mul	 QWORD PTR [rcx]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00046	49 03 c1	 add	 rax, r9

; 221  :             return (_umul128(u, v, w_hi));

  00049	48 89 95 d8 00
	00 00		 mov	 QWORD PTR t_hi$1[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00050	48 89 01	 mov	 QWORD PTR [rcx], rax

; 221  :             return (_umul128(u, v, w_hi));

  00053	4c 8b c2	 mov	 r8, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00056	49 83 d0 00	 adc	 r8, 0

; 221  :             return (_umul128(u, v, w_hi));

  0005a	48 8b c3	 mov	 rax, rbx
  0005d	48 f7 61 08	 mul	 QWORD PTR [rcx+8]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00061	4c 89 85 f0 02
	00 00		 mov	 QWORD PTR k$[rbp-256], r8
  00068	49 03 c0	 add	 rax, r8

; 221  :             return (_umul128(u, v, w_hi));

  0006b	48 89 95 e0 00
	00 00		 mov	 QWORD PTR t_hi$2[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00072	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 221  :             return (_umul128(u, v, w_hi));

  00076	4c 8b ca	 mov	 r9, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00079	49 83 d1 00	 adc	 r9, 0

; 221  :             return (_umul128(u, v, w_hi));

  0007d	48 8b c3	 mov	 rax, rbx
  00080	48 f7 61 10	 mul	 QWORD PTR [rcx+16]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00084	4c 89 8d f8 02
	00 00		 mov	 QWORD PTR k$[rbp-256], r9
  0008b	49 03 c1	 add	 rax, r9

; 221  :             return (_umul128(u, v, w_hi));

  0008e	48 89 95 e8 00
	00 00		 mov	 QWORD PTR t_hi$3[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00095	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 221  :             return (_umul128(u, v, w_hi));

  00099	4c 8b c2	 mov	 r8, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  0009c	49 83 d0 00	 adc	 r8, 0

; 221  :             return (_umul128(u, v, w_hi));

  000a0	48 8b c3	 mov	 rax, rbx
  000a3	48 f7 61 18	 mul	 QWORD PTR [rcx+24]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  000a7	4c 89 85 00 03
	00 00		 mov	 QWORD PTR k$[rbp-256], r8
  000ae	49 03 c0	 add	 rax, r8

; 221  :             return (_umul128(u, v, w_hi));

  000b1	48 89 95 f0 00
	00 00		 mov	 QWORD PTR t_hi$4[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  000b8	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 221  :             return (_umul128(u, v, w_hi));

  000bc	4c 8b ca	 mov	 r9, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  000bf	49 83 d1 00	 adc	 r9, 0

; 221  :             return (_umul128(u, v, w_hi));

  000c3	48 8b c3	 mov	 rax, rbx
  000c6	48 f7 61 20	 mul	 QWORD PTR [rcx+32]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  000ca	4c 89 8d 08 03
	00 00		 mov	 QWORD PTR k$[rbp-256], r9
  000d1	49 03 c1	 add	 rax, r9

; 221  :             return (_umul128(u, v, w_hi));

  000d4	48 89 95 f8 00
	00 00		 mov	 QWORD PTR t_hi$5[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  000db	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 221  :             return (_umul128(u, v, w_hi));

  000df	4c 8b c2	 mov	 r8, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  000e2	49 83 d0 00	 adc	 r8, 0

; 221  :             return (_umul128(u, v, w_hi));

  000e6	48 8b c3	 mov	 rax, rbx
  000e9	48 f7 61 28	 mul	 QWORD PTR [rcx+40]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  000ed	4c 89 04 24	 mov	 QWORD PTR k$[rsp], r8
  000f1	49 03 c0	 add	 rax, r8

; 221  :             return (_umul128(u, v, w_hi));

  000f4	48 89 95 00 01
	00 00		 mov	 QWORD PTR t_hi$6[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  000fb	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax

; 221  :             return (_umul128(u, v, w_hi));

  000ff	4c 8b ca	 mov	 r9, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00102	49 83 d1 00	 adc	 r9, 0

; 221  :             return (_umul128(u, v, w_hi));

  00106	48 8b c3	 mov	 rax, rbx
  00109	48 f7 61 30	 mul	 QWORD PTR [rcx+48]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  0010d	4c 89 4c 24 08	 mov	 QWORD PTR k$[rsp], r9
  00112	49 03 c1	 add	 rax, r9

; 221  :             return (_umul128(u, v, w_hi));

  00115	48 89 95 08 01
	00 00		 mov	 QWORD PTR t_hi$7[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  0011c	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 221  :             return (_umul128(u, v, w_hi));

  00120	4c 8b c2	 mov	 r8, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00123	49 83 d0 00	 adc	 r8, 0

; 221  :             return (_umul128(u, v, w_hi));

  00127	48 8b c3	 mov	 rax, rbx
  0012a	48 f7 61 38	 mul	 QWORD PTR [rcx+56]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  0012e	4c 89 44 24 10	 mov	 QWORD PTR k$[rsp], r8
  00133	49 03 c0	 add	 rax, r8

; 221  :             return (_umul128(u, v, w_hi));

  00136	48 89 95 10 01
	00 00		 mov	 QWORD PTR t_hi$8[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  0013d	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax

; 221  :             return (_umul128(u, v, w_hi));

  00141	4c 8b ca	 mov	 r9, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00144	49 83 d1 00	 adc	 r9, 0

; 221  :             return (_umul128(u, v, w_hi));

  00148	48 8b c3	 mov	 rax, rbx
  0014b	48 f7 61 40	 mul	 QWORD PTR [rcx+64]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  0014f	4c 89 4c 24 18	 mov	 QWORD PTR k$[rsp], r9
  00154	49 03 c1	 add	 rax, r9

; 221  :             return (_umul128(u, v, w_hi));

  00157	48 89 95 18 01
	00 00		 mov	 QWORD PTR t_hi$9[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  0015e	48 89 41 40	 mov	 QWORD PTR [rcx+64], rax

; 221  :             return (_umul128(u, v, w_hi));

  00162	4c 8b c2	 mov	 r8, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00165	49 83 d0 00	 adc	 r8, 0

; 221  :             return (_umul128(u, v, w_hi));

  00169	48 8b c3	 mov	 rax, rbx
  0016c	48 f7 61 48	 mul	 QWORD PTR [rcx+72]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00170	4c 89 44 24 20	 mov	 QWORD PTR k$[rsp], r8
  00175	49 03 c0	 add	 rax, r8

; 221  :             return (_umul128(u, v, w_hi));

  00178	48 89 95 20 01
	00 00		 mov	 QWORD PTR t_hi$10[rbp-256], rdx
  0017f	4c 8b ca	 mov	 r9, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00182	48 89 41 48	 mov	 QWORD PTR [rcx+72], rax
  00186	49 83 d1 00	 adc	 r9, 0

; 221  :             return (_umul128(u, v, w_hi));

  0018a	48 8b c3	 mov	 rax, rbx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  0018d	4c 89 4c 24 28	 mov	 QWORD PTR k$[rsp], r9

; 221  :             return (_umul128(u, v, w_hi));

  00192	48 f7 61 50	 mul	 QWORD PTR [rcx+80]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00196	49 03 c1	 add	 rax, r9

; 221  :             return (_umul128(u, v, w_hi));

  00199	48 89 95 28 01
	00 00		 mov	 QWORD PTR t_hi$11[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  001a0	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax

; 221  :             return (_umul128(u, v, w_hi));

  001a4	4c 8b c2	 mov	 r8, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  001a7	49 83 d0 00	 adc	 r8, 0

; 221  :             return (_umul128(u, v, w_hi));

  001ab	48 8b c3	 mov	 rax, rbx
  001ae	48 f7 61 58	 mul	 QWORD PTR [rcx+88]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  001b2	4c 89 44 24 30	 mov	 QWORD PTR k$[rsp], r8
  001b7	49 03 c0	 add	 rax, r8

; 221  :             return (_umul128(u, v, w_hi));

  001ba	48 89 95 30 01
	00 00		 mov	 QWORD PTR t_hi$12[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  001c1	48 89 41 58	 mov	 QWORD PTR [rcx+88], rax

; 221  :             return (_umul128(u, v, w_hi));

  001c5	4c 8b ca	 mov	 r9, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  001c8	49 83 d1 00	 adc	 r9, 0

; 221  :             return (_umul128(u, v, w_hi));

  001cc	48 8b c3	 mov	 rax, rbx
  001cf	48 f7 61 60	 mul	 QWORD PTR [rcx+96]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  001d3	4c 89 4c 24 38	 mov	 QWORD PTR k$[rsp], r9
  001d8	49 03 c1	 add	 rax, r9

; 221  :             return (_umul128(u, v, w_hi));

  001db	48 89 95 38 01
	00 00		 mov	 QWORD PTR t_hi$13[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  001e2	48 89 41 60	 mov	 QWORD PTR [rcx+96], rax

; 221  :             return (_umul128(u, v, w_hi));

  001e6	4c 8b c2	 mov	 r8, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  001e9	49 83 d0 00	 adc	 r8, 0

; 221  :             return (_umul128(u, v, w_hi));

  001ed	48 8b c3	 mov	 rax, rbx
  001f0	48 f7 61 68	 mul	 QWORD PTR [rcx+104]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  001f4	4c 89 44 24 40	 mov	 QWORD PTR k$[rsp], r8
  001f9	49 03 c0	 add	 rax, r8

; 221  :             return (_umul128(u, v, w_hi));

  001fc	48 89 95 40 01
	00 00		 mov	 QWORD PTR t_hi$14[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00203	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax

; 221  :             return (_umul128(u, v, w_hi));

  00207	4c 8b ca	 mov	 r9, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  0020a	49 83 d1 00	 adc	 r9, 0

; 221  :             return (_umul128(u, v, w_hi));

  0020e	48 8b c3	 mov	 rax, rbx
  00211	48 f7 61 70	 mul	 QWORD PTR [rcx+112]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00215	4c 89 4c 24 48	 mov	 QWORD PTR k$[rsp], r9
  0021a	49 03 c1	 add	 rax, r9

; 221  :             return (_umul128(u, v, w_hi));

  0021d	48 89 95 48 01
	00 00		 mov	 QWORD PTR t_hi$15[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00224	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax

; 221  :             return (_umul128(u, v, w_hi));

  00228	4c 8b c2	 mov	 r8, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  0022b	49 83 d0 00	 adc	 r8, 0

; 221  :             return (_umul128(u, v, w_hi));

  0022f	48 8b c3	 mov	 rax, rbx
  00232	48 f7 61 78	 mul	 QWORD PTR [rcx+120]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00236	4c 89 44 24 50	 mov	 QWORD PTR k$[rsp], r8
  0023b	49 03 c0	 add	 rax, r8

; 221  :             return (_umul128(u, v, w_hi));

  0023e	48 89 95 50 01
	00 00		 mov	 QWORD PTR t_hi$16[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00245	48 89 41 78	 mov	 QWORD PTR [rcx+120], rax

; 221  :             return (_umul128(u, v, w_hi));

  00249	4c 8b ca	 mov	 r9, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  0024c	49 83 d1 00	 adc	 r9, 0

; 221  :             return (_umul128(u, v, w_hi));

  00250	48 8b c3	 mov	 rax, rbx
  00253	48 f7 a1 80 00
	00 00		 mul	 QWORD PTR [rcx+128]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  0025a	4c 89 4c 24 58	 mov	 QWORD PTR k$[rsp], r9
  0025f	49 03 c1	 add	 rax, r9

; 221  :             return (_umul128(u, v, w_hi));

  00262	48 89 95 58 01
	00 00		 mov	 QWORD PTR t_hi$17[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00269	48 89 81 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rax

; 221  :             return (_umul128(u, v, w_hi));

  00270	4c 8b c2	 mov	 r8, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00273	49 83 d0 00	 adc	 r8, 0

; 221  :             return (_umul128(u, v, w_hi));

  00277	48 8b c3	 mov	 rax, rbx
  0027a	48 f7 a1 88 00
	00 00		 mul	 QWORD PTR [rcx+136]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00281	4c 89 44 24 60	 mov	 QWORD PTR k$[rsp], r8
  00286	49 03 c0	 add	 rax, r8

; 221  :             return (_umul128(u, v, w_hi));

  00289	48 89 95 60 01
	00 00		 mov	 QWORD PTR t_hi$18[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00290	48 89 81 88 00
	00 00		 mov	 QWORD PTR [rcx+136], rax

; 221  :             return (_umul128(u, v, w_hi));

  00297	4c 8b ca	 mov	 r9, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  0029a	49 83 d1 00	 adc	 r9, 0

; 221  :             return (_umul128(u, v, w_hi));

  0029e	48 8b c3	 mov	 rax, rbx
  002a1	48 f7 a1 90 00
	00 00		 mul	 QWORD PTR [rcx+144]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  002a8	4c 89 4c 24 68	 mov	 QWORD PTR k$[rsp], r9
  002ad	49 03 c1	 add	 rax, r9

; 221  :             return (_umul128(u, v, w_hi));

  002b0	48 89 95 68 01
	00 00		 mov	 QWORD PTR t_hi$19[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  002b7	48 89 81 90 00
	00 00		 mov	 QWORD PTR [rcx+144], rax

; 221  :             return (_umul128(u, v, w_hi));

  002be	4c 8b c2	 mov	 r8, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  002c1	49 83 d0 00	 adc	 r8, 0

; 221  :             return (_umul128(u, v, w_hi));

  002c5	48 8b c3	 mov	 rax, rbx
  002c8	48 f7 a1 98 00
	00 00		 mul	 QWORD PTR [rcx+152]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  002cf	4c 89 44 24 70	 mov	 QWORD PTR k$[rsp], r8
  002d4	49 03 c0	 add	 rax, r8

; 221  :             return (_umul128(u, v, w_hi));

  002d7	48 89 95 70 01
	00 00		 mov	 QWORD PTR t_hi$20[rbp-256], rdx
  002de	4c 8b ca	 mov	 r9, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  002e1	48 89 81 98 00
	00 00		 mov	 QWORD PTR [rcx+152], rax
  002e8	49 83 d1 00	 adc	 r9, 0

; 221  :             return (_umul128(u, v, w_hi));

  002ec	48 8b c3	 mov	 rax, rbx
  002ef	48 f7 a1 a0 00
	00 00		 mul	 QWORD PTR [rcx+160]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  002f6	4c 89 4c 24 78	 mov	 QWORD PTR k$[rsp], r9
  002fb	49 03 c1	 add	 rax, r9

; 221  :             return (_umul128(u, v, w_hi));

  002fe	48 89 95 78 01
	00 00		 mov	 QWORD PTR t_hi$21[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00305	48 89 81 a0 00
	00 00		 mov	 QWORD PTR [rcx+160], rax

; 221  :             return (_umul128(u, v, w_hi));

  0030c	4c 8b c2	 mov	 r8, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  0030f	49 83 d0 00	 adc	 r8, 0

; 221  :             return (_umul128(u, v, w_hi));

  00313	48 8b c3	 mov	 rax, rbx
  00316	48 f7 a1 a8 00
	00 00		 mul	 QWORD PTR [rcx+168]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  0031d	4c 89 45 80	 mov	 QWORD PTR k$[rbp-256], r8
  00321	49 03 c0	 add	 rax, r8

; 221  :             return (_umul128(u, v, w_hi));

  00324	48 89 95 80 01
	00 00		 mov	 QWORD PTR t_hi$22[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  0032b	48 89 81 a8 00
	00 00		 mov	 QWORD PTR [rcx+168], rax

; 221  :             return (_umul128(u, v, w_hi));

  00332	4c 8b ca	 mov	 r9, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00335	49 83 d1 00	 adc	 r9, 0

; 221  :             return (_umul128(u, v, w_hi));

  00339	48 8b c3	 mov	 rax, rbx
  0033c	48 f7 a1 b0 00
	00 00		 mul	 QWORD PTR [rcx+176]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00343	4c 89 4d 88	 mov	 QWORD PTR k$[rbp-256], r9
  00347	49 03 c1	 add	 rax, r9

; 221  :             return (_umul128(u, v, w_hi));

  0034a	48 89 95 88 01
	00 00		 mov	 QWORD PTR t_hi$23[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00351	48 89 81 b0 00
	00 00		 mov	 QWORD PTR [rcx+176], rax

; 221  :             return (_umul128(u, v, w_hi));

  00358	4c 8b c2	 mov	 r8, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  0035b	49 83 d0 00	 adc	 r8, 0

; 221  :             return (_umul128(u, v, w_hi));

  0035f	48 8b c3	 mov	 rax, rbx
  00362	48 f7 a1 b8 00
	00 00		 mul	 QWORD PTR [rcx+184]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00369	4c 89 45 90	 mov	 QWORD PTR k$[rbp-256], r8
  0036d	49 03 c0	 add	 rax, r8

; 221  :             return (_umul128(u, v, w_hi));

  00370	48 89 95 90 01
	00 00		 mov	 QWORD PTR t_hi$24[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00377	48 89 81 b8 00
	00 00		 mov	 QWORD PTR [rcx+184], rax

; 221  :             return (_umul128(u, v, w_hi));

  0037e	4c 8b ca	 mov	 r9, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00381	49 83 d1 00	 adc	 r9, 0

; 221  :             return (_umul128(u, v, w_hi));

  00385	48 8b c3	 mov	 rax, rbx
  00388	48 f7 a1 c0 00
	00 00		 mul	 QWORD PTR [rcx+192]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  0038f	4c 89 4d 98	 mov	 QWORD PTR k$[rbp-256], r9
  00393	49 03 c1	 add	 rax, r9

; 221  :             return (_umul128(u, v, w_hi));

  00396	48 89 95 98 01
	00 00		 mov	 QWORD PTR t_hi$25[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  0039d	48 89 81 c0 00
	00 00		 mov	 QWORD PTR [rcx+192], rax

; 221  :             return (_umul128(u, v, w_hi));

  003a4	4c 8b c2	 mov	 r8, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  003a7	49 83 d0 00	 adc	 r8, 0

; 221  :             return (_umul128(u, v, w_hi));

  003ab	48 8b c3	 mov	 rax, rbx
  003ae	48 f7 a1 c8 00
	00 00		 mul	 QWORD PTR [rcx+200]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  003b5	4c 89 45 a0	 mov	 QWORD PTR k$[rbp-256], r8
  003b9	49 03 c0	 add	 rax, r8

; 221  :             return (_umul128(u, v, w_hi));

  003bc	48 89 95 a0 01
	00 00		 mov	 QWORD PTR t_hi$26[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  003c3	48 89 81 c8 00
	00 00		 mov	 QWORD PTR [rcx+200], rax

; 221  :             return (_umul128(u, v, w_hi));

  003ca	4c 8b ca	 mov	 r9, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  003cd	49 83 d1 00	 adc	 r9, 0

; 221  :             return (_umul128(u, v, w_hi));

  003d1	48 8b c3	 mov	 rax, rbx
  003d4	48 f7 a1 d0 00
	00 00		 mul	 QWORD PTR [rcx+208]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  003db	4c 89 4d a8	 mov	 QWORD PTR k$[rbp-256], r9
  003df	49 03 c1	 add	 rax, r9

; 221  :             return (_umul128(u, v, w_hi));

  003e2	48 89 95 a8 01
	00 00		 mov	 QWORD PTR t_hi$27[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  003e9	48 89 81 d0 00
	00 00		 mov	 QWORD PTR [rcx+208], rax

; 221  :             return (_umul128(u, v, w_hi));

  003f0	4c 8b c2	 mov	 r8, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  003f3	49 83 d0 00	 adc	 r8, 0

; 221  :             return (_umul128(u, v, w_hi));

  003f7	48 8b c3	 mov	 rax, rbx
  003fa	48 f7 a1 d8 00
	00 00		 mul	 QWORD PTR [rcx+216]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00401	4c 89 45 b0	 mov	 QWORD PTR k$[rbp-256], r8
  00405	49 03 c0	 add	 rax, r8

; 221  :             return (_umul128(u, v, w_hi));

  00408	48 89 95 b0 01
	00 00		 mov	 QWORD PTR t_hi$28[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  0040f	48 89 81 d8 00
	00 00		 mov	 QWORD PTR [rcx+216], rax

; 221  :             return (_umul128(u, v, w_hi));

  00416	4c 8b ca	 mov	 r9, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00419	49 83 d1 00	 adc	 r9, 0

; 221  :             return (_umul128(u, v, w_hi));

  0041d	48 8b c3	 mov	 rax, rbx
  00420	48 f7 a1 e0 00
	00 00		 mul	 QWORD PTR [rcx+224]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00427	4c 89 4d b8	 mov	 QWORD PTR k$[rbp-256], r9
  0042b	49 03 c1	 add	 rax, r9

; 221  :             return (_umul128(u, v, w_hi));

  0042e	48 89 95 b8 01
	00 00		 mov	 QWORD PTR t_hi$29[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00435	48 89 81 e0 00
	00 00		 mov	 QWORD PTR [rcx+224], rax

; 221  :             return (_umul128(u, v, w_hi));

  0043c	4c 8b c2	 mov	 r8, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  0043f	49 83 d0 00	 adc	 r8, 0

; 221  :             return (_umul128(u, v, w_hi));

  00443	48 8b c3	 mov	 rax, rbx
  00446	48 f7 a1 e8 00
	00 00		 mul	 QWORD PTR [rcx+232]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  0044d	4c 89 45 c0	 mov	 QWORD PTR k$[rbp-256], r8
  00451	49 03 c0	 add	 rax, r8

; 221  :             return (_umul128(u, v, w_hi));

  00454	48 89 95 c0 01
	00 00		 mov	 QWORD PTR t_hi$30[rbp-256], rdx
  0045b	4c 8b ca	 mov	 r9, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  0045e	48 89 81 e8 00
	00 00		 mov	 QWORD PTR [rcx+232], rax
  00465	49 83 d1 00	 adc	 r9, 0

; 221  :             return (_umul128(u, v, w_hi));

  00469	48 8b c3	 mov	 rax, rbx
  0046c	48 f7 a1 f0 00
	00 00		 mul	 QWORD PTR [rcx+240]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00473	4c 89 4d c8	 mov	 QWORD PTR k$[rbp-256], r9

; 221  :             return (_umul128(u, v, w_hi));

  00477	4c 8b c2	 mov	 r8, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  0047a	49 03 c1	 add	 rax, r9

; 221  :             return (_umul128(u, v, w_hi));

  0047d	48 89 95 c8 01
	00 00		 mov	 QWORD PTR t_hi$31[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00484	48 89 81 f0 00
	00 00		 mov	 QWORD PTR [rcx+240], rax

; 221  :             return (_umul128(u, v, w_hi));

  0048b	48 8b c3	 mov	 rax, rbx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  0048e	49 83 d0 00	 adc	 r8, 0

; 221  :             return (_umul128(u, v, w_hi));

  00492	48 f7 a1 f8 00
	00 00		 mul	 QWORD PTR [rcx+248]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00499	4c 89 45 d0	 mov	 QWORD PTR k$[rbp-256], r8
  0049d	49 03 c0	 add	 rax, r8

; 221  :             return (_umul128(u, v, w_hi));

  004a0	48 89 95 d0 01
	00 00		 mov	 QWORD PTR t_hi$32[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  004a7	48 89 81 f8 00
	00 00		 mov	 QWORD PTR [rcx+248], rax

; 221  :             return (_umul128(u, v, w_hi));

  004ae	4c 8b ca	 mov	 r9, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  004b1	49 83 d1 00	 adc	 r9, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

  004b5	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 180  :             return (_addcarry_u64(carry, u, v, w));

  004ba	4c 89 4d d8	 mov	 QWORD PTR k$[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 699  :             u_buf += 32;

  004be	48 81 c1 00 01
	00 00		 add	 rcx, 256		; 00000100H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

  004c5	f0 0f c1 05 00
	00 00 00	 lock xadd DWORD PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 665  :         while (count > 0)

  004cd	49 83 eb 01	 sub	 r11, 1
  004d1	0f 85 69 fb ff
	ff		 jne	 $LL2@MultiplyAn
$LN3@MultiplyAn:

; 700  :             --count;
; 701  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 702  :             if (sizeof(k) == sizeof(_UINT32_T))
; 703  :                 AddToMULTI32Counter(32);
; 704  :             else
; 705  :                 AddToMULTI64Counter(32);
; 706  : #endif
; 707  :         }
; 708  : 
; 709  :         if (u_count & 0x10)

  004d7	41 f6 c2 10	 test	 r10b, 16
  004db	0f 84 0f 02 00
	00		 je	 $LN8@MultiplyAn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 221  :             return (_umul128(u, v, w_hi));

  004e1	48 8b c3	 mov	 rax, rbx
  004e4	48 f7 21	 mul	 QWORD PTR [rcx]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  004e7	49 03 c1	 add	 rax, r9

; 221  :             return (_umul128(u, v, w_hi));

  004ea	48 89 95 d8 01
	00 00		 mov	 QWORD PTR t_hi$33[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  004f1	48 89 01	 mov	 QWORD PTR [rcx], rax

; 221  :             return (_umul128(u, v, w_hi));

  004f4	4c 8b c2	 mov	 r8, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  004f7	49 83 d0 00	 adc	 r8, 0

; 221  :             return (_umul128(u, v, w_hi));

  004fb	48 8b c3	 mov	 rax, rbx
  004fe	48 f7 61 08	 mul	 QWORD PTR [rcx+8]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00502	4c 89 45 e0	 mov	 QWORD PTR k$[rbp-256], r8
  00506	49 03 c0	 add	 rax, r8

; 221  :             return (_umul128(u, v, w_hi));

  00509	48 89 95 e0 01
	00 00		 mov	 QWORD PTR t_hi$34[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00510	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 221  :             return (_umul128(u, v, w_hi));

  00514	4c 8b ca	 mov	 r9, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00517	49 83 d1 00	 adc	 r9, 0

; 221  :             return (_umul128(u, v, w_hi));

  0051b	48 8b c3	 mov	 rax, rbx
  0051e	48 f7 61 10	 mul	 QWORD PTR [rcx+16]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00522	4c 89 4d e8	 mov	 QWORD PTR k$[rbp-256], r9
  00526	49 03 c1	 add	 rax, r9

; 221  :             return (_umul128(u, v, w_hi));

  00529	48 89 95 e8 01
	00 00		 mov	 QWORD PTR t_hi$35[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00530	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 221  :             return (_umul128(u, v, w_hi));

  00534	4c 8b c2	 mov	 r8, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00537	49 83 d0 00	 adc	 r8, 0

; 221  :             return (_umul128(u, v, w_hi));

  0053b	48 8b c3	 mov	 rax, rbx
  0053e	48 f7 61 18	 mul	 QWORD PTR [rcx+24]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00542	4c 89 45 f0	 mov	 QWORD PTR k$[rbp-256], r8
  00546	49 03 c0	 add	 rax, r8

; 221  :             return (_umul128(u, v, w_hi));

  00549	48 89 95 f0 01
	00 00		 mov	 QWORD PTR t_hi$36[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00550	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 221  :             return (_umul128(u, v, w_hi));

  00554	4c 8b ca	 mov	 r9, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00557	49 83 d1 00	 adc	 r9, 0

; 221  :             return (_umul128(u, v, w_hi));

  0055b	48 8b c3	 mov	 rax, rbx
  0055e	48 f7 61 20	 mul	 QWORD PTR [rcx+32]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00562	4c 89 4d f8	 mov	 QWORD PTR k$[rbp-256], r9
  00566	49 03 c1	 add	 rax, r9

; 221  :             return (_umul128(u, v, w_hi));

  00569	48 89 95 f8 01
	00 00		 mov	 QWORD PTR t_hi$37[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00570	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 221  :             return (_umul128(u, v, w_hi));

  00574	4c 8b c2	 mov	 r8, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00577	49 83 d0 00	 adc	 r8, 0

; 221  :             return (_umul128(u, v, w_hi));

  0057b	48 8b c3	 mov	 rax, rbx
  0057e	48 f7 61 28	 mul	 QWORD PTR [rcx+40]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00582	4c 89 45 00	 mov	 QWORD PTR k$[rbp-256], r8
  00586	49 03 c0	 add	 rax, r8

; 221  :             return (_umul128(u, v, w_hi));

  00589	48 89 95 00 02
	00 00		 mov	 QWORD PTR t_hi$38[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00590	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax

; 221  :             return (_umul128(u, v, w_hi));

  00594	4c 8b ca	 mov	 r9, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00597	49 83 d1 00	 adc	 r9, 0

; 221  :             return (_umul128(u, v, w_hi));

  0059b	48 8b c3	 mov	 rax, rbx
  0059e	48 f7 61 30	 mul	 QWORD PTR [rcx+48]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  005a2	4c 89 4d 08	 mov	 QWORD PTR k$[rbp-256], r9
  005a6	49 03 c1	 add	 rax, r9

; 221  :             return (_umul128(u, v, w_hi));

  005a9	48 89 95 08 02
	00 00		 mov	 QWORD PTR t_hi$39[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  005b0	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 221  :             return (_umul128(u, v, w_hi));

  005b4	4c 8b c2	 mov	 r8, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  005b7	49 83 d0 00	 adc	 r8, 0

; 221  :             return (_umul128(u, v, w_hi));

  005bb	48 8b c3	 mov	 rax, rbx
  005be	48 f7 61 38	 mul	 QWORD PTR [rcx+56]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  005c2	4c 89 45 10	 mov	 QWORD PTR k$[rbp-256], r8
  005c6	49 03 c0	 add	 rax, r8

; 221  :             return (_umul128(u, v, w_hi));

  005c9	48 89 95 10 02
	00 00		 mov	 QWORD PTR t_hi$40[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  005d0	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax

; 221  :             return (_umul128(u, v, w_hi));

  005d4	4c 8b ca	 mov	 r9, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  005d7	49 83 d1 00	 adc	 r9, 0

; 221  :             return (_umul128(u, v, w_hi));

  005db	48 8b c3	 mov	 rax, rbx
  005de	48 f7 61 40	 mul	 QWORD PTR [rcx+64]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  005e2	4c 89 4d 18	 mov	 QWORD PTR k$[rbp-256], r9
  005e6	49 03 c1	 add	 rax, r9

; 221  :             return (_umul128(u, v, w_hi));

  005e9	48 89 95 18 02
	00 00		 mov	 QWORD PTR t_hi$41[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  005f0	48 89 41 40	 mov	 QWORD PTR [rcx+64], rax

; 221  :             return (_umul128(u, v, w_hi));

  005f4	4c 8b c2	 mov	 r8, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  005f7	49 83 d0 00	 adc	 r8, 0

; 221  :             return (_umul128(u, v, w_hi));

  005fb	48 8b c3	 mov	 rax, rbx
  005fe	48 f7 61 48	 mul	 QWORD PTR [rcx+72]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00602	4c 89 45 20	 mov	 QWORD PTR k$[rbp-256], r8
  00606	49 03 c0	 add	 rax, r8

; 221  :             return (_umul128(u, v, w_hi));

  00609	48 89 95 20 02
	00 00		 mov	 QWORD PTR t_hi$42[rbp-256], rdx
  00610	4c 8b ca	 mov	 r9, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00613	48 89 41 48	 mov	 QWORD PTR [rcx+72], rax
  00617	49 83 d1 00	 adc	 r9, 0

; 221  :             return (_umul128(u, v, w_hi));

  0061b	48 8b c3	 mov	 rax, rbx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  0061e	4c 89 4d 28	 mov	 QWORD PTR k$[rbp-256], r9

; 221  :             return (_umul128(u, v, w_hi));

  00622	48 f7 61 50	 mul	 QWORD PTR [rcx+80]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00626	49 03 c1	 add	 rax, r9

; 221  :             return (_umul128(u, v, w_hi));

  00629	48 89 95 28 02
	00 00		 mov	 QWORD PTR t_hi$43[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00630	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax

; 221  :             return (_umul128(u, v, w_hi));

  00634	4c 8b c2	 mov	 r8, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00637	49 83 d0 00	 adc	 r8, 0

; 221  :             return (_umul128(u, v, w_hi));

  0063b	48 8b c3	 mov	 rax, rbx
  0063e	48 f7 61 58	 mul	 QWORD PTR [rcx+88]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00642	4c 89 45 30	 mov	 QWORD PTR k$[rbp-256], r8
  00646	49 03 c0	 add	 rax, r8

; 221  :             return (_umul128(u, v, w_hi));

  00649	48 89 95 30 02
	00 00		 mov	 QWORD PTR t_hi$44[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00650	48 89 41 58	 mov	 QWORD PTR [rcx+88], rax

; 221  :             return (_umul128(u, v, w_hi));

  00654	4c 8b ca	 mov	 r9, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00657	49 83 d1 00	 adc	 r9, 0

; 221  :             return (_umul128(u, v, w_hi));

  0065b	48 8b c3	 mov	 rax, rbx
  0065e	48 f7 61 60	 mul	 QWORD PTR [rcx+96]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00662	4c 89 4d 38	 mov	 QWORD PTR k$[rbp-256], r9
  00666	49 03 c1	 add	 rax, r9

; 221  :             return (_umul128(u, v, w_hi));

  00669	48 89 95 38 02
	00 00		 mov	 QWORD PTR t_hi$45[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00670	48 89 41 60	 mov	 QWORD PTR [rcx+96], rax

; 221  :             return (_umul128(u, v, w_hi));

  00674	4c 8b c2	 mov	 r8, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00677	49 83 d0 00	 adc	 r8, 0

; 221  :             return (_umul128(u, v, w_hi));

  0067b	48 8b c3	 mov	 rax, rbx
  0067e	48 f7 61 68	 mul	 QWORD PTR [rcx+104]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00682	4c 89 45 40	 mov	 QWORD PTR k$[rbp-256], r8
  00686	49 03 c0	 add	 rax, r8

; 221  :             return (_umul128(u, v, w_hi));

  00689	48 89 95 40 02
	00 00		 mov	 QWORD PTR t_hi$46[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00690	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax

; 221  :             return (_umul128(u, v, w_hi));

  00694	4c 8b ca	 mov	 r9, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00697	49 83 d1 00	 adc	 r9, 0

; 221  :             return (_umul128(u, v, w_hi));

  0069b	48 8b c3	 mov	 rax, rbx
  0069e	48 f7 61 70	 mul	 QWORD PTR [rcx+112]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  006a2	4c 89 4d 48	 mov	 QWORD PTR k$[rbp-256], r9
  006a6	49 03 c1	 add	 rax, r9

; 221  :             return (_umul128(u, v, w_hi));

  006a9	48 89 95 48 02
	00 00		 mov	 QWORD PTR t_hi$47[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  006b0	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax

; 221  :             return (_umul128(u, v, w_hi));

  006b4	4c 8b c2	 mov	 r8, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  006b7	49 83 d0 00	 adc	 r8, 0

; 221  :             return (_umul128(u, v, w_hi));

  006bb	48 8b c3	 mov	 rax, rbx
  006be	48 f7 61 78	 mul	 QWORD PTR [rcx+120]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  006c2	4c 89 45 50	 mov	 QWORD PTR k$[rbp-256], r8
  006c6	49 03 c0	 add	 rax, r8

; 221  :             return (_umul128(u, v, w_hi));

  006c9	48 89 95 50 02
	00 00		 mov	 QWORD PTR t_hi$48[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  006d0	48 89 41 78	 mov	 QWORD PTR [rcx+120], rax

; 221  :             return (_umul128(u, v, w_hi));

  006d4	4c 8b ca	 mov	 r9, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  006d7	49 83 d1 00	 adc	 r9, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

  006db	b8 10 00 00 00	 mov	 eax, 16
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 180  :             return (_addcarry_u64(carry, u, v, w));

  006e0	4c 89 4d 58	 mov	 QWORD PTR k$[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 727  :             u_buf += 16;

  006e4	48 83 e9 80	 sub	 rcx, -128		; ffffffffffffff80H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

  006e8	f0 0f c1 05 00
	00 00 00	 lock xadd DWORD PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A, eax
$LN8@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 736  :         if (u_count & 0x8)

  006f0	41 f6 c2 08	 test	 r10b, 8
  006f4	0f 84 1b 01 00
	00		 je	 $LN11@MultiplyAn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 221  :             return (_umul128(u, v, w_hi));

  006fa	48 8b c3	 mov	 rax, rbx
  006fd	48 f7 21	 mul	 QWORD PTR [rcx]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00700	49 03 c1	 add	 rax, r9

; 221  :             return (_umul128(u, v, w_hi));

  00703	48 89 95 58 02
	00 00		 mov	 QWORD PTR t_hi$49[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  0070a	48 89 01	 mov	 QWORD PTR [rcx], rax

; 221  :             return (_umul128(u, v, w_hi));

  0070d	4c 8b c2	 mov	 r8, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00710	49 83 d0 00	 adc	 r8, 0

; 221  :             return (_umul128(u, v, w_hi));

  00714	48 8b c3	 mov	 rax, rbx
  00717	48 f7 61 08	 mul	 QWORD PTR [rcx+8]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  0071b	4c 89 45 60	 mov	 QWORD PTR k$[rbp-256], r8
  0071f	49 03 c0	 add	 rax, r8

; 221  :             return (_umul128(u, v, w_hi));

  00722	48 89 95 60 02
	00 00		 mov	 QWORD PTR t_hi$50[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00729	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 221  :             return (_umul128(u, v, w_hi));

  0072d	4c 8b ca	 mov	 r9, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00730	49 83 d1 00	 adc	 r9, 0

; 221  :             return (_umul128(u, v, w_hi));

  00734	48 8b c3	 mov	 rax, rbx
  00737	48 f7 61 10	 mul	 QWORD PTR [rcx+16]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  0073b	4c 89 4d 68	 mov	 QWORD PTR k$[rbp-256], r9
  0073f	49 03 c1	 add	 rax, r9

; 221  :             return (_umul128(u, v, w_hi));

  00742	48 89 95 68 02
	00 00		 mov	 QWORD PTR t_hi$51[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00749	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 221  :             return (_umul128(u, v, w_hi));

  0074d	4c 8b c2	 mov	 r8, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00750	49 83 d0 00	 adc	 r8, 0

; 221  :             return (_umul128(u, v, w_hi));

  00754	48 8b c3	 mov	 rax, rbx
  00757	48 f7 61 18	 mul	 QWORD PTR [rcx+24]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  0075b	4c 89 45 70	 mov	 QWORD PTR k$[rbp-256], r8
  0075f	49 03 c0	 add	 rax, r8

; 221  :             return (_umul128(u, v, w_hi));

  00762	48 89 95 70 02
	00 00		 mov	 QWORD PTR t_hi$52[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00769	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 221  :             return (_umul128(u, v, w_hi));

  0076d	4c 8b ca	 mov	 r9, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00770	49 83 d1 00	 adc	 r9, 0

; 221  :             return (_umul128(u, v, w_hi));

  00774	48 8b c3	 mov	 rax, rbx
  00777	48 f7 61 20	 mul	 QWORD PTR [rcx+32]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  0077b	4c 89 4d 78	 mov	 QWORD PTR k$[rbp-256], r9
  0077f	49 03 c1	 add	 rax, r9

; 221  :             return (_umul128(u, v, w_hi));

  00782	48 89 95 78 02
	00 00		 mov	 QWORD PTR t_hi$53[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00789	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 221  :             return (_umul128(u, v, w_hi));

  0078d	4c 8b c2	 mov	 r8, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00790	49 83 d0 00	 adc	 r8, 0

; 221  :             return (_umul128(u, v, w_hi));

  00794	48 8b c3	 mov	 rax, rbx
  00797	48 f7 61 28	 mul	 QWORD PTR [rcx+40]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  0079b	4c 89 85 80 00
	00 00		 mov	 QWORD PTR k$[rbp-256], r8
  007a2	49 03 c0	 add	 rax, r8

; 221  :             return (_umul128(u, v, w_hi));

  007a5	48 89 95 80 02
	00 00		 mov	 QWORD PTR t_hi$54[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  007ac	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax

; 221  :             return (_umul128(u, v, w_hi));

  007b0	4c 8b ca	 mov	 r9, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  007b3	49 83 d1 00	 adc	 r9, 0

; 221  :             return (_umul128(u, v, w_hi));

  007b7	48 8b c3	 mov	 rax, rbx
  007ba	48 f7 61 30	 mul	 QWORD PTR [rcx+48]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  007be	4c 89 8d 88 00
	00 00		 mov	 QWORD PTR k$[rbp-256], r9
  007c5	49 03 c1	 add	 rax, r9

; 221  :             return (_umul128(u, v, w_hi));

  007c8	48 89 95 88 02
	00 00		 mov	 QWORD PTR t_hi$55[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  007cf	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 221  :             return (_umul128(u, v, w_hi));

  007d3	4c 8b c2	 mov	 r8, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  007d6	49 83 d0 00	 adc	 r8, 0

; 221  :             return (_umul128(u, v, w_hi));

  007da	48 8b c3	 mov	 rax, rbx
  007dd	48 f7 61 38	 mul	 QWORD PTR [rcx+56]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  007e1	4c 89 85 90 00
	00 00		 mov	 QWORD PTR k$[rbp-256], r8
  007e8	49 03 c0	 add	 rax, r8

; 221  :             return (_umul128(u, v, w_hi));

  007eb	48 89 95 90 02
	00 00		 mov	 QWORD PTR t_hi$56[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  007f2	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax

; 221  :             return (_umul128(u, v, w_hi));

  007f6	4c 8b ca	 mov	 r9, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  007f9	49 83 d1 00	 adc	 r9, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

  007fd	b8 08 00 00 00	 mov	 eax, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00802	4c 89 8d 98 00
	00 00		 mov	 QWORD PTR k$[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 746  :             u_buf += 8;

  00809	48 83 c1 40	 add	 rcx, 64			; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

  0080d	f0 0f c1 05 00
	00 00 00	 lock xadd DWORD PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A, eax
$LN11@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 755  :         if (u_count & 0x4)

  00815	41 f6 c2 04	 test	 r10b, 4
  00819	0f 84 9b 00 00
	00		 je	 $LN14@MultiplyAn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 221  :             return (_umul128(u, v, w_hi));

  0081f	48 8b c3	 mov	 rax, rbx
  00822	48 f7 21	 mul	 QWORD PTR [rcx]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00825	49 03 c1	 add	 rax, r9

; 221  :             return (_umul128(u, v, w_hi));

  00828	48 89 95 98 02
	00 00		 mov	 QWORD PTR t_hi$57[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  0082f	48 89 01	 mov	 QWORD PTR [rcx], rax

; 221  :             return (_umul128(u, v, w_hi));

  00832	4c 8b c2	 mov	 r8, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00835	49 83 d0 00	 adc	 r8, 0

; 221  :             return (_umul128(u, v, w_hi));

  00839	48 8b c3	 mov	 rax, rbx
  0083c	48 f7 61 08	 mul	 QWORD PTR [rcx+8]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00840	4c 89 85 a0 00
	00 00		 mov	 QWORD PTR k$[rbp-256], r8
  00847	49 03 c0	 add	 rax, r8

; 221  :             return (_umul128(u, v, w_hi));

  0084a	48 89 95 a0 02
	00 00		 mov	 QWORD PTR t_hi$58[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00851	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 221  :             return (_umul128(u, v, w_hi));

  00855	4c 8b ca	 mov	 r9, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00858	49 83 d1 00	 adc	 r9, 0

; 221  :             return (_umul128(u, v, w_hi));

  0085c	48 8b c3	 mov	 rax, rbx
  0085f	48 f7 61 10	 mul	 QWORD PTR [rcx+16]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00863	4c 89 8d a8 00
	00 00		 mov	 QWORD PTR k$[rbp-256], r9
  0086a	49 03 c1	 add	 rax, r9

; 221  :             return (_umul128(u, v, w_hi));

  0086d	48 89 95 a8 02
	00 00		 mov	 QWORD PTR t_hi$59[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00874	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 221  :             return (_umul128(u, v, w_hi));

  00878	4c 8b c2	 mov	 r8, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  0087b	49 83 d0 00	 adc	 r8, 0

; 221  :             return (_umul128(u, v, w_hi));

  0087f	48 8b c3	 mov	 rax, rbx
  00882	48 f7 61 18	 mul	 QWORD PTR [rcx+24]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00886	4c 89 85 b0 00
	00 00		 mov	 QWORD PTR k$[rbp-256], r8
  0088d	49 03 c0	 add	 rax, r8

; 221  :             return (_umul128(u, v, w_hi));

  00890	48 89 95 b0 02
	00 00		 mov	 QWORD PTR t_hi$60[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00897	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 221  :             return (_umul128(u, v, w_hi));

  0089b	4c 8b ca	 mov	 r9, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  0089e	49 83 d1 00	 adc	 r9, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

  008a2	b8 04 00 00 00	 mov	 eax, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 180  :             return (_addcarry_u64(carry, u, v, w));

  008a7	4c 89 8d b8 00
	00 00		 mov	 QWORD PTR k$[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 761  :             u_buf += 4;

  008ae	48 83 c1 20	 add	 rcx, 32			; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

  008b2	f0 0f c1 05 00
	00 00 00	 lock xadd DWORD PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A, eax
$LN14@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 770  :         if (u_count & 0x2)

  008ba	41 f6 c2 02	 test	 r10b, 2
  008be	74 55		 je	 SHORT $LN17@MultiplyAn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 221  :             return (_umul128(u, v, w_hi));

  008c0	48 8b c3	 mov	 rax, rbx
  008c3	48 f7 21	 mul	 QWORD PTR [rcx]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  008c6	49 03 c1	 add	 rax, r9

; 221  :             return (_umul128(u, v, w_hi));

  008c9	48 89 95 b8 02
	00 00		 mov	 QWORD PTR t_hi$61[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  008d0	48 89 01	 mov	 QWORD PTR [rcx], rax

; 221  :             return (_umul128(u, v, w_hi));

  008d3	4c 8b c2	 mov	 r8, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  008d6	49 83 d0 00	 adc	 r8, 0

; 221  :             return (_umul128(u, v, w_hi));

  008da	48 8b c3	 mov	 rax, rbx
  008dd	48 f7 61 08	 mul	 QWORD PTR [rcx+8]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  008e1	4c 89 85 c0 00
	00 00		 mov	 QWORD PTR k$[rbp-256], r8
  008e8	49 03 c0	 add	 rax, r8

; 221  :             return (_umul128(u, v, w_hi));

  008eb	48 89 95 c0 02
	00 00		 mov	 QWORD PTR t_hi$62[rbp-256], rdx
  008f2	4c 8b ca	 mov	 r9, rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  008f5	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  008f9	49 83 d1 00	 adc	 r9, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

  008fd	ba 02 00 00 00	 mov	 edx, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00902	4c 89 8d c8 00
	00 00		 mov	 QWORD PTR k$[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 774  :             u_buf += 2;

  00909	48 83 c1 10	 add	 rcx, 16
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

  0090d	f0 0f c1 15 00
	00 00 00	 lock xadd DWORD PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A, edx
$LN17@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 783  :         if (u_count & 0x1)

  00915	41 f6 c2 01	 test	 r10b, 1
  00919	74 2c		 je	 SHORT $LN20@MultiplyAn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 221  :             return (_umul128(u, v, w_hi));

  0091b	48 8b c3	 mov	 rax, rbx
  0091e	48 f7 21	 mul	 QWORD PTR [rcx]

; 180  :             return (_addcarry_u64(carry, u, v, w));

  00921	49 03 c1	 add	 rax, r9

; 221  :             return (_umul128(u, v, w_hi));

  00924	48 89 95 c8 02
	00 00		 mov	 QWORD PTR t_hi$63[rbp-256], rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  0092b	4c 8b ca	 mov	 r9, rdx
  0092e	48 89 01	 mov	 QWORD PTR [rcx], rax
  00931	49 83 d1 00	 adc	 r9, 0
  00935	4c 89 8d d0 00
	00 00		 mov	 QWORD PTR k$[rbp-256], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 786  :             u_buf += 1;

  0093c	48 83 c1 08	 add	 rcx, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 322  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI64);

  00940	f0 ff 05 00 00
	00 00		 lock inc DWORD PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A
$LN20@MultiplyAn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 795  :         if (k > 0)

  00947	4d 85 c9	 test	 r9, r9
  0094a	74 11		 je	 SHORT $LN554@MultiplyAn

; 796  :         {
; 797  :             u_buf[0] = k;

  0094c	4c 89 09	 mov	 QWORD PTR [rcx], r9

; 798  :             u_buf += 1;

  0094f	48 8d 41 08	 lea	 rax, QWORD PTR [rcx+8]

; 802  :     }

  00953	48 81 c4 d8 03
	00 00		 add	 rsp, 984		; 000003d8H
  0095a	5b		 pop	 rbx
  0095b	5d		 pop	 rbp
  0095c	c3		 ret	 0
$LN554@MultiplyAn:

; 799  :         }
; 800  : 
; 801  :         return (u_buf);

  0095d	48 8b c1	 mov	 rax, rcx

; 802  :     }

  00960	48 81 c4 d8 03
	00 00		 add	 rsp, 984		; 000003d8H
  00967	5b		 pop	 rbx
  00968	5d		 pop	 rbp
  00969	c3		 ret	 0
?MultiplyAndAdd_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAPEA_KPEA_K_K1@Z ENDP ; Palmtree::Math::Core::Internal::MultiplyAndAdd_using_ADC_MUL
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z
_TEXT	SEGMENT
k$ = 8
u$ = 16
w_buf$ = 24
?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z PROC ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX, COMDAT

; 647  :     {

  00000	48 8b c2	 mov	 rax, rdx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 233  :             return (_mulx_u64(u, v, w_hi));

  00003	48 ba 00 00 e8
	89 04 23 c7 8a	 mov	 rdx, -8446744073709551616 ; 8ac7230489e80000H
  0000d	c4 e2 b3 f6 c0	 mulx	 rax, r9, rax

; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00012	4c 03 c9	 add	 r9, rcx
  00015	b9 00 00 00 00	 mov	 ecx, 0
  0001a	4d 89 08	 mov	 QWORD PTR [r8], r9
  0001d	66 48 0f 38 f6
	c1		 adcx	 rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 659  :     }

  00023	c3		 ret	 0
?MultiplyAndAdd1Word_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ENDP ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADCX_MULX
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z
_TEXT	SEGMENT
k$ = 8
u$ = 16
w_buf$ = 24
?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z PROC ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL, COMDAT
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 221  :             return (_umul128(u, v, w_hi));

  00000	48 b8 00 00 e8
	89 04 23 c7 8a	 mov	 rax, -8446744073709551616 ; 8ac7230489e80000H
  0000a	48 f7 e2	 mul	 rdx

; 180  :             return (_addcarry_u64(carry, u, v, w));

  0000d	48 03 c1	 add	 rax, rcx
  00010	49 89 00	 mov	 QWORD PTR [r8], rax
  00013	48 83 d2 00	 adc	 rdx, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 643  :         return (k);

  00017	48 8b c2	 mov	 rax, rdx

; 644  :     }

  0001a	c3		 ret	 0
?MultiplyAndAdd1Word_using_ADC_MUL@Internal@Core@Math@Palmtree@@YA_K_K0PEA_K@Z ENDP ; Palmtree::Math::Core::Internal::MultiplyAndAdd1Word_using_ADC_MUL
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?BuildBinaryFromDecimalString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K1@Z
_TEXT	SEGMENT
source$ = 48
out_buf$ = 56
out_buf_count$ = 64
?BuildBinaryFromDecimalString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K1@Z PROC ; Palmtree::Math::Core::Internal::BuildBinaryFromDecimalString, COMDAT

; 604  :     {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 56		 push	 r14
  00016	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0001a	4d 8b f0	 mov	 r14, r8
  0001d	48 8b f2	 mov	 rsi, rdx
  00020	48 8b f9	 mov	 rdi, rcx

; 605  : #ifdef _M_IX86
; 606  :         int word_digit_count = 9;
; 607  : #elif defined(_M_X64)
; 608  :         int word_digit_count = 19;
; 609  : #else
; 610  : #error unknown platform
; 611  : #endif
; 612  :         wchar_t* in_ptr = source;
; 613  :         __UNIT_TYPE* out_ptr = out_buf;

  00023	48 8b da	 mov	 rbx, rdx

; 614  :         __UNIT_TYPE source_count = lstrlenW(source);

  00026	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrlenW
  0002c	4c 63 d0	 movsxd	 r10, eax

; 615  :         int r = source_count % word_digit_count;

  0002f	48 bd 5f 43 79
	0d e5 35 94 d7	 mov	 rbp, -2912643801112034465 ; d79435e50d79435fH
  00039	48 8b c5	 mov	 rax, rbp
  0003c	49 8b ca	 mov	 rcx, r10
  0003f	49 f7 e2	 mul	 r10
  00042	48 c1 ea 04	 shr	 rdx, 4
  00046	48 6b c2 13	 imul	 rax, rdx, 19
  0004a	48 2b c8	 sub	 rcx, rax

; 616  :         if (r > 0)

  0004d	85 c9		 test	 ecx, ecx
  0004f	7e 5a		 jle	 SHORT $LN14@BuildBinar

; 556  :         __UNIT_TYPE x = 0;

  00051	45 33 c0	 xor	 r8d, r8d

; 617  :         {
; 618  :             *out_ptr++ = BuildLeading1WordFromDecimalString(in_ptr, r);

  00054	4c 63 d9	 movsxd	 r11, ecx
  00057	48 8b d7	 mov	 rdx, rdi
  0005a	4d 8b cb	 mov	 r9, r11

; 557  :         while (count > 0)

  0005d	85 c9		 test	 ecx, ecx
  0005f	74 3c		 je	 SHORT $LN8@BuildBinar
  00061	0f 1f 40 00 66
	66 66 0f 1f 84
	00 00 00 00 00	 npad	 15
$LL7@BuildBinar:

; 558  :         {
; 559  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00070	0f b7 0a	 movzx	 ecx, WORD PTR [rdx]
  00073	48 8d 52 02	 lea	 rdx, QWORD PTR [rdx+2]

; 42   :         if (c >= L'0' && c <= L'9')

  00077	8d 41 d0	 lea	 eax, DWORD PTR [rcx-48]
  0007a	66 83 f8 09	 cmp	 ax, 9
  0007e	77 08		 ja	 SHORT $LN11@BuildBinar

; 43   :             return (c - L'0');

  00080	0f b7 c1	 movzx	 eax, cx
  00083	83 e8 30	 sub	 eax, 48			; 00000030H
  00086	eb 05		 jmp	 SHORT $LN10@BuildBinar
$LN11@BuildBinar:

; 44   :         return (-1);

  00088	b8 ff ff ff ff	 mov	 eax, -1
$LN10@BuildBinar:

; 559  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  0008d	48 98		 cdqe
  0008f	4b 8d 0c 80	 lea	 rcx, QWORD PTR [r8+r8*4]
  00093	4c 8d 04 48	 lea	 r8, QWORD PTR [rax+rcx*2]

; 560  :             --count;

  00097	49 83 e9 01	 sub	 r9, 1
  0009b	75 d3		 jne	 SHORT $LL7@BuildBinar
$LN8@BuildBinar:

; 617  :         {
; 618  :             *out_ptr++ = BuildLeading1WordFromDecimalString(in_ptr, r);

  0009d	4c 89 06	 mov	 QWORD PTR [rsi], r8
  000a0	48 8d 5e 08	 lea	 rbx, QWORD PTR [rsi+8]

; 619  :             in_ptr += r;

  000a4	4a 8d 3c 5f	 lea	 rdi, QWORD PTR [rdi+r11*2]

; 620  :             source_count -= r;

  000a8	4d 2b d3	 sub	 r10, r11
$LN14@BuildBinar:

; 621  :         }
; 622  :         while (source_count > 0)

  000ab	4d 85 d2	 test	 r10, r10
  000ae	74 2d		 je	 SHORT $LN3@BuildBinar
  000b0	49 8d 4a ff	 lea	 rcx, QWORD PTR [r10-1]
  000b4	48 8b c5	 mov	 rax, rbp
  000b7	48 f7 e1	 mul	 rcx
  000ba	4c 8b d2	 mov	 r10, rdx
  000bd	49 c1 ea 04	 shr	 r10, 4
  000c1	49 ff c2	 inc	 r10
$LL2@BuildBinar:

; 623  :         {
; 624  :             *out_ptr++ = Build1WordFromDecimalString(in_ptr);

  000c4	48 8b cf	 mov	 rcx, rdi
  000c7	e8 00 00 00 00	 call	 ?Build1WordFromDecimalString@Internal@Core@Math@Palmtree@@YA_KPEA_W@Z ; Palmtree::Math::Core::Internal::Build1WordFromDecimalString
  000cc	48 89 03	 mov	 QWORD PTR [rbx], rax

; 625  :             in_ptr += word_digit_count;

  000cf	48 83 c7 26	 add	 rdi, 38			; 00000026H
  000d3	48 83 c3 08	 add	 rbx, 8
  000d7	49 83 ea 01	 sub	 r10, 1
  000db	75 e7		 jne	 SHORT $LL2@BuildBinar
$LN3@BuildBinar:

; 626  :             source_count -= word_digit_count;
; 627  :         }
; 628  :         *out_buf_count = out_ptr - out_buf;
; 629  :     }

  000dd	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  000e2	48 2b de	 sub	 rbx, rsi
  000e5	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000ea	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  000ef	48 c1 fb 03	 sar	 rbx, 3
  000f3	49 89 1e	 mov	 QWORD PTR [r14], rbx
  000f6	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000fb	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ff	41 5e		 pop	 r14
  00101	c3		 ret	 0
?BuildBinaryFromDecimalString@Internal@Core@Math@Palmtree@@YAXPEA_WPEA_K1@Z ENDP ; Palmtree::Math::Core::Internal::BuildBinaryFromDecimalString
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?Build1WordFromDecimalString@Internal@Core@Math@Palmtree@@YA_KPEA_W@Z
_TEXT	SEGMENT
in_ptr$ = 8
?Build1WordFromDecimalString@Internal@Core@Math@Palmtree@@YA_KPEA_W@Z PROC ; Palmtree::Math::Core::Internal::Build1WordFromDecimalString, COMDAT

; 566  :     {

  00000	48 8b d1	 mov	 rdx, rcx

; 42   :         if (c >= L'0' && c <= L'9')

  00003	41 b8 ff ff ff
	ff		 mov	 r8d, -1

; 567  :         __UNIT_TYPE x = ParseDecimalDigit(*in_ptr++);

  00009	0f b7 09	 movzx	 ecx, WORD PTR [rcx]

; 42   :         if (c >= L'0' && c <= L'9')

  0000c	8d 41 d0	 lea	 eax, DWORD PTR [rcx-48]
  0000f	66 83 f8 09	 cmp	 ax, 9
  00013	77 08		 ja	 SHORT $LN8@Build1Word

; 43   :             return (c - L'0');

  00015	0f b7 c1	 movzx	 eax, cx
  00018	83 e8 30	 sub	 eax, 48			; 00000030H
  0001b	eb 03		 jmp	 SHORT $LN7@Build1Word
$LN8@Build1Word:

; 44   :         return (-1);

  0001d	41 8b c0	 mov	 eax, r8d
$LN7@Build1Word:

; 568  :         if (sizeof(__UNIT_TYPE) >= sizeof(_UINT64_T))
; 569  :         {
; 570  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00020	0f b7 4a 02	 movzx	 ecx, WORD PTR [rdx+2]
  00024	4c 63 c8	 movsxd	 r9, eax

; 42   :         if (c >= L'0' && c <= L'9')

  00027	8d 41 d0	 lea	 eax, DWORD PTR [rcx-48]
  0002a	66 83 f8 09	 cmp	 ax, 9
  0002e	77 08		 ja	 SHORT $LN11@Build1Word

; 43   :             return (c - L'0');

  00030	0f b7 c1	 movzx	 eax, cx
  00033	83 e8 30	 sub	 eax, 48			; 00000030H
  00036	eb 03		 jmp	 SHORT $LN10@Build1Word
$LN11@Build1Word:

; 44   :         return (-1);

  00038	41 8b c0	 mov	 eax, r8d
$LN10@Build1Word:

; 568  :         if (sizeof(__UNIT_TYPE) >= sizeof(_UINT64_T))
; 569  :         {
; 570  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  0003b	4b 8d 0c 89	 lea	 rcx, QWORD PTR [r9+r9*4]
  0003f	48 98		 cdqe
  00041	4c 8d 0c 48	 lea	 r9, QWORD PTR [rax+rcx*2]

; 571  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00045	0f b7 4a 04	 movzx	 ecx, WORD PTR [rdx+4]

; 42   :         if (c >= L'0' && c <= L'9')

  00049	8d 41 d0	 lea	 eax, DWORD PTR [rcx-48]
  0004c	66 83 f8 09	 cmp	 ax, 9
  00050	77 08		 ja	 SHORT $LN14@Build1Word

; 43   :             return (c - L'0');

  00052	0f b7 c1	 movzx	 eax, cx
  00055	83 e8 30	 sub	 eax, 48			; 00000030H
  00058	eb 03		 jmp	 SHORT $LN13@Build1Word
$LN14@Build1Word:

; 44   :         return (-1);

  0005a	41 8b c0	 mov	 eax, r8d
$LN13@Build1Word:

; 571  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  0005d	4b 8d 0c 89	 lea	 rcx, QWORD PTR [r9+r9*4]
  00061	48 98		 cdqe
  00063	4c 8d 0c 48	 lea	 r9, QWORD PTR [rax+rcx*2]

; 572  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00067	0f b7 4a 06	 movzx	 ecx, WORD PTR [rdx+6]

; 42   :         if (c >= L'0' && c <= L'9')

  0006b	8d 41 d0	 lea	 eax, DWORD PTR [rcx-48]
  0006e	66 83 f8 09	 cmp	 ax, 9
  00072	77 08		 ja	 SHORT $LN17@Build1Word

; 43   :             return (c - L'0');

  00074	0f b7 c1	 movzx	 eax, cx
  00077	83 e8 30	 sub	 eax, 48			; 00000030H
  0007a	eb 03		 jmp	 SHORT $LN16@Build1Word
$LN17@Build1Word:

; 44   :         return (-1);

  0007c	41 8b c0	 mov	 eax, r8d
$LN16@Build1Word:

; 572  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  0007f	4b 8d 0c 89	 lea	 rcx, QWORD PTR [r9+r9*4]
  00083	48 98		 cdqe
  00085	4c 8d 0c 48	 lea	 r9, QWORD PTR [rax+rcx*2]

; 573  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00089	0f b7 4a 08	 movzx	 ecx, WORD PTR [rdx+8]

; 42   :         if (c >= L'0' && c <= L'9')

  0008d	8d 41 d0	 lea	 eax, DWORD PTR [rcx-48]
  00090	66 83 f8 09	 cmp	 ax, 9
  00094	77 08		 ja	 SHORT $LN20@Build1Word

; 43   :             return (c - L'0');

  00096	0f b7 c1	 movzx	 eax, cx
  00099	83 e8 30	 sub	 eax, 48			; 00000030H
  0009c	eb 03		 jmp	 SHORT $LN19@Build1Word
$LN20@Build1Word:

; 44   :         return (-1);

  0009e	41 8b c0	 mov	 eax, r8d
$LN19@Build1Word:

; 573  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  000a1	4b 8d 0c 89	 lea	 rcx, QWORD PTR [r9+r9*4]
  000a5	48 98		 cdqe
  000a7	4c 8d 0c 48	 lea	 r9, QWORD PTR [rax+rcx*2]

; 574  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  000ab	0f b7 4a 0a	 movzx	 ecx, WORD PTR [rdx+10]

; 42   :         if (c >= L'0' && c <= L'9')

  000af	8d 41 d0	 lea	 eax, DWORD PTR [rcx-48]
  000b2	66 83 f8 09	 cmp	 ax, 9
  000b6	77 08		 ja	 SHORT $LN23@Build1Word

; 43   :             return (c - L'0');

  000b8	0f b7 c1	 movzx	 eax, cx
  000bb	83 e8 30	 sub	 eax, 48			; 00000030H
  000be	eb 03		 jmp	 SHORT $LN22@Build1Word
$LN23@Build1Word:

; 44   :         return (-1);

  000c0	41 8b c0	 mov	 eax, r8d
$LN22@Build1Word:

; 574  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  000c3	4b 8d 0c 89	 lea	 rcx, QWORD PTR [r9+r9*4]
  000c7	48 98		 cdqe
  000c9	4c 8d 0c 48	 lea	 r9, QWORD PTR [rax+rcx*2]

; 575  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  000cd	0f b7 4a 0c	 movzx	 ecx, WORD PTR [rdx+12]

; 42   :         if (c >= L'0' && c <= L'9')

  000d1	8d 41 d0	 lea	 eax, DWORD PTR [rcx-48]
  000d4	66 83 f8 09	 cmp	 ax, 9
  000d8	77 08		 ja	 SHORT $LN26@Build1Word

; 43   :             return (c - L'0');

  000da	0f b7 c1	 movzx	 eax, cx
  000dd	83 e8 30	 sub	 eax, 48			; 00000030H
  000e0	eb 03		 jmp	 SHORT $LN25@Build1Word
$LN26@Build1Word:

; 44   :         return (-1);

  000e2	41 8b c0	 mov	 eax, r8d
$LN25@Build1Word:

; 575  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  000e5	4b 8d 0c 89	 lea	 rcx, QWORD PTR [r9+r9*4]
  000e9	48 98		 cdqe
  000eb	4c 8d 0c 48	 lea	 r9, QWORD PTR [rax+rcx*2]

; 576  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  000ef	0f b7 4a 0e	 movzx	 ecx, WORD PTR [rdx+14]

; 42   :         if (c >= L'0' && c <= L'9')

  000f3	8d 41 d0	 lea	 eax, DWORD PTR [rcx-48]
  000f6	66 83 f8 09	 cmp	 ax, 9
  000fa	77 08		 ja	 SHORT $LN29@Build1Word

; 43   :             return (c - L'0');

  000fc	0f b7 c1	 movzx	 eax, cx
  000ff	83 e8 30	 sub	 eax, 48			; 00000030H
  00102	eb 03		 jmp	 SHORT $LN28@Build1Word
$LN29@Build1Word:

; 44   :         return (-1);

  00104	41 8b c0	 mov	 eax, r8d
$LN28@Build1Word:

; 576  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00107	4b 8d 0c 89	 lea	 rcx, QWORD PTR [r9+r9*4]
  0010b	48 98		 cdqe
  0010d	4c 8d 0c 48	 lea	 r9, QWORD PTR [rax+rcx*2]

; 577  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00111	0f b7 4a 10	 movzx	 ecx, WORD PTR [rdx+16]

; 42   :         if (c >= L'0' && c <= L'9')

  00115	8d 41 d0	 lea	 eax, DWORD PTR [rcx-48]
  00118	66 83 f8 09	 cmp	 ax, 9
  0011c	77 08		 ja	 SHORT $LN32@Build1Word

; 43   :             return (c - L'0');

  0011e	0f b7 c1	 movzx	 eax, cx
  00121	83 e8 30	 sub	 eax, 48			; 00000030H
  00124	eb 03		 jmp	 SHORT $LN31@Build1Word
$LN32@Build1Word:

; 44   :         return (-1);

  00126	41 8b c0	 mov	 eax, r8d
$LN31@Build1Word:

; 577  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00129	4b 8d 0c 89	 lea	 rcx, QWORD PTR [r9+r9*4]
  0012d	48 98		 cdqe
  0012f	4c 8d 0c 48	 lea	 r9, QWORD PTR [rax+rcx*2]

; 578  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00133	0f b7 4a 12	 movzx	 ecx, WORD PTR [rdx+18]

; 42   :         if (c >= L'0' && c <= L'9')

  00137	8d 41 d0	 lea	 eax, DWORD PTR [rcx-48]
  0013a	66 83 f8 09	 cmp	 ax, 9
  0013e	77 08		 ja	 SHORT $LN35@Build1Word

; 43   :             return (c - L'0');

  00140	0f b7 c1	 movzx	 eax, cx
  00143	83 e8 30	 sub	 eax, 48			; 00000030H
  00146	eb 03		 jmp	 SHORT $LN34@Build1Word
$LN35@Build1Word:

; 44   :         return (-1);

  00148	41 8b c0	 mov	 eax, r8d
$LN34@Build1Word:

; 578  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  0014b	4b 8d 0c 89	 lea	 rcx, QWORD PTR [r9+r9*4]
  0014f	48 98		 cdqe
  00151	4c 8d 0c 48	 lea	 r9, QWORD PTR [rax+rcx*2]

; 579  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00155	0f b7 4a 14	 movzx	 ecx, WORD PTR [rdx+20]

; 42   :         if (c >= L'0' && c <= L'9')

  00159	8d 41 d0	 lea	 eax, DWORD PTR [rcx-48]
  0015c	66 83 f8 09	 cmp	 ax, 9
  00160	77 08		 ja	 SHORT $LN38@Build1Word

; 43   :             return (c - L'0');

  00162	0f b7 c1	 movzx	 eax, cx
  00165	83 e8 30	 sub	 eax, 48			; 00000030H
  00168	eb 03		 jmp	 SHORT $LN37@Build1Word
$LN38@Build1Word:

; 44   :         return (-1);

  0016a	41 8b c0	 mov	 eax, r8d
$LN37@Build1Word:

; 579  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  0016d	4b 8d 0c 89	 lea	 rcx, QWORD PTR [r9+r9*4]
  00171	48 98		 cdqe
  00173	4c 8d 0c 48	 lea	 r9, QWORD PTR [rax+rcx*2]

; 580  :         }
; 581  :         if (sizeof(__UNIT_TYPE) >= sizeof(_UINT32_T))
; 582  :         {
; 583  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00177	0f b7 4a 16	 movzx	 ecx, WORD PTR [rdx+22]

; 42   :         if (c >= L'0' && c <= L'9')

  0017b	8d 41 d0	 lea	 eax, DWORD PTR [rcx-48]
  0017e	66 83 f8 09	 cmp	 ax, 9
  00182	77 08		 ja	 SHORT $LN41@Build1Word

; 43   :             return (c - L'0');

  00184	0f b7 c1	 movzx	 eax, cx
  00187	83 e8 30	 sub	 eax, 48			; 00000030H
  0018a	eb 03		 jmp	 SHORT $LN40@Build1Word
$LN41@Build1Word:

; 44   :         return (-1);

  0018c	41 8b c0	 mov	 eax, r8d
$LN40@Build1Word:

; 580  :         }
; 581  :         if (sizeof(__UNIT_TYPE) >= sizeof(_UINT32_T))
; 582  :         {
; 583  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  0018f	4b 8d 0c 89	 lea	 rcx, QWORD PTR [r9+r9*4]
  00193	48 98		 cdqe
  00195	4c 8d 0c 48	 lea	 r9, QWORD PTR [rax+rcx*2]

; 584  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00199	0f b7 4a 18	 movzx	 ecx, WORD PTR [rdx+24]

; 42   :         if (c >= L'0' && c <= L'9')

  0019d	8d 41 d0	 lea	 eax, DWORD PTR [rcx-48]
  001a0	66 83 f8 09	 cmp	 ax, 9
  001a4	77 08		 ja	 SHORT $LN44@Build1Word

; 43   :             return (c - L'0');

  001a6	0f b7 c1	 movzx	 eax, cx
  001a9	83 e8 30	 sub	 eax, 48			; 00000030H
  001ac	eb 03		 jmp	 SHORT $LN43@Build1Word
$LN44@Build1Word:

; 44   :         return (-1);

  001ae	41 8b c0	 mov	 eax, r8d
$LN43@Build1Word:

; 584  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  001b1	4b 8d 0c 89	 lea	 rcx, QWORD PTR [r9+r9*4]
  001b5	48 98		 cdqe
  001b7	4c 8d 0c 48	 lea	 r9, QWORD PTR [rax+rcx*2]

; 585  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  001bb	0f b7 4a 1a	 movzx	 ecx, WORD PTR [rdx+26]

; 42   :         if (c >= L'0' && c <= L'9')

  001bf	8d 41 d0	 lea	 eax, DWORD PTR [rcx-48]
  001c2	66 83 f8 09	 cmp	 ax, 9
  001c6	77 08		 ja	 SHORT $LN47@Build1Word

; 43   :             return (c - L'0');

  001c8	0f b7 c1	 movzx	 eax, cx
  001cb	83 e8 30	 sub	 eax, 48			; 00000030H
  001ce	eb 03		 jmp	 SHORT $LN46@Build1Word
$LN47@Build1Word:

; 44   :         return (-1);

  001d0	41 8b c0	 mov	 eax, r8d
$LN46@Build1Word:

; 585  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  001d3	4b 8d 0c 89	 lea	 rcx, QWORD PTR [r9+r9*4]
  001d7	48 98		 cdqe
  001d9	4c 8d 0c 48	 lea	 r9, QWORD PTR [rax+rcx*2]

; 586  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  001dd	0f b7 4a 1c	 movzx	 ecx, WORD PTR [rdx+28]

; 42   :         if (c >= L'0' && c <= L'9')

  001e1	8d 41 d0	 lea	 eax, DWORD PTR [rcx-48]
  001e4	66 83 f8 09	 cmp	 ax, 9
  001e8	77 08		 ja	 SHORT $LN50@Build1Word

; 43   :             return (c - L'0');

  001ea	0f b7 c1	 movzx	 eax, cx
  001ed	83 e8 30	 sub	 eax, 48			; 00000030H
  001f0	eb 03		 jmp	 SHORT $LN49@Build1Word
$LN50@Build1Word:

; 44   :         return (-1);

  001f2	41 8b c0	 mov	 eax, r8d
$LN49@Build1Word:

; 586  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  001f5	4b 8d 0c 89	 lea	 rcx, QWORD PTR [r9+r9*4]
  001f9	48 98		 cdqe
  001fb	4c 8d 0c 48	 lea	 r9, QWORD PTR [rax+rcx*2]

; 587  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  001ff	0f b7 4a 1e	 movzx	 ecx, WORD PTR [rdx+30]

; 42   :         if (c >= L'0' && c <= L'9')

  00203	8d 41 d0	 lea	 eax, DWORD PTR [rcx-48]
  00206	66 83 f8 09	 cmp	 ax, 9
  0020a	77 08		 ja	 SHORT $LN53@Build1Word

; 43   :             return (c - L'0');

  0020c	0f b7 c1	 movzx	 eax, cx
  0020f	83 e8 30	 sub	 eax, 48			; 00000030H
  00212	eb 03		 jmp	 SHORT $LN52@Build1Word
$LN53@Build1Word:

; 44   :         return (-1);

  00214	41 8b c0	 mov	 eax, r8d
$LN52@Build1Word:

; 587  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00217	4b 8d 0c 89	 lea	 rcx, QWORD PTR [r9+r9*4]
  0021b	48 98		 cdqe
  0021d	4c 8d 0c 48	 lea	 r9, QWORD PTR [rax+rcx*2]

; 588  :         }
; 589  :         if (sizeof(__UNIT_TYPE) >= sizeof(_UINT16_T))
; 590  :         {
; 591  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00221	0f b7 4a 20	 movzx	 ecx, WORD PTR [rdx+32]

; 42   :         if (c >= L'0' && c <= L'9')

  00225	8d 41 d0	 lea	 eax, DWORD PTR [rcx-48]
  00228	66 83 f8 09	 cmp	 ax, 9
  0022c	77 08		 ja	 SHORT $LN56@Build1Word

; 43   :             return (c - L'0');

  0022e	0f b7 c1	 movzx	 eax, cx
  00231	83 e8 30	 sub	 eax, 48			; 00000030H
  00234	eb 03		 jmp	 SHORT $LN55@Build1Word
$LN56@Build1Word:

; 44   :         return (-1);

  00236	41 8b c0	 mov	 eax, r8d
$LN55@Build1Word:

; 588  :         }
; 589  :         if (sizeof(__UNIT_TYPE) >= sizeof(_UINT16_T))
; 590  :         {
; 591  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00239	4b 8d 0c 89	 lea	 rcx, QWORD PTR [r9+r9*4]
  0023d	48 98		 cdqe
  0023f	4c 8d 0c 48	 lea	 r9, QWORD PTR [rax+rcx*2]

; 592  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00243	0f b7 4a 22	 movzx	 ecx, WORD PTR [rdx+34]

; 42   :         if (c >= L'0' && c <= L'9')

  00247	8d 41 d0	 lea	 eax, DWORD PTR [rcx-48]
  0024a	66 83 f8 09	 cmp	 ax, 9
  0024e	77 08		 ja	 SHORT $LN59@Build1Word

; 43   :             return (c - L'0');

  00250	0f b7 c1	 movzx	 eax, cx
  00253	83 e8 30	 sub	 eax, 48			; 00000030H
  00256	eb 03		 jmp	 SHORT $LN58@Build1Word
$LN59@Build1Word:

; 44   :         return (-1);

  00258	41 8b c0	 mov	 eax, r8d
$LN58@Build1Word:

; 592  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  0025b	4b 8d 0c 89	 lea	 rcx, QWORD PTR [r9+r9*4]
  0025f	48 98		 cdqe
  00261	4c 8d 0c 48	 lea	 r9, QWORD PTR [rax+rcx*2]

; 593  :         }
; 594  :         if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))
; 595  :         {
; 596  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00265	0f b7 4a 24	 movzx	 ecx, WORD PTR [rdx+36]

; 42   :         if (c >= L'0' && c <= L'9')

  00269	8d 41 d0	 lea	 eax, DWORD PTR [rcx-48]
  0026c	66 83 f8 09	 cmp	 ax, 9
  00270	77 08		 ja	 SHORT $LN61@Build1Word

; 43   :             return (c - L'0');

  00272	44 0f b7 c1	 movzx	 r8d, cx
  00276	41 83 e8 30	 sub	 r8d, 48			; 00000030H
$LN61@Build1Word:

; 593  :         }
; 594  :         if (sizeof(__UNIT_TYPE) >= sizeof(_BYTE_T))
; 595  :         {
; 596  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  0027a	49 63 c0	 movsxd	 rax, r8d
  0027d	4b 8d 0c 89	 lea	 rcx, QWORD PTR [r9+r9*4]
  00281	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]

; 597  :         }
; 598  :         return (x);
; 599  :     }

  00285	c3		 ret	 0
?Build1WordFromDecimalString@Internal@Core@Math@Palmtree@@YA_KPEA_W@Z ENDP ; Palmtree::Math::Core::Internal::Build1WordFromDecimalString
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?BuildLeading1WordFromDecimalString@Internal@Core@Math@Palmtree@@YA_KPEA_W_K@Z
_TEXT	SEGMENT
in_ptr$ = 8
count$ = 16
?BuildLeading1WordFromDecimalString@Internal@Core@Math@Palmtree@@YA_KPEA_W_K@Z PROC ; Palmtree::Math::Core::Internal::BuildLeading1WordFromDecimalString, COMDAT

; 556  :         __UNIT_TYPE x = 0;

  00000	45 33 c9	 xor	 r9d, r9d
  00003	4c 8b d2	 mov	 r10, rdx
  00006	4c 8b c1	 mov	 r8, rcx

; 557  :         while (count > 0)

  00009	48 85 d2	 test	 rdx, rdx
  0000c	74 31		 je	 SHORT $LN12@BuildLeadi
  0000e	66 90		 npad	 2
$LL2@BuildLeadi:

; 558  :         {
; 559  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  00010	41 0f b7 08	 movzx	 ecx, WORD PTR [r8]
  00014	4d 8d 40 02	 lea	 r8, QWORD PTR [r8+2]

; 42   :         if (c >= L'0' && c <= L'9')

  00018	8d 41 d0	 lea	 eax, DWORD PTR [rcx-48]
  0001b	66 83 f8 09	 cmp	 ax, 9
  0001f	77 08		 ja	 SHORT $LN6@BuildLeadi

; 43   :             return (c - L'0');

  00021	0f b7 c1	 movzx	 eax, cx
  00024	83 e8 30	 sub	 eax, 48			; 00000030H
  00027	eb 05		 jmp	 SHORT $LN5@BuildLeadi
$LN6@BuildLeadi:

; 44   :         return (-1);

  00029	b8 ff ff ff ff	 mov	 eax, -1
$LN5@BuildLeadi:

; 558  :         {
; 559  :             x = x * 10 + ParseDecimalDigit(*in_ptr++);

  0002e	48 63 c8	 movsxd	 rcx, eax
  00031	4b 8d 14 89	 lea	 rdx, QWORD PTR [r9+r9*4]
  00035	4c 8d 0c 51	 lea	 r9, QWORD PTR [rcx+rdx*2]

; 560  :             --count;

  00039	49 83 ea 01	 sub	 r10, 1
  0003d	75 d1		 jne	 SHORT $LL2@BuildLeadi
$LN12@BuildLeadi:

; 561  :         }
; 562  :         return (x);
; 563  :     }

  0003f	49 8b c1	 mov	 rax, r9
  00042	c3		 ret	 0
?BuildLeading1WordFromDecimalString@Internal@Core@Math@Palmtree@@YA_KPEA_W_K@Z ENDP ; Palmtree::Math::Core::Internal::BuildLeading1WordFromDecimalString
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z
_TEXT	SEGMENT
state$ = 80
__$ArrayPad$ = 400
in_ptr$ = 432
number_styles$ = 440
format_option$ = 448
sign$ = 456
int_part_buf$ = 464
int_part_buf_size$ = 472
frac_part_buf$ = 480
frac_part_buf_size$ = 488
?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z PROC ; Palmtree::Math::Core::Internal::ParseAsDecimalNumberString, COMDAT

; 549  :     {

  00000	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H
  00007	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0000e	48 33 c4	 xor	 rax, rsp
  00011	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 550  :         ParserState state(in_ptr, number_styles, format_option, sign, int_part_buf, int_part_buf_size, frac_part_buf, frac_part_buf_size);

  00019	48 8b 84 24 e8
	01 00 00	 mov	 rax, QWORD PTR frac_part_buf_size$[rsp]
  00021	4d 8b d9	 mov	 r11, r9
  00024	4c 8b 94 24 d0
	01 00 00	 mov	 r10, QWORD PTR int_part_buf$[rsp]
  0002c	4d 8b c8	 mov	 r9, r8
  0002f	4c 8b 84 24 e0
	01 00 00	 mov	 r8, QWORD PTR frac_part_buf$[rsp]
  00037	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  0003c	48 8b 84 24 d8
	01 00 00	 mov	 rax, QWORD PTR int_part_buf_size$[rsp]
  00044	4c 89 44 24 38	 mov	 QWORD PTR [rsp+56], r8
  00049	44 8b c2	 mov	 r8d, edx
  0004c	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00051	48 8b d1	 mov	 rdx, rcx
  00054	4c 89 54 24 28	 mov	 QWORD PTR [rsp+40], r10
  00059	48 8d 4c 24 50	 lea	 rcx, QWORD PTR state$[rsp]
  0005e	4c 89 5c 24 20	 mov	 QWORD PTR [rsp+32], r11
  00063	e8 00 00 00 00	 call	 ??0ParserState@Internal@Core@Math@Palmtree@@QEAA@PEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z ; Palmtree::Math::Core::Internal::ParserState::ParserState

; 551  :         return (state.ParseAsDecimalNumberString());

  00068	48 8d 4c 24 50	 lea	 rcx, QWORD PTR state$[rsp]
  0006d	e8 00 00 00 00	 call	 ?ParseAsDecimalNumberString@ParserState@Internal@Core@Math@Palmtree@@QEAAHXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsDecimalNumberString

; 552  :     }

  00072	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0007a	48 33 cc	 xor	 rcx, rsp
  0007d	e8 00 00 00 00	 call	 __security_check_cookie
  00082	48 81 c4 a8 01
	00 00		 add	 rsp, 424		; 000001a8H
  00089	c3		 ret	 0
?ParseAsDecimalNumberString@Internal@Core@Math@Palmtree@@YAHPEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z ENDP ; Palmtree::Math::Core::Internal::ParseAsDecimalNumberString
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ PROC ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence, COMDAT

; 527  :         {

$LN23:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx
  00009	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@ParseAsFra:

; 528  :             for (;;)
; 529  :             {
; 530  :                 wchar_t c = _source.PeekChar();

  00010	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00013	48 8b cb	 mov	 rcx, rbx
  00016	ff 10		 call	 QWORD PTR [rax]
  00018	0f b7 d0	 movzx	 edx, ax

; 42   :         if (c >= L'0' && c <= L'9')

  0001b	44 8b c2	 mov	 r8d, edx
  0001e	8d 4a d0	 lea	 ecx, DWORD PTR [rdx-48]

; 43   :             return (c - L'0');

  00021	8d 42 d0	 lea	 eax, DWORD PTR [rdx-48]
  00024	66 83 f9 09	 cmp	 cx, 9
  00028	76 05		 jbe	 SHORT $LN10@ParseAsFra

; 44   :         return (-1);

  0002a	b8 ff ff ff ff	 mov	 eax, -1
$LN10@ParseAsFra:

; 531  :                 if (ParseDecimalDigit(c) >= 0)

  0002f	85 c0		 test	 eax, eax
  00031	79 39		 jns	 SHORT $LN21@ParseAsFra

; 532  :                 {
; 533  :                     _frac_part.Write(c);
; 534  :                     _source.Progress();
; 535  :                 }
; 536  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER) && ParseHexDigit(c) >= 0)

  00033	f7 43 60 00 02
	00 00		 test	 DWORD PTR [rbx+96], 512	; 00000200H
  0003a	74 46		 je	 SHORT $LN16@ParseAsFra

; 49   :         if (c >= L'0' && c <= L'9')

  0003c	66 83 f9 09	 cmp	 cx, 9
  00040	77 07		 ja	 SHORT $LN14@ParseAsFra

; 50   :             return (c - L'0');

  00042	b8 d0 ff ff ff	 mov	 eax, -48		; ffffffffffffffd0H
  00047	eb 1e		 jmp	 SHORT $LN13@ParseAsFra
$LN14@ParseAsFra:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  00049	8d 42 9f	 lea	 eax, DWORD PTR [rdx-97]
  0004c	66 83 f8 05	 cmp	 ax, 5
  00050	77 07		 ja	 SHORT $LN15@ParseAsFra

; 53   :             return (c - L'a' + 10);

  00052	b8 a9 ff ff ff	 mov	 eax, -87		; ffffffffffffffa9H
  00057	eb 0e		 jmp	 SHORT $LN13@ParseAsFra
$LN15@ParseAsFra:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  00059	8d 42 bf	 lea	 eax, DWORD PTR [rdx-65]
  0005c	66 83 f8 05	 cmp	 ax, 5
  00060	77 20		 ja	 SHORT $LN16@ParseAsFra

; 56   :             return (c - L'A' + 10);

  00062	b8 c9 ff ff ff	 mov	 eax, -55		; ffffffffffffffc9H
$LN13@ParseAsFra:

; 532  :                 {
; 533  :                     _frac_part.Write(c);
; 534  :                     _source.Progress();
; 535  :                 }
; 536  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER) && ParseHexDigit(c) >= 0)

  00067	41 03 c0	 add	 eax, r8d
  0006a	78 16		 js	 SHORT $LN16@ParseAsFra
$LN21@ParseAsFra:

; 528  :             for (;;)
; 529  :             {
; 530  :                 wchar_t c = _source.PeekChar();

  0006c	48 8b 43 38	 mov	 rax, QWORD PTR [rbx+56]
  00070	48 8d 4b 38	 lea	 rcx, QWORD PTR [rbx+56]
  00074	ff 50 08	 call	 QWORD PTR [rax+8]
  00077	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0007a	48 8b cb	 mov	 rcx, rbx
  0007d	ff 50 08	 call	 QWORD PTR [rax+8]
  00080	eb 8e		 jmp	 SHORT $LL2@ParseAsFra
$LN16@ParseAsFra:

; 537  :                 {
; 538  :                     _frac_part.Write(c);
; 539  :                     _source.Progress();
; 540  :                 }
; 541  :                 else
; 542  :                     break;
; 543  :             }
; 544  :         }

  00082	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00086	5b		 pop	 rbx
  00087	c3		 ret	 0
?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ENDP ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ PROC ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence, COMDAT

; 503  :         {

$LN29:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx
  00009	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  0000e	66 90		 npad	 2
$LL2@ParseAsInt:

; 504  :             for (;;)
; 505  :             {
; 506  :                 wchar_t c = _source.PeekChar();

  00010	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00013	48 8b cb	 mov	 rcx, rbx
  00016	ff 10		 call	 QWORD PTR [rax]
  00018	0f b7 d0	 movzx	 edx, ax

; 42   :         if (c >= L'0' && c <= L'9')

  0001b	44 8b ca	 mov	 r9d, edx
  0001e	44 8d 42 d0	 lea	 r8d, DWORD PTR [rdx-48]

; 43   :             return (c - L'0');

  00022	8d 42 d0	 lea	 eax, DWORD PTR [rdx-48]
  00025	66 41 83 f8 09	 cmp	 r8w, 9
  0002a	76 05		 jbe	 SHORT $LN14@ParseAsInt

; 44   :         return (-1);

  0002c	b8 ff ff ff ff	 mov	 eax, -1
$LN14@ParseAsInt:

; 507  :                 if (ParseDecimalDigit(c) >= 0)

  00031	85 c0		 test	 eax, eax
  00033	79 3a		 jns	 SHORT $LN26@ParseAsInt

; 508  :                 {
; 509  :                     _int_part.Write(c);
; 510  :                     _source.Progress();
; 511  :                 }
; 512  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER) && ParseHexDigit(c) >= 0)

  00035	8b 4b 60	 mov	 ecx, DWORD PTR [rbx+96]
  00038	0f ba e1 09	 bt	 ecx, 9
  0003c	73 47		 jae	 SHORT $LN7@ParseAsInt

; 49   :         if (c >= L'0' && c <= L'9')

  0003e	66 41 83 f8 09	 cmp	 r8w, 9
  00043	77 07		 ja	 SHORT $LN18@ParseAsInt

; 50   :             return (c - L'0');

  00045	b8 d0 ff ff ff	 mov	 eax, -48		; ffffffffffffffd0H
  0004a	eb 1e		 jmp	 SHORT $LN17@ParseAsInt
$LN18@ParseAsInt:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  0004c	8d 42 9f	 lea	 eax, DWORD PTR [rdx-97]
  0004f	66 83 f8 05	 cmp	 ax, 5
  00053	77 07		 ja	 SHORT $LN19@ParseAsInt

; 53   :             return (c - L'a' + 10);

  00055	b8 a9 ff ff ff	 mov	 eax, -87		; ffffffffffffffa9H
  0005a	eb 0e		 jmp	 SHORT $LN17@ParseAsInt
$LN19@ParseAsInt:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  0005c	8d 42 bf	 lea	 eax, DWORD PTR [rdx-65]
  0005f	66 83 f8 05	 cmp	 ax, 5
  00063	77 20		 ja	 SHORT $LN7@ParseAsInt

; 56   :             return (c - L'A' + 10);

  00065	b8 c9 ff ff ff	 mov	 eax, -55		; ffffffffffffffc9H
$LN17@ParseAsInt:

; 508  :                 {
; 509  :                     _int_part.Write(c);
; 510  :                     _source.Progress();
; 511  :                 }
; 512  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_HEX_SPECIFIER) && ParseHexDigit(c) >= 0)

  0006a	41 03 c1	 add	 eax, r9d
  0006d	78 16		 js	 SHORT $LN7@ParseAsInt
$LN26@ParseAsInt:

; 504  :             for (;;)
; 505  :             {
; 506  :                 wchar_t c = _source.PeekChar();

  0006f	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  00073	48 8d 4b 10	 lea	 rcx, QWORD PTR [rbx+16]
  00077	ff 50 08	 call	 QWORD PTR [rax+8]
  0007a	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0007d	48 8b cb	 mov	 rcx, rbx
  00080	ff 50 08	 call	 QWORD PTR [rax+8]
  00083	eb 8b		 jmp	 SHORT $LL2@ParseAsInt
$LN7@ParseAsInt:

; 513  :                 {
; 514  :                     _int_part.Write(c);
; 515  :                     _source.Progress();
; 516  :                 }
; 517  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_THOUSANDS) && _source.StartsWith(_group_separator))

  00085	f6 c1 40	 test	 cl, 64			; 00000040H
  00088	74 5a		 je	 SHORT $LN11@ParseAsInt
  0008a	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0008d	48 8d 93 f8 00
	00 00		 lea	 rdx, QWORD PTR [rbx+248]
  00094	48 8b cb	 mov	 rcx, rbx
  00097	ff 50 10	 call	 QWORD PTR [rax+16]
  0009a	85 c0		 test	 eax, eax
  0009c	74 15		 je	 SHORT $LN24@ParseAsInt

; 518  :                     _source.SkipString(_group_separator);

  0009e	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  000a1	48 8d 93 f8 00
	00 00		 lea	 rdx, QWORD PTR [rbx+248]
  000a8	48 8b cb	 mov	 rcx, rbx
  000ab	ff 50 18	 call	 QWORD PTR [rax+24]
  000ae	e9 5d ff ff ff	 jmp	 $LL2@ParseAsInt
$LN24@ParseAsInt:
  000b3	8b 4b 60	 mov	 ecx, DWORD PTR [rbx+96]

; 519  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_THOUSANDS) && _source.StartsWith(_secondary_group_separator))

  000b6	f6 c1 40	 test	 cl, 64			; 00000040H
  000b9	74 29		 je	 SHORT $LN11@ParseAsInt
  000bb	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  000be	48 8d 93 1a 01
	00 00		 lea	 rdx, QWORD PTR [rbx+282]
  000c5	48 8b cb	 mov	 rcx, rbx
  000c8	ff 50 10	 call	 QWORD PTR [rax+16]
  000cb	85 c0		 test	 eax, eax
  000cd	74 15		 je	 SHORT $LN11@ParseAsInt

; 520  :                     _source.SkipString(_secondary_group_separator);

  000cf	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  000d2	48 8d 93 1a 01
	00 00		 lea	 rdx, QWORD PTR [rbx+282]
  000d9	48 8b cb	 mov	 rcx, rbx
  000dc	ff 50 18	 call	 QWORD PTR [rax+24]

; 521  :                 else
; 522  :                     break;
; 523  :             }

  000df	e9 2c ff ff ff	 jmp	 $LL2@ParseAsInt
$LN11@ParseAsInt:
  000e4	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]

; 524  :         }

  000e9	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ed	5b		 pop	 rbx
  000ee	c3		 ret	 0
?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ENDP ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?ParseAsHexNumberString@ParserState@Internal@Core@Math@Palmtree@@QEAAHXZ
_TEXT	SEGMENT
this$ = 48
?ParseAsHexNumberString@ParserState@Internal@Core@Math@Palmtree@@QEAAHXZ PROC ; Palmtree::Math::Core::Internal::ParserState::ParseAsHexNumberString, COMDAT

; 479  :         {

$LN37:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 480  :             if (_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE)

  00006	f6 41 60 01	 test	 BYTE PTR [rcx+96], 1
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	74 34		 je	 SHORT $LN34@ParseAsHex
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 92   :                 switch (PeekChar())

  0000f	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00012	ff 10		 call	 QWORD PTR [rax]
  00014	0f b7 c0	 movzx	 eax, ax
  00017	83 f8 09	 cmp	 eax, 9
  0001a	72 27		 jb	 SHORT $LN34@ParseAsHex
  0001c	0f 1f 40 00	 npad	 4
$LL7@ParseAsHex:
  00020	83 f8 0d	 cmp	 eax, 13
  00023	76 05		 jbe	 SHORT $LN12@ParseAsHex
  00025	83 f8 20	 cmp	 eax, 32			; 00000020H
  00028	75 19		 jne	 SHORT $LN34@ParseAsHex
$LN12@ParseAsHex:

; 93   :                 {
; 94   :                 case L' ':
; 95   :                 case L'\t':
; 96   :                 case L'\n':
; 97   :                 case L'\r':
; 98   :                 case L'\f':
; 99   :                 case L'\v':
; 100  :                     break;
; 101  :                 default:
; 102  :                     return;
; 103  :                 }
; 104  :                 Progress();

  0002a	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0002d	48 8b cb	 mov	 rcx, rbx
  00030	ff 50 08	 call	 QWORD PTR [rax+8]
  00033	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00036	48 8b cb	 mov	 rcx, rbx
  00039	ff 10		 call	 QWORD PTR [rax]
  0003b	0f b7 c0	 movzx	 eax, ax
  0003e	83 f8 09	 cmp	 eax, 9
  00041	73 dd		 jae	 SHORT $LL7@ParseAsHex
$LN34@ParseAsHex:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 482  :             ParseAsIntegerPartNumberSequence();

  00043	48 8b cb	 mov	 rcx, rbx
  00046	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence

; 483  :             if (_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

  0004b	f6 43 60 02	 test	 BYTE PTR [rbx+96], 2
  0004f	74 33		 je	 SHORT $LN35@ParseAsHex
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 92   :                 switch (PeekChar())

  00051	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00054	48 8b cb	 mov	 rcx, rbx
  00057	ff 10		 call	 QWORD PTR [rax]
  00059	0f b7 c0	 movzx	 eax, ax
  0005c	83 f8 09	 cmp	 eax, 9
  0005f	72 23		 jb	 SHORT $LN35@ParseAsHex
$LL16@ParseAsHex:
  00061	83 f8 0d	 cmp	 eax, 13
  00064	76 05		 jbe	 SHORT $LN21@ParseAsHex
  00066	83 f8 20	 cmp	 eax, 32			; 00000020H
  00069	75 19		 jne	 SHORT $LN35@ParseAsHex
$LN21@ParseAsHex:

; 93   :                 {
; 94   :                 case L' ':
; 95   :                 case L'\t':
; 96   :                 case L'\n':
; 97   :                 case L'\r':
; 98   :                 case L'\f':
; 99   :                 case L'\v':
; 100  :                     break;
; 101  :                 default:
; 102  :                     return;
; 103  :                 }
; 104  :                 Progress();

  0006b	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0006e	48 8b cb	 mov	 rcx, rbx
  00071	ff 50 08	 call	 QWORD PTR [rax+8]
  00074	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00077	48 8b cb	 mov	 rcx, rbx
  0007a	ff 10		 call	 QWORD PTR [rax]
  0007c	0f b7 c0	 movzx	 eax, ax
  0007f	83 f8 09	 cmp	 eax, 9
  00082	73 dd		 jae	 SHORT $LL16@ParseAsHex
$LN35@ParseAsHex:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 485  :             if (_source.PeekChar() != L'\0')

  00084	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00087	48 8b cb	 mov	 rcx, rbx
  0008a	ff 10		 call	 QWORD PTR [rax]
  0008c	33 c9		 xor	 ecx, ecx
  0008e	66 85 c0	 test	 ax, ax
  00091	0f 94 c1	 sete	 cl
  00094	8b c1		 mov	 eax, ecx

; 486  :                 return (0);
; 487  :             return (1);
; 488  :         }

  00096	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009a	5b		 pop	 rbx
  0009b	c3		 ret	 0
?ParseAsHexNumberString@ParserState@Internal@Core@Math@Palmtree@@QEAAHXZ ENDP ; Palmtree::Math::Core::Internal::ParserState::ParseAsHexNumberString
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?ParseAsDecimalNumberString@ParserState@Internal@Core@Math@Palmtree@@QEAAHXZ
_TEXT	SEGMENT
this$ = 48
?ParseAsDecimalNumberString@ParserState@Internal@Core@Math@Palmtree@@QEAAHXZ PROC ; Palmtree::Math::Core::Internal::ParserState::ParseAsDecimalNumberString, COMDAT

; 130  :         {

$LN244:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 131  :             if (_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE)

  0000a	f6 41 60 01	 test	 BYTE PTR [rcx+96], 1
  0000e	48 8b d9	 mov	 rbx, rcx
  00011	74 30		 je	 SHORT $LN208@ParseAsDec
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 92   :                 switch (PeekChar())

  00013	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00016	ff 10		 call	 QWORD PTR [rax]
  00018	0f b7 c0	 movzx	 eax, ax
  0001b	83 f8 09	 cmp	 eax, 9
  0001e	72 23		 jb	 SHORT $LN208@ParseAsDec
$LL116@ParseAsDec:
  00020	83 f8 0d	 cmp	 eax, 13
  00023	76 05		 jbe	 SHORT $LN121@ParseAsDec
  00025	83 f8 20	 cmp	 eax, 32			; 00000020H
  00028	75 19		 jne	 SHORT $LN208@ParseAsDec
$LN121@ParseAsDec:

; 93   :                 {
; 94   :                 case L' ':
; 95   :                 case L'\t':
; 96   :                 case L'\n':
; 97   :                 case L'\r':
; 98   :                 case L'\f':
; 99   :                 case L'\v':
; 100  :                     break;
; 101  :                 default:
; 102  :                     return;
; 103  :                 }
; 104  :                 Progress();

  0002a	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0002d	48 8b cb	 mov	 rcx, rbx
  00030	ff 50 08	 call	 QWORD PTR [rax+8]
  00033	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00036	48 8b cb	 mov	 rcx, rbx
  00039	ff 10		 call	 QWORD PTR [rax]
  0003b	0f b7 c0	 movzx	 eax, ax
  0003e	83 f8 09	 cmp	 eax, 9
  00041	73 dd		 jae	 SHORT $LL116@ParseAsDec
$LN208@ParseAsDec:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 133  :             if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  00043	8b 43 60	 mov	 eax, DWORD PTR [rbx+96]
  00046	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
  0004b	0f ba e0 08	 bt	 eax, 8
  0004f	0f 83 f1 01 00
	00		 jae	 $LN174@ParseAsDec
  00055	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00058	48 8d 53 70	 lea	 rdx, QWORD PTR [rbx+112]
  0005c	48 8b cb	 mov	 rcx, rbx
  0005f	ff 50 10	 call	 QWORD PTR [rax+16]
  00062	85 c0		 test	 eax, eax
  00064	0f 84 d9 01 00
	00		 je	 $LN173@ParseAsDec

; 134  :             {
; 135  :                 _source.SkipString(_currency_symbol);

  0006a	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0006d	48 8d 53 70	 lea	 rdx, QWORD PTR [rbx+112]
  00071	48 8b cb	 mov	 rcx, rbx
  00074	ff 50 18	 call	 QWORD PTR [rax+24]

; 136  :                 if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE) && _source.StartsWith(L" "))

  00077	f6 43 60 01	 test	 BYTE PTR [rbx+96], 1
  0007b	74 24		 je	 SHORT $LN5@ParseAsDec
  0007d	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00080	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13HOIJIPNN@?$AA?5@
  00087	48 8b cb	 mov	 rcx, rbx
  0008a	ff 50 10	 call	 QWORD PTR [rax+16]
  0008d	85 c0		 test	 eax, eax
  0008f	74 10		 je	 SHORT $LN5@ParseAsDec

; 137  :                     _source.SkipString(L" ");

  00091	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00094	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13HOIJIPNN@?$AA?5@
  0009b	48 8b cb	 mov	 rcx, rbx
  0009e	ff 50 18	 call	 QWORD PTR [rax+24]
$LN5@ParseAsDec:

; 138  :                 if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_SIGN) && _source.StartsWith(_positive_sign))

  000a1	8b 43 60	 mov	 eax, DWORD PTR [rbx+96]
  000a4	a8 04		 test	 al, 4
  000a6	0f 84 cc 00 00
	00		 je	 $LN201@ParseAsDec
  000ac	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  000af	48 8d 93 92 00
	00 00		 lea	 rdx, QWORD PTR [rbx+146]
  000b6	48 8b cb	 mov	 rcx, rbx
  000b9	ff 50 10	 call	 QWORD PTR [rax+16]
  000bc	85 c0		 test	 eax, eax
  000be	74 10		 je	 SHORT $LN171@ParseAsDec

; 139  :                 {
; 140  :                     *_sign = 1;

  000c0	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]

; 141  :                     _source.SkipString(_positive_sign);

  000c4	48 8d 93 92 00
	00 00		 lea	 rdx, QWORD PTR [rbx+146]
  000cb	c6 00 01	 mov	 BYTE PTR [rax], 1

; 142  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)
; 143  :                         ParseAsIntegerPartNumberSequence();
; 144  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))
; 145  :                     {
; 146  :                         _source.SkipString(_decimal_separator);
; 147  :                         _frac_part.Write(L'.');
; 148  :                         ParseAsFractionPartNumberSequence();
; 149  :                     }
; 150  :                 }

  000ce	eb 31		 jmp	 SHORT $LN230@ParseAsDec
$LN171@ParseAsDec:
  000d0	8b 43 60	 mov	 eax, DWORD PTR [rbx+96]

; 151  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)

  000d3	a8 04		 test	 al, 4
  000d5	0f 84 9d 00 00
	00		 je	 $LN201@ParseAsDec
  000db	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  000de	48 8d 93 b4 00
	00 00		 lea	 rdx, QWORD PTR [rbx+180]
  000e5	48 8b cb	 mov	 rcx, rbx
  000e8	ff 50 10	 call	 QWORD PTR [rax+16]
  000eb	85 c0		 test	 eax, eax
  000ed	0f 84 85 00 00
	00		 je	 $LN201@ParseAsDec

; 152  :                 {
; 153  :                     *_sign = -1;

  000f3	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]

; 154  :                     _source.SkipString(_negative_sign);

  000f7	48 8d 93 b4 00
	00 00		 lea	 rdx, QWORD PTR [rbx+180]
  000fe	c6 00 ff	 mov	 BYTE PTR [rax], -1
$LN230@ParseAsDec:

; 471  :             if (_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

  00101	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00104	48 8b cb	 mov	 rcx, rbx
  00107	ff 50 18	 call	 QWORD PTR [rax+24]
$LN35@ParseAsDec:
  0010a	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0010d	48 8b cb	 mov	 rcx, rbx
  00110	ff 10		 call	 QWORD PTR [rax]
  00112	8d 48 d0	 lea	 ecx, DWORD PTR [rax-48]
  00115	66 83 f9 09	 cmp	 cx, 9
  00119	77 0e		 ja	 SHORT $LN12@ParseAsDec
  0011b	66 83 f8 30	 cmp	 ax, 48			; 00000030H
  0011f	72 08		 jb	 SHORT $LN12@ParseAsDec
  00121	48 8b cb	 mov	 rcx, rbx
  00124	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence
$LN12@ParseAsDec:
  00129	f6 43 60 20	 test	 BYTE PTR [rbx+96], 32	; 00000020H
  0012d	0f 84 c5 06 00
	00		 je	 $LN111@ParseAsDec
  00133	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00136	48 8d 93 d6 00
	00 00		 lea	 rdx, QWORD PTR [rbx+214]
  0013d	48 8b cb	 mov	 rcx, rbx
  00140	ff 50 10	 call	 QWORD PTR [rax+16]
  00143	85 c0		 test	 eax, eax
  00145	0f 84 ad 06 00
	00		 je	 $LN111@ParseAsDec
  0014b	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0014e	48 8d 93 d6 00
	00 00		 lea	 rdx, QWORD PTR [rbx+214]
  00155	48 8b cb	 mov	 rcx, rbx
  00158	ff 50 18	 call	 QWORD PTR [rax+24]
  0015b	48 8b 43 38	 mov	 rax, QWORD PTR [rbx+56]
  0015f	48 8d 4b 38	 lea	 rcx, QWORD PTR [rbx+56]
  00163	ba 2e 00 00 00	 mov	 edx, 46			; 0000002eH
  00168	ff 50 08	 call	 QWORD PTR [rax+8]
  0016b	48 8b cb	 mov	 rcx, rbx
  0016e	e8 00 00 00 00	 call	 ?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence
  00173	e9 80 06 00 00	 jmp	 $LN111@ParseAsDec
$LN201@ParseAsDec:

; 155  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)
; 156  :                         ParseAsIntegerPartNumberSequence();
; 157  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))
; 158  :                     {
; 159  :                         _source.SkipString(_decimal_separator);
; 160  :                         _frac_part.Write(L'.');
; 161  :                         ParseAsFractionPartNumberSequence();
; 162  :                     }
; 163  :                 }
; 164  :                 else
; 165  :                 {
; 166  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  00178	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0017b	48 8b cb	 mov	 rcx, rbx
  0017e	ff 10		 call	 QWORD PTR [rax]

; 42   :         if (c >= L'0' && c <= L'9')

  00180	8d 48 d0	 lea	 ecx, DWORD PTR [rax-48]
  00183	66 83 f9 09	 cmp	 cx, 9
  00187	77 0e		 ja	 SHORT $LN14@ParseAsDec

; 155  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)
; 156  :                         ParseAsIntegerPartNumberSequence();
; 157  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))
; 158  :                     {
; 159  :                         _source.SkipString(_decimal_separator);
; 160  :                         _frac_part.Write(L'.');
; 161  :                         ParseAsFractionPartNumberSequence();
; 162  :                     }
; 163  :                 }
; 164  :                 else
; 165  :                 {
; 166  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  00189	66 83 f8 30	 cmp	 ax, 48			; 00000030H
  0018d	72 08		 jb	 SHORT $LN14@ParseAsDec

; 167  :                         ParseAsIntegerPartNumberSequence();

  0018f	48 8b cb	 mov	 rcx, rbx
  00192	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence
$LN14@ParseAsDec:

; 168  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))

  00197	f6 43 60 20	 test	 BYTE PTR [rbx+96], 32	; 00000020H
  0019b	74 3c		 je	 SHORT $LN15@ParseAsDec
  0019d	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  001a0	48 8d 93 d6 00
	00 00		 lea	 rdx, QWORD PTR [rbx+214]
  001a7	48 8b cb	 mov	 rcx, rbx
  001aa	ff 50 10	 call	 QWORD PTR [rax+16]
  001ad	85 c0		 test	 eax, eax
  001af	74 28		 je	 SHORT $LN15@ParseAsDec

; 169  :                     {
; 170  :                         _source.SkipString(_decimal_separator);

  001b1	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  001b4	48 8d 93 d6 00
	00 00		 lea	 rdx, QWORD PTR [rbx+214]
  001bb	48 8b cb	 mov	 rcx, rbx
  001be	ff 50 18	 call	 QWORD PTR [rax+24]

; 171  :                         _frac_part.Write(L'.');

  001c1	48 8b 43 38	 mov	 rax, QWORD PTR [rbx+56]
  001c5	48 8d 4b 38	 lea	 rcx, QWORD PTR [rbx+56]
  001c9	ba 2e 00 00 00	 mov	 edx, 46			; 0000002eH
  001ce	ff 50 08	 call	 QWORD PTR [rax+8]

; 172  :                         ParseAsFractionPartNumberSequence();

  001d1	48 8b cb	 mov	 rcx, rbx
  001d4	e8 00 00 00 00	 call	 ?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence
$LN15@ParseAsDec:

; 173  :                     }
; 174  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))

  001d9	f6 43 60 08	 test	 BYTE PTR [rbx+96], 8
  001dd	0f 84 15 06 00
	00		 je	 $LN111@ParseAsDec
  001e3	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  001e6	48 8d 93 92 00
	00 00		 lea	 rdx, QWORD PTR [rbx+146]
  001ed	48 8b cb	 mov	 rcx, rbx
  001f0	ff 50 10	 call	 QWORD PTR [rax+16]
  001f3	85 c0		 test	 eax, eax
  001f5	74 17		 je	 SHORT $LN16@ParseAsDec

; 175  :                     {
; 176  :                         *_sign = 1;

  001f7	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]

; 177  :                         _source.SkipString(_positive_sign);

  001fb	48 8d 93 92 00
	00 00		 lea	 rdx, QWORD PTR [rbx+146]
  00202	48 8b cb	 mov	 rcx, rbx
  00205	c6 00 01	 mov	 BYTE PTR [rax], 1
  00208	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0020b	ff 50 18	 call	 QWORD PTR [rax+24]
$LN16@ParseAsDec:

; 178  :                     }
; 179  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)

  0020e	f6 43 60 08	 test	 BYTE PTR [rbx+96], 8
$LN226@ParseAsDec:

; 471  :             if (_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

  00212	0f 84 e0 05 00
	00		 je	 $LN111@ParseAsDec
  00218	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0021b	48 8d 93 b4 00
	00 00		 lea	 rdx, QWORD PTR [rbx+180]
  00222	48 8b cb	 mov	 rcx, rbx
  00225	ff 50 10	 call	 QWORD PTR [rax+16]
  00228	85 c0		 test	 eax, eax
  0022a	0f 84 c8 05 00
	00		 je	 $LN111@ParseAsDec
  00230	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]
  00234	48 8d 93 b4 00
	00 00		 lea	 rdx, QWORD PTR [rbx+180]
  0023b	c6 00 ff	 mov	 BYTE PTR [rax], -1
  0023e	e9 ac 05 00 00	 jmp	 $LN212@ParseAsDec
$LN173@ParseAsDec:
  00243	8b 43 60	 mov	 eax, DWORD PTR [rbx+96]
$LN174@ParseAsDec:

; 180  :                     {
; 181  :                         *_sign = -1;
; 182  :                         _source.SkipString(_negative_sign);
; 183  :                     }
; 184  :                     else
; 185  :                     {
; 186  :                     }
; 187  :                 }
; 188  :             }
; 189  :             else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_PARENTHESES) && _source.StartsWith(L"(") /*&& 負数のエラーチェック()*/)

  00246	a8 10		 test	 al, 16
  00248	0f 84 cc 01 00
	00		 je	 $LN203@ParseAsDec
  0024e	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00251	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13LLDNKHDC@?$AA?$CI@
  00258	48 8b cb	 mov	 rcx, rbx
  0025b	ff 50 10	 call	 QWORD PTR [rax+16]
  0025e	85 c0		 test	 eax, eax
  00260	0f 84 b4 01 00
	00		 je	 $LN203@ParseAsDec

; 190  :             {
; 191  :                 *_sign = -1;

  00266	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]

; 192  :                 _source.SkipString(L"(");

  0026a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13LLDNKHDC@?$AA?$CI@
  00271	48 8b cb	 mov	 rcx, rbx
  00274	c6 00 ff	 mov	 BYTE PTR [rax], -1
  00277	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0027a	ff 50 18	 call	 QWORD PTR [rax+24]

; 193  : 
; 194  :                 if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  0027d	f7 43 60 00 01
	00 00		 test	 DWORD PTR [rbx+96], 256	; 00000100H
  00284	0f 84 ba 00 00
	00		 je	 $LN202@ParseAsDec
  0028a	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0028d	48 8d 53 70	 lea	 rdx, QWORD PTR [rbx+112]
  00291	48 8b cb	 mov	 rcx, rbx
  00294	ff 50 10	 call	 QWORD PTR [rax+16]
  00297	85 c0		 test	 eax, eax
  00299	0f 84 a5 00 00
	00		 je	 $LN202@ParseAsDec

; 195  :                 {
; 196  :                     _source.SkipString(_currency_symbol);

  0029f	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  002a2	48 8d 53 70	 lea	 rdx, QWORD PTR [rbx+112]
  002a6	48 8b cb	 mov	 rcx, rbx
  002a9	ff 50 18	 call	 QWORD PTR [rax+24]

; 197  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE) && _source.StartsWith(L" "))

  002ac	f6 43 60 01	 test	 BYTE PTR [rbx+96], 1
  002b0	74 24		 je	 SHORT $LN23@ParseAsDec
  002b2	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  002b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13HOIJIPNN@?$AA?5@
  002bc	48 8b cb	 mov	 rcx, rbx
  002bf	ff 50 10	 call	 QWORD PTR [rax+16]
  002c2	85 c0		 test	 eax, eax
  002c4	74 10		 je	 SHORT $LN23@ParseAsDec

; 198  :                         _source.SkipString(L" ");

  002c6	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  002c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13HOIJIPNN@?$AA?5@
  002d0	48 8b cb	 mov	 rcx, rbx
  002d3	ff 50 18	 call	 QWORD PTR [rax+24]
$LN23@ParseAsDec:

; 199  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  002d6	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  002d9	48 8b cb	 mov	 rcx, rbx
  002dc	ff 10		 call	 QWORD PTR [rax]

; 42   :         if (c >= L'0' && c <= L'9')

  002de	8d 48 d0	 lea	 ecx, DWORD PTR [rax-48]
  002e1	66 83 f9 09	 cmp	 cx, 9
  002e5	77 0e		 ja	 SHORT $LN24@ParseAsDec

; 199  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  002e7	66 83 f8 30	 cmp	 ax, 48			; 00000030H
  002eb	72 08		 jb	 SHORT $LN24@ParseAsDec

; 200  :                         ParseAsIntegerPartNumberSequence();

  002ed	48 8b cb	 mov	 rcx, rbx
  002f0	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence
$LN24@ParseAsDec:

; 201  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))

  002f5	f6 43 60 20	 test	 BYTE PTR [rbx+96], 32	; 00000020H
  002f9	0f 84 f7 00 00
	00		 je	 $LN29@ParseAsDec
  002ff	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00302	48 8d 93 d6 00
	00 00		 lea	 rdx, QWORD PTR [rbx+214]
  00309	48 8b cb	 mov	 rcx, rbx
  0030c	ff 50 10	 call	 QWORD PTR [rax+16]
  0030f	85 c0		 test	 eax, eax
  00311	0f 84 df 00 00
	00		 je	 $LN29@ParseAsDec

; 202  :                     {
; 203  :                         _source.SkipString(_decimal_separator);

  00317	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0031a	48 8d 93 d6 00
	00 00		 lea	 rdx, QWORD PTR [rbx+214]
  00321	48 8b cb	 mov	 rcx, rbx
  00324	ff 50 18	 call	 QWORD PTR [rax+24]

; 204  :                         _frac_part.Write(L'.');

  00327	48 8b 43 38	 mov	 rax, QWORD PTR [rbx+56]
  0032b	48 8d 4b 38	 lea	 rcx, QWORD PTR [rbx+56]
  0032f	ba 2e 00 00 00	 mov	 edx, 46			; 0000002eH
  00334	ff 50 08	 call	 QWORD PTR [rax+8]

; 205  :                         ParseAsFractionPartNumberSequence();

  00337	48 8b cb	 mov	 rcx, rbx
  0033a	e8 00 00 00 00	 call	 ?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence

; 206  :                     }
; 207  :                 }
; 208  :                 else

  0033f	e9 b2 00 00 00	 jmp	 $LN29@ParseAsDec
$LN202@ParseAsDec:

; 209  :                 {
; 210  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  00344	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00347	48 8b cb	 mov	 rcx, rbx
  0034a	ff 10		 call	 QWORD PTR [rax]

; 42   :         if (c >= L'0' && c <= L'9')

  0034c	8d 48 d0	 lea	 ecx, DWORD PTR [rax-48]
  0034f	66 83 f9 09	 cmp	 cx, 9
  00353	77 0e		 ja	 SHORT $LN26@ParseAsDec

; 209  :                 {
; 210  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  00355	66 83 f8 30	 cmp	 ax, 48			; 00000030H
  00359	72 08		 jb	 SHORT $LN26@ParseAsDec

; 211  :                         ParseAsIntegerPartNumberSequence();

  0035b	48 8b cb	 mov	 rcx, rbx
  0035e	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence
$LN26@ParseAsDec:

; 212  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))

  00363	f6 43 60 20	 test	 BYTE PTR [rbx+96], 32	; 00000020H
  00367	74 3c		 je	 SHORT $LN27@ParseAsDec
  00369	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0036c	48 8d 93 d6 00
	00 00		 lea	 rdx, QWORD PTR [rbx+214]
  00373	48 8b cb	 mov	 rcx, rbx
  00376	ff 50 10	 call	 QWORD PTR [rax+16]
  00379	85 c0		 test	 eax, eax
  0037b	74 28		 je	 SHORT $LN27@ParseAsDec

; 213  :                     {
; 214  :                         _source.SkipString(_decimal_separator);

  0037d	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00380	48 8d 93 d6 00
	00 00		 lea	 rdx, QWORD PTR [rbx+214]
  00387	48 8b cb	 mov	 rcx, rbx
  0038a	ff 50 18	 call	 QWORD PTR [rax+24]

; 215  :                         _frac_part.Write(L'.');

  0038d	48 8b 43 38	 mov	 rax, QWORD PTR [rbx+56]
  00391	48 8d 4b 38	 lea	 rcx, QWORD PTR [rbx+56]
  00395	ba 2e 00 00 00	 mov	 edx, 46			; 0000002eH
  0039a	ff 50 08	 call	 QWORD PTR [rax+8]

; 216  :                         ParseAsFractionPartNumberSequence();

  0039d	48 8b cb	 mov	 rcx, rbx
  003a0	e8 00 00 00 00	 call	 ?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence
$LN27@ParseAsDec:

; 217  :                     }
; 218  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE) && _source.StartsWith(L" "))

  003a5	f6 43 60 02	 test	 BYTE PTR [rbx+96], 2
  003a9	74 4b		 je	 SHORT $LN29@ParseAsDec
  003ab	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  003ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13HOIJIPNN@?$AA?5@
  003b5	48 8b cb	 mov	 rcx, rbx
  003b8	ff 50 10	 call	 QWORD PTR [rax+16]
  003bb	85 c0		 test	 eax, eax
  003bd	74 37		 je	 SHORT $LN29@ParseAsDec

; 219  :                     {
; 220  :                         _source.SkipString(L" ");

  003bf	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  003c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13HOIJIPNN@?$AA?5@
  003c9	48 8b cb	 mov	 rcx, rbx
  003cc	ff 50 18	 call	 QWORD PTR [rax+24]

; 221  :                         if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  003cf	f7 43 60 00 01
	00 00		 test	 DWORD PTR [rbx+96], 256	; 00000100H
  003d6	74 1e		 je	 SHORT $LN29@ParseAsDec
  003d8	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  003db	48 8d 53 70	 lea	 rdx, QWORD PTR [rbx+112]
  003df	48 8b cb	 mov	 rcx, rbx
  003e2	ff 50 10	 call	 QWORD PTR [rax+16]
  003e5	85 c0		 test	 eax, eax
  003e7	74 0d		 je	 SHORT $LN29@ParseAsDec

; 222  :                             _source.SkipString(_currency_symbol);

  003e9	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  003ec	48 8d 53 70	 lea	 rdx, QWORD PTR [rbx+112]
  003f0	48 8b cb	 mov	 rcx, rbx
  003f3	ff 50 18	 call	 QWORD PTR [rax+24]
$LN29@ParseAsDec:

; 223  :                     }
; 224  :                 }
; 225  :                 if (!_source.StartsWith(L")"))

  003f6	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  003f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13DIBMAFH@?$AA?$CJ@
  00400	48 8b cb	 mov	 rcx, rbx
  00403	ff 50 10	 call	 QWORD PTR [rax+16]
  00406	85 c0		 test	 eax, eax
  00408	0f 84 7f 03 00
	00		 je	 $LN86@ParseAsDec

; 226  :                     return (0);
; 227  :                 _source.SkipString(L")");

  0040e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13DIBMAFH@?$AA?$CJ@
  00415	e9 d5 03 00 00	 jmp	 $LN212@ParseAsDec
$LN203@ParseAsDec:

; 228  :             }
; 229  :             else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_SIGN) && _source.StartsWith(_positive_sign))

  0041a	f6 43 60 04	 test	 BYTE PTR [rbx+96], 4
  0041e	0f 84 00 02 00
	00		 je	 $LN207@ParseAsDec
  00424	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00427	48 8d 93 92 00
	00 00		 lea	 rdx, QWORD PTR [rbx+146]
  0042e	48 8b cb	 mov	 rcx, rbx
  00431	ff 50 10	 call	 QWORD PTR [rax+16]
  00434	85 c0		 test	 eax, eax
  00436	0f 84 01 01 00
	00		 je	 $LN205@ParseAsDec

; 230  :             {
; 231  :                 *_sign = 1;

  0043c	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]

; 232  :                 _source.SkipString(_positive_sign);

  00440	48 8d 93 92 00
	00 00		 lea	 rdx, QWORD PTR [rbx+146]
  00447	48 8b cb	 mov	 rcx, rbx
  0044a	c6 00 01	 mov	 BYTE PTR [rax], 1
  0044d	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00450	ff 50 18	 call	 QWORD PTR [rax+24]

; 233  :                 if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  00453	f7 43 60 00 01
	00 00		 test	 DWORD PTR [rbx+96], 256	; 00000100H
  0045a	74 4c		 je	 SHORT $LN204@ParseAsDec
  0045c	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0045f	48 8d 53 70	 lea	 rdx, QWORD PTR [rbx+112]
  00463	48 8b cb	 mov	 rcx, rbx
  00466	ff 50 10	 call	 QWORD PTR [rax+16]
  00469	85 c0		 test	 eax, eax
  0046b	74 3b		 je	 SHORT $LN204@ParseAsDec
$LN236@ParseAsDec:

; 471  :             if (_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

  0046d	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00470	48 8d 53 70	 lea	 rdx, QWORD PTR [rbx+112]
  00474	48 8b cb	 mov	 rcx, rbx
  00477	ff 50 18	 call	 QWORD PTR [rax+24]
  0047a	f6 43 60 01	 test	 BYTE PTR [rbx+96], 1
  0047e	0f 84 86 fc ff
	ff		 je	 $LN35@ParseAsDec
  00484	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00487	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13HOIJIPNN@?$AA?5@
  0048e	48 8b cb	 mov	 rcx, rbx
  00491	ff 50 10	 call	 QWORD PTR [rax+16]
  00494	85 c0		 test	 eax, eax
  00496	0f 84 6e fc ff
	ff		 je	 $LN35@ParseAsDec
  0049c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13HOIJIPNN@?$AA?5@
  004a3	e9 59 fc ff ff	 jmp	 $LN230@ParseAsDec
$LN204@ParseAsDec:

; 234  :                 {
; 235  :                     _source.SkipString(_currency_symbol);
; 236  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE) && _source.StartsWith(L" "))
; 237  :                         _source.SkipString(L" ");
; 238  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)
; 239  :                         ParseAsIntegerPartNumberSequence();
; 240  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))
; 241  :                     {
; 242  :                         _source.SkipString(_decimal_separator);
; 243  :                         _frac_part.Write(L'.');
; 244  :                         ParseAsFractionPartNumberSequence();
; 245  :                     }
; 246  :                 }
; 247  :                 else
; 248  :                 {
; 249  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  004a8	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  004ab	48 8b cb	 mov	 rcx, rbx
  004ae	ff 10		 call	 QWORD PTR [rax]

; 42   :         if (c >= L'0' && c <= L'9')

  004b0	8d 48 d0	 lea	 ecx, DWORD PTR [rax-48]
  004b3	66 83 f9 09	 cmp	 cx, 9
  004b7	77 0e		 ja	 SHORT $LN38@ParseAsDec

; 234  :                 {
; 235  :                     _source.SkipString(_currency_symbol);
; 236  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE) && _source.StartsWith(L" "))
; 237  :                         _source.SkipString(L" ");
; 238  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)
; 239  :                         ParseAsIntegerPartNumberSequence();
; 240  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))
; 241  :                     {
; 242  :                         _source.SkipString(_decimal_separator);
; 243  :                         _frac_part.Write(L'.');
; 244  :                         ParseAsFractionPartNumberSequence();
; 245  :                     }
; 246  :                 }
; 247  :                 else
; 248  :                 {
; 249  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  004b9	66 83 f8 30	 cmp	 ax, 48			; 00000030H
  004bd	72 08		 jb	 SHORT $LN38@ParseAsDec

; 250  :                         ParseAsIntegerPartNumberSequence();

  004bf	48 8b cb	 mov	 rcx, rbx
  004c2	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence
$LN38@ParseAsDec:

; 251  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))

  004c7	f6 43 60 20	 test	 BYTE PTR [rbx+96], 32	; 00000020H
  004cb	74 3c		 je	 SHORT $LN39@ParseAsDec
  004cd	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  004d0	48 8d 93 d6 00
	00 00		 lea	 rdx, QWORD PTR [rbx+214]
  004d7	48 8b cb	 mov	 rcx, rbx
  004da	ff 50 10	 call	 QWORD PTR [rax+16]
  004dd	85 c0		 test	 eax, eax
  004df	74 28		 je	 SHORT $LN39@ParseAsDec

; 252  :                     {
; 253  :                         _source.SkipString(_decimal_separator);

  004e1	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  004e4	48 8d 93 d6 00
	00 00		 lea	 rdx, QWORD PTR [rbx+214]
  004eb	48 8b cb	 mov	 rcx, rbx
  004ee	ff 50 18	 call	 QWORD PTR [rax+24]

; 254  :                         _frac_part.Write(L'.');

  004f1	48 8b 43 38	 mov	 rax, QWORD PTR [rbx+56]
  004f5	48 8d 4b 38	 lea	 rcx, QWORD PTR [rbx+56]
  004f9	ba 2e 00 00 00	 mov	 edx, 46			; 0000002eH
  004fe	ff 50 08	 call	 QWORD PTR [rax+8]

; 255  :                         ParseAsFractionPartNumberSequence();

  00501	48 8b cb	 mov	 rcx, rbx
  00504	e8 00 00 00 00	 call	 ?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence
$LN39@ParseAsDec:

; 256  :                     }
; 257  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE) && _source.StartsWith(L" "))

  00509	8b 43 60	 mov	 eax, DWORD PTR [rbx+96]
  0050c	a8 02		 test	 al, 2
  0050e	74 23		 je	 SHORT $LN40@ParseAsDec
  00510	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00513	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13HOIJIPNN@?$AA?5@
  0051a	48 8b cb	 mov	 rcx, rbx
  0051d	ff 50 10	 call	 QWORD PTR [rax+16]
  00520	85 c0		 test	 eax, eax
  00522	74 0c		 je	 SHORT $LN178@ParseAsDec

; 258  :                     {
; 259  :                         _source.SkipString(L" ");

  00524	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13HOIJIPNN@?$AA?5@

; 260  :                         if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))
; 261  :                             _source.SkipString(_currency_symbol);
; 262  :                     }

  0052b	e9 98 02 00 00	 jmp	 $LN216@ParseAsDec
$LN178@ParseAsDec:

; 471  :             if (_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

  00530	8b 43 60	 mov	 eax, DWORD PTR [rbx+96]
$LN40@ParseAsDec:
  00533	a9 00 01 00 00	 test	 eax, 256		; 00000100H
  00538	e9 9b 02 00 00	 jmp	 $LN215@ParseAsDec
$LN205@ParseAsDec:

; 263  :                     else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))
; 264  :                         _source.SkipString(_currency_symbol);
; 265  :                     else
; 266  :                     {
; 267  :                     }
; 268  :                 }
; 269  :             }
; 270  :             else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)

  0053d	f6 43 60 04	 test	 BYTE PTR [rbx+96], 4
  00541	0f 84 dd 00 00
	00		 je	 $LN207@ParseAsDec
  00547	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0054a	48 8d 93 b4 00
	00 00		 lea	 rdx, QWORD PTR [rbx+180]
  00551	48 8b cb	 mov	 rcx, rbx
  00554	ff 50 10	 call	 QWORD PTR [rax+16]
  00557	85 c0		 test	 eax, eax
  00559	0f 84 c5 00 00
	00		 je	 $LN207@ParseAsDec

; 271  :             {
; 272  :                 *_sign = -1;

  0055f	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]

; 273  :                 _source.SkipString(_negative_sign);

  00563	48 8d 93 b4 00
	00 00		 lea	 rdx, QWORD PTR [rbx+180]
  0056a	48 8b cb	 mov	 rcx, rbx
  0056d	c6 00 ff	 mov	 BYTE PTR [rax], -1
  00570	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00573	ff 50 18	 call	 QWORD PTR [rax+24]

; 274  :                 if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))

  00576	f7 43 60 00 01
	00 00		 test	 DWORD PTR [rbx+96], 256	; 00000100H
  0057d	74 15		 je	 SHORT $LN206@ParseAsDec
  0057f	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00582	48 8d 53 70	 lea	 rdx, QWORD PTR [rbx+112]
  00586	48 8b cb	 mov	 rcx, rbx
  00589	ff 50 10	 call	 QWORD PTR [rax+16]
  0058c	85 c0		 test	 eax, eax
  0058e	0f 85 d9 fe ff
	ff		 jne	 $LN236@ParseAsDec
$LN206@ParseAsDec:

; 275  :                 {
; 276  :                     _source.SkipString(_currency_symbol);
; 277  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE) && _source.StartsWith(L" "))
; 278  :                         _source.SkipString(L" ");
; 279  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)
; 280  :                         ParseAsIntegerPartNumberSequence();
; 281  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))
; 282  :                     {
; 283  :                         _source.SkipString(_decimal_separator);
; 284  :                         _frac_part.Write(L'.');
; 285  :                         ParseAsFractionPartNumberSequence();
; 286  :                     }
; 287  :                 }
; 288  :                 else
; 289  :                 {
; 290  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  00594	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00597	48 8b cb	 mov	 rcx, rbx
  0059a	ff 10		 call	 QWORD PTR [rax]

; 42   :         if (c >= L'0' && c <= L'9')

  0059c	8d 48 d0	 lea	 ecx, DWORD PTR [rax-48]
  0059f	66 83 f9 09	 cmp	 cx, 9
  005a3	77 0e		 ja	 SHORT $LN52@ParseAsDec

; 275  :                 {
; 276  :                     _source.SkipString(_currency_symbol);
; 277  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_LEADING_WHITE) && _source.StartsWith(L" "))
; 278  :                         _source.SkipString(L" ");
; 279  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)
; 280  :                         ParseAsIntegerPartNumberSequence();
; 281  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))
; 282  :                     {
; 283  :                         _source.SkipString(_decimal_separator);
; 284  :                         _frac_part.Write(L'.');
; 285  :                         ParseAsFractionPartNumberSequence();
; 286  :                     }
; 287  :                 }
; 288  :                 else
; 289  :                 {
; 290  :                     if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  005a5	66 83 f8 30	 cmp	 ax, 48			; 00000030H
  005a9	72 08		 jb	 SHORT $LN52@ParseAsDec

; 291  :                         ParseAsIntegerPartNumberSequence();

  005ab	48 8b cb	 mov	 rcx, rbx
  005ae	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence
$LN52@ParseAsDec:

; 292  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))

  005b3	f6 43 60 20	 test	 BYTE PTR [rbx+96], 32	; 00000020H
  005b7	74 3c		 je	 SHORT $LN53@ParseAsDec
  005b9	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  005bc	48 8d 93 d6 00
	00 00		 lea	 rdx, QWORD PTR [rbx+214]
  005c3	48 8b cb	 mov	 rcx, rbx
  005c6	ff 50 10	 call	 QWORD PTR [rax+16]
  005c9	85 c0		 test	 eax, eax
  005cb	74 28		 je	 SHORT $LN53@ParseAsDec

; 293  :                     {
; 294  :                         _source.SkipString(_decimal_separator);

  005cd	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  005d0	48 8d 93 d6 00
	00 00		 lea	 rdx, QWORD PTR [rbx+214]
  005d7	48 8b cb	 mov	 rcx, rbx
  005da	ff 50 18	 call	 QWORD PTR [rax+24]

; 295  :                         _frac_part.Write(L'.');

  005dd	48 8b 43 38	 mov	 rax, QWORD PTR [rbx+56]
  005e1	48 8d 4b 38	 lea	 rcx, QWORD PTR [rbx+56]
  005e5	ba 2e 00 00 00	 mov	 edx, 46			; 0000002eH
  005ea	ff 50 08	 call	 QWORD PTR [rax+8]

; 296  :                         ParseAsFractionPartNumberSequence();

  005ed	48 8b cb	 mov	 rcx, rbx
  005f0	e8 00 00 00 00	 call	 ?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence
$LN53@ParseAsDec:

; 297  :                     }
; 298  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE) && _source.StartsWith(L" "))

  005f5	8b 43 60	 mov	 eax, DWORD PTR [rbx+96]
  005f8	a8 02		 test	 al, 2
  005fa	0f 84 33 ff ff
	ff		 je	 $LN40@ParseAsDec
  00600	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00603	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13HOIJIPNN@?$AA?5@
  0060a	48 8b cb	 mov	 rcx, rbx
  0060d	ff 50 10	 call	 QWORD PTR [rax+16]
  00610	85 c0		 test	 eax, eax
  00612	0f 84 18 ff ff
	ff		 je	 $LN178@ParseAsDec

; 299  :                     {
; 300  :                         _source.SkipString(L" ");

  00618	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13HOIJIPNN@?$AA?5@

; 301  :                         if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))
; 302  :                             _source.SkipString(_currency_symbol);
; 303  :                     }

  0061f	e9 a4 01 00 00	 jmp	 $LN216@ParseAsDec
$LN207@ParseAsDec:

; 304  :                     else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))
; 305  :                         _source.SkipString(_currency_symbol);
; 306  :                     else
; 307  :                     {
; 308  :                     }
; 309  :                 }
; 310  :             }
; 311  :             else if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  00624	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00627	48 8b cb	 mov	 rcx, rbx
  0062a	ff 10		 call	 QWORD PTR [rax]

; 42   :         if (c >= L'0' && c <= L'9')

  0062c	8d 48 d0	 lea	 ecx, DWORD PTR [rax-48]
  0062f	66 83 f9 09	 cmp	 cx, 9
  00633	77 08		 ja	 SHORT $LN152@ParseAsDec

; 43   :             return (c - L'0');

  00635	0f b7 c0	 movzx	 eax, ax
  00638	83 e8 30	 sub	 eax, 48			; 00000030H
  0063b	eb 05		 jmp	 SHORT $LN151@ParseAsDec
$LN152@ParseAsDec:

; 44   :         return (-1);

  0063d	b8 ff ff ff ff	 mov	 eax, -1
$LN151@ParseAsDec:

; 304  :                     else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))
; 305  :                         _source.SkipString(_currency_symbol);
; 306  :                     else
; 307  :                     {
; 308  :                     }
; 309  :                 }
; 310  :             }
; 311  :             else if (ParseDecimalDigit(_source.PeekChar()) >= 0)

  00642	85 c0		 test	 eax, eax
  00644	0f 88 25 01 00
	00		 js	 $LN59@ParseAsDec

; 312  :             {
; 313  :                 ParseAsIntegerPartNumberSequence();

  0064a	48 8b cb	 mov	 rcx, rbx
  0064d	e8 00 00 00 00	 call	 ?ParseAsIntegerPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsIntegerPartNumberSequence

; 314  :                 if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))

  00652	f6 43 60 20	 test	 BYTE PTR [rbx+96], 32	; 00000020H
  00656	74 3c		 je	 SHORT $LN61@ParseAsDec
  00658	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0065b	48 8d 93 d6 00
	00 00		 lea	 rdx, QWORD PTR [rbx+214]
  00662	48 8b cb	 mov	 rcx, rbx
  00665	ff 50 10	 call	 QWORD PTR [rax+16]
  00668	85 c0		 test	 eax, eax
  0066a	74 28		 je	 SHORT $LN61@ParseAsDec
$LN242@ParseAsDec:

; 471  :             if (_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

  0066c	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0066f	48 8d 93 d6 00
	00 00		 lea	 rdx, QWORD PTR [rbx+214]
  00676	48 8b cb	 mov	 rcx, rbx
  00679	ff 50 18	 call	 QWORD PTR [rax+24]
  0067c	48 8b 43 38	 mov	 rax, QWORD PTR [rbx+56]
  00680	48 8d 4b 38	 lea	 rcx, QWORD PTR [rbx+56]
  00684	ba 2e 00 00 00	 mov	 edx, 46			; 0000002eH
  00689	ff 50 08	 call	 QWORD PTR [rax+8]
  0068c	48 8b cb	 mov	 rcx, rbx
  0068f	e8 00 00 00 00	 call	 ?ParseAsFractionPartNumberSequence@ParserState@Internal@Core@Math@Palmtree@@AEAAXXZ ; Palmtree::Math::Core::Internal::ParserState::ParseAsFractionPartNumberSequence
$LN61@ParseAsDec:
  00694	8b 43 60	 mov	 eax, DWORD PTR [rbx+96]
  00697	a8 02		 test	 al, 2
  00699	0f 84 8a 00 00
	00		 je	 $LN62@ParseAsDec
  0069f	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  006a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13HOIJIPNN@?$AA?5@
  006a9	48 8b cb	 mov	 rcx, rbx
  006ac	ff 50 10	 call	 QWORD PTR [rax+16]
  006af	85 c0		 test	 eax, eax
  006b1	74 73		 je	 SHORT $LN186@ParseAsDec
  006b3	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  006b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13HOIJIPNN@?$AA?5@
  006bd	48 8b cb	 mov	 rcx, rbx
  006c0	ff 50 18	 call	 QWORD PTR [rax+24]
  006c3	8b 43 60	 mov	 eax, DWORD PTR [rbx+96]
  006c6	0f ba e0 08	 bt	 eax, 8
  006ca	73 21		 jae	 SHORT $LN64@ParseAsDec
  006cc	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  006cf	48 8d 53 70	 lea	 rdx, QWORD PTR [rbx+112]
  006d3	48 8b cb	 mov	 rcx, rbx
  006d6	ff 50 10	 call	 QWORD PTR [rax+16]
  006d9	85 c0		 test	 eax, eax
  006db	74 0d		 je	 SHORT $LN184@ParseAsDec
$LN237@ParseAsDec:
  006dd	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  006e0	48 8d 53 70	 lea	 rdx, QWORD PTR [rbx+112]
  006e4	48 8b cb	 mov	 rcx, rbx
  006e7	ff 50 18	 call	 QWORD PTR [rax+24]
$LN184@ParseAsDec:
  006ea	8b 43 60	 mov	 eax, DWORD PTR [rbx+96]
$LN64@ParseAsDec:
  006ed	a8 08		 test	 al, 8
  006ef	0f 84 03 01 00
	00		 je	 $LN111@ParseAsDec
  006f5	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  006f8	48 8d 93 92 00
	00 00		 lea	 rdx, QWORD PTR [rbx+146]
  006ff	48 8b cb	 mov	 rcx, rbx
  00702	ff 50 10	 call	 QWORD PTR [rax+16]
  00705	85 c0		 test	 eax, eax
  00707	74 13		 je	 SHORT $LN183@ParseAsDec
  00709	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]
  0070d	48 8d 93 92 00
	00 00		 lea	 rdx, QWORD PTR [rbx+146]
  00714	c6 00 01	 mov	 BYTE PTR [rax], 1
  00717	e9 d3 00 00 00	 jmp	 $LN212@ParseAsDec
$LN183@ParseAsDec:
  0071c	8b 43 60	 mov	 eax, DWORD PTR [rbx+96]
  0071f	a8 08		 test	 al, 8
  00721	e9 ec fa ff ff	 jmp	 $LN226@ParseAsDec
$LN186@ParseAsDec:
  00726	8b 43 60	 mov	 eax, DWORD PTR [rbx+96]
$LN62@ParseAsDec:
  00729	0f ba e0 08	 bt	 eax, 8
  0072d	73 14		 jae	 SHORT $LN189@ParseAsDec
  0072f	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00732	48 8d 53 70	 lea	 rdx, QWORD PTR [rbx+112]
  00736	48 8b cb	 mov	 rcx, rbx
  00739	ff 50 10	 call	 QWORD PTR [rax+16]
  0073c	85 c0		 test	 eax, eax
  0073e	75 9d		 jne	 SHORT $LN237@ParseAsDec
  00740	8b 43 60	 mov	 eax, DWORD PTR [rbx+96]
$LN189@ParseAsDec:
  00743	a8 08		 test	 al, 8
  00745	0f 84 ad 00 00
	00		 je	 $LN111@ParseAsDec
  0074b	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0074e	48 8d 93 92 00
	00 00		 lea	 rdx, QWORD PTR [rbx+146]
  00755	48 8b cb	 mov	 rcx, rbx
  00758	ff 50 10	 call	 QWORD PTR [rax+16]
  0075b	85 c0		 test	 eax, eax
  0075d	74 40		 je	 SHORT $LN198@ParseAsDec
  0075f	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]
  00763	48 8d 93 92 00
	00 00		 lea	 rdx, QWORD PTR [rbx+146]
  0076a	c6 00 01	 mov	 BYTE PTR [rax], 1
  0076d	eb 59		 jmp	 SHORT $LN216@ParseAsDec
$LN59@ParseAsDec:

; 315  :                 {
; 316  :                     _source.SkipString(_decimal_separator);
; 317  :                     _frac_part.Write(L'.');
; 318  :                     ParseAsFractionPartNumberSequence();
; 319  :                 }
; 320  :                 if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE) && _source.StartsWith(L" "))
; 321  :                 {
; 322  :                     _source.SkipString(L" ");
; 323  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))
; 324  :                     {
; 325  :                         _source.SkipString(_currency_symbol);
; 326  :                         if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))
; 327  :                         {
; 328  :                             *_sign = 1;
; 329  :                             _source.SkipString(_positive_sign);
; 330  :                         }
; 331  :                         else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)
; 332  :                         {
; 333  :                             *_sign = -1;
; 334  :                             _source.SkipString(_negative_sign);
; 335  :                         }
; 336  :                         else
; 337  :                         {
; 338  :                         }
; 339  :                     }
; 340  :                     else
; 341  :                     {
; 342  :                         if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))
; 343  :                         {
; 344  :                             *_sign = 1;
; 345  :                             _source.SkipString(_positive_sign);
; 346  :                         }
; 347  :                         else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)
; 348  :                         {
; 349  :                             *_sign = -1;
; 350  :                             _source.SkipString(_negative_sign);
; 351  :                         }
; 352  :                         else
; 353  :                         {
; 354  :                         }
; 355  :                     }
; 356  :                 }
; 357  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))
; 358  :                 {
; 359  :                     _source.SkipString(_currency_symbol);
; 360  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))
; 361  :                     {
; 362  :                         *_sign = 1;
; 363  :                         _source.SkipString(_positive_sign);
; 364  :                     }
; 365  :                     else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)
; 366  :                     {
; 367  :                         *_sign = -1;
; 368  :                         _source.SkipString(_negative_sign);
; 369  :                     }
; 370  :                     else
; 371  :                     {
; 372  :                     }
; 373  :                 }
; 374  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))
; 375  :                 {
; 376  :                     *_sign = 1;
; 377  :                     _source.SkipString(_positive_sign);
; 378  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))
; 379  :                         _source.SkipString(_currency_symbol);
; 380  :                 }
; 381  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)
; 382  :                 {
; 383  :                     *_sign = -1;
; 384  :                     _source.SkipString(_negative_sign);
; 385  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))
; 386  :                         _source.SkipString(_currency_symbol);
; 387  :                 }
; 388  :                 else
; 389  :                 {
; 390  :                 }
; 391  :             }
; 392  :             else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_DECIMAL_POINT) && _source.StartsWith(_decimal_separator))

  0076f	f6 43 60 20	 test	 BYTE PTR [rbx+96], 32	; 00000020H
  00773	74 18		 je	 SHORT $LN86@ParseAsDec
  00775	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00778	48 8d 93 d6 00
	00 00		 lea	 rdx, QWORD PTR [rbx+214]
  0077f	48 8b cb	 mov	 rcx, rbx
  00782	ff 50 10	 call	 QWORD PTR [rax+16]
  00785	85 c0		 test	 eax, eax
  00787	0f 85 df fe ff
	ff		 jne	 $LN242@ParseAsDec
$LN86@ParseAsDec:

; 393  :             {
; 394  :                 _source.SkipString(_decimal_separator);
; 395  :                 _frac_part.Write(L'.');
; 396  :                 ParseAsFractionPartNumberSequence();
; 397  :                 if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE) && _source.StartsWith(L" "))
; 398  :                 {
; 399  :                     _source.SkipString(L" ");
; 400  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))
; 401  :                     {
; 402  :                         _source.SkipString(_currency_symbol);
; 403  :                         if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))
; 404  :                         {
; 405  :                             *_sign = 1;
; 406  :                             _source.SkipString(_positive_sign);
; 407  :                         }
; 408  :                         else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)
; 409  :                         {
; 410  :                             *_sign = -1;
; 411  :                             _source.SkipString(_negative_sign);
; 412  :                         }
; 413  :                         else
; 414  :                         {
; 415  :                         }
; 416  :                     }
; 417  :                     else
; 418  :                     {
; 419  :                         if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))
; 420  :                         {
; 421  :                             *_sign = 1;
; 422  :                             _source.SkipString(_positive_sign);
; 423  :                         }
; 424  :                         else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)
; 425  :                         {
; 426  :                             *_sign = -1;
; 427  :                             _source.SkipString(_negative_sign);
; 428  :                         }
; 429  :                         else
; 430  :                         {
; 431  :                         }
; 432  :                     }
; 433  :                 }
; 434  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))
; 435  :                 {
; 436  :                     _source.SkipString(_currency_symbol);
; 437  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))
; 438  :                     {
; 439  :                         *_sign = 1;
; 440  :                         _source.SkipString(_positive_sign);
; 441  :                     }
; 442  :                     else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)
; 443  :                     {
; 444  :                         *_sign = -1;
; 445  :                         _source.SkipString(_negative_sign);
; 446  :                     }
; 447  :                     else
; 448  :                     {
; 449  :                     }
; 450  :                 }
; 451  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_positive_sign))
; 452  :                 {
; 453  :                     *_sign = 1;
; 454  :                     _source.SkipString(_positive_sign);
; 455  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))
; 456  :                         _source.SkipString(_currency_symbol);
; 457  :                 }
; 458  :                 else if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_SIGN) && _source.StartsWith(_negative_sign) /*&& 負数のエラーチェック()*/)
; 459  :                 {
; 460  :                     *_sign = -1;
; 461  :                     _source.SkipString(_negative_sign);
; 462  :                     if ((_number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL) && _source.StartsWith(_currency_symbol))
; 463  :                         _source.SkipString(_currency_symbol);
; 464  :                 }
; 465  :                 else
; 466  :                 {
; 467  :                 }
; 468  :             }
; 469  :             else
; 470  :                 return (0);

  0078d	33 c0		 xor	 eax, eax
  0078f	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]

; 476  :         }

  00794	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00799	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0079d	5f		 pop	 rdi
  0079e	c3		 ret	 0
$LN198@ParseAsDec:

; 471  :             if (_number_styles & PMC_NUMBER_STYLE_ALLOW_TRAILING_WHITE)

  0079f	8b 43 60	 mov	 eax, DWORD PTR [rbx+96]
  007a2	a8 08		 test	 al, 8
  007a4	74 52		 je	 SHORT $LN111@ParseAsDec
  007a6	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  007a9	48 8d 93 b4 00
	00 00		 lea	 rdx, QWORD PTR [rbx+180]
  007b0	48 8b cb	 mov	 rcx, rbx
  007b3	ff 50 10	 call	 QWORD PTR [rax+16]
  007b6	85 c0		 test	 eax, eax
  007b8	74 3e		 je	 SHORT $LN111@ParseAsDec
  007ba	48 8b 43 68	 mov	 rax, QWORD PTR [rbx+104]
  007be	48 8d 93 b4 00
	00 00		 lea	 rdx, QWORD PTR [rbx+180]
  007c5	c6 00 ff	 mov	 BYTE PTR [rax], -1
$LN216@ParseAsDec:
  007c8	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  007cb	48 8b cb	 mov	 rcx, rbx
  007ce	ff 50 18	 call	 QWORD PTR [rax+24]
  007d1	f7 43 60 00 01
	00 00		 test	 DWORD PTR [rbx+96], 256	; 00000100H
$LN215@ParseAsDec:
  007d8	74 1e		 je	 SHORT $LN111@ParseAsDec
  007da	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  007dd	48 8d 53 70	 lea	 rdx, QWORD PTR [rbx+112]
  007e1	48 8b cb	 mov	 rcx, rbx
  007e4	ff 50 10	 call	 QWORD PTR [rax+16]
  007e7	85 c0		 test	 eax, eax
  007e9	74 0d		 je	 SHORT $LN111@ParseAsDec
  007eb	48 8d 53 70	 lea	 rdx, QWORD PTR [rbx+112]
$LN212@ParseAsDec:
  007ef	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  007f2	48 8b cb	 mov	 rcx, rbx
  007f5	ff 50 18	 call	 QWORD PTR [rax+24]
$LN111@ParseAsDec:
  007f8	f6 43 60 02	 test	 BYTE PTR [rbx+96], 2
  007fc	74 35		 je	 SHORT $LN209@ParseAsDec
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 92   :                 switch (PeekChar())

  007fe	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00801	48 8b cb	 mov	 rcx, rbx
  00804	ff 10		 call	 QWORD PTR [rax]
  00806	0f b7 c0	 movzx	 eax, ax
  00809	83 f8 09	 cmp	 eax, 9
  0080c	72 25		 jb	 SHORT $LN209@ParseAsDec
  0080e	66 90		 npad	 2
$LL155@ParseAsDec:
  00810	83 f8 0d	 cmp	 eax, 13
  00813	76 05		 jbe	 SHORT $LN160@ParseAsDec
  00815	83 f8 20	 cmp	 eax, 32			; 00000020H
  00818	75 19		 jne	 SHORT $LN209@ParseAsDec
$LN160@ParseAsDec:

; 93   :                 {
; 94   :                 case L' ':
; 95   :                 case L'\t':
; 96   :                 case L'\n':
; 97   :                 case L'\r':
; 98   :                 case L'\f':
; 99   :                 case L'\v':
; 100  :                     break;
; 101  :                 default:
; 102  :                     return;
; 103  :                 }
; 104  :                 Progress();

  0081a	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0081d	48 8b cb	 mov	 rcx, rbx
  00820	ff 50 08	 call	 QWORD PTR [rax+8]
  00823	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00826	48 8b cb	 mov	 rcx, rbx
  00829	ff 10		 call	 QWORD PTR [rax]
  0082b	0f b7 c0	 movzx	 eax, ax
  0082e	83 f8 09	 cmp	 eax, 9
  00831	73 dd		 jae	 SHORT $LL155@ParseAsDec
$LN209@ParseAsDec:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 473  :             if (_source.PeekChar() != L'\0')

  00833	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00836	48 8b cb	 mov	 rcx, rbx
  00839	ff 10		 call	 QWORD PTR [rax]
  0083b	66 85 c0	 test	 ax, ax
  0083e	0f 85 49 ff ff
	ff		 jne	 $LN86@ParseAsDec

; 474  :                 return (0);
; 475  :             return (1);

  00844	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
  00849	b8 01 00 00 00	 mov	 eax, 1

; 476  :         }

  0084e	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00853	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00857	5f		 pop	 rdi
  00858	c3		 ret	 0
?ParseAsDecimalNumberString@ParserState@Internal@Core@Math@Palmtree@@QEAAHXZ ENDP ; Palmtree::Math::Core::Internal::ParserState::ParseAsDecimalNumberString
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ??1ParserState@Internal@Core@Math@Palmtree@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1ParserState@Internal@Core@Math@Palmtree@@QEAA@XZ PROC ; Palmtree::Math::Core::Internal::ParserState::~ParserState, COMDAT

; 127  :         }

  00000	c2 00 00	 ret	 0
??1ParserState@Internal@Core@Math@Palmtree@@QEAA@XZ ENDP ; Palmtree::Math::Core::Internal::ParserState::~ParserState
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ??0ParserState@Internal@Core@Math@Palmtree@@QEAA@PEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 32
$T5 = 32
$T6 = 32
$T7 = 32
this$ = 96
in_ptr$ = 104
number_styles$ = 112
format_option$ = 120
sign$ = 128
int_part_buf$ = 136
int_part_buf_size$ = 144
frac_part_buf$ = 152
frac_part_buf_size$ = 160
??0ParserState@Internal@Core@Math@Palmtree@@QEAA@PEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z PROC ; Palmtree::Math::Core::Internal::ParserState::ParserState, COMDAT

; 80   :         {

$LN38:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 50	 sub	 rsp, 80			; 00000050H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 50   :         StringReader(const wchar_t* p)

  00014	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7StringReader@Internal@Core@Math@Palmtree@@6B@

; 51   :         {
; 52   :             _p = p;

  0001b	48 89 51 08	 mov	 QWORD PTR [rcx+8], rdx
  0001f	48 89 01	 mov	 QWORD PTR [rcx], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 80   :         {

  00022	41 8b e8	 mov	 ebp, r8d
  00025	48 8b d9	 mov	 rbx, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 209  :             : StringWriter(buffer, buffer, buffer != nullptr ? buffer + size : nullptr)

  00028	45 33 c0	 xor	 r8d, r8d
  0002b	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR int_part_buf$[rsp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 80   :         {

  00033	49 8b f9	 mov	 rdi, r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 209  :             : StringWriter(buffer, buffer, buffer != nullptr ? buffer + size : nullptr)

  00036	48 85 c9	 test	 rcx, rcx
  00039	74 0e		 je	 SHORT $LN18@ParserStat
  0003b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR int_part_buf_size$[rsp]
  00043	48 8d 14 41	 lea	 rdx, QWORD PTR [rcx+rax*2]
  00047	eb 03		 jmp	 SHORT $LN19@ParserStat
$LN18@ParserStat:
  00049	49 8b d0	 mov	 rdx, r8
$LN19@ParserStat:

; 201  :             _p = p;

  0004c	48 89 4b 18	 mov	 QWORD PTR [rbx+24], rcx

; 210  :         {

  00050	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_7StringWriter@Internal@Core@Math@Palmtree@@6B@

; 202  :             _sob = sob;

  00057	48 89 4b 20	 mov	 QWORD PTR [rbx+32], rcx

; 209  :             : StringWriter(buffer, buffer, buffer != nullptr ? buffer + size : nullptr)

  0005b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR frac_part_buf$[rsp]

; 203  :             _eob = eob;

  00063	48 89 53 28	 mov	 QWORD PTR [rbx+40], rdx

; 204  :             _written = 0;

  00067	4c 89 43 30	 mov	 QWORD PTR [rbx+48], r8

; 210  :         {

  0006b	4c 89 4b 10	 mov	 QWORD PTR [rbx+16], r9

; 209  :             : StringWriter(buffer, buffer, buffer != nullptr ? buffer + size : nullptr)

  0006f	48 85 c9	 test	 rcx, rcx
  00072	74 0e		 je	 SHORT $LN24@ParserStat
  00074	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR frac_part_buf_size$[rsp]
  0007c	48 8d 14 41	 lea	 rdx, QWORD PTR [rcx+rax*2]
  00080	eb 03		 jmp	 SHORT $LN25@ParserStat
$LN24@ParserStat:
  00082	49 8b d0	 mov	 rdx, r8
$LN25@ParserStat:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 81   :             _sign = sign;

  00085	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR sign$[rsp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 201  :             _p = p;

  0008d	48 89 4b 40	 mov	 QWORD PTR [rbx+64], rcx

; 202  :             _sob = sob;

  00091	48 89 4b 48	 mov	 QWORD PTR [rbx+72], rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 88   :             if (countof(_currency_symbol) < lstrlenW(format_option->CurrencySymbol) + 1)

  00095	48 8d 8f 38 01
	00 00		 lea	 rcx, QWORD PTR [rdi+312]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h

; 203  :             _eob = eob;

  0009c	48 89 53 50	 mov	 QWORD PTR [rbx+80], rdx

; 204  :             _written = 0;

  000a0	4c 89 43 58	 mov	 QWORD PTR [rbx+88], r8

; 210  :         {

  000a4	4c 89 4b 38	 mov	 QWORD PTR [rbx+56], r9
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp

; 81   :             _sign = sign;

  000a8	48 89 43 68	 mov	 QWORD PTR [rbx+104], rax

; 82   :             _number_styles = number_styles;

  000ac	89 6b 60	 mov	 DWORD PTR [rbx+96], ebp

; 83   :             //_エラーを例外で通知する = (_number_styles & PMC_NUMBER_STYLE_ALLOW_EXCEPTION_THROWING) != 0;
; 84   :             //_負数を許可する = (_number_styles & PMC_NUMBER_STYLE_ALLOW_SIGNED_INTEGER) != 0;
; 85   :             *_sign = 1;

  000af	c6 00 01	 mov	 BYTE PTR [rax], 1

; 88   :             if (countof(_currency_symbol) < lstrlenW(format_option->CurrencySymbol) + 1)

  000b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrlenW
  000b8	ff c0		 inc	 eax
  000ba	83 f8 11	 cmp	 eax, 17
  000bd	0f 87 46 01 00
	00		 ja	 $LN31@ParserStat

; 90   :             lstrcpyW(_currency_symbol, format_option->CurrencySymbol);

  000c3	48 8d 4b 70	 lea	 rcx, QWORD PTR [rbx+112]
  000c7	48 8d 97 38 01
	00 00		 lea	 rdx, QWORD PTR [rdi+312]
  000ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrcpyW

; 91   : 
; 92   :             // 符号文字の設定
; 93   :             if (countof(_positive_sign) < lstrlenW(format_option->PositiveSign) + 1)

  000d4	48 8d 8f 7c 01
	00 00		 lea	 rcx, QWORD PTR [rdi+380]
  000db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrlenW
  000e1	ff c0		 inc	 eax
  000e3	83 f8 11	 cmp	 eax, 17
  000e6	0f 87 47 01 00
	00		 ja	 $LN32@ParserStat

; 95   :             lstrcpyW(_positive_sign, format_option->PositiveSign);

  000ec	48 8d 8b 92 00
	00 00		 lea	 rcx, QWORD PTR [rbx+146]
  000f3	48 8d 97 7c 01
	00 00		 lea	 rdx, QWORD PTR [rdi+380]
  000fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrcpyW

; 96   :             if (countof(_negative_sign) < lstrlenW(format_option->NegativeSign) + 1)

  00100	48 8d 8f 5a 01
	00 00		 lea	 rcx, QWORD PTR [rdi+346]
  00107	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrlenW
  0010d	ff c0		 inc	 eax
  0010f	83 f8 11	 cmp	 eax, 17
  00112	0f 87 45 01 00
	00		 ja	 $LN33@ParserStat

; 98   :             lstrcpyW(_negative_sign, format_option->NegativeSign);

  00118	48 8d 8b b4 00
	00 00		 lea	 rcx, QWORD PTR [rbx+180]
  0011f	48 8d 97 5a 01
	00 00		 lea	 rdx, QWORD PTR [rdi+346]
  00126	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrcpyW

; 99   : 
; 100  :             // 小数点/3桁区切り文字の設定
; 101  :             if (number_styles & PMC_NUMBER_STYLE_ALLOW_CURRENCY_SYMBOL)

  0012c	0f ba e5 08	 bt	 ebp, 8
  00130	73 40		 jae	 SHORT $LN5@ParserStat

; 102  :             {
; 103  :                 if (countof(_decimal_separator) < lstrlenW(format_option->Currency.DecimalSeparator) + 1)

  00132	48 8d 4f 04	 lea	 rcx, QWORD PTR [rdi+4]
  00136	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrlenW
  0013c	ff c0		 inc	 eax
  0013e	83 f8 11	 cmp	 eax, 17
  00141	0f 87 40 01 00
	00		 ja	 $LN34@ParserStat

; 105  :                 lstrcpyW(_decimal_separator, format_option->Currency.DecimalSeparator);

  00147	48 8d 8b d6 00
	00 00		 lea	 rcx, QWORD PTR [rbx+214]
  0014e	48 8d 57 04	 lea	 rdx, QWORD PTR [rdi+4]
  00152	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrcpyW

; 106  :                 if (countof(_group_separator) < lstrlenW(format_option->Currency.GroupSeparator) + 1)

  00158	48 8d 77 26	 lea	 rsi, QWORD PTR [rdi+38]
  0015c	48 8b ce	 mov	 rcx, rsi
  0015f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrlenW
  00165	ff c0		 inc	 eax
  00167	83 f8 11	 cmp	 eax, 17
  0016a	0f 87 41 01 00
	00		 ja	 $LN35@ParserStat
  00170	eb 41		 jmp	 SHORT $LN10@ParserStat
$LN5@ParserStat:

; 108  :                 lstrcpyW(_group_separator, format_option->Currency.GroupSeparator);
; 109  :             }
; 110  :             else
; 111  :             {
; 112  :                 if (countof(_decimal_separator) < lstrlenW(format_option->Number.DecimalSeparator) + 1)

  00172	48 8d 4f 6c	 lea	 rcx, QWORD PTR [rdi+108]
  00176	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrlenW
  0017c	ff c0		 inc	 eax
  0017e	83 f8 11	 cmp	 eax, 17
  00181	0f 87 54 01 00
	00		 ja	 $LN36@ParserStat

; 114  :                 lstrcpyW(_decimal_separator, format_option->Number.DecimalSeparator);

  00187	48 8d 8b d6 00
	00 00		 lea	 rcx, QWORD PTR [rbx+214]
  0018e	48 8d 57 6c	 lea	 rdx, QWORD PTR [rdi+108]
  00192	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrcpyW

; 115  :                 if (countof(_group_separator) < lstrlenW(format_option->Number.GroupSeparator) + 1)

  00198	48 8d b7 8e 00
	00 00		 lea	 rsi, QWORD PTR [rdi+142]
  0019f	48 8b ce	 mov	 rcx, rsi
  001a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrlenW
  001a8	ff c0		 inc	 eax
  001aa	83 f8 11	 cmp	 eax, 17
  001ad	0f 87 52 01 00
	00		 ja	 $LN37@ParserStat
$LN10@ParserStat:

; 117  :                 lstrcpyW(_group_separator, format_option->Number.GroupSeparator);
; 118  :             }
; 119  :             if (lstrcmpW(_group_separator, L"\xa0") == 0)

  001b3	48 8d bb f8 00
	00 00		 lea	 rdi, QWORD PTR [rbx+248]
  001ba	48 8b d6	 mov	 rdx, rsi
  001bd	48 8b cf	 mov	 rcx, rdi
  001c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrcpyW
  001c6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13JDNADJOG@?$PP?$KA@
  001cd	48 8b cf	 mov	 rcx, rdi
  001d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrcmpW
  001d6	48 8d 8b 1a 01
	00 00		 lea	 rcx, QWORD PTR [rbx+282]

; 120  :                 lstrcpyW(_secondary_group_separator, L"\x20");

  001dd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_13HOIJIPNN@?$AA?5@
  001e4	85 c0		 test	 eax, eax
  001e6	74 03		 je	 SHORT $LN29@ParserStat

; 121  :             else
; 122  :                 lstrcpyW(_secondary_group_separator, _group_separator);

  001e8	48 8b d7	 mov	 rdx, rdi
$LN29@ParserStat:

; 123  :         }

  001eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrcpyW
  001f1	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  001f6	48 8b c3	 mov	 rax, rbx
  001f9	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  001fe	48 8b 74 24 70	 mov	 rsi, QWORD PTR [rsp+112]
  00203	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00207	5f		 pop	 rdi
  00208	c3		 ret	 0
$LN31@ParserStat:

; 89   :                 throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_parse;ParserState::ParserState;1");

  00209	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1EK@OBHKPMHI@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
  00210	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  00217	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T7[rsp]
  0021c	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00221	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00228	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T7[rsp]
  0022d	e8 00 00 00 00	 call	 _CxxThrowException
  00232	cc		 int	 3
$LN32@ParserStat:

; 94   :                 throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_parse;ParserState::ParserState;2");

  00233	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1EK@PDMPFDJG@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
  0023a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  00241	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T6[rsp]
  00246	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  0024b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00252	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T6[rsp]
  00257	e8 00 00 00 00	 call	 _CxxThrowException
  0025c	cc		 int	 3
$LN33@ParserStat:

; 97   :                 throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_parse;ParserState::ParserState;3");

  0025d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1EK@ELHDDEPD@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
  00264	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  0026b	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T5[rsp]
  00270	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00275	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0027c	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T5[rsp]
  00281	e8 00 00 00 00	 call	 _CxxThrowException
  00286	cc		 int	 3
$LN34@ParserStat:

; 104  :                     throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_parse;ParserState::ParserState;4");

  00287	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1EK@NGKEAMEK@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
  0028e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  00295	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T4[rsp]
  0029a	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  0029f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  002a6	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T4[rsp]
  002ab	e8 00 00 00 00	 call	 _CxxThrowException
  002b0	cc		 int	 3
$LN35@ParserStat:

; 107  :                     throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_parse;ParserState::ParserState;5");

  002b1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1EK@GOBIGLCP@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
  002b8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  002bf	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T3[rsp]
  002c4	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  002c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  002d0	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T3[rsp]
  002d5	e8 00 00 00 00	 call	 _CxxThrowException
  002da	cc		 int	 3
$LN36@ParserStat:

; 113  :                     throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_parse;ParserState::ParserState;6");

  002db	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1EK@HMKNMEMB@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
  002e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  002e9	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T2[rsp]
  002ee	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  002f3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  002fa	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T2[rsp]
  002ff	e8 00 00 00 00	 call	 _CxxThrowException
  00304	cc		 int	 3
$LN37@ParserStat:

; 116  :                     throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_parse;ParserState::ParserState;7");

  00305	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1EK@MEBBKDKE@?$AAp?$AAm?$AAc?$AA_?$AAp?$AAa?$AAr?$AAs?$AAe?$AA?$DL?$AAP?$AAa?$AAr?$AAs?$AAe@
  0030c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  00313	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T1[rsp]
  00318	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  0031d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  00324	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T1[rsp]
  00329	e8 00 00 00 00	 call	 _CxxThrowException
  0032e	cc		 int	 3
$LN28@ParserStat:
??0ParserState@Internal@Core@Math@Palmtree@@QEAA@PEB_WIPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEA_W_K34@Z ENDP ; Palmtree::Math::Core::Internal::ParserState::ParserState
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z
_TEXT	SEGMENT
c$ = 8
?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z PROC ; Palmtree::Math::Core::Internal::ParseHexDigit, COMDAT

; 49   :         if (c >= L'0' && c <= L'9')

  00000	8d 41 d0	 lea	 eax, DWORD PTR [rcx-48]
  00003	66 83 f8 09	 cmp	 ax, 9
  00007	77 07		 ja	 SHORT $LN2@ParseHexDi

; 50   :             return (c - L'0');

  00009	0f b7 c1	 movzx	 eax, cx
  0000c	83 e8 30	 sub	 eax, 48			; 00000030H

; 58   :     }

  0000f	c3		 ret	 0
$LN2@ParseHexDi:

; 51   : 
; 52   :         if (c >= L'a' && c <= L'f')

  00010	8d 41 9f	 lea	 eax, DWORD PTR [rcx-97]
  00013	66 83 f8 05	 cmp	 ax, 5
  00017	77 07		 ja	 SHORT $LN3@ParseHexDi

; 53   :             return (c - L'a' + 10);

  00019	0f b7 c1	 movzx	 eax, cx
  0001c	83 e8 57	 sub	 eax, 87			; 00000057H

; 58   :     }

  0001f	c3		 ret	 0
$LN3@ParseHexDi:

; 54   : 
; 55   :         if (c >= L'A' && c <= L'F')

  00020	8d 41 bf	 lea	 eax, DWORD PTR [rcx-65]
  00023	66 83 f8 05	 cmp	 ax, 5
  00027	77 07		 ja	 SHORT $LN4@ParseHexDi

; 56   :             return (c - L'A' + 10);

  00029	0f b7 c1	 movzx	 eax, cx
  0002c	83 e8 37	 sub	 eax, 55			; 00000037H

; 58   :     }

  0002f	c3		 ret	 0
$LN4@ParseHexDi:

; 57   :         return (-1);

  00030	b8 ff ff ff ff	 mov	 eax, -1

; 58   :     }

  00035	c3		 ret	 0
?ParseHexDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ENDP ; Palmtree::Math::Core::Internal::ParseHexDigit
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z
_TEXT	SEGMENT
c$ = 8
?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z PROC ; Palmtree::Math::Core::Internal::ParseDecimalDigit, COMDAT

; 42   :         if (c >= L'0' && c <= L'9')

  00000	8d 41 d0	 lea	 eax, DWORD PTR [rcx-48]
  00003	66 83 f8 09	 cmp	 ax, 9
  00007	77 07		 ja	 SHORT $LN2@ParseDecim

; 43   :             return (c - L'0');

  00009	0f b7 c1	 movzx	 eax, cx
  0000c	83 e8 30	 sub	 eax, 48			; 00000030H

; 45   :     }

  0000f	c3		 ret	 0
$LN2@ParseDecim:

; 44   :         return (-1);

  00010	b8 ff ff ff ff	 mov	 eax, -1

; 45   :     }

  00015	c3		 ret	 0
?ParseDecimalDigit@Internal@Core@Math@Palmtree@@YAH_W@Z ENDP ; Palmtree::Math::Core::Internal::ParseDecimalDigit
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _MULTIPLYX_UNIT
_TEXT	SEGMENT
u$ = 8
v$ = 16
w_hi$ = 24
_MULTIPLYX_UNIT PROC					; COMDAT

; 229  : #ifdef _MSC_VER
; 230  : #ifdef _M_IX86
; 231  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));
; 232  : #elif defined(_M_X64)
; 233  :             return (_mulx_u64(u, v, w_hi));

  00000	c4 e2 fb f6 c9	 mulx	 rcx, rax, rcx
  00005	49 89 08	 mov	 QWORD PTR [r8], rcx

; 234  : #else
; 235  : #error unknown platform
; 236  : #endif
; 237  : #elif defined(__GNUC__)
; 238  : #ifdef _M_IX86
; 239  :             _UINT32_T w_lo;
; 240  :             __asm__("mulxl %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 241  :             return (w_lo);
; 242  : #elif defined(_M_X64)
; 243  :             _UINT64_T w_lo;
; 244  :             __asm__("mulxq %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 245  :             return (w_lo);
; 246  : #else
; 247  : #error unknown platform
; 248  : #endif
; 249  : #else
; 250  : #error unknown compiler
; 251  : #endif
; 252  :         }

  00008	c3		 ret	 0
_MULTIPLYX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _MULTIPLY_UNIT
_TEXT	SEGMENT
u$ = 8
v$ = 16
w_hi$ = 24
_MULTIPLY_UNIT PROC					; COMDAT

; 210  : #ifdef _M_IX86
; 211  : #ifdef _MSC_VER
; 212  :             return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));
; 213  : #elif defined(__GNUC__)
; 214  :             _UINT32_T w_lo;
; 215  :             __asm__("mull %3": "=a"(w_lo), "=d"(*w_hi) : "0"(u), "rm"(v));
; 216  :             return (w_lo);
; 217  : #else
; 218  : #error unknown compiler
; 219  : #endif
; 220  : #elif defined(_M_X64)
; 221  :             return (_umul128(u, v, w_hi));

  00000	48 8b c2	 mov	 rax, rdx
  00003	48 f7 e1	 mul	 rcx
  00006	49 89 10	 mov	 QWORD PTR [r8], rdx

; 222  : #else
; 223  : #error unknown platform
; 224  : #endif
; 225  :         }

  00009	c3		 ret	 0
_MULTIPLY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ADDX_UNIT
_TEXT	SEGMENT
carry$ = 8
u$ = 16
v$ = 24
w$ = 32
_ADDX_UNIT PROC						; COMDAT

; 188  : #ifdef _M_IX86
; 189  :             return (_addcarryx_u32(carry, u, v, w));
; 190  : #elif defined(_M_X64)
; 191  :             return (_addcarryx_u64(carry, u, v, w));

  00000	80 c1 ff	 add	 cl, -1
  00003	66 49 0f 38 f6
	d0		 adcx	 rdx, r8
  00009	49 89 11	 mov	 QWORD PTR [r9], rdx
  0000c	0f 92 c0	 setb	 al

; 192  : #else
; 193  : #error unknown platform
; 194  : #endif
; 195  :         }

  0000f	c3		 ret	 0
_ADDX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ADD_UNIT
_TEXT	SEGMENT
carry$ = 8
u$ = 16
v$ = 24
w$ = 32
_ADD_UNIT PROC						; COMDAT

; 177  : #ifdef _M_IX86
; 178  :             return (_addcarry_u32(carry, u, v, w));
; 179  : #elif defined(_M_X64)
; 180  :             return (_addcarry_u64(carry, u, v, w));

  00000	80 c1 ff	 add	 cl, -1
  00003	49 13 d0	 adc	 rdx, r8
  00006	49 89 11	 mov	 QWORD PTR [r9], rdx
  00009	0f 92 c0	 setb	 al

; 181  : #else
; 182  : #error unknown platform
; 183  : #endif
; 184  :         }

  0000c	c3		 ret	 0
_ADD_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _DIVIDE_CEILING_SIZE
_TEXT	SEGMENT
u$ = 8
v$ = 16
_DIVIDE_CEILING_SIZE PROC				; COMDAT

; 162  :             return ((u + v - 1) / v);

  00000	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  00004	4c 8b c2	 mov	 r8, rdx
  00007	48 03 c1	 add	 rax, rcx
  0000a	33 d2		 xor	 edx, edx
  0000c	49 f7 f0	 div	 r8

; 163  :         }

  0000f	c3		 ret	 0
_DIVIDE_CEILING_SIZE ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _DIVIDE_CEILING_UNIT
_TEXT	SEGMENT
u$ = 8
v$ = 16
_DIVIDE_CEILING_UNIT PROC				; COMDAT

; 157  :             return ((u + v - 1) / v);

  00000	48 8d 42 ff	 lea	 rax, QWORD PTR [rdx-1]
  00004	4c 8b c2	 mov	 r8, rdx
  00007	48 03 c1	 add	 rax, rcx
  0000a	33 d2		 xor	 edx, edx
  0000c	49 f7 f0	 div	 r8

; 158  :         }

  0000f	c3		 ret	 0
_DIVIDE_CEILING_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _COPY_MEMORY_UNIT
_TEXT	SEGMENT
d$ = 8
s$ = 16
count$ = 24
_COPY_MEMORY_UNIT PROC					; COMDAT

; 63   :         {

  00000	48 89 74 24 08	 mov	 QWORD PTR [rsp+8], rsi
  00005	48 89 7c 24 10	 mov	 QWORD PTR [rsp+16], rdi

; 64   : #ifdef _M_IX86
; 65   :             __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);
; 66   : #elif defined(_M_X64)
; 67   :             __movsq(d, s, count);

  0000a	48 8b f9	 mov	 rdi, rcx
  0000d	48 8b f2	 mov	 rsi, rdx
  00010	49 8b c8	 mov	 rcx, r8
  00013	f3 48 a5	 rep movsq

; 68   : #else
; 69   : #error unknown platform
; 70   : #endif
; 71   :         }

  00016	48 8b 74 24 08	 mov	 rsi, QWORD PTR [rsp+8]
  0001b	48 8b 7c 24 10	 mov	 rdi, QWORD PTR [rsp+16]
  00020	c3		 ret	 0
_COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT ?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z
_TEXT	SEGMENT
value$ = 8
?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z PROC ; Palmtree::Math::Core::Internal::AddToMULTI64Counter, COMDAT

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

  00000	f0 0f c1 0d 00
	00 00 00	 lock xadd DWORD PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A, ecx

; 346  :     }

  00008	c3		 ret	 0
?AddToMULTI64Counter@Internal@Core@Math@Palmtree@@YAXH@Z ENDP ; Palmtree::Math::Core::Internal::AddToMULTI64Counter
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT ?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z
_TEXT	SEGMENT
value$ = 8
?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z PROC ; Palmtree::Math::Core::Internal::AddToMULTI32Counter, COMDAT

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

  00000	f0 0f c1 0d 04
	00 00 00	 lock xadd DWORD PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4, ecx

; 340  :     }

  00008	c3		 ret	 0
?AddToMULTI32Counter@Internal@Core@Math@Palmtree@@YAXH@Z ENDP ; Palmtree::Math::Core::Internal::AddToMULTI32Counter
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT ?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ
_TEXT	SEGMENT
?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ PROC ; Palmtree::Math::Core::Internal::IncrementMULTI64Counter, COMDAT

; 322  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI64);

  00000	f0 ff 05 00 00
	00 00		 lock inc DWORD PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A

; 323  :     }

  00007	c3		 ret	 0
?IncrementMULTI64Counter@Internal@Core@Math@Palmtree@@YAXXZ ENDP ; Palmtree::Math::Core::Internal::IncrementMULTI64Counter
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT ?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ
_TEXT	SEGMENT
?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ PROC ; Palmtree::Math::Core::Internal::IncrementMULTI32Counter, COMDAT

; 316  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

  00000	f0 ff 05 04 00
	00 00		 lock inc DWORD PTR ?statistics_info@Internal@Core@Math@Palmtree@@3U__tag_PMC_STATISTICS_INFO@1234@A+4

; 317  :     }

  00007	c3		 ret	 0
?IncrementMULTI32Counter@Internal@Core@Math@Palmtree@@YAXXZ ENDP ; Palmtree::Math::Core::Internal::IncrementMULTI32Counter
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
no_abs$ = 112
source$ = 112
number_styles$ = 120
format_option$ = 128
o_sign$ = 136
o_abs$ = 144
result$ = 152
?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z PROC ; Palmtree::Math::Core::Internal::PMC_TryParseForSINT, COMDAT

; 1336 :     {

$LN15:
  00000	48 83 ec 68	 sub	 rsp, 104		; 00000068H
  00004	49 8b c0	 mov	 rax, r8

; 1337 :         if (source == nullptr)

  00007	48 85 c9	 test	 rcx, rcx
  0000a	0f 84 86 00 00
	00		 je	 $LN12@PMC_TryPar

; 1339 :         if (o_sign == nullptr)

  00010	4d 85 c9	 test	 r9, r9
  00013	0f 84 a7 00 00
	00		 je	 $LN13@PMC_TryPar

; 1341 :         if (o_abs == nullptr)

  00019	48 89 5c 24 78	 mov	 QWORD PTR [rsp+120], rbx
  0001e	48 8b 9c 24 90
	00 00 00	 mov	 rbx, QWORD PTR o_abs$[rsp]
  00026	48 85 db	 test	 rbx, rbx
  00029	0f 84 bb 00 00
	00		 je	 $LN14@PMC_TryPar

; 1343 :         if (format_option == nullptr)
; 1344 :             format_option = &default_number_format_option;
; 1345 :         NUMBER_HEADER* no_abs;
; 1346 :         PMC_STATUS_CODE err = PMC_TryParse_Imp(source, number_styles, format_option, o_sign, &no_abs, result);

  0002f	48 85 c0	 test	 rax, rax
  00032	48 89 7c 24 60	 mov	 QWORD PTR [rsp+96], rdi
  00037	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR result$[rsp]
  0003f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?default_number_format_option@Internal@Core@Math@Palmtree@@3U__tag_PMC_NUMBER_FORMAT_INFO@1234@A
  00046	4c 0f 45 c0	 cmovne	 r8, rax
  0004a	48 89 7c 24 28	 mov	 QWORD PTR [rsp+40], rdi
  0004f	48 8d 44 24 70	 lea	 rax, QWORD PTR no_abs$[rsp]
  00054	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00059	e8 00 00 00 00	 call	 ?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z ; Palmtree::Math::Core::Internal::PMC_TryParse_Imp

; 1347 :         if (err != PMC_STATUS_OK)

  0005e	85 c0		 test	 eax, eax
  00060	74 15		 je	 SHORT $LN6@PMC_TryPar

; 1348 :         {
; 1349 :             *result = 0;

  00062	48 8b 5c 24 78	 mov	 rbx, QWORD PTR [rsp+120]
  00067	c7 07 00 00 00
	00		 mov	 DWORD PTR [rdi], 0
  0006d	48 8b 7c 24 60	 mov	 rdi, QWORD PTR [rsp+96]

; 1355 :     }

  00072	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00076	c3		 ret	 0
$LN6@PMC_TryPar:

; 1350 :             return (err);
; 1351 :         }
; 1352 :         *o_abs = (PMC_HANDLE_UINT)no_abs;

  00077	48 8b 44 24 70	 mov	 rax, QWORD PTR no_abs$[rsp]
  0007c	48 89 03	 mov	 QWORD PTR [rbx], rax

; 1353 :         *result = 1;
; 1354 :         return (PMC_STATUS_OK);

  0007f	33 c0		 xor	 eax, eax
  00081	48 8b 5c 24 78	 mov	 rbx, QWORD PTR [rsp+120]
  00086	c7 07 01 00 00
	00		 mov	 DWORD PTR [rdi], 1
  0008c	48 8b 7c 24 60	 mov	 rdi, QWORD PTR [rsp+96]

; 1355 :     }

  00091	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00095	c3		 ret	 0
$LN12@PMC_TryPar:

; 1338 :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"source");

  00096	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1O@JOABEBCL@?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe@
  0009d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
  000a4	48 8d 4c 24 30	 lea	 rcx, QWORD PTR $T3[rsp]
  000a9	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  000ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  000b5	48 8d 4c 24 30	 lea	 rcx, QWORD PTR $T3[rsp]
  000ba	e8 00 00 00 00	 call	 _CxxThrowException
  000bf	cc		 int	 3
$LN13@PMC_TryPar:

; 1340 :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"o_sign");

  000c0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1O@KGDAECED@?$AAo?$AA_?$AAs?$AAi?$AAg?$AAn@
  000c7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
  000ce	48 8d 4c 24 30	 lea	 rcx, QWORD PTR $T2[rsp]
  000d3	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  000d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  000df	48 8d 4c 24 30	 lea	 rcx, QWORD PTR $T2[rsp]
  000e4	e8 00 00 00 00	 call	 _CxxThrowException
  000e9	cc		 int	 3
$LN14@PMC_TryPar:

; 1342 :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"o_abs");

  000ea	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1M@LGAEBGCK@?$AAo?$AA_?$AAa?$AAb?$AAs@
  000f1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
  000f8	48 8d 4c 24 30	 lea	 rcx, QWORD PTR $T1[rsp]
  000fd	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  00102	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  00109	48 8d 4c 24 30	 lea	 rcx, QWORD PTR $T1[rsp]
  0010e	e8 00 00 00 00	 call	 _CxxThrowException
  00113	cc		 int	 3
$LN10@PMC_TryPar:
?PMC_TryParseForSINT@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z ENDP ; Palmtree::Math::Core::Internal::PMC_TryParseForSINT
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z
_TEXT	SEGMENT
o_abs$ = 48
root$ = 64
$T1 = 96
$T2 = 96
o_sign$ = 160
source$ = 160
number_styles$ = 168
format_option$ = 176
o$ = 184
result$ = 192
?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z PROC ; Palmtree::Math::Core::Internal::PMC_TryParse, COMDAT

; 1306 :     {

$LN15:
  00000	48 8b c4	 mov	 rax, rsp
  00003	57		 push	 rdi
  00004	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H
  0000b	48 c7 40 a0 fe
	ff ff ff	 mov	 QWORD PTR [rax-96], -2
  00013	48 89 58 10	 mov	 QWORD PTR [rax+16], rbx
  00017	48 89 68 18	 mov	 QWORD PTR [rax+24], rbp
  0001b	48 89 70 20	 mov	 QWORD PTR [rax+32], rsi
  0001f	49 8b f1	 mov	 rsi, r9
  00022	49 8b d8	 mov	 rbx, r8
  00025	8b ea		 mov	 ebp, edx
  00027	48 8b f9	 mov	 rdi, rcx

; 1307 :         if (source == nullptr)

  0002a	48 85 c9	 test	 rcx, rcx
  0002d	0f 84 00 01 00
	00		 je	 $LN12@PMC_TryPar

; 1309 :         if (o == nullptr)

  00033	4d 85 c9	 test	 r9, r9
  00036	0f 84 cd 00 00
	00		 je	 $LN13@PMC_TryPar

; 1311 :         if (format_option == nullptr)
; 1312 :             format_option = &default_number_format_option;
; 1313 :         ResourceHolderUINT root;

  0003c	48 8d 48 a8	 lea	 rcx, QWORD PTR [rax-88]
  00040	e8 00 00 00 00	 call	 ??0ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::ResourceHolderUINT
  00045	90		 npad	 1
  00046	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?default_number_format_option@Internal@Core@Math@Palmtree@@3U__tag_PMC_NUMBER_FORMAT_INFO@1234@A
  0004d	48 85 db	 test	 rbx, rbx
  00050	4c 0f 45 c3	 cmovne	 r8, rbx

; 1314 :         char o_sign;
; 1315 :         NUMBER_HEADER* o_abs;
; 1316 :         PMC_STATUS_CODE err = PMC_TryParse_Imp(source, number_styles, format_option, &o_sign, &o_abs, result);

  00054	48 8b 9c 24 c0
	00 00 00	 mov	 rbx, QWORD PTR result$[rsp]
  0005c	48 89 5c 24 28	 mov	 QWORD PTR [rsp+40], rbx
  00061	48 8d 44 24 30	 lea	 rax, QWORD PTR o_abs$[rsp]
  00066	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0006b	4c 8d 8c 24 a0
	00 00 00	 lea	 r9, QWORD PTR o_sign$[rsp]
  00073	8b d5		 mov	 edx, ebp
  00075	48 8b cf	 mov	 rcx, rdi
  00078	e8 00 00 00 00	 call	 ?PMC_TryParse_Imp@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEADPEAPEAU__tag_NUMBER_HEADER@1234@PEAI@Z ; Palmtree::Math::Core::Internal::PMC_TryParse_Imp
  0007d	8b f8		 mov	 edi, eax

; 1317 :         if (err != PMC_STATUS_OK || !*result)

  0007f	85 c0		 test	 eax, eax
  00081	75 5b		 jne	 SHORT $LN6@PMC_TryPar
  00083	39 03		 cmp	 DWORD PTR [rbx], eax
  00085	74 57		 je	 SHORT $LN6@PMC_TryPar

; 1321 :         }
; 1322 :         root.HookNumber(o_abs);

  00087	48 8b 7c 24 30	 mov	 rdi, QWORD PTR o_abs$[rsp]
  0008c	48 8b d7	 mov	 rdx, rdi
  0008f	48 8d 4c 24 40	 lea	 rcx, QWORD PTR root$[rsp]
  00094	e8 00 00 00 00	 call	 ?HookNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::HookNumber

; 1323 :         if (o_sign < 0)

  00099	80 bc 24 a0 00
	00 00 00	 cmp	 BYTE PTR o_sign$[rsp], 0
  000a1	7d 17		 jge	 SHORT $LN7@PMC_TryPar

; 1324 :         {
; 1325 :             // 負数は表現できないのでエラーとする
; 1326 :             *result = 0;

  000a3	c7 03 00 00 00
	00		 mov	 DWORD PTR [rbx], 0

; 1327 :             return (PMC_STATUS_OVERFLOW);

  000a9	48 8d 4c 24 40	 lea	 rcx, QWORD PTR root$[rsp]
  000ae	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  000b3	b8 fc ff ff ff	 mov	 eax, -4
  000b8	eb 36		 jmp	 SHORT $LN1@PMC_TryPar
$LN7@PMC_TryPar:

; 1328 :         }
; 1329 :         *o = (PMC_HANDLE_UINT)o_abs;

  000ba	48 89 3e	 mov	 QWORD PTR [rsi], rdi

; 1330 :         root.UnlinkNumber(o_abs);

  000bd	48 8b d7	 mov	 rdx, rdi
  000c0	48 8d 4c 24 40	 lea	 rcx, QWORD PTR root$[rsp]
  000c5	e8 00 00 00 00	 call	 ?UnlinkNumber@ResourceHolderUINT@Internal@Core@Math@Palmtree@@QEAAXPEAU__tag_NUMBER_HEADER@2345@@Z ; Palmtree::Math::Core::Internal::ResourceHolderUINT::UnlinkNumber

; 1331 :         *result = 1;

  000ca	c7 03 01 00 00
	00		 mov	 DWORD PTR [rbx], 1

; 1332 :         return (PMC_STATUS_OK);

  000d0	48 8d 4c 24 40	 lea	 rcx, QWORD PTR root$[rsp]
  000d5	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  000da	33 c0		 xor	 eax, eax
  000dc	eb 12		 jmp	 SHORT $LN1@PMC_TryPar
$LN6@PMC_TryPar:

; 1318 :         {
; 1319 :             *result = 0;

  000de	c7 03 00 00 00
	00		 mov	 DWORD PTR [rbx], 0

; 1320 :             return (err);

  000e4	48 8d 4c 24 40	 lea	 rcx, QWORD PTR root$[rsp]
  000e9	e8 00 00 00 00	 call	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
  000ee	8b c7		 mov	 eax, edi
$LN1@PMC_TryPar:

; 1333 :     }

  000f0	4c 8d 9c 24 90
	00 00 00	 lea	 r11, QWORD PTR [rsp+144]
  000f8	49 8b 5b 18	 mov	 rbx, QWORD PTR [r11+24]
  000fc	49 8b 6b 20	 mov	 rbp, QWORD PTR [r11+32]
  00100	49 8b 73 28	 mov	 rsi, QWORD PTR [r11+40]
  00104	49 8b e3	 mov	 rsp, r11
  00107	5f		 pop	 rdi
  00108	c3		 ret	 0
$LN13@PMC_TryPar:

; 1310 :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"o");

  00109	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_13LNPOMHLG@?$AAo@
  00110	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
  00117	48 8d 4c 24 60	 lea	 rcx, QWORD PTR $T1[rsp]
  0011c	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  00121	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  00128	48 8d 4c 24 60	 lea	 rcx, QWORD PTR $T1[rsp]
  0012d	e8 00 00 00 00	 call	 _CxxThrowException
  00132	cc		 int	 3
$LN12@PMC_TryPar:

; 1308 :             throw ArgumentNullException(L"引数にnullptrが与えられています。", L"source");

  00133	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1O@JOABEBCL@?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe@
  0013a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@ECFIEPAC@?$AA?$BF?$AAp?$AAk?$AAn?$AAu?$AAl?$AAl?$AAp?$AAt?$AAr?$AAL?$AA?$AO?$AAH?$PP?$IJ?$PP?$IM@
  00141	48 8d 4c 24 60	 lea	 rcx, QWORD PTR $T2[rsp]
  00146	e8 00 00 00 00	 call	 ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
  0014b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVArgumentNullException@Internal@Core@Math@Palmtree@@
  00152	48 8d 4c 24 60	 lea	 rcx, QWORD PTR $T2[rsp]
  00157	e8 00 00 00 00	 call	 _CxxThrowException
  0015c	cc		 int	 3
$LN10@PMC_TryPar:
?PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z ENDP ; Palmtree::Math::Core::Internal::PMC_TryParse
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
o_abs$ = 48
root$ = 64
$T1 = 96
$T2 = 96
o_sign$ = 160
source$ = 160
number_styles$ = 168
format_option$ = 176
o$ = 184
result$ = 192
?dtor$0@?0??PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_TryParse'::`1'::dtor$0
  00000	48 8d 8a 40 00
	00 00		 lea	 rcx, QWORD PTR root$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
?dtor$0@?0??PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_TryParse'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
o_abs$ = 48
root$ = 64
$T1 = 96
$T2 = 96
o_sign$ = 160
source$ = 160
number_styles$ = 168
format_option$ = 176
o$ = 184
result$ = 192
?dtor$0@?0??PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z@4HA PROC ; `Palmtree::Math::Core::Internal::PMC_TryParse'::`1'::dtor$0
  00000	48 8d 8a 40 00
	00 00		 lea	 rcx, QWORD PTR root$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1ResourceHolderUINT@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::ResourceHolderUINT::~ResourceHolderUINT
?dtor$0@?0??PMC_TryParse@Internal@Core@Math@Palmtree@@YAHPEB_WHPEBU__tag_PMC_NUMBER_FORMAT_INFO@1234@PEAPEAU__tag_PMC_HANDLE_UINT@1234@PEAI@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::PMC_TryParse'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_parse.cpp
;	COMDAT ?Initialize_Parse@Internal@Core@Math@Palmtree@@YAHPEAU_tag_PROCESSOR_FEATURES@1234@@Z
_TEXT	SEGMENT
feature$ = 48
?Initialize_Parse@Internal@Core@Math@Palmtree@@YAHPEAU_tag_PROCESSOR_FEATURES@1234@@Z PROC ; Palmtree::Math::Core::Internal::Initialize_Parse, COMDAT

; 1358 :     {

$LN6:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 1359 :         InitializeNumberFormatoInfo(&default_number_format_option);

  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?default_number_format_option@Internal@Core@Math@Palmtree@@3U__tag_PMC_NUMBER_FORMAT_INFO@1234@A
  00010	e8 00 00 00 00	 call	 ?InitializeNumberFormatoInfo@Internal@Core@Math@Palmtree@@YAXPEAU__tag_PMC_NUMBER_FORMAT_INFO@1234@@Z ; Palmtree::Math::Core::Internal::InitializeNumberFormatoInfo
  00015	8b 03		 mov	 eax, DWORD PTR [rbx]

; 1360 : 
; 1361 :         if (feature->PROCESSOR_FEATURE_ADX && feature->PROCESSOR_FEATURE_BMI2)
; 1362 :             fp_MultiplyAndAdd = MultiplyAndAdd_using_ADCX_MULX;
; 1363 :         else
; 1364 :             fp_MultiplyAndAdd = MultiplyAndAdd_using_ADC_MUL;
; 1365 : 
; 1366 :         return (PMC_STATUS_OK);

  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?MultiplyAndAdd_using_ADCX_MULX@Internal@Core@Math@Palmtree@@YAPEA_KPEA_K_K1@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd_using_ADCX_MULX
  0001e	83 e0 0a	 and	 eax, 10
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?MultiplyAndAdd_using_ADC_MUL@Internal@Core@Math@Palmtree@@YAPEA_KPEA_K_K1@Z ; Palmtree::Math::Core::Internal::MultiplyAndAdd_using_ADC_MUL
  00028	3c 0a		 cmp	 al, 10
  0002a	48 0f 45 ca	 cmovne	 rcx, rdx
  0002e	33 c0		 xor	 eax, eax
  00030	48 89 0d 00 00
	00 00		 mov	 QWORD PTR ?fp_MultiplyAndAdd@Internal@Core@Math@Palmtree@@3P6APEA_KPEA_K_K1@ZEA, rcx

; 1367 :     }

  00037	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003b	5b		 pop	 rbx
  0003c	c3		 ret	 0
?Initialize_Parse@Internal@Core@Math@Palmtree@@YAHPEAU_tag_PROCESSOR_FEATURES@1234@@Z ENDP ; Palmtree::Math::Core::Internal::Initialize_Parse
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?GetString@StringWriter@Internal@Core@Math@Palmtree@@UEAAPEA_WXZ
_TEXT	SEGMENT
this$ = 8
?GetString@StringWriter@Internal@Core@Math@Palmtree@@UEAAPEA_WXZ PROC ; Palmtree::Math::Core::Internal::StringWriter::GetString, COMDAT

; 245  :             return (_sob);

  00000	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]

; 246  :         }

  00004	c3		 ret	 0
?GetString@StringWriter@Internal@Core@Math@Palmtree@@UEAAPEA_WXZ ENDP ; Palmtree::Math::Core::Internal::StringWriter::GetString
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?Write@StringWriter@Internal@Core@Math@Palmtree@@UEAAXPEB_W@Z
_TEXT	SEGMENT
this$ = 48
str$ = 56
?Write@StringWriter@Internal@Core@Math@Palmtree@@UEAAXPEB_W@Z PROC ; Palmtree::Math::Core::Internal::StringWriter::Write, COMDAT

; 235  :         {

$LN10:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	48 8b f9	 mov	 rdi, rcx

; 236  :             while (*str != L'\0')

  00010	0f b7 12	 movzx	 edx, WORD PTR [rdx]
  00013	66 85 d2	 test	 dx, dx
  00016	74 1e		 je	 SHORT $LN3@Write
  00018	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL2@Write:

; 237  :             {
; 238  :                 Write(*str);

  00020	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  00023	48 8b cf	 mov	 rcx, rdi
  00026	ff 50 08	 call	 QWORD PTR [rax+8]
  00029	0f b7 53 02	 movzx	 edx, WORD PTR [rbx+2]

; 239  :                 ++str;

  0002d	48 8d 5b 02	 lea	 rbx, QWORD PTR [rbx+2]
  00031	66 85 d2	 test	 dx, dx
  00034	75 ea		 jne	 SHORT $LL2@Write
$LN3@Write:

; 240  :             }
; 241  :         }

  00036	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0003b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003f	5f		 pop	 rdi
  00040	c3		 ret	 0
?Write@StringWriter@Internal@Core@Math@Palmtree@@UEAAXPEB_W@Z ENDP ; Palmtree::Math::Core::Internal::StringWriter::Write
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?Write@StringWriter@Internal@Core@Math@Palmtree@@UEAAX_W@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 96
c$ = 104
?Write@StringWriter@Internal@Core@Math@Palmtree@@UEAAX_W@Z PROC ; Palmtree::Math::Core::Internal::StringWriter::Write, COMDAT

; 214  :         {

$LN8:
  00000	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 215  :             if (_p != nullptr)

  00004	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00008	4d 85 c0	 test	 r8, r8
  0000b	74 1c		 je	 SHORT $LN2@Write

; 216  :             {
; 217  :                 if (_p + 1 >= _eob)

  0000d	49 8d 40 02	 lea	 rax, QWORD PTR [r8+2]
  00011	48 3b 41 18	 cmp	 rax, QWORD PTR [rcx+24]
  00015	73 1b		 jae	 SHORT $LN7@Write

; 219  :                 *_p++ = c;

  00017	66 41 89 10	 mov	 WORD PTR [r8], dx
  0001b	48 83 41 08 02	 add	 QWORD PTR [rcx+8], 2
  00020	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]

; 220  :                 *_p = L'\0';

  00024	33 d2		 xor	 edx, edx
  00026	66 89 10	 mov	 WORD PTR [rax], dx
$LN2@Write:

; 221  :             }
; 222  :             ++_written;

  00029	48 ff 41 20	 inc	 QWORD PTR [rcx+32]

; 223  :         }

  0002d	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00031	c3		 ret	 0
$LN7@Write:

; 218  :                     throw InsufficientBufferException(L"書き込み先バッファのサイズが不足しています。");

  00032	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@JABAMCFP@?$PP?x?$AAM?$PP?$LM?$AA?$HP?$AAH?$PP?P?$PP?C?$PP?U?$PP?$KB?$AAn?$PP?$LF?$PP?$KE?$PP?$LK?$AAL?$AA?$AN@
  00039	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T1[rsp]
  0003e	e8 00 00 00 00	 call	 ??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException
  00043	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInsufficientBufferException@Internal@Core@Math@Palmtree@@
  0004a	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T1[rsp]
  0004f	e8 00 00 00 00	 call	 _CxxThrowException
  00054	cc		 int	 3
$LN5@Write:
?Write@StringWriter@Internal@Core@Math@Palmtree@@UEAAX_W@Z ENDP ; Palmtree::Math::Core::Internal::StringWriter::Write
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ??0StringWriter@Internal@Core@Math@Palmtree@@QEAA@PEA_W_K@Z
_TEXT	SEGMENT
this$ = 8
buffer$ = 16
size$ = 24
??0StringWriter@Internal@Core@Math@Palmtree@@QEAA@PEA_W_K@Z PROC ; Palmtree::Math::Core::Internal::StringWriter::StringWriter, COMDAT

; 205  :         }
; 206  : 
; 207  :     public:
; 208  :         StringWriter(wchar_t* buffer, size_t size)
; 209  :             : StringWriter(buffer, buffer, buffer != nullptr ? buffer + size : nullptr)

  00000	48 85 d2	 test	 rdx, rdx
  00003	74 06		 je	 SHORT $LN3@StringWrit
  00005	4a 8d 04 42	 lea	 rax, QWORD PTR [rdx+r8*2]
  00009	eb 02		 jmp	 SHORT $LN4@StringWrit
$LN3@StringWrit:
  0000b	33 c0		 xor	 eax, eax
$LN4@StringWrit:

; 203  :             _eob = eob;

  0000d	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 210  :         {

  00011	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7StringWriter@Internal@Core@Math@Palmtree@@6B@
  00018	48 89 01	 mov	 QWORD PTR [rcx], rax

; 211  :         }

  0001b	48 8b c1	 mov	 rax, rcx

; 201  :             _p = p;

  0001e	48 89 51 08	 mov	 QWORD PTR [rcx+8], rdx

; 202  :             _sob = sob;

  00022	48 89 51 10	 mov	 QWORD PTR [rcx+16], rdx

; 204  :             _written = 0;

  00026	48 c7 41 20 00
	00 00 00	 mov	 QWORD PTR [rcx+32], 0

; 211  :         }

  0002e	c3		 ret	 0
??0StringWriter@Internal@Core@Math@Palmtree@@QEAA@PEA_W_K@Z ENDP ; Palmtree::Math::Core::Internal::StringWriter::StringWriter
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ??0StringWriter@Internal@Core@Math@Palmtree@@IEAA@PEA_W00@Z
_TEXT	SEGMENT
this$ = 8
p$ = 16
sob$ = 24
eob$ = 32
??0StringWriter@Internal@Core@Math@Palmtree@@IEAA@PEA_W00@Z PROC ; Palmtree::Math::Core::Internal::StringWriter::StringWriter, COMDAT

; 199  :         StringWriter(wchar_t* p, wchar_t* sob, wchar_t* eob)

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7StringWriter@Internal@Core@Math@Palmtree@@6B@

; 200  :         {
; 201  :             _p = p;

  00007	48 89 51 08	 mov	 QWORD PTR [rcx+8], rdx
  0000b	48 89 01	 mov	 QWORD PTR [rcx], rax

; 202  :             _sob = sob;
; 203  :             _eob = eob;
; 204  :             _written = 0;
; 205  :         }

  0000e	48 8b c1	 mov	 rax, rcx
  00011	4c 89 41 10	 mov	 QWORD PTR [rcx+16], r8
  00015	4c 89 49 18	 mov	 QWORD PTR [rcx+24], r9
  00019	48 c7 41 20 00
	00 00 00	 mov	 QWORD PTR [rcx+32], 0
  00021	c3		 ret	 0
??0StringWriter@Internal@Core@Math@Palmtree@@IEAA@PEA_W00@Z ENDP ; Palmtree::Math::Core::Internal::StringWriter::StringWriter
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?StartsWith@StringReader@Internal@Core@Math@Palmtree@@CAHPEB_W0@Z
_TEXT	SEGMENT
a$ = 8
b$ = 16
?StartsWith@StringReader@Internal@Core@Math@Palmtree@@CAHPEB_W0@Z PROC ; Palmtree::Math::Core::Internal::StringReader::StartsWith, COMDAT

; 121  :             while (*b != L'\0')

  00000	0f b7 02	 movzx	 eax, WORD PTR [rdx]
  00003	66 85 c0	 test	 ax, ax
  00006	74 1b		 je	 SHORT $LN3@StartsWith
  00008	48 2b ca	 sub	 rcx, rdx
  0000b	0f 1f 44 00 00	 npad	 5
$LL2@StartsWith:

; 122  :             {
; 123  :                 if (*a != *b)

  00010	66 39 04 11	 cmp	 WORD PTR [rcx+rdx], ax
  00014	75 13		 jne	 SHORT $LN7@StartsWith

; 125  :                 ++a;
; 126  :                 ++b;

  00016	0f b7 42 02	 movzx	 eax, WORD PTR [rdx+2]
  0001a	48 83 c2 02	 add	 rdx, 2
  0001e	66 85 c0	 test	 ax, ax
  00021	75 ed		 jne	 SHORT $LL2@StartsWith
$LN3@StartsWith:

; 127  :             }
; 128  :             return (1);

  00023	b8 01 00 00 00	 mov	 eax, 1

; 129  :         }

  00028	c3		 ret	 0
$LN7@StartsWith:

; 124  :                     return (0);

  00029	33 c0		 xor	 eax, eax

; 129  :         }

  0002b	c3		 ret	 0
?StartsWith@StringReader@Internal@Core@Math@Palmtree@@CAHPEB_W0@Z ENDP ; Palmtree::Math::Core::Internal::StringReader::StartsWith
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?SkipString@StringReader@Internal@Core@Math@Palmtree@@UEAAXPEB_W@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 96
str$ = 104
?SkipString@StringReader@Internal@Core@Math@Palmtree@@UEAAXPEB_W@Z PROC ; Palmtree::Math::Core::Internal::StringReader::SkipString, COMDAT

; 109  :         {

$LN17:
  00000	40 53		 push	 rbx
  00002	48 83 ec 50	 sub	 rsp, 80			; 00000050H

; 121  :             while (*b != L'\0')

  00006	44 0f b7 02	 movzx	 r8d, WORD PTR [rdx]

; 109  :         {

  0000a	48 8b d9	 mov	 rbx, rcx

; 110  :             if (!StartsWith(_p, str))

  0000d	48 8b c2	 mov	 rax, rdx

; 121  :             while (*b != L'\0')

  00010	66 45 85 c0	 test	 r8w, r8w
  00014	74 20		 je	 SHORT $LN2@SkipString
  00016	4c 8b 49 08	 mov	 r9, QWORD PTR [rcx+8]
  0001a	4c 2b ca	 sub	 r9, rdx
  0001d	0f 1f 00	 npad	 3
$LL5@SkipString:

; 122  :             {
; 123  :                 if (*a != *b)

  00020	66 45 39 04 01	 cmp	 WORD PTR [r9+rax], r8w
  00025	75 28		 jne	 SHORT $LN14@SkipString

; 124  :                     return (0);
; 125  :                 ++a;
; 126  :                 ++b;

  00027	44 0f b7 40 02	 movzx	 r8d, WORD PTR [rax+2]
  0002c	48 83 c0 02	 add	 rax, 2
  00030	66 45 85 c0	 test	 r8w, r8w
  00034	75 ea		 jne	 SHORT $LL5@SkipString
$LN2@SkipString:

; 114  :             }
; 115  :             _p += lstrlenW(str);

  00036	48 8b ca	 mov	 rcx, rdx
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_lstrlenW
  0003f	48 63 c8	 movsxd	 rcx, eax
  00042	48 03 c9	 add	 rcx, rcx
  00045	48 01 4b 08	 add	 QWORD PTR [rbx+8], rcx

; 116  :         }

  00049	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0004d	5b		 pop	 rbx
  0004e	c3		 ret	 0
$LN14@SkipString:

; 111  :             {
; 112  :                 // str で始まっていないにもかかわらず、strをスキップしようとした。
; 113  :                 throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_stringio.h;StringReader::SkipString;1");

  0004f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1FE@KONPIGEM@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@
  00056	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  0005d	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T1[rsp]
  00062	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00067	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0006e	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T1[rsp]
  00073	e8 00 00 00 00	 call	 _CxxThrowException
  00078	cc		 int	 3
$LN15@SkipString:
?SkipString@StringReader@Internal@Core@Math@Palmtree@@UEAAXPEB_W@Z ENDP ; Palmtree::Math::Core::Internal::StringReader::SkipString
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?SkipSpace@StringReader@Internal@Core@Math@Palmtree@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?SkipSpace@StringReader@Internal@Core@Math@Palmtree@@QEAAXXZ PROC ; Palmtree::Math::Core::Internal::StringReader::SkipSpace, COMDAT

; 89   :         {

$LN17:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 90   :             for (;;)
; 91   :             {
; 92   :                 switch (PeekChar())

  00006	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00009	48 8b d9	 mov	 rbx, rcx
  0000c	ff 10		 call	 QWORD PTR [rax]
  0000e	0f b7 c0	 movzx	 eax, ax
  00011	83 f8 09	 cmp	 eax, 9
  00014	72 23		 jb	 SHORT $LN15@SkipSpace
$LL2@SkipSpace:
  00016	83 f8 0d	 cmp	 eax, 13
  00019	76 05		 jbe	 SHORT $LN7@SkipSpace
  0001b	83 f8 20	 cmp	 eax, 32			; 00000020H
  0001e	75 19		 jne	 SHORT $LN15@SkipSpace
$LN7@SkipSpace:

; 93   :                 {
; 94   :                 case L' ':
; 95   :                 case L'\t':
; 96   :                 case L'\n':
; 97   :                 case L'\r':
; 98   :                 case L'\f':
; 99   :                 case L'\v':
; 100  :                     break;
; 101  :                 default:
; 102  :                     return;
; 103  :                 }
; 104  :                 Progress();

  00020	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00023	48 8b cb	 mov	 rcx, rbx
  00026	ff 50 08	 call	 QWORD PTR [rax+8]
  00029	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0002c	48 8b cb	 mov	 rcx, rbx
  0002f	ff 10		 call	 QWORD PTR [rax]
  00031	0f b7 c0	 movzx	 eax, ax
  00034	83 f8 09	 cmp	 eax, 9
  00037	73 dd		 jae	 SHORT $LL2@SkipSpace
$LN15@SkipSpace:

; 105  :             }
; 106  :         }

  00039	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003d	5b		 pop	 rbx
  0003e	c3		 ret	 0
?SkipSpace@StringReader@Internal@Core@Math@Palmtree@@QEAAXXZ ENDP ; Palmtree::Math::Core::Internal::StringReader::SkipSpace
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?StartsWith@StringReader@Internal@Core@Math@Palmtree@@UEAAHPEB_W@Z
_TEXT	SEGMENT
this$ = 8
str$ = 16
?StartsWith@StringReader@Internal@Core@Math@Palmtree@@UEAAHPEB_W@Z PROC ; Palmtree::Math::Core::Internal::StringReader::StartsWith, COMDAT

; 121  :             while (*b != L'\0')

  00000	0f b7 02	 movzx	 eax, WORD PTR [rdx]
  00003	66 85 c0	 test	 ax, ax
  00006	74 1b		 je	 SHORT $LN5@StartsWith
  00008	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0000c	48 2b ca	 sub	 rcx, rdx
  0000f	90		 npad	 1
$LL4@StartsWith:

; 122  :             {
; 123  :                 if (*a != *b)

  00010	66 39 04 11	 cmp	 WORD PTR [rcx+rdx], ax
  00014	75 13		 jne	 SHORT $LN9@StartsWith

; 124  :                     return (0);
; 125  :                 ++a;
; 126  :                 ++b;

  00016	0f b7 42 02	 movzx	 eax, WORD PTR [rdx+2]
  0001a	48 83 c2 02	 add	 rdx, 2
  0001e	66 85 c0	 test	 ax, ax
  00021	75 ed		 jne	 SHORT $LL4@StartsWith
$LN5@StartsWith:

; 85   :             return (StartsWith(_p, str));

  00023	b8 01 00 00 00	 mov	 eax, 1

; 86   :         }

  00028	c3		 ret	 0
$LN9@StartsWith:

; 85   :             return (StartsWith(_p, str));

  00029	33 c0		 xor	 eax, eax

; 86   :         }

  0002b	c3		 ret	 0
?StartsWith@StringReader@Internal@Core@Math@Palmtree@@UEAAHPEB_W@Z ENDP ; Palmtree::Math::Core::Internal::StringReader::StartsWith
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?Progress@StringReader@Internal@Core@Math@Palmtree@@UEAAXXZ
_TEXT	SEGMENT
$T1 = 32
this$ = 96
?Progress@StringReader@Internal@Core@Math@Palmtree@@UEAAXXZ PROC ; Palmtree::Math::Core::Internal::StringReader::Progress, COMDAT

; 77   :         {

$LN7:
  00000	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 78   :             if (*_p == L'\0')

  00004	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  00008	66 83 38 00	 cmp	 WORD PTR [rax], 0
  0000c	74 0d		 je	 SHORT $LN6@Progress

; 80   :             ++_p;

  0000e	48 83 c0 02	 add	 rax, 2
  00012	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 81   :         }

  00016	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0001a	c3		 ret	 0
$LN6@Progress:

; 79   :                 throw InternalErrorException(L"内部エラーが発生しました。", L"pmc_stringio.h;StringReader::Progress;1");

  0001b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1FA@CNGEABBJ@?$AAp?$AAm?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AAi?$AAo?$AA?4?$AAh?$AA?$DL@
  00022	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1BM@FCPAHMHB@?$PP?$IF?$PP?h?$PP?$KI?$PP?i?$PP?$PM?$AAL?$AAz?$AA?$BP?$AAW?$AA?$HO?$AAW?$AA_?$AA?$AC@
  00029	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T1[rsp]
  0002e	e8 00 00 00 00	 call	 ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
  00033	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVInternalErrorException@Internal@Core@Math@Palmtree@@
  0003a	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T1[rsp]
  0003f	e8 00 00 00 00	 call	 _CxxThrowException
  00044	cc		 int	 3
$LN4@Progress:
?Progress@StringReader@Internal@Core@Math@Palmtree@@UEAAXXZ ENDP ; Palmtree::Math::Core::Internal::StringReader::Progress
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ?PeekChar@StringReader@Internal@Core@Math@Palmtree@@UEAA_WXZ
_TEXT	SEGMENT
this$ = 8
?PeekChar@StringReader@Internal@Core@Math@Palmtree@@UEAA_WXZ PROC ; Palmtree::Math::Core::Internal::StringReader::PeekChar, COMDAT

; 73   :             return (*_p);

  00000	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  00004	0f b7 00	 movzx	 eax, WORD PTR [rax]

; 74   :         }

  00007	c3		 ret	 0
?PeekChar@StringReader@Internal@Core@Math@Palmtree@@UEAA_WXZ ENDP ; Palmtree::Math::Core::Internal::StringReader::PeekChar
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_stringio.h
;	COMDAT ??0StringReader@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z
_TEXT	SEGMENT
this$ = 8
p$ = 16
??0StringReader@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z PROC ; Palmtree::Math::Core::Internal::StringReader::StringReader, COMDAT

; 50   :         StringReader(const wchar_t* p)

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7StringReader@Internal@Core@Math@Palmtree@@6B@

; 51   :         {
; 52   :             _p = p;

  00007	48 89 51 08	 mov	 QWORD PTR [rcx+8], rdx
  0000b	48 89 01	 mov	 QWORD PTR [rcx], rax

; 53   :         }

  0000e	48 8b c1	 mov	 rax, rcx
  00011	c3		 ret	 0
??0StringReader@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z ENDP ; Palmtree::Math::Core::Internal::StringReader::StringReader
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
__flags$ = 72
??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor', COMDAT
$LN15:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
  00013	48 89 5c 24 48	 mov	 QWORD PTR [rsp+72], rbx
  00018	8b da		 mov	 ebx, edx
  0001a	48 8b f9	 mov	 rdi, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 295  :         {

  0001d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
  00024	48 89 01	 mov	 QWORD PTR [rcx], rax

; 70   :         {

  00027	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7Exception@Internal@Core@Math@Palmtree@@6B@
  0002e	48 89 01	 mov	 QWORD PTR [rcx], rax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 85   :     {

  00031	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7exception@std@@6B@
  00038	48 89 01	 mov	 QWORD PTR [rcx], rax

; 86   :         __std_exception_destroy(&_Data);

  0003b	48 83 c1 08	 add	 rcx, 8
  0003f	e8 00 00 00 00	 call	 __std_exception_destroy
  00044	90		 npad	 1
  00045	f6 c3 01	 test	 bl, 1
  00048	74 0e		 je	 SHORT $LN12@scalar
  0004a	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  0004f	48 8b cf	 mov	 rcx, rdi
  00052	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  00057	90		 npad	 1
$LN12@scalar:
  00058	48 8b c7	 mov	 rax, rdi
  0005b	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00060	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00064	5f		 pop	 rdi
  00065	c3		 ret	 0
??_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
__flags$ = 72
?dtor$0@?0???_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor''::`1'::dtor$0
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
?dtor$0@?0???_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor''::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
__flags$ = 72
?dtor$1@?0???_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor''::`1'::dtor$1
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$1@?0???_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor''::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
__flags$ = 72
?dtor$0@?0???_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor''::`1'::dtor$0
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
?dtor$0@?0???_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor''::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
__flags$ = 72
?dtor$1@?0???_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor''::`1'::dtor$1
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$1@?0???_GInternalErrorException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InternalErrorException::`scalar deleting destructor''::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ PROC ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException, COMDAT

; 295  :         {

$LN11:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
  00012	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
  00019	48 89 01	 mov	 QWORD PTR [rcx], rax

; 70   :         {

  0001c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00023	48 89 01	 mov	 QWORD PTR [rcx], rax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 85   :     {

  00026	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7exception@std@@6B@
  0002d	48 89 01	 mov	 QWORD PTR [rcx], rax

; 86   :         __std_exception_destroy(&_Data);

  00030	48 83 c1 08	 add	 rcx, 8
  00034	e8 00 00 00 00	 call	 __std_exception_destroy
  00039	90		 npad	 1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 296  :         }

  0003a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003e	c3		 ret	 0
??1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException'::`1'::dtor$0
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
?dtor$1@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException'::`1'::dtor$1
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$1@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException'::`1'::dtor$0
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
?dtor$0@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
?dtor$1@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException'::`1'::dtor$1
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$1@?0???1InternalErrorException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::InternalErrorException::~InternalErrorException'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
_TEXT	SEGMENT
$T1 = 0
this$ = 32
p$ = 40
??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException, COMDAT

; 291  :         {

$LN11:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24
  00009	48 c7 04 24 fe
	ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  00011	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7exception@std@@6B@
  00018	48 89 01	 mov	 QWORD PTR [rcx], rax

; 49   :         : _Data()

  0001b	33 c0		 xor	 eax, eax
  0001d	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00021	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 62   :         Exception(const Exception& p) noexcept(true)

  00025	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7Exception@Internal@Core@Math@Palmtree@@6B@
  0002c	48 89 01	 mov	 QWORD PTR [rcx], rax

; 63   :         {
; 64   :             _code = p._code;

  0002f	8b 42 18	 mov	 eax, DWORD PTR [rdx+24]
  00032	89 41 18	 mov	 DWORD PTR [rcx+24], eax

; 65   :             _message = p._message;

  00035	48 8b 42 20	 mov	 rax, QWORD PTR [rdx+32]
  00039	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 66   :             _data = p._data;

  0003d	48 8b 42 28	 mov	 rax, QWORD PTR [rdx+40]
  00041	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax

; 291  :         {

  00045	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
  0004c	48 89 01	 mov	 QWORD PTR [rcx], rax

; 292  :         }

  0004f	48 8b c1	 mov	 rax, rcx
  00052	48 83 c4 18	 add	 rsp, 24
  00056	c3		 ret	 0
??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 0
this$ = 32
p$ = 40
?dtor$1@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$1
  00000	48 8b 8a 20 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$1@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$1
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 0
this$ = 32
p$ = 40
?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$0
  00000	48 8b 8a 20 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 0
this$ = 32
p$ = 40
?dtor$1@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$1
  00000	48 8b 8a 20 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$1@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 0
this$ = 32
p$ = 40
?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$0
  00000	48 8b 8a 20 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
_TEXT	SEGMENT
$T1 = 0
this$ = 32
message$ = 40
data$ = 48
??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z PROC ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException, COMDAT

; 286  :         {

$LN11:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24
  00009	48 c7 04 24 fe
	ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  00011	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7exception@std@@6B@
  00018	48 89 01	 mov	 QWORD PTR [rcx], rax

; 49   :         : _Data()

  0001b	33 c0		 xor	 eax, eax
  0001d	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00021	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)

  00025	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7Exception@Internal@Core@Math@Palmtree@@6B@
  0002c	48 89 01	 mov	 QWORD PTR [rcx], rax

; 55   :         {
; 56   :             _code = code;

  0002f	c7 41 18 00 ff
	ff ff		 mov	 DWORD PTR [rcx+24], -256 ; ffffffffffffff00H

; 57   :             _message = message;

  00036	48 89 51 20	 mov	 QWORD PTR [rcx+32], rdx

; 58   :             _data = data;

  0003a	4c 89 41 28	 mov	 QWORD PTR [rcx+40], r8

; 286  :         {

  0003e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7InternalErrorException@Internal@Core@Math@Palmtree@@6B@
  00045	48 89 01	 mov	 QWORD PTR [rcx], rax

; 287  :         }

  00048	48 8b c1	 mov	 rax, rcx
  0004b	48 83 c4 18	 add	 rsp, 24
  0004f	c3		 ret	 0
??0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ENDP ; Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 0
this$ = 32
message$ = 40
data$ = 48
?dtor$1@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$1
  00000	48 8b 8a 20 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$1@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$1
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 0
this$ = 32
message$ = 40
data$ = 48
?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$0
  00000	48 8b 8a 20 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 0
this$ = 32
message$ = 40
data$ = 48
?dtor$1@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$1
  00000	48 8b 8a 20 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$1@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 0
this$ = 32
message$ = 40
data$ = 48
?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$0
  00000	48 8b 8a 20 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
?dtor$0@?0???0InternalErrorException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InternalErrorException::InternalErrorException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
__flags$ = 72
??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z PROC ; Palmtree::Math::Core::Internal::InsufficientBufferException::`scalar deleting destructor', COMDAT
$LN15:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
  00013	48 89 5c 24 48	 mov	 QWORD PTR [rsp+72], rbx
  00018	8b da		 mov	 ebx, edx
  0001a	48 8b f9	 mov	 rdi, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 238  :         {

  0001d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@
  00024	48 89 01	 mov	 QWORD PTR [rcx], rax

; 70   :         {

  00027	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7Exception@Internal@Core@Math@Palmtree@@6B@
  0002e	48 89 01	 mov	 QWORD PTR [rcx], rax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 85   :     {

  00031	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7exception@std@@6B@
  00038	48 89 01	 mov	 QWORD PTR [rcx], rax

; 86   :         __std_exception_destroy(&_Data);

  0003b	48 83 c1 08	 add	 rcx, 8
  0003f	e8 00 00 00 00	 call	 __std_exception_destroy
  00044	90		 npad	 1
  00045	f6 c3 01	 test	 bl, 1
  00048	74 0e		 je	 SHORT $LN12@scalar
  0004a	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  0004f	48 8b cf	 mov	 rcx, rdi
  00052	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  00057	90		 npad	 1
$LN12@scalar:
  00058	48 8b c7	 mov	 rax, rdi
  0005b	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00060	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00064	5f		 pop	 rdi
  00065	c3		 ret	 0
??_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z ENDP ; Palmtree::Math::Core::Internal::InsufficientBufferException::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
__flags$ = 72
?dtor$0@?0???_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InsufficientBufferException::`scalar deleting destructor''::`1'::dtor$0
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
?dtor$0@?0???_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InsufficientBufferException::`scalar deleting destructor''::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
__flags$ = 72
?dtor$1@?0???_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InsufficientBufferException::`scalar deleting destructor''::`1'::dtor$1
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$1@?0???_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InsufficientBufferException::`scalar deleting destructor''::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
__flags$ = 72
?dtor$0@?0???_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InsufficientBufferException::`scalar deleting destructor''::`1'::dtor$0
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
?dtor$0@?0???_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InsufficientBufferException::`scalar deleting destructor''::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
__flags$ = 72
?dtor$1@?0???_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InsufficientBufferException::`scalar deleting destructor''::`1'::dtor$1
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$1@?0???_GInsufficientBufferException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InsufficientBufferException::`scalar deleting destructor''::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ PROC ; Palmtree::Math::Core::Internal::InsufficientBufferException::~InsufficientBufferException, COMDAT

; 238  :         {

$LN11:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
  00012	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@
  00019	48 89 01	 mov	 QWORD PTR [rcx], rax

; 70   :         {

  0001c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00023	48 89 01	 mov	 QWORD PTR [rcx], rax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 85   :     {

  00026	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7exception@std@@6B@
  0002d	48 89 01	 mov	 QWORD PTR [rcx], rax

; 86   :         __std_exception_destroy(&_Data);

  00030	48 83 c1 08	 add	 rcx, 8
  00034	e8 00 00 00 00	 call	 __std_exception_destroy
  00039	90		 npad	 1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 239  :         }

  0003a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003e	c3		 ret	 0
??1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ ENDP ; Palmtree::Math::Core::Internal::InsufficientBufferException::~InsufficientBufferException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
?dtor$0@?0???1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::InsufficientBufferException::~InsufficientBufferException'::`1'::dtor$0
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
?dtor$0@?0???1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::InsufficientBufferException::~InsufficientBufferException'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
?dtor$1@?0???1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::InsufficientBufferException::~InsufficientBufferException'::`1'::dtor$1
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$1@?0???1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::InsufficientBufferException::~InsufficientBufferException'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
?dtor$0@?0???1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::InsufficientBufferException::~InsufficientBufferException'::`1'::dtor$0
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
?dtor$0@?0???1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::InsufficientBufferException::~InsufficientBufferException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
?dtor$1@?0???1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::InsufficientBufferException::~InsufficientBufferException'::`1'::dtor$1
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$1@?0???1InsufficientBufferException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::InsufficientBufferException::~InsufficientBufferException'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
_TEXT	SEGMENT
$T1 = 0
this$ = 32
p$ = 40
??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z PROC ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException, COMDAT

; 234  :         {

$LN11:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24
  00009	48 c7 04 24 fe
	ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  00011	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7exception@std@@6B@
  00018	48 89 01	 mov	 QWORD PTR [rcx], rax

; 49   :         : _Data()

  0001b	33 c0		 xor	 eax, eax
  0001d	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00021	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 62   :         Exception(const Exception& p) noexcept(true)

  00025	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7Exception@Internal@Core@Math@Palmtree@@6B@
  0002c	48 89 01	 mov	 QWORD PTR [rcx], rax

; 63   :         {
; 64   :             _code = p._code;

  0002f	8b 42 18	 mov	 eax, DWORD PTR [rdx+24]
  00032	89 41 18	 mov	 DWORD PTR [rcx+24], eax

; 65   :             _message = p._message;

  00035	48 8b 42 20	 mov	 rax, QWORD PTR [rdx+32]
  00039	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 66   :             _data = p._data;

  0003d	48 8b 42 28	 mov	 rax, QWORD PTR [rdx+40]
  00041	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax

; 234  :         {

  00045	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@
  0004c	48 89 01	 mov	 QWORD PTR [rcx], rax

; 235  :         }

  0004f	48 8b c1	 mov	 rax, rcx
  00052	48 83 c4 18	 add	 rsp, 24
  00056	c3		 ret	 0
??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ENDP ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 0
this$ = 32
p$ = 40
?dtor$1@?0???0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException'::`1'::dtor$1
  00000	48 8b 8a 20 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$1@?0???0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException'::`1'::dtor$1
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 0
this$ = 32
p$ = 40
?dtor$0@?0???0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException'::`1'::dtor$0
  00000	48 8b 8a 20 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
?dtor$0@?0???0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 0
this$ = 32
p$ = 40
?dtor$1@?0???0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException'::`1'::dtor$1
  00000	48 8b 8a 20 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$1@?0???0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 0
this$ = 32
p$ = 40
?dtor$0@?0???0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException'::`1'::dtor$0
  00000	48 8b 8a 20 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
?dtor$0@?0???0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z
_TEXT	SEGMENT
$T1 = 0
this$ = 32
message$ = 40
??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z PROC ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException, COMDAT

; 229  :         {

$LN11:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24
  00009	48 c7 04 24 fe
	ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  00011	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7exception@std@@6B@
  00018	48 89 01	 mov	 QWORD PTR [rcx], rax

; 49   :         : _Data()

  0001b	33 c0		 xor	 eax, eax
  0001d	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00021	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 47   :         Exception(PMC_STATUS_CODE code, const wchar_t* message) noexcept(true)

  00025	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7Exception@Internal@Core@Math@Palmtree@@6B@
  0002c	48 89 01	 mov	 QWORD PTR [rcx], rax

; 48   :         {
; 49   :             _code = code;

  0002f	c7 41 18 f8 ff
	ff ff		 mov	 DWORD PTR [rcx+24], -8

; 50   :             _message = message;

  00036	48 89 51 20	 mov	 QWORD PTR [rcx+32], rdx

; 51   :             _data = nullptr;

  0003a	48 c7 41 28 00
	00 00 00	 mov	 QWORD PTR [rcx+40], 0

; 229  :         {

  00042	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7InsufficientBufferException@Internal@Core@Math@Palmtree@@6B@
  00049	48 89 01	 mov	 QWORD PTR [rcx], rax

; 230  :         }

  0004c	48 8b c1	 mov	 rax, rcx
  0004f	48 83 c4 18	 add	 rsp, 24
  00053	c3		 ret	 0
??0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z ENDP ; Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 0
this$ = 32
message$ = 40
?dtor$1@?0???0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException'::`1'::dtor$1
  00000	48 8b 8a 20 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$1@?0???0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException'::`1'::dtor$1
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 0
this$ = 32
message$ = 40
?dtor$0@?0???0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException'::`1'::dtor$0
  00000	48 8b 8a 20 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
?dtor$0@?0???0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 0
this$ = 32
message$ = 40
?dtor$1@?0???0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException'::`1'::dtor$1
  00000	48 8b 8a 20 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$1@?0???0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 0
this$ = 32
message$ = 40
?dtor$0@?0???0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA PROC ; `Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException'::`1'::dtor$0
  00000	48 8b 8a 20 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
?dtor$0@?0???0InsufficientBufferException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::InsufficientBufferException::InsufficientBufferException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
__flags$ = 72
??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor', COMDAT
$LN15:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
  00013	48 89 5c 24 48	 mov	 QWORD PTR [rsp+72], rbx
  00018	8b da		 mov	 ebx, edx
  0001a	48 8b f9	 mov	 rdi, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 124  :         {

  0001d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
  00024	48 89 01	 mov	 QWORD PTR [rcx], rax

; 70   :         {

  00027	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7Exception@Internal@Core@Math@Palmtree@@6B@
  0002e	48 89 01	 mov	 QWORD PTR [rcx], rax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 85   :     {

  00031	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7exception@std@@6B@
  00038	48 89 01	 mov	 QWORD PTR [rcx], rax

; 86   :         __std_exception_destroy(&_Data);

  0003b	48 83 c1 08	 add	 rcx, 8
  0003f	e8 00 00 00 00	 call	 __std_exception_destroy
  00044	90		 npad	 1
  00045	f6 c3 01	 test	 bl, 1
  00048	74 0e		 je	 SHORT $LN12@scalar
  0004a	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  0004f	48 8b cf	 mov	 rcx, rdi
  00052	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  00057	90		 npad	 1
$LN12@scalar:
  00058	48 8b c7	 mov	 rax, rdi
  0005b	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00060	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00064	5f		 pop	 rdi
  00065	c3		 ret	 0
??_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
__flags$ = 72
?dtor$0@?0???_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor''::`1'::dtor$0
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
?dtor$0@?0???_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor''::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
__flags$ = 72
?dtor$1@?0???_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor''::`1'::dtor$1
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$1@?0???_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor''::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
__flags$ = 72
?dtor$0@?0???_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor''::`1'::dtor$0
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
?dtor$0@?0???_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor''::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
__flags$ = 72
?dtor$1@?0???_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor''::`1'::dtor$1
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$1@?0???_GArgumentNullException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentNullException::`scalar deleting destructor''::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException, COMDAT

; 124  :         {

$LN11:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
  00012	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
  00019	48 89 01	 mov	 QWORD PTR [rcx], rax

; 70   :         {

  0001c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00023	48 89 01	 mov	 QWORD PTR [rcx], rax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 85   :     {

  00026	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7exception@std@@6B@
  0002d	48 89 01	 mov	 QWORD PTR [rcx], rax

; 86   :         __std_exception_destroy(&_Data);

  00030	48 83 c1 08	 add	 rcx, 8
  00034	e8 00 00 00 00	 call	 __std_exception_destroy
  00039	90		 npad	 1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 125  :         }

  0003a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003e	c3		 ret	 0
??1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException'::`1'::dtor$0
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
?dtor$1@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException'::`1'::dtor$1
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$1@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException'::`1'::dtor$0
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
?dtor$0@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
?dtor$1@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException'::`1'::dtor$1
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$1@?0???1ArgumentNullException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentNullException::~ArgumentNullException'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
_TEXT	SEGMENT
$T1 = 0
this$ = 32
p$ = 40
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException, COMDAT

; 120  :         {

$LN11:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24
  00009	48 c7 04 24 fe
	ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  00011	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7exception@std@@6B@
  00018	48 89 01	 mov	 QWORD PTR [rcx], rax

; 49   :         : _Data()

  0001b	33 c0		 xor	 eax, eax
  0001d	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00021	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 62   :         Exception(const Exception& p) noexcept(true)

  00025	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7Exception@Internal@Core@Math@Palmtree@@6B@
  0002c	48 89 01	 mov	 QWORD PTR [rcx], rax

; 63   :         {
; 64   :             _code = p._code;

  0002f	8b 42 18	 mov	 eax, DWORD PTR [rdx+24]
  00032	89 41 18	 mov	 DWORD PTR [rcx+24], eax

; 65   :             _message = p._message;

  00035	48 8b 42 20	 mov	 rax, QWORD PTR [rdx+32]
  00039	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 66   :             _data = p._data;

  0003d	48 8b 42 28	 mov	 rax, QWORD PTR [rdx+40]
  00041	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax

; 120  :         {

  00045	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
  0004c	48 89 01	 mov	 QWORD PTR [rcx], rax

; 121  :         }

  0004f	48 8b c1	 mov	 rax, rcx
  00052	48 83 c4 18	 add	 rsp, 24
  00056	c3		 ret	 0
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 0
this$ = 32
p$ = 40
?dtor$1@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$1
  00000	48 8b 8a 20 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$1@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$1
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 0
this$ = 32
p$ = 40
?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$0
  00000	48 8b 8a 20 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 0
this$ = 32
p$ = 40
?dtor$1@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$1
  00000	48 8b 8a 20 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$1@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 0
this$ = 32
p$ = 40
?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$0
  00000	48 8b 8a 20 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z
_TEXT	SEGMENT
$T1 = 0
this$ = 32
message$ = 40
param_name$ = 48
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z PROC ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException, COMDAT

; 115  :         {

$LN11:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24
  00009	48 c7 04 24 fe
	ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  00011	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7exception@std@@6B@
  00018	48 89 01	 mov	 QWORD PTR [rcx], rax

; 49   :         : _Data()

  0001b	33 c0		 xor	 eax, eax
  0001d	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00021	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)

  00025	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7Exception@Internal@Core@Math@Palmtree@@6B@
  0002c	48 89 01	 mov	 QWORD PTR [rcx], rax

; 55   :         {
; 56   :             _code = code;

  0002f	c7 41 18 fe ff
	ff ff		 mov	 DWORD PTR [rcx+24], -2

; 57   :             _message = message;

  00036	48 89 51 20	 mov	 QWORD PTR [rcx+32], rdx

; 58   :             _data = data;

  0003a	4c 89 41 28	 mov	 QWORD PTR [rcx+40], r8

; 115  :         {

  0003e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7ArgumentNullException@Internal@Core@Math@Palmtree@@6B@
  00045	48 89 01	 mov	 QWORD PTR [rcx], rax

; 116  :         }

  00048	48 8b c1	 mov	 rax, rcx
  0004b	48 83 c4 18	 add	 rsp, 24
  0004f	c3		 ret	 0
??0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 0
this$ = 32
message$ = 40
param_name$ = 48
?dtor$1@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$1
  00000	48 8b 8a 20 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$1@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$1
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 0
this$ = 32
message$ = 40
param_name$ = 48
?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$0
  00000	48 8b 8a 20 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 0
this$ = 32
message$ = 40
param_name$ = 48
?dtor$1@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$1
  00000	48 8b 8a 20 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$1@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 0
this$ = 32
message$ = 40
param_name$ = 48
?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$0
  00000	48 8b 8a 20 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
?dtor$0@?0???0ArgumentNullException@Internal@Core@Math@Palmtree@@QEAA@PEB_W0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentNullException::ArgumentNullException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??_GArgumentException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
__flags$ = 72
??_GArgumentException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z PROC ; Palmtree::Math::Core::Internal::ArgumentException::`scalar deleting destructor', COMDAT
$LN15:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
  00013	48 89 5c 24 48	 mov	 QWORD PTR [rsp+72], rbx
  00018	8b da		 mov	 ebx, edx
  0001a	48 8b f9	 mov	 rdi, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 105  :         {

  0001d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7ArgumentException@Internal@Core@Math@Palmtree@@6B@
  00024	48 89 01	 mov	 QWORD PTR [rcx], rax

; 70   :         {

  00027	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7Exception@Internal@Core@Math@Palmtree@@6B@
  0002e	48 89 01	 mov	 QWORD PTR [rcx], rax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 85   :     {

  00031	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7exception@std@@6B@
  00038	48 89 01	 mov	 QWORD PTR [rcx], rax

; 86   :         __std_exception_destroy(&_Data);

  0003b	48 83 c1 08	 add	 rcx, 8
  0003f	e8 00 00 00 00	 call	 __std_exception_destroy
  00044	90		 npad	 1
  00045	f6 c3 01	 test	 bl, 1
  00048	74 0e		 je	 SHORT $LN12@scalar
  0004a	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  0004f	48 8b cf	 mov	 rcx, rdi
  00052	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  00057	90		 npad	 1
$LN12@scalar:
  00058	48 8b c7	 mov	 rax, rdi
  0005b	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00060	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00064	5f		 pop	 rdi
  00065	c3		 ret	 0
??_GArgumentException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentException::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
__flags$ = 72
?dtor$0@?0???_GArgumentException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentException::`scalar deleting destructor''::`1'::dtor$0
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
?dtor$0@?0???_GArgumentException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentException::`scalar deleting destructor''::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
__flags$ = 72
?dtor$1@?0???_GArgumentException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentException::`scalar deleting destructor''::`1'::dtor$1
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$1@?0???_GArgumentException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentException::`scalar deleting destructor''::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
__flags$ = 72
?dtor$0@?0???_GArgumentException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentException::`scalar deleting destructor''::`1'::dtor$0
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
?dtor$0@?0???_GArgumentException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentException::`scalar deleting destructor''::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
__flags$ = 72
?dtor$1@?0???_GArgumentException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentException::`scalar deleting destructor''::`1'::dtor$1
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$1@?0???_GArgumentException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentException::`scalar deleting destructor''::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ PROC ; Palmtree::Math::Core::Internal::ArgumentException::~ArgumentException, COMDAT

; 105  :         {

$LN11:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
  00012	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7ArgumentException@Internal@Core@Math@Palmtree@@6B@
  00019	48 89 01	 mov	 QWORD PTR [rcx], rax

; 70   :         {

  0001c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00023	48 89 01	 mov	 QWORD PTR [rcx], rax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 85   :     {

  00026	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7exception@std@@6B@
  0002d	48 89 01	 mov	 QWORD PTR [rcx], rax

; 86   :         __std_exception_destroy(&_Data);

  00030	48 83 c1 08	 add	 rcx, 8
  00034	e8 00 00 00 00	 call	 __std_exception_destroy
  00039	90		 npad	 1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 106  :         }

  0003a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003e	c3		 ret	 0
??1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ ENDP ; Palmtree::Math::Core::Internal::ArgumentException::~ArgumentException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
?dtor$0@?0???1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentException::~ArgumentException'::`1'::dtor$0
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
?dtor$0@?0???1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentException::~ArgumentException'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
?dtor$1@?0???1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentException::~ArgumentException'::`1'::dtor$1
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$1@?0???1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentException::~ArgumentException'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
?dtor$0@?0???1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentException::~ArgumentException'::`1'::dtor$0
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
?dtor$0@?0???1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentException::~ArgumentException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
?dtor$1@?0???1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentException::~ArgumentException'::`1'::dtor$1
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$1@?0???1ArgumentException@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentException::~ArgumentException'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
_TEXT	SEGMENT
$T1 = 0
this$ = 32
p$ = 40
??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z PROC ; Palmtree::Math::Core::Internal::ArgumentException::ArgumentException, COMDAT

; 101  :         {

$LN11:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24
  00009	48 c7 04 24 fe
	ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  00011	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7exception@std@@6B@
  00018	48 89 01	 mov	 QWORD PTR [rcx], rax

; 49   :         : _Data()

  0001b	33 c0		 xor	 eax, eax
  0001d	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00021	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 62   :         Exception(const Exception& p) noexcept(true)

  00025	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7Exception@Internal@Core@Math@Palmtree@@6B@
  0002c	48 89 01	 mov	 QWORD PTR [rcx], rax

; 63   :         {
; 64   :             _code = p._code;

  0002f	8b 42 18	 mov	 eax, DWORD PTR [rdx+24]
  00032	89 41 18	 mov	 DWORD PTR [rcx+24], eax

; 65   :             _message = p._message;

  00035	48 8b 42 20	 mov	 rax, QWORD PTR [rdx+32]
  00039	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 66   :             _data = p._data;

  0003d	48 8b 42 28	 mov	 rax, QWORD PTR [rdx+40]
  00041	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax

; 101  :         {

  00045	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7ArgumentException@Internal@Core@Math@Palmtree@@6B@
  0004c	48 89 01	 mov	 QWORD PTR [rcx], rax

; 102  :         }

  0004f	48 8b c1	 mov	 rax, rcx
  00052	48 83 c4 18	 add	 rsp, 24
  00056	c3		 ret	 0
??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentException::ArgumentException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 0
this$ = 32
p$ = 40
?dtor$1@?0???0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentException::ArgumentException'::`1'::dtor$1
  00000	48 8b 8a 20 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$1@?0???0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentException::ArgumentException'::`1'::dtor$1
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 0
this$ = 32
p$ = 40
?dtor$0@?0???0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentException::ArgumentException'::`1'::dtor$0
  00000	48 8b 8a 20 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
?dtor$0@?0???0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentException::ArgumentException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 0
this$ = 32
p$ = 40
?dtor$1@?0???0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentException::ArgumentException'::`1'::dtor$1
  00000	48 8b 8a 20 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$1@?0???0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentException::ArgumentException'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 0
this$ = 32
p$ = 40
?dtor$0@?0???0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentException::ArgumentException'::`1'::dtor$0
  00000	48 8b 8a 20 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
?dtor$0@?0???0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentException::ArgumentException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z
_TEXT	SEGMENT
$T1 = 0
this$ = 32
message$ = 40
??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z PROC ; Palmtree::Math::Core::Internal::ArgumentException::ArgumentException, COMDAT

; 96   :         {

$LN11:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24
  00009	48 c7 04 24 fe
	ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  00011	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7exception@std@@6B@
  00018	48 89 01	 mov	 QWORD PTR [rcx], rax

; 49   :         : _Data()

  0001b	33 c0		 xor	 eax, eax
  0001d	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00021	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 47   :         Exception(PMC_STATUS_CODE code, const wchar_t* message) noexcept(true)

  00025	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7Exception@Internal@Core@Math@Palmtree@@6B@
  0002c	48 89 01	 mov	 QWORD PTR [rcx], rax

; 48   :         {
; 49   :             _code = code;

  0002f	c7 41 18 ff ff
	ff ff		 mov	 DWORD PTR [rcx+24], -1

; 50   :             _message = message;

  00036	48 89 51 20	 mov	 QWORD PTR [rcx+32], rdx

; 51   :             _data = nullptr;

  0003a	48 c7 41 28 00
	00 00 00	 mov	 QWORD PTR [rcx+40], 0

; 96   :         {

  00042	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7ArgumentException@Internal@Core@Math@Palmtree@@6B@
  00049	48 89 01	 mov	 QWORD PTR [rcx], rax

; 97   :         }

  0004c	48 8b c1	 mov	 rax, rcx
  0004f	48 83 c4 18	 add	 rsp, 24
  00053	c3		 ret	 0
??0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z ENDP ; Palmtree::Math::Core::Internal::ArgumentException::ArgumentException
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 0
this$ = 32
message$ = 40
?dtor$1@?0???0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentException::ArgumentException'::`1'::dtor$1
  00000	48 8b 8a 20 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$1@?0???0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentException::ArgumentException'::`1'::dtor$1
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 0
this$ = 32
message$ = 40
?dtor$0@?0???0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentException::ArgumentException'::`1'::dtor$0
  00000	48 8b 8a 20 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
?dtor$0@?0???0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentException::ArgumentException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 0
this$ = 32
message$ = 40
?dtor$1@?0???0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentException::ArgumentException'::`1'::dtor$1
  00000	48 8b 8a 20 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$1@?0???0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentException::ArgumentException'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 0
this$ = 32
message$ = 40
?dtor$0@?0???0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA PROC ; `Palmtree::Math::Core::Internal::ArgumentException::ArgumentException'::`1'::dtor$0
  00000	48 8b 8a 20 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ; Palmtree::Math::Core::Internal::Exception::~Exception
?dtor$0@?0???0ArgumentException@Internal@Core@Math@Palmtree@@QEAA@PEB_W@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::ArgumentException::ArgumentException'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
__flags$ = 72
??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z PROC ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor', COMDAT
$LN12:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
  00013	48 89 5c 24 48	 mov	 QWORD PTR [rsp+72], rbx
  00018	8b da		 mov	 ebx, edx
  0001a	48 8b f9	 mov	 rdi, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 70   :         {

  0001d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00024	48 89 01	 mov	 QWORD PTR [rcx], rax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 85   :     {

  00027	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7exception@std@@6B@
  0002e	48 89 01	 mov	 QWORD PTR [rcx], rax

; 86   :         __std_exception_destroy(&_Data);

  00031	48 83 c1 08	 add	 rcx, 8
  00035	e8 00 00 00 00	 call	 __std_exception_destroy
  0003a	90		 npad	 1
  0003b	f6 c3 01	 test	 bl, 1
  0003e	74 0e		 je	 SHORT $LN9@scalar
  00040	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  00045	48 8b cf	 mov	 rcx, rdi
  00048	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  0004d	90		 npad	 1
$LN9@scalar:
  0004e	48 8b c7	 mov	 rax, rdi
  00051	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00056	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005a	5f		 pop	 rdi
  0005b	c3		 ret	 0
??_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z ENDP ; Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
__flags$ = 72
?dtor$0@?0???_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA PROC ; `Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor''::`1'::dtor$0
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$0@?0???_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor''::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
__flags$ = 72
?dtor$0@?0???_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA PROC ; `Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor''::`1'::dtor$0
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$0@?0???_GException@Internal@Core@Math@Palmtree@@UEAAPEAXI@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::Exception::`scalar deleting destructor''::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ PROC	; Palmtree::Math::Core::Internal::Exception::~Exception, COMDAT

; 70   :         {

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
  00012	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7Exception@Internal@Core@Math@Palmtree@@6B@
  00019	48 89 01	 mov	 QWORD PTR [rcx], rax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 85   :     {

  0001c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7exception@std@@6B@
  00023	48 89 01	 mov	 QWORD PTR [rcx], rax

; 86   :         __std_exception_destroy(&_Data);

  00026	48 83 c1 08	 add	 rcx, 8
  0002a	e8 00 00 00 00	 call	 __std_exception_destroy
  0002f	90		 npad	 1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 71   :         }

  00030	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00034	c3		 ret	 0
??1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ ENDP	; Palmtree::Math::Core::Internal::Exception::~Exception
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::Exception::~Exception'::`1'::dtor$0
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::Exception::~Exception'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA PROC ; `Palmtree::Math::Core::Internal::Exception::~Exception'::`1'::dtor$0
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$0@?0???1Exception@Internal@Core@Math@Palmtree@@UEAA@XZ@4HA ENDP ; `Palmtree::Math::Core::Internal::Exception::~Exception'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z
_TEXT	SEGMENT
$T1 = 0
this$ = 32
p$ = 40
??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT

; 62   :         Exception(const Exception& p) noexcept(true)

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24
  00009	48 c7 04 24 fe
	ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  00011	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7exception@std@@6B@
  00018	48 89 01	 mov	 QWORD PTR [rcx], rax

; 49   :         : _Data()

  0001b	33 c0		 xor	 eax, eax
  0001d	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00021	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 62   :         Exception(const Exception& p) noexcept(true)

  00025	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7Exception@Internal@Core@Math@Palmtree@@6B@
  0002c	48 89 01	 mov	 QWORD PTR [rcx], rax

; 63   :         {
; 64   :             _code = p._code;

  0002f	8b 42 18	 mov	 eax, DWORD PTR [rdx+24]
  00032	89 41 18	 mov	 DWORD PTR [rcx+24], eax

; 65   :             _message = p._message;

  00035	48 8b 42 20	 mov	 rax, QWORD PTR [rdx+32]
  00039	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 66   :             _data = p._data;

  0003d	48 8b 42 28	 mov	 rax, QWORD PTR [rdx+40]
  00041	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax

; 67   :         }

  00045	48 8b c1	 mov	 rax, rcx
  00048	48 83 c4 18	 add	 rsp, 24
  0004c	c3		 ret	 0
??0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 0
this$ = 32
p$ = 40
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
  00000	48 8b 8a 20 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 0
this$ = 32
p$ = 40
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA PROC ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
  00000	48 8b 8a 20 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@QEAA@AEBV01234@@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z
_TEXT	SEGMENT
$T1 = 0
this$ = 32
code$ = 40
message$ = 48
data$ = 56
??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT

; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24
  00009	48 c7 04 24 fe
	ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  00011	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7exception@std@@6B@
  00018	48 89 01	 mov	 QWORD PTR [rcx], rax

; 49   :         : _Data()

  0001b	33 c0		 xor	 eax, eax
  0001d	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00021	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 54   :         Exception(PMC_STATUS_CODE code, const wchar_t* message, const wchar_t* data) noexcept(true)

  00025	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7Exception@Internal@Core@Math@Palmtree@@6B@
  0002c	48 89 01	 mov	 QWORD PTR [rcx], rax

; 55   :         {
; 56   :             _code = code;

  0002f	89 51 18	 mov	 DWORD PTR [rcx+24], edx

; 57   :             _message = message;

  00032	4c 89 41 20	 mov	 QWORD PTR [rcx+32], r8

; 58   :             _data = data;

  00036	4c 89 49 28	 mov	 QWORD PTR [rcx+40], r9

; 59   :         }

  0003a	48 8b c1	 mov	 rax, rcx
  0003d	48 83 c4 18	 add	 rsp, 24
  00041	c3		 ret	 0
??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 0
this$ = 32
code$ = 40
message$ = 48
data$ = 56
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
  00000	48 8b 8a 20 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 0
this$ = 32
code$ = 40
message$ = 48
data$ = 56
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA PROC ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
  00000	48 8b 8a 20 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W0@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h
;	COMDAT ??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z
_TEXT	SEGMENT
$T1 = 0
this$ = 32
code$ = 40
message$ = 48
??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z PROC ; Palmtree::Math::Core::Internal::Exception::Exception, COMDAT

; 47   :         Exception(PMC_STATUS_CODE code, const wchar_t* message) noexcept(true)

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24
  00009	48 c7 04 24 fe
	ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h

; 50   :     {

  00011	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7exception@std@@6B@
  00018	48 89 01	 mov	 QWORD PTR [rcx], rax

; 49   :         : _Data()

  0001b	33 c0		 xor	 eax, eax
  0001d	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00021	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_exception.h

; 47   :         Exception(PMC_STATUS_CODE code, const wchar_t* message) noexcept(true)

  00025	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7Exception@Internal@Core@Math@Palmtree@@6B@
  0002c	48 89 01	 mov	 QWORD PTR [rcx], rax

; 48   :         {
; 49   :             _code = code;

  0002f	89 51 18	 mov	 DWORD PTR [rcx+24], edx

; 50   :             _message = message;

  00032	4c 89 41 20	 mov	 QWORD PTR [rcx+32], r8

; 51   :             _data = nullptr;

  00036	48 c7 41 28 00
	00 00 00	 mov	 QWORD PTR [rcx+40], 0

; 52   :         }

  0003e	48 8b c1	 mov	 rax, rcx
  00041	48 83 c4 18	 add	 rsp, 24
  00045	c3		 ret	 0
??0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z ENDP ; Palmtree::Math::Core::Internal::Exception::Exception
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 0
this$ = 32
code$ = 40
message$ = 48
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z@4HA PROC ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
  00000	48 8b 8a 20 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 0
this$ = 32
code$ = 40
message$ = 48
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z@4HA PROC ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
  00000	48 8b 8a 20 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
?dtor$0@?0???0Exception@Internal@Core@Math@Palmtree@@IEAA@HPEB_W@Z@4HA ENDP ; `Palmtree::Math::Core::Internal::Exception::Exception'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
__flags$ = 72
??_Gexception@std@@UEAAPEAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
$LN9:
  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
  0000f	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  00014	8b da		 mov	 ebx, edx
  00016	48 8b f9	 mov	 rdi, rcx

; 85   :     {

  00019	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7exception@std@@6B@
  00020	48 89 01	 mov	 QWORD PTR [rcx], rax

; 86   :         __std_exception_destroy(&_Data);

  00023	48 83 c1 08	 add	 rcx, 8
  00027	e8 00 00 00 00	 call	 __std_exception_destroy
  0002c	90		 npad	 1
  0002d	f6 c3 01	 test	 bl, 1
  00030	74 0e		 je	 SHORT $LN6@scalar
  00032	ba 18 00 00 00	 mov	 edx, 24
  00037	48 8b cf	 mov	 rcx, rdi
  0003a	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  0003f	90		 npad	 1
$LN6@scalar:
  00040	48 8b c7	 mov	 rax, rdi
  00043	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  00048	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0004c	5f		 pop	 rdi
  0004d	c3		 ret	 0
??_Gexception@std@@UEAAPEAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UEBAPEBDXZ
_TEXT	SEGMENT
this$ = 8
?what@exception@std@@UEBAPEBDXZ PROC			; std::exception::what, COMDAT

; 91   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	48 8b 51 08	 mov	 rdx, QWORD PTR [rcx+8]
  00004	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BC@EOODALEL@Unknown?5exception@
  0000b	48 85 d2	 test	 rdx, rdx
  0000e	48 0f 45 c2	 cmovne	 rax, rdx

; 92   :     }

  00012	c3		 ret	 0
?what@exception@std@@UEBAPEBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??1exception@std@@UEAA@XZ PROC				; std::exception::~exception, COMDAT

; 85   :     {

$LN5:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
  0000d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7exception@std@@6B@
  00014	48 89 01	 mov	 QWORD PTR [rcx], rax

; 86   :         __std_exception_destroy(&_Data);

  00017	48 83 c1 08	 add	 rcx, 8
  0001b	e8 00 00 00 00	 call	 __std_exception_destroy
  00020	90		 npad	 1

; 87   :     }

  00021	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00025	c3		 ret	 0
??1exception@std@@UEAA@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0exception@std@@QEAA@XZ PROC				; std::exception::exception, COMDAT

; 50   :     {

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7exception@std@@6B@
  00007	48 89 01	 mov	 QWORD PTR [rcx], rax
  0000a	33 c0		 xor	 eax, eax
  0000c	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00010	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 51   :     }

  00014	48 8b c1	 mov	 rax, rcx
  00017	c3		 ret	 0
??0exception@std@@QEAA@XZ ENDP				; std::exception::exception
_TEXT	ENDS
END
