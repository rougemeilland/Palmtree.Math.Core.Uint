; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	configuration_info:DWORD
_DATA	ENDS
PUBLIC	PMC_UINT_Initialize
EXTRN	GetCPUInfo:PROC
EXTRN	Initialize_Memory:PROC
EXTRN	Initialize_From:PROC
EXTRN	Initialize_Clone:PROC
EXTRN	Initialize_To:PROC
EXTRN	Initialize_GetPropertyValue:PROC
EXTRN	Initialize_Add:PROC
EXTRN	Initialize_Subtruct:PROC
EXTRN	Initialize_Multiply:PROC
EXTRN	Initialize_DivRem:PROC
EXTRN	Initialize_Shift:PROC
EXTRN	Initialize_BitwiseAnd:PROC
EXTRN	Initialize_BitwiseOr:PROC
EXTRN	Initialize_ExclusiveOr:PROC
EXTRN	Initialize_Compare:PROC
EXTRN	Initialize_Equals:PROC
EXTRN	Initialize_ToString:PROC
EXTRN	Initialize_Parse:PROC
EXTRN	Initialize_GreatestCommonDivisor:PROC
EXTRN	Initialize_Pow:PROC
EXTRN	Initialize_ModPow:PROC
EXTRN	PMC_GetStatisticsInfo:PROC
EXTRN	PMC_From_I:PROC
EXTRN	PMC_From_L:PROC
EXTRN	PMC_Dispose:PROC
EXTRN	PMC_GetPropertyValue_X_I:PROC
EXTRN	PMC_FromByteArray:PROC
EXTRN	PMC_ToByteArray:PROC
EXTRN	PMC_Clone_X:PROC
EXTRN	PMC_To_X_I:PROC
EXTRN	PMC_To_X_L:PROC
EXTRN	PMC_ToString:PROC
EXTRN	PMC_TryParse:PROC
EXTRN	PMC_Add_I_X:PROC
EXTRN	PMC_Add_L_X:PROC
EXTRN	PMC_Add_X_I:PROC
EXTRN	PMC_Add_X_L:PROC
EXTRN	PMC_Add_X_X:PROC
EXTRN	PMC_Subtruct_I_X:PROC
EXTRN	PMC_Subtruct_L_X:PROC
EXTRN	PMC_Subtruct_X_I:PROC
EXTRN	PMC_Subtruct_X_L:PROC
EXTRN	PMC_Subtruct_X_X:PROC
EXTRN	PMC_Multiply_I_X:PROC
EXTRN	PMC_Multiply_L_X:PROC
EXTRN	PMC_Multiply_X_I:PROC
EXTRN	PMC_Multiply_X_L:PROC
EXTRN	PMC_Multiply_X_X:PROC
EXTRN	PMC_DivRem_I_X:PROC
EXTRN	PMC_DivRem_L_X:PROC
EXTRN	PMC_DivRem_X_I:PROC
EXTRN	PMC_DivRem_X_L:PROC
EXTRN	PMC_DivRem_X_X:PROC
EXTRN	PMC_RightShift_X_I:PROC
EXTRN	PMC_RightShift_X_L:PROC
EXTRN	PMC_LeftShift_X_I:PROC
EXTRN	PMC_LeftShift_X_L:PROC
EXTRN	PMC_BitwiseAnd_I_X:PROC
EXTRN	PMC_BitwiseAnd_L_X:PROC
EXTRN	PMC_BitwiseAnd_X_I:PROC
EXTRN	PMC_BitwiseAnd_X_L:PROC
EXTRN	PMC_BitwiseAnd_X_X:PROC
EXTRN	PMC_BitwiseOr_I_X:PROC
EXTRN	PMC_BitwiseOr_L_X:PROC
EXTRN	PMC_BitwiseOr_X_I:PROC
EXTRN	PMC_BitwiseOr_X_L:PROC
EXTRN	PMC_BitwiseOr_X_X:PROC
EXTRN	PMC_ExclusiveOr_I_X:PROC
EXTRN	PMC_ExclusiveOr_L_X:PROC
EXTRN	PMC_ExclusiveOr_X_I:PROC
EXTRN	PMC_ExclusiveOr_X_L:PROC
EXTRN	PMC_ExclusiveOr_X_X:PROC
EXTRN	PMC_Compare_I_X:PROC
EXTRN	PMC_Compare_L_X:PROC
EXTRN	PMC_Compare_X_I:PROC
EXTRN	PMC_Compare_X_L:PROC
EXTRN	PMC_Compare_X_X:PROC
EXTRN	PMC_Equals_I_X:PROC
EXTRN	PMC_Equals_L_X:PROC
EXTRN	PMC_Equals_X_I:PROC
EXTRN	PMC_Equals_X_L:PROC
EXTRN	PMC_Equals_X_X:PROC
EXTRN	PMC_GreatestCommonDivisor_I_X:PROC
EXTRN	PMC_GreatestCommonDivisor_L_X:PROC
EXTRN	PMC_GreatestCommonDivisor_X_I:PROC
EXTRN	PMC_GreatestCommonDivisor_X_L:PROC
EXTRN	PMC_GreatestCommonDivisor_X_X:PROC
EXTRN	PMC_Pow_X_I:PROC
EXTRN	PMC_ModPow_X_X_X:PROC
_BSS	SEGMENT
entry_points DB	0228H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_UINT_Initialize DD imagerel $LN25
	DD	imagerel $LN25+1376
	DD	imagerel $unwind$PMC_UINT_Initialize
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_UINT_Initialize DD 010401H
	DD	04204H
xdata	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_initialize.c
;	COMDAT PMC_UINT_Initialize
_TEXT	SEGMENT
feature$ = 48
config$ = 48
PMC_UINT_Initialize PROC				; COMDAT

; 40   : {

$LN25:
	sub	rsp, 40					; 00000028H

; 41   :     configuration_info = *config;

	mov	eax, DWORD PTR [rcx]

; 42   :     PROCESSOR_FEATURES feature;
; 43   :     GetCPUInfo(&feature);

	lea	rcx, QWORD PTR feature$[rsp]
	mov	DWORD PTR configuration_info, eax
	call	GetCPUInfo

; 44   : 
; 45   :     if (Initialize_Memory(&feature) != PMC_STATUS_OK)

	lea	rcx, QWORD PTR feature$[rsp]
	call	Initialize_Memory
	test	eax, eax
	jne	$LN23@PMC_UINT_I

; 46   :         return (NULL);
; 47   :     if (Initialize_From(&feature) != PMC_STATUS_OK)

	lea	rcx, QWORD PTR feature$[rsp]
	call	Initialize_From
	test	eax, eax
	jne	$LN23@PMC_UINT_I

; 48   :         return (NULL);
; 49   :     if (Initialize_To(&feature) != PMC_STATUS_OK)

	lea	rcx, QWORD PTR feature$[rsp]
	call	Initialize_To
	test	eax, eax
	jne	$LN23@PMC_UINT_I

; 50   :         return (NULL);
; 51   :     if (Initialize_Add(&feature) != PMC_STATUS_OK)

	lea	rcx, QWORD PTR feature$[rsp]
	call	Initialize_Add
	test	eax, eax
	jne	$LN23@PMC_UINT_I

; 52   :         return (NULL);
; 53   :     if (Initialize_Subtruct(&feature) != PMC_STATUS_OK)

	lea	rcx, QWORD PTR feature$[rsp]
	call	Initialize_Subtruct
	test	eax, eax
	jne	$LN23@PMC_UINT_I

; 54   :         return (NULL);
; 55   :     if (Initialize_Multiply(&feature) != PMC_STATUS_OK)

	lea	rcx, QWORD PTR feature$[rsp]
	call	Initialize_Multiply
	test	eax, eax
	jne	$LN23@PMC_UINT_I

; 56   :         return (NULL);
; 57   :     if (Initialize_DivRem(&feature) != PMC_STATUS_OK)

	lea	rcx, QWORD PTR feature$[rsp]
	call	Initialize_DivRem
	test	eax, eax
	jne	$LN23@PMC_UINT_I

; 58   :         return (NULL);
; 59   :     if (Initialize_Shift(&feature) != PMC_STATUS_OK)

	lea	rcx, QWORD PTR feature$[rsp]
	call	Initialize_Shift
	test	eax, eax
	jne	$LN23@PMC_UINT_I

; 60   :         return (NULL);
; 61   :     if (Initialize_BitwiseAnd(&feature) != PMC_STATUS_OK)

	lea	rcx, QWORD PTR feature$[rsp]
	call	Initialize_BitwiseAnd
	test	eax, eax
	jne	$LN23@PMC_UINT_I

; 62   :         return (NULL);
; 63   :     if (Initialize_BitwiseOr(&feature) != PMC_STATUS_OK)

	lea	rcx, QWORD PTR feature$[rsp]
	call	Initialize_BitwiseOr
	test	eax, eax
	jne	$LN23@PMC_UINT_I

; 64   :         return (NULL);
; 65   :     if (Initialize_ExclusiveOr(&feature) != PMC_STATUS_OK)

	lea	rcx, QWORD PTR feature$[rsp]
	call	Initialize_ExclusiveOr
	test	eax, eax
	jne	$LN23@PMC_UINT_I

; 66   :         return (NULL);
; 67   :     if (Initialize_Compare(&feature) != PMC_STATUS_OK)

	lea	rcx, QWORD PTR feature$[rsp]
	call	Initialize_Compare
	test	eax, eax
	jne	$LN23@PMC_UINT_I

; 68   :         return (NULL);
; 69   :     if (Initialize_Equals(&feature) != PMC_STATUS_OK)

	lea	rcx, QWORD PTR feature$[rsp]
	call	Initialize_Equals
	test	eax, eax
	jne	$LN23@PMC_UINT_I

; 70   :         return (NULL);
; 71   :     if (Initialize_ToString(&feature) != PMC_STATUS_OK)

	lea	rcx, QWORD PTR feature$[rsp]
	call	Initialize_ToString
	test	eax, eax
	jne	$LN23@PMC_UINT_I

; 72   :         return (NULL);
; 73   :     if (Initialize_Parse(&feature) != PMC_STATUS_OK)

	lea	rcx, QWORD PTR feature$[rsp]
	call	Initialize_Parse
	test	eax, eax
	jne	$LN23@PMC_UINT_I

; 74   :         return (NULL);
; 75   :     if (Initialize_GreatestCommonDivisor(&feature) != PMC_STATUS_OK)

	lea	rcx, QWORD PTR feature$[rsp]
	call	Initialize_GreatestCommonDivisor
	test	eax, eax
	jne	$LN23@PMC_UINT_I

; 76   :         return (NULL);
; 77   :     if (Initialize_Pow(&feature) != PMC_STATUS_OK)

	lea	rcx, QWORD PTR feature$[rsp]
	call	Initialize_Pow
	test	eax, eax
	jne	$LN23@PMC_UINT_I

; 78   :         return (NULL);
; 79   :     if (Initialize_ModPow(&feature) != PMC_STATUS_OK)

	lea	rcx, QWORD PTR feature$[rsp]
	call	Initialize_ModPow
	test	eax, eax
	jne	$LN23@PMC_UINT_I

; 80   :         return (NULL);
; 81   :     if (Initialize_GetPropertyValue(&feature) != PMC_STATUS_OK)

	lea	rcx, QWORD PTR feature$[rsp]
	call	Initialize_GetPropertyValue
	test	eax, eax
	jne	$LN23@PMC_UINT_I

; 82   :         return (NULL);
; 83   :     if (Initialize_Clone(&feature) != PMC_STATUS_OK)

	lea	rcx, QWORD PTR feature$[rsp]
	call	Initialize_Clone
	test	eax, eax
	jne	$LN23@PMC_UINT_I

; 85   : 
; 86   :     entry_points.PROCESSOR_FEATURE_POPCNT = feature.PROCESSOR_FEATURE_POPCNT;
; 87   :     entry_points.PROCESSOR_FEATURE_ADX = feature.PROCESSOR_FEATURE_ADX;
; 88   : 	entry_points.PROCESSOR_FEATURE_BMI1 = feature.PROCESSOR_FEATURE_BMI1;
; 89   :     entry_points.PROCESSOR_FEATURE_BMI2 = feature.PROCESSOR_FEATURE_BMI2;
; 90   :     entry_points.PROCESSOR_FEATURE_ABM = feature.PROCESSOR_FEATURE_ABM;

	mov	ecx, DWORD PTR entry_points
	mov	eax, ecx
	xor	eax, DWORD PTR feature$[rsp]
	and	eax, 31
	xor	ecx, eax

; 91   : 	entry_points.PMC_GetStatisticsInfo = PMC_GetStatisticsInfo;

	lea	rax, OFFSET FLAT:PMC_GetStatisticsInfo
	mov	QWORD PTR entry_points+8, rax

; 92   : 	entry_points.PMC_From_I = PMC_From_I;

	lea	rax, OFFSET FLAT:PMC_From_I
	mov	QWORD PTR entry_points+16, rax

; 93   : 	entry_points.PMC_From_L = PMC_From_L;

	lea	rax, OFFSET FLAT:PMC_From_L
	mov	QWORD PTR entry_points+24, rax

; 94   :     entry_points.PMC_FromByteArray = PMC_FromByteArray;

	lea	rax, OFFSET FLAT:PMC_FromByteArray
	mov	QWORD PTR entry_points+48, rax

; 95   :     entry_points.PMC_Dispose = PMC_Dispose;

	lea	rax, OFFSET FLAT:PMC_Dispose
	mov	QWORD PTR entry_points+32, rax

; 96   :     entry_points.PMC_To_X_I = PMC_To_X_I;

	lea	rax, OFFSET FLAT:PMC_To_X_I
	mov	QWORD PTR entry_points+72, rax

; 97   : 	entry_points.PMC_To_X_L = PMC_To_X_L;

	lea	rax, OFFSET FLAT:PMC_To_X_L
	mov	QWORD PTR entry_points+80, rax

; 98   :     entry_points.PMC_ToByteArray = PMC_ToByteArray;

	lea	rax, OFFSET FLAT:PMC_ToByteArray
	mov	QWORD PTR entry_points+56, rax

; 99   :     entry_points.PMC_ToString = PMC_ToString;

	lea	rax, OFFSET FLAT:PMC_ToString
	mov	QWORD PTR entry_points+88, rax

; 100  :     entry_points.PMC_TryParse = PMC_TryParse;

	lea	rax, OFFSET FLAT:PMC_TryParse
	mov	QWORD PTR entry_points+96, rax

; 101  :     entry_points.PMC_Add_I_X = PMC_Add_I_X;

	lea	rax, OFFSET FLAT:PMC_Add_I_X
	mov	QWORD PTR entry_points+104, rax

; 102  : 	entry_points.PMC_Add_L_X = PMC_Add_L_X;

	lea	rax, OFFSET FLAT:PMC_Add_L_X
	mov	QWORD PTR entry_points+112, rax

; 103  :     entry_points.PMC_Add_X_I = PMC_Add_X_I;

	lea	rax, OFFSET FLAT:PMC_Add_X_I
	mov	QWORD PTR entry_points+120, rax

; 104  :     entry_points.PMC_Add_X_L = PMC_Add_X_L;

	lea	rax, OFFSET FLAT:PMC_Add_X_L
	mov	QWORD PTR entry_points+128, rax

; 105  :     entry_points.PMC_Add_X_X = PMC_Add_X_X;

	lea	rax, OFFSET FLAT:PMC_Add_X_X
	mov	QWORD PTR entry_points+136, rax

; 106  :     entry_points.PMC_Subtruct_I_X = PMC_Subtruct_I_X;

	lea	rax, OFFSET FLAT:PMC_Subtruct_I_X
	mov	QWORD PTR entry_points+144, rax

; 107  :     entry_points.PMC_Subtruct_L_X = PMC_Subtruct_L_X;

	lea	rax, OFFSET FLAT:PMC_Subtruct_L_X
	mov	QWORD PTR entry_points+152, rax

; 108  :     entry_points.PMC_Subtruct_X_I = PMC_Subtruct_X_I;

	lea	rax, OFFSET FLAT:PMC_Subtruct_X_I
	mov	QWORD PTR entry_points+160, rax

; 109  :     entry_points.PMC_Subtruct_X_L = PMC_Subtruct_X_L;

	lea	rax, OFFSET FLAT:PMC_Subtruct_X_L
	mov	QWORD PTR entry_points+168, rax

; 110  :     entry_points.PMC_Subtruct_X_X = PMC_Subtruct_X_X;

	lea	rax, OFFSET FLAT:PMC_Subtruct_X_X
	mov	QWORD PTR entry_points+176, rax

; 111  :     entry_points.PMC_Multiply_I_X = PMC_Multiply_I_X;

	lea	rax, OFFSET FLAT:PMC_Multiply_I_X
	mov	QWORD PTR entry_points+184, rax

; 112  :     entry_points.PMC_Multiply_L_X = PMC_Multiply_L_X;

	lea	rax, OFFSET FLAT:PMC_Multiply_L_X
	mov	QWORD PTR entry_points+192, rax

; 113  :     entry_points.PMC_Multiply_X_I = PMC_Multiply_X_I;

	lea	rax, OFFSET FLAT:PMC_Multiply_X_I
	mov	QWORD PTR entry_points+200, rax

; 114  :     entry_points.PMC_Multiply_X_L = PMC_Multiply_X_L;

	lea	rax, OFFSET FLAT:PMC_Multiply_X_L
	mov	QWORD PTR entry_points+208, rax

; 115  :     entry_points.PMC_Multiply_X_X = PMC_Multiply_X_X;

	lea	rax, OFFSET FLAT:PMC_Multiply_X_X
	mov	QWORD PTR entry_points+216, rax

; 116  :     entry_points.PMC_DivRem_I_X = PMC_DivRem_I_X;

	lea	rax, OFFSET FLAT:PMC_DivRem_I_X
	mov	QWORD PTR entry_points+224, rax

; 117  :     entry_points.PMC_DivRem_L_X = PMC_DivRem_L_X;

	lea	rax, OFFSET FLAT:PMC_DivRem_L_X
	mov	QWORD PTR entry_points+232, rax

; 118  :     entry_points.PMC_DivRem_X_I = PMC_DivRem_X_I;

	lea	rax, OFFSET FLAT:PMC_DivRem_X_I
	mov	QWORD PTR entry_points+240, rax

; 119  :     entry_points.PMC_DivRem_X_L = PMC_DivRem_X_L;

	lea	rax, OFFSET FLAT:PMC_DivRem_X_L
	mov	QWORD PTR entry_points+248, rax

; 120  :     entry_points.PMC_DivRem_X_X = PMC_DivRem_X_X;

	lea	rax, OFFSET FLAT:PMC_DivRem_X_X
	mov	QWORD PTR entry_points+256, rax

; 121  :     entry_points.PMC_RightShift_X_I = PMC_RightShift_X_I;

	lea	rax, OFFSET FLAT:PMC_RightShift_X_I
	mov	QWORD PTR entry_points+280, rax

; 122  :     entry_points.PMC_RightShift_X_L = PMC_RightShift_X_L;

	lea	rax, OFFSET FLAT:PMC_RightShift_X_L
	mov	QWORD PTR entry_points+288, rax

; 123  :     entry_points.PMC_LeftShift_X_I = PMC_LeftShift_X_I;

	lea	rax, OFFSET FLAT:PMC_LeftShift_X_I
	mov	QWORD PTR entry_points+264, rax

; 124  :     entry_points.PMC_LeftShift_X_L = PMC_LeftShift_X_L;

	lea	rax, OFFSET FLAT:PMC_LeftShift_X_L
	mov	QWORD PTR entry_points+272, rax

; 125  :     entry_points.PMC_BitwiseAnd_I_X = PMC_BitwiseAnd_I_X;

	lea	rax, OFFSET FLAT:PMC_BitwiseAnd_I_X
	mov	QWORD PTR entry_points+296, rax

; 126  :     entry_points.PMC_BitwiseAnd_L_X = PMC_BitwiseAnd_L_X;

	lea	rax, OFFSET FLAT:PMC_BitwiseAnd_L_X
	mov	QWORD PTR entry_points+304, rax

; 127  :     entry_points.PMC_BitwiseAnd_X_I = PMC_BitwiseAnd_X_I;

	lea	rax, OFFSET FLAT:PMC_BitwiseAnd_X_I
	mov	QWORD PTR entry_points+312, rax

; 128  :     entry_points.PMC_BitwiseAnd_X_L = PMC_BitwiseAnd_X_L;

	lea	rax, OFFSET FLAT:PMC_BitwiseAnd_X_L
	mov	DWORD PTR entry_points, ecx
	mov	QWORD PTR entry_points+320, rax

; 129  :     entry_points.PMC_BitwiseAnd_X_X = PMC_BitwiseAnd_X_X;

	lea	rax, OFFSET FLAT:PMC_BitwiseAnd_X_X
	mov	QWORD PTR entry_points+328, rax

; 130  :     entry_points.PMC_BitwiseOr_I_X = PMC_BitwiseOr_I_X;

	lea	rax, OFFSET FLAT:PMC_BitwiseOr_I_X
	mov	QWORD PTR entry_points+336, rax

; 131  :     entry_points.PMC_BitwiseOr_L_X = PMC_BitwiseOr_L_X;

	lea	rax, OFFSET FLAT:PMC_BitwiseOr_L_X
	mov	QWORD PTR entry_points+344, rax

; 132  :     entry_points.PMC_BitwiseOr_X_I = PMC_BitwiseOr_X_I;

	lea	rax, OFFSET FLAT:PMC_BitwiseOr_X_I
	mov	QWORD PTR entry_points+352, rax

; 133  :     entry_points.PMC_BitwiseOr_X_L = PMC_BitwiseOr_X_L;

	lea	rax, OFFSET FLAT:PMC_BitwiseOr_X_L
	mov	QWORD PTR entry_points+360, rax

; 134  :     entry_points.PMC_BitwiseOr_X_X = PMC_BitwiseOr_X_X;

	lea	rax, OFFSET FLAT:PMC_BitwiseOr_X_X
	mov	QWORD PTR entry_points+368, rax

; 135  :     entry_points.PMC_ExclusiveOr_I_X = PMC_ExclusiveOr_I_X;

	lea	rax, OFFSET FLAT:PMC_ExclusiveOr_I_X
	mov	QWORD PTR entry_points+376, rax

; 136  :     entry_points.PMC_ExclusiveOr_L_X = PMC_ExclusiveOr_L_X;

	lea	rax, OFFSET FLAT:PMC_ExclusiveOr_L_X
	mov	QWORD PTR entry_points+384, rax

; 137  :     entry_points.PMC_ExclusiveOr_X_I = PMC_ExclusiveOr_X_I;

	lea	rax, OFFSET FLAT:PMC_ExclusiveOr_X_I
	mov	QWORD PTR entry_points+392, rax

; 138  :     entry_points.PMC_ExclusiveOr_X_L = PMC_ExclusiveOr_X_L;

	lea	rax, OFFSET FLAT:PMC_ExclusiveOr_X_L
	mov	QWORD PTR entry_points+400, rax

; 139  :     entry_points.PMC_ExclusiveOr_X_X = PMC_ExclusiveOr_X_X;

	lea	rax, OFFSET FLAT:PMC_ExclusiveOr_X_X
	mov	QWORD PTR entry_points+408, rax

; 140  :     entry_points.PMC_Compare_I_X = PMC_Compare_I_X;

	lea	rax, OFFSET FLAT:PMC_Compare_I_X
	mov	QWORD PTR entry_points+416, rax

; 141  :     entry_points.PMC_Compare_L_X = PMC_Compare_L_X;

	lea	rax, OFFSET FLAT:PMC_Compare_L_X
	mov	QWORD PTR entry_points+424, rax

; 142  :     entry_points.PMC_Compare_X_I = PMC_Compare_X_I;

	lea	rax, OFFSET FLAT:PMC_Compare_X_I
	mov	QWORD PTR entry_points+432, rax

; 143  :     entry_points.PMC_Compare_X_L = PMC_Compare_X_L;

	lea	rax, OFFSET FLAT:PMC_Compare_X_L
	mov	QWORD PTR entry_points+440, rax

; 144  :     entry_points.PMC_Compare_X_X = PMC_Compare_X_X;

	lea	rax, OFFSET FLAT:PMC_Compare_X_X
	mov	QWORD PTR entry_points+448, rax

; 145  :     entry_points.PMC_Equals_I_X = PMC_Equals_I_X;

	lea	rax, OFFSET FLAT:PMC_Equals_I_X
	mov	QWORD PTR entry_points+456, rax

; 146  :     entry_points.PMC_Equals_L_X = PMC_Equals_L_X;

	lea	rax, OFFSET FLAT:PMC_Equals_L_X
	mov	QWORD PTR entry_points+464, rax

; 147  :     entry_points.PMC_Equals_X_I = PMC_Equals_X_I;

	lea	rax, OFFSET FLAT:PMC_Equals_X_I
	mov	QWORD PTR entry_points+472, rax

; 148  :     entry_points.PMC_Equals_X_L = PMC_Equals_X_L;

	lea	rax, OFFSET FLAT:PMC_Equals_X_L
	mov	QWORD PTR entry_points+480, rax

; 149  :     entry_points.PMC_Equals_X_X = PMC_Equals_X_X;

	lea	rax, OFFSET FLAT:PMC_Equals_X_X
	mov	QWORD PTR entry_points+488, rax

; 150  :     entry_points.PMC_GreatestCommonDivisor_I_X = PMC_GreatestCommonDivisor_I_X;

	lea	rax, OFFSET FLAT:PMC_GreatestCommonDivisor_I_X
	mov	QWORD PTR entry_points+496, rax

; 151  :     entry_points.PMC_GreatestCommonDivisor_L_X = PMC_GreatestCommonDivisor_L_X;

	lea	rax, OFFSET FLAT:PMC_GreatestCommonDivisor_L_X
	mov	QWORD PTR entry_points+504, rax

; 152  :     entry_points.PMC_GreatestCommonDivisor_X_I = PMC_GreatestCommonDivisor_X_I;

	lea	rax, OFFSET FLAT:PMC_GreatestCommonDivisor_X_I
	mov	QWORD PTR entry_points+512, rax

; 153  :     entry_points.PMC_GreatestCommonDivisor_X_L = PMC_GreatestCommonDivisor_X_L;

	lea	rax, OFFSET FLAT:PMC_GreatestCommonDivisor_X_L
	mov	QWORD PTR entry_points+520, rax

; 154  :     entry_points.PMC_GreatestCommonDivisor_X_X = PMC_GreatestCommonDivisor_X_X;

	lea	rax, OFFSET FLAT:PMC_GreatestCommonDivisor_X_X
	mov	QWORD PTR entry_points+528, rax

; 155  :     entry_points.PMC_Pow_X_I = PMC_Pow_X_I;

	lea	rax, OFFSET FLAT:PMC_Pow_X_I
	mov	QWORD PTR entry_points+536, rax

; 156  :     entry_points.PMC_ModPow_X_X_X = PMC_ModPow_X_X_X;

	lea	rax, OFFSET FLAT:PMC_ModPow_X_X_X
	mov	QWORD PTR entry_points+544, rax

; 157  :     entry_points.PMC_GetPropertyValue_X_I = PMC_GetPropertyValue_X_I;

	lea	rax, OFFSET FLAT:PMC_GetPropertyValue_X_I
	mov	QWORD PTR entry_points+40, rax

; 158  :     entry_points.PMC_Clone_X = PMC_Clone_X;

	lea	rax, OFFSET FLAT:PMC_Clone_X
	mov	QWORD PTR entry_points+64, rax

; 159  : 
; 160  :     return (&entry_points);

	lea	rax, OFFSET FLAT:entry_points

; 161  : }

	add	rsp, 40					; 00000028H
	ret	0
$LN23@PMC_UINT_I:

; 84   :         return (NULL);

	xor	eax, eax

; 161  : }

	add	rsp, 40					; 00000028H
	ret	0
PMC_UINT_Initialize ENDP
_TEXT	ENDS
END
