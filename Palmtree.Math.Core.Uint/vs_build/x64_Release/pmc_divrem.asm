; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	DivRem_X_1W
PUBLIC	DivRem_X_X
PUBLIC	Initialize_DivRem
PUBLIC	PMC_DivRem_I_X
PUBLIC	PMC_DivRem_L_X
PUBLIC	PMC_DivRem_X_I
PUBLIC	PMC_DivRem_X_L
PUBLIC	PMC_DivRem_X_X
EXTRN	AllocateBlock:PROC
EXTRN	DeallocateBlock:PROC
EXTRN	CheckBlockLight:PROC
EXTRN	AllocateNumber:PROC
EXTRN	DeallocateNumber:PROC
EXTRN	CommitNumber:PROC
EXTRN	CheckNumber:PROC
EXTRN	DuplicateNumber:PROC
EXTRN	RightShift_Imp_DIV:PROC
EXTRN	LeftShift_Imp_DIV:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	number_zero:BYTE
EXTRN	statistics_info:BYTE
EXTRN	__security_cookie:QWORD
_BSS	SEGMENT
fp_DivRem_X_X DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DivRem_X_X DD imagerel $LN29
	DD	imagerel $LN29+231
	DD	imagerel $unwind$DivRem_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_DivRem_I_X DD imagerel $LN34
	DD	imagerel $LN34+206
	DD	imagerel $unwind$PMC_DivRem_I_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_DivRem_L_X DD imagerel $LN72
	DD	imagerel $LN72+524
	DD	imagerel $unwind$PMC_DivRem_L_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_DivRem_X_I DD imagerel $LN25
	DD	imagerel $LN25+386
	DD	imagerel $unwind$PMC_DivRem_X_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_DivRem_X_L DD imagerel $LN62
	DD	imagerel $LN62+89
	DD	imagerel $unwind$PMC_DivRem_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PMC_DivRem_X_L DD imagerel $LN62+89
	DD	imagerel $LN62+497
	DD	imagerel $chain$1$PMC_DivRem_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PMC_DivRem_X_L DD imagerel $LN62+497
	DD	imagerel $LN62+508
	DD	imagerel $chain$2$PMC_DivRem_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PMC_DivRem_X_L DD imagerel $LN62+508
	DD	imagerel $LN62+676
	DD	imagerel $chain$3$PMC_DivRem_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PMC_DivRem_X_L DD imagerel $LN62+676
	DD	imagerel $LN62+692
	DD	imagerel $chain$4$PMC_DivRem_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_DivRem_X_X DD imagerel $LN44
	DD	imagerel $LN44+120
	DD	imagerel $unwind$PMC_DivRem_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PMC_DivRem_X_X DD imagerel $LN44+120
	DD	imagerel $LN44+435
	DD	imagerel $chain$0$PMC_DivRem_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PMC_DivRem_X_X DD imagerel $LN44+435
	DD	imagerel $LN44+457
	DD	imagerel $chain$1$PMC_DivRem_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PMC_DivRem_X_X DD imagerel $LN44+457
	DD	imagerel $LN44+781
	DD	imagerel $chain$2$PMC_DivRem_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PMC_DivRem_X_X DD imagerel $LN44+781
	DD	imagerel $LN44+791
	DD	imagerel $chain$3$PMC_DivRem_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_COPY_MEMORY_UNIT DD imagerel _COPY_MEMORY_UNIT
	DD	imagerel _COPY_MEMORY_UNIT+33
	DD	imagerel $unwind$_COPY_MEMORY_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_COPY_MEMORY_UNIT_DIV DD imagerel _COPY_MEMORY_UNIT_DIV
	DD	imagerel _COPY_MEMORY_UNIT_DIV+32
	DD	imagerel $unwind$_COPY_MEMORY_UNIT_DIV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CalculateQ_ DD imagerel CalculateQ_
	DD	imagerel CalculateQ_+252
	DD	imagerel $unwind$CalculateQ_
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CalculateQ_X DD imagerel CalculateQ_X
	DD	imagerel CalculateQ_X+252
	DD	imagerel $unwind$CalculateQ_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_MULTIPLY_DIGIT_UNIT_DIV DD imagerel _MULTIPLY_DIGIT_UNIT_DIV
	DD	imagerel _MULTIPLY_DIGIT_UNIT_DIV+64
	DD	imagerel $unwind$_MULTIPLY_DIGIT_UNIT_DIV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_MULTIPLYX_DIGIT_UNIT_DIV DD imagerel _MULTIPLYX_DIGIT_UNIT_DIV
	DD	imagerel _MULTIPLYX_DIGIT_UNIT_DIV+71
	DD	imagerel $unwind$_MULTIPLYX_DIGIT_UNIT_DIV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$SubtructOneLine DD imagerel SubtructOneLine
	DD	imagerel SubtructOneLine+3192
	DD	imagerel $unwind$SubtructOneLine
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$SubtructOneLineX DD imagerel SubtructOneLineX
	DD	imagerel SubtructOneLineX+3382
	DD	imagerel $unwind$SubtructOneLineX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AddOneLine DD imagerel AddOneLine
	DD	imagerel AddOneLine+855
	DD	imagerel $unwind$AddOneLine
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AddOneLineX DD imagerel AddOneLineX
	DD	imagerel AddOneLineX+927
	DD	imagerel $unwind$AddOneLineX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DivRem_X_X_using_ADC_MUL DD imagerel DivRem_X_X_using_ADC_MUL
	DD	imagerel DivRem_X_X_using_ADC_MUL+734
	DD	imagerel $unwind$DivRem_X_X_using_ADC_MUL
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DivRem_X_X_using_ADX_MULX DD imagerel DivRem_X_X_using_ADX_MULX
	DD	imagerel DivRem_X_X_using_ADX_MULX+734
	DD	imagerel $unwind$DivRem_X_X_using_ADX_MULX
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DivRem_X_X_using_ADX_MULX DD 091101H
	DD	0f00da211H
	DD	0d009e00bH
	DD	07005c007H
	DD	050036004H
	DD	03002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DivRem_X_X_using_ADC_MUL DD 091101H
	DD	0f00da211H
	DD	0d009e00bH
	DD	07005c007H
	DD	050036004H
	DD	03002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AddOneLineX DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AddOneLine DD 020501H
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$SubtructOneLineX DD 0a2001H
	DD	03f0120H
	DD	0e00ff011H
	DD	0c00bd00dH
	DD	060087009H
	DD	050063007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$SubtructOneLine DD 0a2001H
	DD	03f0120H
	DD	0e00ff011H
	DD	0c00bd00dH
	DD	060087009H
	DD	050063007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_MULTIPLYX_DIGIT_UNIT_DIV DD 020501H
	DD	023405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_MULTIPLY_DIGIT_UNIT_DIV DD 020501H
	DD	023405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CalculateQ_X DD 050701H
	DD	07005e007H
	DD	050036004H
	DD	03002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CalculateQ_ DD 050701H
	DD	07005e007H
	DD	050036004H
	DD	03002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_COPY_MEMORY_UNIT_DIV DD 040a01H
	DD	02740aH
	DD	016405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_COPY_MEMORY_UNIT DD 040a01H
	DD	02740aH
	DD	016405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PMC_DivRem_X_X DD 021H
	DD	imagerel $LN44
	DD	imagerel $LN44+120
	DD	imagerel $unwind$PMC_DivRem_X_X
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PMC_DivRem_X_X DD 020021H
	DD	0136400H
	DD	imagerel $LN44
	DD	imagerel $LN44+120
	DD	imagerel $unwind$PMC_DivRem_X_X
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PMC_DivRem_X_X DD 021H
	DD	imagerel $LN44
	DD	imagerel $LN44+120
	DD	imagerel $unwind$PMC_DivRem_X_X
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PMC_DivRem_X_X DD 020821H
	DD	0136408H
	DD	imagerel $LN44
	DD	imagerel $LN44+120
	DD	imagerel $unwind$PMC_DivRem_X_X
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_DivRem_X_X DD 081601H
	DD	0157416H
	DD	0143416H
	DD	0f00fd216H
	DD	0500be00dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PMC_DivRem_X_L DD 021H
	DD	imagerel $LN62
	DD	imagerel $LN62+89
	DD	imagerel $unwind$PMC_DivRem_X_L
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PMC_DivRem_X_L DD 040021H
	DD	016f400H
	DD	015e400H
	DD	imagerel $LN62
	DD	imagerel $LN62+89
	DD	imagerel $unwind$PMC_DivRem_X_L
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PMC_DivRem_X_L DD 021H
	DD	imagerel $LN62
	DD	imagerel $LN62+89
	DD	imagerel $unwind$PMC_DivRem_X_L
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PMC_DivRem_X_L DD 041021H
	DD	016f410H
	DD	015e408H
	DD	imagerel $LN62
	DD	imagerel $LN62+89
	DD	imagerel $unwind$PMC_DivRem_X_L
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_DivRem_X_L DD 060e01H
	DD	0c007d20eH
	DD	060047005H
	DD	050023003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_DivRem_X_I DD 081501H
	DD	0d7415H
	DD	0c6415H
	DD	0b3415H
	DD	0e0117215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_DivRem_L_X DD 072119H
	DD	0140113H
	DD	07005e007H
	DD	030036004H
	DD	05002H
	DD	imagerel __GSHandlerCheck
	DD	098H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_DivRem_I_X DD 081401H
	DD	096414H
	DD	085414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DivRem_X_X DD 040a01H
	DD	0b640aH
	DD	07006720aH
xdata	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT DivRem_X_X_using_ADX_MULX
_TEXT	SEGMENT
value$1$ = 48
tv960 = 56
tv965 = 64
tv964 = 72
$T1 = 160
u_buf$ = 160
rh_hi$2 = 168
u_buf_len$ = 168
rh_mi$3 = 176
v_buf$ = 176
pos$4 = 184
v_buf_len$ = 184
work_v_buf$ = 192
rh_mi$5 = 200
q_buf$ = 200
rh_hi$6 = 208
r_buf$ = 208
DivRem_X_X_using_ADX_MULX PROC				; COMDAT

; 965  : {

	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 88					; 00000058H

; 966  :     // u および v の最上位ワードは 0 でありうることに注意すること。
; 967  :     if (sizeof(__UNIT_TYPE) != sizeof(__UNIT_TYPE_DIV))
; 968  :     {
; 969  :         while (u_buf[u_buf_len - 1] == 0)

	lea	rax, QWORD PTR [rcx-4]
	mov	rbp, r9
	cmp	DWORD PTR [rax+rdx*4], 0
	lea	rax, QWORD PTR [rax+rdx*4]
	mov	r14, r8
	mov	rbx, rdx
	mov	rsi, rcx
	jne	SHORT $LN99@DivRem_X_X
	npad	5
$LL2@DivRem_X_X:

; 970  :             --u_buf_len;

	dec	rbx
	lea	rax, QWORD PTR [rax-4]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LL2@DivRem_X_X
$LN99@DivRem_X_X:

; 971  :         while (v_buf[v_buf_len - 1] == 0)

	lea	rax, QWORD PTR [r9-1]
	cmp	DWORD PTR [r8+rax*4], 0
	lea	rax, QWORD PTR [r8+rax*4]
	jne	SHORT $LN5@DivRem_X_X
	npad	5
$LL4@DivRem_X_X:

; 972  :             --v_buf_len;

	dec	rbp
	lea	rax, QWORD PTR [rax-4]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LL4@DivRem_X_X
$LN5@DivRem_X_X:

; 973  :     }
; 974  : 
; 975  : #ifdef _DEBUG
; 976  :     if (v_buf[v_buf_len - 1] == 0)
; 977  :     {
; 978  :         ; // このルートには到達しないはず。デバッグ用。
; 979  :     }
; 980  : #endif
; 981  : 
; 982  : #ifdef DO_TRACE
; 983  :     ReportLabel("uとvのシフト");
; 984  :     ReportDump("u", (__UNIT_TYPE*)u_buf, _DIVIDE_CEILING_UNIT(u_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 985  :     ReportDump("v", (__UNIT_TYPE*)v_buf, _DIVIDE_CEILING_UNIT(v_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 986  : #endif
; 987  : 
; 988  :     __UNIT_TYPE_DIV d_factor = _LZCNT_ALT_UNIT_DIV(v_buf[v_buf_len - 1]);

	mov	eax, DWORD PTR [r8+rbp*4-4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 652  :         if (x == 0)

	test	eax, eax
	jne	$LN18@DivRem_X_X

; 653  :             return (sizeof(x) * 8);

	mov	ecx, 32					; 00000020H
	mov	DWORD PTR $T1[rsp], ecx
$LN10@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 997  :         LeftShift_Imp_DIV(u_buf, u_buf_len, d_factor, r_buf, FALSE);

	mov	r15, QWORD PTR r_buf$[rsp]
	xor	r13d, r13d
	mov	edi, ecx
	mov	r9, r15
	mov	r8d, ecx
	mov	rdx, rbx
	mov	rcx, rsi
	mov	DWORD PTR [rsp+32], r13d
	call	LeftShift_Imp_DIV

; 998  :         LeftShift_Imp_DIV(v_buf, v_buf_len, d_factor, work_v_buf, FALSE);

	mov	r12, QWORD PTR work_v_buf$[rsp]
	mov	r8d, edi
	mov	r9, r12
	mov	DWORD PTR [rsp+32], r13d
	mov	rdx, rbp
	mov	rcx, r14
	call	LeftShift_Imp_DIV
$LN11@DivRem_X_X:

; 999  :     }
; 1000 : #ifdef DO_TRACE
; 1001 :     ReportDump("⇒u", (__UNIT_TYPE*)r_buf, _DIVIDE_CEILING_UNIT((u_buf_len + 1) * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1002 :     ReportDump("⇒v", (__UNIT_TYPE*)work_v_buf, _DIVIDE_CEILING_UNIT(v_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1003 : #endif
; 1004 : 
; 1005 :     __UNIT_TYPE_DIV* work_u_buf = r_buf;
; 1006 :     __UNIT_TYPE q_index = u_buf_len - v_buf_len;

	mov	rax, QWORD PTR q_buf$[rsp]
	lea	rdx, QWORD PTR [rbp-1]
	mov	ecx, 2
	lea	rdi, QWORD PTR [rbp-2]
	sub	rcx, rbp
	lea	rdx, QWORD PTR [r12+rdx*4]
	shl	rcx, 2
	lea	rdi, QWORD PTR [r12+rdi*4]
	mov	r14, rbx
	mov	QWORD PTR tv965[rsp], rdx
	sub	rcx, r15
	mov	QWORD PTR tv964[rsp], rdi
	sub	r14, rbp
	lea	rsi, QWORD PTR [rbx-2]
	add	rax, rcx
	lea	rsi, QWORD PTR [r15+rsi*4]
	mov	QWORD PTR tv960[rsp], rax
	npad	3
$LL6@DivRem_X_X:

; 364  :     __UNIT_TYPE_DIV v1 = v_buf[v_buf_len - 1];

	mov	eax, DWORD PTR [rdx]
	mov	r8d, DWORD PTR [rsi+8]

; 365  :     __UNIT_TYPE_DIV v2 = v_buf[v_buf_len - 2];

	mov	r13d, eax
	mov	r10d, DWORD PTR [rsi+4]
	mov	r12d, DWORD PTR [rsi]
	mov	r9d, DWORD PTR [rdi]

; 243  :     if (uj == v1)

	cmp	r8d, eax
	jne	SHORT $LN29@DivRem_X_X

; 244  :         return (-1);

	mov	edi, -1					; ffffffffH
	jmp	SHORT $LN28@DivRem_X_X
$LN18@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 666  :         _BitScanReverse(&pos, x);

	bsr	eax, eax

; 667  : #elif defined(__GNUC__)
; 668  :         _UINT64_T pos;
; 669  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 670  : #else
; 671  : #error unknown compiler
; 672  : #endif
; 673  : #else
; 674  : #error unknown platform
; 675  : #endif
; 676  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31
	sub	ecx, eax
	mov	DWORD PTR pos$4[rsp], eax
	mov	DWORD PTR $T1[rsp], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 989  :     if (d_factor == 0)

	jne	$LN10@DivRem_X_X
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 75   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	r15, QWORD PTR r_buf$[rsp]
	mov	r12, QWORD PTR work_v_buf$[rsp]
	mov	rdi, r15
	mov	ecx, ebx
	rep movsd
	mov	ecx, ebp
	mov	rdi, r12
	mov	rsi, r14
	rep movsd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 993  :         r_buf[u_buf_len] = 0;

	mov	DWORD PTR [r15+rbx*4], 0

; 994  :     }

	jmp	$LN11@DivRem_X_X
$LN29@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 310  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock inc DWORD PTR statistics_info+12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	rax, r8

; 384  :             return ((_UINT32_T)(t / v));

	xor	edx, edx

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	shl	rax, 32					; 00000020H
	or	rax, r10

; 384  :             return ((_UINT32_T)(t / v));

	div	r13
	mov	rdi, rax
$LN28@DivRem_X_X:

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	rax, r9
	mov	edx, edi
	imul	rax, rdx
	imul	rdx, r13
	mov	QWORD PTR value$1$[rsp], rax
	mov	r11, r9

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rax

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	mov	eax, r10d

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	shr	r9, 32					; 00000020H

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sub	eax, edx
	mov	DWORD PTR rh_mi$5[rsp], eax
	mov	eax, r8d
	setb	cl

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	shr	rdx, 32					; 00000020H

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	cl, -1
	sbb	eax, edx
	mov	DWORD PTR rh_hi$6[rsp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2
	lock xadd DWORD PTR statistics_info+4, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 310  :     if (rh_hi > 0)

	cmp	DWORD PTR rh_hi$6[rsp], 0
	ja	SHORT $LN110@DivRem_X_X

; 311  :     {
; 312  : #ifdef DO_TRACE
; 313  :         ReportVar("result", 0);
; 314  : #endif
; 315  :         return (FALSE);
; 316  :     }
; 317  :     else if (lh_mi > rh_mi)

	cmp	r9d, DWORD PTR rh_mi$5[rsp]
	ja	SHORT $LN25@DivRem_X_X

; 318  :     {
; 319  : #ifdef DO_TRACE
; 320  :         ReportVar("result", 1);
; 321  : #endif
; 322  :         return (TRUE);
; 323  :     }
; 324  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN110@DivRem_X_X

; 374  :     if (!CheckQ_X(q_, uj, uj_1, uj_2, v1, v2))

	cmp	DWORD PTR value$1$[rsp], r12d
	jbe	SHORT $LN110@DivRem_X_X
$LN25@DivRem_X_X:

; 375  :         return (q_);
; 376  :     --q_;

	dec	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	ecx, edi
	imul	r11, rcx
	imul	rcx, r13

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	rdx, r11
	shr	rdx, 32					; 00000020H

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sub	r10d, ecx
	mov	DWORD PTR rh_mi$3[rsp], r10d
	setb	al

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	shr	rcx, 32					; 00000020H

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	al, -1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	r8d, ecx
	mov	DWORD PTR rh_hi$2[rsp], r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock xadd DWORD PTR statistics_info+4, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 310  :     if (rh_hi > 0)

	cmp	DWORD PTR rh_hi$2[rsp], 0
	ja	SHORT $LN110@DivRem_X_X

; 311  :     {
; 312  : #ifdef DO_TRACE
; 313  :         ReportVar("result", 0);
; 314  : #endif
; 315  :         return (FALSE);
; 316  :     }
; 317  :     else if (lh_mi > rh_mi)

	cmp	edx, DWORD PTR rh_mi$3[rsp]
	ja	SHORT $LN26@DivRem_X_X

; 318  :     {
; 319  : #ifdef DO_TRACE
; 320  :         ReportVar("result", 1);
; 321  : #endif
; 322  :         return (TRUE);
; 323  :     }
; 324  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN110@DivRem_X_X

; 377  :     if (!CheckQ_X(q_, uj, uj_1, uj_2, v1, v2))

	cmp	r11d, r12d
	jbe	SHORT $LN110@DivRem_X_X
$LN26@DivRem_X_X:

; 378  :         return (q_);
; 379  :     --q_;

	dec	edi
$LN110@DivRem_X_X:

; 1007 : 
; 1008 :     for (;;)
; 1009 :     {
; 1010 :         __UNIT_TYPE_DIV q_ = CalculateQ_X(work_u_buf, work_v_buf, v_buf_len, q_index);
; 1011 : 
; 1012 : #ifdef DO_TRACE
; 1013 :         ReportLabel("uの減算");
; 1014 :         ReportDump("u", (__UNIT_TYPE*)work_u_buf, _DIVIDE_CEILING_UNIT(u_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1015 :         ReportDump("v", (__UNIT_TYPE*)work_v_buf, _DIVIDE_CEILING_UNIT(v_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1016 :         ReportVar("q_", q_);
; 1017 : #endif
; 1018 :         if (SubtructOneLineX(work_u_buf, u_buf_len, work_v_buf, v_buf_len, q_index, q_))

	mov	r12, QWORD PTR work_v_buf$[rsp]
	mov	r9, rbp
	mov	r8, r12
	mov	DWORD PTR [rsp+40], edi
	mov	rdx, rbx
	mov	QWORD PTR [rsp+32], r14
	mov	rcx, r15
	call	SubtructOneLineX
	test	eax, eax
	je	SHORT $LN12@DivRem_X_X

; 1019 :         {
; 1020 : #ifdef DO_TRACE
; 1021 :             ReportDump("⇒u", (__UNIT_TYPE*)work_u_buf, _DIVIDE_CEILING_UNIT(u_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1022 : #endif
; 1023 :             // 桁借りが発生した場合
; 1024 : 
; 1025 : #ifdef DO_TRACE
; 1026 :             ReportLabel("uの加え戻しとq_の更新");
; 1027 :             ReportDump("u", (__UNIT_TYPE*)work_u_buf, _DIVIDE_CEILING_UNIT(u_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1028 : #endif
; 1029 :             --q_;

	dec	edi

; 1030 :             AddOneLineX(work_u_buf, u_buf_len, work_v_buf, v_buf_len, q_index);

	mov	QWORD PTR [rsp+32], r14
	mov	r9, rbp
	mov	r8, r12
	mov	rdx, rbx
	mov	rcx, r15
	call	AddOneLineX
$LN12@DivRem_X_X:

; 1031 : #ifdef DO_TRACE
; 1032 :             ReportVar("q_", q_);
; 1033 :             ReportDump("⇒u", (__UNIT_TYPE*)work_u_buf, _DIVIDE_CEILING_UNIT(u_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1034 : #endif
; 1035 :         }
; 1036 :         else
; 1037 :         {
; 1038 : #ifdef DO_TRACE
; 1039 :             ReportDump("⇒u", (__UNIT_TYPE*)work_u_buf, _DIVIDE_CEILING_UNIT(u_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1040 : #endif
; 1041 :         }
; 1042 : 
; 1043 :         q_buf[q_index] = q_;

	mov	rax, QWORD PTR tv960[rsp]
	mov	DWORD PTR [rsi+rax], edi

; 1044 : 
; 1045 : #ifdef DO_TRACE
; 1046 :         ReportLabel("qの現在値");
; 1047 :         ReportDump("q", (__UNIT_TYPE*)q_buf, _DIVIDE_CEILING_UNIT((u_buf_len - v_buf_len) * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1048 : #endif
; 1049 : 
; 1050 :         if (q_index == 0)

	test	r14, r14
	je	SHORT $LN101@DivRem_X_X

; 1051 :             break;
; 1052 :         --q_index;
; 1053 :     }

	mov	rdx, QWORD PTR tv965[rsp]
	dec	r14
	mov	rdi, QWORD PTR tv964[rsp]
	sub	rsi, 4
	jmp	$LL6@DivRem_X_X
$LN101@DivRem_X_X:

; 1054 : 
; 1055 :     if (d_factor > 0)

	mov	eax, DWORD PTR $T1[rsp]
	test	eax, eax
	je	SHORT $LN15@DivRem_X_X

; 1056 :         RightShift_Imp_DIV(work_u_buf, u_buf_len + 1, d_factor, work_u_buf, FALSE);

	mov	r8d, eax
	mov	DWORD PTR [rsp+32], 0
	lea	rdx, QWORD PTR [rbx+1]
	mov	r9, r15
	mov	rcx, r15
	call	RightShift_Imp_DIV
$LN15@DivRem_X_X:

; 1057 : 
; 1058 : #ifdef DO_TRACE
; 1059 :     ReportLabel("計算終了");
; 1060 :     ReportDump("q", (__UNIT_TYPE*)q_buf, _DIVIDE_CEILING_UNIT((u_buf_len - v_buf_len) * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1061 :     ReportDump("r", (__UNIT_TYPE*)work_u_buf, _DIVIDE_CEILING_UNIT((u_buf_len + 1) * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1062 : #endif
; 1063 : }

	add	rsp, 88					; 00000058H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
DivRem_X_X_using_ADX_MULX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT DivRem_X_X_using_ADC_MUL
_TEXT	SEGMENT
value$1$ = 48
tv960 = 56
tv965 = 64
tv964 = 72
$T1 = 160
u_buf$ = 160
rh_hi$2 = 168
u_buf_len$ = 168
rh_mi$3 = 176
v_buf$ = 176
pos$4 = 184
v_buf_len$ = 184
work_v_buf$ = 192
rh_mi$5 = 200
q_buf$ = 200
rh_hi$6 = 208
r_buf$ = 208
DivRem_X_X_using_ADC_MUL PROC				; COMDAT

; 909  : {

	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 88					; 00000058H

; 910  :     // u および v の最上位ワードは 0 でありうることに注意すること。
; 911  :     if (sizeof(__UNIT_TYPE) != sizeof(__UNIT_TYPE_DIV))
; 912  :     {
; 913  :         while (u_buf[u_buf_len - 1] == 0)

	lea	rax, QWORD PTR [rcx-4]
	mov	rbp, r9
	cmp	DWORD PTR [rax+rdx*4], 0
	lea	rax, QWORD PTR [rax+rdx*4]
	mov	r14, r8
	mov	rbx, rdx
	mov	rsi, rcx
	jne	SHORT $LN98@DivRem_X_X
	npad	5
$LL2@DivRem_X_X:

; 914  :             --u_buf_len;

	dec	rbx
	lea	rax, QWORD PTR [rax-4]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LL2@DivRem_X_X
$LN98@DivRem_X_X:

; 915  :         while (v_buf[v_buf_len - 1] == 0)

	lea	rax, QWORD PTR [r9-1]
	cmp	DWORD PTR [r8+rax*4], 0
	lea	rax, QWORD PTR [r8+rax*4]
	jne	SHORT $LN5@DivRem_X_X
	npad	5
$LL4@DivRem_X_X:

; 916  :             --v_buf_len;

	dec	rbp
	lea	rax, QWORD PTR [rax-4]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LL4@DivRem_X_X
$LN5@DivRem_X_X:

; 917  :     }
; 918  : 
; 919  : #ifdef _DEBUG
; 920  :     if (v_buf[v_buf_len - 1] == 0)
; 921  :     {
; 922  :         ; // このルートには到達しないはず。デバッグ用。
; 923  :     }
; 924  : #endif
; 925  : 
; 926  :     __UNIT_TYPE_DIV d_factor = _LZCNT_ALT_UNIT_DIV(v_buf[v_buf_len - 1]);

	mov	eax, DWORD PTR [r8+rbp*4-4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 652  :         if (x == 0)

	test	eax, eax
	jne	$LN17@DivRem_X_X

; 653  :             return (sizeof(x) * 8);

	mov	ecx, 32					; 00000020H
	mov	DWORD PTR $T1[rsp], ecx
$LN10@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 935  :         LeftShift_Imp_DIV(u_buf, u_buf_len, d_factor, r_buf, FALSE);

	mov	r15, QWORD PTR r_buf$[rsp]
	xor	r13d, r13d
	mov	edi, ecx
	mov	r9, r15
	mov	r8d, ecx
	mov	rdx, rbx
	mov	rcx, rsi
	mov	DWORD PTR [rsp+32], r13d
	call	LeftShift_Imp_DIV

; 936  :         LeftShift_Imp_DIV(v_buf, v_buf_len, d_factor, work_v_buf, FALSE);

	mov	r12, QWORD PTR work_v_buf$[rsp]
	mov	r8d, edi
	mov	r9, r12
	mov	DWORD PTR [rsp+32], r13d
	mov	rdx, rbp
	mov	rcx, r14
	call	LeftShift_Imp_DIV
$LN11@DivRem_X_X:

; 937  :     }
; 938  : 
; 939  :     __UNIT_TYPE_DIV* work_u_buf = r_buf;
; 940  :     __UNIT_TYPE q_index = u_buf_len - v_buf_len;

	mov	rax, QWORD PTR q_buf$[rsp]
	lea	rdx, QWORD PTR [rbp-1]
	mov	ecx, 2
	lea	rdi, QWORD PTR [rbp-2]
	sub	rcx, rbp
	lea	rdx, QWORD PTR [r12+rdx*4]
	shl	rcx, 2
	lea	rdi, QWORD PTR [r12+rdi*4]
	mov	r14, rbx
	mov	QWORD PTR tv965[rsp], rdx
	sub	rcx, r15
	mov	QWORD PTR tv964[rsp], rdi
	sub	r14, rbp
	lea	rsi, QWORD PTR [rbx-2]
	add	rax, rcx
	lea	rsi, QWORD PTR [r15+rsi*4]
	mov	QWORD PTR tv960[rsp], rax
	npad	3
$LL6@DivRem_X_X:

; 346  :     __UNIT_TYPE_DIV v1 = v_buf[v_buf_len - 1];

	mov	eax, DWORD PTR [rdx]
	mov	r8d, DWORD PTR [rsi+8]

; 347  :     __UNIT_TYPE_DIV v2 = v_buf[v_buf_len - 2];

	mov	r13d, eax
	mov	r10d, DWORD PTR [rsi+4]
	mov	r12d, DWORD PTR [rsi]
	mov	r9d, DWORD PTR [rdi]

; 243  :     if (uj == v1)

	cmp	r8d, eax
	jne	SHORT $LN28@DivRem_X_X

; 244  :         return (-1);

	mov	edi, -1					; ffffffffH
	jmp	SHORT $LN27@DivRem_X_X
$LN17@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 666  :         _BitScanReverse(&pos, x);

	bsr	eax, eax

; 667  : #elif defined(__GNUC__)
; 668  :         _UINT64_T pos;
; 669  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 670  : #else
; 671  : #error unknown compiler
; 672  : #endif
; 673  : #else
; 674  : #error unknown platform
; 675  : #endif
; 676  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31
	sub	ecx, eax
	mov	DWORD PTR pos$4[rsp], eax
	mov	DWORD PTR $T1[rsp], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 927  :     if (d_factor == 0)

	jne	$LN10@DivRem_X_X
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 75   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	r15, QWORD PTR r_buf$[rsp]
	mov	r12, QWORD PTR work_v_buf$[rsp]
	mov	rdi, r15
	mov	ecx, ebx
	rep movsd
	mov	ecx, ebp
	mov	rdi, r12
	mov	rsi, r14
	rep movsd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 931  :         r_buf[u_buf_len] = 0;

	mov	DWORD PTR [r15+rbx*4], 0

; 932  :     }

	jmp	$LN11@DivRem_X_X
$LN28@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 310  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock inc DWORD PTR statistics_info+12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	rax, r8

; 384  :             return ((_UINT32_T)(t / v));

	xor	edx, edx

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	shl	rax, 32					; 00000020H
	or	rax, r10

; 384  :             return ((_UINT32_T)(t / v));

	div	r13
	mov	rdi, rax
$LN27@DivRem_X_X:

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	rax, r9
	mov	edx, edi
	imul	rax, rdx
	imul	rdx, r13
	mov	QWORD PTR value$1$[rsp], rax
	mov	r11, r9

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rax

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	mov	eax, r10d

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	shr	r9, 32					; 00000020H

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sub	eax, edx
	mov	DWORD PTR rh_mi$5[rsp], eax
	mov	eax, r8d
	setb	cl

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	shr	rdx, 32					; 00000020H

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	cl, -1
	sbb	eax, edx
	mov	DWORD PTR rh_hi$6[rsp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2
	lock xadd DWORD PTR statistics_info+4, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 273  :     if (rh_hi > 0)

	cmp	DWORD PTR rh_hi$6[rsp], 0
	ja	SHORT $LN109@DivRem_X_X

; 274  :         return (FALSE);
; 275  :     else if (lh_mi > rh_mi)

	cmp	r9d, DWORD PTR rh_mi$5[rsp]
	ja	SHORT $LN24@DivRem_X_X

; 276  :         return (TRUE);
; 277  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN109@DivRem_X_X

; 349  :     if (!CheckQ_(q_, uj, uj_1, uj_2, v1, v2))

	cmp	DWORD PTR value$1$[rsp], r12d
	jbe	SHORT $LN109@DivRem_X_X
$LN24@DivRem_X_X:

; 350  :         return (q_);
; 351  :     --q_;

	dec	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	ecx, edi
	imul	r11, rcx
	imul	rcx, r13

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	rdx, r11
	shr	rdx, 32					; 00000020H

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sub	r10d, ecx
	mov	DWORD PTR rh_mi$3[rsp], r10d
	setb	al

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	shr	rcx, 32					; 00000020H

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	al, -1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	r8d, ecx
	mov	DWORD PTR rh_hi$2[rsp], r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock xadd DWORD PTR statistics_info+4, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 273  :     if (rh_hi > 0)

	cmp	DWORD PTR rh_hi$2[rsp], 0
	ja	SHORT $LN109@DivRem_X_X

; 274  :         return (FALSE);
; 275  :     else if (lh_mi > rh_mi)

	cmp	edx, DWORD PTR rh_mi$3[rsp]
	ja	SHORT $LN25@DivRem_X_X

; 276  :         return (TRUE);
; 277  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN109@DivRem_X_X

; 352  :     if (!CheckQ_(q_, uj, uj_1, uj_2, v1, v2))

	cmp	r11d, r12d
	jbe	SHORT $LN109@DivRem_X_X
$LN25@DivRem_X_X:

; 353  :         return (q_);
; 354  :     --q_;

	dec	edi
$LN109@DivRem_X_X:

; 941  : 
; 942  :     for (;;)
; 943  :     {
; 944  :         __UNIT_TYPE_DIV q_ = CalculateQ_(work_u_buf, work_v_buf, v_buf_len, q_index);
; 945  : 
; 946  : 
; 947  :         if (SubtructOneLine(work_u_buf, u_buf_len, work_v_buf, v_buf_len, q_index, q_))

	mov	r12, QWORD PTR work_v_buf$[rsp]
	mov	r9, rbp
	mov	r8, r12
	mov	DWORD PTR [rsp+40], edi
	mov	rdx, rbx
	mov	QWORD PTR [rsp+32], r14
	mov	rcx, r15
	call	SubtructOneLine
	test	eax, eax
	je	SHORT $LN12@DivRem_X_X

; 948  :         {
; 949  :             // 桁借りが発生した場合
; 950  :             --q_;

	dec	edi

; 951  :             AddOneLine(work_u_buf, u_buf_len, work_v_buf, v_buf_len, q_index);

	mov	QWORD PTR [rsp+32], r14
	mov	r9, rbp
	mov	r8, r12
	mov	rdx, rbx
	mov	rcx, r15
	call	AddOneLine
$LN12@DivRem_X_X:

; 952  :         }
; 953  : 
; 954  :         q_buf[q_index] = q_;

	mov	rax, QWORD PTR tv960[rsp]
	mov	DWORD PTR [rsi+rax], edi

; 955  :         if (q_index == 0)

	test	r14, r14
	je	SHORT $LN100@DivRem_X_X

; 956  :             break;
; 957  :         --q_index;
; 958  :     }

	mov	rdx, QWORD PTR tv965[rsp]
	dec	r14
	mov	rdi, QWORD PTR tv964[rsp]
	sub	rsi, 4
	jmp	$LL6@DivRem_X_X
$LN100@DivRem_X_X:

; 959  : 
; 960  :     if (d_factor > 0)

	mov	eax, DWORD PTR $T1[rsp]
	test	eax, eax
	je	SHORT $LN14@DivRem_X_X

; 961  :         RightShift_Imp_DIV(work_u_buf, u_buf_len + 1, d_factor, work_u_buf, FALSE);

	mov	r8d, eax
	mov	DWORD PTR [rsp+32], 0
	lea	rdx, QWORD PTR [rbx+1]
	mov	r9, r15
	mov	rcx, r15
	call	RightShift_Imp_DIV
$LN14@DivRem_X_X:

; 962  : }

	add	rsp, 88					; 00000058H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
DivRem_X_X_using_ADC_MUL ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT AddOneLineX
_TEXT	SEGMENT
u_buf$ = 48
u_buf_len$ = 56
v_buf$ = 64
v_buf_len$ = 72
q_index$ = 80
AddOneLineX PROC					; COMDAT

; 843  : {

	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 844  :     __UNIT_TYPE_DIV* u_ptr = &u_buf[q_index];

	mov	rax, QWORD PTR q_index$[rsp]
	mov	r10, r9

; 845  :     __UNIT_TYPE_DIV* v_ptr = &v_buf[0];
; 846  :     __UNIT_TYPE v_count = v_buf_len;
; 847  :     char c = 0;
; 848  : 
; 849  :     // まず 32 ワードずつ加算をする。
; 850  :     __UNIT_TYPE count = v_count >> 5;

	mov	r11, r10
	mov	rbx, rcx
	shr	r11, 5
	mov	rdi, rdx
	lea	r9, QWORD PTR [rcx+rax*4]
	xor	cl, cl

; 851  :     while (count != 0)

	test	r11, r11
	je	$LN3@AddOneLine
	npad	2
$LL2@AddOneLine:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1307 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [r9]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	cl, -1
	adcx	eax, DWORD PTR [r8]
	mov	DWORD PTR [r9], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1308 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [r9+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+4]
	mov	DWORD PTR [r9+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1309 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [r9+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+8]
	mov	DWORD PTR [r9+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1310 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [r9+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+12]
	mov	DWORD PTR [r9+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1311 :     c = _ADDX_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [r9+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+16]
	mov	DWORD PTR [r9+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1312 :     c = _ADDX_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [r9+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+20]
	mov	DWORD PTR [r9+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1313 :     c = _ADDX_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [r9+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+24]
	mov	DWORD PTR [r9+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1314 :     c = _ADDX_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, DWORD PTR [r9+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+28]
	mov	DWORD PTR [r9+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1315 :     c = _ADDX_UNIT_DIV(c, xp[8], yp[8], &zp[8]);

	mov	eax, DWORD PTR [r9+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+32]
	mov	DWORD PTR [r9+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1316 :     c = _ADDX_UNIT_DIV(c, xp[9], yp[9], &zp[9]);

	mov	eax, DWORD PTR [r9+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+36]
	mov	DWORD PTR [r9+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1317 :     c = _ADDX_UNIT_DIV(c, xp[10], yp[10], &zp[10]);

	mov	eax, DWORD PTR [r9+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+40]
	mov	DWORD PTR [r9+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1318 :     c = _ADDX_UNIT_DIV(c, xp[11], yp[11], &zp[11]);

	mov	eax, DWORD PTR [r9+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+44]
	mov	DWORD PTR [r9+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1319 :     c = _ADDX_UNIT_DIV(c, xp[12], yp[12], &zp[12]);

	mov	eax, DWORD PTR [r9+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+48]
	mov	DWORD PTR [r9+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1320 :     c = _ADDX_UNIT_DIV(c, xp[13], yp[13], &zp[13]);

	mov	eax, DWORD PTR [r9+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+52]
	mov	DWORD PTR [r9+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1321 :     c = _ADDX_UNIT_DIV(c, xp[14], yp[14], &zp[14]);

	mov	eax, DWORD PTR [r9+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+56]
	mov	DWORD PTR [r9+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1322 :     c = _ADDX_UNIT_DIV(c, xp[15], yp[15], &zp[15]);

	mov	eax, DWORD PTR [r9+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+60]
	mov	DWORD PTR [r9+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1323 :     c = _ADDX_UNIT_DIV(c, xp[16], yp[16], &zp[16]);

	mov	eax, DWORD PTR [r9+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+64]
	mov	DWORD PTR [r9+64], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1324 :     c = _ADDX_UNIT_DIV(c, xp[17], yp[17], &zp[17]);

	mov	eax, DWORD PTR [r9+68]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+68]
	mov	DWORD PTR [r9+68], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1325 :     c = _ADDX_UNIT_DIV(c, xp[18], yp[18], &zp[18]);

	mov	eax, DWORD PTR [r9+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+72]
	mov	DWORD PTR [r9+72], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1326 :     c = _ADDX_UNIT_DIV(c, xp[19], yp[19], &zp[19]);

	mov	eax, DWORD PTR [r9+76]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+76]
	mov	DWORD PTR [r9+76], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1327 :     c = _ADDX_UNIT_DIV(c, xp[20], yp[20], &zp[20]);

	mov	eax, DWORD PTR [r9+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+80]
	mov	DWORD PTR [r9+80], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1328 :     c = _ADDX_UNIT_DIV(c, xp[21], yp[21], &zp[21]);

	mov	eax, DWORD PTR [r9+84]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+84]
	mov	DWORD PTR [r9+84], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1329 :     c = _ADDX_UNIT_DIV(c, xp[22], yp[22], &zp[22]);

	mov	eax, DWORD PTR [r9+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+88]
	mov	DWORD PTR [r9+88], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1330 :     c = _ADDX_UNIT_DIV(c, xp[23], yp[23], &zp[23]);

	mov	eax, DWORD PTR [r9+92]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+92]
	mov	DWORD PTR [r9+92], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1331 :     c = _ADDX_UNIT_DIV(c, xp[24], yp[24], &zp[24]);

	mov	eax, DWORD PTR [r9+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+96]
	mov	DWORD PTR [r9+96], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1332 :     c = _ADDX_UNIT_DIV(c, xp[25], yp[25], &zp[25]);

	mov	eax, DWORD PTR [r9+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+100]
	mov	DWORD PTR [r9+100], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1333 :     c = _ADDX_UNIT_DIV(c, xp[26], yp[26], &zp[26]);

	mov	eax, DWORD PTR [r9+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+104]
	mov	DWORD PTR [r9+104], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1334 :     c = _ADDX_UNIT_DIV(c, xp[27], yp[27], &zp[27]);

	mov	eax, DWORD PTR [r9+108]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+108]
	mov	DWORD PTR [r9+108], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1335 :     c = _ADDX_UNIT_DIV(c, xp[28], yp[28], &zp[28]);

	mov	eax, DWORD PTR [r9+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+112]
	mov	DWORD PTR [r9+112], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1336 :     c = _ADDX_UNIT_DIV(c, xp[29], yp[29], &zp[29]);

	mov	eax, DWORD PTR [r9+116]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+116]
	mov	DWORD PTR [r9+116], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1337 :     c = _ADDX_UNIT_DIV(c, xp[30], yp[30], &zp[30]);

	mov	eax, DWORD PTR [r9+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+120]
	mov	DWORD PTR [r9+120], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1338 :     c = _ADDX_UNIT_DIV(c, xp[31], yp[31], &zp[31]);

	mov	eax, DWORD PTR [r9+124]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+124]
	mov	DWORD PTR [r9+124], eax
	setb	cl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 854  :         u_ptr += 32;

	sub	r9, -128				; ffffffffffffff80H

; 855  :         v_ptr += 32;

	sub	r8, -128				; ffffffffffffff80H

; 856  :         --count;

	sub	r11, 1
	jne	$LL2@AddOneLine
$LN3@AddOneLine:

; 857  :     }
; 858  :     // この時点で未処理の桁は 32 ワード未満のはず
; 859  : 
; 860  :     // 未処理の桁が 16 ワード以上あるなら 16 ワード加算を行う。
; 861  :     if (v_count & 0x10)

	test	r10b, 16
	je	SHORT $LN4@AddOneLine

; 862  :     {
; 863  :         c = _ADD_16WORDS_ADCX_DIV(c, u_ptr, v_ptr, u_ptr);

	mov	rdx, r9
	call	_ADD_16WORDS_ADCX_DIV

; 864  :         u_ptr += 16;

	add	r9, 64					; 00000040H
	movzx	ecx, al

; 865  :         v_ptr += 16;

	add	r8, 64					; 00000040H
$LN4@AddOneLine:

; 866  :     }
; 867  :     // この時点で未処理の桁は 16 ワード未満のはず
; 868  : 
; 869  :     // 未処理の桁が 8 ワード以上あるなら 8 ワード加算を行う。
; 870  :     if (v_count & 0x8)

	test	r10b, 8
	je	$LN5@AddOneLine
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3619 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [r9]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	cl, -1
	adcx	eax, DWORD PTR [r8]
	mov	DWORD PTR [r9], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3620 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [r9+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+4]
	mov	DWORD PTR [r9+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3621 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [r9+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+8]
	mov	DWORD PTR [r9+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3622 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [r9+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+12]
	mov	DWORD PTR [r9+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3623 :     c = _ADDX_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [r9+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+16]
	mov	DWORD PTR [r9+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3624 :     c = _ADDX_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [r9+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+20]
	mov	DWORD PTR [r9+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3625 :     c = _ADDX_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [r9+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+24]
	mov	DWORD PTR [r9+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3626 :     c = _ADDX_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, DWORD PTR [r9+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+28]
	mov	DWORD PTR [r9+28], eax
	setb	cl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 873  :         u_ptr += 8;

	add	r9, 32					; 00000020H

; 874  :         v_ptr += 8;

	add	r8, 32					; 00000020H
$LN5@AddOneLine:

; 875  :     }
; 876  :     // この時点で未処理の桁は 8 ワード未満のはず
; 877  : 
; 878  :     // 未処理の桁が 4 ワード以上あるなら 4 ワード加算を行う。
; 879  :     if (v_count & 0x4)

	test	r10b, 4
	je	SHORT $LN6@AddOneLine
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4159 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [r9]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	cl, -1
	adcx	eax, DWORD PTR [r8]
	mov	DWORD PTR [r9], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4160 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [r9+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+4]
	mov	DWORD PTR [r9+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4161 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [r9+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+8]
	mov	DWORD PTR [r9+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4162 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [r9+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+12]
	mov	DWORD PTR [r9+12], eax
	setb	cl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 882  :         u_ptr += 4;

	add	r9, 16

; 883  :         v_ptr += 4;

	add	r8, 16
$LN6@AddOneLine:

; 884  :     }
; 885  :     // この時点で未処理の桁は 4 ワード未満のはず
; 886  : 
; 887  :     // 未処理の桁が 2 ワード以上あるなら 2 ワード加算を行う。
; 888  :     if (v_count & 0x2)

	test	r10b, 2
	je	SHORT $LN7@AddOneLine
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4545 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [r9]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	cl, -1
	adcx	eax, DWORD PTR [r8]
	mov	DWORD PTR [r9], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4546 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [r9+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+4]
	mov	DWORD PTR [r9+4], eax
	setb	cl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 891  :         u_ptr += 2;

	add	r9, 8

; 892  :         v_ptr += 2;

	add	r8, 8
$LN7@AddOneLine:

; 893  :     }
; 894  :     // この時点で未処理の桁は 2 ワード未満のはず
; 895  : 
; 896  :     // 未処理の桁が 1 ワード以上あるなら 1 ワード加算を行う。
; 897  :     if (v_count & 0x1)

	test	r10b, 1
	je	SHORT $LN8@AddOneLine

; 898  :     {
; 899  :         c = _ADD_UNIT_DIV(c, *u_ptr, *v_ptr, u_ptr);

	mov	eax, DWORD PTR [r9]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	cl, -1
	adc	eax, DWORD PTR [r8]
	mov	DWORD PTR [r9], eax
	setb	cl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 900  :         ++u_ptr;

	add	r9, 4
$LN8@AddOneLine:

; 901  :         ++v_ptr;
; 902  :     }
; 903  : 
; 904  :     // 残りの桁の繰り上がりを計算する。
; 905  :     DoCarry(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr);

	lea	rdx, QWORD PTR [rdi*4+4]
	sub	rdx, r9
	add	rdx, rbx
	sar	rdx, 2

; 752  :         if (u_count <= 0)

	test	rdx, rdx
	je	SHORT $LN131@AddOneLine
$LL113@AddOneLine:

; 753  :         {
; 754  :             // u の最上位まで達してしまった場合
; 755  :             return;
; 756  :         }
; 757  :         else if (c)

	test	cl, cl
	je	SHORT $LN131@AddOneLine

; 758  :         {
; 759  :             // u の最上位に達しておらず、かつキャリーが立っている場合
; 760  : 
; 761  :             // 繰り上がりを継続する
; 762  :             c = _ADD_UNIT_DIV(c, *u_ptr, 0, u_ptr);

	mov	eax, DWORD PTR [r9]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	cl, -1
	adc	eax, 0
	mov	DWORD PTR [r9], eax
	setb	cl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 763  :             ++u_ptr;

	add	r9, 4

; 764  :             --u_count;

	sub	rdx, 1
	jne	SHORT $LL113@AddOneLine
$LN131@AddOneLine:

; 906  : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
AddOneLineX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT AddOneLine
_TEXT	SEGMENT
u_buf$ = 8
u_buf_len$ = 16
v_buf$ = 24
v_buf_len$ = 32
q_index$ = 40
AddOneLine PROC						; COMDAT

; 777  : {

	mov	QWORD PTR [rsp+8], rbx

; 778  :     __UNIT_TYPE_DIV* u_ptr = &u_buf[q_index];

	mov	rax, QWORD PTR q_index$[rsp]

; 779  :     __UNIT_TYPE_DIV* v_ptr = &v_buf[0];
; 780  :     __UNIT_TYPE v_count = v_buf_len;
; 781  :     char c = 0;
; 782  : 
; 783  :     // まず 32 ワードずつ加算をする。
; 784  :     __UNIT_TYPE count = v_count >> 5;

	mov	r11, r9
	shr	r11, 5
	xor	r10b, r10b
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+rax*4]

; 785  :     while (count != 0)

	test	r11, r11
	je	$LN3@AddOneLine
	npad	12
$LL2@AddOneLine:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1054 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	r10b, -1
	adc	ecx, DWORD PTR [r8]
	mov	DWORD PTR [rax], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1055 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	ecx, DWORD PTR [rax+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+4]
	mov	DWORD PTR [rax+4], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1056 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	ecx, DWORD PTR [rax+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+8]
	mov	DWORD PTR [rax+8], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1057 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	ecx, DWORD PTR [rax+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+12]
	mov	DWORD PTR [rax+12], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1058 :     c = _ADD_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	ecx, DWORD PTR [rax+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+16]
	mov	DWORD PTR [rax+16], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1059 :     c = _ADD_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	ecx, DWORD PTR [rax+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+20]
	mov	DWORD PTR [rax+20], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1060 :     c = _ADD_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	ecx, DWORD PTR [rax+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+24]
	mov	DWORD PTR [rax+24], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1061 :     c = _ADD_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	ecx, DWORD PTR [rax+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+28]
	mov	DWORD PTR [rax+28], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1062 :     c = _ADD_UNIT_DIV(c, xp[8], yp[8], &zp[8]);

	mov	ecx, DWORD PTR [rax+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+32]
	mov	DWORD PTR [rax+32], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1063 :     c = _ADD_UNIT_DIV(c, xp[9], yp[9], &zp[9]);

	mov	ecx, DWORD PTR [rax+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+36]
	mov	DWORD PTR [rax+36], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1064 :     c = _ADD_UNIT_DIV(c, xp[10], yp[10], &zp[10]);

	mov	ecx, DWORD PTR [rax+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+40]
	mov	DWORD PTR [rax+40], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1065 :     c = _ADD_UNIT_DIV(c, xp[11], yp[11], &zp[11]);

	mov	ecx, DWORD PTR [rax+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+44]
	mov	DWORD PTR [rax+44], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1066 :     c = _ADD_UNIT_DIV(c, xp[12], yp[12], &zp[12]);

	mov	ecx, DWORD PTR [rax+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+48]
	mov	DWORD PTR [rax+48], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1067 :     c = _ADD_UNIT_DIV(c, xp[13], yp[13], &zp[13]);

	mov	ecx, DWORD PTR [rax+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+52]
	mov	DWORD PTR [rax+52], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1068 :     c = _ADD_UNIT_DIV(c, xp[14], yp[14], &zp[14]);

	mov	ecx, DWORD PTR [rax+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+56]
	mov	DWORD PTR [rax+56], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1069 :     c = _ADD_UNIT_DIV(c, xp[15], yp[15], &zp[15]);

	mov	ecx, DWORD PTR [rax+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+60]
	mov	DWORD PTR [rax+60], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1070 :     c = _ADD_UNIT_DIV(c, xp[16], yp[16], &zp[16]);

	mov	ecx, DWORD PTR [rax+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+64]
	mov	DWORD PTR [rax+64], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1071 :     c = _ADD_UNIT_DIV(c, xp[17], yp[17], &zp[17]);

	mov	ecx, DWORD PTR [rax+68]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+68]
	mov	DWORD PTR [rax+68], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1072 :     c = _ADD_UNIT_DIV(c, xp[18], yp[18], &zp[18]);

	mov	ecx, DWORD PTR [rax+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+72]
	mov	DWORD PTR [rax+72], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1073 :     c = _ADD_UNIT_DIV(c, xp[19], yp[19], &zp[19]);

	mov	ecx, DWORD PTR [rax+76]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+76]
	mov	DWORD PTR [rax+76], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1074 :     c = _ADD_UNIT_DIV(c, xp[20], yp[20], &zp[20]);

	mov	ecx, DWORD PTR [rax+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+80]
	mov	DWORD PTR [rax+80], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1075 :     c = _ADD_UNIT_DIV(c, xp[21], yp[21], &zp[21]);

	mov	ecx, DWORD PTR [rax+84]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+84]
	mov	DWORD PTR [rax+84], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1076 :     c = _ADD_UNIT_DIV(c, xp[22], yp[22], &zp[22]);

	mov	ecx, DWORD PTR [rax+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+88]
	mov	DWORD PTR [rax+88], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1077 :     c = _ADD_UNIT_DIV(c, xp[23], yp[23], &zp[23]);

	mov	ecx, DWORD PTR [rax+92]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+92]
	mov	DWORD PTR [rax+92], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1078 :     c = _ADD_UNIT_DIV(c, xp[24], yp[24], &zp[24]);

	mov	ecx, DWORD PTR [rax+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+96]
	mov	DWORD PTR [rax+96], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1079 :     c = _ADD_UNIT_DIV(c, xp[25], yp[25], &zp[25]);

	mov	ecx, DWORD PTR [rax+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+100]
	mov	DWORD PTR [rax+100], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1080 :     c = _ADD_UNIT_DIV(c, xp[26], yp[26], &zp[26]);

	mov	ecx, DWORD PTR [rax+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+104]
	mov	DWORD PTR [rax+104], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1081 :     c = _ADD_UNIT_DIV(c, xp[27], yp[27], &zp[27]);

	mov	ecx, DWORD PTR [rax+108]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+108]
	mov	DWORD PTR [rax+108], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1082 :     c = _ADD_UNIT_DIV(c, xp[28], yp[28], &zp[28]);

	mov	ecx, DWORD PTR [rax+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+112]
	mov	DWORD PTR [rax+112], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1083 :     c = _ADD_UNIT_DIV(c, xp[29], yp[29], &zp[29]);

	mov	ecx, DWORD PTR [rax+116]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+116]
	mov	DWORD PTR [rax+116], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1084 :     c = _ADD_UNIT_DIV(c, xp[30], yp[30], &zp[30]);

	mov	ecx, DWORD PTR [rax+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+120]
	mov	DWORD PTR [rax+120], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1085 :     c = _ADD_UNIT_DIV(c, xp[31], yp[31], &zp[31]);

	mov	ecx, DWORD PTR [rax+124]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+124]
	mov	DWORD PTR [rax+124], ecx
	setb	r10b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 788  :         u_ptr += 32;

	sub	rax, -128				; ffffffffffffff80H

; 789  :         v_ptr += 32;

	sub	r8, -128				; ffffffffffffff80H

; 790  :         --count;

	sub	r11, 1
	jne	$LL2@AddOneLine
$LN3@AddOneLine:

; 791  :     }
; 792  :     // この時点で未処理の桁は 32 ワード未満のはず
; 793  : 
; 794  :     // 未処理の桁が 16 ワード以上あるなら 16 ワード加算を行う。
; 795  :     if (v_count & 0x10)

	test	r9b, 16
	je	$LN4@AddOneLine
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2630 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	r10b, -1
	adc	ecx, DWORD PTR [r8]
	mov	DWORD PTR [rax], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2631 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	ecx, DWORD PTR [rax+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+4]
	mov	DWORD PTR [rax+4], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2632 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	ecx, DWORD PTR [rax+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+8]
	mov	DWORD PTR [rax+8], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2633 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	ecx, DWORD PTR [rax+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+12]
	mov	DWORD PTR [rax+12], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2634 :     c = _ADD_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	ecx, DWORD PTR [rax+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+16]
	mov	DWORD PTR [rax+16], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2635 :     c = _ADD_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	ecx, DWORD PTR [rax+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+20]
	mov	DWORD PTR [rax+20], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2636 :     c = _ADD_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	ecx, DWORD PTR [rax+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+24]
	mov	DWORD PTR [rax+24], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2637 :     c = _ADD_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	ecx, DWORD PTR [rax+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+28]
	mov	DWORD PTR [rax+28], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2638 :     c = _ADD_UNIT_DIV(c, xp[8], yp[8], &zp[8]);

	mov	ecx, DWORD PTR [rax+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+32]
	mov	DWORD PTR [rax+32], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2639 :     c = _ADD_UNIT_DIV(c, xp[9], yp[9], &zp[9]);

	mov	ecx, DWORD PTR [rax+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+36]
	mov	DWORD PTR [rax+36], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2640 :     c = _ADD_UNIT_DIV(c, xp[10], yp[10], &zp[10]);

	mov	ecx, DWORD PTR [rax+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+40]
	mov	DWORD PTR [rax+40], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2641 :     c = _ADD_UNIT_DIV(c, xp[11], yp[11], &zp[11]);

	mov	ecx, DWORD PTR [rax+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+44]
	mov	DWORD PTR [rax+44], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2642 :     c = _ADD_UNIT_DIV(c, xp[12], yp[12], &zp[12]);

	mov	ecx, DWORD PTR [rax+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+48]
	mov	DWORD PTR [rax+48], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2643 :     c = _ADD_UNIT_DIV(c, xp[13], yp[13], &zp[13]);

	mov	ecx, DWORD PTR [rax+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+52]
	mov	DWORD PTR [rax+52], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2644 :     c = _ADD_UNIT_DIV(c, xp[14], yp[14], &zp[14]);

	mov	ecx, DWORD PTR [rax+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+56]
	mov	DWORD PTR [rax+56], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2645 :     c = _ADD_UNIT_DIV(c, xp[15], yp[15], &zp[15]);

	mov	ecx, DWORD PTR [rax+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+60]
	mov	DWORD PTR [rax+60], ecx
	setb	r10b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 798  :         u_ptr += 16;

	add	rax, 64					; 00000040H

; 799  :         v_ptr += 16;

	add	r8, 64					; 00000040H
$LN4@AddOneLine:

; 800  :     }
; 801  :     // この時点で未処理の桁は 16 ワード未満のはず
; 802  : 
; 803  :     // 未処理の桁が 8 ワード以上あるなら 8 ワード加算を行う。
; 804  :     if (v_count & 0x8)

	test	r9b, 8
	je	SHORT $LN5@AddOneLine
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3534 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	r10b, -1
	adc	ecx, DWORD PTR [r8]
	mov	DWORD PTR [rax], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3535 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	ecx, DWORD PTR [rax+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+4]
	mov	DWORD PTR [rax+4], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3536 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	ecx, DWORD PTR [rax+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+8]
	mov	DWORD PTR [rax+8], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3537 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	ecx, DWORD PTR [rax+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+12]
	mov	DWORD PTR [rax+12], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3538 :     c = _ADD_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	ecx, DWORD PTR [rax+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+16]
	mov	DWORD PTR [rax+16], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3539 :     c = _ADD_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	ecx, DWORD PTR [rax+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+20]
	mov	DWORD PTR [rax+20], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3540 :     c = _ADD_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	ecx, DWORD PTR [rax+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+24]
	mov	DWORD PTR [rax+24], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3541 :     c = _ADD_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	ecx, DWORD PTR [rax+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+28]
	mov	DWORD PTR [rax+28], ecx
	setb	r10b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 807  :         u_ptr += 8;

	add	rax, 32					; 00000020H

; 808  :         v_ptr += 8;

	add	r8, 32					; 00000020H
$LN5@AddOneLine:

; 809  :     }
; 810  :     // この時点で未処理の桁は 8 ワード未満のはず
; 811  : 
; 812  :     // 未処理の桁が 4 ワード以上あるなら 4 ワード加算を行う。
; 813  :     if (v_count & 0x4)

	test	r9b, 4
	je	SHORT $LN6@AddOneLine
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4102 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	r10b, -1
	adc	ecx, DWORD PTR [r8]
	mov	DWORD PTR [rax], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4103 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	ecx, DWORD PTR [rax+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+4]
	mov	DWORD PTR [rax+4], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4104 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	ecx, DWORD PTR [rax+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+8]
	mov	DWORD PTR [rax+8], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4105 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	ecx, DWORD PTR [rax+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+12]
	mov	DWORD PTR [rax+12], ecx
	setb	r10b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 816  :         u_ptr += 4;

	add	rax, 16

; 817  :         v_ptr += 4;

	add	r8, 16
$LN6@AddOneLine:

; 818  :     }
; 819  :     // この時点で未処理の桁は 4 ワード未満のはず
; 820  : 
; 821  :     // 未処理の桁が 2 ワード以上あるなら 2 ワード加算を行う。
; 822  :     if (v_count & 0x2)

	test	r9b, 2
	je	SHORT $LN7@AddOneLine
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4502 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	r10b, -1
	adc	ecx, DWORD PTR [r8]
	mov	DWORD PTR [rax], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4503 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	ecx, DWORD PTR [rax+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+4]
	mov	DWORD PTR [rax+4], ecx
	setb	r10b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 825  :         u_ptr += 2;

	add	rax, 8

; 826  :         v_ptr += 2;

	add	r8, 8
$LN7@AddOneLine:

; 827  :     }
; 828  :     // この時点で未処理の桁は 2 ワード未満のはず
; 829  : 
; 830  :     // 未処理の桁が 1 ワード以上あるなら 1 ワード加算を行う。
; 831  :     if (v_count & 0x1)

	test	r9b, 1
	je	SHORT $LN8@AddOneLine

; 832  :     {
; 833  :         c = _ADD_UNIT_DIV(c, *u_ptr, *v_ptr, u_ptr);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	r10b, -1
	adc	ecx, DWORD PTR [r8]
	mov	DWORD PTR [rax], ecx
	setb	r10b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 834  :         ++u_ptr;

	add	rax, 4
$LN8@AddOneLine:

; 835  :         ++v_ptr;
; 836  :     }
; 837  : 
; 838  :     // 残りの桁の繰り上がりを計算する。
; 839  :     DoCarry(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr);

	lea	rdx, QWORD PTR [rdx*4+4]
	sub	rdx, rax
	add	rdx, rbx
	sar	rdx, 2

; 752  :         if (u_count <= 0)

	test	rdx, rdx
	je	SHORT $LN165@AddOneLine
$LL147@AddOneLine:

; 753  :         {
; 754  :             // u の最上位まで達してしまった場合
; 755  :             return;
; 756  :         }
; 757  :         else if (c)

	test	r10b, r10b
	je	SHORT $LN165@AddOneLine

; 758  :         {
; 759  :             // u の最上位に達しておらず、かつキャリーが立っている場合
; 760  : 
; 761  :             // 繰り上がりを継続する
; 762  :             c = _ADD_UNIT_DIV(c, *u_ptr, 0, u_ptr);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	r10b, -1
	adc	ecx, 0
	mov	DWORD PTR [rax], ecx
	setb	r10b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 763  :             ++u_ptr;

	add	rax, 4

; 764  :             --u_count;

	sub	rdx, 1
	jne	SHORT $LL147@AddOneLine
$LN165@AddOneLine:

; 840  : }

	mov	rbx, QWORD PTR [rsp+8]
	ret	0
AddOneLine ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT DoCarry
_TEXT	SEGMENT
c$ = 8
u_ptr$ = 16
u_count$ = 24
DoCarry	PROC						; COMDAT

; 749  :     // 繰り上がりを続く限り行う
; 750  :     for (;;)
; 751  :     {
; 752  :         if (u_count <= 0)

	test	r8, r8
	je	SHORT $LN13@DoCarry
$LL2@DoCarry:

; 753  :         {
; 754  :             // u の最上位まで達してしまった場合
; 755  :             return;
; 756  :         }
; 757  :         else if (c)

	test	cl, cl
	je	SHORT $LN13@DoCarry

; 758  :         {
; 759  :             // u の最上位に達しておらず、かつキャリーが立っている場合
; 760  : 
; 761  :             // 繰り上がりを継続する
; 762  :             c = _ADD_UNIT_DIV(c, *u_ptr, 0, u_ptr);

	mov	eax, DWORD PTR [rdx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	cl, -1
	adc	eax, 0
	mov	DWORD PTR [rdx], eax
	setb	cl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 763  :             ++u_ptr;

	add	rdx, 4

; 764  :             --u_count;

	sub	r8, 1
	jne	SHORT $LL2@DoCarry
$LN13@DoCarry:

; 765  :         }
; 766  :         else
; 767  :         {
; 768  :             // u の最上位に達しておらず、かつキャリーが立っていない場合
; 769  : 
; 770  :             // 繰り上がりを中断し、復帰する。
; 771  :             return;
; 772  :         }
; 773  :     }
; 774  : }

	ret	0
DoCarry	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT SubtructOneLineX
_TEXT	SEGMENT
t_lo$1 = 0
t_lo$2 = 4
t_lo$3 = 8
t_lo$4 = 12
t_lo$5 = 16
t_lo$6 = 20
t_lo$7 = 24
t_lo$8 = 28
t_lo$9 = 32
t_lo$10 = 36
t_lo$11 = 40
t_lo$12 = 44
t_lo$13 = 48
t_lo$14 = 52
t_lo$15 = 56
t_lo$16 = 60
t_lo$17 = 64
t_lo$18 = 68
t_lo$19 = 72
t_lo$20 = 76
t_lo$21 = 80
t_lo$22 = 84
t_lo$23 = 88
t_lo$24 = 92
t_hi$25 = 96
t_hi$26 = 100
t_hi$27 = 104
t_hi$28 = 108
t_hi$29 = 112
t_hi$30 = 116
t_hi$31 = 120
t_lo$32 = 124
t_hi$33 = 128
t_lo$34 = 132
t_hi$35 = 136
t_lo$36 = 140
t_hi$37 = 144
t_lo$38 = 148
t_hi$39 = 152
t_lo$40 = 156
t_hi$41 = 160
t_lo$42 = 164
t_hi$43 = 168
t_lo$44 = 172
t_hi$45 = 176
t_lo$46 = 180
t_hi$47 = 184
t_lo$48 = 188
t_hi$49 = 192
t_lo$50 = 196
t_hi$51 = 200
t_lo$52 = 204
t_hi$53 = 208
t_lo$54 = 212
t_hi$55 = 216
t_lo$56 = 220
t_hi$57 = 224
t_lo$58 = 228
t_hi$59 = 232
t_lo$60 = 236
t_hi$61 = 240
t_lo$62 = 244
t_hi$63 = 248
t_lo$64 = 252
t_hi$65 = 256
t_lo$66 = 260
t_hi$67 = 264
t_lo$68 = 268
t_hi$69 = 272
t_lo$70 = 276
t_hi$71 = 280
t_lo$72 = 284
t_hi$73 = 288
t_lo$74 = 292
t_hi$75 = 296
t_lo$76 = 300
t_hi$77 = 304
t_lo$78 = 308
t_hi$79 = 312
t_lo$80 = 316
t_hi$81 = 320
t_hi$82 = 324
t_hi$83 = 328
t_hi$84 = 332
t_hi$85 = 336
t_hi$86 = 340
t_hi$87 = 344
t_hi$88 = 348
t_lo$89 = 352
t_hi$90 = 356
t_lo$91 = 360
t_hi$92 = 364
t_lo$93 = 368
t_hi$94 = 372
t_lo$95 = 376
t_hi$96 = 380
t_lo$97 = 384
t_hi$98 = 388
t_lo$99 = 392
t_hi$100 = 396
t_lo$101 = 400
t_hi$102 = 404
t_lo$103 = 408
t_hi$104 = 412
t_lo$105 = 416
t_hi$106 = 420
t_hi$107 = 424
t_hi$108 = 428
t_hi$109 = 432
t_hi$110 = 436
t_hi$111 = 440
t_hi$112 = 444
t_hi$113 = 448
t_lo$114 = 452
t_hi$115 = 456
t_hi$116 = 460
t_hi$117 = 464
t_hi$118 = 468
t_hi$119 = 472
t_hi$120 = 476
t_hi$121 = 480
t_hi$122 = 484
t_lo$123 = 576
u_buf$ = 576
u_buf_len$ = 584
t_lo$124 = 592
v_buf$ = 592
t_lo$125 = 600
v_buf_len$ = 600
t_lo$126 = 608
q_index$ = 608
q_$ = 616
SubtructOneLineX PROC					; COMDAT

; 597  : {

	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rbx
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	lea	rbp, QWORD PTR [rsp-248]
	sub	rsp, 504				; 000001f8H

; 598  :     __UNIT_TYPE_DIV* u_ptr = &u_buf[q_index];

	mov	rax, QWORD PTR q_index$[rbp-256]

; 599  :     __UNIT_TYPE_DIV* v_ptr = &v_buf[0];
; 600  :     __UNIT_TYPE v_count = v_buf_len;
; 601  :     __UNIT_TYPE_DIV k = 0;

	xor	edi, edi
	mov	esi, DWORD PTR q_$[rbp-256]

; 602  :     char c = 0;
; 603  : 
; 604  :     __UNIT_TYPE count = v_count >> 5;

	mov	r12, r9
	xor	r11b, r11b
	shr	r12, 5
	mov	r15, r9
	mov	rbx, r8
	lea	rax, QWORD PTR [rax*4]
	mov	r13, rcx
	add	rax, rcx
	mov	r14d, edi

; 605  :     while (count != 0)

	test	r12, r12
	je	$LN821@SubtructOn
	npad	7
$LL2@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r14d
	mov	DWORD PTR t_lo$126[rbp-256], edx
	adcx	r9d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r11b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$25[rsp], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+4]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$123[rbp-256], edx
	adcx	r10d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$26[rsp], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+4], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+8]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$124[rbp-256], edx
	adcx	r9d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$27[rsp], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+8], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+12]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$125[rbp-256], edx
	adcx	r10d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$28[rsp], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+12], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+16]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$1[rsp], edx
	adcx	r9d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$29[rsp], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+16], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+20]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r11, rdx
	shr	r11, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$2[rsp], edx
	adcx	r11d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$30[rsp], r11d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+20], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+24]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	shr	r10, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r11d
	mov	DWORD PTR t_lo$3[rsp], edx
	adcx	r10d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$31[rsp], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+24], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+28]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$32[rsp], edx
	adcx	r9d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$33[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+28], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+32]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$34[rbp-256], edx
	adcx	r10d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$35[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+32], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+36]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$36[rbp-256], edx
	adcx	r9d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$37[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+36], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+40]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$38[rbp-256], edx
	adcx	r10d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$39[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+40], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+44]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$40[rbp-256], edx
	adcx	r9d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$41[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+44], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+48]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$42[rbp-256], edx
	adcx	r10d, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$43[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+48], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+52]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$44[rbp-256], edx
	adcx	r9d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$45[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+52], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+56]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$46[rbp-256], edx
	adcx	r10d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$47[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+56], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+60]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$48[rbp-256], edx
	adcx	r9d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$49[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+60], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+64]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$50[rbp-256], edx
	adcx	r10d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$51[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+64], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+68]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+68]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$52[rbp-256], edx
	adcx	r9d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$53[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+68], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+72]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$54[rbp-256], edx
	adcx	r10d, edi
	mov	DWORD PTR t_hi$55[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1
	sbb	ecx, edx
	mov	DWORD PTR [rax+72], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+76]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+76]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$56[rbp-256], edx
	adcx	r9d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$57[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+76], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+80]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$58[rbp-256], edx
	adcx	r10d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$59[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+80], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+84]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+84]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$60[rbp-256], edx
	adcx	r9d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$61[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+84], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+88]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$62[rbp-256], edx
	adcx	r10d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$63[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+88], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+92]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+92]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$64[rbp-256], edx
	adcx	r9d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$65[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+92], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+96]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$66[rbp-256], edx
	adcx	r10d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$67[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	setb	r8b
	mov	DWORD PTR [rax+96], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$68[rbp-256], edx
	adcx	r9d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$69[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+100], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+104]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$70[rbp-256], edx
	adcx	r10d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$71[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+104], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+108]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+108]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$72[rbp-256], edx
	adcx	r9d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$73[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+108], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+112]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$74[rbp-256], edx
	adcx	r10d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$75[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+112], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+116]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+116]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$76[rbp-256], edx
	adcx	r9d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$77[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+116], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+120]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$78[rbp-256], edx
	adcx	r10d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$79[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+120], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+124]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+124]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r14, rdx
	shr	r14, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$80[rbp-256], edx
	adcx	r14d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$81[rbp-256], r14d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+124], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	ecx, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r11b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 639  :         u_ptr += 32;

	sub	rax, -128				; ffffffffffffff80H

; 640  :         v_ptr += 32;

	sub	rbx, -128				; ffffffffffffff80H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock xadd DWORD PTR statistics_info+4, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 605  :     while (count != 0)

	sub	r12, 1
	jne	$LL2@SubtructOn
$LN821@SubtructOn:

; 641  :         --count;
; 642  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 643  :         if (sizeof(k) == sizeof(_UINT64_T))
; 644  :             AddToMULTI64Counter(32);
; 645  :         else
; 646  :             AddToMULTI32Counter(32);
; 647  : #endif
; 648  :     }
; 649  : 
; 650  :     if (v_count & 0x10)

	test	r15b, 16
	je	$LN604@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r14d
	mov	DWORD PTR t_lo$4[rsp], edx
	adcx	r9d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r11b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$82[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+4]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$5[rsp], edx
	adcx	r10d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$83[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+4], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+8]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$6[rsp], edx
	adcx	r9d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$84[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+8], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+12]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$7[rsp], edx
	adcx	r10d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$85[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+12], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+16]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$8[rsp], edx
	adcx	r9d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$86[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+16], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+20]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r11, rdx
	shr	r11, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$9[rsp], edx
	adcx	r11d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$87[rbp-256], r11d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+20], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+24]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	shr	r10, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r11d
	mov	DWORD PTR t_lo$10[rsp], edx
	adcx	r10d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$88[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+24], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+28]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$89[rbp-256], edx
	adcx	r9d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$90[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+28], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+32]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$91[rbp-256], edx
	adcx	r10d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$92[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+32], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+36]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$93[rbp-256], edx
	adcx	r9d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$94[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+36], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+40]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$95[rbp-256], edx
	adcx	r10d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$96[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+40], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+44]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$97[rbp-256], edx
	adcx	r9d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$98[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+44], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+48]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$99[rbp-256], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	r10d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$100[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+48], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+52]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$101[rbp-256], edx
	adcx	r9d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$102[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+52], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+56]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$103[rbp-256], edx
	adcx	r10d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$104[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+56], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+60]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r9b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r8, rdx
	shr	r8, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$105[rbp-256], edx
	adcx	r8d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r9b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$106[rbp-256], r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 441  :     *k = t_hi;

	mov	r14d, r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+60], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	ecx, 16
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r11b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 668  :         u_ptr += 16;

	add	rax, 64					; 00000040H

; 669  :         v_ptr += 16;

	add	rbx, 64					; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock xadd DWORD PTR statistics_info+4, ecx
$LN604@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 678  :     if (v_count & 0x8)

	test	r15b, 8
	je	$LN704@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r14d
	mov	DWORD PTR t_lo$11[rsp], edx
	adcx	r9d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r11b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$107[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+4]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$12[rsp], edx
	adcx	r10d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$108[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+4], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+8]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$13[rsp], edx
	adcx	r9d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$109[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+8], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+12]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$14[rsp], edx
	adcx	r10d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$110[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+12], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+16]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$15[rsp], edx
	adcx	r9d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$111[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+16], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+20]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r11, rdx
	shr	r11, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$16[rsp], edx
	adcx	r11d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$112[rbp-256], r11d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+20], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+24]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	shr	r10, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r11d
	mov	DWORD PTR t_lo$17[rsp], edx
	adcx	r10d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$113[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+24], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+28]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r9b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r8, rdx
	shr	r8, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$114[rbp-256], edx
	adcx	r8d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r9b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$115[rbp-256], r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 441  :     *k = t_hi;

	mov	r14d, r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+28], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	ecx, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r11b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 688  :         u_ptr += 8;

	add	rax, 32					; 00000020H

; 689  :         v_ptr += 8;

	add	rbx, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock xadd DWORD PTR statistics_info+4, ecx
$LN704@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 698  :     if (v_count & 0x4)

	test	r15b, 4
	je	$LN756@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r14d
	mov	DWORD PTR t_lo$18[rsp], edx
	adcx	r9d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r11b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$116[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+4]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$19[rsp], edx
	adcx	r10d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$117[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+4], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+8]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r11, rdx
	shr	r11, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$20[rsp], edx
	adcx	r11d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$118[rbp-256], r11d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+8], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+12]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r9b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r8, rdx
	shr	r8, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r11d
	mov	DWORD PTR t_lo$21[rsp], edx
	adcx	r8d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r9b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$119[rbp-256], r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 441  :     *k = t_hi;

	mov	r14d, r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+12], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	ecx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r11b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 704  :         u_ptr += 4;

	add	rax, 16

; 705  :         v_ptr += 4;

	add	rbx, 16
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock xadd DWORD PTR statistics_info+4, ecx
$LN756@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 714  :     if (v_count & 0x2)

	test	r15b, 2
	je	SHORT $LN784@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r14d
	mov	DWORD PTR t_lo$22[rsp], edx
	adcx	r10d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r11b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$120[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax], ecx

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+4]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r9b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r8, rdx
	shr	r8, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$23[rsp], edx
	adcx	r8d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r9b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$121[rbp-256], r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 441  :     *k = t_hi;

	mov	r14d, r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+4], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	ecx, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r11b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 718  :         u_ptr += 2;

	add	rax, 8

; 719  :         v_ptr += 2;

	add	rbx, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock xadd DWORD PTR statistics_info+4, ecx
$LN784@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 728  :     if (v_count & 0x1)

	test	r15b, 1
	je	SHORT $LN800@SubtructOn

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx]
	imul	rdx, rsi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r8, rdx
	shr	r8, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r14d
	mov	DWORD PTR t_lo$24[rsp], edx
	adcx	r8d, edi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r11b, -1

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$122[rbp-256], r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 441  :     *k = t_hi;

	mov	r14d, r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax], ecx
	setb	r11b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 731  :         u_ptr += 1;

	add	rax, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 322  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

	lock inc DWORD PTR statistics_info+4
$LN800@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 741  :     c = _SUBTRUCT_UNIT_DIV(c, *u_ptr, k, u_ptr);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r11b, -1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 744  :     return (DoBorrow(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr));

	mov	r8, QWORD PTR u_buf_len$[rbp-256]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, r14d
	mov	DWORD PTR [rax], ecx
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 742  :     u_ptr += 1;

	add	rax, 4

; 744  :     return (DoBorrow(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr));

	lea	r8, QWORD PTR [r8*4+4]
	sub	r8, rax
	add	r8, r13
	sar	r8, 2

; 388  :         if (u_count <= 0)

	test	r8, r8
	je	SHORT $LN818@SubtructOn
$LL805@SubtructOn:

; 393  :             {
; 394  :                 // かつそれでも桁借りを行う必要がある場合
; 395  : 
; 396  :                 // 減算結果が負になってしまったので呼び出し元に通知する。
; 397  :                 return (TRUE);
; 398  :             }
; 399  : 
; 400  :             // u の最上位に達してしまった場合はいずれにしろループを中断して正常復帰する。
; 401  : 
; 402  :             return (FALSE);
; 403  :         }
; 404  :         else if (c)

	test	dl, dl
	je	SHORT $LN811@SubtructOn

; 405  :         {
; 406  :             // u の最上位に達しておらず、かつボローが立っている場合
; 407  : 
; 408  :             // 桁借りを継続する
; 409  :             c = _SUBTRUCT_UNIT_DIV(c, *up, 0, up);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	dl, -1
	sbb	ecx, edi
	mov	DWORD PTR [rax], ecx
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 410  :             ++up;

	add	rax, 4

; 411  :             --u_count;

	sub	r8, 1
	jne	SHORT $LL805@SubtructOn
$LN818@SubtructOn:

; 389  :         {
; 390  :             // u の最上位まで達してしまった場合
; 391  : 
; 392  :             if (c)

	test	dl, dl
	setne	dil
$LN811@SubtructOn:

; 745  : }

	mov	eax, edi
	add	rsp, 504				; 000001f8H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbx
	pop	rbp
	ret	0
SubtructOneLineX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT SubtructOneLine
_TEXT	SEGMENT
t_lo$1 = 0
t_lo$2 = 4
t_lo$3 = 8
t_lo$4 = 12
t_lo$5 = 16
t_lo$6 = 20
t_lo$7 = 24
t_lo$8 = 28
t_lo$9 = 32
t_lo$10 = 36
t_lo$11 = 40
t_lo$12 = 44
t_lo$13 = 48
t_lo$14 = 52
t_lo$15 = 56
t_lo$16 = 60
t_lo$17 = 64
t_lo$18 = 68
t_lo$19 = 72
t_lo$20 = 76
t_lo$21 = 80
t_lo$22 = 84
t_lo$23 = 88
t_lo$24 = 92
t_hi$25 = 96
t_hi$26 = 100
t_hi$27 = 104
t_hi$28 = 108
t_hi$29 = 112
t_hi$30 = 116
t_hi$31 = 120
t_lo$32 = 124
t_hi$33 = 128
t_lo$34 = 132
t_hi$35 = 136
t_lo$36 = 140
t_hi$37 = 144
t_lo$38 = 148
t_hi$39 = 152
t_lo$40 = 156
t_hi$41 = 160
t_lo$42 = 164
t_hi$43 = 168
t_lo$44 = 172
t_hi$45 = 176
t_lo$46 = 180
t_hi$47 = 184
t_lo$48 = 188
t_hi$49 = 192
t_lo$50 = 196
t_hi$51 = 200
t_lo$52 = 204
t_hi$53 = 208
t_lo$54 = 212
t_hi$55 = 216
t_lo$56 = 220
t_hi$57 = 224
t_lo$58 = 228
t_hi$59 = 232
t_lo$60 = 236
t_hi$61 = 240
t_lo$62 = 244
t_hi$63 = 248
t_lo$64 = 252
t_hi$65 = 256
t_lo$66 = 260
t_hi$67 = 264
t_lo$68 = 268
t_hi$69 = 272
t_lo$70 = 276
t_hi$71 = 280
t_lo$72 = 284
t_hi$73 = 288
t_lo$74 = 292
t_hi$75 = 296
t_lo$76 = 300
t_hi$77 = 304
t_lo$78 = 308
t_hi$79 = 312
t_lo$80 = 316
t_hi$81 = 320
t_hi$82 = 324
t_hi$83 = 328
t_hi$84 = 332
t_hi$85 = 336
t_hi$86 = 340
t_hi$87 = 344
t_hi$88 = 348
t_lo$89 = 352
t_hi$90 = 356
t_lo$91 = 360
t_hi$92 = 364
t_lo$93 = 368
t_hi$94 = 372
t_lo$95 = 376
t_hi$96 = 380
t_lo$97 = 384
t_hi$98 = 388
t_lo$99 = 392
t_hi$100 = 396
t_lo$101 = 400
t_hi$102 = 404
t_lo$103 = 408
t_hi$104 = 412
t_lo$105 = 416
t_hi$106 = 420
t_hi$107 = 424
t_hi$108 = 428
t_hi$109 = 432
t_hi$110 = 436
t_hi$111 = 440
t_hi$112 = 444
t_hi$113 = 448
t_lo$114 = 452
t_hi$115 = 456
t_hi$116 = 460
t_hi$117 = 464
t_hi$118 = 468
t_hi$119 = 472
t_hi$120 = 476
t_hi$121 = 480
t_hi$122 = 484
t_lo$123 = 576
u_buf$ = 576
u_buf_len$ = 584
t_lo$124 = 592
v_buf$ = 592
t_lo$125 = 600
v_buf_len$ = 600
t_lo$126 = 608
q_index$ = 608
q_$ = 616
SubtructOneLine PROC					; COMDAT

; 446  : {

	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rbx
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	lea	rbp, QWORD PTR [rsp-248]
	sub	rsp, 504				; 000001f8H

; 447  :     __UNIT_TYPE_DIV* u_ptr = &u_buf[q_index];

	mov	rax, QWORD PTR q_index$[rbp-256]

; 448  :     __UNIT_TYPE_DIV* v_ptr = &v_buf[0];
; 449  :     __UNIT_TYPE v_count = v_buf_len;
; 450  :     __UNIT_TYPE_DIV k = 0;

	xor	r15d, r15d
	mov	edi, DWORD PTR q_$[rbp-256]

; 451  :     char c = 0;
; 452  : 
; 453  :     __UNIT_TYPE count = v_count >> 5;

	mov	r12, r9
	xor	r11b, r11b
	shr	r12, 5
	mov	r14, r9
	mov	rbx, r8
	lea	rax, QWORD PTR [rax*4]
	mov	r13, rcx
	add	rax, rcx
	mov	esi, r15d

; 454  :     while (count != 0)

	test	r12, r12
	je	$LN821@SubtructOn
	npad	6
$LL2@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, esi
	mov	DWORD PTR t_lo$126[rbp-256], edx
	adc	r9d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r11b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$25[rsp], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+4]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$123[rbp-256], edx
	adc	r10d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$26[rsp], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+4], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+8]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$124[rbp-256], edx
	adc	r9d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$27[rsp], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+8], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+12]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$125[rbp-256], edx
	adc	r10d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$28[rsp], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+12], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+16]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$1[rsp], edx
	adc	r9d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$29[rsp], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+16], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+20]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r11, rdx
	shr	r11, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$2[rsp], edx
	adc	r11d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$30[rsp], r11d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+20], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+24]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	shr	r10, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r11d
	mov	DWORD PTR t_lo$3[rsp], edx
	adc	r10d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$31[rsp], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+24], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+28]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$32[rsp], edx
	adc	r9d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$33[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+28], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+32]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$34[rbp-256], edx
	adc	r10d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$35[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+32], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+36]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$36[rbp-256], edx
	adc	r9d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$37[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+36], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+40]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$38[rbp-256], edx
	adc	r10d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$39[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+40], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+44]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$40[rbp-256], edx
	adc	r9d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$41[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+44], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+48]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$42[rbp-256], edx
	adc	r10d, r15d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$43[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+48], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+52]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$44[rbp-256], edx
	adc	r9d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$45[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+52], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+56]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$46[rbp-256], edx
	adc	r10d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$47[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+56], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+60]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$48[rbp-256], edx
	adc	r9d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$49[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+60], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+64]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$50[rbp-256], edx
	adc	r10d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$51[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+64], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+68]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+68]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$52[rbp-256], edx
	adc	r9d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$53[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+68], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+72]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$54[rbp-256], edx
	adc	r10d, r15d
	mov	DWORD PTR t_hi$55[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1
	sbb	ecx, edx
	mov	DWORD PTR [rax+72], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+76]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+76]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$56[rbp-256], edx
	adc	r9d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$57[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+76], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+80]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$58[rbp-256], edx
	adc	r10d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$59[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+80], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+84]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+84]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$60[rbp-256], edx
	adc	r9d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$61[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+84], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+88]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$62[rbp-256], edx
	adc	r10d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$63[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+88], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+92]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+92]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$64[rbp-256], edx
	adc	r9d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$65[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+92], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+96]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$66[rbp-256], edx
	adc	r10d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$67[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	setb	r8b
	mov	DWORD PTR [rax+96], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$68[rbp-256], edx
	adc	r9d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$69[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+100], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+104]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$70[rbp-256], edx
	adc	r10d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$71[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+104], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+108]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+108]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$72[rbp-256], edx
	adc	r9d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$73[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+108], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+112]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$74[rbp-256], edx
	adc	r10d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$75[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+112], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+116]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+116]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$76[rbp-256], edx
	adc	r9d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$77[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+116], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+120]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$78[rbp-256], edx
	adc	r10d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$79[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+120], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+124]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+124]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	rsi, rdx
	shr	rsi, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$80[rbp-256], edx
	adc	esi, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$81[rbp-256], esi

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+124], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	ecx, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r11b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 488  :         u_ptr += 32;

	sub	rax, -128				; ffffffffffffff80H

; 489  :         v_ptr += 32;

	sub	rbx, -128				; ffffffffffffff80H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock xadd DWORD PTR statistics_info+4, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 454  :     while (count != 0)

	sub	r12, 1
	jne	$LL2@SubtructOn
$LN821@SubtructOn:

; 490  :         --count;
; 491  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 492  :         if (sizeof(k) == sizeof(_UINT64_T))
; 493  :             AddToMULTI64Counter(32);
; 494  :         else
; 495  :             AddToMULTI32Counter(32);
; 496  : #endif
; 497  :     }
; 498  : 
; 499  :     if (v_count & 0x10)

	test	r14b, 16
	je	$LN604@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, esi
	mov	DWORD PTR t_lo$4[rsp], edx
	adc	r9d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r11b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$82[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+4]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$5[rsp], edx
	adc	r10d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$83[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+4], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+8]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$6[rsp], edx
	adc	r9d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$84[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+8], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+12]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$7[rsp], edx
	adc	r10d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$85[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+12], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+16]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$8[rsp], edx
	adc	r9d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$86[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+16], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+20]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r11, rdx
	shr	r11, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$9[rsp], edx
	adc	r11d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$87[rbp-256], r11d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+20], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+24]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	shr	r10, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r11d
	mov	DWORD PTR t_lo$10[rsp], edx
	adc	r10d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$88[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+24], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+28]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$89[rbp-256], edx
	adc	r9d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$90[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+28], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+32]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$91[rbp-256], edx
	adc	r10d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$92[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+32], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+36]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$93[rbp-256], edx
	adc	r9d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$94[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+36], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+40]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$95[rbp-256], edx
	adc	r10d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$96[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+40], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+44]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$97[rbp-256], edx
	adc	r9d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$98[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+44], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+48]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$99[rbp-256], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	r10d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$100[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+48], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+52]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$101[rbp-256], edx
	adc	r9d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$102[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+52], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+56]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$103[rbp-256], edx
	adc	r10d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$104[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+56], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+60]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r9b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r8, rdx
	shr	r8, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$105[rbp-256], edx
	adc	r8d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r9b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$106[rbp-256], r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 430  :     *k = t_hi;

	mov	esi, r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+60], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	ecx, 16
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r11b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 517  :         u_ptr += 16;

	add	rax, 64					; 00000040H

; 518  :         v_ptr += 16;

	add	rbx, 64					; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock xadd DWORD PTR statistics_info+4, ecx
$LN604@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 527  :     if (v_count & 0x8)

	test	r14b, 8
	je	$LN704@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, esi
	mov	DWORD PTR t_lo$11[rsp], edx
	adc	r9d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r11b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$107[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+4]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$12[rsp], edx
	adc	r10d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$108[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+4], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+8]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$13[rsp], edx
	adc	r9d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$109[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+8], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+12]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$14[rsp], edx
	adc	r10d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$110[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+12], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+16]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$15[rsp], edx
	adc	r9d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$111[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+16], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+20]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r11, rdx
	shr	r11, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$16[rsp], edx
	adc	r11d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$112[rbp-256], r11d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+20], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+24]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	shr	r10, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r11d
	mov	DWORD PTR t_lo$17[rsp], edx
	adc	r10d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$113[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+24], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+28]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r9b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r8, rdx
	shr	r8, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$114[rbp-256], edx
	adc	r8d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r9b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$115[rbp-256], r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 430  :     *k = t_hi;

	mov	esi, r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+28], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	ecx, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r11b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 537  :         u_ptr += 8;

	add	rax, 32					; 00000020H

; 538  :         v_ptr += 8;

	add	rbx, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock xadd DWORD PTR statistics_info+4, ecx
$LN704@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 547  :     if (v_count & 0x4)

	test	r14b, 4
	je	$LN756@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, esi
	mov	DWORD PTR t_lo$18[rsp], edx
	adc	r9d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r11b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$116[rbp-256], r9d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+4]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$19[rsp], edx
	adc	r10d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$117[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+4], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+8]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r11, rdx
	shr	r11, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$20[rsp], edx
	adc	r11d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$118[rbp-256], r11d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+8], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+12]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r9b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r8, rdx
	shr	r8, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r11d
	mov	DWORD PTR t_lo$21[rsp], edx
	adc	r8d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r9b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$119[rbp-256], r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 430  :     *k = t_hi;

	mov	esi, r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+12], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	ecx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r11b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 553  :         u_ptr += 4;

	add	rax, 16

; 554  :         v_ptr += 4;

	add	rbx, 16
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock xadd DWORD PTR statistics_info+4, ecx
$LN756@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 563  :     if (v_count & 0x2)

	test	r14b, 2
	je	SHORT $LN784@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, esi
	mov	DWORD PTR t_lo$22[rsp], edx
	adc	r10d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r11b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$120[rbp-256], r10d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax], ecx

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+4]

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r9b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r8, rdx
	shr	r8, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$23[rsp], edx
	adc	r8d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r9b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$121[rbp-256], r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 430  :     *k = t_hi;

	mov	esi, r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+4], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	ecx, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r11b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 567  :         u_ptr += 2;

	add	rax, 8

; 568  :         v_ptr += 2;

	add	rbx, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock xadd DWORD PTR statistics_info+4, ecx
$LN784@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 577  :     if (v_count & 0x1)

	test	r14b, 1
	je	SHORT $LN800@SubtructOn

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx]
	imul	rdx, rdi

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r8, rdx
	shr	r8, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, esi
	mov	DWORD PTR t_lo$24[rsp], edx
	adc	r8d, r15d

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r11b, -1

; 219  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$122[rbp-256], r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 430  :     *k = t_hi;

	mov	esi, r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax], ecx
	setb	r11b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 580  :         u_ptr += 1;

	add	rax, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 322  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

	lock inc DWORD PTR statistics_info+4
$LN800@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 590  :     c = _SUBTRUCT_UNIT_DIV(c, *u_ptr, k, u_ptr);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r11b, -1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 593  :     return (DoBorrow(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr));

	mov	r8, QWORD PTR u_buf_len$[rbp-256]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, esi
	mov	DWORD PTR [rax], ecx
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 591  :     u_ptr += 1;

	add	rax, 4

; 593  :     return (DoBorrow(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr));

	lea	r8, QWORD PTR [r8*4+4]
	sub	r8, rax
	add	r8, r13
	sar	r8, 2

; 388  :         if (u_count <= 0)

	test	r8, r8
	je	SHORT $LN818@SubtructOn
	npad	5
$LL805@SubtructOn:

; 393  :             {
; 394  :                 // かつそれでも桁借りを行う必要がある場合
; 395  : 
; 396  :                 // 減算結果が負になってしまったので呼び出し元に通知する。
; 397  :                 return (TRUE);
; 398  :             }
; 399  : 
; 400  :             // u の最上位に達してしまった場合はいずれにしろループを中断して正常復帰する。
; 401  : 
; 402  :             return (FALSE);
; 403  :         }
; 404  :         else if (c)

	test	dl, dl
	je	SHORT $LN811@SubtructOn

; 405  :         {
; 406  :             // u の最上位に達しておらず、かつボローが立っている場合
; 407  : 
; 408  :             // 桁借りを継続する
; 409  :             c = _SUBTRUCT_UNIT_DIV(c, *up, 0, up);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	dl, -1
	sbb	ecx, r15d
	mov	DWORD PTR [rax], ecx
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 410  :             ++up;

	add	rax, 4

; 411  :             --u_count;

	sub	r8, 1
	jne	SHORT $LL805@SubtructOn
$LN818@SubtructOn:

; 389  :         {
; 390  :             // u の最上位まで達してしまった場合
; 391  : 
; 392  :             if (c)

	test	dl, dl
	setne	r15b
$LN811@SubtructOn:

; 594  : }

	mov	eax, r15d
	add	rsp, 504				; 000001f8H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbx
	pop	rbp
	ret	0
SubtructOneLine ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _MULTIPLYX_DIGIT_UNIT_DIV
_TEXT	SEGMENT
c$ = 8
k$ = 16
vp$ = 24
q_$ = 32
up$ = 40
_MULTIPLYX_DIGIT_UNIT_DIV PROC				; COMDAT

; 435  : {

	mov	QWORD PTR [rsp+16], rbx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	r10d, DWORD PTR [r8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 435  : {

	mov	rbx, rdx
	movzx	r11d, cl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, r9d
	imul	r10, rax

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	mov	eax, 0

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r8, r10
	shr	r8, 32					; 00000020H

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	r10d, DWORD PTR [rdx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	rdx, QWORD PTR up$[rsp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	r8d, eax

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r11b, -1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 440  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rdx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, r10d
	mov	DWORD PTR [rdx], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 441  :     *k = t_hi;

	mov	DWORD PTR [rbx], r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 443  : }

	mov	rbx, QWORD PTR [rsp+16]
	ret	0
_MULTIPLYX_DIGIT_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _MULTIPLY_DIGIT_UNIT_DIV
_TEXT	SEGMENT
c$ = 8
k$ = 16
vp$ = 24
q_$ = 32
up$ = 40
_MULTIPLY_DIGIT_UNIT_DIV PROC				; COMDAT

; 424  : {

	mov	QWORD PTR [rsp+16], rbx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	r10d, DWORD PTR [r8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 424  : {

	mov	rbx, rdx
	movzx	r11d, cl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, r9d
	imul	r10, rax

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r8, r10
	shr	r8, 32					; 00000020H

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	r10d, DWORD PTR [rdx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	rdx, QWORD PTR up$[rsp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	r8d, 0

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	r11b, -1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rdx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, r10d
	mov	DWORD PTR [rdx], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 430  :     *k = t_hi;

	mov	DWORD PTR [rbx], r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 432  : }

	mov	rbx, QWORD PTR [rsp+16]
	ret	0
_MULTIPLY_DIGIT_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT DoBorrow
_TEXT	SEGMENT
c$ = 8
up$ = 16
u_count$ = 24
DoBorrow PROC						; COMDAT

; 385  :     // 桁借りを続く限り行う
; 386  :     for (;;)
; 387  :     {
; 388  :         if (u_count <= 0)

	test	r8, r8
	je	SHORT $LN14@DoBorrow
$LL2@DoBorrow:

; 398  :             }
; 399  : 
; 400  :             // u の最上位に達してしまった場合はいずれにしろループを中断して正常復帰する。
; 401  : 
; 402  :             return (FALSE);
; 403  :         }
; 404  :         else if (c)

	test	cl, cl
	je	SHORT $LN8@DoBorrow

; 405  :         {
; 406  :             // u の最上位に達しておらず、かつボローが立っている場合
; 407  : 
; 408  :             // 桁借りを継続する
; 409  :             c = _SUBTRUCT_UNIT_DIV(c, *up, 0, up);

	mov	eax, DWORD PTR [rdx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	cl, -1
	sbb	eax, 0
	mov	DWORD PTR [rdx], eax
	setb	cl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 410  :             ++up;

	add	rdx, 4

; 411  :             --u_count;

	sub	r8, 1
	jne	SHORT $LL2@DoBorrow
$LN14@DoBorrow:

; 389  :         {
; 390  :             // u の最上位まで達してしまった場合
; 391  : 
; 392  :             if (c)

	test	cl, cl
	je	SHORT $LN8@DoBorrow

; 393  :             {
; 394  :                 // かつそれでも桁借りを行う必要がある場合
; 395  : 
; 396  :                 // 減算結果が負になってしまったので呼び出し元に通知する。
; 397  :                 return (TRUE);

	mov	eax, 1

; 419  :         }
; 420  :     }
; 421  : }

	ret	0
$LN8@DoBorrow:

; 412  :         }
; 413  :         else
; 414  :         {
; 415  :             // u の最上位に達しておらず、かつボローが立っていない場合
; 416  : 
; 417  :             // 桁借りを中断し復帰する。
; 418  :             return (FALSE);

	xor	eax, eax

; 419  :         }
; 420  :     }
; 421  : }

	ret	0
DoBorrow ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT CalculateQ_X
_TEXT	SEGMENT
rh_hi$1 = 48
u_buf$ = 48
rh_mi$2 = 56
v_buf$ = 56
rh_hi$3 = 64
v_buf_len$ = 64
rh_mi$4 = 72
q_index$ = 72
CalculateQ_X PROC					; COMDAT

; 359  : {

	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r14

; 360  :     __UNIT_TYPE u_index = q_index + v_buf_len;
; 361  :     __UNIT_TYPE_DIV uj = u_buf[u_index];
; 362  :     __UNIT_TYPE_DIV uj_1 = u_buf[u_index - 1];
; 363  :     __UNIT_TYPE_DIV uj_2 = u_buf[u_index - 2];
; 364  :     __UNIT_TYPE_DIV v1 = v_buf[v_buf_len - 1];
; 365  :     __UNIT_TYPE_DIV v2 = v_buf[v_buf_len - 2];

	mov	r10d, DWORD PTR [rdx+r8*4-8]
	lea	rax, QWORD PTR [r8+r9]
	mov	r9d, DWORD PTR [rcx+rax*4]
	mov	ebx, DWORD PTR [rcx+rax*4-4]
	mov	edi, DWORD PTR [rcx+rax*4-8]
	mov	eax, DWORD PTR [rdx+r8*4-4]
	mov	ebp, eax

; 243  :     if (uj == v1)

	cmp	r9d, eax
	jne	SHORT $LN6@CalculateQ

; 244  :         return (-1);

	mov	r8d, -1					; ffffffffH
	jmp	SHORT $LN5@CalculateQ
$LN6@CalculateQ:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 310  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock inc DWORD PTR statistics_info+12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	rax, r9

; 384  :             return ((_UINT32_T)(t / v));

	xor	edx, edx

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	shl	rax, 32					; 00000020H
	or	rax, rbx

; 384  :             return ((_UINT32_T)(t / v));

	div	rbp
	mov	r8, rax
$LN5@CalculateQ:

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, r8d
	mov	rsi, r10
	imul	rsi, rdx
	imul	rdx, rbp

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	mov	eax, ebx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	r14d, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r11, rsi
	shr	r11, 32					; 00000020H

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sub	eax, edx
	mov	DWORD PTR rh_mi$2[rsp], eax
	mov	eax, r9d
	setb	cl

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	shr	rdx, 32					; 00000020H

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	cl, -1
	sbb	eax, edx
	mov	DWORD PTR rh_hi$1[rsp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, r14d
	lock xadd DWORD PTR statistics_info+4, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 310  :     if (rh_hi > 0)

	cmp	DWORD PTR rh_hi$1[rsp], 0
	ja	SHORT $LN74@CalculateQ

; 311  :     {
; 312  : #ifdef DO_TRACE
; 313  :         ReportVar("result", 0);
; 314  : #endif
; 315  :         return (FALSE);
; 316  :     }
; 317  :     else if (lh_mi > rh_mi)

	cmp	r11d, DWORD PTR rh_mi$2[rsp]
	ja	SHORT $LN2@CalculateQ

; 318  :     {
; 319  : #ifdef DO_TRACE
; 320  :         ReportVar("result", 1);
; 321  : #endif
; 322  :         return (TRUE);
; 323  :     }
; 324  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN74@CalculateQ

; 366  :     __UNIT_TYPE_DIV q_ = AsumeQ_(uj, uj_1, v1);
; 367  : #ifdef DO_TRACE
; 368  :     ReportLabel("q_ の計算");
; 369  :     ReportVar("uj", uj);
; 370  :     ReportVar("uj1", uj_1);
; 371  :     ReportVar("v1", v1);
; 372  :     ReportVar("q_", q_);
; 373  : #endif
; 374  :     if (!CheckQ_X(q_, uj, uj_1, uj_2, v1, v2))

	cmp	esi, edi
	jbe	SHORT $LN74@CalculateQ
$LN2@CalculateQ:

; 375  :         return (q_);
; 376  :     --q_;

	dec	r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	ecx, r8d
	imul	r10, rcx
	imul	rcx, rbp

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	rdx, r10
	shr	rdx, 32					; 00000020H

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sub	ebx, ecx
	mov	DWORD PTR rh_mi$4[rsp], ebx
	setb	al

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	shr	rcx, 32					; 00000020H

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	al, -1
	sbb	r9d, ecx
	mov	DWORD PTR rh_hi$3[rsp], r9d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock xadd DWORD PTR statistics_info+4, r14d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 310  :     if (rh_hi > 0)

	cmp	DWORD PTR rh_hi$3[rsp], 0
	ja	SHORT $LN74@CalculateQ

; 311  :     {
; 312  : #ifdef DO_TRACE
; 313  :         ReportVar("result", 0);
; 314  : #endif
; 315  :         return (FALSE);
; 316  :     }
; 317  :     else if (lh_mi > rh_mi)

	cmp	edx, DWORD PTR rh_mi$4[rsp]
	ja	SHORT $LN3@CalculateQ

; 318  :     {
; 319  : #ifdef DO_TRACE
; 320  :         ReportVar("result", 1);
; 321  : #endif
; 322  :         return (TRUE);
; 323  :     }
; 324  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN74@CalculateQ

; 377  :     if (!CheckQ_X(q_, uj, uj_1, uj_2, v1, v2))

	cmp	r10d, edi
	jbe	SHORT $LN74@CalculateQ
$LN3@CalculateQ:

; 378  :         return (q_);
; 379  :     --q_;

	lea	eax, DWORD PTR [r8-1]

; 380  :     return (q_);
; 381  : }

	pop	r14
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
$LN74@CalculateQ:
	mov	eax, r8d
	pop	r14
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
CalculateQ_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT CalculateQ_
_TEXT	SEGMENT
rh_hi$1 = 48
u_buf$ = 48
rh_mi$2 = 56
v_buf$ = 56
rh_hi$3 = 64
v_buf_len$ = 64
rh_mi$4 = 72
q_index$ = 72
CalculateQ_ PROC					; COMDAT

; 341  : {

	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r14

; 342  :     __UNIT_TYPE u_index = q_index + v_buf_len;
; 343  :     __UNIT_TYPE_DIV uj = u_buf[u_index];
; 344  :     __UNIT_TYPE_DIV uj_1 = u_buf[u_index - 1];
; 345  :     __UNIT_TYPE_DIV uj_2 = u_buf[u_index - 2];
; 346  :     __UNIT_TYPE_DIV v1 = v_buf[v_buf_len - 1];
; 347  :     __UNIT_TYPE_DIV v2 = v_buf[v_buf_len - 2];

	mov	r10d, DWORD PTR [rdx+r8*4-8]
	lea	rax, QWORD PTR [r8+r9]
	mov	r9d, DWORD PTR [rcx+rax*4]
	mov	ebx, DWORD PTR [rcx+rax*4-4]
	mov	edi, DWORD PTR [rcx+rax*4-8]
	mov	eax, DWORD PTR [rdx+r8*4-4]
	mov	ebp, eax

; 243  :     if (uj == v1)

	cmp	r9d, eax
	jne	SHORT $LN6@CalculateQ

; 244  :         return (-1);

	mov	r8d, -1					; ffffffffH
	jmp	SHORT $LN5@CalculateQ
$LN6@CalculateQ:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 310  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock inc DWORD PTR statistics_info+12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	rax, r9

; 384  :             return ((_UINT32_T)(t / v));

	xor	edx, edx

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	shl	rax, 32					; 00000020H
	or	rax, rbx

; 384  :             return ((_UINT32_T)(t / v));

	div	rbp
	mov	r8, rax
$LN5@CalculateQ:

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, r8d
	mov	rsi, r10
	imul	rsi, rdx
	imul	rdx, rbp

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	mov	eax, ebx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	r14d, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r11, rsi
	shr	r11, 32					; 00000020H

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sub	eax, edx
	mov	DWORD PTR rh_mi$2[rsp], eax
	mov	eax, r9d
	setb	cl

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	shr	rdx, 32					; 00000020H

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	cl, -1
	sbb	eax, edx
	mov	DWORD PTR rh_hi$1[rsp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, r14d
	lock xadd DWORD PTR statistics_info+4, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 273  :     if (rh_hi > 0)

	cmp	DWORD PTR rh_hi$1[rsp], 0
	ja	SHORT $LN74@CalculateQ

; 274  :         return (FALSE);
; 275  :     else if (lh_mi > rh_mi)

	cmp	r11d, DWORD PTR rh_mi$2[rsp]
	ja	SHORT $LN2@CalculateQ

; 276  :         return (TRUE);
; 277  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN74@CalculateQ

; 348  :     __UNIT_TYPE_DIV q_ = AsumeQ_(uj, uj_1, v1);
; 349  :     if (!CheckQ_(q_, uj, uj_1, uj_2, v1, v2))

	cmp	esi, edi
	jbe	SHORT $LN74@CalculateQ
$LN2@CalculateQ:

; 350  :         return (q_);
; 351  :     --q_;

	dec	r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	ecx, r8d
	imul	r10, rcx
	imul	rcx, rbp

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	rdx, r10
	shr	rdx, 32					; 00000020H

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sub	ebx, ecx
	mov	DWORD PTR rh_mi$4[rsp], ebx
	setb	al

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	shr	rcx, 32					; 00000020H

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	al, -1
	sbb	r9d, ecx
	mov	DWORD PTR rh_hi$3[rsp], r9d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock xadd DWORD PTR statistics_info+4, r14d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 273  :     if (rh_hi > 0)

	cmp	DWORD PTR rh_hi$3[rsp], 0
	ja	SHORT $LN74@CalculateQ

; 274  :         return (FALSE);
; 275  :     else if (lh_mi > rh_mi)

	cmp	edx, DWORD PTR rh_mi$4[rsp]
	ja	SHORT $LN3@CalculateQ

; 276  :         return (TRUE);
; 277  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN74@CalculateQ

; 352  :     if (!CheckQ_(q_, uj, uj_1, uj_2, v1, v2))

	cmp	r10d, edi
	jbe	SHORT $LN74@CalculateQ
$LN3@CalculateQ:

; 353  :         return (q_);
; 354  :     --q_;

	lea	eax, DWORD PTR [r8-1]

; 355  :     return (q_);
; 356  : }

	pop	r14
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
$LN74@CalculateQ:
	mov	eax, r8d
	pop	r14
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
CalculateQ_ ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT CheckQ_X
_TEXT	SEGMENT
q_$ = 8
uj$ = 16
uj_1$ = 24
uj_2$ = 32
rh_mi$ = 40
v1$ = 40
rh_hi$ = 48
v2$ = 48
CheckQ_X PROC						; COMDAT
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	r11d, DWORD PTR v2$[rsp]
	mov	eax, ecx
	mov	ecx, DWORD PTR v1$[rsp]
	imul	r11, rax
	imul	rcx, rax

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, r11
	shr	r10, 32					; 00000020H

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sub	r8d, ecx
	mov	DWORD PTR rh_mi$[rsp], r8d
	setb	al

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	shr	rcx, 32					; 00000020H

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	al, -1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	edx, ecx
	mov	DWORD PTR rh_hi$[rsp], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock xadd DWORD PTR statistics_info+4, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 310  :     if (rh_hi > 0)

	cmp	DWORD PTR rh_hi$[rsp], 0
	ja	SHORT $LN27@CheckQ_X

; 311  :     {
; 312  : #ifdef DO_TRACE
; 313  :         ReportVar("result", 0);
; 314  : #endif
; 315  :         return (FALSE);
; 316  :     }
; 317  :     else if (lh_mi > rh_mi)

	cmp	r10d, DWORD PTR rh_mi$[rsp]
	jbe	SHORT $LN6@CheckQ_X

; 318  :     {
; 319  : #ifdef DO_TRACE
; 320  :         ReportVar("result", 1);
; 321  : #endif
; 322  :         return (TRUE);

	mov	eax, 1

; 337  :     }
; 338  : }

	ret	0
$LN6@CheckQ_X:

; 323  :     }
; 324  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN27@CheckQ_X

; 330  :     }
; 331  :     else
; 332  :     {
; 333  : #ifdef DO_TRACE
; 334  :         ReportVar("result", lh_lo > rh_lo);
; 335  : #endif
; 336  :         return (lh_lo > rh_lo);

	xor	eax, eax
	cmp	r11d, r9d
	seta	al

; 337  :     }
; 338  : }

	ret	0
$LN27@CheckQ_X:

; 325  :     {
; 326  : #ifdef DO_TRACE
; 327  :         ReportVar("result", 0);
; 328  : #endif
; 329  :         return (FALSE);

	xor	eax, eax

; 337  :     }
; 338  : }

	ret	0
CheckQ_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT CheckQ_
_TEXT	SEGMENT
q_$ = 8
uj$ = 16
uj_1$ = 24
uj_2$ = 32
rh_mi$ = 40
v1$ = 40
rh_hi$ = 48
v2$ = 48
CheckQ_	PROC						; COMDAT
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	r11d, DWORD PTR v2$[rsp]
	mov	eax, ecx
	mov	ecx, DWORD PTR v1$[rsp]
	imul	r11, rax
	imul	rcx, rax

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, r11
	shr	r10, 32					; 00000020H

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sub	r8d, ecx
	mov	DWORD PTR rh_mi$[rsp], r8d
	setb	al

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	shr	rcx, 32					; 00000020H

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	al, -1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 275  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	edx, ecx
	mov	DWORD PTR rh_hi$[rsp], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock xadd DWORD PTR statistics_info+4, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 273  :     if (rh_hi > 0)

	cmp	DWORD PTR rh_hi$[rsp], 0
	ja	SHORT $LN27@CheckQ_

; 274  :         return (FALSE);
; 275  :     else if (lh_mi > rh_mi)

	cmp	r10d, DWORD PTR rh_mi$[rsp]
	jbe	SHORT $LN6@CheckQ_

; 276  :         return (TRUE);

	mov	eax, 1

; 281  : }

	ret	0
$LN6@CheckQ_:

; 277  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN27@CheckQ_

; 279  :     else
; 280  :         return (lh_lo > rh_lo);

	xor	eax, eax
	cmp	r11d, r9d
	seta	al

; 281  : }

	ret	0
$LN27@CheckQ_:

; 278  :         return (FALSE);

	xor	eax, eax

; 281  : }

	ret	0
CheckQ_	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT AsumeQ_
_TEXT	SEGMENT
uj$ = 8
uj_1$ = 16
v1$ = 24
AsumeQ_	PROC						; COMDAT

; 243  :     if (uj == v1)

	cmp	ecx, r8d
	jne	SHORT $LN2@AsumeQ_

; 244  :         return (-1);

	mov	eax, -1					; ffffffffH

; 254  : }

	ret	0
$LN2@AsumeQ_:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 310  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock inc DWORD PTR statistics_info+12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, ecx
	mov	ecx, edx

; 384  :             return ((_UINT32_T)(t / v));

	xor	edx, edx

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	shl	rax, 32					; 00000020H
	or	rax, rcx

; 384  :             return ((_UINT32_T)(t / v));

	mov	ecx, r8d
	div	rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 254  : }

	ret	0
AsumeQ_	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_2WORDS_ADCX_DIV
_TEXT	SEGMENT
c$ = 8
xp$ = 16
yp$ = 24
zp$ = 32
_ADD_2WORDS_ADCX_DIV PROC				; COMDAT

; 4544 : #ifdef _MSC_VER
; 4545 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [rdx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	cl, -1
	adcx	eax, DWORD PTR [r8]
	mov	DWORD PTR [r9], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4546 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	ecx, DWORD PTR [rdx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	ecx, DWORD PTR [r8+4]
	mov	DWORD PTR [r9+4], ecx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4583 : }

	ret	0
_ADD_2WORDS_ADCX_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_2WORDS_ADC_DIV
_TEXT	SEGMENT
c$ = 8
xp$ = 16
yp$ = 24
zp$ = 32
_ADD_2WORDS_ADC_DIV PROC				; COMDAT

; 4501 : #ifdef _MSC_VER
; 4502 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [rdx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	cl, -1
	adc	eax, DWORD PTR [r8]
	mov	DWORD PTR [r9], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4503 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	ecx, DWORD PTR [rdx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+4]
	mov	DWORD PTR [r9+4], ecx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4540 : }

	ret	0
_ADD_2WORDS_ADC_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_4WORDS_ADCX_DIV
_TEXT	SEGMENT
c$ = 8
xp$ = 16
yp$ = 24
zp$ = 32
_ADD_4WORDS_ADCX_DIV PROC				; COMDAT

; 4158 : #ifdef _MSC_VER
; 4159 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [rdx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	cl, -1
	adcx	eax, DWORD PTR [r8]
	mov	DWORD PTR [r9], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4160 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [rdx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+4]
	mov	DWORD PTR [r9+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4161 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [rdx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+8]
	mov	DWORD PTR [r9+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4162 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	ecx, DWORD PTR [rdx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	ecx, DWORD PTR [r8+12]
	mov	DWORD PTR [r9+12], ecx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4211 : }

	ret	0
_ADD_4WORDS_ADCX_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_4WORDS_ADC_DIV
_TEXT	SEGMENT
c$ = 8
xp$ = 16
yp$ = 24
zp$ = 32
_ADD_4WORDS_ADC_DIV PROC				; COMDAT

; 4101 : #ifdef _MSC_VER
; 4102 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [rdx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	cl, -1
	adc	eax, DWORD PTR [r8]
	mov	DWORD PTR [r9], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4103 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [rdx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+4]
	mov	DWORD PTR [r9+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4104 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [rdx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+8]
	mov	DWORD PTR [r9+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4105 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	ecx, DWORD PTR [rdx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+12]
	mov	DWORD PTR [r9+12], ecx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4154 : }

	ret	0
_ADD_4WORDS_ADC_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_8WORDS_ADCX_DIV
_TEXT	SEGMENT
c$ = 8
xp$ = 16
yp$ = 24
zp$ = 32
_ADD_8WORDS_ADCX_DIV PROC				; COMDAT

; 3618 : #ifdef _MSC_VER
; 3619 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [rdx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	cl, -1
	adcx	eax, DWORD PTR [r8]
	mov	DWORD PTR [r9], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3620 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [rdx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+4]
	mov	DWORD PTR [r9+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3621 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [rdx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+8]
	mov	DWORD PTR [r9+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3622 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [rdx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+12]
	mov	DWORD PTR [r9+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3623 :     c = _ADDX_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [rdx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+16]
	mov	DWORD PTR [r9+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3624 :     c = _ADDX_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [rdx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+20]
	mov	DWORD PTR [r9+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3625 :     c = _ADDX_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [rdx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+24]
	mov	DWORD PTR [r9+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3626 :     c = _ADDX_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	ecx, DWORD PTR [rdx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	ecx, DWORD PTR [r8+28]
	mov	DWORD PTR [r9+28], ecx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3699 : }

	ret	0
_ADD_8WORDS_ADCX_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_8WORDS_ADC_DIV
_TEXT	SEGMENT
c$ = 8
xp$ = 16
yp$ = 24
zp$ = 32
_ADD_8WORDS_ADC_DIV PROC				; COMDAT

; 3533 : #ifdef _MSC_VER
; 3534 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [rdx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	cl, -1
	adc	eax, DWORD PTR [r8]
	mov	DWORD PTR [r9], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3535 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [rdx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+4]
	mov	DWORD PTR [r9+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3536 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [rdx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+8]
	mov	DWORD PTR [r9+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3537 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [rdx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+12]
	mov	DWORD PTR [r9+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3538 :     c = _ADD_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [rdx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+16]
	mov	DWORD PTR [r9+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3539 :     c = _ADD_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [rdx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+20]
	mov	DWORD PTR [r9+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3540 :     c = _ADD_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [rdx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+24]
	mov	DWORD PTR [r9+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3541 :     c = _ADD_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	ecx, DWORD PTR [rdx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+28]
	mov	DWORD PTR [r9+28], ecx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3614 : }

	ret	0
_ADD_8WORDS_ADC_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_16WORDS_ADCX_DIV
_TEXT	SEGMENT
c$ = 8
xp$ = 16
yp$ = 24
zp$ = 32
_ADD_16WORDS_ADCX_DIV PROC				; COMDAT

; 2770 : #ifdef _MSC_VER
; 2771 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [rdx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	cl, -1
	adcx	eax, DWORD PTR [r8]
	mov	DWORD PTR [r9], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2772 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [rdx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+4]
	mov	DWORD PTR [r9+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2773 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [rdx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+8]
	mov	DWORD PTR [r9+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2774 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [rdx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+12]
	mov	DWORD PTR [r9+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2775 :     c = _ADDX_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [rdx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+16]
	mov	DWORD PTR [r9+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2776 :     c = _ADDX_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [rdx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+20]
	mov	DWORD PTR [r9+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2777 :     c = _ADDX_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [rdx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+24]
	mov	DWORD PTR [r9+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2778 :     c = _ADDX_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, DWORD PTR [rdx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+28]
	mov	DWORD PTR [r9+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2779 :     c = _ADDX_UNIT_DIV(c, xp[8], yp[8], &zp[8]);

	mov	eax, DWORD PTR [rdx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+32]
	mov	DWORD PTR [r9+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2780 :     c = _ADDX_UNIT_DIV(c, xp[9], yp[9], &zp[9]);

	mov	eax, DWORD PTR [rdx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+36]
	mov	DWORD PTR [r9+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2781 :     c = _ADDX_UNIT_DIV(c, xp[10], yp[10], &zp[10]);

	mov	eax, DWORD PTR [rdx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+40]
	mov	DWORD PTR [r9+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2782 :     c = _ADDX_UNIT_DIV(c, xp[11], yp[11], &zp[11]);

	mov	eax, DWORD PTR [rdx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+44]
	mov	DWORD PTR [r9+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2783 :     c = _ADDX_UNIT_DIV(c, xp[12], yp[12], &zp[12]);

	mov	eax, DWORD PTR [rdx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+48]
	mov	DWORD PTR [r9+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2784 :     c = _ADDX_UNIT_DIV(c, xp[13], yp[13], &zp[13]);

	mov	eax, DWORD PTR [rdx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+52]
	mov	DWORD PTR [r9+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2785 :     c = _ADDX_UNIT_DIV(c, xp[14], yp[14], &zp[14]);

	mov	eax, DWORD PTR [rdx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+56]
	mov	DWORD PTR [r9+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2786 :     c = _ADDX_UNIT_DIV(c, xp[15], yp[15], &zp[15]);

	mov	ecx, DWORD PTR [rdx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	ecx, DWORD PTR [r8+60]
	mov	DWORD PTR [r9+60], ecx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2907 : }

	ret	0
_ADD_16WORDS_ADCX_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_16WORDS_ADC_DIV
_TEXT	SEGMENT
c$ = 8
xp$ = 16
yp$ = 24
zp$ = 32
_ADD_16WORDS_ADC_DIV PROC				; COMDAT

; 2629 : #ifdef _MSC_VER
; 2630 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [rdx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	cl, -1
	adc	eax, DWORD PTR [r8]
	mov	DWORD PTR [r9], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2631 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [rdx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+4]
	mov	DWORD PTR [r9+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2632 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [rdx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+8]
	mov	DWORD PTR [r9+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2633 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [rdx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+12]
	mov	DWORD PTR [r9+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2634 :     c = _ADD_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [rdx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+16]
	mov	DWORD PTR [r9+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2635 :     c = _ADD_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [rdx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+20]
	mov	DWORD PTR [r9+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2636 :     c = _ADD_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [rdx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+24]
	mov	DWORD PTR [r9+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2637 :     c = _ADD_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, DWORD PTR [rdx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+28]
	mov	DWORD PTR [r9+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2638 :     c = _ADD_UNIT_DIV(c, xp[8], yp[8], &zp[8]);

	mov	eax, DWORD PTR [rdx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+32]
	mov	DWORD PTR [r9+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2639 :     c = _ADD_UNIT_DIV(c, xp[9], yp[9], &zp[9]);

	mov	eax, DWORD PTR [rdx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+36]
	mov	DWORD PTR [r9+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2640 :     c = _ADD_UNIT_DIV(c, xp[10], yp[10], &zp[10]);

	mov	eax, DWORD PTR [rdx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+40]
	mov	DWORD PTR [r9+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2641 :     c = _ADD_UNIT_DIV(c, xp[11], yp[11], &zp[11]);

	mov	eax, DWORD PTR [rdx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+44]
	mov	DWORD PTR [r9+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2642 :     c = _ADD_UNIT_DIV(c, xp[12], yp[12], &zp[12]);

	mov	eax, DWORD PTR [rdx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+48]
	mov	DWORD PTR [r9+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2643 :     c = _ADD_UNIT_DIV(c, xp[13], yp[13], &zp[13]);

	mov	eax, DWORD PTR [rdx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+52]
	mov	DWORD PTR [r9+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2644 :     c = _ADD_UNIT_DIV(c, xp[14], yp[14], &zp[14]);

	mov	eax, DWORD PTR [rdx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+56]
	mov	DWORD PTR [r9+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2645 :     c = _ADD_UNIT_DIV(c, xp[15], yp[15], &zp[15]);

	mov	ecx, DWORD PTR [rdx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+60]
	mov	DWORD PTR [r9+60], ecx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2766 : }

	ret	0
_ADD_16WORDS_ADC_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_32WORDS_ADCX_DIV
_TEXT	SEGMENT
c$ = 8
xp$ = 16
yp$ = 24
zp$ = 32
_ADD_32WORDS_ADCX_DIV PROC				; COMDAT

; 1306 : #ifdef _MSC_VER
; 1307 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [rdx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	cl, -1
	adcx	eax, DWORD PTR [r8]
	mov	DWORD PTR [r9], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1308 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [rdx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+4]
	mov	DWORD PTR [r9+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1309 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [rdx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+8]
	mov	DWORD PTR [r9+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1310 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [rdx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+12]
	mov	DWORD PTR [r9+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1311 :     c = _ADDX_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [rdx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+16]
	mov	DWORD PTR [r9+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1312 :     c = _ADDX_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [rdx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+20]
	mov	DWORD PTR [r9+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1313 :     c = _ADDX_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [rdx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+24]
	mov	DWORD PTR [r9+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1314 :     c = _ADDX_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, DWORD PTR [rdx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+28]
	mov	DWORD PTR [r9+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1315 :     c = _ADDX_UNIT_DIV(c, xp[8], yp[8], &zp[8]);

	mov	eax, DWORD PTR [rdx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+32]
	mov	DWORD PTR [r9+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1316 :     c = _ADDX_UNIT_DIV(c, xp[9], yp[9], &zp[9]);

	mov	eax, DWORD PTR [rdx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+36]
	mov	DWORD PTR [r9+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1317 :     c = _ADDX_UNIT_DIV(c, xp[10], yp[10], &zp[10]);

	mov	eax, DWORD PTR [rdx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+40]
	mov	DWORD PTR [r9+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1318 :     c = _ADDX_UNIT_DIV(c, xp[11], yp[11], &zp[11]);

	mov	eax, DWORD PTR [rdx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+44]
	mov	DWORD PTR [r9+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1319 :     c = _ADDX_UNIT_DIV(c, xp[12], yp[12], &zp[12]);

	mov	eax, DWORD PTR [rdx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+48]
	mov	DWORD PTR [r9+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1320 :     c = _ADDX_UNIT_DIV(c, xp[13], yp[13], &zp[13]);

	mov	eax, DWORD PTR [rdx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+52]
	mov	DWORD PTR [r9+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1321 :     c = _ADDX_UNIT_DIV(c, xp[14], yp[14], &zp[14]);

	mov	eax, DWORD PTR [rdx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+56]
	mov	DWORD PTR [r9+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1322 :     c = _ADDX_UNIT_DIV(c, xp[15], yp[15], &zp[15]);

	mov	eax, DWORD PTR [rdx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+60]
	mov	DWORD PTR [r9+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1323 :     c = _ADDX_UNIT_DIV(c, xp[16], yp[16], &zp[16]);

	mov	eax, DWORD PTR [rdx+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+64]
	mov	DWORD PTR [r9+64], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1324 :     c = _ADDX_UNIT_DIV(c, xp[17], yp[17], &zp[17]);

	mov	eax, DWORD PTR [rdx+68]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+68]
	mov	DWORD PTR [r9+68], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1325 :     c = _ADDX_UNIT_DIV(c, xp[18], yp[18], &zp[18]);

	mov	eax, DWORD PTR [rdx+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+72]
	mov	DWORD PTR [r9+72], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1326 :     c = _ADDX_UNIT_DIV(c, xp[19], yp[19], &zp[19]);

	mov	eax, DWORD PTR [rdx+76]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+76]
	mov	DWORD PTR [r9+76], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1327 :     c = _ADDX_UNIT_DIV(c, xp[20], yp[20], &zp[20]);

	mov	eax, DWORD PTR [rdx+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+80]
	mov	DWORD PTR [r9+80], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1328 :     c = _ADDX_UNIT_DIV(c, xp[21], yp[21], &zp[21]);

	mov	eax, DWORD PTR [rdx+84]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+84]
	mov	DWORD PTR [r9+84], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1329 :     c = _ADDX_UNIT_DIV(c, xp[22], yp[22], &zp[22]);

	mov	eax, DWORD PTR [rdx+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+88]
	mov	DWORD PTR [r9+88], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1330 :     c = _ADDX_UNIT_DIV(c, xp[23], yp[23], &zp[23]);

	mov	eax, DWORD PTR [rdx+92]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+92]
	mov	DWORD PTR [r9+92], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1331 :     c = _ADDX_UNIT_DIV(c, xp[24], yp[24], &zp[24]);

	mov	eax, DWORD PTR [rdx+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+96]
	mov	DWORD PTR [r9+96], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1332 :     c = _ADDX_UNIT_DIV(c, xp[25], yp[25], &zp[25]);

	mov	eax, DWORD PTR [rdx+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+100]
	mov	DWORD PTR [r9+100], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1333 :     c = _ADDX_UNIT_DIV(c, xp[26], yp[26], &zp[26]);

	mov	eax, DWORD PTR [rdx+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+104]
	mov	DWORD PTR [r9+104], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1334 :     c = _ADDX_UNIT_DIV(c, xp[27], yp[27], &zp[27]);

	mov	eax, DWORD PTR [rdx+108]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+108]
	mov	DWORD PTR [r9+108], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1335 :     c = _ADDX_UNIT_DIV(c, xp[28], yp[28], &zp[28]);

	mov	eax, DWORD PTR [rdx+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+112]
	mov	DWORD PTR [r9+112], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1336 :     c = _ADDX_UNIT_DIV(c, xp[29], yp[29], &zp[29]);

	mov	eax, DWORD PTR [rdx+116]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+116]
	mov	DWORD PTR [r9+116], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1337 :     c = _ADDX_UNIT_DIV(c, xp[30], yp[30], &zp[30]);

	mov	eax, DWORD PTR [rdx+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+120]
	mov	DWORD PTR [r9+120], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1338 :     c = _ADDX_UNIT_DIV(c, xp[31], yp[31], &zp[31]);

	mov	ecx, DWORD PTR [rdx+124]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 247  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	ecx, DWORD PTR [r8+124]
	mov	DWORD PTR [r9+124], ecx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1555 : }

	ret	0
_ADD_32WORDS_ADCX_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_32WORDS_ADC_DIV
_TEXT	SEGMENT
c$ = 8
xp$ = 16
yp$ = 24
zp$ = 32
_ADD_32WORDS_ADC_DIV PROC				; COMDAT

; 1053 : #ifdef _MSC_VER
; 1054 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [rdx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	cl, -1
	adc	eax, DWORD PTR [r8]
	mov	DWORD PTR [r9], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1055 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [rdx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+4]
	mov	DWORD PTR [r9+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1056 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [rdx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+8]
	mov	DWORD PTR [r9+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1057 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [rdx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+12]
	mov	DWORD PTR [r9+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1058 :     c = _ADD_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [rdx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+16]
	mov	DWORD PTR [r9+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1059 :     c = _ADD_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [rdx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+20]
	mov	DWORD PTR [r9+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1060 :     c = _ADD_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [rdx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+24]
	mov	DWORD PTR [r9+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1061 :     c = _ADD_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, DWORD PTR [rdx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+28]
	mov	DWORD PTR [r9+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1062 :     c = _ADD_UNIT_DIV(c, xp[8], yp[8], &zp[8]);

	mov	eax, DWORD PTR [rdx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+32]
	mov	DWORD PTR [r9+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1063 :     c = _ADD_UNIT_DIV(c, xp[9], yp[9], &zp[9]);

	mov	eax, DWORD PTR [rdx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+36]
	mov	DWORD PTR [r9+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1064 :     c = _ADD_UNIT_DIV(c, xp[10], yp[10], &zp[10]);

	mov	eax, DWORD PTR [rdx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+40]
	mov	DWORD PTR [r9+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1065 :     c = _ADD_UNIT_DIV(c, xp[11], yp[11], &zp[11]);

	mov	eax, DWORD PTR [rdx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+44]
	mov	DWORD PTR [r9+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1066 :     c = _ADD_UNIT_DIV(c, xp[12], yp[12], &zp[12]);

	mov	eax, DWORD PTR [rdx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+48]
	mov	DWORD PTR [r9+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1067 :     c = _ADD_UNIT_DIV(c, xp[13], yp[13], &zp[13]);

	mov	eax, DWORD PTR [rdx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+52]
	mov	DWORD PTR [r9+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1068 :     c = _ADD_UNIT_DIV(c, xp[14], yp[14], &zp[14]);

	mov	eax, DWORD PTR [rdx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+56]
	mov	DWORD PTR [r9+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1069 :     c = _ADD_UNIT_DIV(c, xp[15], yp[15], &zp[15]);

	mov	eax, DWORD PTR [rdx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+60]
	mov	DWORD PTR [r9+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1070 :     c = _ADD_UNIT_DIV(c, xp[16], yp[16], &zp[16]);

	mov	eax, DWORD PTR [rdx+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+64]
	mov	DWORD PTR [r9+64], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1071 :     c = _ADD_UNIT_DIV(c, xp[17], yp[17], &zp[17]);

	mov	eax, DWORD PTR [rdx+68]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+68]
	mov	DWORD PTR [r9+68], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1072 :     c = _ADD_UNIT_DIV(c, xp[18], yp[18], &zp[18]);

	mov	eax, DWORD PTR [rdx+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+72]
	mov	DWORD PTR [r9+72], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1073 :     c = _ADD_UNIT_DIV(c, xp[19], yp[19], &zp[19]);

	mov	eax, DWORD PTR [rdx+76]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+76]
	mov	DWORD PTR [r9+76], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1074 :     c = _ADD_UNIT_DIV(c, xp[20], yp[20], &zp[20]);

	mov	eax, DWORD PTR [rdx+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+80]
	mov	DWORD PTR [r9+80], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1075 :     c = _ADD_UNIT_DIV(c, xp[21], yp[21], &zp[21]);

	mov	eax, DWORD PTR [rdx+84]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+84]
	mov	DWORD PTR [r9+84], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1076 :     c = _ADD_UNIT_DIV(c, xp[22], yp[22], &zp[22]);

	mov	eax, DWORD PTR [rdx+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+88]
	mov	DWORD PTR [r9+88], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1077 :     c = _ADD_UNIT_DIV(c, xp[23], yp[23], &zp[23]);

	mov	eax, DWORD PTR [rdx+92]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+92]
	mov	DWORD PTR [r9+92], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1078 :     c = _ADD_UNIT_DIV(c, xp[24], yp[24], &zp[24]);

	mov	eax, DWORD PTR [rdx+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+96]
	mov	DWORD PTR [r9+96], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1079 :     c = _ADD_UNIT_DIV(c, xp[25], yp[25], &zp[25]);

	mov	eax, DWORD PTR [rdx+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+100]
	mov	DWORD PTR [r9+100], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1080 :     c = _ADD_UNIT_DIV(c, xp[26], yp[26], &zp[26]);

	mov	eax, DWORD PTR [rdx+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+104]
	mov	DWORD PTR [r9+104], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1081 :     c = _ADD_UNIT_DIV(c, xp[27], yp[27], &zp[27]);

	mov	eax, DWORD PTR [rdx+108]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+108]
	mov	DWORD PTR [r9+108], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1082 :     c = _ADD_UNIT_DIV(c, xp[28], yp[28], &zp[28]);

	mov	eax, DWORD PTR [rdx+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+112]
	mov	DWORD PTR [r9+112], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1083 :     c = _ADD_UNIT_DIV(c, xp[29], yp[29], &zp[29]);

	mov	eax, DWORD PTR [rdx+116]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+116]
	mov	DWORD PTR [r9+116], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1084 :     c = _ADD_UNIT_DIV(c, xp[30], yp[30], &zp[30]);

	mov	eax, DWORD PTR [rdx+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+120]
	mov	DWORD PTR [r9+120], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1085 :     c = _ADD_UNIT_DIV(c, xp[31], yp[31], &zp[31]);

	mov	ecx, DWORD PTR [rdx+124]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 219  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+124]
	mov	DWORD PTR [r9+124], ecx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1302 : }

	ret	0
_ADD_32WORDS_ADC_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _LZCNT_ALT_UNIT_DIV
_TEXT	SEGMENT
x$ = 8
_LZCNT_ALT_UNIT_DIV PROC				; COMDAT

; 652  :         if (x == 0)

	test	ecx, ecx
	jne	SHORT $LN2@LZCNT_ALT_

; 653  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 677  :     }

	ret	0
$LN2@LZCNT_ALT_:

; 654  : #ifdef _M_IX86
; 655  :         _UINT32_T pos;
; 656  : #ifdef _MSC_VER
; 657  :         _BitScanReverse(&pos, x);
; 658  : #elif defined(__GNUC__)
; 659  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 660  : #else
; 661  : #error unknown compiler
; 662  : #endif
; 663  : #elif defined(_M_X64)
; 664  : #ifdef _MSC_VER
; 665  :         _UINT32_T pos;
; 666  :         _BitScanReverse(&pos, x);

	bsr	ecx, ecx

; 667  : #elif defined(__GNUC__)
; 668  :         _UINT64_T pos;
; 669  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 670  : #else
; 671  : #error unknown compiler
; 672  : #endif
; 673  : #else
; 674  : #error unknown platform
; 675  : #endif
; 676  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31
	sub	eax, ecx

; 677  :     }

	ret	0
_LZCNT_ALT_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _LZCNT_ALT_UNIT
_TEXT	SEGMENT
x$ = 8
_LZCNT_ALT_UNIT PROC					; COMDAT

; 623  :         if (x == 0)

	test	rcx, rcx
	jne	SHORT $LN2@LZCNT_ALT_

; 624  :             return (sizeof(x) * 8);

	mov	eax, 64					; 00000040H

; 648  :     }

	ret	0
$LN2@LZCNT_ALT_:

; 625  : #ifdef _M_IX86
; 626  :         _UINT32_T pos;
; 627  : #ifdef _MSC_VER
; 628  :         _BitScanReverse(&pos, x);
; 629  : #elif defined(__GNUC__)
; 630  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 631  : #else
; 632  : #error unknown compiler
; 633  : #endif
; 634  : #elif defined(_M_X64)
; 635  : #ifdef _MSC_VER
; 636  :         _UINT32_T pos;
; 637  :         _BitScanReverse64(&pos, x);

	bsr	rcx, rcx

; 638  : #elif defined(__GNUC__)
; 639  :         _UINT64_T pos;
; 640  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 641  : #else
; 642  : #error unknown compiler
; 643  : #endif
; 644  : #else
; 645  : #error unknown platform
; 646  : #endif
; 647  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 63					; 0000003fH
	sub	eax, ecx

; 648  :     }

	ret	0
_LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _LZCNT_ALT_32
_TEXT	SEGMENT
x$ = 8
_LZCNT_ALT_32 PROC					; COMDAT

; 590  :         if (x == 0)

	test	ecx, ecx
	jne	SHORT $LN2@LZCNT_ALT_

; 591  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 601  :     }

	ret	0
$LN2@LZCNT_ALT_:

; 592  :         _UINT32_T pos;
; 593  : #ifdef _MSC_VER
; 594  :         _BitScanReverse(&pos, x);

	bsr	ecx, ecx

; 595  : #elif defined(__GNUC__)
; 596  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 597  : #else
; 598  : #error unknown compiler
; 599  : #endif
; 600  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31
	sub	eax, ecx

; 601  :     }

	ret	0
_LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _DIVREM_SINGLE_UNIT
_TEXT	SEGMENT
r$ = 8
u$ = 16
v$ = 24
q$ = 32
_DIVREM_SINGLE_UNIT PROC				; COMDAT

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, ecx
	mov	ecx, edx

; 422  : #ifdef _MSC_VER
; 423  :         if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))
; 424  :         {
; 425  :             // 64bit/32bitの除算を行う組み込み関数は実装されていない。
; 426  :             _UINT64_T t = _FROMWORDTODWORD(r, u);
; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	shl	rax, 32					; 00000020H
	or	rax, rcx

; 422  : #ifdef _MSC_VER
; 423  :         if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))
; 424  :         {
; 425  :             // 64bit/32bitの除算を行う組み込み関数は実装されていない。
; 426  :             _UINT64_T t = _FROMWORDTODWORD(r, u);
; 427  :             *q = (_UINT32_T)(t / v);

	mov	ecx, r8d
	div	rcx
	mov	DWORD PTR [r9], eax

; 428  :             return ((_UINT32_T)(t % v));

	mov	eax, edx

; 429  :         }
; 430  :         else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))
; 431  :         {
; 432  :             // 以下の理由のため、MSVCでは 128bit/64bit の除算を実装できない。運用で回避すること。
; 433  :             // ・(x64 に限らず) 除算の組み込み関数が用意されていない。
; 434  :             // ・128bit 整数のデータ型が用意されていない。
; 435  :             // ・x64 ではインラインアセンブラがサポートされていない。
; 436  :             *q = 0;
; 437  :             return (0);
; 438  :         }
; 439  :         else
; 440  :         {
; 441  :             // 未知のプラットフォームの場合はとりあえず適当なものを返す。
; 442  :             *q = 0;
; 443  :             return (0);
; 444  :         }
; 445  : #elif defined(__GNUC__)
; 446  :         if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))
; 447  :             __asm__("divl %4": "=a"(*q), "=d"(r) : "0"(u), "1"(r), "rm"(v));
; 448  :         else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))
; 449  :             __asm__("divq %4": "=a"(*q), "=d"(r) : "0"(u), "1"(r), "rm"(v));
; 450  :         else
; 451  :         {
; 452  :             // 未知のプラットフォームの場合はとりあえず適当なものを返す。
; 453  :             *q = 0;
; 454  :             r = 0;
; 455  :         }
; 456  :         return (r);
; 457  : #else
; 458  : #error unknown compiler
; 459  : #endif
; 460  :     }

	ret	0
_DIVREM_SINGLE_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _DIVREM_UNIT
_TEXT	SEGMENT
u_high$ = 8
u_low$ = 16
v$ = 24
r$ = 32
_DIVREM_UNIT PROC					; COMDAT

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, ecx
	mov	ecx, edx

; 378  : #ifdef _MSC_VER
; 379  :         if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))
; 380  :         {
; 381  :             // 64bit/32bitの除算を行う組み込み関数は実装されていない。
; 382  :             _UINT64_T t = _FROMWORDTODWORD(u_high, u_low);
; 383  :             *r = (_UINT32_T)(t % v);

	xor	edx, edx

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	shl	rax, 32					; 00000020H
	or	rax, rcx

; 378  : #ifdef _MSC_VER
; 379  :         if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))
; 380  :         {
; 381  :             // 64bit/32bitの除算を行う組み込み関数は実装されていない。
; 382  :             _UINT64_T t = _FROMWORDTODWORD(u_high, u_low);
; 383  :             *r = (_UINT32_T)(t % v);

	mov	ecx, r8d
	div	rcx
	mov	DWORD PTR [r9], edx

; 384  :             return ((_UINT32_T)(t / v));
; 385  :         }
; 386  :         else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))
; 387  :         {
; 388  :             // 以下の理由のため、MSVCでは 128bit/64bit の除算を実装できない。運用で回避すること。
; 389  :             // ・(x64 に限らず) 除算の組み込み関数が用意されていない。
; 390  :             // ・128bit 整数のデータ型が用意されていない。
; 391  :             // ・x64 ではインラインアセンブラがサポートされていない。
; 392  :             *r = 0;
; 393  :             return (0);
; 394  :         }
; 395  :         else
; 396  :         {
; 397  :             // 未知のプラットフォームの場合はとりあえず適当なものを返す。
; 398  :             *r = 0;
; 399  :             return (0);
; 400  :         }
; 401  : #elif defined(__GNUC__)
; 402  :         __UNIT_TYPE q;
; 403  :         if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))
; 404  :             __asm__("divl %4": "=a"(q), "=d"(*r) : "0"(u_low), "1"(u_high), "rm"(v));
; 405  :         else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))
; 406  :             __asm__("divq %4": "=a"(q), "=d"(*r) : "0"(u_low), "1"(u_high), "rm"(v));
; 407  :         else
; 408  :         {
; 409  :             // 未知のプラットフォームの場合はとりあえず適当なものを返す。
; 410  :             *r = 0;
; 411  :             q = 0;
; 412  :         }
; 413  :         return (q);
; 414  : #else
; 415  : #error unknown compiler
; 416  : #endif
; 417  :     }

	ret	0
_DIVREM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _MULTIPLYX_UNIT_DIV
_TEXT	SEGMENT
u$ = 8
v$ = 16
w_hi$ = 24
_MULTIPLYX_UNIT_DIV PROC				; COMDAT

; 356  : #ifdef _MSC_VER
; 357  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, ecx
	mov	ecx, edx
	imul	rax, rcx

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	rcx, rax
	shr	rcx, 32					; 00000020H
	mov	DWORD PTR [r8], ecx

; 358  : #elif defined(__GNUC__)
; 359  : #ifdef _M_IX86
; 360  :         _UINT32_T w_lo;
; 361  :         __asm__("mulxl %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 362  :         return (w_lo);
; 363  : #elif defined(_M_X64)
; 364  :         _UINT64_T w_lo;
; 365  :         __asm__("mulxq %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 366  :         return (w_lo);
; 367  : #else
; 368  : #error unknown platform
; 369  : #endif
; 370  : #else
; 371  : #error unknown compiler
; 372  : #endif
; 373  :     }

	ret	0
_MULTIPLYX_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _MULTIPLY_UNIT_DIV
_TEXT	SEGMENT
u$ = 8
v$ = 16
w_hi$ = 24
_MULTIPLY_UNIT_DIV PROC					; COMDAT

; 310  : #ifdef _MSC_VER
; 311  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, ecx
	mov	ecx, edx
	imul	rax, rcx

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	rcx, rax
	shr	rcx, 32					; 00000020H
	mov	DWORD PTR [r8], ecx

; 312  : #elif defined(__GNUC__)
; 313  : #ifdef _M_IX86
; 314  :         _UINT32_T w_lo;
; 315  :         __asm__("mull %3": "=a"(w_lo), "=d"(*w_hi) : "0"(u), "rm"(v));
; 316  :         return (w_lo);
; 317  : #elif defined(_M_X64)
; 318  :         return (_umul128(u, v, w_hi));
; 319  : #else
; 320  : #error unknown platform
; 321  : #endif
; 322  : #else
; 323  : #error unknown compiler
; 324  : #endif
; 325  :     }

	ret	0
_MULTIPLY_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _SUBTRUCT_UNIT_DIV
_TEXT	SEGMENT
borrow$ = 8
u$ = 16
v$ = 24
w$ = 32
_SUBTRUCT_UNIT_DIV PROC					; COMDAT

; 274  : #ifdef _MSC_VER
; 275  :         return (_subborrow_u32(borrow, u, v, w));

	add	cl, -1
	sbb	edx, r8d
	mov	DWORD PTR [r9], edx
	setb	al

; 276  : #elif defined(__GNUC__)
; 277  : #ifdef _M_IX86
; 278  :         return (_subborrow_u32(borrow, u, v, w));
; 279  : #elif defined(_M_X64)
; 280  :         return (_subborrow_u64(borrow, u, v, w));
; 281  : #else
; 282  : #error unknown platform
; 283  : #endif
; 284  : #else
; 285  : #error unknown compiler
; 286  : #endif
; 287  :     }

	ret	0
_SUBTRUCT_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ADDX_UNIT_DIV
_TEXT	SEGMENT
carry$ = 8
u$ = 16
v$ = 24
w$ = 32
_ADDX_UNIT_DIV PROC					; COMDAT

; 246  : #ifdef _MSC_VER
; 247  :         return (_addcarryx_u32(carry, u, v, w));

	add	cl, -1
	adcx	edx, r8d
	mov	DWORD PTR [r9], edx
	setb	al

; 248  : #elif defined(__GNUC__)
; 249  : #ifdef _M_IX86
; 250  :         return (_addcarryx_u32(carry, u, v, w));
; 251  : #elif defined(_M_X64)
; 252  :         return (_addcarryx_u64(carry, u, v, w));
; 253  : #else
; 254  : #error unknown platform
; 255  : #endif
; 256  : #else
; 257  : #error unknown compiler
; 258  : #endif
; 259  :     }

	ret	0
_ADDX_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ADD_UNIT_DIV
_TEXT	SEGMENT
carry$ = 8
u$ = 16
v$ = 24
w$ = 32
_ADD_UNIT_DIV PROC					; COMDAT

; 218  : #ifdef _MSC_VER
; 219  :         return (_addcarry_u32(carry, u, v, w));

	add	cl, -1
	adc	edx, r8d
	mov	DWORD PTR [r9], edx
	setb	al

; 220  : #elif defined(__GNUC__)
; 221  : #ifdef _M_IX86
; 222  :         return (_addcarry_u32(carry, u, v, w));
; 223  : #elif defined(_M_X64)
; 224  :         return (_addcarry_u64(carry, u, v, w));
; 225  : #else
; 226  : #error unknown platform
; 227  : #endif
; 228  : #else
; 229  : #error unknown compiler
; 230  : #endif
; 231  :     }

	ret	0
_ADD_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _FROMDWORDTOWORD
_TEXT	SEGMENT
value$ = 8
result_high$ = 16
_FROMDWORDTOWORD PROC					; COMDAT

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	rax, rcx
	shr	rax, 32					; 00000020H
	mov	DWORD PTR [rdx], eax

; 177  :         return ((_UINT32_T)value);

	mov	eax, ecx

; 178  :     }

	ret	0
_FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _FROMWORDTODWORD
_TEXT	SEGMENT
value_high$ = 8
value_low$ = 16
_FROMWORDTODWORD PROC					; COMDAT

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, ecx
	shl	rax, 32					; 00000020H
	mov	ecx, edx
	or	rax, rcx

; 172  :     }

	ret	0
_FROMWORDTODWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _COPY_MEMORY_UNIT_DIV
_TEXT	SEGMENT
d$ = 8
s$ = 16
count$ = 24
_COPY_MEMORY_UNIT_DIV PROC				; COMDAT

; 70   :     {

	mov	QWORD PTR [rsp+8], rsi
	mov	QWORD PTR [rsp+16], rdi
	mov	rdi, rcx

; 71   : #ifdef _M_IX86
; 72   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);
; 73   : #elif defined(_M_X64)
; 74   : #ifdef _MSC_VER
; 75   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	rsi, rdx
	mov	ecx, r8d
	rep movsd

; 76   : #elif defined(__GNUC__)
; 77   :         __movsq(d, s, count);
; 78   : #else
; 79   : #error unknown compiler
; 80   : #endif
; 81   : #else
; 82   : #error unknown platform
; 83   : #endif
; 84   :     }

	mov	rsi, QWORD PTR [rsp+8]
	mov	rdi, QWORD PTR [rsp+16]
	ret	0
_COPY_MEMORY_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _COPY_MEMORY_UNIT
_TEXT	SEGMENT
d$ = 8
s$ = 16
count$ = 24
_COPY_MEMORY_UNIT PROC					; COMDAT

; 59   :     {

	mov	QWORD PTR [rsp+8], rsi
	mov	QWORD PTR [rsp+16], rdi

; 60   : #ifdef _M_IX86
; 61   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);
; 62   : #elif defined(_M_X64)
; 63   :         __movsq(d, s, count);

	mov	rdi, rcx
	mov	rsi, rdx
	mov	rcx, r8
	rep movsq

; 64   : #else
; 65   : #error unknown platform
; 66   : #endif
; 67   :     }

	mov	rsi, QWORD PTR [rsp+8]
	mov	rdi, QWORD PTR [rsp+16]
	ret	0
_COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT AddToMULTI64Counter
_TEXT	SEGMENT
value$ = 8
AddToMULTI64Counter PROC				; COMDAT

; 351  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	lock xadd DWORD PTR statistics_info, ecx

; 352  :     }

	ret	0
AddToMULTI64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT AddToMULTI32Counter
_TEXT	SEGMENT
value$ = 8
AddToMULTI32Counter PROC				; COMDAT

; 345  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock xadd DWORD PTR statistics_info+4, ecx

; 346  :     }

	ret	0
AddToMULTI32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT AddToDIV64Counter
_TEXT	SEGMENT
value$ = 8
AddToDIV64Counter PROC					; COMDAT

; 339  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV64, value);

	lock xadd DWORD PTR statistics_info+8, ecx

; 340  :     }

	ret	0
AddToDIV64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT AddToDIV32Counter
_TEXT	SEGMENT
value$ = 8
AddToDIV32Counter PROC					; COMDAT

; 333  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	lock xadd DWORD PTR statistics_info+12, ecx

; 334  :     }

	ret	0
AddToDIV32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT IncrementMULTI64Counter
_TEXT	SEGMENT
IncrementMULTI64Counter PROC				; COMDAT

; 328  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI64);

	lock inc DWORD PTR statistics_info

; 329  :     }

	ret	0
IncrementMULTI64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT IncrementMULTI32Counter
_TEXT	SEGMENT
IncrementMULTI32Counter PROC				; COMDAT

; 322  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

	lock inc DWORD PTR statistics_info+4

; 323  :     }

	ret	0
IncrementMULTI32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT IncrementDIV64Counter
_TEXT	SEGMENT
IncrementDIV64Counter PROC				; COMDAT

; 316  :         _InterlockedIncrement(&statistics_info.COUNT_DIV64);

	lock inc DWORD PTR statistics_info+8

; 317  :     }

	ret	0
IncrementDIV64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT IncrementDIV32Counter
_TEXT	SEGMENT
IncrementDIV32Counter PROC				; COMDAT

; 310  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock inc DWORD PTR statistics_info+12

; 311  :     }

	ret	0
IncrementDIV32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT PMC_DivRem_X_X
_TEXT	SEGMENT
nr$ = 64
nq_light_check_code$1 = 72
nq_light_check_code$2 = 72
work_v_buf_code$3 = 80
nr_light_check_code$4 = 80
work_v_buf_words$5 = 88
nr_light_check_code$6 = 96
nq$ = 144
u$ = 144
v$ = 152
q$ = 160
r$ = 168
PMC_DivRem_X_X PROC					; COMDAT

; 1585 : {

$LN44:
	mov	QWORD PTR [rsp+24], rbx
	mov	QWORD PTR [rsp+32], rdi
	push	rbp
	push	r14
	push	r15
	mov	rbp, rsp
	sub	rsp, 112				; 00000070H
	mov	r14, r9
	mov	r15, r8
	mov	rbx, rdx
	mov	rdi, rcx

; 1586 :     if (u == NULL)

	test	rcx, rcx
	je	$LN34@PMC_DivRem

; 1587 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1588 :     if (v == NULL)

	test	rdx, rdx
	je	$LN34@PMC_DivRem

; 1589 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1590 :     if (q == NULL)

	test	r8, r8
	je	$LN34@PMC_DivRem

; 1591 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1592 :     if (r == NULL)

	test	r9, r9
	je	$LN34@PMC_DivRem

; 1594 :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 1595 :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 1596 :     PMC_STATUS_CODE result;
; 1597 :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	$LN1@PMC_DivRem

; 1598 :         return (result);
; 1599 :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	rcx, rbx
	call	CheckNumber
	test	eax, eax
	jne	$LN1@PMC_DivRem

; 1600 :         return (result);
; 1601 :     if (nv->IS_ZERO)

	mov	eax, DWORD PTR [rbx+40]
	test	al, 2
	je	SHORT $LN8@PMC_DivRem

; 1602 :     {
; 1603 :         // v が 0 である場合
; 1604 : 
; 1605 :         // 0 による除算はエラーで返す
; 1606 :         return (PMC_STATUS_DIVISION_BY_ZERO);

	mov	eax, -3
	jmp	$LN1@PMC_DivRem
$LN8@PMC_DivRem:

; 1607 :     }
; 1608 :     NUMBER_HEADER* nq;
; 1609 :     NUMBER_HEADER* nr;
; 1610 :     if (nu->IS_ZERO)

	test	BYTE PTR [rdi+40], 2
	mov	QWORD PTR [rsp+152], rsi
	je	SHORT $LN9@PMC_DivRem

; 1611 :     {
; 1612 :         // u が 0 である場合
; 1613 : 
; 1614 :         // q = 0, r = 0 を返す
; 1615 :         nq = &number_zero;

	lea	rbx, OFFSET FLAT:number_zero
	mov	rax, rbx

; 1711 :                 CommitNumber(nq);
; 1712 :                 CommitNumber(nr);
; 1713 :                 if (nq->IS_ZERO)
; 1714 :                 {
; 1715 :                     DeallocateNumber(nq);
; 1716 :                     nq = &number_zero;
; 1717 :                 }
; 1718 :                 if (nr->IS_ZERO)
; 1719 :                 {
; 1720 :                     DeallocateNumber(nr);
; 1721 :                     nr = &number_zero;
; 1722 :                 }
; 1723 :             }
; 1724 :         }
; 1725 :     }
; 1726 :     *q = nq;

	mov	QWORD PTR [r15], rbx

; 1727 :     *r = nr;
; 1728 : #ifdef _DEBUG
; 1729 :     if ((result = CheckNumber(*q)) != PMC_STATUS_OK)
; 1730 :         return (result);
; 1731 :     if ((result = CheckNumber(*r)) != PMC_STATUS_OK)
; 1732 :         return (result);
; 1733 : #endif
; 1734 :     return (PMC_STATUS_OK);

	xor	eax, eax
	mov	QWORD PTR [r14], rbx
	mov	rcx, rbx
	jmp	$LN36@PMC_DivRem
$LN9@PMC_DivRem:

; 1616 :         nr = &number_zero;
; 1617 :     }
; 1618 :     else
; 1619 :     {
; 1620 :         // u が 0 ではない場合
; 1621 : 
; 1622 :         if (nv->IS_ONE)

	test	al, 4
	je	SHORT $LN11@PMC_DivRem

; 1623 :         {
; 1624 :             // v が 1 である場合
; 1625 : 
; 1626 :             // q = u, r = 0 を返す
; 1627 :             if ((result = DuplicateNumber(nu, &nq)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR nq$[rbp-112]
	mov	rcx, rdi
	call	DuplicateNumber
	test	eax, eax
	jne	$LN36@PMC_DivRem

; 1628 :                 return (result);
; 1629 :             nr = &number_zero;
; 1630 :         }

	mov	rax, QWORD PTR nq$[rbp-112]
	lea	rcx, OFFSET FLAT:number_zero

; 1711 :                 CommitNumber(nq);
; 1712 :                 CommitNumber(nr);
; 1713 :                 if (nq->IS_ZERO)
; 1714 :                 {
; 1715 :                     DeallocateNumber(nq);
; 1716 :                     nq = &number_zero;
; 1717 :                 }
; 1718 :                 if (nr->IS_ZERO)
; 1719 :                 {
; 1720 :                     DeallocateNumber(nr);
; 1721 :                     nr = &number_zero;
; 1722 :                 }
; 1723 :             }
; 1724 :         }
; 1725 :     }
; 1726 :     *q = nq;

	mov	QWORD PTR [r15], rax

; 1727 :     *r = nr;
; 1728 : #ifdef _DEBUG
; 1729 :     if ((result = CheckNumber(*q)) != PMC_STATUS_OK)
; 1730 :         return (result);
; 1731 :     if ((result = CheckNumber(*r)) != PMC_STATUS_OK)
; 1732 :         return (result);
; 1733 : #endif
; 1734 :     return (PMC_STATUS_OK);

	xor	eax, eax
	mov	QWORD PTR [r14], rcx
	jmp	$LN36@PMC_DivRem
$LN11@PMC_DivRem:

; 1631 :         else
; 1632 :         {
; 1633 :             // u > 0 かつ v > 1 である場合
; 1634 : 
; 1635 :             // x と y の商・剰余を計算する
; 1636 :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	rsi, QWORD PTR [rdi+16]

; 1637 :             __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	rcx, QWORD PTR [rbx+16]

; 1638 :             if (u_bit_count < v_bit_count)

	cmp	rsi, rcx
	jae	SHORT $LN14@PMC_DivRem

; 1639 :             {
; 1640 :                 // 明らかに u < v である場合
; 1641 : 
; 1642 :                 // q = 0, r = u を返す。
; 1643 :                 nq = &number_zero;

	lea	rbx, OFFSET FLAT:number_zero

; 1644 :                 if ((result = DuplicateNumber(nu, &nr)) != PMC_STATUS_OK)

	mov	rcx, rdi
	lea	rdx, QWORD PTR nr$[rbp-112]
	mov	QWORD PTR nq$[rbp-112], rbx
	call	DuplicateNumber
	test	eax, eax
	jne	$LN36@PMC_DivRem
	mov	rax, QWORD PTR nq$[rbp-112]
	mov	rcx, QWORD PTR nr$[rbp-112]

; 1711 :                 CommitNumber(nq);
; 1712 :                 CommitNumber(nr);
; 1713 :                 if (nq->IS_ZERO)
; 1714 :                 {
; 1715 :                     DeallocateNumber(nq);
; 1716 :                     nq = &number_zero;
; 1717 :                 }
; 1718 :                 if (nr->IS_ZERO)
; 1719 :                 {
; 1720 :                     DeallocateNumber(nr);
; 1721 :                     nr = &number_zero;
; 1722 :                 }
; 1723 :             }
; 1724 :         }
; 1725 :     }
; 1726 :     *q = nq;

	mov	QWORD PTR [r15], rax

; 1727 :     *r = nr;
; 1728 : #ifdef _DEBUG
; 1729 :     if ((result = CheckNumber(*q)) != PMC_STATUS_OK)
; 1730 :         return (result);
; 1731 :     if ((result = CheckNumber(*r)) != PMC_STATUS_OK)
; 1732 :         return (result);
; 1733 : #endif
; 1734 :     return (PMC_STATUS_OK);

	xor	eax, eax
	mov	QWORD PTR [r14], rcx
	jmp	$LN36@PMC_DivRem
$LN14@PMC_DivRem:

; 1645 :                     return (result);
; 1646 :             }
; 1647 :             else if (v_bit_count <= sizeof(__UNIT_TYPE_DIV) * 8)

	mov	rdx, rsi
	lea	r8, QWORD PTR nq_light_check_code$2[rbp-112]
	sub	rdx, rcx
	add	rdx, 65					; 00000041H
	cmp	rcx, 32					; 00000020H
	lea	rcx, QWORD PTR nq$[rbp-112]
	ja	$LN17@PMC_DivRem

; 1648 :             {
; 1649 :                 // 除数が 1 ワードで表現できる場合
; 1650 : 
; 1651 :                 __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1652 :                 __UNIT_TYPE nq_light_check_code;
; 1653 :                 if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)

	call	AllocateNumber
	test	eax, eax
	jne	SHORT $LN36@PMC_DivRem

; 1654 :                     return (result);
; 1655 :                 __UNIT_TYPE r_bit_count = sizeof(__UNIT_TYPE_DIV) * 8;
; 1656 :                 __UNIT_TYPE nr_light_check_code;
; 1657 :                 if ((result = AllocateNumber(&nr, r_bit_count, &nr_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR nr_light_check_code$4[rbp-112]
	lea	edx, QWORD PTR [rax+32]
	lea	rcx, QWORD PTR nr$[rbp-112]
	call	AllocateNumber
	mov	esi, eax
	test	eax, eax
	jne	$LN42@PMC_DivRem

; 1658 :                 {
; 1659 :                     DeallocateNumber(nq);
; 1660 :                     return (result);
; 1661 :                 }
; 1662 :                 DivRem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV)nv->BLOCK[0], (__UNIT_TYPE_DIV*)nq->BLOCK, (__UNIT_TYPE_DIV*)nr->BLOCK);

	mov	rax, QWORD PTR nr$[rbp-112]
	mov	r8, QWORD PTR [rbx+56]
	mov	r9, QWORD PTR nq$[rbp-112]
	mov	rdx, QWORD PTR [rdi+8]
	mov	rcx, QWORD PTR [rax+56]
	mov	r8d, DWORD PTR [r8]
	mov	r9, QWORD PTR [r9+56]
	shl	rdx, 3
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR [rdi+56]
	shr	rdx, 2
	call	DivRem_X_1W

; 1663 :                 if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nq$[rbp-112]
	mov	rdx, QWORD PTR nq_light_check_code$2[rbp-112]
	mov	rcx, QWORD PTR [rcx+56]
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN36@PMC_DivRem

; 1664 :                     return (result);
; 1665 :                 if ((result = CheckBlockLight(nr->BLOCK, nr_light_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nr$[rbp-112]
	mov	rdx, QWORD PTR nr_light_check_code$4[rbp-112]
	mov	rcx, QWORD PTR [rcx+56]
	call	CheckBlockLight
	test	eax, eax
	je	$LN41@PMC_DivRem
$LN36@PMC_DivRem:
	mov	rsi, QWORD PTR [rsp+152]
$LN1@PMC_DivRem:

; 1735 : }

	lea	r11, QWORD PTR [rsp+112]
	mov	rbx, QWORD PTR [r11+48]
	mov	rdi, QWORD PTR [r11+56]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	rbp
	ret	0
$LN17@PMC_DivRem:

; 1666 :                     return (result);
; 1667 :                 CommitNumber(nq);
; 1668 :                 CommitNumber(nr);
; 1669 :                 if (nq->IS_ZERO)
; 1670 :                 {
; 1671 :                     DeallocateNumber(nq);
; 1672 :                     nq = &number_zero;
; 1673 :                 }
; 1674 :                 if (nr->IS_ZERO)
; 1675 :                 {
; 1676 :                     DeallocateNumber(nr);
; 1677 :                     nr = &number_zero;
; 1678 :                 }
; 1679 :             }
; 1680 :             else
; 1681 :             {
; 1682 :                 // 除数を表現するのに 2 ワード以上必要な場合
; 1683 :                 __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1684 :                 __UNIT_TYPE r_bit_count = u_bit_count + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには v_bit_count だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1685 :                 __UNIT_TYPE nq_light_check_code;
; 1686 :                 if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)

	call	AllocateNumber
	test	eax, eax
	jne	SHORT $LN36@PMC_DivRem

; 1687 :                     return (result);
; 1688 :                 __UNIT_TYPE nr_light_check_code;
; 1689 :                 if ((result = AllocateNumber(&nr, r_bit_count, &nr_light_check_code)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR [rsi+64]
	lea	r8, QWORD PTR nr_light_check_code$6[rbp-112]
	lea	rcx, QWORD PTR nr$[rbp-112]
	call	AllocateNumber
	mov	esi, eax
	test	eax, eax
	je	SHORT $LN26@PMC_DivRem
$LN42@PMC_DivRem:

; 1690 :                 {
; 1691 :                     DeallocateNumber(nq);

	mov	rcx, QWORD PTR nq$[rbp-112]
	call	DeallocateNumber

; 1692 :                     return (result);

	mov	eax, esi
	jmp	SHORT $LN36@PMC_DivRem
$LN26@PMC_DivRem:

; 1693 :                 }
; 1694 :                 __UNIT_TYPE work_v_buf_code;
; 1695 :                 __UNIT_TYPE work_v_buf_words;
; 1696 :                 __UNIT_TYPE_DIV* work_v_buf = (__UNIT_TYPE_DIV*)AllocateBlock(nv->UNIT_WORD_COUNT * __UNIT_TYPE_BIT_COUNT, &work_v_buf_words, &work_v_buf_code);

	mov	rcx, QWORD PTR [rbx+8]
	lea	r8, QWORD PTR work_v_buf_code$3[rbp-112]
	shl	rcx, 6
	lea	rdx, QWORD PTR work_v_buf_words$5[rbp-112]
	call	AllocateBlock
	mov	rsi, rax

; 1697 :                 if (work_v_buf == NULL)

	test	rax, rax
	jne	SHORT $LN27@PMC_DivRem

; 1698 :                 {
; 1699 :                     DeallocateNumber(nq);

	mov	rcx, QWORD PTR nq$[rbp-112]
	call	DeallocateNumber

; 1700 :                     return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	lea	eax, QWORD PTR [rsi-5]
	jmp	SHORT $LN36@PMC_DivRem
$LN27@PMC_DivRem:

; 1701 :                 }
; 1702 : 
; 1703 :                 (*fp_DivRem_X_X)((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV*)nv->BLOCK, nv->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), work_v_buf, (__UNIT_TYPE_DIV*)nq->BLOCK, (__UNIT_TYPE_DIV*)nr->BLOCK);

	mov	rax, QWORD PTR nr$[rbp-112]
	mov	r9, QWORD PTR [rbx+8]
	mov	rdx, QWORD PTR [rdi+8]
	mov	r8, QWORD PTR [rbx+56]
	mov	rcx, QWORD PTR [rax+56]
	mov	rax, QWORD PTR nq$[rbp-112]
	mov	QWORD PTR [rsp+48], rcx
	shl	r9, 3
	shl	rdx, 3
	mov	rcx, QWORD PTR [rax+56]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR [rdi+56]
	shr	r9, 2
	shr	rdx, 2
	mov	QWORD PTR [rsp+32], rsi
	call	QWORD PTR fp_DivRem_X_X

; 1704 :                 if ((result = CheckBlockLight((__UNIT_TYPE*)work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR work_v_buf_code$3[rbp-112]
	mov	rcx, rsi
	call	CheckBlockLight
	test	eax, eax
	jne	$LN36@PMC_DivRem

; 1705 :                     return (result);
; 1706 :                 if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nq$[rbp-112]
	mov	rdx, QWORD PTR nq_light_check_code$1[rbp-112]
	mov	rcx, QWORD PTR [rcx+56]
	call	CheckBlockLight
	test	eax, eax
	jne	$LN36@PMC_DivRem

; 1707 :                     return (result);
; 1708 :                 if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nq$[rbp-112]
	mov	rdx, QWORD PTR nq_light_check_code$1[rbp-112]
	mov	rcx, QWORD PTR [rcx+56]
	call	CheckBlockLight
	test	eax, eax
	jne	$LN36@PMC_DivRem

; 1709 :                     return (result);
; 1710 :                 DeallocateBlock((__UNIT_TYPE*)work_v_buf, work_v_buf_words);

	mov	rdx, QWORD PTR work_v_buf_words$5[rbp-112]
	mov	rcx, rsi
	call	DeallocateBlock
$LN41@PMC_DivRem:

; 1711 :                 CommitNumber(nq);
; 1712 :                 CommitNumber(nr);
; 1713 :                 if (nq->IS_ZERO)
; 1714 :                 {
; 1715 :                     DeallocateNumber(nq);
; 1716 :                     nq = &number_zero;
; 1717 :                 }
; 1718 :                 if (nr->IS_ZERO)
; 1719 :                 {
; 1720 :                     DeallocateNumber(nr);
; 1721 :                     nr = &number_zero;
; 1722 :                 }
; 1723 :             }
; 1724 :         }
; 1725 :     }
; 1726 :     *q = nq;

	mov	rcx, QWORD PTR nq$[rbp-112]
	call	CommitNumber
	mov	rcx, QWORD PTR nr$[rbp-112]
	call	CommitNumber
	mov	rax, QWORD PTR nq$[rbp-112]
	lea	rbx, OFFSET FLAT:number_zero
	test	BYTE PTR [rax+40], 2
	je	SHORT $LN31@PMC_DivRem
	mov	rcx, rax
	call	DeallocateNumber
	mov	rax, rbx
	mov	QWORD PTR nq$[rbp-112], rbx
$LN31@PMC_DivRem:
	mov	rcx, QWORD PTR nr$[rbp-112]
	test	BYTE PTR [rcx+40], 2
	je	SHORT $LN32@PMC_DivRem
	call	DeallocateNumber
	mov	rax, QWORD PTR nq$[rbp-112]
	mov	rcx, rbx
$LN32@PMC_DivRem:
	mov	QWORD PTR [r15], rax

; 1727 :     *r = nr;
; 1728 : #ifdef _DEBUG
; 1729 :     if ((result = CheckNumber(*q)) != PMC_STATUS_OK)
; 1730 :         return (result);
; 1731 :     if ((result = CheckNumber(*r)) != PMC_STATUS_OK)
; 1732 :         return (result);
; 1733 : #endif
; 1734 :     return (PMC_STATUS_OK);

	xor	eax, eax
	mov	QWORD PTR [r14], rcx
	jmp	$LN36@PMC_DivRem
$LN34@PMC_DivRem:

; 1593 :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_DivRem
PMC_DivRem_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT PMC_DivRem_X_L
_TEXT	SEGMENT
nq$ = 64
v_buf$1 = 72
nq_light_check_code$2 = 72
nq_light_check_code$3 = 80
r_buf_code$4 = 88
r_buf_words$5 = 96
work_v_buf$6 = 160
r_buf$7 = 160
u$ = 160
v$ = 168
q$ = 176
r$ = 184
PMC_DivRem_X_L PROC					; COMDAT

; 1400 : {

$LN62:
	push	rbp
	push	rbx
	push	rsi
	push	rdi
	push	r12
	mov	rbp, rsp
	sub	rsp, 112				; 00000070H
	mov	rdi, r9
	mov	r12, r8
	mov	rsi, rdx
	mov	rbx, rcx

; 1401 :     if (sizeof(__UNIT_TYPE_DIV) * 2 < sizeof(v))
; 1402 :     {
; 1403 :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 1404 :         return (PMC_STATUS_INTERNAL_ERROR);
; 1405 :     }
; 1406 :     if (u == NULL)

	test	rcx, rcx
	je	$LN54@PMC_DivRem

; 1407 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1408 :     if (q == NULL)

	test	r8, r8
	je	$LN54@PMC_DivRem

; 1409 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1410 :     if (r == NULL)

	test	r9, r9
	je	$LN54@PMC_DivRem

; 1412 :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 1413 :     PMC_STATUS_CODE result;
; 1414 :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	$LN1@PMC_DivRem

; 1415 :         return (result);
; 1416 :     if (v == 0)

	test	rsi, rsi
	jne	SHORT $LN7@PMC_DivRem

; 1417 :     {
; 1418 :         // v が 0 である場合
; 1419 : 
; 1420 :         // 0 による除算はエラーで返す
; 1421 :         return (PMC_STATUS_DIVISION_BY_ZERO);

	lea	eax, QWORD PTR [rsi-3]

; 1582 : }

	add	rsp, 112				; 00000070H
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbx
	pop	rbp
	ret	0
$LN7@PMC_DivRem:

; 1422 :     }
; 1423 :     NUMBER_HEADER* nq;
; 1424 :     if (nu->IS_ZERO)

	test	BYTE PTR [rbx+40], 2
	mov	QWORD PTR [rsp+168], r14
	mov	QWORD PTR [rsp+176], r15
	je	SHORT $LN8@PMC_DivRem

; 1425 :     {
; 1426 :         // x が 0 である場合
; 1427 : 
; 1428 :         // q = 0, r = 0 を返す
; 1429 :         nq = &number_zero;
; 1430 :         *r = 0;

	xor	eax, eax

; 1531 :                         if (nq->IS_ZERO)
; 1532 :                         {
; 1533 :                             DeallocateNumber(nq);
; 1534 :                             nq = &number_zero;
; 1535 :                         }
; 1536 :                     }
; 1537 :                 }
; 1538 :             }
; 1539 :             else
; 1540 :             {
; 1541 :                 // _UINT64_T が 1 ワードで表現できる場合
; 1542 : 
; 1543 :                 // x と y の商・剰余を計算する
; 1544 :                 __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 1545 :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 1546 :                 if (u_bit_count < v_bit_count)
; 1547 :                 {
; 1548 :                     // 明らかに u < v である場合
; 1549 : 
; 1550 :                     // q = 0, r = u を返す。
; 1551 :                     nq = &number_zero;
; 1552 :                     *r = nu->BLOCK[0];
; 1553 :                 }
; 1554 :                 else
; 1555 :                 {
; 1556 :                     __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1557 :                     __UNIT_TYPE nq_light_check_code;
; 1558 :                     if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)
; 1559 :                         return (result);
; 1560 :                     __UNIT_TYPE_DIV r_buf = 0;
; 1561 :                     DivRem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV)v, (__UNIT_TYPE_DIV*)nq->BLOCK, &r_buf);
; 1562 :                     if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)
; 1563 :                         return (result);
; 1564 :                     CommitNumber(nq);
; 1565 :                     *r = r_buf;
; 1566 :                     if (nq->IS_ZERO)
; 1567 :                     {
; 1568 :                         DeallocateNumber(nq);
; 1569 :                         nq = &number_zero;
; 1570 :                     }
; 1571 :                 }
; 1572 :             }
; 1573 : 
; 1574 :         }
; 1575 :     }
; 1576 :     *q = nq;

	lea	rdx, OFFSET FLAT:number_zero
	mov	QWORD PTR [rdi], rax
	mov	QWORD PTR [r12], rdx

; 1577 : #ifdef _DEBUG
; 1578 :     if ((result = CheckNumber(nq)) != PMC_STATUS_OK)
; 1579 :         return (result);
; 1580 : #endif
; 1581 :     return (PMC_STATUS_OK);

	jmp	$LN56@PMC_DivRem
$LN8@PMC_DivRem:

; 1431 :     }
; 1432 :     else
; 1433 :     {
; 1434 :         // u が 0 ではない場合
; 1435 : 
; 1436 :         if (v == 1)

	cmp	rsi, 1
	jne	SHORT $LN10@PMC_DivRem

; 1437 :         {
; 1438 :             // v が 1 である場合
; 1439 : 
; 1440 :             // q = u, r = 0 を返す
; 1441 :             if ((result = DuplicateNumber(nu, &nq)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR nq$[rbp-112]
	mov	rcx, rbx
	call	DuplicateNumber
	test	eax, eax
	jne	$LN56@PMC_DivRem

; 1442 :                 return (result);
; 1443 :             *r = 0;
; 1444 :         }

	mov	rdx, QWORD PTR nq$[rbp-112]
	xor	eax, eax
	mov	QWORD PTR [rdi], rax

; 1531 :                         if (nq->IS_ZERO)
; 1532 :                         {
; 1533 :                             DeallocateNumber(nq);
; 1534 :                             nq = &number_zero;
; 1535 :                         }
; 1536 :                     }
; 1537 :                 }
; 1538 :             }
; 1539 :             else
; 1540 :             {
; 1541 :                 // _UINT64_T が 1 ワードで表現できる場合
; 1542 : 
; 1543 :                 // x と y の商・剰余を計算する
; 1544 :                 __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 1545 :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 1546 :                 if (u_bit_count < v_bit_count)
; 1547 :                 {
; 1548 :                     // 明らかに u < v である場合
; 1549 : 
; 1550 :                     // q = 0, r = u を返す。
; 1551 :                     nq = &number_zero;
; 1552 :                     *r = nu->BLOCK[0];
; 1553 :                 }
; 1554 :                 else
; 1555 :                 {
; 1556 :                     __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1557 :                     __UNIT_TYPE nq_light_check_code;
; 1558 :                     if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)
; 1559 :                         return (result);
; 1560 :                     __UNIT_TYPE_DIV r_buf = 0;
; 1561 :                     DivRem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV)v, (__UNIT_TYPE_DIV*)nq->BLOCK, &r_buf);
; 1562 :                     if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)
; 1563 :                         return (result);
; 1564 :                     CommitNumber(nq);
; 1565 :                     *r = r_buf;
; 1566 :                     if (nq->IS_ZERO)
; 1567 :                     {
; 1568 :                         DeallocateNumber(nq);
; 1569 :                         nq = &number_zero;
; 1570 :                     }
; 1571 :                 }
; 1572 :             }
; 1573 : 
; 1574 :         }
; 1575 :     }
; 1576 :     *q = nq;

	mov	QWORD PTR [r12], rdx

; 1577 : #ifdef _DEBUG
; 1578 :     if ((result = CheckNumber(nq)) != PMC_STATUS_OK)
; 1579 :         return (result);
; 1580 : #endif
; 1581 :     return (PMC_STATUS_OK);

	jmp	$LN56@PMC_DivRem
$LN10@PMC_DivRem:

; 1445 :         else
; 1446 :         {
; 1447 :             // u > 0 かつ v > 1 である場合
; 1448 : 
; 1449 :             // u と v の商・剰余を計算する
; 1450 :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	r14, QWORD PTR [rbx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r15, rsi
	shr	r15, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1456 :                 if (v_hi == 0)

	test	r15d, r15d
	jne	$LN15@PMC_DivRem
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 590  :         if (x == 0)

	lea	edx, QWORD PTR [r15+32]
	test	esi, esi
	jne	SHORT $LN42@PMC_DivRem

; 591  :             return (sizeof(x) * 8);

	mov	ecx, edx
	jmp	SHORT $LN41@PMC_DivRem
$LN42@PMC_DivRem:

; 594  :         _BitScanReverse(&pos, x);

	bsr	eax, esi

; 595  : #elif defined(__GNUC__)
; 596  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 597  : #else
; 598  : #error unknown compiler
; 599  : #endif
; 600  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31
	sub	ecx, eax
$LN41@PMC_DivRem:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1459 :                     __UNIT_TYPE v_bit_count = sizeof(v_lo) * 8 - _LZCNT_ALT_32(v_lo);

	movsxd	rax, ecx
	sub	rdx, rax

; 1460 :                     if (u_bit_count < v_bit_count)

	cmp	r14, rdx
	jb	$LN60@PMC_DivRem

; 1461 :                     {
; 1462 :                         // 明らかに u < v である場合
; 1463 : 
; 1464 :                         // q = 0, r = u を返す。
; 1465 :                         nq = &number_zero;
; 1466 :                         *r = nu->BLOCK[0];
; 1467 :                     }
; 1468 :                     else
; 1469 :                     {
; 1470 :                         __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1471 :                         __UNIT_TYPE nq_light_check_code;
; 1472 :                         if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)

	sub	r14, rdx
	lea	r8, QWORD PTR nq_light_check_code$2[rbp-112]
	lea	rcx, QWORD PTR nq$[rbp-112]
	lea	rdx, QWORD PTR [r14+65]
	call	AllocateNumber
	test	eax, eax
	jne	$LN56@PMC_DivRem

; 1473 :                             return (result);
; 1474 :                         __UNIT_TYPE_DIV r_buf = 0;
; 1475 :                         DivRem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), v_lo, (__UNIT_TYPE_DIV*)nq->BLOCK, &r_buf);

	mov	r9, QWORD PTR nq$[rbp-112]
	xor	eax, eax
	mov	rdx, QWORD PTR [rbx+8]
	mov	r8d, esi
	mov	rcx, QWORD PTR [rbx+56]
	mov	DWORD PTR r_buf$7[rbp-112], eax
	lea	rax, QWORD PTR r_buf$7[rbp-112]
	mov	r9, QWORD PTR [r9+56]
	shl	rdx, 3
	shr	rdx, 2
	mov	QWORD PTR [rsp+32], rax
	call	DivRem_X_1W

; 1476 :                         if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nq$[rbp-112]
	mov	rdx, QWORD PTR nq_light_check_code$2[rbp-112]
	mov	rcx, QWORD PTR [rcx+56]
	call	CheckBlockLight
	test	eax, eax
	jne	$LN56@PMC_DivRem

; 1477 :                             return (result);
; 1478 :                         CommitNumber(nq);

	mov	rcx, QWORD PTR nq$[rbp-112]
	call	CommitNumber

; 1479 :                         *r = r_buf;

	mov	eax, DWORD PTR r_buf$7[rbp-112]
	mov	QWORD PTR [rdi], rax

; 1480 :                         if (nq->IS_ZERO)
; 1481 :                         {
; 1482 :                             DeallocateNumber(nq);
; 1483 :                             nq = &number_zero;
; 1484 :                         }
; 1485 :                     }
; 1486 :                 }

	jmp	$LN59@PMC_DivRem
$LN15@PMC_DivRem:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 594  :         _BitScanReverse(&pos, x);

	bsr	eax, r15d

; 595  : #elif defined(__GNUC__)
; 596  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 597  : #else
; 598  : #error unknown compiler
; 599  : #endif
; 600  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31
	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1490 :                     __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v_hi);

	movsxd	rax, ecx
	mov	ecx, 64					; 00000040H
	sub	rcx, rax

; 1491 :                     if (u_bit_count < v_bit_count)

	cmp	r14, rcx
	jae	SHORT $LN22@PMC_DivRem
$LN60@PMC_DivRem:

; 1531 :                         if (nq->IS_ZERO)
; 1532 :                         {
; 1533 :                             DeallocateNumber(nq);
; 1534 :                             nq = &number_zero;
; 1535 :                         }
; 1536 :                     }
; 1537 :                 }
; 1538 :             }
; 1539 :             else
; 1540 :             {
; 1541 :                 // _UINT64_T が 1 ワードで表現できる場合
; 1542 : 
; 1543 :                 // x と y の商・剰余を計算する
; 1544 :                 __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 1545 :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 1546 :                 if (u_bit_count < v_bit_count)
; 1547 :                 {
; 1548 :                     // 明らかに u < v である場合
; 1549 : 
; 1550 :                     // q = 0, r = u を返す。
; 1551 :                     nq = &number_zero;
; 1552 :                     *r = nu->BLOCK[0];
; 1553 :                 }
; 1554 :                 else
; 1555 :                 {
; 1556 :                     __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1557 :                     __UNIT_TYPE nq_light_check_code;
; 1558 :                     if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)
; 1559 :                         return (result);
; 1560 :                     __UNIT_TYPE_DIV r_buf = 0;
; 1561 :                     DivRem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV)v, (__UNIT_TYPE_DIV*)nq->BLOCK, &r_buf);
; 1562 :                     if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)
; 1563 :                         return (result);
; 1564 :                     CommitNumber(nq);
; 1565 :                     *r = r_buf;
; 1566 :                     if (nq->IS_ZERO)
; 1567 :                     {
; 1568 :                         DeallocateNumber(nq);
; 1569 :                         nq = &number_zero;
; 1570 :                     }
; 1571 :                 }
; 1572 :             }
; 1573 : 
; 1574 :         }
; 1575 :     }
; 1576 :     *q = nq;

	mov	rax, QWORD PTR [rbx+56]
	lea	rdx, OFFSET FLAT:number_zero
	mov	QWORD PTR nq$[rbp-112], rdx
	mov	rcx, QWORD PTR [rax]

; 1577 : #ifdef _DEBUG
; 1578 :     if ((result = CheckNumber(nq)) != PMC_STATUS_OK)
; 1579 :         return (result);
; 1580 : #endif
; 1581 :     return (PMC_STATUS_OK);

	xor	eax, eax
	mov	QWORD PTR [rdi], rcx
	mov	QWORD PTR [r12], rdx
	jmp	SHORT $LN56@PMC_DivRem
$LN22@PMC_DivRem:

; 1492 :                     {
; 1493 :                         // 明らかに u < v である場合
; 1494 : 
; 1495 :                         // q = 0, r = u を返す。
; 1496 :                         nq = &number_zero;
; 1497 :                         if (sizeof(v) == sizeof(__UNIT_TYPE))
; 1498 :                             *r = nu->BLOCK[0];
; 1499 :                         else
; 1500 :                         {
; 1501 :                             __UNIT_TYPE r_lo = nu->BLOCK[0];
; 1502 :                             __UNIT_TYPE r_hi = nu->UNIT_WORD_COUNT > 1 ? nu->BLOCK[1] : 0;
; 1503 :                             *r = _FROMWORDTODWORD((_UINT32_T)r_hi, (_UINT32_T)r_lo);
; 1504 :                         }
; 1505 :                     }
; 1506 :                     else
; 1507 :                     {
; 1508 :                         __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1509 :                         __UNIT_TYPE r_bit_count = u_bit_count + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには v_bit_count だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1510 :                         __UNIT_TYPE nq_light_check_code;
; 1511 :                         if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)

	mov	rdx, r14
	lea	r8, QWORD PTR nq_light_check_code$3[rbp-112]
	sub	rdx, rcx
	lea	rcx, QWORD PTR nq$[rbp-112]
	add	rdx, 65					; 00000041H
	call	AllocateNumber
	test	eax, eax
	jne	SHORT $LN56@PMC_DivRem

; 1512 :                             return (result);
; 1513 :                         __UNIT_TYPE_DIV v_buf[] = { v_lo, v_hi };
; 1514 :                         __UNIT_TYPE_DIV work_v_buf[] = { 0, 0 };

	xor	eax, eax
	mov	DWORD PTR v_buf$1[rbp-112], esi
	lea	rcx, QWORD PTR [r14+64]
	mov	QWORD PTR work_v_buf$6[rbp-112], rax

; 1515 :                         __UNIT_TYPE r_buf_code;
; 1516 :                         __UNIT_TYPE r_buf_words;
; 1517 :                         __UNIT_TYPE_DIV* r_buf = (__UNIT_TYPE_DIV*)AllocateBlock(r_bit_count, &r_buf_words, &r_buf_code);

	lea	r8, QWORD PTR r_buf_code$4[rbp-112]
	mov	DWORD PTR v_buf$1[rbp-108], r15d
	lea	rdx, QWORD PTR r_buf_words$5[rbp-112]
	call	AllocateBlock
	mov	rsi, rax

; 1518 :                         if (r_buf == NULL)

	test	rax, rax
	jne	SHORT $LN27@PMC_DivRem

; 1519 :                         {
; 1520 :                             DeallocateNumber(nq);

	mov	rcx, QWORD PTR nq$[rbp-112]
	call	DeallocateNumber

; 1521 :                             return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	lea	eax, QWORD PTR [rsi-5]
$LN56@PMC_DivRem:
	mov	r14, QWORD PTR [rsp+168]
	mov	r15, QWORD PTR [rsp+176]
$LN1@PMC_DivRem:

; 1582 : }

	add	rsp, 112				; 00000070H
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbx
	pop	rbp
	ret	0
$LN27@PMC_DivRem:

; 1522 :                         }
; 1523 :                         (*fp_DivRem_X_X)((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), v_buf, sizeof(v_buf) / sizeof(v_buf[0]), work_v_buf, (__UNIT_TYPE_DIV*)nq->BLOCK, r_buf);

	mov	rax, QWORD PTR nq$[rbp-112]
	lea	r8, QWORD PTR v_buf$1[rbp-112]
	mov	rdx, QWORD PTR [rbx+8]
	mov	r9d, 2
	shl	rdx, 3
	mov	QWORD PTR [rsp+48], rsi
	mov	rcx, QWORD PTR [rax+56]
	lea	rax, QWORD PTR work_v_buf$6[rbp-112]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR [rbx+56]
	shr	rdx, 2
	mov	QWORD PTR [rsp+32], rax
	call	QWORD PTR fp_DivRem_X_X

; 1524 :                         if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nq$[rbp-112]
	mov	rdx, QWORD PTR nq_light_check_code$3[rbp-112]
	mov	rcx, QWORD PTR [rcx+56]
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN56@PMC_DivRem

; 1525 :                             return (result);
; 1526 :                         if ((result = CheckBlockLight((__UNIT_TYPE*)r_buf, r_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR r_buf_code$4[rbp-112]
	mov	rcx, rsi
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN56@PMC_DivRem

; 1527 :                             return (result);
; 1528 :                         CommitNumber(nq);

	mov	rcx, QWORD PTR nq$[rbp-112]
	call	CommitNumber
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	ecx, DWORD PTR [rsi+4]
	mov	eax, DWORD PTR [rsi]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1530 :                         DeallocateBlock((__UNIT_TYPE*)r_buf, r_buf_words);

	mov	rdx, QWORD PTR r_buf_words$5[rbp-112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	shl	rcx, 32					; 00000020H
	or	rcx, rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1529 :                         *r = _FROMWORDTODWORD((_UINT32_T)r_buf[1], (_UINT32_T)r_buf[0]);

	mov	QWORD PTR [rdi], rcx

; 1530 :                         DeallocateBlock((__UNIT_TYPE*)r_buf, r_buf_words);

	mov	rcx, rsi
	call	DeallocateBlock
$LN59@PMC_DivRem:

; 1531 :                         if (nq->IS_ZERO)
; 1532 :                         {
; 1533 :                             DeallocateNumber(nq);
; 1534 :                             nq = &number_zero;
; 1535 :                         }
; 1536 :                     }
; 1537 :                 }
; 1538 :             }
; 1539 :             else
; 1540 :             {
; 1541 :                 // _UINT64_T が 1 ワードで表現できる場合
; 1542 : 
; 1543 :                 // x と y の商・剰余を計算する
; 1544 :                 __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 1545 :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 1546 :                 if (u_bit_count < v_bit_count)
; 1547 :                 {
; 1548 :                     // 明らかに u < v である場合
; 1549 : 
; 1550 :                     // q = 0, r = u を返す。
; 1551 :                     nq = &number_zero;
; 1552 :                     *r = nu->BLOCK[0];
; 1553 :                 }
; 1554 :                 else
; 1555 :                 {
; 1556 :                     __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1557 :                     __UNIT_TYPE nq_light_check_code;
; 1558 :                     if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)
; 1559 :                         return (result);
; 1560 :                     __UNIT_TYPE_DIV r_buf = 0;
; 1561 :                     DivRem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV)v, (__UNIT_TYPE_DIV*)nq->BLOCK, &r_buf);
; 1562 :                     if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)
; 1563 :                         return (result);
; 1564 :                     CommitNumber(nq);
; 1565 :                     *r = r_buf;
; 1566 :                     if (nq->IS_ZERO)
; 1567 :                     {
; 1568 :                         DeallocateNumber(nq);
; 1569 :                         nq = &number_zero;
; 1570 :                     }
; 1571 :                 }
; 1572 :             }
; 1573 : 
; 1574 :         }
; 1575 :     }
; 1576 :     *q = nq;

	mov	rdx, QWORD PTR nq$[rbp-112]
	test	BYTE PTR [rdx+40], 2
	je	SHORT $LN30@PMC_DivRem
	mov	rcx, rdx
	call	DeallocateNumber
	lea	rdx, OFFSET FLAT:number_zero
$LN30@PMC_DivRem:
	mov	QWORD PTR [r12], rdx

; 1577 : #ifdef _DEBUG
; 1578 :     if ((result = CheckNumber(nq)) != PMC_STATUS_OK)
; 1579 :         return (result);
; 1580 : #endif
; 1581 :     return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN56@PMC_DivRem
$LN54@PMC_DivRem:

; 1411 :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1

; 1582 : }

	add	rsp, 112				; 00000070H
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbx
	pop	rbp
	ret	0
PMC_DivRem_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT PMC_DivRem_X_I
_TEXT	SEGMENT
nq$ = 48
nq_light_check_code$1 = 56
r_buf$2 = 80
u$ = 80
v$ = 88
q$ = 96
r$ = 104
PMC_DivRem_X_I PROC					; COMDAT

; 1145 : {

$LN25:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 64					; 00000040H
	mov	rdi, r9
	mov	r14, r8
	mov	esi, edx
	mov	rbx, rcx

; 1146 :     if (sizeof(__UNIT_TYPE_DIV) < sizeof(v))
; 1147 :     {
; 1148 :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 1149 :         return (PMC_STATUS_INTERNAL_ERROR);
; 1150 :     }
; 1151 :     if (u == NULL)

	test	rcx, rcx
	je	$LN22@PMC_DivRem

; 1152 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1153 :     if (q == NULL)

	test	r8, r8
	je	$LN22@PMC_DivRem

; 1154 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1155 :     if (r == NULL)

	test	r9, r9
	je	$LN22@PMC_DivRem

; 1157 :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 1158 :     PMC_STATUS_CODE result;
; 1159 :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	$LN1@PMC_DivRem

; 1160 :         return (result);
; 1161 :     if (v == 0)

	test	esi, esi
	jne	SHORT $LN7@PMC_DivRem

; 1162 :     {
; 1163 :         // v が 0 である場合
; 1164 : 
; 1165 :         // 0 による除算はエラーで返す
; 1166 :         return (PMC_STATUS_DIVISION_BY_ZERO);

	lea	eax, QWORD PTR [rsi-3]
	jmp	$LN1@PMC_DivRem
$LN7@PMC_DivRem:

; 1167 :     }
; 1168 :     NUMBER_HEADER* nq;
; 1169 :     if (nu->IS_ZERO)

	test	BYTE PTR [rbx+40], 2
	je	SHORT $LN8@PMC_DivRem

; 1220 :                     nq = &number_zero;
; 1221 :                 }
; 1222 :             }
; 1223 :         }
; 1224 :     }
; 1225 :     *q = nq;

	lea	rdx, OFFSET FLAT:number_zero
	mov	DWORD PTR [rdi], 0
	mov	QWORD PTR [r14], rdx

; 1226 : #ifdef _DEBUG
; 1227 :     if ((result = CheckNumber(nq)) != PMC_STATUS_OK)
; 1228 :         return (result);
; 1229 : #endif
; 1230 :     return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN1@PMC_DivRem
$LN8@PMC_DivRem:

; 1170 :     {
; 1171 :         // u が 0 である場合
; 1172 : 
; 1173 :         // q = 0, r = 0 を返す
; 1174 :         nq = &number_zero;
; 1175 :         *r = 0;
; 1176 :     }
; 1177 :     else
; 1178 :     {
; 1179 :         // u が 0 ではない場合
; 1180 : 
; 1181 :         if (v == 1)

	cmp	esi, 1
	jne	SHORT $LN10@PMC_DivRem

; 1182 :         {
; 1183 :             // v が 1 である場合
; 1184 : 
; 1185 :             // q = u, r = 0 を返す
; 1186 :             if ((result = DuplicateNumber(nu, &nq)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR nq$[rsp]
	mov	rcx, rbx
	call	DuplicateNumber
	test	eax, eax
	jne	$LN1@PMC_DivRem

; 1187 :                 return (result);
; 1188 :             *r = 0;
; 1189 :         }

	mov	rdx, QWORD PTR nq$[rsp]
	mov	DWORD PTR [rdi], eax

; 1220 :                     nq = &number_zero;
; 1221 :                 }
; 1222 :             }
; 1223 :         }
; 1224 :     }
; 1225 :     *q = nq;

	mov	QWORD PTR [r14], rdx

; 1226 : #ifdef _DEBUG
; 1227 :     if ((result = CheckNumber(nq)) != PMC_STATUS_OK)
; 1228 :         return (result);
; 1229 : #endif
; 1230 :     return (PMC_STATUS_OK);

	jmp	$LN1@PMC_DivRem
$LN10@PMC_DivRem:

; 1190 :         else
; 1191 :         {
; 1192 :             // u と v がともに 0 ではない場合
; 1193 : 
; 1194 :             // x と y の商・剰余を計算する
; 1195 :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	rdx, QWORD PTR [rbx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 600  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31
	bsr	eax, esi
	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1196 :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

	movsxd	rax, ecx
	mov	ecx, 32					; 00000020H
	sub	rcx, rax

; 1197 :             if (u_bit_count < v_bit_count)

	cmp	rdx, rcx
	jae	SHORT $LN13@PMC_DivRem

; 1198 :             {
; 1199 :                 // 明らかに u < v である場合
; 1200 : 
; 1201 :                 // q = 0, r = u を返す。
; 1202 :                 nq = &number_zero;
; 1203 :                 *r = (_UINT32_T)nu->BLOCK[0];

	mov	rax, QWORD PTR [rbx+56]
	lea	rdx, OFFSET FLAT:number_zero
	mov	QWORD PTR nq$[rsp], rdx
	mov	ecx, DWORD PTR [rax]

; 1226 : #ifdef _DEBUG
; 1227 :     if ((result = CheckNumber(nq)) != PMC_STATUS_OK)
; 1228 :         return (result);
; 1229 : #endif
; 1230 :     return (PMC_STATUS_OK);

	xor	eax, eax
	mov	DWORD PTR [rdi], ecx
	mov	QWORD PTR [r14], rdx
	jmp	$LN1@PMC_DivRem
$LN13@PMC_DivRem:

; 1204 :             }
; 1205 :             else
; 1206 :             {
; 1207 :                 __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1208 :                 __UNIT_TYPE nq_light_check_code;
; 1209 :                 if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)

	sub	rdx, rcx
	lea	r8, QWORD PTR nq_light_check_code$1[rsp]
	add	rdx, 65					; 00000041H
	lea	rcx, QWORD PTR nq$[rsp]
	call	AllocateNumber
	test	eax, eax
	jne	SHORT $LN1@PMC_DivRem

; 1210 :                     return (result);
; 1211 :                 __UNIT_TYPE_DIV r_buf = 0;
; 1212 :                 DivRem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), v, (__UNIT_TYPE_DIV*)nq->BLOCK, &r_buf);

	mov	r9, QWORD PTR nq$[rsp]
	mov	r8d, esi
	mov	rdx, QWORD PTR [rbx+8]
	mov	rcx, QWORD PTR [rbx+56]
	mov	DWORD PTR r_buf$2[rsp], eax
	lea	rax, QWORD PTR r_buf$2[rsp]
	mov	r9, QWORD PTR [r9+56]
	shl	rdx, 3
	shr	rdx, 2
	mov	QWORD PTR [rsp+32], rax
	call	DivRem_X_1W

; 1213 :                 if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nq$[rsp]
	mov	rdx, QWORD PTR nq_light_check_code$1[rsp]
	mov	rcx, QWORD PTR [rcx+56]
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_DivRem

; 1214 :                     return (result);
; 1215 :                 CommitNumber(nq);

	mov	rcx, QWORD PTR nq$[rsp]
	call	CommitNumber

; 1216 :                 *r = (_UINT32_T)r_buf;
; 1217 :                 if (nq->IS_ZERO)

	mov	rdx, QWORD PTR nq$[rsp]
	mov	eax, DWORD PTR r_buf$2[rsp]
	mov	DWORD PTR [rdi], eax
	test	BYTE PTR [rdx+40], 2
	je	SHORT $LN17@PMC_DivRem

; 1218 :                 {
; 1219 :                     DeallocateNumber(nq);

	mov	rcx, rdx
	call	DeallocateNumber

; 1220 :                     nq = &number_zero;
; 1221 :                 }
; 1222 :             }
; 1223 :         }
; 1224 :     }
; 1225 :     *q = nq;

	lea	rdx, OFFSET FLAT:number_zero
$LN17@PMC_DivRem:
	mov	QWORD PTR [r14], rdx

; 1226 : #ifdef _DEBUG
; 1227 :     if ((result = CheckNumber(nq)) != PMC_STATUS_OK)
; 1228 :         return (result);
; 1229 : #endif
; 1230 :     return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@PMC_DivRem
$LN22@PMC_DivRem:

; 1156 :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN1@PMC_DivRem:

; 1231 : }

	mov	rbx, QWORD PTR [rsp+88]
	mov	rsi, QWORD PTR [rsp+96]
	mov	rdi, QWORD PTR [rsp+104]
	add	rsp, 64					; 00000040H
	pop	r14
	ret	0
PMC_DivRem_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT PMC_DivRem_L_X
_TEXT	SEGMENT
r_buf$1 = 64
u_buf$2 = 72
work_v_buf$3 = 80
u_buf$4 = 88
pos$5 = 96
q_buf$6 = 104
q_buf$7 = 120
r_buf$8 = 136
__$ArrayPad$ = 152
u$ = 208
v$ = 216
q$ = 224
r$ = 232
PMC_DivRem_L_X PROC					; COMDAT

; 1234 : {

$LN72:
	push	rbp
	push	rbx
	push	rsi
	push	rdi
	push	r14
	lea	rbp, QWORD PTR [rsp-55]
	sub	rsp, 160				; 000000a0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rbp-105], rax
	mov	rsi, r9
	mov	rdi, r8
	mov	r14, rdx
	mov	rbx, rcx

; 1235 :     if (sizeof(__UNIT_TYPE_DIV) * 2 < sizeof(u))
; 1236 :     {
; 1237 :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 1238 :         return (PMC_STATUS_INTERNAL_ERROR);
; 1239 :     }
; 1240 :     if (v == NULL)

	test	rdx, rdx
	je	$LN70@PMC_DivRem

; 1241 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1242 :     if (q == NULL)

	test	r8, r8
	je	$LN70@PMC_DivRem

; 1243 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1244 :     if (r == NULL)

	test	r9, r9
	je	$LN70@PMC_DivRem

; 1246 :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 1247 :     PMC_STATUS_CODE result;
; 1248 :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	rcx, rdx
	call	CheckNumber
	test	eax, eax
	jne	$LN1@PMC_DivRem

; 1249 :         return (result);
; 1250 :     if (nv->IS_ZERO)

	mov	eax, DWORD PTR [r14+40]
	test	al, 2
	je	SHORT $LN7@PMC_DivRem

; 1251 :     {
; 1252 :         // v が 0 である場合
; 1253 : 
; 1254 :         // 0 による除算はエラーで返す
; 1255 :         return (PMC_STATUS_DIVISION_BY_ZERO);

	mov	eax, -3
	jmp	$LN1@PMC_DivRem
$LN7@PMC_DivRem:

; 1256 :     }
; 1257 :     if (u == 0)

	test	rbx, rbx
	jne	SHORT $LN8@PMC_DivRem

; 1258 :     {
; 1259 :         // x が 0 である場合
; 1260 : 
; 1261 :         // q = 0, r = 0 を返す
; 1262 :         *q = 0;

	xor	eax, eax
	mov	QWORD PTR [rdi], rax

; 1263 :         *r = 0;

	mov	QWORD PTR [rsi], rax

; 1396 :     return (PMC_STATUS_OK);

	jmp	$LN1@PMC_DivRem
$LN8@PMC_DivRem:

; 1264 :     }
; 1265 :     else
; 1266 :     {
; 1267 :         // u が 0 ではない場合
; 1268 : 
; 1269 :         if (nv->IS_ONE)

	test	al, 4
	je	SHORT $LN10@PMC_DivRem

; 1270 :         {
; 1271 :             // v が 1 である場合
; 1272 : 
; 1273 :             // q = u, r = 0 を返す
; 1274 :             *q = u;
; 1275 :             *r = 0;

	xor	eax, eax
	mov	QWORD PTR [rdi], rbx
	mov	QWORD PTR [rsi], rax

; 1396 :     return (PMC_STATUS_OK);

	jmp	$LN1@PMC_DivRem
$LN10@PMC_DivRem:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 176  :         *result_high = (_UINT32_T)(value >> 32);

	mov	rdx, rbx
	shr	rdx, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1287 :                 if (u_hi == 0)

	test	edx, edx
	jne	SHORT $LN14@PMC_DivRem
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 590  :         if (x == 0)

	mov	edx, 32					; 00000020H
	test	ebx, ebx
	jne	SHORT $LN32@PMC_DivRem

; 591  :             return (sizeof(x) * 8);

	mov	ecx, edx
	jmp	SHORT $LN31@PMC_DivRem
$LN32@PMC_DivRem:

; 592  :         _UINT32_T pos;
; 593  : #ifdef _MSC_VER
; 594  :         _BitScanReverse(&pos, x);

	bsr	eax, ebx

; 600  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31
	mov	DWORD PTR pos$5[rbp-105], eax
	sub	ecx, eax
$LN31@PMC_DivRem:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1290 :                     __UNIT_TYPE u_bit_count = sizeof(u_lo) * 8 - _LZCNT_ALT_32(u_lo);

	movsxd	rax, ecx
	sub	rdx, rax

; 1291 :                     __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 1292 :                     if (u_bit_count < v_bit_count)

	mov	r9d, ebx
	cmp	rdx, QWORD PTR [r14+16]
	jae	SHORT $LN16@PMC_DivRem

; 1293 :                     {
; 1294 :                         // 明らかに u < v である場合
; 1295 : 
; 1296 :                         // q = 0, r = u を返す。
; 1297 :                         *q = 0;

	xor	eax, eax
	mov	QWORD PTR [rdi], rax

; 1298 :                         *r = u_lo;

	mov	QWORD PTR [rsi], r9

; 1396 :     return (PMC_STATUS_OK);

	jmp	$LN1@PMC_DivRem
$LN16@PMC_DivRem:

; 1306 :                         *q = _DIVREM_UNIT(0, u_lo, (__UNIT_TYPE_DIV)nv->BLOCK[0], &temp_r);

	mov	rcx, QWORD PTR [r14+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 384  :             return ((_UINT32_T)(t / v));

	xor	edx, edx
	mov	rax, r9
	mov	r8d, DWORD PTR [rcx]
	div	r8
	xor	edx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1306 :                         *q = _DIVREM_UNIT(0, u_lo, (__UNIT_TYPE_DIV)nv->BLOCK[0], &temp_r);

	mov	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 383  :             *r = (_UINT32_T)(t % v);

	mov	rax, r9
	div	r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1306 :                         *q = _DIVREM_UNIT(0, u_lo, (__UNIT_TYPE_DIV)nv->BLOCK[0], &temp_r);

	mov	QWORD PTR [rdi], rcx

; 1307 :                         *r = temp_r;

	mov	eax, edx
	mov	QWORD PTR [rsi], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 316  :         _InterlockedIncrement(&statistics_info.COUNT_DIV64);

	lock inc DWORD PTR statistics_info+8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1396 :     return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN1@PMC_DivRem
$LN14@PMC_DivRem:

; 1320 :                     __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 1321 :                     if (u_bit_count < v_bit_count)

	mov	r8, QWORD PTR [r14+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 600  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31
	bsr	eax, edx
	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1319 :                     __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_32(u_hi);

	movsxd	rax, ecx
	mov	ecx, 64					; 00000040H
	sub	rcx, rax

; 1320 :                     __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 1321 :                     if (u_bit_count < v_bit_count)

	xor	eax, eax
	cmp	rcx, r8
	jae	SHORT $LN20@PMC_DivRem

; 1322 :                     {
; 1323 :                         // 明らかに u < v である場合
; 1324 : 
; 1325 :                         // q = 0, r = u を返す。
; 1326 :                         *q = 0;

	mov	QWORD PTR [rdi], rax

; 1327 :                         *r = u;

	mov	QWORD PTR [rsi], rbx

; 1396 :     return (PMC_STATUS_OK);

	jmp	$LN1@PMC_DivRem
$LN20@PMC_DivRem:

; 1328 :                     }
; 1329 :                     else
; 1330 :                     {
; 1331 :                         // u のビット長が 33 以上 64 以下であり、かつ、u のビット長が v のビット長以上(v のビット長は多くとも64以下)である場合
; 1332 : 
; 1333 :                         if (nv->UNIT_BIT_COUNT <= sizeof(__UNIT_TYPE_DIV) * 8)

	cmp	r8, 32					; 00000020H
	ja	SHORT $LN22@PMC_DivRem

; 1334 :                         {
; 1335 :                             // v が 32bit で表現できる場合
; 1336 : 
; 1337 :                             __UNIT_TYPE_DIV u_buf[] = { u_lo, u_hi };
; 1338 :                             __UNIT_TYPE_DIV q_buf[] = { 0, 0, 0 };

	mov	QWORD PTR q_buf$6[rbp-105], rax

; 1339 :                             __UNIT_TYPE_DIV r_buf;
; 1340 : 
; 1341 :                             DivRem_X_1W(u_buf, countof(u_buf), (__UNIT_TYPE_DIV)nv->BLOCK[0], q_buf, &r_buf);

	lea	rcx, QWORD PTR r_buf$1[rbp-105]
	mov	DWORD PTR q_buf$6[rbp-97], eax
	lea	r9, QWORD PTR q_buf$6[rbp-105]
	mov	rax, QWORD PTR [r14+56]
	mov	DWORD PTR u_buf$2[rbp-101], edx
	mov	edx, 2
	mov	QWORD PTR [rsp+32], rcx
	lea	rcx, QWORD PTR u_buf$2[rbp-105]
	mov	DWORD PTR u_buf$2[rbp-105], ebx
	mov	r8d, DWORD PTR [rax]
	call	DivRem_X_1W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, DWORD PTR q_buf$6[rbp-105]
	mov	ecx, DWORD PTR q_buf$6[rbp-101]
	shl	rcx, 32					; 00000020H
	or	rcx, rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1344 :                             *r = r_buf;

	mov	eax, DWORD PTR r_buf$1[rbp-105]
	mov	QWORD PTR [rdi], rcx
	mov	QWORD PTR [rsi], rax

; 1396 :     return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@PMC_DivRem
$LN22@PMC_DivRem:

; 1345 :                         }
; 1346 :                         else
; 1347 :                         {
; 1348 :                             // v が 32bit では表現できない場合
; 1349 : 
; 1350 :                             // この場合、2 ワード / 2 ワード の除算となるため、_DIVREM_UNIT 単発では計算できない。
; 1351 :                             __UNIT_TYPE_DIV u_buf[] = { u_lo, u_hi };
; 1352 :                             __UNIT_TYPE_DIV q_buf[] = { 0, 0, 0 };// 演算結果を格納するためには u のビット数 - v のビット数 + 1 ビットだけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1353 :                             __UNIT_TYPE_DIV r_buf[] = { 0, 0, 0 }; // 演算結果を格納するためには v と同じ大きさだけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1354 :                             __UNIT_TYPE_DIV work_v_buf[] = { 0, 0 };
; 1355 :                             (*fp_DivRem_X_X)(u_buf, countof(u_buf), (__UNIT_TYPE_DIV*)nv->BLOCK, nv->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), work_v_buf, q_buf, r_buf);

	mov	r9, QWORD PTR [r14+8]
	lea	rcx, QWORD PTR u_buf$4[rbp-105]
	mov	r8, QWORD PTR [r14+56]
	mov	QWORD PTR q_buf$7[rbp-105], rax
	mov	DWORD PTR q_buf$7[rbp-97], eax
	mov	QWORD PTR r_buf$8[rbp-105], rax
	mov	DWORD PTR r_buf$8[rbp-97], eax
	mov	QWORD PTR work_v_buf$3[rbp-105], rax
	lea	rax, QWORD PTR r_buf$8[rbp-105]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR q_buf$7[rbp-105]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR work_v_buf$3[rbp-105]
	shl	r9, 3
	mov	DWORD PTR u_buf$4[rbp-101], edx
	mov	edx, 2
	shr	r9, 2
	mov	QWORD PTR [rsp+32], rax
	mov	DWORD PTR u_buf$4[rbp-105], ebx
	call	QWORD PTR fp_DivRem_X_X
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, DWORD PTR q_buf$7[rbp-105]
	mov	ecx, DWORD PTR q_buf$7[rbp-101]
	shl	rcx, 32					; 00000020H
	or	rcx, rax
	mov	eax, DWORD PTR r_buf$8[rbp-105]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1356 :                             *q = _FROMWORDTODWORD((_UINT32_T)q_buf[1], (_UINT32_T)q_buf[0]);

	mov	QWORD PTR [rdi], rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	ecx, DWORD PTR r_buf$8[rbp-101]
	shl	rcx, 32					; 00000020H
	or	rcx, rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1357 :                             *r = _FROMWORDTODWORD((_UINT32_T)r_buf[1], (_UINT32_T)r_buf[0]);

	mov	QWORD PTR [rsi], rcx

; 1396 :     return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@PMC_DivRem
$LN70@PMC_DivRem:

; 1245 :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN1@PMC_DivRem:

; 1397 : }

	mov	rcx, QWORD PTR __$ArrayPad$[rbp-105]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 160				; 000000a0H
	pop	r14
	pop	rdi
	pop	rsi
	pop	rbx
	pop	rbp
	ret	0
PMC_DivRem_L_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT PMC_DivRem_I_X
_TEXT	SEGMENT
u$ = 48
pos$1 = 56
v$ = 56
q$ = 64
r$ = 72
PMC_DivRem_I_X PROC					; COMDAT

; 1066 : {

$LN34:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	esi, ecx
	mov	rbx, r9
	mov	rdi, r8
	mov	rbp, rdx

; 1067 :     if (sizeof(__UNIT_TYPE_DIV) < sizeof(u))
; 1068 :     {
; 1069 :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 1070 :         return (PMC_STATUS_INTERNAL_ERROR);
; 1071 :     }
; 1072 :     if (v == NULL)

	test	rdx, rdx
	je	$LN32@PMC_DivRem

; 1073 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1074 :     if (q == NULL)

	test	r8, r8
	je	$LN32@PMC_DivRem

; 1075 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1076 :     if (r == NULL)

	test	rbx, rbx
	je	SHORT $LN32@PMC_DivRem

; 1078 :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 1079 :     PMC_STATUS_CODE result;
; 1080 :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	rcx, rdx
	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN1@PMC_DivRem

; 1081 :         return (result);
; 1082 :     if (nv->IS_ZERO)

	mov	eax, DWORD PTR [rbp+40]
	test	al, 2
	je	SHORT $LN7@PMC_DivRem

; 1083 :     {
; 1084 :         // v が 0 である場合
; 1085 : 
; 1086 :         // 0 による除算はエラーで返す
; 1087 :         return (PMC_STATUS_DIVISION_BY_ZERO);

	mov	eax, -3
	jmp	SHORT $LN1@PMC_DivRem
$LN7@PMC_DivRem:

; 1088 :     }
; 1089 :     if (u == 0)

	test	esi, esi
	jne	SHORT $LN8@PMC_DivRem

; 1090 :     {
; 1091 :         // u が 0 である場合
; 1092 : 
; 1093 :         // q = 0, r = 0 を返す
; 1094 :         *q = 0;

	xor	eax, eax
	mov	DWORD PTR [rdi], eax

; 1095 :         *r = 0;

	mov	DWORD PTR [rbx], eax

; 1141 :     return (PMC_STATUS_OK);

	jmp	SHORT $LN1@PMC_DivRem
$LN8@PMC_DivRem:

; 1096 :     }
; 1097 :     else
; 1098 :     {
; 1099 :         // u が 0 ではない場合
; 1100 : 
; 1101 :         if (nv->IS_ONE)

	test	al, 4
	je	SHORT $LN10@PMC_DivRem

; 1102 :         {
; 1103 :             // v が 1 である場合
; 1104 : 
; 1105 :             // q = u, r = 0 を返す
; 1106 :             *q = u;
; 1107 :             *r = 0;

	xor	eax, eax
	mov	DWORD PTR [rdi], esi
	mov	DWORD PTR [rbx], eax

; 1141 :     return (PMC_STATUS_OK);

	jmp	SHORT $LN1@PMC_DivRem
$LN10@PMC_DivRem:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 594  :         _BitScanReverse(&pos, x);

	bsr	ecx, esi

; 595  : #elif defined(__GNUC__)
; 596  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 597  : #else
; 598  : #error unknown compiler
; 599  : #endif
; 600  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31
	sub	eax, ecx
	mov	DWORD PTR pos$1[rsp], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1114 :             __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_32(u);

	cdqe
	mov	ecx, 32					; 00000020H
	sub	rcx, rax

; 1115 :             __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 1116 :             if (u_bit_count < v_bit_count)

	cmp	rcx, QWORD PTR [rbp+16]
	jae	SHORT $LN12@PMC_DivRem

; 1117 :             {
; 1118 :                 // 明らかに u < v である場合
; 1119 : 
; 1120 :                 // q = 0, r = u を返す。
; 1121 :                 *q = 0;

	xor	eax, eax
	mov	DWORD PTR [rdi], eax

; 1122 :                 *r = u;

	mov	DWORD PTR [rbx], esi

; 1141 :     return (PMC_STATUS_OK);

	jmp	SHORT $LN1@PMC_DivRem
$LN12@PMC_DivRem:

; 1130 :                 *q = _DIVREM_UNIT(0, u, (__UNIT_TYPE_DIV)nv->BLOCK[0], &temp_r);

	mov	rcx, QWORD PTR [rbp+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 384  :             return ((_UINT32_T)(t / v));

	xor	edx, edx
	mov	rax, rsi
	mov	r8d, DWORD PTR [rcx]
	div	r8
	xor	edx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1130 :                 *q = _DIVREM_UNIT(0, u, (__UNIT_TYPE_DIV)nv->BLOCK[0], &temp_r);

	mov	DWORD PTR [rdi], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 383  :             *r = (_UINT32_T)(t % v);

	mov	rax, rsi
	div	r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1131 :                 *r = temp_r;

	mov	DWORD PTR [rbx], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 316  :         _InterlockedIncrement(&statistics_info.COUNT_DIV64);

	lock inc DWORD PTR statistics_info+8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1141 :     return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@PMC_DivRem
$LN32@PMC_DivRem:

; 1077 :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN1@PMC_DivRem:

; 1142 : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_DivRem_I_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT Initialize_DivRem
_TEXT	SEGMENT
feature$ = 8
Initialize_DivRem PROC					; COMDAT

; 1738 : {

	mov	eax, DWORD PTR [rcx]

; 1739 :     fp_DivRem_X_X = feature->PROCESSOR_FEATURE_ADX && feature->PROCESSOR_FEATURE_BMI2 ? DivRem_X_X_using_ADX_MULX : DivRem_X_X_using_ADC_MUL;
; 1740 :     return (PMC_STATUS_OK);

	lea	rdx, OFFSET FLAT:DivRem_X_X_using_ADC_MUL
	and	eax, 10
	lea	rcx, OFFSET FLAT:DivRem_X_X_using_ADX_MULX
	cmp	al, 10
	cmovne	rcx, rdx
	xor	eax, eax
	mov	QWORD PTR fp_DivRem_X_X, rcx

; 1741 : }

	ret	0
Initialize_DivRem ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT DivRem_X_X
_TEXT	SEGMENT
r$1 = 80
u_buf$ = 80
u_count$ = 88
v_buf$ = 96
v_count$ = 104
work_v_buf$ = 112
q_buf$ = 120
r_buf$ = 128
DivRem_X_X PROC						; COMDAT

; 39   : {

$LN29:
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	r10, rdx

; 40   :     __UNIT_TYPE_DIV* u_buf_2 = (__UNIT_TYPE_DIV*)u_buf;

	lea	rax, QWORD PTR [rdx+rdx]

; 41   :     __UNIT_TYPE u_count_2 = u_count * (sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV));
; 42   :     __UNIT_TYPE_DIV* v_buf_2 = (__UNIT_TYPE_DIV*)v_buf;

	lea	rdi, QWORD PTR [r9+r9]

; 43   :     __UNIT_TYPE v_count_2 = v_count * (sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV));
; 44   :     if (sizeof(__UNIT_TYPE) != sizeof(__UNIT_TYPE_DIV))
; 45   :     {
; 46   :         if (u_buf_2[u_count_2 - 1] == 0)
; 47   :             --u_count_2;
; 48   :         if (v_buf_2[v_count_2 - 1] == 0)

	lea	rdx, QWORD PTR [rax-1]

; 49   :             --v_count_2;
; 50   :     }
; 51   :     if (v_count_2 == 1)

	lea	rsi, QWORD PTR [rdi-1]
	cmp	DWORD PTR [rcx+r10*8-4], 0
	cmovne	rdx, rax
	cmp	DWORD PTR [r8+r9*8-4], 0
	cmovne	rsi, rdi
	cmp	rsi, 1
	jne	SHORT $LN5@DivRem_X_X

; 52   :     {
; 53   :         if (u_count_2 == 1)

	mov	r8d, DWORD PTR [r8]
	cmp	rdx, rsi
	jne	SHORT $LN7@DivRem_X_X
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	edi, DWORD PTR [rcx]

; 384  :             return ((_UINT32_T)(t / v));

	xor	edx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 57   :             q_buf[0] = q;

	mov	rcx, QWORD PTR q_buf$[rsp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 384  :             return ((_UINT32_T)(t / v));

	mov	eax, edi
	div	r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 57   :             q_buf[0] = q;

	mov	edx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 383  :             *r = (_UINT32_T)(t % v);

	mov	eax, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 57   :             q_buf[0] = q;

	mov	QWORD PTR [rcx], rdx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 383  :             *r = (_UINT32_T)(t % v);

	xor	edx, edx
	div	r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 58   :             r_buf[0] = r;

	mov	rax, QWORD PTR r_buf$[rsp]
	mov	ecx, edx
	mov	QWORD PTR [rax], rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 310  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock inc DWORD PTR statistics_info+12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 83   : }

	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
$LN7@DivRem_X_X:

; 59   : #ifdef ENABLED_PERFORMANCE_COUNTER
; 60   :             if (sizeof(r) == sizeof(_UINT64_T))
; 61   :                 IncrementDIV64Counter();
; 62   :             else
; 63   :                 IncrementDIV32Counter();
; 64   : #endif
; 65   :         }
; 66   :         else
; 67   :         {
; 68   :             __UNIT_TYPE_DIV r;
; 69   :             DivRem_X_1W(u_buf_2, u_count_2, v_buf_2[0], (__UNIT_TYPE_DIV*)q_buf, &r);

	mov	r9, QWORD PTR q_buf$[rsp]
	lea	rax, QWORD PTR r$1[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	DivRem_X_1W

; 70   :             r_buf[0] = r;

	mov	rax, QWORD PTR r_buf$[rsp]
	mov	ecx, DWORD PTR r$1[rsp]
	mov	QWORD PTR [rax], rcx

; 83   : }

	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
$LN5@DivRem_X_X:

; 71   :         }
; 72   :     }
; 73   :     else
; 74   :     {
; 75   :         if (u_count_2 < v_count_2)

	cmp	rdx, rsi
	jae	SHORT $LN11@DivRem_X_X

; 77   :             q_buf[0] = 0;

	mov	rax, QWORD PTR q_buf$[rsp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 63   :         __movsq(d, s, count);

	mov	rsi, rcx
	mov	rdi, QWORD PTR r_buf$[rsp]
	mov	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 77   :             q_buf[0] = 0;

	mov	QWORD PTR [rax], 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 63   :         __movsq(d, s, count);

	rep movsq
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 83   : }

	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
$LN11@DivRem_X_X:

; 78   :             _COPY_MEMORY_UNIT(r_buf, u_buf, u_count);
; 79   :         }
; 80   :         else
; 81   :             (*fp_DivRem_X_X)(u_buf_2, u_count_2, v_buf_2, v_count_2, (__UNIT_TYPE_DIV*)work_v_buf, (__UNIT_TYPE_DIV*)q_buf, (__UNIT_TYPE_DIV*)r_buf);

	mov	r9, rsi

; 83   : }

	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 64					; 00000040H
	pop	rdi

; 78   :             _COPY_MEMORY_UNIT(r_buf, u_buf, u_count);
; 79   :         }
; 80   :         else
; 81   :             (*fp_DivRem_X_X)(u_buf_2, u_count_2, v_buf_2, v_count_2, (__UNIT_TYPE_DIV*)work_v_buf, (__UNIT_TYPE_DIV*)q_buf, (__UNIT_TYPE_DIV*)r_buf);

	rex_jmp	QWORD PTR fp_DivRem_X_X
DivRem_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT DivRem_X_1W
_TEXT	SEGMENT
u_buf$ = 8
u_buf_len$ = 16
v$ = 24
q_buf$ = 32
r_buf$ = 40
DivRem_X_1W PROC					; COMDAT

; 87   :     // u の最上位ワードは 0 でありうることに注意すること。
; 88   :     __UNIT_TYPE_DIV* up = u_buf + u_buf_len - 1;

	lea	rcx, QWORD PTR [rcx+rdx*4]
	mov	r11, rdx
	add	rcx, -4

; 89   :     __UNIT_TYPE_DIV* qp = q_buf + u_buf_len - 1;

	lea	r10, QWORD PTR [r9-4]
	lea	r10, QWORD PTR [r10+rdx*4]

; 90   :     __UNIT_TYPE u_count = u_buf_len;
; 91   :     if (sizeof(__UNIT_TYPE) != sizeof(__UNIT_TYPE_DIV))
; 92   :     {
; 93   :         while (*up == 0)

	cmp	DWORD PTR [rcx], 0
	jne	SHORT $LN3@DivRem_X_1
	npad	8
$LL2@DivRem_X_1:

; 94   :         {
; 95   :             --up;

	sub	rcx, 4

; 96   :             --qp;

	sub	r10, 4

; 97   :             --u_count;

	dec	r11
	cmp	DWORD PTR [rcx], 0
	je	SHORT $LL2@DivRem_X_1
$LN3@DivRem_X_1:

; 98   :         }
; 99   :     }
; 100  :     __UNIT_TYPE_DIV r = 0;
; 101  :     __UNIT_TYPE count = u_count >> 5;

	mov	r9, r11
	mov	r8d, r8d
	shr	r9, 5
	xor	edx, edx

; 102  :     while (count != 0)

	test	r9, r9
	je	$LN558@DivRem_X_1
	npad	11
$LL4@DivRem_X_1:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	shl	rax, 32					; 00000020H
	mov	edx, DWORD PTR [rcx]
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-4]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-4], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-8]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-8], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-12]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-12], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-16]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-16], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-20]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-20], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-24]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-24], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-28]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-28], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-32]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-32], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-36]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-36], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-40]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-40], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-44]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-44], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-48]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-48], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-52]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-52], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-56]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-56], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-60]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-60], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-64]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-64], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-68]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-68], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-72]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-72], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-76]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-76], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-80]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-80], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-84]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-84], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-88]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-88], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-92]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-92], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-96]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-96], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-100]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-100], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-104]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-104], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-108]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-108], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-112]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-112], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-116]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-116], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-120]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-120], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-124]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 136  :         up -= 32;

	add	rcx, -128				; ffffffffffffff80H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-124], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 137  :         qp -= 32;

	add	r10, -128				; ffffffffffffff80H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 333  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, 32					; 00000020H
	lock xadd DWORD PTR statistics_info+12, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 102  :     while (count != 0)

	sub	r9, 1
	jne	$LL4@DivRem_X_1
$LN558@DivRem_X_1:

; 138  :         --count;
; 139  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 140  :         if (sizeof(r) == sizeof(_UINT64_T))
; 141  :             AddToDIV64Counter(32);
; 142  :         else
; 143  :             AddToDIV32Counter(32);
; 144  : #endif
; 145  :     }
; 146  : 
; 147  :     if (u_count & 0x10)

	test	r11b, 16
	je	$LN415@DivRem_X_1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-4]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-4], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, DWORD PTR [rcx-8]
	mov	edx, edx
	shl	rdx, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-8], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-12]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-12], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-16]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-16], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-20]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-20], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-24]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-24], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-28]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-28], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-32]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-32], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-36]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-36], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-40]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-40], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-44]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-44], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-48]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-48], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-52]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-52], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-56]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-56], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 165  :         up -= 16;

	sub	rcx, 64					; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 166  :         qp -= 16;

	sub	r10, 64					; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 333  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, 16
	lock xadd DWORD PTR statistics_info+12, eax
$LN415@DivRem_X_1:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 175  :     if (u_count & 0x8)

	test	r11b, 8
	je	$LN483@DivRem_X_1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-4]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-4], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-8]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-8], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-12]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-12], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-16]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-16], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-20]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-20], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-24]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-24], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 185  :         up -= 8;

	sub	rcx, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 186  :         qp -= 8;

	sub	r10, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 333  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, 8
	lock xadd DWORD PTR statistics_info+12, eax
$LN483@DivRem_X_1:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 195  :     if (u_count & 0x4)

	test	r11b, 4
	je	SHORT $LN519@DivRem_X_1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-4]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-4], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-8]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-8], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 201  :         up -= 4;

	sub	rcx, 16
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 202  :         qp -= 4;

	sub	r10, 16
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 333  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, 4
	lock xadd DWORD PTR statistics_info+12, eax
$LN519@DivRem_X_1:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 211  :     if (u_count & 0x2)

	test	r11b, 2
	je	SHORT $LN539@DivRem_X_1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10], eax

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 215  :         up -= 2;

	sub	rcx, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 216  :         qp -= 2;

	sub	r10, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 333  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, 2
	lock xadd DWORD PTR statistics_info+12, eax
$LN539@DivRem_X_1:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 225  :     if (u_count & 0x1)

	test	r11b, 1
	je	SHORT $LN561@DivRem_X_1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 171  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 427  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 310  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock inc DWORD PTR statistics_info+12
$LN561@DivRem_X_1:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 239  : }

	mov	rax, QWORD PTR r_buf$[rsp]
	mov	DWORD PTR [rax], edx
	ret	0
DivRem_X_1W ENDP
_TEXT	ENDS
END
