; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	DivRem_X_1W
PUBLIC	Rem_X_1W
PUBLIC	DivRem_X_X
PUBLIC	Initialize_DivRem
PUBLIC	PMC_DivRem_I_X
PUBLIC	PMC_DivRem_L_X
PUBLIC	PMC_DivRem_X_I
PUBLIC	PMC_DivRem_X_L
PUBLIC	PMC_DivRem_X_X
EXTRN	AllocateBlock:PROC
EXTRN	DeallocateBlock:PROC
EXTRN	CheckBlockLight:PROC
EXTRN	AllocateNumber:PROC
EXTRN	DeallocateNumber:PROC
EXTRN	CommitNumber:PROC
EXTRN	CheckNumber:PROC
EXTRN	DuplicateNumber:PROC
EXTRN	RightShift_Imp_DIV:PROC
EXTRN	LeftShift_Imp_DIV:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	number_zero:BYTE
EXTRN	statistics_info:BYTE
EXTRN	__security_cookie:QWORD
_BSS	SEGMENT
fp_DivRem_X_X DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DivRem_X_X DD imagerel $LN33
	DD	imagerel $LN33+270
	DD	imagerel $unwind$DivRem_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_DivRem_I_X DD imagerel $LN37
	DD	imagerel $LN37+223
	DD	imagerel $unwind$PMC_DivRem_I_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_DivRem_L_X DD imagerel $LN85
	DD	imagerel $LN85+658
	DD	imagerel $unwind$PMC_DivRem_L_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_DivRem_X_I DD imagerel $LN29
	DD	imagerel $LN29+440
	DD	imagerel $unwind$PMC_DivRem_X_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_DivRem_X_L DD imagerel $LN74
	DD	imagerel $LN74+81
	DD	imagerel $unwind$PMC_DivRem_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PMC_DivRem_X_L DD imagerel $LN74+81
	DD	imagerel $LN74+816
	DD	imagerel $chain$1$PMC_DivRem_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PMC_DivRem_X_L DD imagerel $LN74+816
	DD	imagerel $LN74+828
	DD	imagerel $chain$2$PMC_DivRem_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PMC_DivRem_X_L DD imagerel $LN74+828
	DD	imagerel $LN74+933
	DD	imagerel $chain$3$PMC_DivRem_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$PMC_DivRem_X_L DD imagerel $LN74+933
	DD	imagerel $LN74+950
	DD	imagerel $chain$4$PMC_DivRem_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_DivRem_X_X DD imagerel $LN62
	DD	imagerel $LN62+109
	DD	imagerel $unwind$PMC_DivRem_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PMC_DivRem_X_X DD imagerel $LN62+109
	DD	imagerel $LN62+437
	DD	imagerel $chain$0$PMC_DivRem_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PMC_DivRem_X_X DD imagerel $LN62+437
	DD	imagerel $LN62+459
	DD	imagerel $chain$1$PMC_DivRem_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PMC_DivRem_X_X DD imagerel $LN62+459
	DD	imagerel $LN62+1149
	DD	imagerel $chain$2$PMC_DivRem_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PMC_DivRem_X_X DD imagerel $LN62+1149
	DD	imagerel $LN62+1159
	DD	imagerel $chain$3$PMC_DivRem_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_COPY_MEMORY_UNIT DD imagerel _COPY_MEMORY_UNIT
	DD	imagerel _COPY_MEMORY_UNIT+33
	DD	imagerel $unwind$_COPY_MEMORY_UNIT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_COPY_MEMORY_UNIT_DIV DD imagerel _COPY_MEMORY_UNIT_DIV
	DD	imagerel _COPY_MEMORY_UNIT_DIV+32
	DD	imagerel $unwind$_COPY_MEMORY_UNIT_DIV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CalculateQ_ DD imagerel CalculateQ_
	DD	imagerel CalculateQ_+252
	DD	imagerel $unwind$CalculateQ_
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CalculateQ_X DD imagerel CalculateQ_X
	DD	imagerel CalculateQ_X+252
	DD	imagerel $unwind$CalculateQ_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_MULTIPLY_DIGIT_UNIT_DIV DD imagerel _MULTIPLY_DIGIT_UNIT_DIV
	DD	imagerel _MULTIPLY_DIGIT_UNIT_DIV+64
	DD	imagerel $unwind$_MULTIPLY_DIGIT_UNIT_DIV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_MULTIPLYX_DIGIT_UNIT_DIV DD imagerel _MULTIPLYX_DIGIT_UNIT_DIV
	DD	imagerel _MULTIPLYX_DIGIT_UNIT_DIV+71
	DD	imagerel $unwind$_MULTIPLYX_DIGIT_UNIT_DIV
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$SubtructOneLine DD imagerel SubtructOneLine
	DD	imagerel SubtructOneLine+3192
	DD	imagerel $unwind$SubtructOneLine
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$SubtructOneLineX DD imagerel SubtructOneLineX
	DD	imagerel SubtructOneLineX+3382
	DD	imagerel $unwind$SubtructOneLineX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AddOneLine DD imagerel AddOneLine
	DD	imagerel AddOneLine+855
	DD	imagerel $unwind$AddOneLine
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$AddOneLineX DD imagerel AddOneLineX
	DD	imagerel AddOneLineX+927
	DD	imagerel $unwind$AddOneLineX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DivRem_X_X_using_ADC_MUL DD imagerel DivRem_X_X_using_ADC_MUL
	DD	imagerel DivRem_X_X_using_ADC_MUL+742
	DD	imagerel $unwind$DivRem_X_X_using_ADC_MUL
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$DivRem_X_X_using_ADX_MULX DD imagerel DivRem_X_X_using_ADX_MULX
	DD	imagerel DivRem_X_X_using_ADX_MULX+742
	DD	imagerel $unwind$DivRem_X_X_using_ADX_MULX
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DivRem_X_X_using_ADX_MULX DD 091101H
	DD	0f00dc211H
	DD	0d009e00bH
	DD	07005c007H
	DD	050036004H
	DD	03002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DivRem_X_X_using_ADC_MUL DD 091101H
	DD	0f00dc211H
	DD	0d009e00bH
	DD	07005c007H
	DD	050036004H
	DD	03002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AddOneLineX DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$AddOneLine DD 020501H
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$SubtructOneLineX DD 0a2001H
	DD	03f0120H
	DD	0e00ff011H
	DD	0c00bd00dH
	DD	060087009H
	DD	050063007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$SubtructOneLine DD 0a2001H
	DD	03f0120H
	DD	0e00ff011H
	DD	0c00bd00dH
	DD	060087009H
	DD	050063007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_MULTIPLYX_DIGIT_UNIT_DIV DD 020501H
	DD	023405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_MULTIPLY_DIGIT_UNIT_DIV DD 020501H
	DD	023405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CalculateQ_X DD 050701H
	DD	07005e007H
	DD	050036004H
	DD	03002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CalculateQ_ DD 050701H
	DD	07005e007H
	DD	050036004H
	DD	03002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_COPY_MEMORY_UNIT_DIV DD 040a01H
	DD	02740aH
	DD	016405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_COPY_MEMORY_UNIT DD 040a01H
	DD	02740aH
	DD	016405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PMC_DivRem_X_X DD 021H
	DD	imagerel $LN62
	DD	imagerel $LN62+109
	DD	imagerel $unwind$PMC_DivRem_X_X
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PMC_DivRem_X_X DD 020021H
	DD	0133400H
	DD	imagerel $LN62
	DD	imagerel $LN62+109
	DD	imagerel $unwind$PMC_DivRem_X_X
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PMC_DivRem_X_X DD 021H
	DD	imagerel $LN62
	DD	imagerel $LN62+109
	DD	imagerel $unwind$PMC_DivRem_X_X
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PMC_DivRem_X_X DD 020821H
	DD	0133408H
	DD	imagerel $LN62
	DD	imagerel $LN62+109
	DD	imagerel $unwind$PMC_DivRem_X_X
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_DivRem_X_X DD 081601H
	DD	0157416H
	DD	0146416H
	DD	0f00fd216H
	DD	0500be00dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$PMC_DivRem_X_L DD 021H
	DD	imagerel $LN74
	DD	imagerel $LN74+81
	DD	imagerel $unwind$PMC_DivRem_X_L
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PMC_DivRem_X_L DD 040021H
	DD	016d400H
	DD	0153400H
	DD	imagerel $LN74
	DD	imagerel $LN74+81
	DD	imagerel $unwind$PMC_DivRem_X_L
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PMC_DivRem_X_L DD 021H
	DD	imagerel $LN74
	DD	imagerel $LN74+81
	DD	imagerel $unwind$PMC_DivRem_X_L
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PMC_DivRem_X_L DD 041021H
	DD	016d410H
	DD	0153408H
	DD	imagerel $LN74
	DD	imagerel $LN74+81
	DD	imagerel $unwind$PMC_DivRem_X_L
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_DivRem_X_L DD 060f01H
	DD	0f008d20fH
	DD	07004e006H
	DD	050026003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_DivRem_X_I DD 081401H
	DD	0d6414H
	DD	0c5414H
	DD	0b3414H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_DivRem_L_X DD 072119H
	DD	01a0113H
	DD	07005e007H
	DD	030036004H
	DD	05002H
	DD	imagerel __GSHandlerCheck
	DD	0c0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_DivRem_I_X DD 081501H
	DD	097415H
	DD	086415H
	DD	063415H
	DD	0e0113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DivRem_X_X DD 040a01H
	DD	0b640aH
	DD	07006720aH
xdata	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT DivRem_X_X_using_ADX_MULX
_TEXT	SEGMENT
pos$1 = 48
value$1$ = 56
tv974 = 64
tv979 = 72
tv978 = 80
$T2 = 176
u_buf$ = 176
rh_mi$3 = 184
u_buf_len$ = 184
rh_hi$4 = 192
v_buf$ = 192
rh_mi$5 = 200
v_buf_len$ = 200
work_v_buf$ = 208
q_buf$ = 216
rh_hi$6 = 224
r_buf$ = 224
DivRem_X_X_using_ADX_MULX PROC				; COMDAT

; 1122 : {

	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 104				; 00000068H

; 1123 :     // u および v の最上位ワードは 0 でありうることに注意すること。
; 1124 :     if (sizeof(__UNIT_TYPE) != sizeof(__UNIT_TYPE_DIV))
; 1125 :     {
; 1126 :         while (u_buf[u_buf_len - 1] == 0)

	lea	rax, QWORD PTR [rcx-4]
	mov	rbp, r9
	cmp	DWORD PTR [rax+rdx*4], 0
	lea	rax, QWORD PTR [rax+rdx*4]
	mov	r14, r8
	mov	rbx, rdx
	mov	rsi, rcx
	jne	SHORT $LN100@DivRem_X_X
	npad	5
$LL2@DivRem_X_X:

; 1127 :             --u_buf_len;

	dec	rbx
	lea	rax, QWORD PTR [rax-4]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LL2@DivRem_X_X
$LN100@DivRem_X_X:

; 1128 :         while (v_buf[v_buf_len - 1] == 0)

	lea	rax, QWORD PTR [r9-1]
	cmp	DWORD PTR [r8+rax*4], 0
	lea	rax, QWORD PTR [r8+rax*4]
	jne	SHORT $LN5@DivRem_X_X
	npad	5
$LL4@DivRem_X_X:

; 1129 :             --v_buf_len;

	dec	rbp
	lea	rax, QWORD PTR [rax-4]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LL4@DivRem_X_X
$LN5@DivRem_X_X:

; 1130 :     }
; 1131 : 
; 1132 : #ifdef _DEBUG
; 1133 :     if (v_buf[v_buf_len - 1] == 0)
; 1134 :     {
; 1135 :         ; // このルートには到達しないはず。デバッグ用。
; 1136 :     }
; 1137 : #endif
; 1138 : 
; 1139 : #ifdef DO_TRACE
; 1140 :     ReportLabel("uとvのシフト");
; 1141 :     ReportDump("u", (__UNIT_TYPE*)u_buf, _DIVIDE_CEILING_UNIT(u_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1142 :     ReportDump("v", (__UNIT_TYPE*)v_buf, _DIVIDE_CEILING_UNIT(v_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1143 : #endif
; 1144 : 
; 1145 :     __UNIT_TYPE_DIV d_factor = _LZCNT_ALT_UNIT_DIV(v_buf[v_buf_len - 1]);

	mov	eax, DWORD PTR [r8+rbp*4-4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 653  :         if (x == 0)

	test	eax, eax
	jne	$LN19@DivRem_X_X

; 654  :             return (sizeof(x) * 8);

	mov	ecx, 32					; 00000020H
	mov	DWORD PTR $T2[rsp], ecx
$LN10@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1154 :         LeftShift_Imp_DIV(u_buf, u_buf_len, d_factor, r_buf, FALSE);

	mov	r15, QWORD PTR r_buf$[rsp]
	xor	r13d, r13d
	mov	edi, ecx
	mov	r9, r15
	mov	r8d, ecx
	mov	rdx, rbx
	mov	rcx, rsi
	mov	DWORD PTR [rsp+32], r13d
	call	LeftShift_Imp_DIV

; 1155 :         LeftShift_Imp_DIV(v_buf, v_buf_len, d_factor, work_v_buf, FALSE);

	mov	r12, QWORD PTR work_v_buf$[rsp]
	mov	r8d, edi
	mov	r9, r12
	mov	DWORD PTR [rsp+32], r13d
	mov	rdx, rbp
	mov	rcx, r14
	call	LeftShift_Imp_DIV
$LN11@DivRem_X_X:

; 1156 :     }
; 1157 : #ifdef DO_TRACE
; 1158 :     ReportDump("⇒u", (__UNIT_TYPE*)r_buf, _DIVIDE_CEILING_UNIT((u_buf_len + 1) * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1159 :     ReportDump("⇒v", (__UNIT_TYPE*)work_v_buf, _DIVIDE_CEILING_UNIT(v_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1160 : #endif
; 1161 : 
; 1162 :     __UNIT_TYPE_DIV* work_u_buf = r_buf;
; 1163 :     __UNIT_TYPE q_index = u_buf_len - v_buf_len;

	mov	eax, 2
	lea	rdx, QWORD PTR [rbp-1]
	sub	rax, rbp
	lea	rdi, QWORD PTR [rbp-2]
	shl	rax, 2
	lea	rdx, QWORD PTR [r12+rdx*4]
	mov	r14, rbx
	mov	QWORD PTR tv979[rsp], rdx
	sub	rax, r15
	lea	rdi, QWORD PTR [r12+rdi*4]
	sub	r14, rbp
	mov	QWORD PTR tv978[rsp], rdi
	add	rax, QWORD PTR q_buf$[rsp]
	lea	rsi, QWORD PTR [rbx-2]
	mov	QWORD PTR tv974[rsp], rax
	lea	rsi, QWORD PTR [r15+rsi*4]
	npad	6
$LL6@DivRem_X_X:

; 520  :     __UNIT_TYPE_DIV v1 = v_buf[v_buf_len - 1];

	mov	eax, DWORD PTR [rdx]
	mov	r8d, DWORD PTR [rsi+8]

; 521  :     __UNIT_TYPE_DIV v2 = v_buf[v_buf_len - 2];

	mov	r13d, eax
	mov	r10d, DWORD PTR [rsi+4]
	mov	r12d, DWORD PTR [rsi]
	mov	r9d, DWORD PTR [rdi]

; 399  :     if (uj == v1)

	cmp	r8d, eax
	jne	SHORT $LN30@DivRem_X_X

; 400  :         return (-1);

	mov	edi, -1					; ffffffffH
	jmp	SHORT $LN29@DivRem_X_X
$LN19@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 667  :         _BitScanReverse(&pos, x);

	bsr	eax, eax

; 668  : #elif defined(__GNUC__)
; 669  :         _UINT64_T pos;
; 670  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 671  : #else
; 672  : #error unknown compiler
; 673  : #endif
; 674  : #else
; 675  : #error unknown platform
; 676  : #endif
; 677  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31
	sub	ecx, eax
	mov	DWORD PTR pos$1[rsp], eax
	mov	DWORD PTR $T2[rsp], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1146 :     if (d_factor == 0)

	jne	$LN10@DivRem_X_X
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 76   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	r15, QWORD PTR r_buf$[rsp]
	mov	r12, QWORD PTR work_v_buf$[rsp]
	mov	rdi, r15
	mov	ecx, ebx
	rep movsd
	mov	ecx, ebp
	mov	rdi, r12
	mov	rsi, r14
	rep movsd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1150 :         r_buf[u_buf_len] = 0;

	mov	DWORD PTR [r15+rbx*4], 0

; 1151 :     }

	jmp	$LN11@DivRem_X_X
$LN30@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 313  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock inc DWORD PTR statistics_info+12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	rax, r8

; 385  :             return ((_UINT32_T)(t / v));

	xor	edx, edx

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	shl	rax, 32					; 00000020H
	or	rax, r10

; 385  :             return ((_UINT32_T)(t / v));

	div	r13
	mov	rdi, rax
$LN29@DivRem_X_X:

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	rax, r9
	mov	edx, edi
	imul	rax, rdx
	imul	rdx, r13
	mov	QWORD PTR value$1$[rsp], rax
	mov	r11, r9

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	eax, r10d

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	shr	r9, 32					; 00000020H

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sub	eax, edx
	mov	DWORD PTR rh_mi$3[rsp], eax
	mov	eax, r8d
	setb	cl

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	shr	rdx, 32					; 00000020H

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	cl, -1
	sbb	eax, edx
	mov	DWORD PTR rh_hi$6[rsp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2
	lock xadd DWORD PTR statistics_info+4, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 466  :     if (rh_hi > 0)

	cmp	DWORD PTR rh_hi$6[rsp], 0
	ja	SHORT $LN111@DivRem_X_X

; 467  :     {
; 468  : #ifdef DO_TRACE
; 469  :         ReportVar("result", 0);
; 470  : #endif
; 471  :         return (FALSE);
; 472  :     }
; 473  :     else if (lh_mi > rh_mi)

	cmp	r9d, DWORD PTR rh_mi$3[rsp]
	ja	SHORT $LN26@DivRem_X_X

; 474  :     {
; 475  : #ifdef DO_TRACE
; 476  :         ReportVar("result", 1);
; 477  : #endif
; 478  :         return (TRUE);
; 479  :     }
; 480  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN111@DivRem_X_X

; 530  :     if (!CheckQ_X(q_, uj, uj_1, uj_2, v1, v2))

	cmp	DWORD PTR value$1$[rsp], r12d
	jbe	SHORT $LN111@DivRem_X_X
$LN26@DivRem_X_X:

; 531  :         return (q_);
; 532  :     --q_;

	dec	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	ecx, edi
	imul	r11, rcx
	imul	rcx, r13

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	rdx, r11
	shr	rdx, 32					; 00000020H

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sub	r10d, ecx
	mov	DWORD PTR rh_mi$5[rsp], r10d
	setb	al

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	shr	rcx, 32					; 00000020H

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	al, -1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	r8d, ecx
	mov	DWORD PTR rh_hi$4[rsp], r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock xadd DWORD PTR statistics_info+4, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 466  :     if (rh_hi > 0)

	cmp	DWORD PTR rh_hi$4[rsp], 0
	ja	SHORT $LN111@DivRem_X_X

; 467  :     {
; 468  : #ifdef DO_TRACE
; 469  :         ReportVar("result", 0);
; 470  : #endif
; 471  :         return (FALSE);
; 472  :     }
; 473  :     else if (lh_mi > rh_mi)

	cmp	edx, DWORD PTR rh_mi$5[rsp]
	ja	SHORT $LN27@DivRem_X_X

; 474  :     {
; 475  : #ifdef DO_TRACE
; 476  :         ReportVar("result", 1);
; 477  : #endif
; 478  :         return (TRUE);
; 479  :     }
; 480  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN111@DivRem_X_X

; 533  :     if (!CheckQ_X(q_, uj, uj_1, uj_2, v1, v2))

	cmp	r11d, r12d
	jbe	SHORT $LN111@DivRem_X_X
$LN27@DivRem_X_X:

; 534  :         return (q_);
; 535  :     --q_;

	dec	edi
$LN111@DivRem_X_X:

; 1164 : 
; 1165 :     for (;;)
; 1166 :     {
; 1167 :         __UNIT_TYPE_DIV q_ = CalculateQ_X(work_u_buf, work_v_buf, v_buf_len, q_index);
; 1168 : 
; 1169 : #ifdef DO_TRACE
; 1170 :         ReportLabel("uの減算");
; 1171 :         ReportDump("u", (__UNIT_TYPE*)work_u_buf, _DIVIDE_CEILING_UNIT(u_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1172 :         ReportDump("v", (__UNIT_TYPE*)work_v_buf, _DIVIDE_CEILING_UNIT(v_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1173 :         ReportVar("q_", q_);
; 1174 : #endif
; 1175 :         if (SubtructOneLineX(work_u_buf, u_buf_len, work_v_buf, v_buf_len, q_index, q_))

	mov	r12, QWORD PTR work_v_buf$[rsp]
	mov	r9, rbp
	mov	r8, r12
	mov	DWORD PTR [rsp+40], edi
	mov	rdx, rbx
	mov	QWORD PTR [rsp+32], r14
	mov	rcx, r15
	call	SubtructOneLineX
	test	eax, eax
	je	SHORT $LN12@DivRem_X_X

; 1176 :         {
; 1177 : #ifdef DO_TRACE
; 1178 :             ReportDump("⇒u", (__UNIT_TYPE*)work_u_buf, _DIVIDE_CEILING_UNIT(u_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1179 : #endif
; 1180 :             // 桁借りが発生した場合
; 1181 : 
; 1182 : #ifdef DO_TRACE
; 1183 :             ReportLabel("uの加え戻しとq_の更新");
; 1184 :             ReportDump("u", (__UNIT_TYPE*)work_u_buf, _DIVIDE_CEILING_UNIT(u_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1185 : #endif
; 1186 :             --q_;

	dec	edi

; 1187 :             AddOneLineX(work_u_buf, u_buf_len, work_v_buf, v_buf_len, q_index);

	mov	QWORD PTR [rsp+32], r14
	mov	r9, rbp
	mov	r8, r12
	mov	rdx, rbx
	mov	rcx, r15
	call	AddOneLineX
$LN12@DivRem_X_X:

; 1188 : #ifdef DO_TRACE
; 1189 :             ReportVar("q_", q_);
; 1190 :             ReportDump("⇒u", (__UNIT_TYPE*)work_u_buf, _DIVIDE_CEILING_UNIT(u_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1191 : #endif
; 1192 :         }
; 1193 :         else
; 1194 :         {
; 1195 : #ifdef DO_TRACE
; 1196 :             ReportDump("⇒u", (__UNIT_TYPE*)work_u_buf, _DIVIDE_CEILING_UNIT(u_buf_len * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1197 : #endif
; 1198 :         }
; 1199 : 
; 1200 :         if (q_buf != NULL)

	cmp	QWORD PTR q_buf$[rsp], 0
	je	SHORT $LN14@DivRem_X_X

; 1201 :             q_buf[q_index] = q_;

	mov	rax, QWORD PTR tv974[rsp]
	mov	DWORD PTR [rsi+rax], edi
$LN14@DivRem_X_X:

; 1202 : 
; 1203 : #ifdef DO_TRACE
; 1204 :         ReportLabel("qの現在値");
; 1205 :         ReportDump("q", (__UNIT_TYPE*)q_buf, _DIVIDE_CEILING_UNIT((u_buf_len - v_buf_len) * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1206 : #endif
; 1207 : 
; 1208 :         if (q_index == 0)

	test	r14, r14
	je	SHORT $LN102@DivRem_X_X

; 1209 :             break;
; 1210 :         --q_index;
; 1211 :     }

	mov	rdx, QWORD PTR tv979[rsp]
	dec	r14
	mov	rdi, QWORD PTR tv978[rsp]
	sub	rsi, 4
	jmp	$LL6@DivRem_X_X
$LN102@DivRem_X_X:

; 1212 : 
; 1213 :     if (d_factor > 0)

	mov	eax, DWORD PTR $T2[rsp]
	test	eax, eax
	je	SHORT $LN16@DivRem_X_X

; 1214 :         RightShift_Imp_DIV(work_u_buf, u_buf_len + 1, d_factor, work_u_buf, FALSE);

	mov	r8d, eax
	mov	DWORD PTR [rsp+32], 0
	lea	rdx, QWORD PTR [rbx+1]
	mov	r9, r15
	mov	rcx, r15
	call	RightShift_Imp_DIV
$LN16@DivRem_X_X:

; 1215 : 
; 1216 : #ifdef DO_TRACE
; 1217 :     ReportLabel("計算終了");
; 1218 :     ReportDump("q", (__UNIT_TYPE*)q_buf, _DIVIDE_CEILING_UNIT((u_buf_len - v_buf_len) * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1219 :     ReportDump("r", (__UNIT_TYPE*)work_u_buf, _DIVIDE_CEILING_UNIT((u_buf_len + 1) * sizeof(__UNIT_TYPE_DIV), sizeof(__UNIT_TYPE)));
; 1220 : #endif
; 1221 : }

	add	rsp, 104				; 00000068H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
DivRem_X_X_using_ADX_MULX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT DivRem_X_X_using_ADC_MUL
_TEXT	SEGMENT
pos$1 = 48
value$1$ = 56
tv974 = 64
tv979 = 72
tv978 = 80
$T2 = 176
u_buf$ = 176
rh_mi$3 = 184
u_buf_len$ = 184
rh_hi$4 = 192
v_buf$ = 192
rh_mi$5 = 200
v_buf_len$ = 200
work_v_buf$ = 208
q_buf$ = 216
rh_hi$6 = 224
r_buf$ = 224
DivRem_X_X_using_ADC_MUL PROC				; COMDAT

; 1065 : {

	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 104				; 00000068H

; 1066 :     // u および v の最上位ワードは 0 でありうることに注意すること。
; 1067 :     if (sizeof(__UNIT_TYPE) != sizeof(__UNIT_TYPE_DIV))
; 1068 :     {
; 1069 :         while (u_buf[u_buf_len - 1] == 0)

	lea	rax, QWORD PTR [rcx-4]
	mov	rbp, r9
	cmp	DWORD PTR [rax+rdx*4], 0
	lea	rax, QWORD PTR [rax+rdx*4]
	mov	r14, r8
	mov	rbx, rdx
	mov	rsi, rcx
	jne	SHORT $LN99@DivRem_X_X
	npad	5
$LL2@DivRem_X_X:

; 1070 :             --u_buf_len;

	dec	rbx
	lea	rax, QWORD PTR [rax-4]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LL2@DivRem_X_X
$LN99@DivRem_X_X:

; 1071 :         while (v_buf[v_buf_len - 1] == 0)

	lea	rax, QWORD PTR [r9-1]
	cmp	DWORD PTR [r8+rax*4], 0
	lea	rax, QWORD PTR [r8+rax*4]
	jne	SHORT $LN5@DivRem_X_X
	npad	5
$LL4@DivRem_X_X:

; 1072 :             --v_buf_len;

	dec	rbp
	lea	rax, QWORD PTR [rax-4]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LL4@DivRem_X_X
$LN5@DivRem_X_X:

; 1073 :     }
; 1074 : 
; 1075 : #ifdef _DEBUG
; 1076 :     if (v_buf[v_buf_len - 1] == 0)
; 1077 :     {
; 1078 :         ; // このルートには到達しないはず。デバッグ用。
; 1079 :     }
; 1080 : #endif
; 1081 : 
; 1082 :     __UNIT_TYPE_DIV d_factor = _LZCNT_ALT_UNIT_DIV(v_buf[v_buf_len - 1]);

	mov	eax, DWORD PTR [r8+rbp*4-4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 653  :         if (x == 0)

	test	eax, eax
	jne	$LN18@DivRem_X_X

; 654  :             return (sizeof(x) * 8);

	mov	ecx, 32					; 00000020H
	mov	DWORD PTR $T2[rsp], ecx
$LN10@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1091 :         LeftShift_Imp_DIV(u_buf, u_buf_len, d_factor, r_buf, FALSE);

	mov	r15, QWORD PTR r_buf$[rsp]
	xor	r13d, r13d
	mov	edi, ecx
	mov	r9, r15
	mov	r8d, ecx
	mov	rdx, rbx
	mov	rcx, rsi
	mov	DWORD PTR [rsp+32], r13d
	call	LeftShift_Imp_DIV

; 1092 :         LeftShift_Imp_DIV(v_buf, v_buf_len, d_factor, work_v_buf, FALSE);

	mov	r12, QWORD PTR work_v_buf$[rsp]
	mov	r8d, edi
	mov	r9, r12
	mov	DWORD PTR [rsp+32], r13d
	mov	rdx, rbp
	mov	rcx, r14
	call	LeftShift_Imp_DIV
$LN11@DivRem_X_X:

; 1093 :     }
; 1094 : 
; 1095 :     __UNIT_TYPE_DIV* work_u_buf = r_buf;
; 1096 :     __UNIT_TYPE q_index = u_buf_len - v_buf_len;

	mov	eax, 2
	lea	rdx, QWORD PTR [rbp-1]
	sub	rax, rbp
	lea	rdi, QWORD PTR [rbp-2]
	shl	rax, 2
	lea	rdx, QWORD PTR [r12+rdx*4]
	mov	r14, rbx
	mov	QWORD PTR tv979[rsp], rdx
	sub	rax, r15
	lea	rdi, QWORD PTR [r12+rdi*4]
	sub	r14, rbp
	mov	QWORD PTR tv978[rsp], rdi
	add	rax, QWORD PTR q_buf$[rsp]
	lea	rsi, QWORD PTR [rbx-2]
	mov	QWORD PTR tv974[rsp], rax
	lea	rsi, QWORD PTR [r15+rsi*4]
	npad	6
$LL6@DivRem_X_X:

; 502  :     __UNIT_TYPE_DIV v1 = v_buf[v_buf_len - 1];

	mov	eax, DWORD PTR [rdx]
	mov	r8d, DWORD PTR [rsi+8]

; 503  :     __UNIT_TYPE_DIV v2 = v_buf[v_buf_len - 2];

	mov	r13d, eax
	mov	r10d, DWORD PTR [rsi+4]
	mov	r12d, DWORD PTR [rsi]
	mov	r9d, DWORD PTR [rdi]

; 399  :     if (uj == v1)

	cmp	r8d, eax
	jne	SHORT $LN29@DivRem_X_X

; 400  :         return (-1);

	mov	edi, -1					; ffffffffH
	jmp	SHORT $LN28@DivRem_X_X
$LN18@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 667  :         _BitScanReverse(&pos, x);

	bsr	eax, eax

; 668  : #elif defined(__GNUC__)
; 669  :         _UINT64_T pos;
; 670  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 671  : #else
; 672  : #error unknown compiler
; 673  : #endif
; 674  : #else
; 675  : #error unknown platform
; 676  : #endif
; 677  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31
	sub	ecx, eax
	mov	DWORD PTR pos$1[rsp], eax
	mov	DWORD PTR $T2[rsp], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1083 :     if (d_factor == 0)

	jne	$LN10@DivRem_X_X
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 76   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	r15, QWORD PTR r_buf$[rsp]
	mov	r12, QWORD PTR work_v_buf$[rsp]
	mov	rdi, r15
	mov	ecx, ebx
	rep movsd
	mov	ecx, ebp
	mov	rdi, r12
	mov	rsi, r14
	rep movsd
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1087 :         r_buf[u_buf_len] = 0;

	mov	DWORD PTR [r15+rbx*4], 0

; 1088 :     }

	jmp	$LN11@DivRem_X_X
$LN29@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 313  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock inc DWORD PTR statistics_info+12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	rax, r8

; 385  :             return ((_UINT32_T)(t / v));

	xor	edx, edx

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	shl	rax, 32					; 00000020H
	or	rax, r10

; 385  :             return ((_UINT32_T)(t / v));

	div	r13
	mov	rdi, rax
$LN28@DivRem_X_X:

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	rax, r9
	mov	edx, edi
	imul	rax, rdx
	imul	rdx, r13
	mov	QWORD PTR value$1$[rsp], rax
	mov	r11, r9

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	eax, r10d

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	shr	r9, 32					; 00000020H

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sub	eax, edx
	mov	DWORD PTR rh_mi$3[rsp], eax
	mov	eax, r8d
	setb	cl

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	shr	rdx, 32					; 00000020H

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	cl, -1
	sbb	eax, edx
	mov	DWORD PTR rh_hi$6[rsp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2
	lock xadd DWORD PTR statistics_info+4, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     if (rh_hi > 0)

	cmp	DWORD PTR rh_hi$6[rsp], 0
	ja	SHORT $LN110@DivRem_X_X

; 430  :         return (FALSE);
; 431  :     else if (lh_mi > rh_mi)

	cmp	r9d, DWORD PTR rh_mi$3[rsp]
	ja	SHORT $LN25@DivRem_X_X

; 432  :         return (TRUE);
; 433  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN110@DivRem_X_X

; 505  :     if (!CheckQ_(q_, uj, uj_1, uj_2, v1, v2))

	cmp	DWORD PTR value$1$[rsp], r12d
	jbe	SHORT $LN110@DivRem_X_X
$LN25@DivRem_X_X:

; 506  :         return (q_);
; 507  :     --q_;

	dec	edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	ecx, edi
	imul	r11, rcx
	imul	rcx, r13

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	rdx, r11
	shr	rdx, 32					; 00000020H

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sub	r10d, ecx
	mov	DWORD PTR rh_mi$5[rsp], r10d
	setb	al

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	shr	rcx, 32					; 00000020H

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	al, -1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	r8d, ecx
	mov	DWORD PTR rh_hi$4[rsp], r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock xadd DWORD PTR statistics_info+4, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     if (rh_hi > 0)

	cmp	DWORD PTR rh_hi$4[rsp], 0
	ja	SHORT $LN110@DivRem_X_X

; 430  :         return (FALSE);
; 431  :     else if (lh_mi > rh_mi)

	cmp	edx, DWORD PTR rh_mi$5[rsp]
	ja	SHORT $LN26@DivRem_X_X

; 432  :         return (TRUE);
; 433  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN110@DivRem_X_X

; 508  :     if (!CheckQ_(q_, uj, uj_1, uj_2, v1, v2))

	cmp	r11d, r12d
	jbe	SHORT $LN110@DivRem_X_X
$LN26@DivRem_X_X:

; 509  :         return (q_);
; 510  :     --q_;

	dec	edi
$LN110@DivRem_X_X:

; 1097 : 
; 1098 :     for (;;)
; 1099 :     {
; 1100 :         __UNIT_TYPE_DIV q_ = CalculateQ_(work_u_buf, work_v_buf, v_buf_len, q_index);
; 1101 : 
; 1102 : 
; 1103 :         if (SubtructOneLine(work_u_buf, u_buf_len, work_v_buf, v_buf_len, q_index, q_))

	mov	r12, QWORD PTR work_v_buf$[rsp]
	mov	r9, rbp
	mov	r8, r12
	mov	DWORD PTR [rsp+40], edi
	mov	rdx, rbx
	mov	QWORD PTR [rsp+32], r14
	mov	rcx, r15
	call	SubtructOneLine
	test	eax, eax
	je	SHORT $LN12@DivRem_X_X

; 1104 :         {
; 1105 :             // 桁借りが発生した場合
; 1106 :             --q_;

	dec	edi

; 1107 :             AddOneLine(work_u_buf, u_buf_len, work_v_buf, v_buf_len, q_index);

	mov	QWORD PTR [rsp+32], r14
	mov	r9, rbp
	mov	r8, r12
	mov	rdx, rbx
	mov	rcx, r15
	call	AddOneLine
$LN12@DivRem_X_X:

; 1108 :         }
; 1109 : 
; 1110 :         if (q_buf != NULL)

	cmp	QWORD PTR q_buf$[rsp], 0
	je	SHORT $LN13@DivRem_X_X

; 1111 :             q_buf[q_index] = q_;

	mov	rax, QWORD PTR tv974[rsp]
	mov	DWORD PTR [rsi+rax], edi
$LN13@DivRem_X_X:

; 1112 :         if (q_index == 0)

	test	r14, r14
	je	SHORT $LN101@DivRem_X_X

; 1113 :             break;
; 1114 :         --q_index;
; 1115 :     }

	mov	rdx, QWORD PTR tv979[rsp]
	dec	r14
	mov	rdi, QWORD PTR tv978[rsp]
	sub	rsi, 4
	jmp	$LL6@DivRem_X_X
$LN101@DivRem_X_X:

; 1116 : 
; 1117 :     if (d_factor > 0)

	mov	eax, DWORD PTR $T2[rsp]
	test	eax, eax
	je	SHORT $LN15@DivRem_X_X

; 1118 :         RightShift_Imp_DIV(work_u_buf, u_buf_len + 1, d_factor, work_u_buf, FALSE);

	mov	r8d, eax
	mov	DWORD PTR [rsp+32], 0
	lea	rdx, QWORD PTR [rbx+1]
	mov	r9, r15
	mov	rcx, r15
	call	RightShift_Imp_DIV
$LN15@DivRem_X_X:

; 1119 : }

	add	rsp, 104				; 00000068H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
DivRem_X_X_using_ADC_MUL ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT AddOneLineX
_TEXT	SEGMENT
u_buf$ = 48
u_buf_len$ = 56
v_buf$ = 64
v_buf_len$ = 72
q_index$ = 80
AddOneLineX PROC					; COMDAT

; 999  : {

	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1000 :     __UNIT_TYPE_DIV* u_ptr = &u_buf[q_index];

	mov	rax, QWORD PTR q_index$[rsp]
	mov	r10, r9

; 1001 :     __UNIT_TYPE_DIV* v_ptr = &v_buf[0];
; 1002 :     __UNIT_TYPE v_count = v_buf_len;
; 1003 :     char c = 0;
; 1004 : 
; 1005 :     // まず 32 ワードずつ加算をする。
; 1006 :     __UNIT_TYPE count = v_count >> 5;

	mov	r11, r10
	mov	rbx, rcx
	shr	r11, 5
	mov	rdi, rdx
	lea	r9, QWORD PTR [rcx+rax*4]
	xor	cl, cl

; 1007 :     while (count != 0)

	test	r11, r11
	je	$LN3@AddOneLine
	npad	2
$LL2@AddOneLine:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1307 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [r9]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	cl, -1
	adcx	eax, DWORD PTR [r8]
	mov	DWORD PTR [r9], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1308 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [r9+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+4]
	mov	DWORD PTR [r9+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1309 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [r9+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+8]
	mov	DWORD PTR [r9+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1310 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [r9+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+12]
	mov	DWORD PTR [r9+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1311 :     c = _ADDX_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [r9+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+16]
	mov	DWORD PTR [r9+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1312 :     c = _ADDX_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [r9+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+20]
	mov	DWORD PTR [r9+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1313 :     c = _ADDX_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [r9+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+24]
	mov	DWORD PTR [r9+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1314 :     c = _ADDX_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, DWORD PTR [r9+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+28]
	mov	DWORD PTR [r9+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1315 :     c = _ADDX_UNIT_DIV(c, xp[8], yp[8], &zp[8]);

	mov	eax, DWORD PTR [r9+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+32]
	mov	DWORD PTR [r9+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1316 :     c = _ADDX_UNIT_DIV(c, xp[9], yp[9], &zp[9]);

	mov	eax, DWORD PTR [r9+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+36]
	mov	DWORD PTR [r9+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1317 :     c = _ADDX_UNIT_DIV(c, xp[10], yp[10], &zp[10]);

	mov	eax, DWORD PTR [r9+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+40]
	mov	DWORD PTR [r9+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1318 :     c = _ADDX_UNIT_DIV(c, xp[11], yp[11], &zp[11]);

	mov	eax, DWORD PTR [r9+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+44]
	mov	DWORD PTR [r9+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1319 :     c = _ADDX_UNIT_DIV(c, xp[12], yp[12], &zp[12]);

	mov	eax, DWORD PTR [r9+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+48]
	mov	DWORD PTR [r9+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1320 :     c = _ADDX_UNIT_DIV(c, xp[13], yp[13], &zp[13]);

	mov	eax, DWORD PTR [r9+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+52]
	mov	DWORD PTR [r9+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1321 :     c = _ADDX_UNIT_DIV(c, xp[14], yp[14], &zp[14]);

	mov	eax, DWORD PTR [r9+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+56]
	mov	DWORD PTR [r9+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1322 :     c = _ADDX_UNIT_DIV(c, xp[15], yp[15], &zp[15]);

	mov	eax, DWORD PTR [r9+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+60]
	mov	DWORD PTR [r9+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1323 :     c = _ADDX_UNIT_DIV(c, xp[16], yp[16], &zp[16]);

	mov	eax, DWORD PTR [r9+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+64]
	mov	DWORD PTR [r9+64], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1324 :     c = _ADDX_UNIT_DIV(c, xp[17], yp[17], &zp[17]);

	mov	eax, DWORD PTR [r9+68]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+68]
	mov	DWORD PTR [r9+68], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1325 :     c = _ADDX_UNIT_DIV(c, xp[18], yp[18], &zp[18]);

	mov	eax, DWORD PTR [r9+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+72]
	mov	DWORD PTR [r9+72], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1326 :     c = _ADDX_UNIT_DIV(c, xp[19], yp[19], &zp[19]);

	mov	eax, DWORD PTR [r9+76]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+76]
	mov	DWORD PTR [r9+76], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1327 :     c = _ADDX_UNIT_DIV(c, xp[20], yp[20], &zp[20]);

	mov	eax, DWORD PTR [r9+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+80]
	mov	DWORD PTR [r9+80], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1328 :     c = _ADDX_UNIT_DIV(c, xp[21], yp[21], &zp[21]);

	mov	eax, DWORD PTR [r9+84]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+84]
	mov	DWORD PTR [r9+84], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1329 :     c = _ADDX_UNIT_DIV(c, xp[22], yp[22], &zp[22]);

	mov	eax, DWORD PTR [r9+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+88]
	mov	DWORD PTR [r9+88], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1330 :     c = _ADDX_UNIT_DIV(c, xp[23], yp[23], &zp[23]);

	mov	eax, DWORD PTR [r9+92]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+92]
	mov	DWORD PTR [r9+92], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1331 :     c = _ADDX_UNIT_DIV(c, xp[24], yp[24], &zp[24]);

	mov	eax, DWORD PTR [r9+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+96]
	mov	DWORD PTR [r9+96], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1332 :     c = _ADDX_UNIT_DIV(c, xp[25], yp[25], &zp[25]);

	mov	eax, DWORD PTR [r9+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+100]
	mov	DWORD PTR [r9+100], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1333 :     c = _ADDX_UNIT_DIV(c, xp[26], yp[26], &zp[26]);

	mov	eax, DWORD PTR [r9+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+104]
	mov	DWORD PTR [r9+104], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1334 :     c = _ADDX_UNIT_DIV(c, xp[27], yp[27], &zp[27]);

	mov	eax, DWORD PTR [r9+108]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+108]
	mov	DWORD PTR [r9+108], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1335 :     c = _ADDX_UNIT_DIV(c, xp[28], yp[28], &zp[28]);

	mov	eax, DWORD PTR [r9+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+112]
	mov	DWORD PTR [r9+112], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1336 :     c = _ADDX_UNIT_DIV(c, xp[29], yp[29], &zp[29]);

	mov	eax, DWORD PTR [r9+116]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+116]
	mov	DWORD PTR [r9+116], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1337 :     c = _ADDX_UNIT_DIV(c, xp[30], yp[30], &zp[30]);

	mov	eax, DWORD PTR [r9+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+120]
	mov	DWORD PTR [r9+120], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1338 :     c = _ADDX_UNIT_DIV(c, xp[31], yp[31], &zp[31]);

	mov	eax, DWORD PTR [r9+124]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+124]
	mov	DWORD PTR [r9+124], eax
	setb	cl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1010 :         u_ptr += 32;

	sub	r9, -128				; ffffffffffffff80H

; 1011 :         v_ptr += 32;

	sub	r8, -128				; ffffffffffffff80H

; 1012 :         --count;

	sub	r11, 1
	jne	$LL2@AddOneLine
$LN3@AddOneLine:

; 1013 :     }
; 1014 :     // この時点で未処理の桁は 32 ワード未満のはず
; 1015 : 
; 1016 :     // 未処理の桁が 16 ワード以上あるなら 16 ワード加算を行う。
; 1017 :     if (v_count & 0x10)

	test	r10b, 16
	je	SHORT $LN4@AddOneLine

; 1018 :     {
; 1019 :         c = _ADD_16WORDS_ADCX_DIV(c, u_ptr, v_ptr, u_ptr);

	mov	rdx, r9
	call	_ADD_16WORDS_ADCX_DIV

; 1020 :         u_ptr += 16;

	add	r9, 64					; 00000040H
	movzx	ecx, al

; 1021 :         v_ptr += 16;

	add	r8, 64					; 00000040H
$LN4@AddOneLine:

; 1022 :     }
; 1023 :     // この時点で未処理の桁は 16 ワード未満のはず
; 1024 : 
; 1025 :     // 未処理の桁が 8 ワード以上あるなら 8 ワード加算を行う。
; 1026 :     if (v_count & 0x8)

	test	r10b, 8
	je	$LN5@AddOneLine
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3619 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [r9]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	cl, -1
	adcx	eax, DWORD PTR [r8]
	mov	DWORD PTR [r9], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3620 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [r9+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+4]
	mov	DWORD PTR [r9+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3621 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [r9+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+8]
	mov	DWORD PTR [r9+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3622 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [r9+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+12]
	mov	DWORD PTR [r9+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3623 :     c = _ADDX_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [r9+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+16]
	mov	DWORD PTR [r9+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3624 :     c = _ADDX_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [r9+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+20]
	mov	DWORD PTR [r9+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3625 :     c = _ADDX_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [r9+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+24]
	mov	DWORD PTR [r9+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3626 :     c = _ADDX_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, DWORD PTR [r9+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+28]
	mov	DWORD PTR [r9+28], eax
	setb	cl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1029 :         u_ptr += 8;

	add	r9, 32					; 00000020H

; 1030 :         v_ptr += 8;

	add	r8, 32					; 00000020H
$LN5@AddOneLine:

; 1031 :     }
; 1032 :     // この時点で未処理の桁は 8 ワード未満のはず
; 1033 : 
; 1034 :     // 未処理の桁が 4 ワード以上あるなら 4 ワード加算を行う。
; 1035 :     if (v_count & 0x4)

	test	r10b, 4
	je	SHORT $LN6@AddOneLine
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4159 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [r9]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	cl, -1
	adcx	eax, DWORD PTR [r8]
	mov	DWORD PTR [r9], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4160 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [r9+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+4]
	mov	DWORD PTR [r9+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4161 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [r9+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+8]
	mov	DWORD PTR [r9+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4162 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [r9+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+12]
	mov	DWORD PTR [r9+12], eax
	setb	cl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1038 :         u_ptr += 4;

	add	r9, 16

; 1039 :         v_ptr += 4;

	add	r8, 16
$LN6@AddOneLine:

; 1040 :     }
; 1041 :     // この時点で未処理の桁は 4 ワード未満のはず
; 1042 : 
; 1043 :     // 未処理の桁が 2 ワード以上あるなら 2 ワード加算を行う。
; 1044 :     if (v_count & 0x2)

	test	r10b, 2
	je	SHORT $LN7@AddOneLine
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4545 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [r9]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	cl, -1
	adcx	eax, DWORD PTR [r8]
	mov	DWORD PTR [r9], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4546 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [r9+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+4]
	mov	DWORD PTR [r9+4], eax
	setb	cl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1047 :         u_ptr += 2;

	add	r9, 8

; 1048 :         v_ptr += 2;

	add	r8, 8
$LN7@AddOneLine:

; 1049 :     }
; 1050 :     // この時点で未処理の桁は 2 ワード未満のはず
; 1051 : 
; 1052 :     // 未処理の桁が 1 ワード以上あるなら 1 ワード加算を行う。
; 1053 :     if (v_count & 0x1)

	test	r10b, 1
	je	SHORT $LN8@AddOneLine

; 1054 :     {
; 1055 :         c = _ADD_UNIT_DIV(c, *u_ptr, *v_ptr, u_ptr);

	mov	eax, DWORD PTR [r9]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	cl, -1
	adc	eax, DWORD PTR [r8]
	mov	DWORD PTR [r9], eax
	setb	cl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1056 :         ++u_ptr;

	add	r9, 4
$LN8@AddOneLine:

; 1057 :         ++v_ptr;
; 1058 :     }
; 1059 : 
; 1060 :     // 残りの桁の繰り上がりを計算する。
; 1061 :     DoCarry(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr);

	lea	rdx, QWORD PTR [rdi*4+4]
	sub	rdx, r9
	add	rdx, rbx
	sar	rdx, 2

; 908  :         if (u_count <= 0)

	test	rdx, rdx
	je	SHORT $LN131@AddOneLine
$LL113@AddOneLine:

; 909  :         {
; 910  :             // u の最上位まで達してしまった場合
; 911  :             return;
; 912  :         }
; 913  :         else if (c)

	test	cl, cl
	je	SHORT $LN131@AddOneLine

; 914  :         {
; 915  :             // u の最上位に達しておらず、かつキャリーが立っている場合
; 916  : 
; 917  :             // 繰り上がりを継続する
; 918  :             c = _ADD_UNIT_DIV(c, *u_ptr, 0, u_ptr);

	mov	eax, DWORD PTR [r9]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	cl, -1
	adc	eax, 0
	mov	DWORD PTR [r9], eax
	setb	cl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 919  :             ++u_ptr;

	add	r9, 4

; 920  :             --u_count;

	sub	rdx, 1
	jne	SHORT $LL113@AddOneLine
$LN131@AddOneLine:

; 1062 : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
AddOneLineX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT AddOneLine
_TEXT	SEGMENT
u_buf$ = 8
u_buf_len$ = 16
v_buf$ = 24
v_buf_len$ = 32
q_index$ = 40
AddOneLine PROC						; COMDAT

; 933  : {

	mov	QWORD PTR [rsp+8], rbx

; 934  :     __UNIT_TYPE_DIV* u_ptr = &u_buf[q_index];

	mov	rax, QWORD PTR q_index$[rsp]

; 935  :     __UNIT_TYPE_DIV* v_ptr = &v_buf[0];
; 936  :     __UNIT_TYPE v_count = v_buf_len;
; 937  :     char c = 0;
; 938  : 
; 939  :     // まず 32 ワードずつ加算をする。
; 940  :     __UNIT_TYPE count = v_count >> 5;

	mov	r11, r9
	shr	r11, 5
	xor	r10b, r10b
	mov	rbx, rcx
	lea	rax, QWORD PTR [rcx+rax*4]

; 941  :     while (count != 0)

	test	r11, r11
	je	$LN3@AddOneLine
	npad	12
$LL2@AddOneLine:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1054 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	r10b, -1
	adc	ecx, DWORD PTR [r8]
	mov	DWORD PTR [rax], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1055 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	ecx, DWORD PTR [rax+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+4]
	mov	DWORD PTR [rax+4], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1056 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	ecx, DWORD PTR [rax+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+8]
	mov	DWORD PTR [rax+8], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1057 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	ecx, DWORD PTR [rax+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+12]
	mov	DWORD PTR [rax+12], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1058 :     c = _ADD_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	ecx, DWORD PTR [rax+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+16]
	mov	DWORD PTR [rax+16], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1059 :     c = _ADD_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	ecx, DWORD PTR [rax+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+20]
	mov	DWORD PTR [rax+20], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1060 :     c = _ADD_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	ecx, DWORD PTR [rax+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+24]
	mov	DWORD PTR [rax+24], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1061 :     c = _ADD_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	ecx, DWORD PTR [rax+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+28]
	mov	DWORD PTR [rax+28], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1062 :     c = _ADD_UNIT_DIV(c, xp[8], yp[8], &zp[8]);

	mov	ecx, DWORD PTR [rax+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+32]
	mov	DWORD PTR [rax+32], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1063 :     c = _ADD_UNIT_DIV(c, xp[9], yp[9], &zp[9]);

	mov	ecx, DWORD PTR [rax+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+36]
	mov	DWORD PTR [rax+36], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1064 :     c = _ADD_UNIT_DIV(c, xp[10], yp[10], &zp[10]);

	mov	ecx, DWORD PTR [rax+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+40]
	mov	DWORD PTR [rax+40], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1065 :     c = _ADD_UNIT_DIV(c, xp[11], yp[11], &zp[11]);

	mov	ecx, DWORD PTR [rax+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+44]
	mov	DWORD PTR [rax+44], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1066 :     c = _ADD_UNIT_DIV(c, xp[12], yp[12], &zp[12]);

	mov	ecx, DWORD PTR [rax+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+48]
	mov	DWORD PTR [rax+48], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1067 :     c = _ADD_UNIT_DIV(c, xp[13], yp[13], &zp[13]);

	mov	ecx, DWORD PTR [rax+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+52]
	mov	DWORD PTR [rax+52], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1068 :     c = _ADD_UNIT_DIV(c, xp[14], yp[14], &zp[14]);

	mov	ecx, DWORD PTR [rax+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+56]
	mov	DWORD PTR [rax+56], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1069 :     c = _ADD_UNIT_DIV(c, xp[15], yp[15], &zp[15]);

	mov	ecx, DWORD PTR [rax+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+60]
	mov	DWORD PTR [rax+60], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1070 :     c = _ADD_UNIT_DIV(c, xp[16], yp[16], &zp[16]);

	mov	ecx, DWORD PTR [rax+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+64]
	mov	DWORD PTR [rax+64], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1071 :     c = _ADD_UNIT_DIV(c, xp[17], yp[17], &zp[17]);

	mov	ecx, DWORD PTR [rax+68]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+68]
	mov	DWORD PTR [rax+68], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1072 :     c = _ADD_UNIT_DIV(c, xp[18], yp[18], &zp[18]);

	mov	ecx, DWORD PTR [rax+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+72]
	mov	DWORD PTR [rax+72], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1073 :     c = _ADD_UNIT_DIV(c, xp[19], yp[19], &zp[19]);

	mov	ecx, DWORD PTR [rax+76]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+76]
	mov	DWORD PTR [rax+76], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1074 :     c = _ADD_UNIT_DIV(c, xp[20], yp[20], &zp[20]);

	mov	ecx, DWORD PTR [rax+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+80]
	mov	DWORD PTR [rax+80], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1075 :     c = _ADD_UNIT_DIV(c, xp[21], yp[21], &zp[21]);

	mov	ecx, DWORD PTR [rax+84]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+84]
	mov	DWORD PTR [rax+84], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1076 :     c = _ADD_UNIT_DIV(c, xp[22], yp[22], &zp[22]);

	mov	ecx, DWORD PTR [rax+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+88]
	mov	DWORD PTR [rax+88], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1077 :     c = _ADD_UNIT_DIV(c, xp[23], yp[23], &zp[23]);

	mov	ecx, DWORD PTR [rax+92]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+92]
	mov	DWORD PTR [rax+92], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1078 :     c = _ADD_UNIT_DIV(c, xp[24], yp[24], &zp[24]);

	mov	ecx, DWORD PTR [rax+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+96]
	mov	DWORD PTR [rax+96], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1079 :     c = _ADD_UNIT_DIV(c, xp[25], yp[25], &zp[25]);

	mov	ecx, DWORD PTR [rax+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+100]
	mov	DWORD PTR [rax+100], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1080 :     c = _ADD_UNIT_DIV(c, xp[26], yp[26], &zp[26]);

	mov	ecx, DWORD PTR [rax+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+104]
	mov	DWORD PTR [rax+104], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1081 :     c = _ADD_UNIT_DIV(c, xp[27], yp[27], &zp[27]);

	mov	ecx, DWORD PTR [rax+108]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+108]
	mov	DWORD PTR [rax+108], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1082 :     c = _ADD_UNIT_DIV(c, xp[28], yp[28], &zp[28]);

	mov	ecx, DWORD PTR [rax+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+112]
	mov	DWORD PTR [rax+112], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1083 :     c = _ADD_UNIT_DIV(c, xp[29], yp[29], &zp[29]);

	mov	ecx, DWORD PTR [rax+116]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+116]
	mov	DWORD PTR [rax+116], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1084 :     c = _ADD_UNIT_DIV(c, xp[30], yp[30], &zp[30]);

	mov	ecx, DWORD PTR [rax+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+120]
	mov	DWORD PTR [rax+120], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1085 :     c = _ADD_UNIT_DIV(c, xp[31], yp[31], &zp[31]);

	mov	ecx, DWORD PTR [rax+124]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+124]
	mov	DWORD PTR [rax+124], ecx
	setb	r10b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 944  :         u_ptr += 32;

	sub	rax, -128				; ffffffffffffff80H

; 945  :         v_ptr += 32;

	sub	r8, -128				; ffffffffffffff80H

; 946  :         --count;

	sub	r11, 1
	jne	$LL2@AddOneLine
$LN3@AddOneLine:

; 947  :     }
; 948  :     // この時点で未処理の桁は 32 ワード未満のはず
; 949  : 
; 950  :     // 未処理の桁が 16 ワード以上あるなら 16 ワード加算を行う。
; 951  :     if (v_count & 0x10)

	test	r9b, 16
	je	$LN4@AddOneLine
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2630 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	r10b, -1
	adc	ecx, DWORD PTR [r8]
	mov	DWORD PTR [rax], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2631 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	ecx, DWORD PTR [rax+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+4]
	mov	DWORD PTR [rax+4], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2632 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	ecx, DWORD PTR [rax+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+8]
	mov	DWORD PTR [rax+8], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2633 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	ecx, DWORD PTR [rax+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+12]
	mov	DWORD PTR [rax+12], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2634 :     c = _ADD_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	ecx, DWORD PTR [rax+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+16]
	mov	DWORD PTR [rax+16], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2635 :     c = _ADD_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	ecx, DWORD PTR [rax+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+20]
	mov	DWORD PTR [rax+20], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2636 :     c = _ADD_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	ecx, DWORD PTR [rax+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+24]
	mov	DWORD PTR [rax+24], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2637 :     c = _ADD_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	ecx, DWORD PTR [rax+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+28]
	mov	DWORD PTR [rax+28], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2638 :     c = _ADD_UNIT_DIV(c, xp[8], yp[8], &zp[8]);

	mov	ecx, DWORD PTR [rax+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+32]
	mov	DWORD PTR [rax+32], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2639 :     c = _ADD_UNIT_DIV(c, xp[9], yp[9], &zp[9]);

	mov	ecx, DWORD PTR [rax+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+36]
	mov	DWORD PTR [rax+36], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2640 :     c = _ADD_UNIT_DIV(c, xp[10], yp[10], &zp[10]);

	mov	ecx, DWORD PTR [rax+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+40]
	mov	DWORD PTR [rax+40], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2641 :     c = _ADD_UNIT_DIV(c, xp[11], yp[11], &zp[11]);

	mov	ecx, DWORD PTR [rax+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+44]
	mov	DWORD PTR [rax+44], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2642 :     c = _ADD_UNIT_DIV(c, xp[12], yp[12], &zp[12]);

	mov	ecx, DWORD PTR [rax+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+48]
	mov	DWORD PTR [rax+48], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2643 :     c = _ADD_UNIT_DIV(c, xp[13], yp[13], &zp[13]);

	mov	ecx, DWORD PTR [rax+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+52]
	mov	DWORD PTR [rax+52], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2644 :     c = _ADD_UNIT_DIV(c, xp[14], yp[14], &zp[14]);

	mov	ecx, DWORD PTR [rax+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+56]
	mov	DWORD PTR [rax+56], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2645 :     c = _ADD_UNIT_DIV(c, xp[15], yp[15], &zp[15]);

	mov	ecx, DWORD PTR [rax+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+60]
	mov	DWORD PTR [rax+60], ecx
	setb	r10b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 954  :         u_ptr += 16;

	add	rax, 64					; 00000040H

; 955  :         v_ptr += 16;

	add	r8, 64					; 00000040H
$LN4@AddOneLine:

; 956  :     }
; 957  :     // この時点で未処理の桁は 16 ワード未満のはず
; 958  : 
; 959  :     // 未処理の桁が 8 ワード以上あるなら 8 ワード加算を行う。
; 960  :     if (v_count & 0x8)

	test	r9b, 8
	je	SHORT $LN5@AddOneLine
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3534 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	r10b, -1
	adc	ecx, DWORD PTR [r8]
	mov	DWORD PTR [rax], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3535 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	ecx, DWORD PTR [rax+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+4]
	mov	DWORD PTR [rax+4], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3536 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	ecx, DWORD PTR [rax+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+8]
	mov	DWORD PTR [rax+8], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3537 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	ecx, DWORD PTR [rax+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+12]
	mov	DWORD PTR [rax+12], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3538 :     c = _ADD_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	ecx, DWORD PTR [rax+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+16]
	mov	DWORD PTR [rax+16], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3539 :     c = _ADD_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	ecx, DWORD PTR [rax+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+20]
	mov	DWORD PTR [rax+20], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3540 :     c = _ADD_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	ecx, DWORD PTR [rax+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+24]
	mov	DWORD PTR [rax+24], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3541 :     c = _ADD_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	ecx, DWORD PTR [rax+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+28]
	mov	DWORD PTR [rax+28], ecx
	setb	r10b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 963  :         u_ptr += 8;

	add	rax, 32					; 00000020H

; 964  :         v_ptr += 8;

	add	r8, 32					; 00000020H
$LN5@AddOneLine:

; 965  :     }
; 966  :     // この時点で未処理の桁は 8 ワード未満のはず
; 967  : 
; 968  :     // 未処理の桁が 4 ワード以上あるなら 4 ワード加算を行う。
; 969  :     if (v_count & 0x4)

	test	r9b, 4
	je	SHORT $LN6@AddOneLine
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4102 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	r10b, -1
	adc	ecx, DWORD PTR [r8]
	mov	DWORD PTR [rax], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4103 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	ecx, DWORD PTR [rax+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+4]
	mov	DWORD PTR [rax+4], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4104 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	ecx, DWORD PTR [rax+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+8]
	mov	DWORD PTR [rax+8], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4105 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	ecx, DWORD PTR [rax+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+12]
	mov	DWORD PTR [rax+12], ecx
	setb	r10b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 972  :         u_ptr += 4;

	add	rax, 16

; 973  :         v_ptr += 4;

	add	r8, 16
$LN6@AddOneLine:

; 974  :     }
; 975  :     // この時点で未処理の桁は 4 ワード未満のはず
; 976  : 
; 977  :     // 未処理の桁が 2 ワード以上あるなら 2 ワード加算を行う。
; 978  :     if (v_count & 0x2)

	test	r9b, 2
	je	SHORT $LN7@AddOneLine
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4502 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	r10b, -1
	adc	ecx, DWORD PTR [r8]
	mov	DWORD PTR [rax], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4503 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	ecx, DWORD PTR [rax+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+4]
	mov	DWORD PTR [rax+4], ecx
	setb	r10b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 981  :         u_ptr += 2;

	add	rax, 8

; 982  :         v_ptr += 2;

	add	r8, 8
$LN7@AddOneLine:

; 983  :     }
; 984  :     // この時点で未処理の桁は 2 ワード未満のはず
; 985  : 
; 986  :     // 未処理の桁が 1 ワード以上あるなら 1 ワード加算を行う。
; 987  :     if (v_count & 0x1)

	test	r9b, 1
	je	SHORT $LN8@AddOneLine

; 988  :     {
; 989  :         c = _ADD_UNIT_DIV(c, *u_ptr, *v_ptr, u_ptr);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	r10b, -1
	adc	ecx, DWORD PTR [r8]
	mov	DWORD PTR [rax], ecx
	setb	r10b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 990  :         ++u_ptr;

	add	rax, 4
$LN8@AddOneLine:

; 991  :         ++v_ptr;
; 992  :     }
; 993  : 
; 994  :     // 残りの桁の繰り上がりを計算する。
; 995  :     DoCarry(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr);

	lea	rdx, QWORD PTR [rdx*4+4]
	sub	rdx, rax
	add	rdx, rbx
	sar	rdx, 2

; 908  :         if (u_count <= 0)

	test	rdx, rdx
	je	SHORT $LN165@AddOneLine
$LL147@AddOneLine:

; 909  :         {
; 910  :             // u の最上位まで達してしまった場合
; 911  :             return;
; 912  :         }
; 913  :         else if (c)

	test	r10b, r10b
	je	SHORT $LN165@AddOneLine

; 914  :         {
; 915  :             // u の最上位に達しておらず、かつキャリーが立っている場合
; 916  : 
; 917  :             // 繰り上がりを継続する
; 918  :             c = _ADD_UNIT_DIV(c, *u_ptr, 0, u_ptr);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	r10b, -1
	adc	ecx, 0
	mov	DWORD PTR [rax], ecx
	setb	r10b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 919  :             ++u_ptr;

	add	rax, 4

; 920  :             --u_count;

	sub	rdx, 1
	jne	SHORT $LL147@AddOneLine
$LN165@AddOneLine:

; 996  : }

	mov	rbx, QWORD PTR [rsp+8]
	ret	0
AddOneLine ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT DoCarry
_TEXT	SEGMENT
c$ = 8
u_ptr$ = 16
u_count$ = 24
DoCarry	PROC						; COMDAT

; 905  :     // 繰り上がりを続く限り行う
; 906  :     for (;;)
; 907  :     {
; 908  :         if (u_count <= 0)

	test	r8, r8
	je	SHORT $LN13@DoCarry
$LL2@DoCarry:

; 909  :         {
; 910  :             // u の最上位まで達してしまった場合
; 911  :             return;
; 912  :         }
; 913  :         else if (c)

	test	cl, cl
	je	SHORT $LN13@DoCarry

; 914  :         {
; 915  :             // u の最上位に達しておらず、かつキャリーが立っている場合
; 916  : 
; 917  :             // 繰り上がりを継続する
; 918  :             c = _ADD_UNIT_DIV(c, *u_ptr, 0, u_ptr);

	mov	eax, DWORD PTR [rdx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	cl, -1
	adc	eax, 0
	mov	DWORD PTR [rdx], eax
	setb	cl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 919  :             ++u_ptr;

	add	rdx, 4

; 920  :             --u_count;

	sub	r8, 1
	jne	SHORT $LL2@DoCarry
$LN13@DoCarry:

; 921  :         }
; 922  :         else
; 923  :         {
; 924  :             // u の最上位に達しておらず、かつキャリーが立っていない場合
; 925  : 
; 926  :             // 繰り上がりを中断し、復帰する。
; 927  :             return;
; 928  :         }
; 929  :     }
; 930  : }

	ret	0
DoCarry	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT SubtructOneLineX
_TEXT	SEGMENT
t_lo$1 = 0
t_lo$2 = 4
t_lo$3 = 8
t_lo$4 = 12
t_lo$5 = 16
t_lo$6 = 20
t_lo$7 = 24
t_lo$8 = 28
t_lo$9 = 32
t_lo$10 = 36
t_lo$11 = 40
t_lo$12 = 44
t_lo$13 = 48
t_lo$14 = 52
t_lo$15 = 56
t_lo$16 = 60
t_lo$17 = 64
t_lo$18 = 68
t_lo$19 = 72
t_lo$20 = 76
t_lo$21 = 80
t_lo$22 = 84
t_lo$23 = 88
t_lo$24 = 92
t_hi$25 = 96
t_hi$26 = 100
t_hi$27 = 104
t_hi$28 = 108
t_hi$29 = 112
t_hi$30 = 116
t_hi$31 = 120
t_lo$32 = 124
t_hi$33 = 128
t_lo$34 = 132
t_hi$35 = 136
t_lo$36 = 140
t_hi$37 = 144
t_lo$38 = 148
t_hi$39 = 152
t_lo$40 = 156
t_hi$41 = 160
t_lo$42 = 164
t_hi$43 = 168
t_lo$44 = 172
t_hi$45 = 176
t_lo$46 = 180
t_hi$47 = 184
t_lo$48 = 188
t_hi$49 = 192
t_lo$50 = 196
t_hi$51 = 200
t_lo$52 = 204
t_hi$53 = 208
t_lo$54 = 212
t_hi$55 = 216
t_lo$56 = 220
t_hi$57 = 224
t_lo$58 = 228
t_hi$59 = 232
t_lo$60 = 236
t_hi$61 = 240
t_lo$62 = 244
t_hi$63 = 248
t_lo$64 = 252
t_hi$65 = 256
t_lo$66 = 260
t_hi$67 = 264
t_lo$68 = 268
t_hi$69 = 272
t_lo$70 = 276
t_hi$71 = 280
t_lo$72 = 284
t_hi$73 = 288
t_lo$74 = 292
t_hi$75 = 296
t_lo$76 = 300
t_hi$77 = 304
t_lo$78 = 308
t_hi$79 = 312
t_lo$80 = 316
t_hi$81 = 320
t_hi$82 = 324
t_hi$83 = 328
t_hi$84 = 332
t_hi$85 = 336
t_hi$86 = 340
t_hi$87 = 344
t_hi$88 = 348
t_lo$89 = 352
t_hi$90 = 356
t_lo$91 = 360
t_hi$92 = 364
t_lo$93 = 368
t_hi$94 = 372
t_lo$95 = 376
t_hi$96 = 380
t_lo$97 = 384
t_hi$98 = 388
t_lo$99 = 392
t_hi$100 = 396
t_lo$101 = 400
t_hi$102 = 404
t_lo$103 = 408
t_hi$104 = 412
t_lo$105 = 416
t_hi$106 = 420
t_hi$107 = 424
t_hi$108 = 428
t_hi$109 = 432
t_hi$110 = 436
t_hi$111 = 440
t_hi$112 = 444
t_hi$113 = 448
t_lo$114 = 452
t_hi$115 = 456
t_hi$116 = 460
t_hi$117 = 464
t_hi$118 = 468
t_hi$119 = 472
t_hi$120 = 476
t_hi$121 = 480
t_hi$122 = 484
t_lo$123 = 576
u_buf$ = 576
u_buf_len$ = 584
t_lo$124 = 592
v_buf$ = 592
t_lo$125 = 600
v_buf_len$ = 600
t_lo$126 = 608
q_index$ = 608
q_$ = 616
SubtructOneLineX PROC					; COMDAT

; 753  : {

	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rbx
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	lea	rbp, QWORD PTR [rsp-248]
	sub	rsp, 504				; 000001f8H

; 754  :     __UNIT_TYPE_DIV* u_ptr = &u_buf[q_index];

	mov	rax, QWORD PTR q_index$[rbp-256]

; 755  :     __UNIT_TYPE_DIV* v_ptr = &v_buf[0];
; 756  :     __UNIT_TYPE v_count = v_buf_len;
; 757  :     __UNIT_TYPE_DIV k = 0;

	xor	edi, edi
	mov	esi, DWORD PTR q_$[rbp-256]

; 758  :     char c = 0;
; 759  : 
; 760  :     __UNIT_TYPE count = v_count >> 5;

	mov	r12, r9
	xor	r11b, r11b
	shr	r12, 5
	mov	r15, r9
	mov	rbx, r8
	lea	rax, QWORD PTR [rax*4]
	mov	r13, rcx
	add	rax, rcx
	mov	r14d, edi

; 761  :     while (count != 0)

	test	r12, r12
	je	$LN821@SubtructOn
	npad	7
$LL2@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r14d
	mov	DWORD PTR t_lo$126[rbp-256], edx
	adcx	r9d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r11b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$25[rsp], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+4]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$123[rbp-256], edx
	adcx	r10d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$26[rsp], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+4], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+8]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$124[rbp-256], edx
	adcx	r9d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$27[rsp], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+8], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+12]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$125[rbp-256], edx
	adcx	r10d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$28[rsp], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+12], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+16]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$1[rsp], edx
	adcx	r9d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$29[rsp], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+16], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+20]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r11, rdx
	shr	r11, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$2[rsp], edx
	adcx	r11d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$30[rsp], r11d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+20], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+24]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	shr	r10, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r11d
	mov	DWORD PTR t_lo$3[rsp], edx
	adcx	r10d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$31[rsp], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+24], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+28]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$32[rsp], edx
	adcx	r9d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$33[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+28], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+32]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$34[rbp-256], edx
	adcx	r10d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$35[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+32], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+36]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$36[rbp-256], edx
	adcx	r9d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$37[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+36], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+40]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$38[rbp-256], edx
	adcx	r10d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$39[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+40], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+44]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$40[rbp-256], edx
	adcx	r9d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$41[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+44], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+48]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$42[rbp-256], edx
	adcx	r10d, edi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$43[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+48], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+52]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$44[rbp-256], edx
	adcx	r9d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$45[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+52], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+56]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$46[rbp-256], edx
	adcx	r10d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$47[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+56], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+60]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$48[rbp-256], edx
	adcx	r9d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$49[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+60], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+64]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$50[rbp-256], edx
	adcx	r10d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$51[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+64], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+68]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+68]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$52[rbp-256], edx
	adcx	r9d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$53[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+68], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+72]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$54[rbp-256], edx
	adcx	r10d, edi
	mov	DWORD PTR t_hi$55[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1
	sbb	ecx, edx
	mov	DWORD PTR [rax+72], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+76]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+76]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$56[rbp-256], edx
	adcx	r9d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$57[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+76], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+80]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$58[rbp-256], edx
	adcx	r10d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$59[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+80], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+84]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+84]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$60[rbp-256], edx
	adcx	r9d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$61[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+84], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+88]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$62[rbp-256], edx
	adcx	r10d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$63[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+88], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+92]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+92]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$64[rbp-256], edx
	adcx	r9d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$65[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+92], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+96]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$66[rbp-256], edx
	adcx	r10d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$67[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	setb	r8b
	mov	DWORD PTR [rax+96], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$68[rbp-256], edx
	adcx	r9d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$69[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+100], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+104]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$70[rbp-256], edx
	adcx	r10d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$71[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+104], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+108]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+108]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$72[rbp-256], edx
	adcx	r9d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$73[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+108], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+112]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$74[rbp-256], edx
	adcx	r10d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$75[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+112], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+116]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+116]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$76[rbp-256], edx
	adcx	r9d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$77[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+116], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+120]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$78[rbp-256], edx
	adcx	r10d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$79[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+120], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+124]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+124]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r14, rdx
	shr	r14, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$80[rbp-256], edx
	adcx	r14d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$81[rbp-256], r14d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+124], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	ecx, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r11b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 795  :         u_ptr += 32;

	sub	rax, -128				; ffffffffffffff80H

; 796  :         v_ptr += 32;

	sub	rbx, -128				; ffffffffffffff80H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock xadd DWORD PTR statistics_info+4, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 761  :     while (count != 0)

	sub	r12, 1
	jne	$LL2@SubtructOn
$LN821@SubtructOn:

; 797  :         --count;
; 798  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 799  :         if (sizeof(k) == sizeof(_UINT64_T))
; 800  :             AddToMULTI64Counter(32);
; 801  :         else
; 802  :             AddToMULTI32Counter(32);
; 803  : #endif
; 804  :     }
; 805  : 
; 806  :     if (v_count & 0x10)

	test	r15b, 16
	je	$LN604@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r14d
	mov	DWORD PTR t_lo$4[rsp], edx
	adcx	r9d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r11b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$82[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+4]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$5[rsp], edx
	adcx	r10d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$83[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+4], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+8]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$6[rsp], edx
	adcx	r9d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$84[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+8], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+12]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$7[rsp], edx
	adcx	r10d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$85[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+12], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+16]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$8[rsp], edx
	adcx	r9d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$86[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+16], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+20]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r11, rdx
	shr	r11, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$9[rsp], edx
	adcx	r11d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$87[rbp-256], r11d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+20], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+24]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	shr	r10, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r11d
	mov	DWORD PTR t_lo$10[rsp], edx
	adcx	r10d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$88[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+24], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+28]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$89[rbp-256], edx
	adcx	r9d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$90[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+28], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+32]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$91[rbp-256], edx
	adcx	r10d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$92[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+32], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+36]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$93[rbp-256], edx
	adcx	r9d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$94[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+36], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+40]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$95[rbp-256], edx
	adcx	r10d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$96[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+40], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+44]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$97[rbp-256], edx
	adcx	r9d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$98[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+44], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+48]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$99[rbp-256], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	r10d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$100[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+48], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+52]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$101[rbp-256], edx
	adcx	r9d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$102[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+52], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+56]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$103[rbp-256], edx
	adcx	r10d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$104[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+56], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+60]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r9b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r8, rdx
	shr	r8, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$105[rbp-256], edx
	adcx	r8d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r9b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$106[rbp-256], r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 597  :     *k = t_hi;

	mov	r14d, r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+60], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	ecx, 16
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r11b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 824  :         u_ptr += 16;

	add	rax, 64					; 00000040H

; 825  :         v_ptr += 16;

	add	rbx, 64					; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock xadd DWORD PTR statistics_info+4, ecx
$LN604@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 834  :     if (v_count & 0x8)

	test	r15b, 8
	je	$LN704@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r14d
	mov	DWORD PTR t_lo$11[rsp], edx
	adcx	r9d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r11b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$107[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+4]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$12[rsp], edx
	adcx	r10d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$108[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+4], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+8]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$13[rsp], edx
	adcx	r9d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$109[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+8], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+12]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$14[rsp], edx
	adcx	r10d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$110[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+12], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+16]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$15[rsp], edx
	adcx	r9d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$111[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+16], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+20]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r11, rdx
	shr	r11, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$16[rsp], edx
	adcx	r11d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$112[rbp-256], r11d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+20], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+24]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	shr	r10, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r11d
	mov	DWORD PTR t_lo$17[rsp], edx
	adcx	r10d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$113[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+24], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+28]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r9b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r8, rdx
	shr	r8, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$114[rbp-256], edx
	adcx	r8d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r9b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$115[rbp-256], r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 597  :     *k = t_hi;

	mov	r14d, r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+28], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	ecx, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r11b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 844  :         u_ptr += 8;

	add	rax, 32					; 00000020H

; 845  :         v_ptr += 8;

	add	rbx, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock xadd DWORD PTR statistics_info+4, ecx
$LN704@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 854  :     if (v_count & 0x4)

	test	r15b, 4
	je	$LN756@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r14d
	mov	DWORD PTR t_lo$18[rsp], edx
	adcx	r9d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r11b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$116[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+4]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$19[rsp], edx
	adcx	r10d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$117[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+4], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+8]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r11, rdx
	shr	r11, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$20[rsp], edx
	adcx	r11d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$118[rbp-256], r11d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+8], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+12]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r9b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r8, rdx
	shr	r8, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r11d
	mov	DWORD PTR t_lo$21[rsp], edx
	adcx	r8d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r9b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$119[rbp-256], r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 597  :     *k = t_hi;

	mov	r14d, r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+12], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	ecx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r11b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 860  :         u_ptr += 4;

	add	rax, 16

; 861  :         v_ptr += 4;

	add	rbx, 16
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock xadd DWORD PTR statistics_info+4, ecx
$LN756@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 870  :     if (v_count & 0x2)

	test	r15b, 2
	je	SHORT $LN784@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r14d
	mov	DWORD PTR t_lo$22[rsp], edx
	adcx	r10d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r11b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$120[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax], ecx

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+4]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r9b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r8, rdx
	shr	r8, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$23[rsp], edx
	adcx	r8d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r9b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$121[rbp-256], r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 597  :     *k = t_hi;

	mov	r14d, r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+4], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	ecx, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r11b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 874  :         u_ptr += 2;

	add	rax, 8

; 875  :         v_ptr += 2;

	add	rbx, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock xadd DWORD PTR statistics_info+4, ecx
$LN784@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 884  :     if (v_count & 0x1)

	test	r15b, 1
	je	SHORT $LN800@SubtructOn

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx]
	imul	rdx, rsi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r8, rdx
	shr	r8, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	edx, r14d
	mov	DWORD PTR t_lo$24[rsp], edx
	adcx	r8d, edi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r11b, -1

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$122[rbp-256], r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 597  :     *k = t_hi;

	mov	r14d, r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax], ecx
	setb	r11b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 887  :         u_ptr += 1;

	add	rax, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 325  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

	lock inc DWORD PTR statistics_info+4
$LN800@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 897  :     c = _SUBTRUCT_UNIT_DIV(c, *u_ptr, k, u_ptr);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r11b, -1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 900  :     return (DoBorrow(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr));

	mov	r8, QWORD PTR u_buf_len$[rbp-256]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, r14d
	mov	DWORD PTR [rax], ecx
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 898  :     u_ptr += 1;

	add	rax, 4

; 900  :     return (DoBorrow(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr));

	lea	r8, QWORD PTR [r8*4+4]
	sub	r8, rax
	add	r8, r13
	sar	r8, 2

; 544  :         if (u_count <= 0)

	test	r8, r8
	je	SHORT $LN818@SubtructOn
$LL805@SubtructOn:

; 549  :             {
; 550  :                 // かつそれでも桁借りを行う必要がある場合
; 551  : 
; 552  :                 // 減算結果が負になってしまったので呼び出し元に通知する。
; 553  :                 return (TRUE);
; 554  :             }
; 555  : 
; 556  :             // u の最上位に達してしまった場合はいずれにしろループを中断して正常復帰する。
; 557  : 
; 558  :             return (FALSE);
; 559  :         }
; 560  :         else if (c)

	test	dl, dl
	je	SHORT $LN811@SubtructOn

; 561  :         {
; 562  :             // u の最上位に達しておらず、かつボローが立っている場合
; 563  : 
; 564  :             // 桁借りを継続する
; 565  :             c = _SUBTRUCT_UNIT_DIV(c, *up, 0, up);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	dl, -1
	sbb	ecx, edi
	mov	DWORD PTR [rax], ecx
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 566  :             ++up;

	add	rax, 4

; 567  :             --u_count;

	sub	r8, 1
	jne	SHORT $LL805@SubtructOn
$LN818@SubtructOn:

; 545  :         {
; 546  :             // u の最上位まで達してしまった場合
; 547  : 
; 548  :             if (c)

	test	dl, dl
	setne	dil
$LN811@SubtructOn:

; 901  : }

	mov	eax, edi
	add	rsp, 504				; 000001f8H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbx
	pop	rbp
	ret	0
SubtructOneLineX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT SubtructOneLine
_TEXT	SEGMENT
t_lo$1 = 0
t_lo$2 = 4
t_lo$3 = 8
t_lo$4 = 12
t_lo$5 = 16
t_lo$6 = 20
t_lo$7 = 24
t_lo$8 = 28
t_lo$9 = 32
t_lo$10 = 36
t_lo$11 = 40
t_lo$12 = 44
t_lo$13 = 48
t_lo$14 = 52
t_lo$15 = 56
t_lo$16 = 60
t_lo$17 = 64
t_lo$18 = 68
t_lo$19 = 72
t_lo$20 = 76
t_lo$21 = 80
t_lo$22 = 84
t_lo$23 = 88
t_lo$24 = 92
t_hi$25 = 96
t_hi$26 = 100
t_hi$27 = 104
t_hi$28 = 108
t_hi$29 = 112
t_hi$30 = 116
t_hi$31 = 120
t_lo$32 = 124
t_hi$33 = 128
t_lo$34 = 132
t_hi$35 = 136
t_lo$36 = 140
t_hi$37 = 144
t_lo$38 = 148
t_hi$39 = 152
t_lo$40 = 156
t_hi$41 = 160
t_lo$42 = 164
t_hi$43 = 168
t_lo$44 = 172
t_hi$45 = 176
t_lo$46 = 180
t_hi$47 = 184
t_lo$48 = 188
t_hi$49 = 192
t_lo$50 = 196
t_hi$51 = 200
t_lo$52 = 204
t_hi$53 = 208
t_lo$54 = 212
t_hi$55 = 216
t_lo$56 = 220
t_hi$57 = 224
t_lo$58 = 228
t_hi$59 = 232
t_lo$60 = 236
t_hi$61 = 240
t_lo$62 = 244
t_hi$63 = 248
t_lo$64 = 252
t_hi$65 = 256
t_lo$66 = 260
t_hi$67 = 264
t_lo$68 = 268
t_hi$69 = 272
t_lo$70 = 276
t_hi$71 = 280
t_lo$72 = 284
t_hi$73 = 288
t_lo$74 = 292
t_hi$75 = 296
t_lo$76 = 300
t_hi$77 = 304
t_lo$78 = 308
t_hi$79 = 312
t_lo$80 = 316
t_hi$81 = 320
t_hi$82 = 324
t_hi$83 = 328
t_hi$84 = 332
t_hi$85 = 336
t_hi$86 = 340
t_hi$87 = 344
t_hi$88 = 348
t_lo$89 = 352
t_hi$90 = 356
t_lo$91 = 360
t_hi$92 = 364
t_lo$93 = 368
t_hi$94 = 372
t_lo$95 = 376
t_hi$96 = 380
t_lo$97 = 384
t_hi$98 = 388
t_lo$99 = 392
t_hi$100 = 396
t_lo$101 = 400
t_hi$102 = 404
t_lo$103 = 408
t_hi$104 = 412
t_lo$105 = 416
t_hi$106 = 420
t_hi$107 = 424
t_hi$108 = 428
t_hi$109 = 432
t_hi$110 = 436
t_hi$111 = 440
t_hi$112 = 444
t_hi$113 = 448
t_lo$114 = 452
t_hi$115 = 456
t_hi$116 = 460
t_hi$117 = 464
t_hi$118 = 468
t_hi$119 = 472
t_hi$120 = 476
t_hi$121 = 480
t_hi$122 = 484
t_lo$123 = 576
u_buf$ = 576
u_buf_len$ = 584
t_lo$124 = 592
v_buf$ = 592
t_lo$125 = 600
v_buf_len$ = 600
t_lo$126 = 608
q_index$ = 608
q_$ = 616
SubtructOneLine PROC					; COMDAT

; 602  : {

	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rbx
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	lea	rbp, QWORD PTR [rsp-248]
	sub	rsp, 504				; 000001f8H

; 603  :     __UNIT_TYPE_DIV* u_ptr = &u_buf[q_index];

	mov	rax, QWORD PTR q_index$[rbp-256]

; 604  :     __UNIT_TYPE_DIV* v_ptr = &v_buf[0];
; 605  :     __UNIT_TYPE v_count = v_buf_len;
; 606  :     __UNIT_TYPE_DIV k = 0;

	xor	r15d, r15d
	mov	edi, DWORD PTR q_$[rbp-256]

; 607  :     char c = 0;
; 608  : 
; 609  :     __UNIT_TYPE count = v_count >> 5;

	mov	r12, r9
	xor	r11b, r11b
	shr	r12, 5
	mov	r14, r9
	mov	rbx, r8
	lea	rax, QWORD PTR [rax*4]
	mov	r13, rcx
	add	rax, rcx
	mov	esi, r15d

; 610  :     while (count != 0)

	test	r12, r12
	je	$LN821@SubtructOn
	npad	6
$LL2@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, esi
	mov	DWORD PTR t_lo$126[rbp-256], edx
	adc	r9d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r11b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$25[rsp], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+4]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$123[rbp-256], edx
	adc	r10d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$26[rsp], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+4], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+8]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$124[rbp-256], edx
	adc	r9d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$27[rsp], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+8], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+12]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$125[rbp-256], edx
	adc	r10d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$28[rsp], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+12], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+16]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$1[rsp], edx
	adc	r9d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$29[rsp], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+16], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+20]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r11, rdx
	shr	r11, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$2[rsp], edx
	adc	r11d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$30[rsp], r11d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+20], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+24]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	shr	r10, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r11d
	mov	DWORD PTR t_lo$3[rsp], edx
	adc	r10d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$31[rsp], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+24], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+28]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$32[rsp], edx
	adc	r9d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$33[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+28], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+32]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$34[rbp-256], edx
	adc	r10d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$35[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+32], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+36]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$36[rbp-256], edx
	adc	r9d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$37[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+36], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+40]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$38[rbp-256], edx
	adc	r10d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$39[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+40], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+44]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$40[rbp-256], edx
	adc	r9d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$41[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+44], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+48]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$42[rbp-256], edx
	adc	r10d, r15d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$43[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+48], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+52]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$44[rbp-256], edx
	adc	r9d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$45[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+52], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+56]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$46[rbp-256], edx
	adc	r10d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$47[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+56], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+60]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$48[rbp-256], edx
	adc	r9d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$49[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+60], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+64]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$50[rbp-256], edx
	adc	r10d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$51[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+64], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+68]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+68]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$52[rbp-256], edx
	adc	r9d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$53[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+68], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+72]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$54[rbp-256], edx
	adc	r10d, r15d
	mov	DWORD PTR t_hi$55[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1
	sbb	ecx, edx
	mov	DWORD PTR [rax+72], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+76]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+76]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$56[rbp-256], edx
	adc	r9d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$57[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+76], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+80]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$58[rbp-256], edx
	adc	r10d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$59[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+80], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+84]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+84]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$60[rbp-256], edx
	adc	r9d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$61[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+84], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+88]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$62[rbp-256], edx
	adc	r10d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$63[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+88], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+92]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+92]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$64[rbp-256], edx
	adc	r9d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$65[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+92], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+96]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$66[rbp-256], edx
	adc	r10d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$67[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	setb	r8b
	mov	DWORD PTR [rax+96], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$68[rbp-256], edx
	adc	r9d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$69[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+100], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+104]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$70[rbp-256], edx
	adc	r10d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$71[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+104], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+108]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+108]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$72[rbp-256], edx
	adc	r9d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$73[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+108], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+112]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$74[rbp-256], edx
	adc	r10d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$75[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+112], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+116]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+116]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$76[rbp-256], edx
	adc	r9d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$77[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+116], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+120]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$78[rbp-256], edx
	adc	r10d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$79[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+120], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+124]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+124]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	rsi, rdx
	shr	rsi, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$80[rbp-256], edx
	adc	esi, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$81[rbp-256], esi

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+124], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	ecx, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r11b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 644  :         u_ptr += 32;

	sub	rax, -128				; ffffffffffffff80H

; 645  :         v_ptr += 32;

	sub	rbx, -128				; ffffffffffffff80H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock xadd DWORD PTR statistics_info+4, ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 610  :     while (count != 0)

	sub	r12, 1
	jne	$LL2@SubtructOn
$LN821@SubtructOn:

; 646  :         --count;
; 647  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 648  :         if (sizeof(k) == sizeof(_UINT64_T))
; 649  :             AddToMULTI64Counter(32);
; 650  :         else
; 651  :             AddToMULTI32Counter(32);
; 652  : #endif
; 653  :     }
; 654  : 
; 655  :     if (v_count & 0x10)

	test	r14b, 16
	je	$LN604@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, esi
	mov	DWORD PTR t_lo$4[rsp], edx
	adc	r9d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r11b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$82[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+4]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$5[rsp], edx
	adc	r10d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$83[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+4], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+8]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$6[rsp], edx
	adc	r9d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$84[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+8], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+12]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$7[rsp], edx
	adc	r10d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$85[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+12], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+16]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$8[rsp], edx
	adc	r9d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$86[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+16], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+20]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r11, rdx
	shr	r11, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$9[rsp], edx
	adc	r11d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$87[rbp-256], r11d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+20], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+24]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	shr	r10, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r11d
	mov	DWORD PTR t_lo$10[rsp], edx
	adc	r10d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$88[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+24], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+28]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$89[rbp-256], edx
	adc	r9d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$90[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+28], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+32]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$91[rbp-256], edx
	adc	r10d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$92[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+32], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+36]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$93[rbp-256], edx
	adc	r9d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$94[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+36], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+40]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$95[rbp-256], edx
	adc	r10d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$96[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+40], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+44]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$97[rbp-256], edx
	adc	r9d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$98[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+44], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+48]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$99[rbp-256], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	r10d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$100[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+48], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+52]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$101[rbp-256], edx
	adc	r9d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$102[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+52], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+56]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$103[rbp-256], edx
	adc	r10d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$104[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+56], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+60]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r9b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r8, rdx
	shr	r8, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$105[rbp-256], edx
	adc	r8d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r9b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$106[rbp-256], r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 586  :     *k = t_hi;

	mov	esi, r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+60], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	ecx, 16
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r11b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 673  :         u_ptr += 16;

	add	rax, 64					; 00000040H

; 674  :         v_ptr += 16;

	add	rbx, 64					; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock xadd DWORD PTR statistics_info+4, ecx
$LN604@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 683  :     if (v_count & 0x8)

	test	r14b, 8
	je	$LN704@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, esi
	mov	DWORD PTR t_lo$11[rsp], edx
	adc	r9d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r11b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$107[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+4]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$12[rsp], edx
	adc	r10d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$108[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+4], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+8]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$13[rsp], edx
	adc	r9d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$109[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+8], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+12]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$14[rsp], edx
	adc	r10d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$110[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+12], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+16]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$15[rsp], edx
	adc	r9d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$111[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+16], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+20]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r11, rdx
	shr	r11, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$16[rsp], edx
	adc	r11d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$112[rbp-256], r11d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+20], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+24]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	shr	r10, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r11d
	mov	DWORD PTR t_lo$17[rsp], edx
	adc	r10d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$113[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+24], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+28]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r9b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r8, rdx
	shr	r8, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$114[rbp-256], edx
	adc	r8d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r9b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$115[rbp-256], r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 586  :     *k = t_hi;

	mov	esi, r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+28], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	ecx, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r11b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 693  :         u_ptr += 8;

	add	rax, 32					; 00000020H

; 694  :         v_ptr += 8;

	add	rbx, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock xadd DWORD PTR statistics_info+4, ecx
$LN704@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 703  :     if (v_count & 0x4)

	test	r14b, 4
	je	$LN756@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r9, rdx
	shr	r9, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, esi
	mov	DWORD PTR t_lo$18[rsp], edx
	adc	r9d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r11b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$116[rbp-256], r9d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+4]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r9d
	mov	DWORD PTR t_lo$19[rsp], edx
	adc	r10d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$117[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+4], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+8]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r8b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r11, rdx
	shr	r11, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$20[rsp], edx
	adc	r11d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r8b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$118[rbp-256], r11d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+8], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+12]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r9b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r8, rdx
	shr	r8, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r11d
	mov	DWORD PTR t_lo$21[rsp], edx
	adc	r8d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r9b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$119[rbp-256], r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 586  :     *k = t_hi;

	mov	esi, r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+12], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	ecx, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r11b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 709  :         u_ptr += 4;

	add	rax, 16

; 710  :         v_ptr += 4;

	add	rbx, 16
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock xadd DWORD PTR statistics_info+4, ecx
$LN756@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 719  :     if (v_count & 0x2)

	test	r14b, 2
	je	SHORT $LN784@SubtructOn
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, rdx
	shr	r10, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, esi
	mov	DWORD PTR t_lo$22[rsp], edx
	adc	r10d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r11b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$120[rbp-256], r10d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax], ecx

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx+4]

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r9b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r8, rdx
	shr	r8, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, r10d
	mov	DWORD PTR t_lo$23[rsp], edx
	adc	r8d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r9b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$121[rbp-256], r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 586  :     *k = t_hi;

	mov	esi, r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax+4], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	ecx, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	r11b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 723  :         u_ptr += 2;

	add	rax, 8

; 724  :         v_ptr += 2;

	add	rbx, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock xadd DWORD PTR statistics_info+4, ecx
$LN784@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 733  :     if (v_count & 0x1)

	test	r14b, 1
	je	SHORT $LN800@SubtructOn

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, DWORD PTR [rbx]
	imul	rdx, rdi

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r8, rdx
	shr	r8, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	edx, esi
	mov	DWORD PTR t_lo$24[rsp], edx
	adc	r8d, r15d

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r11b, -1

; 220  :         return (_addcarry_u32(carry, u, v, w));

	mov	DWORD PTR t_hi$122[rbp-256], r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 586  :     *k = t_hi;

	mov	esi, r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, edx
	mov	DWORD PTR [rax], ecx
	setb	r11b
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 736  :         u_ptr += 1;

	add	rax, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 325  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

	lock inc DWORD PTR statistics_info+4
$LN800@SubtructOn:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 746  :     c = _SUBTRUCT_UNIT_DIV(c, *u_ptr, k, u_ptr);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r11b, -1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 749  :     return (DoBorrow(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr));

	mov	r8, QWORD PTR u_buf_len$[rbp-256]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, esi
	mov	DWORD PTR [rax], ecx
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 747  :     u_ptr += 1;

	add	rax, 4

; 749  :     return (DoBorrow(c, u_ptr, u_buf + u_buf_len + 1 - u_ptr));

	lea	r8, QWORD PTR [r8*4+4]
	sub	r8, rax
	add	r8, r13
	sar	r8, 2

; 544  :         if (u_count <= 0)

	test	r8, r8
	je	SHORT $LN818@SubtructOn
	npad	5
$LL805@SubtructOn:

; 549  :             {
; 550  :                 // かつそれでも桁借りを行う必要がある場合
; 551  : 
; 552  :                 // 減算結果が負になってしまったので呼び出し元に通知する。
; 553  :                 return (TRUE);
; 554  :             }
; 555  : 
; 556  :             // u の最上位に達してしまった場合はいずれにしろループを中断して正常復帰する。
; 557  : 
; 558  :             return (FALSE);
; 559  :         }
; 560  :         else if (c)

	test	dl, dl
	je	SHORT $LN811@SubtructOn

; 561  :         {
; 562  :             // u の最上位に達しておらず、かつボローが立っている場合
; 563  : 
; 564  :             // 桁借りを継続する
; 565  :             c = _SUBTRUCT_UNIT_DIV(c, *up, 0, up);

	mov	ecx, DWORD PTR [rax]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	dl, -1
	sbb	ecx, r15d
	mov	DWORD PTR [rax], ecx
	setb	dl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 566  :             ++up;

	add	rax, 4

; 567  :             --u_count;

	sub	r8, 1
	jne	SHORT $LL805@SubtructOn
$LN818@SubtructOn:

; 545  :         {
; 546  :             // u の最上位まで達してしまった場合
; 547  : 
; 548  :             if (c)

	test	dl, dl
	setne	r15b
$LN811@SubtructOn:

; 750  : }

	mov	eax, r15d
	add	rsp, 504				; 000001f8H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbx
	pop	rbp
	ret	0
SubtructOneLine ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _MULTIPLYX_DIGIT_UNIT_DIV
_TEXT	SEGMENT
c$ = 8
k$ = 16
vp$ = 24
q_$ = 32
up$ = 40
_MULTIPLYX_DIGIT_UNIT_DIV PROC				; COMDAT

; 591  : {

	mov	QWORD PTR [rsp+16], rbx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	r10d, DWORD PTR [r8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 591  : {

	mov	rbx, rdx
	movzx	r11d, cl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, r9d
	imul	r10, rax

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	mov	eax, 0

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r8, r10
	shr	r8, 32					; 00000020H

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	r10d, DWORD PTR [rdx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	rdx, QWORD PTR up$[rsp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	r8d, eax

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r11b, -1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 596  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rdx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, r10d
	mov	DWORD PTR [rdx], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 597  :     *k = t_hi;

	mov	DWORD PTR [rbx], r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 599  : }

	mov	rbx, QWORD PTR [rsp+16]
	ret	0
_MULTIPLYX_DIGIT_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT _MULTIPLY_DIGIT_UNIT_DIV
_TEXT	SEGMENT
c$ = 8
k$ = 16
vp$ = 24
q_$ = 32
up$ = 40
_MULTIPLY_DIGIT_UNIT_DIV PROC				; COMDAT

; 580  : {

	mov	QWORD PTR [rsp+16], rbx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	r10d, DWORD PTR [r8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 580  : {

	mov	rbx, rdx
	movzx	r11d, cl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, r9d
	imul	r10, rax

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r8, r10
	shr	r8, 32					; 00000020H

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	r10d, DWORD PTR [rdx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	rdx, QWORD PTR up$[rsp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	r8d, 0

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	r11b, -1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 585  :     c = _SUBTRUCT_UNIT_DIV(c, *up, t_lo, up);

	mov	ecx, DWORD PTR [rdx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	ecx, r10d
	mov	DWORD PTR [rdx], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 586  :     *k = t_hi;

	mov	DWORD PTR [rbx], r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 588  : }

	mov	rbx, QWORD PTR [rsp+16]
	ret	0
_MULTIPLY_DIGIT_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT DoBorrow
_TEXT	SEGMENT
c$ = 8
up$ = 16
u_count$ = 24
DoBorrow PROC						; COMDAT

; 541  :     // 桁借りを続く限り行う
; 542  :     for (;;)
; 543  :     {
; 544  :         if (u_count <= 0)

	test	r8, r8
	je	SHORT $LN14@DoBorrow
$LL2@DoBorrow:

; 554  :             }
; 555  : 
; 556  :             // u の最上位に達してしまった場合はいずれにしろループを中断して正常復帰する。
; 557  : 
; 558  :             return (FALSE);
; 559  :         }
; 560  :         else if (c)

	test	cl, cl
	je	SHORT $LN8@DoBorrow

; 561  :         {
; 562  :             // u の最上位に達しておらず、かつボローが立っている場合
; 563  : 
; 564  :             // 桁借りを継続する
; 565  :             c = _SUBTRUCT_UNIT_DIV(c, *up, 0, up);

	mov	eax, DWORD PTR [rdx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	cl, -1
	sbb	eax, 0
	mov	DWORD PTR [rdx], eax
	setb	cl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 566  :             ++up;

	add	rdx, 4

; 567  :             --u_count;

	sub	r8, 1
	jne	SHORT $LL2@DoBorrow
$LN14@DoBorrow:

; 545  :         {
; 546  :             // u の最上位まで達してしまった場合
; 547  : 
; 548  :             if (c)

	test	cl, cl
	je	SHORT $LN8@DoBorrow

; 549  :             {
; 550  :                 // かつそれでも桁借りを行う必要がある場合
; 551  : 
; 552  :                 // 減算結果が負になってしまったので呼び出し元に通知する。
; 553  :                 return (TRUE);

	mov	eax, 1

; 575  :         }
; 576  :     }
; 577  : }

	ret	0
$LN8@DoBorrow:

; 568  :         }
; 569  :         else
; 570  :         {
; 571  :             // u の最上位に達しておらず、かつボローが立っていない場合
; 572  : 
; 573  :             // 桁借りを中断し復帰する。
; 574  :             return (FALSE);

	xor	eax, eax

; 575  :         }
; 576  :     }
; 577  : }

	ret	0
DoBorrow ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT CalculateQ_X
_TEXT	SEGMENT
rh_hi$1 = 48
u_buf$ = 48
rh_mi$2 = 56
v_buf$ = 56
rh_hi$3 = 64
v_buf_len$ = 64
rh_mi$4 = 72
q_index$ = 72
CalculateQ_X PROC					; COMDAT

; 515  : {

	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r14

; 516  :     __UNIT_TYPE u_index = q_index + v_buf_len;
; 517  :     __UNIT_TYPE_DIV uj = u_buf[u_index];
; 518  :     __UNIT_TYPE_DIV uj_1 = u_buf[u_index - 1];
; 519  :     __UNIT_TYPE_DIV uj_2 = u_buf[u_index - 2];
; 520  :     __UNIT_TYPE_DIV v1 = v_buf[v_buf_len - 1];
; 521  :     __UNIT_TYPE_DIV v2 = v_buf[v_buf_len - 2];

	mov	r10d, DWORD PTR [rdx+r8*4-8]
	lea	rax, QWORD PTR [r8+r9]
	mov	r9d, DWORD PTR [rcx+rax*4]
	mov	ebx, DWORD PTR [rcx+rax*4-4]
	mov	edi, DWORD PTR [rcx+rax*4-8]
	mov	eax, DWORD PTR [rdx+r8*4-4]
	mov	ebp, eax

; 399  :     if (uj == v1)

	cmp	r9d, eax
	jne	SHORT $LN6@CalculateQ

; 400  :         return (-1);

	mov	r8d, -1					; ffffffffH
	jmp	SHORT $LN5@CalculateQ
$LN6@CalculateQ:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 313  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock inc DWORD PTR statistics_info+12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	rax, r9

; 385  :             return ((_UINT32_T)(t / v));

	xor	edx, edx

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	shl	rax, 32					; 00000020H
	or	rax, rbx

; 385  :             return ((_UINT32_T)(t / v));

	div	rbp
	mov	r8, rax
$LN5@CalculateQ:

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, r8d
	mov	rsi, r10
	imul	rsi, rdx
	imul	rdx, rbp

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	eax, ebx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	r14d, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r11, rsi
	shr	r11, 32					; 00000020H

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sub	eax, edx
	mov	DWORD PTR rh_mi$2[rsp], eax
	mov	eax, r9d
	setb	cl

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	shr	rdx, 32					; 00000020H

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	cl, -1
	sbb	eax, edx
	mov	DWORD PTR rh_hi$1[rsp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, r14d
	lock xadd DWORD PTR statistics_info+4, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 466  :     if (rh_hi > 0)

	cmp	DWORD PTR rh_hi$1[rsp], 0
	ja	SHORT $LN74@CalculateQ

; 467  :     {
; 468  : #ifdef DO_TRACE
; 469  :         ReportVar("result", 0);
; 470  : #endif
; 471  :         return (FALSE);
; 472  :     }
; 473  :     else if (lh_mi > rh_mi)

	cmp	r11d, DWORD PTR rh_mi$2[rsp]
	ja	SHORT $LN2@CalculateQ

; 474  :     {
; 475  : #ifdef DO_TRACE
; 476  :         ReportVar("result", 1);
; 477  : #endif
; 478  :         return (TRUE);
; 479  :     }
; 480  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN74@CalculateQ

; 522  :     __UNIT_TYPE_DIV q_ = AsumeQ_(uj, uj_1, v1);
; 523  : #ifdef DO_TRACE
; 524  :     ReportLabel("q_ の計算");
; 525  :     ReportVar("uj", uj);
; 526  :     ReportVar("uj1", uj_1);
; 527  :     ReportVar("v1", v1);
; 528  :     ReportVar("q_", q_);
; 529  : #endif
; 530  :     if (!CheckQ_X(q_, uj, uj_1, uj_2, v1, v2))

	cmp	esi, edi
	jbe	SHORT $LN74@CalculateQ
$LN2@CalculateQ:

; 531  :         return (q_);
; 532  :     --q_;

	dec	r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	ecx, r8d
	imul	r10, rcx
	imul	rcx, rbp

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	rdx, r10
	shr	rdx, 32					; 00000020H

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sub	ebx, ecx
	mov	DWORD PTR rh_mi$4[rsp], ebx
	setb	al

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	shr	rcx, 32					; 00000020H

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	al, -1
	sbb	r9d, ecx
	mov	DWORD PTR rh_hi$3[rsp], r9d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock xadd DWORD PTR statistics_info+4, r14d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 466  :     if (rh_hi > 0)

	cmp	DWORD PTR rh_hi$3[rsp], 0
	ja	SHORT $LN74@CalculateQ

; 467  :     {
; 468  : #ifdef DO_TRACE
; 469  :         ReportVar("result", 0);
; 470  : #endif
; 471  :         return (FALSE);
; 472  :     }
; 473  :     else if (lh_mi > rh_mi)

	cmp	edx, DWORD PTR rh_mi$4[rsp]
	ja	SHORT $LN3@CalculateQ

; 474  :     {
; 475  : #ifdef DO_TRACE
; 476  :         ReportVar("result", 1);
; 477  : #endif
; 478  :         return (TRUE);
; 479  :     }
; 480  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN74@CalculateQ

; 533  :     if (!CheckQ_X(q_, uj, uj_1, uj_2, v1, v2))

	cmp	r10d, edi
	jbe	SHORT $LN74@CalculateQ
$LN3@CalculateQ:

; 534  :         return (q_);
; 535  :     --q_;

	lea	eax, DWORD PTR [r8-1]

; 536  :     return (q_);
; 537  : }

	pop	r14
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
$LN74@CalculateQ:
	mov	eax, r8d
	pop	r14
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
CalculateQ_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT CalculateQ_
_TEXT	SEGMENT
rh_hi$1 = 48
u_buf$ = 48
rh_mi$2 = 56
v_buf$ = 56
rh_hi$3 = 64
v_buf_len$ = 64
rh_mi$4 = 72
q_index$ = 72
CalculateQ_ PROC					; COMDAT

; 497  : {

	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r14

; 498  :     __UNIT_TYPE u_index = q_index + v_buf_len;
; 499  :     __UNIT_TYPE_DIV uj = u_buf[u_index];
; 500  :     __UNIT_TYPE_DIV uj_1 = u_buf[u_index - 1];
; 501  :     __UNIT_TYPE_DIV uj_2 = u_buf[u_index - 2];
; 502  :     __UNIT_TYPE_DIV v1 = v_buf[v_buf_len - 1];
; 503  :     __UNIT_TYPE_DIV v2 = v_buf[v_buf_len - 2];

	mov	r10d, DWORD PTR [rdx+r8*4-8]
	lea	rax, QWORD PTR [r8+r9]
	mov	r9d, DWORD PTR [rcx+rax*4]
	mov	ebx, DWORD PTR [rcx+rax*4-4]
	mov	edi, DWORD PTR [rcx+rax*4-8]
	mov	eax, DWORD PTR [rdx+r8*4-4]
	mov	ebp, eax

; 399  :     if (uj == v1)

	cmp	r9d, eax
	jne	SHORT $LN6@CalculateQ

; 400  :         return (-1);

	mov	r8d, -1					; ffffffffH
	jmp	SHORT $LN5@CalculateQ
$LN6@CalculateQ:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 313  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock inc DWORD PTR statistics_info+12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	rax, r9

; 385  :             return ((_UINT32_T)(t / v));

	xor	edx, edx

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	shl	rax, 32					; 00000020H
	or	rax, rbx

; 385  :             return ((_UINT32_T)(t / v));

	div	rbp
	mov	r8, rax
$LN5@CalculateQ:

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	edx, r8d
	mov	rsi, r10
	imul	rsi, rdx
	imul	rdx, rbp

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	mov	eax, ebx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	r14d, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r11, rsi
	shr	r11, 32					; 00000020H

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sub	eax, edx
	mov	DWORD PTR rh_mi$2[rsp], eax
	mov	eax, r9d
	setb	cl

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	shr	rdx, 32					; 00000020H

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	cl, -1
	sbb	eax, edx
	mov	DWORD PTR rh_hi$1[rsp], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, r14d
	lock xadd DWORD PTR statistics_info+4, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     if (rh_hi > 0)

	cmp	DWORD PTR rh_hi$1[rsp], 0
	ja	SHORT $LN74@CalculateQ

; 430  :         return (FALSE);
; 431  :     else if (lh_mi > rh_mi)

	cmp	r11d, DWORD PTR rh_mi$2[rsp]
	ja	SHORT $LN2@CalculateQ

; 432  :         return (TRUE);
; 433  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN74@CalculateQ

; 504  :     __UNIT_TYPE_DIV q_ = AsumeQ_(uj, uj_1, v1);
; 505  :     if (!CheckQ_(q_, uj, uj_1, uj_2, v1, v2))

	cmp	esi, edi
	jbe	SHORT $LN74@CalculateQ
$LN2@CalculateQ:

; 506  :         return (q_);
; 507  :     --q_;

	dec	r8d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	ecx, r8d
	imul	r10, rcx
	imul	rcx, rbp

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	rdx, r10
	shr	rdx, 32					; 00000020H

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sub	ebx, ecx
	mov	DWORD PTR rh_mi$4[rsp], ebx
	setb	al

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	shr	rcx, 32					; 00000020H

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	al, -1
	sbb	r9d, ecx
	mov	DWORD PTR rh_hi$3[rsp], r9d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock xadd DWORD PTR statistics_info+4, r14d
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     if (rh_hi > 0)

	cmp	DWORD PTR rh_hi$3[rsp], 0
	ja	SHORT $LN74@CalculateQ

; 430  :         return (FALSE);
; 431  :     else if (lh_mi > rh_mi)

	cmp	edx, DWORD PTR rh_mi$4[rsp]
	ja	SHORT $LN3@CalculateQ

; 432  :         return (TRUE);
; 433  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN74@CalculateQ

; 508  :     if (!CheckQ_(q_, uj, uj_1, uj_2, v1, v2))

	cmp	r10d, edi
	jbe	SHORT $LN74@CalculateQ
$LN3@CalculateQ:

; 509  :         return (q_);
; 510  :     --q_;

	lea	eax, DWORD PTR [r8-1]

; 511  :     return (q_);
; 512  : }

	pop	r14
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
$LN74@CalculateQ:
	mov	eax, r8d
	pop	r14
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
CalculateQ_ ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT CheckQ_X
_TEXT	SEGMENT
q_$ = 8
uj$ = 16
uj_1$ = 24
uj_2$ = 32
rh_mi$ = 40
v1$ = 40
rh_hi$ = 48
v2$ = 48
CheckQ_X PROC						; COMDAT
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	r11d, DWORD PTR v2$[rsp]
	mov	eax, ecx
	mov	ecx, DWORD PTR v1$[rsp]
	imul	r11, rax
	imul	rcx, rax

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, r11
	shr	r10, 32					; 00000020H

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sub	r8d, ecx
	mov	DWORD PTR rh_mi$[rsp], r8d
	setb	al

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	shr	rcx, 32					; 00000020H

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	al, -1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	edx, ecx
	mov	DWORD PTR rh_hi$[rsp], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock xadd DWORD PTR statistics_info+4, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 466  :     if (rh_hi > 0)

	cmp	DWORD PTR rh_hi$[rsp], 0
	ja	SHORT $LN27@CheckQ_X

; 467  :     {
; 468  : #ifdef DO_TRACE
; 469  :         ReportVar("result", 0);
; 470  : #endif
; 471  :         return (FALSE);
; 472  :     }
; 473  :     else if (lh_mi > rh_mi)

	cmp	r10d, DWORD PTR rh_mi$[rsp]
	jbe	SHORT $LN6@CheckQ_X

; 474  :     {
; 475  : #ifdef DO_TRACE
; 476  :         ReportVar("result", 1);
; 477  : #endif
; 478  :         return (TRUE);

	mov	eax, 1

; 493  :     }
; 494  : }

	ret	0
$LN6@CheckQ_X:

; 479  :     }
; 480  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN27@CheckQ_X

; 486  :     }
; 487  :     else
; 488  :     {
; 489  : #ifdef DO_TRACE
; 490  :         ReportVar("result", lh_lo > rh_lo);
; 491  : #endif
; 492  :         return (lh_lo > rh_lo);

	xor	eax, eax
	cmp	r11d, r9d
	seta	al

; 493  :     }
; 494  : }

	ret	0
$LN27@CheckQ_X:

; 481  :     {
; 482  : #ifdef DO_TRACE
; 483  :         ReportVar("result", 0);
; 484  : #endif
; 485  :         return (FALSE);

	xor	eax, eax

; 493  :     }
; 494  : }

	ret	0
CheckQ_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT CheckQ_
_TEXT	SEGMENT
q_$ = 8
uj$ = 16
uj_1$ = 24
uj_2$ = 32
rh_mi$ = 40
v1$ = 40
rh_hi$ = 48
v2$ = 48
CheckQ_	PROC						; COMDAT
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	r11d, DWORD PTR v2$[rsp]
	mov	eax, ecx
	mov	ecx, DWORD PTR v1$[rsp]
	imul	r11, rax
	imul	rcx, rax

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	r10, r11
	shr	r10, 32					; 00000020H

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sub	r8d, ecx
	mov	DWORD PTR rh_mi$[rsp], r8d
	setb	al

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	shr	rcx, 32					; 00000020H

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	al, -1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	mov	eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 276  :         return (_subborrow_u32(borrow, u, v, w));

	sbb	edx, ecx
	mov	DWORD PTR rh_hi$[rsp], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock xadd DWORD PTR statistics_info+4, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 429  :     if (rh_hi > 0)

	cmp	DWORD PTR rh_hi$[rsp], 0
	ja	SHORT $LN27@CheckQ_

; 430  :         return (FALSE);
; 431  :     else if (lh_mi > rh_mi)

	cmp	r10d, DWORD PTR rh_mi$[rsp]
	jbe	SHORT $LN6@CheckQ_

; 432  :         return (TRUE);

	mov	eax, 1

; 437  : }

	ret	0
$LN6@CheckQ_:

; 433  :     else if (lh_mi < rh_mi)

	jb	SHORT $LN27@CheckQ_

; 435  :     else
; 436  :         return (lh_lo > rh_lo);

	xor	eax, eax
	cmp	r11d, r9d
	seta	al

; 437  : }

	ret	0
$LN27@CheckQ_:

; 434  :         return (FALSE);

	xor	eax, eax

; 437  : }

	ret	0
CheckQ_	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT AsumeQ_
_TEXT	SEGMENT
uj$ = 8
uj_1$ = 16
v1$ = 24
AsumeQ_	PROC						; COMDAT

; 399  :     if (uj == v1)

	cmp	ecx, r8d
	jne	SHORT $LN2@AsumeQ_

; 400  :         return (-1);

	mov	eax, -1					; ffffffffH

; 410  : }

	ret	0
$LN2@AsumeQ_:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 313  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock inc DWORD PTR statistics_info+12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, ecx
	mov	ecx, edx

; 385  :             return ((_UINT32_T)(t / v));

	xor	edx, edx

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	shl	rax, 32					; 00000020H
	or	rax, rcx

; 385  :             return ((_UINT32_T)(t / v));

	mov	ecx, r8d
	div	rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 410  : }

	ret	0
AsumeQ_	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_2WORDS_ADCX_DIV
_TEXT	SEGMENT
c$ = 8
xp$ = 16
yp$ = 24
zp$ = 32
_ADD_2WORDS_ADCX_DIV PROC				; COMDAT

; 4544 : #ifdef _MSC_VER
; 4545 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [rdx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	cl, -1
	adcx	eax, DWORD PTR [r8]
	mov	DWORD PTR [r9], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4546 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	ecx, DWORD PTR [rdx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	ecx, DWORD PTR [r8+4]
	mov	DWORD PTR [r9+4], ecx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4583 : }

	ret	0
_ADD_2WORDS_ADCX_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_2WORDS_ADC_DIV
_TEXT	SEGMENT
c$ = 8
xp$ = 16
yp$ = 24
zp$ = 32
_ADD_2WORDS_ADC_DIV PROC				; COMDAT

; 4501 : #ifdef _MSC_VER
; 4502 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [rdx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	cl, -1
	adc	eax, DWORD PTR [r8]
	mov	DWORD PTR [r9], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4503 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	ecx, DWORD PTR [rdx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+4]
	mov	DWORD PTR [r9+4], ecx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4540 : }

	ret	0
_ADD_2WORDS_ADC_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_4WORDS_ADCX_DIV
_TEXT	SEGMENT
c$ = 8
xp$ = 16
yp$ = 24
zp$ = 32
_ADD_4WORDS_ADCX_DIV PROC				; COMDAT

; 4158 : #ifdef _MSC_VER
; 4159 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [rdx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	cl, -1
	adcx	eax, DWORD PTR [r8]
	mov	DWORD PTR [r9], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4160 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [rdx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+4]
	mov	DWORD PTR [r9+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4161 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [rdx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+8]
	mov	DWORD PTR [r9+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4162 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	ecx, DWORD PTR [rdx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	ecx, DWORD PTR [r8+12]
	mov	DWORD PTR [r9+12], ecx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4211 : }

	ret	0
_ADD_4WORDS_ADCX_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_4WORDS_ADC_DIV
_TEXT	SEGMENT
c$ = 8
xp$ = 16
yp$ = 24
zp$ = 32
_ADD_4WORDS_ADC_DIV PROC				; COMDAT

; 4101 : #ifdef _MSC_VER
; 4102 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [rdx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	cl, -1
	adc	eax, DWORD PTR [r8]
	mov	DWORD PTR [r9], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4103 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [rdx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+4]
	mov	DWORD PTR [r9+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4104 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [rdx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+8]
	mov	DWORD PTR [r9+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4105 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	ecx, DWORD PTR [rdx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+12]
	mov	DWORD PTR [r9+12], ecx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 4154 : }

	ret	0
_ADD_4WORDS_ADC_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_8WORDS_ADCX_DIV
_TEXT	SEGMENT
c$ = 8
xp$ = 16
yp$ = 24
zp$ = 32
_ADD_8WORDS_ADCX_DIV PROC				; COMDAT

; 3618 : #ifdef _MSC_VER
; 3619 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [rdx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	cl, -1
	adcx	eax, DWORD PTR [r8]
	mov	DWORD PTR [r9], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3620 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [rdx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+4]
	mov	DWORD PTR [r9+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3621 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [rdx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+8]
	mov	DWORD PTR [r9+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3622 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [rdx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+12]
	mov	DWORD PTR [r9+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3623 :     c = _ADDX_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [rdx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+16]
	mov	DWORD PTR [r9+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3624 :     c = _ADDX_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [rdx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+20]
	mov	DWORD PTR [r9+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3625 :     c = _ADDX_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [rdx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+24]
	mov	DWORD PTR [r9+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3626 :     c = _ADDX_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	ecx, DWORD PTR [rdx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	ecx, DWORD PTR [r8+28]
	mov	DWORD PTR [r9+28], ecx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3699 : }

	ret	0
_ADD_8WORDS_ADCX_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_8WORDS_ADC_DIV
_TEXT	SEGMENT
c$ = 8
xp$ = 16
yp$ = 24
zp$ = 32
_ADD_8WORDS_ADC_DIV PROC				; COMDAT

; 3533 : #ifdef _MSC_VER
; 3534 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [rdx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	cl, -1
	adc	eax, DWORD PTR [r8]
	mov	DWORD PTR [r9], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3535 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [rdx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+4]
	mov	DWORD PTR [r9+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3536 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [rdx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+8]
	mov	DWORD PTR [r9+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3537 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [rdx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+12]
	mov	DWORD PTR [r9+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3538 :     c = _ADD_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [rdx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+16]
	mov	DWORD PTR [r9+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3539 :     c = _ADD_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [rdx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+20]
	mov	DWORD PTR [r9+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3540 :     c = _ADD_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [rdx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+24]
	mov	DWORD PTR [r9+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3541 :     c = _ADD_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	ecx, DWORD PTR [rdx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+28]
	mov	DWORD PTR [r9+28], ecx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 3614 : }

	ret	0
_ADD_8WORDS_ADC_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_16WORDS_ADCX_DIV
_TEXT	SEGMENT
c$ = 8
xp$ = 16
yp$ = 24
zp$ = 32
_ADD_16WORDS_ADCX_DIV PROC				; COMDAT

; 2770 : #ifdef _MSC_VER
; 2771 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [rdx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	cl, -1
	adcx	eax, DWORD PTR [r8]
	mov	DWORD PTR [r9], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2772 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [rdx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+4]
	mov	DWORD PTR [r9+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2773 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [rdx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+8]
	mov	DWORD PTR [r9+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2774 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [rdx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+12]
	mov	DWORD PTR [r9+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2775 :     c = _ADDX_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [rdx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+16]
	mov	DWORD PTR [r9+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2776 :     c = _ADDX_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [rdx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+20]
	mov	DWORD PTR [r9+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2777 :     c = _ADDX_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [rdx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+24]
	mov	DWORD PTR [r9+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2778 :     c = _ADDX_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, DWORD PTR [rdx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+28]
	mov	DWORD PTR [r9+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2779 :     c = _ADDX_UNIT_DIV(c, xp[8], yp[8], &zp[8]);

	mov	eax, DWORD PTR [rdx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+32]
	mov	DWORD PTR [r9+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2780 :     c = _ADDX_UNIT_DIV(c, xp[9], yp[9], &zp[9]);

	mov	eax, DWORD PTR [rdx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+36]
	mov	DWORD PTR [r9+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2781 :     c = _ADDX_UNIT_DIV(c, xp[10], yp[10], &zp[10]);

	mov	eax, DWORD PTR [rdx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+40]
	mov	DWORD PTR [r9+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2782 :     c = _ADDX_UNIT_DIV(c, xp[11], yp[11], &zp[11]);

	mov	eax, DWORD PTR [rdx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+44]
	mov	DWORD PTR [r9+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2783 :     c = _ADDX_UNIT_DIV(c, xp[12], yp[12], &zp[12]);

	mov	eax, DWORD PTR [rdx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+48]
	mov	DWORD PTR [r9+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2784 :     c = _ADDX_UNIT_DIV(c, xp[13], yp[13], &zp[13]);

	mov	eax, DWORD PTR [rdx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+52]
	mov	DWORD PTR [r9+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2785 :     c = _ADDX_UNIT_DIV(c, xp[14], yp[14], &zp[14]);

	mov	eax, DWORD PTR [rdx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+56]
	mov	DWORD PTR [r9+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2786 :     c = _ADDX_UNIT_DIV(c, xp[15], yp[15], &zp[15]);

	mov	ecx, DWORD PTR [rdx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	ecx, DWORD PTR [r8+60]
	mov	DWORD PTR [r9+60], ecx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2907 : }

	ret	0
_ADD_16WORDS_ADCX_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_16WORDS_ADC_DIV
_TEXT	SEGMENT
c$ = 8
xp$ = 16
yp$ = 24
zp$ = 32
_ADD_16WORDS_ADC_DIV PROC				; COMDAT

; 2629 : #ifdef _MSC_VER
; 2630 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [rdx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	cl, -1
	adc	eax, DWORD PTR [r8]
	mov	DWORD PTR [r9], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2631 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [rdx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+4]
	mov	DWORD PTR [r9+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2632 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [rdx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+8]
	mov	DWORD PTR [r9+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2633 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [rdx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+12]
	mov	DWORD PTR [r9+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2634 :     c = _ADD_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [rdx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+16]
	mov	DWORD PTR [r9+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2635 :     c = _ADD_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [rdx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+20]
	mov	DWORD PTR [r9+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2636 :     c = _ADD_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [rdx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+24]
	mov	DWORD PTR [r9+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2637 :     c = _ADD_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, DWORD PTR [rdx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+28]
	mov	DWORD PTR [r9+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2638 :     c = _ADD_UNIT_DIV(c, xp[8], yp[8], &zp[8]);

	mov	eax, DWORD PTR [rdx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+32]
	mov	DWORD PTR [r9+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2639 :     c = _ADD_UNIT_DIV(c, xp[9], yp[9], &zp[9]);

	mov	eax, DWORD PTR [rdx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+36]
	mov	DWORD PTR [r9+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2640 :     c = _ADD_UNIT_DIV(c, xp[10], yp[10], &zp[10]);

	mov	eax, DWORD PTR [rdx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+40]
	mov	DWORD PTR [r9+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2641 :     c = _ADD_UNIT_DIV(c, xp[11], yp[11], &zp[11]);

	mov	eax, DWORD PTR [rdx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+44]
	mov	DWORD PTR [r9+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2642 :     c = _ADD_UNIT_DIV(c, xp[12], yp[12], &zp[12]);

	mov	eax, DWORD PTR [rdx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+48]
	mov	DWORD PTR [r9+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2643 :     c = _ADD_UNIT_DIV(c, xp[13], yp[13], &zp[13]);

	mov	eax, DWORD PTR [rdx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+52]
	mov	DWORD PTR [r9+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2644 :     c = _ADD_UNIT_DIV(c, xp[14], yp[14], &zp[14]);

	mov	eax, DWORD PTR [rdx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+56]
	mov	DWORD PTR [r9+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2645 :     c = _ADD_UNIT_DIV(c, xp[15], yp[15], &zp[15]);

	mov	ecx, DWORD PTR [rdx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+60]
	mov	DWORD PTR [r9+60], ecx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 2766 : }

	ret	0
_ADD_16WORDS_ADC_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_32WORDS_ADCX_DIV
_TEXT	SEGMENT
c$ = 8
xp$ = 16
yp$ = 24
zp$ = 32
_ADD_32WORDS_ADCX_DIV PROC				; COMDAT

; 1306 : #ifdef _MSC_VER
; 1307 :     c = _ADDX_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [rdx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	cl, -1
	adcx	eax, DWORD PTR [r8]
	mov	DWORD PTR [r9], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1308 :     c = _ADDX_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [rdx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+4]
	mov	DWORD PTR [r9+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1309 :     c = _ADDX_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [rdx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+8]
	mov	DWORD PTR [r9+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1310 :     c = _ADDX_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [rdx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+12]
	mov	DWORD PTR [r9+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1311 :     c = _ADDX_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [rdx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+16]
	mov	DWORD PTR [r9+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1312 :     c = _ADDX_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [rdx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+20]
	mov	DWORD PTR [r9+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1313 :     c = _ADDX_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [rdx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+24]
	mov	DWORD PTR [r9+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1314 :     c = _ADDX_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, DWORD PTR [rdx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+28]
	mov	DWORD PTR [r9+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1315 :     c = _ADDX_UNIT_DIV(c, xp[8], yp[8], &zp[8]);

	mov	eax, DWORD PTR [rdx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+32]
	mov	DWORD PTR [r9+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1316 :     c = _ADDX_UNIT_DIV(c, xp[9], yp[9], &zp[9]);

	mov	eax, DWORD PTR [rdx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+36]
	mov	DWORD PTR [r9+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1317 :     c = _ADDX_UNIT_DIV(c, xp[10], yp[10], &zp[10]);

	mov	eax, DWORD PTR [rdx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+40]
	mov	DWORD PTR [r9+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1318 :     c = _ADDX_UNIT_DIV(c, xp[11], yp[11], &zp[11]);

	mov	eax, DWORD PTR [rdx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+44]
	mov	DWORD PTR [r9+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1319 :     c = _ADDX_UNIT_DIV(c, xp[12], yp[12], &zp[12]);

	mov	eax, DWORD PTR [rdx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+48]
	mov	DWORD PTR [r9+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1320 :     c = _ADDX_UNIT_DIV(c, xp[13], yp[13], &zp[13]);

	mov	eax, DWORD PTR [rdx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+52]
	mov	DWORD PTR [r9+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1321 :     c = _ADDX_UNIT_DIV(c, xp[14], yp[14], &zp[14]);

	mov	eax, DWORD PTR [rdx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+56]
	mov	DWORD PTR [r9+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1322 :     c = _ADDX_UNIT_DIV(c, xp[15], yp[15], &zp[15]);

	mov	eax, DWORD PTR [rdx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+60]
	mov	DWORD PTR [r9+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1323 :     c = _ADDX_UNIT_DIV(c, xp[16], yp[16], &zp[16]);

	mov	eax, DWORD PTR [rdx+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+64]
	mov	DWORD PTR [r9+64], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1324 :     c = _ADDX_UNIT_DIV(c, xp[17], yp[17], &zp[17]);

	mov	eax, DWORD PTR [rdx+68]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+68]
	mov	DWORD PTR [r9+68], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1325 :     c = _ADDX_UNIT_DIV(c, xp[18], yp[18], &zp[18]);

	mov	eax, DWORD PTR [rdx+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+72]
	mov	DWORD PTR [r9+72], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1326 :     c = _ADDX_UNIT_DIV(c, xp[19], yp[19], &zp[19]);

	mov	eax, DWORD PTR [rdx+76]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+76]
	mov	DWORD PTR [r9+76], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1327 :     c = _ADDX_UNIT_DIV(c, xp[20], yp[20], &zp[20]);

	mov	eax, DWORD PTR [rdx+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+80]
	mov	DWORD PTR [r9+80], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1328 :     c = _ADDX_UNIT_DIV(c, xp[21], yp[21], &zp[21]);

	mov	eax, DWORD PTR [rdx+84]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+84]
	mov	DWORD PTR [r9+84], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1329 :     c = _ADDX_UNIT_DIV(c, xp[22], yp[22], &zp[22]);

	mov	eax, DWORD PTR [rdx+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+88]
	mov	DWORD PTR [r9+88], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1330 :     c = _ADDX_UNIT_DIV(c, xp[23], yp[23], &zp[23]);

	mov	eax, DWORD PTR [rdx+92]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+92]
	mov	DWORD PTR [r9+92], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1331 :     c = _ADDX_UNIT_DIV(c, xp[24], yp[24], &zp[24]);

	mov	eax, DWORD PTR [rdx+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+96]
	mov	DWORD PTR [r9+96], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1332 :     c = _ADDX_UNIT_DIV(c, xp[25], yp[25], &zp[25]);

	mov	eax, DWORD PTR [rdx+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+100]
	mov	DWORD PTR [r9+100], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1333 :     c = _ADDX_UNIT_DIV(c, xp[26], yp[26], &zp[26]);

	mov	eax, DWORD PTR [rdx+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+104]
	mov	DWORD PTR [r9+104], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1334 :     c = _ADDX_UNIT_DIV(c, xp[27], yp[27], &zp[27]);

	mov	eax, DWORD PTR [rdx+108]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+108]
	mov	DWORD PTR [r9+108], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1335 :     c = _ADDX_UNIT_DIV(c, xp[28], yp[28], &zp[28]);

	mov	eax, DWORD PTR [rdx+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+112]
	mov	DWORD PTR [r9+112], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1336 :     c = _ADDX_UNIT_DIV(c, xp[29], yp[29], &zp[29]);

	mov	eax, DWORD PTR [rdx+116]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+116]
	mov	DWORD PTR [r9+116], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1337 :     c = _ADDX_UNIT_DIV(c, xp[30], yp[30], &zp[30]);

	mov	eax, DWORD PTR [rdx+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	eax, DWORD PTR [r8+120]
	mov	DWORD PTR [r9+120], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1338 :     c = _ADDX_UNIT_DIV(c, xp[31], yp[31], &zp[31]);

	mov	ecx, DWORD PTR [rdx+124]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 248  :         return (_addcarryx_u32(carry, u, v, w));

	adcx	ecx, DWORD PTR [r8+124]
	mov	DWORD PTR [r9+124], ecx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1555 : }

	ret	0
_ADD_32WORDS_ADCX_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h
;	COMDAT _ADD_32WORDS_ADC_DIV
_TEXT	SEGMENT
c$ = 8
xp$ = 16
yp$ = 24
zp$ = 32
_ADD_32WORDS_ADC_DIV PROC				; COMDAT

; 1053 : #ifdef _MSC_VER
; 1054 :     c = _ADD_UNIT_DIV(c, xp[0], yp[0], &zp[0]);

	mov	eax, DWORD PTR [rdx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	cl, -1
	adc	eax, DWORD PTR [r8]
	mov	DWORD PTR [r9], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1055 :     c = _ADD_UNIT_DIV(c, xp[1], yp[1], &zp[1]);

	mov	eax, DWORD PTR [rdx+4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+4]
	mov	DWORD PTR [r9+4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1056 :     c = _ADD_UNIT_DIV(c, xp[2], yp[2], &zp[2]);

	mov	eax, DWORD PTR [rdx+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+8]
	mov	DWORD PTR [r9+8], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1057 :     c = _ADD_UNIT_DIV(c, xp[3], yp[3], &zp[3]);

	mov	eax, DWORD PTR [rdx+12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+12]
	mov	DWORD PTR [r9+12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1058 :     c = _ADD_UNIT_DIV(c, xp[4], yp[4], &zp[4]);

	mov	eax, DWORD PTR [rdx+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+16]
	mov	DWORD PTR [r9+16], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1059 :     c = _ADD_UNIT_DIV(c, xp[5], yp[5], &zp[5]);

	mov	eax, DWORD PTR [rdx+20]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+20]
	mov	DWORD PTR [r9+20], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1060 :     c = _ADD_UNIT_DIV(c, xp[6], yp[6], &zp[6]);

	mov	eax, DWORD PTR [rdx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+24]
	mov	DWORD PTR [r9+24], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1061 :     c = _ADD_UNIT_DIV(c, xp[7], yp[7], &zp[7]);

	mov	eax, DWORD PTR [rdx+28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+28]
	mov	DWORD PTR [r9+28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1062 :     c = _ADD_UNIT_DIV(c, xp[8], yp[8], &zp[8]);

	mov	eax, DWORD PTR [rdx+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+32]
	mov	DWORD PTR [r9+32], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1063 :     c = _ADD_UNIT_DIV(c, xp[9], yp[9], &zp[9]);

	mov	eax, DWORD PTR [rdx+36]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+36]
	mov	DWORD PTR [r9+36], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1064 :     c = _ADD_UNIT_DIV(c, xp[10], yp[10], &zp[10]);

	mov	eax, DWORD PTR [rdx+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+40]
	mov	DWORD PTR [r9+40], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1065 :     c = _ADD_UNIT_DIV(c, xp[11], yp[11], &zp[11]);

	mov	eax, DWORD PTR [rdx+44]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+44]
	mov	DWORD PTR [r9+44], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1066 :     c = _ADD_UNIT_DIV(c, xp[12], yp[12], &zp[12]);

	mov	eax, DWORD PTR [rdx+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+48]
	mov	DWORD PTR [r9+48], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1067 :     c = _ADD_UNIT_DIV(c, xp[13], yp[13], &zp[13]);

	mov	eax, DWORD PTR [rdx+52]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+52]
	mov	DWORD PTR [r9+52], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1068 :     c = _ADD_UNIT_DIV(c, xp[14], yp[14], &zp[14]);

	mov	eax, DWORD PTR [rdx+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+56]
	mov	DWORD PTR [r9+56], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1069 :     c = _ADD_UNIT_DIV(c, xp[15], yp[15], &zp[15]);

	mov	eax, DWORD PTR [rdx+60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+60]
	mov	DWORD PTR [r9+60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1070 :     c = _ADD_UNIT_DIV(c, xp[16], yp[16], &zp[16]);

	mov	eax, DWORD PTR [rdx+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+64]
	mov	DWORD PTR [r9+64], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1071 :     c = _ADD_UNIT_DIV(c, xp[17], yp[17], &zp[17]);

	mov	eax, DWORD PTR [rdx+68]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+68]
	mov	DWORD PTR [r9+68], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1072 :     c = _ADD_UNIT_DIV(c, xp[18], yp[18], &zp[18]);

	mov	eax, DWORD PTR [rdx+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+72]
	mov	DWORD PTR [r9+72], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1073 :     c = _ADD_UNIT_DIV(c, xp[19], yp[19], &zp[19]);

	mov	eax, DWORD PTR [rdx+76]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+76]
	mov	DWORD PTR [r9+76], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1074 :     c = _ADD_UNIT_DIV(c, xp[20], yp[20], &zp[20]);

	mov	eax, DWORD PTR [rdx+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+80]
	mov	DWORD PTR [r9+80], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1075 :     c = _ADD_UNIT_DIV(c, xp[21], yp[21], &zp[21]);

	mov	eax, DWORD PTR [rdx+84]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+84]
	mov	DWORD PTR [r9+84], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1076 :     c = _ADD_UNIT_DIV(c, xp[22], yp[22], &zp[22]);

	mov	eax, DWORD PTR [rdx+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+88]
	mov	DWORD PTR [r9+88], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1077 :     c = _ADD_UNIT_DIV(c, xp[23], yp[23], &zp[23]);

	mov	eax, DWORD PTR [rdx+92]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+92]
	mov	DWORD PTR [r9+92], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1078 :     c = _ADD_UNIT_DIV(c, xp[24], yp[24], &zp[24]);

	mov	eax, DWORD PTR [rdx+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+96]
	mov	DWORD PTR [r9+96], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1079 :     c = _ADD_UNIT_DIV(c, xp[25], yp[25], &zp[25]);

	mov	eax, DWORD PTR [rdx+100]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+100]
	mov	DWORD PTR [r9+100], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1080 :     c = _ADD_UNIT_DIV(c, xp[26], yp[26], &zp[26]);

	mov	eax, DWORD PTR [rdx+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+104]
	mov	DWORD PTR [r9+104], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1081 :     c = _ADD_UNIT_DIV(c, xp[27], yp[27], &zp[27]);

	mov	eax, DWORD PTR [rdx+108]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+108]
	mov	DWORD PTR [r9+108], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1082 :     c = _ADD_UNIT_DIV(c, xp[28], yp[28], &zp[28]);

	mov	eax, DWORD PTR [rdx+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+112]
	mov	DWORD PTR [r9+112], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1083 :     c = _ADD_UNIT_DIV(c, xp[29], yp[29], &zp[29]);

	mov	eax, DWORD PTR [rdx+116]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+116]
	mov	DWORD PTR [r9+116], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1084 :     c = _ADD_UNIT_DIV(c, xp[30], yp[30], &zp[30]);

	mov	eax, DWORD PTR [rdx+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	eax, DWORD PTR [r8+120]
	mov	DWORD PTR [r9+120], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1085 :     c = _ADD_UNIT_DIV(c, xp[31], yp[31], &zp[31]);

	mov	ecx, DWORD PTR [rdx+124]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 220  :         return (_addcarry_u32(carry, u, v, w));

	adc	ecx, DWORD PTR [r8+124]
	mov	DWORD PTR [r9+124], ecx
	setb	al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\autogenerated_inline_func.h

; 1302 : }

	ret	0
_ADD_32WORDS_ADC_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _LZCNT_ALT_UNIT_DIV
_TEXT	SEGMENT
x$ = 8
_LZCNT_ALT_UNIT_DIV PROC				; COMDAT

; 653  :         if (x == 0)

	test	ecx, ecx
	jne	SHORT $LN2@LZCNT_ALT_

; 654  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 678  :     }

	ret	0
$LN2@LZCNT_ALT_:

; 655  : #ifdef _M_IX86
; 656  :         _UINT32_T pos;
; 657  : #ifdef _MSC_VER
; 658  :         _BitScanReverse(&pos, x);
; 659  : #elif defined(__GNUC__)
; 660  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 661  : #else
; 662  : #error unknown compiler
; 663  : #endif
; 664  : #elif defined(_M_X64)
; 665  : #ifdef _MSC_VER
; 666  :         _UINT32_T pos;
; 667  :         _BitScanReverse(&pos, x);

	bsr	ecx, ecx

; 668  : #elif defined(__GNUC__)
; 669  :         _UINT64_T pos;
; 670  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 671  : #else
; 672  : #error unknown compiler
; 673  : #endif
; 674  : #else
; 675  : #error unknown platform
; 676  : #endif
; 677  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31
	sub	eax, ecx

; 678  :     }

	ret	0
_LZCNT_ALT_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _LZCNT_ALT_UNIT
_TEXT	SEGMENT
x$ = 8
_LZCNT_ALT_UNIT PROC					; COMDAT

; 624  :         if (x == 0)

	test	rcx, rcx
	jne	SHORT $LN2@LZCNT_ALT_

; 625  :             return (sizeof(x) * 8);

	mov	eax, 64					; 00000040H

; 649  :     }

	ret	0
$LN2@LZCNT_ALT_:

; 626  : #ifdef _M_IX86
; 627  :         _UINT32_T pos;
; 628  : #ifdef _MSC_VER
; 629  :         _BitScanReverse(&pos, x);
; 630  : #elif defined(__GNUC__)
; 631  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 632  : #else
; 633  : #error unknown compiler
; 634  : #endif
; 635  : #elif defined(_M_X64)
; 636  : #ifdef _MSC_VER
; 637  :         _UINT32_T pos;
; 638  :         _BitScanReverse64(&pos, x);

	bsr	rcx, rcx

; 639  : #elif defined(__GNUC__)
; 640  :         _UINT64_T pos;
; 641  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 642  : #else
; 643  : #error unknown compiler
; 644  : #endif
; 645  : #else
; 646  : #error unknown platform
; 647  : #endif
; 648  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 63					; 0000003fH
	sub	eax, ecx

; 649  :     }

	ret	0
_LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _LZCNT_ALT_32
_TEXT	SEGMENT
x$ = 8
_LZCNT_ALT_32 PROC					; COMDAT

; 591  :         if (x == 0)

	test	ecx, ecx
	jne	SHORT $LN2@LZCNT_ALT_

; 592  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 602  :     }

	ret	0
$LN2@LZCNT_ALT_:

; 593  :         _UINT32_T pos;
; 594  : #ifdef _MSC_VER
; 595  :         _BitScanReverse(&pos, x);

	bsr	ecx, ecx

; 596  : #elif defined(__GNUC__)
; 597  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 598  : #else
; 599  : #error unknown compiler
; 600  : #endif
; 601  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31
	sub	eax, ecx

; 602  :     }

	ret	0
_LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _DIVREM_SINGLE_UNIT
_TEXT	SEGMENT
r$ = 8
u$ = 16
v$ = 24
q$ = 32
_DIVREM_SINGLE_UNIT PROC				; COMDAT

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, ecx
	mov	ecx, edx

; 423  : #ifdef _MSC_VER
; 424  :         if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))
; 425  :         {
; 426  :             // 64bit/32bitの除算を行う組み込み関数は実装されていない。
; 427  :             _UINT64_T t = _FROMWORDTODWORD(r, u);
; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	shl	rax, 32					; 00000020H
	or	rax, rcx

; 423  : #ifdef _MSC_VER
; 424  :         if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))
; 425  :         {
; 426  :             // 64bit/32bitの除算を行う組み込み関数は実装されていない。
; 427  :             _UINT64_T t = _FROMWORDTODWORD(r, u);
; 428  :             *q = (_UINT32_T)(t / v);

	mov	ecx, r8d
	div	rcx
	mov	DWORD PTR [r9], eax

; 429  :             return ((_UINT32_T)(t % v));

	mov	eax, edx

; 430  :         }
; 431  :         else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))
; 432  :         {
; 433  :             // 以下の理由のため、MSVCでは 128bit/64bit の除算を実装できない。運用で回避すること。
; 434  :             // ・(x64 に限らず) 除算の組み込み関数が用意されていない。
; 435  :             // ・128bit 整数のデータ型が用意されていない。
; 436  :             // ・x64 ではインラインアセンブラがサポートされていない。
; 437  :             *q = 0;
; 438  :             return (0);
; 439  :         }
; 440  :         else
; 441  :         {
; 442  :             // 未知のプラットフォームの場合はとりあえず適当なものを返す。
; 443  :             *q = 0;
; 444  :             return (0);
; 445  :         }
; 446  : #elif defined(__GNUC__)
; 447  :         if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))
; 448  :             __asm__("divl %4": "=a"(*q), "=d"(r) : "0"(u), "1"(r), "rm"(v));
; 449  :         else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))
; 450  :             __asm__("divq %4": "=a"(*q), "=d"(r) : "0"(u), "1"(r), "rm"(v));
; 451  :         else
; 452  :         {
; 453  :             // 未知のプラットフォームの場合はとりあえず適当なものを返す。
; 454  :             *q = 0;
; 455  :             r = 0;
; 456  :         }
; 457  :         return (r);
; 458  : #else
; 459  : #error unknown compiler
; 460  : #endif
; 461  :     }

	ret	0
_DIVREM_SINGLE_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _DIVREM_UNIT
_TEXT	SEGMENT
u_high$ = 8
u_low$ = 16
v$ = 24
r$ = 32
_DIVREM_UNIT PROC					; COMDAT

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, ecx
	mov	ecx, edx

; 379  : #ifdef _MSC_VER
; 380  :         if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))
; 381  :         {
; 382  :             // 64bit/32bitの除算を行う組み込み関数は実装されていない。
; 383  :             _UINT64_T t = _FROMWORDTODWORD(u_high, u_low);
; 384  :             *r = (_UINT32_T)(t % v);

	xor	edx, edx

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	shl	rax, 32					; 00000020H
	or	rax, rcx

; 379  : #ifdef _MSC_VER
; 380  :         if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))
; 381  :         {
; 382  :             // 64bit/32bitの除算を行う組み込み関数は実装されていない。
; 383  :             _UINT64_T t = _FROMWORDTODWORD(u_high, u_low);
; 384  :             *r = (_UINT32_T)(t % v);

	mov	ecx, r8d
	div	rcx
	mov	DWORD PTR [r9], edx

; 385  :             return ((_UINT32_T)(t / v));
; 386  :         }
; 387  :         else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))
; 388  :         {
; 389  :             // 以下の理由のため、MSVCでは 128bit/64bit の除算を実装できない。運用で回避すること。
; 390  :             // ・(x64 に限らず) 除算の組み込み関数が用意されていない。
; 391  :             // ・128bit 整数のデータ型が用意されていない。
; 392  :             // ・x64 ではインラインアセンブラがサポートされていない。
; 393  :             *r = 0;
; 394  :             return (0);
; 395  :         }
; 396  :         else
; 397  :         {
; 398  :             // 未知のプラットフォームの場合はとりあえず適当なものを返す。
; 399  :             *r = 0;
; 400  :             return (0);
; 401  :         }
; 402  : #elif defined(__GNUC__)
; 403  :         __UNIT_TYPE q;
; 404  :         if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT32_T))
; 405  :             __asm__("divl %4": "=a"(q), "=d"(*r) : "0"(u_low), "1"(u_high), "rm"(v));
; 406  :         else if (sizeof(__UNIT_TYPE_DIV) == sizeof(_UINT64_T))
; 407  :             __asm__("divq %4": "=a"(q), "=d"(*r) : "0"(u_low), "1"(u_high), "rm"(v));
; 408  :         else
; 409  :         {
; 410  :             // 未知のプラットフォームの場合はとりあえず適当なものを返す。
; 411  :             *r = 0;
; 412  :             q = 0;
; 413  :         }
; 414  :         return (q);
; 415  : #else
; 416  : #error unknown compiler
; 417  : #endif
; 418  :     }

	ret	0
_DIVREM_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _MULTIPLYX_UNIT_DIV
_TEXT	SEGMENT
u$ = 8
v$ = 16
w_hi$ = 24
_MULTIPLYX_UNIT_DIV PROC				; COMDAT

; 357  : #ifdef _MSC_VER
; 358  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, ecx
	mov	ecx, edx
	imul	rax, rcx

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	rcx, rax
	shr	rcx, 32					; 00000020H
	mov	DWORD PTR [r8], ecx

; 359  : #elif defined(__GNUC__)
; 360  : #ifdef _M_IX86
; 361  :         _UINT32_T w_lo;
; 362  :         __asm__("mulxl %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 363  :         return (w_lo);
; 364  : #elif defined(_M_X64)
; 365  :         _UINT64_T w_lo;
; 366  :         __asm__("mulxq %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 367  :         return (w_lo);
; 368  : #else
; 369  : #error unknown platform
; 370  : #endif
; 371  : #else
; 372  : #error unknown compiler
; 373  : #endif
; 374  :     }

	ret	0
_MULTIPLYX_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _MULTIPLY_UNIT_DIV
_TEXT	SEGMENT
u$ = 8
v$ = 16
w_hi$ = 24
_MULTIPLY_UNIT_DIV PROC					; COMDAT

; 311  : #ifdef _MSC_VER
; 312  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));

	mov	eax, ecx
	mov	ecx, edx
	imul	rax, rcx

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	rcx, rax
	shr	rcx, 32					; 00000020H
	mov	DWORD PTR [r8], ecx

; 313  : #elif defined(__GNUC__)
; 314  : #ifdef _M_IX86
; 315  :         _UINT32_T w_lo;
; 316  :         __asm__("mull %3": "=a"(w_lo), "=d"(*w_hi) : "0"(u), "rm"(v));
; 317  :         return (w_lo);
; 318  : #elif defined(_M_X64)
; 319  :         return (_umul128(u, v, w_hi));
; 320  : #else
; 321  : #error unknown platform
; 322  : #endif
; 323  : #else
; 324  : #error unknown compiler
; 325  : #endif
; 326  :     }

	ret	0
_MULTIPLY_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _SUBTRUCT_UNIT_DIV
_TEXT	SEGMENT
borrow$ = 8
u$ = 16
v$ = 24
w$ = 32
_SUBTRUCT_UNIT_DIV PROC					; COMDAT

; 275  : #ifdef _MSC_VER
; 276  :         return (_subborrow_u32(borrow, u, v, w));

	add	cl, -1
	sbb	edx, r8d
	mov	DWORD PTR [r9], edx
	setb	al

; 277  : #elif defined(__GNUC__)
; 278  : #ifdef _M_IX86
; 279  :         return (_subborrow_u32(borrow, u, v, w));
; 280  : #elif defined(_M_X64)
; 281  :         return (_subborrow_u64(borrow, u, v, w));
; 282  : #else
; 283  : #error unknown platform
; 284  : #endif
; 285  : #else
; 286  : #error unknown compiler
; 287  : #endif
; 288  :     }

	ret	0
_SUBTRUCT_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ADDX_UNIT_DIV
_TEXT	SEGMENT
carry$ = 8
u$ = 16
v$ = 24
w$ = 32
_ADDX_UNIT_DIV PROC					; COMDAT

; 247  : #ifdef _MSC_VER
; 248  :         return (_addcarryx_u32(carry, u, v, w));

	add	cl, -1
	adcx	edx, r8d
	mov	DWORD PTR [r9], edx
	setb	al

; 249  : #elif defined(__GNUC__)
; 250  : #ifdef _M_IX86
; 251  :         return (_addcarryx_u32(carry, u, v, w));
; 252  : #elif defined(_M_X64)
; 253  :         return (_addcarryx_u64(carry, u, v, w));
; 254  : #else
; 255  : #error unknown platform
; 256  : #endif
; 257  : #else
; 258  : #error unknown compiler
; 259  : #endif
; 260  :     }

	ret	0
_ADDX_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ADD_UNIT_DIV
_TEXT	SEGMENT
carry$ = 8
u$ = 16
v$ = 24
w$ = 32
_ADD_UNIT_DIV PROC					; COMDAT

; 219  : #ifdef _MSC_VER
; 220  :         return (_addcarry_u32(carry, u, v, w));

	add	cl, -1
	adc	edx, r8d
	mov	DWORD PTR [r9], edx
	setb	al

; 221  : #elif defined(__GNUC__)
; 222  : #ifdef _M_IX86
; 223  :         return (_addcarry_u32(carry, u, v, w));
; 224  : #elif defined(_M_X64)
; 225  :         return (_addcarry_u64(carry, u, v, w));
; 226  : #else
; 227  : #error unknown platform
; 228  : #endif
; 229  : #else
; 230  : #error unknown compiler
; 231  : #endif
; 232  :     }

	ret	0
_ADD_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _FROMDWORDTOWORD
_TEXT	SEGMENT
value$ = 8
result_high$ = 16
_FROMDWORDTOWORD PROC					; COMDAT

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	rax, rcx
	shr	rax, 32					; 00000020H
	mov	DWORD PTR [rdx], eax

; 178  :         return ((_UINT32_T)value);

	mov	eax, ecx

; 179  :     }

	ret	0
_FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _FROMWORDTODWORD
_TEXT	SEGMENT
value_high$ = 8
value_low$ = 16
_FROMWORDTODWORD PROC					; COMDAT

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, ecx
	shl	rax, 32					; 00000020H
	mov	ecx, edx
	or	rax, rcx

; 173  :     }

	ret	0
_FROMWORDTODWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _COPY_MEMORY_UNIT_DIV
_TEXT	SEGMENT
d$ = 8
s$ = 16
count$ = 24
_COPY_MEMORY_UNIT_DIV PROC				; COMDAT

; 71   :     {

	mov	QWORD PTR [rsp+8], rsi
	mov	QWORD PTR [rsp+16], rdi
	mov	rdi, rcx

; 72   : #ifdef _M_IX86
; 73   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);
; 74   : #elif defined(_M_X64)
; 75   : #ifdef _MSC_VER
; 76   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);

	mov	rsi, rdx
	mov	ecx, r8d
	rep movsd

; 77   : #elif defined(__GNUC__)
; 78   :         __movsq(d, s, count);
; 79   : #else
; 80   : #error unknown compiler
; 81   : #endif
; 82   : #else
; 83   : #error unknown platform
; 84   : #endif
; 85   :     }

	mov	rsi, QWORD PTR [rsp+8]
	mov	rdi, QWORD PTR [rsp+16]
	ret	0
_COPY_MEMORY_UNIT_DIV ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _COPY_MEMORY_UNIT
_TEXT	SEGMENT
d$ = 8
s$ = 16
count$ = 24
_COPY_MEMORY_UNIT PROC					; COMDAT

; 60   :     {

	mov	QWORD PTR [rsp+8], rsi
	mov	QWORD PTR [rsp+16], rdi

; 61   : #ifdef _M_IX86
; 62   :         __movsd((unsigned long *)d, (unsigned long *)s, (unsigned long)count);
; 63   : #elif defined(_M_X64)
; 64   :         __movsq(d, s, count);

	mov	rdi, rcx
	mov	rsi, rdx
	mov	rcx, r8
	rep movsq

; 65   : #else
; 66   : #error unknown platform
; 67   : #endif
; 68   :     }

	mov	rsi, QWORD PTR [rsp+8]
	mov	rdi, QWORD PTR [rsp+16]
	ret	0
_COPY_MEMORY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT AddToMULTI64Counter
_TEXT	SEGMENT
value$ = 8
AddToMULTI64Counter PROC				; COMDAT

; 354  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	lock xadd DWORD PTR statistics_info, ecx

; 355  :     }

	ret	0
AddToMULTI64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT AddToMULTI32Counter
_TEXT	SEGMENT
value$ = 8
AddToMULTI32Counter PROC				; COMDAT

; 348  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock xadd DWORD PTR statistics_info+4, ecx

; 349  :     }

	ret	0
AddToMULTI32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT AddToDIV64Counter
_TEXT	SEGMENT
value$ = 8
AddToDIV64Counter PROC					; COMDAT

; 342  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV64, value);

	lock xadd DWORD PTR statistics_info+8, ecx

; 343  :     }

	ret	0
AddToDIV64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT AddToDIV32Counter
_TEXT	SEGMENT
value$ = 8
AddToDIV32Counter PROC					; COMDAT

; 336  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	lock xadd DWORD PTR statistics_info+12, ecx

; 337  :     }

	ret	0
AddToDIV32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT IncrementMULTI64Counter
_TEXT	SEGMENT
IncrementMULTI64Counter PROC				; COMDAT

; 331  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI64);

	lock inc DWORD PTR statistics_info

; 332  :     }

	ret	0
IncrementMULTI64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT IncrementMULTI32Counter
_TEXT	SEGMENT
IncrementMULTI32Counter PROC				; COMDAT

; 325  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

	lock inc DWORD PTR statistics_info+4

; 326  :     }

	ret	0
IncrementMULTI32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT IncrementDIV64Counter
_TEXT	SEGMENT
IncrementDIV64Counter PROC				; COMDAT

; 319  :         _InterlockedIncrement(&statistics_info.COUNT_DIV64);

	lock inc DWORD PTR statistics_info+8

; 320  :     }

	ret	0
IncrementDIV64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT IncrementDIV32Counter
_TEXT	SEGMENT
IncrementDIV32Counter PROC				; COMDAT

; 313  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock inc DWORD PTR statistics_info+12

; 314  :     }

	ret	0
IncrementDIV32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT PMC_DivRem_X_X
_TEXT	SEGMENT
nr$ = 64
work_v_buf_words$1 = 72
nq_light_check_code$2 = 72
nq_light_check_code$3 = 72
nr_light_check_code$4 = 80
work_v_buf_code$5 = 80
nr_light_check_code$6 = 80
nr_light_check_code$7 = 80
work_v_buf_code$8 = 88
work_v_buf_words$9 = 88
nr_light_check_code$10 = 96
nq$ = 144
u$ = 144
v$ = 152
q$ = 160
r$ = 168
PMC_DivRem_X_X PROC					; COMDAT

; 1838 : {

$LN62:
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	rbp
	push	r14
	push	r15
	mov	rbp, rsp
	sub	rsp, 112				; 00000070H
	mov	r15, r9
	mov	r14, r8
	mov	rdi, rdx
	mov	rsi, rcx

; 1839 :     if (u == NULL)

	test	rcx, rcx
	je	$LN48@PMC_DivRem

; 1840 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1841 :     if (v == NULL)

	test	rdx, rdx
	je	$LN48@PMC_DivRem

; 1842 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1843 :     if (r == NULL)

	test	r9, r9
	je	$LN48@PMC_DivRem

; 1845 :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 1846 :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 1847 :     PMC_STATUS_CODE result;
; 1848 :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	$LN1@PMC_DivRem

; 1849 :         return (result);
; 1850 :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	rcx, rdi
	call	CheckNumber
	test	eax, eax
	jne	$LN1@PMC_DivRem

; 1851 :         return (result);
; 1852 :     if (nv->IS_ZERO)

	mov	eax, DWORD PTR [rdi]
	test	al, 1
	je	SHORT $LN7@PMC_DivRem

; 1853 :     {
; 1854 :         // v が 0 である場合
; 1855 : 
; 1856 :         // 0 による除算はエラーで返す
; 1857 :         return (PMC_STATUS_DIVISION_BY_ZERO);

	mov	eax, -3
	jmp	$LN1@PMC_DivRem
$LN7@PMC_DivRem:

; 1858 :     }
; 1859 :     NUMBER_HEADER* nq;
; 1860 :     NUMBER_HEADER* nr;
; 1861 :     if (nu->IS_ZERO)

	test	BYTE PTR [rsi], 1
	mov	QWORD PTR [rsp+152], rbx
	je	SHORT $LN8@PMC_DivRem

; 1862 :     {
; 1863 :         // u が 0 である場合
; 1864 : 
; 1865 :         // q = 0, r = 0 を返す
; 1866 :         nq = q != NULL ? &number_zero : NULL;

	xor	ebx, ebx
	lea	rdi, OFFSET FLAT:number_zero
	test	r14, r14
	cmovne	rbx, rdi

; 1867 :         nr = &number_zero;
; 1868 :     }

	jmp	$LN52@PMC_DivRem
$LN8@PMC_DivRem:

; 1869 :     else
; 1870 :     {
; 1871 :         // u が 0 ではない場合
; 1872 : 
; 1873 :         if (nv->IS_ONE)

	test	al, 2
	je	SHORT $LN10@PMC_DivRem

; 1874 :         {
; 1875 :             // v が 1 である場合
; 1876 : 
; 1877 :             // q = u, r = 0 を返す
; 1878 :             if (q != NULL)

	test	r14, r14
	je	SHORT $LN12@PMC_DivRem

; 1879 :             {
; 1880 :                 if ((result = DuplicateNumber(nu, &nq)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR nq$[rbp-112]
	mov	rcx, rsi
	call	DuplicateNumber
	test	eax, eax
	jne	$LN51@PMC_DivRem
	mov	rbx, QWORD PTR nq$[rbp-112]

; 1885 :             nr = &number_zero;

	lea	rax, OFFSET FLAT:number_zero

; 1886 :         }

	jmp	$LN45@PMC_DivRem
$LN12@PMC_DivRem:

; 1881 :                     return (result);
; 1882 :             }
; 1883 :             else
; 1884 :                 nq = NULL;

	xor	ebx, ebx

; 1885 :             nr = &number_zero;

	lea	rax, OFFSET FLAT:number_zero

; 1886 :         }

	jmp	$LN45@PMC_DivRem
$LN10@PMC_DivRem:

; 1887 :         else
; 1888 :         {
; 1889 :             // u > 0 かつ v > 1 である場合
; 1890 : 
; 1891 :             // x と y の商・剰余を計算する
; 1892 :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	rbx, QWORD PTR [rsi+24]

; 1893 :             __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;

	mov	rax, QWORD PTR [rdi+24]

; 1894 :             if (u_bit_count < v_bit_count)

	cmp	rbx, rax
	jae	SHORT $LN15@PMC_DivRem

; 1895 :             {
; 1896 :                 // 明らかに u < v である場合
; 1897 : 
; 1898 :                 // q = 0, r = u を返す。
; 1899 :                 nq = q != NULL ? &number_zero : NULL;

	xor	ebx, ebx
	lea	rdi, OFFSET FLAT:number_zero
	test	r14, r14

; 1900 :                 if ((result = DuplicateNumber(nu, &nr)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR nr$[rbp-112]
	mov	rcx, rsi
	cmovne	rbx, rdi
	mov	QWORD PTR nq$[rbp-112], rbx
	call	DuplicateNumber
	test	eax, eax
	jne	$LN51@PMC_DivRem
	mov	rbx, QWORD PTR nq$[rbp-112]
	mov	rax, QWORD PTR nr$[rbp-112]
	jmp	$LN45@PMC_DivRem
$LN15@PMC_DivRem:

; 1901 :                     return (result);
; 1902 :             }
; 1903 :             else if (v_bit_count <= sizeof(__UNIT_TYPE_DIV) * 8)

	cmp	rax, 32					; 00000020H
	ja	$LN18@PMC_DivRem

; 1904 :             {
; 1905 :                 // 除数が 1 ワードで表現できる場合
; 1906 : 
; 1907 :                 if (q != NULL)

	test	r14, r14
	je	$LN20@PMC_DivRem

; 1908 :                 {
; 1909 :                     __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1910 :                     __UNIT_TYPE nq_light_check_code;
; 1911 :                     if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)

	sub	rbx, rax
	lea	r8, QWORD PTR nq_light_check_code$3[rbp-112]
	lea	rcx, QWORD PTR nq$[rbp-112]
	lea	rdx, QWORD PTR [rbx+65]
	call	AllocateNumber
	test	eax, eax
	jne	SHORT $LN51@PMC_DivRem

; 1912 :                         return (result);
; 1913 :                     __UNIT_TYPE r_bit_count = sizeof(__UNIT_TYPE_DIV) * 8;
; 1914 :                     __UNIT_TYPE nr_light_check_code;
; 1915 :                     if ((result = AllocateNumber(&nr, r_bit_count, &nr_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR nr_light_check_code$7[rbp-112]
	lea	edx, QWORD PTR [rax+32]
	lea	rcx, QWORD PTR nr$[rbp-112]
	call	AllocateNumber
	mov	ebx, eax
	test	eax, eax
	jne	$LN60@PMC_DivRem

; 1916 :                     {
; 1917 :                         DeallocateNumber(nq);
; 1918 :                         return (result);
; 1919 :                     }
; 1920 :                     DivRem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV)nv->BLOCK[0], (__UNIT_TYPE_DIV*)nq->BLOCK, (__UNIT_TYPE_DIV*)nr->BLOCK);

	mov	rax, QWORD PTR nr$[rbp-112]
	mov	r8, QWORD PTR [rdi+64]
	mov	r9, QWORD PTR nq$[rbp-112]
	mov	rdx, QWORD PTR [rsi+16]
	mov	rcx, QWORD PTR [rax+64]
	mov	r8d, DWORD PTR [r8]
	mov	r9, QWORD PTR [r9+64]
	shl	rdx, 3
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR [rsi+64]
	shr	rdx, 2
	call	DivRem_X_1W

; 1921 :                     if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nq$[rbp-112]
	mov	rdx, QWORD PTR nq_light_check_code$3[rbp-112]
	mov	rcx, QWORD PTR [rcx+64]
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN51@PMC_DivRem

; 1922 :                         return (result);
; 1923 :                     if ((result = CheckBlockLight(nr->BLOCK, nr_light_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nr$[rbp-112]
	mov	rdx, QWORD PTR nr_light_check_code$7[rbp-112]
	mov	rcx, QWORD PTR [rcx+64]
	call	CheckBlockLight
	test	eax, eax
	je	$LN56@PMC_DivRem
$LN51@PMC_DivRem:
	mov	rbx, QWORD PTR [rsp+152]
$LN1@PMC_DivRem:

; 2044 : }

	lea	r11, QWORD PTR [rsp+112]
	mov	rsi, QWORD PTR [r11+48]
	mov	rdi, QWORD PTR [r11+56]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	rbp
	ret	0
$LN20@PMC_DivRem:

; 1924 :                         return (result);
; 1925 :                     CommitNumber(nq);
; 1926 :                     CommitNumber(nr);
; 1927 :                     if (nq->IS_ZERO)
; 1928 :                     {
; 1929 :                         DeallocateNumber(nq);
; 1930 :                         nq = &number_zero;
; 1931 :                     }
; 1932 :                     if (nr->IS_ZERO)
; 1933 :                     {
; 1934 :                         DeallocateNumber(nr);
; 1935 :                         nr = &number_zero;
; 1936 :                     }
; 1937 :                 }
; 1938 :                 else
; 1939 :                 {
; 1940 :                     __UNIT_TYPE r_bit_count = sizeof(__UNIT_TYPE_DIV) * 8;
; 1941 :                     __UNIT_TYPE nr_light_check_code;
; 1942 :                     if ((result = AllocateNumber(&nr, r_bit_count, &nr_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR nr_light_check_code$6[rbp-112]
	mov	edx, 32					; 00000020H
	lea	rcx, QWORD PTR nr$[rbp-112]
	call	AllocateNumber
	test	eax, eax
	jne	SHORT $LN51@PMC_DivRem

; 1943 :                         return (result);
; 1944 :                     ((__UNIT_TYPE_DIV*)nr->BLOCK)[0] = Rem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV)nv->BLOCK[0]);

	mov	rax, QWORD PTR [rdi+64]
	mov	rdx, QWORD PTR [rsi+16]
	mov	rcx, QWORD PTR [rsi+64]
	shl	rdx, 3
	mov	r8d, DWORD PTR [rax]
	shr	rdx, 2
	call	Rem_X_1W
	mov	rcx, QWORD PTR nr$[rbp-112]

; 1945 :                     nq = NULL;

	xor	ebx, ebx
	mov	rdx, QWORD PTR [rcx+64]
	mov	DWORD PTR [rdx], eax

; 1946 :                     if ((result = CheckBlockLight(nr->BLOCK, nr_light_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nr$[rbp-112]
	mov	rdx, QWORD PTR nr_light_check_code$6[rbp-112]
	mov	QWORD PTR nq$[rbp-112], rbx
	mov	rcx, QWORD PTR [rcx+64]
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN51@PMC_DivRem

; 1947 :                         return (result);
; 1948 :                     CommitNumber(nr);
; 1949 :                     if (nr->IS_ZERO)
; 1950 :                     {
; 1951 :                         DeallocateNumber(nr);
; 1952 :                         nr = &number_zero;
; 1953 :                     }
; 1954 :                 }
; 1955 :             }

	jmp	$LN58@PMC_DivRem
$LN18@PMC_DivRem:

; 1956 :             else
; 1957 :             {
; 1958 :                 // 除数を表現するのに 2 ワード以上必要な場合
; 1959 :                 if (q != NULL)

	test	r14, r14
	je	$LN31@PMC_DivRem

; 1960 :                 {
; 1961 :                     __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1962 :                     __UNIT_TYPE r_bit_count = u_bit_count + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには v_bit_count だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1963 :                     __UNIT_TYPE nq_light_check_code;
; 1964 :                     if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)

	mov	rdx, rbx
	lea	r8, QWORD PTR nq_light_check_code$2[rbp-112]
	sub	rdx, rax
	lea	rcx, QWORD PTR nq$[rbp-112]
	add	rdx, 65					; 00000041H
	call	AllocateNumber
	test	eax, eax
	jne	$LN51@PMC_DivRem

; 1965 :                         return (result);
; 1966 :                     __UNIT_TYPE nr_light_check_code;
; 1967 :                     if ((result = AllocateNumber(&nr, r_bit_count, &nr_light_check_code)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR [rbx+64]
	lea	r8, QWORD PTR nr_light_check_code$10[rbp-112]
	lea	rcx, QWORD PTR nr$[rbp-112]
	call	AllocateNumber
	mov	ebx, eax
	test	eax, eax
	je	SHORT $LN34@PMC_DivRem
$LN60@PMC_DivRem:

; 1968 :                     {
; 1969 :                         DeallocateNumber(nq);

	mov	rcx, QWORD PTR nq$[rbp-112]
	call	DeallocateNumber

; 1970 :                         return (result);

	mov	eax, ebx
	jmp	$LN51@PMC_DivRem
$LN34@PMC_DivRem:

; 1971 :                     }
; 1972 :                     __UNIT_TYPE work_v_buf_code;
; 1973 :                     __UNIT_TYPE work_v_buf_words;
; 1974 :                     __UNIT_TYPE_DIV* work_v_buf = (__UNIT_TYPE_DIV*)AllocateBlock(nv->UNIT_WORD_COUNT * __UNIT_TYPE_BIT_COUNT, &work_v_buf_words, &work_v_buf_code);

	mov	rcx, QWORD PTR [rdi+16]
	lea	r8, QWORD PTR work_v_buf_code$5[rbp-112]
	shl	rcx, 6
	lea	rdx, QWORD PTR work_v_buf_words$9[rbp-112]
	call	AllocateBlock
	mov	rbx, rax

; 1975 :                     if (work_v_buf == NULL)

	test	rax, rax
	jne	SHORT $LN35@PMC_DivRem

; 1976 :                     {
; 1977 :                         DeallocateNumber(nq);

	mov	rcx, QWORD PTR nq$[rbp-112]
	call	DeallocateNumber
$LN59@PMC_DivRem:

; 1978 :                         return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5
	jmp	$LN51@PMC_DivRem
$LN35@PMC_DivRem:

; 1979 :                     }
; 1980 : 
; 1981 :                     (*fp_DivRem_X_X)((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV*)nv->BLOCK, nv->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), work_v_buf, (__UNIT_TYPE_DIV*)nq->BLOCK, (__UNIT_TYPE_DIV*)nr->BLOCK);

	mov	rax, QWORD PTR nr$[rbp-112]
	mov	r9, QWORD PTR [rdi+16]
	mov	rdx, QWORD PTR [rsi+16]
	mov	r8, QWORD PTR [rdi+64]
	mov	rcx, QWORD PTR [rax+64]
	mov	rax, QWORD PTR nq$[rbp-112]
	mov	QWORD PTR [rsp+48], rcx
	shl	r9, 3
	shl	rdx, 3
	mov	rcx, QWORD PTR [rax+64]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR [rsi+64]
	shr	r9, 2
	shr	rdx, 2
	mov	QWORD PTR [rsp+32], rbx
	call	QWORD PTR fp_DivRem_X_X

; 1982 :                     if ((result = CheckBlockLight((__UNIT_TYPE*)work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR work_v_buf_code$5[rbp-112]
	mov	rcx, rbx
	call	CheckBlockLight
	test	eax, eax
	jne	$LN51@PMC_DivRem

; 1983 :                         return (result);
; 1984 :                     if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nq$[rbp-112]
	mov	rdx, QWORD PTR nq_light_check_code$2[rbp-112]
	mov	rcx, QWORD PTR [rcx+64]
	call	CheckBlockLight
	test	eax, eax
	jne	$LN51@PMC_DivRem

; 1985 :                         return (result);
; 1986 :                     if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nq$[rbp-112]
	mov	rdx, QWORD PTR nq_light_check_code$2[rbp-112]
	mov	rcx, QWORD PTR [rcx+64]
	call	CheckBlockLight
	test	eax, eax
	jne	$LN51@PMC_DivRem

; 1987 :                         return (result);
; 1988 :                     DeallocateBlock((__UNIT_TYPE*)work_v_buf, work_v_buf_words);

	mov	rdx, QWORD PTR work_v_buf_words$9[rbp-112]
	mov	rcx, rbx
	call	DeallocateBlock
$LN56@PMC_DivRem:

; 2021 :                     CommitNumber(nr);
; 2022 :                     if (nr->IS_ZERO)
; 2023 :                     {
; 2024 :                         DeallocateNumber(nr);
; 2025 :                         nr = &number_zero;
; 2026 :                     }
; 2027 :                 }
; 2028 :             }
; 2029 :         }
; 2030 :     }
; 2031 :     if (q != NULL)

	mov	rcx, QWORD PTR nq$[rbp-112]
	call	CommitNumber
	mov	rcx, QWORD PTR nr$[rbp-112]
	call	CommitNumber
	mov	rbx, QWORD PTR nq$[rbp-112]
	lea	rdi, OFFSET FLAT:number_zero
	test	BYTE PTR [rbx], 1
	je	SHORT $LN39@PMC_DivRem
	mov	rcx, rbx
	call	DeallocateNumber
	mov	rbx, rdi
	mov	QWORD PTR nq$[rbp-112], rbx
$LN39@PMC_DivRem:
	mov	rax, QWORD PTR nr$[rbp-112]
	test	BYTE PTR [rax], 1
	je	SHORT $LN45@PMC_DivRem
	mov	rcx, rax
	call	DeallocateNumber
	mov	rbx, QWORD PTR nq$[rbp-112]
$LN52@PMC_DivRem:
	mov	rax, rdi
$LN45@PMC_DivRem:
	test	r14, r14
	je	$LN46@PMC_DivRem

; 2032 :         *q = (PMC_HANDLE_UINT)nq;

	mov	QWORD PTR [r14], rbx

; 2033 :     *r = (PMC_HANDLE_UINT)nr;

	mov	QWORD PTR [r15], rax

; 2034 : #ifdef _DEBUG
; 2035 :     if (q != NULL)
; 2036 :     {
; 2037 :         if ((result = CheckNumber((NUMBER_HEADER*)*q)) != PMC_STATUS_OK)
; 2038 :             return (result);
; 2039 :     }
; 2040 :     if ((result = CheckNumber((NUMBER_HEADER*)*r)) != PMC_STATUS_OK)
; 2041 :         return (result);
; 2042 : #endif
; 2043 :     return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN51@PMC_DivRem
$LN31@PMC_DivRem:

; 1989 :                     CommitNumber(nq);
; 1990 :                     CommitNumber(nr);
; 1991 :                     if (nq->IS_ZERO)
; 1992 :                     {
; 1993 :                         DeallocateNumber(nq);
; 1994 :                         nq = &number_zero;
; 1995 :                     }
; 1996 :                     if (nr->IS_ZERO)
; 1997 :                     {
; 1998 :                         DeallocateNumber(nr);
; 1999 :                         nr = &number_zero;
; 2000 :                     }
; 2001 :                 }
; 2002 :                 else
; 2003 :                 {
; 2004 :                     __UNIT_TYPE r_bit_count = u_bit_count + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには v_bit_count だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

	lea	rdx, QWORD PTR [rbx+64]

; 2005 :                     __UNIT_TYPE nr_light_check_code;
; 2006 :                     if ((result = AllocateNumber(&nr, r_bit_count, &nr_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR nr_light_check_code$4[rbp-112]
	lea	rcx, QWORD PTR nr$[rbp-112]
	call	AllocateNumber
	test	eax, eax
	jne	$LN51@PMC_DivRem

; 2007 :                         return (result);
; 2008 :                     __UNIT_TYPE work_v_buf_code;
; 2009 :                     __UNIT_TYPE work_v_buf_words;
; 2010 :                     __UNIT_TYPE_DIV* work_v_buf = (__UNIT_TYPE_DIV*)AllocateBlock(nv->UNIT_WORD_COUNT * __UNIT_TYPE_BIT_COUNT, &work_v_buf_words, &work_v_buf_code);

	mov	rcx, QWORD PTR [rdi+16]
	lea	r8, QWORD PTR work_v_buf_code$8[rbp-112]
	shl	rcx, 6
	lea	rdx, QWORD PTR work_v_buf_words$1[rbp-112]
	call	AllocateBlock
	mov	r14, rax

; 2011 :                     if (work_v_buf == NULL)

	test	rax, rax
	je	$LN59@PMC_DivRem

; 2012 :                         return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 2013 : 
; 2014 :                     (*fp_DivRem_X_X)((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV*)nv->BLOCK, nv->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), work_v_buf, NULL, (__UNIT_TYPE_DIV*)nr->BLOCK);

	mov	rax, QWORD PTR nr$[rbp-112]
	xor	ebx, ebx
	mov	r9, QWORD PTR [rdi+16]
	mov	rdx, QWORD PTR [rsi+16]
	mov	r8, QWORD PTR [rdi+64]
	mov	rcx, QWORD PTR [rax+64]
	mov	QWORD PTR [rsp+48], rcx
	mov	rcx, QWORD PTR [rsi+64]
	shl	r9, 3
	shl	rdx, 3
	mov	QWORD PTR [rsp+40], rbx
	shr	r9, 2
	shr	rdx, 2
	mov	QWORD PTR [rsp+32], r14
	call	QWORD PTR fp_DivRem_X_X

; 2015 :                     nq = NULL;
; 2016 :                     if ((result = CheckBlockLight((__UNIT_TYPE*)work_v_buf, work_v_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR work_v_buf_code$8[rbp-112]
	mov	rcx, r14
	mov	QWORD PTR nq$[rbp-112], rbx
	call	CheckBlockLight
	test	eax, eax
	jne	$LN51@PMC_DivRem

; 2017 :                         return (result);
; 2018 :                     if ((result = CheckBlockLight(nr->BLOCK, nr_light_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nr$[rbp-112]
	mov	rdx, QWORD PTR nr_light_check_code$4[rbp-112]
	mov	rcx, QWORD PTR [rcx+64]
	call	CheckBlockLight
	test	eax, eax
	jne	$LN51@PMC_DivRem

; 2019 :                         return (result);
; 2020 :                     DeallocateBlock((__UNIT_TYPE*)work_v_buf, work_v_buf_words);

	mov	rdx, QWORD PTR work_v_buf_words$1[rbp-112]
	mov	rcx, r14
	call	DeallocateBlock
$LN58@PMC_DivRem:

; 2033 :     *r = (PMC_HANDLE_UINT)nr;

	mov	rcx, QWORD PTR nr$[rbp-112]
	call	CommitNumber
	mov	rax, QWORD PTR nr$[rbp-112]
	test	BYTE PTR [rax], 1
	je	SHORT $LN46@PMC_DivRem
	mov	rcx, rax
	call	DeallocateNumber
	lea	rax, OFFSET FLAT:number_zero
$LN46@PMC_DivRem:
	mov	QWORD PTR [r15], rax

; 2034 : #ifdef _DEBUG
; 2035 :     if (q != NULL)
; 2036 :     {
; 2037 :         if ((result = CheckNumber((NUMBER_HEADER*)*q)) != PMC_STATUS_OK)
; 2038 :             return (result);
; 2039 :     }
; 2040 :     if ((result = CheckNumber((NUMBER_HEADER*)*r)) != PMC_STATUS_OK)
; 2041 :         return (result);
; 2042 : #endif
; 2043 :     return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN51@PMC_DivRem
$LN48@PMC_DivRem:

; 1844 :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
	jmp	$LN1@PMC_DivRem
PMC_DivRem_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT PMC_DivRem_X_L
_TEXT	SEGMENT
nq$ = 64
v_buf$1 = 72
v_buf$2 = 72
nq_light_check_code$3 = 72
nq_light_check_code$4 = 80
r_buf_words$5 = 88
r_buf_code$6 = 88
r_buf_code$7 = 96
r_buf_words$8 = 96
work_v_buf$9 = 160
work_v_buf$10 = 160
r_buf$11 = 160
u$ = 160
v$ = 168
q$ = 176
r$ = 184
PMC_DivRem_X_L PROC					; COMDAT

; 1605 : {

$LN74:
	push	rbp
	push	rsi
	push	rdi
	push	r14
	push	r15
	mov	rbp, rsp
	sub	rsp, 112				; 00000070H
	mov	r15, r9
	mov	r14, r8
	mov	rsi, rdx
	mov	rdi, rcx

; 1606 :     if (sizeof(__UNIT_TYPE_DIV) * 2 < sizeof(v))
; 1607 :     {
; 1608 :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 1609 :         return (PMC_STATUS_INTERNAL_ERROR);
; 1610 :     }
; 1611 :     if (u == NULL)

	test	rcx, rcx
	je	$LN66@PMC_DivRem

; 1612 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1613 :     if (r == NULL)

	test	r9, r9
	je	$LN66@PMC_DivRem

; 1615 :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 1616 :     PMC_STATUS_CODE result;
; 1617 :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	$LN1@PMC_DivRem

; 1618 :         return (result);
; 1619 :     if (v == 0)

	test	rsi, rsi
	jne	SHORT $LN6@PMC_DivRem

; 1620 :     {
; 1621 :         // v が 0 である場合
; 1622 : 
; 1623 :         // 0 による除算はエラーで返す
; 1624 :         return (PMC_STATUS_DIVISION_BY_ZERO);

	lea	eax, QWORD PTR [rsi-3]

; 1835 : }

	add	rsp, 112				; 00000070H
	pop	r15
	pop	r14
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
$LN6@PMC_DivRem:

; 1625 :     }
; 1626 :     NUMBER_HEADER* nq;
; 1627 :     if (nu->IS_ZERO)

	test	BYTE PTR [rdi], 1
	mov	QWORD PTR [rsp+168], rbx
	mov	QWORD PTR [rsp+176], r13
	je	SHORT $LN7@PMC_DivRem

; 1628 :     {
; 1629 :         // x が 0 である場合
; 1630 : 
; 1631 :         // q = 0, r = 0 を返す
; 1632 :         nq = q != NULL ? &number_zero : NULL;

	xor	ebx, ebx
	lea	rax, OFFSET FLAT:number_zero
	test	r14, r14

; 1633 :         *r = 0;

	mov	QWORD PTR [r15], rbx
	mov	edx, ebx
	cmovne	rdx, rax

; 1634 :     }

	jmp	$LN30@PMC_DivRem
$LN7@PMC_DivRem:

; 1635 :     else
; 1636 :     {
; 1637 :         // u が 0 ではない場合
; 1638 : 
; 1639 :         if (v == 1)

	cmp	rsi, 1
	jne	SHORT $LN9@PMC_DivRem

; 1640 :         {
; 1641 :             // v が 1 である場合
; 1642 : 
; 1643 :             // q = u, r = 0 を返す
; 1644 :             if (q != NULL)

	xor	ebx, ebx
	test	r14, r14
	je	SHORT $LN11@PMC_DivRem

; 1645 :             {
; 1646 :                 if ((result = DuplicateNumber(nu, &nq)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR nq$[rbp-112]
	mov	rcx, rdi
	call	DuplicateNumber
	test	eax, eax
	jne	$LN69@PMC_DivRem
	mov	rdx, QWORD PTR nq$[rbp-112]

; 1651 :             *r = 0;

	mov	QWORD PTR [r15], rbx

; 1652 :         }

	jmp	$LN30@PMC_DivRem
$LN11@PMC_DivRem:

; 1647 :                     return (result);
; 1648 :             }
; 1649 :             else
; 1650 :                 nq = NULL;

	mov	rdx, rbx

; 1651 :             *r = 0;

	mov	QWORD PTR [r15], rbx

; 1652 :         }

	jmp	$LN30@PMC_DivRem
$LN9@PMC_DivRem:

; 1653 :         else
; 1654 :         {
; 1655 :             // u > 0 かつ v > 1 である場合
; 1656 : 
; 1657 :             // u と v の商・剰余を計算する
; 1658 :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	r13, QWORD PTR [rdi+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	rbx, rsi
	shr	rbx, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1664 :                 if (v_hi == 0)

	test	ebx, ebx
	jne	$LN16@PMC_DivRem
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 591  :         if (x == 0)

	lea	edx, QWORD PTR [rbx+32]
	test	esi, esi
	jne	SHORT $LN52@PMC_DivRem

; 592  :             return (sizeof(x) * 8);

	mov	ecx, edx
	jmp	SHORT $LN51@PMC_DivRem
$LN52@PMC_DivRem:

; 595  :         _BitScanReverse(&pos, x);

	bsr	eax, esi

; 596  : #elif defined(__GNUC__)
; 597  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 598  : #else
; 599  : #error unknown compiler
; 600  : #endif
; 601  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31
	sub	ecx, eax
$LN51@PMC_DivRem:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1667 :                     __UNIT_TYPE v_bit_count = sizeof(v_lo) * 8 - _LZCNT_ALT_32(v_lo);

	movsxd	rax, ecx
	sub	rdx, rax

; 1668 :                     if (u_bit_count < v_bit_count)

	cmp	r13, rdx
	jae	SHORT $LN18@PMC_DivRem

; 1669 :                     {
; 1670 :                         // 明らかに u < v である場合
; 1671 : 
; 1672 :                         // q = 0, r = u を返す。
; 1673 :                         nq = q != NULL ? &number_zero : NULL;

	xor	ebx, ebx
	lea	rax, OFFSET FLAT:number_zero
	test	r14, r14
	mov	edx, ebx
	cmovne	rdx, rax

; 1674 :                         *r = nu->BLOCK[0];

	mov	rax, QWORD PTR [rdi+64]
	mov	QWORD PTR nq$[rbp-112], rdx
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [r15], rcx

; 1675 :                     }

	jmp	$LN30@PMC_DivRem
$LN18@PMC_DivRem:

; 1676 :                     else
; 1677 :                     {
; 1678 :                         if (q != NULL)

	test	r14, r14
	je	SHORT $LN20@PMC_DivRem

; 1679 :                         {
; 1680 :                             __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1681 :                             __UNIT_TYPE nq_light_check_code;
; 1682 :                             if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)

	sub	r13, rdx
	lea	r8, QWORD PTR nq_light_check_code$3[rbp-112]
	lea	rcx, QWORD PTR nq$[rbp-112]
	lea	rdx, QWORD PTR [r13+65]
	call	AllocateNumber
	test	eax, eax
	jne	$LN69@PMC_DivRem

; 1683 :                                 return (result);
; 1684 :                             __UNIT_TYPE_DIV r_buf = 0;
; 1685 :                             DivRem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), v_lo, (__UNIT_TYPE_DIV*)nq->BLOCK, &r_buf);

	mov	r9, QWORD PTR nq$[rbp-112]
	lea	rax, QWORD PTR r_buf$11[rbp-112]
	mov	rdx, QWORD PTR [rdi+16]
	xor	ebx, ebx
	mov	rcx, QWORD PTR [rdi+64]
	mov	r8d, esi
	shl	rdx, 3
	mov	r9, QWORD PTR [r9+64]
	shr	rdx, 2
	mov	DWORD PTR r_buf$11[rbp-112], ebx
	mov	QWORD PTR [rsp+32], rax
	call	DivRem_X_1W

; 1686 :                             if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nq$[rbp-112]
	mov	rdx, QWORD PTR nq_light_check_code$3[rbp-112]
	mov	rcx, QWORD PTR [rcx+64]
	call	CheckBlockLight
	test	eax, eax
	jne	$LN69@PMC_DivRem

; 1687 :                                 return (result);
; 1688 :                             CommitNumber(nq);

	mov	rcx, QWORD PTR nq$[rbp-112]
	call	CommitNumber

; 1689 :                             *r = r_buf;

	mov	eax, DWORD PTR r_buf$11[rbp-112]
	mov	QWORD PTR [r15], rax

; 1690 :                             if (nq->IS_ZERO)
; 1691 :                             {
; 1692 :                                 DeallocateNumber(nq);
; 1693 :                                 nq = &number_zero;
; 1694 :                             }
; 1695 :                         }

	jmp	$LN71@PMC_DivRem
$LN20@PMC_DivRem:

; 1696 :                         else
; 1697 :                         {
; 1698 :                             __UNIT_TYPE_DIV r_buf = Rem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), v_lo);

	mov	rdx, QWORD PTR [rdi+16]
	mov	r8d, esi
	mov	rcx, QWORD PTR [rdi+64]
	shl	rdx, 3
	shr	rdx, 2
	call	Rem_X_1W

; 1699 :                             nq = NULL;
; 1700 :                             *r = r_buf;

	mov	ecx, eax

; 1827 : #ifdef _DEBUG
; 1828 :     if (q != NULL)
; 1829 :     {
; 1830 :         if ((result = CheckNumber(nq)) != PMC_STATUS_OK)
; 1831 :             return (result);
; 1832 :     }
; 1833 : #endif
; 1834 :     return (PMC_STATUS_OK);

	xor	eax, eax
	mov	QWORD PTR [r15], rcx
	jmp	$LN69@PMC_DivRem
$LN16@PMC_DivRem:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 595  :         _BitScanReverse(&pos, x);

	bsr	eax, ebx

; 596  : #elif defined(__GNUC__)
; 597  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 598  : #else
; 599  : #error unknown compiler
; 600  : #endif
; 601  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31
	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1707 :                     __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v_hi);

	movsxd	rax, ecx
	mov	ecx, 64					; 00000040H
	sub	rcx, rax

; 1708 :                     if (u_bit_count < v_bit_count)

	cmp	r13, rcx
	jae	SHORT $LN25@PMC_DivRem

; 1709 :                     {
; 1710 :                         // 明らかに u < v である場合
; 1711 : 
; 1712 :                         // q = 0, r = u を返す。
; 1713 :                         nq = q != NULL ? &number_zero : NULL;

	xor	ebx, ebx
	lea	rax, OFFSET FLAT:number_zero
	test	r14, r14
	mov	edx, ebx
	cmovne	rdx, rax

; 1714 :                         if (sizeof(v) == sizeof(__UNIT_TYPE))
; 1715 :                             *r = nu->BLOCK[0];

	mov	rax, QWORD PTR [rdi+64]
	mov	QWORD PTR nq$[rbp-112], rdx
	mov	rcx, QWORD PTR [rax]
	mov	QWORD PTR [r15], rcx

; 1716 :                         else
; 1717 :                         {
; 1718 :                             __UNIT_TYPE r_lo = nu->BLOCK[0];
; 1719 :                             __UNIT_TYPE r_hi = nu->UNIT_WORD_COUNT > 1 ? nu->BLOCK[1] : 0;
; 1720 :                             *r = _FROMWORDTODWORD((_UINT32_T)r_hi, (_UINT32_T)r_lo);
; 1721 :                         }
; 1722 :                     }

	jmp	$LN30@PMC_DivRem
$LN25@PMC_DivRem:

; 1723 :                     else
; 1724 :                     {
; 1725 :                         if (q != NULL)

	test	r14, r14
	je	$LN29@PMC_DivRem

; 1726 :                         {
; 1727 :                             __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1728 :                             __UNIT_TYPE r_bit_count = u_bit_count + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには v_bit_count だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1729 :                             __UNIT_TYPE nq_light_check_code;
; 1730 :                             if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)

	mov	rdx, r13
	lea	r8, QWORD PTR nq_light_check_code$4[rbp-112]
	sub	rdx, rcx
	lea	rcx, QWORD PTR nq$[rbp-112]
	add	rdx, 65					; 00000041H
	call	AllocateNumber
	test	eax, eax
	jne	$LN69@PMC_DivRem

; 1731 :                                 return (result);
; 1732 :                             __UNIT_TYPE_DIV v_buf[] = { v_lo, v_hi };

	mov	DWORD PTR v_buf$2[rbp-108], ebx
	lea	rcx, QWORD PTR [r13+64]

; 1733 :                             __UNIT_TYPE_DIV work_v_buf[] = { 0, 0 };

	xor	ebx, ebx
	mov	DWORD PTR v_buf$2[rbp-112], esi

; 1734 :                             __UNIT_TYPE r_buf_code;
; 1735 :                             __UNIT_TYPE r_buf_words;
; 1736 :                             __UNIT_TYPE_DIV* r_buf = (__UNIT_TYPE_DIV*)AllocateBlock(r_bit_count, &r_buf_words, &r_buf_code);

	lea	r8, QWORD PTR r_buf_code$6[rbp-112]
	mov	QWORD PTR work_v_buf$10[rbp-112], rbx
	lea	rdx, QWORD PTR r_buf_words$8[rbp-112]
	call	AllocateBlock
	mov	rbx, rax

; 1737 :                             if (r_buf == NULL)

	test	rax, rax
	je	$LN72@PMC_DivRem

; 1738 :                             {
; 1739 :                                 DeallocateNumber(nq);
; 1740 :                                 return (PMC_STATUS_NOT_ENOUGH_MEMORY);
; 1741 :                             }
; 1742 :                             (*fp_DivRem_X_X)((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), v_buf, sizeof(v_buf) / sizeof(v_buf[0]), work_v_buf, (__UNIT_TYPE_DIV*)nq->BLOCK, r_buf);

	mov	rdx, QWORD PTR [rdi+16]
	lea	r8, QWORD PTR v_buf$2[rbp-112]
	mov	QWORD PTR [rsp+48], rax
	mov	r9d, 2
	mov	rax, QWORD PTR nq$[rbp-112]
	shl	rdx, 3
	shr	rdx, 2
	mov	rcx, QWORD PTR [rax+64]
	lea	rax, QWORD PTR work_v_buf$10[rbp-112]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR [rdi+64]
	mov	QWORD PTR [rsp+32], rax
	call	QWORD PTR fp_DivRem_X_X

; 1743 :                             if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nq$[rbp-112]
	mov	rdx, QWORD PTR nq_light_check_code$4[rbp-112]
	mov	rcx, QWORD PTR [rcx+64]
	call	CheckBlockLight
	test	eax, eax
	jne	$LN69@PMC_DivRem

; 1744 :                                 return (result);
; 1745 :                             if ((result = CheckBlockLight((__UNIT_TYPE*)r_buf, r_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR r_buf_code$6[rbp-112]
	mov	rcx, rbx
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN69@PMC_DivRem

; 1746 :                                 return (result);
; 1747 :                             CommitNumber(nq);

	mov	rcx, QWORD PTR nq$[rbp-112]
	call	CommitNumber
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	ecx, DWORD PTR [rbx+4]
	mov	eax, DWORD PTR [rbx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1749 :                             DeallocateBlock((__UNIT_TYPE*)r_buf, r_buf_words);

	mov	rdx, QWORD PTR r_buf_words$8[rbp-112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	shl	rcx, 32					; 00000020H
	or	rcx, rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1748 :                             *r = _FROMWORDTODWORD((_UINT32_T)r_buf[1], (_UINT32_T)r_buf[0]);

	mov	QWORD PTR [r15], rcx

; 1749 :                             DeallocateBlock((__UNIT_TYPE*)r_buf, r_buf_words);

	mov	rcx, rbx
	call	DeallocateBlock
$LN71@PMC_DivRem:

; 1775 :                         }
; 1776 :                     }
; 1777 :                 }
; 1778 :             }
; 1779 :             else
; 1780 :             {
; 1781 :                 // _UINT64_T が 1 ワードで表現できる場合
; 1782 : 
; 1783 :                 // x と y の商・剰余を計算する
; 1784 :                 __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 1785 :                 __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);
; 1786 :                 if (u_bit_count < v_bit_count)
; 1787 :                 {
; 1788 :                     // 明らかに u < v である場合
; 1789 : 
; 1790 :                     // q = 0, r = u を返す。
; 1791 :                     nq = q != NULL ? &number_zero : NULL;
; 1792 :                     *r = nu->BLOCK[0];
; 1793 :                 }
; 1794 :                 else
; 1795 :                 {
; 1796 :                     if (q != NULL)
; 1797 :                     {
; 1798 :                         __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1799 :                         __UNIT_TYPE nq_light_check_code;
; 1800 :                         if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)
; 1801 :                             return (result);
; 1802 :                         __UNIT_TYPE_DIV r_buf = 0;
; 1803 :                         DivRem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV)v, (__UNIT_TYPE_DIV*)nq->BLOCK, &r_buf);
; 1804 :                         if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)
; 1805 :                             return (result);
; 1806 :                         CommitNumber(nq);
; 1807 :                         *r = r_buf;
; 1808 :                         if (nq->IS_ZERO)
; 1809 :                         {
; 1810 :                             DeallocateNumber(nq);
; 1811 :                             nq = &number_zero;
; 1812 :                         }
; 1813 :                     }
; 1814 :                     else
; 1815 :                     {
; 1816 :                         __UNIT_TYPE_DIV r_buf = Rem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), (__UNIT_TYPE_DIV)v);
; 1817 :                         nq = NULL;
; 1818 :                         *r = r_buf;
; 1819 :                     }
; 1820 :                 }
; 1821 :             }
; 1822 : 
; 1823 :         }
; 1824 :     }
; 1825 :     if (q != NULL)

	mov	rdx, QWORD PTR nq$[rbp-112]
	test	BYTE PTR [rdx], 1
	je	SHORT $LN30@PMC_DivRem
	mov	rcx, rdx
	call	DeallocateNumber
	lea	rdx, OFFSET FLAT:number_zero
$LN30@PMC_DivRem:
	test	r14, r14
	je	$LN45@PMC_DivRem

; 1826 :         *q = (PMC_HANDLE_UINT)nq;

	mov	QWORD PTR [r14], rdx

; 1827 : #ifdef _DEBUG
; 1828 :     if (q != NULL)
; 1829 :     {
; 1830 :         if ((result = CheckNumber(nq)) != PMC_STATUS_OK)
; 1831 :             return (result);
; 1832 :     }
; 1833 : #endif
; 1834 :     return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN69@PMC_DivRem
$LN29@PMC_DivRem:

; 1750 :                             if (nq->IS_ZERO)
; 1751 :                             {
; 1752 :                                 DeallocateNumber(nq);
; 1753 :                                 nq = &number_zero;
; 1754 :                             }
; 1755 :                         }
; 1756 :                         else
; 1757 :                         {
; 1758 :                             __UNIT_TYPE r_bit_count = u_bit_count + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには v_bit_count だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1759 :                             __UNIT_TYPE_DIV v_buf[] = { v_lo, v_hi };

	mov	DWORD PTR v_buf$1[rbp-108], ebx
	lea	rcx, QWORD PTR [r13+64]

; 1760 :                             __UNIT_TYPE_DIV work_v_buf[] = { 0, 0 };

	xor	ebx, ebx
	mov	DWORD PTR v_buf$1[rbp-112], esi

; 1761 :                             __UNIT_TYPE r_buf_code;
; 1762 :                             __UNIT_TYPE r_buf_words;
; 1763 :                             __UNIT_TYPE_DIV* r_buf = (__UNIT_TYPE_DIV*)AllocateBlock(r_bit_count, &r_buf_words, &r_buf_code);

	lea	r8, QWORD PTR r_buf_code$7[rbp-112]
	mov	QWORD PTR work_v_buf$9[rbp-112], rbx
	lea	rdx, QWORD PTR r_buf_words$5[rbp-112]
	call	AllocateBlock
	mov	rsi, rax

; 1764 :                             if (r_buf == NULL)

	test	rax, rax
	jne	SHORT $LN36@PMC_DivRem
$LN72@PMC_DivRem:

; 1765 :                             {
; 1766 :                                 DeallocateNumber(nq);

	mov	rcx, QWORD PTR nq$[rbp-112]
	call	DeallocateNumber

; 1767 :                                 return (PMC_STATUS_NOT_ENOUGH_MEMORY);

	mov	eax, -5
$LN69@PMC_DivRem:
	mov	rbx, QWORD PTR [rsp+168]
	mov	r13, QWORD PTR [rsp+176]
$LN1@PMC_DivRem:

; 1835 : }

	add	rsp, 112				; 00000070H
	pop	r15
	pop	r14
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
$LN36@PMC_DivRem:

; 1768 :                             }
; 1769 :                             (*fp_DivRem_X_X)((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), v_buf, sizeof(v_buf) / sizeof(v_buf[0]), work_v_buf, NULL, r_buf);

	mov	rdx, QWORD PTR [rdi+16]
	lea	rax, QWORD PTR work_v_buf$9[rbp-112]
	mov	rcx, QWORD PTR [rdi+64]
	lea	r8, QWORD PTR v_buf$1[rbp-112]
	shl	rdx, 3
	mov	r9d, 2
	mov	QWORD PTR [rsp+48], rsi
	shr	rdx, 2
	mov	QWORD PTR [rsp+40], rbx
	mov	QWORD PTR [rsp+32], rax
	call	QWORD PTR fp_DivRem_X_X

; 1770 :                             if ((result = CheckBlockLight((__UNIT_TYPE*)r_buf, r_buf_code)) != PMC_STATUS_OK)

	mov	rdx, QWORD PTR r_buf_code$7[rbp-112]
	mov	rcx, rsi
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN69@PMC_DivRem

; 1774 :                             DeallocateBlock((__UNIT_TYPE*)r_buf, r_buf_words);

	mov	rdx, QWORD PTR r_buf_words$5[rbp-112]
	mov	QWORD PTR nq$[rbp-112], rbx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	ecx, DWORD PTR [rsi+4]
	mov	eax, DWORD PTR [rsi]
	shl	rcx, 32					; 00000020H
	or	rcx, rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1773 :                             *r = _FROMWORDTODWORD((_UINT32_T)r_buf[1], (_UINT32_T)r_buf[0]);

	mov	QWORD PTR [r15], rcx

; 1774 :                             DeallocateBlock((__UNIT_TYPE*)r_buf, r_buf_words);

	mov	rcx, rsi
	call	DeallocateBlock
$LN45@PMC_DivRem:

; 1827 : #ifdef _DEBUG
; 1828 :     if (q != NULL)
; 1829 :     {
; 1830 :         if ((result = CheckNumber(nq)) != PMC_STATUS_OK)
; 1831 :             return (result);
; 1832 :     }
; 1833 : #endif
; 1834 :     return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN69@PMC_DivRem
$LN66@PMC_DivRem:

; 1614 :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1

; 1835 : }

	add	rsp, 112				; 00000070H
	pop	r15
	pop	r14
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
PMC_DivRem_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT PMC_DivRem_X_I
_TEXT	SEGMENT
nq$ = 48
nq_light_check_code$1 = 56
r_buf$2 = 80
u$ = 80
v$ = 88
q$ = 96
r$ = 104
PMC_DivRem_X_I PROC					; COMDAT

; 1306 : {

$LN29:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rsi, r9
	mov	rdi, r8
	mov	ebp, edx
	mov	rbx, rcx

; 1307 :     if (sizeof(__UNIT_TYPE_DIV) < sizeof(v))
; 1308 :     {
; 1309 :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 1310 :         return (PMC_STATUS_INTERNAL_ERROR);
; 1311 :     }
; 1312 :     if (u == NULL)

	test	rcx, rcx
	je	$LN26@PMC_DivRem

; 1313 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1314 :     if (r == NULL)

	test	r9, r9
	je	$LN26@PMC_DivRem

; 1316 :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 1317 :     PMC_STATUS_CODE result;
; 1318 :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	$LN1@PMC_DivRem

; 1319 :         return (result);
; 1320 :     if (v == 0)

	test	ebp, ebp
	jne	SHORT $LN6@PMC_DivRem

; 1321 :     {
; 1322 :         // v が 0 である場合
; 1323 : 
; 1324 :         // 0 による除算はエラーで返す
; 1325 :         return (PMC_STATUS_DIVISION_BY_ZERO);

	lea	eax, QWORD PTR [rbp-3]
	jmp	$LN1@PMC_DivRem
$LN6@PMC_DivRem:

; 1326 :     }
; 1327 :     NUMBER_HEADER* nq;
; 1328 :     if (nu->IS_ZERO)

	test	BYTE PTR [rbx], 1
	je	SHORT $LN7@PMC_DivRem

; 1329 :     {
; 1330 :         // u が 0 である場合
; 1331 : 
; 1332 :         // q = 0, r = 0 を返す
; 1333 :         
; 1334 :         nq = q != NULL ? &number_zero : NULL;

	xor	edx, edx

; 1335 :         *r = 0;

	mov	DWORD PTR [rsi], 0
	test	rdi, rdi
	lea	rax, OFFSET FLAT:number_zero
	cmovne	rdx, rax

; 1336 :     }

	jmp	$LN17@PMC_DivRem
$LN7@PMC_DivRem:

; 1337 :     else
; 1338 :     {
; 1339 :         // u が 0 ではない場合
; 1340 : 
; 1341 :         if (v == 1)

	cmp	ebp, 1
	jne	SHORT $LN9@PMC_DivRem

; 1342 :         {
; 1343 :             // v が 1 である場合
; 1344 : 
; 1345 :             // q = u, r = 0 を返す
; 1346 :             if (q != NULL)

	test	rdi, rdi
	je	SHORT $LN11@PMC_DivRem

; 1347 :             {
; 1348 :                 if ((result = DuplicateNumber(nu, &nq)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR nq$[rsp]
	mov	rcx, rbx
	call	DuplicateNumber
	test	eax, eax
	jne	$LN1@PMC_DivRem
	mov	rdx, QWORD PTR nq$[rsp]

; 1353 :             *r = 0;

	mov	DWORD PTR [rsi], eax

; 1354 :         }

	jmp	$LN17@PMC_DivRem
$LN11@PMC_DivRem:

; 1349 :                     return (result);
; 1350 :             }
; 1351 :             else
; 1352 :                 nq = NULL;

	xor	edx, edx

; 1353 :             *r = 0;

	mov	DWORD PTR [rsi], edx

; 1354 :         }

	jmp	$LN17@PMC_DivRem
$LN9@PMC_DivRem:

; 1355 :         else
; 1356 :         {
; 1357 :             // u と v がともに 0 ではない場合
; 1358 : 
; 1359 :             // x と y の商・剰余を計算する
; 1360 :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;

	mov	rdx, QWORD PTR [rbx+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 601  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31
	bsr	eax, ebp
	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1361 :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

	movsxd	rax, ecx
	mov	ecx, 32					; 00000020H
	sub	rcx, rax

; 1362 :             if (u_bit_count < v_bit_count)

	cmp	rdx, rcx
	jae	SHORT $LN14@PMC_DivRem

; 1363 :             {
; 1364 :                 // 明らかに u < v である場合
; 1365 : 
; 1366 :                 // q = 0, r = u を返す。
; 1367 :                 nq = q != NULL ? &number_zero : NULL;

	xor	edx, edx
	lea	rax, OFFSET FLAT:number_zero
	test	rdi, rdi
	cmovne	rdx, rax

; 1368 :                 *r = (_UINT32_T)nu->BLOCK[0];

	mov	rax, QWORD PTR [rbx+64]
	mov	QWORD PTR nq$[rsp], rdx
	mov	ecx, DWORD PTR [rax]
	mov	DWORD PTR [rsi], ecx

; 1369 :             }

	jmp	$LN17@PMC_DivRem
$LN14@PMC_DivRem:

; 1370 :             else
; 1371 :             {
; 1372 :                 if (q != NULL)

	test	rdi, rdi
	je	$LN16@PMC_DivRem

; 1373 :                 {
; 1374 :                     __UNIT_TYPE q_bit_count = u_bit_count - v_bit_count + 1 + __UNIT_TYPE_BIT_COUNT; // 演算結果を格納するためには u_bit_count - v_bit_count + 1 だけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1375 :                     __UNIT_TYPE nq_light_check_code;
; 1376 :                     if ((result = AllocateNumber(&nq, q_bit_count, &nq_light_check_code)) != PMC_STATUS_OK)

	sub	rdx, rcx
	lea	r8, QWORD PTR nq_light_check_code$1[rsp]
	add	rdx, 65					; 00000041H
	lea	rcx, QWORD PTR nq$[rsp]
	call	AllocateNumber
	test	eax, eax
	jne	$LN1@PMC_DivRem

; 1377 :                         return (result);
; 1378 :                     __UNIT_TYPE_DIV r_buf = 0;
; 1379 :                     DivRem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), v, (__UNIT_TYPE_DIV*)nq->BLOCK, &r_buf);

	mov	r9, QWORD PTR nq$[rsp]
	mov	r8d, ebp
	mov	rdx, QWORD PTR [rbx+16]
	mov	rcx, QWORD PTR [rbx+64]
	mov	DWORD PTR r_buf$2[rsp], eax
	lea	rax, QWORD PTR r_buf$2[rsp]
	mov	r9, QWORD PTR [r9+64]
	shl	rdx, 3
	shr	rdx, 2
	mov	QWORD PTR [rsp+32], rax
	call	DivRem_X_1W

; 1380 :                     if ((result = CheckBlockLight(nq->BLOCK, nq_light_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nq$[rsp]
	mov	rdx, QWORD PTR nq_light_check_code$1[rsp]
	mov	rcx, QWORD PTR [rcx+64]
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_DivRem

; 1381 :                         return (result);
; 1382 :                     CommitNumber(nq);

	mov	rcx, QWORD PTR nq$[rsp]
	call	CommitNumber

; 1383 :                     *r = (_UINT32_T)r_buf;
; 1384 :                     if (nq->IS_ZERO)

	mov	rdx, QWORD PTR nq$[rsp]
	mov	eax, DWORD PTR r_buf$2[rsp]
	mov	DWORD PTR [rsi], eax
	test	BYTE PTR [rdx], 1
	je	SHORT $LN17@PMC_DivRem

; 1385 :                     {
; 1386 :                         DeallocateNumber(nq);

	mov	rcx, rdx
	call	DeallocateNumber

; 1387 :                         nq = &number_zero;

	lea	rdx, OFFSET FLAT:number_zero
$LN17@PMC_DivRem:

; 1395 :                 }
; 1396 :             }
; 1397 :         }
; 1398 :     }
; 1399 :     if (q != NULL)

	test	rdi, rdi
	je	SHORT $LN21@PMC_DivRem

; 1400 :         *q = (PMC_HANDLE_UINT)nq;

	mov	QWORD PTR [rdi], rdx

; 1401 : #ifdef _DEBUG
; 1402 :     if (q != NULL)
; 1403 :     {
; 1404 :         if ((result = CheckNumber(nq)) != PMC_STATUS_OK)
; 1405 :             return (result);
; 1406 :     }
; 1407 : #endif
; 1408 :     return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@PMC_DivRem
$LN16@PMC_DivRem:

; 1388 :                     }
; 1389 :                 }
; 1390 :                 else
; 1391 :                 {
; 1392 :                     __UNIT_TYPE_DIV r_buf = Rem_X_1W((__UNIT_TYPE_DIV*)nu->BLOCK, nu->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), v);

	mov	rdx, QWORD PTR [rbx+16]
	mov	r8d, ebp
	mov	rcx, QWORD PTR [rbx+64]
	shl	rdx, 3
	shr	rdx, 2
	call	Rem_X_1W

; 1393 :                     nq = NULL;
; 1394 :                     *r = (_UINT32_T)r_buf;

	mov	DWORD PTR [rsi], eax
$LN21@PMC_DivRem:

; 1401 : #ifdef _DEBUG
; 1402 :     if (q != NULL)
; 1403 :     {
; 1404 :         if ((result = CheckNumber(nq)) != PMC_STATUS_OK)
; 1405 :             return (result);
; 1406 :     }
; 1407 : #endif
; 1408 :     return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@PMC_DivRem
$LN26@PMC_DivRem:

; 1315 :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN1@PMC_DivRem:

; 1409 : }

	mov	rbx, QWORD PTR [rsp+88]
	mov	rbp, QWORD PTR [rsp+96]
	mov	rsi, QWORD PTR [rsp+104]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
PMC_DivRem_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT PMC_DivRem_L_X
_TEXT	SEGMENT
r_buf$1 = 64
u_buf$2 = 72
u_buf$3 = 80
work_v_buf$4 = 88
u_buf$5 = 96
work_v_buf$6 = 104
u_buf$7 = 112
pos$8 = 120
q_buf$9 = 128
q_buf$10 = 144
r_buf$11 = 160
r_buf$12 = 176
__$ArrayPad$ = 192
u$ = 256
v$ = 264
q$ = 272
r$ = 280
PMC_DivRem_L_X PROC					; COMDAT

; 1412 : {

$LN85:
	push	rbp
	push	rbx
	push	rsi
	push	rdi
	push	r14
	lea	rbp, QWORD PTR [rsp-55]
	sub	rsp, 208				; 000000d0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rbp-153], rax
	mov	r14, r9
	mov	rbx, r8
	mov	rsi, rdx
	mov	rdi, rcx

; 1413 :     if (sizeof(__UNIT_TYPE_DIV) * 2 < sizeof(u))
; 1414 :     {
; 1415 :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 1416 :         return (PMC_STATUS_INTERNAL_ERROR);
; 1417 :     }
; 1418 :     if (v == NULL)

	test	rdx, rdx
	je	$LN82@PMC_DivRem

; 1419 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1420 :     if (r == NULL)

	test	r9, r9
	je	$LN82@PMC_DivRem

; 1422 :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 1423 :     PMC_STATUS_CODE result;
; 1424 :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	rcx, rdx
	call	CheckNumber
	test	eax, eax
	jne	$LN1@PMC_DivRem

; 1425 :         return (result);
; 1426 :     if (nv->IS_ZERO)

	mov	ecx, DWORD PTR [rsi]
	test	cl, 1
	je	SHORT $LN6@PMC_DivRem

; 1427 :     {
; 1428 :         // v が 0 である場合
; 1429 : 
; 1430 :         // 0 による除算はエラーで返す
; 1431 :         return (PMC_STATUS_DIVISION_BY_ZERO);

	mov	eax, -3
	jmp	$LN1@PMC_DivRem
$LN6@PMC_DivRem:

; 1432 :     }
; 1433 :     if (u == 0)

	xor	eax, eax
	test	rdi, rdi
	jne	SHORT $LN7@PMC_DivRem

; 1434 :     {
; 1435 :         // x が 0 である場合
; 1436 : 
; 1437 :         // q = 0, r = 0 を返す
; 1438 :         if (q != NULL)

	test	rbx, rbx
	je	SHORT $LN12@PMC_DivRem

; 1439 :             *q = 0;

	mov	QWORD PTR [rbx], rax

; 1453 :             *r = 0;

	mov	QWORD PTR [r14], rax

; 1601 :     return (PMC_STATUS_OK);

	jmp	$LN1@PMC_DivRem
$LN7@PMC_DivRem:

; 1440 :         *r = 0;
; 1441 :     }
; 1442 :     else
; 1443 :     {
; 1444 :         // u が 0 ではない場合
; 1445 : 
; 1446 :         if (nv->IS_ONE)

	test	cl, 2
	je	SHORT $LN10@PMC_DivRem

; 1447 :         {
; 1448 :             // v が 1 である場合
; 1449 : 
; 1450 :             // q = u, r = 0 を返す
; 1451 :             if (q != NULL)

	test	rbx, rbx
	je	SHORT $LN12@PMC_DivRem

; 1452 :                 *q = u;

	mov	QWORD PTR [rbx], rdi
$LN12@PMC_DivRem:

; 1453 :             *r = 0;

	mov	QWORD PTR [r14], rax

; 1601 :     return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN1@PMC_DivRem
$LN10@PMC_DivRem:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 177  :         *result_high = (_UINT32_T)(value >> 32);

	mov	rdx, rdi
	shr	rdx, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1465 :                 if (u_hi == 0)

	test	edx, edx
	jne	SHORT $LN15@PMC_DivRem
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 591  :         if (x == 0)

	mov	edx, 32					; 00000020H
	test	edi, edi
	jne	SHORT $LN42@PMC_DivRem

; 592  :             return (sizeof(x) * 8);

	mov	ecx, edx
	jmp	SHORT $LN41@PMC_DivRem
$LN42@PMC_DivRem:

; 593  :         _UINT32_T pos;
; 594  : #ifdef _MSC_VER
; 595  :         _BitScanReverse(&pos, x);

	bsr	eax, edi

; 601  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31
	mov	DWORD PTR pos$8[rbp-153], eax
	sub	ecx, eax
$LN41@PMC_DivRem:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1468 :                     __UNIT_TYPE u_bit_count = sizeof(u_lo) * 8 - _LZCNT_ALT_32(u_lo);

	movsxd	rax, ecx
	sub	rdx, rax

; 1469 :                     __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 1470 :                     if (u_bit_count < v_bit_count)

	cmp	rdx, QWORD PTR [rsi+24]
	jae	SHORT $LN17@PMC_DivRem

; 1471 :                     {
; 1472 :                         // 明らかに u < v である場合
; 1473 : 
; 1474 :                         // q = 0, r = u を返す。
; 1475 :                         if (q != NULL)

	test	rbx, rbx
	je	SHORT $LN19@PMC_DivRem

; 1476 :                             *q = 0;

	xor	eax, eax
	mov	QWORD PTR [rbx], rax
$LN19@PMC_DivRem:

; 1477 :                         *r = u_lo;

	mov	eax, edi
	mov	QWORD PTR [r14], rax

; 1601 :     return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN1@PMC_DivRem
$LN17@PMC_DivRem:

; 1478 :                     }
; 1479 :                     else
; 1480 :                     {
; 1481 :                         // u のビット数が v のビット数以上である場合
; 1482 : 
; 1483 :                         // u は 32bit で表現できるので、v も 32bit で表現できる。
; 1484 :                         __UNIT_TYPE_DIV temp_r;
; 1485 :                         __UNIT_TYPE_DIV temp_q = _DIVREM_UNIT(0, u_lo, (__UNIT_TYPE_DIV)nv->BLOCK[0], &temp_r);

	mov	rcx, QWORD PTR [rsi+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 384  :             *r = (_UINT32_T)(t % v);

	xor	edx, edx

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edi

; 384  :             *r = (_UINT32_T)(t % v);

	mov	r8d, DWORD PTR [rcx]
	div	r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1486 :                         if (q != NULL)

	test	rbx, rbx
	je	SHORT $LN20@PMC_DivRem

; 1487 :                             *q = temp_q;

	mov	eax, eax
	mov	QWORD PTR [rbx], rax
$LN20@PMC_DivRem:

; 1488 :                         *r = temp_r;

	mov	eax, edx
	mov	QWORD PTR [r14], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 319  :         _InterlockedIncrement(&statistics_info.COUNT_DIV64);

	lock inc DWORD PTR statistics_info+8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1601 :     return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN1@PMC_DivRem
$LN15@PMC_DivRem:

; 1501 :                     __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 1502 :                     if (u_bit_count < v_bit_count)

	mov	r8, QWORD PTR [rsi+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 601  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31
	bsr	eax, edx
	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1500 :                     __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_32(u_hi);

	movsxd	rax, ecx
	mov	ecx, 64					; 00000040H
	sub	rcx, rax

; 1501 :                     __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 1502 :                     if (u_bit_count < v_bit_count)

	cmp	rcx, r8
	jae	SHORT $LN23@PMC_DivRem

; 1503 :                     {
; 1504 :                         // 明らかに u < v である場合
; 1505 : 
; 1506 :                         // q = 0, r = u を返す。
; 1507 :                         if (q != NULL)

	test	rbx, rbx
	je	SHORT $LN25@PMC_DivRem

; 1508 :                             *q = 0;

	xor	eax, eax
	mov	QWORD PTR [rbx], rax
$LN25@PMC_DivRem:

; 1509 :                         *r = u;

	mov	QWORD PTR [r14], rdi

; 1601 :     return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN1@PMC_DivRem
$LN23@PMC_DivRem:

; 1510 :                     }
; 1511 :                     else
; 1512 :                     {
; 1513 :                         // u のビット長が 33 以上 64 以下であり、かつ、u のビット長が v のビット長以上(v のビット長は多くとも64以下)である場合
; 1514 : 
; 1515 :                         if (nv->UNIT_BIT_COUNT <= sizeof(__UNIT_TYPE_DIV) * 8)

	cmp	r8, 32					; 00000020H
	ja	SHORT $LN26@PMC_DivRem

; 1516 :                         {
; 1517 :                             // v が 32bit で表現できる場合
; 1518 : 
; 1519 :                             if (q != NULL)

	mov	rax, QWORD PTR [rsi+64]
	mov	r8d, DWORD PTR [rax]
	test	rbx, rbx
	je	SHORT $LN28@PMC_DivRem

; 1520 :                             {
; 1521 :                                 __UNIT_TYPE_DIV u_buf[] = { u_lo, u_hi };
; 1522 :                                 __UNIT_TYPE_DIV q_buf[] = { 0, 0, 0 };

	xor	eax, eax
	mov	DWORD PTR u_buf$2[rbp-149], edx
	mov	QWORD PTR q_buf$9[rbp-153], rax

; 1523 :                                 __UNIT_TYPE_DIV r_buf;
; 1524 : 
; 1525 :                                 DivRem_X_1W(u_buf, countof(u_buf), (__UNIT_TYPE_DIV)nv->BLOCK[0], q_buf, &r_buf);

	lea	r9, QWORD PTR q_buf$9[rbp-153]
	mov	DWORD PTR q_buf$9[rbp-145], eax
	lea	rcx, QWORD PTR u_buf$2[rbp-153]
	lea	rax, QWORD PTR r_buf$1[rbp-153]
	mov	DWORD PTR u_buf$2[rbp-153], edi
	mov	edx, 2
	mov	QWORD PTR [rsp+32], rax
	call	DivRem_X_1W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, DWORD PTR q_buf$9[rbp-153]
	mov	ecx, DWORD PTR q_buf$9[rbp-149]
	shl	rcx, 32					; 00000020H
	or	rcx, rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1528 :                                 *r = r_buf;

	mov	eax, DWORD PTR r_buf$1[rbp-153]
	mov	QWORD PTR [rbx], rcx

; 1534 :                                 *r = r_buf;
; 1535 :                             }
; 1536 :                         }

	mov	QWORD PTR [r14], rax

; 1601 :     return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN1@PMC_DivRem
$LN28@PMC_DivRem:

; 1529 :                             }
; 1530 :                             else
; 1531 :                             {
; 1532 :                                 __UNIT_TYPE_DIV u_buf[] = { u_lo, u_hi };

	mov	DWORD PTR u_buf$3[rbp-149], edx

; 1533 :                                 __UNIT_TYPE_DIV r_buf = Rem_X_1W(u_buf, countof(u_buf), (__UNIT_TYPE_DIV)nv->BLOCK[0]);

	lea	rcx, QWORD PTR u_buf$3[rbp-153]
	mov	edx, 2
	mov	DWORD PTR u_buf$3[rbp-153], edi
	call	Rem_X_1W
	mov	eax, eax

; 1534 :                                 *r = r_buf;
; 1535 :                             }
; 1536 :                         }

	mov	QWORD PTR [r14], rax

; 1601 :     return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN1@PMC_DivRem
$LN26@PMC_DivRem:

; 1537 :                         else
; 1538 :                         {
; 1539 :                             // v が 32bit では表現できない場合
; 1540 : 
; 1541 :                             // この場合、2 ワード / 2 ワード の除算となるため、_DIVREM_UNIT 単発では計算できない。
; 1542 :                             if (q != NULL)

	mov	r9, QWORD PTR [rsi+16]
	xor	eax, eax
	mov	r8, QWORD PTR [rsi+64]
	shl	r9, 3
	shr	r9, 2
	test	rbx, rbx
	je	SHORT $LN30@PMC_DivRem

; 1543 :                             {
; 1544 :                                 __UNIT_TYPE_DIV u_buf[] = { u_lo, u_hi };
; 1545 :                                 __UNIT_TYPE_DIV q_buf[] = { 0, 0, 0 };// 演算結果を格納するためには u のビット数 - v のビット数 + 1 ビットだけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。

	mov	QWORD PTR q_buf$10[rbp-153], rax

; 1546 :                                 __UNIT_TYPE_DIV r_buf[] = { 0, 0, 0 }; // 演算結果を格納するためには v と同じ大きさだけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1547 :                                 __UNIT_TYPE_DIV work_v_buf[] = { 0, 0 };
; 1548 :                                 (*fp_DivRem_X_X)(u_buf, countof(u_buf), (__UNIT_TYPE_DIV*)nv->BLOCK, nv->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), work_v_buf, q_buf, r_buf);

	lea	rcx, QWORD PTR u_buf$5[rbp-153]
	mov	DWORD PTR q_buf$10[rbp-145], eax
	mov	QWORD PTR r_buf$11[rbp-153], rax
	mov	DWORD PTR r_buf$11[rbp-145], eax
	mov	QWORD PTR work_v_buf$4[rbp-153], rax
	lea	rax, QWORD PTR r_buf$11[rbp-153]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR q_buf$10[rbp-153]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR work_v_buf$4[rbp-153]
	mov	DWORD PTR u_buf$5[rbp-149], edx
	mov	edx, 2
	mov	QWORD PTR [rsp+32], rax
	mov	DWORD PTR u_buf$5[rbp-153], edi
	call	QWORD PTR fp_DivRem_X_X
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, DWORD PTR q_buf$10[rbp-153]
	mov	ecx, DWORD PTR q_buf$10[rbp-149]
	shl	rcx, 32					; 00000020H
	or	rcx, rax
	mov	eax, DWORD PTR r_buf$11[rbp-153]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1549 :                                 *q = _FROMWORDTODWORD((_UINT32_T)q_buf[1], (_UINT32_T)q_buf[0]);

	mov	QWORD PTR [rbx], rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	ecx, DWORD PTR r_buf$11[rbp-149]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1601 :     return (PMC_STATUS_OK);

	shl	rcx, 32					; 00000020H
	or	rcx, rax
	mov	QWORD PTR [r14], rcx
	xor	eax, eax
	jmp	SHORT $LN1@PMC_DivRem
$LN30@PMC_DivRem:

; 1550 :                                 *r = _FROMWORDTODWORD((_UINT32_T)r_buf[1], (_UINT32_T)r_buf[0]);
; 1551 :                             }
; 1552 :                             else
; 1553 :                             {
; 1554 :                                 __UNIT_TYPE_DIV u_buf[] = { u_lo, u_hi };
; 1555 :                                 __UNIT_TYPE_DIV r_buf[] = { 0, 0, 0 }; // 演算結果を格納するためには v と同じ大きさだけあれば十分であるが、除算の作業用バッファも兼ねているので余分にとっている。
; 1556 :                                 __UNIT_TYPE_DIV work_v_buf[] = { 0, 0 };
; 1557 :                                 (*fp_DivRem_X_X)(u_buf, countof(u_buf), (__UNIT_TYPE_DIV*)nv->BLOCK, nv->UNIT_WORD_COUNT * sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV), work_v_buf, NULL, r_buf);

	lea	rcx, QWORD PTR r_buf$12[rbp-153]
	mov	QWORD PTR r_buf$12[rbp-153], rax
	mov	QWORD PTR [rsp+48], rcx
	lea	rcx, QWORD PTR u_buf$7[rbp-153]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR r_buf$12[rbp-145], eax
	mov	QWORD PTR work_v_buf$6[rbp-153], rax
	lea	rax, QWORD PTR work_v_buf$6[rbp-153]
	mov	DWORD PTR u_buf$7[rbp-149], edx
	mov	edx, 2
	mov	QWORD PTR [rsp+32], rax
	mov	DWORD PTR u_buf$7[rbp-153], edi
	call	QWORD PTR fp_DivRem_X_X
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, DWORD PTR r_buf$12[rbp-153]
	mov	ecx, DWORD PTR r_buf$12[rbp-149]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1601 :     return (PMC_STATUS_OK);

	shl	rcx, 32					; 00000020H
	or	rcx, rax
	mov	QWORD PTR [r14], rcx
	xor	eax, eax
	jmp	SHORT $LN1@PMC_DivRem
$LN82@PMC_DivRem:

; 1421 :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN1@PMC_DivRem:

; 1602 : }

	mov	rcx, QWORD PTR __$ArrayPad$[rbp-153]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 208				; 000000d0H
	pop	r14
	pop	rdi
	pop	rsi
	pop	rbx
	pop	rbp
	ret	0
PMC_DivRem_L_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT PMC_DivRem_I_X
_TEXT	SEGMENT
u$ = 48
pos$1 = 56
v$ = 56
q$ = 64
r$ = 72
PMC_DivRem_I_X PROC					; COMDAT

; 1224 : {

$LN37:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 32					; 00000020H
	mov	esi, ecx
	mov	rdi, r9
	mov	rbx, r8
	mov	r14, rdx

; 1225 :     if (sizeof(__UNIT_TYPE_DIV) < sizeof(u))
; 1226 :     {
; 1227 :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 1228 :         return (PMC_STATUS_INTERNAL_ERROR);
; 1229 :     }
; 1230 :     if (v == NULL)

	test	rdx, rdx
	je	$LN35@PMC_DivRem

; 1231 :         return (PMC_STATUS_ARGUMENT_ERROR);
; 1232 :     if (r == NULL)

	test	r9, r9
	je	$LN35@PMC_DivRem

; 1234 :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 1235 :     PMC_STATUS_CODE result;
; 1236 :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	rcx, rdx
	call	CheckNumber
	test	eax, eax
	jne	$LN1@PMC_DivRem

; 1237 :         return (result);
; 1238 :     if (nv->IS_ZERO)

	mov	ecx, DWORD PTR [r14]
	test	cl, 1
	je	SHORT $LN6@PMC_DivRem

; 1239 :     {
; 1240 :         // v が 0 である場合
; 1241 : 
; 1242 :         // 0 による除算はエラーで返す
; 1243 :         return (PMC_STATUS_DIVISION_BY_ZERO);

	mov	eax, -3
	jmp	SHORT $LN1@PMC_DivRem
$LN6@PMC_DivRem:

; 1244 :     }
; 1245 :     if (u == 0)

	xor	eax, eax
	test	esi, esi
	jne	SHORT $LN7@PMC_DivRem

; 1246 :     {
; 1247 :         // u が 0 である場合
; 1248 : 
; 1249 :         // q = 0, r = 0 を返す
; 1250 :         if (q != NULL)

	test	rbx, rbx
	je	SHORT $LN12@PMC_DivRem

; 1251 :             *q = 0;

	mov	DWORD PTR [rbx], eax

; 1265 :             *r = 0;

	mov	DWORD PTR [rdi], eax

; 1302 :     return (PMC_STATUS_OK);

	jmp	SHORT $LN1@PMC_DivRem
$LN7@PMC_DivRem:

; 1252 :         *r = 0;
; 1253 :     }
; 1254 :     else
; 1255 :     {
; 1256 :         // u が 0 ではない場合
; 1257 : 
; 1258 :         if (nv->IS_ONE)

	test	cl, 2
	je	SHORT $LN10@PMC_DivRem

; 1259 :         {
; 1260 :             // v が 1 である場合
; 1261 : 
; 1262 :             // q = u, r = 0 を返す
; 1263 :             if (q != NULL)

	test	rbx, rbx
	je	SHORT $LN12@PMC_DivRem

; 1264 :                 *q = u;

	mov	DWORD PTR [rbx], esi
$LN12@PMC_DivRem:

; 1265 :             *r = 0;

	mov	DWORD PTR [rdi], eax

; 1302 :     return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@PMC_DivRem
$LN10@PMC_DivRem:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 595  :         _BitScanReverse(&pos, x);

	bsr	ecx, esi

; 596  : #elif defined(__GNUC__)
; 597  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 598  : #else
; 599  : #error unknown compiler
; 600  : #endif
; 601  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31
	sub	eax, ecx
	mov	DWORD PTR pos$1[rsp], ecx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1272 :             __UNIT_TYPE u_bit_count = sizeof(u) * 8 - _LZCNT_ALT_32(u);

	cdqe
	mov	ecx, 32					; 00000020H
	sub	rcx, rax

; 1273 :             __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 1274 :             if (u_bit_count < v_bit_count)

	cmp	rcx, QWORD PTR [r14+24]
	jae	SHORT $LN13@PMC_DivRem

; 1275 :             {
; 1276 :                 // 明らかに u < v である場合
; 1277 : 
; 1278 :                 // q = 0, r = u を返す。
; 1279 :                 if (q != NULL)

	test	rbx, rbx
	je	SHORT $LN15@PMC_DivRem

; 1280 :                     *q = 0;

	xor	eax, eax
	mov	DWORD PTR [rbx], eax
$LN15@PMC_DivRem:

; 1281 :                 *r = u;

	mov	DWORD PTR [rdi], esi

; 1302 :     return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@PMC_DivRem
$LN13@PMC_DivRem:

; 1282 :             }
; 1283 :             else
; 1284 :             {
; 1285 :                 // u のビット数が v のビット数以上である場合
; 1286 :                 
; 1287 :                 // u は 1 ワードで表現できるので、v も 1 ワードで表現できる。
; 1288 :                 __UNIT_TYPE_DIV temp_r;
; 1289 :                 __UNIT_TYPE_DIV temp_q = _DIVREM_UNIT(0, u, (__UNIT_TYPE_DIV)nv->BLOCK[0], &temp_r);

	mov	rcx, QWORD PTR [r14+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 384  :             *r = (_UINT32_T)(t % v);

	xor	edx, edx

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	rax, rsi

; 384  :             *r = (_UINT32_T)(t % v);

	mov	r8d, DWORD PTR [rcx]
	div	r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1290 :                 if (q != NULL)

	test	rbx, rbx
	je	SHORT $LN16@PMC_DivRem

; 1291 :                     *q = temp_q;

	mov	DWORD PTR [rbx], eax
$LN16@PMC_DivRem:

; 1292 :                 *r = temp_r;

	mov	DWORD PTR [rdi], edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 319  :         _InterlockedIncrement(&statistics_info.COUNT_DIV64);

	lock inc DWORD PTR statistics_info+8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 1302 :     return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@PMC_DivRem
$LN35@PMC_DivRem:

; 1233 :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN1@PMC_DivRem:

; 1303 : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+64]
	mov	rdi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
PMC_DivRem_I_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT Initialize_DivRem
_TEXT	SEGMENT
feature$ = 8
Initialize_DivRem PROC					; COMDAT

; 2047 : {

	mov	eax, DWORD PTR [rcx]

; 2048 :     fp_DivRem_X_X = feature->PROCESSOR_FEATURE_ADX && feature->PROCESSOR_FEATURE_BMI2 ? DivRem_X_X_using_ADX_MULX : DivRem_X_X_using_ADC_MUL;
; 2049 :     return (PMC_STATUS_OK);

	lea	rdx, OFFSET FLAT:DivRem_X_X_using_ADC_MUL
	and	eax, 10
	lea	rcx, OFFSET FLAT:DivRem_X_X_using_ADX_MULX
	cmp	al, 10
	cmovne	rcx, rdx
	xor	eax, eax
	mov	QWORD PTR fp_DivRem_X_X, rcx

; 2050 : }

	ret	0
Initialize_DivRem ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT DivRem_X_X
_TEXT	SEGMENT
r$1 = 80
u_buf$ = 80
u_count$ = 88
v_buf$ = 96
v_count$ = 104
work_v_buf$ = 112
q_buf$ = 120
r_buf$ = 128
DivRem_X_X PROC						; COMDAT

; 39   : {

$LN33:
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	r10, rdx

; 40   :     __UNIT_TYPE_DIV* u_buf_2 = (__UNIT_TYPE_DIV*)u_buf;

	lea	rax, QWORD PTR [rdx+rdx]

; 41   :     __UNIT_TYPE u_count_2 = u_count * (sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV));
; 42   :     __UNIT_TYPE_DIV* v_buf_2 = (__UNIT_TYPE_DIV*)v_buf;

	lea	rdi, QWORD PTR [r9+r9]

; 43   :     __UNIT_TYPE v_count_2 = v_count * (sizeof(__UNIT_TYPE) / sizeof(__UNIT_TYPE_DIV));
; 44   :     if (sizeof(__UNIT_TYPE) != sizeof(__UNIT_TYPE_DIV))
; 45   :     {
; 46   :         if (u_buf_2[u_count_2 - 1] == 0)
; 47   :             --u_count_2;
; 48   :         if (v_buf_2[v_count_2 - 1] == 0)

	lea	rdx, QWORD PTR [rax-1]

; 49   :             --v_count_2;
; 50   :     }
; 51   :     if (v_count_2 == 1)

	lea	rsi, QWORD PTR [rdi-1]
	cmp	DWORD PTR [rcx+r10*8-4], 0
	cmovne	rdx, rax
	cmp	DWORD PTR [r8+r9*8-4], 0
	cmovne	rsi, rdi
	cmp	rsi, 1
	jne	$LN5@DivRem_X_X

; 52   :     {
; 53   :         if (u_count_2 == 1)

	mov	r8d, DWORD PTR [r8]
	cmp	rdx, rsi
	jne	SHORT $LN7@DivRem_X_X
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, DWORD PTR [rcx]

; 384  :             *r = (_UINT32_T)(t % v);

	xor	edx, edx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 57   :             if (q_buf != NULL)

	mov	rcx, QWORD PTR q_buf$[rsp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 384  :             *r = (_UINT32_T)(t % v);

	div	r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 57   :             if (q_buf != NULL)

	test	rcx, rcx
	je	SHORT $LN9@DivRem_X_X

; 58   :                 q_buf[0] = q;

	mov	eax, eax
	mov	QWORD PTR [rcx], rax
$LN9@DivRem_X_X:

; 59   :             r_buf[0] = r;

	mov	rax, QWORD PTR r_buf$[rsp]
	mov	ecx, edx
	mov	QWORD PTR [rax], rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 313  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock inc DWORD PTR statistics_info+12
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 90   : }

	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
$LN7@DivRem_X_X:

; 60   : #ifdef ENABLED_PERFORMANCE_COUNTER
; 61   :             if (sizeof(r) == sizeof(_UINT64_T))
; 62   :                 IncrementDIV64Counter();
; 63   :             else
; 64   :                 IncrementDIV32Counter();
; 65   : #endif
; 66   :         }
; 67   :         else
; 68   :         {
; 69   :             if (q_buf != NULL)

	mov	r9, QWORD PTR q_buf$[rsp]
	test	r9, r9
	je	SHORT $LN12@DivRem_X_X

; 70   :             {
; 71   :                 __UNIT_TYPE_DIV r;
; 72   :                 DivRem_X_1W(u_buf_2, u_count_2, v_buf_2[0], (__UNIT_TYPE_DIV*)q_buf, &r);

	lea	rax, QWORD PTR r$1[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	DivRem_X_1W

; 73   :                 r_buf[0] = r;

	mov	rax, QWORD PTR r_buf$[rsp]
	mov	ecx, DWORD PTR r$1[rsp]
	mov	QWORD PTR [rax], rcx

; 90   : }

	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
$LN12@DivRem_X_X:

; 74   :             }
; 75   :             else
; 76   :                 r_buf[0] = Rem_X_1W(u_buf_2, u_count_2, v_buf_2[0]);

	call	Rem_X_1W
	mov	ecx, eax
	mov	rax, QWORD PTR r_buf$[rsp]
	mov	QWORD PTR [rax], rcx

; 90   : }

	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
$LN5@DivRem_X_X:

; 77   :         }
; 78   :     }
; 79   :     else
; 80   :     {
; 81   :         if (u_count_2 < v_count_2)

	cmp	rdx, rsi
	jae	SHORT $LN14@DivRem_X_X

; 82   :         {
; 83   :             if (q_buf != NULL)

	mov	rax, QWORD PTR q_buf$[rsp]
	test	rax, rax
	je	SHORT $LN16@DivRem_X_X

; 84   :                 q_buf[0] = 0;

	mov	QWORD PTR [rax], 0
$LN16@DivRem_X_X:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 64   :         __movsq(d, s, count);

	mov	rdi, QWORD PTR r_buf$[rsp]
	mov	rsi, rcx
	mov	rcx, r10
	rep movsq
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 90   : }

	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
$LN14@DivRem_X_X:

; 85   :             _COPY_MEMORY_UNIT(r_buf, u_buf, u_count);
; 86   :         }
; 87   :         else
; 88   :             (*fp_DivRem_X_X)(u_buf_2, u_count_2, v_buf_2, v_count_2, (__UNIT_TYPE_DIV*)work_v_buf, (__UNIT_TYPE_DIV*)q_buf, (__UNIT_TYPE_DIV*)r_buf);

	mov	r9, rsi

; 90   : }

	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 64					; 00000040H
	pop	rdi

; 85   :             _COPY_MEMORY_UNIT(r_buf, u_buf, u_count);
; 86   :         }
; 87   :         else
; 88   :             (*fp_DivRem_X_X)(u_buf_2, u_count_2, v_buf_2, v_count_2, (__UNIT_TYPE_DIV*)work_v_buf, (__UNIT_TYPE_DIV*)q_buf, (__UNIT_TYPE_DIV*)r_buf);

	rex_jmp	QWORD PTR fp_DivRem_X_X
DivRem_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT Rem_X_1W
_TEXT	SEGMENT
u_buf$ = 8
u_buf_len$ = 16
v$ = 24
Rem_X_1W PROC						; COMDAT

; 94   :     // u の最上位ワードは 0 でありうることに注意すること。
; 95   :     __UNIT_TYPE_DIV* up = u_buf + u_buf_len - 1;

	lea	rcx, QWORD PTR [rcx+rdx*4]
	mov	r9, rdx
	add	rcx, -4

; 96   :     __UNIT_TYPE u_count = u_buf_len;
; 97   :     __UNIT_TYPE_DIV dummy_q;
; 98   :     if (sizeof(__UNIT_TYPE) != sizeof(__UNIT_TYPE_DIV))
; 99   :     {
; 100  :         while (*up == 0)

	cmp	DWORD PTR [rcx], 0
	jne	SHORT $LN3@Rem_X_1W
$LL2@Rem_X_1W:

; 101  :         {
; 102  :             --up;

	sub	rcx, 4

; 103  :             --u_count;

	dec	r9
	cmp	DWORD PTR [rcx], 0
	je	SHORT $LL2@Rem_X_1W
$LN3@Rem_X_1W:

; 104  :         }
; 105  :     }
; 106  :     __UNIT_TYPE_DIV r = 0;
; 107  :     __UNIT_TYPE count = u_count >> 5;

	mov	r10, r9
	mov	r8d, r8d
	shr	r10, 5
	xor	edx, edx

; 108  :     while (count != 0)

	test	r10, r10
	je	$LN558@Rem_X_1W
$LL4@Rem_X_1W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	shl	rax, 32					; 00000020H
	mov	edx, DWORD PTR [rcx]
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	shl	rax, 32					; 00000020H
	mov	edx, DWORD PTR [rcx-4]
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	shl	rax, 32					; 00000020H
	mov	edx, DWORD PTR [rcx-8]
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	shl	rax, 32					; 00000020H
	mov	edx, DWORD PTR [rcx-12]
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	shl	rax, 32					; 00000020H
	mov	edx, DWORD PTR [rcx-16]
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-20]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-24]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-28]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-32]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-36]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-40]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-44]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-48]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-52]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	shl	rax, 32					; 00000020H
	mov	edx, DWORD PTR [rcx-56]
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	shl	rax, 32					; 00000020H
	mov	edx, DWORD PTR [rcx-60]
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	shl	rax, 32					; 00000020H
	mov	edx, DWORD PTR [rcx-64]
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	shl	rax, 32					; 00000020H
	mov	edx, DWORD PTR [rcx-68]
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	shl	rax, 32					; 00000020H
	mov	edx, DWORD PTR [rcx-72]
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-76]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-80]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-84]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-88]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-92]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-96]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-100]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-104]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-108]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-112]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-116]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-120]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-124]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 142  :         up -= 32;

	add	rcx, -128				; ffffffffffffff80H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 336  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, 32					; 00000020H
	lock xadd DWORD PTR statistics_info+12, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 108  :     while (count != 0)

	sub	r10, 1
	jne	$LL4@Rem_X_1W
$LN558@Rem_X_1W:

; 143  :         --count;
; 144  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 145  :         if (sizeof(r) == sizeof(_UINT64_T))
; 146  :             AddToDIV64Counter(32);
; 147  :         else
; 148  :             AddToDIV32Counter(32);
; 149  : #endif
; 150  :     }
; 151  : 
; 152  :     if (u_count & 0x10)

	test	r9b, 16
	je	$LN415@Rem_X_1W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	shl	rax, 32					; 00000020H
	mov	edx, DWORD PTR [rcx]
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	shl	rax, 32					; 00000020H
	mov	edx, DWORD PTR [rcx-4]
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	shl	rax, 32					; 00000020H
	mov	edx, DWORD PTR [rcx-8]
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	shl	rax, 32					; 00000020H
	mov	edx, DWORD PTR [rcx-12]
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	shl	rax, 32					; 00000020H
	mov	edx, DWORD PTR [rcx-16]
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-20]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-24]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-28]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-32]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-36]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-40]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-44]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-48]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-52]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-56]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-60]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 170  :         up -= 16;

	sub	rcx, 64					; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 336  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, 16
	lock xadd DWORD PTR statistics_info+12, eax
$LN415@Rem_X_1W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 179  :     if (u_count & 0x8)

	test	r9b, 8
	je	$LN483@Rem_X_1W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-4]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-8]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-12]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-16]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-20]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-24]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-28]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 189  :         up -= 8;

	sub	rcx, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 336  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, 8
	lock xadd DWORD PTR statistics_info+12, eax
$LN483@Rem_X_1W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 198  :     if (u_count & 0x4)

	test	r9b, 4
	je	SHORT $LN519@Rem_X_1W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-4]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-8]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-12]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 204  :         up -= 4;

	sub	rcx, 16
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 336  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, 4
	lock xadd DWORD PTR statistics_info+12, eax
$LN519@Rem_X_1W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 213  :     if (u_count & 0x2)

	test	r9b, 2
	je	SHORT $LN539@Rem_X_1W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-4]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 217  :         up -= 2;

	sub	rcx, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 336  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, 2
	lock xadd DWORD PTR statistics_info+12, eax
$LN539@Rem_X_1W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 226  :     if (u_count & 0x1)

	test	r9b, 1
	je	SHORT $LN561@Rem_X_1W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 429  :             return ((_UINT32_T)(t % v));

	xor	edx, edx
	div	r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 313  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock inc DWORD PTR statistics_info+12
$LN561@Rem_X_1W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 239  : }

	mov	eax, edx
	ret	0
Rem_X_1W ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c
;	COMDAT DivRem_X_1W
_TEXT	SEGMENT
u_buf$ = 8
u_buf_len$ = 16
v$ = 24
q_buf$ = 32
r_buf$ = 40
DivRem_X_1W PROC					; COMDAT

; 243  :     // u の最上位ワードは 0 でありうることに注意すること。
; 244  :     __UNIT_TYPE_DIV* up = u_buf + u_buf_len - 1;

	lea	rcx, QWORD PTR [rcx+rdx*4]
	mov	r11, rdx
	add	rcx, -4

; 245  :     __UNIT_TYPE_DIV* qp = q_buf + u_buf_len - 1;

	lea	r10, QWORD PTR [r9-4]
	lea	r10, QWORD PTR [r10+rdx*4]

; 246  :     __UNIT_TYPE u_count = u_buf_len;
; 247  :     if (sizeof(__UNIT_TYPE) != sizeof(__UNIT_TYPE_DIV))
; 248  :     {
; 249  :         while (*up == 0)

	cmp	DWORD PTR [rcx], 0
	jne	SHORT $LN3@DivRem_X_1
	npad	8
$LL2@DivRem_X_1:

; 250  :         {
; 251  :             --up;

	sub	rcx, 4

; 252  :             --qp;

	sub	r10, 4

; 253  :             --u_count;

	dec	r11
	cmp	DWORD PTR [rcx], 0
	je	SHORT $LL2@DivRem_X_1
$LN3@DivRem_X_1:

; 254  :         }
; 255  :     }
; 256  :     __UNIT_TYPE_DIV r = 0;
; 257  :     __UNIT_TYPE count = u_count >> 5;

	mov	r9, r11
	mov	r8d, r8d
	shr	r9, 5
	xor	edx, edx

; 258  :     while (count != 0)

	test	r9, r9
	je	$LN558@DivRem_X_1
	npad	11
$LL4@DivRem_X_1:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	shl	rax, 32					; 00000020H
	mov	edx, DWORD PTR [rcx]
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-4]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-4], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-8]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-8], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-12]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-12], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-16]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-16], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-20]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-20], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-24]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-24], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-28]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-28], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-32]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-32], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-36]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-36], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-40]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-40], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-44]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-44], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-48]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-48], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-52]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-52], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-56]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-56], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-60]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-60], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-64]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-64], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-68]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-68], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-72]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-72], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-76]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-76], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-80]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-80], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-84]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-84], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-88]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-88], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-92]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-92], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-96]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-96], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-100]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-100], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-104]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-104], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-108]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-108], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-112]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-112], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-116]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-116], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-120]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-120], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-124]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 292  :         up -= 32;

	add	rcx, -128				; ffffffffffffff80H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-124], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 293  :         qp -= 32;

	add	r10, -128				; ffffffffffffff80H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 336  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, 32					; 00000020H
	lock xadd DWORD PTR statistics_info+12, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 258  :     while (count != 0)

	sub	r9, 1
	jne	$LL4@DivRem_X_1
$LN558@DivRem_X_1:

; 294  :         --count;
; 295  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 296  :         if (sizeof(r) == sizeof(_UINT64_T))
; 297  :             AddToDIV64Counter(32);
; 298  :         else
; 299  :             AddToDIV32Counter(32);
; 300  : #endif
; 301  :     }
; 302  : 
; 303  :     if (u_count & 0x10)

	test	r11b, 16
	je	$LN415@DivRem_X_1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-4]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-4], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, DWORD PTR [rcx-8]
	mov	edx, edx
	shl	rdx, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-8], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-12]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-12], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-16]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-16], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-20]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-20], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-24]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-24], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-28]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-28], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-32]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-32], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-36]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-36], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-40]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-40], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-44]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-44], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-48]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-48], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-52]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-52], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-56]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-56], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-60]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 321  :         up -= 16;

	sub	rcx, 64					; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-60], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 322  :         qp -= 16;

	sub	r10, 64					; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 336  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, 16
	lock xadd DWORD PTR statistics_info+12, eax
$LN415@DivRem_X_1:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 331  :     if (u_count & 0x8)

	test	r11b, 8
	je	$LN483@DivRem_X_1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-4]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-4], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-8]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-8], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-12]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-12], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-16]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-16], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-20]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-20], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-24]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-24], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-28]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 341  :         up -= 8;

	sub	rcx, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-28], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 342  :         qp -= 8;

	sub	r10, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 336  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, 8
	lock xadd DWORD PTR statistics_info+12, eax
$LN483@DivRem_X_1:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 351  :     if (u_count & 0x4)

	test	r11b, 4
	je	SHORT $LN519@DivRem_X_1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-4]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-4], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-8]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-8], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-12]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 357  :         up -= 4;

	sub	rcx, 16
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-12], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 358  :         qp -= 4;

	sub	r10, 16
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 336  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, 4
	lock xadd DWORD PTR statistics_info+12, eax
$LN519@DivRem_X_1:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 367  :     if (u_count & 0x2)

	test	r11b, 2
	je	SHORT $LN539@DivRem_X_1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10], eax

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx-4]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 371  :         up -= 2;

	sub	rcx, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10-4], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 372  :         qp -= 2;

	sub	r10, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 336  :         _InterlockedExchangeAdd(&statistics_info.COUNT_DIV32, value);

	mov	eax, 2
	lock xadd DWORD PTR statistics_info+12, eax
$LN539@DivRem_X_1:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 381  :     if (u_count & 0x1)

	test	r11b, 1
	je	SHORT $LN561@DivRem_X_1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 172  :         return (((_UINT64_T)value_high << 32) | value_low);

	mov	eax, edx
	mov	edx, DWORD PTR [rcx]
	shl	rax, 32					; 00000020H
	or	rax, rdx

; 428  :             *q = (_UINT32_T)(t / v);

	xor	edx, edx
	div	r8
	mov	DWORD PTR [r10], eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 313  :         _InterlockedIncrement(&statistics_info.COUNT_DIV32);

	lock inc DWORD PTR statistics_info+12
$LN561@DivRem_X_1:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_divrem.c

; 395  : }

	mov	rax, QWORD PTR r_buf$[rsp]
	mov	DWORD PTR [rax], edx
	ret	0
DivRem_X_1W ENDP
_TEXT	ENDS
END
