; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	Multiply_X_X_Imp
PUBLIC	Initialize_Multiply
PUBLIC	PMC_Multiply_I_X
PUBLIC	PMC_Multiply_L_X
PUBLIC	PMC_Multiply_X_I
PUBLIC	PMC_Multiply_X_L
PUBLIC	PMC_Multiply_X_X
EXTRN	CheckBlockLight:PROC
EXTRN	AllocateNumber:PROC
EXTRN	CommitNumber:PROC
EXTRN	CheckNumber:PROC
EXTRN	DuplicateNumber:PROC
EXTRN	From_I_Imp:PROC
EXTRN	From_L_Imp:PROC
EXTRN	number_zero:BYTE
EXTRN	statistics_info:BYTE
_BSS	SEGMENT
fp_Multiply_X_1W DQ 01H DUP (?)
fp_Multiply_X_2W DQ 01H DUP (?)
fp_Multiply_X_X DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Multiply_I_X DD imagerel $LN10
	DD	imagerel $LN10+94
	DD	imagerel $unwind$PMC_Multiply_I_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Multiply_L_X DD imagerel $LN10
	DD	imagerel $LN10+96
	DD	imagerel $unwind$PMC_Multiply_L_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Multiply_X_I DD imagerel $LN10
	DD	imagerel $LN10+91
	DD	imagerel $unwind$PMC_Multiply_X_I
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Multiply_X_L DD imagerel $LN10
	DD	imagerel $LN10+93
	DD	imagerel $unwind$PMC_Multiply_X_L
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Multiply_X_X DD imagerel $LN27
	DD	imagerel $LN27+379
	DD	imagerel $unwind$PMC_Multiply_X_X
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Multiply_WORD_using_MUL_ADC DD imagerel Multiply_WORD_using_MUL_ADC
	DD	imagerel Multiply_WORD_using_MUL_ADC+2979
	DD	imagerel $unwind$Multiply_WORD_using_MUL_ADC
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Multiply_WORD_using_MULX_ADCX DD imagerel Multiply_WORD_using_MULX_ADCX
	DD	imagerel Multiply_WORD_using_MULX_ADCX+3188
	DD	imagerel $unwind$Multiply_WORD_using_MULX_ADCX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Multiply_X_2W_using_MUL_ADC DD imagerel Multiply_X_2W_using_MUL_ADC
	DD	imagerel Multiply_X_2W_using_MUL_ADC+86
	DD	imagerel $unwind$Multiply_X_2W_using_MUL_ADC
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Multiply_X_2W_using_MULX_ADCX DD imagerel Multiply_X_2W_using_MULX_ADCX
	DD	imagerel Multiply_X_2W_using_MULX_ADCX+86
	DD	imagerel $unwind$Multiply_X_2W_using_MULX_ADCX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Multiply_X_X_using_MUL_ADC DD imagerel Multiply_X_X_using_MUL_ADC
	DD	imagerel Multiply_X_X_using_MUL_ADC+135
	DD	imagerel $unwind$Multiply_X_X_using_MUL_ADC
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Multiply_X_X_using_MULX_ADCX DD imagerel Multiply_X_X_using_MULX_ADCX
	DD	imagerel Multiply_X_X_using_MULX_ADCX+135
	DD	imagerel $unwind$Multiply_X_X_using_MULX_ADCX
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Multiply_X_I_Imp DD imagerel PMC_Multiply_X_I_Imp
	DD	imagerel PMC_Multiply_X_I_Imp+249
	DD	imagerel $unwind$PMC_Multiply_X_I_Imp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_Multiply_X_L_Imp DD imagerel PMC_Multiply_X_L_Imp
	DD	imagerel PMC_Multiply_X_L_Imp+255
	DD	imagerel $unwind$PMC_Multiply_X_L_Imp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Multiply_X_L_Imp DD 060f01H
	DD	08640fH
	DD	07340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Multiply_X_I_Imp DD 060f01H
	DD	08640fH
	DD	07340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Multiply_X_X_using_MULX_ADCX DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Multiply_X_X_using_MUL_ADC DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Multiply_X_2W_using_MULX_ADCX DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Multiply_X_2W_using_MUL_ADC DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Multiply_WORD_using_MULX_ADCX DD 091d01H
	DD	084641dH
	DD	082341dH
	DD	07e011dH
	DD	0700ce00eH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Multiply_WORD_using_MUL_ADC DD 091f01H
	DD	083741fH
	DD	082641fH
	DD	080341fH
	DD	07e011fH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Multiply_X_X DD 060f01H
	DD	0a640fH
	DD	09340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Multiply_X_L DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Multiply_X_I DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Multiply_L_X DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_Multiply_I_X DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
;	COMDAT PMC_Multiply_X_L_Imp
_TEXT	SEGMENT
nz_light_check_code$1 = 48
u$ = 48
v$ = 56
w$ = 64
PMC_Multiply_X_L_Imp PROC				; COMDAT

; 553  : {

	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 554  :     PMC_STATUS_CODE result;
; 555  :     if (u->IS_ZERO)

	mov	eax, DWORD PTR [rcx+40]
	mov	rbx, r8
	mov	rdi, rdx
	mov	rsi, rcx
	test	al, 2
	jne	SHORT $LN36@PMC_Multip

; 556  :     {
; 557  :         // x が 0 である場合
; 558  : 
; 559  :         // y の値にかかわらず 0 を返す。
; 560  :         *w = &number_zero;
; 561  :     }
; 562  :     else if (u->IS_ONE)

	test	al, 4
	je	SHORT $LN4@PMC_Multip

; 563  :     {
; 564  :         // x が 1 である場合
; 565  :         if (v == 0)

	test	rdx, rdx
	je	SHORT $LN36@PMC_Multip

; 566  :         {
; 567  :             // y が 0 である場合
; 568  : 
; 569  :             //  0  を返す。
; 570  :             *w = &number_zero;
; 571  :         }
; 572  :         else
; 573  :         {
; 574  :             // y が 0 ではない場合
; 575  : 
; 576  :             // 乗算結果は y に等しいため、y の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 577  :             if ((result = From_L_Imp(v, w)) != PMC_STATUS_OK)

	mov	rdx, rbx
	mov	rcx, rdi
	call	From_L_Imp
	test	eax, eax
	je	$LN15@PMC_Multip

; 656  : }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN4@PMC_Multip:

; 578  :                 return (result);
; 579  :         }
; 580  :     }
; 581  :     else
; 582  :     {
; 583  :         // x が 0 と 1 のどちらでもない場合
; 584  : 
; 585  :         if (v == 0)

	test	rdi, rdi
	jne	SHORT $LN9@PMC_Multip
$LN36@PMC_Multip:

; 652  :             }
; 653  :         }
; 654  :     }
; 655  :     return (PMC_STATUS_OK);

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR [r8], rax
	xor	eax, eax

; 656  : }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN9@PMC_Multip:

; 586  :         {
; 587  :             // y が 0 である場合
; 588  : 
; 589  :             //  0  を返す。
; 590  :             *w = &number_zero;
; 591  :         }
; 592  :         else if (v == 1)

	cmp	rdi, 1
	jne	SHORT $LN11@PMC_Multip

; 593  :         {
; 594  :             // y が 1 である場合
; 595  : 
; 596  :             // 乗算結果は x に等しいため、x の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 597  :             if ((result = DuplicateNumber(u, w)) != PMC_STATUS_OK)

	mov	rdx, rbx
	call	DuplicateNumber
	test	eax, eax
	je	SHORT $LN15@PMC_Multip

; 656  : }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN11@PMC_Multip:

; 598  :                 return (result);
; 599  :         }
; 600  :         else
; 601  :         {
; 602  :             // x と y がともに 0 、1 のどちらでもない場合
; 603  : 
; 604  :             // x と y の積を計算する
; 605  :             if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)
; 606  :             {
; 607  :                 // _UINT64_T が 1 ワードで表現しきれない場合
; 608  : 
; 609  :                 __UNIT_TYPE x_bit_count = u->UNIT_BIT_COUNT;
; 610  :                 _UINT32_T y_hi;
; 611  :                 _UINT32_T y_lo = _FROMDWORDTOWORD(v, &y_hi);
; 612  :                 if (y_hi == 0)
; 613  :                 {
; 614  :                     // y の値が 32bit で表現可能な場合
; 615  :                     __UNIT_TYPE y_bit_count = sizeof(y_lo) * 8 - _LZCNT_ALT_32(y_lo);
; 616  :                     __UNIT_TYPE z_bit_count = x_bit_count + y_bit_count;
; 617  :                     __UNIT_TYPE nz_light_check_code;
; 618  :                     if ((result = AllocateNumber(w, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)
; 619  :                         return (result);
; 620  :                     (*fp_Multiply_X_1W)(u->BLOCK, u->UNIT_WORD_COUNT, y_lo, (*w)->BLOCK);
; 621  :                     if ((result = CheckBlockLight((*w)->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)
; 622  :                         return (result);
; 623  :                 }
; 624  :                 else
; 625  :                 {
; 626  :                     // y の値が 32bit では表現できない場合
; 627  :                     __UNIT_TYPE y_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(y_hi);
; 628  :                     __UNIT_TYPE z_bit_count = x_bit_count + y_bit_count;
; 629  :                     __UNIT_TYPE nz_light_check_code;
; 630  :                     if ((result = AllocateNumber(w, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)
; 631  :                         return (result);
; 632  :                     (*fp_Multiply_X_2W)(u->BLOCK, u->UNIT_WORD_COUNT, y_hi, y_lo, (*w)->BLOCK);
; 633  :                     if ((result = CheckBlockLight((*w)->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)
; 634  :                         return (result);
; 635  :                 }
; 636  :                 CommitNumber(*w);
; 637  :             }
; 638  :             else
; 639  :             {
; 640  :                 // _UINT64_T が 1 ワードで表現できる場合
; 641  : 
; 642  :                 __UNIT_TYPE x_bit_count = u->UNIT_BIT_COUNT;

	mov	rdx, QWORD PTR [rcx+16]

; 644  :                 __UNIT_TYPE z_bit_count = x_bit_count + y_bit_count;
; 645  :                 __UNIT_TYPE nz_light_check_code;
; 646  :                 if ((result = AllocateNumber(w, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR nz_light_check_code$1[rsp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 644  :         _BitScanReverse64(&pos, x);

	bsr	rax, rdi

; 645  : #elif defined(__GNUC__)
; 646  :         _UINT64_T pos;
; 647  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 648  : #else
; 649  : #error unknown compiler
; 650  : #endif
; 651  : #else
; 652  : #error unknown platform
; 653  : #endif
; 654  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 63					; 0000003fH
	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 643  :                 __UNIT_TYPE y_bit_count = sizeof(v) * 8 - _LZCNT_ALT_UNIT((__UNIT_TYPE)v);

	movsxd	rax, ecx

; 644  :                 __UNIT_TYPE z_bit_count = x_bit_count + y_bit_count;
; 645  :                 __UNIT_TYPE nz_light_check_code;
; 646  :                 if ((result = AllocateNumber(w, z_bit_count, &nz_light_check_code)) != PMC_STATUS_OK)

	mov	rcx, rbx
	sub	rdx, rax
	add	rdx, 64					; 00000040H
	call	AllocateNumber
	test	eax, eax
	jne	SHORT $LN1@PMC_Multip

; 647  :                     return (result);
; 648  :                 (*fp_Multiply_X_1W)(u->BLOCK, u->UNIT_WORD_COUNT, (__UNIT_TYPE)v, (*w)->BLOCK);

	mov	r9, QWORD PTR [rbx]
	mov	r8, rdi
	mov	rdx, QWORD PTR [rsi+8]
	mov	rcx, QWORD PTR [rsi+56]
	mov	r9, QWORD PTR [r9+56]
	call	QWORD PTR fp_Multiply_X_1W

; 649  :                 if ((result = CheckBlockLight((*w)->BLOCK, nz_light_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR [rbx]
	mov	rdx, QWORD PTR nz_light_check_code$1[rsp]
	mov	rcx, QWORD PTR [rcx+56]
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_Multip

; 650  :                     return (result);
; 651  :                 CommitNumber(*w);

	mov	rcx, QWORD PTR [rbx]
	call	CommitNumber
$LN15@PMC_Multip:

; 652  :             }
; 653  :         }
; 654  :     }
; 655  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Multip:

; 656  : }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_Multiply_X_L_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
;	COMDAT PMC_Multiply_X_I_Imp
_TEXT	SEGMENT
w_light_check_code$1 = 48
u$ = 48
v$ = 56
w$ = 64
PMC_Multiply_X_I_Imp PROC				; COMDAT

; 439  : {

	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 440  :     PMC_STATUS_CODE result;
; 441  :     if (u->IS_ZERO)

	mov	eax, DWORD PTR [rcx+40]
	mov	rbx, r8
	mov	edi, edx
	mov	rsi, rcx
	test	al, 2
	jne	SHORT $LN20@PMC_Multip

; 442  :     {
; 443  :         // u が 0 である場合
; 444  : 
; 445  :         // v の値にかかわらず 0 を返す。
; 446  :         *w = &number_zero;
; 447  :     }
; 448  :     else if (u->IS_ONE)

	test	al, 4
	je	SHORT $LN4@PMC_Multip

; 449  :     {
; 450  :         // u が 1 である場合
; 451  :         if (v == 0)

	test	edx, edx
	je	SHORT $LN20@PMC_Multip

; 452  :         {
; 453  :             // v が 0 である場合
; 454  : 
; 455  :             //  0  を返す。
; 456  :             *w = &number_zero;
; 457  :         }
; 458  :         else
; 459  :         {
; 460  :             // y が 0 ではない場合
; 461  : 
; 462  :             // 乗算結果は v に等しいため、v の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 463  :             if ((result = From_I_Imp(v, w)) != PMC_STATUS_OK)

	mov	rdx, rbx
	mov	ecx, edi
	call	From_I_Imp
	test	eax, eax
	je	$LN12@PMC_Multip

; 504  : }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN4@PMC_Multip:

; 464  :                 return (result);
; 465  :         }
; 466  :     }
; 467  :     else
; 468  :     {
; 469  :         // u が 0 と 1 のどちらでもない場合
; 470  : 
; 471  :         if (v == 0)

	test	edx, edx
	jne	SHORT $LN9@PMC_Multip
$LN20@PMC_Multip:

; 501  :         }
; 502  :     }
; 503  :     return (PMC_STATUS_OK);

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR [r8], rax
	xor	eax, eax

; 504  : }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN9@PMC_Multip:

; 472  :         {
; 473  :             // v が 0 である場合
; 474  : 
; 475  :             //  0  を返す。
; 476  :             *w = &number_zero;
; 477  :         }
; 478  :         else if (v == 1)

	cmp	edi, 1
	jne	SHORT $LN11@PMC_Multip

; 479  :         {
; 480  :             // v が 1 である場合
; 481  : 
; 482  :             // 乗算結果は u に等しいため、u の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 483  :             if ((result = DuplicateNumber(u, w)) != PMC_STATUS_OK)

	mov	rdx, rbx
	call	DuplicateNumber
	test	eax, eax
	je	SHORT $LN12@PMC_Multip

; 504  : }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN11@PMC_Multip:

; 484  :                 return (result);
; 485  :         }
; 486  :         else
; 487  :         {
; 488  :             // u と v がともに 0 、1 のどちらでもない場合
; 489  : 
; 490  :             // u と v の積を計算する
; 491  :             __UNIT_TYPE u_bit_count = u->UNIT_BIT_COUNT;

	mov	rdx, QWORD PTR [rcx+16]

; 493  :             __UNIT_TYPE w_bit_count = u_bit_count + v_bit_count;
; 494  :             __UNIT_TYPE w_light_check_code;
; 495  :             if ((result = AllocateNumber(w, w_bit_count, &w_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR w_light_check_code$1[rsp]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 601  :         _BitScanReverse(&pos, x);

	bsr	eax, edi

; 602  : #elif defined(__GNUC__)
; 603  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 604  : #else
; 605  : #error unknown compiler
; 606  : #endif
; 607  :         return (sizeof(x) * 8 - 1 - pos);

	mov	ecx, 31
	sub	ecx, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 492  :             __UNIT_TYPE v_bit_count = sizeof(v) * 8 - _LZCNT_ALT_32(v);

	movsxd	rax, ecx

; 493  :             __UNIT_TYPE w_bit_count = u_bit_count + v_bit_count;
; 494  :             __UNIT_TYPE w_light_check_code;
; 495  :             if ((result = AllocateNumber(w, w_bit_count, &w_light_check_code)) != PMC_STATUS_OK)

	mov	rcx, rbx
	sub	rdx, rax
	add	rdx, 32					; 00000020H
	call	AllocateNumber
	test	eax, eax
	jne	SHORT $LN1@PMC_Multip

; 496  :                 return (result);
; 497  :             (*fp_Multiply_X_1W)(u->BLOCK, u->UNIT_WORD_COUNT, v, (*w)->BLOCK);

	mov	r9, QWORD PTR [rbx]
	mov	r8, rdi
	mov	rdx, QWORD PTR [rsi+8]
	mov	rcx, QWORD PTR [rsi+56]
	mov	r9, QWORD PTR [r9+56]
	call	QWORD PTR fp_Multiply_X_1W

; 498  :             if ((result = CheckBlockLight((*w)->BLOCK, w_light_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR [rbx]
	mov	rdx, QWORD PTR w_light_check_code$1[rsp]
	mov	rcx, QWORD PTR [rcx+56]
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_Multip

; 499  :                 return (result);
; 500  :             CommitNumber(*w);

	mov	rcx, QWORD PTR [rbx]
	call	CommitNumber
$LN12@PMC_Multip:

; 501  :         }
; 502  :     }
; 503  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_Multip:

; 504  : }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_Multiply_X_I_Imp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
;	COMDAT Multiply_X_X_using_MULX_ADCX
_TEXT	SEGMENT
u_buf$ = 48
u_count$ = 56
v_buf$ = 64
v_count$ = 72
w_buf$ = 80
Multiply_X_X_using_MULX_ADCX PROC			; COMDAT

; 414  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 32					; 00000020H

; 415  :     // x のワード長が y のワード長以上であるようにする
; 416  :     if (u_count < v_count)
; 417  :     {
; 418  :         __UNIT_TYPE* t_buf = u_buf;
; 419  :         u_buf = v_buf;
; 420  :         v_buf = t_buf;
; 421  :         __UNIT_TYPE t_count = u_count;
; 422  :         u_count = v_count;
; 423  :         v_count = t_count;
; 424  :     }
; 425  :     __UNIT_TYPE* up = u_buf;

	mov	r14, QWORD PTR w_buf$[rsp]
	cmp	rdx, r9
	mov	rbx, rcx
	mov	rsi, r8
	cmovae	rbx, r8
	cmovae	rsi, rcx
	mov	rbp, r9
	mov	rdi, rdx
	cmovae	rbp, rdx
	sub	r14, rbx
	cmp	rdx, r9
	cmovae	rdi, r9
	npad	12
$LL4@Multiply_X:

; 426  :     __UNIT_TYPE* vp = v_buf;
; 427  :     __UNIT_TYPE* wp = w_buf;
; 428  : 
; 429  :     do
; 430  :     {
; 431  :         Multiply_WORD_using_MULX_ADCX(up, u_count, *vp, wp);

	mov	r8, QWORD PTR [rbx]
	lea	r9, QWORD PTR [r14+rbx]
	mov	rdx, rbp
	mov	rcx, rsi
	call	Multiply_WORD_using_MULX_ADCX

; 432  :         ++vp;

	lea	rbx, QWORD PTR [rbx+8]

; 433  :         ++wp;
; 434  :         --v_count;

	sub	rdi, 1

; 435  :     } while (v_count != 0);

	jne	SHORT $LL4@Multiply_X

; 436  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	mov	rdi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
Multiply_X_X_using_MULX_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
;	COMDAT Multiply_X_X_using_MUL_ADC
_TEXT	SEGMENT
u_buf$ = 48
u_count$ = 56
v_buf$ = 64
v_count$ = 72
w_buf$ = 80
Multiply_X_X_using_MUL_ADC PROC				; COMDAT

; 389  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 32					; 00000020H

; 390  :     // x のワード長が y のワード長以上であるようにする
; 391  :     if (u_count < v_count)
; 392  :     {
; 393  :         __UNIT_TYPE* t_buf = u_buf;
; 394  :         u_buf = v_buf;
; 395  :         v_buf = t_buf;
; 396  :         __UNIT_TYPE t_count = u_count;
; 397  :         u_count = v_count;
; 398  :         v_count = t_count;
; 399  :     }
; 400  :     __UNIT_TYPE* up = u_buf;

	mov	r14, QWORD PTR w_buf$[rsp]
	cmp	rdx, r9
	mov	rbx, rcx
	mov	rsi, r8
	cmovae	rbx, r8
	cmovae	rsi, rcx
	mov	rbp, r9
	mov	rdi, rdx
	cmovae	rbp, rdx
	sub	r14, rbx
	cmp	rdx, r9
	cmovae	rdi, r9
	npad	12
$LL4@Multiply_X:

; 401  :     __UNIT_TYPE* vp = v_buf;
; 402  :     __UNIT_TYPE* wp = w_buf;
; 403  : 
; 404  :     do
; 405  :     {
; 406  :         Multiply_WORD_using_MUL_ADC(up, u_count, *vp, wp);

	mov	r8, QWORD PTR [rbx]
	lea	r9, QWORD PTR [r14+rbx]
	mov	rdx, rbp
	mov	rcx, rsi
	call	Multiply_WORD_using_MUL_ADC

; 407  :         ++vp;

	lea	rbx, QWORD PTR [rbx+8]

; 408  :         ++wp;
; 409  :         --v_count;

	sub	rdi, 1

; 410  :     } while (v_count != 0);

	jne	SHORT $LL4@Multiply_X

; 411  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	mov	rdi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
Multiply_X_X_using_MUL_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
;	COMDAT Multiply_X_2W_using_MULX_ADCX
_TEXT	SEGMENT
u_buf$ = 48
u_count$ = 56
v_hi$ = 64
v_lo$ = 72
w_buf$ = 80
Multiply_X_2W_using_MULX_ADCX PROC			; COMDAT

; 383  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 384  :     Multiply_WORD_using_MULX_ADCX(u_buf, u_count, v_lo, &w_buf[0]);

	mov	rbx, QWORD PTR w_buf$[rsp]
	mov	rax, r9
	mov	rdi, r8
	mov	r9, rbx
	mov	r8, rax
	mov	rsi, rdx
	mov	rbp, rcx
	call	Multiply_WORD_using_MULX_ADCX

; 385  :     Multiply_WORD_using_MULX_ADCX(u_buf, u_count, v_hi, &w_buf[1]);

	lea	r9, QWORD PTR [rbx+8]
	mov	r8, rdi
	mov	rdx, rsi
	mov	rcx, rbp

; 386  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi

; 385  :     Multiply_WORD_using_MULX_ADCX(u_buf, u_count, v_hi, &w_buf[1]);

	jmp	Multiply_WORD_using_MULX_ADCX
Multiply_X_2W_using_MULX_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
;	COMDAT Multiply_X_2W_using_MUL_ADC
_TEXT	SEGMENT
u_buf$ = 48
u_count$ = 56
v_hi$ = 64
v_lo$ = 72
w_buf$ = 80
Multiply_X_2W_using_MUL_ADC PROC			; COMDAT

; 377  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 378  :     Multiply_WORD_using_MUL_ADC(u_buf, u_count, v_lo, &w_buf[0]);

	mov	rbx, QWORD PTR w_buf$[rsp]
	mov	rax, r9
	mov	rdi, r8
	mov	r9, rbx
	mov	r8, rax
	mov	rsi, rdx
	mov	rbp, rcx
	call	Multiply_WORD_using_MUL_ADC

; 379  :     Multiply_WORD_using_MUL_ADC(u_buf, u_count, v_hi, &w_buf[1]);

	lea	r9, QWORD PTR [rbx+8]
	mov	r8, rdi
	mov	rdx, rsi
	mov	rcx, rbp

; 380  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi

; 379  :     Multiply_WORD_using_MUL_ADC(u_buf, u_count, v_hi, &w_buf[1]);

	jmp	Multiply_WORD_using_MUL_ADC
Multiply_X_2W_using_MUL_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
;	COMDAT Multiply_X_1W_using_MULX_ADCX
_TEXT	SEGMENT
u_buf$ = 8
u_count$ = 16
v$ = 24
w_buf$ = 32
Multiply_X_1W_using_MULX_ADCX PROC			; COMDAT

; 373  :     Multiply_WORD_using_MULX_ADCX(u_buf, u_count, v, w_buf);

	jmp	Multiply_WORD_using_MULX_ADCX
Multiply_X_1W_using_MULX_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
;	COMDAT Multiply_X_1W_using_MUL_ADC
_TEXT	SEGMENT
u_buf$ = 8
u_count$ = 16
v$ = 24
w_buf$ = 32
Multiply_X_1W_using_MUL_ADC PROC			; COMDAT

; 368  :     Multiply_WORD_using_MUL_ADC(u_buf, u_count, v, w_buf);

	jmp	Multiply_WORD_using_MUL_ADC
Multiply_X_1W_using_MUL_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
;	COMDAT Multiply_WORD_using_MULX_ADCX
_TEXT	SEGMENT
t_hi$1 = 0
t_lo$2 = 8
t_hi$3 = 16
t_lo$4 = 24
t_hi$5 = 32
t_lo$6 = 40
t_hi$7 = 48
t_lo$8 = 56
t_hi$9 = 64
t_lo$10 = 72
t_hi$11 = 80
t_lo$12 = 88
t_hi$13 = 96
t_lo$14 = 104
t_hi$15 = 112
t_lo$16 = 120
t_hi$17 = 128
t_lo$18 = 136
t_hi$19 = 144
t_lo$20 = 152
t_hi$21 = 160
t_lo$22 = 168
t_hi$23 = 176
t_lo$24 = 184
t_hi$25 = 192
t_lo$26 = 200
t_hi$27 = 208
t_lo$28 = 216
t_hi$29 = 224
t_lo$30 = 232
t_hi$31 = 240
t_lo$32 = 248
t_hi$33 = 256
t_lo$34 = 264
t_hi$35 = 272
t_lo$36 = 280
t_hi$37 = 288
t_lo$38 = 296
t_hi$39 = 304
t_lo$40 = 312
t_hi$41 = 320
t_lo$42 = 328
t_hi$43 = 336
t_lo$44 = 344
t_hi$45 = 352
t_lo$46 = 360
t_hi$47 = 368
t_lo$48 = 376
t_hi$49 = 384
t_lo$50 = 392
t_hi$51 = 400
t_lo$52 = 408
t_hi$53 = 416
t_lo$54 = 424
t_hi$55 = 432
t_lo$56 = 440
t_hi$57 = 448
t_lo$58 = 456
t_hi$59 = 464
t_lo$60 = 472
t_hi$61 = 480
t_lo$62 = 488
t_hi$63 = 496
t_lo$64 = 504
t_hi$65 = 512
t_lo$66 = 520
t_hi$67 = 528
t_lo$68 = 536
t_hi$69 = 544
t_lo$70 = 552
t_hi$71 = 560
t_lo$72 = 568
t_hi$73 = 576
t_lo$74 = 584
t_hi$75 = 592
t_lo$76 = 600
t_hi$77 = 608
t_lo$78 = 616
t_hi$79 = 624
t_lo$80 = 632
t_hi$81 = 640
t_lo$82 = 648
t_hi$83 = 656
t_lo$84 = 664
t_hi$85 = 672
t_lo$86 = 680
t_hi$87 = 688
t_lo$88 = 696
t_hi$89 = 704
t_lo$90 = 712
t_hi$91 = 720
t_lo$92 = 728
t_hi$93 = 736
t_lo$94 = 744
t_hi$95 = 752
t_lo$96 = 760
t_hi$97 = 768
t_lo$98 = 776
t_hi$99 = 784
t_lo$100 = 792
t_hi$101 = 800
t_lo$102 = 808
t_hi$103 = 816
t_lo$104 = 824
t_hi$105 = 832
t_lo$106 = 840
t_hi$107 = 848
t_lo$108 = 856
t_hi$109 = 864
t_lo$110 = 872
t_hi$111 = 880
t_lo$112 = 888
t_hi$113 = 896
t_lo$114 = 904
t_hi$115 = 912
t_lo$116 = 920
t_hi$117 = 928
t_lo$118 = 936
t_hi$119 = 944
t_lo$120 = 952
t_hi$121 = 960
t_lo$122 = 968
t_hi$123 = 976
t_lo$124 = 984
t_hi$125 = 992
up$ = 1040
t_lo$126 = 1048
u_count$ = 1048
v$ = 1056
wp$ = 1064
Multiply_WORD_using_MULX_ADCX PROC			; COMDAT

; 219  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+24], rsi
	push	rbp
	push	rdi
	push	r14
	lea	rbp, QWORD PTR [rsp-752]
	sub	rsp, 1008				; 000003f0H

; 220  :     __UNIT_TYPE k = 0;

	xor	r14d, r14d

; 221  :     __UNIT_TYPE count = u_count >> 5;

	mov	rsi, rdx
	shr	rsi, 5
	mov	rbx, r8
	mov	rdi, rdx
	mov	r11, rcx
	mov	r10d, r14d

; 223  :     while (count != 0)

	test	rsi, rsi
	je	$LN3@Multiply_W
	npad	4
$LL2@Multiply_W:

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mov	rdx, rbx
	mulx	r8, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9]
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$126[rbp-256], rcx
	mov	QWORD PTR t_hi$1[rsp], r8

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+8]
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+8], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$2[rsp], rcx
	mov	QWORD PTR t_hi$3[rsp], r10

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+16]
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+16], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$4[rsp], rcx
	mov	QWORD PTR t_hi$5[rsp], r8

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+24]
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+24], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$6[rsp], rcx

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+32]
	mov	QWORD PTR t_hi$7[rsp], r10
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+32], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$8[rsp], rcx
	mov	QWORD PTR t_hi$9[rsp], r8

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+40]
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+40], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$10[rsp], rcx

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+48]
	mov	QWORD PTR t_hi$11[rsp], r10
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+48], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$12[rsp], rcx

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+56]
	mov	QWORD PTR t_hi$13[rsp], r8
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+56], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$14[rsp], rcx

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+64]
	mov	QWORD PTR t_hi$15[rsp], r10
	adcx	r8, r14
	add	rcx, r10
	mov	QWORD PTR t_lo$16[rsp], rcx
	adcx	r8, r14
	mov	QWORD PTR t_hi$17[rbp-256], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+64], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+72]
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+72], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$18[rbp-256], rcx
	mov	QWORD PTR t_hi$19[rbp-256], r10

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+80]
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+80], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$20[rbp-256], rcx
	mov	QWORD PTR t_hi$21[rbp-256], r8

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+88]
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+88], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$22[rbp-256], rcx
	mov	QWORD PTR t_hi$23[rbp-256], r10

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+96]
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+96], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$24[rbp-256], rcx

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+104]
	mov	QWORD PTR t_hi$25[rbp-256], r8
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+104], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$26[rbp-256], rcx
	mov	QWORD PTR t_hi$27[rbp-256], r10

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+112]
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+112], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$28[rbp-256], rcx

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+120]
	mov	QWORD PTR t_hi$29[rbp-256], r8
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+120], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+128]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$30[rbp-256], rcx

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+128]
	mov	QWORD PTR t_hi$31[rbp-256], r10
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+128], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+136]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$32[rbp-256], rcx

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+136]
	mov	QWORD PTR t_hi$33[rbp-256], r8
	adcx	r10, r14
	add	rcx, r8
	mov	QWORD PTR t_lo$34[rbp-256], rcx
	adcx	r10, r14
	mov	QWORD PTR t_hi$35[rbp-256], r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+136], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+144]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+144]
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+144], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+152]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$36[rbp-256], rcx
	mov	QWORD PTR t_hi$37[rbp-256], r8

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+152]
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+152], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+160]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$38[rbp-256], rcx
	mov	QWORD PTR t_hi$39[rbp-256], r10

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+160]
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+160], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+168]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$40[rbp-256], rcx
	mov	QWORD PTR t_hi$41[rbp-256], r8

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+168]
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+168], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+176]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$42[rbp-256], rcx

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+176]
	mov	QWORD PTR t_hi$43[rbp-256], r10
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+176], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+184]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$44[rbp-256], rcx
	mov	QWORD PTR t_hi$45[rbp-256], r8

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+184]
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+184], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+192]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$46[rbp-256], rcx

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+192]
	mov	QWORD PTR t_hi$47[rbp-256], r10
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+192], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+200]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$48[rbp-256], rcx

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+200]
	mov	QWORD PTR t_hi$49[rbp-256], r8
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+200], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+208]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$50[rbp-256], rcx

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+208]
	mov	QWORD PTR t_hi$51[rbp-256], r10
	adcx	r8, r14
	add	rcx, r10
	mov	QWORD PTR t_lo$52[rbp-256], rcx
	adcx	r8, r14
	mov	QWORD PTR t_hi$53[rbp-256], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+208], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+216]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+216]
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+216], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+224]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$54[rbp-256], rcx

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+224]
	mov	QWORD PTR t_hi$55[rbp-256], r10
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+224], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+232]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$56[rbp-256], rcx

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+232]
	mov	QWORD PTR t_hi$57[rbp-256], r8
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+232], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+240]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$58[rbp-256], rcx

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+240]
	mov	QWORD PTR t_hi$59[rbp-256], r10
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+240], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+248]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$60[rbp-256], rcx

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+248]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 358  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$61[rbp-256], r8
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+248], rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 257  :         up += 32;

	add	r11, 256				; 00000100H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR t_lo$62[rbp-256], rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 258  :         wp += 32;

	add	r9, 256					; 00000100H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$63[rbp-256], r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 358  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	lock xadd DWORD PTR statistics_info, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 223  :     while (count != 0)

	sub	rsi, 1
	jne	$LL2@Multiply_W
$LN3@Multiply_W:

; 259  :         --count;
; 260  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 261  :         if (sizeof(k) == sizeof(_UINT32_T))
; 262  :             AddToMULTI32Counter(32);
; 263  :         else
; 264  :             AddToMULTI64Counter(32);
; 265  : #endif
; 266  :     }
; 267  : 
; 268  :     if (u_count & 0x10)

	test	dil, 16
	je	$LN605@Multiply_W

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mov	rdx, rbx
	mulx	r8, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9]
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$64[rbp-256], rcx
	mov	QWORD PTR t_hi$65[rbp-256], r8

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+8]
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+8], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$66[rbp-256], rcx
	mov	QWORD PTR t_hi$67[rbp-256], r10

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+16]
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+16], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$68[rbp-256], rcx
	mov	QWORD PTR t_hi$69[rbp-256], r8

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+24]
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+24], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$70[rbp-256], rcx

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+32]
	mov	QWORD PTR t_hi$71[rbp-256], r10
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+32], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$72[rbp-256], rcx
	mov	QWORD PTR t_hi$73[rbp-256], r8

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+40]
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+40], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$74[rbp-256], rcx

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+48]
	mov	QWORD PTR t_hi$75[rbp-256], r10
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+48], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$76[rbp-256], rcx

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+56]
	mov	QWORD PTR t_hi$77[rbp-256], r8
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+56], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$78[rbp-256], rcx

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+64]
	mov	QWORD PTR t_hi$79[rbp-256], r10
	adcx	r8, r14
	add	rcx, r10
	mov	QWORD PTR t_lo$80[rbp-256], rcx
	adcx	r8, r14
	mov	QWORD PTR t_hi$81[rbp-256], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+64], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+72]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+72]
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+72], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+80]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$82[rbp-256], rcx
	mov	QWORD PTR t_hi$83[rbp-256], r10

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+80]
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+80], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+88]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$84[rbp-256], rcx

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+88]
	mov	QWORD PTR t_hi$85[rbp-256], r8
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+88], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+96]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$86[rbp-256], rcx

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+96]
	mov	QWORD PTR t_hi$87[rbp-256], r10
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+96], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+104]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$88[rbp-256], rcx

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+104]
	mov	QWORD PTR t_hi$89[rbp-256], r8
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+104], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+112]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$90[rbp-256], rcx

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+112]
	mov	QWORD PTR t_hi$91[rbp-256], r10
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+112], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$92[rbp-256], rcx

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+120]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 358  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, 16
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$93[rbp-256], r8
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+120], rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 286  :         up += 16;

	sub	r11, -128				; ffffffffffffff80H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR t_lo$94[rbp-256], rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 287  :         wp += 16;

	sub	r9, -128				; ffffffffffffff80H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$95[rbp-256], r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 358  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	lock xadd DWORD PTR statistics_info, eax
$LN605@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 296  :     if (u_count & 0x8)

	test	dil, 8
	je	$LN705@Multiply_W

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mov	rdx, rbx
	mulx	r8, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9]
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$96[rbp-256], rcx

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+8]
	mov	QWORD PTR t_hi$97[rbp-256], r8
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+8], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$98[rbp-256], rcx
	mov	QWORD PTR t_hi$99[rbp-256], r10

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+16]
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+16], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$100[rbp-256], rcx

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+24]
	mov	QWORD PTR t_hi$101[rbp-256], r8
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+24], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+32]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$102[rbp-256], rcx

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+32]
	mov	QWORD PTR t_hi$103[rbp-256], r10
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+32], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+40]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$104[rbp-256], rcx

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+40]
	mov	QWORD PTR t_hi$105[rbp-256], r8
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+40], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+48]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$106[rbp-256], rcx

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+48]
	mov	QWORD PTR t_hi$107[rbp-256], r10
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+48], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$108[rbp-256], rcx

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+56]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 358  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$109[rbp-256], r8
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+56], rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 306  :         up += 8;

	add	r11, 64					; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR t_lo$110[rbp-256], rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 307  :         wp += 8;

	add	r9, 64					; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$111[rbp-256], r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 358  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	lock xadd DWORD PTR statistics_info, eax
$LN705@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 316  :     if (u_count & 0x4)

	test	dil, 4
	je	$LN757@Multiply_W

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mov	rdx, rbx
	mulx	r8, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9]
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$112[rbp-256], rcx

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+8]
	mov	QWORD PTR t_hi$113[rbp-256], r8
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+8], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+16]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_lo$114[rbp-256], rcx

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r8, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+16]
	mov	QWORD PTR t_hi$115[rbp-256], r10
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+16], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$116[rbp-256], rcx

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+24]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 358  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, 4
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$117[rbp-256], r8
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+24], rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 322  :         up += 4;

	add	r11, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR t_lo$118[rbp-256], rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 323  :         wp += 4;

	add	r9, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$119[rbp-256], r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 358  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	lock xadd DWORD PTR statistics_info, eax
$LN757@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 332  :     if (u_count & 0x2)

	test	dil, 2
	je	SHORT $LN785@Multiply_W

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mov	rdx, rbx
	mulx	r8, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9]
	adcx	r8, r14
	add	rcx, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9], rcx

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r8, r14
	mov	QWORD PTR t_lo$120[rbp-256], rcx

; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	r10, rcx, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	rcx, QWORD PTR [r9+8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 358  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, 2
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$121[rbp-256], r8
	adcx	r10, r14
	add	rcx, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9+8], rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 336  :         up += 2;

	add	r11, 16
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR t_lo$122[rbp-256], rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 337  :         wp += 2;

	add	r9, 16
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$123[rbp-256], r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 358  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	lock xadd DWORD PTR statistics_info, eax
$LN785@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 346  :     if (u_count & 0x1)

	test	dil, 1
	je	SHORT $LN801@Multiply_W

; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [r11]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mov	rdx, rbx
	mulx	rcx, r8, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, QWORD PTR [r9]
	adcx	rcx, r14
	add	r8, r10
	mov	r10, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	r10, r14
	mov	QWORD PTR t_hi$125[rbp-256], r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 350  :         wp += 1;

	add	r9, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	mov	QWORD PTR t_lo$124[rbp-256], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 335  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI64);

	lock inc DWORD PTR statistics_info
$LN801@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 359  :     if (k != 0)

	xor	eax, eax
	test	r10, r10
	je	SHORT $LN21@Multiply_W

; 360  :         *wp = k;

	mov	QWORD PTR [r9], r10
$LN21@Multiply_W:

; 361  : 
; 362  :     return (PMC_STATUS_OK);
; 363  : }

	lea	r11, QWORD PTR [rsp+1008]
	mov	rbx, QWORD PTR [r11+32]
	mov	rsi, QWORD PTR [r11+48]
	mov	rsp, r11
	pop	r14
	pop	rdi
	pop	rbp
	ret	0
Multiply_WORD_using_MULX_ADCX ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
;	COMDAT Multiply_WORD_using_MUL_ADC
_TEXT	SEGMENT
t_hi$1 = 0
t_lo$2 = 8
t_hi$3 = 16
t_lo$4 = 24
t_hi$5 = 32
t_lo$6 = 40
t_hi$7 = 48
t_lo$8 = 56
t_hi$9 = 64
t_lo$10 = 72
t_hi$11 = 80
t_lo$12 = 88
t_hi$13 = 96
t_lo$14 = 104
t_hi$15 = 112
t_lo$16 = 120
t_hi$17 = 128
t_lo$18 = 136
t_hi$19 = 144
t_lo$20 = 152
t_hi$21 = 160
t_lo$22 = 168
t_hi$23 = 176
t_lo$24 = 184
t_hi$25 = 192
t_lo$26 = 200
t_hi$27 = 208
t_lo$28 = 216
t_hi$29 = 224
t_lo$30 = 232
t_hi$31 = 240
t_lo$32 = 248
t_hi$33 = 256
t_lo$34 = 264
t_hi$35 = 272
t_lo$36 = 280
t_hi$37 = 288
t_lo$38 = 296
t_hi$39 = 304
t_lo$40 = 312
t_hi$41 = 320
t_lo$42 = 328
t_hi$43 = 336
t_lo$44 = 344
t_hi$45 = 352
t_lo$46 = 360
t_hi$47 = 368
t_lo$48 = 376
t_hi$49 = 384
t_lo$50 = 392
t_hi$51 = 400
t_lo$52 = 408
t_hi$53 = 416
t_lo$54 = 424
t_hi$55 = 432
t_lo$56 = 440
t_hi$57 = 448
t_lo$58 = 456
t_hi$59 = 464
t_lo$60 = 472
t_hi$61 = 480
t_lo$62 = 488
t_hi$63 = 496
t_lo$64 = 504
t_hi$65 = 512
t_lo$66 = 520
t_hi$67 = 528
t_lo$68 = 536
t_hi$69 = 544
t_lo$70 = 552
t_hi$71 = 560
t_lo$72 = 568
t_hi$73 = 576
t_lo$74 = 584
t_hi$75 = 592
t_lo$76 = 600
t_hi$77 = 608
t_lo$78 = 616
t_hi$79 = 624
t_lo$80 = 632
t_hi$81 = 640
t_lo$82 = 648
t_hi$83 = 656
t_lo$84 = 664
t_hi$85 = 672
t_lo$86 = 680
t_hi$87 = 688
t_lo$88 = 696
t_hi$89 = 704
t_lo$90 = 712
t_hi$91 = 720
t_lo$92 = 728
t_hi$93 = 736
t_lo$94 = 744
t_hi$95 = 752
t_lo$96 = 760
t_hi$97 = 768
t_lo$98 = 776
t_hi$99 = 784
t_lo$100 = 792
t_hi$101 = 800
t_lo$102 = 808
t_hi$103 = 816
t_lo$104 = 824
t_hi$105 = 832
t_lo$106 = 840
t_hi$107 = 848
t_lo$108 = 856
t_hi$109 = 864
t_lo$110 = 872
t_hi$111 = 880
t_lo$112 = 888
t_hi$113 = 896
t_lo$114 = 904
t_hi$115 = 912
t_lo$116 = 920
t_hi$117 = 928
t_lo$118 = 936
t_hi$119 = 944
t_lo$120 = 952
t_hi$121 = 960
t_lo$122 = 968
t_hi$123 = 976
t_lo$124 = 984
t_hi$125 = 992
up$ = 1024
t_lo$126 = 1032
u_count$ = 1032
v$ = 1040
wp$ = 1048
Multiply_WORD_using_MUL_ADC PROC			; COMDAT

; 72   : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	rbp
	lea	rbp, QWORD PTR [rsp-752]
	sub	rsp, 1008				; 000003f0H

; 73   :     __UNIT_TYPE k = 0;
; 74   :     __UNIT_TYPE count = u_count >> 5;

	mov	rsi, rdx
	xor	r10d, r10d
	shr	rsi, 5
	mov	rbx, r8
	mov	rdi, rdx
	mov	r11, rcx

; 76   :     while (count != 0)

	test	rsi, rsi
	je	$LN3@Multiply_W
	npad	5
$LL2@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9]

; 309  :         return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$126[rbp-256], rax
	mov	QWORD PTR t_hi$1[rsp], rcx

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+8]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+8]

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+8], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$2[rsp], rax
	mov	QWORD PTR t_hi$3[rsp], r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+16]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+16]

; 309  :         return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+16], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$4[rsp], rax
	mov	QWORD PTR t_hi$5[rsp], rcx

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+24]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+24]

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+24], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$6[rsp], rax
	mov	QWORD PTR t_hi$7[rsp], r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+32]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+32]

; 309  :         return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+32], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$8[rsp], rax
	mov	QWORD PTR t_hi$9[rsp], rcx

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+40]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+40]

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+40], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$10[rsp], rax
	mov	QWORD PTR t_hi$11[rsp], r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+48]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+48]

; 309  :         return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+48], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$12[rsp], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$13[rsp], rcx

; 309  :         return (_umul128(u, v, w_hi));

	mul	QWORD PTR [r11+56]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+56]

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
	mov	QWORD PTR t_lo$14[rsp], rax
	adc	r8, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+56], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$15[rsp], r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+64]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+64]

; 309  :         return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+64], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$16[rsp], rax
	mov	QWORD PTR t_hi$17[rbp-256], rcx

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+72]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+72]

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+72], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$18[rbp-256], rax
	mov	QWORD PTR t_hi$19[rbp-256], r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+80]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+80]

; 309  :         return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+80], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$20[rbp-256], rax
	mov	QWORD PTR t_hi$21[rbp-256], rcx

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+88]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+88]

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+88], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$22[rbp-256], rax
	mov	QWORD PTR t_hi$23[rbp-256], r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+96]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+96]

; 309  :         return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+96], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$24[rbp-256], rax
	mov	QWORD PTR t_hi$25[rbp-256], rcx

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+104]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+104]

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+104], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$26[rbp-256], rax
	mov	QWORD PTR t_hi$27[rbp-256], r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+112]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+112]

; 309  :         return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+112], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$28[rbp-256], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$29[rbp-256], rcx

; 309  :         return (_umul128(u, v, w_hi));

	mul	QWORD PTR [r11+120]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+120]

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
	mov	QWORD PTR t_lo$30[rbp-256], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+120], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$31[rbp-256], r8

; 309  :         return (_umul128(u, v, w_hi));

	mul	QWORD PTR [r11+128]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+128]

; 309  :         return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+128], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$32[rbp-256], rax
	mov	QWORD PTR t_hi$33[rbp-256], rcx

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+136]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+136]

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+136], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$34[rbp-256], rax
	mov	QWORD PTR t_hi$35[rbp-256], r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+144]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+144]

; 309  :         return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+144], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$36[rbp-256], rax
	mov	QWORD PTR t_hi$37[rbp-256], rcx

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+152]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+152]

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+152], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$38[rbp-256], rax
	mov	QWORD PTR t_hi$39[rbp-256], r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+160]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+160]

; 309  :         return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+160], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$40[rbp-256], rax
	mov	QWORD PTR t_hi$41[rbp-256], rcx

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+168]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+168]

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+168], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$42[rbp-256], rax
	mov	QWORD PTR t_hi$43[rbp-256], r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+176]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+176]

; 309  :         return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+176], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$44[rbp-256], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$45[rbp-256], rcx

; 309  :         return (_umul128(u, v, w_hi));

	mul	QWORD PTR [r11+184]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+184]

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
	mov	QWORD PTR t_lo$46[rbp-256], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+184], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$47[rbp-256], r8

; 309  :         return (_umul128(u, v, w_hi));

	mul	QWORD PTR [r11+192]
	mov	rcx, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+192]
	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+192], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$48[rbp-256], rax
	mov	QWORD PTR t_hi$49[rbp-256], rcx

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+200]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+200]

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+200], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$50[rbp-256], rax
	mov	QWORD PTR t_hi$51[rbp-256], r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+208]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+208]

; 309  :         return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+208], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$52[rbp-256], rax
	mov	QWORD PTR t_hi$53[rbp-256], rcx

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+216]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+216]

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+216], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$54[rbp-256], rax
	mov	QWORD PTR t_hi$55[rbp-256], r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+224]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+224]

; 309  :         return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+224], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$56[rbp-256], rax
	mov	QWORD PTR t_hi$57[rbp-256], rcx

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+232]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+232]

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+232], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$58[rbp-256], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$59[rbp-256], r8

; 309  :         return (_umul128(u, v, w_hi));

	mul	QWORD PTR [r11+240]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+240]

; 309  :         return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+240], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$60[rbp-256], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$61[rbp-256], rcx

; 309  :         return (_umul128(u, v, w_hi));

	mul	QWORD PTR [r11+248]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+248]

; 309  :         return (_umul128(u, v, w_hi));

	mov	r10, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r10, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+248], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r10, 0
	mov	QWORD PTR t_lo$62[rbp-256], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 110  :         up += 32;

	add	r11, 256				; 00000100H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$63[rbp-256], r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 111  :         wp += 32;

	add	r9, 256					; 00000100H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 358  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, 32					; 00000020H
	lock xadd DWORD PTR statistics_info, eax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 76   :     while (count != 0)

	sub	rsi, 1
	jne	$LL2@Multiply_W
$LN3@Multiply_W:

; 112  :         --count;
; 113  : #ifdef ENABLED_PERFORMANCE_COUNTER
; 114  :         if (sizeof(k) == sizeof(_UINT32_T))
; 115  :             AddToMULTI32Counter(32);
; 116  :         else
; 117  :             AddToMULTI64Counter(32);
; 118  : #endif
; 119  :     }
; 120  : 
; 121  :     if (u_count & 0x10)

	test	dil, 16
	je	$LN605@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9]

; 309  :         return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$64[rbp-256], rax
	mov	QWORD PTR t_hi$65[rbp-256], rcx

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+8]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+8]

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+8], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$66[rbp-256], rax
	mov	QWORD PTR t_hi$67[rbp-256], r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+16]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+16]

; 309  :         return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+16], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$68[rbp-256], rax
	mov	QWORD PTR t_hi$69[rbp-256], rcx

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+24]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+24]

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+24], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$70[rbp-256], rax
	mov	QWORD PTR t_hi$71[rbp-256], r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+32]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+32]

; 309  :         return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+32], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$72[rbp-256], rax
	mov	QWORD PTR t_hi$73[rbp-256], rcx

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+40]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+40]

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+40], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$74[rbp-256], rax
	mov	QWORD PTR t_hi$75[rbp-256], r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+48]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+48]

; 309  :         return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+48], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$76[rbp-256], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$77[rbp-256], rcx

; 309  :         return (_umul128(u, v, w_hi));

	mul	QWORD PTR [r11+56]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+56]

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
	mov	QWORD PTR t_lo$78[rbp-256], rax
	adc	r8, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+56], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$79[rbp-256], r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+64]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+64]

; 309  :         return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+64], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$80[rbp-256], rax
	mov	QWORD PTR t_hi$81[rbp-256], rcx

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+72]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+72]

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+72], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$82[rbp-256], rax
	mov	QWORD PTR t_hi$83[rbp-256], r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+80]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+80]

; 309  :         return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+80], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$84[rbp-256], rax
	mov	QWORD PTR t_hi$85[rbp-256], rcx

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+88]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+88]

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+88], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$86[rbp-256], rax
	mov	QWORD PTR t_hi$87[rbp-256], r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+96]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+96]

; 309  :         return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+96], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$88[rbp-256], rax
	mov	QWORD PTR t_hi$89[rbp-256], rcx

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+104]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+104]

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+104], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$90[rbp-256], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$91[rbp-256], r8

; 309  :         return (_umul128(u, v, w_hi));

	mul	QWORD PTR [r11+112]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+112]

; 309  :         return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+112], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$92[rbp-256], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$93[rbp-256], rcx

; 309  :         return (_umul128(u, v, w_hi));

	mul	QWORD PTR [r11+120]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+120]

; 309  :         return (_umul128(u, v, w_hi));

	mov	r10, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r10, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+120], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r10, 0
	mov	QWORD PTR t_lo$94[rbp-256], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 139  :         up += 16;

	sub	r11, -128				; ffffffffffffff80H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$95[rbp-256], r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 140  :         wp += 16;

	sub	r9, -128				; ffffffffffffff80H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 358  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, 16
	lock xadd DWORD PTR statistics_info, eax
$LN605@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 149  :     if (u_count & 0x8)

	test	dil, 8
	je	$LN705@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9]

; 309  :         return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$96[rbp-256], rax
	mov	QWORD PTR t_hi$97[rbp-256], rcx

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+8]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+8]

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+8], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$98[rbp-256], rax
	mov	QWORD PTR t_hi$99[rbp-256], r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+16]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+16]

; 309  :         return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+16], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$100[rbp-256], rax
	mov	QWORD PTR t_hi$101[rbp-256], rcx

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+24]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+24]

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+24], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$102[rbp-256], rax
	mov	QWORD PTR t_hi$103[rbp-256], r8

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+32]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+32]

; 309  :         return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+32], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$104[rbp-256], rax
	mov	QWORD PTR t_hi$105[rbp-256], rcx

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+40]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+40]

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+40], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$106[rbp-256], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$107[rbp-256], r8

; 309  :         return (_umul128(u, v, w_hi));

	mul	QWORD PTR [r11+48]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+48]

; 309  :         return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+48], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$108[rbp-256], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$109[rbp-256], rcx

; 309  :         return (_umul128(u, v, w_hi));

	mul	QWORD PTR [r11+56]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+56]

; 309  :         return (_umul128(u, v, w_hi));

	mov	r10, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r10, 0
	add	rax, rcx
	mov	QWORD PTR t_lo$110[rbp-256], rax
	adc	r10, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+56], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$111[rbp-256], r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 159  :         up += 8;

	add	r11, 64					; 00000040H

; 160  :         wp += 8;

	add	r9, 64					; 00000040H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 358  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, 8
	lock xadd DWORD PTR statistics_info, eax
$LN705@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 169  :     if (u_count & 0x4)

	test	dil, 4
	je	$LN757@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9]

; 309  :         return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$112[rbp-256], rax
	mov	QWORD PTR t_hi$113[rbp-256], rcx

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11+8]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+8]

; 309  :         return (_umul128(u, v, w_hi));

	mov	r8, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+8], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r8, 0
	mov	QWORD PTR t_lo$114[rbp-256], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$115[rbp-256], r8

; 309  :         return (_umul128(u, v, w_hi));

	mul	QWORD PTR [r11+16]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+16]

; 309  :         return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+16], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$116[rbp-256], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$117[rbp-256], rcx

; 309  :         return (_umul128(u, v, w_hi));

	mul	QWORD PTR [r11+24]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+24]

; 309  :         return (_umul128(u, v, w_hi));

	mov	r10, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r10, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+24], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r10, 0
	mov	QWORD PTR t_lo$118[rbp-256], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 175  :         up += 4;

	add	r11, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$119[rbp-256], r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 176  :         wp += 4;

	add	r9, 32					; 00000020H
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 358  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, 4
	lock xadd DWORD PTR statistics_info, eax
$LN757@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 185  :     if (u_count & 0x2)

	test	dil, 2
	je	SHORT $LN785@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9]

; 309  :         return (_umul128(u, v, w_hi));

	mov	rcx, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	add	rax, r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rcx, 0
	mov	QWORD PTR t_lo$120[rbp-256], rax

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$121[rbp-256], rcx

; 309  :         return (_umul128(u, v, w_hi));

	mul	QWORD PTR [r11+8]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9+8]

; 309  :         return (_umul128(u, v, w_hi));

	mov	r10, rdx

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r10, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9+8], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r10, 0
	mov	QWORD PTR t_lo$122[rbp-256], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 189  :         up += 2;

	add	r11, 16
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	mov	QWORD PTR t_hi$123[rbp-256], r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 190  :         wp += 2;

	add	r9, 16
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 358  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	mov	eax, 2
	lock xadd DWORD PTR statistics_info, eax
$LN785@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 199  :     if (u_count & 0x1)

	test	dil, 1
	je	SHORT $LN801@Multiply_W
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rbx
	mul	QWORD PTR [r11]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9]
	adc	rdx, 0
	add	rax, r10
	mov	r10, rdx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	r10, 0
	mov	QWORD PTR t_lo$124[rbp-256], rax
	mov	QWORD PTR t_hi$125[rbp-256], r10
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 203  :         wp += 1;

	add	r9, 8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h

; 335  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI64);

	lock inc DWORD PTR statistics_info
$LN801@Multiply_W:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 212  :     if (k != 0)

	xor	eax, eax
	test	r10, r10
	je	SHORT $LN21@Multiply_W

; 213  :         *wp = k;

	mov	QWORD PTR [r9], r10
$LN21@Multiply_W:

; 214  : 
; 215  :     return (PMC_STATUS_OK);
; 216  : }

	lea	r11, QWORD PTR [rsp+1008]
	mov	rbx, QWORD PTR [r11+16]
	mov	rsi, QWORD PTR [r11+32]
	mov	rdi, QWORD PTR [r11+40]
	mov	rsp, r11
	pop	rbp
	ret	0
Multiply_WORD_using_MUL_ADC ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
;	COMDAT _MULTIPLYX_DIGIT_UNIT
_TEXT	SEGMENT
k$ = 8
up$ = 16
v$ = 24
wp$ = 32
_MULTIPLYX_DIGIT_UNIT PROC				; COMDAT

; 61   :     __UNIT_TYPE t_hi;
; 62   :     __UNIT_TYPE t_lo;
; 63   :     t_lo = _MULTIPLYX_UNIT(*up, v, &t_hi);

	mov	rax, QWORD PTR [rdx]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 340  :         return (_mulx_u64(u, v, w_hi));

	mov	rdx, r8
	mulx	rax, r8, rax

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	r8, QWORD PTR [r9]
	mov	edx, 0
	adcx	rax, rdx
	add	r8, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 66   :     *wp = t_lo;

	mov	QWORD PTR [r9], r8
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 245  :         return (_addcarryx_u64(carry, u, v, w));

	adcx	rax, rdx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 69   : }

	ret	0
_MULTIPLYX_DIGIT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
;	COMDAT _MULTIPLY_DIGIT_UNIT
_TEXT	SEGMENT
k$ = 8
up$ = 16
v$ = 24
wp$ = 32
_MULTIPLY_DIGIT_UNIT PROC				; COMDAT
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, r8
	mul	QWORD PTR [rdx]

; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	rax, QWORD PTR [r9]
	adc	rdx, 0
	add	rax, rcx
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 54   :     *wp = t_lo;

	mov	QWORD PTR [r9], rax
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 217  :         return (_addcarry_u64(carry, u, v, w));

	adc	rdx, 0
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c

; 56   :     return (k);

	mov	rax, rdx

; 57   : }

	ret	0
_MULTIPLY_DIGIT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _LZCNT_ALT_UNIT
_TEXT	SEGMENT
x$ = 8
_LZCNT_ALT_UNIT PROC					; COMDAT

; 630  :         if (x == 0)

	test	rcx, rcx
	jne	SHORT $LN2@LZCNT_ALT_

; 631  :             return (sizeof(x) * 8);

	mov	eax, 64					; 00000040H

; 655  :     }

	ret	0
$LN2@LZCNT_ALT_:

; 632  : #ifdef _M_IX86
; 633  :         _UINT32_T pos;
; 634  : #ifdef _MSC_VER
; 635  :         _BitScanReverse(&pos, x);
; 636  : #elif defined(__GNUC__)
; 637  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 638  : #else
; 639  : #error unknown compiler
; 640  : #endif
; 641  : #elif defined(_M_X64)
; 642  : #ifdef _MSC_VER
; 643  :         _UINT32_T pos;
; 644  :         _BitScanReverse64(&pos, x);

	bsr	rcx, rcx

; 645  : #elif defined(__GNUC__)
; 646  :         _UINT64_T pos;
; 647  :         __asm__("bsrq %1, %0" : "=r"(pos) : "rm"(x));
; 648  : #else
; 649  : #error unknown compiler
; 650  : #endif
; 651  : #else
; 652  : #error unknown platform
; 653  : #endif
; 654  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 63					; 0000003fH
	sub	eax, ecx

; 655  :     }

	ret	0
_LZCNT_ALT_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _LZCNT_ALT_32
_TEXT	SEGMENT
x$ = 8
_LZCNT_ALT_32 PROC					; COMDAT

; 597  :         if (x == 0)

	test	ecx, ecx
	jne	SHORT $LN2@LZCNT_ALT_

; 598  :             return (sizeof(x) * 8);

	mov	eax, 32					; 00000020H

; 608  :     }

	ret	0
$LN2@LZCNT_ALT_:

; 599  :         _UINT32_T pos;
; 600  : #ifdef _MSC_VER
; 601  :         _BitScanReverse(&pos, x);

	bsr	ecx, ecx

; 602  : #elif defined(__GNUC__)
; 603  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"(x));
; 604  : #else
; 605  : #error unknown compiler
; 606  : #endif
; 607  :         return (sizeof(x) * 8 - 1 - pos);

	mov	eax, 31
	sub	eax, ecx

; 608  :     }

	ret	0
_LZCNT_ALT_32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _MULTIPLYX_UNIT
_TEXT	SEGMENT
u$ = 8
v$ = 16
w_hi$ = 24
_MULTIPLYX_UNIT PROC					; COMDAT

; 336  : #ifdef _MSC_VER
; 337  : #ifdef _M_IX86
; 338  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));
; 339  : #elif defined(_M_X64)
; 340  :         return (_mulx_u64(u, v, w_hi));

	mulx	rcx, rax, rcx
	mov	QWORD PTR [r8], rcx

; 341  : #else
; 342  : #error unknown platform
; 343  : #endif
; 344  : #elif defined(__GNUC__)
; 345  : #ifdef _M_IX86
; 346  :         _UINT32_T w_lo;
; 347  :         __asm__("mulxl %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 348  :         return (w_lo);
; 349  : #elif defined(_M_X64)
; 350  :         _UINT64_T w_lo;
; 351  :         __asm__("mulxq %3, %0, %1" : "=r"(w_lo), "=r"(*w_hi), "+d"(u) : "rm"(v));
; 352  :         return (w_lo);
; 353  : #else
; 354  : #error unknown platform
; 355  : #endif
; 356  : #else
; 357  : #error unknown compiler
; 358  : #endif
; 359  :     }

	ret	0
_MULTIPLYX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _MULTIPLY_UNIT
_TEXT	SEGMENT
u$ = 8
v$ = 16
w_hi$ = 24
_MULTIPLY_UNIT PROC					; COMDAT

; 298  : #ifdef _M_IX86
; 299  : #ifdef _MSC_VER
; 300  :         return (_FROMDWORDTOWORD((_UINT64_T)u * v, w_hi));
; 301  : #elif defined(__GNUC__)
; 302  :         _UINT32_T w_lo;
; 303  :         __asm__("mull %3": "=a"(w_lo), "=d"(*w_hi) : "0"(u), "rm"(v));
; 304  :         return (w_lo);
; 305  : #else
; 306  : #error unknown compiler
; 307  : #endif
; 308  : #elif defined(_M_X64)
; 309  :         return (_umul128(u, v, w_hi));

	mov	rax, rdx
	mul	rcx
	mov	QWORD PTR [r8], rdx

; 310  : #else
; 311  : #error unknown platform
; 312  : #endif
; 313  :     }

	ret	0
_MULTIPLY_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ADDX_UNIT
_TEXT	SEGMENT
carry$ = 8
u$ = 16
v$ = 24
w$ = 32
_ADDX_UNIT PROC						; COMDAT

; 242  : #ifdef _M_IX86
; 243  :         return (_addcarryx_u32(carry, u, v, w));
; 244  : #elif defined(_M_X64)
; 245  :         return (_addcarryx_u64(carry, u, v, w));

	add	cl, -1
	adcx	rdx, r8
	mov	QWORD PTR [r9], rdx
	setb	al

; 246  : #else
; 247  : #error unknown platform
; 248  : #endif
; 249  :     }

	ret	0
_ADDX_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _ADD_UNIT
_TEXT	SEGMENT
carry$ = 8
u$ = 16
v$ = 24
w$ = 32
_ADD_UNIT PROC						; COMDAT

; 214  : #ifdef _M_IX86
; 215  :         return (_addcarry_u32(carry, u, v, w));
; 216  : #elif defined(_M_X64)
; 217  :         return (_addcarry_u64(carry, u, v, w));

	add	cl, -1
	adc	rdx, r8
	mov	QWORD PTR [r9], rdx
	setb	al

; 218  : #else
; 219  : #error unknown platform
; 220  : #endif
; 221  :     }

	ret	0
_ADD_UNIT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _FROMDWORDTOWORD
_TEXT	SEGMENT
value$ = 8
result_high$ = 16
_FROMDWORDTOWORD PROC					; COMDAT

; 183  :         *result_high = (_UINT32_T)(value >> 32);

	mov	rax, rcx
	shr	rax, 32					; 00000020H
	mov	DWORD PTR [rdx], eax

; 184  :         return ((_UINT32_T)value);

	mov	eax, ecx

; 185  :     }

	ret	0
_FROMDWORDTOWORD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT AddToMULTI64Counter
_TEXT	SEGMENT
value$ = 8
AddToMULTI64Counter PROC				; COMDAT

; 358  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI64, value);

	lock xadd DWORD PTR statistics_info, ecx

; 359  :     }

	ret	0
AddToMULTI64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT AddToMULTI32Counter
_TEXT	SEGMENT
value$ = 8
AddToMULTI32Counter PROC				; COMDAT

; 352  :         _InterlockedExchangeAdd(&statistics_info.COUNT_MULTI32, value);

	lock xadd DWORD PTR statistics_info+4, ecx

; 353  :     }

	ret	0
AddToMULTI32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT IncrementMULTI64Counter
_TEXT	SEGMENT
IncrementMULTI64Counter PROC				; COMDAT

; 335  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI64);

	lock inc DWORD PTR statistics_info

; 336  :     }

	ret	0
IncrementMULTI64Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_uint_internal.h
;	COMDAT IncrementMULTI32Counter
_TEXT	SEGMENT
IncrementMULTI32Counter PROC				; COMDAT

; 329  :         _InterlockedIncrement(&statistics_info.COUNT_MULTI32);

	lock inc DWORD PTR statistics_info+4

; 330  :     }

	ret	0
IncrementMULTI32Counter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
;	COMDAT PMC_Multiply_X_X
_TEXT	SEGMENT
nw$ = 64
u$ = 64
v$ = 72
w$ = 80
w_light_check_code$1 = 88
PMC_Multiply_X_X PROC					; COMDAT

; 705  : {

$LN27:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, r8
	mov	rdi, rdx
	mov	rsi, rcx

; 706  :     if (u == NULL)

	test	rcx, rcx
	je	$LN22@PMC_Multip

; 707  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 708  :     if (v == NULL)

	test	rdx, rdx
	je	$LN22@PMC_Multip

; 709  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 710  :     if (w == NULL)

	test	rbx, rbx
	je	$LN22@PMC_Multip

; 712  :     NUMBER_HEADER* nu = (NUMBER_HEADER*)u;
; 713  :     NUMBER_HEADER* nv = (NUMBER_HEADER*)v;
; 714  :     PMC_STATUS_CODE result;
; 715  :     if ((result = CheckNumber(nu)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	$LN1@PMC_Multip

; 716  :         return (result);
; 717  :     if ((result = CheckNumber(nv)) != PMC_STATUS_OK)

	mov	rcx, rdi
	call	CheckNumber
	test	eax, eax
	jne	$LN1@PMC_Multip

; 718  :         return (result);
; 719  :     NUMBER_HEADER* nw;
; 720  :     if (nu->IS_ZERO)

	mov	ecx, DWORD PTR [rsi+40]
	test	cl, 2
	jne	SHORT $LN25@PMC_Multip

; 721  :     {
; 722  :         // x が 0 である場合
; 723  : 
; 724  :         // y の値にかかわらず 0 を返す。
; 725  :         *w = &number_zero;
; 726  :     }
; 727  :     else if (nu->IS_ONE)

	mov	edx, DWORD PTR [rdi+40]
	mov	eax, edx
	and	eax, 2
	test	cl, 4
	je	SHORT $LN9@PMC_Multip

; 728  :     {
; 729  :         // x が 1 である場合
; 730  :         if (nv->IS_ZERO)

	test	eax, eax
	jne	SHORT $LN25@PMC_Multip

; 731  :         {
; 732  :             // y が 0 である場合
; 733  : 
; 734  :             //  0  を返す。
; 735  :             *w = &number_zero;
; 736  :         }
; 737  :         else
; 738  :         {
; 739  :             // y が 0 ではない場合
; 740  : 
; 741  :             // 乗算結果は y に等しいため、y の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 742  :             if ((result = DuplicateNumber(nv, &nw)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR nw$[rsp]
	mov	rcx, rdi
	call	DuplicateNumber
	test	eax, eax
	jne	$LN1@PMC_Multip

; 781  :         }
; 782  :         *w = nw;
; 783  :     }
; 784  : #ifdef _DEBUG
; 785  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 786  :         return (result);
; 787  : #endif
; 788  :     return (PMC_STATUS_OK);

	mov	rax, QWORD PTR nw$[rsp]
	mov	QWORD PTR [rbx], rax
	xor	eax, eax

; 789  : }

	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN9@PMC_Multip:

; 743  :                 return (result);
; 744  :             *w = nw;
; 745  :         }
; 746  :     }
; 747  :     else
; 748  :     {
; 749  :         // x が 0 と 1 のどちらでもない場合
; 750  : 
; 751  :         if (nv->IS_ZERO)

	test	eax, eax
	je	SHORT $LN14@PMC_Multip
$LN25@PMC_Multip:

; 781  :         }
; 782  :         *w = nw;
; 783  :     }
; 784  : #ifdef _DEBUG
; 785  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 786  :         return (result);
; 787  : #endif
; 788  :     return (PMC_STATUS_OK);

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR [rbx], rax
	xor	eax, eax

; 789  : }

	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN14@PMC_Multip:

; 752  :         {
; 753  :             // y が 0 である場合
; 754  : 
; 755  :             //  0  を返す。
; 756  :             nw = &number_zero;
; 757  :         }
; 758  :         else if (nv->IS_ONE)

	test	dl, 4
	je	SHORT $LN16@PMC_Multip

; 759  :         {
; 760  :             // y が 1 である場合
; 761  : 
; 762  :             // 乗算結果は x に等しいため、x の値を持つ NUMBER_HEADER 構造体を獲得し、呼び出し元へ返す。
; 763  :             if ((result = DuplicateNumber(nu, &nw)) != PMC_STATUS_OK)

	lea	rdx, QWORD PTR nw$[rsp]
	mov	rcx, rsi
	call	DuplicateNumber
	test	eax, eax
	jne	$LN1@PMC_Multip

; 781  :         }
; 782  :         *w = nw;
; 783  :     }
; 784  : #ifdef _DEBUG
; 785  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 786  :         return (result);
; 787  : #endif
; 788  :     return (PMC_STATUS_OK);

	mov	rax, QWORD PTR nw$[rsp]
	mov	QWORD PTR [rbx], rax
	xor	eax, eax

; 789  : }

	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN16@PMC_Multip:

; 764  :                 return (result);
; 765  :         }
; 766  :         else
; 767  :         {
; 768  :             // x と y がともに 0 、1 のどちらでもない場合
; 769  : 
; 770  :             // x と y の積を計算する
; 771  :             __UNIT_TYPE u_bit_count = nu->UNIT_BIT_COUNT;
; 772  :             __UNIT_TYPE v_bit_count = nv->UNIT_BIT_COUNT;
; 773  :             __UNIT_TYPE w_bit_count = u_bit_count + v_bit_count;

	mov	rdx, QWORD PTR [rsi+16]

; 774  :             __UNIT_TYPE w_light_check_code;
; 775  :             if ((result = AllocateNumber(&nw, w_bit_count, &w_light_check_code)) != PMC_STATUS_OK)

	lea	r8, QWORD PTR w_light_check_code$1[rsp]
	add	rdx, QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR nw$[rsp]
	call	AllocateNumber
	test	eax, eax
	jne	SHORT $LN1@PMC_Multip

; 776  :                 return (result);
; 777  :             (*fp_Multiply_X_X)(nu->BLOCK, nu->UNIT_WORD_COUNT, nv->BLOCK, nv->UNIT_WORD_COUNT, nw->BLOCK);

	mov	rax, QWORD PTR nw$[rsp]
	mov	r9, QWORD PTR [rdi+8]
	mov	r8, QWORD PTR [rdi+56]
	mov	rdx, QWORD PTR [rsi+8]
	mov	rcx, QWORD PTR [rax+56]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR [rsi+56]
	call	QWORD PTR fp_Multiply_X_X

; 778  :             if ((result = CheckBlockLight(nw->BLOCK, w_light_check_code)) != PMC_STATUS_OK)

	mov	rcx, QWORD PTR nw$[rsp]
	mov	rdx, QWORD PTR w_light_check_code$1[rsp]
	mov	rcx, QWORD PTR [rcx+56]
	call	CheckBlockLight
	test	eax, eax
	jne	SHORT $LN1@PMC_Multip

; 779  :                 return (result);
; 780  :             CommitNumber(nw);

	mov	rcx, QWORD PTR nw$[rsp]
	call	CommitNumber

; 781  :         }
; 782  :         *w = nw;
; 783  :     }
; 784  : #ifdef _DEBUG
; 785  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 786  :         return (result);
; 787  : #endif
; 788  :     return (PMC_STATUS_OK);

	mov	rax, QWORD PTR nw$[rsp]
	mov	QWORD PTR [rbx], rax
	xor	eax, eax

; 789  : }

	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN22@PMC_Multip:

; 711  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN1@PMC_Multip:

; 789  : }

	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
PMC_Multiply_X_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
;	COMDAT PMC_Multiply_X_L
_TEXT	SEGMENT
u$ = 48
v$ = 56
w$ = 64
PMC_Multiply_X_L PROC					; COMDAT

; 682  : {

$LN10:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, r8
	mov	rsi, rdx
	mov	rbx, rcx

; 683  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(v) * 8)
; 684  :     {
; 685  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 686  :         return (PMC_STATUS_INTERNAL_ERROR);
; 687  :     }
; 688  :     if (u == NULL)

	test	rcx, rcx
	je	SHORT $LN8@PMC_Multip

; 689  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 690  :     if (w == NULL)

	test	r8, r8
	je	SHORT $LN8@PMC_Multip

; 692  :     PMC_STATUS_CODE result;
; 693  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN6@PMC_Multip

; 694  :         return (result);
; 695  :     if ((result = PMC_Multiply_X_L_Imp((NUMBER_HEADER*)u, v, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	r8, rdi
	mov	rdx, rsi
	mov	rcx, rbx

; 696  :         return (result);
; 697  : #ifdef _DEBUG
; 698  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 699  :         return (result);
; 700  : #endif
; 701  :     return (PMC_STATUS_OK);
; 702  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi

; 694  :         return (result);
; 695  :     if ((result = PMC_Multiply_X_L_Imp((NUMBER_HEADER*)u, v, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	jmp	PMC_Multiply_X_L_Imp
$LN8@PMC_Multip:

; 691  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN6@PMC_Multip:

; 696  :         return (result);
; 697  : #ifdef _DEBUG
; 698  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 699  :         return (result);
; 700  : #endif
; 701  :     return (PMC_STATUS_OK);
; 702  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_Multiply_X_L ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
;	COMDAT PMC_Multiply_X_I
_TEXT	SEGMENT
u$ = 48
v$ = 56
w$ = 64
PMC_Multiply_X_I PROC					; COMDAT

; 530  : {

$LN10:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, r8
	mov	esi, edx
	mov	rbx, rcx

; 531  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(v) * 8)
; 532  :     {
; 533  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 534  :         return (PMC_STATUS_INTERNAL_ERROR);
; 535  :     }
; 536  :     if (u == NULL)

	test	rcx, rcx
	je	SHORT $LN8@PMC_Multip

; 537  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 538  :     if (w == NULL)

	test	r8, r8
	je	SHORT $LN8@PMC_Multip

; 540  :     PMC_STATUS_CODE result;
; 541  :     if ((result = CheckNumber((NUMBER_HEADER*)u)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN6@PMC_Multip

; 542  :         return (result);
; 543  :     if ((result = PMC_Multiply_X_I_Imp((NUMBER_HEADER*)u, v, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	r8, rdi
	mov	edx, esi
	mov	rcx, rbx

; 544  :         return (result);
; 545  : #ifdef _DEBUG
; 546  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 547  :         return (result);
; 548  : #endif
; 549  :     return (PMC_STATUS_OK);
; 550  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi

; 542  :         return (result);
; 543  :     if ((result = PMC_Multiply_X_I_Imp((NUMBER_HEADER*)u, v, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	jmp	PMC_Multiply_X_I_Imp
$LN8@PMC_Multip:

; 539  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN6@PMC_Multip:

; 544  :         return (result);
; 545  : #ifdef _DEBUG
; 546  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 547  :         return (result);
; 548  : #endif
; 549  :     return (PMC_STATUS_OK);
; 550  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_Multiply_X_I ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
;	COMDAT PMC_Multiply_L_X
_TEXT	SEGMENT
u$ = 48
v$ = 56
w$ = 64
PMC_Multiply_L_X PROC					; COMDAT

; 659  : {

$LN10:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, r8
	mov	rbx, rdx
	mov	rsi, rcx

; 660  :     if (__UNIT_TYPE_BIT_COUNT * 2 < sizeof(u) * 8)
; 661  :     {
; 662  :         // _UINT64_T が 2 ワードで表現しきれない処理系には対応しない
; 663  :         return (PMC_STATUS_INTERNAL_ERROR);
; 664  :     }
; 665  :     if (v == NULL)

	test	rdx, rdx
	je	SHORT $LN8@PMC_Multip

; 666  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 667  :     if (w == NULL)

	test	r8, r8
	je	SHORT $LN8@PMC_Multip

; 669  :     PMC_STATUS_CODE result;
; 670  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	mov	rcx, rdx
	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN6@PMC_Multip

; 671  :         return (result);
; 672  :     if ((result = PMC_Multiply_X_L_Imp((NUMBER_HEADER*)v, u, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	r8, rdi
	mov	rdx, rsi
	mov	rcx, rbx

; 673  :         return (result);
; 674  : #ifdef _DEBUG
; 675  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 676  :         return (result);
; 677  : #endif
; 678  :     return (PMC_STATUS_OK);
; 679  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi

; 671  :         return (result);
; 672  :     if ((result = PMC_Multiply_X_L_Imp((NUMBER_HEADER*)v, u, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	jmp	PMC_Multiply_X_L_Imp
$LN8@PMC_Multip:

; 668  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN6@PMC_Multip:

; 673  :         return (result);
; 674  : #ifdef _DEBUG
; 675  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 676  :         return (result);
; 677  : #endif
; 678  :     return (PMC_STATUS_OK);
; 679  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_Multiply_L_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
;	COMDAT PMC_Multiply_I_X
_TEXT	SEGMENT
u$ = 48
v$ = 56
w$ = 64
PMC_Multiply_I_X PROC					; COMDAT

; 507  : {

$LN10:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, r8
	mov	rbx, rdx
	mov	esi, ecx

; 508  :     if (__UNIT_TYPE_BIT_COUNT < sizeof(u) * 8)
; 509  :     {
; 510  :         // _UINT32_T が 1 ワードで表現しきれない処理系には対応しない
; 511  :         return (PMC_STATUS_INTERNAL_ERROR);
; 512  :     }
; 513  :     if (v == NULL)

	test	rdx, rdx
	je	SHORT $LN8@PMC_Multip

; 514  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 515  :     if (w == NULL)

	test	r8, r8
	je	SHORT $LN8@PMC_Multip

; 517  :     PMC_STATUS_CODE result;
; 518  :     if ((result = CheckNumber((NUMBER_HEADER*)v)) != PMC_STATUS_OK)

	mov	rcx, rdx
	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN6@PMC_Multip

; 519  :         return (result);
; 520  :     if ((result = PMC_Multiply_X_I_Imp((NUMBER_HEADER*)v, u, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	mov	r8, rdi
	mov	edx, esi
	mov	rcx, rbx

; 521  :         return (result);
; 522  : #ifdef _DEBUG
; 523  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 524  :         return (result);
; 525  : #endif
; 526  :     return (PMC_STATUS_OK);
; 527  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi

; 519  :         return (result);
; 520  :     if ((result = PMC_Multiply_X_I_Imp((NUMBER_HEADER*)v, u, (NUMBER_HEADER**)w)) != PMC_STATUS_OK)

	jmp	PMC_Multiply_X_I_Imp
$LN8@PMC_Multip:

; 516  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN6@PMC_Multip:

; 521  :         return (result);
; 522  : #ifdef _DEBUG
; 523  :     if ((result = CheckNumber(*w)) != PMC_STATUS_OK)
; 524  :         return (result);
; 525  : #endif
; 526  :     return (PMC_STATUS_OK);
; 527  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_Multiply_I_X ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
;	COMDAT Initialize_Multiply
_TEXT	SEGMENT
feature$ = 8
Initialize_Multiply PROC				; COMDAT

; 792  : {

	mov	edx, DWORD PTR [rcx]

; 793  :     if (feature->PROCESSOR_FEATURE_ADX && feature->PROCESSOR_FEATURE_BMI2)
; 794  :     {
; 795  :         fp_Multiply_X_1W = Multiply_X_1W_using_MULX_ADCX;
; 796  :         fp_Multiply_X_2W = Multiply_X_2W_using_MULX_ADCX;
; 797  :         fp_Multiply_X_X = Multiply_X_X_using_MULX_ADCX;
; 798  :     }
; 799  :     else
; 800  :     {
; 801  :         fp_Multiply_X_1W = Multiply_X_1W_using_MUL_ADC;
; 802  :         fp_Multiply_X_2W = Multiply_X_2W_using_MUL_ADC;
; 803  :         fp_Multiply_X_X = Multiply_X_X_using_MUL_ADC;
; 804  :     }
; 805  :     return (PMC_STATUS_OK);

	lea	rax, OFFSET FLAT:Multiply_X_1W_using_MULX_ADCX
	lea	rcx, OFFSET FLAT:Multiply_X_1W_using_MUL_ADC
	and	edx, 10
	cmp	edx, 10
	cmovne	rax, rcx
	lea	rcx, OFFSET FLAT:Multiply_X_2W_using_MUL_ADC
	mov	QWORD PTR fp_Multiply_X_1W, rax
	lea	rax, OFFSET FLAT:Multiply_X_2W_using_MULX_ADCX
	cmovne	rax, rcx
	lea	rcx, OFFSET FLAT:Multiply_X_X_using_MUL_ADC
	mov	QWORD PTR fp_Multiply_X_2W, rax
	lea	rax, OFFSET FLAT:Multiply_X_X_using_MULX_ADCX
	cmovne	rax, rcx
	mov	QWORD PTR fp_Multiply_X_X, rax
	xor	eax, eax

; 806  : }

	ret	0
Initialize_Multiply ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_multiply.c
;	COMDAT Multiply_X_X_Imp
_TEXT	SEGMENT
u$ = 8
u_count$ = 16
v$ = 24
v_count$ = 32
w$ = 40
Multiply_X_X_Imp PROC					; COMDAT

; 44   :     (*fp_Multiply_X_X)(u, u_count,  v,  v_count,  w);

	rex_jmp	QWORD PTR fp_Multiply_X_X
Multiply_X_X_Imp ENDP
_TEXT	ENDS
END
