; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	PMC_FromByteArray
PUBLIC	PMC_ToByteArray
PUBLIC	PMC_FromByteArrayForSINT
PUBLIC	PMC_ToByteArrayForSINT
EXTRN	AllocateNumber:PROC
EXTRN	CommitNumber:PROC
EXTRN	CheckNumber:PROC
EXTRN	number_zero:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_FromByteArray DD imagerel $LN21
	DD	imagerel $LN21+210
	DD	imagerel $unwind$PMC_FromByteArray
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_ToByteArray DD imagerel $LN16
	DD	imagerel $LN16+164
	DD	imagerel $unwind$PMC_ToByteArray
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_FromByteArrayForSINT DD imagerel $LN23
	DD	imagerel $LN23+220
	DD	imagerel $unwind$PMC_FromByteArrayForSINT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_ToByteArrayForSINT DD imagerel $LN30
	DD	imagerel $LN30+62
	DD	imagerel $unwind$PMC_ToByteArrayForSINT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PMC_ToByteArrayForSINT DD imagerel $LN30+62
	DD	imagerel $LN30+194
	DD	imagerel $chain$0$PMC_ToByteArrayForSINT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$PMC_ToByteArrayForSINT DD imagerel $LN30+194
	DD	imagerel $LN30+216
	DD	imagerel $chain$1$PMC_ToByteArrayForSINT
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_COPY_MEMORY_BYTE DD imagerel _COPY_MEMORY_BYTE
	DD	imagerel _COPY_MEMORY_BYTE+32
	DD	imagerel $unwind$_COPY_MEMORY_BYTE
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_COPY_MEMORY_BYTE DD 040a01H
	DD	02740aH
	DD	016405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$PMC_ToByteArrayForSINT DD 021H
	DD	imagerel $LN30
	DD	imagerel $LN30+62
	DD	imagerel $unwind$PMC_ToByteArrayForSINT
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PMC_ToByteArrayForSINT DD 020521H
	DD	067405H
	DD	imagerel $LN30
	DD	imagerel $LN30+62
	DD	imagerel $unwind$PMC_ToByteArrayForSINT
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_ToByteArrayForSINT DD 081501H
	DD	096415H
	DD	085415H
	DD	073415H
	DD	0e0113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_FromByteArrayForSINT DD 081301H
	DD	0a6413H
	DD	093413H
	DD	0f00f3213H
	DD	0700be00dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_ToByteArray DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_FromByteArray DD 060f01H
	DD	08640fH
	DD	07340fH
	DD	0700b320fH
xdata	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bytes.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bytes.c
;	COMDAT CountActualBitsFromBuffer
_TEXT	SEGMENT
p$ = 8
count$ = 16
CountActualBitsFromBuffer PROC				; COMDAT

; 33   :     p += count;

	add	rcx, rdx

; 34   :     while (count > 0)

	test	rdx, rdx
	je	SHORT $LN3@CountActua
	npad	8
$LL2@CountActua:

; 35   :     {
; 36   :         --p;
; 37   :         if (*p != 0)

	movzx	eax, BYTE PTR [rcx-1]
	lea	rcx, QWORD PTR [rcx-1]
	test	al, al
	jne	SHORT $LN10@CountActua

; 39   :         --count;

	sub	rdx, 1
	jne	SHORT $LL2@CountActua
$LN3@CountActua:

; 40   :     }
; 41   :     return (0);

	xor	eax, eax

; 42   : }

	ret	0
$LN10@CountActua:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 580  :         _BitScanReverse(&pos, x);

	movzx	eax, al
	bsr	ecx, eax

; 581  : #elif defined(__GNUC__)
; 582  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"((_UINT32_T)x));
; 583  : #else
; 584  : #error unknown compiler
; 585  : #endif
; 586  :         return ((unsigned char)(sizeof(x) * 8 - 1 - pos));

	mov	eax, 7
	sub	al, cl
	movzx	ecx, al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bytes.c

; 38   :             return (count * 8 - _LZCNT_ALT_8(*p));

	lea	rax, QWORD PTR [rdx*8]
	sub	rax, rcx

; 42   : }

	ret	0
CountActualBitsFromBuffer ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _LZCNT_ALT_8
_TEXT	SEGMENT
x$ = 8
_LZCNT_ALT_8 PROC					; COMDAT

; 576  :         if (x == 0)

	test	cl, cl
	jne	SHORT $LN2@LZCNT_ALT_

; 577  :             return (sizeof(x) * 8);

	mov	eax, 8

; 587  :     }

	ret	0
$LN2@LZCNT_ALT_:

; 578  :         _UINT32_T pos;
; 579  : #ifdef _MSC_VER
; 580  :         _BitScanReverse(&pos, x);

	movzx	eax, cl
	bsr	ecx, eax

; 581  : #elif defined(__GNUC__)
; 582  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"((_UINT32_T)x));
; 583  : #else
; 584  : #error unknown compiler
; 585  : #endif
; 586  :         return ((unsigned char)(sizeof(x) * 8 - 1 - pos));

	mov	eax, 7
	sub	al, cl
	movzx	eax, al

; 587  :     }

	ret	0
_LZCNT_ALT_8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _DIVIDE_CEILING_SIZE
_TEXT	SEGMENT
u$ = 8
v$ = 16
_DIVIDE_CEILING_SIZE PROC				; COMDAT

; 193  :         return ((u + v - 1) / v);

	lea	rax, QWORD PTR [rdx-1]
	mov	r8, rdx
	add	rax, rcx
	xor	edx, edx
	div	r8

; 194  :     }

	ret	0
_DIVIDE_CEILING_SIZE ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _COPY_MEMORY_BYTE
_TEXT	SEGMENT
d$ = 8
s$ = 16
count$ = 24
_COPY_MEMORY_BYTE PROC					; COMDAT

; 43   :     {

	mov	QWORD PTR [rsp+8], rsi
	mov	QWORD PTR [rsp+16], rdi

; 44   :         __movsb(d, s, count);

	mov	rdi, rcx
	mov	rsi, rdx
	mov	rcx, r8
	rep movsb

; 45   :     }

	mov	rsi, QWORD PTR [rsp+8]
	mov	rdi, QWORD PTR [rsp+16]
	ret	0
_COPY_MEMORY_BYTE ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bytes.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bytes.c
;	COMDAT PMC_ToByteArrayForSINT
_TEXT	SEGMENT
p_sign$ = 48
p$ = 56
buffer$ = 64
buffer_size$ = 72
count$ = 80
PMC_ToByteArrayForSINT PROC				; COMDAT

; 143  : {

$LN30:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	r14
	sub	rsp, 32					; 00000020H
	mov	r14, r9
	mov	rsi, r8
	mov	rbx, rdx
	movzx	ebp, cl

; 144  :     if (p == NULL)

	test	rdx, rdx
	jne	SHORT $LN2@PMC_ToByte

; 145  :         return (PMC_STATUS_ARGUMENT_ERROR);

	lea	eax, QWORD PTR [rdx-1]
	jmp	$LN1@PMC_ToByte
$LN2@PMC_ToByte:

; 146  :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;
; 147  :     PMC_STATUS_CODE result;
; 148  :     if ((result = CheckNumber(np)) != PMC_STATUS_OK)

	mov	rcx, rbx
	call	CheckNumber
	test	eax, eax
	jne	$LN1@PMC_ToByte

; 149  :         return (result);
; 150  :     size_t expected_abs_buffer_size = np->IS_ZERO ? 0 : _DIVIDE_CEILING_SIZE(np->UNIT_BIT_COUNT, 8);

	mov	QWORD PTR [rsp+48], rdi
	mov	edi, DWORD PTR [rbx]
	and	edi, 1
	je	SHORT $LN17@PMC_ToByte
	xor	edx, edx
	jmp	SHORT $LN18@PMC_ToByte
$LN17@PMC_ToByte:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 193  :         return ((u + v - 1) / v);

	mov	rdx, QWORD PTR [rbx+24]
	add	rdx, 7
	shr	rdx, 3
$LN18@PMC_ToByte:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bytes.c

; 151  :     if (buffer != NULL)

	test	rsi, rsi
	je	SHORT $LN23@PMC_ToByte

; 152  :     {
; 153  :         if (8 + np->UNIT_BIT_COUNT > sizeof(*buffer) * 8 * buffer_size)

	mov	rcx, QWORD PTR [rbx+24]
	lea	rax, QWORD PTR [r14*8]
	add	rcx, 8
	cmp	rcx, rax
	jbe	SHORT $LN5@PMC_ToByte

; 154  :             return (PMC_STATUS_INSUFFICIENT_BUFFER);

	mov	eax, -4
	jmp	SHORT $LN26@PMC_ToByte
$LN5@PMC_ToByte:

; 155  :         if (p_sign == 0)

	test	bpl, bpl
	jne	SHORT $LN27@PMC_ToByte

; 156  :         {
; 157  :             if (np->IS_ZERO)

	test	edi, edi
	je	SHORT $LN25@PMC_ToByte

; 158  :                 buffer[0] = 0x00;

	mov	BYTE PTR [rsi], bpl

; 159  :             else
; 160  :                 return (PMC_STATUS_INTERNAL_ERROR);
; 161  :         }

	jmp	SHORT $LN23@PMC_ToByte
$LN27@PMC_ToByte:

; 162  :         else if (p_sign > 0)

	jle	SHORT $LN10@PMC_ToByte

; 163  :         {
; 164  :             if (np->IS_ZERO)

	test	edi, edi
	jne	SHORT $LN25@PMC_ToByte

; 165  :                 return (PMC_STATUS_INTERNAL_ERROR);
; 166  :             else
; 167  :             {
; 168  :                 buffer[0] = 0x01;

	mov	BYTE PTR [rsi], 1

; 169  :                 _COPY_MEMORY_BYTE(buffer + 1, np->BLOCK, expected_abs_buffer_size);
; 170  :             }
; 171  :         }

	jmp	SHORT $LN28@PMC_ToByte
$LN10@PMC_ToByte:

; 172  :         else
; 173  :         {
; 174  :             if (np->IS_ZERO)

	test	edi, edi
	je	SHORT $LN14@PMC_ToByte
$LN25@PMC_ToByte:

; 175  :                 return (PMC_STATUS_INTERNAL_ERROR);

	mov	eax, -256				; ffffffffffffff00H
	jmp	SHORT $LN26@PMC_ToByte
$LN14@PMC_ToByte:

; 176  :             else
; 177  :             {
; 178  :                 buffer[0] = 0x03;

	mov	BYTE PTR [rsi], 3
$LN28@PMC_ToByte:

; 179  :                 _COPY_MEMORY_BYTE(buffer + 1, np->BLOCK, expected_abs_buffer_size);
; 180  :             }
; 181  :         }
; 182  :     }
; 183  :     *count = expected_abs_buffer_size + 1;

	lea	rdi, QWORD PTR [rsi+1]
	mov	rcx, rdx
	mov	rsi, QWORD PTR [rbx+64]
	rep movsb
$LN23@PMC_ToByte:
	mov	rax, QWORD PTR count$[rsp]
	lea	rcx, QWORD PTR [rdx+1]
	mov	QWORD PTR [rax], rcx

; 184  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN26@PMC_ToByte:
	mov	rdi, QWORD PTR [rsp+48]
$LN1@PMC_ToByte:

; 185  : }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rbp, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
PMC_ToByteArrayForSINT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bytes.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bytes.c
;	COMDAT PMC_FromByteArrayForSINT
_TEXT	SEGMENT
p$1 = 64
buffer$ = 64
count$ = 72
o_sign$ = 80
o_abs$ = 88
PMC_FromByteArrayForSINT PROC				; COMDAT

; 46   : {

$LN23:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	r14, r9
	mov	r15, r8

; 47   :     PMC_STATUS_CODE result;
; 48   :     if (buffer == NULL)

	test	rcx, rcx
	je	SHORT $LN21@PMC_FromBy

; 49   :         return (PMC_STATUS_ARGUMENT_ERROR);
; 50   :     if (count < 1)

	cmp	rdx, 1
	jb	SHORT $LN21@PMC_FromBy

; 51   :         return (PMC_STATUS_ARGUMENT_ERROR);
; 52   :     if (o_sign == NULL)

	test	r8, r8
	je	SHORT $LN21@PMC_FromBy

; 53   :         return (PMC_STATUS_ARGUMENT_ERROR);
; 54   :     if (o_abs == NULL)

	test	r9, r9
	je	SHORT $LN21@PMC_FromBy

; 55   :         return (PMC_STATUS_ARGUMENT_ERROR);
; 56   :     unsigned char header = buffer[0];
; 57   :     unsigned char sign = header & 0x03;

	movzx	ebx, BYTE PTR [rcx]
	and	bl, 3

; 58   :     unsigned char header_reserved = header & 0xfc;

	test	BYTE PTR [rcx], 252			; 000000fcH

; 59   :     if (header_reserved != 0)

	jne	SHORT $LN21@PMC_FromBy

; 60   :         return (PMC_STATUS_ARGUMENT_ERROR);
; 61   :     if (sign == 0)

	test	bl, bl
	jne	SHORT $LN7@PMC_FromBy

; 62   :     {
; 63   :         if (count != 1)

	cmp	rdx, 1
	je	SHORT $LN20@PMC_FromBy
$LN21@PMC_FromBy:

; 69   :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN1@PMC_FromBy:

; 95   : }

	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	rdi
	ret	0
$LN7@PMC_FromBy:

; 64   :             return (PMC_STATUS_ARGUMENT_ERROR);
; 65   :         *o_sign = 0;
; 66   :         *o_abs = (PMC_HANDLE_UINT)&number_zero;
; 67   :     }
; 68   :     else if (sign == 2)

	cmp	bl, 2
	je	SHORT $LN21@PMC_FromBy

; 70   :     else
; 71   :     {
; 72   :         __UNIT_TYPE bit_count = CountActualBitsFromBuffer(buffer + 1, count - 1);

	lea	rsi, QWORD PTR [rcx+1]
	dec	rdx
	mov	rcx, rsi
	call	CountActualBitsFromBuffer
	mov	rdi, rax

; 73   :         if (bit_count == 0)

	test	rax, rax
	jne	SHORT $LN12@PMC_FromBy
$LN20@PMC_FromBy:

; 74   :         {
; 75   :             *o_sign = 0;
; 76   :             *o_abs = (PMC_HANDLE_UINT)&number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	BYTE PTR [r8], 0
	mov	QWORD PTR [r9], rax

; 87   :         }
; 88   :     }
; 89   : 
; 90   : #ifdef _DEBUG
; 91   :     if ((result = CheckNumber((NUMBER_HEADER*)*o_abs)) != PMC_STATUS_OK)
; 92   :         return (result);
; 93   : #endif
; 94   :     return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	SHORT $LN1@PMC_FromBy
$LN12@PMC_FromBy:

; 77   :         }
; 78   :         else
; 79   :         {
; 80   :             NUMBER_HEADER* p;
; 81   :             if ((result = AllocateNumber(&p, bit_count, NULL)) != PMC_STATUS_OK)

	xor	r8d, r8d
	lea	rcx, QWORD PTR p$1[rsp]
	mov	rdx, rdi
	call	AllocateNumber
	test	eax, eax
	jne	SHORT $LN1@PMC_FromBy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 193  :         return ((u + v - 1) / v);

	lea	rcx, QWORD PTR [rdi+7]

; 44   :         __movsb(d, s, count);

	mov	rdi, QWORD PTR p$1[rsp]

; 193  :         return ((u + v - 1) / v);

	shr	rcx, 3

; 44   :         __movsb(d, s, count);

	mov	rdi, QWORD PTR [rdi+64]
	rep movsb
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bytes.c

; 84   :             CommitNumber(p);

	mov	rcx, QWORD PTR p$1[rsp]
	call	CommitNumber

; 85   :             *o_sign =  sign == 1 ? 1 : -1;

	mov	ecx, 1
	mov	eax, -1					; ffffffffH
	cmp	bl, cl
	cmove	eax, ecx
	mov	BYTE PTR [r15], al

; 86   :             *o_abs = (PMC_HANDLE_UINT)p;

	mov	rax, QWORD PTR p$1[rsp]
	mov	QWORD PTR [r14], rax

; 87   :         }
; 88   :     }
; 89   : 
; 90   : #ifdef _DEBUG
; 91   :     if ((result = CheckNumber((NUMBER_HEADER*)*o_abs)) != PMC_STATUS_OK)
; 92   :         return (result);
; 93   : #endif
; 94   :     return (PMC_STATUS_OK);

	xor	eax, eax
	jmp	$LN1@PMC_FromBy
PMC_FromByteArrayForSINT ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bytes.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bytes.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bytes.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bytes.c
;	COMDAT PMC_ToByteArray
_TEXT	SEGMENT
p$ = 48
buffer$ = 56
buffer_size$ = 64
count$ = 72
PMC_ToByteArray PROC					; COMDAT

; 188  : {

$LN16:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, r9
	mov	rbp, r8
	mov	rdi, rdx
	mov	rsi, rcx

; 189  :     if (p == NULL)

	test	rcx, rcx
	jne	SHORT $LN2@PMC_ToByte

; 190  :         return (PMC_STATUS_ARGUMENT_ERROR);

	lea	eax, QWORD PTR [rcx-1]
	jmp	SHORT $LN1@PMC_ToByte
$LN2@PMC_ToByte:

; 191  :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;
; 192  :     PMC_STATUS_CODE result;
; 193  :     if ((result = CheckNumber(np)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN1@PMC_ToByte

; 194  :         return (result);
; 195  :     size_t expected_abs_buffer_size = np->IS_ZERO ? 0 : _DIVIDE_CEILING_SIZE(np->UNIT_BIT_COUNT, 8);

	mov	r8d, DWORD PTR [rsi]
	and	r8d, 1
	je	SHORT $LN9@PMC_ToByte
	xor	edx, edx
	jmp	SHORT $LN10@PMC_ToByte
$LN9@PMC_ToByte:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 193  :         return ((u + v - 1) / v);

	mov	rdx, QWORD PTR [rsi+24]
	add	rdx, 7
	shr	rdx, 3
$LN10@PMC_ToByte:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bytes.c

; 196  :     if (buffer != NULL)

	test	rdi, rdi
	je	SHORT $LN13@PMC_ToByte

; 197  :     {
; 198  :         if (8 + np->UNIT_BIT_COUNT > sizeof(*buffer) * 8 * buffer_size)

	mov	rcx, QWORD PTR [rsi+24]
	lea	rax, QWORD PTR [rbp*8]
	add	rcx, 8
	cmp	rcx, rax
	jbe	SHORT $LN5@PMC_ToByte

; 199  :             return (PMC_STATUS_INSUFFICIENT_BUFFER);

	mov	eax, -4
	jmp	SHORT $LN1@PMC_ToByte
$LN5@PMC_ToByte:

; 200  :         if (np->IS_ZERO)

	test	r8d, r8d
	je	SHORT $LN6@PMC_ToByte

; 201  :             buffer[0] = 0x00;

	mov	BYTE PTR [rdi], 0
	jmp	SHORT $LN13@PMC_ToByte
$LN6@PMC_ToByte:

; 202  :         else
; 203  :         {
; 204  :             buffer[0] = 0x01;

	mov	BYTE PTR [rdi], 1
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 44   :         __movsb(d, s, count);

	mov	rcx, rdx
	mov	rsi, QWORD PTR [rsi+64]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bytes.c

; 205  :             _COPY_MEMORY_BYTE(buffer + 1, np->BLOCK, expected_abs_buffer_size);

	inc	rdi
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 44   :         __movsb(d, s, count);

	rep movsb
$LN13@PMC_ToByte:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bytes.c

; 208  :     *count = expected_abs_buffer_size + 1;

	lea	rax, QWORD PTR [rdx+1]
	mov	QWORD PTR [rbx], rax

; 209  :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_ToByte:

; 210  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_ToByteArray ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bytes.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bytes.c
;	COMDAT PMC_FromByteArray
_TEXT	SEGMENT
p$1 = 48
buffer$ = 48
count$ = 56
o$ = 64
PMC_FromByteArray PROC					; COMDAT

; 98   : {

$LN21:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, r8

; 99   :     PMC_STATUS_CODE result;
; 100  :     if (buffer == NULL)

	test	rcx, rcx
	je	SHORT $LN9@PMC_FromBy

; 101  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 102  :     if (count < 1)

	cmp	rdx, 1
	jb	SHORT $LN9@PMC_FromBy

; 103  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 104  :     if (o == NULL)

	test	rbx, rbx
	je	SHORT $LN9@PMC_FromBy

; 105  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 106  :     unsigned char header = buffer[0];
; 107  :     unsigned char sign = header & 0x03;

	movzx	edi, BYTE PTR [rcx]
	and	dil, 3

; 108  :     unsigned char header_reserved = header & 0xfc;

	test	BYTE PTR [rcx], 252			; 000000fcH

; 109  :     if (header_reserved != 0)

	jne	SHORT $LN9@PMC_FromBy

; 110  :         return (PMC_STATUS_ARGUMENT_ERROR);
; 111  :     if (sign == 0)

	test	dil, dil
	jne	SHORT $LN6@PMC_FromBy

; 112  :     {
; 113  :         if (count != 1)

	cmp	rdx, 1
	je	SHORT $LN19@PMC_FromBy
$LN9@PMC_FromBy:

; 130  :         }
; 131  :     }
; 132  :     else
; 133  :         return (PMC_STATUS_ARGUMENT_ERROR);

	mov	eax, -1
$LN1@PMC_FromBy:

; 140  : }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN6@PMC_FromBy:

; 114  :             return (PMC_STATUS_ARGUMENT_ERROR);
; 115  :         *o = (PMC_HANDLE_UINT)&number_zero;
; 116  :     }
; 117  :     else if (sign == 1)

	cmp	dil, 1
	jne	SHORT $LN9@PMC_FromBy

; 118  :     {
; 119  :         __UNIT_TYPE bit_count = CountActualBitsFromBuffer(buffer + 1, count - 1);

	lea	rsi, QWORD PTR [rcx+1]
	dec	rdx
	mov	rcx, rsi
	call	CountActualBitsFromBuffer
	mov	rdi, rax

; 120  :         if (bit_count == 0)

	test	rax, rax
	jne	SHORT $LN11@PMC_FromBy
$LN19@PMC_FromBy:

; 121  :             *o = (PMC_HANDLE_UINT)&number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR [r8], rax

; 134  : 
; 135  : #ifdef _DEBUG
; 136  :     if ((result = CheckNumber((NUMBER_HEADER*)*o)) != PMC_STATUS_OK)
; 137  :         return (result);
; 138  : #endif
; 139  :     return (PMC_STATUS_OK);

	xor	eax, eax

; 140  : }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN11@PMC_FromBy:

; 122  :         else
; 123  :         {
; 124  :             NUMBER_HEADER* p;
; 125  :             if ((result = AllocateNumber(&p, bit_count, NULL)) != PMC_STATUS_OK)

	xor	r8d, r8d
	lea	rcx, QWORD PTR p$1[rsp]
	mov	rdx, rdi
	call	AllocateNumber
	test	eax, eax
	jne	SHORT $LN1@PMC_FromBy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 193  :         return ((u + v - 1) / v);

	lea	rcx, QWORD PTR [rdi+7]

; 44   :         __movsb(d, s, count);

	mov	rdi, QWORD PTR p$1[rsp]

; 193  :         return ((u + v - 1) / v);

	shr	rcx, 3

; 44   :         __movsb(d, s, count);

	mov	rdi, QWORD PTR [rdi+64]
	rep movsb
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bytes.c

; 128  :             CommitNumber(p);

	mov	rcx, QWORD PTR p$1[rsp]
	call	CommitNumber

; 129  :             *o = (PMC_HANDLE_UINT)p;

	mov	rax, QWORD PTR p$1[rsp]

; 140  : }

	mov	rsi, QWORD PTR [rsp+64]
	mov	QWORD PTR [rbx], rax
	xor	eax, eax
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_FromByteArray ENDP
_TEXT	ENDS
END
