; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	PMC_FromByteArray
PUBLIC	PMC_ToByteArray
EXTRN	AllocateNumber:PROC
EXTRN	CommitNumber:PROC
EXTRN	CheckNumber:PROC
EXTRN	number_zero:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_FromByteArray DD imagerel $LN29
	DD	imagerel $LN29+34
	DD	imagerel $unwind$PMC_FromByteArray
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$PMC_FromByteArray DD imagerel $LN29+34
	DD	imagerel $LN29+94
	DD	imagerel $chain$0$PMC_FromByteArray
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$PMC_FromByteArray DD imagerel $LN29+94
	DD	imagerel $LN29+198
	DD	imagerel $chain$2$PMC_FromByteArray
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$PMC_FromByteArray DD imagerel $LN29+198
	DD	imagerel $LN29+214
	DD	imagerel $chain$3$PMC_FromByteArray
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PMC_ToByteArray DD imagerel $LN16
	DD	imagerel $LN16+146
	DD	imagerel $unwind$PMC_ToByteArray
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_COPY_MEMORY_BYTE DD imagerel _COPY_MEMORY_BYTE
	DD	imagerel _COPY_MEMORY_BYTE+32
	DD	imagerel $unwind$_COPY_MEMORY_BYTE
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_COPY_MEMORY_BYTE DD 040a01H
	DD	02740aH
	DD	016405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_ToByteArray DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$PMC_FromByteArray DD 021H
	DD	imagerel $LN29
	DD	imagerel $LN29+34
	DD	imagerel $unwind$PMC_FromByteArray
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$PMC_FromByteArray DD 020021H
	DD	077400H
	DD	imagerel $LN29
	DD	imagerel $LN29+34
	DD	imagerel $unwind$PMC_FromByteArray
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$PMC_FromByteArray DD 020521H
	DD	077405H
	DD	imagerel $LN29
	DD	imagerel $LN29+34
	DD	imagerel $unwind$PMC_FromByteArray
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PMC_FromByteArray DD 040a01H
	DD	08340aH
	DD	06006320aH
xdata	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bytes.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bytes.c
;	COMDAT CountActualBitsFromBuffer
_TEXT	SEGMENT
p$ = 8
count$ = 16
CountActualBitsFromBuffer PROC				; COMDAT

; 33   :     p += count;

	add	rcx, rdx

; 34   :     while (count > 0)

	test	rdx, rdx
	je	SHORT $LN3@CountActua
	npad	8
$LL2@CountActua:

; 35   :     {
; 36   :         --p;
; 37   :         if (*p != 0)

	movzx	eax, BYTE PTR [rcx-1]
	lea	rcx, QWORD PTR [rcx-1]
	test	al, al
	jne	SHORT $LN10@CountActua

; 39   :         --count;

	sub	rdx, 1
	jne	SHORT $LL2@CountActua
$LN3@CountActua:

; 40   :     }
; 41   :     return (0);

	xor	eax, eax

; 42   : }

	ret	0
$LN10@CountActua:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 579  :         _BitScanReverse(&pos, x);

	movzx	eax, al
	bsr	ecx, eax

; 580  : #elif defined(__GNUC__)
; 581  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"((_UINT32_T)x));
; 582  : #else
; 583  : #error unknown compiler
; 584  : #endif
; 585  :         return ((unsigned char)(sizeof(x) * 8 - 1 - pos));

	mov	eax, 7
	sub	al, cl
	movzx	ecx, al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bytes.c

; 38   :             return (count * 8 - _LZCNT_ALT_8(*p));

	lea	rax, QWORD PTR [rdx*8]
	sub	rax, rcx

; 42   : }

	ret	0
CountActualBitsFromBuffer ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _LZCNT_ALT_8
_TEXT	SEGMENT
x$ = 8
_LZCNT_ALT_8 PROC					; COMDAT

; 575  :         if (x == 0)

	test	cl, cl
	jne	SHORT $LN2@LZCNT_ALT_

; 576  :             return (sizeof(x) * 8);

	mov	eax, 8

; 586  :     }

	ret	0
$LN2@LZCNT_ALT_:

; 577  :         _UINT32_T pos;
; 578  : #ifdef _MSC_VER
; 579  :         _BitScanReverse(&pos, x);

	movzx	eax, cl
	bsr	ecx, eax

; 580  : #elif defined(__GNUC__)
; 581  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"((_UINT32_T)x));
; 582  : #else
; 583  : #error unknown compiler
; 584  : #endif
; 585  :         return ((unsigned char)(sizeof(x) * 8 - 1 - pos));

	mov	eax, 7
	sub	al, cl
	movzx	eax, al

; 586  :     }

	ret	0
_LZCNT_ALT_8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _DIVIDE_CEILING_SIZE
_TEXT	SEGMENT
u$ = 8
v$ = 16
_DIVIDE_CEILING_SIZE PROC				; COMDAT

; 192  :         return ((u + v - 1) / v);

	lea	rax, QWORD PTR [rdx-1]
	mov	r8, rdx
	add	rax, rcx
	xor	edx, edx
	div	r8

; 193  :     }

	ret	0
_DIVIDE_CEILING_SIZE ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
;	COMDAT _COPY_MEMORY_BYTE
_TEXT	SEGMENT
d$ = 8
s$ = 16
count$ = 24
_COPY_MEMORY_BYTE PROC					; COMDAT

; 42   :     {

	mov	QWORD PTR [rsp+8], rsi
	mov	QWORD PTR [rsp+16], rdi

; 43   :         __movsb(d, s, count);

	mov	rdi, rcx
	mov	rsi, rdx
	mov	rcx, r8
	rep movsb

; 44   :     }

	mov	rsi, QWORD PTR [rsp+8]
	mov	rdi, QWORD PTR [rsp+16]
	ret	0
_COPY_MEMORY_BYTE ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bytes.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bytes.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bytes.c
;	COMDAT PMC_ToByteArray
_TEXT	SEGMENT
p$ = 48
buffer$ = 56
buffer_size$ = 64
count$ = 72
PMC_ToByteArray PROC					; COMDAT

; 72   : {

$LN16:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, r9
	mov	rbp, r8
	mov	rdi, rdx
	mov	rsi, rcx

; 73   :     if (p == NULL)

	test	rcx, rcx
	jne	SHORT $LN2@PMC_ToByte

; 74   :         return (PMC_STATUS_ARGUMENT_ERROR);

	lea	eax, QWORD PTR [rcx-1]
	jmp	SHORT $LN1@PMC_ToByte
$LN2@PMC_ToByte:

; 75   :     NUMBER_HEADER* np = (NUMBER_HEADER*)p;
; 76   :     PMC_STATUS_CODE result;
; 77   :     if ((result = CheckNumber(np)) != PMC_STATUS_OK)

	call	CheckNumber
	test	eax, eax
	jne	SHORT $LN1@PMC_ToByte

; 78   :         return (result);
; 79   :     size_t expected_buffer_size = np->IS_ZERO ? 1 : _DIVIDE_CEILING_SIZE(np->UNIT_BIT_COUNT, 8);

	mov	ecx, DWORD PTR [rsi+40]
	and	ecx, 2
	je	SHORT $LN9@PMC_ToByte
	lea	edx, QWORD PTR [rax+1]
	jmp	SHORT $LN10@PMC_ToByte
$LN9@PMC_ToByte:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 192  :         return ((u + v - 1) / v);

	mov	rdx, QWORD PTR [rsi+16]
	add	rdx, 7
	shr	rdx, 3
$LN10@PMC_ToByte:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bytes.c

; 80   :     if (buffer != NULL)

	test	rdi, rdi
	je	SHORT $LN13@PMC_ToByte

; 81   :     {
; 82   :         if (np->UNIT_BIT_COUNT > sizeof(*buffer) * 8 * buffer_size)

	lea	rax, QWORD PTR [rbp*8]
	cmp	QWORD PTR [rsi+16], rax
	jbe	SHORT $LN5@PMC_ToByte

; 83   :             return (PMC_STATUS_INSUFFICIENT_BUFFER);

	mov	eax, -4
	jmp	SHORT $LN1@PMC_ToByte
$LN5@PMC_ToByte:

; 84   :         if (np->IS_ZERO)

	test	ecx, ecx
	je	SHORT $LN6@PMC_ToByte

; 85   :             buffer[0] = 0;

	mov	BYTE PTR [rdi], 0
	jmp	SHORT $LN13@PMC_ToByte
$LN6@PMC_ToByte:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 43   :         __movsb(d, s, count);

	mov	rsi, QWORD PTR [rsi+56]
	mov	rcx, rdx
	rep movsb
$LN13@PMC_ToByte:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bytes.c

; 89   :     *count = expected_buffer_size;

	mov	QWORD PTR [rbx], rdx

; 90   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN1@PMC_ToByte:

; 91   : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
PMC_ToByteArray ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bytes.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bytes.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bytes.c
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bytes.c
;	COMDAT PMC_FromByteArray
_TEXT	SEGMENT
p$1 = 48
buffer$ = 48
count$ = 56
o$ = 64
PMC_FromByteArray PROC					; COMDAT

; 46   : {

$LN29:
	mov	QWORD PTR [rsp+24], rbx
	push	rsi
	sub	rsp, 32					; 00000020H
	mov	rbx, r8
	mov	rsi, rcx

; 47   :     PMC_STATUS_CODE result;
; 48   :     if (buffer == NULL)

	test	rcx, rcx
	je	$LN26@PMC_FromBy

; 49   :         return (PMC_STATUS_ARGUMENT_ERROR);
; 50   :     if (o == NULL)

	test	rbx, rbx
	je	$LN26@PMC_FromBy

; 33   :     p += count;

	mov	QWORD PTR [rsp+56], rdi
	lea	rax, QWORD PTR [rcx+rdx]

; 34   :     while (count > 0)

	test	rdx, rdx
	je	SHORT $LN25@PMC_FromBy
$LL9@PMC_FromBy:

; 35   :     {
; 36   :         --p;
; 37   :         if (*p != 0)

	movzx	ecx, BYTE PTR [rax-1]
	lea	rax, QWORD PTR [rax-1]
	test	cl, cl
	jne	SHORT $LN21@PMC_FromBy

; 39   :         --count;

	sub	rdx, 1
	jne	SHORT $LL9@PMC_FromBy
$LN25@PMC_FromBy:

; 54   :         *o = &number_zero;

	lea	rax, OFFSET FLAT:number_zero
	mov	QWORD PTR [r8], rax

; 63   :     }
; 64   : #ifdef _DEBUG
; 65   :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 66   :         return (result);
; 67   : #endif
; 68   :     return (PMC_STATUS_OK);

	xor	eax, eax
$LN27@PMC_FromBy:
	mov	rdi, QWORD PTR [rsp+56]

; 69   : }

	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rsi
	ret	0
$LN21@PMC_FromBy:
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 579  :         _BitScanReverse(&pos, x);

	movzx	eax, cl
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bytes.c

; 38   :             return (count * 8 - _LZCNT_ALT_8(*p));

	lea	rdi, QWORD PTR [rdx*8]
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 579  :         _BitScanReverse(&pos, x);

	bsr	ecx, eax

; 580  : #elif defined(__GNUC__)
; 581  :         __asm__("bsrl %1, %0" : "=r"(pos) : "rm"((_UINT32_T)x));
; 582  : #else
; 583  : #error unknown compiler
; 584  : #endif
; 585  :         return ((unsigned char)(sizeof(x) * 8 - 1 - pos));

	mov	eax, 7
	sub	al, cl
	movzx	ecx, al
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bytes.c

; 38   :             return (count * 8 - _LZCNT_ALT_8(*p));

	sub	rdi, rcx

; 51   :         return (PMC_STATUS_ARGUMENT_ERROR);
; 52   :     __UNIT_TYPE bit_count = CountActualBitsFromBuffer(buffer, count);
; 53   :     if (bit_count == 0)

	je	SHORT $LN25@PMC_FromBy

; 55   :     else
; 56   :     {
; 57   :         NUMBER_HEADER* p;
; 58   :         if ((result = AllocateNumber(&p, bit_count, NULL)) != PMC_STATUS_OK)

	xor	r8d, r8d
	lea	rcx, QWORD PTR p$1[rsp]
	mov	rdx, rdi
	call	AllocateNumber
	test	eax, eax
	jne	SHORT $LN27@PMC_FromBy
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_inline_func.h

; 192  :         return ((u + v - 1) / v);

	lea	rcx, QWORD PTR [rdi+7]

; 43   :         __movsb(d, s, count);

	mov	rdi, QWORD PTR p$1[rsp]

; 192  :         return ((u + v - 1) / v);

	shr	rcx, 3

; 43   :         __movsb(d, s, count);

	mov	rdi, QWORD PTR [rdi+56]
	rep movsb
; File z:\sources\lunor\repos\rougemeilland\palmtree.math.core.uint\palmtree.math.core.uint\pmc_bytes.c

; 61   :         CommitNumber(p);

	mov	rcx, QWORD PTR p$1[rsp]
	call	CommitNumber

; 62   :         *o = p;

	mov	rax, QWORD PTR p$1[rsp]
	mov	rdi, QWORD PTR [rsp+56]
	mov	QWORD PTR [rbx], rax

; 63   :     }
; 64   : #ifdef _DEBUG
; 65   :     if ((result = CheckNumber(*o)) != PMC_STATUS_OK)
; 66   :         return (result);
; 67   : #endif
; 68   :     return (PMC_STATUS_OK);

	xor	eax, eax

; 69   : }

	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rsi
	ret	0
$LN26@PMC_FromBy:
	mov	rbx, QWORD PTR [rsp+64]
	mov	eax, -1
	add	rsp, 32					; 00000020H
	pop	rsi
	ret	0
PMC_FromByteArray ENDP
_TEXT	ENDS
END
