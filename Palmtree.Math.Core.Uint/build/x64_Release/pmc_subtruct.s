	.file	"pmc_subtruct.c"
	.text
	.p2align 4,,15
	.def	Subtruct_X_1W.isra.0;	.scl	3;	.type	32;	.endef
	.seh_proc	Subtruct_X_1W.isra.0
Subtruct_X_1W.isra.0:
	.seh_endprologue
	movq	(%rcx), %rax
	leaq	8(%rcx), %r10
	subq	%r8, %rax
	leaq	8(%r9), %r11
	setb	%r8b
	subq	$1, %rdx
	movq	%rax, (%r9)
	movl	%r8d, %ecx
	je	.L2
	xorl	%r9d, %r9d
	testb	%r8b, %r8b
	jne	.L3
	jmp	.L23
	.p2align 4,,10
.L21:
	testb	%cl, %cl
	movq	%r8, %r11
	je	.L4
.L3:
	movq	(%r10), %rax
	leaq	8(%r11), %r8
	addq	$8, %r10
	addb	$-1, %cl
	sbbq	%r9, %rax
	setc	%cl
	subq	$1, %rdx
	movq	%rax, (%r11)
	jne	.L21
.L2:
	testb	%cl, %cl
	jne	.L9
	xorl	%eax, %eax
.L1:
	ret
.L23:
	movq	%r11, %r8
	.p2align 4,,10
.L4:
	xorl	%eax, %eax
	.p2align 4,,10
.L7:
	movq	(%r10,%rax,8), %rcx
	movq	%rcx, (%r8,%rax,8)
	addq	$1, %rax
	cmpq	%rax, %rdx
	jne	.L7
	xorl	%eax, %eax
	jmp	.L1
.L9:
	movl	$-258, %eax
	ret
	.seh_endproc
	.p2align 4,,15
	.globl	Subtruct_Imp
	.def	Subtruct_Imp;	.scl	2;	.type	32;	.endef
	.seh_proc	Subtruct_Imp
Subtruct_Imp:
	pushq	%r15
	.seh_pushreg	%r15
	pushq	%r14
	.seh_pushreg	%r14
	pushq	%r13
	.seh_pushreg	%r13
	pushq	%r12
	.seh_pushreg	%r12
	pushq	%rbp
	.seh_pushreg	%rbp
	pushq	%rdi
	.seh_pushreg	%rdi
	pushq	%rsi
	.seh_pushreg	%rsi
	pushq	%rbx
	.seh_pushreg	%rbx
	.seh_endprologue
	movq	104(%rsp), %rsi
	movq	%r9, %r14
	movq	%rcx, %rbx
	shrq	$5, %r14
	testq	%r14, %r14
	je	.L39
	movq	%r14, %r13
	movq	%rsi, %r12
	movq	%r8, %rbp
	movq	%rcx, %rdi
	xorl	%eax, %eax
	.p2align 4,,10
.L26:
	movq	%rdi, %r10
	movq	%rbp, %r11
	movq	%r12, %r15
/APP
 # 939 "../autogenerated_inline_func.h" 1
	addb	$-1, %al
	movq	(%r10), %rcx
	sbbq	(%r11), %rcx
	movq	%rcx, (%r15)
	movq	8(%r10), %rcx
	sbbq	8(%r11), %rcx
	movq	%rcx, 8(%r15)
	movq	16(%r10), %rcx
	sbbq	16(%r11), %rcx
	movq	%rcx, 16(%r15)
	movq	24(%r10), %rcx
	sbbq	24(%r11), %rcx
	movq	%rcx, 24(%r15)
	movq	32(%r10), %rcx
	sbbq	32(%r11), %rcx
	movq	%rcx, 32(%r15)
	movq	40(%r10), %rcx
	sbbq	40(%r11), %rcx
	movq	%rcx, 40(%r15)
	movq	48(%r10), %rcx
	sbbq	48(%r11), %rcx
	movq	%rcx, 48(%r15)
	movq	56(%r10), %rcx
	sbbq	56(%r11), %rcx
	movq	%rcx, 56(%r15)
	movq	64(%r10), %rcx
	sbbq	64(%r11), %rcx
	movq	%rcx, 64(%r15)
	movq	72(%r10), %rcx
	sbbq	72(%r11), %rcx
	movq	%rcx, 72(%r15)
	movq	80(%r10), %rcx
	sbbq	80(%r11), %rcx
	movq	%rcx, 80(%r15)
	movq	88(%r10), %rcx
	sbbq	88(%r11), %rcx
	movq	%rcx, 88(%r15)
	movq	96(%r10), %rcx
	sbbq	96(%r11), %rcx
	movq	%rcx, 96(%r15)
	movq	104(%r10), %rcx
	sbbq	104(%r11), %rcx
	movq	%rcx, 104(%r15)
	movq	112(%r10), %rcx
	sbbq	112(%r11), %rcx
	movq	%rcx, 112(%r15)
	movq	120(%r10), %rcx
	sbbq	120(%r11), %rcx
	movq	%rcx, 120(%r15)
	movq	128(%r10), %rcx
	sbbq	128(%r11), %rcx
	movq	%rcx, 128(%r15)
	movq	136(%r10), %rcx
	sbbq	136(%r11), %rcx
	movq	%rcx, 136(%r15)
	movq	144(%r10), %rcx
	sbbq	144(%r11), %rcx
	movq	%rcx, 144(%r15)
	movq	152(%r10), %rcx
	sbbq	152(%r11), %rcx
	movq	%rcx, 152(%r15)
	movq	160(%r10), %rcx
	sbbq	160(%r11), %rcx
	movq	%rcx, 160(%r15)
	movq	168(%r10), %rcx
	sbbq	168(%r11), %rcx
	movq	%rcx, 168(%r15)
	movq	176(%r10), %rcx
	sbbq	176(%r11), %rcx
	movq	%rcx, 176(%r15)
	movq	184(%r10), %rcx
	sbbq	184(%r11), %rcx
	movq	%rcx, 184(%r15)
	movq	192(%r10), %rcx
	sbbq	192(%r11), %rcx
	movq	%rcx, 192(%r15)
	movq	200(%r10), %rcx
	sbbq	200(%r11), %rcx
	movq	%rcx, 200(%r15)
	movq	208(%r10), %rcx
	sbbq	208(%r11), %rcx
	movq	%rcx, 208(%r15)
	movq	216(%r10), %rcx
	sbbq	216(%r11), %rcx
	movq	%rcx, 216(%r15)
	movq	224(%r10), %rcx
	sbbq	224(%r11), %rcx
	movq	%rcx, 224(%r15)
	movq	232(%r10), %rcx
	sbbq	232(%r11), %rcx
	movq	%rcx, 232(%r15)
	movq	240(%r10), %rcx
	sbbq	240(%r11), %rcx
	movq	%rcx, 240(%r15)
	movq	248(%r10), %rcx
	sbbq	248(%r11), %rcx
	movq	%rcx, 248(%r15)
	setc	%al
 # 0 "" 2
/NO_APP
	addq	$256, %rdi
	addq	$256, %rbp
	addq	$256, %r12
	subq	$1, %r13
	jne	.L26
	salq	$8, %r14
	addq	%r14, %rbx
	addq	%r14, %r8
	addq	%r14, %rsi
.L25:
	testb	$16, %r9b
	jne	.L69
.L27:
	testb	$8, %r9b
	jne	.L70
.L28:
	testb	$4, %r9b
	je	.L29
	movq	%rbx, %r10
	movq	%r8, %r11
	movq	%rsi, %rdi
/APP
 # 4071 "../autogenerated_inline_func.h" 1
	addb	$-1, %al
	movq	(%r10), %rcx
	sbbq	(%r11), %rcx
	movq	%rcx, (%rdi)
	movq	8(%r10), %rcx
	sbbq	8(%r11), %rcx
	movq	%rcx, 8(%rdi)
	movq	16(%r10), %rcx
	sbbq	16(%r11), %rcx
	movq	%rcx, 16(%rdi)
	movq	24(%r10), %rcx
	sbbq	24(%r11), %rcx
	movq	%rcx, 24(%rdi)
	setc	%al
 # 0 "" 2
/NO_APP
	addq	$32, %rbx
	addq	$32, %r8
	addq	$32, %rsi
.L29:
	testb	$2, %r9b
	je	.L30
	movq	%rbx, %r10
	movq	%r8, %r11
	movq	%rsi, %rdi
/APP
 # 4477 "../autogenerated_inline_func.h" 1
	addb	$-1, %al
	movq	(%r10), %rcx
	sbbq	(%r11), %rcx
	movq	%rcx, (%rdi)
	movq	8(%r10), %rcx
	sbbq	8(%r11), %rcx
	movq	%rcx, 8(%rdi)
	setc	%al
 # 0 "" 2
/NO_APP
	addq	$16, %rbx
	addq	$16, %r8
	addq	$16, %rsi
.L30:
	testb	$1, %r9b
	jne	.L71
.L31:
	subq	%r9, %rdx
	je	.L32
	xorl	%r9d, %r9d
	testb	%al, %al
	movq	%rsi, %r8
	jne	.L33
	jmp	.L34
	.p2align 4,,10
.L68:
	testb	%al, %al
	movq	%r8, %rsi
	je	.L34
.L33:
	movq	(%rbx), %rcx
	leaq	8(%rsi), %r8
	addq	$8, %rbx
	addb	$-1, %al
	sbbq	%r9, %rcx
	setc	%al
	subq	$1, %rdx
	movq	%rcx, (%rsi)
	jne	.L68
.L32:
	testb	%al, %al
	jne	.L40
.L38:
	xorl	%eax, %eax
.L24:
	popq	%rbx
	popq	%rsi
	popq	%rdi
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	ret
	.p2align 4,,10
.L71:
	movq	(%rbx), %rcx
	addb	$-1, %al
	movq	(%r8), %r8
	sbbq	%r8, %rcx
	setc	%al
	movq	%rcx, (%rsi)
	addq	$8, %rbx
	addq	$8, %rsi
	jmp	.L31
	.p2align 4,,10
.L34:
	xorl	%eax, %eax
	.p2align 4,,10
.L37:
	movq	(%rbx,%rax,8), %rcx
	movq	%rcx, (%r8,%rax,8)
	addq	$1, %rax
	cmpq	%rdx, %rax
	jne	.L37
	jmp	.L38
	.p2align 4,,10
.L70:
	movq	%rbx, %r10
	movq	%r8, %r11
	movq	%rsi, %rdi
/APP
 # 3491 "../autogenerated_inline_func.h" 1
	addb	$-1, %al
	movq	(%r10), %rcx
	sbbq	(%r11), %rcx
	movq	%rcx, (%rdi)
	movq	8(%r10), %rcx
	sbbq	8(%r11), %rcx
	movq	%rcx, 8(%rdi)
	movq	16(%r10), %rcx
	sbbq	16(%r11), %rcx
	movq	%rcx, 16(%rdi)
	movq	24(%r10), %rcx
	sbbq	24(%r11), %rcx
	movq	%rcx, 24(%rdi)
	movq	32(%r10), %rcx
	sbbq	32(%r11), %rcx
	movq	%rcx, 32(%rdi)
	movq	40(%r10), %rcx
	sbbq	40(%r11), %rcx
	movq	%rcx, 40(%rdi)
	movq	48(%r10), %rcx
	sbbq	48(%r11), %rcx
	movq	%rcx, 48(%rdi)
	movq	56(%r10), %rcx
	sbbq	56(%r11), %rcx
	movq	%rcx, 56(%rdi)
	setc	%al
 # 0 "" 2
/NO_APP
	addq	$64, %rbx
	addq	$64, %r8
	addq	$64, %rsi
	jmp	.L28
	.p2align 4,,10
.L69:
	movq	%rbx, %r10
	movq	%r8, %r11
	movq	%rsi, %rdi
/APP
 # 2563 "../autogenerated_inline_func.h" 1
	addb	$-1, %al
	movq	(%r10), %rcx
	sbbq	(%r11), %rcx
	movq	%rcx, (%rdi)
	movq	8(%r10), %rcx
	sbbq	8(%r11), %rcx
	movq	%rcx, 8(%rdi)
	movq	16(%r10), %rcx
	sbbq	16(%r11), %rcx
	movq	%rcx, 16(%rdi)
	movq	24(%r10), %rcx
	sbbq	24(%r11), %rcx
	movq	%rcx, 24(%rdi)
	movq	32(%r10), %rcx
	sbbq	32(%r11), %rcx
	movq	%rcx, 32(%rdi)
	movq	40(%r10), %rcx
	sbbq	40(%r11), %rcx
	movq	%rcx, 40(%rdi)
	movq	48(%r10), %rcx
	sbbq	48(%r11), %rcx
	movq	%rcx, 48(%rdi)
	movq	56(%r10), %rcx
	sbbq	56(%r11), %rcx
	movq	%rcx, 56(%rdi)
	movq	64(%r10), %rcx
	sbbq	64(%r11), %rcx
	movq	%rcx, 64(%rdi)
	movq	72(%r10), %rcx
	sbbq	72(%r11), %rcx
	movq	%rcx, 72(%rdi)
	movq	80(%r10), %rcx
	sbbq	80(%r11), %rcx
	movq	%rcx, 80(%rdi)
	movq	88(%r10), %rcx
	sbbq	88(%r11), %rcx
	movq	%rcx, 88(%rdi)
	movq	96(%r10), %rcx
	sbbq	96(%r11), %rcx
	movq	%rcx, 96(%rdi)
	movq	104(%r10), %rcx
	sbbq	104(%r11), %rcx
	movq	%rcx, 104(%rdi)
	movq	112(%r10), %rcx
	sbbq	112(%r11), %rcx
	movq	%rcx, 112(%rdi)
	movq	120(%r10), %rcx
	sbbq	120(%r11), %rcx
	movq	%rcx, 120(%rdi)
	setc	%al
 # 0 "" 2
/NO_APP
	subq	$-128, %rbx
	subq	$-128, %r8
	subq	$-128, %rsi
	jmp	.L27
	.p2align 4,,10
.L39:
	xorl	%eax, %eax
	jmp	.L25
.L40:
	movl	$-258, %eax
	jmp	.L24
	.seh_endproc
	.p2align 4,,15
	.globl	PMC_Subtruct_I_X
	.def	PMC_Subtruct_I_X;	.scl	2;	.type	32;	.endef
	.seh_proc	PMC_Subtruct_I_X
PMC_Subtruct_I_X:
	pushq	%rdi
	.seh_pushreg	%rdi
	pushq	%rsi
	.seh_pushreg	%rsi
	pushq	%rbx
	.seh_pushreg	%rbx
	subq	$48, %rsp
	.seh_stackalloc	48
	.seh_endprologue
	testq	%rdx, %rdx
	movl	%ecx, %esi
	movq	%rdx, %rbx
	movq	%r8, %rdi
	je	.L77
	testq	%r8, %r8
	je	.L77
	movq	%rdx, %rcx
	call	CheckNumber
	testl	%eax, %eax
	jne	.L72
	movzbl	40(%rbx), %edx
	andl	$2, %edx
	testl	%esi, %esi
	jne	.L74
	testb	%dl, %dl
	je	.L79
	movl	$0, (%rdi)
.L72:
	addq	$48, %rsp
	popq	%rbx
	popq	%rsi
	popq	%rdi
	ret
	.p2align 4,,10
.L74:
	testb	%dl, %dl
	jne	.L76
	movl	$31, %edx
/APP
 # 597 "../pmc_inline_func.h" 1
	bsrl %esi, %ecx
 # 0 "" 2
/NO_APP
	subl	%ecx, %edx
	movl	$32, %ecx
	movslq	%edx, %rdx
	subq	%rdx, %rcx
	cmpq	16(%rbx), %rcx
	jb	.L79
	movq	56(%rbx), %rdx
	subq	(%rdx), %rsi
	jb	.L79
.L76:
	movl	%esi, (%rdi)
	addq	$48, %rsp
	popq	%rbx
	popq	%rsi
	popq	%rdi
	ret
.L79:
	movl	$-2, %eax
	jmp	.L72
	.p2align 4,,10
.L77:
	movl	$-1, %eax
	jmp	.L72
	.seh_endproc
	.p2align 4,,15
	.globl	PMC_Subtruct_X_I
	.def	PMC_Subtruct_X_I;	.scl	2;	.type	32;	.endef
	.seh_proc	PMC_Subtruct_X_I
PMC_Subtruct_X_I:
	pushq	%rbp
	.seh_pushreg	%rbp
	pushq	%rdi
	.seh_pushreg	%rdi
	pushq	%rsi
	.seh_pushreg	%rsi
	pushq	%rbx
	.seh_pushreg	%rbx
	subq	$56, %rsp
	.seh_stackalloc	56
	.seh_endprologue
	testq	%r8, %r8
	movq	%rcx, %rbx
	movl	%edx, %ebp
	movq	%r8, %rdi
	je	.L90
	testq	%rcx, %rcx
	je	.L90
	call	CheckNumber
	testl	%eax, %eax
	movl	%eax, %esi
	jne	.L80
	testb	$2, 40(%rbx)
	je	.L82
	testl	%ebp, %ebp
	jne	.L91
	movq	.refptr.number_zero(%rip), %rax
	movq	%rax, (%rdi)
.L80:
	movl	%esi, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rsi
	popq	%rdi
	popq	%rbp
	ret
	.p2align 4,,10
.L82:
	testl	%ebp, %ebp
	je	.L100
	movq	16(%rbx), %rdx
	movl	$31, %eax
/APP
 # 597 "../pmc_inline_func.h" 1
	bsrl %ebp, %ecx
 # 0 "" 2
/NO_APP
	subl	%ecx, %eax
	movl	$32, %ecx
	cltq
	subq	%rax, %rcx
	cmpq	%rcx, %rdx
	jnb	.L101
.L91:
	movl	$-2, %esi
	movl	%esi, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rsi
	popq	%rdi
	popq	%rbp
	ret
	.p2align 4,,10
.L101:
	leaq	32(%rsp), %rcx
	leaq	40(%rsp), %r8
	call	AllocateNumber
	testl	%eax, %eax
	jne	.L92
	movq	32(%rsp), %rax
	movl	%ebp, %r8d
	movq	8(%rbx), %rdx
	movq	56(%rbx), %rcx
	movq	56(%rax), %r9
	call	Subtruct_X_1W.isra.0
	testl	%eax, %eax
	movl	%eax, %ebx
	jne	.L102
	movq	32(%rsp), %rax
	movq	40(%rsp), %rdx
	movq	56(%rax), %rcx
	call	CheckBlockLight
	testl	%eax, %eax
	jne	.L92
	movq	32(%rsp), %rcx
	call	CommitNumber
	movq	32(%rsp), %rcx
	testb	$2, 40(%rcx)
	je	.L89
	call	DeallocateNumber
	movq	.refptr.number_zero(%rip), %rcx
	jmp	.L89
	.p2align 4,,10
.L92:
	movl	%eax, %esi
	movl	%esi, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rsi
	popq	%rdi
	popq	%rbp
	ret
	.p2align 4,,10
.L100:
	leaq	32(%rsp), %rdx
	movq	%rbx, %rcx
	call	DuplicateNumber
	movq	32(%rsp), %rcx
	testl	%eax, %eax
	jne	.L92
.L89:
	movq	%rcx, (%rdi)
	jmp	.L80
	.p2align 4,,10
.L102:
	movq	32(%rsp), %rcx
	movl	%ebx, %esi
	call	DeallocateNumber
	cmpl	$-258, %ebx
	jne	.L80
	jmp	.L91
	.p2align 4,,10
.L90:
	movl	$-1, %esi
	jmp	.L80
	.seh_endproc
	.p2align 4,,15
	.globl	PMC_Subtruct_L_X
	.def	PMC_Subtruct_L_X;	.scl	2;	.type	32;	.endef
	.seh_proc	PMC_Subtruct_L_X
PMC_Subtruct_L_X:
	pushq	%rdi
	.seh_pushreg	%rdi
	pushq	%rsi
	.seh_pushreg	%rsi
	pushq	%rbx
	.seh_pushreg	%rbx
	subq	$48, %rsp
	.seh_stackalloc	48
	.seh_endprologue
	testq	%rdx, %rdx
	movq	%rcx, %rdi
	movq	%rdx, %rbx
	movq	%r8, %rsi
	je	.L108
	testq	%r8, %r8
	je	.L108
	movq	%rdx, %rcx
	call	CheckNumber
	testl	%eax, %eax
	jne	.L103
	movzbl	40(%rbx), %edx
	andl	$2, %edx
	testq	%rdi, %rdi
	jne	.L105
	testb	%dl, %dl
	je	.L110
	movq	$0, (%rsi)
.L103:
	addq	$48, %rsp
	popq	%rbx
	popq	%rsi
	popq	%rdi
	ret
	.p2align 4,,10
.L105:
	testb	%dl, %dl
	jne	.L107
	movl	$63, %edx
/APP
 # 641 "../pmc_inline_func.h" 1
	bsrq %rdi, %rcx
 # 0 "" 2
/NO_APP
	subl	%ecx, %edx
	movl	$64, %ecx
	movslq	%edx, %rdx
	subq	%rdx, %rcx
	cmpq	16(%rbx), %rcx
	jb	.L110
	movq	56(%rbx), %rdx
	subq	(%rdx), %rdi
	jb	.L110
.L107:
	movq	%rdi, (%rsi)
	addq	$48, %rsp
	popq	%rbx
	popq	%rsi
	popq	%rdi
	ret
.L110:
	movl	$-2, %eax
	jmp	.L103
	.p2align 4,,10
.L108:
	movl	$-1, %eax
	jmp	.L103
	.seh_endproc
	.p2align 4,,15
	.globl	PMC_Subtruct_X_L
	.def	PMC_Subtruct_X_L;	.scl	2;	.type	32;	.endef
	.seh_proc	PMC_Subtruct_X_L
PMC_Subtruct_X_L:
	pushq	%rbp
	.seh_pushreg	%rbp
	pushq	%rdi
	.seh_pushreg	%rdi
	pushq	%rsi
	.seh_pushreg	%rsi
	pushq	%rbx
	.seh_pushreg	%rbx
	subq	$56, %rsp
	.seh_stackalloc	56
	.seh_endprologue
	testq	%r8, %r8
	movq	%rcx, %rbx
	movq	%rdx, %rbp
	movq	%r8, %rdi
	je	.L120
	testq	%rcx, %rcx
	je	.L120
	call	CheckNumber
	testl	%eax, %eax
	movl	%eax, %esi
	jne	.L111
	testb	$2, 40(%rbx)
	je	.L113
	testq	%rbp, %rbp
	jne	.L121
	movq	.refptr.number_zero(%rip), %rax
	movq	%rax, (%rdi)
.L111:
	movl	%esi, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rsi
	popq	%rdi
	popq	%rbp
	ret
	.p2align 4,,10
.L113:
	testq	%rbp, %rbp
	je	.L126
	movq	16(%rbx), %rdx
	movl	$63, %eax
/APP
 # 641 "../pmc_inline_func.h" 1
	bsrq %rbp, %rcx
 # 0 "" 2
/NO_APP
	subl	%ecx, %eax
	movl	$64, %ecx
	cltq
	subq	%rax, %rcx
	cmpq	%rcx, %rdx
	jnb	.L127
.L121:
	movl	$-2, %esi
	movl	%esi, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rsi
	popq	%rdi
	popq	%rbp
	ret
	.p2align 4,,10
.L127:
	leaq	32(%rsp), %rcx
	leaq	40(%rsp), %r8
	call	AllocateNumber
	testl	%eax, %eax
	jne	.L122
	movq	32(%rsp), %rax
	movq	%rbp, %r8
	movq	8(%rbx), %rdx
	movq	56(%rbx), %rcx
	movq	56(%rax), %r9
	call	Subtruct_X_1W.isra.0
	testl	%eax, %eax
	movl	%eax, %ebx
	jne	.L128
	movq	32(%rsp), %rax
	movq	40(%rsp), %rdx
	movq	56(%rax), %rcx
	call	CheckBlockLight
	testl	%eax, %eax
	jne	.L122
	movq	32(%rsp), %rcx
	call	CommitNumber
	movq	32(%rsp), %rcx
	testb	$2, 40(%rcx)
	je	.L115
	call	DeallocateNumber
	movq	.refptr.number_zero(%rip), %rcx
	jmp	.L115
	.p2align 4,,10
.L122:
	movl	%eax, %esi
	movl	%esi, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rsi
	popq	%rdi
	popq	%rbp
	ret
	.p2align 4,,10
.L126:
	leaq	32(%rsp), %rdx
	movq	%rbx, %rcx
	call	DuplicateNumber
	testl	%eax, %eax
	jne	.L122
	movq	32(%rsp), %rcx
.L115:
	movq	%rcx, (%rdi)
	jmp	.L111
	.p2align 4,,10
.L128:
	movq	32(%rsp), %rcx
	movl	%ebx, %esi
	call	DeallocateNumber
	cmpl	$-258, %ebx
	jne	.L111
	jmp	.L121
	.p2align 4,,10
.L120:
	movl	$-1, %esi
	jmp	.L111
	.seh_endproc
	.p2align 4,,15
	.globl	PMC_Subtruct_X_X
	.def	PMC_Subtruct_X_X;	.scl	2;	.type	32;	.endef
	.seh_proc	PMC_Subtruct_X_X
PMC_Subtruct_X_X:
	pushq	%rbp
	.seh_pushreg	%rbp
	pushq	%rdi
	.seh_pushreg	%rdi
	pushq	%rsi
	.seh_pushreg	%rsi
	pushq	%rbx
	.seh_pushreg	%rbx
	subq	$72, %rsp
	.seh_stackalloc	72
	.seh_endprologue
	testq	%rdx, %rdx
	movq	%rdx, %rdi
	movq	%rcx, %rsi
	sete	%dl
	testq	%r8, %r8
	movq	%r8, %rbp
	sete	%al
	orb	%al, %dl
	jne	.L137
	testq	%rcx, %rcx
	je	.L137
	call	CheckNumber
	testl	%eax, %eax
	movl	%eax, %ebx
	je	.L143
.L129:
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rsi
	popq	%rdi
	popq	%rbp
	ret
	.p2align 4,,10
.L143:
	movq	%rdi, %rcx
	call	CheckNumber
	testl	%eax, %eax
	movl	%eax, %ebx
	jne	.L129
	movzbl	40(%rdi), %eax
	andl	$2, %eax
	testb	$2, 40(%rsi)
	jne	.L144
	testb	%al, %al
	jne	.L145
	movq	16(%rsi), %rdx
	cmpq	16(%rdi), %rdx
	jb	.L138
	leaq	48(%rsp), %rcx
	leaq	56(%rsp), %r8
	call	AllocateNumber
	testl	%eax, %eax
	je	.L146
.L139:
	movl	%eax, %ebx
	jmp	.L129
	.p2align 4,,10
.L144:
	testb	%al, %al
	je	.L138
	movq	.refptr.number_zero(%rip), %rax
	movq	%rax, 0(%rbp)
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rsi
	popq	%rdi
	popq	%rbp
	ret
.L147:
	movq	48(%rsp), %rcx
	movl	%esi, %ebx
	call	DeallocateNumber
	cmpl	$-258, %esi
	jne	.L129
	.p2align 4,,10
.L138:
	movl	$-2, %ebx
	jmp	.L129
	.p2align 4,,10
.L145:
	leaq	48(%rsp), %rdx
	movq	%rsi, %rcx
	call	DuplicateNumber
	testl	%eax, %eax
	jne	.L139
.L133:
	movq	48(%rsp), %rax
	movq	%rax, 0(%rbp)
	jmp	.L129
	.p2align 4,,10
.L146:
	movq	48(%rsp), %rax
	movq	8(%rsi), %rdx
	movq	56(%rsi), %rcx
	movq	8(%rdi), %r9
	movq	48(%rax), %r8
	movq	%r8, 40(%rsp)
	movq	56(%rax), %rax
	movq	56(%rdi), %r8
	movq	%rax, 32(%rsp)
	call	Subtruct_Imp
	testl	%eax, %eax
	movl	%eax, %esi
	jne	.L147
	movq	48(%rsp), %rax
	movq	56(%rsp), %rdx
	movq	56(%rax), %rcx
	call	CheckBlockLight
	testl	%eax, %eax
	jne	.L139
	movq	48(%rsp), %rcx
	call	CommitNumber
	jmp	.L133
	.p2align 4,,10
.L137:
	movl	$-1, %ebx
	jmp	.L129
	.seh_endproc
	.p2align 4,,15
	.globl	Initialize_Subtruct
	.def	Initialize_Subtruct;	.scl	2;	.type	32;	.endef
	.seh_proc	Initialize_Subtruct
Initialize_Subtruct:
	.seh_endprologue
	xorl	%eax, %eax
	ret
	.seh_endproc
	.ident	"GCC: (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0"
	.def	CheckNumber;	.scl	2;	.type	32;	.endef
	.def	AllocateNumber;	.scl	2;	.type	32;	.endef
	.def	CheckBlockLight;	.scl	2;	.type	32;	.endef
	.def	CommitNumber;	.scl	2;	.type	32;	.endef
	.def	DeallocateNumber;	.scl	2;	.type	32;	.endef
	.def	DuplicateNumber;	.scl	2;	.type	32;	.endef
	.section	.rdata$.refptr.number_zero, "dr"
	.globl	.refptr.number_zero
	.linkonce	discard
.refptr.number_zero:
	.quad	number_zero
