using System.Reflection;
using System;
using System.Text;
using System.IO;

namespace Palmtree.Math.CodeGen
{
    class Program
    {
        static void Main(string[] args)
        {
            var asm = Assembly.GetAssembly(typeof(Program));
            try
            {
                var target_file = new FileInfo(asm.Location).Directory.Parent.Parent.Parent.GetChildDirectory("Palmtree.Math.Core.Uint").GetChildFile("autogenerated_inline_func.h");
                if (target_file.Exists)
                {
                    var encoding = new UTF8Encoding(true);
                    using (var fs = new FileStream(target_file.FullName, FileMode.Truncate, FileAccess.ReadWrite))
                    using (var writer = new StreamWriter(fs, encoding))
                    {
                        writer.WriteLine(string.Join("\n", new string[]
                        {
                            "/*",
                            " * The MIT License",
                            " *",
                            " * Copyright 2019 Palmtree Software.",
                            " *",
                            " * Permission is hereby granted, free of charge, to any person obtaining a copy",
                            " * of this software and associated documentation files (the \"Software\"), to deal",
                            " * in the Software without restriction, including without limitation the rights",
                            " * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
                            " * copies of the Software, and to permit persons to whom the Software is",
                            " * furnished to do so, subject to the following conditions:",
                            " *",
                            " * The above copyright notice and this permission notice shall be included in",
                            "  * all copies or substantial portions of the Software.",
                            "  *",
                            " * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
                            " * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
                            " * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
                            " * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
                            " * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
                            " * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",
                            " * THE SOFTWARE.",
                            " */",
                            "",
                            "/* ",
                            " * File:   autogenerated.h",
                            " * Author: Lunor Kisasage",
                            " *",
                            " * Created on 2019/01/05, 0:18",
                            " */",
                            "",
                            "",
                            "#include \"pmc_internal.h\"",
                            "#include \"pmc_inline_func.h\"",
                            "",
                            "",
                            "#ifndef AUTOGENERATED_H",
                            "#define AUTOGENERATED_H",
                            "",
                            "#ifdef __cplusplus",
                            "extern \"C\" {",
                            "#endif",
                            "",
                            ""
                        }));

                        Generate(writer);

                        writer.WriteLine(string.Join("\n", new string[]
                        {
                            "",
                            "#ifdef __cplusplus",
                            "}",
                            "#endif",
                            "",
                            "#endif /* AUTOGENERATED_H */",
                            "",
                            "/*",
                            " * END OF FILE",
                            " */"
                        }));

                    }
                }
            }
            catch (IOException)
            {
            }
        }

        static void Generate(TextWriter writer)
        {
            writer.WriteLine("");
            GenerateFuncSet_ADD(writer, 32);
            writer.WriteLine("");
            GenerateFuncSet_ADD(writer, 16);
            writer.WriteLine("");
            GenerateFuncSet_ADD(writer, 8);
            writer.WriteLine("");
            GenerateFuncSet_ADD(writer, 4);
            writer.WriteLine("");
            GenerateFuncSet_ADD(writer, 2);
            writer.WriteLine("");
        }

        private static void GenerateFuncSet_ADD(TextWriter writer, int max_count)
        {
            GenerateFunc_ADD(writer, "ADD", max_count, "adc", "", "__UNIT_TYPE", "_ADD_UNIT");
            writer.WriteLine("");
            GenerateFunc_ADD(writer, "ADD", max_count, "adcx", "", "__UNIT_TYPE", "_ADDX_UNIT");
            writer.WriteLine("");
            GenerateFunc_ADD(writer, "ADD", max_count, "adox", "", "__UNIT_TYPE", "_ADDX_UNIT");
            writer.WriteLine("");
            GenerateFunc_ADD(writer, "SUBTRUCT", max_count, "sbb", "", "__UNIT_TYPE", "_SUBTRUCT_UNIT");
            writer.WriteLine("");
            GenerateFunc_ADD(writer, "ADD", max_count, "adc", "_DIV", "__UNIT_TYPE_DIV", "_ADD_UNIT_DIV");
            writer.WriteLine("");
            GenerateFunc_ADD(writer, "ADD", max_count, "adcx", "_DIV", "__UNIT_TYPE_DIV", "_ADDX_UNIT_DIV");
            writer.WriteLine("");
            GenerateFunc_ADD(writer, "ADD", max_count, "adox", "_DIV", "__UNIT_TYPE_DIV", "_ADDX_UNIT_DIV");
            writer.WriteLine("");
            GenerateFunc_ADD(writer, "SUBTRUCT", max_count, "sbb", "_DIV", "__UNIT_TYPE_DIV", "_SUBTRUCT_UNIT_DIV");
        }

        private static void GenerateFunc_ADD(TextWriter writer, string title_func, int max_count, string op, string suffix, string pointer_type, string alt_func_name)
        {
            writer.WriteLine(string.Format("__inline static char _{0}_{1}WORDS_{2}{3}(char c, {4}* xp, {4}* yp, {4}* zp)", title_func, max_count, op.ToUpper(), suffix, pointer_type));
            writer.WriteLine("{");
            writer.WriteLine("#ifdef _MSC_VER");
            for (int count = 0; count < max_count; ++count)
                writer.WriteLine(string.Format("    c = {1}(c, xp[{0}], yp[{0}], &zp[{0}]);", count, alt_func_name));
            writer.WriteLine("#elif defined(__GNUC__)");
            writer.WriteLine("#ifdef _M_IX86");
            GenerateASM_ADD(writer, max_count, op, 32, "l", "ecx");
            writer.WriteLine("#elif defined(_M_IX64)");
            GenerateASM_ADD(writer, max_count, op, 64, "q", "rcx");
            writer.WriteLine("#else");
            writer.WriteLine("#error unknown platform");
            writer.WriteLine("#endif");
            writer.WriteLine("#else");
            writer.WriteLine("#error unknown compiler");
            writer.WriteLine("#endif");
            writer.WriteLine("    return (c);");
            writer.WriteLine("}");
        }

        private static void GenerateASM_ADD(TextWriter writer, int max_count, string op_add, int bit_size, string suffix, string temp_reg)
        {
            writer.WriteLine("    __asm__ volatile (");
            writer.WriteLine("        \"addb\\t$-1, %0\\n\\t\"");
            for (int count = 0; count < max_count; ++count)
            {
                writer.WriteLine(string.Format("        \"{0}{1}\\t{2}(%{3}), %%{4}\\n\\t\"", "mov", suffix, count == 0 ? "" : (bit_size / 8 * count).ToString(), "1", temp_reg));
                writer.WriteLine(string.Format("        \"{0}{1}\\t{2}(%{3}), %%{4}\\n\\t\"", op_add, suffix, count == 0 ? "" : (bit_size / 8 * count).ToString(), "2", temp_reg));
                writer.WriteLine(string.Format("        \"{0}{1}\\t%%{4}, {2}(%{3})\\n\\t\"", "mov", suffix, count == 0 ? "" : (bit_size / 8 * count).ToString(), "3", temp_reg));
            }
            writer.WriteLine("        \"setc\\t%0\"");
            writer.WriteLine("        : \"+r\"(c), \"+r\"(xp), \"+r\"(yp), \"+r\"(zp)");
            writer.WriteLine("        :");
            writer.WriteLine(string.Format("        : \"cc\", \"memory\", \"%{0}\"", temp_reg));
            writer.WriteLine(");");
        }
    }
}
